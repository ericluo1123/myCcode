

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Mar 09 15:09:03 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F723A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,inline,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,inline,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    38                           	psect	text25,local,class=CODE,merge=1,delta=2
    39                           	psect	text26,local,class=CODE,merge=1,delta=2
    40                           	psect	text27,local,class=CODE,merge=1,delta=2
    41                           	psect	text28,local,class=CODE,merge=1,delta=2
    42                           	psect	text29,local,class=CODE,merge=1,delta=2
    43                           	psect	text30,local,class=CODE,merge=1,delta=2
    44                           	psect	text31,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text32,local,class=CODE,merge=1,delta=2
    46                           	psect	text33,local,class=CODE,merge=1,delta=2
    47                           	psect	text34,local,class=CODE,merge=1,delta=2
    48                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text36,local,class=CODE,merge=1,delta=2
    50                           	psect	text37,local,class=CODE,merge=1,delta=2
    51                           	psect	text38,local,class=CODE,merge=1,delta=2
    52                           	psect	text39,local,class=CODE,merge=1,delta=2
    53                           	psect	text40,local,class=CODE,merge=1,delta=2
    54                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text42,local,class=CODE,merge=1,delta=2
    56                           	psect	text43,local,class=CODE,merge=1,delta=2
    57                           	psect	text44,local,class=CODE,merge=1,delta=2
    58                           	psect	text45,local,class=CODE,merge=1,delta=2
    59                           	psect	text46,local,class=CODE,merge=1,delta=2
    60                           	psect	text47,local,class=CODE,merge=1,delta=2
    61                           	psect	text48,local,class=CODE,merge=1,delta=2
    62                           	psect	text49,local,class=CODE,merge=1,delta=2
    63                           	psect	text50,local,class=CODE,merge=1,delta=2
    64                           	psect	text51,local,class=CODE,merge=1,delta=2
    65                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text53,local,class=CODE,merge=1,delta=2
    67                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    68                           	psect	text55,local,class=CODE,merge=1,delta=2
    69                           	psect	text56,local,class=CODE,merge=1,delta=2
    70                           	psect	text57,local,class=CODE,merge=1,delta=2
    71                           	psect	text58,local,class=CODE,merge=1,delta=2
    72                           	psect	text59,local,class=CODE,merge=1,delta=2
    73                           	psect	text60,local,class=CODE,merge=1,delta=2
    74                           	psect	text61,local,class=CODE,merge=1,delta=2
    75                           	psect	text62,local,class=CODE,merge=1,delta=2
    76                           	psect	text63,local,class=CODE,merge=1,delta=2
    77                           	psect	text64,local,class=CODE,merge=1,delta=2
    78                           	psect	text65,local,class=CODE,merge=1,delta=2
    79                           	psect	text66,local,class=CODE,merge=1,delta=2
    80                           	psect	text67,local,class=CODE,merge=1,delta=2
    81                           	psect	text68,local,class=CODE,merge=1,delta=2
    82                           	psect	text69,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    84                           	psect	text71,local,class=CODE,merge=1,inline,delta=2
    85                           	psect	text72,local,class=CODE,merge=1,inline,delta=2
    86                           	psect	text73,local,class=CODE,merge=1,inline,delta=2
    87                           	psect	text74,local,class=CODE,merge=1,delta=2
    88                           	psect	intentry,global,class=CODE,delta=2
    89                           	psect	text75,local,class=CODE,merge=1,inline,delta=2
    90                           	dabs	1,0x7E,2
    91  0000                     	;# 
    92  0001                     	;# 
    93  0002                     	;# 
    94  0003                     	;# 
    95  0004                     	;# 
    96  0005                     	;# 
    97  0006                     	;# 
    98  0007                     	;# 
    99  0009                     	;# 
   100  000A                     	;# 
   101  000B                     	;# 
   102  000C                     	;# 
   103  000D                     	;# 
   104  000E                     	;# 
   105  000E                     	;# 
   106  000F                     	;# 
   107  0010                     	;# 
   108  0011                     	;# 
   109  0012                     	;# 
   110  0013                     	;# 
   111  0014                     	;# 
   112  0015                     	;# 
   113  0015                     	;# 
   114  0016                     	;# 
   115  0017                     	;# 
   116  0018                     	;# 
   117  0019                     	;# 
   118  001A                     	;# 
   119  001B                     	;# 
   120  001B                     	;# 
   121  001C                     	;# 
   122  001D                     	;# 
   123  001E                     	;# 
   124  001F                     	;# 
   125  0081                     	;# 
   126  0085                     	;# 
   127  0086                     	;# 
   128  0087                     	;# 
   129  0089                     	;# 
   130  008C                     	;# 
   131  008D                     	;# 
   132  008E                     	;# 
   133  008F                     	;# 
   134  0090                     	;# 
   135  0091                     	;# 
   136  0092                     	;# 
   137  0093                     	;# 
   138  0093                     	;# 
   139  0094                     	;# 
   140  0095                     	;# 
   141  0095                     	;# 
   142  0096                     	;# 
   143  0096                     	;# 
   144  0098                     	;# 
   145  0099                     	;# 
   146  009C                     	;# 
   147  009D                     	;# 
   148  009F                     	;# 
   149  0108                     	;# 
   150  0109                     	;# 
   151  010C                     	;# 
   152  010C                     	;# 
   153  010D                     	;# 
   154  010D                     	;# 
   155  010E                     	;# 
   156  010F                     	;# 
   157  0185                     	;# 
   158  0186                     	;# 
   159  018C                     	;# 
   160  0000                     	;# 
   161  0001                     	;# 
   162  0002                     	;# 
   163  0003                     	;# 
   164  0004                     	;# 
   165  0005                     	;# 
   166  0006                     	;# 
   167  0007                     	;# 
   168  0009                     	;# 
   169  000A                     	;# 
   170  000B                     	;# 
   171  000C                     	;# 
   172  000D                     	;# 
   173  000E                     	;# 
   174  000E                     	;# 
   175  000F                     	;# 
   176  0010                     	;# 
   177  0011                     	;# 
   178  0012                     	;# 
   179  0013                     	;# 
   180  0014                     	;# 
   181  0015                     	;# 
   182  0015                     	;# 
   183  0016                     	;# 
   184  0017                     	;# 
   185  0018                     	;# 
   186  0019                     	;# 
   187  001A                     	;# 
   188  001B                     	;# 
   189  001B                     	;# 
   190  001C                     	;# 
   191  001D                     	;# 
   192  001E                     	;# 
   193  001F                     	;# 
   194  0081                     	;# 
   195  0085                     	;# 
   196  0086                     	;# 
   197  0087                     	;# 
   198  0089                     	;# 
   199  008C                     	;# 
   200  008D                     	;# 
   201  008E                     	;# 
   202  008F                     	;# 
   203  0090                     	;# 
   204  0091                     	;# 
   205  0092                     	;# 
   206  0093                     	;# 
   207  0093                     	;# 
   208  0094                     	;# 
   209  0095                     	;# 
   210  0095                     	;# 
   211  0096                     	;# 
   212  0096                     	;# 
   213  0098                     	;# 
   214  0099                     	;# 
   215  009C                     	;# 
   216  009D                     	;# 
   217  009F                     	;# 
   218  0108                     	;# 
   219  0109                     	;# 
   220  010C                     	;# 
   221  010C                     	;# 
   222  010D                     	;# 
   223  010D                     	;# 
   224  010E                     	;# 
   225  010F                     	;# 
   226  0185                     	;# 
   227  0186                     	;# 
   228  018C                     	;# 
   229  0000                     	;# 
   230  0001                     	;# 
   231  0002                     	;# 
   232  0003                     	;# 
   233  0004                     	;# 
   234  0005                     	;# 
   235  0006                     	;# 
   236  0007                     	;# 
   237  0009                     	;# 
   238  000A                     	;# 
   239  000B                     	;# 
   240  000C                     	;# 
   241  000D                     	;# 
   242  000E                     	;# 
   243  000E                     	;# 
   244  000F                     	;# 
   245  0010                     	;# 
   246  0011                     	;# 
   247  0012                     	;# 
   248  0013                     	;# 
   249  0014                     	;# 
   250  0015                     	;# 
   251  0015                     	;# 
   252  0016                     	;# 
   253  0017                     	;# 
   254  0018                     	;# 
   255  0019                     	;# 
   256  001A                     	;# 
   257  001B                     	;# 
   258  001B                     	;# 
   259  001C                     	;# 
   260  001D                     	;# 
   261  001E                     	;# 
   262  001F                     	;# 
   263  0081                     	;# 
   264  0085                     	;# 
   265  0086                     	;# 
   266  0087                     	;# 
   267  0089                     	;# 
   268  008C                     	;# 
   269  008D                     	;# 
   270  008E                     	;# 
   271  008F                     	;# 
   272  0090                     	;# 
   273  0091                     	;# 
   274  0092                     	;# 
   275  0093                     	;# 
   276  0093                     	;# 
   277  0094                     	;# 
   278  0095                     	;# 
   279  0095                     	;# 
   280  0096                     	;# 
   281  0096                     	;# 
   282  0098                     	;# 
   283  0099                     	;# 
   284  009C                     	;# 
   285  009D                     	;# 
   286  009F                     	;# 
   287  0108                     	;# 
   288  0109                     	;# 
   289  010C                     	;# 
   290  010C                     	;# 
   291  010D                     	;# 
   292  010D                     	;# 
   293  010E                     	;# 
   294  010F                     	;# 
   295  0185                     	;# 
   296  0186                     	;# 
   297  018C                     	;# 
   298  0000                     	;# 
   299  0001                     	;# 
   300  0002                     	;# 
   301  0003                     	;# 
   302  0004                     	;# 
   303  0005                     	;# 
   304  0006                     	;# 
   305  0007                     	;# 
   306  0009                     	;# 
   307  000A                     	;# 
   308  000B                     	;# 
   309  000C                     	;# 
   310  000D                     	;# 
   311  000E                     	;# 
   312  000E                     	;# 
   313  000F                     	;# 
   314  0010                     	;# 
   315  0011                     	;# 
   316  0012                     	;# 
   317  0013                     	;# 
   318  0014                     	;# 
   319  0015                     	;# 
   320  0015                     	;# 
   321  0016                     	;# 
   322  0017                     	;# 
   323  0018                     	;# 
   324  0019                     	;# 
   325  001A                     	;# 
   326  001B                     	;# 
   327  001B                     	;# 
   328  001C                     	;# 
   329  001D                     	;# 
   330  001E                     	;# 
   331  001F                     	;# 
   332  0081                     	;# 
   333  0085                     	;# 
   334  0086                     	;# 
   335  0087                     	;# 
   336  0089                     	;# 
   337  008C                     	;# 
   338  008D                     	;# 
   339  008E                     	;# 
   340  008F                     	;# 
   341  0090                     	;# 
   342  0091                     	;# 
   343  0092                     	;# 
   344  0093                     	;# 
   345  0093                     	;# 
   346  0094                     	;# 
   347  0095                     	;# 
   348  0095                     	;# 
   349  0096                     	;# 
   350  0096                     	;# 
   351  0098                     	;# 
   352  0099                     	;# 
   353  009C                     	;# 
   354  009D                     	;# 
   355  009F                     	;# 
   356  0108                     	;# 
   357  0109                     	;# 
   358  010C                     	;# 
   359  010C                     	;# 
   360  010D                     	;# 
   361  010D                     	;# 
   362  010E                     	;# 
   363  010F                     	;# 
   364  0185                     	;# 
   365  0186                     	;# 
   366  018C                     	;# 
   367  0000                     	;# 
   368  0001                     	;# 
   369  0002                     	;# 
   370  0003                     	;# 
   371  0004                     	;# 
   372  0005                     	;# 
   373  0006                     	;# 
   374  0007                     	;# 
   375  0009                     	;# 
   376  000A                     	;# 
   377  000B                     	;# 
   378  000C                     	;# 
   379  000D                     	;# 
   380  000E                     	;# 
   381  000E                     	;# 
   382  000F                     	;# 
   383  0010                     	;# 
   384  0011                     	;# 
   385  0012                     	;# 
   386  0013                     	;# 
   387  0014                     	;# 
   388  0015                     	;# 
   389  0015                     	;# 
   390  0016                     	;# 
   391  0017                     	;# 
   392  0018                     	;# 
   393  0019                     	;# 
   394  001A                     	;# 
   395  001B                     	;# 
   396  001B                     	;# 
   397  001C                     	;# 
   398  001D                     	;# 
   399  001E                     	;# 
   400  001F                     	;# 
   401  0081                     	;# 
   402  0085                     	;# 
   403  0086                     	;# 
   404  0087                     	;# 
   405  0089                     	;# 
   406  008C                     	;# 
   407  008D                     	;# 
   408  008E                     	;# 
   409  008F                     	;# 
   410  0090                     	;# 
   411  0091                     	;# 
   412  0092                     	;# 
   413  0093                     	;# 
   414  0093                     	;# 
   415  0094                     	;# 
   416  0095                     	;# 
   417  0095                     	;# 
   418  0096                     	;# 
   419  0096                     	;# 
   420  0098                     	;# 
   421  0099                     	;# 
   422  009C                     	;# 
   423  009D                     	;# 
   424  009F                     	;# 
   425  0108                     	;# 
   426  0109                     	;# 
   427  010C                     	;# 
   428  010C                     	;# 
   429  010D                     	;# 
   430  010D                     	;# 
   431  010E                     	;# 
   432  010F                     	;# 
   433  0185                     	;# 
   434  0186                     	;# 
   435  018C                     	;# 
   436  0000                     	;# 
   437  0001                     	;# 
   438  0002                     	;# 
   439  0003                     	;# 
   440  0004                     	;# 
   441  0005                     	;# 
   442  0006                     	;# 
   443  0007                     	;# 
   444  0009                     	;# 
   445  000A                     	;# 
   446  000B                     	;# 
   447  000C                     	;# 
   448  000D                     	;# 
   449  000E                     	;# 
   450  000E                     	;# 
   451  000F                     	;# 
   452  0010                     	;# 
   453  0011                     	;# 
   454  0012                     	;# 
   455  0013                     	;# 
   456  0014                     	;# 
   457  0015                     	;# 
   458  0015                     	;# 
   459  0016                     	;# 
   460  0017                     	;# 
   461  0018                     	;# 
   462  0019                     	;# 
   463  001A                     	;# 
   464  001B                     	;# 
   465  001B                     	;# 
   466  001C                     	;# 
   467  001D                     	;# 
   468  001E                     	;# 
   469  001F                     	;# 
   470  0081                     	;# 
   471  0085                     	;# 
   472  0086                     	;# 
   473  0087                     	;# 
   474  0089                     	;# 
   475  008C                     	;# 
   476  008D                     	;# 
   477  008E                     	;# 
   478  008F                     	;# 
   479  0090                     	;# 
   480  0091                     	;# 
   481  0092                     	;# 
   482  0093                     	;# 
   483  0093                     	;# 
   484  0094                     	;# 
   485  0095                     	;# 
   486  0095                     	;# 
   487  0096                     	;# 
   488  0096                     	;# 
   489  0098                     	;# 
   490  0099                     	;# 
   491  009C                     	;# 
   492  009D                     	;# 
   493  009F                     	;# 
   494  0108                     	;# 
   495  0109                     	;# 
   496  010C                     	;# 
   497  010C                     	;# 
   498  010D                     	;# 
   499  010D                     	;# 
   500  010E                     	;# 
   501  010F                     	;# 
   502  0185                     	;# 
   503  0186                     	;# 
   504  018C                     	;# 
   505  0000                     	;# 
   506  0001                     	;# 
   507  0002                     	;# 
   508  0003                     	;# 
   509  0004                     	;# 
   510  0005                     	;# 
   511  0006                     	;# 
   512  0007                     	;# 
   513  0009                     	;# 
   514  000A                     	;# 
   515  000B                     	;# 
   516  000C                     	;# 
   517  000D                     	;# 
   518  000E                     	;# 
   519  000E                     	;# 
   520  000F                     	;# 
   521  0010                     	;# 
   522  0011                     	;# 
   523  0012                     	;# 
   524  0013                     	;# 
   525  0014                     	;# 
   526  0015                     	;# 
   527  0015                     	;# 
   528  0016                     	;# 
   529  0017                     	;# 
   530  0018                     	;# 
   531  0019                     	;# 
   532  001A                     	;# 
   533  001B                     	;# 
   534  001B                     	;# 
   535  001C                     	;# 
   536  001D                     	;# 
   537  001E                     	;# 
   538  001F                     	;# 
   539  0081                     	;# 
   540  0085                     	;# 
   541  0086                     	;# 
   542  0087                     	;# 
   543  0089                     	;# 
   544  008C                     	;# 
   545  008D                     	;# 
   546  008E                     	;# 
   547  008F                     	;# 
   548  0090                     	;# 
   549  0091                     	;# 
   550  0092                     	;# 
   551  0093                     	;# 
   552  0093                     	;# 
   553  0094                     	;# 
   554  0095                     	;# 
   555  0095                     	;# 
   556  0096                     	;# 
   557  0096                     	;# 
   558  0098                     	;# 
   559  0099                     	;# 
   560  009C                     	;# 
   561  009D                     	;# 
   562  009F                     	;# 
   563  0108                     	;# 
   564  0109                     	;# 
   565  010C                     	;# 
   566  010C                     	;# 
   567  010D                     	;# 
   568  010D                     	;# 
   569  010E                     	;# 
   570  010F                     	;# 
   571  0185                     	;# 
   572  0186                     	;# 
   573  018C                     	;# 
   574  0000                     	;# 
   575  0001                     	;# 
   576  0002                     	;# 
   577  0003                     	;# 
   578  0004                     	;# 
   579  0005                     	;# 
   580  0006                     	;# 
   581  0007                     	;# 
   582  0009                     	;# 
   583  000A                     	;# 
   584  000B                     	;# 
   585  000C                     	;# 
   586  000D                     	;# 
   587  000E                     	;# 
   588  000E                     	;# 
   589  000F                     	;# 
   590  0010                     	;# 
   591  0011                     	;# 
   592  0012                     	;# 
   593  0013                     	;# 
   594  0014                     	;# 
   595  0015                     	;# 
   596  0015                     	;# 
   597  0016                     	;# 
   598  0017                     	;# 
   599  0018                     	;# 
   600  0019                     	;# 
   601  001A                     	;# 
   602  001B                     	;# 
   603  001B                     	;# 
   604  001C                     	;# 
   605  001D                     	;# 
   606  001E                     	;# 
   607  001F                     	;# 
   608  0081                     	;# 
   609  0085                     	;# 
   610  0086                     	;# 
   611  0087                     	;# 
   612  0089                     	;# 
   613  008C                     	;# 
   614  008D                     	;# 
   615  008E                     	;# 
   616  008F                     	;# 
   617  0090                     	;# 
   618  0091                     	;# 
   619  0092                     	;# 
   620  0093                     	;# 
   621  0093                     	;# 
   622  0094                     	;# 
   623  0095                     	;# 
   624  0095                     	;# 
   625  0096                     	;# 
   626  0096                     	;# 
   627  0098                     	;# 
   628  0099                     	;# 
   629  009C                     	;# 
   630  009D                     	;# 
   631  009F                     	;# 
   632  0108                     	;# 
   633  0109                     	;# 
   634  010C                     	;# 
   635  010C                     	;# 
   636  010D                     	;# 
   637  010D                     	;# 
   638  010E                     	;# 
   639  010F                     	;# 
   640  0185                     	;# 
   641  0186                     	;# 
   642  018C                     	;# 
   643  0000                     	;# 
   644  0001                     	;# 
   645  0002                     	;# 
   646  0003                     	;# 
   647  0004                     	;# 
   648  0005                     	;# 
   649  0006                     	;# 
   650  0007                     	;# 
   651  0009                     	;# 
   652  000A                     	;# 
   653  000B                     	;# 
   654  000C                     	;# 
   655  000D                     	;# 
   656  000E                     	;# 
   657  000E                     	;# 
   658  000F                     	;# 
   659  0010                     	;# 
   660  0011                     	;# 
   661  0012                     	;# 
   662  0013                     	;# 
   663  0014                     	;# 
   664  0015                     	;# 
   665  0015                     	;# 
   666  0016                     	;# 
   667  0017                     	;# 
   668  0018                     	;# 
   669  0019                     	;# 
   670  001A                     	;# 
   671  001B                     	;# 
   672  001B                     	;# 
   673  001C                     	;# 
   674  001D                     	;# 
   675  001E                     	;# 
   676  001F                     	;# 
   677  0081                     	;# 
   678  0085                     	;# 
   679  0086                     	;# 
   680  0087                     	;# 
   681  0089                     	;# 
   682  008C                     	;# 
   683  008D                     	;# 
   684  008E                     	;# 
   685  008F                     	;# 
   686  0090                     	;# 
   687  0091                     	;# 
   688  0092                     	;# 
   689  0093                     	;# 
   690  0093                     	;# 
   691  0094                     	;# 
   692  0095                     	;# 
   693  0095                     	;# 
   694  0096                     	;# 
   695  0096                     	;# 
   696  0098                     	;# 
   697  0099                     	;# 
   698  009C                     	;# 
   699  009D                     	;# 
   700  009F                     	;# 
   701  0108                     	;# 
   702  0109                     	;# 
   703  010C                     	;# 
   704  010C                     	;# 
   705  010D                     	;# 
   706  010D                     	;# 
   707  010E                     	;# 
   708  010F                     	;# 
   709  0185                     	;# 
   710  0186                     	;# 
   711  018C                     	;# 
   712  0000                     	;# 
   713  0001                     	;# 
   714  0002                     	;# 
   715  0003                     	;# 
   716  0004                     	;# 
   717  0005                     	;# 
   718  0006                     	;# 
   719  0007                     	;# 
   720  0009                     	;# 
   721  000A                     	;# 
   722  000B                     	;# 
   723  000C                     	;# 
   724  000D                     	;# 
   725  000E                     	;# 
   726  000E                     	;# 
   727  000F                     	;# 
   728  0010                     	;# 
   729  0011                     	;# 
   730  0012                     	;# 
   731  0013                     	;# 
   732  0014                     	;# 
   733  0015                     	;# 
   734  0015                     	;# 
   735  0016                     	;# 
   736  0017                     	;# 
   737  0018                     	;# 
   738  0019                     	;# 
   739  001A                     	;# 
   740  001B                     	;# 
   741  001B                     	;# 
   742  001C                     	;# 
   743  001D                     	;# 
   744  001E                     	;# 
   745  001F                     	;# 
   746  0081                     	;# 
   747  0085                     	;# 
   748  0086                     	;# 
   749  0087                     	;# 
   750  0089                     	;# 
   751  008C                     	;# 
   752  008D                     	;# 
   753  008E                     	;# 
   754  008F                     	;# 
   755  0090                     	;# 
   756  0091                     	;# 
   757  0092                     	;# 
   758  0093                     	;# 
   759  0093                     	;# 
   760  0094                     	;# 
   761  0095                     	;# 
   762  0095                     	;# 
   763  0096                     	;# 
   764  0096                     	;# 
   765  0098                     	;# 
   766  0099                     	;# 
   767  009C                     	;# 
   768  009D                     	;# 
   769  009F                     	;# 
   770  0108                     	;# 
   771  0109                     	;# 
   772  010C                     	;# 
   773  010C                     	;# 
   774  010D                     	;# 
   775  010D                     	;# 
   776  010E                     	;# 
   777  010F                     	;# 
   778  0185                     	;# 
   779  0186                     	;# 
   780  018C                     	;# 
   781  0000                     	;# 
   782  0001                     	;# 
   783  0002                     	;# 
   784  0003                     	;# 
   785  0004                     	;# 
   786  0005                     	;# 
   787  0006                     	;# 
   788  0007                     	;# 
   789  0009                     	;# 
   790  000A                     	;# 
   791  000B                     	;# 
   792  000C                     	;# 
   793  000D                     	;# 
   794  000E                     	;# 
   795  000E                     	;# 
   796  000F                     	;# 
   797  0010                     	;# 
   798  0011                     	;# 
   799  0012                     	;# 
   800  0013                     	;# 
   801  0014                     	;# 
   802  0015                     	;# 
   803  0015                     	;# 
   804  0016                     	;# 
   805  0017                     	;# 
   806  0018                     	;# 
   807  0019                     	;# 
   808  001A                     	;# 
   809  001B                     	;# 
   810  001B                     	;# 
   811  001C                     	;# 
   812  001D                     	;# 
   813  001E                     	;# 
   814  001F                     	;# 
   815  0081                     	;# 
   816  0085                     	;# 
   817  0086                     	;# 
   818  0087                     	;# 
   819  0089                     	;# 
   820  008C                     	;# 
   821  008D                     	;# 
   822  008E                     	;# 
   823  008F                     	;# 
   824  0090                     	;# 
   825  0091                     	;# 
   826  0092                     	;# 
   827  0093                     	;# 
   828  0093                     	;# 
   829  0094                     	;# 
   830  0095                     	;# 
   831  0095                     	;# 
   832  0096                     	;# 
   833  0096                     	;# 
   834  0098                     	;# 
   835  0099                     	;# 
   836  009C                     	;# 
   837  009D                     	;# 
   838  009F                     	;# 
   839  0108                     	;# 
   840  0109                     	;# 
   841  010C                     	;# 
   842  010C                     	;# 
   843  010D                     	;# 
   844  010D                     	;# 
   845  010E                     	;# 
   846  010F                     	;# 
   847  0185                     	;# 
   848  0186                     	;# 
   849  018C                     	;# 
   850  0000                     	;# 
   851  0001                     	;# 
   852  0002                     	;# 
   853  0003                     	;# 
   854  0004                     	;# 
   855  0005                     	;# 
   856  0006                     	;# 
   857  0007                     	;# 
   858  0009                     	;# 
   859  000A                     	;# 
   860  000B                     	;# 
   861  000C                     	;# 
   862  000D                     	;# 
   863  000E                     	;# 
   864  000E                     	;# 
   865  000F                     	;# 
   866  0010                     	;# 
   867  0011                     	;# 
   868  0012                     	;# 
   869  0013                     	;# 
   870  0014                     	;# 
   871  0015                     	;# 
   872  0015                     	;# 
   873  0016                     	;# 
   874  0017                     	;# 
   875  0018                     	;# 
   876  0019                     	;# 
   877  001A                     	;# 
   878  001B                     	;# 
   879  001B                     	;# 
   880  001C                     	;# 
   881  001D                     	;# 
   882  001E                     	;# 
   883  001F                     	;# 
   884  0081                     	;# 
   885  0085                     	;# 
   886  0086                     	;# 
   887  0087                     	;# 
   888  0089                     	;# 
   889  008C                     	;# 
   890  008D                     	;# 
   891  008E                     	;# 
   892  008F                     	;# 
   893  0090                     	;# 
   894  0091                     	;# 
   895  0092                     	;# 
   896  0093                     	;# 
   897  0093                     	;# 
   898  0094                     	;# 
   899  0095                     	;# 
   900  0095                     	;# 
   901  0096                     	;# 
   902  0096                     	;# 
   903  0098                     	;# 
   904  0099                     	;# 
   905  009C                     	;# 
   906  009D                     	;# 
   907  009F                     	;# 
   908  0108                     	;# 
   909  0109                     	;# 
   910  010C                     	;# 
   911  010C                     	;# 
   912  010D                     	;# 
   913  010D                     	;# 
   914  010E                     	;# 
   915  010F                     	;# 
   916  0185                     	;# 
   917  0186                     	;# 
   918  018C                     	;# 
   919  0000                     	;# 
   920  0001                     	;# 
   921  0002                     	;# 
   922  0003                     	;# 
   923  0004                     	;# 
   924  0005                     	;# 
   925  0006                     	;# 
   926  0007                     	;# 
   927  0009                     	;# 
   928  000A                     	;# 
   929  000B                     	;# 
   930  000C                     	;# 
   931  000D                     	;# 
   932  000E                     	;# 
   933  000E                     	;# 
   934  000F                     	;# 
   935  0010                     	;# 
   936  0011                     	;# 
   937  0012                     	;# 
   938  0013                     	;# 
   939  0014                     	;# 
   940  0015                     	;# 
   941  0015                     	;# 
   942  0016                     	;# 
   943  0017                     	;# 
   944  0018                     	;# 
   945  0019                     	;# 
   946  001A                     	;# 
   947  001B                     	;# 
   948  001B                     	;# 
   949  001C                     	;# 
   950  001D                     	;# 
   951  001E                     	;# 
   952  001F                     	;# 
   953  0081                     	;# 
   954  0085                     	;# 
   955  0086                     	;# 
   956  0087                     	;# 
   957  0089                     	;# 
   958  008C                     	;# 
   959  008D                     	;# 
   960  008E                     	;# 
   961  008F                     	;# 
   962  0090                     	;# 
   963  0091                     	;# 
   964  0092                     	;# 
   965  0093                     	;# 
   966  0093                     	;# 
   967  0094                     	;# 
   968  0095                     	;# 
   969  0095                     	;# 
   970  0096                     	;# 
   971  0096                     	;# 
   972  0098                     	;# 
   973  0099                     	;# 
   974  009C                     	;# 
   975  009D                     	;# 
   976  009F                     	;# 
   977  0108                     	;# 
   978  0109                     	;# 
   979  010C                     	;# 
   980  010C                     	;# 
   981  010D                     	;# 
   982  010D                     	;# 
   983  010E                     	;# 
   984  010F                     	;# 
   985  0185                     	;# 
   986  0186                     	;# 
   987  018C                     	;# 
   988  0000                     	;# 
   989  0001                     	;# 
   990  0002                     	;# 
   991  0003                     	;# 
   992  0004                     	;# 
   993  0005                     	;# 
   994  0006                     	;# 
   995  0007                     	;# 
   996  0009                     	;# 
   997  000A                     	;# 
   998  000B                     	;# 
   999  000C                     	;# 
  1000  000D                     	;# 
  1001  000E                     	;# 
  1002  000E                     	;# 
  1003  000F                     	;# 
  1004  0010                     	;# 
  1005  0011                     	;# 
  1006  0012                     	;# 
  1007  0013                     	;# 
  1008  0014                     	;# 
  1009  0015                     	;# 
  1010  0015                     	;# 
  1011  0016                     	;# 
  1012  0017                     	;# 
  1013  0018                     	;# 
  1014  0019                     	;# 
  1015  001A                     	;# 
  1016  001B                     	;# 
  1017  001B                     	;# 
  1018  001C                     	;# 
  1019  001D                     	;# 
  1020  001E                     	;# 
  1021  001F                     	;# 
  1022  0081                     	;# 
  1023  0085                     	;# 
  1024  0086                     	;# 
  1025  0087                     	;# 
  1026  0089                     	;# 
  1027  008C                     	;# 
  1028  008D                     	;# 
  1029  008E                     	;# 
  1030  008F                     	;# 
  1031  0090                     	;# 
  1032  0091                     	;# 
  1033  0092                     	;# 
  1034  0093                     	;# 
  1035  0093                     	;# 
  1036  0094                     	;# 
  1037  0095                     	;# 
  1038  0095                     	;# 
  1039  0096                     	;# 
  1040  0096                     	;# 
  1041  0098                     	;# 
  1042  0099                     	;# 
  1043  009C                     	;# 
  1044  009D                     	;# 
  1045  009F                     	;# 
  1046  0108                     	;# 
  1047  0109                     	;# 
  1048  010C                     	;# 
  1049  010C                     	;# 
  1050  010D                     	;# 
  1051  010D                     	;# 
  1052  010E                     	;# 
  1053  010F                     	;# 
  1054  0185                     	;# 
  1055  0186                     	;# 
  1056  018C                     	;# 
  1057  0000                     	;# 
  1058  0001                     	;# 
  1059  0002                     	;# 
  1060  0003                     	;# 
  1061  0004                     	;# 
  1062  0005                     	;# 
  1063  0006                     	;# 
  1064  0007                     	;# 
  1065  0009                     	;# 
  1066  000A                     	;# 
  1067  000B                     	;# 
  1068  000C                     	;# 
  1069  000D                     	;# 
  1070  000E                     	;# 
  1071  000E                     	;# 
  1072  000F                     	;# 
  1073  0010                     	;# 
  1074  0011                     	;# 
  1075  0012                     	;# 
  1076  0013                     	;# 
  1077  0014                     	;# 
  1078  0015                     	;# 
  1079  0015                     	;# 
  1080  0016                     	;# 
  1081  0017                     	;# 
  1082  0018                     	;# 
  1083  0019                     	;# 
  1084  001A                     	;# 
  1085  001B                     	;# 
  1086  001B                     	;# 
  1087  001C                     	;# 
  1088  001D                     	;# 
  1089  001E                     	;# 
  1090  001F                     	;# 
  1091  0081                     	;# 
  1092  0085                     	;# 
  1093  0086                     	;# 
  1094  0087                     	;# 
  1095  0089                     	;# 
  1096  008C                     	;# 
  1097  008D                     	;# 
  1098  008E                     	;# 
  1099  008F                     	;# 
  1100  0090                     	;# 
  1101  0091                     	;# 
  1102  0092                     	;# 
  1103  0093                     	;# 
  1104  0093                     	;# 
  1105  0094                     	;# 
  1106  0095                     	;# 
  1107  0095                     	;# 
  1108  0096                     	;# 
  1109  0096                     	;# 
  1110  0098                     	;# 
  1111  0099                     	;# 
  1112  009C                     	;# 
  1113  009D                     	;# 
  1114  009F                     	;# 
  1115  0108                     	;# 
  1116  0109                     	;# 
  1117  010C                     	;# 
  1118  010C                     	;# 
  1119  010D                     	;# 
  1120  010D                     	;# 
  1121  010E                     	;# 
  1122  010F                     	;# 
  1123  0185                     	;# 
  1124  0186                     	;# 
  1125  018C                     	;# 
  1126  0000                     	;# 
  1127  0001                     	;# 
  1128  0002                     	;# 
  1129  0003                     	;# 
  1130  0004                     	;# 
  1131  0005                     	;# 
  1132  0006                     	;# 
  1133  0007                     	;# 
  1134  0009                     	;# 
  1135  000A                     	;# 
  1136  000B                     	;# 
  1137  000C                     	;# 
  1138  000D                     	;# 
  1139  000E                     	;# 
  1140  000E                     	;# 
  1141  000F                     	;# 
  1142  0010                     	;# 
  1143  0011                     	;# 
  1144  0012                     	;# 
  1145  0013                     	;# 
  1146  0014                     	;# 
  1147  0015                     	;# 
  1148  0015                     	;# 
  1149  0016                     	;# 
  1150  0017                     	;# 
  1151  0018                     	;# 
  1152  0019                     	;# 
  1153  001A                     	;# 
  1154  001B                     	;# 
  1155  001B                     	;# 
  1156  001C                     	;# 
  1157  001D                     	;# 
  1158  001E                     	;# 
  1159  001F                     	;# 
  1160  0081                     	;# 
  1161  0085                     	;# 
  1162  0086                     	;# 
  1163  0087                     	;# 
  1164  0089                     	;# 
  1165  008C                     	;# 
  1166  008D                     	;# 
  1167  008E                     	;# 
  1168  008F                     	;# 
  1169  0090                     	;# 
  1170  0091                     	;# 
  1171  0092                     	;# 
  1172  0093                     	;# 
  1173  0093                     	;# 
  1174  0094                     	;# 
  1175  0095                     	;# 
  1176  0095                     	;# 
  1177  0096                     	;# 
  1178  0096                     	;# 
  1179  0098                     	;# 
  1180  0099                     	;# 
  1181  009C                     	;# 
  1182  009D                     	;# 
  1183  009F                     	;# 
  1184  0108                     	;# 
  1185  0109                     	;# 
  1186  010C                     	;# 
  1187  010C                     	;# 
  1188  010D                     	;# 
  1189  010D                     	;# 
  1190  010E                     	;# 
  1191  010F                     	;# 
  1192  0185                     	;# 
  1193  0186                     	;# 
  1194  018C                     	;# 
  1195  0000                     	;# 
  1196  0001                     	;# 
  1197  0002                     	;# 
  1198  0003                     	;# 
  1199  0004                     	;# 
  1200  0005                     	;# 
  1201  0006                     	;# 
  1202  0007                     	;# 
  1203  0009                     	;# 
  1204  000A                     	;# 
  1205  000B                     	;# 
  1206  000C                     	;# 
  1207  000D                     	;# 
  1208  000E                     	;# 
  1209  000E                     	;# 
  1210  000F                     	;# 
  1211  0010                     	;# 
  1212  0011                     	;# 
  1213  0012                     	;# 
  1214  0013                     	;# 
  1215  0014                     	;# 
  1216  0015                     	;# 
  1217  0015                     	;# 
  1218  0016                     	;# 
  1219  0017                     	;# 
  1220  0018                     	;# 
  1221  0019                     	;# 
  1222  001A                     	;# 
  1223  001B                     	;# 
  1224  001B                     	;# 
  1225  001C                     	;# 
  1226  001D                     	;# 
  1227  001E                     	;# 
  1228  001F                     	;# 
  1229  0081                     	;# 
  1230  0085                     	;# 
  1231  0086                     	;# 
  1232  0087                     	;# 
  1233  0089                     	;# 
  1234  008C                     	;# 
  1235  008D                     	;# 
  1236  008E                     	;# 
  1237  008F                     	;# 
  1238  0090                     	;# 
  1239  0091                     	;# 
  1240  0092                     	;# 
  1241  0093                     	;# 
  1242  0093                     	;# 
  1243  0094                     	;# 
  1244  0095                     	;# 
  1245  0095                     	;# 
  1246  0096                     	;# 
  1247  0096                     	;# 
  1248  0098                     	;# 
  1249  0099                     	;# 
  1250  009C                     	;# 
  1251  009D                     	;# 
  1252  009F                     	;# 
  1253  0108                     	;# 
  1254  0109                     	;# 
  1255  010C                     	;# 
  1256  010C                     	;# 
  1257  010D                     	;# 
  1258  010D                     	;# 
  1259  010E                     	;# 
  1260  010F                     	;# 
  1261  0185                     	;# 
  1262  0186                     	;# 
  1263  018C                     	;# 
  1264  0000                     	;# 
  1265  0001                     	;# 
  1266  0002                     	;# 
  1267  0003                     	;# 
  1268  0004                     	;# 
  1269  0005                     	;# 
  1270  0006                     	;# 
  1271  0007                     	;# 
  1272  0009                     	;# 
  1273  000A                     	;# 
  1274  000B                     	;# 
  1275  000C                     	;# 
  1276  000D                     	;# 
  1277  000E                     	;# 
  1278  000E                     	;# 
  1279  000F                     	;# 
  1280  0010                     	;# 
  1281  0011                     	;# 
  1282  0012                     	;# 
  1283  0013                     	;# 
  1284  0014                     	;# 
  1285  0015                     	;# 
  1286  0015                     	;# 
  1287  0016                     	;# 
  1288  0017                     	;# 
  1289  0018                     	;# 
  1290  0019                     	;# 
  1291  001A                     	;# 
  1292  001B                     	;# 
  1293  001B                     	;# 
  1294  001C                     	;# 
  1295  001D                     	;# 
  1296  001E                     	;# 
  1297  001F                     	;# 
  1298  0081                     	;# 
  1299  0085                     	;# 
  1300  0086                     	;# 
  1301  0087                     	;# 
  1302  0089                     	;# 
  1303  008C                     	;# 
  1304  008D                     	;# 
  1305  008E                     	;# 
  1306  008F                     	;# 
  1307  0090                     	;# 
  1308  0091                     	;# 
  1309  0092                     	;# 
  1310  0093                     	;# 
  1311  0093                     	;# 
  1312  0094                     	;# 
  1313  0095                     	;# 
  1314  0095                     	;# 
  1315  0096                     	;# 
  1316  0096                     	;# 
  1317  0098                     	;# 
  1318  0099                     	;# 
  1319  009C                     	;# 
  1320  009D                     	;# 
  1321  009F                     	;# 
  1322  0108                     	;# 
  1323  0109                     	;# 
  1324  010C                     	;# 
  1325  010C                     	;# 
  1326  010D                     	;# 
  1327  010D                     	;# 
  1328  010E                     	;# 
  1329  010F                     	;# 
  1330  0185                     	;# 
  1331  0186                     	;# 
  1332  018C                     	;# 
  1333  001F                     _ADCON0	set	31
  1334  001E                     _ADRES	set	30
  1335  0005                     _PORTA	set	5
  1336  0006                     _PORTB	set	6
  1337  0007                     _PORTC	set	7
  1338  0010                     _T1CON	set	16
  1339  000F                     _TMR1H	set	15
  1340  000E                     _TMR1L	set	14
  1341  005F                     _GIE	set	95
  1342  00F9                     _GO_nDONE	set	249
  1343  005E                     _PEIE	set	94
  1344  002E                     _RA6	set	46
  1345  002F                     _RA7	set	47
  1346  0032                     _RB2	set	50
  1347  0033                     _RB3	set	51
  1348  0034                     _RB4	set	52
  1349  0035                     _RB5	set	53
  1350  0038                     _RC0	set	56
  1351  0039                     _RC1	set	57
  1352  003C                     _RC4	set	60
  1353  003D                     _RC5	set	61
  1354  003E                     _RC6	set	62
  1355  003F                     _RC7	set	63
  1356  0060                     _TMR1IF	set	96
  1357  009F                     _ADCON1	set	159
  1358  009D                     _FVRCON	set	157
  1359  0090                     _OSCCON	set	144
  1360  0085                     _TRISA	set	133
  1361  0086                     _TRISB	set	134
  1362  0087                     _TRISC	set	135
  1363  0095                     _WPUB	set	149
  1364  0408                     _PS0	set	1032
  1365  0409                     _PS1	set	1033
  1366  040A                     _PS2	set	1034
  1367  040B                     _PSA	set	1035
  1368  0460                     _TMR1IE	set	1120
  1369  0185                     _ANSELA	set	389
  1370  0186                     _ANSELB	set	390
  1371                           
  1372                           	psect	text0
  1373  0000                     __ptext0:	
  1374                           ; #config settings
  1375                           
  1376                           
  1377                           ;psect for function _TMR1_ISR
  1378  0000                     
  1379                           	psect	cinit
  1380  0013                     start_initialization:	
  1381  0013                     __initialization:	
  1382                           
  1383                           ; Clear objects allocated to COMMON
  1384  0013  01F6               	clrf	__pbssCOMMON& (0+127)
  1385  0014  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  1386  0015  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  1387  0016  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  1388                           
  1389                           ; Clear objects allocated to BANK0
  1390  0017  1383               	bcf	3,7	;select IRP bank0
  1391  0018  3020               	movlw	low __pbssBANK0
  1392  0019  0084               	movwf	4
  1393  001A  3057               	movlw	low (__pbssBANK0+55)
  1394  001B  158A  213E  118A   	fcall	clear_ram0
  1395                           
  1396                           ; Clear objects allocated to BANK1
  1397  001E  30A0               	movlw	low __pbssBANK1
  1398  001F  0084               	movwf	4
  1399  0020  30EE               	movlw	low (__pbssBANK1+78)
  1400  0021  158A  213E  118A   	fcall	clear_ram0
  1401                           
  1402                           ; Clear objects allocated to BANK2
  1403  0024  1783               	bsf	3,7	;select IRP bank2
  1404  0025  3020               	movlw	low __pbssBANK2
  1405  0026  0084               	movwf	4
  1406  0027  302A               	movlw	low (__pbssBANK2+10)
  1407  0028  158A  213E         	fcall	clear_ram0
  1408  002A                     end_of_initialization:	
  1409                           ;End of C runtime variable initialization code
  1410                           
  1411  002A                     __end_of__initialization:	
  1412  002A  0183               	clrf	3
  1413  002B  158A  2F05         	ljmp	_main	;jump to C main() function
  1414                           
  1415                           	psect	bssCOMMON
  1416  0076                     __pbssCOMMON:	
  1417  0076                     _LED:	
  1418  0076                     	ds	1
  1419  0077                     _Light:	
  1420  0077                     	ds	1
  1421  0078                     _Lights:	
  1422  0078                     	ds	1
  1423  0079                     _Sw:	
  1424  0079                     	ds	1
  1425                           
  1426                           	psect	bssBANK0
  1427  0020                     __pbssBANK0:	
  1428  0020                     _Buz1:	
  1429  0020                     	ds	12
  1430  002C                     _SYSC:	
  1431  002C                     	ds	5
  1432  0031                     _myMain:	
  1433  0031                     	ds	5
  1434  0036                     __CDS:	
  1435  0036                     	ds	4
  1436  003A                     _Timer1:	
  1437  003A                     	ds	3
  1438  003D                     _WDT:	
  1439  003D                     	ds	2
  1440  003F                     _Cmd:	
  1441  003F                     	ds	1
  1442  0040                     _LightsControl:	
  1443  0040                     	ds	1
  1444  0041                     _SwDetect:	
  1445  0041                     	ds	1
  1446  0042                     _Temp:	
  1447  0042                     	ds	7
  1448  0049                     _Lights1:	
  1449  0049                     	ds	5
  1450  004E                     _Lights2:	
  1451  004E                     	ds	5
  1452  0053                     _VarErrLED:	
  1453  0053                     	ds	4
  1454                           
  1455                           	psect	bssBANK1
  1456  00A0                     __pbssBANK1:	
  1457  00A0                     __PIR:	
  1458  00A0                     	ds	42
  1459  00CA                     _Load:	
  1460  00CA                     	ds	28
  1461  00E6                     _VarLED1:	
  1462  00E6                     	ds	4
  1463  00EA                     _VarLED2:	
  1464  00EA                     	ds	4
  1465                           
  1466                           	psect	bssBANK2
  1467  0120                     __pbssBANK2:	
  1468  0120                     _Sw1:	
  1469  0120                     	ds	5
  1470  0125                     _Sw2:	
  1471  0125                     	ds	5
  1472                           
  1473                           	psect	clrtext
  1474  093E                     clear_ram0:	
  1475                           ;	Called with FSR containing the base address, and
  1476                           ;	W with the last address+1
  1477                           
  1478  093E  0064               	clrwdt	;clear the watchdog before getting into this loop
  1479  093F                     clrloop0:	
  1480  093F  0180               	clrf	0	;clear RAM location pointed to by FSR
  1481  0940  0A84               	incf	4,f	;increment pointer
  1482  0941  0604               	xorwf	4,w	;XOR with final address
  1483  0942  1903               	btfsc	3,2	;have we reached the end yet?
  1484  0943  3400               	retlw	0	;all done for this memory range, return
  1485  0944  0604               	xorwf	4,w	;XOR again to restore value
  1486  0945  293F               	goto	clrloop0	;do the next byte
  1487                           
  1488                           	psect	cstackCOMMON
  1489  0070                     __pcstackCOMMON:	
  1490  0070                     ?_setLED_Initialization:	
  1491  0070                     ?_setLED_Main:	
  1492                           ; 0 bytes @ 0x0
  1493                           
  1494  0070                     ?_Fosc_Set:	
  1495                           ; 0 bytes @ 0x0
  1496                           
  1497  0070                     ?_IO_Set:	
  1498                           ; 0 bytes @ 0x0
  1499                           
  1500  0070                     ?_TMR1_Set:	
  1501                           ; 0 bytes @ 0x0
  1502                           
  1503  0070                     ?_ADC_Set:	
  1504                           ; 0 bytes @ 0x0
  1505                           
  1506  0070                     ?_WDT_Set:	
  1507                           ; 0 bytes @ 0x0
  1508                           
  1509  0070                     ?_TMR1_ISR:	
  1510                           ; 0 bytes @ 0x0
  1511                           
  1512  0070                     ??_TMR1_ISR:	
  1513                           ; 0 bytes @ 0x0
  1514                           
  1515  0070                     ?_Timeout_Counter:	
  1516                           ; 0 bytes @ 0x0
  1517                           
  1518  0070                     ?_set_TimeoutCleared:	
  1519                           ; 0 bytes @ 0x0
  1520                           
  1521  0070                     ?_WDT_Clearing:	
  1522                           ; 0 bytes @ 0x0
  1523                           
  1524  0070                     ?_myMain_Initialization:	
  1525                           ; 0 bytes @ 0x0
  1526                           
  1527  0070                     ?_SYSC_Initialization:	
  1528                           ; 0 bytes @ 0x0
  1529                           
  1530  0070                     ?_Temp_Initialization:	
  1531                           ; 0 bytes @ 0x0
  1532                           
  1533  0070                     ?_Load_Initialization:	
  1534                           ; 0 bytes @ 0x0
  1535                           
  1536  0070                     ?_Lights_Initialization:	
  1537                           ; 0 bytes @ 0x0
  1538                           
  1539  0070                     ?_PIR_Initialization:	
  1540                           ; 0 bytes @ 0x0
  1541                           
  1542  0070                     ?_Switch_Initialization:	
  1543                           ; 0 bytes @ 0x0
  1544                           
  1545  0070                     ?_DetectSYSC_Signal:	
  1546                           ; 0 bytes @ 0x0
  1547                           
  1548  0070                     ?_getLoad_AD:	
  1549                           ; 0 bytes @ 0x0
  1550                           
  1551  0070                     ?_getTemp_AD:	
  1552                           ; 0 bytes @ 0x0
  1553                           
  1554  0070                     ?_my_MainTimer:	
  1555                           ; 0 bytes @ 0x0
  1556                           
  1557  0070                     ?_SYSC_Main:	
  1558                           ; 0 bytes @ 0x0
  1559                           
  1560  0070                     ?_Temp_Main:	
  1561                           ; 0 bytes @ 0x0
  1562                           
  1563  0070                     ?_Load_Main:	
  1564                           ; 0 bytes @ 0x0
  1565                           
  1566  0070                     ?_Lights_Main:	
  1567                           ; 0 bytes @ 0x0
  1568                           
  1569  0070                     ?_Switch_Main:	
  1570                           ; 0 bytes @ 0x0
  1571                           
  1572  0070                     ?_PIR_Main:	
  1573                           ; 0 bytes @ 0x0
  1574                           
  1575  0070                     ?_Exception_Main:	
  1576                           ; 0 bytes @ 0x0
  1577                           
  1578  0070                     ?_setLights_SwOn:	
  1579                           ; 0 bytes @ 0x0
  1580                           
  1581  0070                     ?_setLights_SwOff:	
  1582                           ; 0 bytes @ 0x0
  1583                           
  1584  0070                     ?_setLoad_AH_AL_Restore:	
  1585                           ; 0 bytes @ 0x0
  1586                           
  1587  0070                     ?_setTemp_Initialization:	
  1588                           ; 0 bytes @ 0x0
  1589                           
  1590  0070                     ?_setTemp_Main:	
  1591                           ; 0 bytes @ 0x0
  1592                           
  1593  0070                     ?_setSYSC_Initialization:	
  1594                           ; 0 bytes @ 0x0
  1595                           
  1596  0070                     ?_setSYSC_Main:	
  1597                           ; 0 bytes @ 0x0
  1598                           
  1599  0070                     ?_setSw_Main:	
  1600                           ; 0 bytes @ 0x0
  1601                           
  1602  0070                     ?_setLights_Initialization:	
  1603                           ; 0 bytes @ 0x0
  1604                           
  1605  0070                     ?_setLights_Main:	
  1606                           ; 0 bytes @ 0x0
  1607                           
  1608  0070                     ?_Lights_Control:	
  1609                           ; 0 bytes @ 0x0
  1610                           
  1611  0070                     ?_setLights_Line:	
  1612                           ; 0 bytes @ 0x0
  1613                           
  1614  0070                     ?_Buzzer_Initialization:	
  1615                           ; 0 bytes @ 0x0
  1616                           
  1617  0070                     ?_Buzzer_Main:	
  1618                           ; 0 bytes @ 0x0
  1619                           
  1620  0070                     ?_CDS_Initialization:	
  1621                           ; 0 bytes @ 0x0
  1622                           
  1623  0070                     ?_CDS_Main:	
  1624                           ; 0 bytes @ 0x0
  1625                           
  1626  0070                     ?_LedPointSelect:	
  1627                           ; 0 bytes @ 0x0
  1628                           
  1629  0070                     ?_LED_Initialization:	
  1630                           ; 0 bytes @ 0x0
  1631                           
  1632  0070                     ?_LED_Main:	
  1633                           ; 0 bytes @ 0x0
  1634                           
  1635  0070                     ?_Mcu_Initialization:	
  1636                           ; 0 bytes @ 0x0
  1637                           
  1638  0070                     ?_ISR:	
  1639                           ; 0 bytes @ 0x0
  1640                           
  1641  0070                     ??_ISR:	
  1642                           ; 0 bytes @ 0x0
  1643                           
  1644  0070                     ?_WDT_Main:	
  1645                           ; 0 bytes @ 0x0
  1646                           
  1647  0070                     ?_TouchPower:	
  1648                           ; 0 bytes @ 0x0
  1649                           
  1650  0070                     ?_SwPointSelect:	
  1651                           ; 0 bytes @ 0x0
  1652                           
  1653  0070                     ?_LightsPointSelect:	
  1654                           ; 0 bytes @ 0x0
  1655                           
  1656  0070                     ?_getLights_Status:	
  1657                           ; 0 bytes @ 0x0
  1658                           
  1659  0070                     ?_getAll_Lights_Line:	
  1660                           ; 1 bytes @ 0x0
  1661                           
  1662  0070                     ?_getLight_LoadGO:	
  1663                           ; 1 bytes @ 0x0
  1664                           
  1665  0070                     ?_getLight_Load_Status:	
  1666                           ; 1 bytes @ 0x0
  1667                           
  1668  0070                     ?_getSw_KeyStatus:	
  1669                           ; 1 bytes @ 0x0
  1670                           
  1671  0070                     ?_getLights_Allow_Condition:	
  1672                           ; 1 bytes @ 0x0
  1673                           
  1674  0070                     ?_getCDS_Status:	
  1675                           ; 1 bytes @ 0x0
  1676                           
  1677  0070                     ?_getMain_All_LightsStatus:	
  1678                           ; 1 bytes @ 0x0
  1679                           
  1680  0070                     ?_getMain_All_Error_Status:	
  1681                           ; 1 bytes @ 0x0
  1682                           
  1683  0070                     ?_getMain_Lights_Count:	
  1684                           ; 1 bytes @ 0x0
  1685                           
  1686  0070                     ?_getLoad_OK:	
  1687                           ; 1 bytes @ 0x0
  1688                           
  1689  0070                     getLights_Allow_Condition@lights:	
  1690                           ; 1 bytes @ 0x0
  1691                           
  1692                           
  1693                           ; 1 bytes @ 0x0
  1694  0070                     	ds	4
  1695  0074                     ??_Fosc_Set:	
  1696  0074                     ??_IO_Set:	
  1697                           ; 0 bytes @ 0x4
  1698                           
  1699  0074                     ??_TMR1_Set:	
  1700                           ; 0 bytes @ 0x4
  1701                           
  1702  0074                     ??_ADC_Set:	
  1703                           ; 0 bytes @ 0x4
  1704                           
  1705  0074                     ??_WDT_Set:	
  1706                           ; 0 bytes @ 0x4
  1707                           
  1708  0074                     ??_Timeout_Counter:	
  1709                           ; 0 bytes @ 0x4
  1710                           
  1711  0074                     ??_set_TimeoutCleared:	
  1712                           ; 0 bytes @ 0x4
  1713                           
  1714  0074                     ??_WDT_Clearing:	
  1715                           ; 0 bytes @ 0x4
  1716                           
  1717  0074                     ??_myMain_Initialization:	
  1718                           ; 0 bytes @ 0x4
  1719                           
  1720  0074                     ??_SYSC_Initialization:	
  1721                           ; 0 bytes @ 0x4
  1722                           
  1723  0074                     ??_Temp_Initialization:	
  1724                           ; 0 bytes @ 0x4
  1725                           
  1726  0074                     ??_PIR_Initialization:	
  1727                           ; 0 bytes @ 0x4
  1728                           
  1729  0074                     ??_Switch_Initialization:	
  1730                           ; 0 bytes @ 0x4
  1731                           
  1732  0074                     ??_DetectSYSC_Signal:	
  1733                           ; 0 bytes @ 0x4
  1734                           
  1735  0074                     ??_getAll_Lights_Line:	
  1736                           ; 0 bytes @ 0x4
  1737                           
  1738  0074                     ??_setLoad_AH_AL_Restore:	
  1739                           ; 0 bytes @ 0x4
  1740                           
  1741  0074                     ??_getLight_LoadGO:	
  1742                           ; 0 bytes @ 0x4
  1743                           
  1744  0074                     ??_getLight_Load_Status:	
  1745                           ; 0 bytes @ 0x4
  1746                           
  1747  0074                     ??_setTemp_Initialization:	
  1748                           ; 0 bytes @ 0x4
  1749                           
  1750  0074                     ??_setSYSC_Initialization:	
  1751                           ; 0 bytes @ 0x4
  1752                           
  1753  0074                     ??_getSw_KeyStatus:	
  1754                           ; 0 bytes @ 0x4
  1755                           
  1756  0074                     ??_setLights_Line:	
  1757                           ; 0 bytes @ 0x4
  1758                           
  1759  0074                     ??_Buzzer_Initialization:	
  1760                           ; 0 bytes @ 0x4
  1761                           
  1762  0074                     ??_Buzzer_Main:	
  1763                           ; 0 bytes @ 0x4
  1764                           
  1765  0074                     ??_CDS_Initialization:	
  1766                           ; 0 bytes @ 0x4
  1767                           
  1768  0074                     ??_getCDS_Status:	
  1769                           ; 0 bytes @ 0x4
  1770                           
  1771  0074                     ??_LedPointSelect:	
  1772                           ; 0 bytes @ 0x4
  1773                           
  1774  0074                     ??_WDT_Main:	
  1775                           ; 0 bytes @ 0x4
  1776                           
  1777  0074                     ??_getMain_All_LightsStatus:	
  1778                           ; 0 bytes @ 0x4
  1779                           
  1780  0074                     ??_getMain_All_Error_Status:	
  1781                           ; 0 bytes @ 0x4
  1782                           
  1783  0074                     ??_getMain_Lights_Count:	
  1784                           ; 0 bytes @ 0x4
  1785                           
  1786  0074                     ??_getLoad_OK:	
  1787                           ; 0 bytes @ 0x4
  1788                           
  1789  0074                     ??_TouchPower:	
  1790                           ; 0 bytes @ 0x4
  1791                           
  1792  0074                     ??_SwPointSelect:	
  1793                           ; 0 bytes @ 0x4
  1794                           
  1795  0074                     ??_LightsPointSelect:	
  1796                           ; 0 bytes @ 0x4
  1797                           
  1798  0074                     ??___wmul:	
  1799                           ; 0 bytes @ 0x4
  1800                           
  1801  0074                     ??___awdiv:	
  1802                           ; 0 bytes @ 0x4
  1803                           
  1804  0074                     ??___lwdiv:	
  1805                           ; 0 bytes @ 0x4
  1806                           
  1807  0074                     ?_getAD:	
  1808                           ; 0 bytes @ 0x4
  1809                           
  1810  0074                     getCDS_Status@status:	
  1811                           ; 1 bytes @ 0x4
  1812                           
  1813  0074                     getAD@adcon1:	
  1814                           ; 1 bytes @ 0x4
  1815                           
  1816  0074                     getMain_All_LightsStatus@status:	
  1817                           ; 1 bytes @ 0x4
  1818                           
  1819  0074                     getLoad_OK@ok:	
  1820                           ; 1 bytes @ 0x4
  1821                           
  1822  0074                     getSw_KeyStatus@status:	
  1823                           ; 1 bytes @ 0x4
  1824                           
  1825  0074                     setLights_Line@lights:	
  1826                           ; 1 bytes @ 0x4
  1827                           
  1828  0074                     getLight_LoadGO@loadgo:	
  1829                           ; 1 bytes @ 0x4
  1830                           
  1831  0074                     getLight_Load_Status@loadstatus:	
  1832                           ; 1 bytes @ 0x4
  1833                           
  1834  0074                     ___wmul@product:	
  1835                           ; 1 bytes @ 0x4
  1836                           
  1837                           
  1838                           ; 2 bytes @ 0x4
  1839  0074                     	ds	1
  1840  0075                     ??_getAD:	
  1841  0075                     ??_SYSC_Main:	
  1842                           ; 0 bytes @ 0x5
  1843                           
  1844  0075                     ??_setSYSC_Main:	
  1845                           ; 0 bytes @ 0x5
  1846                           
  1847  0075                     ??_getLights_Allow_Condition:	
  1848                           ; 0 bytes @ 0x5
  1849                           
  1850  0075                     ??_setBuz:	
  1851                           ; 0 bytes @ 0x5
  1852                           
  1853  0075                     ??_Mcu_Initialization:	
  1854                           ; 0 bytes @ 0x5
  1855                           
  1856  0075                     LedPointSelect@led:	
  1857                           ; 0 bytes @ 0x5
  1858                           
  1859  0075                     getAD@adcon0:	
  1860                           ; 1 bytes @ 0x5
  1861                           
  1862  0075                     setLoad_AH_AL_Restore@i:	
  1863                           ; 1 bytes @ 0x5
  1864                           
  1865  0075                     SwPointSelect@sw:	
  1866                           ; 1 bytes @ 0x5
  1867                           
  1868  0075                     getSw_KeyStatus@sw:	
  1869                           ; 1 bytes @ 0x5
  1870                           
  1871  0075                     LightsPointSelect@lights:	
  1872                           ; 1 bytes @ 0x5
  1873                           
  1874  0075                     getAll_Lights_Line@line:	
  1875                           ; 1 bytes @ 0x5
  1876                           
  1877                           
  1878                           ; 1 bytes @ 0x5
  1879  0075                     	ds	1
  1880  0076                     ??_setLED_Initialization:	
  1881  0076                     ??_setLED:	
  1882                           ; 0 bytes @ 0x6
  1883                           
  1884  0076                     ??_Load_Initialization:	
  1885                           ; 0 bytes @ 0x6
  1886                           
  1887  0076                     ??_Lights_Initialization:	
  1888                           ; 0 bytes @ 0x6
  1889                           
  1890  0076                     ??_Temp_Main:	
  1891                           ; 0 bytes @ 0x6
  1892                           
  1893  0076                     ??_Lights_Main:	
  1894                           ; 0 bytes @ 0x6
  1895                           
  1896  0076                     ??_Switch_Main:	
  1897                           ; 0 bytes @ 0x6
  1898                           
  1899  0076                     ??_getLights_Status:	
  1900                           ; 0 bytes @ 0x6
  1901                           
  1902  0076                     ??_setLights_SwOn:	
  1903                           ; 0 bytes @ 0x6
  1904                           
  1905  0076                     ??_setLights_SwOff:	
  1906                           ; 0 bytes @ 0x6
  1907                           
  1908  0076                     ??_setLights_Initialization:	
  1909                           ; 0 bytes @ 0x6
  1910                           
  1911  0076                     ??_setLights_Main:	
  1912                           ; 0 bytes @ 0x6
  1913                           
  1914  0076                     ??_LED_Initialization:	
  1915                           ; 0 bytes @ 0x6
  1916                           
  1917  0076                     ??_LED_Main:	
  1918                           ; 0 bytes @ 0x6
  1919                           
  1920                           
  1921                           	psect	cstackBANK0
  1922  0057                     __pcstackBANK0:	
  1923                           ; 0 bytes @ 0x6
  1924                           
  1925  0057                     ??_setLED_Main:	
  1926  0057                     ?_setLED:	
  1927                           ; 0 bytes @ 0x0
  1928                           
  1929  0057                     ??_getLoad_AD:	
  1930                           ; 0 bytes @ 0x0
  1931                           
  1932  0057                     ??_getTemp_AD:	
  1933                           ; 0 bytes @ 0x0
  1934                           
  1935  0057                     ??_CDS_Main:	
  1936                           ; 0 bytes @ 0x0
  1937                           
  1938  0057                     ?_getCDS_AD:	
  1939                           ; 0 bytes @ 0x0
  1940                           
  1941  0057                     ?_setLights_Trigger:	
  1942                           ; 0 bytes @ 0x0
  1943                           
  1944  0057                     ?___wmul:	
  1945                           ; 0 bytes @ 0x0
  1946                           
  1947  0057                     ?___awdiv:	
  1948                           ; 2 bytes @ 0x0
  1949                           
  1950  0057                     ?___lwdiv:	
  1951                           ; 2 bytes @ 0x0
  1952                           
  1953  0057                     getCDS_AD@channel2:	
  1954                           ; 2 bytes @ 0x0
  1955                           
  1956  0057                     setLED@command:	
  1957                           ; 1 bytes @ 0x0
  1958                           
  1959  0057                     getMain_Lights_Count@count:	
  1960                           ; 1 bytes @ 0x0
  1961                           
  1962  0057                     setLights_Initialization@lights:	
  1963                           ; 1 bytes @ 0x0
  1964                           
  1965  0057                     getLights_Status@lights:	
  1966                           ; 1 bytes @ 0x0
  1967                           
  1968  0057                     setLights_Trigger@command:	
  1969                           ; 1 bytes @ 0x0
  1970                           
  1971  0057                     getLights_Allow_Condition@allow:	
  1972                           ; 1 bytes @ 0x0
  1973                           
  1974  0057                     _getMain_All_Error_Status$2426:	
  1975                           ; 1 bytes @ 0x0
  1976                           
  1977  0057                     ___wmul@multiplier:	
  1978                           ; 2 bytes @ 0x0
  1979                           
  1980  0057                     ___awdiv@divisor:	
  1981                           ; 2 bytes @ 0x0
  1982                           
  1983  0057                     ___lwdiv@divisor:	
  1984                           ; 2 bytes @ 0x0
  1985                           
  1986                           
  1987                           ; 2 bytes @ 0x0
  1988  0057                     	ds	1
  1989  0058                     ??_getCDS_AD:	
  1990  0058                     ??_setLights_Trigger:	
  1991                           ; 0 bytes @ 0x1
  1992                           
  1993  0058                     setLED@led:	
  1994                           ; 0 bytes @ 0x1
  1995                           
  1996  0058                     getMain_Lights_Count@status1:	
  1997                           ; 1 bytes @ 0x1
  1998                           
  1999  0058                     getLights_Status@status:	
  2000                           ; 1 bytes @ 0x1
  2001                           
  2002  0058                     _getLights_Allow_Condition$4827:	
  2003                           ; 1 bytes @ 0x1
  2004                           
  2005                           
  2006                           ; 1 bytes @ 0x1
  2007  0058                     	ds	1
  2008  0059                     ?_setLights:	
  2009  0059                     setLED_Initialization@led:	
  2010                           ; 0 bytes @ 0x2
  2011                           
  2012  0059                     setLED_Main@led:	
  2013                           ; 1 bytes @ 0x2
  2014                           
  2015  0059                     getMain_Lights_Count@status2:	
  2016                           ; 1 bytes @ 0x2
  2017                           
  2018  0059                     getLoad_AD@channel:	
  2019                           ; 1 bytes @ 0x2
  2020                           
  2021  0059                     getTemp_AD@channel:	
  2022                           ; 1 bytes @ 0x2
  2023                           
  2024  0059                     setLights@status:	
  2025                           ; 1 bytes @ 0x2
  2026                           
  2027  0059                     setLights_Trigger@lights:	
  2028                           ; 1 bytes @ 0x2
  2029                           
  2030  0059                     _getMain_All_Error_Status$2427:	
  2031                           ; 1 bytes @ 0x2
  2032                           
  2033  0059                     ___wmul@multiplicand:	
  2034                           ; 2 bytes @ 0x2
  2035                           
  2036  0059                     ___awdiv@dividend:	
  2037                           ; 2 bytes @ 0x2
  2038                           
  2039  0059                     ___lwdiv@dividend:	
  2040                           ; 2 bytes @ 0x2
  2041                           
  2042                           
  2043                           ; 2 bytes @ 0x2
  2044  0059                     	ds	1
  2045  005A                     ??_setLights:	
  2046  005A                     getCDS_AD@i:	
  2047                           ; 0 bytes @ 0x3
  2048                           
  2049  005A                     getLoad_AD@k:	
  2050                           ; 1 bytes @ 0x3
  2051                           
  2052  005A                     getTemp_AD@ADRES:	
  2053                           ; 1 bytes @ 0x3
  2054                           
  2055  005A                     setLights_SwOn@sw:	
  2056                           ; 1 bytes @ 0x3
  2057                           
  2058  005A                     setLights_SwOff@sw:	
  2059                           ; 1 bytes @ 0x3
  2060                           
  2061                           
  2062                           ; 1 bytes @ 0x3
  2063  005A                     	ds	1
  2064  005B                     getCDS_AD@j:	
  2065  005B                     getMain_All_Error_Status@command:	
  2066                           ; 1 bytes @ 0x4
  2067                           
  2068  005B                     getLoad_AD@j:	
  2069                           ; 1 bytes @ 0x4
  2070                           
  2071  005B                     setLights@lights:	
  2072                           ; 1 bytes @ 0x4
  2073                           
  2074  005B                     ___awdiv@counter:	
  2075                           ; 1 bytes @ 0x4
  2076                           
  2077  005B                     ___lwdiv@counter:	
  2078                           ; 1 bytes @ 0x4
  2079                           
  2080                           
  2081                           ; 1 bytes @ 0x4
  2082  005B                     	ds	1
  2083  005C                     getCDS_AD@channel1:	
  2084  005C                     getMain_All_Error_Status@status:	
  2085                           ; 1 bytes @ 0x5
  2086                           
  2087  005C                     getLoad_AD@ADRES:	
  2088                           ; 1 bytes @ 0x5
  2089                           
  2090  005C                     setLights_Main@lights:	
  2091                           ; 1 bytes @ 0x5
  2092                           
  2093  005C                     ___awdiv@sign:	
  2094                           ; 1 bytes @ 0x5
  2095                           
  2096  005C                     ___lwdiv@quotient:	
  2097                           ; 1 bytes @ 0x5
  2098                           
  2099                           
  2100                           ; 2 bytes @ 0x5
  2101  005C                     	ds	1
  2102  005D                     ??_PIR_Main:	
  2103  005D                     ??_setSw_Main:	
  2104                           ; 0 bytes @ 0x6
  2105                           
  2106  005D                     getLoad_AD@i:	
  2107                           ; 0 bytes @ 0x6
  2108                           
  2109  005D                     ___awdiv@quotient:	
  2110                           ; 1 bytes @ 0x6
  2111                           
  2112                           
  2113                           ; 2 bytes @ 0x6
  2114  005D                     	ds	1
  2115  005E                     ??_Load_Main:	
  2116                           
  2117                           ; 0 bytes @ 0x7
  2118  005E                     	ds	1
  2119  005F                     ?_getPIR_AD:	
  2120  005F                     ??_Lights_Control:	
  2121                           ; 0 bytes @ 0x8
  2122                           
  2123  005F                     ?_setBuz:	
  2124                           ; 0 bytes @ 0x8
  2125                           
  2126  005F                     getPIR_AD@channel2:	
  2127                           ; 0 bytes @ 0x8
  2128                           
  2129  005F                     setSw_Main@sw:	
  2130                           ; 1 bytes @ 0x8
  2131                           
  2132  005F                     setBuz@time:	
  2133                           ; 1 bytes @ 0x8
  2134                           
  2135                           
  2136                           ; 2 bytes @ 0x8
  2137  005F                     	ds	1
  2138  0060                     ??_getPIR_AD:	
  2139  0060                     Load_Main@error:	
  2140                           ; 0 bytes @ 0x9
  2141                           
  2142                           
  2143                           ; 1 bytes @ 0x9
  2144  0060                     	ds	1
  2145  0061                     setBuz@count:	
  2146  0061                     PIR_Main@error:	
  2147                           ; 1 bytes @ 0xA
  2148                           
  2149  0061                     Lights_Control@lights:	
  2150                           ; 1 bytes @ 0xA
  2151                           
  2152  0061                     _Load_Main$2716:	
  2153                           ; 1 bytes @ 0xA
  2154                           
  2155                           
  2156                           ; 2 bytes @ 0xA
  2157  0061                     	ds	1
  2158  0062                     ??_my_MainTimer:	
  2159  0062                     ??_Exception_Main:	
  2160                           ; 0 bytes @ 0xB
  2161                           
  2162  0062                     ??_setTemp_Main:	
  2163                           ; 0 bytes @ 0xB
  2164                           
  2165  0062                     PIR_Main@cds:	
  2166                           ; 0 bytes @ 0xB
  2167                           
  2168                           
  2169                           ; 1 bytes @ 0xB
  2170  0062                     	ds	1
  2171  0063                     Exception_Main@lights:	
  2172  0063                     Load_Main@ErrorCountValue:	
  2173                           ; 1 bytes @ 0xC
  2174                           
  2175  0063                     setTemp_Main@error:	
  2176                           ; 1 bytes @ 0xC
  2177                           
  2178  0063                     getPIR_AD@j:	
  2179                           ; 1 bytes @ 0xC
  2180                           
  2181  0063                     _PIR_Main$3238:	
  2182                           ; 1 bytes @ 0xC
  2183                           
  2184                           
  2185                           ; 2 bytes @ 0xC
  2186  0063                     	ds	1
  2187  0064                     Exception_Main@count:	
  2188  0064                     Load_Main@Load_RunStatus:	
  2189                           ; 1 bytes @ 0xD
  2190                           
  2191  0064                     setTemp_Main@TempGO:	
  2192                           ; 1 bytes @ 0xD
  2193                           
  2194  0064                     getPIR_AD@channel1:	
  2195                           ; 1 bytes @ 0xD
  2196                           
  2197                           
  2198                           ; 1 bytes @ 0xD
  2199  0064                     	ds	1
  2200  0065                     Exception_Main@error:	
  2201  0065                     Load_Main@LightsCount:	
  2202                           ; 1 bytes @ 0xE
  2203                           
  2204  0065                     setTemp_Main@SafeValue:	
  2205                           ; 1 bytes @ 0xE
  2206                           
  2207  0065                     PIR_Main@Enable_Switch:	
  2208                           ; 1 bytes @ 0xE
  2209                           
  2210  0065                     getPIR_AD@VRAD1:	
  2211                           ; 1 bytes @ 0xE
  2212                           
  2213                           
  2214                           ; 1 bytes @ 0xE
  2215  0065                     	ds	1
  2216  0066                     Exception_Main@status:	
  2217  0066                     setTemp_Main@DangerValue:	
  2218                           ; 1 bytes @ 0xF
  2219                           
  2220  0066                     PIR_Main@TriggerValue:	
  2221                           ; 1 bytes @ 0xF
  2222                           
  2223  0066                     getPIR_AD@VRAD:	
  2224                           ; 1 bytes @ 0xF
  2225                           
  2226  0066                     Load_Main@i:	
  2227                           ; 1 bytes @ 0xF
  2228                           
  2229                           
  2230                           ; 2 bytes @ 0xF
  2231  0066                     	ds	1
  2232  0067                     setTemp_Main@AD:	
  2233  0067                     PIR_Main@LightsStatus:	
  2234                           ; 1 bytes @ 0x10
  2235                           
  2236  0067                     getPIR_AD@i:	
  2237                           ; 1 bytes @ 0x10
  2238                           
  2239  0067                     Exception_Main@i:	
  2240                           ; 1 bytes @ 0x10
  2241                           
  2242                           
  2243                           ; 2 bytes @ 0x10
  2244  0067                     	ds	2
  2245  0069                     Exception_Main@i_2440:	
  2246                           
  2247                           ; 2 bytes @ 0x12
  2248  0069                     	ds	2
  2249  006B                     ?_main:	
  2250  006B                     main@argc:	
  2251                           ; 2 bytes @ 0x14
  2252                           
  2253                           
  2254                           ; 2 bytes @ 0x14
  2255  006B                     	ds	2
  2256  006D                     main@argv:	
  2257                           
  2258                           ; 2 bytes @ 0x16
  2259  006D                     	ds	2
  2260  006F                     ??_main:	
  2261                           
  2262                           ; 0 bytes @ 0x18
  2263  006F                     	ds	1
  2264                           
  2265                           	psect	maintext
  2266  0F05                     __pmaintext:	
  2267 ;;
  2268 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2269 ;;
  2270 ;; *************** function _main *****************
  2271 ;; Defined at:
  2272 ;;		line 7 in file "../src/Main_B1.c"
  2273 ;; Parameters:    Size  Location     Type
  2274 ;;  argc            2   20[BANK0 ] int 
  2275 ;;  argv            2   22[BANK0 ] PTR PTR unsigned char 
  2276 ;; Auto vars:     Size  Location     Type
  2277 ;;		None
  2278 ;; Return value:  Size  Location     Type
  2279 ;;                  2   20[BANK0 ] int 
  2280 ;; Registers used:
  2281 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2282 ;; Tracked objects:
  2283 ;;		On entry : 17F/0
  2284 ;;		On exit  : 0/0
  2285 ;;		Unchanged: 0/0
  2286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2287 ;;      Params:         0       4       0       0
  2288 ;;      Locals:         0       0       0       0
  2289 ;;      Temps:          0       1       0       0
  2290 ;;      Totals:         0       5       0       0
  2291 ;;Total ram usage:        5 bytes
  2292 ;; Hardware stack levels required when called:    7
  2293 ;; This function calls:
  2294 ;;		_Buzzer_Initialization
  2295 ;;		_Buzzer_Main
  2296 ;;		_CDS_Initialization
  2297 ;;		_CDS_Main
  2298 ;;		_DetectSYSC_Signal
  2299 ;;		_Exception_Main
  2300 ;;		_LED_Initialization
  2301 ;;		_LED_Main
  2302 ;;		_Lights_Initialization
  2303 ;;		_Lights_Main
  2304 ;;		_Load_Initialization
  2305 ;;		_Load_Main
  2306 ;;		_Mcu_Initialization
  2307 ;;		_PIR_Initialization
  2308 ;;		_PIR_Main
  2309 ;;		_SYSC_Initialization
  2310 ;;		_SYSC_Main
  2311 ;;		_Switch_Initialization
  2312 ;;		_Switch_Main
  2313 ;;		_Temp_Initialization
  2314 ;;		_Temp_Main
  2315 ;;		_WDT_Main
  2316 ;;		_getCDS_AD
  2317 ;;		_getLoad_AD
  2318 ;;		_getPIR_AD
  2319 ;;		_getTemp_AD
  2320 ;;		_myMain_Initialization
  2321 ;;		_my_MainTimer
  2322 ;; This function is called by:
  2323 ;;		Startup code after reset
  2324 ;; This function uses a non-reentrant model
  2325 ;;
  2326                           
  2327                           
  2328                           ;psect for function _main
  2329  0F05                     _main:	
  2330                           
  2331                           ;Main_B1.c: 8: myMain_Initialization();
  2332                           
  2333                           ;incstack = 0
  2334                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2335  0F05  158A  20E5  158A   	fcall	_myMain_Initialization
  2336                           
  2337                           ;Main_B1.c: 9: Mcu_Initialization();
  2338  0F08  158A  21A1  158A   	fcall	_Mcu_Initialization
  2339                           
  2340                           ;Main_B1.c: 10: ;;
  2341                           ;Main_B1.c: 11: LED_Initialization();
  2342  0F0B  158A  215C  158A   	fcall	_LED_Initialization
  2343                           
  2344                           ;Main_B1.c: 12: Buzzer_Initialization();
  2345  0F0E  158A  20F5  158A   	fcall	_Buzzer_Initialization
  2346                           
  2347                           ;Main_B1.c: 14: SYSC_Initialization();
  2348  0F11  158A  20E9  158A   	fcall	_SYSC_Initialization
  2349                           
  2350                           ;Main_B1.c: 15: Temp_Initialization();
  2351  0F14  158A  20EF  158A   	fcall	_Temp_Initialization
  2352                           
  2353                           ;Main_B1.c: 16: Load_Initialization();
  2354  0F17  158A  20E6  158A   	fcall	_Load_Initialization
  2355                           
  2356                           ;Main_B1.c: 17: ;;
  2357                           ;Main_B1.c: 18: ;;
  2358                           ;Main_B1.c: 20: ;;
  2359                           ;Main_B1.c: 21: Lights_Initialization();
  2360  0F1A  158A  2126  158A   	fcall	_Lights_Initialization
  2361                           
  2362                           ;Main_B1.c: 22: CDS_Initialization();
  2363  0F1D  158A  20F9  158A   	fcall	_CDS_Initialization
  2364                           
  2365                           ;Main_B1.c: 23: PIR_Initialization();
  2366  0F20  158A  2146  158A   	fcall	_PIR_Initialization
  2367                           
  2368                           ;Main_B1.c: 24: Switch_Initialization();
  2369  0F23  158A  20E3  158A   	fcall	_Switch_Initialization
  2370  0F26                     l6175:	
  2371                           ;Main_B1.c: 25: ;;
  2372                           ;Main_B1.c: 26: ;;
  2373                           ;Main_B1.c: 27: ;;
  2374                           ;Main_B1.c: 28: ;;
  2375                           ;Main_B1.c: 30: while (1) {
  2376                           
  2377                           
  2378                           ;Main_B1.c: 32: if (myMain.PowerON == 1) {
  2379  0F26  1283               	bcf	3,5	;RP0=0, select bank0
  2380  0F27  1303               	bcf	3,6	;RP1=0, select bank0
  2381  0F28  1C31               	btfss	_myMain,0
  2382  0F29  2F49               	goto	l6187
  2383                           
  2384                           ;Main_B1.c: 34: DetectSYSC_Signal();
  2385  0F2A  158A  2168  158A   	fcall	_DetectSYSC_Signal
  2386                           
  2387                           ;Main_B1.c: 38: getLoad_AD(0x31);
  2388  0F2D  3031               	movlw	49
  2389  0F2E  158A  264C  158A   	fcall	_getLoad_AD
  2390                           
  2391                           ;Main_B1.c: 42: getTemp_AD(0x21);
  2392  0F31  3021               	movlw	33
  2393  0F32  158A  2341  158A   	fcall	_getTemp_AD
  2394                           
  2395                           ;Main_B1.c: 50: getCDS_AD(0x09, 0x11);
  2396  0F35  3011               	movlw	17
  2397  0F36  1283               	bcf	3,5	;RP0=0, select bank0
  2398  0F37  1303               	bcf	3,6	;RP1=0, select bank0
  2399  0F38  00EF               	movwf	??_main
  2400  0F39  086F               	movf	??_main,w
  2401  0F3A  00D7               	movwf	getCDS_AD@channel2
  2402  0F3B  3009               	movlw	9
  2403  0F3C  158A  2360  158A   	fcall	_getCDS_AD
  2404                           
  2405                           ;Main_B1.c: 54: getPIR_AD(0x05, 0x0d);
  2406  0F3F  300D               	movlw	13
  2407  0F40  1283               	bcf	3,5	;RP0=0, select bank0
  2408  0F41  1303               	bcf	3,6	;RP1=0, select bank0
  2409  0F42  00EF               	movwf	??_main
  2410  0F43  086F               	movf	??_main,w
  2411  0F44  00DF               	movwf	getPIR_AD@channel2
  2412  0F45  3005               	movlw	5
  2413  0F46  118A  23B8  158A   	fcall	_getPIR_AD
  2414  0F49                     l6187:	
  2415                           
  2416                           ;Main_B1.c: 57: }
  2417                           ;Main_B1.c: 93: if (Timer1.Timeout == 1) {
  2418  0F49  1283               	bcf	3,5	;RP0=0, select bank0
  2419  0F4A  1303               	bcf	3,6	;RP1=0, select bank0
  2420  0F4B  1C3A               	btfss	_Timer1,0
  2421  0F4C  2F26               	goto	l6175
  2422                           
  2423                           ;Main_B1.c: 94: Timer1.Timeout = 0;
  2424  0F4D  103A               	bcf	_Timer1,0
  2425                           
  2426                           ;Main_B1.c: 96: my_MainTimer();
  2427  0F4E  158A  2382  158A   	fcall	_my_MainTimer
  2428                           
  2429                           ;Main_B1.c: 97: WDT_Main();
  2430  0F51  158A  21E1  158A   	fcall	_WDT_Main
  2431                           
  2432                           ;Main_B1.c: 98: ;;
  2433                           ;Main_B1.c: 99: ;;
  2434                           ;Main_B1.c: 100: if (myMain.PowerON == 1) {
  2435  0F54  1283               	bcf	3,5	;RP0=0, select bank0
  2436  0F55  1303               	bcf	3,6	;RP1=0, select bank0
  2437  0F56  1C31               	btfss	_myMain,0
  2438  0F57  2F26               	goto	l6175
  2439                           
  2440                           ;Main_B1.c: 101: ;;
  2441                           ;Main_B1.c: 103: LED_Main();
  2442  0F58  118A  27F4  158A   	fcall	_LED_Main
  2443                           
  2444                           ;Main_B1.c: 104: Buzzer_Main();
  2445  0F5B  158A  257D  158A   	fcall	_Buzzer_Main
  2446                           
  2447                           ;Main_B1.c: 106: SYSC_Main();
  2448  0F5E  158A  20EC  158A   	fcall	_SYSC_Main
  2449                           
  2450                           ;Main_B1.c: 107: Temp_Main();
  2451  0F61  158A  20F2  158A   	fcall	_Temp_Main
  2452                           
  2453                           ;Main_B1.c: 108: Load_Main();
  2454  0F64  118A  202D  158A   	fcall	_Load_Main
  2455                           
  2456                           ;Main_B1.c: 109: ;;
  2457                           ;Main_B1.c: 111: Lights_Main();
  2458  0F67  158A  23CA  158A   	fcall	_Lights_Main
  2459                           
  2460                           ;Main_B1.c: 112: ;;
  2461                           ;Main_B1.c: 113: Switch_Main();
  2462  0F6A  158A  2151  158A   	fcall	_Switch_Main
  2463                           
  2464                           ;Main_B1.c: 114: CDS_Main();
  2465  0F6D  158A  2452  158A   	fcall	_CDS_Main
  2466                           
  2467                           ;Main_B1.c: 115: PIR_Main();
  2468  0F70  118A  2217  158A   	fcall	_PIR_Main
  2469                           
  2470                           ;Main_B1.c: 117: ;;
  2471                           ;Main_B1.c: 118: ;;
  2472                           ;Main_B1.c: 119: ;;
  2473                           ;Main_B1.c: 120: ;;
  2474                           ;Main_B1.c: 121: Exception_Main();
  2475  0F73  118A  24E6  158A   	fcall	_Exception_Main
  2476  0F76  2F26               	goto	l6175
  2477  0F77                     __end_of_main:	
  2478                           ;Main_B1.c: 128: }
  2479                           ;Main_B1.c: 129: }
  2480                           ;Main_B1.c: 163: }
  2481                           ;Main_B1.c: 164: return (0);
  2482                           ;	Return value of _main is never used
  2483                           
  2484                           
  2485                           	psect	text1
  2486  0B82                     __ptext1:	
  2487 ;; *************** function _my_MainTimer *****************
  2488 ;; Defined at:
  2489 ;;		line 185 in file "../src/Main_B1.c"
  2490 ;; Parameters:    Size  Location     Type
  2491 ;;		None
  2492 ;; Auto vars:     Size  Location     Type
  2493 ;;		None
  2494 ;; Return value:  Size  Location     Type
  2495 ;;		None               void
  2496 ;; Registers used:
  2497 ;;		wreg, status,2, status,0, pclath, cstack
  2498 ;; Tracked objects:
  2499 ;;		On entry : 0/0
  2500 ;;		On exit  : 0/0
  2501 ;;		Unchanged: 0/0
  2502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2503 ;;      Params:         0       0       0       0
  2504 ;;      Locals:         0       0       0       0
  2505 ;;      Temps:          0       1       0       0
  2506 ;;      Totals:         0       1       0       0
  2507 ;;Total ram usage:        1 bytes
  2508 ;; Hardware stack levels used:    1
  2509 ;; Hardware stack levels required when called:    4
  2510 ;; This function calls:
  2511 ;;		_setBuz
  2512 ;; This function is called by:
  2513 ;;		_main
  2514 ;; This function uses a non-reentrant model
  2515 ;;
  2516                           
  2517                           
  2518                           ;psect for function _my_MainTimer
  2519  0B82                     _my_MainTimer:	
  2520                           
  2521                           ;Main_B1.c: 187: if (myMain.PowerON == 0) {
  2522                           
  2523                           ;incstack = 0
  2524                           ; Regs used in _my_MainTimer: [wreg+status,2+status,0+pclath+cstack]
  2525  0B82  1283               	bcf	3,5	;RP0=0, select bank0
  2526  0B83  1303               	bcf	3,6	;RP1=0, select bank0
  2527  0B84  1831               	btfsc	_myMain,0
  2528  0B85  2B9B               	goto	l5783
  2529                           
  2530                           ;Main_B1.c: 188: myMain.PowerCount++;
  2531  0B86  3001               	movlw	1
  2532  0B87  00E2               	movwf	??_my_MainTimer
  2533  0B88  0862               	movf	??_my_MainTimer,w
  2534  0B89  07B2               	addwf	_myMain+1,f
  2535                           
  2536                           ;Main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  2537  0B8A  0832               	movf	_myMain+1,w
  2538  0B8B  3A4B               	xorlw	75
  2539  0B8C  1D03               	skipz
  2540  0B8D  0008               	return
  2541                           
  2542                           ;Main_B1.c: 190: myMain.PowerCount = 0;
  2543  0B8E  01B2               	clrf	_myMain+1
  2544                           
  2545                           ;Main_B1.c: 191: myMain.PowerON = 1;
  2546  0B8F  1431               	bsf	_myMain,0
  2547                           
  2548                           ;Main_B1.c: 196: setBuz(3, 50);
  2549  0B90  3032               	movlw	50
  2550  0B91  00DF               	movwf	setBuz@time
  2551  0B92  3000               	movlw	0
  2552  0B93  00E0               	movwf	setBuz@time+1
  2553  0B94  3003               	movlw	3
  2554  0B95  158A  2605         	fcall	_setBuz
  2555                           
  2556                           ;Main_B1.c: 197: myMain.SelfTest = 1;
  2557  0B97  1283               	bcf	3,5	;RP0=0, select bank0
  2558  0B98  1303               	bcf	3,6	;RP1=0, select bank0
  2559  0B99  1631               	bsf	_myMain,4
  2560                           
  2561                           ;Main_B1.c: 206: }
  2562                           ;Main_B1.c: 207: } else {
  2563  0B9A  0008               	return
  2564  0B9B                     l5783:	
  2565                           
  2566                           ;Main_B1.c: 208: myMain.PowerCount++;
  2567  0B9B  3001               	movlw	1
  2568  0B9C  00E2               	movwf	??_my_MainTimer
  2569  0B9D  0862               	movf	??_my_MainTimer,w
  2570  0B9E  07B2               	addwf	_myMain+1,f
  2571                           
  2572                           ;Main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  2573  0B9F  0832               	movf	_myMain+1,w
  2574  0BA0  3A32               	xorlw	50
  2575  0BA1  1D03               	skipz
  2576  0BA2  0008               	return
  2577                           
  2578                           ;Main_B1.c: 210: myMain.PowerCount = 0;
  2579  0BA3  01B2               	clrf	_myMain+1
  2580  0BA4  0008               	return
  2581  0BA5                     __end_of_my_MainTimer:	
  2582                           
  2583                           	psect	text2
  2584  08E5                     __ptext2:	
  2585 ;; *************** function _myMain_Initialization *****************
  2586 ;; Defined at:
  2587 ;;		line 170 in file "../src/Main_B1.c"
  2588 ;; Parameters:    Size  Location     Type
  2589 ;;		None
  2590 ;; Auto vars:     Size  Location     Type
  2591 ;;		None
  2592 ;; Return value:  Size  Location     Type
  2593 ;;		None               void
  2594 ;; Registers used:
  2595 ;;		None
  2596 ;; Tracked objects:
  2597 ;;		On entry : 0/0
  2598 ;;		On exit  : 0/0
  2599 ;;		Unchanged: 0/0
  2600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2601 ;;      Params:         0       0       0       0
  2602 ;;      Locals:         0       0       0       0
  2603 ;;      Temps:          0       0       0       0
  2604 ;;      Totals:         0       0       0       0
  2605 ;;Total ram usage:        0 bytes
  2606 ;; Hardware stack levels used:    1
  2607 ;; Hardware stack levels required when called:    2
  2608 ;; This function calls:
  2609 ;;		Nothing
  2610 ;; This function is called by:
  2611 ;;		_main
  2612 ;; This function uses a non-reentrant model
  2613 ;;
  2614                           
  2615                           
  2616                           ;psect for function _myMain_Initialization
  2617  08E5                     _myMain_Initialization:	
  2618                           
  2619                           ;incstack = 0
  2620                           ; Regs used in _myMain_Initialization: []
  2621  08E5  0008               	return
  2622  08E6                     __end_of_myMain_Initialization:	
  2623                           
  2624                           	psect	text3
  2625  0B41                     __ptext3:	
  2626 ;; *************** function _getTemp_AD *****************
  2627 ;; Defined at:
  2628 ;;		line 15 in file "../src/OverTemperature_B1.c"
  2629 ;; Parameters:    Size  Location     Type
  2630 ;;  channel         1    wreg     unsigned char 
  2631 ;; Auto vars:     Size  Location     Type
  2632 ;;  channel         1    2[BANK0 ] unsigned char 
  2633 ;;  ADRES           1    3[BANK0 ] unsigned char 
  2634 ;; Return value:  Size  Location     Type
  2635 ;;		None               void
  2636 ;; Registers used:
  2637 ;;		wreg, status,2, status,0, pclath, cstack
  2638 ;; Tracked objects:
  2639 ;;		On entry : 0/0
  2640 ;;		On exit  : 0/0
  2641 ;;		Unchanged: 0/0
  2642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2643 ;;      Params:         0       0       0       0
  2644 ;;      Locals:         0       2       0       0
  2645 ;;      Temps:          0       2       0       0
  2646 ;;      Totals:         0       4       0       0
  2647 ;;Total ram usage:        4 bytes
  2648 ;; Hardware stack levels used:    1
  2649 ;; Hardware stack levels required when called:    4
  2650 ;; This function calls:
  2651 ;;		_getAD
  2652 ;; This function is called by:
  2653 ;;		_main
  2654 ;; This function uses a non-reentrant model
  2655 ;;
  2656                           
  2657                           
  2658                           ;psect for function _getTemp_AD
  2659  0B41                     _getTemp_AD:	
  2660                           
  2661                           ;incstack = 0
  2662                           ; Regs used in _getTemp_AD: [wreg+status,2+status,0+pclath+cstack]
  2663                           ;getTemp_AD@channel stored from wreg
  2664  0B41  1283               	bcf	3,5	;RP0=0, select bank0
  2665  0B42  1303               	bcf	3,6	;RP1=0, select bank0
  2666  0B43  00D9               	movwf	getTemp_AD@channel
  2667                           
  2668                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  2669  0B44  01DA               	clrf	getTemp_AD@ADRES
  2670                           
  2671                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  2672  0B45  1D42               	btfss	_Temp,2
  2673  0B46  0008               	return
  2674                           
  2675                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0x70);
  2676  0B47  3070               	movlw	112
  2677  0B48  00D7               	movwf	??_getTemp_AD
  2678  0B49  0857               	movf	??_getTemp_AD,w
  2679  0B4A  00F4               	movwf	getAD@adcon1
  2680  0B4B  0859               	movf	getTemp_AD@channel,w
  2681  0B4C  158A  2325  158A   	fcall	_getAD
  2682  0B4F  1283               	bcf	3,5	;RP0=0, select bank0
  2683  0B50  1303               	bcf	3,6	;RP1=0, select bank0
  2684  0B51  00D8               	movwf	??_getTemp_AD+1
  2685  0B52  0858               	movf	??_getTemp_AD+1,w
  2686  0B53  00DA               	movwf	getTemp_AD@ADRES
  2687                           
  2688                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  2689  0B54  085A               	movf	getTemp_AD@ADRES,w
  2690  0B55  1903               	btfsc	3,2
  2691  0B56  0008               	return
  2692                           
  2693                           ;OverTemperature_B1.c: 30: if (Temp.ADV < ADRES) {
  2694  0B57  085A               	movf	getTemp_AD@ADRES,w
  2695  0B58  0248               	subwf	_Temp+6,w
  2696  0B59  1803               	skipnc
  2697  0B5A  0008               	return
  2698                           
  2699                           ;OverTemperature_B1.c: 31: Temp.ADV = ADRES;
  2700  0B5B  085A               	movf	getTemp_AD@ADRES,w
  2701  0B5C  00D7               	movwf	??_getTemp_AD
  2702  0B5D  0857               	movf	??_getTemp_AD,w
  2703  0B5E  00C8               	movwf	_Temp+6
  2704  0B5F  0008               	return
  2705  0B60                     __end_of_getTemp_AD:	
  2706                           
  2707                           	psect	text4
  2708  03B8                     __ptext4:	
  2709 ;; *************** function _getPIR_AD *****************
  2710 ;; Defined at:
  2711 ;;		line 348 in file "../src/PIR_B1.c"
  2712 ;; Parameters:    Size  Location     Type
  2713 ;;  channel1        1    wreg     unsigned char 
  2714 ;;  channel2        1    8[BANK0 ] unsigned char 
  2715 ;; Auto vars:     Size  Location     Type
  2716 ;;  channel1        1   13[BANK0 ] unsigned char 
  2717 ;;  i               1   16[BANK0 ] unsigned char 
  2718 ;;  VRAD            1   15[BANK0 ] unsigned char 
  2719 ;;  VRAD1           1   14[BANK0 ] unsigned char 
  2720 ;;  j               1   12[BANK0 ] unsigned char 
  2721 ;; Return value:  Size  Location     Type
  2722 ;;		None               void
  2723 ;; Registers used:
  2724 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2725 ;; Tracked objects:
  2726 ;;		On entry : 0/0
  2727 ;;		On exit  : 0/0
  2728 ;;		Unchanged: 0/0
  2729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2730 ;;      Params:         0       1       0       0
  2731 ;;      Locals:         0       5       0       0
  2732 ;;      Temps:          0       3       0       0
  2733 ;;      Totals:         0       9       0       0
  2734 ;;Total ram usage:        9 bytes
  2735 ;; Hardware stack levels used:    1
  2736 ;; Hardware stack levels required when called:    4
  2737 ;; This function calls:
  2738 ;;		___awdiv
  2739 ;;		___lwdiv
  2740 ;;		_getAD
  2741 ;; This function is called by:
  2742 ;;		_main
  2743 ;; This function uses a non-reentrant model
  2744 ;;
  2745                           
  2746                           
  2747                           ;psect for function _getPIR_AD
  2748  03B8                     _getPIR_AD:	
  2749                           
  2750                           ;incstack = 0
  2751                           ; Regs used in _getPIR_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2752                           ;getPIR_AD@channel1 stored from wreg
  2753  03B8  1283               	bcf	3,5	;RP0=0, select bank0
  2754  03B9  1303               	bcf	3,6	;RP1=0, select bank0
  2755  03BA  00E4               	movwf	getPIR_AD@channel1
  2756                           
  2757                           ;PIR_B1.c: 349: char i = 0, j = 0;
  2758  03BB  01E7               	clrf	getPIR_AD@i
  2759  03BC  01E3               	clrf	getPIR_AD@j
  2760                           
  2761                           ;PIR_B1.c: 350: char VRAD = 0, VRAD1 = 0;
  2762  03BD  01E6               	clrf	getPIR_AD@VRAD
  2763  03BE  01E5               	clrf	getPIR_AD@VRAD1
  2764                           
  2765                           ;PIR_B1.c: 351: if (_PIR.ADtoGO == 1 && _PIR.GO == 0) {
  2766  03BF  1683               	bsf	3,5	;RP0=1, select bank1
  2767  03C0  1303               	bcf	3,6	;RP1=0, select bank1
  2768  03C1  1CA0               	btfss	__PIR^(0+128),1
  2769  03C2  0008               	return
  2770  03C3  1920               	btfsc	__PIR^(0+128),2
  2771  03C4  0008               	return
  2772                           
  2773                           ;PIR_B1.c: 352: _PIR.GO = 1;
  2774  03C5  1520               	bsf	__PIR^(0+128),2
  2775                           
  2776                           ;PIR_B1.c: 359: VRAD1 = getAD(channel1, 0x70);
  2777  03C6  3070               	movlw	112
  2778  03C7  1283               	bcf	3,5	;RP0=0, select bank0
  2779  03C8  1303               	bcf	3,6	;RP1=0, select bank0
  2780  03C9  00E0               	movwf	??_getPIR_AD
  2781  03CA  0860               	movf	??_getPIR_AD,w
  2782  03CB  00F4               	movwf	getAD@adcon1
  2783  03CC  0864               	movf	getPIR_AD@channel1,w
  2784  03CD  158A  2325  118A   	fcall	_getAD
  2785  03D0  1283               	bcf	3,5	;RP0=0, select bank0
  2786  03D1  1303               	bcf	3,6	;RP1=0, select bank0
  2787  03D2  00E1               	movwf	??_getPIR_AD+1
  2788  03D3  0861               	movf	??_getPIR_AD+1,w
  2789  03D4  00E5               	movwf	getPIR_AD@VRAD1
  2790                           
  2791                           ;PIR_B1.c: 360: VRAD = VRAD1 / 25;
  2792  03D5  3019               	movlw	25
  2793  03D6  00D7               	movwf	___awdiv@divisor
  2794  03D7  3000               	movlw	0
  2795  03D8  00D8               	movwf	___awdiv@divisor+1
  2796  03D9  0865               	movf	getPIR_AD@VRAD1,w
  2797  03DA  00E0               	movwf	??_getPIR_AD
  2798  03DB  01E1               	clrf	??_getPIR_AD+1
  2799  03DC  0860               	movf	??_getPIR_AD,w
  2800  03DD  00D9               	movwf	___awdiv@dividend
  2801  03DE  0861               	movf	??_getPIR_AD+1,w
  2802  03DF  00DA               	movwf	___awdiv@dividend+1
  2803  03E0  158A  26A8  118A   	fcall	___awdiv
  2804  03E3  1283               	bcf	3,5	;RP0=0, select bank0
  2805  03E4  1303               	bcf	3,6	;RP1=0, select bank0
  2806  03E5  0857               	movf	?___awdiv,w
  2807  03E6  00E2               	movwf	??_getPIR_AD+2
  2808  03E7  0862               	movf	??_getPIR_AD+2,w
  2809  03E8  00E6               	movwf	getPIR_AD@VRAD
  2810                           
  2811                           ;PIR_B1.c: 361: _PIR.SignalAD = getAD(channel2, 0x70);
  2812  03E9  3070               	movlw	112
  2813  03EA  00E0               	movwf	??_getPIR_AD
  2814  03EB  0860               	movf	??_getPIR_AD,w
  2815  03EC  00F4               	movwf	getAD@adcon1
  2816  03ED  085F               	movf	getPIR_AD@channel2,w
  2817  03EE  158A  2325  118A   	fcall	_getAD
  2818  03F1  1283               	bcf	3,5	;RP0=0, select bank0
  2819  03F2  1303               	bcf	3,6	;RP1=0, select bank0
  2820  03F3  00E1               	movwf	??_getPIR_AD+1
  2821  03F4  0861               	movf	??_getPIR_AD+1,w
  2822  03F5  1683               	bsf	3,5	;RP0=1, select bank1
  2823  03F6  1303               	bcf	3,6	;RP1=0, select bank1
  2824  03F7  00A1               	movwf	(__PIR^(0+128)+1)
  2825                           
  2826                           ;PIR_B1.c: 375: if (VRAD < 1) {
  2827  03F8  1283               	bcf	3,5	;RP0=0, select bank0
  2828  03F9  1303               	bcf	3,6	;RP1=0, select bank0
  2829  03FA  08E6               	movf	getPIR_AD@VRAD,f
  2830  03FB  1D03               	skipz
  2831  03FC  2BFF               	goto	l5705
  2832                           
  2833                           ;PIR_B1.c: 376: _PIR.CloseTimeValue = 5;
  2834  03FD  3005               	movlw	5
  2835  03FE  2C05               	goto	L1
  2836  03FF                     l5705:	
  2837                           ;PIR_B1.c: 377: } else if (VRAD < 3) {
  2838                           
  2839  03FF  3003               	movlw	3
  2840  0400  1283               	bcf	3,5	;RP0=0, select bank0
  2841  0401  0266               	subwf	getPIR_AD@VRAD,w
  2842  0402  1803               	skipnc
  2843  0403  2C0A               	goto	l5709
  2844                           
  2845                           ;PIR_B1.c: 378: _PIR.CloseTimeValue = 60;
  2846  0404  303C               	movlw	60
  2847  0405                     L1:	
  2848  0405  1683               	bsf	3,5	;RP0=1, select bank1
  2849  0406  1303               	bcf	3,6	;RP1=0, select bank1
  2850  0407  00C3               	movwf	(__PIR^(0+128)+35)
  2851  0408  3000               	movlw	0
  2852  0409  2C30               	goto	L5
  2853  040A                     l5709:	
  2854                           ;PIR_B1.c: 379: } else if (VRAD < 5) {
  2855                           
  2856  040A  3005               	movlw	5
  2857  040B  1283               	bcf	3,5	;RP0=0, select bank0
  2858  040C  0266               	subwf	getPIR_AD@VRAD,w
  2859  040D  1803               	skipnc
  2860  040E  2C15               	goto	l5713
  2861                           
  2862                           ;PIR_B1.c: 380: _PIR.CloseTimeValue = 300;
  2863  040F  302C               	movlw	44
  2864  0410  1683               	bsf	3,5	;RP0=1, select bank1
  2865  0411  1303               	bcf	3,6	;RP1=0, select bank1
  2866  0412  00C3               	movwf	(__PIR^(0+128)+35)
  2867  0413  3001               	movlw	1
  2868  0414  2C30               	goto	L5
  2869  0415                     l5713:	
  2870                           ;PIR_B1.c: 381: } else if (VRAD < 7) {
  2871                           
  2872  0415  3007               	movlw	7
  2873  0416  1283               	bcf	3,5	;RP0=0, select bank0
  2874  0417  0266               	subwf	getPIR_AD@VRAD,w
  2875  0418  1803               	skipnc
  2876  0419  2C20               	goto	l5717
  2877                           
  2878                           ;PIR_B1.c: 382: _PIR.CloseTimeValue = 600;
  2879  041A  3058               	movlw	88
  2880  041B  1683               	bsf	3,5	;RP0=1, select bank1
  2881  041C  1303               	bcf	3,6	;RP1=0, select bank1
  2882  041D  00C3               	movwf	(__PIR^(0+128)+35)
  2883  041E  3002               	movlw	2
  2884  041F  2C30               	goto	L5
  2885  0420                     l5717:	
  2886                           ;PIR_B1.c: 383: } else if (VRAD < 9) {
  2887                           
  2888  0420  3009               	movlw	9
  2889  0421  1283               	bcf	3,5	;RP0=0, select bank0
  2890  0422  0266               	subwf	getPIR_AD@VRAD,w
  2891  0423  1803               	skipnc
  2892  0424  2C2B               	goto	l5721
  2893                           
  2894                           ;PIR_B1.c: 384: _PIR.CloseTimeValue = 900;
  2895  0425  3084               	movlw	132
  2896  0426  1683               	bsf	3,5	;RP0=1, select bank1
  2897  0427  1303               	bcf	3,6	;RP1=0, select bank1
  2898  0428  00C3               	movwf	(__PIR^(0+128)+35)
  2899  0429  3003               	movlw	3
  2900  042A  2C30               	goto	L5
  2901  042B                     l5721:	
  2902                           ;PIR_B1.c: 385: } else {
  2903                           
  2904                           
  2905                           ;PIR_B1.c: 386: _PIR.CloseTimeValue = 1200;
  2906  042B  30B0               	movlw	176
  2907  042C  1683               	bsf	3,5	;RP0=1, select bank1
  2908  042D  1303               	bcf	3,6	;RP1=0, select bank1
  2909  042E  00C3               	movwf	(__PIR^(0+128)+35)
  2910  042F  3004               	movlw	4
  2911  0430                     L5:	
  2912  0430  00C4               	movwf	(__PIR^(0+128)+36)
  2913                           
  2914                           ;PIR_B1.c: 387: }
  2915                           ;PIR_B1.c: 396: _PIR.TenAverage[_PIR.TenCount] = _PIR.SignalAD;
  2916  0431  0821               	movf	(__PIR^(0+128)+1),w
  2917  0432  1283               	bcf	3,5	;RP0=0, select bank0
  2918  0433  1303               	bcf	3,6	;RP1=0, select bank0
  2919  0434  00E0               	movwf	??_getPIR_AD
  2920  0435  1683               	bsf	3,5	;RP0=1, select bank1
  2921  0436  1303               	bcf	3,6	;RP1=0, select bank1
  2922  0437  0824               	movf	(__PIR^(0+128)+4),w
  2923  0438  3EA5               	addlw	(__PIR+5)& (0+255)
  2924  0439  0084               	movwf	4
  2925  043A  1283               	bcf	3,5	;RP0=0, select bank0
  2926  043B  1303               	bcf	3,6	;RP1=0, select bank0
  2927  043C  0860               	movf	??_getPIR_AD,w
  2928  043D  1383               	bcf	3,7	;select IRP bank1
  2929  043E  0080               	movwf	0
  2930                           
  2931                           ;PIR_B1.c: 397: for (i = 0; i < 10; i++) {
  2932  043F  01E7               	clrf	getPIR_AD@i
  2933  0440  300A               	movlw	10
  2934  0441  0267               	subwf	getPIR_AD@i,w
  2935  0442  1803               	btfsc	3,0
  2936  0443  2C60               	goto	l5737
  2937  0444                     l5731:	
  2938                           
  2939                           ;PIR_B1.c: 398: _PIR.TenAverageValue += _PIR.TenAverage[i];
  2940  0444  0867               	movf	getPIR_AD@i,w
  2941  0445  3EA5               	addlw	(__PIR+5)& (0+255)
  2942  0446  0084               	movwf	4
  2943  0447  0800               	movf	0,w
  2944  0448  00E0               	movwf	??_getPIR_AD
  2945  0449  01E1               	clrf	??_getPIR_AD+1
  2946  044A  0860               	movf	??_getPIR_AD,w
  2947  044B  1683               	bsf	3,5	;RP0=1, select bank1
  2948  044C  1303               	bcf	3,6	;RP1=0, select bank1
  2949  044D  07AF               	addwf	(__PIR^(0+128)+15),f
  2950  044E  1803               	skipnc
  2951  044F  0AB0               	incf	((__PIR+1)^(0+128)+15),f
  2952  0450  1283               	bcf	3,5	;RP0=0, select bank0
  2953  0451  1303               	bcf	3,6	;RP1=0, select bank0
  2954  0452  0861               	movf	??_getPIR_AD+1,w
  2955  0453  1683               	bsf	3,5	;RP0=1, select bank1
  2956  0454  1303               	bcf	3,6	;RP1=0, select bank1
  2957  0455  07B0               	addwf	((__PIR+1)^(0+128)+15),f
  2958  0456  3001               	movlw	1
  2959  0457  1283               	bcf	3,5	;RP0=0, select bank0
  2960  0458  1303               	bcf	3,6	;RP1=0, select bank0
  2961  0459  00E0               	movwf	??_getPIR_AD
  2962  045A  0860               	movf	??_getPIR_AD,w
  2963  045B  07E7               	addwf	getPIR_AD@i,f
  2964  045C  300A               	movlw	10
  2965  045D  0267               	subwf	getPIR_AD@i,w
  2966  045E  1C03               	skipc
  2967  045F  2C44               	goto	l5731
  2968  0460                     l5737:	
  2969                           
  2970                           ;PIR_B1.c: 399: }
  2971                           ;PIR_B1.c: 400: _PIR.HundredAverage[_PIR.HundreCount] = (_PIR.TenAverageValue / 10);
  2972  0460  300A               	movlw	10
  2973  0461  00D7               	movwf	___lwdiv@divisor
  2974  0462  3000               	movlw	0
  2975  0463  00D8               	movwf	___lwdiv@divisor+1
  2976  0464  1683               	bsf	3,5	;RP0=1, select bank1
  2977  0465  1303               	bcf	3,6	;RP1=0, select bank1
  2978  0466  0830               	movf	((__PIR+1)^(0+128)+15),w
  2979  0467  1283               	bcf	3,5	;RP0=0, select bank0
  2980  0468  1303               	bcf	3,6	;RP1=0, select bank0
  2981  0469  01DA               	clrf	___lwdiv@dividend+1
  2982  046A  07DA               	addwf	___lwdiv@dividend+1,f
  2983  046B  1683               	bsf	3,5	;RP0=1, select bank1
  2984  046C  1303               	bcf	3,6	;RP1=0, select bank1
  2985  046D  082F               	movf	(__PIR^(0+128)+15),w
  2986  046E  1283               	bcf	3,5	;RP0=0, select bank0
  2987  046F  1303               	bcf	3,6	;RP1=0, select bank0
  2988  0470  01D9               	clrf	___lwdiv@dividend
  2989  0471  07D9               	addwf	___lwdiv@dividend,f
  2990  0472  158A  253D  118A   	fcall	___lwdiv
  2991  0475  1283               	bcf	3,5	;RP0=0, select bank0
  2992  0476  1303               	bcf	3,6	;RP1=0, select bank0
  2993  0477  0857               	movf	?___lwdiv,w
  2994  0478  00E0               	movwf	??_getPIR_AD
  2995  0479  1683               	bsf	3,5	;RP0=1, select bank1
  2996  047A  1303               	bcf	3,6	;RP1=0, select bank1
  2997  047B  0831               	movf	(__PIR^(0+128)+17),w
  2998  047C  3EB2               	addlw	(__PIR+18)& (0+255)
  2999  047D  0084               	movwf	4
  3000  047E  1283               	bcf	3,5	;RP0=0, select bank0
  3001  047F  1303               	bcf	3,6	;RP1=0, select bank0
  3002  0480  0860               	movf	??_getPIR_AD,w
  3003  0481  1383               	bcf	3,7	;select IRP bank1
  3004  0482  0080               	movwf	0
  3005                           
  3006                           ;PIR_B1.c: 401: _PIR.TenAverageValue = 0;
  3007  0483  1683               	bsf	3,5	;RP0=1, select bank1
  3008  0484  1303               	bcf	3,6	;RP1=0, select bank1
  3009  0485  01AF               	clrf	(__PIR^(0+128)+15)
  3010  0486  01B0               	clrf	((__PIR+1)^(0+128)+15)
  3011                           
  3012                           ;PIR_B1.c: 403: for (i = 0; i <= 9; i++) {
  3013  0487  1283               	bcf	3,5	;RP0=0, select bank0
  3014  0488  1303               	bcf	3,6	;RP1=0, select bank0
  3015  0489  01E7               	clrf	getPIR_AD@i
  3016  048A  300A               	movlw	10
  3017  048B  0267               	subwf	getPIR_AD@i,w
  3018  048C  1803               	btfsc	3,0
  3019  048D  2CAA               	goto	l5753
  3020  048E                     l5747:	
  3021                           
  3022                           ;PIR_B1.c: 404: _PIR.HundredAverageValue += _PIR.HundredAverage[i];
  3023  048E  0867               	movf	getPIR_AD@i,w
  3024  048F  3EB2               	addlw	(__PIR+18)& (0+255)
  3025  0490  0084               	movwf	4
  3026  0491  0800               	movf	0,w
  3027  0492  00E0               	movwf	??_getPIR_AD
  3028  0493  01E1               	clrf	??_getPIR_AD+1
  3029  0494  0860               	movf	??_getPIR_AD,w
  3030  0495  1683               	bsf	3,5	;RP0=1, select bank1
  3031  0496  1303               	bcf	3,6	;RP1=0, select bank1
  3032  0497  07BC               	addwf	(__PIR^(0+128)+28),f
  3033  0498  1803               	skipnc
  3034  0499  0ABD               	incf	((__PIR+1)^(0+128)+28),f
  3035  049A  1283               	bcf	3,5	;RP0=0, select bank0
  3036  049B  1303               	bcf	3,6	;RP1=0, select bank0
  3037  049C  0861               	movf	??_getPIR_AD+1,w
  3038  049D  1683               	bsf	3,5	;RP0=1, select bank1
  3039  049E  1303               	bcf	3,6	;RP1=0, select bank1
  3040  049F  07BD               	addwf	((__PIR+1)^(0+128)+28),f
  3041  04A0  3001               	movlw	1
  3042  04A1  1283               	bcf	3,5	;RP0=0, select bank0
  3043  04A2  1303               	bcf	3,6	;RP1=0, select bank0
  3044  04A3  00E0               	movwf	??_getPIR_AD
  3045  04A4  0860               	movf	??_getPIR_AD,w
  3046  04A5  07E7               	addwf	getPIR_AD@i,f
  3047  04A6  300A               	movlw	10
  3048  04A7  0267               	subwf	getPIR_AD@i,w
  3049  04A8  1C03               	skipc
  3050  04A9  2C8E               	goto	l5747
  3051  04AA                     l5753:	
  3052                           
  3053                           ;PIR_B1.c: 405: }
  3054                           ;PIR_B1.c: 406: _PIR.ReferenceVoltage = (_PIR.HundredAverageValue / 10);
  3055  04AA  300A               	movlw	10
  3056  04AB  00D7               	movwf	___lwdiv@divisor
  3057  04AC  3000               	movlw	0
  3058  04AD  00D8               	movwf	___lwdiv@divisor+1
  3059  04AE  1683               	bsf	3,5	;RP0=1, select bank1
  3060  04AF  1303               	bcf	3,6	;RP1=0, select bank1
  3061  04B0  083D               	movf	((__PIR+1)^(0+128)+28),w
  3062  04B1  1283               	bcf	3,5	;RP0=0, select bank0
  3063  04B2  1303               	bcf	3,6	;RP1=0, select bank0
  3064  04B3  01DA               	clrf	___lwdiv@dividend+1
  3065  04B4  07DA               	addwf	___lwdiv@dividend+1,f
  3066  04B5  1683               	bsf	3,5	;RP0=1, select bank1
  3067  04B6  1303               	bcf	3,6	;RP1=0, select bank1
  3068  04B7  083C               	movf	(__PIR^(0+128)+28),w
  3069  04B8  1283               	bcf	3,5	;RP0=0, select bank0
  3070  04B9  1303               	bcf	3,6	;RP1=0, select bank0
  3071  04BA  01D9               	clrf	___lwdiv@dividend
  3072  04BB  07D9               	addwf	___lwdiv@dividend,f
  3073  04BC  158A  253D  118A   	fcall	___lwdiv
  3074  04BF  1283               	bcf	3,5	;RP0=0, select bank0
  3075  04C0  1303               	bcf	3,6	;RP1=0, select bank0
  3076  04C1  0857               	movf	?___lwdiv,w
  3077  04C2  00E0               	movwf	??_getPIR_AD
  3078  04C3  0860               	movf	??_getPIR_AD,w
  3079  04C4  1683               	bsf	3,5	;RP0=1, select bank1
  3080  04C5  1303               	bcf	3,6	;RP1=0, select bank1
  3081  04C6  00A3               	movwf	(__PIR^(0+128)+3)
  3082                           
  3083                           ;PIR_B1.c: 407: _PIR.HundredAverageValue = 0;
  3084  04C7  01BC               	clrf	(__PIR^(0+128)+28)
  3085  04C8  01BD               	clrf	((__PIR+1)^(0+128)+28)
  3086                           
  3087                           ;PIR_B1.c: 409: if (_PIR.TenCount < 10) {
  3088  04C9  300A               	movlw	10
  3089  04CA  0224               	subwf	(__PIR^(0+128)+4),w
  3090  04CB  1803               	skipnc
  3091  04CC  2CD6               	goto	l5761
  3092                           
  3093                           ;PIR_B1.c: 410: _PIR.TenCount++;
  3094  04CD  3001               	movlw	1
  3095  04CE  1283               	bcf	3,5	;RP0=0, select bank0
  3096  04CF  1303               	bcf	3,6	;RP1=0, select bank0
  3097  04D0  00E0               	movwf	??_getPIR_AD
  3098  04D1  0860               	movf	??_getPIR_AD,w
  3099  04D2  1683               	bsf	3,5	;RP0=1, select bank1
  3100  04D3  1303               	bcf	3,6	;RP1=0, select bank1
  3101  04D4  07A4               	addwf	(__PIR^(0+128)+4),f
  3102                           
  3103                           ;PIR_B1.c: 411: } else {
  3104  04D5  0008               	return
  3105  04D6                     l5761:	
  3106                           
  3107                           ;PIR_B1.c: 412: _PIR.TenCount = 0;
  3108  04D6  01A4               	clrf	(__PIR^(0+128)+4)
  3109                           
  3110                           ;PIR_B1.c: 413: if (_PIR.HundreCount < 10)
  3111  04D7  300A               	movlw	10
  3112  04D8  0231               	subwf	(__PIR^(0+128)+17),w
  3113  04D9  1803               	skipnc
  3114  04DA  2CE4               	goto	l5767
  3115                           
  3116                           ;PIR_B1.c: 414: _PIR.HundreCount++;
  3117  04DB  3001               	movlw	1
  3118  04DC  1283               	bcf	3,5	;RP0=0, select bank0
  3119  04DD  1303               	bcf	3,6	;RP1=0, select bank0
  3120  04DE  00E0               	movwf	??_getPIR_AD
  3121  04DF  0860               	movf	??_getPIR_AD,w
  3122  04E0  1683               	bsf	3,5	;RP0=1, select bank1
  3123  04E1  1303               	bcf	3,6	;RP1=0, select bank1
  3124  04E2  07B1               	addwf	(__PIR^(0+128)+17),f
  3125  04E3  0008               	return
  3126  04E4                     l5767:	
  3127                           
  3128                           ;PIR_B1.c: 415: else
  3129                           ;PIR_B1.c: 416: _PIR.HundreCount = 0;
  3130  04E4  01B1               	clrf	(__PIR^(0+128)+17)
  3131  04E5  0008               	return
  3132  04E6                     __end_of_getPIR_AD:	
  3133                           
  3134                           	psect	text5
  3135  0E4C                     __ptext5:	
  3136 ;; *************** function _getLoad_AD *****************
  3137 ;; Defined at:
  3138 ;;		line 16 in file "../src/OverLoad_B1.c"
  3139 ;; Parameters:    Size  Location     Type
  3140 ;;  channel         1    wreg     unsigned char 
  3141 ;; Auto vars:     Size  Location     Type
  3142 ;;  channel         1    2[BANK0 ] unsigned char 
  3143 ;;  i               1    6[BANK0 ] unsigned char 
  3144 ;;  ADRES           1    5[BANK0 ] unsigned char 
  3145 ;;  j               1    4[BANK0 ] unsigned char 
  3146 ;;  k               1    3[BANK0 ] unsigned char 
  3147 ;; Return value:  Size  Location     Type
  3148 ;;		None               void
  3149 ;; Registers used:
  3150 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3151 ;; Tracked objects:
  3152 ;;		On entry : 0/0
  3153 ;;		On exit  : 0/0
  3154 ;;		Unchanged: 0/0
  3155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3156 ;;      Params:         0       0       0       0
  3157 ;;      Locals:         0       5       0       0
  3158 ;;      Temps:          0       2       0       0
  3159 ;;      Totals:         0       7       0       0
  3160 ;;Total ram usage:        7 bytes
  3161 ;; Hardware stack levels used:    1
  3162 ;; Hardware stack levels required when called:    4
  3163 ;; This function calls:
  3164 ;;		_getAD
  3165 ;; This function is called by:
  3166 ;;		_main
  3167 ;; This function uses a non-reentrant model
  3168 ;;
  3169                           
  3170                           
  3171                           ;psect for function _getLoad_AD
  3172  0E4C                     _getLoad_AD:	
  3173                           
  3174                           ;incstack = 0
  3175                           ; Regs used in _getLoad_AD: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3176                           ;getLoad_AD@channel stored from wreg
  3177  0E4C  1283               	bcf	3,5	;RP0=0, select bank0
  3178  0E4D  1303               	bcf	3,6	;RP1=0, select bank0
  3179  0E4E  00D9               	movwf	getLoad_AD@channel
  3180                           
  3181                           ;OverLoad_B1.c: 17: char i = 0, j = 0, k = 0;
  3182  0E4F  01DD               	clrf	getLoad_AD@i
  3183  0E50  01DB               	clrf	getLoad_AD@j
  3184  0E51  01DA               	clrf	getLoad_AD@k
  3185                           
  3186                           ;OverLoad_B1.c: 18: ADtype ADRES = 0;
  3187  0E52  01DC               	clrf	getLoad_AD@ADRES
  3188                           
  3189                           ;OverLoad_B1.c: 19: if (Load.ADtoGO == 1) {
  3190  0E53  1683               	bsf	3,5	;RP0=1, select bank1
  3191  0E54  1303               	bcf	3,6	;RP1=0, select bank1
  3192  0E55  1E4A               	btfss	_Load^(0+128),4
  3193  0E56  0008               	return
  3194                           
  3195                           ;OverLoad_B1.c: 21: ADRES = getAD(channel, 0x73);
  3196  0E57  3073               	movlw	115
  3197  0E58  1283               	bcf	3,5	;RP0=0, select bank0
  3198  0E59  1303               	bcf	3,6	;RP1=0, select bank0
  3199  0E5A  00D7               	movwf	??_getLoad_AD
  3200  0E5B  0857               	movf	??_getLoad_AD,w
  3201  0E5C  00F4               	movwf	getAD@adcon1
  3202  0E5D  0859               	movf	getLoad_AD@channel,w
  3203  0E5E  158A  2325  158A   	fcall	_getAD
  3204  0E61  1283               	bcf	3,5	;RP0=0, select bank0
  3205  0E62  1303               	bcf	3,6	;RP1=0, select bank0
  3206  0E63  00D8               	movwf	??_getLoad_AD+1
  3207  0E64  0858               	movf	??_getLoad_AD+1,w
  3208  0E65  00DC               	movwf	getLoad_AD@ADRES
  3209                           
  3210                           ;OverLoad_B1.c: 22: for (i = 0; i < 4; i++) {
  3211  0E66  01DD               	clrf	getLoad_AD@i
  3212  0E67  3004               	movlw	4
  3213  0E68  025D               	subwf	getLoad_AD@i,w
  3214  0E69  1803               	btfsc	3,0
  3215  0E6A  2E87               	goto	l5659
  3216  0E6B                     l5647:	
  3217                           
  3218                           ;OverLoad_B1.c: 23: if (Load.AH[i] < ADRES && j == 0) {
  3219  0E6B  085D               	movf	getLoad_AD@i,w
  3220  0E6C  3ED4               	addlw	(_Load+10)& (0+255)
  3221  0E6D  0084               	movwf	4
  3222  0E6E  085C               	movf	getLoad_AD@ADRES,w
  3223  0E6F  1383               	bcf	3,7	;select IRP bank1
  3224  0E70  0200               	subwf	0,w
  3225  0E71  1803               	skipnc
  3226  0E72  2E7F               	goto	l5655
  3227  0E73  08DB               	movf	getLoad_AD@j,f
  3228  0E74  1D03               	skipz
  3229  0E75  2E7F               	goto	l5655
  3230                           
  3231                           ;OverLoad_B1.c: 24: Load.AH[i] = ADRES;
  3232  0E76  085C               	movf	getLoad_AD@ADRES,w
  3233  0E77  00D7               	movwf	??_getLoad_AD
  3234  0E78  085D               	movf	getLoad_AD@i,w
  3235  0E79  3ED4               	addlw	(_Load+10)& (0+255)
  3236  0E7A  0084               	movwf	4
  3237  0E7B  0857               	movf	??_getLoad_AD,w
  3238  0E7C  0080               	movwf	0
  3239                           
  3240                           ;OverLoad_B1.c: 25: j = 1;
  3241  0E7D  01DB               	clrf	getLoad_AD@j
  3242  0E7E  0ADB               	incf	getLoad_AD@j,f
  3243  0E7F                     l5655:	
  3244  0E7F  3001               	movlw	1
  3245  0E80  00D7               	movwf	??_getLoad_AD
  3246  0E81  0857               	movf	??_getLoad_AD,w
  3247  0E82  07DD               	addwf	getLoad_AD@i,f
  3248  0E83  3004               	movlw	4
  3249  0E84  025D               	subwf	getLoad_AD@i,w
  3250  0E85  1C03               	skipc
  3251  0E86  2E6B               	goto	l5647
  3252  0E87                     l5659:	
  3253                           
  3254                           ;OverLoad_B1.c: 26: }
  3255                           ;OverLoad_B1.c: 27: }
  3256                           ;OverLoad_B1.c: 28: if (j == 0) {
  3257  0E87  08DB               	movf	getLoad_AD@j,f
  3258  0E88  1D03               	skipz
  3259  0E89  0008               	return
  3260                           
  3261                           ;OverLoad_B1.c: 29: for (i = 0; i < 4; i++) {
  3262  0E8A  01DD               	clrf	getLoad_AD@i
  3263  0E8B                     L6:	
  3264  0E8B  3004               	movlw	4
  3265  0E8C  025D               	subwf	getLoad_AD@i,w
  3266  0E8D  1803               	btfsc	3,0
  3267  0E8E  0008               	return
  3268                           
  3269                           ;OverLoad_B1.c: 30: if (Load.AL[i] > ADRES && k == 0) {
  3270  0E8F  085D               	movf	getLoad_AD@i,w
  3271  0E90  3ED9               	addlw	(_Load+15)& (0+255)
  3272  0E91  0084               	movwf	4
  3273  0E92  1383               	bcf	3,7	;select IRP bank1
  3274  0E93  0800               	movf	0,w
  3275  0E94  025C               	subwf	getLoad_AD@ADRES,w
  3276  0E95  1803               	skipnc
  3277  0E96  2EA3               	goto	l5675
  3278  0E97  08DA               	movf	getLoad_AD@k,f
  3279  0E98  1D03               	skipz
  3280  0E99  2EA3               	goto	l5675
  3281                           
  3282                           ;OverLoad_B1.c: 31: Load.AL[i] = ADRES;
  3283  0E9A  085C               	movf	getLoad_AD@ADRES,w
  3284  0E9B  00D7               	movwf	??_getLoad_AD
  3285  0E9C  085D               	movf	getLoad_AD@i,w
  3286  0E9D  3ED9               	addlw	(_Load+15)& (0+255)
  3287  0E9E  0084               	movwf	4
  3288  0E9F  0857               	movf	??_getLoad_AD,w
  3289  0EA0  0080               	movwf	0
  3290                           
  3291                           ;OverLoad_B1.c: 32: k = 1;
  3292  0EA1  01DA               	clrf	getLoad_AD@k
  3293  0EA2  0ADA               	incf	getLoad_AD@k,f
  3294  0EA3                     l5675:	
  3295  0EA3  3001               	movlw	1
  3296  0EA4  00D7               	movwf	??_getLoad_AD
  3297  0EA5  0857               	movf	??_getLoad_AD,w
  3298  0EA6  07DD               	addwf	getLoad_AD@i,f
  3299  0EA7  2E8B               	goto	L6
  3300  0EA8                     __end_of_getLoad_AD:	
  3301                           
  3302                           	psect	text6
  3303  0B60                     __ptext6:	
  3304 ;; *************** function _getCDS_AD *****************
  3305 ;; Defined at:
  3306 ;;		line 48 in file "../src/CDS_B1.c"
  3307 ;; Parameters:    Size  Location     Type
  3308 ;;  channel1        1    wreg     unsigned char 
  3309 ;;  channel2        1    0[BANK0 ] unsigned char 
  3310 ;; Auto vars:     Size  Location     Type
  3311 ;;  channel1        1    5[BANK0 ] unsigned char 
  3312 ;;  j               1    4[BANK0 ] unsigned char 
  3313 ;;  i               1    3[BANK0 ] unsigned char 
  3314 ;; Return value:  Size  Location     Type
  3315 ;;		None               void
  3316 ;; Registers used:
  3317 ;;		wreg, status,2, status,0, pclath, cstack
  3318 ;; Tracked objects:
  3319 ;;		On entry : 0/0
  3320 ;;		On exit  : 0/0
  3321 ;;		Unchanged: 0/0
  3322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3323 ;;      Params:         0       1       0       0
  3324 ;;      Locals:         0       3       0       0
  3325 ;;      Temps:          0       2       0       0
  3326 ;;      Totals:         0       6       0       0
  3327 ;;Total ram usage:        6 bytes
  3328 ;; Hardware stack levels used:    1
  3329 ;; Hardware stack levels required when called:    4
  3330 ;; This function calls:
  3331 ;;		_getAD
  3332 ;; This function is called by:
  3333 ;;		_main
  3334 ;; This function uses a non-reentrant model
  3335 ;;
  3336                           
  3337                           
  3338                           ;psect for function _getCDS_AD
  3339  0B60                     _getCDS_AD:	
  3340                           
  3341                           ;incstack = 0
  3342                           ; Regs used in _getCDS_AD: [wreg+status,2+status,0+pclath+cstack]
  3343                           ;getCDS_AD@channel1 stored from wreg
  3344  0B60  1283               	bcf	3,5	;RP0=0, select bank0
  3345  0B61  1303               	bcf	3,6	;RP1=0, select bank0
  3346  0B62  00DC               	movwf	getCDS_AD@channel1
  3347                           
  3348                           ;CDS_B1.c: 49: char i = 0, j = 0;
  3349  0B63  01DA               	clrf	getCDS_AD@i
  3350  0B64  01DB               	clrf	getCDS_AD@j
  3351                           
  3352                           ;CDS_B1.c: 50: if (_CDS.ADtoGO == 1) {
  3353  0B65  1DB6               	btfss	__CDS,3
  3354  0B66  0008               	return
  3355                           
  3356                           ;CDS_B1.c: 51: _CDS.GO = 1;
  3357  0B67  14B6               	bsf	__CDS,1
  3358                           
  3359                           ;CDS_B1.c: 52: _CDS.VRAD = getAD(channel1, 0x70);
  3360  0B68  3070               	movlw	112
  3361  0B69  00D8               	movwf	??_getCDS_AD
  3362  0B6A  0858               	movf	??_getCDS_AD,w
  3363  0B6B  00F4               	movwf	getAD@adcon1
  3364  0B6C  085C               	movf	getCDS_AD@channel1,w
  3365  0B6D  158A  2325  158A   	fcall	_getAD
  3366  0B70  1283               	bcf	3,5	;RP0=0, select bank0
  3367  0B71  1303               	bcf	3,6	;RP1=0, select bank0
  3368  0B72  00D9               	movwf	??_getCDS_AD+1
  3369  0B73  0859               	movf	??_getCDS_AD+1,w
  3370  0B74  00B8               	movwf	__CDS+2
  3371                           
  3372                           ;CDS_B1.c: 53: _CDS.SignalAD = getAD(channel2, 0x70);
  3373  0B75  3070               	movlw	112
  3374  0B76  00D8               	movwf	??_getCDS_AD
  3375  0B77  0858               	movf	??_getCDS_AD,w
  3376  0B78  00F4               	movwf	getAD@adcon1
  3377  0B79  0857               	movf	getCDS_AD@channel2,w
  3378  0B7A  158A  2325         	fcall	_getAD
  3379  0B7C  1283               	bcf	3,5	;RP0=0, select bank0
  3380  0B7D  1303               	bcf	3,6	;RP1=0, select bank0
  3381  0B7E  00D9               	movwf	??_getCDS_AD+1
  3382  0B7F  0859               	movf	??_getCDS_AD+1,w
  3383  0B80  00B9               	movwf	__CDS+3
  3384  0B81  0008               	return
  3385  0B82                     __end_of_getCDS_AD:	
  3386                           
  3387                           	psect	text7
  3388  0B25                     __ptext7:	
  3389 ;; *************** function _getAD *****************
  3390 ;; Defined at:
  3391 ;;		line 434 in file "../src/MCU_B1.c"
  3392 ;; Parameters:    Size  Location     Type
  3393 ;;  adcon0          1    wreg     unsigned char 
  3394 ;;  adcon1          1    4[COMMON] unsigned char 
  3395 ;; Auto vars:     Size  Location     Type
  3396 ;;  adcon0          1    5[COMMON] unsigned char 
  3397 ;; Return value:  Size  Location     Type
  3398 ;;                  1    wreg      unsigned char 
  3399 ;; Registers used:
  3400 ;;		wreg, status,2, status,0, pclath, cstack
  3401 ;; Tracked objects:
  3402 ;;		On entry : 0/0
  3403 ;;		On exit  : 0/0
  3404 ;;		Unchanged: 0/0
  3405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3406 ;;      Params:         1       0       0       0
  3407 ;;      Locals:         1       0       0       0
  3408 ;;      Temps:          0       0       0       0
  3409 ;;      Totals:         2       0       0       0
  3410 ;;Total ram usage:        2 bytes
  3411 ;; Hardware stack levels used:    1
  3412 ;; Hardware stack levels required when called:    3
  3413 ;; This function calls:
  3414 ;;		_Timeout_Counter
  3415 ;;		_set_TimeoutCleared
  3416 ;; This function is called by:
  3417 ;;		_getCDS_AD
  3418 ;;		_getLoad_AD
  3419 ;;		_getTemp_AD
  3420 ;;		_getPIR_AD
  3421 ;; This function uses a non-reentrant model
  3422 ;;
  3423                           
  3424                           
  3425                           ;psect for function _getAD
  3426  0B25                     _getAD:	
  3427                           
  3428                           ;incstack = 0
  3429                           ; Regs used in _getAD: [wreg+status,2+status,0+pclath+cstack]
  3430                           ;getAD@adcon0 stored from wreg
  3431  0B25  00F5               	movwf	getAD@adcon0
  3432                           
  3433                           ;MCU_B1.c: 435: ADCON0 = adcon0;
  3434  0B26  0875               	movf	getAD@adcon0,w
  3435  0B27  1283               	bcf	3,5	;RP0=0, select bank0
  3436  0B28  1303               	bcf	3,6	;RP1=0, select bank0
  3437  0B29  009F               	movwf	31	;volatile
  3438                           
  3439                           ;MCU_B1.c: 436: ADCON1 = adcon1;
  3440  0B2A  0874               	movf	getAD@adcon1,w
  3441  0B2B  1683               	bsf	3,5	;RP0=1, select bank1
  3442  0B2C  1303               	bcf	3,6	;RP1=0, select bank1
  3443  0B2D  009F               	movwf	31	;volatile
  3444                           
  3445                           ;MCU_B1.c: 437: GO_nDONE = 1;
  3446  0B2E  1283               	bcf	3,5	;RP0=0, select bank0
  3447  0B2F  1303               	bcf	3,6	;RP1=0, select bank0
  3448  0B30  149F               	bsf	31,1	;volatile
  3449                           
  3450                           ;MCU_B1.c: 438: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  3451  0B31  2B35               	goto	l5327
  3452  0B32                     l5325:	
  3453                           
  3454                           ;MCU_B1.c: 439: Timeout_Counter();
  3455  0B32  158A  222A  158A   	fcall	_Timeout_Counter
  3456  0B35                     l5327:	
  3457  0B35  1283               	bcf	3,5	;RP0=0, select bank0
  3458  0B36  1303               	bcf	3,6	;RP1=0, select bank0
  3459  0B37  1C9F               	btfss	31,1	;volatile
  3460  0B38  2B3B               	goto	l5331
  3461  0B39  1D33               	btfss	_myMain+2,2
  3462  0B3A  2B32               	goto	l5325
  3463  0B3B                     l5331:	
  3464                           
  3465                           ;MCU_B1.c: 440: };
  3466                           ;MCU_B1.c: 441: set_TimeoutCleared();
  3467  0B3B  158A  2112         	fcall	_set_TimeoutCleared
  3468                           
  3469                           ;MCU_B1.c: 442: return ADRES;
  3470  0B3D  1283               	bcf	3,5	;RP0=0, select bank0
  3471  0B3E  1303               	bcf	3,6	;RP1=0, select bank0
  3472  0B3F  081E               	movf	30,w	;volatile
  3473  0B40  0008               	return
  3474  0B41                     __end_of_getAD:	
  3475                           
  3476                           	psect	text8
  3477  09E1                     __ptext8:	
  3478 ;; *************** function _WDT_Main *****************
  3479 ;; Defined at:
  3480 ;;		line 1116 in file "../src/MCU_B1.c"
  3481 ;; Parameters:    Size  Location     Type
  3482 ;;		None
  3483 ;; Auto vars:     Size  Location     Type
  3484 ;;		None
  3485 ;; Return value:  Size  Location     Type
  3486 ;;		None               void
  3487 ;; Registers used:
  3488 ;;		wreg, status,2, status,0, pclath, cstack
  3489 ;; Tracked objects:
  3490 ;;		On entry : 0/0
  3491 ;;		On exit  : 0/0
  3492 ;;		Unchanged: 0/0
  3493 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3494 ;;      Params:         0       0       0       0
  3495 ;;      Locals:         0       0       0       0
  3496 ;;      Temps:          1       0       0       0
  3497 ;;      Totals:         1       0       0       0
  3498 ;;Total ram usage:        1 bytes
  3499 ;; Hardware stack levels used:    1
  3500 ;; Hardware stack levels required when called:    3
  3501 ;; This function calls:
  3502 ;;		_WDT_Clearing
  3503 ;; This function is called by:
  3504 ;;		_main
  3505 ;; This function uses a non-reentrant model
  3506 ;;
  3507                           
  3508                           
  3509                           ;psect for function _WDT_Main
  3510  09E1                     _WDT_Main:	
  3511                           
  3512                           ;MCU_B1.c: 1117: if (WDT.Enable == 1) {
  3513                           
  3514                           ;incstack = 0
  3515                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  3516  09E1  1283               	bcf	3,5	;RP0=0, select bank0
  3517  09E2  1303               	bcf	3,6	;RP1=0, select bank0
  3518  09E3  1C3D               	btfss	_WDT,0
  3519  09E4  0008               	return
  3520                           
  3521                           ;MCU_B1.c: 1118: if (WDT.Timer-- > 0) {
  3522  09E5  3001               	movlw	1
  3523  09E6  02BE               	subwf	_WDT+1,f
  3524  09E7  083E               	movf	_WDT+1,w
  3525  09E8  3AFF               	xorlw	255
  3526  09E9  1903               	skipnz
  3527  09EA  0008               	return
  3528                           
  3529                           ;MCU_B1.c: 1119: WDT.Timer = 100;
  3530  09EB  3064               	movlw	100
  3531  09EC  00F4               	movwf	??_WDT_Main
  3532  09ED  0874               	movf	??_WDT_Main,w
  3533  09EE  00BE               	movwf	_WDT+1
  3534                           
  3535                           ;MCU_B1.c: 1120: WDT_Clearing();
  3536  09EF  118A  2002         	fcall	_WDT_Clearing
  3537  09F1  0008               	return
  3538  09F2                     __end_of_WDT_Main:	
  3539                           
  3540                           	psect	text9
  3541  0002                     __ptext9:	
  3542 ;; *************** function _WDT_Clearing *****************
  3543 ;; Defined at:
  3544 ;;		line 1126 in file "../src/MCU_B1.c"
  3545 ;; Parameters:    Size  Location     Type
  3546 ;;		None
  3547 ;; Auto vars:     Size  Location     Type
  3548 ;;		None
  3549 ;; Return value:  Size  Location     Type
  3550 ;;		None               void
  3551 ;; Registers used:
  3552 ;;		None
  3553 ;; Tracked objects:
  3554 ;;		On entry : 0/0
  3555 ;;		On exit  : 0/0
  3556 ;;		Unchanged: 0/0
  3557 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3558 ;;      Params:         0       0       0       0
  3559 ;;      Locals:         0       0       0       0
  3560 ;;      Temps:          0       0       0       0
  3561 ;;      Totals:         0       0       0       0
  3562 ;;Total ram usage:        0 bytes
  3563 ;; Hardware stack levels used:    1
  3564 ;; Hardware stack levels required when called:    2
  3565 ;; This function calls:
  3566 ;;		Nothing
  3567 ;; This function is called by:
  3568 ;;		_WDT_Main
  3569 ;; This function uses a non-reentrant model
  3570 ;;
  3571                           
  3572                           
  3573                           ;psect for function _WDT_Clearing
  3574  0002                     _WDT_Clearing:	
  3575                           
  3576                           ;incstack = 0
  3577                           ; Regs used in _WDT_Clearing: []
  3578  0002  0064               	clrwdt	;# 
  3579  0003  0008               	return
  3580  0004                     __end_of_WDT_Clearing:	
  3581                           
  3582                           	psect	text10
  3583  08F2                     __ptext10:	
  3584 ;; *************** function _Temp_Main *****************
  3585 ;; Defined at:
  3586 ;;		line 57 in file "../src/OverTemperature_B1.c"
  3587 ;; Parameters:    Size  Location     Type
  3588 ;;		None
  3589 ;; Auto vars:     Size  Location     Type
  3590 ;;		None
  3591 ;; Return value:  Size  Location     Type
  3592 ;;		None               void
  3593 ;; Registers used:
  3594 ;;		wreg, status,2, status,0, pclath, cstack
  3595 ;; Tracked objects:
  3596 ;;		On entry : 0/0
  3597 ;;		On exit  : 0/0
  3598 ;;		Unchanged: 0/0
  3599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3600 ;;      Params:         0       0       0       0
  3601 ;;      Locals:         0       0       0       0
  3602 ;;      Temps:          0       0       0       0
  3603 ;;      Totals:         0       0       0       0
  3604 ;;Total ram usage:        0 bytes
  3605 ;; Hardware stack levels used:    1
  3606 ;; Hardware stack levels required when called:    5
  3607 ;; This function calls:
  3608 ;;		_setTemp_Main
  3609 ;; This function is called by:
  3610 ;;		_main
  3611 ;; This function uses a non-reentrant model
  3612 ;;
  3613                           
  3614                           
  3615                           ;psect for function _Temp_Main
  3616  08F2                     _Temp_Main:	
  3617                           
  3618                           ;OverTemperature_B1.c: 59: setTemp_Main();
  3619                           
  3620                           ;incstack = 0
  3621                           ; Regs used in _Temp_Main: [wreg+status,2+status,0+pclath+cstack]
  3622  08F2  118A  271C         	fcall	_setTemp_Main
  3623  08F4  0008               	return
  3624  08F5                     __end_of_Temp_Main:	
  3625                           
  3626                           	psect	text11
  3627  071C                     __ptext11:	
  3628 ;; *************** function _setTemp_Main *****************
  3629 ;; Defined at:
  3630 ;;		line 64 in file "../src/OverTemperature_B1.c"
  3631 ;; Parameters:    Size  Location     Type
  3632 ;;		None
  3633 ;; Auto vars:     Size  Location     Type
  3634 ;;  AD              1   16[BANK0 ] unsigned char 
  3635 ;;  DangerValue     1   15[BANK0 ] unsigned char 
  3636 ;;  SafeValue       1   14[BANK0 ] unsigned char 
  3637 ;;  TempGO          1   13[BANK0 ] unsigned char 
  3638 ;;  error           1   12[BANK0 ] unsigned char 
  3639 ;; Return value:  Size  Location     Type
  3640 ;;		None               void
  3641 ;; Registers used:
  3642 ;;		wreg, status,2, status,0, pclath, cstack
  3643 ;; Tracked objects:
  3644 ;;		On entry : 0/0
  3645 ;;		On exit  : 0/0
  3646 ;;		Unchanged: 0/0
  3647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3648 ;;      Params:         0       0       0       0
  3649 ;;      Locals:         0       5       0       0
  3650 ;;      Temps:          0       1       0       0
  3651 ;;      Totals:         0       6       0       0
  3652 ;;Total ram usage:        6 bytes
  3653 ;; Hardware stack levels used:    1
  3654 ;; Hardware stack levels required when called:    4
  3655 ;; This function calls:
  3656 ;;		_getMain_All_Error_Status
  3657 ;;		_getMain_All_LightsStatus
  3658 ;;		_setBuz
  3659 ;; This function is called by:
  3660 ;;		_Temp_Main
  3661 ;; This function uses a non-reentrant model
  3662 ;;
  3663                           
  3664                           
  3665                           ;psect for function _setTemp_Main
  3666  071C                     _setTemp_Main:	
  3667                           
  3668                           ;OverTemperature_B1.c: 65: char error = getMain_All_Error_Status(0);
  3669                           
  3670                           ;incstack = 0
  3671                           ; Regs used in _setTemp_Main: [wreg+status,2+status,0+pclath+cstack]
  3672  071C  3000               	movlw	0
  3673  071D  158A  24C1  118A   	fcall	_getMain_All_Error_Status
  3674  0720  1283               	bcf	3,5	;RP0=0, select bank0
  3675  0721  1303               	bcf	3,6	;RP1=0, select bank0
  3676  0722  00E2               	movwf	??_setTemp_Main
  3677  0723  0862               	movf	??_setTemp_Main,w
  3678  0724  00E3               	movwf	setTemp_Main@error
  3679                           
  3680                           ;OverTemperature_B1.c: 66: ADtype SafeValue = 0, DangerValue = 0, AD;
  3681  0725  01E5               	clrf	setTemp_Main@SafeValue
  3682  0726  01E6               	clrf	setTemp_Main@DangerValue
  3683                           
  3684                           ;OverTemperature_B1.c: 67: char TempGO = getMain_All_LightsStatus();
  3685  0727  158A  21C0  118A   	fcall	_getMain_All_LightsStatus
  3686  072A  1283               	bcf	3,5	;RP0=0, select bank0
  3687  072B  1303               	bcf	3,6	;RP1=0, select bank0
  3688  072C  00E2               	movwf	??_setTemp_Main
  3689  072D  0862               	movf	??_setTemp_Main,w
  3690  072E  00E4               	movwf	setTemp_Main@TempGO
  3691                           
  3692                           ;OverTemperature_B1.c: 69: if (Temp.Enable == 1) {
  3693  072F  1C42               	btfss	_Temp,0
  3694  0730  2FA2               	goto	l952
  3695                           
  3696                           ;OverTemperature_B1.c: 77: if (Temp.ADtoGO == 0) {
  3697  0731  1942               	btfsc	_Temp,2
  3698  0732  2F4F               	goto	l5393
  3699                           
  3700                           ;OverTemperature_B1.c: 78: if ((TempGO == 1 && Temp.ERROR == 0) || Temp.ERROR == 1) {
  3701  0733  0864               	movf	setTemp_Main@TempGO,w
  3702  0734  3A01               	xorlw	1
  3703  0735  1D03               	skipz
  3704  0736  2F39               	goto	l958
  3705  0737  1CC2               	btfss	_Temp,1
  3706  0738  2F3B               	goto	l5385
  3707  0739                     l958:	
  3708  0739  1CC2               	btfss	_Temp,1
  3709  073A  2F4C               	goto	l5391
  3710  073B                     l5385:	
  3711                           
  3712                           ;OverTemperature_B1.c: 79: Temp.Time++;
  3713  073B  3001               	movlw	1
  3714  073C  07C3               	addwf	_Temp+1,f
  3715  073D  1803               	skipnc
  3716  073E  0AC4               	incf	_Temp+2,f
  3717  073F  3000               	movlw	0
  3718  0740  07C4               	addwf	_Temp+2,f
  3719                           
  3720                           ;OverTemperature_B1.c: 80: if (Temp.Time >= (5000 / 20)) {
  3721  0741  3000               	movlw	0
  3722  0742  0244               	subwf	_Temp+2,w
  3723  0743  30FA               	movlw	250
  3724  0744  1903               	skipnz
  3725  0745  0243               	subwf	_Temp+1,w
  3726  0746  1C03               	skipc
  3727  0747  0008               	return
  3728                           
  3729                           ;OverTemperature_B1.c: 81: Temp.Time = 0;
  3730  0748  01C3               	clrf	_Temp+1
  3731  0749  01C4               	clrf	_Temp+2
  3732                           
  3733                           ;OverTemperature_B1.c: 82: Temp.ADtoGO = 1;
  3734  074A  1542               	bsf	_Temp,2
  3735                           
  3736                           ;OverTemperature_B1.c: 83: }
  3737                           ;OverTemperature_B1.c: 84: } else {
  3738  074B  0008               	return
  3739  074C                     l5391:	
  3740                           
  3741                           ;OverTemperature_B1.c: 85: Temp.Time = 0;
  3742  074C  01C3               	clrf	_Temp+1
  3743  074D  01C4               	clrf	_Temp+2
  3744                           
  3745                           ;OverTemperature_B1.c: 86: }
  3746                           ;OverTemperature_B1.c: 87: } else {
  3747  074E  0008               	return
  3748  074F                     l5393:	
  3749                           
  3750                           ;OverTemperature_B1.c: 88: Temp.Time++;
  3751  074F  3001               	movlw	1
  3752  0750  07C3               	addwf	_Temp+1,f
  3753  0751  1803               	skipnc
  3754  0752  0AC4               	incf	_Temp+2,f
  3755  0753  3000               	movlw	0
  3756  0754  07C4               	addwf	_Temp+2,f
  3757                           
  3758                           ;OverTemperature_B1.c: 89: if (Temp.Time >= (100 / 20)) {
  3759  0755  3000               	movlw	0
  3760  0756  0244               	subwf	_Temp+2,w
  3761  0757  3005               	movlw	5
  3762  0758  1903               	skipnz
  3763  0759  0243               	subwf	_Temp+1,w
  3764  075A  1C03               	skipc
  3765  075B  0008               	return
  3766                           
  3767                           ;OverTemperature_B1.c: 90: Temp.Time = 0;
  3768  075C  01C3               	clrf	_Temp+1
  3769  075D  01C4               	clrf	_Temp+2
  3770                           
  3771                           ;OverTemperature_B1.c: 95: if (Temp.ADV > 0) {
  3772  075E  0848               	movf	_Temp+6,w
  3773  075F  1903               	btfsc	3,2
  3774  0760  2F9C               	goto	l963
  3775                           
  3776                           ;OverTemperature_B1.c: 96: Temp.ADtoGO = 0;
  3777  0761  1142               	bcf	_Temp,2
  3778                           
  3779                           ;OverTemperature_B1.c: 97: AD = Temp.ADV;
  3780  0762  0848               	movf	_Temp+6,w
  3781  0763  00E2               	movwf	??_setTemp_Main
  3782  0764  0862               	movf	??_setTemp_Main,w
  3783  0765  00E7               	movwf	setTemp_Main@AD
  3784                           
  3785                           ;OverTemperature_B1.c: 106: SafeValue = 0x79;
  3786  0766  3079               	movlw	121
  3787  0767  00E2               	movwf	??_setTemp_Main
  3788  0768  0862               	movf	??_setTemp_Main,w
  3789  0769  00E5               	movwf	setTemp_Main@SafeValue
  3790                           
  3791                           ;OverTemperature_B1.c: 107: DangerValue = 0x85;
  3792  076A  3085               	movlw	133
  3793  076B  00E2               	movwf	??_setTemp_Main
  3794  076C  0862               	movf	??_setTemp_Main,w
  3795  076D  00E6               	movwf	setTemp_Main@DangerValue
  3796                           
  3797                           ;OverTemperature_B1.c: 119: if (Temp.ERROR == 1) {
  3798  076E  1CC2               	btfss	_Temp,1
  3799  076F  2F8C               	goto	l5419
  3800                           
  3801                           ;OverTemperature_B1.c: 120: if (AD >= SafeValue) {
  3802  0770  0865               	movf	setTemp_Main@SafeValue,w
  3803  0771  0267               	subwf	setTemp_Main@AD,w
  3804  0772  1C03               	skipc
  3805  0773  2F89               	goto	l5417
  3806                           
  3807                           ;OverTemperature_B1.c: 121: Temp.Count++;
  3808  0774  3001               	movlw	1
  3809  0775  00E2               	movwf	??_setTemp_Main
  3810  0776  0862               	movf	??_setTemp_Main,w
  3811  0777  07C5               	addwf	_Temp+3,f
  3812                           
  3813                           ;OverTemperature_B1.c: 122: if (Temp.Count >= 3) {
  3814  0778  3003               	movlw	3
  3815  0779  0245               	subwf	_Temp+3,w
  3816  077A  1C03               	skipc
  3817  077B  2F9C               	goto	l963
  3818                           
  3819                           ;OverTemperature_B1.c: 123: Temp.Count = 0;
  3820  077C  01C5               	clrf	_Temp+3
  3821                           
  3822                           ;OverTemperature_B1.c: 124: Temp.ERROR = 0;
  3823  077D  10C2               	bcf	_Temp,1
  3824                           
  3825                           ;OverTemperature_B1.c: 125: setBuz(2, 100);
  3826  077E  3064               	movlw	100
  3827  077F  00DF               	movwf	setBuz@time
  3828  0780  3000               	movlw	0
  3829  0781  00E0               	movwf	setBuz@time+1
  3830  0782  3002               	movlw	2
  3831  0783  158A  2605  118A   	fcall	_setBuz
  3832                           
  3833                           ;OverTemperature_B1.c: 126: }
  3834                           ;OverTemperature_B1.c: 127: } else {
  3835  0786  1283               	bcf	3,5	;RP0=0, select bank0
  3836  0787  1303               	bcf	3,6	;RP1=0, select bank0
  3837  0788  2F9C               	goto	l963
  3838  0789                     l5417:	
  3839                           
  3840                           ;OverTemperature_B1.c: 128: Temp.Count = 0;
  3841  0789  1283               	bcf	3,5	;RP0=0, select bank0
  3842  078A  1303               	bcf	3,6	;RP1=0, select bank0
  3843  078B  2F9B               	goto	l5429
  3844  078C                     l5419:	
  3845                           ;OverTemperature_B1.c: 129: }
  3846                           ;OverTemperature_B1.c: 130: } else {
  3847                           
  3848                           
  3849                           ;OverTemperature_B1.c: 131: if (AD <= DangerValue) {
  3850  078C  0867               	movf	setTemp_Main@AD,w
  3851  078D  0266               	subwf	setTemp_Main@DangerValue,w
  3852  078E  1C03               	skipc
  3853  078F  2F9B               	goto	l5429
  3854                           
  3855                           ;OverTemperature_B1.c: 132: Temp.Count++;
  3856  0790  3001               	movlw	1
  3857  0791  00E2               	movwf	??_setTemp_Main
  3858  0792  0862               	movf	??_setTemp_Main,w
  3859  0793  07C5               	addwf	_Temp+3,f
  3860                           
  3861                           ;OverTemperature_B1.c: 133: if (Temp.Count >= 3) {
  3862  0794  3003               	movlw	3
  3863  0795  0245               	subwf	_Temp+3,w
  3864  0796  1C03               	skipc
  3865  0797  2F9C               	goto	l963
  3866                           
  3867                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  3868  0798  01C5               	clrf	_Temp+3
  3869                           
  3870                           ;OverTemperature_B1.c: 135: Temp.ERROR = 1;
  3871  0799  14C2               	bsf	_Temp,1
  3872                           
  3873                           ;OverTemperature_B1.c: 136: }
  3874                           ;OverTemperature_B1.c: 137: } else {
  3875  079A  2F9C               	goto	l963
  3876  079B                     l5429:	
  3877                           
  3878                           ;OverTemperature_B1.c: 138: Temp.Count = 0;
  3879  079B  01C5               	clrf	_Temp+3
  3880  079C                     l963:	
  3881                           ;OverTemperature_B1.c: 139: }
  3882                           ;OverTemperature_B1.c: 140: }
  3883                           ;OverTemperature_B1.c: 141: ;;
  3884                           ;OverTemperature_B1.c: 142: ;;
  3885                           
  3886                           
  3887                           ;OverTemperature_B1.c: 158: }
  3888                           ;OverTemperature_B1.c: 159: Temp.ADH[0] = 0;
  3889  079C  1283               	bcf	3,5	;RP0=0, select bank0
  3890  079D  1303               	bcf	3,6	;RP1=0, select bank0
  3891  079E  01C6               	clrf	_Temp+4
  3892                           
  3893                           ;OverTemperature_B1.c: 160: Temp.ADH[1] = 0;
  3894  079F  01C7               	clrf	_Temp+5
  3895                           
  3896                           ;OverTemperature_B1.c: 161: Temp.ADV = 0;
  3897  07A0  01C8               	clrf	_Temp+6
  3898                           
  3899                           ;OverTemperature_B1.c: 162: }
  3900                           ;OverTemperature_B1.c: 163: }
  3901                           ;OverTemperature_B1.c: 166: } else {
  3902  07A1  0008               	return
  3903  07A2                     l952:	
  3904                           
  3905                           ;OverTemperature_B1.c: 167: if (myMain.PowerON == 1) {
  3906  07A2  1C31               	btfss	_myMain,0
  3907  07A3  0008               	return
  3908                           
  3909                           ;OverTemperature_B1.c: 168: Temp.Enable = 1;
  3910  07A4  1442               	bsf	_Temp,0
  3911  07A5  0008               	return
  3912  07A6                     __end_of_setTemp_Main:	
  3913                           
  3914                           	psect	text12
  3915  08EF                     __ptext12:	
  3916 ;; *************** function _Temp_Initialization *****************
  3917 ;; Defined at:
  3918 ;;		line 8 in file "../src/OverTemperature_B1.c"
  3919 ;; Parameters:    Size  Location     Type
  3920 ;;		None
  3921 ;; Auto vars:     Size  Location     Type
  3922 ;;		None
  3923 ;; Return value:  Size  Location     Type
  3924 ;;		None               void
  3925 ;; Registers used:
  3926 ;;		status,2, status,0, pclath, cstack
  3927 ;; Tracked objects:
  3928 ;;		On entry : 0/0
  3929 ;;		On exit  : 0/0
  3930 ;;		Unchanged: 0/0
  3931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3932 ;;      Params:         0       0       0       0
  3933 ;;      Locals:         0       0       0       0
  3934 ;;      Temps:          0       0       0       0
  3935 ;;      Totals:         0       0       0       0
  3936 ;;Total ram usage:        0 bytes
  3937 ;; Hardware stack levels used:    1
  3938 ;; Hardware stack levels required when called:    3
  3939 ;; This function calls:
  3940 ;;		_setTemp_Initialization
  3941 ;; This function is called by:
  3942 ;;		_main
  3943 ;; This function uses a non-reentrant model
  3944 ;;
  3945                           
  3946                           
  3947                           ;psect for function _Temp_Initialization
  3948  08EF                     _Temp_Initialization:	
  3949                           
  3950                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  3951                           
  3952                           ;incstack = 0
  3953                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  3954  08EF  158A  20E4         	fcall	_setTemp_Initialization
  3955  08F1  0008               	return
  3956  08F2                     __end_of_Temp_Initialization:	
  3957                           
  3958                           	psect	text13
  3959  08E4                     __ptext13:	
  3960 ;; *************** function _setTemp_Initialization *****************
  3961 ;; Defined at:
  3962 ;;		line 52 in file "../src/OverTemperature_B1.c"
  3963 ;; Parameters:    Size  Location     Type
  3964 ;;		None
  3965 ;; Auto vars:     Size  Location     Type
  3966 ;;		None
  3967 ;; Return value:  Size  Location     Type
  3968 ;;		None               void
  3969 ;; Registers used:
  3970 ;;		None
  3971 ;; Tracked objects:
  3972 ;;		On entry : 0/0
  3973 ;;		On exit  : 0/0
  3974 ;;		Unchanged: 0/0
  3975 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3976 ;;      Params:         0       0       0       0
  3977 ;;      Locals:         0       0       0       0
  3978 ;;      Temps:          0       0       0       0
  3979 ;;      Totals:         0       0       0       0
  3980 ;;Total ram usage:        0 bytes
  3981 ;; Hardware stack levels used:    1
  3982 ;; Hardware stack levels required when called:    2
  3983 ;; This function calls:
  3984 ;;		Nothing
  3985 ;; This function is called by:
  3986 ;;		_Temp_Initialization
  3987 ;; This function uses a non-reentrant model
  3988 ;;
  3989                           
  3990                           
  3991                           ;psect for function _setTemp_Initialization
  3992  08E4                     _setTemp_Initialization:	
  3993                           
  3994                           ;incstack = 0
  3995                           ; Regs used in _setTemp_Initialization: []
  3996  08E4  0008               	return
  3997  08E5                     __end_of_setTemp_Initialization:	
  3998                           
  3999                           	psect	text14
  4000  0951                     __ptext14:	
  4001 ;; *************** function _Switch_Main *****************
  4002 ;; Defined at:
  4003 ;;		line 76 in file "../src/Switch_B1.c"
  4004 ;; Parameters:    Size  Location     Type
  4005 ;;		None
  4006 ;; Auto vars:     Size  Location     Type
  4007 ;;		None
  4008 ;; Return value:  Size  Location     Type
  4009 ;;		None               void
  4010 ;; Registers used:
  4011 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4012 ;; Tracked objects:
  4013 ;;		On entry : 0/0
  4014 ;;		On exit  : 0/0
  4015 ;;		Unchanged: 0/0
  4016 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4017 ;;      Params:         0       0       0       0
  4018 ;;      Locals:         0       0       0       0
  4019 ;;      Temps:          0       0       0       0
  4020 ;;      Totals:         0       0       0       0
  4021 ;;Total ram usage:        0 bytes
  4022 ;; Hardware stack levels used:    1
  4023 ;; Hardware stack levels required when called:    6
  4024 ;; This function calls:
  4025 ;;		_TouchPower
  4026 ;;		_setSw_Main
  4027 ;; This function is called by:
  4028 ;;		_main
  4029 ;; This function uses a non-reentrant model
  4030 ;;
  4031                           
  4032                           
  4033                           ;psect for function _Switch_Main
  4034  0951                     _Switch_Main:	
  4035                           
  4036                           ;Switch_B1.c: 79: setSw_Main(1);
  4037                           
  4038                           ;incstack = 0
  4039                           ; Regs used in _Switch_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4040  0951  3001               	movlw	1
  4041  0952  118A  25BE  158A   	fcall	_setSw_Main
  4042                           
  4043                           ;Switch_B1.c: 83: setSw_Main(2);
  4044  0955  3002               	movlw	2
  4045  0956  118A  25BE  158A   	fcall	_setSw_Main
  4046                           
  4047                           ;Switch_B1.c: 91: TouchPower();
  4048  0959  158A  223E         	fcall	_TouchPower
  4049  095B  0008               	return
  4050  095C                     __end_of_Switch_Main:	
  4051                           
  4052                           	psect	text15
  4053  05BE                     __ptext15:	
  4054 ;; *************** function _setSw_Main *****************
  4055 ;; Defined at:
  4056 ;;		line 117 in file "../src/Switch_B1.c"
  4057 ;; Parameters:    Size  Location     Type
  4058 ;;  sw              1    wreg     unsigned char 
  4059 ;; Auto vars:     Size  Location     Type
  4060 ;;  sw              1    8[BANK0 ] unsigned char 
  4061 ;; Return value:  Size  Location     Type
  4062 ;;		None               void
  4063 ;; Registers used:
  4064 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  4065 ;; Tracked objects:
  4066 ;;		On entry : 0/0
  4067 ;;		On exit  : 0/0
  4068 ;;		Unchanged: 0/0
  4069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4070 ;;      Params:         0       0       0       0
  4071 ;;      Locals:         0       1       0       0
  4072 ;;      Temps:          0       2       0       0
  4073 ;;      Totals:         0       3       0       0
  4074 ;;Total ram usage:        3 bytes
  4075 ;; Hardware stack levels used:    1
  4076 ;; Hardware stack levels required when called:    5
  4077 ;; This function calls:
  4078 ;;		_SwPointSelect
  4079 ;;		_getMain_All_Error_Status
  4080 ;;		_getSw_KeyStatus
  4081 ;;		_setLED
  4082 ;;		_setLights_SwOff
  4083 ;;		_setLights_SwOn
  4084 ;; This function is called by:
  4085 ;;		_Switch_Main
  4086 ;; This function uses a non-reentrant model
  4087 ;;
  4088                           
  4089                           
  4090                           ;psect for function _setSw_Main
  4091  05BE                     _setSw_Main:	
  4092                           
  4093                           ;incstack = 0
  4094                           ; Regs used in _setSw_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4095                           ;setSw_Main@sw stored from wreg
  4096  05BE  1283               	bcf	3,5	;RP0=0, select bank0
  4097  05BF  1303               	bcf	3,6	;RP1=0, select bank0
  4098  05C0  00DF               	movwf	setSw_Main@sw
  4099                           
  4100                           ;Switch_B1.c: 118: SwPointSelect(sw);
  4101  05C1  085F               	movf	setSw_Main@sw,w
  4102  05C2  158A  2217  118A   	fcall	_SwPointSelect
  4103                           
  4104                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  4105  05C5  0879               	movf	_Sw,w
  4106  05C6  0084               	movwf	4
  4107  05C7  1783               	bsf	3,7	;select IRP bank2
  4108  05C8  1C00               	btfss	0,0
  4109  05C9  2E71               	goto	l1426
  4110                           
  4111                           ;Switch_B1.c: 121: if (getMain_All_Error_Status(0) == 0) {
  4112  05CA  3000               	movlw	0
  4113  05CB  158A  24C1  118A   	fcall	_getMain_All_Error_Status
  4114  05CE  3800               	iorlw	0
  4115  05CF  1D03               	skipz
  4116  05D0  2DEC               	goto	l5457
  4117                           
  4118                           ;Switch_B1.c: 122: Sw->Detect = 0;
  4119  05D1  0A79               	incf	_Sw,w
  4120  05D2  0084               	movwf	4
  4121  05D3  1783               	bsf	3,7	;select IRP bank2
  4122  05D4  1080               	bcf	0,1
  4123                           
  4124                           ;Switch_B1.c: 123: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  4125  05D5  1283               	bcf	3,5	;RP0=0, select bank0
  4126  05D6  1303               	bcf	3,6	;RP1=0, select bank0
  4127  05D7  085F               	movf	setSw_Main@sw,w
  4128  05D8  158A  2252  118A   	fcall	_getSw_KeyStatus
  4129  05DB  3A01               	xorlw	1
  4130  05DC  3000               	movlw	0
  4131  05DD  1903               	skipnz
  4132  05DE  3001               	movlw	1
  4133  05DF  1283               	bcf	3,5	;RP0=0, select bank0
  4134  05E0  1303               	bcf	3,6	;RP1=0, select bank0
  4135  05E1  00DD               	movwf	??_setSw_Main
  4136  05E2  0879               	movf	_Sw,w
  4137  05E3  0084               	movwf	4
  4138  05E4  0DDD               	rlf	??_setSw_Main,f
  4139  05E5  1783               	bsf	3,7	;select IRP bank2
  4140  05E6  0800               	movf	0,w
  4141  05E7  065D               	xorwf	??_setSw_Main,w
  4142  05E8  39FD               	andlw	-3
  4143  05E9  065D               	xorwf	??_setSw_Main,w
  4144  05EA  0080               	movwf	0
  4145                           
  4146                           ;Switch_B1.c: 124: } else {
  4147  05EB  2DFA               	goto	l1428
  4148  05EC                     l5457:	
  4149                           
  4150                           ;Switch_B1.c: 125: if (Sw->Detect == 0) {
  4151  05EC  0A79               	incf	_Sw,w
  4152  05ED  0084               	movwf	4
  4153  05EE  1783               	bsf	3,7	;select IRP bank2
  4154  05EF  1880               	btfsc	0,1
  4155  05F0  2DFA               	goto	l1428
  4156                           
  4157                           ;Switch_B1.c: 126: Sw->Detect = 1;
  4158  05F1  0A79               	incf	_Sw,w
  4159  05F2  0084               	movwf	4
  4160  05F3  1480               	bsf	0,1
  4161                           
  4162                           ;Switch_B1.c: 128: Sw->Touch = 0;
  4163  05F4  0879               	movf	_Sw,w
  4164  05F5  0084               	movwf	4
  4165  05F6  1080               	bcf	0,1
  4166                           
  4167                           ;Switch_B1.c: 129: Sw->Debounce = 1;
  4168  05F7  0879               	movf	_Sw,w
  4169  05F8  0084               	movwf	4
  4170  05F9  1500               	bsf	0,2
  4171  05FA                     l1428:	
  4172                           
  4173                           ;Switch_B1.c: 130: }
  4174                           ;Switch_B1.c: 131: }
  4175                           ;Switch_B1.c: 133: if (Sw->Touch == 1) {
  4176  05FA  0879               	movf	_Sw,w
  4177  05FB  0084               	movwf	4
  4178  05FC  1C80               	btfss	0,1
  4179  05FD  2E48               	goto	l5485
  4180                           
  4181                           ;Switch_B1.c: 134: if (Sw->Debounce == 0) {
  4182  05FE  0879               	movf	_Sw,w
  4183  05FF  0084               	movwf	4
  4184  0600  1900               	btfsc	0,2
  4185  0601  2E1D               	goto	l5473
  4186                           
  4187                           ;Switch_B1.c: 135: Sw->DebounceTime++;
  4188  0602  3001               	movlw	1
  4189  0603  1283               	bcf	3,5	;RP0=0, select bank0
  4190  0604  1303               	bcf	3,6	;RP1=0, select bank0
  4191  0605  00DD               	movwf	??_setSw_Main
  4192  0606  0879               	movf	_Sw,w
  4193  0607  3E02               	addlw	2
  4194  0608  0084               	movwf	4
  4195  0609  085D               	movf	??_setSw_Main,w
  4196  060A  0780               	addwf	0,f
  4197                           
  4198                           ;Switch_B1.c: 136: if (Sw->DebounceTime >= (60 / 20)) {
  4199  060B  0879               	movf	_Sw,w
  4200  060C  3E02               	addlw	2
  4201  060D  0084               	movwf	4
  4202  060E  3003               	movlw	3
  4203  060F  0200               	subwf	0,w
  4204  0610  1C03               	skipc
  4205  0611  0008               	return
  4206                           
  4207                           ;Switch_B1.c: 137: Sw->DebounceTime = 0;
  4208  0612  0879               	movf	_Sw,w
  4209  0613  3E02               	addlw	2
  4210  0614  0084               	movwf	4
  4211  0615  0180               	clrf	0
  4212                           
  4213                           ;Switch_B1.c: 138: Sw->Debounce = 1;
  4214  0616  0879               	movf	_Sw,w
  4215  0617  0084               	movwf	4
  4216  0618  1500               	bsf	0,2
  4217                           
  4218                           ;Switch_B1.c: 140: setLights_SwOn(sw);
  4219  0619  085F               	movf	setSw_Main@sw,w
  4220  061A  158A  24FF         	fcall	_setLights_SwOn
  4221                           
  4222                           ;Switch_B1.c: 146: }
  4223                           ;Switch_B1.c: 147: } else {
  4224  061C  0008               	return
  4225  061D                     l5473:	
  4226                           
  4227                           ;Switch_B1.c: 148: if (Sw->Hold1 == 0) {
  4228  061D  0879               	movf	_Sw,w
  4229  061E  0084               	movwf	4
  4230  061F  1783               	bsf	3,7	;select IRP bank2
  4231  0620  1980               	btfsc	0,3
  4232  0621  0008               	return
  4233                           
  4234                           ;Switch_B1.c: 149: Sw->Hold1Time++;
  4235  0622  0879               	movf	_Sw,w
  4236  0623  3E03               	addlw	3
  4237  0624  0084               	movwf	4
  4238  0625  3001               	movlw	1
  4239  0626  0780               	addwf	0,f
  4240  0627  0A84               	incf	4,f
  4241  0628  1803               	skipnc
  4242  0629  0A80               	incf	0,f
  4243                           
  4244                           ;Switch_B1.c: 150: if (Sw->Hold1Time >= (3000 / 20)) {
  4245  062A  0879               	movf	_Sw,w
  4246  062B  3E03               	addlw	3
  4247  062C  0084               	movwf	4
  4248  062D  0800               	movf	0,w
  4249  062E  1283               	bcf	3,5	;RP0=0, select bank0
  4250  062F  1303               	bcf	3,6	;RP1=0, select bank0
  4251  0630  00DD               	movwf	??_setSw_Main
  4252  0631  0A84               	incf	4,f
  4253  0632  0800               	movf	0,w
  4254  0633  00DE               	movwf	??_setSw_Main+1
  4255  0634  3000               	movlw	0
  4256  0635  025E               	subwf	??_setSw_Main+1,w
  4257  0636  3096               	movlw	150
  4258  0637  1903               	skipnz
  4259  0638  025D               	subwf	??_setSw_Main,w
  4260  0639  1C03               	skipc
  4261  063A  0008               	return
  4262                           
  4263                           ;Switch_B1.c: 151: Sw->Hold1Time = 0;
  4264  063B  0879               	movf	_Sw,w
  4265  063C  3E03               	addlw	3
  4266  063D  0084               	movwf	4
  4267  063E  0180               	clrf	0
  4268  063F  0A84               	incf	4,f
  4269  0640  0180               	clrf	0
  4270                           
  4271                           ;Switch_B1.c: 152: Sw->Hold1 = 1;
  4272  0641  0879               	movf	_Sw,w
  4273  0642  0084               	movwf	4
  4274  0643  1580               	bsf	0,3
  4275                           
  4276                           ;Switch_B1.c: 154: setLights_SwOff(sw);
  4277  0644  085F               	movf	setSw_Main@sw,w
  4278  0645  158A  2420         	fcall	_setLights_SwOff
  4279                           
  4280                           ;Switch_B1.c: 194: }
  4281                           ;Switch_B1.c: 195: }
  4282                           ;Switch_B1.c: 196: } else {
  4283                           
  4284                           ;Switch_B1.c: 161: }
  4285                           ;Switch_B1.c: 162: } else {
  4286  0647  0008               	return
  4287  0648                     l5485:	
  4288                           
  4289                           ;Switch_B1.c: 197: if (Sw->Debounce == 1) {
  4290  0648  0879               	movf	_Sw,w
  4291  0649  0084               	movwf	4
  4292  064A  1783               	bsf	3,7	;select IRP bank2
  4293  064B  1D00               	btfss	0,2
  4294  064C  0008               	return
  4295                           
  4296                           ;Switch_B1.c: 198: Sw->DebounceTime++;
  4297  064D  3001               	movlw	1
  4298  064E  1283               	bcf	3,5	;RP0=0, select bank0
  4299  064F  1303               	bcf	3,6	;RP1=0, select bank0
  4300  0650  00DD               	movwf	??_setSw_Main
  4301  0651  0879               	movf	_Sw,w
  4302  0652  3E02               	addlw	2
  4303  0653  0084               	movwf	4
  4304  0654  085D               	movf	??_setSw_Main,w
  4305  0655  0780               	addwf	0,f
  4306                           
  4307                           ;Switch_B1.c: 199: if (Sw->DebounceTime >= (60 / 20)) {
  4308  0656  0879               	movf	_Sw,w
  4309  0657  3E02               	addlw	2
  4310  0658  0084               	movwf	4
  4311  0659  3003               	movlw	3
  4312  065A  0200               	subwf	0,w
  4313  065B  1C03               	skipc
  4314  065C  0008               	return
  4315                           
  4316                           ;Switch_B1.c: 200: Sw->DebounceTime = 0;
  4317  065D  0879               	movf	_Sw,w
  4318  065E  3E02               	addlw	2
  4319  065F  0084               	movwf	4
  4320  0660  0180               	clrf	0
  4321                           
  4322                           ;Switch_B1.c: 201: Sw->Debounce = 0;
  4323  0661  0879               	movf	_Sw,w
  4324  0662  0084               	movwf	4
  4325  0663  1100               	bcf	0,2
  4326                           
  4327                           ;Switch_B1.c: 202: Sw->Hold1Time = 0;
  4328  0664  0879               	movf	_Sw,w
  4329  0665  3E03               	addlw	3
  4330  0666  0084               	movwf	4
  4331  0667  0180               	clrf	0
  4332  0668  0A84               	incf	4,f
  4333  0669  0180               	clrf	0
  4334                           
  4335                           ;Switch_B1.c: 203: Sw->Hold1 = 0;
  4336  066A  0879               	movf	_Sw,w
  4337  066B  0084               	movwf	4
  4338  066C  1180               	bcf	0,3
  4339                           
  4340                           ;Switch_B1.c: 212: setLights_SwOff(sw);
  4341  066D  085F               	movf	setSw_Main@sw,w
  4342  066E  158A  2420         	fcall	_setLights_SwOff
  4343                           
  4344                           ;Switch_B1.c: 221: }
  4345                           ;Switch_B1.c: 222: }
  4346                           ;Switch_B1.c: 223: }
  4347                           ;Switch_B1.c: 224: } else {
  4348  0670  0008               	return
  4349  0671                     l1426:	
  4350                           
  4351                           ;Switch_B1.c: 225: if (myMain.PowerON == 1) {
  4352  0671  1283               	bcf	3,5	;RP0=0, select bank0
  4353  0672  1303               	bcf	3,6	;RP1=0, select bank0
  4354  0673  1C31               	btfss	_myMain,0
  4355  0674  0008               	return
  4356                           
  4357                           ;Switch_B1.c: 226: Sw->Enable = 1;
  4358  0675  0879               	movf	_Sw,w
  4359  0676  0084               	movwf	4
  4360  0677  1400               	bsf	0,0
  4361                           
  4362                           ;Switch_B1.c: 228: if (sw == 2) {
  4363  0678  085F               	movf	setSw_Main@sw,w
  4364  0679  3A02               	xorlw	2
  4365  067A  1D03               	skipz
  4366  067B  0008               	return
  4367                           
  4368                           ;Switch_B1.c: 229: setLED(1, 1);
  4369  067C  01D7               	clrf	setLED@command
  4370  067D  0AD7               	incf	setLED@command,f
  4371  067E  3001               	movlw	1
  4372  067F  118A  27A6         	fcall	_setLED
  4373  0681  0008               	return
  4374  0682                     __end_of_setSw_Main:	
  4375                           
  4376                           	psect	text16
  4377  0A52                     __ptext16:	
  4378 ;; *************** function _getSw_KeyStatus *****************
  4379 ;; Defined at:
  4380 ;;		line 237 in file "../src/Switch_B1.c"
  4381 ;; Parameters:    Size  Location     Type
  4382 ;;  sw              1    wreg     unsigned char 
  4383 ;; Auto vars:     Size  Location     Type
  4384 ;;  sw              1    5[COMMON] unsigned char 
  4385 ;;  status          1    4[COMMON] unsigned char 
  4386 ;; Return value:  Size  Location     Type
  4387 ;;                  1    wreg      unsigned char 
  4388 ;; Registers used:
  4389 ;;		wreg, status,2
  4390 ;; Tracked objects:
  4391 ;;		On entry : 0/0
  4392 ;;		On exit  : 0/0
  4393 ;;		Unchanged: 0/0
  4394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4395 ;;      Params:         0       0       0       0
  4396 ;;      Locals:         2       0       0       0
  4397 ;;      Temps:          0       0       0       0
  4398 ;;      Totals:         2       0       0       0
  4399 ;;Total ram usage:        2 bytes
  4400 ;; Hardware stack levels used:    1
  4401 ;; Hardware stack levels required when called:    2
  4402 ;; This function calls:
  4403 ;;		Nothing
  4404 ;; This function is called by:
  4405 ;;		_setSw_Main
  4406 ;; This function uses a non-reentrant model
  4407 ;;
  4408                           
  4409                           
  4410                           ;psect for function _getSw_KeyStatus
  4411  0A52                     _getSw_KeyStatus:	
  4412                           
  4413                           ;incstack = 0
  4414                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  4415                           ;getSw_KeyStatus@sw stored from wreg
  4416  0A52  00F5               	movwf	getSw_KeyStatus@sw
  4417                           
  4418                           ;Switch_B1.c: 238: char status = 0;
  4419  0A53  01F4               	clrf	getSw_KeyStatus@status
  4420                           
  4421                           ;Switch_B1.c: 252: if (sw == 1) {
  4422  0A54  0875               	movf	getSw_KeyStatus@sw,w
  4423  0A55  3A01               	xorlw	1
  4424  0A56  1D03               	skipz
  4425  0A57  2A5A               	goto	l3841
  4426                           
  4427                           ;Switch_B1.c: 253: __nop();
  4428  0A58  0000               	nop
  4429                           
  4430                           ;Switch_B1.c: 254: } else if (sw == 2) {
  4431  0A59  2A64               	goto	l3845
  4432  0A5A                     l3841:	
  4433  0A5A  0875               	movf	getSw_KeyStatus@sw,w
  4434  0A5B  3A02               	xorlw	2
  4435  0A5C  1D03               	skipz
  4436  0A5D  2A64               	goto	l3845
  4437                           
  4438                           ;Switch_B1.c: 255: status = RB4 == 1 ? 1 : 0;
  4439  0A5E  3000               	movlw	0
  4440  0A5F  1283               	bcf	3,5	;RP0=0, select bank0
  4441  0A60  1303               	bcf	3,6	;RP1=0, select bank0
  4442  0A61  1A06               	btfsc	6,4	;volatile
  4443  0A62  3001               	movlw	1
  4444  0A63  00F4               	movwf	getSw_KeyStatus@status
  4445  0A64                     l3845:	
  4446                           
  4447                           ;Switch_B1.c: 256: }
  4448                           ;Switch_B1.c: 275: return status;
  4449  0A64  0874               	movf	getSw_KeyStatus@status,w
  4450  0A65  0008               	return
  4451  0A66                     __end_of_getSw_KeyStatus:	
  4452                           
  4453                           	psect	text17
  4454  0A17                     __ptext17:	
  4455 ;; *************** function _SwPointSelect *****************
  4456 ;; Defined at:
  4457 ;;		line 25 in file "../src/Switch_B1.c"
  4458 ;; Parameters:    Size  Location     Type
  4459 ;;  sw              1    wreg     unsigned char 
  4460 ;; Auto vars:     Size  Location     Type
  4461 ;;  sw              1    5[COMMON] unsigned char 
  4462 ;; Return value:  Size  Location     Type
  4463 ;;		None               void
  4464 ;; Registers used:
  4465 ;;		wreg
  4466 ;; Tracked objects:
  4467 ;;		On entry : 0/0
  4468 ;;		On exit  : 0/0
  4469 ;;		Unchanged: 0/0
  4470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4471 ;;      Params:         0       0       0       0
  4472 ;;      Locals:         1       0       0       0
  4473 ;;      Temps:          1       0       0       0
  4474 ;;      Totals:         2       0       0       0
  4475 ;;Total ram usage:        2 bytes
  4476 ;; Hardware stack levels used:    1
  4477 ;; Hardware stack levels required when called:    2
  4478 ;; This function calls:
  4479 ;;		Nothing
  4480 ;; This function is called by:
  4481 ;;		_setSw_Main
  4482 ;; This function uses a non-reentrant model
  4483 ;;
  4484                           
  4485                           
  4486                           ;psect for function _SwPointSelect
  4487  0A17                     _SwPointSelect:	
  4488                           
  4489                           ;incstack = 0
  4490                           ; Regs used in _SwPointSelect: [wreg]
  4491                           ;SwPointSelect@sw stored from wreg
  4492  0A17  00F5               	movwf	SwPointSelect@sw
  4493                           
  4494                           ;Switch_B1.c: 28: if (sw == 1) {
  4495  0A18  0875               	movf	SwPointSelect@sw,w
  4496  0A19  3A01               	xorlw	1
  4497  0A1A  1D03               	skipz
  4498  0A1B  2A21               	goto	l3831
  4499                           
  4500                           ;Switch_B1.c: 29: Sw = &Sw1;
  4501  0A1C  3020               	movlw	_Sw1& (0+255)
  4502  0A1D  00F4               	movwf	??_SwPointSelect
  4503  0A1E  0874               	movf	??_SwPointSelect,w
  4504  0A1F  00F9               	movwf	_Sw
  4505                           
  4506                           ;Switch_B1.c: 30: }
  4507  0A20  0008               	return
  4508  0A21                     l3831:	
  4509                           
  4510                           ;Switch_B1.c: 33: else if (sw == 2) {
  4511  0A21  0875               	movf	SwPointSelect@sw,w
  4512  0A22  3A02               	xorlw	2
  4513  0A23  1D03               	skipz
  4514  0A24  0008               	return
  4515                           
  4516                           ;Switch_B1.c: 34: Sw = &Sw2;
  4517  0A25  3025               	movlw	_Sw2& (0+255)
  4518  0A26  00F4               	movwf	??_SwPointSelect
  4519  0A27  0874               	movf	??_SwPointSelect,w
  4520  0A28  00F9               	movwf	_Sw
  4521  0A29  0008               	return
  4522  0A2A                     __end_of_SwPointSelect:	
  4523                           
  4524                           	psect	text18
  4525  0A3E                     __ptext18:	
  4526 ;; *************** function _TouchPower *****************
  4527 ;; Defined at:
  4528 ;;		line 10 in file "../src/Switch_B1.c"
  4529 ;; Parameters:    Size  Location     Type
  4530 ;;		None
  4531 ;; Auto vars:     Size  Location     Type
  4532 ;;		None
  4533 ;; Return value:  Size  Location     Type
  4534 ;;		None               void
  4535 ;; Registers used:
  4536 ;;		wreg, status,2, status,0, pclath, cstack
  4537 ;; Tracked objects:
  4538 ;;		On entry : 0/0
  4539 ;;		On exit  : 0/0
  4540 ;;		Unchanged: 0/0
  4541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4542 ;;      Params:         0       0       0       0
  4543 ;;      Locals:         0       0       0       0
  4544 ;;      Temps:          0       0       0       0
  4545 ;;      Totals:         0       0       0       0
  4546 ;;Total ram usage:        0 bytes
  4547 ;; Hardware stack levels used:    1
  4548 ;; Hardware stack levels required when called:    3
  4549 ;; This function calls:
  4550 ;;		_Timeout_Counter
  4551 ;;		_set_TimeoutCleared
  4552 ;; This function is called by:
  4553 ;;		_Switch_Main
  4554 ;; This function uses a non-reentrant model
  4555 ;;
  4556                           
  4557                           
  4558                           ;psect for function _TouchPower
  4559  0A3E                     _TouchPower:	
  4560                           
  4561                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  4562                           
  4563                           ;incstack = 0
  4564                           ; Regs used in _TouchPower: [wreg+status,2+status,0+pclath+cstack]
  4565  0A3E  1283               	bcf	3,5	;RP0=0, select bank0
  4566  0A3F  1303               	bcf	3,6	;RP1=0, select bank0
  4567  0A40  1C31               	btfss	_myMain,0
  4568  0A41  0008               	return
  4569                           
  4570                           ;Switch_B1.c: 12: if (RB5 == 0) {
  4571  0A42  1A86               	btfsc	6,5	;volatile
  4572  0A43  0008               	return
  4573  0A44  2A49               	goto	l5441
  4574  0A45                     l1404:	
  4575                           ;Switch_B1.c: 13: while (RB5 == 0 && myMain.Timeout == 0) {
  4576                           
  4577                           
  4578                           ;Switch_B1.c: 14: RB5 = 1;
  4579  0A45  1686               	bsf	6,5	;volatile
  4580                           
  4581                           ;Switch_B1.c: 15: Timeout_Counter();
  4582  0A46  158A  222A  158A   	fcall	_Timeout_Counter
  4583  0A49                     l5441:	
  4584  0A49  1283               	bcf	3,5	;RP0=0, select bank0
  4585  0A4A  1303               	bcf	3,6	;RP1=0, select bank0
  4586  0A4B  1A86               	btfsc	6,5	;volatile
  4587  0A4C  2A4F               	goto	l5445
  4588  0A4D  1D33               	btfss	_myMain+2,2
  4589  0A4E  2A45               	goto	l1404
  4590  0A4F                     l5445:	
  4591                           
  4592                           ;Switch_B1.c: 16: }
  4593                           ;Switch_B1.c: 17: set_TimeoutCleared();
  4594  0A4F  158A  2112         	fcall	_set_TimeoutCleared
  4595  0A51  0008               	return
  4596  0A52                     __end_of_TouchPower:	
  4597                           
  4598                           	psect	text19
  4599  0912                     __ptext19:	
  4600 ;; *************** function _set_TimeoutCleared *****************
  4601 ;; Defined at:
  4602 ;;		line 281 in file "../src/Main_B1.c"
  4603 ;; Parameters:    Size  Location     Type
  4604 ;;		None
  4605 ;; Auto vars:     Size  Location     Type
  4606 ;;		None
  4607 ;; Return value:  Size  Location     Type
  4608 ;;		None               void
  4609 ;; Registers used:
  4610 ;;		status,2
  4611 ;; Tracked objects:
  4612 ;;		On entry : 0/0
  4613 ;;		On exit  : 0/0
  4614 ;;		Unchanged: 0/0
  4615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4616 ;;      Params:         0       0       0       0
  4617 ;;      Locals:         0       0       0       0
  4618 ;;      Temps:          0       0       0       0
  4619 ;;      Totals:         0       0       0       0
  4620 ;;Total ram usage:        0 bytes
  4621 ;; Hardware stack levels used:    1
  4622 ;; Hardware stack levels required when called:    2
  4623 ;; This function calls:
  4624 ;;		Nothing
  4625 ;; This function is called by:
  4626 ;;		_getAD
  4627 ;;		_TouchPower
  4628 ;; This function uses a non-reentrant model
  4629 ;;
  4630                           
  4631                           
  4632                           ;psect for function _set_TimeoutCleared
  4633  0912                     _set_TimeoutCleared:	
  4634                           
  4635                           ;Main_B1.c: 282: myMain.Timeout = 0;
  4636                           
  4637                           ;incstack = 0
  4638                           ; Regs used in _set_TimeoutCleared: [status,2]
  4639  0912  1283               	bcf	3,5	;RP0=0, select bank0
  4640  0913  1303               	bcf	3,6	;RP1=0, select bank0
  4641  0914  1133               	bcf	_myMain+2,2
  4642                           
  4643                           ;Main_B1.c: 283: myMain.Timeout_Counter = 0;
  4644  0915  01B4               	clrf	_myMain+3
  4645  0916  01B5               	clrf	_myMain+4
  4646  0917  0008               	return
  4647  0918                     __end_of_set_TimeoutCleared:	
  4648                           
  4649                           	psect	text20
  4650  0A2A                     __ptext20:	
  4651 ;; *************** function _Timeout_Counter *****************
  4652 ;; Defined at:
  4653 ;;		line 272 in file "../src/Main_B1.c"
  4654 ;; Parameters:    Size  Location     Type
  4655 ;;		None
  4656 ;; Auto vars:     Size  Location     Type
  4657 ;;		None
  4658 ;; Return value:  Size  Location     Type
  4659 ;;		None               void
  4660 ;; Registers used:
  4661 ;;		wreg, status,2
  4662 ;; Tracked objects:
  4663 ;;		On entry : 0/0
  4664 ;;		On exit  : 0/0
  4665 ;;		Unchanged: 0/0
  4666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4667 ;;      Params:         0       0       0       0
  4668 ;;      Locals:         0       0       0       0
  4669 ;;      Temps:          0       0       0       0
  4670 ;;      Totals:         0       0       0       0
  4671 ;;Total ram usage:        0 bytes
  4672 ;; Hardware stack levels used:    1
  4673 ;; Hardware stack levels required when called:    2
  4674 ;; This function calls:
  4675 ;;		Nothing
  4676 ;; This function is called by:
  4677 ;;		_getAD
  4678 ;;		_TouchPower
  4679 ;; This function uses a non-reentrant model
  4680 ;;
  4681                           
  4682                           
  4683                           ;psect for function _Timeout_Counter
  4684  0A2A                     _Timeout_Counter:	
  4685                           
  4686                           ;Main_B1.c: 273: myMain.Timeout_Counter++;
  4687                           
  4688                           ;incstack = 0
  4689                           ; Regs used in _Timeout_Counter: [wreg+status,2]
  4690  0A2A  3001               	movlw	1
  4691  0A2B  1283               	bcf	3,5	;RP0=0, select bank0
  4692  0A2C  1303               	bcf	3,6	;RP1=0, select bank0
  4693  0A2D  07B4               	addwf	_myMain+3,f
  4694  0A2E  1803               	skipnc
  4695  0A2F  0AB5               	incf	_myMain+4,f
  4696  0A30  3000               	movlw	0
  4697  0A31  07B5               	addwf	_myMain+4,f
  4698                           
  4699                           ;Main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  4700  0A32  3061               	movlw	97
  4701  0A33  0635               	xorwf	_myMain+4,w
  4702  0A34  1D03               	skipz
  4703  0A35  2A38               	goto	u5975
  4704  0A36  30A8               	movlw	168
  4705  0A37  0634               	xorwf	_myMain+3,w
  4706  0A38                     u5975:	
  4707  0A38  1D03               	skipz
  4708  0A39  0008               	return
  4709                           
  4710                           ;Main_B1.c: 275: myMain.Timeout_Counter = 0;
  4711  0A3A  01B4               	clrf	_myMain+3
  4712  0A3B  01B5               	clrf	_myMain+4
  4713                           
  4714                           ;Main_B1.c: 276: myMain.Timeout = 1;
  4715  0A3C  1533               	bsf	_myMain+2,2
  4716  0A3D  0008               	return
  4717  0A3E                     __end_of_Timeout_Counter:	
  4718                           
  4719                           	psect	text21
  4720  08E3                     __ptext21:	
  4721 ;; *************** function _Switch_Initialization *****************
  4722 ;; Defined at:
  4723 ;;		line 46 in file "../src/Switch_B1.c"
  4724 ;; Parameters:    Size  Location     Type
  4725 ;;		None
  4726 ;; Auto vars:     Size  Location     Type
  4727 ;;		None
  4728 ;; Return value:  Size  Location     Type
  4729 ;;		None               void
  4730 ;; Registers used:
  4731 ;;		None
  4732 ;; Tracked objects:
  4733 ;;		On entry : 0/0
  4734 ;;		On exit  : 0/0
  4735 ;;		Unchanged: 0/0
  4736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4737 ;;      Params:         0       0       0       0
  4738 ;;      Locals:         0       0       0       0
  4739 ;;      Temps:          0       0       0       0
  4740 ;;      Totals:         0       0       0       0
  4741 ;;Total ram usage:        0 bytes
  4742 ;; Hardware stack levels used:    1
  4743 ;; Hardware stack levels required when called:    2
  4744 ;; This function calls:
  4745 ;;		Nothing
  4746 ;; This function is called by:
  4747 ;;		_main
  4748 ;; This function uses a non-reentrant model
  4749 ;;
  4750                           
  4751                           
  4752                           ;psect for function _Switch_Initialization
  4753  08E3                     _Switch_Initialization:	
  4754                           
  4755                           ;incstack = 0
  4756                           ; Regs used in _Switch_Initialization: []
  4757  08E3  0008               	return
  4758  08E4                     __end_of_Switch_Initialization:	
  4759                           
  4760                           	psect	text22
  4761  08EC                     __ptext22:	
  4762 ;; *************** function _SYSC_Main *****************
  4763 ;; Defined at:
  4764 ;;		line 17 in file "../src/SYSC_B1.c"
  4765 ;; Parameters:    Size  Location     Type
  4766 ;;		None
  4767 ;; Auto vars:     Size  Location     Type
  4768 ;;		None
  4769 ;; Return value:  Size  Location     Type
  4770 ;;		None               void
  4771 ;; Registers used:
  4772 ;;		wreg, status,2, status,0, pclath, cstack
  4773 ;; Tracked objects:
  4774 ;;		On entry : 0/0
  4775 ;;		On exit  : 0/0
  4776 ;;		Unchanged: 0/0
  4777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4778 ;;      Params:         0       0       0       0
  4779 ;;      Locals:         0       0       0       0
  4780 ;;      Temps:          0       0       0       0
  4781 ;;      Totals:         0       0       0       0
  4782 ;;Total ram usage:        0 bytes
  4783 ;; Hardware stack levels used:    1
  4784 ;; Hardware stack levels required when called:    4
  4785 ;; This function calls:
  4786 ;;		_setSYSC_Main
  4787 ;; This function is called by:
  4788 ;;		_main
  4789 ;; This function uses a non-reentrant model
  4790 ;;
  4791                           
  4792                           
  4793                           ;psect for function _SYSC_Main
  4794  08EC                     _SYSC_Main:	
  4795                           
  4796                           ;SYSC_B1.c: 19: setSYSC_Main();
  4797                           
  4798                           ;incstack = 0
  4799                           ; Regs used in _SYSC_Main: [wreg+status,2+status,0+pclath+cstack]
  4800  08EC  158A  25C1         	fcall	_setSYSC_Main
  4801  08EE  0008               	return
  4802  08EF                     __end_of_SYSC_Main:	
  4803                           
  4804                           	psect	text23
  4805  0DC1                     __ptext23:	
  4806 ;; *************** function _setSYSC_Main *****************
  4807 ;; Defined at:
  4808 ;;		line 23 in file "../src/SYSC_B1.c"
  4809 ;; Parameters:    Size  Location     Type
  4810 ;;		None
  4811 ;; Auto vars:     Size  Location     Type
  4812 ;;		None
  4813 ;; Return value:  Size  Location     Type
  4814 ;;		None               void
  4815 ;; Registers used:
  4816 ;;		wreg, status,2, status,0, pclath, cstack
  4817 ;; Tracked objects:
  4818 ;;		On entry : 0/0
  4819 ;;		On exit  : 0/0
  4820 ;;		Unchanged: 0/0
  4821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4822 ;;      Params:         0       0       0       0
  4823 ;;      Locals:         0       0       0       0
  4824 ;;      Temps:          0       0       0       0
  4825 ;;      Totals:         0       0       0       0
  4826 ;;Total ram usage:        0 bytes
  4827 ;; Hardware stack levels used:    1
  4828 ;; Hardware stack levels required when called:    3
  4829 ;; This function calls:
  4830 ;;		_getMain_All_Error_Status
  4831 ;; This function is called by:
  4832 ;;		_SYSC_Main
  4833 ;; This function uses a non-reentrant model
  4834 ;;
  4835                           
  4836                           
  4837                           ;psect for function _setSYSC_Main
  4838  0DC1                     _setSYSC_Main:	
  4839                           
  4840                           ;SYSC_B1.c: 25: if (SYSC.Enable == 1) {
  4841                           
  4842                           ;incstack = 0
  4843                           ; Regs used in _setSYSC_Main: [wreg+status,2+status,0+pclath+cstack]
  4844  0DC1  1283               	bcf	3,5	;RP0=0, select bank0
  4845  0DC2  1303               	bcf	3,6	;RP1=0, select bank0
  4846  0DC3  1C2C               	btfss	_SYSC,0
  4847  0DC4  0008               	return
  4848                           
  4849                           ;SYSC_B1.c: 26: if (SYSC.ERROR == 0) {
  4850  0DC5  18AC               	btfsc	_SYSC,1
  4851  0DC6  2DD8               	goto	l4113
  4852                           
  4853                           ;SYSC_B1.c: 27: SYSC.Time++;
  4854  0DC7  3001               	movlw	1
  4855  0DC8  07AD               	addwf	_SYSC+1,f
  4856  0DC9  1803               	skipnc
  4857  0DCA  0AAE               	incf	_SYSC+2,f
  4858  0DCB  3000               	movlw	0
  4859  0DCC  07AE               	addwf	_SYSC+2,f
  4860                           
  4861                           ;SYSC_B1.c: 28: if (SYSC.Time >= (500 / 20)) {
  4862  0DCD  3000               	movlw	0
  4863  0DCE  022E               	subwf	_SYSC+2,w
  4864  0DCF  3019               	movlw	25
  4865  0DD0  1903               	skipnz
  4866  0DD1  022D               	subwf	_SYSC+1,w
  4867  0DD2  1C03               	skipc
  4868  0DD3  0008               	return
  4869                           
  4870                           ;SYSC_B1.c: 29: SYSC.Time = 0;
  4871  0DD4  01AD               	clrf	_SYSC+1
  4872  0DD5  01AE               	clrf	_SYSC+2
  4873                           
  4874                           ;SYSC_B1.c: 30: SYSC.ERROR = 1;
  4875  0DD6  14AC               	bsf	_SYSC,1
  4876                           
  4877                           ;SYSC_B1.c: 31: }
  4878                           ;SYSC_B1.c: 32: } else {
  4879  0DD7  0008               	return
  4880  0DD8                     l4113:	
  4881                           
  4882                           ;SYSC_B1.c: 33: if (getMain_All_Error_Status(1) == 0) {
  4883  0DD8  3001               	movlw	1
  4884  0DD9  158A  24C1  158A   	fcall	_getMain_All_Error_Status
  4885  0DDC  3800               	iorlw	0
  4886  0DDD  1D03               	skipz
  4887  0DDE  0008               	return
  4888                           
  4889                           ;SYSC_B1.c: 34: SYSC.Time++;
  4890  0DDF  3001               	movlw	1
  4891  0DE0  1283               	bcf	3,5	;RP0=0, select bank0
  4892  0DE1  1303               	bcf	3,6	;RP1=0, select bank0
  4893  0DE2  07AD               	addwf	_SYSC+1,f
  4894  0DE3  1803               	skipnc
  4895  0DE4  0AAE               	incf	_SYSC+2,f
  4896  0DE5  3000               	movlw	0
  4897  0DE6  07AE               	addwf	_SYSC+2,f
  4898                           
  4899                           ;SYSC_B1.c: 35: if (SYSC.Time >= (500 / 20)) {
  4900  0DE7  3000               	movlw	0
  4901  0DE8  022E               	subwf	_SYSC+2,w
  4902  0DE9  3019               	movlw	25
  4903  0DEA  1903               	skipnz
  4904  0DEB  022D               	subwf	_SYSC+1,w
  4905  0DEC  1C03               	skipc
  4906  0DED  2DF3               	goto	l4119
  4907                           
  4908                           ;SYSC_B1.c: 36: SYSC.Time = 0;
  4909  0DEE  01AD               	clrf	_SYSC+1
  4910  0DEF  01AE               	clrf	_SYSC+2
  4911                           
  4912                           ;SYSC_B1.c: 37: SYSC.Counter = 0;
  4913  0DF0  01AF               	clrf	_SYSC+3
  4914  0DF1  01B0               	clrf	_SYSC+4
  4915                           
  4916                           ;SYSC_B1.c: 38: } else {
  4917  0DF2  0008               	return
  4918  0DF3                     l4119:	
  4919                           
  4920                           ;SYSC_B1.c: 39: SYSC.Counter++;
  4921  0DF3  3001               	movlw	1
  4922  0DF4  07AF               	addwf	_SYSC+3,f
  4923  0DF5  1803               	skipnc
  4924  0DF6  0AB0               	incf	_SYSC+4,f
  4925  0DF7  3000               	movlw	0
  4926  0DF8  07B0               	addwf	_SYSC+4,f
  4927                           
  4928                           ;SYSC_B1.c: 40: if (SYSC.Counter == (10000 / 20)) {
  4929  0DF9  3001               	movlw	1
  4930  0DFA  0630               	xorwf	_SYSC+4,w
  4931  0DFB  1D03               	skipz
  4932  0DFC  2DFF               	goto	u3835
  4933  0DFD  30F4               	movlw	244
  4934  0DFE  062F               	xorwf	_SYSC+3,w
  4935  0DFF                     u3835:	
  4936  0DFF  1D03               	skipz
  4937  0E00  0008               	return
  4938                           
  4939                           ;SYSC_B1.c: 41: SYSC.Counter = 0;
  4940  0E01  01AF               	clrf	_SYSC+3
  4941  0E02  01B0               	clrf	_SYSC+4
  4942                           
  4943                           ;SYSC_B1.c: 42: SYSC.ERROR = 0;
  4944  0E03  10AC               	bcf	_SYSC,1
  4945  0E04  0008               	return
  4946  0E05                     __end_of_setSYSC_Main:	
  4947                           
  4948                           	psect	text24
  4949  08E9                     __ptext24:	
  4950 ;; *************** function _SYSC_Initialization *****************
  4951 ;; Defined at:
  4952 ;;		line 7 in file "../src/SYSC_B1.c"
  4953 ;; Parameters:    Size  Location     Type
  4954 ;;		None
  4955 ;; Auto vars:     Size  Location     Type
  4956 ;;		None
  4957 ;; Return value:  Size  Location     Type
  4958 ;;		None               void
  4959 ;; Registers used:
  4960 ;;		status,2, status,0, pclath, cstack
  4961 ;; Tracked objects:
  4962 ;;		On entry : 0/0
  4963 ;;		On exit  : 0/0
  4964 ;;		Unchanged: 0/0
  4965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4966 ;;      Params:         0       0       0       0
  4967 ;;      Locals:         0       0       0       0
  4968 ;;      Temps:          0       0       0       0
  4969 ;;      Totals:         0       0       0       0
  4970 ;;Total ram usage:        0 bytes
  4971 ;; Hardware stack levels used:    1
  4972 ;; Hardware stack levels required when called:    3
  4973 ;; This function calls:
  4974 ;;		_setSYSC_Initialization
  4975 ;; This function is called by:
  4976 ;;		_main
  4977 ;; This function uses a non-reentrant model
  4978 ;;
  4979                           
  4980                           
  4981                           ;psect for function _SYSC_Initialization
  4982  08E9                     _SYSC_Initialization:	
  4983                           
  4984                           ;SYSC_B1.c: 9: setSYSC_Initialization();
  4985                           
  4986                           ;incstack = 0
  4987                           ; Regs used in _SYSC_Initialization: [status,2+status,0+pclath+cstack]
  4988  08E9  158A  20FD         	fcall	_setSYSC_Initialization
  4989  08EB  0008               	return
  4990  08EC                     __end_of_SYSC_Initialization:	
  4991                           
  4992                           	psect	text25
  4993  08FD                     __ptext25:	
  4994 ;; *************** function _setSYSC_Initialization *****************
  4995 ;; Defined at:
  4996 ;;		line 13 in file "../src/SYSC_B1.c"
  4997 ;; Parameters:    Size  Location     Type
  4998 ;;		None
  4999 ;; Auto vars:     Size  Location     Type
  5000 ;;		None
  5001 ;; Return value:  Size  Location     Type
  5002 ;;		None               void
  5003 ;; Registers used:
  5004 ;;		None
  5005 ;; Tracked objects:
  5006 ;;		On entry : 0/0
  5007 ;;		On exit  : 0/0
  5008 ;;		Unchanged: 0/0
  5009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5010 ;;      Params:         0       0       0       0
  5011 ;;      Locals:         0       0       0       0
  5012 ;;      Temps:          0       0       0       0
  5013 ;;      Totals:         0       0       0       0
  5014 ;;Total ram usage:        0 bytes
  5015 ;; Hardware stack levels used:    1
  5016 ;; Hardware stack levels required when called:    2
  5017 ;; This function calls:
  5018 ;;		Nothing
  5019 ;; This function is called by:
  5020 ;;		_SYSC_Initialization
  5021 ;; This function uses a non-reentrant model
  5022 ;;
  5023                           
  5024                           
  5025                           ;psect for function _setSYSC_Initialization
  5026  08FD                     _setSYSC_Initialization:	
  5027                           
  5028                           ;SYSC_B1.c: 14: SYSC.Enable = 1;
  5029                           
  5030                           ;incstack = 0
  5031                           ; Regs used in _setSYSC_Initialization: []
  5032  08FD  1283               	bcf	3,5	;RP0=0, select bank0
  5033  08FE  1303               	bcf	3,6	;RP1=0, select bank0
  5034  08FF  142C               	bsf	_SYSC,0
  5035  0900  0008               	return
  5036  0901                     __end_of_setSYSC_Initialization:	
  5037                           
  5038                           	psect	text26
  5039  0217                     __ptext26:	
  5040 ;; *************** function _PIR_Main *****************
  5041 ;; Defined at:
  5042 ;;		line 13 in file "../src/PIR_B1.c"
  5043 ;; Parameters:    Size  Location     Type
  5044 ;;		None
  5045 ;; Auto vars:     Size  Location     Type
  5046 ;;  LightsStatus    1   16[BANK0 ] unsigned char 
  5047 ;;  TriggerValue    1   15[BANK0 ] unsigned char 
  5048 ;;  Enable_Switc    1   14[BANK0 ] unsigned char 
  5049 ;;  cds             1   11[BANK0 ] unsigned char 
  5050 ;;  error           1   10[BANK0 ] unsigned char 
  5051 ;; Return value:  Size  Location     Type
  5052 ;;		None               void
  5053 ;; Registers used:
  5054 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5055 ;; Tracked objects:
  5056 ;;		On entry : 0/0
  5057 ;;		On exit  : 0/0
  5058 ;;		Unchanged: 0/0
  5059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5060 ;;      Params:         0       0       0       0
  5061 ;;      Locals:         0       7       0       0
  5062 ;;      Temps:          0       4       0       0
  5063 ;;      Totals:         0      11       0       0
  5064 ;;Total ram usage:       11 bytes
  5065 ;; Hardware stack levels used:    1
  5066 ;; Hardware stack levels required when called:    5
  5067 ;; This function calls:
  5068 ;;		_getCDS_Status
  5069 ;;		_getLights_Status
  5070 ;;		_getMain_All_Error_Status
  5071 ;;		_setLights_SwOff
  5072 ;;		_setLights_SwOn
  5073 ;; This function is called by:
  5074 ;;		_main
  5075 ;; This function uses a non-reentrant model
  5076 ;;
  5077                           
  5078                           
  5079                           ;psect for function _PIR_Main
  5080  0217                     _PIR_Main:	
  5081                           
  5082                           ;PIR_B1.c: 14: char error = getMain_All_Error_Status(0);
  5083                           
  5084                           ;incstack = 0
  5085                           ; Regs used in _PIR_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5086  0217  3000               	movlw	0
  5087  0218  158A  24C1  118A   	fcall	_getMain_All_Error_Status
  5088  021B  1283               	bcf	3,5	;RP0=0, select bank0
  5089  021C  1303               	bcf	3,6	;RP1=0, select bank0
  5090  021D  00DD               	movwf	??_PIR_Main
  5091  021E  085D               	movf	??_PIR_Main,w
  5092  021F  00E1               	movwf	PIR_Main@error
  5093                           
  5094                           ;PIR_B1.c: 15: char cds = getCDS_Status();
  5095  0220  158A  2136  118A   	fcall	_getCDS_Status
  5096  0223  1283               	bcf	3,5	;RP0=0, select bank0
  5097  0224  1303               	bcf	3,6	;RP1=0, select bank0
  5098  0225  00DD               	movwf	??_PIR_Main
  5099  0226  085D               	movf	??_PIR_Main,w
  5100  0227  00E2               	movwf	PIR_Main@cds
  5101                           
  5102                           ;PIR_B1.c: 16: char LightsStatus = 0;
  5103  0228  01E7               	clrf	PIR_Main@LightsStatus
  5104                           
  5105                           ;PIR_B1.c: 17: char Enable_Switch = 1;
  5106  0229  01E5               	clrf	PIR_Main@Enable_Switch
  5107  022A  0AE5               	incf	PIR_Main@Enable_Switch,f
  5108                           
  5109                           ;PIR_B1.c: 18: char TriggerValue = 0;
  5110  022B  01E6               	clrf	PIR_Main@TriggerValue
  5111                           
  5112                           ;PIR_B1.c: 20: Enable_Switch = RB3 == 1 ? 1 : 0;
  5113  022C  3000               	movlw	0
  5114  022D  1986               	btfsc	6,3	;volatile
  5115  022E  3001               	movlw	1
  5116  022F  00E5               	movwf	PIR_Main@Enable_Switch
  5117                           
  5118                           ;PIR_B1.c: 25: LightsStatus = getLights_Status(1);
  5119  0230  3001               	movlw	1
  5120  0231  158A  21D0  118A   	fcall	_getLights_Status
  5121  0234  1283               	bcf	3,5	;RP0=0, select bank0
  5122  0235  1303               	bcf	3,6	;RP1=0, select bank0
  5123  0236  00DD               	movwf	??_PIR_Main
  5124  0237  085D               	movf	??_PIR_Main,w
  5125  0238  00E7               	movwf	PIR_Main@LightsStatus
  5126                           
  5127                           ;PIR_B1.c: 35: if (_PIR.Enable == 1) {
  5128  0239  1683               	bsf	3,5	;RP0=1, select bank1
  5129  023A  1303               	bcf	3,6	;RP1=0, select bank1
  5130  023B  1C20               	btfss	__PIR^(0+128),0
  5131  023C  2BA2               	goto	l1040
  5132                           
  5133                           ;PIR_B1.c: 36: if (error == 0) {
  5134  023D  1283               	bcf	3,5	;RP0=0, select bank0
  5135  023E  1303               	bcf	3,6	;RP1=0, select bank0
  5136  023F  08E1               	movf	PIR_Main@error,f
  5137  0240  1D03               	skipz
  5138  0241  2A68               	goto	l1041
  5139                           
  5140                           ;PIR_B1.c: 38: if (cds == 1 && Enable_Switch == 1) {
  5141  0242  0862               	movf	PIR_Main@cds,w
  5142  0243  3A01               	xorlw	1
  5143  0244  1D03               	skipz
  5144  0245  2A4E               	goto	l1042
  5145  0246  0865               	movf	PIR_Main@Enable_Switch,w
  5146  0247  3A01               	xorlw	1
  5147  0248  1D03               	skipz
  5148  0249  2A4E               	goto	l1042
  5149                           
  5150                           ;PIR_B1.c: 39: _PIR.Available = 1;
  5151  024A  1683               	bsf	3,5	;RP0=1, select bank1
  5152  024B  1303               	bcf	3,6	;RP1=0, select bank1
  5153  024C  17A0               	bsf	__PIR^(0+128),7
  5154                           
  5155                           ;PIR_B1.c: 40: } else {
  5156  024D  2A62               	goto	l5985
  5157  024E                     l1042:	
  5158                           
  5159                           ;PIR_B1.c: 41: _PIR.Available = 0;
  5160  024E  1683               	bsf	3,5	;RP0=1, select bank1
  5161  024F  1303               	bcf	3,6	;RP1=0, select bank1
  5162  0250  13A0               	bcf	__PIR^(0+128),7
  5163                           
  5164                           ;PIR_B1.c: 43: if (_PIR.OK == 1) {
  5165  0251  1DA0               	btfss	__PIR^(0+128),3
  5166  0252  2A62               	goto	l5985
  5167                           
  5168                           ;PIR_B1.c: 51: if (getLights_Status(1) == 1) {
  5169  0253  3001               	movlw	1
  5170  0254  158A  21D0  118A   	fcall	_getLights_Status
  5171  0257  3A01               	xorlw	1
  5172  0258  1D03               	skipz
  5173  0259  2A62               	goto	l5985
  5174                           
  5175                           ;PIR_B1.c: 52: setLights_SwOn(1);
  5176  025A  3001               	movlw	1
  5177  025B  158A  24FF  118A   	fcall	_setLights_SwOn
  5178                           
  5179                           ;PIR_B1.c: 53: setLights_SwOff(1);
  5180  025E  3001               	movlw	1
  5181  025F  158A  2420  118A   	fcall	_setLights_SwOff
  5182  0262                     l5985:	
  5183                           
  5184                           ;PIR_B1.c: 55: }
  5185                           ;PIR_B1.c: 67: }
  5186                           ;PIR_B1.c: 68: }
  5187                           ;PIR_B1.c: 72: if (_PIR.Detect == 0) {
  5188  0262  1683               	bsf	3,5	;RP0=1, select bank1
  5189  0263  1303               	bcf	3,6	;RP1=0, select bank1
  5190  0264  1A20               	btfsc	__PIR^(0+128),4
  5191  0265  2A6E               	goto	l1047
  5192                           
  5193                           ;PIR_B1.c: 73: _PIR.Detect = 1;
  5194  0266  1620               	bsf	__PIR^(0+128),4
  5195                           
  5196                           ;PIR_B1.c: 80: }
  5197                           ;PIR_B1.c: 81: } else {
  5198  0267  2A6E               	goto	l1047
  5199  0268                     l1041:	
  5200                           
  5201                           ;PIR_B1.c: 82: if (_PIR.Detect == 1) {
  5202  0268  1683               	bsf	3,5	;RP0=1, select bank1
  5203  0269  1303               	bcf	3,6	;RP1=0, select bank1
  5204  026A  1E20               	btfss	__PIR^(0+128),4
  5205  026B  2A6E               	goto	l1047
  5206                           
  5207                           ;PIR_B1.c: 83: _PIR.Detect = 0;
  5208  026C  1220               	bcf	__PIR^(0+128),4
  5209                           
  5210                           ;PIR_B1.c: 84: _PIR.Available = 0;
  5211  026D  13A0               	bcf	__PIR^(0+128),7
  5212  026E                     l1047:	
  5213                           
  5214                           ;PIR_B1.c: 102: }
  5215                           ;PIR_B1.c: 103: }
  5216                           ;PIR_B1.c: 105: if (_PIR.ADtoGO == 0) {
  5217  026E  18A0               	btfsc	__PIR^(0+128),1
  5218  026F  2A7F               	goto	l1049
  5219                           
  5220                           ;PIR_B1.c: 106: _PIR.Time++;
  5221  0270  3001               	movlw	1
  5222  0271  1283               	bcf	3,5	;RP0=0, select bank0
  5223  0272  1303               	bcf	3,6	;RP1=0, select bank0
  5224  0273  00DD               	movwf	??_PIR_Main
  5225  0274  085D               	movf	??_PIR_Main,w
  5226  0275  1683               	bsf	3,5	;RP0=1, select bank1
  5227  0276  1303               	bcf	3,6	;RP1=0, select bank1
  5228  0277  07A2               	addwf	(__PIR^(0+128)+2),f
  5229                           
  5230                           ;PIR_B1.c: 107: if (_PIR.Time == (100 / 20)) {
  5231  0278  0822               	movf	(__PIR^(0+128)+2),w
  5232  0279  3A05               	xorlw	5
  5233  027A  1D03               	skipz
  5234  027B  2B48               	goto	l6061
  5235                           
  5236                           ;PIR_B1.c: 108: _PIR.Time = 0;
  5237  027C  01A2               	clrf	(__PIR^(0+128)+2)
  5238                           
  5239                           ;PIR_B1.c: 109: _PIR.ADtoGO = 1;
  5240  027D  14A0               	bsf	__PIR^(0+128),1
  5241                           
  5242                           ;PIR_B1.c: 110: }
  5243                           ;PIR_B1.c: 111: } else {
  5244  027E  2B48               	goto	l6061
  5245  027F                     l1049:	
  5246                           
  5247                           ;PIR_B1.c: 112: if (_PIR.GO == 1) {
  5248  027F  1D20               	btfss	__PIR^(0+128),2
  5249  0280  2B48               	goto	l6061
  5250                           
  5251                           ;PIR_B1.c: 113: _PIR.GO = 0;
  5252  0281  1120               	bcf	__PIR^(0+128),2
  5253                           
  5254                           ;PIR_B1.c: 114: _PIR.ADtoGO = 0;
  5255  0282  10A0               	bcf	__PIR^(0+128),1
  5256                           
  5257                           ;PIR_B1.c: 115: if (_PIR.Available == 1) {
  5258  0283  1BA0               	btfsc	__PIR^(0+128),7
  5259                           
  5260                           ;PIR_B1.c: 116: if (_PIR.OK == 1) {
  5261  0284  1DA0               	btfss	__PIR^(0+128),3
  5262  0285  2B48               	goto	l6061
  5263                           
  5264                           ;PIR_B1.c: 118: _PIR.Time++;
  5265  0286  3001               	movlw	1
  5266  0287  1283               	bcf	3,5	;RP0=0, select bank0
  5267  0288  1303               	bcf	3,6	;RP1=0, select bank0
  5268  0289  00DD               	movwf	??_PIR_Main
  5269  028A  085D               	movf	??_PIR_Main,w
  5270  028B  1683               	bsf	3,5	;RP0=1, select bank1
  5271  028C  1303               	bcf	3,6	;RP1=0, select bank1
  5272  028D  07A2               	addwf	(__PIR^(0+128)+2),f
  5273                           
  5274                           ;PIR_B1.c: 119: if (_PIR.Time == 60) {
  5275  028E  0822               	movf	(__PIR^(0+128)+2),w
  5276  028F  3A3C               	xorlw	60
  5277  0290  1D03               	skipz
  5278  0291  2AC6               	goto	l6039
  5279                           
  5280                           ;PIR_B1.c: 120: _PIR.Time = 0;
  5281  0292  01A2               	clrf	(__PIR^(0+128)+2)
  5282                           
  5283                           ;PIR_B1.c: 121: if (_PIR.RangeCount >= 90) {
  5284  0293  305A               	movlw	90
  5285  0294  0247               	subwf	(__PIR^(0+128)+39),w
  5286  0295  1C03               	skipc
  5287  0296  2AA2               	goto	l6021
  5288                           
  5289                           ;PIR_B1.c: 122: _PIR.RangeTime1 = 0;
  5290  0297  01C6               	clrf	(__PIR^(0+128)+38)
  5291                           
  5292                           ;PIR_B1.c: 124: if (_PIR.RangeValue == 25) {
  5293  0298  0848               	movf	(__PIR^(0+128)+40),w
  5294  0299  3A19               	xorlw	25
  5295  029A  1903               	btfsc	3,2
  5296  029B  2AB7               	goto	L10
  5297                           
  5298                           ;PIR_B1.c: 126: } else if (_PIR.RangeValue == (25+10)) {
  5299                           
  5300                           ;PIR_B1.c: 125: _PIR.RangeValue = (25+10);
  5301  029C  0848               	movf	(__PIR^(0+128)+40),w
  5302  029D  3A23               	xorlw	35
  5303  029E  1D03               	skipz
  5304  029F  2AC5               	goto	l6037
  5305                           
  5306                           ;PIR_B1.c: 127: _PIR.RangeValue = (25+20);
  5307  02A0  302D               	movlw	45
  5308  02A1  2ABE               	goto	L9
  5309  02A2                     l6021:	
  5310                           ;PIR_B1.c: 128: }
  5311                           ;PIR_B1.c: 129: } else if (_PIR.RangeCount <= 10) {
  5312                           
  5313  02A2  300B               	movlw	11
  5314  02A3  0247               	subwf	(__PIR^(0+128)+39),w
  5315  02A4  1803               	skipnc
  5316  02A5  2AC5               	goto	l6037
  5317                           
  5318                           ;PIR_B1.c: 130: _PIR.RangeTime1++;
  5319  02A6  3001               	movlw	1
  5320  02A7  1283               	bcf	3,5	;RP0=0, select bank0
  5321  02A8  1303               	bcf	3,6	;RP1=0, select bank0
  5322  02A9  00DD               	movwf	??_PIR_Main
  5323  02AA  085D               	movf	??_PIR_Main,w
  5324  02AB  1683               	bsf	3,5	;RP0=1, select bank1
  5325  02AC  1303               	bcf	3,6	;RP1=0, select bank1
  5326  02AD  07C6               	addwf	(__PIR^(0+128)+38),f
  5327                           
  5328                           ;PIR_B1.c: 131: if (_PIR.RangeTime1 == 2) {
  5329  02AE  0846               	movf	(__PIR^(0+128)+38),w
  5330  02AF  3A02               	xorlw	2
  5331  02B0  1D03               	skipz
  5332  02B1  2AC5               	goto	l6037
  5333                           
  5334                           ;PIR_B1.c: 132: _PIR.RangeTime1 = 0;
  5335  02B2  01C6               	clrf	(__PIR^(0+128)+38)
  5336                           
  5337                           ;PIR_B1.c: 134: if (_PIR.RangeValue == (25+20)) {
  5338  02B3  0848               	movf	(__PIR^(0+128)+40),w
  5339  02B4  3A2D               	xorlw	45
  5340  02B5  1D03               	skipz
  5341  02B6  2AB9               	goto	l6033
  5342  02B7                     L10:	
  5343                           
  5344                           ;PIR_B1.c: 135: _PIR.RangeValue = (25+10);
  5345  02B7  3023               	movlw	35
  5346  02B8  2ABE               	goto	L9
  5347  02B9                     l6033:	
  5348                           ;PIR_B1.c: 136: } else if (_PIR.RangeValue == (25+10)) {
  5349                           
  5350  02B9  0848               	movf	(__PIR^(0+128)+40),w
  5351  02BA  3A23               	xorlw	35
  5352  02BB  1D03               	skipz
  5353  02BC  2AC5               	goto	l6037
  5354                           
  5355                           ;PIR_B1.c: 137: _PIR.RangeValue = 25;
  5356  02BD  3019               	movlw	25
  5357  02BE                     L9:	
  5358  02BE  1283               	bcf	3,5	;RP0=0, select bank0
  5359  02BF  1303               	bcf	3,6	;RP1=0, select bank0
  5360  02C0  00DD               	movwf	??_PIR_Main
  5361  02C1  085D               	movf	??_PIR_Main,w
  5362  02C2  1683               	bsf	3,5	;RP0=1, select bank1
  5363  02C3  1303               	bcf	3,6	;RP1=0, select bank1
  5364  02C4  00C8               	movwf	(__PIR^(0+128)+40)
  5365  02C5                     l6037:	
  5366                           
  5367                           ;PIR_B1.c: 138: }
  5368                           ;PIR_B1.c: 139: }
  5369                           ;PIR_B1.c: 140: }
  5370                           ;PIR_B1.c: 141: _PIR.RangeCount = 0;
  5371  02C5  01C7               	clrf	(__PIR^(0+128)+39)
  5372  02C6                     l6039:	
  5373                           
  5374                           ;PIR_B1.c: 142: }
  5375                           ;PIR_B1.c: 145: if ((_PIR.SignalAD >= (_PIR.ReferenceVoltage - _PIR.RangeValue))
  5376                           ;PIR_B1.c: 146: && (_PIR.SignalAD <= (_PIR.ReferenceVoltage + _PIR.RangeValue))) {
  5377  02C6  0848               	movf	(__PIR^(0+128)+40),w
  5378  02C7  1283               	bcf	3,5	;RP0=0, select bank0
  5379  02C8  1303               	bcf	3,6	;RP1=0, select bank0
  5380  02C9  00DD               	movwf	??_PIR_Main
  5381  02CA  01DE               	clrf	??_PIR_Main+1
  5382  02CB  09DD               	comf	??_PIR_Main,f
  5383  02CC  09DE               	comf	??_PIR_Main+1,f
  5384  02CD  0ADD               	incf	??_PIR_Main,f
  5385  02CE  1903               	skipnz
  5386  02CF  0ADE               	incf	??_PIR_Main+1,f
  5387  02D0  1683               	bsf	3,5	;RP0=1, select bank1
  5388  02D1  1303               	bcf	3,6	;RP1=0, select bank1
  5389  02D2  0823               	movf	(__PIR^(0+128)+3),w
  5390  02D3  1283               	bcf	3,5	;RP0=0, select bank0
  5391  02D4  1303               	bcf	3,6	;RP1=0, select bank0
  5392  02D5  075D               	addwf	??_PIR_Main,w
  5393  02D6  00DF               	movwf	??_PIR_Main+2
  5394  02D7  085E               	movf	??_PIR_Main+1,w
  5395  02D8  1803               	skipnc
  5396  02D9  0A5E               	incf	??_PIR_Main+1,w
  5397  02DA  00E0               	movwf	??_PIR_Main+3
  5398  02DB  0860               	movf	??_PIR_Main+3,w
  5399  02DC  3A80               	xorlw	128
  5400  02DD  3C80               	sublw	128
  5401  02DE  1D03               	skipz
  5402  02DF  2AE4               	goto	u7755
  5403  02E0  085F               	movf	??_PIR_Main+2,w
  5404  02E1  1683               	bsf	3,5	;RP0=1, select bank1
  5405  02E2  1303               	bcf	3,6	;RP1=0, select bank1
  5406  02E3  0221               	subwf	(__PIR^(0+128)+1),w
  5407  02E4                     u7755:	
  5408  02E4  1C03               	skipc
  5409  02E5  2B03               	goto	l6045
  5410  02E6  1683               	bsf	3,5	;RP0=1, select bank1
  5411  02E7  1303               	bcf	3,6	;RP1=0, select bank1
  5412  02E8  0823               	movf	(__PIR^(0+128)+3),w
  5413  02E9  0748               	addwf	(__PIR^(0+128)+40),w
  5414  02EA  1283               	bcf	3,5	;RP0=0, select bank0
  5415  02EB  1303               	bcf	3,6	;RP1=0, select bank0
  5416  02EC  00DD               	movwf	??_PIR_Main
  5417  02ED  01DE               	clrf	??_PIR_Main+1
  5418  02EE  0DDE               	rlf	??_PIR_Main+1,f
  5419  02EF  085E               	movf	??_PIR_Main+1,w
  5420  02F0  3A80               	xorlw	128
  5421  02F1  00DF               	movwf	??_PIR_Main+2
  5422  02F2  3080               	movlw	128
  5423  02F3  025F               	subwf	??_PIR_Main+2,w
  5424  02F4  1D03               	skipz
  5425  02F5  2AFC               	goto	u7765
  5426  02F6  1683               	bsf	3,5	;RP0=1, select bank1
  5427  02F7  1303               	bcf	3,6	;RP1=0, select bank1
  5428  02F8  0821               	movf	(__PIR^(0+128)+1),w
  5429  02F9  1283               	bcf	3,5	;RP0=0, select bank0
  5430  02FA  1303               	bcf	3,6	;RP1=0, select bank0
  5431  02FB  025D               	subwf	??_PIR_Main,w
  5432  02FC                     u7765:	
  5433  02FC  1C03               	skipc
  5434  02FD  2B03               	goto	l6045
  5435                           
  5436                           ;PIR_B1.c: 148: _PIR.Count = 0;
  5437  02FE  1683               	bsf	3,5	;RP0=1, select bank1
  5438  02FF  1303               	bcf	3,6	;RP1=0, select bank1
  5439  0300  01BE               	clrf	(__PIR^(0+128)+30)
  5440  0301  01BF               	clrf	((__PIR+1)^(0+128)+30)
  5441                           
  5442                           ;PIR_B1.c: 159: } else {
  5443  0302  2B48               	goto	l6061
  5444  0303                     l6045:	
  5445                           
  5446                           ;PIR_B1.c: 162: _PIR.RangeCount++;
  5447  0303  3001               	movlw	1
  5448  0304  1283               	bcf	3,5	;RP0=0, select bank0
  5449  0305  1303               	bcf	3,6	;RP1=0, select bank0
  5450  0306  00DD               	movwf	??_PIR_Main
  5451  0307  085D               	movf	??_PIR_Main,w
  5452  0308  1683               	bsf	3,5	;RP0=1, select bank1
  5453  0309  1303               	bcf	3,6	;RP1=0, select bank1
  5454  030A  07C7               	addwf	(__PIR^(0+128)+39),f
  5455                           
  5456                           ;PIR_B1.c: 163: _PIR.Count++;
  5457  030B  3001               	movlw	1
  5458  030C  07BE               	addwf	(__PIR^(0+128)+30),f
  5459  030D  1803               	skipnc
  5460  030E  0ABF               	incf	((__PIR+1)^(0+128)+30),f
  5461  030F  3000               	movlw	0
  5462  0310  07BF               	addwf	((__PIR+1)^(0+128)+30),f
  5463                           
  5464                           ;PIR_B1.c: 165: TriggerValue = LightsStatus == 1 ? 3 : 3;
  5465  0311  1283               	bcf	3,5	;RP0=0, select bank0
  5466  0312  1303               	bcf	3,6	;RP1=0, select bank0
  5467  0313  0867               	movf	PIR_Main@LightsStatus,w
  5468  0314  3A01               	xorlw	1
  5469  0315  1903               	skipnz
  5470  0316  2B17               	goto	l6053
  5471  0317                     l6053:	
  5472  0317  3003               	movlw	3
  5473  0318  00E3               	movwf	_PIR_Main$3238
  5474  0319  3000               	movlw	0
  5475  031A  00E4               	movwf	_PIR_Main$3238+1
  5476  031B  0863               	movf	_PIR_Main$3238,w
  5477  031C  00DD               	movwf	??_PIR_Main
  5478  031D  085D               	movf	??_PIR_Main,w
  5479  031E  00E6               	movwf	PIR_Main@TriggerValue
  5480                           
  5481                           ;PIR_B1.c: 167: if (_PIR.Count == TriggerValue) {
  5482  031F  0866               	movf	PIR_Main@TriggerValue,w
  5483  0320  00DD               	movwf	??_PIR_Main
  5484  0321  01DE               	clrf	??_PIR_Main+1
  5485  0322  1683               	bsf	3,5	;RP0=1, select bank1
  5486  0323  1303               	bcf	3,6	;RP1=0, select bank1
  5487  0324  083F               	movf	((__PIR+1)^(0+128)+30),w
  5488  0325  1283               	bcf	3,5	;RP0=0, select bank0
  5489  0326  1303               	bcf	3,6	;RP1=0, select bank0
  5490  0327  065E               	xorwf	??_PIR_Main+1,w
  5491  0328  1D03               	skipz
  5492  0329  2B30               	goto	u7785
  5493  032A  1683               	bsf	3,5	;RP0=1, select bank1
  5494  032B  1303               	bcf	3,6	;RP1=0, select bank1
  5495  032C  083E               	movf	(__PIR^(0+128)+30),w
  5496  032D  1283               	bcf	3,5	;RP0=0, select bank0
  5497  032E  1303               	bcf	3,6	;RP1=0, select bank0
  5498  032F  065D               	xorwf	??_PIR_Main,w
  5499  0330                     u7785:	
  5500  0330  1D03               	skipz
  5501  0331  2B48               	goto	l6061
  5502                           
  5503                           ;PIR_B1.c: 169: _PIR.CloseTimeSeconds = 0;
  5504  0332  1683               	bsf	3,5	;RP0=1, select bank1
  5505  0333  1303               	bcf	3,6	;RP1=0, select bank1
  5506  0334  01C2               	clrf	(__PIR^(0+128)+34)
  5507                           
  5508                           ;PIR_B1.c: 170: _PIR.CloseTimeMinutes = 0;
  5509  0335  01C0               	clrf	(__PIR^(0+128)+32)
  5510  0336  01C1               	clrf	((__PIR+1)^(0+128)+32)
  5511                           
  5512                           ;PIR_B1.c: 172: _PIR.Count = 0;
  5513  0337  01BE               	clrf	(__PIR^(0+128)+30)
  5514  0338  01BF               	clrf	((__PIR+1)^(0+128)+30)
  5515                           
  5516                           ;PIR_B1.c: 179: if (getLights_Status(1) == 0) {
  5517  0339  3001               	movlw	1
  5518  033A  158A  21D0  118A   	fcall	_getLights_Status
  5519  033D  3800               	iorlw	0
  5520  033E  1D03               	skipz
  5521  033F  2B48               	goto	l6061
  5522                           
  5523                           ;PIR_B1.c: 180: setLights_SwOn(1);
  5524  0340  3001               	movlw	1
  5525  0341  158A  24FF  118A   	fcall	_setLights_SwOn
  5526                           
  5527                           ;PIR_B1.c: 181: setLights_SwOff(1);
  5528  0344  3001               	movlw	1
  5529  0345  158A  2420  118A   	fcall	_setLights_SwOff
  5530  0348                     l6061:	
  5531                           
  5532                           ;PIR_B1.c: 183: }
  5533                           ;PIR_B1.c: 245: }
  5534                           ;PIR_B1.c: 246: }
  5535                           ;PIR_B1.c: 247: }
  5536                           ;PIR_B1.c: 248: }
  5537                           ;PIR_B1.c: 249: }
  5538                           ;PIR_B1.c: 250: }
  5539                           ;PIR_B1.c: 251: if (_PIR.OK == 0) {
  5540  0348  1683               	bsf	3,5	;RP0=1, select bank1
  5541  0349  1303               	bcf	3,6	;RP1=0, select bank1
  5542  034A  19A0               	btfsc	__PIR^(0+128),3
  5543  034B  2B6C               	goto	l6073
  5544                           
  5545                           ;PIR_B1.c: 252: _PIR.Count++;
  5546  034C  3001               	movlw	1
  5547  034D  07BE               	addwf	(__PIR^(0+128)+30),f
  5548  034E  1803               	skipnc
  5549  034F  0ABF               	incf	((__PIR+1)^(0+128)+30),f
  5550  0350  3000               	movlw	0
  5551  0351  07BF               	addwf	((__PIR+1)^(0+128)+30),f
  5552                           
  5553                           ;PIR_B1.c: 253: if (_PIR.Count == (30000 / 20)) {
  5554  0352  3005               	movlw	5
  5555  0353  063F               	xorwf	((__PIR+1)^(0+128)+30),w
  5556  0354  1D03               	skipz
  5557  0355  2B58               	goto	u7815
  5558  0356  30DC               	movlw	220
  5559  0357  063E               	xorwf	(__PIR^(0+128)+30),w
  5560  0358                     u7815:	
  5561  0358  1D03               	skipz
  5562  0359  0008               	return
  5563                           
  5564                           ;PIR_B1.c: 254: _PIR.Count = 0;
  5565  035A  01BE               	clrf	(__PIR^(0+128)+30)
  5566  035B  01BF               	clrf	((__PIR+1)^(0+128)+30)
  5567                           
  5568                           ;PIR_B1.c: 255: _PIR.OK = 1;
  5569  035C  15A0               	bsf	__PIR^(0+128),3
  5570                           
  5571                           ;PIR_B1.c: 263: if (getLights_Status(1) == 1) {
  5572  035D  3001               	movlw	1
  5573  035E  158A  21D0  118A   	fcall	_getLights_Status
  5574  0361  3A01               	xorlw	1
  5575  0362  1D03               	skipz
  5576  0363  0008               	return
  5577                           
  5578                           ;PIR_B1.c: 264: setLights_SwOn(1);
  5579  0364  3001               	movlw	1
  5580  0365  158A  24FF  118A   	fcall	_setLights_SwOn
  5581                           
  5582                           ;PIR_B1.c: 265: setLights_SwOff(1);
  5583  0368  3001               	movlw	1
  5584  0369  158A  2420         	fcall	_setLights_SwOff
  5585                           
  5586                           ;PIR_B1.c: 267: }
  5587                           ;PIR_B1.c: 280: }
  5588                           ;PIR_B1.c: 281: } else {
  5589  036B  0008               	return
  5590  036C                     l6073:	
  5591                           
  5592                           ;PIR_B1.c: 283: if (LightsStatus == 1) {
  5593  036C  1283               	bcf	3,5	;RP0=0, select bank0
  5594  036D  1303               	bcf	3,6	;RP1=0, select bank0
  5595  036E  0867               	movf	PIR_Main@LightsStatus,w
  5596  036F  3A01               	xorlw	1
  5597  0370  1D03               	skipz
  5598  0371  2B9C               	goto	l6091
  5599                           
  5600                           ;PIR_B1.c: 284: _PIR.CloseTimeSeconds++;
  5601  0372  3001               	movlw	1
  5602  0373  00DD               	movwf	??_PIR_Main
  5603  0374  085D               	movf	??_PIR_Main,w
  5604  0375  1683               	bsf	3,5	;RP0=1, select bank1
  5605  0376  1303               	bcf	3,6	;RP1=0, select bank1
  5606  0377  07C2               	addwf	(__PIR^(0+128)+34),f
  5607                           
  5608                           ;PIR_B1.c: 285: if (_PIR.CloseTimeSeconds == (1000 / 20)) {
  5609  0378  0842               	movf	(__PIR^(0+128)+34),w
  5610  0379  3A32               	xorlw	50
  5611  037A  1D03               	skipz
  5612  037B  0008               	return
  5613                           
  5614                           ;PIR_B1.c: 286: _PIR.CloseTimeSeconds = 0;
  5615  037C  01C2               	clrf	(__PIR^(0+128)+34)
  5616                           
  5617                           ;PIR_B1.c: 287: _PIR.CloseTimeMinutes++;
  5618  037D  3001               	movlw	1
  5619  037E  07C0               	addwf	(__PIR^(0+128)+32),f
  5620  037F  1803               	skipnc
  5621  0380  0AC1               	incf	((__PIR+1)^(0+128)+32),f
  5622  0381  3000               	movlw	0
  5623  0382  07C1               	addwf	((__PIR+1)^(0+128)+32),f
  5624                           
  5625                           ;PIR_B1.c: 288: if (_PIR.CloseTimeMinutes == _PIR.CloseTimeValue) {
  5626  0383  0844               	movf	((__PIR+1)^(0+128)+35),w
  5627  0384  0641               	xorwf	((__PIR+1)^(0+128)+32),w
  5628  0385  1D03               	skipz
  5629  0386  2B89               	goto	u7855
  5630  0387  0843               	movf	(__PIR^(0+128)+35),w
  5631  0388  0640               	xorwf	(__PIR^(0+128)+32),w
  5632  0389                     u7855:	
  5633  0389  1D03               	skipz
  5634  038A  0008               	return
  5635                           
  5636                           ;PIR_B1.c: 289: _PIR.CloseTimeMinutes = 0;
  5637  038B  01C0               	clrf	(__PIR^(0+128)+32)
  5638  038C  01C1               	clrf	((__PIR+1)^(0+128)+32)
  5639                           
  5640                           ;PIR_B1.c: 295: if (getLights_Status(1) == 1) {
  5641  038D  3001               	movlw	1
  5642  038E  158A  21D0  118A   	fcall	_getLights_Status
  5643  0391  3A01               	xorlw	1
  5644  0392  1D03               	skipz
  5645  0393  0008               	return
  5646                           
  5647                           ;PIR_B1.c: 296: setLights_SwOn(1);
  5648  0394  3001               	movlw	1
  5649  0395  158A  24FF  118A   	fcall	_setLights_SwOn
  5650                           
  5651                           ;PIR_B1.c: 297: setLights_SwOff(1);
  5652  0398  3001               	movlw	1
  5653  0399  158A  2420         	fcall	_setLights_SwOff
  5654                           
  5655                           ;PIR_B1.c: 299: }
  5656                           ;PIR_B1.c: 311: }
  5657                           ;PIR_B1.c: 312: }
  5658                           ;PIR_B1.c: 313: } else {
  5659  039B  0008               	return
  5660  039C                     l6091:	
  5661                           
  5662                           ;PIR_B1.c: 314: _PIR.CloseTimeSeconds = 0;
  5663  039C  1683               	bsf	3,5	;RP0=1, select bank1
  5664  039D  1303               	bcf	3,6	;RP1=0, select bank1
  5665  039E  01C2               	clrf	(__PIR^(0+128)+34)
  5666                           
  5667                           ;PIR_B1.c: 315: _PIR.CloseTimeMinutes = 0;
  5668  039F  01C0               	clrf	(__PIR^(0+128)+32)
  5669  03A0  01C1               	clrf	((__PIR+1)^(0+128)+32)
  5670                           
  5671                           ;PIR_B1.c: 316: }
  5672                           ;PIR_B1.c: 318: }
  5673                           ;PIR_B1.c: 319: } else {
  5674  03A1  0008               	return
  5675  03A2                     l1040:	
  5676                           
  5677                           ;PIR_B1.c: 320: if (myMain.PowerON == 1) {
  5678  03A2  1283               	bcf	3,5	;RP0=0, select bank0
  5679  03A3  1303               	bcf	3,6	;RP1=0, select bank0
  5680  03A4  1C31               	btfss	_myMain,0
  5681  03A5  0008               	return
  5682                           
  5683                           ;PIR_B1.c: 321: _PIR.Enable = 1;
  5684  03A6  1683               	bsf	3,5	;RP0=1, select bank1
  5685  03A7  1303               	bcf	3,6	;RP1=0, select bank1
  5686  03A8  1420               	bsf	__PIR^(0+128),0
  5687                           
  5688                           ;PIR_B1.c: 328: if (getLights_Status(1) == 0) {
  5689  03A9  3001               	movlw	1
  5690  03AA  158A  21D0  118A   	fcall	_getLights_Status
  5691  03AD  3800               	iorlw	0
  5692  03AE  1D03               	skipz
  5693  03AF  0008               	return
  5694                           
  5695                           ;PIR_B1.c: 329: setLights_SwOn(1);
  5696  03B0  3001               	movlw	1
  5697  03B1  158A  24FF  118A   	fcall	_setLights_SwOn
  5698                           
  5699                           ;PIR_B1.c: 330: setLights_SwOff(1);
  5700  03B4  3001               	movlw	1
  5701  03B5  158A  2420         	fcall	_setLights_SwOff
  5702  03B7  0008               	return
  5703  03B8                     __end_of_PIR_Main:	
  5704                           
  5705                           	psect	text27
  5706  0936                     __ptext27:	
  5707 ;; *************** function _getCDS_Status *****************
  5708 ;; Defined at:
  5709 ;;		line 42 in file "../src/CDS_B1.c"
  5710 ;; Parameters:    Size  Location     Type
  5711 ;;		None
  5712 ;; Auto vars:     Size  Location     Type
  5713 ;;  status          1    4[COMMON] unsigned char 
  5714 ;; Return value:  Size  Location     Type
  5715 ;;                  1    wreg      unsigned char 
  5716 ;; Registers used:
  5717 ;;		wreg, status,2
  5718 ;; Tracked objects:
  5719 ;;		On entry : 0/0
  5720 ;;		On exit  : 0/0
  5721 ;;		Unchanged: 0/0
  5722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5723 ;;      Params:         0       0       0       0
  5724 ;;      Locals:         1       0       0       0
  5725 ;;      Temps:          0       0       0       0
  5726 ;;      Totals:         1       0       0       0
  5727 ;;Total ram usage:        1 bytes
  5728 ;; Hardware stack levels used:    1
  5729 ;; Hardware stack levels required when called:    2
  5730 ;; This function calls:
  5731 ;;		Nothing
  5732 ;; This function is called by:
  5733 ;;		_PIR_Main
  5734 ;; This function uses a non-reentrant model
  5735 ;;
  5736                           
  5737                           
  5738                           ;psect for function _getCDS_Status
  5739  0936                     _getCDS_Status:	
  5740                           
  5741                           ;CDS_B1.c: 43: char status = _CDS.Status == 1 ? 1 : 0;
  5742                           
  5743                           ;incstack = 0
  5744                           ; Regs used in _getCDS_Status: [wreg+status,2]
  5745  0936  3000               	movlw	0
  5746  0937  1283               	bcf	3,5	;RP0=0, select bank0
  5747  0938  1303               	bcf	3,6	;RP1=0, select bank0
  5748  0939  1A36               	btfsc	__CDS,4
  5749  093A  3001               	movlw	1
  5750  093B  00F4               	movwf	getCDS_Status@status
  5751                           
  5752                           ;CDS_B1.c: 44: return status;
  5753  093C  0874               	movf	getCDS_Status@status,w
  5754  093D  0008               	return
  5755  093E                     __end_of_getCDS_Status:	
  5756                           
  5757                           	psect	text28
  5758  0946                     __ptext28:	
  5759 ;; *************** function _PIR_Initialization *****************
  5760 ;; Defined at:
  5761 ;;		line 7 in file "../src/PIR_B1.c"
  5762 ;; Parameters:    Size  Location     Type
  5763 ;;		None
  5764 ;; Auto vars:     Size  Location     Type
  5765 ;;		None
  5766 ;; Return value:  Size  Location     Type
  5767 ;;		None               void
  5768 ;; Registers used:
  5769 ;;		wreg
  5770 ;; Tracked objects:
  5771 ;;		On entry : 0/0
  5772 ;;		On exit  : 0/0
  5773 ;;		Unchanged: 0/0
  5774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5775 ;;      Params:         0       0       0       0
  5776 ;;      Locals:         0       0       0       0
  5777 ;;      Temps:          1       0       0       0
  5778 ;;      Totals:         1       0       0       0
  5779 ;;Total ram usage:        1 bytes
  5780 ;; Hardware stack levels used:    1
  5781 ;; Hardware stack levels required when called:    2
  5782 ;; This function calls:
  5783 ;;		Nothing
  5784 ;; This function is called by:
  5785 ;;		_main
  5786 ;; This function uses a non-reentrant model
  5787 ;;
  5788                           
  5789                           
  5790                           ;psect for function _PIR_Initialization
  5791  0946                     _PIR_Initialization:	
  5792                           
  5793                           ;PIR_B1.c: 8: _PIR.RangeValue = 25;
  5794                           
  5795                           ;incstack = 0
  5796                           ; Regs used in _PIR_Initialization: [wreg]
  5797  0946  3019               	movlw	25
  5798  0947  00F4               	movwf	??_PIR_Initialization
  5799  0948  0874               	movf	??_PIR_Initialization,w
  5800  0949  1683               	bsf	3,5	;RP0=1, select bank1
  5801  094A  1303               	bcf	3,6	;RP1=0, select bank1
  5802  094B  00C8               	movwf	(__PIR^(0+128)+40)
  5803                           
  5804                           ;PIR_B1.c: 9: _PIR.CloseTimeValue = 5;
  5805  094C  3005               	movlw	5
  5806  094D  00C3               	movwf	(__PIR^(0+128)+35)
  5807  094E  3000               	movlw	0
  5808  094F  00C4               	movwf	(__PIR^(0+128)+36)
  5809  0950  0008               	return
  5810  0951                     __end_of_PIR_Initialization:	
  5811                           
  5812                           	psect	text29
  5813  09A1                     __ptext29:	
  5814 ;; *************** function _Mcu_Initialization *****************
  5815 ;; Defined at:
  5816 ;;		line 30 in file "../src/MCU_B1.c"
  5817 ;; Parameters:    Size  Location     Type
  5818 ;;		None
  5819 ;; Auto vars:     Size  Location     Type
  5820 ;;		None
  5821 ;; Return value:  Size  Location     Type
  5822 ;;		None               void
  5823 ;; Registers used:
  5824 ;;		wreg, status,2, status,0, pclath, cstack
  5825 ;; Tracked objects:
  5826 ;;		On entry : 0/0
  5827 ;;		On exit  : 0/0
  5828 ;;		Unchanged: 0/0
  5829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5830 ;;      Params:         0       0       0       0
  5831 ;;      Locals:         0       0       0       0
  5832 ;;      Temps:          0       0       0       0
  5833 ;;      Totals:         0       0       0       0
  5834 ;;Total ram usage:        0 bytes
  5835 ;; Hardware stack levels used:    1
  5836 ;; Hardware stack levels required when called:    3
  5837 ;; This function calls:
  5838 ;;		_ADC_Set
  5839 ;;		_Fosc_Set
  5840 ;;		_IO_Set
  5841 ;;		_TMR1_Set
  5842 ;;		_WDT_Set
  5843 ;; This function is called by:
  5844 ;;		_main
  5845 ;; This function uses a non-reentrant model
  5846 ;;
  5847                           
  5848                           
  5849                           ;psect for function _Mcu_Initialization
  5850  09A1                     _Mcu_Initialization:	
  5851                           
  5852                           ;MCU_B1.c: 32: Fosc_Set();
  5853                           
  5854                           ;incstack = 0
  5855                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  5856  09A1  158A  2101  158A   	fcall	_Fosc_Set
  5857                           
  5858                           ;MCU_B1.c: 34: IO_Set();
  5859  09A4  158A  22D8  158A   	fcall	_IO_Set
  5860                           
  5861                           ;MCU_B1.c: 36: ;;
  5862                           ;MCU_B1.c: 38: TMR1_Set();
  5863  09A7  158A  2176  158A   	fcall	_TMR1_Set
  5864                           
  5865                           ;MCU_B1.c: 40: ADC_Set();
  5866  09AA  158A  211F  158A   	fcall	_ADC_Set
  5867                           
  5868                           ;MCU_B1.c: 42: ;;
  5869                           ;MCU_B1.c: 44: ;;
  5870                           ;MCU_B1.c: 46: ;;
  5871                           ;MCU_B1.c: 48: ;;
  5872                           ;MCU_B1.c: 50: ;;
  5873                           ;MCU_B1.c: 52: WDT_Set();
  5874  09AD  158A  2184         	fcall	_WDT_Set
  5875  09AF  0008               	return
  5876  09B0                     __end_of_Mcu_Initialization:	
  5877                           
  5878                           	psect	text30
  5879  0984                     __ptext30:	
  5880 ;; *************** function _WDT_Set *****************
  5881 ;; Defined at:
  5882 ;;		line 1102 in file "../src/MCU_B1.c"
  5883 ;; Parameters:    Size  Location     Type
  5884 ;;		None
  5885 ;; Auto vars:     Size  Location     Type
  5886 ;;		None
  5887 ;; Return value:  Size  Location     Type
  5888 ;;		None               void
  5889 ;; Registers used:
  5890 ;;		wreg
  5891 ;; Tracked objects:
  5892 ;;		On entry : 0/0
  5893 ;;		On exit  : 0/0
  5894 ;;		Unchanged: 0/0
  5895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5896 ;;      Params:         0       0       0       0
  5897 ;;      Locals:         0       0       0       0
  5898 ;;      Temps:          1       0       0       0
  5899 ;;      Totals:         1       0       0       0
  5900 ;;Total ram usage:        1 bytes
  5901 ;; Hardware stack levels used:    1
  5902 ;; Hardware stack levels required when called:    2
  5903 ;; This function calls:
  5904 ;;		Nothing
  5905 ;; This function is called by:
  5906 ;;		_Mcu_Initialization
  5907 ;; This function uses a non-reentrant model
  5908 ;;
  5909                           
  5910                           
  5911                           ;psect for function _WDT_Set
  5912  0984                     _WDT_Set:	
  5913                           
  5914                           ;MCU_B1.c: 1104: PSA = 1;
  5915                           
  5916                           ;incstack = 0
  5917                           ; Regs used in _WDT_Set: [wreg]
  5918  0984  1683               	bsf	3,5	;RP0=1, select bank1
  5919  0985  1303               	bcf	3,6	;RP1=0, select bank1
  5920  0986  1581               	bsf	1,3	;volatile
  5921                           
  5922                           ;MCU_B1.c: 1105: PS0 = 1;
  5923  0987  1401               	bsf	1,0	;volatile
  5924                           
  5925                           ;MCU_B1.c: 1106: PS1 = 1;
  5926  0988  1481               	bsf	1,1	;volatile
  5927                           
  5928                           ;MCU_B1.c: 1107: PS2 = 1;
  5929  0989  1501               	bsf	1,2	;volatile
  5930                           
  5931                           ;MCU_B1.c: 1111: WDT.Enable = 1;
  5932  098A  1283               	bcf	3,5	;RP0=0, select bank0
  5933  098B  1303               	bcf	3,6	;RP1=0, select bank0
  5934  098C  143D               	bsf	_WDT,0
  5935                           
  5936                           ;MCU_B1.c: 1112: WDT.Timer = 10;
  5937  098D  300A               	movlw	10
  5938  098E  00F4               	movwf	??_WDT_Set
  5939  098F  0874               	movf	??_WDT_Set,w
  5940  0990  00BE               	movwf	_WDT+1
  5941  0991  0008               	return
  5942  0992                     __end_of_WDT_Set:	
  5943                           
  5944                           	psect	text31
  5945  0976                     __ptext31:	
  5946 ;; *************** function _TMR1_Set *****************
  5947 ;; Defined at:
  5948 ;;		line 226 in file "../src/MCU_B1.c"
  5949 ;; Parameters:    Size  Location     Type
  5950 ;;		None
  5951 ;; Auto vars:     Size  Location     Type
  5952 ;;		None
  5953 ;; Return value:  Size  Location     Type
  5954 ;;		None               void
  5955 ;; Registers used:
  5956 ;;		wreg
  5957 ;; Tracked objects:
  5958 ;;		On entry : 0/0
  5959 ;;		On exit  : 0/0
  5960 ;;		Unchanged: 0/0
  5961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5962 ;;      Params:         0       0       0       0
  5963 ;;      Locals:         0       0       0       0
  5964 ;;      Temps:          0       0       0       0
  5965 ;;      Totals:         0       0       0       0
  5966 ;;Total ram usage:        0 bytes
  5967 ;; Hardware stack levels used:    1
  5968 ;; Hardware stack levels required when called:    2
  5969 ;; This function calls:
  5970 ;;		Nothing
  5971 ;; This function is called by:
  5972 ;;		_Mcu_Initialization
  5973 ;; This function uses a non-reentrant model
  5974 ;;
  5975                           
  5976                           
  5977                           ;psect for function _TMR1_Set
  5978  0976                     _TMR1_Set:	
  5979                           
  5980                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
  5981                           
  5982                           ;incstack = 0
  5983                           ; Regs used in _TMR1_Set: [wreg]
  5984  0976  3041               	movlw	65
  5985  0977  1283               	bcf	3,5	;RP0=0, select bank0
  5986  0978  1303               	bcf	3,6	;RP1=0, select bank0
  5987  0979  0090               	movwf	16	;volatile
  5988                           
  5989                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
  5990  097A  30FA               	movlw	250
  5991  097B  008F               	movwf	15	;volatile
  5992                           
  5993                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
  5994  097C  3038               	movlw	56
  5995  097D  008E               	movwf	14	;volatile
  5996                           
  5997                           ;MCU_B1.c: 230: TMR1IE = 1;
  5998  097E  1683               	bsf	3,5	;RP0=1, select bank1
  5999  097F  1303               	bcf	3,6	;RP1=0, select bank1
  6000  0980  140C               	bsf	12,0	;volatile
  6001                           
  6002                           ;MCU_B1.c: 231: PEIE = 1;
  6003  0981  170B               	bsf	11,6	;volatile
  6004                           
  6005                           ;MCU_B1.c: 232: GIE = 1;
  6006  0982  178B               	bsf	11,7	;volatile
  6007  0983  0008               	return
  6008  0984                     __end_of_TMR1_Set:	
  6009                           
  6010                           	psect	text32
  6011  0AD8                     __ptext32:	
  6012 ;; *************** function _IO_Set *****************
  6013 ;; Defined at:
  6014 ;;		line 60 in file "../src/MCU_B1.c"
  6015 ;; Parameters:    Size  Location     Type
  6016 ;;		None
  6017 ;; Auto vars:     Size  Location     Type
  6018 ;;		None
  6019 ;; Return value:  Size  Location     Type
  6020 ;;		None               void
  6021 ;; Registers used:
  6022 ;;		wreg, status,2
  6023 ;; Tracked objects:
  6024 ;;		On entry : 0/0
  6025 ;;		On exit  : 0/0
  6026 ;;		Unchanged: 0/0
  6027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6028 ;;      Params:         0       0       0       0
  6029 ;;      Locals:         0       0       0       0
  6030 ;;      Temps:          0       0       0       0
  6031 ;;      Totals:         0       0       0       0
  6032 ;;Total ram usage:        0 bytes
  6033 ;; Hardware stack levels used:    1
  6034 ;; Hardware stack levels required when called:    2
  6035 ;; This function calls:
  6036 ;;		Nothing
  6037 ;; This function is called by:
  6038 ;;		_Mcu_Initialization
  6039 ;; This function uses a non-reentrant model
  6040 ;;
  6041                           
  6042                           
  6043                           ;psect for function _IO_Set
  6044  0AD8                     _IO_Set:	
  6045                           
  6046                           ;MCU_B1.c: 62: TRISA = 0b00101110;;
  6047                           
  6048                           ;incstack = 0
  6049                           ; Regs used in _IO_Set: [wreg+status,2]
  6050  0AD8  302E               	movlw	46
  6051  0AD9  1683               	bsf	3,5	;RP0=1, select bank1
  6052  0ADA  1303               	bcf	3,6	;RP1=0, select bank1
  6053  0ADB  0085               	movwf	5	;volatile
  6054                           
  6055                           ;MCU_B1.c: 63: TRISB = 0b00010101;;
  6056  0ADC  3015               	movlw	21
  6057  0ADD  0086               	movwf	6	;volatile
  6058                           
  6059                           ;MCU_B1.c: 64: TRISC = 0b00000000;;
  6060  0ADE  0187               	clrf	7	;volatile
  6061                           
  6062                           ;MCU_B1.c: 65: ANSELA = 0b00101110;;
  6063  0ADF  302E               	movlw	46
  6064  0AE0  1683               	bsf	3,5	;RP0=1, select bank3
  6065  0AE1  1703               	bsf	3,6	;RP1=1, select bank3
  6066  0AE2  0085               	movwf	5	;volatile
  6067                           
  6068                           ;MCU_B1.c: 66: ANSELB = 0b00000001;;
  6069  0AE3  3001               	movlw	1
  6070  0AE4  0086               	movwf	6	;volatile
  6071                           
  6072                           ;MCU_B1.c: 67: PORTA = 0b00101110;;
  6073  0AE5  302E               	movlw	46
  6074  0AE6  1283               	bcf	3,5	;RP0=0, select bank0
  6075  0AE7  1303               	bcf	3,6	;RP1=0, select bank0
  6076  0AE8  0085               	movwf	5	;volatile
  6077                           
  6078                           ;MCU_B1.c: 68: PORTB = 0b00010101;;
  6079  0AE9  3015               	movlw	21
  6080  0AEA  0086               	movwf	6	;volatile
  6081                           
  6082                           ;MCU_B1.c: 69: PORTC = 0b00000000;;
  6083  0AEB  0187               	clrf	7	;volatile
  6084                           
  6085                           ;MCU_B1.c: 71: WPUB = 0b00000000;;
  6086  0AEC  1683               	bsf	3,5	;RP0=1, select bank1
  6087  0AED  1303               	bcf	3,6	;RP1=0, select bank1
  6088  0AEE  0195               	clrf	21	;volatile
  6089  0AEF  0008               	return
  6090  0AF0                     __end_of_IO_Set:	
  6091                           
  6092                           	psect	text33
  6093  0901                     __ptext33:	
  6094 ;; *************** function _Fosc_Set *****************
  6095 ;; Defined at:
  6096 ;;		line 56 in file "../src/MCU_B1.c"
  6097 ;; Parameters:    Size  Location     Type
  6098 ;;		None
  6099 ;; Auto vars:     Size  Location     Type
  6100 ;;		None
  6101 ;; Return value:  Size  Location     Type
  6102 ;;		None               void
  6103 ;; Registers used:
  6104 ;;		wreg
  6105 ;; Tracked objects:
  6106 ;;		On entry : 0/0
  6107 ;;		On exit  : 0/0
  6108 ;;		Unchanged: 0/0
  6109 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6110 ;;      Params:         0       0       0       0
  6111 ;;      Locals:         0       0       0       0
  6112 ;;      Temps:          0       0       0       0
  6113 ;;      Totals:         0       0       0       0
  6114 ;;Total ram usage:        0 bytes
  6115 ;; Hardware stack levels used:    1
  6116 ;; Hardware stack levels required when called:    2
  6117 ;; This function calls:
  6118 ;;		Nothing
  6119 ;; This function is called by:
  6120 ;;		_Mcu_Initialization
  6121 ;; This function uses a non-reentrant model
  6122 ;;
  6123                           
  6124                           
  6125                           ;psect for function _Fosc_Set
  6126  0901                     _Fosc_Set:	
  6127                           
  6128                           ;MCU_B1.c: 57: OSCCON = 0x3c;
  6129                           
  6130                           ;incstack = 0
  6131                           ; Regs used in _Fosc_Set: [wreg]
  6132  0901  303C               	movlw	60
  6133  0902  1683               	bsf	3,5	;RP0=1, select bank1
  6134  0903  1303               	bcf	3,6	;RP1=0, select bank1
  6135  0904  0090               	movwf	16	;volatile
  6136  0905  0008               	return
  6137  0906                     __end_of_Fosc_Set:	
  6138                           
  6139                           	psect	text34
  6140  091F                     __ptext34:	
  6141 ;; *************** function _ADC_Set *****************
  6142 ;; Defined at:
  6143 ;;		line 427 in file "../src/MCU_B1.c"
  6144 ;; Parameters:    Size  Location     Type
  6145 ;;		None
  6146 ;; Auto vars:     Size  Location     Type
  6147 ;;		None
  6148 ;; Return value:  Size  Location     Type
  6149 ;;		None               void
  6150 ;; Registers used:
  6151 ;;		wreg
  6152 ;; Tracked objects:
  6153 ;;		On entry : 0/0
  6154 ;;		On exit  : 0/0
  6155 ;;		Unchanged: 0/0
  6156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6157 ;;      Params:         0       0       0       0
  6158 ;;      Locals:         0       0       0       0
  6159 ;;      Temps:          0       0       0       0
  6160 ;;      Totals:         0       0       0       0
  6161 ;;Total ram usage:        0 bytes
  6162 ;; Hardware stack levels used:    1
  6163 ;; Hardware stack levels required when called:    2
  6164 ;; This function calls:
  6165 ;;		Nothing
  6166 ;; This function is called by:
  6167 ;;		_Mcu_Initialization
  6168 ;; This function uses a non-reentrant model
  6169 ;;
  6170                           
  6171                           
  6172                           ;psect for function _ADC_Set
  6173  091F                     _ADC_Set:	
  6174                           
  6175                           ;MCU_B1.c: 428: ADCON1 = 0x73;
  6176                           
  6177                           ;incstack = 0
  6178                           ; Regs used in _ADC_Set: [wreg]
  6179  091F  3073               	movlw	115
  6180  0920  1683               	bsf	3,5	;RP0=1, select bank1
  6181  0921  1303               	bcf	3,6	;RP1=0, select bank1
  6182  0922  009F               	movwf	31	;volatile
  6183                           
  6184                           ;MCU_B1.c: 429: FVRCON = 0xc1;
  6185  0923  30C1               	movlw	193
  6186  0924  009D               	movwf	29	;volatile
  6187  0925  0008               	return
  6188  0926                     __end_of_ADC_Set:	
  6189                           
  6190                           	psect	text35
  6191  002D                     __ptext35:	
  6192 ;; *************** function _Load_Main *****************
  6193 ;; Defined at:
  6194 ;;		line 40 in file "../src/OverLoad_B1.c"
  6195 ;; Parameters:    Size  Location     Type
  6196 ;;		None
  6197 ;; Auto vars:     Size  Location     Type
  6198 ;;  i               2   15[BANK0 ] int 
  6199 ;;  LightsCount     1   14[BANK0 ] unsigned char 
  6200 ;;  Load_RunStat    1   13[BANK0 ] unsigned char 
  6201 ;;  ErrorCountVa    1   12[BANK0 ] unsigned char 
  6202 ;;  error           1    9[BANK0 ] unsigned char 
  6203 ;; Return value:  Size  Location     Type
  6204 ;;		None               void
  6205 ;; Registers used:
  6206 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6207 ;; Tracked objects:
  6208 ;;		On entry : 0/0
  6209 ;;		On exit  : 0/0
  6210 ;;		Unchanged: 0/0
  6211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6212 ;;      Params:         0       0       0       0
  6213 ;;      Locals:         0       8       0       0
  6214 ;;      Temps:          0       2       0       0
  6215 ;;      Totals:         0      10       0       0
  6216 ;;Total ram usage:       10 bytes
  6217 ;; Hardware stack levels used:    1
  6218 ;; Hardware stack levels required when called:    3
  6219 ;; This function calls:
  6220 ;;		___lwdiv
  6221 ;;		___wmul
  6222 ;;		_getLight_LoadGO
  6223 ;;		_getLight_Load_Status
  6224 ;;		_getMain_All_Error_Status
  6225 ;;		_getMain_All_LightsStatus
  6226 ;;		_getMain_Lights_Count
  6227 ;;		_setLoad_AH_AL_Restore
  6228 ;; This function is called by:
  6229 ;;		_main
  6230 ;; This function uses a non-reentrant model
  6231 ;;
  6232                           
  6233                           
  6234                           ;psect for function _Load_Main
  6235  002D                     _Load_Main:	
  6236                           
  6237                           ;OverLoad_B1.c: 41: char error = getMain_All_Error_Status(0);
  6238                           
  6239                           ;incstack = 0
  6240                           ; Regs used in _Load_Main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6241  002D  3000               	movlw	0
  6242  002E  158A  24C1  118A   	fcall	_getMain_All_Error_Status
  6243  0031  1283               	bcf	3,5	;RP0=0, select bank0
  6244  0032  1303               	bcf	3,6	;RP1=0, select bank0
  6245  0033  00DE               	movwf	??_Load_Main
  6246  0034  085E               	movf	??_Load_Main,w
  6247  0035  00E0               	movwf	Load_Main@error
  6248                           
  6249                           ;OverLoad_B1.c: 42: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount = 0;
  6250  0036  01E4               	clrf	Load_Main@Load_RunStatus
  6251  0037  01E3               	clrf	Load_Main@ErrorCountValue
  6252  0038  01E5               	clrf	Load_Main@LightsCount
  6253                           
  6254                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
  6255  0039  1683               	bsf	3,5	;RP0=1, select bank1
  6256  003A  1303               	bcf	3,6	;RP1=0, select bank1
  6257  003B  1C4A               	btfss	_Load^(0+128),0
  6258  003C  2A0F               	goto	l820
  6259                           
  6260                           ;OverLoad_B1.c: 45: if (getMain_All_LightsStatus() == 0) {
  6261  003D  158A  21C0  118A   	fcall	_getMain_All_LightsStatus
  6262  0040  3800               	iorlw	0
  6263  0041  1D03               	skipz
  6264  0042  2846               	goto	l5805
  6265                           
  6266                           ;OverLoad_B1.c: 46: Load.GO = 0;
  6267  0043  1683               	bsf	3,5	;RP0=1, select bank1
  6268  0044  1303               	bcf	3,6	;RP1=0, select bank1
  6269  0045  2865               	goto	l5821
  6270  0046                     l5805:	
  6271                           ;OverLoad_B1.c: 47: } else {
  6272                           
  6273                           
  6274                           ;OverLoad_B1.c: 70: if (error == 0) {
  6275  0046  1283               	bcf	3,5	;RP0=0, select bank0
  6276  0047  1303               	bcf	3,6	;RP1=0, select bank0
  6277  0048  08E0               	movf	Load_Main@error,f
  6278  0049  1D03               	skipz
  6279  004A  2862               	goto	l823
  6280                           
  6281                           ;OverLoad_B1.c: 71: Load.GO = 1;
  6282  004B  1683               	bsf	3,5	;RP0=1, select bank1
  6283  004C  1303               	bcf	3,6	;RP1=0, select bank1
  6284  004D  14CA               	bsf	_Load^(0+128),1
  6285                           
  6286                           ;OverLoad_B1.c: 73: if (getLight_LoadGO() == 1) {
  6287  004E  158A  2106  118A   	fcall	_getLight_LoadGO
  6288  0051  3A01               	xorlw	1
  6289  0052  1D03               	skipz
  6290  0053  285C               	goto	l824
  6291                           
  6292                           ;OverLoad_B1.c: 74: if (Load.Run == 0 && Load.OK == 0) {
  6293  0054  1683               	bsf	3,5	;RP0=1, select bank1
  6294  0055  1303               	bcf	3,6	;RP1=0, select bank1
  6295  0056  1DCA               	btfss	_Load^(0+128),3
  6296  0057  1BCA               	btfsc	_Load^(0+128),7
  6297  0058  2866               	goto	l822
  6298                           
  6299                           ;OverLoad_B1.c: 75: Load.Run = 1;
  6300  0059  15CA               	bsf	_Load^(0+128),3
  6301                           
  6302                           ;OverLoad_B1.c: 76: Load.Count = 0;
  6303  005A  01E3               	clrf	(_Load^(0+128)+25)
  6304                           
  6305                           ;OverLoad_B1.c: 77: }
  6306                           ;OverLoad_B1.c: 78: } else {
  6307  005B  2866               	goto	l822
  6308  005C                     l824:	
  6309                           
  6310                           ;OverLoad_B1.c: 79: if (Load.OK == 1) {
  6311  005C  1683               	bsf	3,5	;RP0=1, select bank1
  6312  005D  1303               	bcf	3,6	;RP1=0, select bank1
  6313  005E  1FCA               	btfss	_Load^(0+128),7
  6314  005F  2866               	goto	l822
  6315                           
  6316                           ;OverLoad_B1.c: 80: Load.OK = 0;
  6317  0060  13CA               	bcf	_Load^(0+128),7
  6318                           
  6319                           ;OverLoad_B1.c: 81: }
  6320                           ;OverLoad_B1.c: 82: }
  6321                           ;OverLoad_B1.c: 83: } else {
  6322  0061  2866               	goto	l822
  6323  0062                     l823:	
  6324                           
  6325                           ;OverLoad_B1.c: 84: if (Load.GO == 1) {
  6326  0062  1683               	bsf	3,5	;RP0=1, select bank1
  6327  0063  1303               	bcf	3,6	;RP1=0, select bank1
  6328  0064  18CA               	btfsc	_Load^(0+128),1
  6329  0065                     l5821:	
  6330                           
  6331                           ;OverLoad_B1.c: 85: Load.GO = 0;
  6332  0065  10CA               	bcf	_Load^(0+128),1
  6333  0066                     l822:	
  6334                           
  6335                           ;OverLoad_B1.c: 86: }
  6336                           ;OverLoad_B1.c: 87: }
  6337                           ;OverLoad_B1.c: 89: }
  6338                           ;OverLoad_B1.c: 92: if (Load.GO == 1) {
  6339  0066  1CCA               	btfss	_Load^(0+128),1
  6340  0067  29E8               	goto	l830
  6341                           
  6342                           ;OverLoad_B1.c: 93: Load.LightsON = 1;
  6343  0068  154A               	bsf	_Load^(0+128),2
  6344                           
  6345                           ;OverLoad_B1.c: 95: if (Load.ADtoGO == 1) {
  6346  0069  1E4A               	btfss	_Load^(0+128),4
  6347  006A  29E6               	goto	l831
  6348                           
  6349                           ;OverLoad_B1.c: 96: Load.Time++;
  6350  006B  3001               	movlw	1
  6351  006C  07CB               	addwf	(_Load^(0+128)+1),f
  6352  006D  1803               	skipnc
  6353  006E  0ACC               	incf	((_Load+1)^(0+128)+1),f
  6354  006F  3000               	movlw	0
  6355  0070  07CC               	addwf	((_Load+1)^(0+128)+1),f
  6356                           
  6357                           ;OverLoad_B1.c: 97: if (Load.Time >= (40 / 20)) {
  6358  0071  3000               	movlw	0
  6359  0072  024C               	subwf	((_Load+1)^(0+128)+1),w
  6360  0073  3002               	movlw	2
  6361  0074  1903               	skipnz
  6362  0075  024B               	subwf	(_Load^(0+128)+1),w
  6363  0076  1C03               	skipc
  6364  0077  0008               	return
  6365                           
  6366                           ;OverLoad_B1.c: 98: Load.Time = 0;
  6367  0078  01CB               	clrf	(_Load^(0+128)+1)
  6368  0079  01CC               	clrf	((_Load+1)^(0+128)+1)
  6369                           
  6370                           ;OverLoad_B1.c: 99: Load.ADtoGO = 0;
  6371  007A  124A               	bcf	_Load^(0+128),4
  6372                           
  6373                           ;OverLoad_B1.c: 101: for (int i = 1; i < 4; i++) {
  6374  007B  3001               	movlw	1
  6375  007C  1283               	bcf	3,5	;RP0=0, select bank0
  6376  007D  1303               	bcf	3,6	;RP1=0, select bank0
  6377  007E  00E6               	movwf	Load_Main@i
  6378  007F  3000               	movlw	0
  6379  0080  00E7               	movwf	Load_Main@i+1
  6380  0081  0867               	movf	Load_Main@i+1,w
  6381  0082  3A80               	xorlw	128
  6382  0083  00FF               	movwf	127
  6383  0084  3080               	movlw	128
  6384  0085  027F               	subwf	127,w
  6385  0086  1D03               	skipz
  6386  0087  288A               	goto	u7315
  6387  0088  3004               	movlw	4
  6388  0089  0266               	subwf	Load_Main@i,w
  6389  008A                     u7315:	
  6390  008A  1803               	btfsc	3,0
  6391  008B  28C8               	goto	l5843
  6392  008C                     l5837:	
  6393                           
  6394                           ;OverLoad_B1.c: 102: Load.ADH += Load.AH[i];
  6395  008C  1283               	bcf	3,5	;RP0=0, select bank0
  6396  008D  1303               	bcf	3,6	;RP1=0, select bank0
  6397  008E  0866               	movf	Load_Main@i,w
  6398  008F  3ED4               	addlw	(_Load+10)& (0+255)
  6399  0090  0084               	movwf	4
  6400  0091  1383               	bcf	3,7	;select IRP bank1
  6401  0092  0800               	movf	0,w
  6402  0093  00DE               	movwf	??_Load_Main
  6403  0094  01DF               	clrf	??_Load_Main+1
  6404  0095  085E               	movf	??_Load_Main,w
  6405  0096  1683               	bsf	3,5	;RP0=1, select bank1
  6406  0097  1303               	bcf	3,6	;RP1=0, select bank1
  6407  0098  07CF               	addwf	(_Load^(0+128)+5),f
  6408  0099  1803               	skipnc
  6409  009A  0AD0               	incf	((_Load+1)^(0+128)+5),f
  6410  009B  1283               	bcf	3,5	;RP0=0, select bank0
  6411  009C  1303               	bcf	3,6	;RP1=0, select bank0
  6412  009D  085F               	movf	??_Load_Main+1,w
  6413  009E  1683               	bsf	3,5	;RP0=1, select bank1
  6414  009F  1303               	bcf	3,6	;RP1=0, select bank1
  6415  00A0  07D0               	addwf	((_Load+1)^(0+128)+5),f
  6416                           
  6417                           ;OverLoad_B1.c: 103: Load.ADL += Load.AL[i];
  6418  00A1  1283               	bcf	3,5	;RP0=0, select bank0
  6419  00A2  1303               	bcf	3,6	;RP1=0, select bank0
  6420  00A3  0866               	movf	Load_Main@i,w
  6421  00A4  3ED9               	addlw	(_Load+15)& (0+255)
  6422  00A5  0084               	movwf	4
  6423  00A6  0800               	movf	0,w
  6424  00A7  00DE               	movwf	??_Load_Main
  6425  00A8  01DF               	clrf	??_Load_Main+1
  6426  00A9  085E               	movf	??_Load_Main,w
  6427  00AA  1683               	bsf	3,5	;RP0=1, select bank1
  6428  00AB  1303               	bcf	3,6	;RP1=0, select bank1
  6429  00AC  07D1               	addwf	(_Load^(0+128)+7),f
  6430  00AD  1803               	skipnc
  6431  00AE  0AD2               	incf	((_Load+1)^(0+128)+7),f
  6432  00AF  1283               	bcf	3,5	;RP0=0, select bank0
  6433  00B0  1303               	bcf	3,6	;RP1=0, select bank0
  6434  00B1  085F               	movf	??_Load_Main+1,w
  6435  00B2  1683               	bsf	3,5	;RP0=1, select bank1
  6436  00B3  1303               	bcf	3,6	;RP1=0, select bank1
  6437  00B4  07D2               	addwf	((_Load+1)^(0+128)+7),f
  6438  00B5  3001               	movlw	1
  6439  00B6  1283               	bcf	3,5	;RP0=0, select bank0
  6440  00B7  1303               	bcf	3,6	;RP1=0, select bank0
  6441  00B8  07E6               	addwf	Load_Main@i,f
  6442  00B9  1803               	skipnc
  6443  00BA  0AE7               	incf	Load_Main@i+1,f
  6444  00BB  3000               	movlw	0
  6445  00BC  07E7               	addwf	Load_Main@i+1,f
  6446  00BD  0867               	movf	Load_Main@i+1,w
  6447  00BE  3A80               	xorlw	128
  6448  00BF  00FF               	movwf	127
  6449  00C0  3080               	movlw	128
  6450  00C1  027F               	subwf	127,w
  6451  00C2  1D03               	skipz
  6452  00C3  28C6               	goto	u7325
  6453  00C4  3004               	movlw	4
  6454  00C5  0266               	subwf	Load_Main@i,w
  6455  00C6                     u7325:	
  6456  00C6  1C03               	skipc
  6457  00C7  288C               	goto	l5837
  6458  00C8                     l5843:	
  6459                           
  6460                           ;OverLoad_B1.c: 104: }
  6461                           ;OverLoad_B1.c: 105: Load.ADH /= 3;
  6462  00C8  3003               	movlw	3
  6463  00C9  1283               	bcf	3,5	;RP0=0, select bank0
  6464  00CA  1303               	bcf	3,6	;RP1=0, select bank0
  6465  00CB  00D7               	movwf	___lwdiv@divisor
  6466  00CC  3000               	movlw	0
  6467  00CD  00D8               	movwf	___lwdiv@divisor+1
  6468  00CE  1683               	bsf	3,5	;RP0=1, select bank1
  6469  00CF  1303               	bcf	3,6	;RP1=0, select bank1
  6470  00D0  0850               	movf	((_Load+1)^(0+128)+5),w
  6471  00D1  1283               	bcf	3,5	;RP0=0, select bank0
  6472  00D2  1303               	bcf	3,6	;RP1=0, select bank0
  6473  00D3  01DA               	clrf	___lwdiv@dividend+1
  6474  00D4  07DA               	addwf	___lwdiv@dividend+1,f
  6475  00D5  1683               	bsf	3,5	;RP0=1, select bank1
  6476  00D6  1303               	bcf	3,6	;RP1=0, select bank1
  6477  00D7  084F               	movf	(_Load^(0+128)+5),w
  6478  00D8  1283               	bcf	3,5	;RP0=0, select bank0
  6479  00D9  1303               	bcf	3,6	;RP1=0, select bank0
  6480  00DA  01D9               	clrf	___lwdiv@dividend
  6481  00DB  07D9               	addwf	___lwdiv@dividend,f
  6482  00DC  158A  253D  118A   	fcall	___lwdiv
  6483  00DF  1283               	bcf	3,5	;RP0=0, select bank0
  6484  00E0  1303               	bcf	3,6	;RP1=0, select bank0
  6485  00E1  0858               	movf	?___lwdiv+1,w
  6486  00E2  1683               	bsf	3,5	;RP0=1, select bank1
  6487  00E3  1303               	bcf	3,6	;RP1=0, select bank1
  6488  00E4  01D0               	clrf	((_Load+1)^(0+128)+5)
  6489  00E5  07D0               	addwf	((_Load+1)^(0+128)+5),f
  6490  00E6  1283               	bcf	3,5	;RP0=0, select bank0
  6491  00E7  1303               	bcf	3,6	;RP1=0, select bank0
  6492  00E8  0857               	movf	?___lwdiv,w
  6493  00E9  1683               	bsf	3,5	;RP0=1, select bank1
  6494  00EA  1303               	bcf	3,6	;RP1=0, select bank1
  6495  00EB  01CF               	clrf	(_Load^(0+128)+5)
  6496  00EC  07CF               	addwf	(_Load^(0+128)+5),f
  6497                           
  6498                           ;OverLoad_B1.c: 106: Load.ADL /= 3;
  6499  00ED  3003               	movlw	3
  6500  00EE  1283               	bcf	3,5	;RP0=0, select bank0
  6501  00EF  1303               	bcf	3,6	;RP1=0, select bank0
  6502  00F0  00D7               	movwf	___lwdiv@divisor
  6503  00F1  3000               	movlw	0
  6504  00F2  00D8               	movwf	___lwdiv@divisor+1
  6505  00F3  1683               	bsf	3,5	;RP0=1, select bank1
  6506  00F4  1303               	bcf	3,6	;RP1=0, select bank1
  6507  00F5  0852               	movf	((_Load+1)^(0+128)+7),w
  6508  00F6  1283               	bcf	3,5	;RP0=0, select bank0
  6509  00F7  1303               	bcf	3,6	;RP1=0, select bank0
  6510  00F8  01DA               	clrf	___lwdiv@dividend+1
  6511  00F9  07DA               	addwf	___lwdiv@dividend+1,f
  6512  00FA  1683               	bsf	3,5	;RP0=1, select bank1
  6513  00FB  1303               	bcf	3,6	;RP1=0, select bank1
  6514  00FC  0851               	movf	(_Load^(0+128)+7),w
  6515  00FD  1283               	bcf	3,5	;RP0=0, select bank0
  6516  00FE  1303               	bcf	3,6	;RP1=0, select bank0
  6517  00FF  01D9               	clrf	___lwdiv@dividend
  6518  0100  07D9               	addwf	___lwdiv@dividend,f
  6519  0101  158A  253D  118A   	fcall	___lwdiv
  6520  0104  1283               	bcf	3,5	;RP0=0, select bank0
  6521  0105  1303               	bcf	3,6	;RP1=0, select bank0
  6522  0106  0858               	movf	?___lwdiv+1,w
  6523  0107  1683               	bsf	3,5	;RP0=1, select bank1
  6524  0108  1303               	bcf	3,6	;RP1=0, select bank1
  6525  0109  01D2               	clrf	((_Load+1)^(0+128)+7)
  6526  010A  07D2               	addwf	((_Load+1)^(0+128)+7),f
  6527  010B  1283               	bcf	3,5	;RP0=0, select bank0
  6528  010C  1303               	bcf	3,6	;RP1=0, select bank0
  6529  010D  0857               	movf	?___lwdiv,w
  6530  010E  1683               	bsf	3,5	;RP0=1, select bank1
  6531  010F  1303               	bcf	3,6	;RP1=0, select bank1
  6532  0110  01D1               	clrf	(_Load^(0+128)+7)
  6533  0111  07D1               	addwf	(_Load^(0+128)+7),f
  6534                           
  6535                           ;OverLoad_B1.c: 108: setLoad_AH_AL_Restore();
  6536  0112  158A  227C  118A   	fcall	_setLoad_AH_AL_Restore
  6537                           
  6538                           ;OverLoad_B1.c: 110: if (Load.ADH >= Load.ADL) {
  6539  0115  1683               	bsf	3,5	;RP0=1, select bank1
  6540  0116  1303               	bcf	3,6	;RP1=0, select bank1
  6541  0117  0852               	movf	((_Load+1)^(0+128)+7),w
  6542  0118  0250               	subwf	((_Load+1)^(0+128)+5),w
  6543  0119  1D03               	skipz
  6544  011A  291D               	goto	u7335
  6545  011B  0851               	movf	(_Load^(0+128)+7),w
  6546  011C  024F               	subwf	(_Load^(0+128)+5),w
  6547  011D                     u7335:	
  6548  011D  1C03               	skipc
  6549  011E  0008               	return
  6550                           
  6551                           ;OverLoad_B1.c: 111: Load.AD = Load.ADH - Load.ADL;
  6552  011F  0351               	decf	(_Load^(0+128)+7),w
  6553  0120  3AFF               	xorlw	255
  6554  0121  074F               	addwf	(_Load^(0+128)+5),w
  6555  0122  1283               	bcf	3,5	;RP0=0, select bank0
  6556  0123  1303               	bcf	3,6	;RP1=0, select bank0
  6557  0124  00DE               	movwf	??_Load_Main
  6558  0125  085E               	movf	??_Load_Main,w
  6559  0126  1683               	bsf	3,5	;RP0=1, select bank1
  6560  0127  1303               	bcf	3,6	;RP1=0, select bank1
  6561  0128  00DE               	movwf	(_Load^(0+128)+20)
  6562                           
  6563                           ;OverLoad_B1.c: 112: Load.ADH = 0;
  6564  0129  01CF               	clrf	(_Load^(0+128)+5)
  6565  012A  01D0               	clrf	((_Load+1)^(0+128)+5)
  6566                           
  6567                           ;OverLoad_B1.c: 113: Load.ADL = 0;
  6568  012B  01D1               	clrf	(_Load^(0+128)+7)
  6569  012C  01D2               	clrf	((_Load+1)^(0+128)+7)
  6570                           
  6571                           ;OverLoad_B1.c: 115: if (Load.Run == 1) {
  6572  012D  1DCA               	btfss	_Load^(0+128),3
  6573  012E  2992               	goto	l836
  6574                           
  6575                           ;OverLoad_B1.c: 116: if (Load.Count < 2) {
  6576  012F  3002               	movlw	2
  6577  0130  0263               	subwf	(_Load^(0+128)+25),w
  6578  0131  1803               	skipnc
  6579  0132  2992               	goto	l836
  6580                           
  6581                           ;OverLoad_B1.c: 117: Load.Count++;
  6582  0133  3001               	movlw	1
  6583  0134  1283               	bcf	3,5	;RP0=0, select bank0
  6584  0135  1303               	bcf	3,6	;RP1=0, select bank0
  6585  0136  00DE               	movwf	??_Load_Main
  6586  0137  085E               	movf	??_Load_Main,w
  6587  0138  1683               	bsf	3,5	;RP0=1, select bank1
  6588  0139  1303               	bcf	3,6	;RP1=0, select bank1
  6589  013A  07E3               	addwf	(_Load^(0+128)+25),f
  6590                           
  6591                           ;OverLoad_B1.c: 122: Load_RunStatus = getLight_Load_Status();
  6592  013B  158A  210C  118A   	fcall	_getLight_Load_Status
  6593  013E  1283               	bcf	3,5	;RP0=0, select bank0
  6594  013F  1303               	bcf	3,6	;RP1=0, select bank0
  6595  0140  00DE               	movwf	??_Load_Main
  6596  0141  085E               	movf	??_Load_Main,w
  6597  0142  00E4               	movwf	Load_Main@Load_RunStatus
  6598                           
  6599                           ;OverLoad_B1.c: 124: LightsCount = getMain_Lights_Count();
  6600  0143  158A  2192  118A   	fcall	_getMain_Lights_Count
  6601  0146  1283               	bcf	3,5	;RP0=0, select bank0
  6602  0147  1303               	bcf	3,6	;RP1=0, select bank0
  6603  0148  00DE               	movwf	??_Load_Main
  6604  0149  085E               	movf	??_Load_Main,w
  6605  014A  00E5               	movwf	Load_Main@LightsCount
  6606                           
  6607                           ;OverLoad_B1.c: 126: if (Load.Count == 1) {
  6608  014B  1683               	bsf	3,5	;RP0=1, select bank1
  6609  014C  1303               	bcf	3,6	;RP1=0, select bank1
  6610  014D  0863               	movf	(_Load^(0+128)+25),w
  6611  014E  3A01               	xorlw	1
  6612  014F  1D03               	skipz
  6613  0150  2953               	goto	l5869
  6614                           
  6615                           ;OverLoad_B1.c: 128: Load.JudgeValue = (int)(20*2.3);
  6616  0151  302E               	movlw	46
  6617  0152  2960               	goto	L11
  6618  0153                     l5869:	
  6619                           ;OverLoad_B1.c: 129: } else if (Load.Count == 2) {
  6620                           
  6621  0153  0863               	movf	(_Load^(0+128)+25),w
  6622  0154  3A02               	xorlw	2
  6623  0155  1D03               	skipz
  6624  0156  2992               	goto	l836
  6625                           
  6626                           ;OverLoad_B1.c: 130: if (LightsCount == 1) {
  6627  0157  1283               	bcf	3,5	;RP0=0, select bank0
  6628  0158  1303               	bcf	3,6	;RP1=0, select bank0
  6629  0159  0865               	movf	Load_Main@LightsCount,w
  6630  015A  3A01               	xorlw	1
  6631  015B  1D03               	skipz
  6632  015C  2963               	goto	l5875
  6633                           
  6634                           ;OverLoad_B1.c: 131: Load.JudgeValue = (int)(4.5*2.3);
  6635  015D  300A               	movlw	10
  6636  015E  1683               	bsf	3,5	;RP0=1, select bank1
  6637  015F  1303               	bcf	3,6	;RP1=0, select bank1
  6638  0160                     L11:	
  6639  0160  00E1               	movwf	(_Load^(0+128)+23)
  6640  0161  3000               	movlw	0
  6641  0162  2991               	goto	L12
  6642  0163                     l5875:	
  6643                           ;OverLoad_B1.c: 132: } else {
  6644                           
  6645                           
  6646                           ;OverLoad_B1.c: 133: if (Load_RunStatus == 0) {
  6647  0163  1283               	bcf	3,5	;RP0=0, select bank0
  6648  0164  08E4               	movf	Load_Main@Load_RunStatus,f
  6649  0165  1D03               	skipz
  6650  0166  2984               	goto	l5879
  6651                           
  6652                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(4.5*2.3) * LightsCount;
  6653  0167  0865               	movf	Load_Main@LightsCount,w
  6654  0168  00DE               	movwf	??_Load_Main
  6655  0169  01DF               	clrf	??_Load_Main+1
  6656  016A  085E               	movf	??_Load_Main,w
  6657  016B  00D7               	movwf	___wmul@multiplier
  6658  016C  085F               	movf	??_Load_Main+1,w
  6659  016D  00D8               	movwf	___wmul@multiplier+1
  6660  016E  300A               	movlw	10
  6661  016F  00D9               	movwf	___wmul@multiplicand
  6662  0170  3000               	movlw	0
  6663  0171  00DA               	movwf	___wmul@multiplicand+1
  6664  0172  158A  23A5  118A   	fcall	___wmul
  6665  0175  1283               	bcf	3,5	;RP0=0, select bank0
  6666  0176  1303               	bcf	3,6	;RP1=0, select bank0
  6667  0177  0858               	movf	?___wmul+1,w
  6668  0178  1683               	bsf	3,5	;RP0=1, select bank1
  6669  0179  1303               	bcf	3,6	;RP1=0, select bank1
  6670  017A  01E2               	clrf	((_Load+1)^(0+128)+23)
  6671  017B  07E2               	addwf	((_Load+1)^(0+128)+23),f
  6672  017C  1283               	bcf	3,5	;RP0=0, select bank0
  6673  017D  1303               	bcf	3,6	;RP1=0, select bank0
  6674  017E  0857               	movf	?___wmul,w
  6675  017F  1683               	bsf	3,5	;RP0=1, select bank1
  6676  0180  1303               	bcf	3,6	;RP1=0, select bank1
  6677  0181  01E1               	clrf	(_Load^(0+128)+23)
  6678  0182  07E1               	addwf	(_Load^(0+128)+23),f
  6679                           
  6680                           ;OverLoad_B1.c: 135: } else if (Load_RunStatus == 1) {
  6681  0183  2992               	goto	l836
  6682  0184                     l5879:	
  6683  0184  1283               	bcf	3,5	;RP0=0, select bank0
  6684  0185  0864               	movf	Load_Main@Load_RunStatus,w
  6685  0186  3A01               	xorlw	1
  6686  0187  1D03               	skipz
  6687  0188  2992               	goto	l836
  6688                           
  6689                           ;OverLoad_B1.c: 136: Load.JudgeValue = (int)(4.5*2.3) + Load.TotalLoad;
  6690  0189  1683               	bsf	3,5	;RP0=1, select bank1
  6691  018A  1303               	bcf	3,6	;RP1=0, select bank1
  6692  018B  0853               	movf	(_Load^(0+128)+9),w
  6693  018C  3E0A               	addlw	10
  6694  018D  00E1               	movwf	(_Load^(0+128)+23)
  6695  018E  3000               	movlw	0
  6696  018F  1803               	skipnc
  6697  0190  3001               	movlw	1
  6698  0191                     L12:	
  6699  0191  00E2               	movwf	(_Load^(0+128)+24)
  6700  0192                     l836:	
  6701                           
  6702                           ;OverLoad_B1.c: 137: }
  6703                           ;OverLoad_B1.c: 138: }
  6704                           ;OverLoad_B1.c: 139: }
  6705                           ;OverLoad_B1.c: 140: }
  6706                           ;OverLoad_B1.c: 141: }
  6707                           ;OverLoad_B1.c: 143: if (Load.AD >= Load.JudgeValue) {
  6708  0192  1683               	bsf	3,5	;RP0=1, select bank1
  6709  0193  1303               	bcf	3,6	;RP1=0, select bank1
  6710  0194  085E               	movf	(_Load^(0+128)+20),w
  6711  0195  1283               	bcf	3,5	;RP0=0, select bank0
  6712  0196  1303               	bcf	3,6	;RP1=0, select bank0
  6713  0197  00DE               	movwf	??_Load_Main
  6714  0198  01DF               	clrf	??_Load_Main+1
  6715  0199  1683               	bsf	3,5	;RP0=1, select bank1
  6716  019A  1303               	bcf	3,6	;RP1=0, select bank1
  6717  019B  0862               	movf	((_Load+1)^(0+128)+23),w
  6718  019C  1283               	bcf	3,5	;RP0=0, select bank0
  6719  019D  1303               	bcf	3,6	;RP1=0, select bank0
  6720  019E  025F               	subwf	??_Load_Main+1,w
  6721  019F  1D03               	skipz
  6722  01A0  29A7               	goto	u7415
  6723  01A1  1683               	bsf	3,5	;RP0=1, select bank1
  6724  01A2  1303               	bcf	3,6	;RP1=0, select bank1
  6725  01A3  0861               	movf	(_Load^(0+128)+23),w
  6726  01A4  1283               	bcf	3,5	;RP0=0, select bank0
  6727  01A5  1303               	bcf	3,6	;RP1=0, select bank0
  6728  01A6  025E               	subwf	??_Load_Main,w
  6729  01A7                     u7415:	
  6730  01A7  1C03               	skipc
  6731  01A8  29C8               	goto	l5897
  6732                           
  6733                           ;OverLoad_B1.c: 144: ErrorCountValue = LightsCount == 1 ? 2 : 3;
  6734  01A9  0865               	movf	Load_Main@LightsCount,w
  6735  01AA  3A01               	xorlw	1
  6736  01AB  1903               	skipnz
  6737  01AC  29AF               	goto	l5887
  6738  01AD  3003               	movlw	3
  6739  01AE  29B0               	goto	L13
  6740  01AF                     l5887:	
  6741  01AF  3002               	movlw	2
  6742  01B0                     L13:	
  6743  01B0  00E1               	movwf	_Load_Main$2716
  6744  01B1  3000               	movlw	0
  6745  01B2  00E2               	movwf	_Load_Main$2716+1
  6746  01B3  0861               	movf	_Load_Main$2716,w
  6747  01B4  00DE               	movwf	??_Load_Main
  6748  01B5  085E               	movf	??_Load_Main,w
  6749  01B6  00E3               	movwf	Load_Main@ErrorCountValue
  6750                           
  6751                           ;OverLoad_B1.c: 145: Load.ErrorCount++;
  6752  01B7  3001               	movlw	1
  6753  01B8  00DE               	movwf	??_Load_Main
  6754  01B9  085E               	movf	??_Load_Main,w
  6755  01BA  1683               	bsf	3,5	;RP0=1, select bank1
  6756  01BB  1303               	bcf	3,6	;RP1=0, select bank1
  6757  01BC  07E4               	addwf	(_Load^(0+128)+26),f
  6758                           
  6759                           ;OverLoad_B1.c: 146: if (Load.ErrorCount > ErrorCountValue) {
  6760  01BD  0864               	movf	(_Load^(0+128)+26),w
  6761  01BE  1283               	bcf	3,5	;RP0=0, select bank0
  6762  01BF  1303               	bcf	3,6	;RP1=0, select bank0
  6763  01C0  0263               	subwf	Load_Main@ErrorCountValue,w
  6764  01C1  1803               	skipnc
  6765  01C2  0008               	return
  6766                           
  6767                           ;OverLoad_B1.c: 147: Load.ErrorCount = 0;
  6768  01C3  1683               	bsf	3,5	;RP0=1, select bank1
  6769  01C4  1303               	bcf	3,6	;RP1=0, select bank1
  6770  01C5  01E4               	clrf	(_Load^(0+128)+26)
  6771                           
  6772                           ;OverLoad_B1.c: 148: Load.ERROR = 1;
  6773  01C6  16CA               	bsf	_Load^(0+128),5
  6774                           
  6775                           ;OverLoad_B1.c: 170: }
  6776                           ;OverLoad_B1.c: 171: } else {
  6777  01C7  0008               	return
  6778  01C8                     l5897:	
  6779                           
  6780                           ;OverLoad_B1.c: 172: Load.ErrorCount = 0;
  6781  01C8  1683               	bsf	3,5	;RP0=1, select bank1
  6782  01C9  1303               	bcf	3,6	;RP1=0, select bank1
  6783  01CA  01E4               	clrf	(_Load^(0+128)+26)
  6784                           
  6785                           ;OverLoad_B1.c: 173: if (Load.Run == 1) {
  6786  01CB  1DCA               	btfss	_Load^(0+128),3
  6787  01CC  0008               	return
  6788                           
  6789                           ;OverLoad_B1.c: 174: Load.SafeCount++;
  6790  01CD  3001               	movlw	1
  6791  01CE  1283               	bcf	3,5	;RP0=0, select bank0
  6792  01CF  1303               	bcf	3,6	;RP1=0, select bank0
  6793  01D0  00DE               	movwf	??_Load_Main
  6794  01D1  085E               	movf	??_Load_Main,w
  6795  01D2  1683               	bsf	3,5	;RP0=1, select bank1
  6796  01D3  1303               	bcf	3,6	;RP1=0, select bank1
  6797  01D4  07E5               	addwf	(_Load^(0+128)+27),f
  6798                           
  6799                           ;OverLoad_B1.c: 175: if (Load.SafeCount >= 3) {
  6800  01D5  3003               	movlw	3
  6801  01D6  0265               	subwf	(_Load^(0+128)+27),w
  6802  01D7  1C03               	skipc
  6803  01D8  0008               	return
  6804                           
  6805                           ;OverLoad_B1.c: 176: Load.SafeCount = 0;
  6806  01D9  01E5               	clrf	(_Load^(0+128)+27)
  6807                           
  6808                           ;OverLoad_B1.c: 177: Load.OK = 1;
  6809  01DA  17CA               	bsf	_Load^(0+128),7
  6810                           
  6811                           ;OverLoad_B1.c: 178: Load.Run = 0;
  6812  01DB  11CA               	bcf	_Load^(0+128),3
  6813                           
  6814                           ;OverLoad_B1.c: 179: Load.Count = 0;
  6815  01DC  01E3               	clrf	(_Load^(0+128)+25)
  6816                           
  6817                           ;OverLoad_B1.c: 180: Load.TotalLoad = Load.AD;
  6818  01DD  085E               	movf	(_Load^(0+128)+20),w
  6819  01DE  1283               	bcf	3,5	;RP0=0, select bank0
  6820  01DF  1303               	bcf	3,6	;RP1=0, select bank0
  6821  01E0  00DE               	movwf	??_Load_Main
  6822  01E1  085E               	movf	??_Load_Main,w
  6823  01E2  1683               	bsf	3,5	;RP0=1, select bank1
  6824  01E3  1303               	bcf	3,6	;RP1=0, select bank1
  6825  01E4  00D3               	movwf	(_Load^(0+128)+9)
  6826                           
  6827                           ;OverLoad_B1.c: 184: }
  6828                           ;OverLoad_B1.c: 185: }
  6829                           ;OverLoad_B1.c: 208: }
  6830                           ;OverLoad_B1.c: 209: }
  6831                           ;OverLoad_B1.c: 210: }
  6832                           ;OverLoad_B1.c: 211: } else {
  6833  01E5  0008               	return
  6834  01E6                     l831:	
  6835                           
  6836                           ;OverLoad_B1.c: 212: Load.ADtoGO = 1;
  6837  01E6  164A               	bsf	_Load^(0+128),4
  6838                           
  6839                           ;OverLoad_B1.c: 213: }
  6840                           ;OverLoad_B1.c: 214: } else {
  6841  01E7  0008               	return
  6842  01E8                     l830:	
  6843                           
  6844                           ;OverLoad_B1.c: 216: if (Load.LightsON == 1) {
  6845  01E8  1D4A               	btfss	_Load^(0+128),2
  6846  01E9  29FC               	goto	l5933
  6847                           
  6848                           ;OverLoad_B1.c: 217: Load.LightsON = 0;
  6849  01EA  114A               	bcf	_Load^(0+128),2
  6850                           
  6851                           ;OverLoad_B1.c: 219: Load.ADtoGO = 0;
  6852  01EB  124A               	bcf	_Load^(0+128),4
  6853                           
  6854                           ;OverLoad_B1.c: 220: Load.Time = 0;
  6855  01EC  01CB               	clrf	(_Load^(0+128)+1)
  6856  01ED  01CC               	clrf	((_Load+1)^(0+128)+1)
  6857                           
  6858                           ;OverLoad_B1.c: 221: setLoad_AH_AL_Restore();
  6859  01EE  158A  227C  118A   	fcall	_setLoad_AH_AL_Restore
  6860                           
  6861                           ;OverLoad_B1.c: 223: Load.ErrorCount = 0;
  6862  01F1  1683               	bsf	3,5	;RP0=1, select bank1
  6863  01F2  1303               	bcf	3,6	;RP1=0, select bank1
  6864  01F3  01E4               	clrf	(_Load^(0+128)+26)
  6865                           
  6866                           ;OverLoad_B1.c: 224: Load.SafeCount = 0;
  6867  01F4  01E5               	clrf	(_Load^(0+128)+27)
  6868                           
  6869                           ;OverLoad_B1.c: 226: Load.ADH = 0;
  6870  01F5  01CF               	clrf	(_Load^(0+128)+5)
  6871  01F6  01D0               	clrf	((_Load+1)^(0+128)+5)
  6872                           
  6873                           ;OverLoad_B1.c: 227: Load.ADL = 0;
  6874  01F7  01D1               	clrf	(_Load^(0+128)+7)
  6875  01F8  01D2               	clrf	((_Load+1)^(0+128)+7)
  6876                           
  6877                           ;OverLoad_B1.c: 233: Load.Run = 0;
  6878  01F9  11CA               	bcf	_Load^(0+128),3
  6879                           
  6880                           ;OverLoad_B1.c: 234: Load.Count = 0;
  6881  01FA  01E3               	clrf	(_Load^(0+128)+25)
  6882                           
  6883                           ;OverLoad_B1.c: 235: Load.OK = 0;
  6884  01FB  13CA               	bcf	_Load^(0+128),7
  6885  01FC                     l5933:	
  6886                           
  6887                           ;OverLoad_B1.c: 257: }
  6888                           ;OverLoad_B1.c: 258: if (Load.ERROR == 1) {
  6889  01FC  1ECA               	btfss	_Load^(0+128),5
  6890  01FD  0008               	return
  6891                           
  6892                           ;OverLoad_B1.c: 259: Load.ErrorTime++;
  6893  01FE  3001               	movlw	1
  6894  01FF  07CD               	addwf	(_Load^(0+128)+3),f
  6895  0200  1803               	skipnc
  6896  0201  0ACE               	incf	((_Load+1)^(0+128)+3),f
  6897  0202  3000               	movlw	0
  6898  0203  07CE               	addwf	((_Load+1)^(0+128)+3),f
  6899                           
  6900                           ;OverLoad_B1.c: 260: if (Load.ErrorTime >= (10000 / 20)) {
  6901  0204  3001               	movlw	1
  6902  0205  024E               	subwf	((_Load+1)^(0+128)+3),w
  6903  0206  30F4               	movlw	244
  6904  0207  1903               	skipnz
  6905  0208  024D               	subwf	(_Load^(0+128)+3),w
  6906  0209  1C03               	skipc
  6907  020A  0008               	return
  6908                           
  6909                           ;OverLoad_B1.c: 261: Load.ErrorTime = 0;
  6910  020B  01CD               	clrf	(_Load^(0+128)+3)
  6911  020C  01CE               	clrf	((_Load+1)^(0+128)+3)
  6912                           
  6913                           ;OverLoad_B1.c: 262: Load.ERROR = 0;
  6914  020D  12CA               	bcf	_Load^(0+128),5
  6915                           
  6916                           ;OverLoad_B1.c: 263: }
  6917                           ;OverLoad_B1.c: 264: }
  6918                           ;OverLoad_B1.c: 265: }
  6919                           ;OverLoad_B1.c: 266: } else {
  6920  020E  0008               	return
  6921  020F                     l820:	
  6922                           
  6923                           ;OverLoad_B1.c: 267: if (myMain.PowerON == 1) {
  6924  020F  1283               	bcf	3,5	;RP0=0, select bank0
  6925  0210  1303               	bcf	3,6	;RP1=0, select bank0
  6926  0211  1C31               	btfss	_myMain,0
  6927  0212  0008               	return
  6928                           
  6929                           ;OverLoad_B1.c: 268: Load.Enable = 1;
  6930  0213  1683               	bsf	3,5	;RP0=1, select bank1
  6931  0214  1303               	bcf	3,6	;RP1=0, select bank1
  6932  0215  144A               	bsf	_Load^(0+128),0
  6933  0216  0008               	return
  6934  0217                     __end_of_Load_Main:	
  6935                           
  6936                           	psect	text36
  6937  0992                     __ptext36:	
  6938 ;; *************** function _getMain_Lights_Count *****************
  6939 ;; Defined at:
  6940 ;;		line 459 in file "../src/Main_B1.c"
  6941 ;; Parameters:    Size  Location     Type
  6942 ;;		None
  6943 ;; Auto vars:     Size  Location     Type
  6944 ;;  status2         1    2[BANK0 ] unsigned char 
  6945 ;;  status1         1    1[BANK0 ] unsigned char 
  6946 ;;  count           1    0[BANK0 ] unsigned char 
  6947 ;; Return value:  Size  Location     Type
  6948 ;;                  1    wreg      unsigned char 
  6949 ;; Registers used:
  6950 ;;		wreg, status,2, status,0
  6951 ;; Tracked objects:
  6952 ;;		On entry : 0/0
  6953 ;;		On exit  : 0/0
  6954 ;;		Unchanged: 0/0
  6955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6956 ;;      Params:         0       0       0       0
  6957 ;;      Locals:         0       3       0       0
  6958 ;;      Temps:          0       0       0       0
  6959 ;;      Totals:         0       3       0       0
  6960 ;;Total ram usage:        3 bytes
  6961 ;; Hardware stack levels used:    1
  6962 ;; Hardware stack levels required when called:    2
  6963 ;; This function calls:
  6964 ;;		Nothing
  6965 ;; This function is called by:
  6966 ;;		_Load_Main
  6967 ;; This function uses a non-reentrant model
  6968 ;;
  6969                           
  6970                           
  6971                           ;psect for function _getMain_Lights_Count
  6972  0992                     _getMain_Lights_Count:	
  6973                           
  6974                           ;Main_B1.c: 460: char count = 0;
  6975                           
  6976                           ;incstack = 0
  6977                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
  6978  0992  1283               	bcf	3,5	;RP0=0, select bank0
  6979  0993  1303               	bcf	3,6	;RP1=0, select bank0
  6980  0994  01D7               	clrf	getMain_Lights_Count@count
  6981                           
  6982                           ;Main_B1.c: 476: char status1 = Lights1.Status == 1 ? 1 : 0;
  6983  0995  3000               	movlw	0
  6984  0996  1949               	btfsc	_Lights1,2
  6985  0997  3001               	movlw	1
  6986  0998  00D8               	movwf	getMain_Lights_Count@status1
  6987                           
  6988                           ;Main_B1.c: 479: char status2 = Lights2.Status == 1 ? 1 : 0;
  6989  0999  3000               	movlw	0
  6990  099A  194E               	btfsc	_Lights2,2
  6991  099B  3001               	movlw	1
  6992  099C  00D9               	movwf	getMain_Lights_Count@status2
  6993                           
  6994                           ;Main_B1.c: 490: return count = (status1 + status2);
  6995  099D  0859               	movf	getMain_Lights_Count@status2,w
  6996  099E  0758               	addwf	getMain_Lights_Count@status1,w
  6997  099F  00D7               	movwf	getMain_Lights_Count@count
  6998  09A0  0008               	return
  6999  09A1                     __end_of_getMain_Lights_Count:	
  7000                           
  7001                           	psect	text37
  7002  090C                     __ptext37:	
  7003 ;; *************** function _getLight_Load_Status *****************
  7004 ;; Defined at:
  7005 ;;		line 405 in file "../src/TriacRelay_B1.c"
  7006 ;; Parameters:    Size  Location     Type
  7007 ;;		None
  7008 ;; Auto vars:     Size  Location     Type
  7009 ;;  loadstatus      1    4[COMMON] unsigned char 
  7010 ;; Return value:  Size  Location     Type
  7011 ;;                  1    wreg      unsigned char 
  7012 ;; Registers used:
  7013 ;;		wreg, status,2
  7014 ;; Tracked objects:
  7015 ;;		On entry : 0/0
  7016 ;;		On exit  : 0/0
  7017 ;;		Unchanged: 0/0
  7018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7019 ;;      Params:         0       0       0       0
  7020 ;;      Locals:         1       0       0       0
  7021 ;;      Temps:          0       0       0       0
  7022 ;;      Totals:         1       0       0       0
  7023 ;;Total ram usage:        1 bytes
  7024 ;; Hardware stack levels used:    1
  7025 ;; Hardware stack levels required when called:    2
  7026 ;; This function calls:
  7027 ;;		Nothing
  7028 ;; This function is called by:
  7029 ;;		_Load_Main
  7030 ;; This function uses a non-reentrant model
  7031 ;;
  7032                           
  7033                           
  7034                           ;psect for function _getLight_Load_Status
  7035  090C                     _getLight_Load_Status:	
  7036                           
  7037                           ;TriacRelay_B1.c: 406: char loadstatus = Light.Load_Status == 1 ? 1 : 0;
  7038                           
  7039                           ;incstack = 0
  7040                           ; Regs used in _getLight_Load_Status: [wreg+status,2]
  7041  090C  3000               	movlw	0
  7042  090D  18F7               	btfsc	_Light,1
  7043  090E  3001               	movlw	1
  7044  090F  00F4               	movwf	getLight_Load_Status@loadstatus
  7045                           
  7046                           ;TriacRelay_B1.c: 407: return loadstatus;
  7047  0910  0874               	movf	getLight_Load_Status@loadstatus,w
  7048  0911  0008               	return
  7049  0912                     __end_of_getLight_Load_Status:	
  7050                           
  7051                           	psect	text38
  7052  0906                     __ptext38:	
  7053 ;; *************** function _getLight_LoadGO *****************
  7054 ;; Defined at:
  7055 ;;		line 400 in file "../src/TriacRelay_B1.c"
  7056 ;; Parameters:    Size  Location     Type
  7057 ;;		None
  7058 ;; Auto vars:     Size  Location     Type
  7059 ;;  loadgo          1    4[COMMON] unsigned char 
  7060 ;; Return value:  Size  Location     Type
  7061 ;;                  1    wreg      unsigned char 
  7062 ;; Registers used:
  7063 ;;		wreg, status,2
  7064 ;; Tracked objects:
  7065 ;;		On entry : 0/0
  7066 ;;		On exit  : 0/0
  7067 ;;		Unchanged: 0/0
  7068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7069 ;;      Params:         0       0       0       0
  7070 ;;      Locals:         1       0       0       0
  7071 ;;      Temps:          0       0       0       0
  7072 ;;      Totals:         1       0       0       0
  7073 ;;Total ram usage:        1 bytes
  7074 ;; Hardware stack levels used:    1
  7075 ;; Hardware stack levels required when called:    2
  7076 ;; This function calls:
  7077 ;;		Nothing
  7078 ;; This function is called by:
  7079 ;;		_Load_Main
  7080 ;; This function uses a non-reentrant model
  7081 ;;
  7082                           
  7083                           
  7084                           ;psect for function _getLight_LoadGO
  7085  0906                     _getLight_LoadGO:	
  7086                           
  7087                           ;TriacRelay_B1.c: 401: char loadgo = Light.LoadGO == 1 ? 1 : 0;
  7088                           
  7089                           ;incstack = 0
  7090                           ; Regs used in _getLight_LoadGO: [wreg+status,2]
  7091  0906  3000               	movlw	0
  7092  0907  1877               	btfsc	_Light,0
  7093  0908  3001               	movlw	1
  7094  0909  00F4               	movwf	getLight_LoadGO@loadgo
  7095                           
  7096                           ;TriacRelay_B1.c: 402: return loadgo;
  7097  090A  0874               	movf	getLight_LoadGO@loadgo,w
  7098  090B  0008               	return
  7099  090C                     __end_of_getLight_LoadGO:	
  7100                           
  7101                           	psect	text39
  7102  0BA5                     __ptext39:	
  7103 ;; *************** function ___wmul *****************
  7104 ;; Defined at:
  7105 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
  7106 ;; Parameters:    Size  Location     Type
  7107 ;;  multiplier      2    0[BANK0 ] unsigned int 
  7108 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  7109 ;; Auto vars:     Size  Location     Type
  7110 ;;  product         2    4[COMMON] unsigned int 
  7111 ;; Return value:  Size  Location     Type
  7112 ;;                  2    0[BANK0 ] unsigned int 
  7113 ;; Registers used:
  7114 ;;		wreg, status,2, status,0
  7115 ;; Tracked objects:
  7116 ;;		On entry : 0/0
  7117 ;;		On exit  : 0/0
  7118 ;;		Unchanged: 0/0
  7119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7120 ;;      Params:         0       4       0       0
  7121 ;;      Locals:         2       0       0       0
  7122 ;;      Temps:          0       0       0       0
  7123 ;;      Totals:         2       4       0       0
  7124 ;;Total ram usage:        6 bytes
  7125 ;; Hardware stack levels used:    1
  7126 ;; Hardware stack levels required when called:    2
  7127 ;; This function calls:
  7128 ;;		Nothing
  7129 ;; This function is called by:
  7130 ;;		_Load_Main
  7131 ;; This function uses a non-reentrant model
  7132 ;;
  7133                           
  7134                           
  7135                           ;psect for function ___wmul
  7136  0BA5                     ___wmul:	
  7137                           
  7138                           ;incstack = 0
  7139                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  7140  0BA5  01F4               	clrf	___wmul@product
  7141  0BA6  01F5               	clrf	___wmul@product+1
  7142  0BA7                     l5561:	
  7143  0BA7  1283               	bcf	3,5	;RP0=0, select bank0
  7144  0BA8  1303               	bcf	3,6	;RP1=0, select bank0
  7145  0BA9  1C57               	btfss	___wmul@multiplier,0
  7146  0BAA  2BB1               	goto	l1694
  7147  0BAB  0859               	movf	___wmul@multiplicand,w
  7148  0BAC  07F4               	addwf	___wmul@product,f
  7149  0BAD  1803               	skipnc
  7150  0BAE  0AF5               	incf	___wmul@product+1,f
  7151  0BAF  085A               	movf	___wmul@multiplicand+1,w
  7152  0BB0  07F5               	addwf	___wmul@product+1,f
  7153  0BB1                     l1694:	
  7154  0BB1  3001               	movlw	1
  7155  0BB2                     u6725:	
  7156  0BB2  1003               	clrc
  7157  0BB3  0DD9               	rlf	___wmul@multiplicand,f
  7158  0BB4  0DDA               	rlf	___wmul@multiplicand+1,f
  7159  0BB5  3EFF               	addlw	-1
  7160  0BB6  1D03               	skipz
  7161  0BB7  2BB2               	goto	u6725
  7162  0BB8  3001               	movlw	1
  7163  0BB9                     u6735:	
  7164  0BB9  1003               	clrc
  7165  0BBA  0CD8               	rrf	___wmul@multiplier+1,f
  7166  0BBB  0CD7               	rrf	___wmul@multiplier,f
  7167  0BBC  3EFF               	addlw	-1
  7168  0BBD  1D03               	skipz
  7169  0BBE  2BB9               	goto	u6735
  7170  0BBF  0858               	movf	___wmul@multiplier+1,w
  7171  0BC0  0457               	iorwf	___wmul@multiplier,w
  7172  0BC1  1D03               	skipz
  7173  0BC2  2BA7               	goto	l5561
  7174  0BC3  0875               	movf	___wmul@product+1,w
  7175  0BC4  01D8               	clrf	?___wmul+1
  7176  0BC5  07D8               	addwf	?___wmul+1,f
  7177  0BC6  0874               	movf	___wmul@product,w
  7178  0BC7  01D7               	clrf	?___wmul
  7179  0BC8  07D7               	addwf	?___wmul,f
  7180  0BC9  0008               	return
  7181  0BCA                     __end_of___wmul:	
  7182                           
  7183                           	psect	text40
  7184  0D3D                     __ptext40:	
  7185 ;; *************** function ___lwdiv *****************
  7186 ;; Defined at:
  7187 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
  7188 ;; Parameters:    Size  Location     Type
  7189 ;;  divisor         2    0[BANK0 ] unsigned int 
  7190 ;;  dividend        2    2[BANK0 ] unsigned int 
  7191 ;; Auto vars:     Size  Location     Type
  7192 ;;  quotient        2    5[BANK0 ] unsigned int 
  7193 ;;  counter         1    4[BANK0 ] unsigned char 
  7194 ;; Return value:  Size  Location     Type
  7195 ;;                  2    0[BANK0 ] unsigned int 
  7196 ;; Registers used:
  7197 ;;		wreg, status,2, status,0
  7198 ;; Tracked objects:
  7199 ;;		On entry : 0/0
  7200 ;;		On exit  : 0/0
  7201 ;;		Unchanged: 0/0
  7202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7203 ;;      Params:         0       4       0       0
  7204 ;;      Locals:         0       3       0       0
  7205 ;;      Temps:          1       0       0       0
  7206 ;;      Totals:         1       7       0       0
  7207 ;;Total ram usage:        8 bytes
  7208 ;; Hardware stack levels used:    1
  7209 ;; Hardware stack levels required when called:    2
  7210 ;; This function calls:
  7211 ;;		Nothing
  7212 ;; This function is called by:
  7213 ;;		_Load_Main
  7214 ;;		_getPIR_AD
  7215 ;; This function uses a non-reentrant model
  7216 ;;
  7217                           
  7218                           
  7219                           ;psect for function ___lwdiv
  7220  0D3D                     ___lwdiv:	
  7221                           
  7222                           ;incstack = 0
  7223                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  7224  0D3D  1283               	bcf	3,5	;RP0=0, select bank0
  7225  0D3E  1303               	bcf	3,6	;RP1=0, select bank0
  7226  0D3F  01DC               	clrf	___lwdiv@quotient
  7227  0D40  01DD               	clrf	___lwdiv@quotient+1
  7228  0D41  0858               	movf	___lwdiv@divisor+1,w
  7229  0D42  0457               	iorwf	___lwdiv@divisor,w
  7230  0D43  1903               	skipnz
  7231  0D44  2D76               	goto	l5593
  7232  0D45  01DB               	clrf	___lwdiv@counter
  7233  0D46  0ADB               	incf	___lwdiv@counter,f
  7234  0D47                     l5581:	
  7235  0D47  1BD8               	btfsc	___lwdiv@divisor+1,7
  7236  0D48  2D55               	goto	l5583
  7237  0D49  3001               	movlw	1
  7238  0D4A                     u6765:	
  7239  0D4A  1003               	clrc
  7240  0D4B  0DD7               	rlf	___lwdiv@divisor,f
  7241  0D4C  0DD8               	rlf	___lwdiv@divisor+1,f
  7242  0D4D  3EFF               	addlw	-1
  7243  0D4E  1D03               	skipz
  7244  0D4F  2D4A               	goto	u6765
  7245  0D50  3001               	movlw	1
  7246  0D51  00F4               	movwf	??___lwdiv
  7247  0D52  0874               	movf	??___lwdiv,w
  7248  0D53  07DB               	addwf	___lwdiv@counter,f
  7249  0D54  2D47               	goto	l5581
  7250  0D55                     l5583:	
  7251  0D55  3001               	movlw	1
  7252  0D56                     u6785:	
  7253  0D56  1003               	clrc
  7254  0D57  0DDC               	rlf	___lwdiv@quotient,f
  7255  0D58  0DDD               	rlf	___lwdiv@quotient+1,f
  7256  0D59  3EFF               	addlw	-1
  7257  0D5A  1D03               	skipz
  7258  0D5B  2D56               	goto	u6785
  7259  0D5C  0858               	movf	___lwdiv@divisor+1,w
  7260  0D5D  025A               	subwf	___lwdiv@dividend+1,w
  7261  0D5E  1D03               	skipz
  7262  0D5F  2D62               	goto	u6795
  7263  0D60  0857               	movf	___lwdiv@divisor,w
  7264  0D61  0259               	subwf	___lwdiv@dividend,w
  7265  0D62                     u6795:	
  7266  0D62  1C03               	skipc
  7267  0D63  2D6B               	goto	l5589
  7268  0D64  0857               	movf	___lwdiv@divisor,w
  7269  0D65  02D9               	subwf	___lwdiv@dividend,f
  7270  0D66  0858               	movf	___lwdiv@divisor+1,w
  7271  0D67  1C03               	skipc
  7272  0D68  03DA               	decf	___lwdiv@dividend+1,f
  7273  0D69  02DA               	subwf	___lwdiv@dividend+1,f
  7274  0D6A  145C               	bsf	___lwdiv@quotient,0
  7275  0D6B                     l5589:	
  7276  0D6B  3001               	movlw	1
  7277  0D6C                     u6805:	
  7278  0D6C  1003               	clrc
  7279  0D6D  0CD8               	rrf	___lwdiv@divisor+1,f
  7280  0D6E  0CD7               	rrf	___lwdiv@divisor,f
  7281  0D6F  3EFF               	addlw	-1
  7282  0D70  1D03               	skipz
  7283  0D71  2D6C               	goto	u6805
  7284  0D72  3001               	movlw	1
  7285  0D73  02DB               	subwf	___lwdiv@counter,f
  7286  0D74  1D03               	btfss	3,2
  7287  0D75  2D55               	goto	l5583
  7288  0D76                     l5593:	
  7289  0D76  085D               	movf	___lwdiv@quotient+1,w
  7290  0D77  01D8               	clrf	?___lwdiv+1
  7291  0D78  07D8               	addwf	?___lwdiv+1,f
  7292  0D79  085C               	movf	___lwdiv@quotient,w
  7293  0D7A  01D7               	clrf	?___lwdiv
  7294  0D7B  07D7               	addwf	?___lwdiv,f
  7295  0D7C  0008               	return
  7296  0D7D                     __end_of___lwdiv:	
  7297                           
  7298                           	psect	text41
  7299  08E6                     __ptext41:	
  7300 ;; *************** function _Load_Initialization *****************
  7301 ;; Defined at:
  7302 ;;		line 9 in file "../src/OverLoad_B1.c"
  7303 ;; Parameters:    Size  Location     Type
  7304 ;;		None
  7305 ;; Auto vars:     Size  Location     Type
  7306 ;;		None
  7307 ;; Return value:  Size  Location     Type
  7308 ;;		None               void
  7309 ;; Registers used:
  7310 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7311 ;; Tracked objects:
  7312 ;;		On entry : 0/0
  7313 ;;		On exit  : 0/0
  7314 ;;		Unchanged: 0/0
  7315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7316 ;;      Params:         0       0       0       0
  7317 ;;      Locals:         0       0       0       0
  7318 ;;      Temps:          0       0       0       0
  7319 ;;      Totals:         0       0       0       0
  7320 ;;Total ram usage:        0 bytes
  7321 ;; Hardware stack levels used:    1
  7322 ;; Hardware stack levels required when called:    3
  7323 ;; This function calls:
  7324 ;;		_setLoad_AH_AL_Restore
  7325 ;; This function is called by:
  7326 ;;		_main
  7327 ;; This function uses a non-reentrant model
  7328 ;;
  7329                           
  7330                           
  7331                           ;psect for function _Load_Initialization
  7332  08E6                     _Load_Initialization:	
  7333                           
  7334                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
  7335                           
  7336                           ;incstack = 0
  7337                           ; Regs used in _Load_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7338  08E6  158A  227C         	fcall	_setLoad_AH_AL_Restore
  7339  08E8  0008               	return
  7340  08E9                     __end_of_Load_Initialization:	
  7341                           
  7342                           	psect	text42
  7343  0A7C                     __ptext42:	
  7344 ;; *************** function _setLoad_AH_AL_Restore *****************
  7345 ;; Defined at:
  7346 ;;		line 294 in file "../src/OverLoad_B1.c"
  7347 ;; Parameters:    Size  Location     Type
  7348 ;;		None
  7349 ;; Auto vars:     Size  Location     Type
  7350 ;;  i               1    5[COMMON] unsigned char 
  7351 ;; Return value:  Size  Location     Type
  7352 ;;		None               void
  7353 ;; Registers used:
  7354 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7355 ;; Tracked objects:
  7356 ;;		On entry : 0/0
  7357 ;;		On exit  : 0/0
  7358 ;;		Unchanged: 0/0
  7359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7360 ;;      Params:         0       0       0       0
  7361 ;;      Locals:         1       0       0       0
  7362 ;;      Temps:          1       0       0       0
  7363 ;;      Totals:         2       0       0       0
  7364 ;;Total ram usage:        2 bytes
  7365 ;; Hardware stack levels used:    1
  7366 ;; Hardware stack levels required when called:    2
  7367 ;; This function calls:
  7368 ;;		Nothing
  7369 ;; This function is called by:
  7370 ;;		_Load_Initialization
  7371 ;;		_Load_Main
  7372 ;; This function uses a non-reentrant model
  7373 ;;
  7374                           
  7375                           
  7376                           ;psect for function _setLoad_AH_AL_Restore
  7377  0A7C                     _setLoad_AH_AL_Restore:	
  7378                           
  7379                           ;OverLoad_B1.c: 295: char i;
  7380                           ;OverLoad_B1.c: 296: for (i = 0; i < 5; i++) {
  7381                           
  7382                           ;incstack = 0
  7383                           ; Regs used in _setLoad_AH_AL_Restore: [wreg-fsr0h+status,2+status,0]
  7384  0A7C  01F5               	clrf	setLoad_AH_AL_Restore@i
  7385  0A7D                     L14:	
  7386  0A7D  3005               	movlw	5
  7387  0A7E  0275               	subwf	setLoad_AH_AL_Restore@i,w
  7388  0A7F  1803               	btfsc	3,0
  7389  0A80  0008               	return
  7390                           
  7391                           ;OverLoad_B1.c: 297: Load.AH[i] = 0;
  7392  0A81  0875               	movf	setLoad_AH_AL_Restore@i,w
  7393  0A82  3ED4               	addlw	(_Load+10)& (0+255)
  7394  0A83  0084               	movwf	4
  7395  0A84  1383               	bcf	3,7	;select IRP bank1
  7396  0A85  0180               	clrf	0
  7397                           
  7398                           ;OverLoad_B1.c: 298: Load.AL[i] = 0xff;
  7399  0A86  30FF               	movlw	255
  7400  0A87  00F4               	movwf	??_setLoad_AH_AL_Restore
  7401  0A88  0875               	movf	setLoad_AH_AL_Restore@i,w
  7402  0A89  3ED9               	addlw	(_Load+15)& (0+255)
  7403  0A8A  0084               	movwf	4
  7404  0A8B  0874               	movf	??_setLoad_AH_AL_Restore,w
  7405  0A8C  0080               	movwf	0
  7406  0A8D  3001               	movlw	1
  7407  0A8E  00F4               	movwf	??_setLoad_AH_AL_Restore
  7408  0A8F  0874               	movf	??_setLoad_AH_AL_Restore,w
  7409  0A90  07F5               	addwf	setLoad_AH_AL_Restore@i,f
  7410  0A91  2A7D               	goto	L14
  7411  0A92                     __end_of_setLoad_AH_AL_Restore:	
  7412                           
  7413                           	psect	text43
  7414  0BCA                     __ptext43:	
  7415 ;; *************** function _Lights_Main *****************
  7416 ;; Defined at:
  7417 ;;		line 52 in file "../src/TriacRelay_B1.c"
  7418 ;; Parameters:    Size  Location     Type
  7419 ;;		None
  7420 ;; Auto vars:     Size  Location     Type
  7421 ;;		None
  7422 ;; Return value:  Size  Location     Type
  7423 ;;		None               void
  7424 ;; Registers used:
  7425 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7426 ;; Tracked objects:
  7427 ;;		On entry : 0/0
  7428 ;;		On exit  : 0/0
  7429 ;;		Unchanged: 0/0
  7430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7431 ;;      Params:         0       0       0       0
  7432 ;;      Locals:         0       0       0       0
  7433 ;;      Temps:          0       0       0       0
  7434 ;;      Totals:         0       0       0       0
  7435 ;;Total ram usage:        0 bytes
  7436 ;; Hardware stack levels used:    1
  7437 ;; Hardware stack levels required when called:    6
  7438 ;; This function calls:
  7439 ;;		_Lights_Control
  7440 ;;		_getLoad_OK
  7441 ;;		_getMain_All_Error_Status
  7442 ;;		_getMain_All_LightsStatus
  7443 ;;		_setLights_Main
  7444 ;; This function is called by:
  7445 ;;		_main
  7446 ;; This function uses a non-reentrant model
  7447 ;;
  7448                           
  7449                           
  7450                           ;psect for function _Lights_Main
  7451  0BCA                     _Lights_Main:	
  7452                           
  7453                           ;TriacRelay_B1.c: 65: if (Light.LoadGO == 1) {
  7454                           
  7455                           ;incstack = 0
  7456                           ; Regs used in _Lights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7457  0BCA  1C77               	btfss	_Light,0
  7458  0BCB  2BE0               	goto	l5951
  7459                           
  7460                           ;TriacRelay_B1.c: 66: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMa
      +                          in_All_LightsStatus() == 0) {
  7461  0BCC  158A  212E  158A   	fcall	_getLoad_OK
  7462  0BCF  3A01               	xorlw	1
  7463  0BD0  1903               	skipnz
  7464  0BD1  2BDF               	goto	l1544
  7465  0BD2  3000               	movlw	0
  7466  0BD3  158A  24C1  158A   	fcall	_getMain_All_Error_Status
  7467  0BD6  3800               	iorlw	0
  7468  0BD7  1D03               	skipz
  7469  0BD8  2BDF               	goto	l1544
  7470  0BD9  158A  21C0  158A   	fcall	_getMain_All_LightsStatus
  7471  0BDC  3800               	iorlw	0
  7472  0BDD  1D03               	skipz
  7473  0BDE  2BE0               	goto	l5951
  7474  0BDF                     l1544:	
  7475                           
  7476                           ;TriacRelay_B1.c: 67: Light.LoadGO = 0;
  7477  0BDF  1077               	bcf	_Light,0
  7478  0BE0                     l5951:	
  7479                           
  7480                           ;TriacRelay_B1.c: 68: }
  7481                           ;TriacRelay_B1.c: 69: }
  7482                           ;TriacRelay_B1.c: 73: setLights_Main(1);
  7483  0BE0  3001               	movlw	1
  7484  0BE1  158A  23F0  158A   	fcall	_setLights_Main
  7485                           
  7486                           ;TriacRelay_B1.c: 74: Lights_Control(1);
  7487  0BE4  3001               	movlw	1
  7488  0BE5  118A  2682  158A   	fcall	_Lights_Control
  7489                           
  7490                           ;TriacRelay_B1.c: 78: setLights_Main(2);
  7491  0BE8  3002               	movlw	2
  7492  0BE9  158A  23F0  158A   	fcall	_setLights_Main
  7493                           
  7494                           ;TriacRelay_B1.c: 79: Lights_Control(2);
  7495  0BEC  3002               	movlw	2
  7496  0BED  118A  2682         	fcall	_Lights_Control
  7497  0BEF  0008               	return
  7498  0BF0                     __end_of_Lights_Main:	
  7499                           
  7500                           	psect	text44
  7501  0BF0                     __ptext44:	
  7502 ;; *************** function _setLights_Main *****************
  7503 ;; Defined at:
  7504 ;;		line 91 in file "../src/TriacRelay_B1.c"
  7505 ;; Parameters:    Size  Location     Type
  7506 ;;  lights          1    wreg     unsigned char 
  7507 ;; Auto vars:     Size  Location     Type
  7508 ;;  lights          1    5[BANK0 ] unsigned char 
  7509 ;; Return value:  Size  Location     Type
  7510 ;;		None               void
  7511 ;; Registers used:
  7512 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7513 ;; Tracked objects:
  7514 ;;		On entry : 0/0
  7515 ;;		On exit  : 0/0
  7516 ;;		Unchanged: 0/0
  7517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7518 ;;      Params:         0       0       0       0
  7519 ;;      Locals:         0       1       0       0
  7520 ;;      Temps:          0       0       0       0
  7521 ;;      Totals:         0       1       0       0
  7522 ;;Total ram usage:        1 bytes
  7523 ;; Hardware stack levels used:    1
  7524 ;; Hardware stack levels required when called:    5
  7525 ;; This function calls:
  7526 ;;		_LightsPointSelect
  7527 ;;		_getLights_Allow_Condition
  7528 ;;		_setLights
  7529 ;; This function is called by:
  7530 ;;		_Lights_Main
  7531 ;; This function uses a non-reentrant model
  7532 ;;
  7533                           
  7534                           
  7535                           ;psect for function _setLights_Main
  7536  0BF0                     _setLights_Main:	
  7537                           
  7538                           ;incstack = 0
  7539                           ; Regs used in _setLights_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7540                           ;setLights_Main@lights stored from wreg
  7541  0BF0  1283               	bcf	3,5	;RP0=0, select bank0
  7542  0BF1  1303               	bcf	3,6	;RP1=0, select bank0
  7543  0BF2  00DC               	movwf	setLights_Main@lights
  7544                           
  7545                           ;TriacRelay_B1.c: 92: LightsPointSelect(lights);
  7546  0BF3  085C               	movf	setLights_Main@lights,w
  7547  0BF4  158A  2204  158A   	fcall	_LightsPointSelect
  7548                           
  7549                           ;TriacRelay_B1.c: 93: if (Lights->GO == 0) {
  7550  0BF7  0878               	movf	_Lights,w
  7551  0BF8  0084               	movwf	4
  7552  0BF9  1383               	bcf	3,7	;select IRP bank0
  7553  0BFA  1880               	btfsc	0,1
  7554  0BFB  0008               	return
  7555                           
  7556                           ;TriacRelay_B1.c: 94: if (Lights->Trigger == 1) {
  7557  0BFC  0878               	movf	_Lights,w
  7558  0BFD  0084               	movwf	4
  7559  0BFE  1D80               	btfss	0,3
  7560  0BFF  0008               	return
  7561                           
  7562                           ;TriacRelay_B1.c: 95: if (getLights_Allow_Condition(lights) == 0) {
  7563  0C00  1283               	bcf	3,5	;RP0=0, select bank0
  7564  0C01  1303               	bcf	3,6	;RP1=0, select bank0
  7565  0C02  085C               	movf	setLights_Main@lights,w
  7566  0C03  158A  2292  158A   	fcall	_getLights_Allow_Condition
  7567  0C06  3800               	iorlw	0
  7568  0C07  1D03               	skipz
  7569  0C08  0008               	return
  7570                           
  7571                           ;TriacRelay_B1.c: 96: Lights->Trigger = 0;
  7572  0C09  0878               	movf	_Lights,w
  7573  0C0A  0084               	movwf	4
  7574  0C0B  1383               	bcf	3,7	;select IRP bank0
  7575  0C0C  1180               	bcf	0,3
  7576                           
  7577                           ;TriacRelay_B1.c: 97: if (Lights->Switch == 1) {
  7578  0C0D  0878               	movf	_Lights,w
  7579  0C0E  0084               	movwf	4
  7580  0C0F  1E00               	btfss	0,4
  7581  0C10  2C19               	goto	l5521
  7582                           
  7583                           ;TriacRelay_B1.c: 98: setLights(lights, 1);
  7584  0C11  1283               	bcf	3,5	;RP0=0, select bank0
  7585  0C12  1303               	bcf	3,6	;RP1=0, select bank0
  7586  0C13  01D9               	clrf	setLights@status
  7587  0C14  0AD9               	incf	setLights@status,f
  7588  0C15  085C               	movf	setLights_Main@lights,w
  7589  0C16  158A  2777         	fcall	_setLights
  7590                           
  7591                           ;TriacRelay_B1.c: 99: } else {
  7592  0C18  0008               	return
  7593  0C19                     l5521:	
  7594                           
  7595                           ;TriacRelay_B1.c: 100: setLights(lights, 0);
  7596  0C19  1283               	bcf	3,5	;RP0=0, select bank0
  7597  0C1A  1303               	bcf	3,6	;RP1=0, select bank0
  7598  0C1B  01D9               	clrf	setLights@status
  7599  0C1C  085C               	movf	setLights_Main@lights,w
  7600  0C1D  158A  2777         	fcall	_setLights
  7601  0C1F  0008               	return
  7602  0C20                     __end_of_setLights_Main:	
  7603                           
  7604                           	psect	text45
  7605  0F77                     __ptext45:	
  7606 ;; *************** function _setLights *****************
  7607 ;; Defined at:
  7608 ;;		line 108 in file "../src/TriacRelay_B1.c"
  7609 ;; Parameters:    Size  Location     Type
  7610 ;;  lights          1    wreg     unsigned char 
  7611 ;;  status          1    2[BANK0 ] unsigned char 
  7612 ;; Auto vars:     Size  Location     Type
  7613 ;;  lights          1    4[BANK0 ] unsigned char 
  7614 ;; Return value:  Size  Location     Type
  7615 ;;		None               void
  7616 ;; Registers used:
  7617 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7618 ;; Tracked objects:
  7619 ;;		On entry : 0/0
  7620 ;;		On exit  : 0/0
  7621 ;;		Unchanged: 0/0
  7622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7623 ;;      Params:         0       1       0       0
  7624 ;;      Locals:         0       1       0       0
  7625 ;;      Temps:          0       1       0       0
  7626 ;;      Totals:         0       3       0       0
  7627 ;;Total ram usage:        3 bytes
  7628 ;; Hardware stack levels used:    1
  7629 ;; Hardware stack levels required when called:    4
  7630 ;; This function calls:
  7631 ;;		_setLED
  7632 ;;		_setLights_Line
  7633 ;; This function is called by:
  7634 ;;		_setLights_Main
  7635 ;; This function uses a non-reentrant model
  7636 ;;
  7637                           
  7638                           
  7639                           ;psect for function _setLights
  7640  0F77                     _setLights:	
  7641                           
  7642                           ;incstack = 0
  7643                           ; Regs used in _setLights: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7644                           ;setLights@lights stored from wreg
  7645  0F77  1283               	bcf	3,5	;RP0=0, select bank0
  7646  0F78  1303               	bcf	3,6	;RP1=0, select bank0
  7647  0F79  00DB               	movwf	setLights@lights
  7648                           
  7649                           ;TriacRelay_B1.c: 116: if (status == 1) {
  7650  0F7A  0859               	movf	setLights@status,w
  7651  0F7B  3A01               	xorlw	1
  7652  0F7C  1D03               	skipz
  7653  0F7D  2FBF               	goto	l5297
  7654                           
  7655                           ;TriacRelay_B1.c: 118: if (lights == 2) {
  7656  0F7E  085B               	movf	setLights@lights,w
  7657  0F7F  3A02               	xorlw	2
  7658  0F80  1D03               	skipz
  7659  0F81  2F8F               	goto	l5277
  7660                           
  7661                           ;TriacRelay_B1.c: 119: setLED(1, 0);
  7662  0F82  01D7               	clrf	setLED@command
  7663  0F83  3001               	movlw	1
  7664  0F84  118A  27A6  158A   	fcall	_setLED
  7665                           
  7666                           ;TriacRelay_B1.c: 120: setLED(2, 1);
  7667  0F87  1283               	bcf	3,5	;RP0=0, select bank0
  7668  0F88  1303               	bcf	3,6	;RP1=0, select bank0
  7669  0F89  01D7               	clrf	setLED@command
  7670  0F8A  0AD7               	incf	setLED@command,f
  7671  0F8B  3002               	movlw	2
  7672  0F8C  118A  27A6  158A   	fcall	_setLED
  7673  0F8F                     l5277:	
  7674                           
  7675                           ;TriacRelay_B1.c: 121: }
  7676                           ;TriacRelay_B1.c: 127: if (Lights->Status == 0) {
  7677  0F8F  0878               	movf	_Lights,w
  7678  0F90  0084               	movwf	4
  7679  0F91  1383               	bcf	3,7	;select IRP bank0
  7680  0F92  1900               	btfsc	0,2
  7681  0F93  2FB8               	goto	l1558
  7682                           
  7683                           ;TriacRelay_B1.c: 128: Lights->Status = 1;
  7684  0F94  0878               	movf	_Lights,w
  7685  0F95  0084               	movwf	4
  7686  0F96  1500               	bsf	0,2
  7687                           
  7688                           ;TriacRelay_B1.c: 130: if (lights == 1) {
  7689  0F97  1283               	bcf	3,5	;RP0=0, select bank0
  7690  0F98  1303               	bcf	3,6	;RP1=0, select bank0
  7691  0F99  085B               	movf	setLights@lights,w
  7692  0F9A  3A01               	xorlw	1
  7693  0F9B  1D03               	skipz
  7694  0F9C  2FB4               	goto	l5291
  7695                           
  7696                           ;TriacRelay_B1.c: 131: RA7 = 1;
  7697  0F9D  1785               	bsf	5,7	;volatile
  7698                           
  7699                           ;TriacRelay_B1.c: 132: Lights->RelayValue = 100;
  7700  0F9E  3064               	movlw	100
  7701  0F9F  00DA               	movwf	??_setLights
  7702  0FA0  0878               	movf	_Lights,w
  7703  0FA1  3E04               	addlw	4
  7704  0FA2  0084               	movwf	4
  7705  0FA3  085A               	movf	??_setLights,w
  7706  0FA4  0080               	movwf	0
  7707                           
  7708                           ;TriacRelay_B1.c: 133: Lights->TriacValue = 140;
  7709  0FA5  308C               	movlw	140
  7710  0FA6  00DA               	movwf	??_setLights
  7711  0FA7  0878               	movf	_Lights,w
  7712  0FA8  3E03               	addlw	3
  7713  0FA9  0084               	movwf	4
  7714  0FAA  085A               	movf	??_setLights,w
  7715  0FAB  0080               	movwf	0
  7716                           
  7717                           ;TriacRelay_B1.c: 134: Lights->Time = 0;
  7718  0FAC  0878               	movf	_Lights,w
  7719  0FAD  3E02               	addlw	2
  7720  0FAE  0084               	movwf	4
  7721  0FAF  0180               	clrf	0
  7722                           
  7723                           ;TriacRelay_B1.c: 135: Lights->GO = 1;
  7724  0FB0  0878               	movf	_Lights,w
  7725  0FB1  0084               	movwf	4
  7726  0FB2  1480               	bsf	0,1
  7727                           
  7728                           ;TriacRelay_B1.c: 136: }
  7729  0FB3  2FB8               	goto	l1558
  7730  0FB4                     l5291:	
  7731                           
  7732                           ;TriacRelay_B1.c: 139: else if (lights == 2) {
  7733  0FB4  085B               	movf	setLights@lights,w
  7734  0FB5  3A02               	xorlw	2
  7735  0FB6  1903               	btfsc	3,2
  7736                           
  7737                           ;TriacRelay_B1.c: 147: RC4 = 1;
  7738  0FB7  1607               	bsf	7,4	;volatile
  7739  0FB8                     l1558:	
  7740                           
  7741                           ;TriacRelay_B1.c: 151: }
  7742                           ;TriacRelay_B1.c: 162: }
  7743                           ;TriacRelay_B1.c: 164: Light.Load_Status = 1;
  7744  0FB8  14F7               	bsf	_Light,1
  7745                           
  7746                           ;TriacRelay_B1.c: 165: setLights_Line(lights);
  7747  0FB9  1283               	bcf	3,5	;RP0=0, select bank0
  7748  0FBA  1303               	bcf	3,6	;RP1=0, select bank0
  7749  0FBB  085B               	movf	setLights@lights,w
  7750  0FBC  158A  22A9         	fcall	_setLights_Line
  7751                           
  7752                           ;TriacRelay_B1.c: 167: } else {
  7753  0FBE  0008               	return
  7754  0FBF                     l5297:	
  7755                           
  7756                           ;TriacRelay_B1.c: 170: if (lights == 2) {
  7757  0FBF  1283               	bcf	3,5	;RP0=0, select bank0
  7758  0FC0  1303               	bcf	3,6	;RP1=0, select bank0
  7759  0FC1  085B               	movf	setLights@lights,w
  7760  0FC2  3A02               	xorlw	2
  7761  0FC3  1D03               	skipz
  7762  0FC4  2FD2               	goto	l5301
  7763                           
  7764                           ;TriacRelay_B1.c: 171: setLED(1, 1);
  7765  0FC5  01D7               	clrf	setLED@command
  7766  0FC6  0AD7               	incf	setLED@command,f
  7767  0FC7  3001               	movlw	1
  7768  0FC8  118A  27A6  158A   	fcall	_setLED
  7769                           
  7770                           ;TriacRelay_B1.c: 172: setLED(2, 0);
  7771  0FCB  1283               	bcf	3,5	;RP0=0, select bank0
  7772  0FCC  1303               	bcf	3,6	;RP1=0, select bank0
  7773  0FCD  01D7               	clrf	setLED@command
  7774  0FCE  3002               	movlw	2
  7775  0FCF  118A  27A6  158A   	fcall	_setLED
  7776  0FD2                     l5301:	
  7777                           
  7778                           ;TriacRelay_B1.c: 173: }
  7779                           ;TriacRelay_B1.c: 175: if (Lights->Status == 1) {
  7780  0FD2  0878               	movf	_Lights,w
  7781  0FD3  0084               	movwf	4
  7782  0FD4  1383               	bcf	3,7	;select IRP bank0
  7783  0FD5  1D00               	btfss	0,2
  7784  0FD6  2FFB               	goto	l1564
  7785                           
  7786                           ;TriacRelay_B1.c: 176: Lights->Status = 0;
  7787  0FD7  0878               	movf	_Lights,w
  7788  0FD8  0084               	movwf	4
  7789  0FD9  1100               	bcf	0,2
  7790                           
  7791                           ;TriacRelay_B1.c: 178: if (lights == 1) {
  7792  0FDA  1283               	bcf	3,5	;RP0=0, select bank0
  7793  0FDB  1303               	bcf	3,6	;RP1=0, select bank0
  7794  0FDC  085B               	movf	setLights@lights,w
  7795  0FDD  3A01               	xorlw	1
  7796  0FDE  1D03               	skipz
  7797  0FDF  2FF7               	goto	l5315
  7798                           
  7799                           ;TriacRelay_B1.c: 179: RA7 = 1;
  7800  0FE0  1785               	bsf	5,7	;volatile
  7801                           
  7802                           ;TriacRelay_B1.c: 180: Lights->RelayValue = 40;
  7803  0FE1  3028               	movlw	40
  7804  0FE2  00DA               	movwf	??_setLights
  7805  0FE3  0878               	movf	_Lights,w
  7806  0FE4  3E04               	addlw	4
  7807  0FE5  0084               	movwf	4
  7808  0FE6  085A               	movf	??_setLights,w
  7809  0FE7  0080               	movwf	0
  7810                           
  7811                           ;TriacRelay_B1.c: 181: Lights->TriacValue = 80;
  7812  0FE8  3050               	movlw	80
  7813  0FE9  00DA               	movwf	??_setLights
  7814  0FEA  0878               	movf	_Lights,w
  7815  0FEB  3E03               	addlw	3
  7816  0FEC  0084               	movwf	4
  7817  0FED  085A               	movf	??_setLights,w
  7818  0FEE  0080               	movwf	0
  7819                           
  7820                           ;TriacRelay_B1.c: 182: Lights->Time = 0;
  7821  0FEF  0878               	movf	_Lights,w
  7822  0FF0  3E02               	addlw	2
  7823  0FF1  0084               	movwf	4
  7824  0FF2  0180               	clrf	0
  7825                           
  7826                           ;TriacRelay_B1.c: 183: Lights->GO = 1;
  7827  0FF3  0878               	movf	_Lights,w
  7828  0FF4  0084               	movwf	4
  7829  0FF5  1480               	bsf	0,1
  7830                           
  7831                           ;TriacRelay_B1.c: 184: }
  7832  0FF6  2FFB               	goto	l1564
  7833  0FF7                     l5315:	
  7834                           
  7835                           ;TriacRelay_B1.c: 187: else if (lights == 2) {
  7836  0FF7  085B               	movf	setLights@lights,w
  7837  0FF8  3A02               	xorlw	2
  7838  0FF9  1903               	btfsc	3,2
  7839                           
  7840                           ;TriacRelay_B1.c: 195: RC4 = 0;
  7841  0FFA  1207               	bcf	7,4	;volatile
  7842  0FFB                     l1564:	
  7843                           
  7844                           ;TriacRelay_B1.c: 199: }
  7845                           ;TriacRelay_B1.c: 211: }
  7846                           ;TriacRelay_B1.c: 213: Light.Load_Status = 0;
  7847  0FFB  10F7               	bcf	_Light,1
  7848                           
  7849                           ;TriacRelay_B1.c: 214: setLights_Line(0);
  7850  0FFC  3000               	movlw	0
  7851  0FFD  158A  22A9         	fcall	_setLights_Line
  7852  0FFF  0008               	return
  7853  1000                     __end_of_setLights:	
  7854                           
  7855                           	psect	text46
  7856  0AA9                     __ptext46:	
  7857 ;; *************** function _setLights_Line *****************
  7858 ;; Defined at:
  7859 ;;		line 285 in file "../src/TriacRelay_B1.c"
  7860 ;; Parameters:    Size  Location     Type
  7861 ;;  lights          1    wreg     unsigned char 
  7862 ;; Auto vars:     Size  Location     Type
  7863 ;;  lights          1    4[COMMON] unsigned char 
  7864 ;; Return value:  Size  Location     Type
  7865 ;;		None               void
  7866 ;; Registers used:
  7867 ;;		wreg
  7868 ;; Tracked objects:
  7869 ;;		On entry : 0/0
  7870 ;;		On exit  : 0/0
  7871 ;;		Unchanged: 0/0
  7872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7873 ;;      Params:         0       0       0       0
  7874 ;;      Locals:         1       0       0       0
  7875 ;;      Temps:          0       0       0       0
  7876 ;;      Totals:         1       0       0       0
  7877 ;;Total ram usage:        1 bytes
  7878 ;; Hardware stack levels used:    1
  7879 ;; Hardware stack levels required when called:    2
  7880 ;; This function calls:
  7881 ;;		Nothing
  7882 ;; This function is called by:
  7883 ;;		_setLights
  7884 ;; This function uses a non-reentrant model
  7885 ;;
  7886                           
  7887                           
  7888                           ;psect for function _setLights_Line
  7889  0AA9                     _setLights_Line:	
  7890                           
  7891                           ;incstack = 0
  7892                           ; Regs used in _setLights_Line: [wreg]
  7893                           ;setLights_Line@lights stored from wreg
  7894  0AA9  00F4               	movwf	setLights_Line@lights
  7895                           
  7896                           ;TriacRelay_B1.c: 286: Light.LoadGO = 1;
  7897  0AAA  1477               	bsf	_Light,0
  7898                           
  7899                           ;TriacRelay_B1.c: 288: Lights1.Line = 0;
  7900  0AAB  1283               	bcf	3,5	;RP0=0, select bank0
  7901  0AAC  1303               	bcf	3,6	;RP1=0, select bank0
  7902  0AAD  104A               	bcf	_Lights1+1,0
  7903                           
  7904                           ;TriacRelay_B1.c: 289: if (lights == 1 && lights != 0) {
  7905  0AAE  0874               	movf	setLights_Line@lights,w
  7906  0AAF  3A01               	xorlw	1
  7907  0AB0  1D03               	skipz
  7908  0AB1  2AB6               	goto	l1591
  7909  0AB2  0874               	movf	setLights_Line@lights,w
  7910  0AB3  1903               	btfsc	3,2
  7911  0AB4  2AB6               	goto	l1591
  7912                           
  7913                           ;TriacRelay_B1.c: 290: Lights1.Line = 1;
  7914  0AB5  144A               	bsf	_Lights1+1,0
  7915  0AB6                     l1591:	
  7916                           
  7917                           ;TriacRelay_B1.c: 291: }
  7918                           ;TriacRelay_B1.c: 294: Lights2.Line = 0;
  7919  0AB6  104F               	bcf	_Lights2+1,0
  7920                           
  7921                           ;TriacRelay_B1.c: 295: if (lights == 2 && lights != 0) {
  7922  0AB7  0874               	movf	setLights_Line@lights,w
  7923  0AB8  3A02               	xorlw	2
  7924  0AB9  1D03               	skipz
  7925  0ABA  0008               	return
  7926  0ABB  0874               	movf	setLights_Line@lights,w
  7927  0ABC  1903               	btfsc	3,2
  7928  0ABD  0008               	return
  7929                           
  7930                           ;TriacRelay_B1.c: 296: Lights2.Line = 1;
  7931  0ABE  144F               	bsf	_Lights2+1,0
  7932  0ABF  0008               	return
  7933  0AC0                     __end_of_setLights_Line:	
  7934                           
  7935                           	psect	text47
  7936  0A92                     __ptext47:	
  7937 ;; *************** function _getLights_Allow_Condition *****************
  7938 ;; Defined at:
  7939 ;;		line 367 in file "../src/TriacRelay_B1.c"
  7940 ;; Parameters:    Size  Location     Type
  7941 ;;  lights          1    wreg     unsigned char 
  7942 ;; Auto vars:     Size  Location     Type
  7943 ;;  lights          1    0[COMMON] unsigned char 
  7944 ;;  allow           1    0[BANK0 ] unsigned char 
  7945 ;; Return value:  Size  Location     Type
  7946 ;;                  1    wreg      unsigned char 
  7947 ;; Registers used:
  7948 ;;		wreg, status,2, pclath, cstack
  7949 ;; Tracked objects:
  7950 ;;		On entry : 0/0
  7951 ;;		On exit  : 0/0
  7952 ;;		Unchanged: 0/0
  7953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7954 ;;      Params:         0       0       0       0
  7955 ;;      Locals:         0       2       0       0
  7956 ;;      Temps:          1       0       0       0
  7957 ;;      Totals:         1       2       0       0
  7958 ;;Total ram usage:        3 bytes
  7959 ;; Hardware stack levels used:    1
  7960 ;; Hardware stack levels required when called:    3
  7961 ;; This function calls:
  7962 ;;		_getLoad_OK
  7963 ;; This function is called by:
  7964 ;;		_setLights_Main
  7965 ;; This function uses a non-reentrant model
  7966 ;;
  7967                           
  7968                           
  7969                           ;psect for function _getLights_Allow_Condition
  7970  0A92                     _getLights_Allow_Condition:	
  7971                           
  7972                           ;TriacRelay_B1.c: 368: char allow = 0;
  7973                           
  7974                           ;incstack = 0
  7975                           ; Regs used in _getLights_Allow_Condition: [wreg+status,2+pclath+cstack]
  7976  0A92  1283               	bcf	3,5	;RP0=0, select bank0
  7977  0A93  1303               	bcf	3,6	;RP1=0, select bank0
  7978  0A94  01D7               	clrf	getLights_Allow_Condition@allow
  7979                           
  7980                           ;TriacRelay_B1.c: 371: allow = getLoad_OK() == 0 && Light.LoadGO == 0 ? 0 : 1;
  7981  0A95  01D8               	clrf	_getLights_Allow_Condition$4827
  7982  0A96  0AD8               	incf	_getLights_Allow_Condition$4827,f
  7983  0A97  158A  212E  158A   	fcall	_getLoad_OK
  7984  0A9A  3800               	iorlw	0
  7985  0A9B  1903               	btfsc	3,2
  7986  0A9C  1877               	btfsc	_Light,0
  7987  0A9D  2AA1               	goto	l5265
  7988  0A9E  1283               	bcf	3,5	;RP0=0, select bank0
  7989  0A9F  1303               	bcf	3,6	;RP1=0, select bank0
  7990  0AA0  01D8               	clrf	_getLights_Allow_Condition$4827
  7991  0AA1                     l5265:	
  7992  0AA1  1283               	bcf	3,5	;RP0=0, select bank0
  7993  0AA2  1303               	bcf	3,6	;RP1=0, select bank0
  7994  0AA3  0858               	movf	_getLights_Allow_Condition$4827,w
  7995  0AA4  00F5               	movwf	??_getLights_Allow_Condition
  7996  0AA5  0875               	movf	??_getLights_Allow_Condition,w
  7997  0AA6  00D7               	movwf	getLights_Allow_Condition@allow
  7998                           
  7999                           ;TriacRelay_B1.c: 396: return allow;
  8000  0AA7  0857               	movf	getLights_Allow_Condition@allow,w
  8001  0AA8  0008               	return
  8002  0AA9                     __end_of_getLights_Allow_Condition:	
  8003                           
  8004                           	psect	text48
  8005  092E                     __ptext48:	
  8006 ;; *************** function _getLoad_OK *****************
  8007 ;; Defined at:
  8008 ;;		line 274 in file "../src/OverLoad_B1.c"
  8009 ;; Parameters:    Size  Location     Type
  8010 ;;		None
  8011 ;; Auto vars:     Size  Location     Type
  8012 ;;  ok              1    4[COMMON] unsigned char 
  8013 ;; Return value:  Size  Location     Type
  8014 ;;                  1    wreg      unsigned char 
  8015 ;; Registers used:
  8016 ;;		wreg, status,2
  8017 ;; Tracked objects:
  8018 ;;		On entry : 0/0
  8019 ;;		On exit  : 0/0
  8020 ;;		Unchanged: 0/0
  8021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8022 ;;      Params:         0       0       0       0
  8023 ;;      Locals:         1       0       0       0
  8024 ;;      Temps:          0       0       0       0
  8025 ;;      Totals:         1       0       0       0
  8026 ;;Total ram usage:        1 bytes
  8027 ;; Hardware stack levels used:    1
  8028 ;; Hardware stack levels required when called:    2
  8029 ;; This function calls:
  8030 ;;		Nothing
  8031 ;; This function is called by:
  8032 ;;		_Lights_Main
  8033 ;;		_getLights_Allow_Condition
  8034 ;; This function uses a non-reentrant model
  8035 ;;
  8036                           
  8037                           
  8038                           ;psect for function _getLoad_OK
  8039  092E                     _getLoad_OK:	
  8040                           
  8041                           ;OverLoad_B1.c: 275: char ok = Load.OK == 1 ? 1 : 0;
  8042                           
  8043                           ;incstack = 0
  8044                           ; Regs used in _getLoad_OK: [wreg+status,2]
  8045  092E  3000               	movlw	0
  8046  092F  1683               	bsf	3,5	;RP0=1, select bank1
  8047  0930  1303               	bcf	3,6	;RP1=0, select bank1
  8048  0931  1BCA               	btfsc	_Load^(0+128),7
  8049  0932  3001               	movlw	1
  8050  0933  00F4               	movwf	getLoad_OK@ok
  8051                           
  8052                           ;OverLoad_B1.c: 276: return ok;
  8053  0934  0874               	movf	getLoad_OK@ok,w
  8054  0935  0008               	return
  8055  0936                     __end_of_getLoad_OK:	
  8056                           
  8057                           	psect	text49
  8058  0682                     __ptext49:	
  8059 ;; *************** function _Lights_Control *****************
  8060 ;; Defined at:
  8061 ;;		line 220 in file "../src/TriacRelay_B1.c"
  8062 ;; Parameters:    Size  Location     Type
  8063 ;;  lights          1    wreg     unsigned char 
  8064 ;; Auto vars:     Size  Location     Type
  8065 ;;  lights          1   10[BANK0 ] unsigned char 
  8066 ;; Return value:  Size  Location     Type
  8067 ;;		None               void
  8068 ;; Registers used:
  8069 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8070 ;; Tracked objects:
  8071 ;;		On entry : 0/0
  8072 ;;		On exit  : 0/0
  8073 ;;		Unchanged: 0/0
  8074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8075 ;;      Params:         0       0       0       0
  8076 ;;      Locals:         0       1       0       0
  8077 ;;      Temps:          0       2       0       0
  8078 ;;      Totals:         0       3       0       0
  8079 ;;Total ram usage:        3 bytes
  8080 ;; Hardware stack levels used:    1
  8081 ;; Hardware stack levels required when called:    3
  8082 ;; This function calls:
  8083 ;;		_LightsPointSelect
  8084 ;;		___awdiv
  8085 ;; This function is called by:
  8086 ;;		_Lights_Main
  8087 ;; This function uses a non-reentrant model
  8088 ;;
  8089                           
  8090                           
  8091                           ;psect for function _Lights_Control
  8092  0682                     _Lights_Control:	
  8093                           
  8094                           ;incstack = 0
  8095                           ; Regs used in _Lights_Control: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8096                           ;Lights_Control@lights stored from wreg
  8097  0682  1283               	bcf	3,5	;RP0=0, select bank0
  8098  0683  1303               	bcf	3,6	;RP1=0, select bank0
  8099  0684  00E1               	movwf	Lights_Control@lights
  8100                           
  8101                           ;TriacRelay_B1.c: 221: LightsPointSelect(lights);
  8102  0685  0861               	movf	Lights_Control@lights,w
  8103  0686  158A  2204  118A   	fcall	_LightsPointSelect
  8104                           
  8105                           ;TriacRelay_B1.c: 222: if (Lights->GO == 1) {
  8106  0689  0878               	movf	_Lights,w
  8107  068A  0084               	movwf	4
  8108  068B  1383               	bcf	3,7	;select IRP bank0
  8109  068C  1C80               	btfss	0,1
  8110  068D  0008               	return
  8111                           
  8112                           ;TriacRelay_B1.c: 223: Lights->Time++;
  8113  068E  3001               	movlw	1
  8114  068F  1283               	bcf	3,5	;RP0=0, select bank0
  8115  0690  1303               	bcf	3,6	;RP1=0, select bank0
  8116  0691  00DF               	movwf	??_Lights_Control
  8117  0692  0878               	movf	_Lights,w
  8118  0693  3E02               	addlw	2
  8119  0694  0084               	movwf	4
  8120  0695  085F               	movf	??_Lights_Control,w
  8121  0696  0780               	addwf	0,f
  8122                           
  8123                           ;TriacRelay_B1.c: 224: if (Lights->RelaySet == 0) {
  8124  0697  0878               	movf	_Lights,w
  8125  0698  0084               	movwf	4
  8126  0699  1B80               	btfsc	0,7
  8127  069A  2EE2               	goto	l5543
  8128                           
  8129                           ;TriacRelay_B1.c: 225: if (Lights->Time >= (Lights->RelayValue / 20)) {
  8130  069B  3014               	movlw	20
  8131  069C  00D7               	movwf	___awdiv@divisor
  8132  069D  3000               	movlw	0
  8133  069E  00D8               	movwf	___awdiv@divisor+1
  8134  069F  0878               	movf	_Lights,w
  8135  06A0  3E04               	addlw	4
  8136  06A1  0084               	movwf	4
  8137  06A2  0800               	movf	0,w
  8138  06A3  00DF               	movwf	??_Lights_Control
  8139  06A4  01E0               	clrf	??_Lights_Control+1
  8140  06A5  085F               	movf	??_Lights_Control,w
  8141  06A6  00D9               	movwf	___awdiv@dividend
  8142  06A7  0860               	movf	??_Lights_Control+1,w
  8143  06A8  00DA               	movwf	___awdiv@dividend+1
  8144  06A9  158A  26A8  118A   	fcall	___awdiv
  8145  06AC  0878               	movf	_Lights,w
  8146  06AD  3E02               	addlw	2
  8147  06AE  0084               	movwf	4
  8148  06AF  1283               	bcf	3,5	;RP0=0, select bank0
  8149  06B0  1303               	bcf	3,6	;RP1=0, select bank0
  8150  06B1  0858               	movf	?___awdiv+1,w
  8151  06B2  3A80               	xorlw	128
  8152  06B3  3C80               	sublw	128
  8153  06B4  1D03               	skipz
  8154  06B5  2EB9               	goto	u6615
  8155  06B6  0857               	movf	?___awdiv,w
  8156  06B7  1383               	bcf	3,7	;select IRP bank0
  8157  06B8  0200               	subwf	0,w
  8158  06B9                     u6615:	
  8159  06B9  1C03               	skipc
  8160  06BA  0008               	return
  8161                           
  8162                           ;TriacRelay_B1.c: 226: Lights->RelaySet = 1;
  8163  06BB  0878               	movf	_Lights,w
  8164  06BC  0084               	movwf	4
  8165  06BD  1383               	bcf	3,7	;select IRP bank0
  8166  06BE  1780               	bsf	0,7
  8167                           
  8168                           ;TriacRelay_B1.c: 228: if (lights == 1) {
  8169  06BF  1283               	bcf	3,5	;RP0=0, select bank0
  8170  06C0  1303               	bcf	3,6	;RP1=0, select bank0
  8171  06C1  0861               	movf	Lights_Control@lights,w
  8172  06C2  3A01               	xorlw	1
  8173  06C3  1D03               	skipz
  8174  06C4  2ED1               	goto	l5539
  8175                           
  8176                           ;TriacRelay_B1.c: 229: RA6 = Lights->Status == 1 ? 1 : 0;
  8177  06C5  0878               	movf	_Lights,w
  8178  06C6  0084               	movwf	4
  8179  06C7  1D00               	btfss	0,2
  8180  06C8  2ECD               	goto	u6630
  8181  06C9  1283               	bcf	3,5	;RP0=0, select bank0
  8182  06CA  1303               	bcf	3,6	;RP1=0, select bank0
  8183  06CB  1705               	bsf	5,6	;volatile
  8184  06CC  0008               	return
  8185  06CD                     u6630:	
  8186  06CD  1283               	bcf	3,5	;RP0=0, select bank0
  8187  06CE  1303               	bcf	3,6	;RP1=0, select bank0
  8188  06CF  1305               	bcf	5,6	;volatile
  8189                           
  8190                           ;TriacRelay_B1.c: 230: }
  8191  06D0  0008               	return
  8192  06D1                     l5539:	
  8193                           
  8194                           ;TriacRelay_B1.c: 233: else if (lights == 2) {
  8195  06D1  0861               	movf	Lights_Control@lights,w
  8196  06D2  3A02               	xorlw	2
  8197  06D3  1D03               	skipz
  8198  06D4  0008               	return
  8199                           
  8200                           ;TriacRelay_B1.c: 234: RC5 = Lights->Status == 1 ? 1 : 0;
  8201  06D5  0878               	movf	_Lights,w
  8202  06D6  0084               	movwf	4
  8203  06D7  1383               	bcf	3,7	;select IRP bank0
  8204  06D8  1D00               	btfss	0,2
  8205  06D9  2EDE               	goto	u6660
  8206  06DA  1283               	bcf	3,5	;RP0=0, select bank0
  8207  06DB  1303               	bcf	3,6	;RP1=0, select bank0
  8208  06DC  1687               	bsf	7,5	;volatile
  8209  06DD  0008               	return
  8210  06DE                     u6660:	
  8211  06DE  1283               	bcf	3,5	;RP0=0, select bank0
  8212  06DF  1303               	bcf	3,6	;RP1=0, select bank0
  8213  06E0  1287               	bcf	7,5	;volatile
  8214                           
  8215                           ;TriacRelay_B1.c: 235: }
  8216                           ;TriacRelay_B1.c: 242: }
  8217                           ;TriacRelay_B1.c: 243: } else {
  8218  06E1  0008               	return
  8219  06E2                     l5543:	
  8220                           
  8221                           ;TriacRelay_B1.c: 244: if (Lights->Time >= (Lights->TriacValue / 20)) {
  8222  06E2  3014               	movlw	20
  8223  06E3  00D7               	movwf	___awdiv@divisor
  8224  06E4  3000               	movlw	0
  8225  06E5  00D8               	movwf	___awdiv@divisor+1
  8226  06E6  0878               	movf	_Lights,w
  8227  06E7  3E03               	addlw	3
  8228  06E8  0084               	movwf	4
  8229  06E9  1383               	bcf	3,7	;select IRP bank0
  8230  06EA  0800               	movf	0,w
  8231  06EB  00DF               	movwf	??_Lights_Control
  8232  06EC  01E0               	clrf	??_Lights_Control+1
  8233  06ED  085F               	movf	??_Lights_Control,w
  8234  06EE  00D9               	movwf	___awdiv@dividend
  8235  06EF  0860               	movf	??_Lights_Control+1,w
  8236  06F0  00DA               	movwf	___awdiv@dividend+1
  8237  06F1  158A  26A8  118A   	fcall	___awdiv
  8238  06F4  0878               	movf	_Lights,w
  8239  06F5  3E02               	addlw	2
  8240  06F6  0084               	movwf	4
  8241  06F7  1283               	bcf	3,5	;RP0=0, select bank0
  8242  06F8  1303               	bcf	3,6	;RP1=0, select bank0
  8243  06F9  0858               	movf	?___awdiv+1,w
  8244  06FA  3A80               	xorlw	128
  8245  06FB  3C80               	sublw	128
  8246  06FC  1D03               	skipz
  8247  06FD  2F01               	goto	u6685
  8248  06FE  0857               	movf	?___awdiv,w
  8249  06FF  1383               	bcf	3,7	;select IRP bank0
  8250  0700  0200               	subwf	0,w
  8251  0701                     u6685:	
  8252  0701  1C03               	skipc
  8253  0702  0008               	return
  8254                           
  8255                           ;TriacRelay_B1.c: 245: Lights->Time = 0;
  8256  0703  0878               	movf	_Lights,w
  8257  0704  3E02               	addlw	2
  8258  0705  0084               	movwf	4
  8259  0706  1383               	bcf	3,7	;select IRP bank0
  8260  0707  0180               	clrf	0
  8261                           
  8262                           ;TriacRelay_B1.c: 246: Lights->GO = 0;
  8263  0708  0878               	movf	_Lights,w
  8264  0709  0084               	movwf	4
  8265  070A  1080               	bcf	0,1
  8266                           
  8267                           ;TriacRelay_B1.c: 247: Lights->RelaySet = 0;
  8268  070B  0878               	movf	_Lights,w
  8269  070C  0084               	movwf	4
  8270  070D  1380               	bcf	0,7
  8271                           
  8272                           ;TriacRelay_B1.c: 250: if (lights == 1) {
  8273  070E  1283               	bcf	3,5	;RP0=0, select bank0
  8274  070F  1303               	bcf	3,6	;RP1=0, select bank0
  8275  0710  0861               	movf	Lights_Control@lights,w
  8276  0711  3A01               	xorlw	1
  8277  0712  1D03               	skipz
  8278  0713  2F16               	goto	l5555
  8279                           
  8280                           ;TriacRelay_B1.c: 251: RA7 = 0;
  8281  0714  1385               	bcf	5,7	;volatile
  8282                           
  8283                           ;TriacRelay_B1.c: 252: }
  8284  0715  0008               	return
  8285  0716                     l5555:	
  8286                           
  8287                           ;TriacRelay_B1.c: 255: else if (lights == 2) {
  8288  0716  0861               	movf	Lights_Control@lights,w
  8289  0717  3A02               	xorlw	2
  8290  0718  1D03               	skipz
  8291  0719  0008               	return
  8292                           
  8293                           ;TriacRelay_B1.c: 256: RC4 = 0;
  8294  071A  1207               	bcf	7,4	;volatile
  8295  071B  0008               	return
  8296  071C                     __end_of_Lights_Control:	
  8297                           
  8298                           	psect	text50
  8299  0926                     __ptext50:	
  8300 ;; *************** function _Lights_Initialization *****************
  8301 ;; Defined at:
  8302 ;;		line 32 in file "../src/TriacRelay_B1.c"
  8303 ;; Parameters:    Size  Location     Type
  8304 ;;		None
  8305 ;; Auto vars:     Size  Location     Type
  8306 ;;		None
  8307 ;; Return value:  Size  Location     Type
  8308 ;;		None               void
  8309 ;; Registers used:
  8310 ;;		wreg, status,2, status,0, pclath, cstack
  8311 ;; Tracked objects:
  8312 ;;		On entry : 0/0
  8313 ;;		On exit  : 0/0
  8314 ;;		Unchanged: 0/0
  8315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8316 ;;      Params:         0       0       0       0
  8317 ;;      Locals:         0       0       0       0
  8318 ;;      Temps:          0       0       0       0
  8319 ;;      Totals:         0       0       0       0
  8320 ;;Total ram usage:        0 bytes
  8321 ;; Hardware stack levels used:    1
  8322 ;; Hardware stack levels required when called:    4
  8323 ;; This function calls:
  8324 ;;		_setLights_Initialization
  8325 ;; This function is called by:
  8326 ;;		_main
  8327 ;; This function uses a non-reentrant model
  8328 ;;
  8329                           
  8330                           
  8331                           ;psect for function _Lights_Initialization
  8332  0926                     _Lights_Initialization:	
  8333                           
  8334                           ;TriacRelay_B1.c: 34: setLights_Initialization(1);
  8335                           
  8336                           ;incstack = 0
  8337                           ; Regs used in _Lights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  8338  0926  3001               	movlw	1
  8339  0927  158A  2118  158A   	fcall	_setLights_Initialization
  8340                           
  8341                           ;TriacRelay_B1.c: 38: setLights_Initialization(2);
  8342  092A  3002               	movlw	2
  8343  092B  158A  2118         	fcall	_setLights_Initialization
  8344  092D  0008               	return
  8345  092E                     __end_of_Lights_Initialization:	
  8346                           
  8347                           	psect	text51
  8348  0918                     __ptext51:	
  8349 ;; *************** function _setLights_Initialization *****************
  8350 ;; Defined at:
  8351 ;;		line 47 in file "../src/TriacRelay_B1.c"
  8352 ;; Parameters:    Size  Location     Type
  8353 ;;  lights          1    wreg     unsigned char 
  8354 ;; Auto vars:     Size  Location     Type
  8355 ;;  lights          1    0[BANK0 ] unsigned char 
  8356 ;; Return value:  Size  Location     Type
  8357 ;;		None               void
  8358 ;; Registers used:
  8359 ;;		wreg, status,2, status,0, pclath, cstack
  8360 ;; Tracked objects:
  8361 ;;		On entry : 0/0
  8362 ;;		On exit  : 0/0
  8363 ;;		Unchanged: 0/0
  8364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8365 ;;      Params:         0       0       0       0
  8366 ;;      Locals:         0       1       0       0
  8367 ;;      Temps:          0       0       0       0
  8368 ;;      Totals:         0       1       0       0
  8369 ;;Total ram usage:        1 bytes
  8370 ;; Hardware stack levels used:    1
  8371 ;; Hardware stack levels required when called:    3
  8372 ;; This function calls:
  8373 ;;		_LightsPointSelect
  8374 ;; This function is called by:
  8375 ;;		_Lights_Initialization
  8376 ;; This function uses a non-reentrant model
  8377 ;;
  8378                           
  8379                           
  8380                           ;psect for function _setLights_Initialization
  8381  0918                     _setLights_Initialization:	
  8382                           
  8383                           ;incstack = 0
  8384                           ; Regs used in _setLights_Initialization: [wreg+status,2+status,0+pclath+cstack]
  8385                           ;setLights_Initialization@lights stored from wreg
  8386  0918  1283               	bcf	3,5	;RP0=0, select bank0
  8387  0919  1303               	bcf	3,6	;RP1=0, select bank0
  8388  091A  00D7               	movwf	setLights_Initialization@lights
  8389                           
  8390                           ;TriacRelay_B1.c: 48: LightsPointSelect(lights);
  8391  091B  0857               	movf	setLights_Initialization@lights,w
  8392  091C  158A  2204         	fcall	_LightsPointSelect
  8393  091E  0008               	return
  8394  091F                     __end_of_setLights_Initialization:	
  8395                           
  8396                           	psect	text52
  8397  07F4                     __ptext52:	
  8398 ;; *************** function _LED_Main *****************
  8399 ;; Defined at:
  8400 ;;		line 47 in file "../src/LED_B1.c"
  8401 ;; Parameters:    Size  Location     Type
  8402 ;;		None
  8403 ;; Auto vars:     Size  Location     Type
  8404 ;;		None
  8405 ;; Return value:  Size  Location     Type
  8406 ;;		None               void
  8407 ;; Registers used:
  8408 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8409 ;; Tracked objects:
  8410 ;;		On entry : 0/0
  8411 ;;		On exit  : 0/0
  8412 ;;		Unchanged: 0/0
  8413 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8414 ;;      Params:         0       0       0       0
  8415 ;;      Locals:         0       0       0       0
  8416 ;;      Temps:          0       0       0       0
  8417 ;;      Totals:         0       0       0       0
  8418 ;;Total ram usage:        0 bytes
  8419 ;; Hardware stack levels used:    1
  8420 ;; Hardware stack levels required when called:    4
  8421 ;; This function calls:
  8422 ;;		_setLED_Main
  8423 ;; This function is called by:
  8424 ;;		_main
  8425 ;; This function uses a non-reentrant model
  8426 ;;
  8427                           
  8428                           
  8429                           ;psect for function _LED_Main
  8430  07F4                     _LED_Main:	
  8431                           
  8432                           ;LED_B1.c: 58: setLED_Main(1);
  8433                           
  8434                           ;incstack = 0
  8435                           ; Regs used in _LED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8436  07F4  3001               	movlw	1
  8437  07F5  158A  2486  118A   	fcall	_setLED_Main
  8438                           
  8439                           ;LED_B1.c: 61: setLED_Main(2);
  8440  07F8  3002               	movlw	2
  8441  07F9  158A  2486  118A   	fcall	_setLED_Main
  8442                           
  8443                           ;LED_B1.c: 67: setLED_Main(99);
  8444  07FC  3063               	movlw	99
  8445  07FD  158A  2486         	fcall	_setLED_Main
  8446  07FF  0008               	return
  8447  0800                     __end_of_LED_Main:	
  8448                           
  8449                           	psect	text53
  8450  0C86                     __ptext53:	
  8451 ;; *************** function _setLED_Main *****************
  8452 ;; Defined at:
  8453 ;;		line 229 in file "../src/LED_B1.c"
  8454 ;; Parameters:    Size  Location     Type
  8455 ;;  led             1    wreg     unsigned char 
  8456 ;; Auto vars:     Size  Location     Type
  8457 ;;  led             1    2[BANK0 ] unsigned char 
  8458 ;; Return value:  Size  Location     Type
  8459 ;;		None               void
  8460 ;; Registers used:
  8461 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8462 ;; Tracked objects:
  8463 ;;		On entry : 0/0
  8464 ;;		On exit  : 0/0
  8465 ;;		Unchanged: 0/0
  8466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8467 ;;      Params:         0       0       0       0
  8468 ;;      Locals:         0       1       0       0
  8469 ;;      Temps:          0       2       0       0
  8470 ;;      Totals:         0       3       0       0
  8471 ;;Total ram usage:        3 bytes
  8472 ;; Hardware stack levels used:    1
  8473 ;; Hardware stack levels required when called:    3
  8474 ;; This function calls:
  8475 ;;		_LedPointSelect
  8476 ;; This function is called by:
  8477 ;;		_LED_Main
  8478 ;; This function uses a non-reentrant model
  8479 ;;
  8480                           
  8481                           
  8482                           ;psect for function _setLED_Main
  8483  0C86                     _setLED_Main:	
  8484                           
  8485                           ;incstack = 0
  8486                           ; Regs used in _setLED_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8487                           ;setLED_Main@led stored from wreg
  8488  0C86  1283               	bcf	3,5	;RP0=0, select bank0
  8489  0C87  1303               	bcf	3,6	;RP1=0, select bank0
  8490  0C88  00D9               	movwf	setLED_Main@led
  8491                           
  8492                           ;LED_B1.c: 230: LedPointSelect(led);
  8493  0C89  0859               	movf	setLED_Main@led,w
  8494  0C8A  158A  22F0  158A   	fcall	_LedPointSelect
  8495                           
  8496                           ;LED_B1.c: 231: if (LED->GO == 1) {
  8497  0C8D  0876               	movf	_LED,w
  8498  0C8E  0084               	movwf	4
  8499  0C8F  1383               	bcf	3,7	;select IRP bank0
  8500  0C90  1C80               	btfss	0,1
  8501  0C91  0008               	return
  8502                           
  8503                           ;LED_B1.c: 232: LED->Time++;
  8504  0C92  0A76               	incf	_LED,w
  8505  0C93  0084               	movwf	4
  8506  0C94  3001               	movlw	1
  8507  0C95  0780               	addwf	0,f
  8508  0C96  0A84               	incf	4,f
  8509  0C97  1803               	skipnc
  8510  0C98  0A80               	incf	0,f
  8511                           
  8512                           ;LED_B1.c: 233: if (LED->Time >= (500 / 20)) {
  8513  0C99  0A76               	incf	_LED,w
  8514  0C9A  0084               	movwf	4
  8515  0C9B  0800               	movf	0,w
  8516  0C9C  1283               	bcf	3,5	;RP0=0, select bank0
  8517  0C9D  1303               	bcf	3,6	;RP1=0, select bank0
  8518  0C9E  00D7               	movwf	??_setLED_Main
  8519  0C9F  0A84               	incf	4,f
  8520  0CA0  0800               	movf	0,w
  8521  0CA1  00D8               	movwf	??_setLED_Main+1
  8522  0CA2  3000               	movlw	0
  8523  0CA3  0258               	subwf	??_setLED_Main+1,w
  8524  0CA4  3019               	movlw	25
  8525  0CA5  1903               	skipnz
  8526  0CA6  0257               	subwf	??_setLED_Main,w
  8527  0CA7  1C03               	skipc
  8528  0CA8  0008               	return
  8529                           
  8530                           ;LED_B1.c: 234: LED->Time = 0;
  8531  0CA9  0A76               	incf	_LED,w
  8532  0CAA  0084               	movwf	4
  8533  0CAB  0180               	clrf	0
  8534  0CAC  0A84               	incf	4,f
  8535  0CAD  0180               	clrf	0
  8536                           
  8537                           ;LED_B1.c: 237: if (led == 1) {
  8538  0CAE  0859               	movf	setLED_Main@led,w
  8539  0CAF  3A01               	xorlw	1
  8540  0CB0  1D03               	skipz
  8541  0CB1  2CB4               	goto	l383
  8542                           
  8543                           ;LED_B1.c: 238: RC7 = RC7 == 1 ? 0 : 1;
  8544  0CB2  3080               	movlw	128
  8545  0CB3  0687               	xorwf	7,f
  8546  0CB4                     l383:	
  8547                           
  8548                           ;LED_B1.c: 239: }
  8549                           ;LED_B1.c: 242: if (led == 2) {
  8550  0CB4  0859               	movf	setLED_Main@led,w
  8551  0CB5  3A02               	xorlw	2
  8552  0CB6  1D03               	skipz
  8553  0CB7  2CBA               	goto	l384
  8554                           
  8555                           ;LED_B1.c: 243: RC6 = RC6 == 1 ? 0 : 1;
  8556  0CB8  3040               	movlw	64
  8557  0CB9  0687               	xorwf	7,f
  8558  0CBA                     l384:	
  8559                           
  8560                           ;LED_B1.c: 244: }
  8561                           ;LED_B1.c: 252: if (led == 99) {
  8562  0CBA  0859               	movf	setLED_Main@led,w
  8563  0CBB  3A63               	xorlw	99
  8564  0CBC  1D03               	skipz
  8565  0CBD  0008               	return
  8566                           
  8567                           ;LED_B1.c: 253: RC1 = RC1 == 1 ? 0 : 1;
  8568  0CBE  3002               	movlw	2
  8569  0CBF  0687               	xorwf	7,f
  8570  0CC0  0008               	return
  8571  0CC1                     __end_of_setLED_Main:	
  8572                           
  8573                           	psect	text54
  8574  095C                     __ptext54:	
  8575 ;; *************** function _LED_Initialization *****************
  8576 ;; Defined at:
  8577 ;;		line 31 in file "../src/LED_B1.c"
  8578 ;; Parameters:    Size  Location     Type
  8579 ;;		None
  8580 ;; Auto vars:     Size  Location     Type
  8581 ;;		None
  8582 ;; Return value:  Size  Location     Type
  8583 ;;		None               void
  8584 ;; Registers used:
  8585 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8586 ;; Tracked objects:
  8587 ;;		On entry : 0/0
  8588 ;;		On exit  : 0/0
  8589 ;;		Unchanged: 0/0
  8590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8591 ;;      Params:         0       0       0       0
  8592 ;;      Locals:         0       0       0       0
  8593 ;;      Temps:          0       0       0       0
  8594 ;;      Totals:         0       0       0       0
  8595 ;;Total ram usage:        0 bytes
  8596 ;; Hardware stack levels used:    1
  8597 ;; Hardware stack levels required when called:    5
  8598 ;; This function calls:
  8599 ;;		_setLED_Initialization
  8600 ;; This function is called by:
  8601 ;;		_main
  8602 ;; This function uses a non-reentrant model
  8603 ;;
  8604                           
  8605                           
  8606                           ;psect for function _LED_Initialization
  8607  095C                     _LED_Initialization:	
  8608                           
  8609                           ;LED_B1.c: 33: setLED_Initialization(1);
  8610                           
  8611                           ;incstack = 0
  8612                           ; Regs used in _LED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8613  095C  3001               	movlw	1
  8614  095D  158A  21F2  158A   	fcall	_setLED_Initialization
  8615                           
  8616                           ;LED_B1.c: 36: setLED_Initialization(2);
  8617  0960  3002               	movlw	2
  8618  0961  158A  21F2  158A   	fcall	_setLED_Initialization
  8619                           
  8620                           ;LED_B1.c: 42: setLED_Initialization(99);
  8621  0964  3063               	movlw	99
  8622  0965  158A  21F2         	fcall	_setLED_Initialization
  8623  0967  0008               	return
  8624  0968                     __end_of_LED_Initialization:	
  8625                           
  8626                           	psect	text55
  8627  09F2                     __ptext55:	
  8628 ;; *************** function _setLED_Initialization *****************
  8629 ;; Defined at:
  8630 ;;		line 74 in file "../src/LED_B1.c"
  8631 ;; Parameters:    Size  Location     Type
  8632 ;;  led             1    wreg     unsigned char 
  8633 ;; Auto vars:     Size  Location     Type
  8634 ;;  led             1    2[BANK0 ] unsigned char 
  8635 ;; Return value:  Size  Location     Type
  8636 ;;		None               void
  8637 ;; Registers used:
  8638 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8639 ;; Tracked objects:
  8640 ;;		On entry : 0/0
  8641 ;;		On exit  : 0/0
  8642 ;;		Unchanged: 0/0
  8643 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8644 ;;      Params:         0       0       0       0
  8645 ;;      Locals:         0       1       0       0
  8646 ;;      Temps:          0       0       0       0
  8647 ;;      Totals:         0       1       0       0
  8648 ;;Total ram usage:        1 bytes
  8649 ;; Hardware stack levels used:    1
  8650 ;; Hardware stack levels required when called:    4
  8651 ;; This function calls:
  8652 ;;		_LedPointSelect
  8653 ;;		_setLED
  8654 ;; This function is called by:
  8655 ;;		_LED_Initialization
  8656 ;; This function uses a non-reentrant model
  8657 ;;
  8658                           
  8659                           
  8660                           ;psect for function _setLED_Initialization
  8661  09F2                     _setLED_Initialization:	
  8662                           
  8663                           ;incstack = 0
  8664                           ; Regs used in _setLED_Initialization: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8665                           ;setLED_Initialization@led stored from wreg
  8666  09F2  1283               	bcf	3,5	;RP0=0, select bank0
  8667  09F3  1303               	bcf	3,6	;RP1=0, select bank0
  8668  09F4  00D9               	movwf	setLED_Initialization@led
  8669                           
  8670                           ;LED_B1.c: 75: LedPointSelect(led);
  8671  09F5  0859               	movf	setLED_Initialization@led,w
  8672  09F6  158A  22F0  158A   	fcall	_LedPointSelect
  8673                           
  8674                           ;LED_B1.c: 76: LED->Enable = 1;
  8675  09F9  0876               	movf	_LED,w
  8676  09FA  0084               	movwf	4
  8677  09FB  1383               	bcf	3,7	;select IRP bank0
  8678  09FC  1400               	bsf	0,0
  8679                           
  8680                           ;LED_B1.c: 77: setLED(led, 0);
  8681  09FD  1283               	bcf	3,5	;RP0=0, select bank0
  8682  09FE  1303               	bcf	3,6	;RP1=0, select bank0
  8683  09FF  01D7               	clrf	setLED@command
  8684  0A00  0859               	movf	setLED_Initialization@led,w
  8685  0A01  118A  27A6         	fcall	_setLED
  8686  0A03  0008               	return
  8687  0A04                     __end_of_setLED_Initialization:	
  8688                           
  8689                           	psect	text56
  8690  04E6                     __ptext56:	
  8691 ;; *************** function _Exception_Main *****************
  8692 ;; Defined at:
  8693 ;;		line 499 in file "../src/Main_B1.c"
  8694 ;; Parameters:    Size  Location     Type
  8695 ;;		None
  8696 ;; Auto vars:     Size  Location     Type
  8697 ;;  i               2   18[BANK0 ] int 
  8698 ;;  i               2   16[BANK0 ] int 
  8699 ;;  status          1   15[BANK0 ] unsigned char 
  8700 ;;  error           1   14[BANK0 ] unsigned char 
  8701 ;;  count           1   13[BANK0 ] unsigned char 
  8702 ;;  lights          1   12[BANK0 ] unsigned char 
  8703 ;; Return value:  Size  Location     Type
  8704 ;;		None               void
  8705 ;; Registers used:
  8706 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8707 ;; Tracked objects:
  8708 ;;		On entry : 0/0
  8709 ;;		On exit  : 0/0
  8710 ;;		Unchanged: 0/0
  8711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  8712 ;;      Params:         0       0       0       0
  8713 ;;      Locals:         0       8       0       0
  8714 ;;      Temps:          0       1       0       0
  8715 ;;      Totals:         0       9       0       0
  8716 ;;Total ram usage:        9 bytes
  8717 ;; Hardware stack levels used:    1
  8718 ;; Hardware stack levels required when called:    5
  8719 ;; This function calls:
  8720 ;;		_getAll_Lights_Line
  8721 ;;		_getLights_Status
  8722 ;;		_getMain_All_Error_Status
  8723 ;;		_getMain_All_LightsStatus
  8724 ;;		_setBuz
  8725 ;;		_setLED
  8726 ;;		_setLights_SwOff
  8727 ;;		_setLights_SwOn
  8728 ;; This function is called by:
  8729 ;;		_main
  8730 ;; This function uses a non-reentrant model
  8731 ;;
  8732                           
  8733                           
  8734                           ;psect for function _Exception_Main
  8735  04E6                     _Exception_Main:	
  8736                           
  8737                           ;Main_B1.c: 500: char error = getMain_All_Error_Status(0);
  8738                           
  8739                           ;incstack = 0
  8740                           ; Regs used in _Exception_Main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8741  04E6  3000               	movlw	0
  8742  04E7  158A  24C1  118A   	fcall	_getMain_All_Error_Status
  8743  04EA  1283               	bcf	3,5	;RP0=0, select bank0
  8744  04EB  1303               	bcf	3,6	;RP1=0, select bank0
  8745  04EC  00E2               	movwf	??_Exception_Main
  8746  04ED  0862               	movf	??_Exception_Main,w
  8747  04EE  00E5               	movwf	Exception_Main@error
  8748                           
  8749                           ;Main_B1.c: 501: char lights = 0, count = 2;
  8750  04EF  01E3               	clrf	Exception_Main@lights
  8751  04F0  3002               	movlw	2
  8752  04F1  00E2               	movwf	??_Exception_Main
  8753  04F2  0862               	movf	??_Exception_Main,w
  8754  04F3  00E4               	movwf	Exception_Main@count
  8755                           
  8756                           ;Main_B1.c: 502: char status = 0;
  8757  04F4  01E6               	clrf	Exception_Main@status
  8758                           
  8759                           ;Main_B1.c: 504: if (myMain.Error_Run == 1) {
  8760  04F5  1DB3               	btfss	_myMain+2,3
  8761  04F6  2D03               	goto	l6115
  8762                           
  8763                           ;Main_B1.c: 505: if (error == 0) {
  8764  04F7  08E5               	movf	Exception_Main@error,f
  8765  04F8  1D03               	skipz
  8766  04F9  0008               	return
  8767                           
  8768                           ;Main_B1.c: 506: myMain.Error_Run = 0;
  8769  04FA  11B3               	bcf	_myMain+2,3
  8770                           
  8771                           ;Main_B1.c: 509: setLED(99, 10);
  8772  04FB  300A               	movlw	10
  8773  04FC  00E2               	movwf	??_Exception_Main
  8774  04FD  0862               	movf	??_Exception_Main,w
  8775  04FE  00D7               	movwf	setLED@command
  8776  04FF  3063               	movlw	99
  8777  0500  118A  27A6         	fcall	_setLED
  8778                           
  8779                           ;Main_B1.c: 522: }
  8780                           ;Main_B1.c: 523: } else {
  8781  0502  0008               	return
  8782  0503                     l6115:	
  8783                           
  8784                           ;Main_B1.c: 524: if (error != 0) {
  8785  0503  1283               	bcf	3,5	;RP0=0, select bank0
  8786  0504  1303               	bcf	3,6	;RP1=0, select bank0
  8787  0505  0865               	movf	Exception_Main@error,w
  8788  0506  1903               	btfsc	3,2
  8789  0507  0008               	return
  8790                           
  8791                           ;Main_B1.c: 525: myMain.Error_Run = 1;
  8792  0508  15B3               	bsf	_myMain+2,3
  8793                           
  8794                           ;Main_B1.c: 527: setLED(99, 11);
  8795  0509  300B               	movlw	11
  8796  050A  00E2               	movwf	??_Exception_Main
  8797  050B  0862               	movf	??_Exception_Main,w
  8798  050C  00D7               	movwf	setLED@command
  8799  050D  3063               	movlw	99
  8800  050E  118A  27A6  118A   	fcall	_setLED
  8801                           
  8802                           ;Main_B1.c: 591: switch (error) {
  8803  0511  2DAF               	goto	l6155
  8804  0512                     l6121:	
  8805                           ;Main_B1.c: 592: case 1:
  8806                           
  8807                           
  8808                           ;Main_B1.c: 593: for (int i = 0; i < count; i++) {
  8809  0512  1283               	bcf	3,5	;RP0=0, select bank0
  8810  0513  1303               	bcf	3,6	;RP1=0, select bank0
  8811  0514  01E7               	clrf	Exception_Main@i
  8812  0515  01E8               	clrf	Exception_Main@i+1
  8813  0516                     l6129:	
  8814  0516  0868               	movf	Exception_Main@i+1,w
  8815  0517  3A80               	xorlw	128
  8816  0518  00E2               	movwf	??_Exception_Main
  8817  0519  3080               	movlw	128
  8818  051A  0262               	subwf	??_Exception_Main,w
  8819  051B  1D03               	skipz
  8820  051C  2D1F               	goto	u7935
  8821  051D  0864               	movf	Exception_Main@count,w
  8822  051E  0267               	subwf	Exception_Main@i,w
  8823  051F                     u7935:	
  8824  051F  1803               	btfsc	3,0
  8825  0520  2D42               	goto	u7930
  8826                           
  8827                           ;Main_B1.c: 594: if (getLights_Status(i + 1) == 1) {
  8828  0521  1283               	bcf	3,5	;RP0=0, select bank0
  8829  0522  1303               	bcf	3,6	;RP1=0, select bank0
  8830  0523  0867               	movf	Exception_Main@i,w
  8831  0524  3E01               	addlw	1
  8832  0525  158A  21D0  118A   	fcall	_getLights_Status
  8833  0528  3A01               	xorlw	1
  8834  0529  1D03               	skipz
  8835  052A  2D39               	goto	l6127
  8836                           
  8837                           ;Main_B1.c: 596: setLights_SwOn(i + 1);
  8838  052B  1283               	bcf	3,5	;RP0=0, select bank0
  8839  052C  1303               	bcf	3,6	;RP1=0, select bank0
  8840  052D  0867               	movf	Exception_Main@i,w
  8841  052E  3E01               	addlw	1
  8842  052F  158A  24FF  118A   	fcall	_setLights_SwOn
  8843                           
  8844                           ;Main_B1.c: 597: setLights_SwOff(i + 1);
  8845  0532  1283               	bcf	3,5	;RP0=0, select bank0
  8846  0533  1303               	bcf	3,6	;RP1=0, select bank0
  8847  0534  0867               	movf	Exception_Main@i,w
  8848  0535  3E01               	addlw	1
  8849  0536  158A  2420  118A   	fcall	_setLights_SwOff
  8850  0539                     l6127:	
  8851  0539  3001               	movlw	1
  8852  053A  1283               	bcf	3,5	;RP0=0, select bank0
  8853  053B  1303               	bcf	3,6	;RP1=0, select bank0
  8854  053C  07E7               	addwf	Exception_Main@i,f
  8855  053D  1803               	skipnc
  8856  053E  0AE8               	incf	Exception_Main@i+1,f
  8857  053F  3000               	movlw	0
  8858  0540  07E8               	addwf	Exception_Main@i+1,f
  8859  0541  2D16               	goto	l6129
  8860  0542                     u7930:	
  8861  0542  1283               	bcf	3,5	;RP0=0, select bank0
  8862  0543  1303               	bcf	3,6	;RP1=0, select bank0
  8863  0544  0008               	return
  8864  0545                     l6131:	
  8865                           ;Main_B1.c: 601: case 2:
  8866                           
  8867                           ;Main_B1.c: 598: }
  8868                           ;Main_B1.c: 599: }
  8869                           ;Main_B1.c: 600: break;
  8870                           
  8871                           
  8872                           ;Main_B1.c: 602: if (getMain_All_LightsStatus() == 1) {
  8873  0545  158A  21C0  118A   	fcall	_getMain_All_LightsStatus
  8874  0548  3A01               	xorlw	1
  8875  0549  1D03               	skipz
  8876  054A  2D55               	goto	l6135
  8877                           
  8878                           ;Main_B1.c: 603: setBuz(10, 300);
  8879  054B  302C               	movlw	44
  8880  054C  1283               	bcf	3,5	;RP0=0, select bank0
  8881  054D  1303               	bcf	3,6	;RP1=0, select bank0
  8882  054E  00DF               	movwf	setBuz@time
  8883  054F  3001               	movlw	1
  8884  0550  00E0               	movwf	setBuz@time+1
  8885  0551  300A               	movlw	10
  8886  0552  158A  2605  118A   	fcall	_setBuz
  8887  0555                     l6135:	
  8888                           
  8889                           ;Main_B1.c: 604: }
  8890                           ;Main_B1.c: 606: for (int i = 0; i < count; i++) {
  8891  0555  1283               	bcf	3,5	;RP0=0, select bank0
  8892  0556  1303               	bcf	3,6	;RP1=0, select bank0
  8893  0557  01E9               	clrf	Exception_Main@i_2440
  8894  0558  01EA               	clrf	Exception_Main@i_2440+1
  8895  0559                     l6143:	
  8896  0559  086A               	movf	Exception_Main@i_2440+1,w
  8897  055A  3A80               	xorlw	128
  8898  055B  00E2               	movwf	??_Exception_Main
  8899  055C  3080               	movlw	128
  8900  055D  0262               	subwf	??_Exception_Main,w
  8901  055E  1D03               	skipz
  8902  055F  2D62               	goto	u7965
  8903  0560  0864               	movf	Exception_Main@count,w
  8904  0561  0269               	subwf	Exception_Main@i_2440,w
  8905  0562                     u7965:	
  8906  0562  1803               	btfsc	3,0
  8907  0563  2D85               	goto	u7960
  8908                           
  8909                           ;Main_B1.c: 607: if (getLights_Status(i + 1) == 1) {
  8910  0564  1283               	bcf	3,5	;RP0=0, select bank0
  8911  0565  1303               	bcf	3,6	;RP1=0, select bank0
  8912  0566  0869               	movf	Exception_Main@i_2440,w
  8913  0567  3E01               	addlw	1
  8914  0568  158A  21D0  118A   	fcall	_getLights_Status
  8915  056B  3A01               	xorlw	1
  8916  056C  1D03               	skipz
  8917  056D  2D7C               	goto	l6141
  8918                           
  8919                           ;Main_B1.c: 608: setLights_SwOn(i + 1);
  8920  056E  1283               	bcf	3,5	;RP0=0, select bank0
  8921  056F  1303               	bcf	3,6	;RP1=0, select bank0
  8922  0570  0869               	movf	Exception_Main@i_2440,w
  8923  0571  3E01               	addlw	1
  8924  0572  158A  24FF  118A   	fcall	_setLights_SwOn
  8925                           
  8926                           ;Main_B1.c: 609: setLights_SwOff(i + 1);
  8927  0575  1283               	bcf	3,5	;RP0=0, select bank0
  8928  0576  1303               	bcf	3,6	;RP1=0, select bank0
  8929  0577  0869               	movf	Exception_Main@i_2440,w
  8930  0578  3E01               	addlw	1
  8931  0579  158A  2420  118A   	fcall	_setLights_SwOff
  8932  057C                     l6141:	
  8933  057C  3001               	movlw	1
  8934  057D  1283               	bcf	3,5	;RP0=0, select bank0
  8935  057E  1303               	bcf	3,6	;RP1=0, select bank0
  8936  057F  07E9               	addwf	Exception_Main@i_2440,f
  8937  0580  1803               	skipnc
  8938  0581  0AEA               	incf	Exception_Main@i_2440+1,f
  8939  0582  3000               	movlw	0
  8940  0583  07EA               	addwf	Exception_Main@i_2440+1,f
  8941  0584  2D59               	goto	l6143
  8942  0585                     u7960:	
  8943  0585  1283               	bcf	3,5	;RP0=0, select bank0
  8944  0586  1303               	bcf	3,6	;RP1=0, select bank0
  8945  0587  0008               	return
  8946  0588                     l6145:	
  8947                           ;Main_B1.c: 613: case 3:
  8948                           
  8949                           ;Main_B1.c: 610: }
  8950                           ;Main_B1.c: 611: }
  8951                           ;Main_B1.c: 612: break;
  8952                           
  8953                           
  8954                           ;Main_B1.c: 614: status = getAll_Lights_Line();
  8955  0588  158A  21B0  118A   	fcall	_getAll_Lights_Line
  8956  058B  1283               	bcf	3,5	;RP0=0, select bank0
  8957  058C  1303               	bcf	3,6	;RP1=0, select bank0
  8958  058D  00E2               	movwf	??_Exception_Main
  8959  058E  0862               	movf	??_Exception_Main,w
  8960  058F  00E6               	movwf	Exception_Main@status
  8961                           
  8962                           ;Main_B1.c: 616: if (getLights_Status(status) == 1) {
  8963  0590  0866               	movf	Exception_Main@status,w
  8964  0591  158A  21D0  118A   	fcall	_getLights_Status
  8965  0594  3A01               	xorlw	1
  8966  0595  1D03               	skipz
  8967  0596  2DA3               	goto	l6151
  8968                           
  8969                           ;Main_B1.c: 617: setLights_SwOn(status);
  8970  0597  1283               	bcf	3,5	;RP0=0, select bank0
  8971  0598  1303               	bcf	3,6	;RP1=0, select bank0
  8972  0599  0866               	movf	Exception_Main@status,w
  8973  059A  158A  24FF  118A   	fcall	_setLights_SwOn
  8974                           
  8975                           ;Main_B1.c: 618: setLights_SwOff(status);
  8976  059D  1283               	bcf	3,5	;RP0=0, select bank0
  8977  059E  1303               	bcf	3,6	;RP1=0, select bank0
  8978  059F  0866               	movf	Exception_Main@status,w
  8979  05A0  158A  2420  118A   	fcall	_setLights_SwOff
  8980  05A3                     l6151:	
  8981                           
  8982                           ;Main_B1.c: 620: }
  8983                           ;Main_B1.c: 621: setBuz(5, 300);
  8984  05A3  302C               	movlw	44
  8985  05A4  1283               	bcf	3,5	;RP0=0, select bank0
  8986  05A5  1303               	bcf	3,6	;RP1=0, select bank0
  8987  05A6  00DF               	movwf	setBuz@time
  8988  05A7  3001               	movlw	1
  8989  05A8  00E0               	movwf	setBuz@time+1
  8990  05A9  3005               	movlw	5
  8991  05AA  158A  2605         	fcall	_setBuz
  8992                           
  8993                           ;Main_B1.c: 622: break;
  8994  05AC  1283               	bcf	3,5	;RP0=0, select bank0
  8995  05AD  1303               	bcf	3,6	;RP1=0, select bank0
  8996  05AE  0008               	return
  8997  05AF                     l6155:	
  8998                           ;Main_B1.c: 623: }
  8999                           
  9000  05AF  1283               	bcf	3,5	;RP0=0, select bank0
  9001  05B0  1303               	bcf	3,6	;RP1=0, select bank0
  9002  05B1  0865               	movf	Exception_Main@error,w
  9003                           
  9004                           ; Switch size 1, requested type "space"
  9005                           ; Number of cases is 3, Range of values is 1 to 3
  9006                           ; switch strategies available:
  9007                           ; Name         Instructions Cycles
  9008                           ; simple_byte           10     6 (average)
  9009                           ; direct_byte           16    10 (fixed)
  9010                           ; jumptable            263     9 (fixed)
  9011                           ;	Chosen strategy is simple_byte
  9012  05B2  3A01               	xorlw	1	; case 1
  9013  05B3  1903               	skipnz
  9014  05B4  2D12               	goto	l6121
  9015  05B5  3A03               	xorlw	3	; case 2
  9016  05B6  1903               	skipnz
  9017  05B7  2D45               	goto	l6131
  9018  05B8  3A01               	xorlw	1	; case 3
  9019  05B9  1903               	skipnz
  9020  05BA  2D88               	goto	l6145
  9021  05BB  2DBD               	goto	l731
  9022  05BC  0008               	return
  9023  05BD                     l731:	
  9024  05BD  0008               	return
  9025  05BE                     __end_of_Exception_Main:	
  9026                           
  9027                           	psect	text57
  9028  0CFF                     __ptext57:	
  9029 ;; *************** function _setLights_SwOn *****************
  9030 ;; Defined at:
  9031 ;;		line 410 in file "../src/TriacRelay_B1.c"
  9032 ;; Parameters:    Size  Location     Type
  9033 ;;  sw              1    wreg     unsigned char 
  9034 ;; Auto vars:     Size  Location     Type
  9035 ;;  sw              1    3[BANK0 ] unsigned char 
  9036 ;; Return value:  Size  Location     Type
  9037 ;;		None               void
  9038 ;; Registers used:
  9039 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9040 ;; Tracked objects:
  9041 ;;		On entry : 0/0
  9042 ;;		On exit  : 0/0
  9043 ;;		Unchanged: 0/0
  9044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9045 ;;      Params:         0       0       0       0
  9046 ;;      Locals:         0       1       0       0
  9047 ;;      Temps:          0       0       0       0
  9048 ;;      Totals:         0       1       0       0
  9049 ;;Total ram usage:        1 bytes
  9050 ;; Hardware stack levels used:    1
  9051 ;; Hardware stack levels required when called:    4
  9052 ;; This function calls:
  9053 ;;		_LightsPointSelect
  9054 ;;		_getLights_Status
  9055 ;;		_setLights_Trigger
  9056 ;; This function is called by:
  9057 ;;		_Exception_Main
  9058 ;;		_PIR_Main
  9059 ;;		_setSw_Main
  9060 ;; This function uses a non-reentrant model
  9061 ;;
  9062                           
  9063                           
  9064                           ;psect for function _setLights_SwOn
  9065  0CFF                     _setLights_SwOn:	
  9066                           
  9067                           ;incstack = 0
  9068                           ; Regs used in _setLights_SwOn: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9069                           ;setLights_SwOn@sw stored from wreg
  9070  0CFF  1283               	bcf	3,5	;RP0=0, select bank0
  9071  0D00  1303               	bcf	3,6	;RP1=0, select bank0
  9072  0D01  00DA               	movwf	setLights_SwOn@sw
  9073                           
  9074                           ;TriacRelay_B1.c: 411: LightsPointSelect(sw);
  9075  0D02  085A               	movf	setLights_SwOn@sw,w
  9076  0D03  158A  2204  158A   	fcall	_LightsPointSelect
  9077                           
  9078                           ;TriacRelay_B1.c: 422: Lights->SwFlag = 1;
  9079  0D06  0A78               	incf	_Lights,w
  9080  0D07  0084               	movwf	4
  9081  0D08  1383               	bcf	3,7	;select IRP bank0
  9082  0D09  1500               	bsf	0,2
  9083                           
  9084                           ;TriacRelay_B1.c: 423: if (sw == 1) {
  9085  0D0A  1283               	bcf	3,5	;RP0=0, select bank0
  9086  0D0B  1303               	bcf	3,6	;RP1=0, select bank0
  9087  0D0C  085A               	movf	setLights_SwOn@sw,w
  9088  0D0D  3A01               	xorlw	1
  9089  0D0E  1D03               	skipz
  9090  0D0F  2D28               	goto	l5233
  9091                           
  9092                           ;TriacRelay_B1.c: 424: if (getLights_Status(sw) == 0) {
  9093  0D10  085A               	movf	setLights_SwOn@sw,w
  9094  0D11  158A  21D0  158A   	fcall	_getLights_Status
  9095  0D14  3800               	iorlw	0
  9096  0D15  1D03               	skipz
  9097  0D16  2D23               	goto	l5231
  9098                           
  9099                           ;TriacRelay_B1.c: 425: Lights->SwStatus = 1;
  9100  0D17  0A78               	incf	_Lights,w
  9101  0D18  0084               	movwf	4
  9102  0D19  1383               	bcf	3,7	;select IRP bank0
  9103  0D1A  1580               	bsf	0,3
  9104                           
  9105                           ;TriacRelay_B1.c: 426: setLights_Trigger(sw, 1);
  9106  0D1B  1283               	bcf	3,5	;RP0=0, select bank0
  9107  0D1C  1303               	bcf	3,6	;RP1=0, select bank0
  9108  0D1D  01D7               	clrf	setLights_Trigger@command
  9109  0D1E  0AD7               	incf	setLights_Trigger@command,f
  9110  0D1F  085A               	movf	setLights_SwOn@sw,w
  9111  0D20  158A  230A         	fcall	_setLights_Trigger
  9112                           
  9113                           ;TriacRelay_B1.c: 427: } else {
  9114  0D22  0008               	return
  9115  0D23                     l5231:	
  9116                           
  9117                           ;TriacRelay_B1.c: 428: Lights->SwStatus = 0;
  9118  0D23  0A78               	incf	_Lights,w
  9119  0D24  0084               	movwf	4
  9120  0D25  1383               	bcf	3,7	;select IRP bank0
  9121  0D26  1180               	bcf	0,3
  9122                           
  9123                           ;TriacRelay_B1.c: 429: }
  9124                           ;TriacRelay_B1.c: 430: } else if (sw == 2) {
  9125  0D27  0008               	return
  9126  0D28                     l5233:	
  9127  0D28  1283               	bcf	3,5	;RP0=0, select bank0
  9128  0D29  1303               	bcf	3,6	;RP1=0, select bank0
  9129  0D2A  085A               	movf	setLights_SwOn@sw,w
  9130  0D2B  3A02               	xorlw	2
  9131  0D2C  1D03               	skipz
  9132  0D2D  0008               	return
  9133                           
  9134                           ;TriacRelay_B1.c: 431: if (getLights_Status(sw) == 0) {
  9135  0D2E  085A               	movf	setLights_SwOn@sw,w
  9136  0D2F  158A  21D0  158A   	fcall	_getLights_Status
  9137  0D32  3800               	iorlw	0
  9138  0D33  1D03               	skipz
  9139  0D34  0008               	return
  9140                           
  9141                           ;TriacRelay_B1.c: 432: setLights_Trigger(sw, 1);
  9142  0D35  1283               	bcf	3,5	;RP0=0, select bank0
  9143  0D36  1303               	bcf	3,6	;RP1=0, select bank0
  9144  0D37  01D7               	clrf	setLights_Trigger@command
  9145  0D38  0AD7               	incf	setLights_Trigger@command,f
  9146  0D39  085A               	movf	setLights_SwOn@sw,w
  9147  0D3A  158A  230A         	fcall	_setLights_Trigger
  9148  0D3C  0008               	return
  9149  0D3D                     __end_of_setLights_SwOn:	
  9150                           
  9151                           	psect	text58
  9152  0C20                     __ptext58:	
  9153 ;; *************** function _setLights_SwOff *****************
  9154 ;; Defined at:
  9155 ;;		line 438 in file "../src/TriacRelay_B1.c"
  9156 ;; Parameters:    Size  Location     Type
  9157 ;;  sw              1    wreg     unsigned char 
  9158 ;; Auto vars:     Size  Location     Type
  9159 ;;  sw              1    3[BANK0 ] unsigned char 
  9160 ;; Return value:  Size  Location     Type
  9161 ;;		None               void
  9162 ;; Registers used:
  9163 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9164 ;; Tracked objects:
  9165 ;;		On entry : 0/0
  9166 ;;		On exit  : 0/0
  9167 ;;		Unchanged: 0/0
  9168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9169 ;;      Params:         0       0       0       0
  9170 ;;      Locals:         0       1       0       0
  9171 ;;      Temps:          0       0       0       0
  9172 ;;      Totals:         0       1       0       0
  9173 ;;Total ram usage:        1 bytes
  9174 ;; Hardware stack levels used:    1
  9175 ;; Hardware stack levels required when called:    4
  9176 ;; This function calls:
  9177 ;;		_LightsPointSelect
  9178 ;;		_getLights_Status
  9179 ;;		_setLights_Trigger
  9180 ;; This function is called by:
  9181 ;;		_Exception_Main
  9182 ;;		_PIR_Main
  9183 ;;		_setSw_Main
  9184 ;; This function uses a non-reentrant model
  9185 ;;
  9186                           
  9187                           
  9188                           ;psect for function _setLights_SwOff
  9189  0C20                     _setLights_SwOff:	
  9190                           
  9191                           ;incstack = 0
  9192                           ; Regs used in _setLights_SwOff: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9193                           ;setLights_SwOff@sw stored from wreg
  9194  0C20  1283               	bcf	3,5	;RP0=0, select bank0
  9195  0C21  1303               	bcf	3,6	;RP1=0, select bank0
  9196  0C22  00DA               	movwf	setLights_SwOff@sw
  9197                           
  9198                           ;TriacRelay_B1.c: 440: LightsPointSelect(sw);
  9199  0C23  085A               	movf	setLights_SwOff@sw,w
  9200  0C24  158A  2204  158A   	fcall	_LightsPointSelect
  9201                           
  9202                           ;TriacRelay_B1.c: 449: if (sw == 1) {
  9203  0C27  1283               	bcf	3,5	;RP0=0, select bank0
  9204  0C28  1303               	bcf	3,6	;RP1=0, select bank0
  9205  0C29  085A               	movf	setLights_SwOff@sw,w
  9206  0C2A  3A01               	xorlw	1
  9207  0C2B  1D03               	skipz
  9208  0C2C  2C3E               	goto	l5249
  9209                           
  9210                           ;TriacRelay_B1.c: 450: if (Lights->SwFlag == 1) {
  9211  0C2D  0A78               	incf	_Lights,w
  9212  0C2E  0084               	movwf	4
  9213  0C2F  1383               	bcf	3,7	;select IRP bank0
  9214  0C30  1D00               	btfss	0,2
  9215  0C31  0008               	return
  9216                           
  9217                           ;TriacRelay_B1.c: 451: Lights->SwFlag = 0;
  9218  0C32  0A78               	incf	_Lights,w
  9219  0C33  0084               	movwf	4
  9220  0C34  1100               	bcf	0,2
  9221                           
  9222                           ;TriacRelay_B1.c: 452: if (Lights->SwStatus == 0) {
  9223  0C35  0A78               	incf	_Lights,w
  9224  0C36  0084               	movwf	4
  9225  0C37  1980               	btfsc	0,3
  9226  0C38  0008               	return
  9227                           
  9228                           ;TriacRelay_B1.c: 453: setLights_Trigger(sw, 0);
  9229  0C39  01D7               	clrf	setLights_Trigger@command
  9230  0C3A  085A               	movf	setLights_SwOff@sw,w
  9231  0C3B  158A  230A         	fcall	_setLights_Trigger
  9232                           
  9233                           ;TriacRelay_B1.c: 454: }
  9234                           ;TriacRelay_B1.c: 455: }
  9235                           ;TriacRelay_B1.c: 456: } else if (sw == 2) {
  9236  0C3D  0008               	return
  9237  0C3E                     l5249:	
  9238  0C3E  1283               	bcf	3,5	;RP0=0, select bank0
  9239  0C3F  1303               	bcf	3,6	;RP1=0, select bank0
  9240  0C40  085A               	movf	setLights_SwOff@sw,w
  9241  0C41  3A02               	xorlw	2
  9242  0C42  1D03               	skipz
  9243  0C43  0008               	return
  9244                           
  9245                           ;TriacRelay_B1.c: 457: if (getLights_Status(sw) == 1) {
  9246  0C44  085A               	movf	setLights_SwOff@sw,w
  9247  0C45  158A  21D0  158A   	fcall	_getLights_Status
  9248  0C48  3A01               	xorlw	1
  9249  0C49  1D03               	skipz
  9250  0C4A  0008               	return
  9251                           
  9252                           ;TriacRelay_B1.c: 458: setLights_Trigger(sw, 0);
  9253  0C4B  1283               	bcf	3,5	;RP0=0, select bank0
  9254  0C4C  1303               	bcf	3,6	;RP1=0, select bank0
  9255  0C4D  01D7               	clrf	setLights_Trigger@command
  9256  0C4E  085A               	movf	setLights_SwOff@sw,w
  9257  0C4F  158A  230A         	fcall	_setLights_Trigger
  9258  0C51  0008               	return
  9259  0C52                     __end_of_setLights_SwOff:	
  9260                           
  9261                           	psect	text59
  9262  0B0A                     __ptext59:	
  9263 ;; *************** function _setLights_Trigger *****************
  9264 ;; Defined at:
  9265 ;;		line 278 in file "../src/TriacRelay_B1.c"
  9266 ;; Parameters:    Size  Location     Type
  9267 ;;  lights          1    wreg     unsigned char 
  9268 ;;  command         1    0[BANK0 ] unsigned char 
  9269 ;; Auto vars:     Size  Location     Type
  9270 ;;  lights          1    2[BANK0 ] unsigned char 
  9271 ;; Return value:  Size  Location     Type
  9272 ;;		None               void
  9273 ;; Registers used:
  9274 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9275 ;; Tracked objects:
  9276 ;;		On entry : 0/0
  9277 ;;		On exit  : 0/0
  9278 ;;		Unchanged: 0/0
  9279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9280 ;;      Params:         0       1       0       0
  9281 ;;      Locals:         0       1       0       0
  9282 ;;      Temps:          0       1       0       0
  9283 ;;      Totals:         0       3       0       0
  9284 ;;Total ram usage:        3 bytes
  9285 ;; Hardware stack levels used:    1
  9286 ;; Hardware stack levels required when called:    3
  9287 ;; This function calls:
  9288 ;;		_LightsPointSelect
  9289 ;; This function is called by:
  9290 ;;		_setLights_SwOn
  9291 ;;		_setLights_SwOff
  9292 ;;		_setLights_ErrorClose
  9293 ;; This function uses a non-reentrant model
  9294 ;;
  9295                           
  9296                           
  9297                           ;psect for function _setLights_Trigger
  9298  0B0A                     _setLights_Trigger:	
  9299                           
  9300                           ;incstack = 0
  9301                           ; Regs used in _setLights_Trigger: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9302                           ;setLights_Trigger@lights stored from wreg
  9303  0B0A  1283               	bcf	3,5	;RP0=0, select bank0
  9304  0B0B  1303               	bcf	3,6	;RP1=0, select bank0
  9305  0B0C  00D9               	movwf	setLights_Trigger@lights
  9306                           
  9307                           ;TriacRelay_B1.c: 279: LightsPointSelect(lights);
  9308  0B0D  0859               	movf	setLights_Trigger@lights,w
  9309  0B0E  158A  2204         	fcall	_LightsPointSelect
  9310                           
  9311                           ;TriacRelay_B1.c: 280: Lights->Trigger = 1;
  9312  0B10  0878               	movf	_Lights,w
  9313  0B11  0084               	movwf	4
  9314  0B12  1383               	bcf	3,7	;select IRP bank0
  9315  0B13  1580               	bsf	0,3
  9316                           
  9317                           ;TriacRelay_B1.c: 281: Lights->Switch = command == 1 ? 1 : 0;
  9318  0B14  1283               	bcf	3,5	;RP0=0, select bank0
  9319  0B15  1303               	bcf	3,6	;RP1=0, select bank0
  9320  0B16  0857               	movf	setLights_Trigger@command,w
  9321  0B17  3A01               	xorlw	1
  9322  0B18  3000               	movlw	0
  9323  0B19  1903               	skipnz
  9324  0B1A  3001               	movlw	1
  9325  0B1B  00D8               	movwf	??_setLights_Trigger
  9326  0B1C  0878               	movf	_Lights,w
  9327  0B1D  0084               	movwf	4
  9328  0B1E  0ED8               	swapf	??_setLights_Trigger,f
  9329  0B1F  0800               	movf	0,w
  9330  0B20  0658               	xorwf	??_setLights_Trigger,w
  9331  0B21  39EF               	andlw	-17
  9332  0B22  0658               	xorwf	??_setLights_Trigger,w
  9333  0B23  0080               	movwf	0
  9334  0B24  0008               	return
  9335  0B25                     __end_of_setLights_Trigger:	
  9336                           
  9337                           	psect	text60
  9338  09D0                     __ptext60:	
  9339 ;; *************** function _getLights_Status *****************
  9340 ;; Defined at:
  9341 ;;		line 271 in file "../src/TriacRelay_B1.c"
  9342 ;; Parameters:    Size  Location     Type
  9343 ;;  lights          1    wreg     unsigned char 
  9344 ;; Auto vars:     Size  Location     Type
  9345 ;;  lights          1    0[BANK0 ] unsigned char 
  9346 ;;  status          1    1[BANK0 ] unsigned char 
  9347 ;; Return value:  Size  Location     Type
  9348 ;;                  1    wreg      unsigned char 
  9349 ;; Registers used:
  9350 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9351 ;; Tracked objects:
  9352 ;;		On entry : 0/0
  9353 ;;		On exit  : 0/0
  9354 ;;		Unchanged: 0/0
  9355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9356 ;;      Params:         0       0       0       0
  9357 ;;      Locals:         0       2       0       0
  9358 ;;      Temps:          0       0       0       0
  9359 ;;      Totals:         0       2       0       0
  9360 ;;Total ram usage:        2 bytes
  9361 ;; Hardware stack levels used:    1
  9362 ;; Hardware stack levels required when called:    3
  9363 ;; This function calls:
  9364 ;;		_LightsPointSelect
  9365 ;; This function is called by:
  9366 ;;		_Exception_Main
  9367 ;;		_PIR_Main
  9368 ;;		_setLights_SwOn
  9369 ;;		_setLights_SwOff
  9370 ;;		_setLights_ErrorClose
  9371 ;; This function uses a non-reentrant model
  9372 ;;
  9373                           
  9374                           
  9375                           ;psect for function _getLights_Status
  9376  09D0                     _getLights_Status:	
  9377                           
  9378                           ;incstack = 0
  9379                           ; Regs used in _getLights_Status: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9380                           ;getLights_Status@lights stored from wreg
  9381  09D0  1283               	bcf	3,5	;RP0=0, select bank0
  9382  09D1  1303               	bcf	3,6	;RP1=0, select bank0
  9383  09D2  00D7               	movwf	getLights_Status@lights
  9384                           
  9385                           ;TriacRelay_B1.c: 272: LightsPointSelect(lights);
  9386  09D3  0857               	movf	getLights_Status@lights,w
  9387  09D4  158A  2204         	fcall	_LightsPointSelect
  9388                           
  9389                           ;TriacRelay_B1.c: 273: char status = Lights->Status == 1 ? 1 : 0;
  9390  09D6  0878               	movf	_Lights,w
  9391  09D7  0084               	movwf	4
  9392  09D8  3000               	movlw	0
  9393  09D9  1383               	bcf	3,7	;select IRP bank0
  9394  09DA  1900               	btfsc	0,2
  9395  09DB  3001               	movlw	1
  9396  09DC  1283               	bcf	3,5	;RP0=0, select bank0
  9397  09DD  1303               	bcf	3,6	;RP1=0, select bank0
  9398  09DE  00D8               	movwf	getLights_Status@status
  9399                           
  9400                           ;TriacRelay_B1.c: 274: return status;
  9401  09DF  0858               	movf	getLights_Status@status,w
  9402  09E0  0008               	return
  9403  09E1                     __end_of_getLights_Status:	
  9404                           
  9405                           	psect	text61
  9406  0A04                     __ptext61:	
  9407 ;; *************** function _LightsPointSelect *****************
  9408 ;; Defined at:
  9409 ;;		line 10 in file "../src/TriacRelay_B1.c"
  9410 ;; Parameters:    Size  Location     Type
  9411 ;;  lights          1    wreg     unsigned char 
  9412 ;; Auto vars:     Size  Location     Type
  9413 ;;  lights          1    5[COMMON] unsigned char 
  9414 ;; Return value:  Size  Location     Type
  9415 ;;		None               void
  9416 ;; Registers used:
  9417 ;;		wreg
  9418 ;; Tracked objects:
  9419 ;;		On entry : 0/0
  9420 ;;		On exit  : 0/0
  9421 ;;		Unchanged: 0/0
  9422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9423 ;;      Params:         0       0       0       0
  9424 ;;      Locals:         1       0       0       0
  9425 ;;      Temps:          1       0       0       0
  9426 ;;      Totals:         2       0       0       0
  9427 ;;Total ram usage:        2 bytes
  9428 ;; Hardware stack levels used:    1
  9429 ;; Hardware stack levels required when called:    2
  9430 ;; This function calls:
  9431 ;;		Nothing
  9432 ;; This function is called by:
  9433 ;;		_setLights_Initialization
  9434 ;;		_setLights_Main
  9435 ;;		_Lights_Control
  9436 ;;		_getLights_Status
  9437 ;;		_setLights_Trigger
  9438 ;;		_setLights_SwOn
  9439 ;;		_setLights_SwOff
  9440 ;; This function uses a non-reentrant model
  9441 ;;
  9442                           
  9443                           
  9444                           ;psect for function _LightsPointSelect
  9445  0A04                     _LightsPointSelect:	
  9446                           
  9447                           ;incstack = 0
  9448                           ; Regs used in _LightsPointSelect: [wreg]
  9449                           ;LightsPointSelect@lights stored from wreg
  9450  0A04  00F5               	movwf	LightsPointSelect@lights
  9451                           
  9452                           ;TriacRelay_B1.c: 13: if (lights == 1) {
  9453  0A05  0875               	movf	LightsPointSelect@lights,w
  9454  0A06  3A01               	xorlw	1
  9455  0A07  1D03               	skipz
  9456  0A08  2A0E               	goto	l5061
  9457                           
  9458                           ;TriacRelay_B1.c: 14: Lights = &Lights1;
  9459  0A09  3049               	movlw	_Lights1& (0+255)
  9460  0A0A  00F4               	movwf	??_LightsPointSelect
  9461  0A0B  0874               	movf	??_LightsPointSelect,w
  9462  0A0C  00F8               	movwf	_Lights
  9463                           
  9464                           ;TriacRelay_B1.c: 15: }
  9465  0A0D  0008               	return
  9466  0A0E                     l5061:	
  9467                           
  9468                           ;TriacRelay_B1.c: 19: else if (lights == 2) {
  9469  0A0E  0875               	movf	LightsPointSelect@lights,w
  9470  0A0F  3A02               	xorlw	2
  9471  0A10  1D03               	skipz
  9472  0A11  0008               	return
  9473                           
  9474                           ;TriacRelay_B1.c: 20: Lights = &Lights2;
  9475  0A12  304E               	movlw	_Lights2& (0+255)
  9476  0A13  00F4               	movwf	??_LightsPointSelect
  9477  0A14  0874               	movf	??_LightsPointSelect,w
  9478  0A15  00F8               	movwf	_Lights
  9479  0A16  0008               	return
  9480  0A17                     __end_of_LightsPointSelect:	
  9481                           
  9482                           	psect	text62
  9483  07A6                     __ptext62:	
  9484 ;; *************** function _setLED *****************
  9485 ;; Defined at:
  9486 ;;		line 81 in file "../src/LED_B1.c"
  9487 ;; Parameters:    Size  Location     Type
  9488 ;;  led             1    wreg     unsigned char 
  9489 ;;  command         1    0[BANK0 ] unsigned char 
  9490 ;; Auto vars:     Size  Location     Type
  9491 ;;  led             1    1[BANK0 ] unsigned char 
  9492 ;; Return value:  Size  Location     Type
  9493 ;;		None               void
  9494 ;; Registers used:
  9495 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9496 ;; Tracked objects:
  9497 ;;		On entry : 0/0
  9498 ;;		On exit  : 0/0
  9499 ;;		Unchanged: 0/0
  9500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9501 ;;      Params:         0       1       0       0
  9502 ;;      Locals:         0       1       0       0
  9503 ;;      Temps:          0       0       0       0
  9504 ;;      Totals:         0       2       0       0
  9505 ;;Total ram usage:        2 bytes
  9506 ;; Hardware stack levels used:    1
  9507 ;; Hardware stack levels required when called:    3
  9508 ;; This function calls:
  9509 ;;		_LedPointSelect
  9510 ;; This function is called by:
  9511 ;;		_setLED_Initialization
  9512 ;;		_Exception_Main
  9513 ;;		_setSw_Main
  9514 ;;		_setLights
  9515 ;; This function uses a non-reentrant model
  9516 ;;
  9517                           
  9518                           
  9519                           ;psect for function _setLED
  9520  07A6                     _setLED:	
  9521                           
  9522                           ;incstack = 0
  9523                           ; Regs used in _setLED: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9524                           ;setLED@led stored from wreg
  9525  07A6  1283               	bcf	3,5	;RP0=0, select bank0
  9526  07A7  1303               	bcf	3,6	;RP1=0, select bank0
  9527  07A8  00D8               	movwf	setLED@led
  9528                           
  9529                           ;LED_B1.c: 82: LedPointSelect(led);
  9530  07A9  0858               	movf	setLED@led,w
  9531  07AA  158A  22F0  118A   	fcall	_LedPointSelect
  9532                           
  9533                           ;LED_B1.c: 83: if (command == 0) {
  9534  07AD  1283               	bcf	3,5	;RP0=0, select bank0
  9535  07AE  1303               	bcf	3,6	;RP1=0, select bank0
  9536  07AF  08D7               	movf	setLED@command,f
  9537  07B0  1D03               	skipz
  9538  07B1  2FBF               	goto	l5081
  9539                           
  9540                           ;LED_B1.c: 85: if (led == 1) {
  9541  07B2  0858               	movf	setLED@led,w
  9542  07B3  3A01               	xorlw	1
  9543  07B4  1D03               	skipz
  9544  07B5  2FB7               	goto	l5073
  9545                           
  9546                           ;LED_B1.c: 89: RC7 = 1;
  9547  07B6  1787               	bsf	7,7	;volatile
  9548  07B7                     l5073:	
  9549                           
  9550                           ;LED_B1.c: 91: }
  9551                           ;LED_B1.c: 94: if (led == 2) {
  9552  07B7  0858               	movf	setLED@led,w
  9553  07B8  3A02               	xorlw	2
  9554  07B9  1903               	btfsc	3,2
  9555                           
  9556                           ;LED_B1.c: 98: RC6 = 1;
  9557  07BA  1707               	bsf	7,6	;volatile
  9558                           
  9559                           ;LED_B1.c: 100: }
  9560                           ;LED_B1.c: 112: if (led == 99) {
  9561  07BB  0858               	movf	setLED@led,w
  9562  07BC  3A63               	xorlw	99
  9563  07BD  1903               	btfsc	3,2
  9564                           
  9565                           ;LED_B1.c: 116: RC1 = 1;
  9566  07BE  1487               	bsf	7,1	;volatile
  9567  07BF                     l5081:	
  9568                           
  9569                           ;LED_B1.c: 118: }
  9570                           ;LED_B1.c: 120: }
  9571                           ;LED_B1.c: 121: if (command == 1) {
  9572  07BF  0857               	movf	setLED@command,w
  9573  07C0  3A01               	xorlw	1
  9574  07C1  1D03               	skipz
  9575  07C2  2FD0               	goto	l5095
  9576                           
  9577                           ;LED_B1.c: 123: if (led == 1) {
  9578  07C3  0858               	movf	setLED@led,w
  9579  07C4  3A01               	xorlw	1
  9580  07C5  1D03               	skipz
  9581  07C6  2FC8               	goto	l5087
  9582                           
  9583                           ;LED_B1.c: 127: RC7 = 0;
  9584  07C7  1387               	bcf	7,7	;volatile
  9585  07C8                     l5087:	
  9586                           
  9587                           ;LED_B1.c: 129: }
  9588                           ;LED_B1.c: 132: if (led == 2) {
  9589  07C8  0858               	movf	setLED@led,w
  9590  07C9  3A02               	xorlw	2
  9591  07CA  1903               	btfsc	3,2
  9592                           
  9593                           ;LED_B1.c: 136: RC6 = 0;
  9594  07CB  1307               	bcf	7,6	;volatile
  9595                           
  9596                           ;LED_B1.c: 138: }
  9597                           ;LED_B1.c: 150: if (led == 99) {
  9598  07CC  0858               	movf	setLED@led,w
  9599  07CD  3A63               	xorlw	99
  9600  07CE  1903               	btfsc	3,2
  9601                           
  9602                           ;LED_B1.c: 154: RC1 = 0;
  9603  07CF  1087               	bcf	7,1	;volatile
  9604  07D0                     l5095:	
  9605                           
  9606                           ;LED_B1.c: 156: }
  9607                           ;LED_B1.c: 158: }
  9608                           ;LED_B1.c: 159: if (command == 10) {
  9609  07D0  0857               	movf	setLED@command,w
  9610  07D1  3A0A               	xorlw	10
  9611  07D2  1D03               	skipz
  9612  07D3  2FEB               	goto	l5113
  9613                           
  9614                           ;LED_B1.c: 160: LED->GO = 0;
  9615  07D4  0876               	movf	_LED,w
  9616  07D5  0084               	movwf	4
  9617  07D6  1383               	bcf	3,7	;select IRP bank0
  9618  07D7  1080               	bcf	0,1
  9619                           
  9620                           ;LED_B1.c: 161: LED->Time = 0;
  9621  07D8  0A76               	incf	_LED,w
  9622  07D9  0084               	movwf	4
  9623  07DA  0180               	clrf	0
  9624  07DB  0A84               	incf	4,f
  9625  07DC  0180               	clrf	0
  9626                           
  9627                           ;LED_B1.c: 163: if (led == 1) {
  9628  07DD  0858               	movf	setLED@led,w
  9629  07DE  3A01               	xorlw	1
  9630  07DF  1D03               	skipz
  9631  07E0  2FE3               	goto	l5105
  9632                           
  9633                           ;LED_B1.c: 167: RC7 = 1;
  9634  07E1  1787               	bsf	7,7	;volatile
  9635                           
  9636                           ;LED_B1.c: 169: }
  9637  07E2  2FE7               	goto	l5109
  9638  07E3                     l5105:	
  9639                           
  9640                           ;LED_B1.c: 172: else if (led == 2) {
  9641  07E3  0858               	movf	setLED@led,w
  9642  07E4  3A02               	xorlw	2
  9643  07E5  1903               	btfsc	3,2
  9644                           
  9645                           ;LED_B1.c: 176: RC6 = 1;
  9646  07E6  1707               	bsf	7,6	;volatile
  9647  07E7                     l5109:	
  9648                           
  9649                           ;LED_B1.c: 178: }
  9650                           ;LED_B1.c: 190: if (led == 99) {
  9651  07E7  0858               	movf	setLED@led,w
  9652  07E8  3A63               	xorlw	99
  9653  07E9  1903               	btfsc	3,2
  9654                           
  9655                           ;LED_B1.c: 194: RC1 = 1;
  9656  07EA  1487               	bsf	7,1	;volatile
  9657  07EB                     l5113:	
  9658                           
  9659                           ;LED_B1.c: 196: }
  9660                           ;LED_B1.c: 198: }
  9661                           ;LED_B1.c: 199: if (command == 11) {
  9662  07EB  0857               	movf	setLED@command,w
  9663  07EC  3A0B               	xorlw	11
  9664  07ED  1D03               	skipz
  9665  07EE  0008               	return
  9666                           
  9667                           ;LED_B1.c: 200: LED->GO = 1;
  9668  07EF  0876               	movf	_LED,w
  9669  07F0  0084               	movwf	4
  9670  07F1  1383               	bcf	3,7	;select IRP bank0
  9671  07F2  1480               	bsf	0,1
  9672  07F3  0008               	return
  9673  07F4                     __end_of_setLED:	
  9674                           
  9675                           	psect	text63
  9676  0AF0                     __ptext63:	
  9677 ;; *************** function _LedPointSelect *****************
  9678 ;; Defined at:
  9679 ;;		line 7 in file "../src/LED_B1.c"
  9680 ;; Parameters:    Size  Location     Type
  9681 ;;  led             1    wreg     unsigned char 
  9682 ;; Auto vars:     Size  Location     Type
  9683 ;;  led             1    5[COMMON] unsigned char 
  9684 ;; Return value:  Size  Location     Type
  9685 ;;		None               void
  9686 ;; Registers used:
  9687 ;;		wreg
  9688 ;; Tracked objects:
  9689 ;;		On entry : 0/0
  9690 ;;		On exit  : 0/0
  9691 ;;		Unchanged: 0/0
  9692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9693 ;;      Params:         0       0       0       0
  9694 ;;      Locals:         1       0       0       0
  9695 ;;      Temps:          1       0       0       0
  9696 ;;      Totals:         2       0       0       0
  9697 ;;Total ram usage:        2 bytes
  9698 ;; Hardware stack levels used:    1
  9699 ;; Hardware stack levels required when called:    2
  9700 ;; This function calls:
  9701 ;;		Nothing
  9702 ;; This function is called by:
  9703 ;;		_setLED_Initialization
  9704 ;;		_setLED
  9705 ;;		_setLED_Main
  9706 ;; This function uses a non-reentrant model
  9707 ;;
  9708                           
  9709                           
  9710                           ;psect for function _LedPointSelect
  9711  0AF0                     _LedPointSelect:	
  9712                           
  9713                           ;incstack = 0
  9714                           ; Regs used in _LedPointSelect: [wreg]
  9715                           ;LedPointSelect@led stored from wreg
  9716  0AF0  00F5               	movwf	LedPointSelect@led
  9717                           
  9718                           ;LED_B1.c: 9: if (led == 1) {
  9719  0AF1  0875               	movf	LedPointSelect@led,w
  9720  0AF2  3A01               	xorlw	1
  9721  0AF3  1D03               	skipz
  9722  0AF4  2AF9               	goto	l349
  9723                           
  9724                           ;LED_B1.c: 10: LED = &VarLED1;
  9725  0AF5  30E6               	movlw	_VarLED1& (0+255)
  9726  0AF6  00F4               	movwf	??_LedPointSelect
  9727  0AF7  0874               	movf	??_LedPointSelect,w
  9728  0AF8  00F6               	movwf	_LED
  9729  0AF9                     l349:	
  9730                           
  9731                           ;LED_B1.c: 11: }
  9732                           ;LED_B1.c: 14: if (led == 2) {
  9733  0AF9  0875               	movf	LedPointSelect@led,w
  9734  0AFA  3A02               	xorlw	2
  9735  0AFB  1D03               	skipz
  9736  0AFC  2B01               	goto	l350
  9737                           
  9738                           ;LED_B1.c: 15: LED = &VarLED2;
  9739  0AFD  30EA               	movlw	_VarLED2& (0+255)
  9740  0AFE  00F4               	movwf	??_LedPointSelect
  9741  0AFF  0874               	movf	??_LedPointSelect,w
  9742  0B00  00F6               	movwf	_LED
  9743  0B01                     l350:	
  9744                           
  9745                           ;LED_B1.c: 16: }
  9746                           ;LED_B1.c: 24: if (led == 99) {
  9747  0B01  0875               	movf	LedPointSelect@led,w
  9748  0B02  3A63               	xorlw	99
  9749  0B03  1D03               	skipz
  9750  0B04  0008               	return
  9751                           
  9752                           ;LED_B1.c: 25: LED = &VarErrLED;
  9753  0B05  3053               	movlw	_VarErrLED& (0+255)
  9754  0B06  00F4               	movwf	??_LedPointSelect
  9755  0B07  0874               	movf	??_LedPointSelect,w
  9756  0B08  00F6               	movwf	_LED
  9757  0B09  0008               	return
  9758  0B0A                     __end_of_LedPointSelect:	
  9759                           
  9760                           	psect	text64
  9761  0E05                     __ptext64:	
  9762 ;; *************** function _setBuz *****************
  9763 ;; Defined at:
  9764 ;;		line 22 in file "../src/Buzzer_B1.c"
  9765 ;; Parameters:    Size  Location     Type
  9766 ;;  count           1    wreg     unsigned char 
  9767 ;;  time            2    8[BANK0 ] int 
  9768 ;; Auto vars:     Size  Location     Type
  9769 ;;  count           1   10[BANK0 ] unsigned char 
  9770 ;; Return value:  Size  Location     Type
  9771 ;;		None               void
  9772 ;; Registers used:
  9773 ;;		wreg, status,2, status,0, pclath, cstack
  9774 ;; Tracked objects:
  9775 ;;		On entry : 0/0
  9776 ;;		On exit  : 0/0
  9777 ;;		Unchanged: 0/0
  9778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9779 ;;      Params:         0       2       0       0
  9780 ;;      Locals:         0       1       0       0
  9781 ;;      Temps:          1       0       0       0
  9782 ;;      Totals:         1       3       0       0
  9783 ;;Total ram usage:        4 bytes
  9784 ;; Hardware stack levels used:    1
  9785 ;; Hardware stack levels required when called:    3
  9786 ;; This function calls:
  9787 ;;		___awdiv
  9788 ;; This function is called by:
  9789 ;;		_my_MainTimer
  9790 ;;		_Exception_Main
  9791 ;;		_setTemp_Main
  9792 ;; This function uses a non-reentrant model
  9793 ;;
  9794                           
  9795                           
  9796                           ;psect for function _setBuz
  9797  0E05                     _setBuz:	
  9798                           
  9799                           ;incstack = 0
  9800                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
  9801                           ;setBuz@count stored from wreg
  9802  0E05  1283               	bcf	3,5	;RP0=0, select bank0
  9803  0E06  1303               	bcf	3,6	;RP1=0, select bank0
  9804  0E07  00E1               	movwf	setBuz@count
  9805                           
  9806                           ;Buzzer_B1.c: 23: time /= 20;
  9807  0E08  3014               	movlw	20
  9808  0E09  00D7               	movwf	___awdiv@divisor
  9809  0E0A  3000               	movlw	0
  9810  0E0B  00D8               	movwf	___awdiv@divisor+1
  9811  0E0C  0860               	movf	setBuz@time+1,w
  9812  0E0D  01DA               	clrf	___awdiv@dividend+1
  9813  0E0E  07DA               	addwf	___awdiv@dividend+1,f
  9814  0E0F  085F               	movf	setBuz@time,w
  9815  0E10  01D9               	clrf	___awdiv@dividend
  9816  0E11  07D9               	addwf	___awdiv@dividend,f
  9817  0E12  158A  26A8  158A   	fcall	___awdiv
  9818  0E15  1283               	bcf	3,5	;RP0=0, select bank0
  9819  0E16  1303               	bcf	3,6	;RP1=0, select bank0
  9820  0E17  0858               	movf	?___awdiv+1,w
  9821  0E18  01E0               	clrf	setBuz@time+1
  9822  0E19  07E0               	addwf	setBuz@time+1,f
  9823  0E1A  0857               	movf	?___awdiv,w
  9824  0E1B  01DF               	clrf	setBuz@time
  9825  0E1C  07DF               	addwf	setBuz@time,f
  9826                           
  9827                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
  9828  0E1D  1C20               	btfss	_Buz1,0
  9829  0E1E  0008               	return
  9830                           
  9831                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
  9832  0E1F  18A0               	btfsc	_Buz1,1
  9833  0E20  2E30               	goto	l58
  9834                           
  9835                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
  9836  0E21  14A0               	bsf	_Buz1,1
  9837                           
  9838                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
  9839  0E22  01A1               	clrf	_Buz1+1
  9840  0E23  01A2               	clrf	_Buz1+2
  9841                           
  9842                           ;Buzzer_B1.c: 28: Buz1.Count = count;
  9843  0E24  0861               	movf	setBuz@count,w
  9844  0E25  00F5               	movwf	??_setBuz
  9845  0E26  0875               	movf	??_setBuz,w
  9846  0E27  00A3               	movwf	_Buz1+3
  9847                           
  9848                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
  9849  0E28  0860               	movf	setBuz@time+1,w
  9850  0E29  01A7               	clrf	_Buz1+7
  9851  0E2A  07A7               	addwf	_Buz1+7,f
  9852  0E2B  085F               	movf	setBuz@time,w
  9853  0E2C  01A6               	clrf	_Buz1+6
  9854  0E2D  07A6               	addwf	_Buz1+6,f
  9855                           
  9856                           ;Buzzer_B1.c: 30: RC0 = 1;
  9857  0E2E  1407               	bsf	7,0	;volatile
  9858                           
  9859                           ;Buzzer_B1.c: 31: } else {
  9860  0E2F  0008               	return
  9861  0E30                     l58:	
  9862                           
  9863                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
  9864  0E30  19A0               	btfsc	_Buz1,3
  9865  0E31  2E3E               	goto	l60
  9866                           
  9867                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
  9868  0E32  15A0               	bsf	_Buz1,3
  9869                           
  9870                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
  9871  0E33  0861               	movf	setBuz@count,w
  9872  0E34  00F5               	movwf	??_setBuz
  9873  0E35  0875               	movf	??_setBuz,w
  9874  0E36  00A4               	movwf	_Buz1+4
  9875                           
  9876                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
  9877  0E37  0860               	movf	setBuz@time+1,w
  9878  0E38  01A9               	clrf	_Buz1+9
  9879  0E39  07A9               	addwf	_Buz1+9,f
  9880  0E3A  085F               	movf	setBuz@time,w
  9881  0E3B  01A8               	clrf	_Buz1+8
  9882  0E3C  07A8               	addwf	_Buz1+8,f
  9883                           
  9884                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
  9885  0E3D  0008               	return
  9886  0E3E                     l60:	
  9887  0E3E  1A20               	btfsc	_Buz1,4
  9888  0E3F  0008               	return
  9889                           
  9890                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
  9891  0E40  1620               	bsf	_Buz1,4
  9892                           
  9893                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
  9894  0E41  0861               	movf	setBuz@count,w
  9895  0E42  00F5               	movwf	??_setBuz
  9896  0E43  0875               	movf	??_setBuz,w
  9897  0E44  00A5               	movwf	_Buz1+5
  9898                           
  9899                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
  9900  0E45  0860               	movf	setBuz@time+1,w
  9901  0E46  01AB               	clrf	_Buz1+11
  9902  0E47  07AB               	addwf	_Buz1+11,f
  9903  0E48  085F               	movf	setBuz@time,w
  9904  0E49  01AA               	clrf	_Buz1+10
  9905  0E4A  07AA               	addwf	_Buz1+10,f
  9906  0E4B  0008               	return
  9907  0E4C                     __end_of_setBuz:	
  9908                           
  9909                           	psect	text65
  9910  0EA8                     __ptext65:	
  9911 ;; *************** function ___awdiv *****************
  9912 ;; Defined at:
  9913 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
  9914 ;; Parameters:    Size  Location     Type
  9915 ;;  divisor         2    0[BANK0 ] int 
  9916 ;;  dividend        2    2[BANK0 ] int 
  9917 ;; Auto vars:     Size  Location     Type
  9918 ;;  quotient        2    6[BANK0 ] int 
  9919 ;;  sign            1    5[BANK0 ] unsigned char 
  9920 ;;  counter         1    4[BANK0 ] unsigned char 
  9921 ;; Return value:  Size  Location     Type
  9922 ;;                  2    0[BANK0 ] int 
  9923 ;; Registers used:
  9924 ;;		wreg, status,2, status,0
  9925 ;; Tracked objects:
  9926 ;;		On entry : 0/0
  9927 ;;		On exit  : 0/0
  9928 ;;		Unchanged: 0/0
  9929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  9930 ;;      Params:         0       4       0       0
  9931 ;;      Locals:         0       4       0       0
  9932 ;;      Temps:          1       0       0       0
  9933 ;;      Totals:         1       8       0       0
  9934 ;;Total ram usage:        9 bytes
  9935 ;; Hardware stack levels used:    1
  9936 ;; Hardware stack levels required when called:    2
  9937 ;; This function calls:
  9938 ;;		Nothing
  9939 ;; This function is called by:
  9940 ;;		_setBuz
  9941 ;;		_getPIR_AD
  9942 ;;		_Lights_Control
  9943 ;; This function uses a non-reentrant model
  9944 ;;
  9945                           
  9946                           
  9947                           ;psect for function ___awdiv
  9948  0EA8                     ___awdiv:	
  9949                           
  9950                           ;incstack = 0
  9951                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  9952  0EA8  1283               	bcf	3,5	;RP0=0, select bank0
  9953  0EA9  1303               	bcf	3,6	;RP1=0, select bank0
  9954  0EAA  01DC               	clrf	___awdiv@sign
  9955  0EAB  1FD8               	btfss	___awdiv@divisor+1,7
  9956  0EAC  2EB4               	goto	l5145
  9957  0EAD  09D7               	comf	___awdiv@divisor,f
  9958  0EAE  09D8               	comf	___awdiv@divisor+1,f
  9959  0EAF  0AD7               	incf	___awdiv@divisor,f
  9960  0EB0  1903               	skipnz
  9961  0EB1  0AD8               	incf	___awdiv@divisor+1,f
  9962  0EB2  01DC               	clrf	___awdiv@sign
  9963  0EB3  0ADC               	incf	___awdiv@sign,f
  9964  0EB4                     l5145:	
  9965  0EB4  1FDA               	btfss	___awdiv@dividend+1,7
  9966  0EB5  2EBF               	goto	l5151
  9967  0EB6  09D9               	comf	___awdiv@dividend,f
  9968  0EB7  09DA               	comf	___awdiv@dividend+1,f
  9969  0EB8  0AD9               	incf	___awdiv@dividend,f
  9970  0EB9  1903               	skipnz
  9971  0EBA  0ADA               	incf	___awdiv@dividend+1,f
  9972  0EBB  3001               	movlw	1
  9973  0EBC  00F4               	movwf	??___awdiv
  9974  0EBD  0874               	movf	??___awdiv,w
  9975  0EBE  06DC               	xorwf	___awdiv@sign,f
  9976  0EBF                     l5151:	
  9977  0EBF  01DD               	clrf	___awdiv@quotient
  9978  0EC0  01DE               	clrf	___awdiv@quotient+1
  9979  0EC1  0858               	movf	___awdiv@divisor+1,w
  9980  0EC2  0457               	iorwf	___awdiv@divisor,w
  9981  0EC3  1903               	skipnz
  9982  0EC4  2EF6               	goto	l5173
  9983  0EC5  01DB               	clrf	___awdiv@counter
  9984  0EC6  0ADB               	incf	___awdiv@counter,f
  9985  0EC7                     l5161:	
  9986  0EC7  1BD8               	btfsc	___awdiv@divisor+1,7
  9987  0EC8  2ED5               	goto	l5163
  9988  0EC9  3001               	movlw	1
  9989  0ECA                     u5865:	
  9990  0ECA  1003               	clrc
  9991  0ECB  0DD7               	rlf	___awdiv@divisor,f
  9992  0ECC  0DD8               	rlf	___awdiv@divisor+1,f
  9993  0ECD  3EFF               	addlw	-1
  9994  0ECE  1D03               	skipz
  9995  0ECF  2ECA               	goto	u5865
  9996  0ED0  3001               	movlw	1
  9997  0ED1  00F4               	movwf	??___awdiv
  9998  0ED2  0874               	movf	??___awdiv,w
  9999  0ED3  07DB               	addwf	___awdiv@counter,f
 10000  0ED4  2EC7               	goto	l5161
 10001  0ED5                     l5163:	
 10002  0ED5  3001               	movlw	1
 10003  0ED6                     u5885:	
 10004  0ED6  1003               	clrc
 10005  0ED7  0DDD               	rlf	___awdiv@quotient,f
 10006  0ED8  0DDE               	rlf	___awdiv@quotient+1,f
 10007  0ED9  3EFF               	addlw	-1
 10008  0EDA  1D03               	skipz
 10009  0EDB  2ED6               	goto	u5885
 10010  0EDC  0858               	movf	___awdiv@divisor+1,w
 10011  0EDD  025A               	subwf	___awdiv@dividend+1,w
 10012  0EDE  1D03               	skipz
 10013  0EDF  2EE2               	goto	u5895
 10014  0EE0  0857               	movf	___awdiv@divisor,w
 10015  0EE1  0259               	subwf	___awdiv@dividend,w
 10016  0EE2                     u5895:	
 10017  0EE2  1C03               	skipc
 10018  0EE3  2EEB               	goto	l5169
 10019  0EE4  0857               	movf	___awdiv@divisor,w
 10020  0EE5  02D9               	subwf	___awdiv@dividend,f
 10021  0EE6  0858               	movf	___awdiv@divisor+1,w
 10022  0EE7  1C03               	skipc
 10023  0EE8  03DA               	decf	___awdiv@dividend+1,f
 10024  0EE9  02DA               	subwf	___awdiv@dividend+1,f
 10025  0EEA  145D               	bsf	___awdiv@quotient,0
 10026  0EEB                     l5169:	
 10027  0EEB  3001               	movlw	1
 10028  0EEC                     u5905:	
 10029  0EEC  1003               	clrc
 10030  0EED  0CD8               	rrf	___awdiv@divisor+1,f
 10031  0EEE  0CD7               	rrf	___awdiv@divisor,f
 10032  0EEF  3EFF               	addlw	-1
 10033  0EF0  1D03               	skipz
 10034  0EF1  2EEC               	goto	u5905
 10035  0EF2  3001               	movlw	1
 10036  0EF3  02DB               	subwf	___awdiv@counter,f
 10037  0EF4  1D03               	btfss	3,2
 10038  0EF5  2ED5               	goto	l5163
 10039  0EF6                     l5173:	
 10040  0EF6  085C               	movf	___awdiv@sign,w
 10041  0EF7  1903               	btfsc	3,2
 10042  0EF8  2EFE               	goto	l5177
 10043  0EF9  09DD               	comf	___awdiv@quotient,f
 10044  0EFA  09DE               	comf	___awdiv@quotient+1,f
 10045  0EFB  0ADD               	incf	___awdiv@quotient,f
 10046  0EFC  1903               	skipnz
 10047  0EFD  0ADE               	incf	___awdiv@quotient+1,f
 10048  0EFE                     l5177:	
 10049  0EFE  085E               	movf	___awdiv@quotient+1,w
 10050  0EFF  01D8               	clrf	?___awdiv+1
 10051  0F00  07D8               	addwf	?___awdiv+1,f
 10052  0F01  085D               	movf	___awdiv@quotient,w
 10053  0F02  01D7               	clrf	?___awdiv
 10054  0F03  07D7               	addwf	?___awdiv,f
 10055  0F04  0008               	return
 10056  0F05                     __end_of___awdiv:	
 10057                           
 10058                           	psect	text66
 10059  09C0                     __ptext66:	
 10060 ;; *************** function _getMain_All_LightsStatus *****************
 10061 ;; Defined at:
 10062 ;;		line 373 in file "../src/Main_B1.c"
 10063 ;; Parameters:    Size  Location     Type
 10064 ;;		None
 10065 ;; Auto vars:     Size  Location     Type
 10066 ;;  status          1    4[COMMON] unsigned char 
 10067 ;; Return value:  Size  Location     Type
 10068 ;;                  1    wreg      unsigned char 
 10069 ;; Registers used:
 10070 ;;		wreg, status,2, status,0
 10071 ;; Tracked objects:
 10072 ;;		On entry : 0/0
 10073 ;;		On exit  : 0/0
 10074 ;;		Unchanged: 0/0
 10075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10076 ;;      Params:         0       0       0       0
 10077 ;;      Locals:         1       0       0       0
 10078 ;;      Temps:          0       0       0       0
 10079 ;;      Totals:         1       0       0       0
 10080 ;;Total ram usage:        1 bytes
 10081 ;; Hardware stack levels used:    1
 10082 ;; Hardware stack levels required when called:    2
 10083 ;; This function calls:
 10084 ;;		Nothing
 10085 ;; This function is called by:
 10086 ;;		_Exception_Main
 10087 ;;		_Load_Main
 10088 ;;		_setTemp_Main
 10089 ;;		_Lights_Main
 10090 ;; This function uses a non-reentrant model
 10091 ;;
 10092                           
 10093                           
 10094                           ;psect for function _getMain_All_LightsStatus
 10095  09C0                     _getMain_All_LightsStatus:	
 10096                           
 10097                           ;Main_B1.c: 374: char status = 0;
 10098                           
 10099                           ;incstack = 0
 10100                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2+status,0]
 10101  09C0  01F4               	clrf	getMain_All_LightsStatus@status
 10102                           
 10103                           ;Main_B1.c: 387: status = Lights1.Status == 1 ? 1 : 0;
 10104  09C1  3000               	movlw	0
 10105  09C2  1283               	bcf	3,5	;RP0=0, select bank0
 10106  09C3  1303               	bcf	3,6	;RP1=0, select bank0
 10107  09C4  1949               	btfsc	_Lights1,2
 10108  09C5  3001               	movlw	1
 10109  09C6  00F4               	movwf	getMain_All_LightsStatus@status
 10110                           
 10111                           ;Main_B1.c: 388: if (status == 0) {
 10112  09C7  08F4               	movf	getMain_All_LightsStatus@status,f
 10113  09C8  1D03               	skipz
 10114  09C9  29CE               	goto	l3757
 10115                           
 10116                           ;Main_B1.c: 389: status = Lights2.Status == 1 ? 1 : 0;
 10117  09CA  3000               	movlw	0
 10118  09CB  194E               	btfsc	_Lights2,2
 10119  09CC  3001               	movlw	1
 10120  09CD  00F4               	movwf	getMain_All_LightsStatus@status
 10121  09CE                     l3757:	
 10122                           
 10123                           ;Main_B1.c: 390: }
 10124                           ;Main_B1.c: 420: return status;
 10125  09CE  0874               	movf	getMain_All_LightsStatus@status,w
 10126  09CF  0008               	return
 10127  09D0                     __end_of_getMain_All_LightsStatus:	
 10128                           
 10129                           	psect	text67
 10130  0CC1                     __ptext67:	
 10131 ;; *************** function _getMain_All_Error_Status *****************
 10132 ;; Defined at:
 10133 ;;		line 424 in file "../src/Main_B1.c"
 10134 ;; Parameters:    Size  Location     Type
 10135 ;;  command         1    wreg     unsigned char 
 10136 ;; Auto vars:     Size  Location     Type
 10137 ;;  command         1    4[BANK0 ] unsigned char 
 10138 ;;  status          1    5[BANK0 ] unsigned char 
 10139 ;; Return value:  Size  Location     Type
 10140 ;;                  1    wreg      unsigned char 
 10141 ;; Registers used:
 10142 ;;		wreg, status,2, status,0
 10143 ;; Tracked objects:
 10144 ;;		On entry : 0/0
 10145 ;;		On exit  : 0/0
 10146 ;;		Unchanged: 0/0
 10147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10148 ;;      Params:         0       0       0       0
 10149 ;;      Locals:         0       6       0       0
 10150 ;;      Temps:          1       0       0       0
 10151 ;;      Totals:         1       6       0       0
 10152 ;;Total ram usage:        7 bytes
 10153 ;; Hardware stack levels used:    1
 10154 ;; Hardware stack levels required when called:    2
 10155 ;; This function calls:
 10156 ;;		Nothing
 10157 ;; This function is called by:
 10158 ;;		_Exception_Main
 10159 ;;		_Load_Main
 10160 ;;		_setTemp_Main
 10161 ;;		_PIR_Main
 10162 ;;		_setSYSC_Main
 10163 ;;		_setSw_Main
 10164 ;;		_Lights_Main
 10165 ;; This function uses a non-reentrant model
 10166 ;;
 10167                           
 10168                           
 10169                           ;psect for function _getMain_All_Error_Status
 10170  0CC1                     _getMain_All_Error_Status:	
 10171                           
 10172                           ;incstack = 0
 10173                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 10174                           ;getMain_All_Error_Status@command stored from wreg
 10175  0CC1  1283               	bcf	3,5	;RP0=0, select bank0
 10176  0CC2  1303               	bcf	3,6	;RP1=0, select bank0
 10177  0CC3  00DB               	movwf	getMain_All_Error_Status@command
 10178                           
 10179                           ;Main_B1.c: 425: char status = 0;
 10180  0CC4  01DC               	clrf	getMain_All_Error_Status@status
 10181                           
 10182                           ;Main_B1.c: 428: if (status == 0 && command != 1) {
 10183  0CC5  08DC               	movf	getMain_All_Error_Status@status,f
 10184  0CC6  1D03               	skipz
 10185  0CC7  2CD0               	goto	l3769
 10186  0CC8  085B               	movf	getMain_All_Error_Status@command,w
 10187  0CC9  3A01               	xorlw	1
 10188  0CCA  1903               	skipnz
 10189  0CCB  2CD0               	goto	l3769
 10190                           
 10191                           ;Main_B1.c: 429: status = SYSC.ERROR == 1 ? 1 : 0;
 10192  0CCC  3000               	movlw	0
 10193  0CCD  18AC               	btfsc	_SYSC,1
 10194  0CCE  3001               	movlw	1
 10195  0CCF  00DC               	movwf	getMain_All_Error_Status@status
 10196  0CD0                     l3769:	
 10197                           
 10198                           ;Main_B1.c: 430: }
 10199                           ;Main_B1.c: 436: if (status == 0 && command != 2) {
 10200  0CD0  08DC               	movf	getMain_All_Error_Status@status,f
 10201  0CD1  1D03               	skipz
 10202  0CD2  2CE4               	goto	l3779
 10203  0CD3  085B               	movf	getMain_All_Error_Status@command,w
 10204  0CD4  3A02               	xorlw	2
 10205  0CD5  1903               	skipnz
 10206  0CD6  2CE4               	goto	l3779
 10207                           
 10208                           ;Main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
 10209  0CD7  18C2               	btfsc	_Temp,1
 10210  0CD8  2CDC               	goto	l3777
 10211  0CD9  01D7               	clrf	_getMain_All_Error_Status$2426
 10212  0CDA  01D8               	clrf	_getMain_All_Error_Status$2426+1
 10213  0CDB  2CE0               	goto	l700
 10214  0CDC                     l3777:	
 10215  0CDC  3002               	movlw	2
 10216  0CDD  00D7               	movwf	_getMain_All_Error_Status$2426
 10217  0CDE  3000               	movlw	0
 10218  0CDF  00D8               	movwf	_getMain_All_Error_Status$2426+1
 10219  0CE0                     l700:	
 10220  0CE0  0857               	movf	_getMain_All_Error_Status$2426,w
 10221  0CE1  00F4               	movwf	??_getMain_All_Error_Status
 10222  0CE2  0874               	movf	??_getMain_All_Error_Status,w
 10223  0CE3  00DC               	movwf	getMain_All_Error_Status@status
 10224  0CE4                     l3779:	
 10225                           
 10226                           ;Main_B1.c: 438: }
 10227                           ;Main_B1.c: 443: if (status == 0 && command != 3) {
 10228  0CE4  08DC               	movf	getMain_All_Error_Status@status,f
 10229  0CE5  1D03               	skipz
 10230  0CE6  2CFD               	goto	l701
 10231  0CE7  085B               	movf	getMain_All_Error_Status@command,w
 10232  0CE8  3A03               	xorlw	3
 10233  0CE9  1903               	skipnz
 10234  0CEA  2CFD               	goto	l701
 10235                           
 10236                           ;Main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
 10237  0CEB  1683               	bsf	3,5	;RP0=1, select bank1
 10238  0CEC  1303               	bcf	3,6	;RP1=0, select bank1
 10239  0CED  1ACA               	btfsc	_Load^(0+128),5
 10240  0CEE  2CF4               	goto	l3787
 10241  0CEF  1283               	bcf	3,5	;RP0=0, select bank0
 10242  0CF0  1303               	bcf	3,6	;RP1=0, select bank0
 10243  0CF1  01D9               	clrf	_getMain_All_Error_Status$2427
 10244  0CF2  01DA               	clrf	_getMain_All_Error_Status$2427+1
 10245  0CF3  2CF9               	goto	l705
 10246  0CF4                     l3787:	
 10247  0CF4  3003               	movlw	3
 10248  0CF5  1283               	bcf	3,5	;RP0=0, select bank0
 10249  0CF6  00D9               	movwf	_getMain_All_Error_Status$2427
 10250  0CF7  3000               	movlw	0
 10251  0CF8  00DA               	movwf	_getMain_All_Error_Status$2427+1
 10252  0CF9                     l705:	
 10253  0CF9  0859               	movf	_getMain_All_Error_Status$2427,w
 10254  0CFA  00F4               	movwf	??_getMain_All_Error_Status
 10255  0CFB  0874               	movf	??_getMain_All_Error_Status,w
 10256  0CFC  00DC               	movwf	getMain_All_Error_Status@status
 10257  0CFD                     l701:	
 10258                           
 10259                           ;Main_B1.c: 445: }
 10260                           ;Main_B1.c: 455: return status;
 10261  0CFD  085C               	movf	getMain_All_Error_Status@status,w
 10262  0CFE  0008               	return
 10263  0CFF                     __end_of_getMain_All_Error_Status:	
 10264                           
 10265                           	psect	text68
 10266  09B0                     __ptext68:	
 10267 ;; *************** function _getAll_Lights_Line *****************
 10268 ;; Defined at:
 10269 ;;		line 310 in file "../src/TriacRelay_B1.c"
 10270 ;; Parameters:    Size  Location     Type
 10271 ;;		None
 10272 ;; Auto vars:     Size  Location     Type
 10273 ;;  line            1    5[COMMON] unsigned char 
 10274 ;; Return value:  Size  Location     Type
 10275 ;;                  1    wreg      unsigned char 
 10276 ;; Registers used:
 10277 ;;		wreg, status,2
 10278 ;; Tracked objects:
 10279 ;;		On entry : 0/0
 10280 ;;		On exit  : 0/0
 10281 ;;		Unchanged: 0/0
 10282 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10283 ;;      Params:         0       0       0       0
 10284 ;;      Locals:         1       0       0       0
 10285 ;;      Temps:          1       0       0       0
 10286 ;;      Totals:         2       0       0       0
 10287 ;;Total ram usage:        2 bytes
 10288 ;; Hardware stack levels used:    1
 10289 ;; Hardware stack levels required when called:    2
 10290 ;; This function calls:
 10291 ;;		Nothing
 10292 ;; This function is called by:
 10293 ;;		_Exception_Main
 10294 ;; This function uses a non-reentrant model
 10295 ;;
 10296                           
 10297                           
 10298                           ;psect for function _getAll_Lights_Line
 10299  09B0                     _getAll_Lights_Line:	
 10300                           
 10301                           ;TriacRelay_B1.c: 311: char line = 0;
 10302                           
 10303                           ;incstack = 0
 10304                           ; Regs used in _getAll_Lights_Line: [wreg+status,2]
 10305  09B0  01F5               	clrf	getAll_Lights_Line@line
 10306                           
 10307                           ;TriacRelay_B1.c: 313: if (Lights1.Line == 1) {
 10308  09B1  1283               	bcf	3,5	;RP0=0, select bank0
 10309  09B2  1303               	bcf	3,6	;RP1=0, select bank0
 10310  09B3  1C4A               	btfss	_Lights1+1,0
 10311  09B4  29B8               	goto	l1596
 10312                           
 10313                           ;TriacRelay_B1.c: 314: line = 1;
 10314  09B5  01F5               	clrf	getAll_Lights_Line@line
 10315  09B6  0AF5               	incf	getAll_Lights_Line@line,f
 10316                           
 10317                           ;TriacRelay_B1.c: 315: }
 10318  09B7  29BE               	goto	l1597
 10319  09B8                     l1596:	
 10320                           
 10321                           ;TriacRelay_B1.c: 318: else if (Lights2.Line == 1) {
 10322  09B8  1C4F               	btfss	_Lights2+1,0
 10323  09B9  29BE               	goto	l1597
 10324                           
 10325                           ;TriacRelay_B1.c: 319: line = 2;
 10326  09BA  3002               	movlw	2
 10327  09BB  00F4               	movwf	??_getAll_Lights_Line
 10328  09BC  0874               	movf	??_getAll_Lights_Line,w
 10329  09BD  00F5               	movwf	getAll_Lights_Line@line
 10330  09BE                     l1597:	
 10331                           
 10332                           ;TriacRelay_B1.c: 320: }
 10333                           ;TriacRelay_B1.c: 327: return line;
 10334  09BE  0875               	movf	getAll_Lights_Line@line,w
 10335  09BF  0008               	return
 10336  09C0                     __end_of_getAll_Lights_Line:	
 10337                           
 10338                           	psect	text69
 10339  0968                     __ptext69:	
 10340 ;; *************** function _DetectSYSC_Signal *****************
 10341 ;; Defined at:
 10342 ;;		line 50 in file "../src/SYSC_B1.c"
 10343 ;; Parameters:    Size  Location     Type
 10344 ;;		None
 10345 ;; Auto vars:     Size  Location     Type
 10346 ;;		None
 10347 ;; Return value:  Size  Location     Type
 10348 ;;		None               void
 10349 ;; Registers used:
 10350 ;;		status,2
 10351 ;; Tracked objects:
 10352 ;;		On entry : 0/0
 10353 ;;		On exit  : 0/0
 10354 ;;		Unchanged: 0/0
 10355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10356 ;;      Params:         0       0       0       0
 10357 ;;      Locals:         0       0       0       0
 10358 ;;      Temps:          0       0       0       0
 10359 ;;      Totals:         0       0       0       0
 10360 ;;Total ram usage:        0 bytes
 10361 ;; Hardware stack levels used:    1
 10362 ;; Hardware stack levels required when called:    2
 10363 ;; This function calls:
 10364 ;;		Nothing
 10365 ;; This function is called by:
 10366 ;;		_main
 10367 ;; This function uses a non-reentrant model
 10368 ;;
 10369                           
 10370                           
 10371                           ;psect for function _DetectSYSC_Signal
 10372  0968                     _DetectSYSC_Signal:	
 10373                           
 10374                           ;SYSC_B1.c: 51: if (SYSC.Signal == 0) {
 10375                           
 10376                           ;incstack = 0
 10377                           ; Regs used in _DetectSYSC_Signal: [status,2]
 10378  0968  1283               	bcf	3,5	;RP0=0, select bank0
 10379  0969  1303               	bcf	3,6	;RP1=0, select bank0
 10380  096A  19AC               	btfsc	_SYSC,3
 10381  096B  2972               	goto	l1280
 10382                           
 10383                           ;SYSC_B1.c: 52: if (RB2 == 1) {
 10384  096C  1D06               	btfss	6,2	;volatile
 10385  096D  0008               	return
 10386                           
 10387                           ;SYSC_B1.c: 53: SYSC.Signal = 1;
 10388  096E  15AC               	bsf	_SYSC,3
 10389                           
 10390                           ;SYSC_B1.c: 54: SYSC.Time = 0;
 10391  096F  01AD               	clrf	_SYSC+1
 10392  0970  01AE               	clrf	_SYSC+2
 10393                           
 10394                           ;SYSC_B1.c: 55: }
 10395                           ;SYSC_B1.c: 56: } else {
 10396  0971  0008               	return
 10397  0972                     l1280:	
 10398                           
 10399                           ;SYSC_B1.c: 57: if (RB2 == 0) {
 10400  0972  1906               	btfsc	6,2	;volatile
 10401  0973  0008               	return
 10402                           
 10403                           ;SYSC_B1.c: 58: SYSC.Signal = 0;
 10404  0974  11AC               	bcf	_SYSC,3
 10405  0975  0008               	return
 10406  0976                     __end_of_DetectSYSC_Signal:	
 10407                           
 10408                           	psect	text70
 10409  0C52                     __ptext70:	
 10410 ;; *************** function _CDS_Main *****************
 10411 ;; Defined at:
 10412 ;;		line 11 in file "../src/CDS_B1.c"
 10413 ;; Parameters:    Size  Location     Type
 10414 ;;		None
 10415 ;; Auto vars:     Size  Location     Type
 10416 ;;		None
 10417 ;; Return value:  Size  Location     Type
 10418 ;;		None               void
 10419 ;; Registers used:
 10420 ;;		wreg, status,2, status,0
 10421 ;; Tracked objects:
 10422 ;;		On entry : 0/0
 10423 ;;		On exit  : 0/0
 10424 ;;		Unchanged: 0/0
 10425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10426 ;;      Params:         0       0       0       0
 10427 ;;      Locals:         0       0       0       0
 10428 ;;      Temps:          0       3       0       0
 10429 ;;      Totals:         0       3       0       0
 10430 ;;Total ram usage:        3 bytes
 10431 ;; Hardware stack levels used:    1
 10432 ;; Hardware stack levels required when called:    2
 10433 ;; This function calls:
 10434 ;;		Nothing
 10435 ;; This function is called by:
 10436 ;;		_main
 10437 ;; This function uses a non-reentrant model
 10438 ;;
 10439                           
 10440                           
 10441                           ;psect for function _CDS_Main
 10442  0C52                     _CDS_Main:	
 10443                           
 10444                           ;CDS_B1.c: 13: if (_CDS.Enable == 1) {
 10445                           
 10446                           ;incstack = 0
 10447                           ; Regs used in _CDS_Main: [wreg+status,2+status,0]
 10448  0C52  1283               	bcf	3,5	;RP0=0, select bank0
 10449  0C53  1303               	bcf	3,6	;RP1=0, select bank0
 10450  0C54  1C36               	btfss	__CDS,0
 10451  0C55  0008               	return
 10452                           
 10453                           ;CDS_B1.c: 14: if (_CDS.GO == 0) {
 10454  0C56  18B6               	btfsc	__CDS,1
 10455  0C57  2C65               	goto	l180
 10456                           
 10457                           ;CDS_B1.c: 15: if (_CDS.ADtoGO == 0) {
 10458  0C58  19B6               	btfsc	__CDS,3
 10459  0C59  0008               	return
 10460                           
 10461                           ;CDS_B1.c: 16: _CDS.Time++;
 10462  0C5A  3001               	movlw	1
 10463  0C5B  00D7               	movwf	??_CDS_Main
 10464  0C5C  0857               	movf	??_CDS_Main,w
 10465  0C5D  07B7               	addwf	__CDS+1,f
 10466                           
 10467                           ;CDS_B1.c: 17: if (_CDS.Time >= (100 / 20))
 10468  0C5E  3005               	movlw	5
 10469  0C5F  0237               	subwf	__CDS+1,w
 10470  0C60  1C03               	skipc
 10471  0C61  0008               	return
 10472                           
 10473                           ;CDS_B1.c: 18: {
 10474                           ;CDS_B1.c: 19: _CDS.Time = 0;
 10475  0C62  01B7               	clrf	__CDS+1
 10476                           
 10477                           ;CDS_B1.c: 20: _CDS.ADtoGO = 1;
 10478  0C63  15B6               	bsf	__CDS,3
 10479                           
 10480                           ;CDS_B1.c: 21: }
 10481                           ;CDS_B1.c: 22: }
 10482                           ;CDS_B1.c: 23: } else {
 10483  0C64  0008               	return
 10484  0C65                     l180:	
 10485                           
 10486                           ;CDS_B1.c: 24: if (_CDS.GO == 1) {
 10487  0C65  1CB6               	btfss	__CDS,1
 10488  0C66  0008               	return
 10489                           
 10490                           ;CDS_B1.c: 25: _CDS.GO = 0;
 10491  0C67  10B6               	bcf	__CDS,1
 10492                           
 10493                           ;CDS_B1.c: 26: if (_CDS.Status == 0) {
 10494  0C68  1A36               	btfsc	__CDS,4
 10495  0C69  2C70               	goto	l5617
 10496                           
 10497                           ;CDS_B1.c: 27: if (_CDS.SignalAD >= _CDS.VRAD) {
 10498  0C6A  0838               	movf	__CDS+2,w
 10499  0C6B  0239               	subwf	__CDS+3,w
 10500  0C6C  1C03               	skipc
 10501  0C6D  0008               	return
 10502                           
 10503                           ;CDS_B1.c: 28: _CDS.Status = 1;
 10504  0C6E  1636               	bsf	__CDS,4
 10505                           
 10506                           ;CDS_B1.c: 29: }
 10507                           ;CDS_B1.c: 30: } else {
 10508  0C6F  0008               	return
 10509  0C70                     l5617:	
 10510                           
 10511                           ;CDS_B1.c: 31: if (_CDS.SignalAD <= (_CDS.VRAD - 100)) {
 10512  0C70  0838               	movf	__CDS+2,w
 10513  0C71  3E9C               	addlw	156
 10514  0C72  00D7               	movwf	??_CDS_Main
 10515  0C73  30FF               	movlw	255
 10516  0C74  1803               	skipnc
 10517  0C75  3000               	movlw	0
 10518  0C76  00D8               	movwf	??_CDS_Main+1
 10519  0C77  0858               	movf	??_CDS_Main+1,w
 10520  0C78  3A80               	xorlw	128
 10521  0C79  00D9               	movwf	??_CDS_Main+2
 10522  0C7A  3080               	movlw	128
 10523  0C7B  0259               	subwf	??_CDS_Main+2,w
 10524  0C7C  1D03               	skipz
 10525  0C7D  2C80               	goto	u6895
 10526  0C7E  0839               	movf	__CDS+3,w
 10527  0C7F  0257               	subwf	??_CDS_Main,w
 10528  0C80                     u6895:	
 10529  0C80  1C03               	skipc
 10530  0C81  0008               	return
 10531                           
 10532                           ;CDS_B1.c: 32: _CDS.Status = 0;
 10533  0C82  1283               	bcf	3,5	;RP0=0, select bank0
 10534  0C83  1303               	bcf	3,6	;RP1=0, select bank0
 10535  0C84  1236               	bcf	__CDS,4
 10536  0C85  0008               	return
 10537  0C86                     __end_of_CDS_Main:	
 10538                           
 10539                           	psect	text71
 10540  08F9                     __ptext71:	
 10541 ;; *************** function _CDS_Initialization *****************
 10542 ;; Defined at:
 10543 ;;		line 7 in file "../src/CDS_B1.c"
 10544 ;; Parameters:    Size  Location     Type
 10545 ;;		None
 10546 ;; Auto vars:     Size  Location     Type
 10547 ;;		None
 10548 ;; Return value:  Size  Location     Type
 10549 ;;		None               void
 10550 ;; Registers used:
 10551 ;;		None
 10552 ;; Tracked objects:
 10553 ;;		On entry : 0/0
 10554 ;;		On exit  : 0/0
 10555 ;;		Unchanged: 0/0
 10556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10557 ;;      Params:         0       0       0       0
 10558 ;;      Locals:         0       0       0       0
 10559 ;;      Temps:          0       0       0       0
 10560 ;;      Totals:         0       0       0       0
 10561 ;;Total ram usage:        0 bytes
 10562 ;; Hardware stack levels used:    1
 10563 ;; Hardware stack levels required when called:    2
 10564 ;; This function calls:
 10565 ;;		Nothing
 10566 ;; This function is called by:
 10567 ;;		_main
 10568 ;; This function uses a non-reentrant model
 10569 ;;
 10570                           
 10571                           
 10572                           ;psect for function _CDS_Initialization
 10573  08F9                     _CDS_Initialization:	
 10574                           
 10575                           ;CDS_B1.c: 8: _CDS.Enable = 1;
 10576                           
 10577                           ;incstack = 0
 10578                           ; Regs used in _CDS_Initialization: []
 10579  08F9  1283               	bcf	3,5	;RP0=0, select bank0
 10580  08FA  1303               	bcf	3,6	;RP1=0, select bank0
 10581  08FB  1436               	bsf	__CDS,0
 10582  08FC  0008               	return
 10583  08FD                     __end_of_CDS_Initialization:	
 10584                           
 10585                           	psect	text72
 10586  0D7D                     __ptext72:	
 10587 ;; *************** function _Buzzer_Main *****************
 10588 ;; Defined at:
 10589 ;;		line 46 in file "../src/Buzzer_B1.c"
 10590 ;; Parameters:    Size  Location     Type
 10591 ;;		None
 10592 ;; Auto vars:     Size  Location     Type
 10593 ;;		None
 10594 ;; Return value:  Size  Location     Type
 10595 ;;		None               void
 10596 ;; Registers used:
 10597 ;;		wreg, status,2, status,0
 10598 ;; Tracked objects:
 10599 ;;		On entry : 0/0
 10600 ;;		On exit  : 0/0
 10601 ;;		Unchanged: 0/0
 10602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10603 ;;      Params:         0       0       0       0
 10604 ;;      Locals:         0       0       0       0
 10605 ;;      Temps:          1       0       0       0
 10606 ;;      Totals:         1       0       0       0
 10607 ;;Total ram usage:        1 bytes
 10608 ;; Hardware stack levels used:    1
 10609 ;; Hardware stack levels required when called:    2
 10610 ;; This function calls:
 10611 ;;		Nothing
 10612 ;; This function is called by:
 10613 ;;		_main
 10614 ;; This function uses a non-reentrant model
 10615 ;;
 10616                           
 10617                           
 10618                           ;psect for function _Buzzer_Main
 10619  0D7D                     _Buzzer_Main:	
 10620                           
 10621                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 10622                           
 10623                           ;incstack = 0
 10624                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 10625  0D7D  1283               	bcf	3,5	;RP0=0, select bank0
 10626  0D7E  1303               	bcf	3,6	;RP1=0, select bank0
 10627  0D7F  1CA0               	btfss	_Buz1,1
 10628  0D80  0008               	return
 10629                           
 10630                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 10631  0D81  3001               	movlw	1
 10632  0D82  07A1               	addwf	_Buz1+1,f
 10633  0D83  1803               	skipnc
 10634  0D84  0AA2               	incf	_Buz1+2,f
 10635  0D85  3000               	movlw	0
 10636  0D86  07A2               	addwf	_Buz1+2,f
 10637                           
 10638                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 10639  0D87  0827               	movf	_Buz1+7,w
 10640  0D88  0222               	subwf	_Buz1+2,w
 10641  0D89  1D03               	skipz
 10642  0D8A  2D8D               	goto	u4285
 10643  0D8B  0826               	movf	_Buz1+6,w
 10644  0D8C  0221               	subwf	_Buz1+1,w
 10645  0D8D                     u4285:	
 10646  0D8D  1C03               	skipc
 10647  0D8E  0008               	return
 10648                           
 10649                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 10650  0D8F  01A1               	clrf	_Buz1+1
 10651  0D90  01A2               	clrf	_Buz1+2
 10652                           
 10653                           ;Buzzer_B1.c: 51: Buz1.Switch = (RC0 == 1) ? 1 : 0;
 10654  0D91  12A0               	bcf	_Buz1,5
 10655  0D92  1807               	btfsc	7,0	;volatile
 10656  0D93  16A0               	bsf	_Buz1,5
 10657                           
 10658                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 10659  0D94  1283               	bcf	3,5	;RP0=0, select bank0
 10660  0D95  1303               	bcf	3,6	;RP1=0, select bank0
 10661  0D96  1AA0               	btfsc	_Buz1,5
 10662  0D97  2DBC               	goto	l68
 10663                           
 10664                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 10665  0D98  08A3               	movf	_Buz1+3,f
 10666  0D99  1D03               	skipz
 10667  0D9A  2DB9               	goto	l69
 10668                           
 10669                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 10670  0D9B  1DA0               	btfss	_Buz1,3
 10671  0D9C  2DA9               	goto	l70
 10672                           
 10673                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 10674  0D9D  11A0               	bcf	_Buz1,3
 10675                           
 10676                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 10677  0D9E  0824               	movf	_Buz1+4,w
 10678  0D9F  00F4               	movwf	??_Buzzer_Main
 10679  0DA0  0874               	movf	??_Buzzer_Main,w
 10680  0DA1  00A3               	movwf	_Buz1+3
 10681                           
 10682                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 10683  0DA2  0829               	movf	_Buz1+9,w
 10684  0DA3  01A7               	clrf	_Buz1+7
 10685  0DA4  07A7               	addwf	_Buz1+7,f
 10686  0DA5  0828               	movf	_Buz1+8,w
 10687  0DA6  01A6               	clrf	_Buz1+6
 10688  0DA7  07A6               	addwf	_Buz1+6,f
 10689                           
 10690                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 10691  0DA8  0008               	return
 10692  0DA9                     l70:	
 10693  0DA9  1E20               	btfss	_Buz1,4
 10694  0DAA  2DB7               	goto	l72
 10695                           
 10696                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 10697  0DAB  1220               	bcf	_Buz1,4
 10698                           
 10699                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 10700  0DAC  0825               	movf	_Buz1+5,w
 10701  0DAD  00F4               	movwf	??_Buzzer_Main
 10702  0DAE  0874               	movf	??_Buzzer_Main,w
 10703  0DAF  00A3               	movwf	_Buz1+3
 10704                           
 10705                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 10706  0DB0  082B               	movf	_Buz1+11,w
 10707  0DB1  01A7               	clrf	_Buz1+7
 10708  0DB2  07A7               	addwf	_Buz1+7,f
 10709  0DB3  082A               	movf	_Buz1+10,w
 10710  0DB4  01A6               	clrf	_Buz1+6
 10711  0DB5  07A6               	addwf	_Buz1+6,f
 10712                           
 10713                           ;Buzzer_B1.c: 62: } else {
 10714  0DB6  0008               	return
 10715  0DB7                     l72:	
 10716                           
 10717                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 10718  0DB7  10A0               	bcf	_Buz1,1
 10719                           
 10720                           ;Buzzer_B1.c: 64: }
 10721                           ;Buzzer_B1.c: 65: } else {
 10722  0DB8  0008               	return
 10723  0DB9                     l69:	
 10724                           
 10725                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 10726  0DB9  16A0               	bsf	_Buz1,5
 10727                           
 10728                           ;Buzzer_B1.c: 68: RC0 = 1;
 10729  0DBA  1407               	bsf	7,0	;volatile
 10730                           
 10731                           ;Buzzer_B1.c: 69: }
 10732                           ;Buzzer_B1.c: 70: } else {
 10733  0DBB  0008               	return
 10734  0DBC                     l68:	
 10735                           
 10736                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 10737  0DBC  12A0               	bcf	_Buz1,5
 10738                           
 10739                           ;Buzzer_B1.c: 73: RC0 = 0;
 10740  0DBD  1007               	bcf	7,0	;volatile
 10741                           
 10742                           ;Buzzer_B1.c: 75: Buz1.Count--;
 10743  0DBE  3001               	movlw	1
 10744  0DBF  02A3               	subwf	_Buz1+3,f
 10745  0DC0  0008               	return
 10746  0DC1                     __end_of_Buzzer_Main:	
 10747                           
 10748                           	psect	text73
 10749  08F5                     __ptext73:	
 10750 ;; *************** function _Buzzer_Initialization *****************
 10751 ;; Defined at:
 10752 ;;		line 11 in file "../src/Buzzer_B1.c"
 10753 ;; Parameters:    Size  Location     Type
 10754 ;;		None
 10755 ;; Auto vars:     Size  Location     Type
 10756 ;;		None
 10757 ;; Return value:  Size  Location     Type
 10758 ;;		None               void
 10759 ;; Registers used:
 10760 ;;		None
 10761 ;; Tracked objects:
 10762 ;;		On entry : 0/0
 10763 ;;		On exit  : 0/0
 10764 ;;		Unchanged: 0/0
 10765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10766 ;;      Params:         0       0       0       0
 10767 ;;      Locals:         0       0       0       0
 10768 ;;      Temps:          0       0       0       0
 10769 ;;      Totals:         0       0       0       0
 10770 ;;Total ram usage:        0 bytes
 10771 ;; Hardware stack levels used:    1
 10772 ;; Hardware stack levels required when called:    2
 10773 ;; This function calls:
 10774 ;;		Nothing
 10775 ;; This function is called by:
 10776 ;;		_main
 10777 ;; This function uses a non-reentrant model
 10778 ;;
 10779                           
 10780                           
 10781                           ;psect for function _Buzzer_Initialization
 10782  08F5                     _Buzzer_Initialization:	
 10783                           
 10784                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 10785                           
 10786                           ;incstack = 0
 10787                           ; Regs used in _Buzzer_Initialization: []
 10788  08F5  1283               	bcf	3,5	;RP0=0, select bank0
 10789  08F6  1303               	bcf	3,6	;RP1=0, select bank0
 10790  08F7  1420               	bsf	_Buz1,0
 10791  08F8  0008               	return
 10792  08F9                     __end_of_Buzzer_Initialization:	
 10793                           
 10794                           	psect	text74
 10795  0AC0                     __ptext74:	
 10796 ;; *************** function _ISR *****************
 10797 ;; Defined at:
 10798 ;;		line 116 in file "../src/MCU_B1.c"
 10799 ;; Parameters:    Size  Location     Type
 10800 ;;		None
 10801 ;; Auto vars:     Size  Location     Type
 10802 ;;		None
 10803 ;; Return value:  Size  Location     Type
 10804 ;;		None               void
 10805 ;; Registers used:
 10806 ;;		wreg, status,2, status,0, pclath, cstack
 10807 ;; Tracked objects:
 10808 ;;		On entry : 0/0
 10809 ;;		On exit  : 0/0
 10810 ;;		Unchanged: 0/0
 10811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10812 ;;      Params:         0       0       0       0
 10813 ;;      Locals:         0       0       0       0
 10814 ;;      Temps:          4       0       0       0
 10815 ;;      Totals:         4       0       0       0
 10816 ;;Total ram usage:        4 bytes
 10817 ;; Hardware stack levels used:    1
 10818 ;; Hardware stack levels required when called:    1
 10819 ;; This function calls:
 10820 ;;		_TMR1_ISR
 10821 ;; This function is called by:
 10822 ;;		Interrupt level 1
 10823 ;; This function uses a non-reentrant model
 10824 ;;
 10825                           
 10826                           
 10827                           ;psect for function _ISR
 10828  0AC0                     _ISR:	
 10829                           
 10830                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
 10831  0AC0  1683               	bsf	3,5	;RP0=1, select bank1
 10832  0AC1  1303               	bcf	3,6	;RP1=0, select bank1
 10833  0AC2  1C0C               	btfss	12,0	;volatile
 10834  0AC3  2ACB               	goto	i1l515
 10835  0AC4  1283               	bcf	3,5	;RP0=0, select bank0
 10836  0AC5  1303               	bcf	3,6	;RP1=0, select bank0
 10837  0AC6  1C0C               	btfss	12,0	;volatile
 10838  0AC7  2ACB               	goto	i1l515
 10839                           
 10840                           ;MCU_B1.c: 126: TMR1_ISR();
 10841  0AC8  158A  2266  158A   	fcall	_TMR1_ISR
 10842  0ACB                     i1l515:	
 10843                           ;MCU_B1.c: 127: }
 10844                           ;MCU_B1.c: 148: return;
 10845                           
 10846  0ACB  0873               	movf	??_ISR+3,w
 10847  0ACC  1283               	bcf	3,5	;RP0=0, select bank0
 10848  0ACD  1303               	bcf	3,6	;RP1=0, select bank0
 10849  0ACE  00FF               	movwf	127
 10850  0ACF  0872               	movf	??_ISR+2,w
 10851  0AD0  008A               	movwf	10
 10852  0AD1  0871               	movf	??_ISR+1,w
 10853  0AD2  0084               	movwf	4
 10854  0AD3  0E70               	swapf	??_ISR^(0+-128),w
 10855  0AD4  0083               	movwf	3
 10856  0AD5  0EFE               	swapf	126,f
 10857  0AD6  0E7E               	swapf	126,w
 10858  0AD7  0009               	retfie
 10859  0AD8                     __end_of_ISR:	
 10860                           
 10861                           	psect	intentry
 10862  0004                     __pintentry:	
 10863                           ;incstack = 0
 10864                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
 10865                           
 10866  0004                     interrupt_function:	
 10867  007E                     saved_w	set	btemp
 10868  0004  00FE               	movwf	btemp
 10869  0005  0E03               	swapf	3,w
 10870  0006  00F0               	movwf	??_ISR
 10871  0007  0804               	movf	4,w
 10872  0008  00F1               	movwf	??_ISR+1
 10873  0009  080A               	movf	10,w
 10874  000A  00F2               	movwf	??_ISR+2
 10875  000B  1283               	bcf	3,5	;RP0=0, select bank0
 10876  000C  1303               	bcf	3,6	;RP1=0, select bank0
 10877  000D  087F               	movf	btemp+1,w
 10878  000E  00F3               	movwf	??_ISR+3
 10879  000F  158A  2AC0         	ljmp	_ISR
 10880                           
 10881                           	psect	text75
 10882  0A66                     __ptext75:	
 10883 ;; *************** function _TMR1_ISR *****************
 10884 ;; Defined at:
 10885 ;;		line 236 in file "../src/MCU_B1.c"
 10886 ;; Parameters:    Size  Location     Type
 10887 ;;		None
 10888 ;; Auto vars:     Size  Location     Type
 10889 ;;		None
 10890 ;; Return value:  Size  Location     Type
 10891 ;;		None               void
 10892 ;; Registers used:
 10893 ;;		wreg, status,2
 10894 ;; Tracked objects:
 10895 ;;		On entry : 0/0
 10896 ;;		On exit  : 0/0
 10897 ;;		Unchanged: 0/0
 10898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
 10899 ;;      Params:         0       0       0       0
 10900 ;;      Locals:         0       0       0       0
 10901 ;;      Temps:          0       0       0       0
 10902 ;;      Totals:         0       0       0       0
 10903 ;;Total ram usage:        0 bytes
 10904 ;; Hardware stack levels used:    1
 10905 ;; This function calls:
 10906 ;;		Nothing
 10907 ;; This function is called by:
 10908 ;;		_ISR
 10909 ;; This function uses a non-reentrant model
 10910 ;;
 10911                           
 10912                           
 10913                           ;psect for function _TMR1_ISR
 10914  0A66                     _TMR1_ISR:	
 10915                           
 10916                           ;MCU_B1.c: 268: Timer1.Count++;
 10917                           
 10918                           ;incstack = 0
 10919                           ; Regs used in _TMR1_ISR: [wreg+status,2]
 10920  0A66  3001               	movlw	1
 10921  0A67  1283               	bcf	3,5	;RP0=0, select bank0
 10922  0A68  1303               	bcf	3,6	;RP1=0, select bank0
 10923  0A69  07BB               	addwf	_Timer1+1,f
 10924  0A6A  1803               	skipnc
 10925  0A6B  0ABC               	incf	_Timer1+2,f
 10926  0A6C  3000               	movlw	0
 10927  0A6D  07BC               	addwf	_Timer1+2,f
 10928                           
 10929                           ;MCU_B1.c: 269: if (Timer1.Count == (int)(20*10)) {
 10930  0A6E  30C8               	movlw	200
 10931  0A6F  063B               	xorwf	_Timer1+1,w
 10932  0A70  043C               	iorwf	_Timer1+2,w
 10933  0A71  1D03               	skipz
 10934  0A72  2A76               	goto	i1l4365
 10935                           
 10936                           ;MCU_B1.c: 270: Timer1.Count = 0;
 10937  0A73  01BB               	clrf	_Timer1+1
 10938  0A74  01BC               	clrf	_Timer1+2
 10939                           
 10940                           ;MCU_B1.c: 271: Timer1.Timeout = 1;
 10941  0A75  143A               	bsf	_Timer1,0
 10942  0A76                     i1l4365:	
 10943                           
 10944                           ;MCU_B1.c: 272: }
 10945                           ;MCU_B1.c: 274: TMR1H = (int)((65536-1480)/256);
 10946  0A76  30FA               	movlw	250
 10947  0A77  008F               	movwf	15	;volatile
 10948                           
 10949                           ;MCU_B1.c: 275: TMR1L = (int)((65536-1480)%256);
 10950  0A78  3038               	movlw	56
 10951  0A79  008E               	movwf	14	;volatile
 10952                           
 10953                           ;MCU_B1.c: 276: TMR1IF = 0;
 10954  0A7A  100C               	bcf	12,0	;volatile
 10955  0A7B  0008               	return
 10956  0A7C                     __end_of_TMR1_ISR:	
 10957  007E                     btemp	set	126	;btemp
 10958  007E                     wtemp	set	126
 10959  007E                     wtemp0	set	126
 10960  0080                     wtemp1	set	128
 10961  0082                     wtemp2	set	130
 10962  0084                     wtemp3	set	132
 10963  0086                     wtemp4	set	134
 10964  0088                     wtemp5	set	136
 10965  007F                     wtemp6	set	127
 10966  007E                     ttemp	set	126
 10967  007E                     ttemp0	set	126
 10968  0081                     ttemp1	set	129
 10969  0084                     ttemp2	set	132
 10970  0087                     ttemp3	set	135
 10971  007F                     ttemp4	set	127
 10972  007E                     ltemp	set	126
 10973  007E                     ltemp0	set	126
 10974  0082                     ltemp1	set	130
 10975  0086                     ltemp2	set	134
 10976  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         147
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      10
    BANK0            80     25      80
    BANK1            80      0      78
    BANK2            16      0      10

Pointer List with Targets:

    Lights	PTR struct Lights size(1) Largest target is 5
		 -> NULL(NULL[0]), Lights2(BANK0[5]), Lights1(BANK0[5]), 

    Sw	PTR struct Switch size(1) Largest target is 5
		 -> NULL(NULL[0]), Sw2(BANK2[5]), Sw1(BANK2[5]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK0[4]), VarLED2(BANK1[4]), VarLED1(BANK1[4]), 


Critical Paths under _main in COMMON

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getPIR_AD->_getAD
    _getLoad_AD->_getAD
    _getCDS_AD->_getAD
    _setTemp_Main->_setBuz
    _setSw_Main->_SwPointSelect
    _setSw_Main->_getSw_KeyStatus
    _setSYSC_Main->_getMain_All_Error_Status
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___wmul
    _Load_Main->_setLoad_AH_AL_Restore
    _Load_Initialization->_setLoad_AH_AL_Restore
    _setLights_Main->_LightsPointSelect
    _setLights_Main->_getLights_Allow_Condition
    _getLights_Allow_Condition->_getLoad_OK
    _Lights_Control->_LightsPointSelect
    _setLights_Initialization->_LightsPointSelect
    _setLED_Main->_LedPointSelect
    _setLED_Initialization->_LedPointSelect
    _Exception_Main->_getAll_Lights_Line
    _Exception_Main->_setBuz
    _setLights_SwOn->_LightsPointSelect
    _setLights_SwOff->_LightsPointSelect
    _setLights_Trigger->_LightsPointSelect
    _getLights_Status->_LightsPointSelect
    _setLED->_LedPointSelect
    _setBuz->___awdiv

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Exception_Main
    _my_MainTimer->_setBuz
    _getPIR_AD->___awdiv
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setBuz
    _Switch_Main->_setSw_Main
    _setSw_Main->_getMain_All_Error_Status
    _setSYSC_Main->_getMain_All_Error_Status
    _PIR_Main->_getMain_All_Error_Status
    _Load_Main->___lwdiv
    _Lights_Main->_Lights_Control
    _setLights_Main->_setLights
    _setLights->_setLED
    _Lights_Control->___awdiv
    _Lights_Initialization->_setLights_Initialization
    _LED_Main->_setLED_Main
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Exception_Main->_setBuz
    _setLights_SwOn->_setLights_Trigger
    _setLights_SwOff->_setLights_Trigger
    _setBuz->___awdiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     1      4   28146
                                             20 BANK0      5     1      4
              _Buzzer_Initialization
                        _Buzzer_Main
                 _CDS_Initialization
                           _CDS_Main
                  _DetectSYSC_Signal
                     _Exception_Main
                 _LED_Initialization
                           _LED_Main
              _Lights_Initialization
                        _Lights_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                 _PIR_Initialization
                           _PIR_Main
                _SYSC_Initialization
                          _SYSC_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                          _getCDS_AD
                         _getLoad_AD
                          _getPIR_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1589
                                             11 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     654
                                              0 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getPIR_AD                                            9     8      1    2983
                                              8 BANK0      9     8      1
                            ___awdiv
                            ___lwdiv
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           7     7      0    1053
                                              0 BANK0      7     7      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getCDS_AD                                            6     5      1     669
                                              0 BANK0      6     5      1
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                2     1      1     524
                                              4 COMMON     2     1      1
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              4 COMMON     1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    2018
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         6     6      0    2018
                                             11 BANK0      6     6      0
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    3600
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    3600
                                              6 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setLED
                    _setLights_SwOff
                     _setLights_SwOn
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      2     2      0      68
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSC_Main                                            0     0      0     206
                       _setSYSC_Main
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Main                                         0     0      0     206
           _getMain_All_Error_Status
 ---------------------------------------------------------------------------------
 (1) _SYSC_Initialization                                  0     0      0       0
             _setSYSC_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSYSC_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _PIR_Main                                            11    11      0    2556
                                              6 BANK0     11    11      0
                      _getCDS_Status
                   _getLights_Status
           _getMain_All_Error_Status
                    _setLights_SwOff
                     _setLights_SwOn
 ---------------------------------------------------------------------------------
 (2) _getCDS_Status                                        1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _PIR_Initialization                                   1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    2015
                                              7 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
                    _getLight_LoadGO
               _getLight_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 3     3      0      74
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _getLight_Load_Status                                 1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getLight_LoadGO                                      1     1      0      23
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     290
                                              4 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     857
                                              4 COMMON     1     1      0
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Lights_Main                                          0     0      0    3492
                     _Lights_Control
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                     _setLights_Main
 ---------------------------------------------------------------------------------
 (2) _setLights_Main                                       1     1      0    1927
                                              5 BANK0      1     1      0
                  _LightsPointSelect
          _getLights_Allow_Condition
                          _setLights
 ---------------------------------------------------------------------------------
 (3) _setLights                                            3     2      1    1633
                                              2 BANK0      3     2      1
                             _setLED
                     _setLights_Line
 ---------------------------------------------------------------------------------
 (4) _setLights_Line                                       1     1      0      88
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getLights_Allow_Condition                            4     4      0     108
                                              5 COMMON     1     1      0
                                              0 BANK0      2     2      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      34
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Lights_Control                                       3     3      0    1278
                                              8 BANK0      3     3      0
                  _LightsPointSelect
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _Lights_Initialization                                0     0      0      93
           _setLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLights_Initialization                             1     1      0      93
                                              0 BANK0      1     1      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              0 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1298
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1298
                                              2 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    5613
                                             11 BANK0      9     9      0
                 _getAll_Lights_Line
                   _getLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
                             _setLED
                    _setLights_SwOff
                     _setLights_SwOn
 ---------------------------------------------------------------------------------
 (3) _setLights_SwOn                                       1     1      0     992
                                              3 BANK0      1     1      0
                  _LightsPointSelect
                   _getLights_Status
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (3) _setLights_SwOff                                      1     1      0     961
                                              3 BANK0      1     1      0
                  _LightsPointSelect
                   _getLights_Status
                  _setLights_Trigger
 ---------------------------------------------------------------------------------
 (4) _setLights_Trigger                                    3     2      1     586
                                              0 BANK0      3     2      1
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _getLights_Status                                     2     2      0     127
                                              0 BANK0      2     2      0
                  _LightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _LightsPointSelect                                    2     2      0      62
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1    1143
                                              0 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      93
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1589
                                              5 COMMON     1     1      0
                                              8 BANK0      3     1      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4    1061
                                              4 COMMON     1     1      0
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      47
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     206
                                              4 COMMON     1     1      0
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (2) _getAll_Lights_Line                                   2     2      0      25
                                              4 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DetectSYSC_Signal                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CDS_Main                                             3     3      0       0
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _CDS_Initialization                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              4 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  4     4      0       0
                                              0 COMMON     4     4      0
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR1_ISR                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CDS_Initialization
   _CDS_Main
   _DetectSYSC_Signal
   _Exception_Main
     _getAll_Lights_Line
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setLED
       _LedPointSelect
     _setLights_SwOff
       _LightsPointSelect
       _getLights_Status
         _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
     _setLights_SwOn
       _LightsPointSelect
       _getLights_Status
         _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Lights_Initialization
     _setLights_Initialization
       _LightsPointSelect
   _Lights_Main
     _Lights_Control
       _LightsPointSelect
       ___awdiv
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setLights_Main
       _LightsPointSelect
       _getLights_Allow_Condition
         _getLoad_OK
       _setLights
         _setLED
           _LedPointSelect
         _setLights_Line
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getLight_LoadGO
     _getLight_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _PIR_Initialization
   _PIR_Main
     _getCDS_Status
     _getLights_Status
       _LightsPointSelect
     _getMain_All_Error_Status
     _setLights_SwOff
       _LightsPointSelect
       _getLights_Status
         _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
     _setLights_SwOn
       _LightsPointSelect
       _getLights_Status
         _LightsPointSelect
       _setLights_Trigger
         _LightsPointSelect
   _SYSC_Initialization
     _setSYSC_Initialization
   _SYSC_Main
     _setSYSC_Main
       _getMain_All_Error_Status
   _Switch_Initialization
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setLED
         _LedPointSelect
       _setLights_SwOff
         _LightsPointSelect
         _getLights_Status
           _LightsPointSelect
         _setLights_Trigger
           _LightsPointSelect
       _setLights_SwOn
         _LightsPointSelect
         _getLights_Status
           _LightsPointSelect
         _setLights_Trigger
           _LightsPointSelect
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
       _setBuz
         ___awdiv
   _WDT_Main
     _WDT_Clearing
   _getCDS_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getPIR_AD
     ___awdiv
     ___lwdiv
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _TMR1_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      B2       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     19      50       5      100.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0      4E       7       97.5%
BITBANK2            10      0       0       8        0.0%
BANK2               10      0       A       9       62.5%
DATA                 0      0      B2      10        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Mar 09 15:09:03 2015

              __size_of_Switch_Main 000B                          __CFG_CP$ON 0000  
                      _WDT_Clearing 0002           getMain_Lights_Count@count 0057  
                                l60 0E3E                                  l70 0DA9  
                                l72 0DB7                                  l58 0E30  
                                l68 0DBC                                  l69 0DB9  
                      ___awdiv@sign 005C                                  _Sw 0079  
                    setTemp_Main@AD 0067                                  fsr 0004  
               ___wmul@multiplicand 0059                                 l180 0C65  
                               l350 0B01                                 l700 0CE0  
                               l701 0CFD                                 l349 0AF9  
                               l383 0CB4                                 l384 0CBA  
                               l705 0CF9                                 l731 05BD  
                               l820 020F                                 l830 01E8  
                               l822 0066                                 l831 01E6  
                               l823 0062                                 l824 005C  
                               l836 0192                                 l952 07A2  
                               l963 079C                                 l958 0739  
                               _GIE 005F                                 _RC0 0038  
                               _RB2 0032                                 _LED 0076  
                               _RC1 0039                                 _RB3 0033  
                               _RB4 0034                                 _RA6 002E  
                               _RB5 0035                                 _RA7 002F  
                               _RC4 003C                                 _RC5 003D  
                               _RC6 003E                                 _RC7 003F  
                               _PS0 0408                                 _PS1 0409  
                               _PS2 040A                                 _ISR 0AC0  
                               _PSA 040B                                 _WDT 003D  
                 ??_setLights_SwOff 0076                                 _Cmd 003F  
                               _Sw1 0120                                 _Sw2 0125  
            getAll_Lights_Line@line 0075                                 fsr0 0004  
                               indf 0000               _Buzzer_Initialization 08F5  
                   __end_of_ADC_Set 0926           __end_of_LightsPointSelect 0A17  
                 ??_getSw_KeyStatus 0074                    _getLights_Status 09D0  
           __size_of_Lights_Control 009A                                ?_ISR 0070  
                        Load_Main@i 0066                                l1040 03A2  
                              l1041 0268                                l1042 024E  
                              l1047 026E                                l1049 027F  
                              l1404 0A45                                l1280 0972  
                              l1426 0671                                l1428 05FA  
                              l1544 0BDF                                l4113 0DD8  
                    _Load_Main$2716 0061                                l1564 0FFB  
                              l1558 0FB8                                l1591 0AB6  
                              l4119 0DF3                                l5105 07E3  
                              l5113 07EB                                l1596 09B8  
                              l1597 09BE                                l5109 07E7  
                              l5061 0A0E                                l5301 0FD2  
                              l6021 02A2                                l1694 0BB1  
                              l5151 0EBF                                l5231 0D23  
                              l5161 0EC7                                l5145 0EB4  
                              l5073 07B7                                l5081 07BF  
                              l5233 0D28                                l6121 0512  
                              l6033 02B9                                l5163 0ED5  
                              l6131 0545                                l6115 0503  
                              l5315 0FF7                                l5331 0B3B  
                              l5173 0EF6                                l6141 057C  
                              l6053 0317                                l6045 0303  
                              l6037 02C5                                l6061 0348  
                              l5325 0B32                                l5087 07C8  
                              l5095 07D0                                l6151 05A3  
                              l6143 0559                                l6135 0555  
                              l6127 0539                                l6039 02C6  
                              l3831 0A21                                l5327 0B35  
                              l5177 0EFE                                l5169 0EEB  
                              l5249 0C3E                                l6145 0588  
                              l6129 0516                                l5265 0AA1  
                              l5521 0C19                                l6073 036C  
                              l5441 0A49                                l3841 0A5A  
                              l5417 0789                                l6155 05AF  
                              l5291 0FB4                                l6091 039C  
                              l5419 078C                                l3757 09CE  
                              l5277 0F8F                                l5445 0A4F  
                              l3845 0A64                                l5429 079B  
                              l5543 06E2                                l5391 074C  
                              l6175 0F26                                l5617 0C70  
                              l3777 0CDC                                l3769 0CD0  
                              l5297 0FBF                                l5561 0BA7  
                              l5473 061D                                l5457 05EC  
                              l5385 073B                                l5393 074F  
                              l5721 042B                                l5713 0415  
                              l5705 03FF                                l3787 0CF4  
                              l3779 0CE4                                l5555 0716  
                              l5539 06D1                                l5731 0444  
                              l6187 0F49                                l5581 0D47  
                              l5821 0065                                l5805 0046  
                              l5485 0648                                l5717 0420  
                              l5709 040A                                l5583 0D55  
                              l5655 0E7F                                l5647 0E6B  
                              l5593 0D76                                l5761 04D6  
                              l5753 04AA                                l5737 0460  
                              l5843 00C8                                l5675 0EA3  
                              l5659 0E87                                l5747 048E  
                              l5589 0D6B                                l5933 01FC  
                              l5837 008C                                l5951 0BE0  
                              l5767 04E4                                l5783 0B9B  
                              l5875 0163                                l5869 0153  
                              l5887 01AF                                l5879 0184  
                              l5897 01C8                                l5985 0262  
             _myMain_Initialization 08E5                        __CFG_WDTE$ON 0000  
                              _PEIE 005E                                u4285 0D8D  
                              u3835 0DFF                                u7315 008A  
                              u7325 00C6                                u6630 06CD  
                              u6615 06B9                                u7415 01A7  
                              u7335 011D                                u5905 0EEC  
                              u6660 06DE                                u6805 0D6C  
                              u6725 0BB2                                u6735 0BB9  
                              u5865 0ECA                                u5885 0ED6  
                              u6685 0701                                u6765 0D4A  
                              u5895 0EE2                                u7815 0358  
                              u5975 0A38                                u6785 0D56  
                              u7930 0542                                u6795 0D62  
                              u7755 02E4                                u7765 02FC  
                              u6895 0C80                                u7935 051F  
                              u7855 0389                                u7960 0585  
                              u7785 0330                                u7965 0562  
                              __CDS 0036             ?_setSYSC_Initialization 0070  
                              _WPUB 0095                                _SYSC 002C  
                              _Buz1 0020                                __PIR 00A0  
                              _Load 00CA                                _Temp 0042  
                              _main 0F05                                btemp 007E  
                   __end_of_WDT_Set 0992                                ltemp 007E  
                              start 0011                                ttemp 007E  
                              wtemp 007E                    __end_of_CDS_Main 0C86  
      __size_of_Temp_Initialization 0003                               ??_ISR 0070  
                 _setLights_Trigger 0B0A                       ??_Lights_Main 0076  
                     __CFG_PLLEN$ON 0000                    __end_of_LED_Main 0800  
                ?_setLights_Trigger 0057                               ?_main 006B  
                   __end_of___awdiv 0F05                               _ADRES 001E  
                   ___awdiv@divisor 0057                               _T1CON 0010  
                   __end_of___lwdiv 0D7D                               i1l515 0ACB  
                   ___awdiv@counter 005B                               _TMR1H 000F  
                             _TMR1L 000E                               _PORTA 0005  
                             _PORTB 0006                               _PORTC 0007  
                      ?_setLED_Main 0070                               _TRISA 0085  
                             _TRISB 0086                               _TRISC 0087  
           __end_of_Timeout_Counter 0A3E                               _Light 0077  
               ??_setLights_Trigger 0058                    __end_of_PIR_Main 03B8  
                  __end_of_TMR1_ISR 0A7C                    __end_of_TMR1_Set 0984  
                             _getAD 0B25      __end_of_setSYSC_Initialization 0901  
    getLights_Allow_Condition@allow 0057             __end_of_getLight_LoadGO 090C  
                     ??_Buzzer_Main 0074                    __end_of_WDT_Main 09F2  
                     _LightsControl 0040                      __CFG_BOREN$OFF 0000  
      __end_of_getMain_Lights_Count 09A1                               pclath 000A  
                             ltemp0 007E                               ltemp1 0082  
                             ltemp2 0086                               ltemp3 0080  
    __size_of_setLED_Initialization 0012       __end_of_setLED_Initialization 0A04  
                             ttemp0 007E                               ttemp1 0081  
                             ttemp2 0084                               ttemp3 0087  
                             ttemp4 007F                               status 0003  
                             wtemp0 007E                               wtemp1 0080  
                             wtemp2 0082                               wtemp3 0084  
                             wtemp4 0086                               wtemp5 0088  
                             wtemp6 007F                   getPIR_AD@channel1 0064  
                 getPIR_AD@channel2 005F              ?_setLoad_AH_AL_Restore 0070  
                 setTemp_Main@error 0063                      _setLights_Main 0BF0  
                    _setLights_Line 0AA9                     __initialization 0013  
                    _setLights_SwOn 0CFF                  __size_of_SYSC_Main 0003  
         __end_of_setLights_Trigger 0B25                        __end_of_main 0F77  
                  __end_of_Fosc_Set 0906      getMain_All_LightsStatus@status 0074  
                    _Exception_Main 04E6                           ??_ADC_Set 0074  
                            ??_main 006F               PIR_Main@Enable_Switch 0065  
            ?_Buzzer_Initialization 0070                 __end_of_Lights_Main 0BF0  
        __size_of_LightsPointSelect 0013            _getMain_All_LightsStatus 09C0  
           ??_Switch_Initialization 0074                              ?_getAD 0074  
            ?_myMain_Initialization 0070                              _ADCON0 001F  
                            _ADCON1 009F                    ___awdiv@dividend 0059  
                         ??_WDT_Set 0074                              _ANSELA 0185  
                            _ANSELB 0186            _getMain_All_Error_Status 0CC1  
                            i1l4365 0A76                              _FVRCON 009D  
            getLights_Status@lights 0057                              _OSCCON 0090  
                __size_of_Load_Main 01EA                              _TMR1IE 0460  
                            _TMR1IF 0060                              _IO_Set 0AD8  
              Exception_Main@i_2440 0069              getLights_Status@status 0058  
            __end_of_setLights_Main 0C20              __end_of_setLights_Line 0AC0  
            __end_of_setLights_SwOn 0D3D        __size_of_SYSC_Initialization 0003  
        __end_of_Mcu_Initialization 09B0                 __end_of_Buzzer_Main 0DC1  
                            _Lights 0078                              _Timer1 003A  
       __size_of_CDS_Initialization 0004             ??_Lights_Initialization 0076  
            __end_of_Exception_Main 05BE                Exception_Main@lights 0063  
                            ___wmul 0BA5                           ??___awdiv 0074  
                         ??___lwdiv 0074                Exception_Main@status 0066  
                            _setLED 07A6                              _myMain 0031  
                  ___awdiv@quotient 005D                              _setBuz 0E05  
                __size_of_Temp_Main 0003                Load_Main@LightsCount 0065  
       __end_of_Load_Initialization 08E9     getLights_Allow_Condition@lights 0070  
                            saved_w 007E                    setLights_SwOn@sw 005A  
                  ?_Timeout_Counter 0070         getMain_Lights_Count@status1 0058  
       getMain_Lights_Count@status2 0059               __end_of_SwPointSelect 0A2A  
                 __end_of_SYSC_Main 08EF                      _Lights_Control 0682  
           __size_of_LedPointSelect 001A                           ?_CDS_Main 0070  
                setTemp_Main@TempGO 0064                    ?_getLight_LoadGO 0070  
       __size_of_PIR_Initialization 000B                          _TouchPower 0A3E  
           __end_of__initialization 002A                           ?_LED_Main 0070  
                     ?_my_MainTimer 0070                     ?_setLights_Main 0070  
                   ?_setLights_Line 0070                     ?_setLights_SwOn 0070  
                     ?_setSYSC_Main 0070                     _setLights_SwOff 0C20  
        __size_of_setLights_Trigger 001B                      __pcstackCOMMON 0070  
                __size_of_getCDS_AD 0022                     ?_Exception_Main 0070  
          __end_of_getLights_Status 09E1                       __end_of_getAD 0B41  
                         ?_PIR_Main 0070                           ?_TMR1_ISR 0070  
     __size_of_getLight_Load_Status 0006                           ?_TMR1_Set 0070  
            setLoad_AH_AL_Restore@i 0075                  _LED_Initialization 095C  
                   _getSw_KeyStatus 0A52                  __size_of_getPIR_AD 012E  
                       _Lights_Main 0BCA            _setLights_Initialization 0918  
              _getMain_Lights_Count 0992                           ?_WDT_Main 0070  
                 __end_of_Load_Main 0217          __end_of_set_TimeoutCleared 0918  
               ?_LED_Initialization 0070              __end_of_Lights_Control 071C  
              __size_of_setLED_Main 003B                             ??_getAD 0075  
               _Temp_Initialization 08EF                          ??_CDS_Main 0057  
                        __pbssBANK0 0020                          __pbssBANK1 00A0  
                        __pbssBANK2 0120                           ?_Fosc_Set 0070  
       __size_of_getAll_Lights_Line 0010                         _Buzzer_Main 0D7D  
                 __end_of_Temp_Main 08F5                             ?_IO_Set 0070  
                   __CFG_VCAPEN$DIS 0000                      ??_my_MainTimer 0062  
                        ??_LED_Main 0076                      ??_setSYSC_Main 0075  
                     ??_Switch_Main 0076                ??_LED_Initialization 0076  
                 LedPointSelect@led 0075                         setBuz@count 0061  
                        __pmaintext 0F05          ?_getLights_Allow_Condition 0070  
              ?_Temp_Initialization 0070                PIR_Main@LightsStatus 0067  
                           ?___wmul 0057                          ??_PIR_Main 005D  
                        ??_TMR1_ISR 0070                       ?_setTemp_Main 0070  
                __size_of_setLights 0089                          _getLoad_AD 0E4C  
                        ??_TMR1_Set 0074                          __pintentry 0004  
                        _getLoad_OK 092E                             ?_setLED 0057  
           setLights_Trigger@lights 0059               ?_getMain_Lights_Count 0070  
                           _ADC_Set 091F                             ?_setBuz 005F  
                        _getTemp_AD 0B41                          ??_WDT_Main 0074  
            __size_of_getCDS_Status 0008                     ?_Lights_Control 0070  
                 __end_of_getCDS_AD 0B82                             _WDT_Set 0984  
                     getPIR_AD@VRAD 0066                          ??_Fosc_Set 0074  
                       ?_TouchPower 0070                   __end_of_getPIR_AD 04E6  
           ??_setLoad_AH_AL_Restore 0074             __end_of_setLights_SwOff 0C52  
    _getLights_Allow_Condition$4827 0058                     __size_of_IO_Set 0018  
                        getCDS_AD@i 005A                          getCDS_AD@j 005B  
                           _Lights1 0049                             _Lights2 004E  
                           _VarLED1 00E6                             _VarLED2 00EA  
           __end_of_getSw_KeyStatus 0A66               ??_Temp_Initialization 0074  
                    ??_setTemp_Main 0062                             ___awdiv 0EA8  
                   __size_of___wmul 0025                 __end_of_Switch_Main 095C  
                           ___lwdiv 0D3D          ??_getMain_All_LightsStatus 0074  
           ??_Buzzer_Initialization 0074                         PIR_Main@cds 0062  
                   __size_of_setLED 004E                     __size_of_setBuz 0047  
                           __ptext0 0000                             __ptext1 0B82  
                           __ptext2 08E5                             __ptext3 0B41  
                           __ptext4 03B8                             __ptext5 0E4C  
                           __ptext6 0B60                             __ptext7 0B25  
                           __ptext8 09E1                             __ptext9 0002  
                        getPIR_AD@i 0067                          getPIR_AD@j 0063  
                      __size_of_ISR 0018          ??_getMain_All_Error_Status 0074  
               _SYSC_Initialization 08E9             ??_myMain_Initialization 0074  
          ??_setTemp_Initialization 0074                      _LedPointSelect 0AF0  
                   getTemp_AD@ADRES 005A                             clrloop0 093F  
    __size_of_Switch_Initialization 0001       __end_of_Switch_Initialization 08E4  
                 __end_of_setLights 1000                end_of_initialization 002A  
                        _setSw_Main 05BE                       _getCDS_Status 0936  
              ?_SYSC_Initialization 0070               _setLED_Initialization 09F2  
                 setLights_SwOff@sw 005A                         ?_getLoad_AD 0070  
    __size_of_Lights_Initialization 0008                         ?_getLoad_OK 0070  
            ??_getMain_Lights_Count 0074       __end_of_Lights_Initialization 092E  
                       ?_getTemp_AD 0070                 __size_of_TouchPower 0014  
          setLED_Initialization@led 0059             setTemp_Main@DangerValue 0066  
                _Mcu_Initialization 09A1                __end_of_my_MainTimer 0BA5  
              __end_of_setSYSC_Main 0E05              __end_of_LedPointSelect 0B0A  
          Load_Main@ErrorCountValue 0063                 ?_Mcu_Initialization 0070  
                  ??_setLights_Main 0076                    ??_setLights_Line 0074  
              setLights_Main@lights 005C                    ??_setLights_SwOn 0076  
                         _SYSC_Main 08EC     getMain_All_Error_Status@command 005B  
                 __size_of_CDS_Main 0034                      ?_getCDS_Status 0070  
                  ?_setLights_SwOff 0070               ??_SYSC_Initialization 0074  
                  ??_Exception_Main 0062                      __end_of_IO_Set 0AF0  
        __end_of_CDS_Initialization 08FD                         _Switch_Main 0951  
        ??_setLights_Initialization 0076                   __size_of_LED_Main 000C  
                  ?_getSw_KeyStatus 0070                ??_Mcu_Initialization 0075  
                     ?_WDT_Clearing 0070                   ?_getLights_Status 0070  
                      ?_Lights_Main 0070                      __end_of___wmul 0BCA  
                 getSw_KeyStatus@sw 0075                   __size_of_PIR_Main 01A1  
                 __size_of_TMR1_ISR 0016                  ??_getLights_Status 0076  
                 __size_of_TMR1_Set 000E                      __end_of_setLED 07F4  
                    __end_of_setBuz 0E4C            ??_setSYSC_Initialization 0074  
                 __size_of_WDT_Main 0011                 start_initialization 0013  
                   ?_LedPointSelect 0070                setLights_Line@lights 0074  
                         _Load_Main 002D                         __end_of_ISR 0AD8  
        __end_of_PIR_Initialization 0951        __size_of_Load_Initialization 0003  
      __end_of_getLight_Load_Status 0912     __size_of_setTemp_Initialization 0001  
               getCDS_Status@status 0074                __end_of_setTemp_Main 07A6  
               __size_of_getLoad_AD 005C                        ?_Buzzer_Main 0070  
               __size_of_getLoad_OK 0008                          ?_SYSC_Main 0070  
                _set_TimeoutCleared 0912                            ??_IO_Set 0074  
          __size_of_Timeout_Counter 0014                           _VarErrLED 0053  
                       ?_setSw_Main 0070                 __size_of_getTemp_AD 001F  
            ?_setLED_Initialization 0070                   __size_of_Fosc_Set 0005  
          __size_of_getLight_LoadGO 0006                           _Temp_Main 08F2  
                   setLights@lights 005B                 ?_set_TimeoutCleared 0070  
                    ??_WDT_Clearing 0074         ??_getLights_Allow_Condition 0075  
               Exception_Main@count 0064                     setLights@status 0059  
               Exception_Main@error 0065                            ??___wmul 0074  
            __size_of_SwPointSelect 0013    __end_of_getMain_All_LightsStatus 09D0  
                          ??_setLED 0076                            ?_ADC_Set 0070  
                  ??_Lights_Control 005F                            ??_setBuz 0075  
  __end_of_getMain_All_Error_Status 0CFF                       ??_setLED_Main 0057  
                       __pbssCOMMON 0076             Load_Main@Load_RunStatus 0064  
                         ___latbits 0001                          ?_Load_Main 0070  
                     __pcstackBANK0 0057                ??_set_TimeoutCleared 0074  
        __end_of_getAll_Lights_Line 09C0                            ?_WDT_Set 0070  
                   ??_getCDS_Status 0074                        ??_TouchPower 0074  
                     PIR_Main@error 0061                           _getCDS_AD 0B60  
    __size_of_setLoad_AH_AL_Restore 0016       __end_of_setLoad_AH_AL_Restore 0A92  
                         _getPIR_AD 03B8         __size_of_LED_Initialization 000C  
                   Exception_Main@i 0067                          ?_Temp_Main 0070  
                  ___lwdiv@dividend 0059                          setBuz@time 005F  
                    Load_Main@error 0060              _setTemp_Initialization 08E4  
                     _PIR_Main$3238 0063                            ?___awdiv 0057  
             __size_of_my_MainTimer 0023                            ?___lwdiv 0057  
             __size_of_setSYSC_Main 0044      __size_of_Buzzer_Initialization 0004  
     __end_of_Buzzer_Initialization 08F9                  __end_of_TouchPower 0A52  
          setLights_Trigger@command 0057                 __size_of_setSw_Main 00C4  
   __size_of_setSYSC_Initialization 0004           _getLights_Allow_Condition 0A92  
    __size_of_myMain_Initialization 0001       __end_of_myMain_Initialization 08E6  
                    __size_of_getAD 001C                    ___lwdiv@quotient 005C  
                     _SwPointSelect 0A17                            _CDS_Main 0C52  
               __end_of_setLED_Main 0CC1                         ??_SYSC_Main 0075  
       __end_of_Temp_Initialization 08F2                   interrupt_function 0004  
                        ?_getCDS_AD 0057                      ___wmul@product 0074  
                          _LED_Main 07F4                           _setLights 0F77  
                   SwPointSelect@sw 0075                           clear_ram0 093E  
  __end_of_setLights_Initialization 091F                        _my_MainTimer 0B82  
                        ?_getPIR_AD 005F                        _setSYSC_Main 0DC1  
                          _GO_nDONE 00F9                   ??_Timeout_Counter 0074  
              PIR_Main@TriggerValue 0066                            _PIR_Main 0217  
                      ??_getLoad_AD 0057                            _TMR1_ISR 0A66  
                      ??_getLoad_OK 0074                _getLight_Load_Status 090C  
                          _TMR1_Set 0976                   ??_getLight_LoadGO 0074  
                      ??_getTemp_AD 0057                            _WDT_Main 09E1  
             getSw_KeyStatus@status 0074                    __size_of_ADC_Set 0007  
                 ___wmul@multiplier 0057                      getPIR_AD@VRAD1 0065  
              __size_of_Lights_Main 0026               __size_of_setTemp_Main 008A  
                      setSw_Main@sw 005F                         ??_Load_Main 005E  
    getMain_All_Error_Status@status 005C                      ?_SwPointSelect 0070  
                       getAD@adcon0 0075                         getAD@adcon1 0074  
                    setLED_Main@led 0059                __end_of_WDT_Clearing 0004  
 __size_of_getMain_All_LightsStatus 0010           ?_getMain_All_LightsStatus 0070  
                          _Fosc_Set 0901                    __size_of_WDT_Set 000E  
                __end_of_getLoad_AD 0EA8                  __end_of_getLoad_OK 0936  
             _Switch_Initialization 08E3   __size_of_getMain_All_Error_Status 003E  
         ?_getMain_All_Error_Status 0070                __size_of_Buzzer_Main 0044  
                        ?_setLights 0059                  __end_of_getTemp_AD 0B60  
            _setSYSC_Initialization 08FD                        ?_Switch_Main 0070  
                 getLoad_AD@channel 0059                   _DetectSYSC_Signal 0968  
                          _SwDetect 0041                         ??_Temp_Main 0076  
     _getMain_All_Error_Status$2426 0057       _getMain_All_Error_Status$2427 0059  
               _Load_Initialization 08E6                  ?_DetectSYSC_Signal 0070  
                         setLED@led 0058               ?_getLight_Load_Status 0070  
                      _setTemp_Main 071C                    __size_of___awdiv 005D  
    getLight_Load_Status@loadstatus 0074                    __size_of___lwdiv 0040  
                  ??_LedPointSelect 0074       __size_of_getMain_Lights_Count 000F  
               ??_DetectSYSC_Signal 0074                  _CDS_Initialization 08F9  
             _Lights_Initialization 0926                   getTemp_AD@channel 0059  
                       _setLED_Main 0C86                     ___lwdiv@divisor 0057  
              ?_Load_Initialization 0070                 ?_CDS_Initialization 0070  
                   ___lwdiv@counter 005B                            __ptext10 08F2  
                          __ptext11 071C                            __ptext20 0A2A  
                          __ptext12 08EF                            __ptext21 08E3  
                          __ptext13 08E4                            __ptext30 0984  
                          __ptext22 08EC                            __ptext14 0951  
                          __ptext31 0976                            __ptext23 0DC1  
                          __ptext15 05BE                            __ptext40 0D3D  
                          __ptext32 0AD8                            __ptext24 08E9  
                          __ptext16 0A52                            __ptext41 08E6  
                          __ptext33 0901                            __ptext25 08FD  
                          __ptext17 0A17                            __ptext50 0926  
                          __ptext42 0A7C                            __ptext34 091F  
                          __ptext26 0217                            __ptext18 0A3E  
                          __ptext51 0918                            __ptext43 0BCA  
                          __ptext35 002D                            __ptext27 0936  
                          __ptext19 0912                            __ptext60 09D0  
                          __ptext52 07F4                            __ptext44 0BF0  
                          __ptext36 0992                            __ptext28 0946  
                          __ptext61 0A04                            __ptext53 0C86  
                          __ptext45 0F77                            __ptext37 090C  
                          __ptext29 09A1                            __ptext70 0C52  
                          __ptext62 07A6                            __ptext54 095C  
                          __ptext46 0AA9                            __ptext38 0906  
                          __ptext71 08F9                            __ptext63 0AF0  
                          __ptext55 09F2                            __ptext47 0A92  
                          __ptext39 0BA5                            __ptext72 0D7D  
                          __ptext64 0E05                            __ptext56 04E6  
                          __ptext48 092E                            __ptext73 08F5  
                          __ptext65 0EA8                            __ptext57 0CFF  
                          __ptext49 0682                            __ptext74 0AC0  
                          __ptext66 09C0                            __ptext58 0C20  
                          __ptext75 0A66                            __ptext67 0CC1  
                          __ptext59 0B0A                            __ptext68 09B0  
                          __ptext69 0968           __size_of_getLights_Status 0011  
       __end_of_SYSC_Initialization 08EC             ??_setLED_Initialization 0076  
                       ??_getCDS_AD 0058                        ??_setSw_Main 005D  
                     setLED@command 0057           __end_of_DetectSYSC_Signal 0976  
                     __size_of_main 0072                         ??_getPIR_AD 0060  
                _PIR_Initialization 0946                ??_CDS_Initialization 0074  
       __size_of_Mcu_Initialization 000F            __size_of_setLights_SwOff 0032  
                      getLoad_OK@ok 0074                 ?_PIR_Initialization 0070  
                          main@argc 006B                            main@argv 006D  
          __size_of_getSw_KeyStatus 0014   __size_of_setLights_Initialization 0007  
         ?_setLights_Initialization 0070                     ??_SwPointSelect 0074  
                __end_of_setSw_Main 0682               ??_Load_Initialization 0076  
              Lights_Control@lights 0061                ??_PIR_Initialization 0074  
                          intlevel1 0000              ?_Switch_Initialization 0070  
__size_of_getLights_Allow_Condition 0017               setTemp_Main@SafeValue 0065  
                       ??_setLights 005A             ?_setTemp_Initialization 0070  
           LightsPointSelect@lights 0075                  _getAll_Lights_Line 09B0  
                   getLoad_AD@ADRES 005C              ??_getLight_Load_Status 0074  
                       getLoad_AD@i 005D                         getLoad_AD@j 005B  
                       getLoad_AD@k 005A             __size_of_setLights_Main 0030  
           __size_of_setLights_Line 0017             __size_of_setLights_SwOn 003E  
               ?_getAll_Lights_Line 0070               getLight_LoadGO@loadgo 0074  
            ?_Lights_Initialization 0070             __size_of_Exception_Main 00D8  
             __size_of_WDT_Clearing 0002      setLights_Initialization@lights 0057  
       __size_of_set_TimeoutCleared 0006                   _LightsPointSelect 0A04  
              ??_getAll_Lights_Line 0074                  __CFG_FOSC$INTOSCIO 0000  
                ?_LightsPointSelect 0070                     _Timeout_Counter 0A2A  
        __end_of_LED_Initialization 0968               __end_of_getCDS_Status 093E  
    __end_of_setTemp_Initialization 08E5          __size_of_DetectSYSC_Signal 000E  
                   _getLight_LoadGO 0906                   getCDS_AD@channel1 005C  
                 getCDS_AD@channel2 0057   __end_of_getLights_Allow_Condition 0AA9  
               ??_LightsPointSelect 0074               _setLoad_AH_AL_Restore 0A7C  
