

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Sat Dec 06 13:46:06 2014

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    14                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2
    44                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,inline,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,inline,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,inline,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,inline,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,inline,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,delta=2
    68                           	psect	text47,local,class=CODE,merge=1,delta=2
    69                           	psect	text48,local,class=CODE,merge=1,inline,delta=2
    70                           	psect	text49,local,class=CODE,merge=1,delta=2
    71                           	psect	text50,local,class=CODE,merge=1,delta=2
    72                           	psect	text51,local,class=CODE,merge=1,delta=2
    73                           	psect	text52,local,class=CODE,merge=1,delta=2
    74                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text54,local,class=CODE,merge=1,delta=2
    76                           	psect	text55,local,class=CODE,merge=1,delta=2
    77                           	psect	text56,local,class=CODE,merge=1,delta=2
    78                           	psect	text57,local,class=CODE,merge=1,delta=2
    79                           	psect	text58,local,class=CODE,merge=1,delta=2
    80                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    81                           	psect	text60,local,class=CODE,merge=1,delta=2
    82                           	psect	text61,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text62,local,class=CODE,merge=1,delta=2
    84                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    85                           	psect	text64,local,class=CODE,merge=1,delta=2
    86                           	psect	text65,local,class=CODE,merge=1,delta=2
    87                           	psect	text66,local,class=CODE,merge=1,delta=2
    88                           	psect	text67,local,class=CODE,merge=1,delta=2
    89                           	psect	text68,local,class=CODE,merge=1,delta=2
    90                           	psect	text69,local,class=CODE,merge=1,delta=2
    91                           	psect	text70,local,class=CODE,merge=1,delta=2
    92                           	psect	text71,local,class=CODE,merge=1,delta=2
    93                           	psect	text72,local,class=CODE,merge=1,delta=2
    94                           	psect	text73,local,class=CODE,merge=1,delta=2
    95                           	psect	text74,local,class=CODE,merge=1,delta=2
    96                           	psect	text75,local,class=CODE,merge=1,delta=2
    97                           	psect	text76,local,class=CODE,merge=1,delta=2
    98                           	psect	text77,local,class=CODE,merge=1,delta=2
    99                           	psect	text78,local,class=CODE,merge=1,delta=2
   100                           	psect	text79,local,class=CODE,merge=1,delta=2
   101                           	psect	text80,local,class=CODE,merge=1,delta=2
   102                           	psect	text81,local,class=CODE,merge=1,delta=2
   103                           	psect	text82,local,class=CODE,merge=1,delta=2
   104                           	psect	text83,local,class=CODE,merge=1,delta=2
   105                           	psect	text84,local,class=CODE,merge=1,delta=2
   106                           	psect	text85,local,class=CODE,merge=1,delta=2
   107                           	psect	text86,local,class=CODE,merge=1,delta=2
   108                           	psect	text87,local,class=CODE,merge=1,delta=2
   109                           	psect	text88,local,class=CODE,merge=1,delta=2
   110                           	psect	text89,local,class=CODE,merge=1,delta=2
   111                           	psect	text90,local,class=CODE,merge=1,delta=2
   112                           	psect	text91,local,class=CODE,merge=1,delta=2
   113                           	psect	text92,local,class=CODE,merge=1,delta=2
   114                           	psect	text93,local,class=CODE,merge=1,delta=2
   115                           	psect	text94,local,class=CODE,merge=1,inline,delta=2
   116                           	psect	text95,local,class=CODE,merge=1,inline,delta=2
   117                           	psect	text96,local,class=CODE,merge=1,delta=2
   118                           	psect	text97,local,class=CODE,merge=1,delta=2
   119                           	psect	text98,local,class=CODE,merge=1,delta=2
   120                           	psect	text99,local,class=CODE,merge=1,delta=2
   121                           	psect	text100,local,class=CODE,merge=1,delta=2
   122                           	psect	text101,local,class=CODE,merge=1,delta=2
   123                           	psect	text102,local,class=CODE,merge=1,delta=2
   124                           	psect	text103,local,class=CODE,merge=1,delta=2
   125                           	psect	text104,local,class=CODE,merge=1,delta=2
   126                           	psect	text105,local,class=CODE,merge=1,delta=2
   127                           	psect	text106,local,class=CODE,merge=1,delta=2
   128                           	psect	text107,local,class=CODE,merge=1,delta=2
   129                           	psect	text108,local,class=CODE,merge=1,delta=2
   130                           	psect	text109,local,class=CODE,merge=1,inline,delta=2
   131                           	psect	text110,local,class=CODE,merge=1,delta=2
   132                           	psect	text111,local,class=CODE,merge=1,delta=2
   133                           	psect	text112,local,class=CODE,merge=1,delta=2
   134                           	psect	text113,local,class=CODE,merge=1,inline,delta=2
   135                           	psect	text114,local,class=CODE,merge=1,delta=2
   136                           	psect	text115,local,class=CODE,merge=1,delta=2
   137                           	psect	text116,local,class=CODE,merge=1,delta=2
   138                           	psect	text117,local,class=CODE,merge=1,inline,delta=2
   139                           	psect	text118,local,class=CODE,merge=1,delta=2
   140                           	psect	text119,local,class=CODE,merge=1,delta=2
   141                           	psect	text120,local,class=CODE,merge=1,delta=2
   142                           	psect	text121,local,class=CODE,merge=1,delta=2
   143                           	psect	text122,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   148                           	psect	text127,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	intentry,global,class=CODE,delta=2
   150                           	psect	text129,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   155                           	psect	text134,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   157                           	dabs	1,0x7E,2
   158  0000                     	;# 
   159  0001                     	;# 
   160  0002                     	;# 
   161  0003                     	;# 
   162  0004                     	;# 
   163  0005                     	;# 
   164  0006                     	;# 
   165  0007                     	;# 
   166  0008                     	;# 
   167  0009                     	;# 
   168  000A                     	;# 
   169  000B                     	;# 
   170  000C                     	;# 
   171  000D                     	;# 
   172  000E                     	;# 
   173  0010                     	;# 
   174  0011                     	;# 
   175  0012                     	;# 
   176  0015                     	;# 
   177  0016                     	;# 
   178  0016                     	;# 
   179  0017                     	;# 
   180  0018                     	;# 
   181  0019                     	;# 
   182  001A                     	;# 
   183  001B                     	;# 
   184  001C                     	;# 
   185  008C                     	;# 
   186  008D                     	;# 
   187  008E                     	;# 
   188  0090                     	;# 
   189  0091                     	;# 
   190  0092                     	;# 
   191  0095                     	;# 
   192  0096                     	;# 
   193  0097                     	;# 
   194  0099                     	;# 
   195  009A                     	;# 
   196  009B                     	;# 
   197  009B                     	;# 
   198  009C                     	;# 
   199  009D                     	;# 
   200  009E                     	;# 
   201  010C                     	;# 
   202  010D                     	;# 
   203  010E                     	;# 
   204  0116                     	;# 
   205  0117                     	;# 
   206  011D                     	;# 
   207  018C                     	;# 
   208  018D                     	;# 
   209  018E                     	;# 
   210  0191                     	;# 
   211  0191                     	;# 
   212  0192                     	;# 
   213  0193                     	;# 
   214  0193                     	;# 
   215  0194                     	;# 
   216  0195                     	;# 
   217  0196                     	;# 
   218  0197                     	;# 
   219  0199                     	;# 
   220  019A                     	;# 
   221  019B                     	;# 
   222  019B                     	;# 
   223  019B                     	;# 
   224  019B                     	;# 
   225  019C                     	;# 
   226  019C                     	;# 
   227  019D                     	;# 
   228  019E                     	;# 
   229  019F                     	;# 
   230  020D                     	;# 
   231  0210                     	;# 
   232  0211                     	;# 
   233  0211                     	;# 
   234  0212                     	;# 
   235  0212                     	;# 
   236  0213                     	;# 
   237  0213                     	;# 
   238  0214                     	;# 
   239  0214                     	;# 
   240  0215                     	;# 
   241  0215                     	;# 
   242  0215                     	;# 
   243  0216                     	;# 
   244  0216                     	;# 
   245  0217                     	;# 
   246  0217                     	;# 
   247  0291                     	;# 
   248  0291                     	;# 
   249  0292                     	;# 
   250  0293                     	;# 
   251  0298                     	;# 
   252  0298                     	;# 
   253  0299                     	;# 
   254  029A                     	;# 
   255  0394                     	;# 
   256  0395                     	;# 
   257  0396                     	;# 
   258  0FE4                     	;# 
   259  0FE5                     	;# 
   260  0FE6                     	;# 
   261  0FE7                     	;# 
   262  0FE8                     	;# 
   263  0FE9                     	;# 
   264  0FEA                     	;# 
   265  0FEB                     	;# 
   266  0FED                     	;# 
   267  0FEE                     	;# 
   268  0FEF                     	;# 
   269  0000                     	;# 
   270  0001                     	;# 
   271  0002                     	;# 
   272  0003                     	;# 
   273  0004                     	;# 
   274  0005                     	;# 
   275  0006                     	;# 
   276  0007                     	;# 
   277  0008                     	;# 
   278  0009                     	;# 
   279  000A                     	;# 
   280  000B                     	;# 
   281  000C                     	;# 
   282  000D                     	;# 
   283  000E                     	;# 
   284  0010                     	;# 
   285  0011                     	;# 
   286  0012                     	;# 
   287  0015                     	;# 
   288  0016                     	;# 
   289  0016                     	;# 
   290  0017                     	;# 
   291  0018                     	;# 
   292  0019                     	;# 
   293  001A                     	;# 
   294  001B                     	;# 
   295  001C                     	;# 
   296  008C                     	;# 
   297  008D                     	;# 
   298  008E                     	;# 
   299  0090                     	;# 
   300  0091                     	;# 
   301  0092                     	;# 
   302  0095                     	;# 
   303  0096                     	;# 
   304  0097                     	;# 
   305  0099                     	;# 
   306  009A                     	;# 
   307  009B                     	;# 
   308  009B                     	;# 
   309  009C                     	;# 
   310  009D                     	;# 
   311  009E                     	;# 
   312  010C                     	;# 
   313  010D                     	;# 
   314  010E                     	;# 
   315  0116                     	;# 
   316  0117                     	;# 
   317  011D                     	;# 
   318  018C                     	;# 
   319  018D                     	;# 
   320  018E                     	;# 
   321  0191                     	;# 
   322  0191                     	;# 
   323  0192                     	;# 
   324  0193                     	;# 
   325  0193                     	;# 
   326  0194                     	;# 
   327  0195                     	;# 
   328  0196                     	;# 
   329  0197                     	;# 
   330  0199                     	;# 
   331  019A                     	;# 
   332  019B                     	;# 
   333  019B                     	;# 
   334  019B                     	;# 
   335  019B                     	;# 
   336  019C                     	;# 
   337  019C                     	;# 
   338  019D                     	;# 
   339  019E                     	;# 
   340  019F                     	;# 
   341  020D                     	;# 
   342  0210                     	;# 
   343  0211                     	;# 
   344  0211                     	;# 
   345  0212                     	;# 
   346  0212                     	;# 
   347  0213                     	;# 
   348  0213                     	;# 
   349  0214                     	;# 
   350  0214                     	;# 
   351  0215                     	;# 
   352  0215                     	;# 
   353  0215                     	;# 
   354  0216                     	;# 
   355  0216                     	;# 
   356  0217                     	;# 
   357  0217                     	;# 
   358  0291                     	;# 
   359  0291                     	;# 
   360  0292                     	;# 
   361  0293                     	;# 
   362  0298                     	;# 
   363  0298                     	;# 
   364  0299                     	;# 
   365  029A                     	;# 
   366  0394                     	;# 
   367  0395                     	;# 
   368  0396                     	;# 
   369  0FE4                     	;# 
   370  0FE5                     	;# 
   371  0FE6                     	;# 
   372  0FE7                     	;# 
   373  0FE8                     	;# 
   374  0FE9                     	;# 
   375  0FEA                     	;# 
   376  0FEB                     	;# 
   377  0FED                     	;# 
   378  0FEE                     	;# 
   379  0FEF                     	;# 
   380  0000                     	;# 
   381  0001                     	;# 
   382  0002                     	;# 
   383  0003                     	;# 
   384  0004                     	;# 
   385  0005                     	;# 
   386  0006                     	;# 
   387  0007                     	;# 
   388  0008                     	;# 
   389  0009                     	;# 
   390  000A                     	;# 
   391  000B                     	;# 
   392  000C                     	;# 
   393  000D                     	;# 
   394  000E                     	;# 
   395  0010                     	;# 
   396  0011                     	;# 
   397  0012                     	;# 
   398  0015                     	;# 
   399  0016                     	;# 
   400  0016                     	;# 
   401  0017                     	;# 
   402  0018                     	;# 
   403  0019                     	;# 
   404  001A                     	;# 
   405  001B                     	;# 
   406  001C                     	;# 
   407  008C                     	;# 
   408  008D                     	;# 
   409  008E                     	;# 
   410  0090                     	;# 
   411  0091                     	;# 
   412  0092                     	;# 
   413  0095                     	;# 
   414  0096                     	;# 
   415  0097                     	;# 
   416  0099                     	;# 
   417  009A                     	;# 
   418  009B                     	;# 
   419  009B                     	;# 
   420  009C                     	;# 
   421  009D                     	;# 
   422  009E                     	;# 
   423  010C                     	;# 
   424  010D                     	;# 
   425  010E                     	;# 
   426  0116                     	;# 
   427  0117                     	;# 
   428  011D                     	;# 
   429  018C                     	;# 
   430  018D                     	;# 
   431  018E                     	;# 
   432  0191                     	;# 
   433  0191                     	;# 
   434  0192                     	;# 
   435  0193                     	;# 
   436  0193                     	;# 
   437  0194                     	;# 
   438  0195                     	;# 
   439  0196                     	;# 
   440  0197                     	;# 
   441  0199                     	;# 
   442  019A                     	;# 
   443  019B                     	;# 
   444  019B                     	;# 
   445  019B                     	;# 
   446  019B                     	;# 
   447  019C                     	;# 
   448  019C                     	;# 
   449  019D                     	;# 
   450  019E                     	;# 
   451  019F                     	;# 
   452  020D                     	;# 
   453  0210                     	;# 
   454  0211                     	;# 
   455  0211                     	;# 
   456  0212                     	;# 
   457  0212                     	;# 
   458  0213                     	;# 
   459  0213                     	;# 
   460  0214                     	;# 
   461  0214                     	;# 
   462  0215                     	;# 
   463  0215                     	;# 
   464  0215                     	;# 
   465  0216                     	;# 
   466  0216                     	;# 
   467  0217                     	;# 
   468  0217                     	;# 
   469  0291                     	;# 
   470  0291                     	;# 
   471  0292                     	;# 
   472  0293                     	;# 
   473  0298                     	;# 
   474  0298                     	;# 
   475  0299                     	;# 
   476  029A                     	;# 
   477  0394                     	;# 
   478  0395                     	;# 
   479  0396                     	;# 
   480  0FE4                     	;# 
   481  0FE5                     	;# 
   482  0FE6                     	;# 
   483  0FE7                     	;# 
   484  0FE8                     	;# 
   485  0FE9                     	;# 
   486  0FEA                     	;# 
   487  0FEB                     	;# 
   488  0FED                     	;# 
   489  0FEE                     	;# 
   490  0FEF                     	;# 
   491  0000                     	;# 
   492  0001                     	;# 
   493  0002                     	;# 
   494  0003                     	;# 
   495  0004                     	;# 
   496  0005                     	;# 
   497  0006                     	;# 
   498  0007                     	;# 
   499  0008                     	;# 
   500  0009                     	;# 
   501  000A                     	;# 
   502  000B                     	;# 
   503  000C                     	;# 
   504  000D                     	;# 
   505  000E                     	;# 
   506  0010                     	;# 
   507  0011                     	;# 
   508  0012                     	;# 
   509  0015                     	;# 
   510  0016                     	;# 
   511  0016                     	;# 
   512  0017                     	;# 
   513  0018                     	;# 
   514  0019                     	;# 
   515  001A                     	;# 
   516  001B                     	;# 
   517  001C                     	;# 
   518  008C                     	;# 
   519  008D                     	;# 
   520  008E                     	;# 
   521  0090                     	;# 
   522  0091                     	;# 
   523  0092                     	;# 
   524  0095                     	;# 
   525  0096                     	;# 
   526  0097                     	;# 
   527  0099                     	;# 
   528  009A                     	;# 
   529  009B                     	;# 
   530  009B                     	;# 
   531  009C                     	;# 
   532  009D                     	;# 
   533  009E                     	;# 
   534  010C                     	;# 
   535  010D                     	;# 
   536  010E                     	;# 
   537  0116                     	;# 
   538  0117                     	;# 
   539  011D                     	;# 
   540  018C                     	;# 
   541  018D                     	;# 
   542  018E                     	;# 
   543  0191                     	;# 
   544  0191                     	;# 
   545  0192                     	;# 
   546  0193                     	;# 
   547  0193                     	;# 
   548  0194                     	;# 
   549  0195                     	;# 
   550  0196                     	;# 
   551  0197                     	;# 
   552  0199                     	;# 
   553  019A                     	;# 
   554  019B                     	;# 
   555  019B                     	;# 
   556  019B                     	;# 
   557  019B                     	;# 
   558  019C                     	;# 
   559  019C                     	;# 
   560  019D                     	;# 
   561  019E                     	;# 
   562  019F                     	;# 
   563  020D                     	;# 
   564  0210                     	;# 
   565  0211                     	;# 
   566  0211                     	;# 
   567  0212                     	;# 
   568  0212                     	;# 
   569  0213                     	;# 
   570  0213                     	;# 
   571  0214                     	;# 
   572  0214                     	;# 
   573  0215                     	;# 
   574  0215                     	;# 
   575  0215                     	;# 
   576  0216                     	;# 
   577  0216                     	;# 
   578  0217                     	;# 
   579  0217                     	;# 
   580  0291                     	;# 
   581  0291                     	;# 
   582  0292                     	;# 
   583  0293                     	;# 
   584  0298                     	;# 
   585  0298                     	;# 
   586  0299                     	;# 
   587  029A                     	;# 
   588  0394                     	;# 
   589  0395                     	;# 
   590  0396                     	;# 
   591  0FE4                     	;# 
   592  0FE5                     	;# 
   593  0FE6                     	;# 
   594  0FE7                     	;# 
   595  0FE8                     	;# 
   596  0FE9                     	;# 
   597  0FEA                     	;# 
   598  0FEB                     	;# 
   599  0FED                     	;# 
   600  0FEE                     	;# 
   601  0FEF                     	;# 
   602  0000                     	;# 
   603  0001                     	;# 
   604  0002                     	;# 
   605  0003                     	;# 
   606  0004                     	;# 
   607  0005                     	;# 
   608  0006                     	;# 
   609  0007                     	;# 
   610  0008                     	;# 
   611  0009                     	;# 
   612  000A                     	;# 
   613  000B                     	;# 
   614  000C                     	;# 
   615  000D                     	;# 
   616  000E                     	;# 
   617  0010                     	;# 
   618  0011                     	;# 
   619  0012                     	;# 
   620  0015                     	;# 
   621  0016                     	;# 
   622  0016                     	;# 
   623  0017                     	;# 
   624  0018                     	;# 
   625  0019                     	;# 
   626  001A                     	;# 
   627  001B                     	;# 
   628  001C                     	;# 
   629  008C                     	;# 
   630  008D                     	;# 
   631  008E                     	;# 
   632  0090                     	;# 
   633  0091                     	;# 
   634  0092                     	;# 
   635  0095                     	;# 
   636  0096                     	;# 
   637  0097                     	;# 
   638  0099                     	;# 
   639  009A                     	;# 
   640  009B                     	;# 
   641  009B                     	;# 
   642  009C                     	;# 
   643  009D                     	;# 
   644  009E                     	;# 
   645  010C                     	;# 
   646  010D                     	;# 
   647  010E                     	;# 
   648  0116                     	;# 
   649  0117                     	;# 
   650  011D                     	;# 
   651  018C                     	;# 
   652  018D                     	;# 
   653  018E                     	;# 
   654  0191                     	;# 
   655  0191                     	;# 
   656  0192                     	;# 
   657  0193                     	;# 
   658  0193                     	;# 
   659  0194                     	;# 
   660  0195                     	;# 
   661  0196                     	;# 
   662  0197                     	;# 
   663  0199                     	;# 
   664  019A                     	;# 
   665  019B                     	;# 
   666  019B                     	;# 
   667  019B                     	;# 
   668  019B                     	;# 
   669  019C                     	;# 
   670  019C                     	;# 
   671  019D                     	;# 
   672  019E                     	;# 
   673  019F                     	;# 
   674  020D                     	;# 
   675  0210                     	;# 
   676  0211                     	;# 
   677  0211                     	;# 
   678  0212                     	;# 
   679  0212                     	;# 
   680  0213                     	;# 
   681  0213                     	;# 
   682  0214                     	;# 
   683  0214                     	;# 
   684  0215                     	;# 
   685  0215                     	;# 
   686  0215                     	;# 
   687  0216                     	;# 
   688  0216                     	;# 
   689  0217                     	;# 
   690  0217                     	;# 
   691  0291                     	;# 
   692  0291                     	;# 
   693  0292                     	;# 
   694  0293                     	;# 
   695  0298                     	;# 
   696  0298                     	;# 
   697  0299                     	;# 
   698  029A                     	;# 
   699  0394                     	;# 
   700  0395                     	;# 
   701  0396                     	;# 
   702  0FE4                     	;# 
   703  0FE5                     	;# 
   704  0FE6                     	;# 
   705  0FE7                     	;# 
   706  0FE8                     	;# 
   707  0FE9                     	;# 
   708  0FEA                     	;# 
   709  0FEB                     	;# 
   710  0FED                     	;# 
   711  0FEE                     	;# 
   712  0FEF                     	;# 
   713  0000                     	;# 
   714  0001                     	;# 
   715  0002                     	;# 
   716  0003                     	;# 
   717  0004                     	;# 
   718  0005                     	;# 
   719  0006                     	;# 
   720  0007                     	;# 
   721  0008                     	;# 
   722  0009                     	;# 
   723  000A                     	;# 
   724  000B                     	;# 
   725  000C                     	;# 
   726  000D                     	;# 
   727  000E                     	;# 
   728  0010                     	;# 
   729  0011                     	;# 
   730  0012                     	;# 
   731  0015                     	;# 
   732  0016                     	;# 
   733  0016                     	;# 
   734  0017                     	;# 
   735  0018                     	;# 
   736  0019                     	;# 
   737  001A                     	;# 
   738  001B                     	;# 
   739  001C                     	;# 
   740  008C                     	;# 
   741  008D                     	;# 
   742  008E                     	;# 
   743  0090                     	;# 
   744  0091                     	;# 
   745  0092                     	;# 
   746  0095                     	;# 
   747  0096                     	;# 
   748  0097                     	;# 
   749  0099                     	;# 
   750  009A                     	;# 
   751  009B                     	;# 
   752  009B                     	;# 
   753  009C                     	;# 
   754  009D                     	;# 
   755  009E                     	;# 
   756  010C                     	;# 
   757  010D                     	;# 
   758  010E                     	;# 
   759  0116                     	;# 
   760  0117                     	;# 
   761  011D                     	;# 
   762  018C                     	;# 
   763  018D                     	;# 
   764  018E                     	;# 
   765  0191                     	;# 
   766  0191                     	;# 
   767  0192                     	;# 
   768  0193                     	;# 
   769  0193                     	;# 
   770  0194                     	;# 
   771  0195                     	;# 
   772  0196                     	;# 
   773  0197                     	;# 
   774  0199                     	;# 
   775  019A                     	;# 
   776  019B                     	;# 
   777  019B                     	;# 
   778  019B                     	;# 
   779  019B                     	;# 
   780  019C                     	;# 
   781  019C                     	;# 
   782  019D                     	;# 
   783  019E                     	;# 
   784  019F                     	;# 
   785  020D                     	;# 
   786  0210                     	;# 
   787  0211                     	;# 
   788  0211                     	;# 
   789  0212                     	;# 
   790  0212                     	;# 
   791  0213                     	;# 
   792  0213                     	;# 
   793  0214                     	;# 
   794  0214                     	;# 
   795  0215                     	;# 
   796  0215                     	;# 
   797  0215                     	;# 
   798  0216                     	;# 
   799  0216                     	;# 
   800  0217                     	;# 
   801  0217                     	;# 
   802  0291                     	;# 
   803  0291                     	;# 
   804  0292                     	;# 
   805  0293                     	;# 
   806  0298                     	;# 
   807  0298                     	;# 
   808  0299                     	;# 
   809  029A                     	;# 
   810  0394                     	;# 
   811  0395                     	;# 
   812  0396                     	;# 
   813  0FE4                     	;# 
   814  0FE5                     	;# 
   815  0FE6                     	;# 
   816  0FE7                     	;# 
   817  0FE8                     	;# 
   818  0FE9                     	;# 
   819  0FEA                     	;# 
   820  0FEB                     	;# 
   821  0FED                     	;# 
   822  0FEE                     	;# 
   823  0FEF                     	;# 
   824  0000                     	;# 
   825  0001                     	;# 
   826  0002                     	;# 
   827  0003                     	;# 
   828  0004                     	;# 
   829  0005                     	;# 
   830  0006                     	;# 
   831  0007                     	;# 
   832  0008                     	;# 
   833  0009                     	;# 
   834  000A                     	;# 
   835  000B                     	;# 
   836  000C                     	;# 
   837  000D                     	;# 
   838  000E                     	;# 
   839  0010                     	;# 
   840  0011                     	;# 
   841  0012                     	;# 
   842  0015                     	;# 
   843  0016                     	;# 
   844  0016                     	;# 
   845  0017                     	;# 
   846  0018                     	;# 
   847  0019                     	;# 
   848  001A                     	;# 
   849  001B                     	;# 
   850  001C                     	;# 
   851  008C                     	;# 
   852  008D                     	;# 
   853  008E                     	;# 
   854  0090                     	;# 
   855  0091                     	;# 
   856  0092                     	;# 
   857  0095                     	;# 
   858  0096                     	;# 
   859  0097                     	;# 
   860  0099                     	;# 
   861  009A                     	;# 
   862  009B                     	;# 
   863  009B                     	;# 
   864  009C                     	;# 
   865  009D                     	;# 
   866  009E                     	;# 
   867  010C                     	;# 
   868  010D                     	;# 
   869  010E                     	;# 
   870  0116                     	;# 
   871  0117                     	;# 
   872  011D                     	;# 
   873  018C                     	;# 
   874  018D                     	;# 
   875  018E                     	;# 
   876  0191                     	;# 
   877  0191                     	;# 
   878  0192                     	;# 
   879  0193                     	;# 
   880  0193                     	;# 
   881  0194                     	;# 
   882  0195                     	;# 
   883  0196                     	;# 
   884  0197                     	;# 
   885  0199                     	;# 
   886  019A                     	;# 
   887  019B                     	;# 
   888  019B                     	;# 
   889  019B                     	;# 
   890  019B                     	;# 
   891  019C                     	;# 
   892  019C                     	;# 
   893  019D                     	;# 
   894  019E                     	;# 
   895  019F                     	;# 
   896  020D                     	;# 
   897  0210                     	;# 
   898  0211                     	;# 
   899  0211                     	;# 
   900  0212                     	;# 
   901  0212                     	;# 
   902  0213                     	;# 
   903  0213                     	;# 
   904  0214                     	;# 
   905  0214                     	;# 
   906  0215                     	;# 
   907  0215                     	;# 
   908  0215                     	;# 
   909  0216                     	;# 
   910  0216                     	;# 
   911  0217                     	;# 
   912  0217                     	;# 
   913  0291                     	;# 
   914  0291                     	;# 
   915  0292                     	;# 
   916  0293                     	;# 
   917  0298                     	;# 
   918  0298                     	;# 
   919  0299                     	;# 
   920  029A                     	;# 
   921  0394                     	;# 
   922  0395                     	;# 
   923  0396                     	;# 
   924  0FE4                     	;# 
   925  0FE5                     	;# 
   926  0FE6                     	;# 
   927  0FE7                     	;# 
   928  0FE8                     	;# 
   929  0FE9                     	;# 
   930  0FEA                     	;# 
   931  0FEB                     	;# 
   932  0FED                     	;# 
   933  0FEE                     	;# 
   934  0FEF                     	;# 
   935  0000                     	;# 
   936  0001                     	;# 
   937  0002                     	;# 
   938  0003                     	;# 
   939  0004                     	;# 
   940  0005                     	;# 
   941  0006                     	;# 
   942  0007                     	;# 
   943  0008                     	;# 
   944  0009                     	;# 
   945  000A                     	;# 
   946  000B                     	;# 
   947  000C                     	;# 
   948  000D                     	;# 
   949  000E                     	;# 
   950  0010                     	;# 
   951  0011                     	;# 
   952  0012                     	;# 
   953  0015                     	;# 
   954  0016                     	;# 
   955  0016                     	;# 
   956  0017                     	;# 
   957  0018                     	;# 
   958  0019                     	;# 
   959  001A                     	;# 
   960  001B                     	;# 
   961  001C                     	;# 
   962  008C                     	;# 
   963  008D                     	;# 
   964  008E                     	;# 
   965  0090                     	;# 
   966  0091                     	;# 
   967  0092                     	;# 
   968  0095                     	;# 
   969  0096                     	;# 
   970  0097                     	;# 
   971  0099                     	;# 
   972  009A                     	;# 
   973  009B                     	;# 
   974  009B                     	;# 
   975  009C                     	;# 
   976  009D                     	;# 
   977  009E                     	;# 
   978  010C                     	;# 
   979  010D                     	;# 
   980  010E                     	;# 
   981  0116                     	;# 
   982  0117                     	;# 
   983  011D                     	;# 
   984  018C                     	;# 
   985  018D                     	;# 
   986  018E                     	;# 
   987  0191                     	;# 
   988  0191                     	;# 
   989  0192                     	;# 
   990  0193                     	;# 
   991  0193                     	;# 
   992  0194                     	;# 
   993  0195                     	;# 
   994  0196                     	;# 
   995  0197                     	;# 
   996  0199                     	;# 
   997  019A                     	;# 
   998  019B                     	;# 
   999  019B                     	;# 
  1000  019B                     	;# 
  1001  019B                     	;# 
  1002  019C                     	;# 
  1003  019C                     	;# 
  1004  019D                     	;# 
  1005  019E                     	;# 
  1006  019F                     	;# 
  1007  020D                     	;# 
  1008  0210                     	;# 
  1009  0211                     	;# 
  1010  0211                     	;# 
  1011  0212                     	;# 
  1012  0212                     	;# 
  1013  0213                     	;# 
  1014  0213                     	;# 
  1015  0214                     	;# 
  1016  0214                     	;# 
  1017  0215                     	;# 
  1018  0215                     	;# 
  1019  0215                     	;# 
  1020  0216                     	;# 
  1021  0216                     	;# 
  1022  0217                     	;# 
  1023  0217                     	;# 
  1024  0291                     	;# 
  1025  0291                     	;# 
  1026  0292                     	;# 
  1027  0293                     	;# 
  1028  0298                     	;# 
  1029  0298                     	;# 
  1030  0299                     	;# 
  1031  029A                     	;# 
  1032  0394                     	;# 
  1033  0395                     	;# 
  1034  0396                     	;# 
  1035  0FE4                     	;# 
  1036  0FE5                     	;# 
  1037  0FE6                     	;# 
  1038  0FE7                     	;# 
  1039  0FE8                     	;# 
  1040  0FE9                     	;# 
  1041  0FEA                     	;# 
  1042  0FEB                     	;# 
  1043  0FED                     	;# 
  1044  0FEE                     	;# 
  1045  0FEF                     	;# 
  1046  0000                     	;# 
  1047  0001                     	;# 
  1048  0002                     	;# 
  1049  0003                     	;# 
  1050  0004                     	;# 
  1051  0005                     	;# 
  1052  0006                     	;# 
  1053  0007                     	;# 
  1054  0008                     	;# 
  1055  0009                     	;# 
  1056  000A                     	;# 
  1057  000B                     	;# 
  1058  000C                     	;# 
  1059  000D                     	;# 
  1060  000E                     	;# 
  1061  0010                     	;# 
  1062  0011                     	;# 
  1063  0012                     	;# 
  1064  0015                     	;# 
  1065  0016                     	;# 
  1066  0016                     	;# 
  1067  0017                     	;# 
  1068  0018                     	;# 
  1069  0019                     	;# 
  1070  001A                     	;# 
  1071  001B                     	;# 
  1072  001C                     	;# 
  1073  008C                     	;# 
  1074  008D                     	;# 
  1075  008E                     	;# 
  1076  0090                     	;# 
  1077  0091                     	;# 
  1078  0092                     	;# 
  1079  0095                     	;# 
  1080  0096                     	;# 
  1081  0097                     	;# 
  1082  0099                     	;# 
  1083  009A                     	;# 
  1084  009B                     	;# 
  1085  009B                     	;# 
  1086  009C                     	;# 
  1087  009D                     	;# 
  1088  009E                     	;# 
  1089  010C                     	;# 
  1090  010D                     	;# 
  1091  010E                     	;# 
  1092  0116                     	;# 
  1093  0117                     	;# 
  1094  011D                     	;# 
  1095  018C                     	;# 
  1096  018D                     	;# 
  1097  018E                     	;# 
  1098  0191                     	;# 
  1099  0191                     	;# 
  1100  0192                     	;# 
  1101  0193                     	;# 
  1102  0193                     	;# 
  1103  0194                     	;# 
  1104  0195                     	;# 
  1105  0196                     	;# 
  1106  0197                     	;# 
  1107  0199                     	;# 
  1108  019A                     	;# 
  1109  019B                     	;# 
  1110  019B                     	;# 
  1111  019B                     	;# 
  1112  019B                     	;# 
  1113  019C                     	;# 
  1114  019C                     	;# 
  1115  019D                     	;# 
  1116  019E                     	;# 
  1117  019F                     	;# 
  1118  020D                     	;# 
  1119  0210                     	;# 
  1120  0211                     	;# 
  1121  0211                     	;# 
  1122  0212                     	;# 
  1123  0212                     	;# 
  1124  0213                     	;# 
  1125  0213                     	;# 
  1126  0214                     	;# 
  1127  0214                     	;# 
  1128  0215                     	;# 
  1129  0215                     	;# 
  1130  0215                     	;# 
  1131  0216                     	;# 
  1132  0216                     	;# 
  1133  0217                     	;# 
  1134  0217                     	;# 
  1135  0291                     	;# 
  1136  0291                     	;# 
  1137  0292                     	;# 
  1138  0293                     	;# 
  1139  0298                     	;# 
  1140  0298                     	;# 
  1141  0299                     	;# 
  1142  029A                     	;# 
  1143  0394                     	;# 
  1144  0395                     	;# 
  1145  0396                     	;# 
  1146  0FE4                     	;# 
  1147  0FE5                     	;# 
  1148  0FE6                     	;# 
  1149  0FE7                     	;# 
  1150  0FE8                     	;# 
  1151  0FE9                     	;# 
  1152  0FEA                     	;# 
  1153  0FEB                     	;# 
  1154  0FED                     	;# 
  1155  0FEE                     	;# 
  1156  0FEF                     	;# 
  1157  0000                     	;# 
  1158  0001                     	;# 
  1159  0002                     	;# 
  1160  0003                     	;# 
  1161  0004                     	;# 
  1162  0005                     	;# 
  1163  0006                     	;# 
  1164  0007                     	;# 
  1165  0008                     	;# 
  1166  0009                     	;# 
  1167  000A                     	;# 
  1168  000B                     	;# 
  1169  000C                     	;# 
  1170  000D                     	;# 
  1171  000E                     	;# 
  1172  0010                     	;# 
  1173  0011                     	;# 
  1174  0012                     	;# 
  1175  0015                     	;# 
  1176  0016                     	;# 
  1177  0016                     	;# 
  1178  0017                     	;# 
  1179  0018                     	;# 
  1180  0019                     	;# 
  1181  001A                     	;# 
  1182  001B                     	;# 
  1183  001C                     	;# 
  1184  008C                     	;# 
  1185  008D                     	;# 
  1186  008E                     	;# 
  1187  0090                     	;# 
  1188  0091                     	;# 
  1189  0092                     	;# 
  1190  0095                     	;# 
  1191  0096                     	;# 
  1192  0097                     	;# 
  1193  0099                     	;# 
  1194  009A                     	;# 
  1195  009B                     	;# 
  1196  009B                     	;# 
  1197  009C                     	;# 
  1198  009D                     	;# 
  1199  009E                     	;# 
  1200  010C                     	;# 
  1201  010D                     	;# 
  1202  010E                     	;# 
  1203  0116                     	;# 
  1204  0117                     	;# 
  1205  011D                     	;# 
  1206  018C                     	;# 
  1207  018D                     	;# 
  1208  018E                     	;# 
  1209  0191                     	;# 
  1210  0191                     	;# 
  1211  0192                     	;# 
  1212  0193                     	;# 
  1213  0193                     	;# 
  1214  0194                     	;# 
  1215  0195                     	;# 
  1216  0196                     	;# 
  1217  0197                     	;# 
  1218  0199                     	;# 
  1219  019A                     	;# 
  1220  019B                     	;# 
  1221  019B                     	;# 
  1222  019B                     	;# 
  1223  019B                     	;# 
  1224  019C                     	;# 
  1225  019C                     	;# 
  1226  019D                     	;# 
  1227  019E                     	;# 
  1228  019F                     	;# 
  1229  020D                     	;# 
  1230  0210                     	;# 
  1231  0211                     	;# 
  1232  0211                     	;# 
  1233  0212                     	;# 
  1234  0212                     	;# 
  1235  0213                     	;# 
  1236  0213                     	;# 
  1237  0214                     	;# 
  1238  0214                     	;# 
  1239  0215                     	;# 
  1240  0215                     	;# 
  1241  0215                     	;# 
  1242  0216                     	;# 
  1243  0216                     	;# 
  1244  0217                     	;# 
  1245  0217                     	;# 
  1246  0291                     	;# 
  1247  0291                     	;# 
  1248  0292                     	;# 
  1249  0293                     	;# 
  1250  0298                     	;# 
  1251  0298                     	;# 
  1252  0299                     	;# 
  1253  029A                     	;# 
  1254  0394                     	;# 
  1255  0395                     	;# 
  1256  0396                     	;# 
  1257  0FE4                     	;# 
  1258  0FE5                     	;# 
  1259  0FE6                     	;# 
  1260  0FE7                     	;# 
  1261  0FE8                     	;# 
  1262  0FE9                     	;# 
  1263  0FEA                     	;# 
  1264  0FEB                     	;# 
  1265  0FED                     	;# 
  1266  0FEE                     	;# 
  1267  0FEF                     	;# 
  1268  0000                     	;# 
  1269  0001                     	;# 
  1270  0002                     	;# 
  1271  0003                     	;# 
  1272  0004                     	;# 
  1273  0005                     	;# 
  1274  0006                     	;# 
  1275  0007                     	;# 
  1276  0008                     	;# 
  1277  0009                     	;# 
  1278  000A                     	;# 
  1279  000B                     	;# 
  1280  000C                     	;# 
  1281  000D                     	;# 
  1282  000E                     	;# 
  1283  0010                     	;# 
  1284  0011                     	;# 
  1285  0012                     	;# 
  1286  0015                     	;# 
  1287  0016                     	;# 
  1288  0016                     	;# 
  1289  0017                     	;# 
  1290  0018                     	;# 
  1291  0019                     	;# 
  1292  001A                     	;# 
  1293  001B                     	;# 
  1294  001C                     	;# 
  1295  008C                     	;# 
  1296  008D                     	;# 
  1297  008E                     	;# 
  1298  0090                     	;# 
  1299  0091                     	;# 
  1300  0092                     	;# 
  1301  0095                     	;# 
  1302  0096                     	;# 
  1303  0097                     	;# 
  1304  0099                     	;# 
  1305  009A                     	;# 
  1306  009B                     	;# 
  1307  009B                     	;# 
  1308  009C                     	;# 
  1309  009D                     	;# 
  1310  009E                     	;# 
  1311  010C                     	;# 
  1312  010D                     	;# 
  1313  010E                     	;# 
  1314  0116                     	;# 
  1315  0117                     	;# 
  1316  011D                     	;# 
  1317  018C                     	;# 
  1318  018D                     	;# 
  1319  018E                     	;# 
  1320  0191                     	;# 
  1321  0191                     	;# 
  1322  0192                     	;# 
  1323  0193                     	;# 
  1324  0193                     	;# 
  1325  0194                     	;# 
  1326  0195                     	;# 
  1327  0196                     	;# 
  1328  0197                     	;# 
  1329  0199                     	;# 
  1330  019A                     	;# 
  1331  019B                     	;# 
  1332  019B                     	;# 
  1333  019B                     	;# 
  1334  019B                     	;# 
  1335  019C                     	;# 
  1336  019C                     	;# 
  1337  019D                     	;# 
  1338  019E                     	;# 
  1339  019F                     	;# 
  1340  020D                     	;# 
  1341  0210                     	;# 
  1342  0211                     	;# 
  1343  0211                     	;# 
  1344  0212                     	;# 
  1345  0212                     	;# 
  1346  0213                     	;# 
  1347  0213                     	;# 
  1348  0214                     	;# 
  1349  0214                     	;# 
  1350  0215                     	;# 
  1351  0215                     	;# 
  1352  0215                     	;# 
  1353  0216                     	;# 
  1354  0216                     	;# 
  1355  0217                     	;# 
  1356  0217                     	;# 
  1357  0291                     	;# 
  1358  0291                     	;# 
  1359  0292                     	;# 
  1360  0293                     	;# 
  1361  0298                     	;# 
  1362  0298                     	;# 
  1363  0299                     	;# 
  1364  029A                     	;# 
  1365  0394                     	;# 
  1366  0395                     	;# 
  1367  0396                     	;# 
  1368  0FE4                     	;# 
  1369  0FE5                     	;# 
  1370  0FE6                     	;# 
  1371  0FE7                     	;# 
  1372  0FE8                     	;# 
  1373  0FE9                     	;# 
  1374  0FEA                     	;# 
  1375  0FEB                     	;# 
  1376  0FED                     	;# 
  1377  0FEE                     	;# 
  1378  0FEF                     	;# 
  1379  0000                     	;# 
  1380  0001                     	;# 
  1381  0002                     	;# 
  1382  0003                     	;# 
  1383  0004                     	;# 
  1384  0005                     	;# 
  1385  0006                     	;# 
  1386  0007                     	;# 
  1387  0008                     	;# 
  1388  0009                     	;# 
  1389  000A                     	;# 
  1390  000B                     	;# 
  1391  000C                     	;# 
  1392  000D                     	;# 
  1393  000E                     	;# 
  1394  0010                     	;# 
  1395  0011                     	;# 
  1396  0012                     	;# 
  1397  0015                     	;# 
  1398  0016                     	;# 
  1399  0016                     	;# 
  1400  0017                     	;# 
  1401  0018                     	;# 
  1402  0019                     	;# 
  1403  001A                     	;# 
  1404  001B                     	;# 
  1405  001C                     	;# 
  1406  008C                     	;# 
  1407  008D                     	;# 
  1408  008E                     	;# 
  1409  0090                     	;# 
  1410  0091                     	;# 
  1411  0092                     	;# 
  1412  0095                     	;# 
  1413  0096                     	;# 
  1414  0097                     	;# 
  1415  0099                     	;# 
  1416  009A                     	;# 
  1417  009B                     	;# 
  1418  009B                     	;# 
  1419  009C                     	;# 
  1420  009D                     	;# 
  1421  009E                     	;# 
  1422  010C                     	;# 
  1423  010D                     	;# 
  1424  010E                     	;# 
  1425  0116                     	;# 
  1426  0117                     	;# 
  1427  011D                     	;# 
  1428  018C                     	;# 
  1429  018D                     	;# 
  1430  018E                     	;# 
  1431  0191                     	;# 
  1432  0191                     	;# 
  1433  0192                     	;# 
  1434  0193                     	;# 
  1435  0193                     	;# 
  1436  0194                     	;# 
  1437  0195                     	;# 
  1438  0196                     	;# 
  1439  0197                     	;# 
  1440  0199                     	;# 
  1441  019A                     	;# 
  1442  019B                     	;# 
  1443  019B                     	;# 
  1444  019B                     	;# 
  1445  019B                     	;# 
  1446  019C                     	;# 
  1447  019C                     	;# 
  1448  019D                     	;# 
  1449  019E                     	;# 
  1450  019F                     	;# 
  1451  020D                     	;# 
  1452  0210                     	;# 
  1453  0211                     	;# 
  1454  0211                     	;# 
  1455  0212                     	;# 
  1456  0212                     	;# 
  1457  0213                     	;# 
  1458  0213                     	;# 
  1459  0214                     	;# 
  1460  0214                     	;# 
  1461  0215                     	;# 
  1462  0215                     	;# 
  1463  0215                     	;# 
  1464  0216                     	;# 
  1465  0216                     	;# 
  1466  0217                     	;# 
  1467  0217                     	;# 
  1468  0291                     	;# 
  1469  0291                     	;# 
  1470  0292                     	;# 
  1471  0293                     	;# 
  1472  0298                     	;# 
  1473  0298                     	;# 
  1474  0299                     	;# 
  1475  029A                     	;# 
  1476  0394                     	;# 
  1477  0395                     	;# 
  1478  0396                     	;# 
  1479  0FE4                     	;# 
  1480  0FE5                     	;# 
  1481  0FE6                     	;# 
  1482  0FE7                     	;# 
  1483  0FE8                     	;# 
  1484  0FE9                     	;# 
  1485  0FEA                     	;# 
  1486  0FEB                     	;# 
  1487  0FED                     	;# 
  1488  0FEE                     	;# 
  1489  0FEF                     	;# 
  1490  0000                     	;# 
  1491  0001                     	;# 
  1492  0002                     	;# 
  1493  0003                     	;# 
  1494  0004                     	;# 
  1495  0005                     	;# 
  1496  0006                     	;# 
  1497  0007                     	;# 
  1498  0008                     	;# 
  1499  0009                     	;# 
  1500  000A                     	;# 
  1501  000B                     	;# 
  1502  000C                     	;# 
  1503  000D                     	;# 
  1504  000E                     	;# 
  1505  0010                     	;# 
  1506  0011                     	;# 
  1507  0012                     	;# 
  1508  0015                     	;# 
  1509  0016                     	;# 
  1510  0016                     	;# 
  1511  0017                     	;# 
  1512  0018                     	;# 
  1513  0019                     	;# 
  1514  001A                     	;# 
  1515  001B                     	;# 
  1516  001C                     	;# 
  1517  008C                     	;# 
  1518  008D                     	;# 
  1519  008E                     	;# 
  1520  0090                     	;# 
  1521  0091                     	;# 
  1522  0092                     	;# 
  1523  0095                     	;# 
  1524  0096                     	;# 
  1525  0097                     	;# 
  1526  0099                     	;# 
  1527  009A                     	;# 
  1528  009B                     	;# 
  1529  009B                     	;# 
  1530  009C                     	;# 
  1531  009D                     	;# 
  1532  009E                     	;# 
  1533  010C                     	;# 
  1534  010D                     	;# 
  1535  010E                     	;# 
  1536  0116                     	;# 
  1537  0117                     	;# 
  1538  011D                     	;# 
  1539  018C                     	;# 
  1540  018D                     	;# 
  1541  018E                     	;# 
  1542  0191                     	;# 
  1543  0191                     	;# 
  1544  0192                     	;# 
  1545  0193                     	;# 
  1546  0193                     	;# 
  1547  0194                     	;# 
  1548  0195                     	;# 
  1549  0196                     	;# 
  1550  0197                     	;# 
  1551  0199                     	;# 
  1552  019A                     	;# 
  1553  019B                     	;# 
  1554  019B                     	;# 
  1555  019B                     	;# 
  1556  019B                     	;# 
  1557  019C                     	;# 
  1558  019C                     	;# 
  1559  019D                     	;# 
  1560  019E                     	;# 
  1561  019F                     	;# 
  1562  020D                     	;# 
  1563  0210                     	;# 
  1564  0211                     	;# 
  1565  0211                     	;# 
  1566  0212                     	;# 
  1567  0212                     	;# 
  1568  0213                     	;# 
  1569  0213                     	;# 
  1570  0214                     	;# 
  1571  0214                     	;# 
  1572  0215                     	;# 
  1573  0215                     	;# 
  1574  0215                     	;# 
  1575  0216                     	;# 
  1576  0216                     	;# 
  1577  0217                     	;# 
  1578  0217                     	;# 
  1579  0291                     	;# 
  1580  0291                     	;# 
  1581  0292                     	;# 
  1582  0293                     	;# 
  1583  0298                     	;# 
  1584  0298                     	;# 
  1585  0299                     	;# 
  1586  029A                     	;# 
  1587  0394                     	;# 
  1588  0395                     	;# 
  1589  0396                     	;# 
  1590  0FE4                     	;# 
  1591  0FE5                     	;# 
  1592  0FE6                     	;# 
  1593  0FE7                     	;# 
  1594  0FE8                     	;# 
  1595  0FE9                     	;# 
  1596  0FEA                     	;# 
  1597  0FEB                     	;# 
  1598  0FED                     	;# 
  1599  0FEE                     	;# 
  1600  0FEF                     	;# 
  1601  0000                     	;# 
  1602  0001                     	;# 
  1603  0002                     	;# 
  1604  0003                     	;# 
  1605  0004                     	;# 
  1606  0005                     	;# 
  1607  0006                     	;# 
  1608  0007                     	;# 
  1609  0008                     	;# 
  1610  0009                     	;# 
  1611  000A                     	;# 
  1612  000B                     	;# 
  1613  000C                     	;# 
  1614  000D                     	;# 
  1615  000E                     	;# 
  1616  0010                     	;# 
  1617  0011                     	;# 
  1618  0012                     	;# 
  1619  0015                     	;# 
  1620  0016                     	;# 
  1621  0016                     	;# 
  1622  0017                     	;# 
  1623  0018                     	;# 
  1624  0019                     	;# 
  1625  001A                     	;# 
  1626  001B                     	;# 
  1627  001C                     	;# 
  1628  008C                     	;# 
  1629  008D                     	;# 
  1630  008E                     	;# 
  1631  0090                     	;# 
  1632  0091                     	;# 
  1633  0092                     	;# 
  1634  0095                     	;# 
  1635  0096                     	;# 
  1636  0097                     	;# 
  1637  0099                     	;# 
  1638  009A                     	;# 
  1639  009B                     	;# 
  1640  009B                     	;# 
  1641  009C                     	;# 
  1642  009D                     	;# 
  1643  009E                     	;# 
  1644  010C                     	;# 
  1645  010D                     	;# 
  1646  010E                     	;# 
  1647  0116                     	;# 
  1648  0117                     	;# 
  1649  011D                     	;# 
  1650  018C                     	;# 
  1651  018D                     	;# 
  1652  018E                     	;# 
  1653  0191                     	;# 
  1654  0191                     	;# 
  1655  0192                     	;# 
  1656  0193                     	;# 
  1657  0193                     	;# 
  1658  0194                     	;# 
  1659  0195                     	;# 
  1660  0196                     	;# 
  1661  0197                     	;# 
  1662  0199                     	;# 
  1663  019A                     	;# 
  1664  019B                     	;# 
  1665  019B                     	;# 
  1666  019B                     	;# 
  1667  019B                     	;# 
  1668  019C                     	;# 
  1669  019C                     	;# 
  1670  019D                     	;# 
  1671  019E                     	;# 
  1672  019F                     	;# 
  1673  020D                     	;# 
  1674  0210                     	;# 
  1675  0211                     	;# 
  1676  0211                     	;# 
  1677  0212                     	;# 
  1678  0212                     	;# 
  1679  0213                     	;# 
  1680  0213                     	;# 
  1681  0214                     	;# 
  1682  0214                     	;# 
  1683  0215                     	;# 
  1684  0215                     	;# 
  1685  0215                     	;# 
  1686  0216                     	;# 
  1687  0216                     	;# 
  1688  0217                     	;# 
  1689  0217                     	;# 
  1690  0291                     	;# 
  1691  0291                     	;# 
  1692  0292                     	;# 
  1693  0293                     	;# 
  1694  0298                     	;# 
  1695  0298                     	;# 
  1696  0299                     	;# 
  1697  029A                     	;# 
  1698  0394                     	;# 
  1699  0395                     	;# 
  1700  0396                     	;# 
  1701  0FE4                     	;# 
  1702  0FE5                     	;# 
  1703  0FE6                     	;# 
  1704  0FE7                     	;# 
  1705  0FE8                     	;# 
  1706  0FE9                     	;# 
  1707  0FEA                     	;# 
  1708  0FEB                     	;# 
  1709  0FED                     	;# 
  1710  0FEE                     	;# 
  1711  0FEF                     	;# 
  1712  0000                     	;# 
  1713  0001                     	;# 
  1714  0002                     	;# 
  1715  0003                     	;# 
  1716  0004                     	;# 
  1717  0005                     	;# 
  1718  0006                     	;# 
  1719  0007                     	;# 
  1720  0008                     	;# 
  1721  0009                     	;# 
  1722  000A                     	;# 
  1723  000B                     	;# 
  1724  000C                     	;# 
  1725  000D                     	;# 
  1726  000E                     	;# 
  1727  0010                     	;# 
  1728  0011                     	;# 
  1729  0012                     	;# 
  1730  0015                     	;# 
  1731  0016                     	;# 
  1732  0016                     	;# 
  1733  0017                     	;# 
  1734  0018                     	;# 
  1735  0019                     	;# 
  1736  001A                     	;# 
  1737  001B                     	;# 
  1738  001C                     	;# 
  1739  008C                     	;# 
  1740  008D                     	;# 
  1741  008E                     	;# 
  1742  0090                     	;# 
  1743  0091                     	;# 
  1744  0092                     	;# 
  1745  0095                     	;# 
  1746  0096                     	;# 
  1747  0097                     	;# 
  1748  0099                     	;# 
  1749  009A                     	;# 
  1750  009B                     	;# 
  1751  009B                     	;# 
  1752  009C                     	;# 
  1753  009D                     	;# 
  1754  009E                     	;# 
  1755  010C                     	;# 
  1756  010D                     	;# 
  1757  010E                     	;# 
  1758  0116                     	;# 
  1759  0117                     	;# 
  1760  011D                     	;# 
  1761  018C                     	;# 
  1762  018D                     	;# 
  1763  018E                     	;# 
  1764  0191                     	;# 
  1765  0191                     	;# 
  1766  0192                     	;# 
  1767  0193                     	;# 
  1768  0193                     	;# 
  1769  0194                     	;# 
  1770  0195                     	;# 
  1771  0196                     	;# 
  1772  0197                     	;# 
  1773  0199                     	;# 
  1774  019A                     	;# 
  1775  019B                     	;# 
  1776  019B                     	;# 
  1777  019B                     	;# 
  1778  019B                     	;# 
  1779  019C                     	;# 
  1780  019C                     	;# 
  1781  019D                     	;# 
  1782  019E                     	;# 
  1783  019F                     	;# 
  1784  020D                     	;# 
  1785  0210                     	;# 
  1786  0211                     	;# 
  1787  0211                     	;# 
  1788  0212                     	;# 
  1789  0212                     	;# 
  1790  0213                     	;# 
  1791  0213                     	;# 
  1792  0214                     	;# 
  1793  0214                     	;# 
  1794  0215                     	;# 
  1795  0215                     	;# 
  1796  0215                     	;# 
  1797  0216                     	;# 
  1798  0216                     	;# 
  1799  0217                     	;# 
  1800  0217                     	;# 
  1801  0291                     	;# 
  1802  0291                     	;# 
  1803  0292                     	;# 
  1804  0293                     	;# 
  1805  0298                     	;# 
  1806  0298                     	;# 
  1807  0299                     	;# 
  1808  029A                     	;# 
  1809  0394                     	;# 
  1810  0395                     	;# 
  1811  0396                     	;# 
  1812  0FE4                     	;# 
  1813  0FE5                     	;# 
  1814  0FE6                     	;# 
  1815  0FE7                     	;# 
  1816  0FE8                     	;# 
  1817  0FE9                     	;# 
  1818  0FEA                     	;# 
  1819  0FEB                     	;# 
  1820  0FED                     	;# 
  1821  0FEE                     	;# 
  1822  0FEF                     	;# 
  1823  0000                     	;# 
  1824  0001                     	;# 
  1825  0002                     	;# 
  1826  0003                     	;# 
  1827  0004                     	;# 
  1828  0005                     	;# 
  1829  0006                     	;# 
  1830  0007                     	;# 
  1831  0008                     	;# 
  1832  0009                     	;# 
  1833  000A                     	;# 
  1834  000B                     	;# 
  1835  000C                     	;# 
  1836  000D                     	;# 
  1837  000E                     	;# 
  1838  0010                     	;# 
  1839  0011                     	;# 
  1840  0012                     	;# 
  1841  0015                     	;# 
  1842  0016                     	;# 
  1843  0016                     	;# 
  1844  0017                     	;# 
  1845  0018                     	;# 
  1846  0019                     	;# 
  1847  001A                     	;# 
  1848  001B                     	;# 
  1849  001C                     	;# 
  1850  008C                     	;# 
  1851  008D                     	;# 
  1852  008E                     	;# 
  1853  0090                     	;# 
  1854  0091                     	;# 
  1855  0092                     	;# 
  1856  0095                     	;# 
  1857  0096                     	;# 
  1858  0097                     	;# 
  1859  0099                     	;# 
  1860  009A                     	;# 
  1861  009B                     	;# 
  1862  009B                     	;# 
  1863  009C                     	;# 
  1864  009D                     	;# 
  1865  009E                     	;# 
  1866  010C                     	;# 
  1867  010D                     	;# 
  1868  010E                     	;# 
  1869  0116                     	;# 
  1870  0117                     	;# 
  1871  011D                     	;# 
  1872  018C                     	;# 
  1873  018D                     	;# 
  1874  018E                     	;# 
  1875  0191                     	;# 
  1876  0191                     	;# 
  1877  0192                     	;# 
  1878  0193                     	;# 
  1879  0193                     	;# 
  1880  0194                     	;# 
  1881  0195                     	;# 
  1882  0196                     	;# 
  1883  0197                     	;# 
  1884  0199                     	;# 
  1885  019A                     	;# 
  1886  019B                     	;# 
  1887  019B                     	;# 
  1888  019B                     	;# 
  1889  019B                     	;# 
  1890  019C                     	;# 
  1891  019C                     	;# 
  1892  019D                     	;# 
  1893  019E                     	;# 
  1894  019F                     	;# 
  1895  020D                     	;# 
  1896  0210                     	;# 
  1897  0211                     	;# 
  1898  0211                     	;# 
  1899  0212                     	;# 
  1900  0212                     	;# 
  1901  0213                     	;# 
  1902  0213                     	;# 
  1903  0214                     	;# 
  1904  0214                     	;# 
  1905  0215                     	;# 
  1906  0215                     	;# 
  1907  0215                     	;# 
  1908  0216                     	;# 
  1909  0216                     	;# 
  1910  0217                     	;# 
  1911  0217                     	;# 
  1912  0291                     	;# 
  1913  0291                     	;# 
  1914  0292                     	;# 
  1915  0293                     	;# 
  1916  0298                     	;# 
  1917  0298                     	;# 
  1918  0299                     	;# 
  1919  029A                     	;# 
  1920  0394                     	;# 
  1921  0395                     	;# 
  1922  0396                     	;# 
  1923  0FE4                     	;# 
  1924  0FE5                     	;# 
  1925  0FE6                     	;# 
  1926  0FE7                     	;# 
  1927  0FE8                     	;# 
  1928  0FE9                     	;# 
  1929  0FEA                     	;# 
  1930  0FEB                     	;# 
  1931  0FED                     	;# 
  1932  0FEE                     	;# 
  1933  0FEF                     	;# 
  1934  0000                     	;# 
  1935  0001                     	;# 
  1936  0002                     	;# 
  1937  0003                     	;# 
  1938  0004                     	;# 
  1939  0005                     	;# 
  1940  0006                     	;# 
  1941  0007                     	;# 
  1942  0008                     	;# 
  1943  0009                     	;# 
  1944  000A                     	;# 
  1945  000B                     	;# 
  1946  000C                     	;# 
  1947  000D                     	;# 
  1948  000E                     	;# 
  1949  0010                     	;# 
  1950  0011                     	;# 
  1951  0012                     	;# 
  1952  0015                     	;# 
  1953  0016                     	;# 
  1954  0016                     	;# 
  1955  0017                     	;# 
  1956  0018                     	;# 
  1957  0019                     	;# 
  1958  001A                     	;# 
  1959  001B                     	;# 
  1960  001C                     	;# 
  1961  008C                     	;# 
  1962  008D                     	;# 
  1963  008E                     	;# 
  1964  0090                     	;# 
  1965  0091                     	;# 
  1966  0092                     	;# 
  1967  0095                     	;# 
  1968  0096                     	;# 
  1969  0097                     	;# 
  1970  0099                     	;# 
  1971  009A                     	;# 
  1972  009B                     	;# 
  1973  009B                     	;# 
  1974  009C                     	;# 
  1975  009D                     	;# 
  1976  009E                     	;# 
  1977  010C                     	;# 
  1978  010D                     	;# 
  1979  010E                     	;# 
  1980  0116                     	;# 
  1981  0117                     	;# 
  1982  011D                     	;# 
  1983  018C                     	;# 
  1984  018D                     	;# 
  1985  018E                     	;# 
  1986  0191                     	;# 
  1987  0191                     	;# 
  1988  0192                     	;# 
  1989  0193                     	;# 
  1990  0193                     	;# 
  1991  0194                     	;# 
  1992  0195                     	;# 
  1993  0196                     	;# 
  1994  0197                     	;# 
  1995  0199                     	;# 
  1996  019A                     	;# 
  1997  019B                     	;# 
  1998  019B                     	;# 
  1999  019B                     	;# 
  2000  019B                     	;# 
  2001  019C                     	;# 
  2002  019C                     	;# 
  2003  019D                     	;# 
  2004  019E                     	;# 
  2005  019F                     	;# 
  2006  020D                     	;# 
  2007  0210                     	;# 
  2008  0211                     	;# 
  2009  0211                     	;# 
  2010  0212                     	;# 
  2011  0212                     	;# 
  2012  0213                     	;# 
  2013  0213                     	;# 
  2014  0214                     	;# 
  2015  0214                     	;# 
  2016  0215                     	;# 
  2017  0215                     	;# 
  2018  0215                     	;# 
  2019  0216                     	;# 
  2020  0216                     	;# 
  2021  0217                     	;# 
  2022  0217                     	;# 
  2023  0291                     	;# 
  2024  0291                     	;# 
  2025  0292                     	;# 
  2026  0293                     	;# 
  2027  0298                     	;# 
  2028  0298                     	;# 
  2029  0299                     	;# 
  2030  029A                     	;# 
  2031  0394                     	;# 
  2032  0395                     	;# 
  2033  0396                     	;# 
  2034  0FE4                     	;# 
  2035  0FE5                     	;# 
  2036  0FE6                     	;# 
  2037  0FE7                     	;# 
  2038  0FE8                     	;# 
  2039  0FE9                     	;# 
  2040  0FEA                     	;# 
  2041  0FEB                     	;# 
  2042  0FED                     	;# 
  2043  0FEE                     	;# 
  2044  0FEF                     	;# 
  2045  0000                     	;# 
  2046  0001                     	;# 
  2047  0002                     	;# 
  2048  0003                     	;# 
  2049  0004                     	;# 
  2050  0005                     	;# 
  2051  0006                     	;# 
  2052  0007                     	;# 
  2053  0008                     	;# 
  2054  0009                     	;# 
  2055  000A                     	;# 
  2056  000B                     	;# 
  2057  000C                     	;# 
  2058  000D                     	;# 
  2059  000E                     	;# 
  2060  0010                     	;# 
  2061  0011                     	;# 
  2062  0012                     	;# 
  2063  0015                     	;# 
  2064  0016                     	;# 
  2065  0016                     	;# 
  2066  0017                     	;# 
  2067  0018                     	;# 
  2068  0019                     	;# 
  2069  001A                     	;# 
  2070  001B                     	;# 
  2071  001C                     	;# 
  2072  008C                     	;# 
  2073  008D                     	;# 
  2074  008E                     	;# 
  2075  0090                     	;# 
  2076  0091                     	;# 
  2077  0092                     	;# 
  2078  0095                     	;# 
  2079  0096                     	;# 
  2080  0097                     	;# 
  2081  0099                     	;# 
  2082  009A                     	;# 
  2083  009B                     	;# 
  2084  009B                     	;# 
  2085  009C                     	;# 
  2086  009D                     	;# 
  2087  009E                     	;# 
  2088  010C                     	;# 
  2089  010D                     	;# 
  2090  010E                     	;# 
  2091  0116                     	;# 
  2092  0117                     	;# 
  2093  011D                     	;# 
  2094  018C                     	;# 
  2095  018D                     	;# 
  2096  018E                     	;# 
  2097  0191                     	;# 
  2098  0191                     	;# 
  2099  0192                     	;# 
  2100  0193                     	;# 
  2101  0193                     	;# 
  2102  0194                     	;# 
  2103  0195                     	;# 
  2104  0196                     	;# 
  2105  0197                     	;# 
  2106  0199                     	;# 
  2107  019A                     	;# 
  2108  019B                     	;# 
  2109  019B                     	;# 
  2110  019B                     	;# 
  2111  019B                     	;# 
  2112  019C                     	;# 
  2113  019C                     	;# 
  2114  019D                     	;# 
  2115  019E                     	;# 
  2116  019F                     	;# 
  2117  020D                     	;# 
  2118  0210                     	;# 
  2119  0211                     	;# 
  2120  0211                     	;# 
  2121  0212                     	;# 
  2122  0212                     	;# 
  2123  0213                     	;# 
  2124  0213                     	;# 
  2125  0214                     	;# 
  2126  0214                     	;# 
  2127  0215                     	;# 
  2128  0215                     	;# 
  2129  0215                     	;# 
  2130  0216                     	;# 
  2131  0216                     	;# 
  2132  0217                     	;# 
  2133  0217                     	;# 
  2134  0291                     	;# 
  2135  0291                     	;# 
  2136  0292                     	;# 
  2137  0293                     	;# 
  2138  0298                     	;# 
  2139  0298                     	;# 
  2140  0299                     	;# 
  2141  029A                     	;# 
  2142  0394                     	;# 
  2143  0395                     	;# 
  2144  0396                     	;# 
  2145  0FE4                     	;# 
  2146  0FE5                     	;# 
  2147  0FE6                     	;# 
  2148  0FE7                     	;# 
  2149  0FE8                     	;# 
  2150  0FE9                     	;# 
  2151  0FEA                     	;# 
  2152  0FEB                     	;# 
  2153  0FED                     	;# 
  2154  0FEE                     	;# 
  2155  0FEF                     	;# 
  2156                           
  2157                           	psect	idataBANK4
  2158  1EE7                     __pidataBANK4:	
  2159                           
  2160                           ;initializer for __product
  2161  1EE7  3463               	retlw	99
  2162  1EE8  3402               	retlw	2
  2163  1EE9  3400               	retlw	0
  2164  1EEA  3400               	retlw	0
  2165  1EEB  3400               	retlw	0
  2166  1EEC  3400               	retlw	0
  2167  1EED  3400               	retlw	0
  2168  1EEE  3400               	retlw	0
  2169  1EEF  3400               	retlw	0
  2170  1EF0  3400               	retlw	0
  2171  1EF1  3400               	retlw	0
  2172  1EF2  3400               	retlw	0
  2173  1EF3  34FF               	retlw	255
  2174  1EF4  34FF               	retlw	255
  2175  1EF5  34FF               	retlw	255
  2176  1EF6  3400               	retlw	0
  2177  1EF7  3400               	retlw	0
  2178  1EF8  3400               	retlw	0
  2179  1EF9  3400               	retlw	0
  2180  1EFA  3400               	retlw	0
  2181  1EFB  3400               	retlw	0
  2182  1EFC  3400               	retlw	0
  2183  1EFD  3400               	retlw	0
  2184  1EFE  3400               	retlw	0
  2185  1EFF  3400               	retlw	0
  2186  1F00  3400               	retlw	0
  2187  1F01  3400               	retlw	0
  2188  1F02  3400               	retlw	0
  2189  1F03  3400               	retlw	0
  2190  1F04  3400               	retlw	0
  2191  1F05  3400               	retlw	0
  2192  1F06  3400               	retlw	0
  2193                           
  2194                           	psect	stringtext
  2195  1000                     __pstringtext:	
  2196  1000                     _CC2500_registers_address:	
  2197  1000  3403               	retlw	3
  2198  1001  3416               	retlw	22
  2199  1002  3417               	retlw	23
  2200  1003  341E               	retlw	30
  2201  1004  341F               	retlw	31
  2202  1005  3420               	retlw	32
  2203  1006  342A               	retlw	42
  2204  1007  342B               	retlw	43
  2205  1008  340B               	retlw	11
  2206  1009  340C               	retlw	12
  2207  100A  340D               	retlw	13
  2208  100B  340E               	retlw	14
  2209  100C  340F               	retlw	15
  2210  100D  3410               	retlw	16
  2211  100E  3411               	retlw	17
  2212  100F  3412               	retlw	18
  2213  1010  3413               	retlw	19
  2214  1011  3414               	retlw	20
  2215  1012  340A               	retlw	10
  2216  1013  3415               	retlw	21
  2217  1014  3421               	retlw	33
  2218  1015  3422               	retlw	34
  2219  1016  3418               	retlw	24
  2220  1017  3419               	retlw	25
  2221  1018  341A               	retlw	26
  2222  1019  341B               	retlw	27
  2223  101A  341C               	retlw	28
  2224  101B  341D               	retlw	29
  2225  101C  3423               	retlw	35
  2226  101D  3424               	retlw	36
  2227  101E  3425               	retlw	37
  2228  101F  3426               	retlw	38
  2229  1020  3429               	retlw	41
  2230  1021  342C               	retlw	44
  2231  1022  342D               	retlw	45
  2232  1023  342E               	retlw	46
  2233  1024  3400               	retlw	0
  2234  1025  3401               	retlw	1
  2235  1026  3402               	retlw	2
  2236  1027  3407               	retlw	7
  2237  1028  3408               	retlw	8
  2238  1029  3409               	retlw	9
  2239  102A  3406               	retlw	6
  2240  102B  3404               	retlw	4
  2241  102C  3405               	retlw	5
  2242  102D  3427               	retlw	39
  2243  102E  3428               	retlw	40
  2244  102F                     __end_of_CC2500_registers_address:	
  2245  102F                     _CC2500_rfSettings:	
  2246  102F  3407               	retlw	7
  2247  1030  3407               	retlw	7
  2248  1031  3430               	retlw	48
  2249  1032  3487               	retlw	135
  2250  1033  346B               	retlw	107
  2251  1034  34F8               	retlw	248
  2252  1035  347F               	retlw	127
  2253  1036  343F               	retlw	63
  2254  1037  3409               	retlw	9
  2255  1038  3400               	retlw	0
  2256  1039  345C               	retlw	92
  2257  103A  34A7               	retlw	167
  2258  103B  3462               	retlw	98
  2259  103C  3486               	retlw	134
  2260  103D  3483               	retlw	131
  2261  103E  3403               	retlw	3
  2262  103F  3422               	retlw	34
  2263  1040  34F8               	retlw	248
  2264  1041  3400               	retlw	0
  2265  1042  3444               	retlw	68
  2266  1043  34B6               	retlw	182
  2267  1044  3410               	retlw	16
  2268  1045  3418               	retlw	24
  2269  1046  341D               	retlw	29
  2270  1047  341C               	retlw	28
  2271  1048  34C7               	retlw	199
  2272  1049  3400               	retlw	0
  2273  104A  34B2               	retlw	178
  2274  104B  34EA               	retlw	234
  2275  104C  340A               	retlw	10
  2276  104D  3400               	retlw	0
  2277  104E  3411               	retlw	17
  2278  104F  3459               	retlw	89
  2279  1050  3488               	retlw	136
  2280  1051  3431               	retlw	49
  2281  1052  340B               	retlw	11
  2282  1053  342F               	retlw	47
  2283  1054  342E               	retlw	46
  2284  1055  3406               	retlw	6
  2285  1056  3404               	retlw	4
  2286  1057  3405               	retlw	5
  2287  1058  3400               	retlw	0
  2288  1059  3430               	retlw	48
  2289  105A  34D3               	retlw	211
  2290  105B  3491               	retlw	145
  2291  105C  3441               	retlw	65
  2292  105D  3400               	retlw	0
  2293  105E                     __end_of_CC2500_rfSettings:	
  2294  105E                     _CC2500_patable_vaule:	
  2295  105E  34FE               	retlw	254
  2296  105F  34FE               	retlw	254
  2297  1060  34FE               	retlw	254
  2298  1061  34FE               	retlw	254
  2299  1062  34FE               	retlw	254
  2300  1063  34FE               	retlw	254
  2301  1064  34FE               	retlw	254
  2302  1065  34FE               	retlw	254
  2303  1066                     __end_of_CC2500_patable_vaule:	
  2304                           
  2305                           	psect	nvBANK0
  2306  006E                     __pnvBANK0:	
  2307  006E                     _product:	
  2308  006E                     	ds	1
  2309  000C                     _PORTA	set	12
  2310  000D                     _PORTB	set	13
  2311  000E                     _PORTC	set	14
  2312  0018                     _T1CON	set	24
  2313  0017                     _TMR1H	set	23
  2314  0016                     _TMR1L	set	22
  2315  005F                     _GIE	set	95
  2316  005B                     _IOCIE	set	91
  2317  0058                     _IOCIF	set	88
  2318  005E                     _PEIE	set	94
  2319  0060                     _RA0	set	96
  2320  0063                     _RA3	set	99
  2321  0064                     _RA4	set	100
  2322  0066                     _RA6	set	102
  2323  0067                     _RA7	set	103
  2324  0068                     _RB0	set	104
  2325  0069                     _RB1	set	105
  2326  006A                     _RB2	set	106
  2327  006B                     _RB3	set	107
  2328  006C                     _RB4	set	108
  2329  006D                     _RB5	set	109
  2330  0070                     _RC0	set	112
  2331  0071                     _RC1	set	113
  2332  0072                     _RC2	set	114
  2333  0074                     _RC4	set	116
  2334  0075                     _RC5	set	117
  2335  0077                     _RC7	set	119
  2336  0088                     _TMR1IF	set	136
  2337  009D                     _ADCON0	set	157
  2338  009E                     _ADCON1	set	158
  2339  009C                     _ADRESH	set	156
  2340  009B                     _ADRESL	set	155
  2341  0099                     _OSCCON	set	153
  2342  008C                     _TRISA	set	140
  2343  008D                     _TRISB	set	141
  2344  008E                     _TRISC	set	142
  2345  0097                     _WDTCON	set	151
  2346  04E9                     _GO_nDONE	set	1257
  2347  0488                     _TMR1IE	set	1160
  2348  0117                     _FVRCON	set	279
  2349  010C                     _LATA	set	268
  2350  010D                     _LATB	set	269
  2351  010E                     _LATC	set	270
  2352  018C                     _ANSELA	set	396
  2353  018D                     _ANSELB	set	397
  2354  018E                     _ANSELC	set	398
  2355  0192                     _PMADRH	set	402
  2356  0191                     _PMADRL	set	401
  2357  0196                     _PMCON2	set	406
  2358  0194                     _PMDATH	set	404
  2359  0193                     _PMDATL	set	403
  2360  0CAE                     _CFGS	set	3246
  2361  0CAC                     _FREE	set	3244
  2362  0CAD                     _LWLO	set	3245
  2363  0CA8                     _RD	set	3240
  2364  0CA9                     _WR	set	3241
  2365  0CAA                     _WREN	set	3242
  2366  1069                     _WPUB1	set	4201
  2367  106A                     _WPUB2	set	4202
  2368  0396                     _IOCBF	set	918
  2369  0395                     _IOCBN	set	917
  2370  0394                     _IOCBP	set	916
  2371  1CB2                     _IOCBF2	set	7346
  2372                           
  2373                           ; #config settings
  2374  0000                     
  2375                           	psect	cinit
  2376  0015                     start_initialization:	
  2377  0015                     __initialization:	
  2378                           
  2379                           ; Clear objects allocated to BITCOMMON
  2380  0015  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2381                           
  2382                           ; Clear objects allocated to COMMON
  2383  0016  01F8               	clrf	__pbssCOMMON& (0+127)
  2384  0017  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
  2385  0018  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
  2386  0019  01FB               	clrf	(__pbssCOMMON+3)& (0+127)
  2387  001A  01FC               	clrf	(__pbssCOMMON+4)& (0+127)
  2388                           
  2389                           ; Clear objects allocated to BANK0
  2390  001B  01EF               	clrf	__pbssBANK0& (0+127)
  2391                           
  2392                           ; Clear objects allocated to BANK1
  2393  001C  30A0               	movlw	low __pbssBANK1
  2394  001D  0084               	movwf	4
  2395  001E  3000               	movlw	high __pbssBANK1
  2396  001F  0085               	movwf	5
  2397  0020  3048               	movlw	72
  2398  0021  319B  2310  3180   	fcall	clear_ram0
  2399                           
  2400                           ; Clear objects allocated to BANK2
  2401  0024  3020               	movlw	low __pbssBANK2
  2402  0025  0084               	movwf	4
  2403  0026  3001               	movlw	high __pbssBANK2
  2404  0027  0085               	movwf	5
  2405  0028  3049               	movlw	73
  2406  0029  319B  2310  3180   	fcall	clear_ram0
  2407                           
  2408                           ; Clear objects allocated to BANK3
  2409  002C  30A0               	movlw	low __pbssBANK3
  2410  002D  0084               	movwf	4
  2411  002E  3001               	movlw	high __pbssBANK3
  2412  002F  0085               	movwf	5
  2413  0030  304E               	movlw	78
  2414  0031  319B  2310  3180   	fcall	clear_ram0
  2415                           
  2416                           ; Clear objects allocated to BANK4
  2417  0034  3020               	movlw	low __pbssBANK4
  2418  0035  0084               	movwf	4
  2419  0036  3002               	movlw	high __pbssBANK4
  2420  0037  0085               	movwf	5
  2421  0038  3025               	movlw	37
  2422  0039  319B  2310  3180   	fcall	clear_ram0
  2423                           
  2424                           ; Initialize objects allocated to BANK4
  2425  003C  30E7               	movlw	low __pidataBANK4
  2426  003D  0084               	movwf	4
  2427  003E  309E               	movlw	(high __pidataBANK4)| (0+128)
  2428  003F  0085               	movwf	5
  2429  0040  3045               	movlw	low __pdataBANK4
  2430  0041  0086               	movwf	6
  2431  0042  3002               	movlw	high __pdataBANK4
  2432  0043  0087               	movwf	7
  2433  0044  3020               	movlw	32
  2434  0045  319B  230A         	fcall	init_ram
  2435  0047                     end_of_initialization:	
  2436                           ;End of C runtime variable initialization code
  2437                           
  2438  0047                     __end_of__initialization:	
  2439  0047  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2440  0048  0020               	movlb	0
  2441  0049  3196  2E40         	ljmp	_main	;jump to C main() function
  2442                           
  2443                           	psect	bitbssCOMMON
  2444  03E8                     __pbitbssCOMMON:	
  2445  03E8                     _Receive_OK:	
  2446  03E8                     	ds	1
  2447  03E9                     _Transceive_OK:	
  2448  03E9                     	ds	1
  2449                           
  2450                           	psect	bssCOMMON
  2451  0078                     __pbssCOMMON:	
  2452  0078                     _DelayOff:	
  2453  0078                     	ds	1
  2454  0079                     _DimmerLightsIntr:	
  2455  0079                     	ds	1
  2456  007A                     _LED:	
  2457  007A                     	ds	1
  2458  007B                     _SPI0Buffer:	
  2459  007B                     	ds	1
  2460  007C                     _Sw:	
  2461  007C                     	ds	1
  2462                           
  2463                           	psect	bssBANK0
  2464  006F                     __pbssBANK0:	
  2465  006F                     _DimmerLights:	
  2466  006F                     	ds	1
  2467                           
  2468                           	psect	bssBANK1
  2469  00A0                     __pbssBANK1:	
  2470  00A0                     _myMain:	
  2471  00A0                     	ds	14
  2472  00AE                     _Buz1:	
  2473  00AE                     	ds	12
  2474  00BA                     _RF1:	
  2475  00BA                     	ds	12
  2476  00C6                     _Timer1:	
  2477  00C6                     	ds	3
  2478  00C9                     _WDT:	
  2479  00C9                     	ds	2
  2480  00CB                     _CRC:	
  2481  00CB                     	ds	1
  2482  00CC                     _DimmerLights11:	
  2483  00CC                     	ds	1
  2484  00CD                     _DimmerLights22:	
  2485  00CD                     	ds	1
  2486  00CE                     _DimmerLightsIntrIOC:	
  2487  00CE                     	ds	1
  2488  00CF                     _RSSI:	
  2489  00CF                     	ds	1
  2490  00D0                     _Rx_Length:	
  2491  00D0                     	ds	1
  2492  00D1                     _SwDetect:	
  2493  00D1                     	ds	1
  2494  00D2                     _Tx_Length:	
  2495  00D2                     	ds	1
  2496  00D3                     _r_address:	
  2497  00D3                     	ds	1
  2498  00D4                     _r_data:	
  2499  00D4                     	ds	1
  2500  00D5                     _s_data:	
  2501  00D5                     	ds	1
  2502  00D6                     _Temp:	
  2503  00D6                     	ds	18
  2504                           
  2505                           	psect	bssBANK2
  2506  0120                     __pbssBANK2:	
  2507  0120                     _Dimmer:	
  2508  0120                     	ds	3
  2509  0123                     _RF_Count:	
  2510  0123                     	ds	2
  2511  0125                     _Load:	
  2512  0125                     	ds	46
  2513  0153                     _DlySw1:	
  2514  0153                     	ds	5
  2515  0158                     _DlySw2:	
  2516  0158                     	ds	5
  2517  015D                     _VarErrLED:	
  2518  015D                     	ds	4
  2519  0161                     _VarLED1:	
  2520  0161                     	ds	4
  2521  0165                     _VarLED2:	
  2522  0165                     	ds	4
  2523                           
  2524                           	psect	bssBANK3
  2525  01A0                     __pbssBANK3:	
  2526  01A0                     _RF_Data:	
  2527  01A0                     	ds	30
  2528  01BE                     _DimmerLights1:	
  2529  01BE                     	ds	15
  2530  01CD                     _DimmerLights2:	
  2531  01CD                     	ds	15
  2532  01DC                     _Sw1:	
  2533  01DC                     	ds	9
  2534  01E5                     _Sw2:	
  2535  01E5                     	ds	9
  2536                           
  2537                           	psect	bssBANK4
  2538  0220                     __pbssBANK4:	
  2539  0220                     _Memory:	
  2540  0220                     	ds	37
  2541                           
  2542                           	psect	dataBANK4
  2543  0245                     __pdataBANK4:	
  2544  0245                     __product:	
  2545  0245                     	ds	32
  2546                           
  2547                           	psect	clrtext
  2548  1B10                     clear_ram0:	
  2549                           ;	Called with FSR0 containing the base address, and
  2550                           ;	WREG with the size to clear
  2551                           
  2552  1B10  0064               	clrwdt	;clear the watchdog before getting into this loop
  2553  1B11                     clrloop0:	
  2554  1B11  0180               	clrf	0	;clear RAM location pointed to by FSR
  2555  1B12  3101               	addfsr 0,1
  2556  1B13  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2557  1B14  2B11               	goto	clrloop0	;have we reached the end yet?
  2558  1B15  3400               	retlw	0	;all done for this memory range, return
  2559                           
  2560                           	psect	inittext
  2561  1B0A                     init_ram:	
  2562  1B0A  00FE               	movwf	126
  2563  1B0B                     initloop:	
  2564  1B0B  0012               	moviw fsr0++
  2565  1B0C  001E               	movwi fsr1++
  2566  1B0D  0BFE               	decfsz	126,f
  2567  1B0E  2B0B               	goto	initloop
  2568  1B0F  3400               	retlw	0
  2569                           
  2570                           	psect	cstackBANK1
  2571  00E8                     __pcstackBANK1:	
  2572  00E8                     setRF_Main@loop_f:	
  2573                           
  2574                           ; 1 bytes @ 0x0
  2575  00E8                     	ds	1
  2576  00E9                     setRF_Main@Receive_OK:	
  2577                           
  2578                           ; 1 bytes @ 0x1
  2579  00E9                     	ds	1
  2580  00EA                     setRF_Main@error:	
  2581                           
  2582                           ; 1 bytes @ 0x2
  2583  00EA                     	ds	1
  2584  00EB                     ?_main:	
  2585  00EB                     main@argc:	
  2586                           ; 2 bytes @ 0x3
  2587                           
  2588                           
  2589                           ; 2 bytes @ 0x3
  2590  00EB                     	ds	2
  2591  00ED                     main@argv:	
  2592                           
  2593                           ; 2 bytes @ 0x5
  2594  00ED                     	ds	2
  2595                           
  2596                           	psect	cstackCOMMON
  2597  0070                     __pcstackCOMMON:	
  2598  0070                     ?_Timeout_Counter:	
  2599  0070                     ?_set_TimeoutCleared:	
  2600                           ; 0 bytes @ 0x0
  2601                           
  2602  0070                     ?_CC2500_WriteByte:	
  2603                           ; 0 bytes @ 0x0
  2604                           
  2605  0070                     ?_CC2500_WriteCommand:	
  2606                           ; 0 bytes @ 0x0
  2607                           
  2608  0070                     ?_CC2500_ReadStatus:	
  2609                           ; 0 bytes @ 0x0
  2610                           
  2611  0070                     ?_CC2500_ReadByte:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0070                     ?_CC2500_PowerRST:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0070                     ?_CC2500_InitSetREG:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0070                     ?_CC2500_InitPATable:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ?_CC2500_ClearTXFIFO:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ?_CC2500_ClearRXFIFO:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_CC2500_FrequencyCabr:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_CC2500_SIDLEMode:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_DlyOff_Initialization:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_DlyOff_Main:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_setDimmerLights_ErrorClose:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_setDimmerLights_Initialization:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_Dimmer_Initialization:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_setDimmerLights_Main:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_setDimmerLights_Line:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_setTxData:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_setLED_Initialization:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_setLED_Main:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_Fosc_Set:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_IO_Set:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_TMR1_Set:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_ADC_Set:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_IOC_Set:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_WDT_Set:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_IOC_ISR:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_TMR1_ISR:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_Flash_Memory_Write:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_Flash_Memory_Modify:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_WDT_Clearing:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_setLoad_AH_AL_Restore:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_setTemp_Initialization:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_setTemp_Main:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_setRF_Initialization:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_setRF_Main:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_RF_RxDisable:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_getRxData:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ?_setLog_Code:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_setControl_Lights_Table:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ?_setRFSW_Control:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ?_setRFSW_AdjControl:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_setRF_DimmerValue:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_setSw_Initialization:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_setMain_Exception:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_setSw_Main:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?_myMain_Initialization:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ?_my_MainTimer:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0070                     ?_Buzzer_Initialization:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0070                     ?_Buzzer_Main:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0070                     ?_CC2500_TxData:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0070                     ?_CC2500_RxData:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0070                     ?_CC2500_PowerOnInitial:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0070                     ?_DelayOffPointSelect:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0070                     ?_DelayOff_Initialization:	
  2768                           ; 0 bytes @ 0x0
  2769                           
  2770  0070                     ?_DelayOff_Main:	
  2771                           ; 0 bytes @ 0x0
  2772                           
  2773  0070                     ?_DimmerIntrIOCPointSelect:	
  2774                           ; 0 bytes @ 0x0
  2775                           
  2776  0070                     ??_DimmerIntrIOCPointSelect:	
  2777                           ; 0 bytes @ 0x0
  2778                           
  2779  0070                     ?_setDimmerLights_IntrIOC_GO:	
  2780                           ; 0 bytes @ 0x0
  2781                           
  2782  0070                     ?_DimmerIntrPointSelect:	
  2783                           ; 0 bytes @ 0x0
  2784                           
  2785  0070                     ??_DimmerIntrPointSelect:	
  2786                           ; 0 bytes @ 0x0
  2787                           
  2788  0070                     ?_setDimmerLights_IntrControl:	
  2789                           ; 0 bytes @ 0x0
  2790                           
  2791  0070                     ?_DimmerLightsPointSelect:	
  2792                           ; 0 bytes @ 0x0
  2793                           
  2794  0070                     ?_DimmerLights_Initialization:	
  2795                           ; 0 bytes @ 0x0
  2796                           
  2797  0070                     ?_DimmerLights_Main:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0070                     ?_setDimmerLights_SwOn:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0070                     ?_setDimmerLights_SwOff:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0070                     ?_setDimmerLights_AdjControl:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0070                     ?_setDimmerLights_AdjRF:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0070                     ?_LedPointSelect:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0070                     ?_LED_Initialization:	
  2816                           ; 0 bytes @ 0x0
  2817                           
  2818  0070                     ?_LED_Main:	
  2819                           ; 0 bytes @ 0x0
  2820                           
  2821  0070                     ?_Mcu_Initialization:	
  2822                           ; 0 bytes @ 0x0
  2823                           
  2824  0070                     ?_ISR:	
  2825                           ; 0 bytes @ 0x0
  2826                           
  2827  0070                     ?_setDimmerReClock:	
  2828                           ; 0 bytes @ 0x0
  2829                           
  2830  0070                     ?_Flash_Memory_Initialization:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0070                     ?_Flash_Memory_Main:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0070                     ?_Flash_Memory_Unlock:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0070                     ?_Flash_Memory_Erasing:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0070                     ?_setMemory_Modify:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0070                     ?_setMemory_LoopSave:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0070                     ?_WDT_Main:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0070                     ?_Load_Initialization:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0070                     ?_getLoad_AD:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0070                     ?_Load_Main:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0070                     ?_Temp_Initialization:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0070                     ?_getTemp_AD:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0070                     ?_Temp_Main:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0070                     ?_RF_Initialization:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0070                     ?_RF_Main:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0070                     ?_setRF_Learn:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0070                     ?_TouchPower:	
  2879                           ; 0 bytes @ 0x0
  2880                           
  2881  0070                     ?_SwPointSelect:	
  2882                           ; 0 bytes @ 0x0
  2883                           
  2884  0070                     ?_Switch_Initialization:	
  2885                           ; 0 bytes @ 0x0
  2886                           
  2887  0070                     ?_Switch_Main:	
  2888                           ; 0 bytes @ 0x0
  2889                           
  2890  0070                     ?_DelayTimejudge:	
  2891                           ; 0 bytes @ 0x0
  2892                           
  2893  0070                     ?_getMain_All_Error_Status:	
  2894                           ; 1 bytes @ 0x0
  2895                           
  2896  0070                     ?_getLoad_OK:	
  2897                           ; 1 bytes @ 0x0
  2898                           
  2899  0070                     ?_getMain_LightsStatus:	
  2900                           ; 1 bytes @ 0x0
  2901                           
  2902  0070                     ?_setPercentValue:	
  2903                           ; 1 bytes @ 0x0
  2904                           
  2905  0070                     ?_getPercentValue:	
  2906                           ; 1 bytes @ 0x0
  2907                           
  2908  0070                     ?_Flash_Memory_Read:	
  2909                           ; 1 bytes @ 0x0
  2910                           
  2911  0070                     ?_getMain_LoadOK:	
  2912                           ; 1 bytes @ 0x0
  2913                           
  2914  0070                     ?_getMain_Lights_Count:	
  2915                           ; 1 bytes @ 0x0
  2916                           
  2917  0070                     ?_getRF_KeyStatus:	
  2918                           ; 1 bytes @ 0x0
  2919                           
  2920  0070                     ?_getSw_KeyStatus:	
  2921                           ; 1 bytes @ 0x0
  2922                           
  2923  0070                     ?_getDelayOff_GO:	
  2924                           ; 1 bytes @ 0x0
  2925                           
  2926  0070                     ?_getDimmerLights_Status:	
  2927                           ; 1 bytes @ 0x0
  2928                           
  2929  0070                     ?_getAll_DimmerLights_AdjGO:	
  2930                           ; 1 bytes @ 0x0
  2931                           
  2932  0070                     ?_getDimmer_LoadOK:	
  2933                           ; 1 bytes @ 0x0
  2934                           
  2935  0070                     ?_getDimmerLights_Line:	
  2936                           ; 1 bytes @ 0x0
  2937                           
  2938                           
  2939                           ; 1 bytes @ 0x0
  2940  0070                     	ds	1
  2941  0071                     DimmerIntrIOCPointSelect@lights:	
  2942  0071                     DimmerIntrPointSelect@lights:	
  2943                           ; 1 bytes @ 0x1
  2944                           
  2945                           
  2946                           ; 1 bytes @ 0x1
  2947  0071                     	ds	1
  2948  0072                     ??_setDimmerLights_IntrIOC_GO:	
  2949  0072                     ??_setDimmerLights_IntrControl:	
  2950                           ; 0 bytes @ 0x2
  2951                           
  2952  0072                     setDimmerLights_IntrIOC_GO@lights:	
  2953                           ; 0 bytes @ 0x2
  2954                           
  2955                           
  2956                           ; 1 bytes @ 0x2
  2957  0072                     	ds	1
  2958  0073                     ??_IOC_ISR:	
  2959  0073                     ??_setDimmerReClock:	
  2960                           ; 0 bytes @ 0x3
  2961                           
  2962                           
  2963                           ; 0 bytes @ 0x3
  2964  0073                     	ds	3
  2965  0076                     setDimmerLights_IntrControl@lights:	
  2966                           
  2967                           ; 1 bytes @ 0x6
  2968  0076                     	ds	1
  2969  0077                     ??_TMR1_ISR:	
  2970  0077                     ??_ISR:	
  2971                           ; 0 bytes @ 0x7
  2972                           
  2973                           
  2974                           ; 0 bytes @ 0x7
  2975  0077                     	ds	1
  2976                           
  2977                           	psect	cstackBANK0
  2978  0020                     __pcstackBANK0:	
  2979  0020                     ??_Timeout_Counter:	
  2980  0020                     ??_set_TimeoutCleared:	
  2981                           ; 0 bytes @ 0x0
  2982                           
  2983  0020                     ??_CC2500_WriteByte:	
  2984                           ; 0 bytes @ 0x0
  2985                           
  2986  0020                     ??_CC2500_ReadByte:	
  2987                           ; 0 bytes @ 0x0
  2988                           
  2989  0020                     ?_DelayTime_1us:	
  2990                           ; 0 bytes @ 0x0
  2991                           
  2992  0020                     ??_Dimmer_Initialization:	
  2993                           ; 0 bytes @ 0x0
  2994                           
  2995  0020                     ??_getMain_All_Error_Status:	
  2996                           ; 0 bytes @ 0x0
  2997                           
  2998  0020                     ??_getLoad_OK:	
  2999                           ; 0 bytes @ 0x0
  3000                           
  3001  0020                     ??_setDimmerLights_Line:	
  3002                           ; 0 bytes @ 0x0
  3003                           
  3004  0020                     ?_setRF_DimmerLights:	
  3005                           ; 0 bytes @ 0x0
  3006                           
  3007  0020                     ??_setTxData:	
  3008                           ; 0 bytes @ 0x0
  3009                           
  3010  0020                     ??_Fosc_Set:	
  3011                           ; 0 bytes @ 0x0
  3012                           
  3013  0020                     ??_IO_Set:	
  3014                           ; 0 bytes @ 0x0
  3015                           
  3016  0020                     ??_TMR1_Set:	
  3017                           ; 0 bytes @ 0x0
  3018                           
  3019  0020                     ??_ADC_Set:	
  3020                           ; 0 bytes @ 0x0
  3021                           
  3022  0020                     ??_IOC_Set:	
  3023                           ; 0 bytes @ 0x0
  3024                           
  3025  0020                     ??_WDT_Set:	
  3026                           ; 0 bytes @ 0x0
  3027                           
  3028  0020                     ??_Flash_Memory_Read:	
  3029                           ; 0 bytes @ 0x0
  3030                           
  3031  0020                     ?_setMemory_Data:	
  3032                           ; 0 bytes @ 0x0
  3033                           
  3034  0020                     ??_Flash_Memory_Write:	
  3035                           ; 0 bytes @ 0x0
  3036                           
  3037  0020                     ??_WDT_Clearing:	
  3038                           ; 0 bytes @ 0x0
  3039                           
  3040  0020                     ??_setLoad_AH_AL_Restore:	
  3041                           ; 0 bytes @ 0x0
  3042                           
  3043  0020                     ??_getMain_Lights_Count:	
  3044                           ; 0 bytes @ 0x0
  3045                           
  3046  0020                     ??_setTemp_Initialization:	
  3047                           ; 0 bytes @ 0x0
  3048                           
  3049  0020                     ??_setRF_Initialization:	
  3050                           ; 0 bytes @ 0x0
  3051                           
  3052  0020                     ??_getRF_KeyStatus:	
  3053                           ; 0 bytes @ 0x0
  3054                           
  3055  0020                     ??_getSw_KeyStatus:	
  3056                           ; 0 bytes @ 0x0
  3057                           
  3058  0020                     ??_myMain_Initialization:	
  3059                           ; 0 bytes @ 0x0
  3060                           
  3061  0020                     ??_Buzzer_Initialization:	
  3062                           ; 0 bytes @ 0x0
  3063                           
  3064  0020                     ??_Buzzer_Main:	
  3065                           ; 0 bytes @ 0x0
  3066                           
  3067  0020                     ??_DelayOffPointSelect:	
  3068                           ; 0 bytes @ 0x0
  3069                           
  3070  0020                     ??_DimmerLightsPointSelect:	
  3071                           ; 0 bytes @ 0x0
  3072                           
  3073  0020                     ??_getAll_DimmerLights_AdjGO:	
  3074                           ; 0 bytes @ 0x0
  3075                           
  3076  0020                     ??_getDimmer_LoadOK:	
  3077                           ; 0 bytes @ 0x0
  3078                           
  3079  0020                     ??_getDimmerLights_Line:	
  3080                           ; 0 bytes @ 0x0
  3081                           
  3082  0020                     ??_LedPointSelect:	
  3083                           ; 0 bytes @ 0x0
  3084                           
  3085  0020                     ??_Flash_Memory_Unlock:	
  3086                           ; 0 bytes @ 0x0
  3087                           
  3088  0020                     ??_Flash_Memory_Erasing:	
  3089                           ; 0 bytes @ 0x0
  3090                           
  3091  0020                     ??_setMemory_Modify:	
  3092                           ; 0 bytes @ 0x0
  3093                           
  3094  0020                     ??_setMemory_LoopSave:	
  3095                           ; 0 bytes @ 0x0
  3096                           
  3097  0020                     ??_WDT_Main:	
  3098                           ; 0 bytes @ 0x0
  3099                           
  3100  0020                     ??_Temp_Initialization:	
  3101                           ; 0 bytes @ 0x0
  3102                           
  3103  0020                     ??_setRF_Learn:	
  3104                           ; 0 bytes @ 0x0
  3105                           
  3106  0020                     ??_TouchPower:	
  3107                           ; 0 bytes @ 0x0
  3108                           
  3109  0020                     ??_SwPointSelect:	
  3110                           ; 0 bytes @ 0x0
  3111                           
  3112  0020                     ?___bmul:	
  3113                           ; 0 bytes @ 0x0
  3114                           
  3115  0020                     ?_getBuz_GO:	
  3116                           ; 1 bytes @ 0x0
  3117                           
  3118  0020                     ?_getAD:	
  3119                           ; 2 bytes @ 0x0
  3120                           
  3121  0020                     ?___awdiv:	
  3122                           ; 2 bytes @ 0x0
  3123                           
  3124  0020                     ?___lwdiv:	
  3125                           ; 2 bytes @ 0x0
  3126                           
  3127  0020                     ?___ftpack:	
  3128                           ; 2 bytes @ 0x0
  3129                           
  3130  0020                     getDimmer_LoadOK@status:	
  3131                           ; 3 bytes @ 0x0
  3132                           
  3133  0020                     setDimmerLights_Line@lights:	
  3134                           ; 1 bytes @ 0x0
  3135                           
  3136  0020                     getAD@adcon1:	
  3137                           ; 1 bytes @ 0x0
  3138                           
  3139  0020                     setMemory_Data@data:	
  3140                           ; 1 bytes @ 0x0
  3141                           
  3142  0020                     getLoad_OK@ok:	
  3143                           ; 1 bytes @ 0x0
  3144                           
  3145  0020                     setRF_DimmerLights@on:	
  3146                           ; 1 bytes @ 0x0
  3147                           
  3148  0020                     getMain_Lights_Count@count:	
  3149                           ; 1 bytes @ 0x0
  3150                           
  3151  0020                     ___bmul@multiplicand:	
  3152                           ; 1 bytes @ 0x0
  3153                           
  3154  0020                     DelayTime_1us@count:	
  3155                           ; 1 bytes @ 0x0
  3156                           
  3157  0020                     ___awdiv@divisor:	
  3158                           ; 2 bytes @ 0x0
  3159                           
  3160  0020                     ___lwdiv@divisor:	
  3161                           ; 2 bytes @ 0x0
  3162                           
  3163  0020                     ___ftpack@arg:	
  3164                           ; 2 bytes @ 0x0
  3165                           
  3166                           
  3167                           ; 3 bytes @ 0x0
  3168  0020                     	ds	1
  3169  0021                     ??_setRF_DimmerLights:	
  3170  0021                     ??_setMemory_Data:	
  3171                           ; 0 bytes @ 0x1
  3172                           
  3173  0021                     ??_getMain_LoadOK:	
  3174                           ; 0 bytes @ 0x1
  3175                           
  3176  0021                     ??_Mcu_Initialization:	
  3177                           ; 0 bytes @ 0x1
  3178                           
  3179  0021                     ??_RF_Initialization:	
  3180                           ; 0 bytes @ 0x1
  3181                           
  3182  0021                     ??___bmul:	
  3183                           ; 0 bytes @ 0x1
  3184                           
  3185  0021                     CC2500_WriteByte@loop_a:	
  3186                           ; 0 bytes @ 0x1
  3187                           
  3188  0021                     CC2500_ReadByte@loop_b:	
  3189                           ; 1 bytes @ 0x1
  3190                           
  3191  0021                     DelayOffPointSelect@sw:	
  3192                           ; 1 bytes @ 0x1
  3193                           
  3194  0021                     DimmerLightsPointSelect@lights:	
  3195                           ; 1 bytes @ 0x1
  3196                           
  3197  0021                     getAll_DimmerLights_AdjGO@adjgo:	
  3198                           ; 1 bytes @ 0x1
  3199                           
  3200  0021                     getDimmerLights_Line@line:	
  3201                           ; 1 bytes @ 0x1
  3202                           
  3203  0021                     LedPointSelect@led:	
  3204                           ; 1 bytes @ 0x1
  3205                           
  3206  0021                     Flash_Memory_Read@i:	
  3207                           ; 1 bytes @ 0x1
  3208                           
  3209  0021                     Flash_Memory_Write@i:	
  3210                           ; 1 bytes @ 0x1
  3211                           
  3212  0021                     setMemory_Modify@command:	
  3213                           ; 1 bytes @ 0x1
  3214                           
  3215  0021                     setMemory_LoopSave@command:	
  3216                           ; 1 bytes @ 0x1
  3217                           
  3218  0021                     setLoad_AH_AL_Restore@i:	
  3219                           ; 1 bytes @ 0x1
  3220                           
  3221  0021                     setRF_Learn@command:	
  3222                           ; 1 bytes @ 0x1
  3223                           
  3224  0021                     getRF_KeyStatus@key:	
  3225                           ; 1 bytes @ 0x1
  3226                           
  3227  0021                     SwPointSelect@sw:	
  3228                           ; 1 bytes @ 0x1
  3229                           
  3230  0021                     _getSw_KeyStatus$5628:	
  3231                           ; 1 bytes @ 0x1
  3232                           
  3233  0021                     getMain_Lights_Count@status3:	
  3234                           ; 1 bytes @ 0x1
  3235                           
  3236  0021                     _getMain_All_Error_Status$6310:	
  3237                           ; 1 bytes @ 0x1
  3238                           
  3239                           
  3240                           ; 2 bytes @ 0x1
  3241  0021                     	ds	1
  3242  0022                     ??_CC2500_WriteCommand:	
  3243  0022                     ??_CC2500_ReadStatus:	
  3244                           ; 0 bytes @ 0x2
  3245                           
  3246  0022                     ??_DelayTime_1us:	
  3247                           ; 0 bytes @ 0x2
  3248                           
  3249  0022                     ?_CC2500_WriteREG:	
  3250                           ; 0 bytes @ 0x2
  3251                           
  3252  0022                     ??_DlyOff_Initialization:	
  3253                           ; 0 bytes @ 0x2
  3254                           
  3255  0022                     ??_setDimmerLights_Initialization:	
  3256                           ; 0 bytes @ 0x2
  3257                           
  3258  0022                     ?_setDimmerLights_Trigger:	
  3259                           ; 0 bytes @ 0x2
  3260                           
  3261  0022                     ?_setDimmerLights_TriggerAdj:	
  3262                           ; 0 bytes @ 0x2
  3263                           
  3264  0022                     ?_setLED:	
  3265                           ; 0 bytes @ 0x2
  3266                           
  3267  0022                     ??_setLED_Main:	
  3268                           ; 0 bytes @ 0x2
  3269                           
  3270  0022                     ??_getBuz_GO:	
  3271                           ; 0 bytes @ 0x2
  3272                           
  3273  0022                     ??_getDelayOff_GO:	
  3274                           ; 0 bytes @ 0x2
  3275                           
  3276  0022                     ??_getDimmerLights_Status:	
  3277                           ; 0 bytes @ 0x2
  3278                           
  3279  0022                     ??_Load_Initialization:	
  3280                           ; 0 bytes @ 0x2
  3281                           
  3282  0022                     CC2500_WriteREG@value:	
  3283                           ; 0 bytes @ 0x2
  3284                           
  3285  0022                     DlyOff_Initialization@sw:	
  3286                           ; 1 bytes @ 0x2
  3287                           
  3288  0022                     getDelayOff_GO@sw:	
  3289                           ; 1 bytes @ 0x2
  3290                           
  3291  0022                     getDimmerLights_Status@lights:	
  3292                           ; 1 bytes @ 0x2
  3293                           
  3294  0022                     _getAll_DimmerLights_AdjGO$2248:	
  3295                           ; 1 bytes @ 0x2
  3296                           
  3297  0022                     setDimmerLights_Trigger@command:	
  3298                           ; 1 bytes @ 0x2
  3299                           
  3300  0022                     setDimmerLights_TriggerAdj@command:	
  3301                           ; 1 bytes @ 0x2
  3302                           
  3303  0022                     setLED@command:	
  3304                           ; 1 bytes @ 0x2
  3305                           
  3306  0022                     Flash_Memory_Read@address:	
  3307                           ; 1 bytes @ 0x2
  3308                           
  3309  0022                     setMemory_Data@address:	
  3310                           ; 1 bytes @ 0x2
  3311                           
  3312  0022                     _getRF_KeyStatus$4663:	
  3313                           ; 1 bytes @ 0x2
  3314                           
  3315  0022                     _getSw_KeyStatus$5629:	
  3316                           ; 1 bytes @ 0x2
  3317                           
  3318  0022                     getMain_Lights_Count@status1:	
  3319                           ; 1 bytes @ 0x2
  3320                           
  3321  0022                     getMain_LoadOK@ok:	
  3322                           ; 1 bytes @ 0x2
  3323                           
  3324  0022                     ___bmul@product:	
  3325                           ; 1 bytes @ 0x2
  3326                           
  3327  0022                     DelayTime_1us@i:	
  3328                           ; 1 bytes @ 0x2
  3329                           
  3330  0022                     ___awdiv@dividend:	
  3331                           ; 2 bytes @ 0x2
  3332                           
  3333  0022                     ___lwdiv@dividend:	
  3334                           ; 2 bytes @ 0x2
  3335                           
  3336                           
  3337                           ; 2 bytes @ 0x2
  3338  0022                     	ds	1
  3339  0023                     ??_CC2500_WriteREG:	
  3340  0023                     ??_setDimmerLights_Trigger:	
  3341                           ; 0 bytes @ 0x3
  3342                           
  3343  0023                     ??_setDimmerLights_TriggerAdj:	
  3344                           ; 0 bytes @ 0x3
  3345                           
  3346  0023                     ??_setLED:	
  3347                           ; 0 bytes @ 0x3
  3348                           
  3349  0023                     ??_DelayOff_Initialization:	
  3350                           ; 0 bytes @ 0x3
  3351                           
  3352  0023                     ??_getAD:	
  3353                           ; 0 bytes @ 0x3
  3354                           
  3355  0023                     CC2500_WriteCommand@command:	
  3356                           ; 0 bytes @ 0x3
  3357                           
  3358  0023                     CC2500_ReadStatus@status_addr:	
  3359                           ; 1 bytes @ 0x3
  3360                           
  3361  0023                     getDelayOff_GO@go:	
  3362                           ; 1 bytes @ 0x3
  3363                           
  3364  0023                     setDimmerLights_Initialization@lights:	
  3365                           ; 1 bytes @ 0x3
  3366                           
  3367  0023                     getDimmerLights_Status@status:	
  3368                           ; 1 bytes @ 0x3
  3369                           
  3370  0023                     setLED@led:	
  3371                           ; 1 bytes @ 0x3
  3372                           
  3373  0023                     getAD@adcon0:	
  3374                           ; 1 bytes @ 0x3
  3375                           
  3376  0023                     Flash_Memory_Read@ret:	
  3377                           ; 1 bytes @ 0x3
  3378                           
  3379  0023                     setRF_DimmerLights@status:	
  3380                           ; 1 bytes @ 0x3
  3381                           
  3382  0023                     getSw_KeyStatus@status:	
  3383                           ; 1 bytes @ 0x3
  3384                           
  3385  0023                     getMain_Lights_Count@status2:	
  3386                           ; 1 bytes @ 0x3
  3387                           
  3388  0023                     ___bmul@multiplier:	
  3389                           ; 1 bytes @ 0x3
  3390                           
  3391  0023                     ___ftpack@exp:	
  3392                           ; 1 bytes @ 0x3
  3393                           
  3394  0023                     _getMain_All_Error_Status$6311:	
  3395                           ; 1 bytes @ 0x3
  3396                           
  3397                           
  3398                           ; 2 bytes @ 0x3
  3399  0023                     	ds	1
  3400  0024                     ??_CC2500_ClearTXFIFO:	
  3401  0024                     ??_CC2500_ClearRXFIFO:	
  3402                           ; 0 bytes @ 0x4
  3403                           
  3404  0024                     ??_CC2500_SIDLEMode:	
  3405                           ; 0 bytes @ 0x4
  3406                           
  3407  0024                     ??_DelayTimejudge:	
  3408                           ; 0 bytes @ 0x4
  3409                           
  3410  0024                     ??_getMain_LightsStatus:	
  3411                           ; 0 bytes @ 0x4
  3412                           
  3413  0024                     ??_setLED_Initialization:	
  3414                           ; 0 bytes @ 0x4
  3415                           
  3416  0024                     ??_Flash_Memory_Modify:	
  3417                           ; 0 bytes @ 0x4
  3418                           
  3419  0024                     ??_RF_RxDisable:	
  3420                           ; 0 bytes @ 0x4
  3421                           
  3422  0024                     ??_setSw_Initialization:	
  3423                           ; 0 bytes @ 0x4
  3424                           
  3425  0024                     ??_CC2500_TxData:	
  3426                           ; 0 bytes @ 0x4
  3427                           
  3428  0024                     ??_CC2500_RxData:	
  3429                           ; 0 bytes @ 0x4
  3430                           
  3431  0024                     ??_DimmerLights_Initialization:	
  3432                           ; 0 bytes @ 0x4
  3433                           
  3434  0024                     ??_getLoad_AD:	
  3435                           ; 0 bytes @ 0x4
  3436                           
  3437  0024                     ??_getTemp_AD:	
  3438                           ; 0 bytes @ 0x4
  3439                           
  3440  0024                     ??___awdiv:	
  3441                           ; 0 bytes @ 0x4
  3442                           
  3443  0024                     ??___lwdiv:	
  3444                           ; 0 bytes @ 0x4
  3445                           
  3446  0024                     CC2500_WriteREG@w_addr:	
  3447                           ; 0 bytes @ 0x4
  3448                           
  3449  0024                     setDimmerLights_Trigger@lights:	
  3450                           ; 1 bytes @ 0x4
  3451                           
  3452  0024                     setDimmerLights_TriggerAdj@lights:	
  3453                           ; 1 bytes @ 0x4
  3454                           
  3455  0024                     setLED_Initialization@led:	
  3456                           ; 1 bytes @ 0x4
  3457                           
  3458  0024                     setLED_Main@led:	
  3459                           ; 1 bytes @ 0x4
  3460                           
  3461  0024                     setRF_DimmerLights@lights:	
  3462                           ; 1 bytes @ 0x4
  3463                           
  3464  0024                     setSw_Initialization@sw:	
  3465                           ; 1 bytes @ 0x4
  3466                           
  3467  0024                     getSw_KeyStatus@sw:	
  3468                           ; 1 bytes @ 0x4
  3469                           
  3470  0024                     ___ftpack@sign:	
  3471                           ; 1 bytes @ 0x4
  3472                           
  3473  0024                     getBuz_GO@i:	
  3474                           ; 1 bytes @ 0x4
  3475                           
  3476  0024                     DelayTime_1us@j:	
  3477                           ; 2 bytes @ 0x4
  3478                           
  3479                           
  3480                           ; 2 bytes @ 0x4
  3481  0024                     	ds	1
  3482  0025                     ??_CC2500_InitSetREG:	
  3483  0025                     ??_CC2500_InitPATable:	
  3484                           ; 0 bytes @ 0x5
  3485                           
  3486  0025                     ??___ftpack:	
  3487                           ; 0 bytes @ 0x5
  3488                           
  3489  0025                     ??_setDimmerLights_AdjControl:	
  3490                           ; 0 bytes @ 0x5
  3491                           
  3492  0025                     ??_LED_Initialization:	
  3493                           ; 0 bytes @ 0x5
  3494                           
  3495  0025                     ??_LED_Main:	
  3496                           ; 0 bytes @ 0x5
  3497                           
  3498  0025                     ??_Switch_Initialization:	
  3499                           ; 0 bytes @ 0x5
  3500                           
  3501  0025                     CC2500_TxData@loop_e:	
  3502                           ; 0 bytes @ 0x5
  3503                           
  3504  0025                     CC2500_RxData@loop_f:	
  3505                           ; 1 bytes @ 0x5
  3506                           
  3507  0025                     Flash_Memory_Modify@i:	
  3508                           ; 1 bytes @ 0x5
  3509                           
  3510  0025                     getTemp_AD@channel:	
  3511                           ; 1 bytes @ 0x5
  3512                           
  3513  0025                     getMain_LightsStatus@count:	
  3514                           ; 1 bytes @ 0x5
  3515                           
  3516  0025                     getMain_All_Error_Status@command:	
  3517                           ; 1 bytes @ 0x5
  3518                           
  3519  0025                     ___awdiv@counter:	
  3520                           ; 1 bytes @ 0x5
  3521                           
  3522  0025                     ___lwdiv@quotient:	
  3523                           ; 1 bytes @ 0x5
  3524                           
  3525                           
  3526                           ; 2 bytes @ 0x5
  3527  0025                     	ds	1
  3528  0026                     ??_CC2500_PowerRST:	
  3529  0026                     ??_CC2500_FrequencyCabr:	
  3530                           ; 0 bytes @ 0x6
  3531                           
  3532  0026                     CC2500_InitSetREG@temp1:	
  3533                           ; 0 bytes @ 0x6
  3534                           
  3535  0026                     CC2500_InitPATable@temp:	
  3536                           ; 1 bytes @ 0x6
  3537                           
  3538  0026                     DelayTimejudge@i:	
  3539                           ; 1 bytes @ 0x6
  3540                           
  3541  0026                     setDimmerLights_AdjControl@idle:	
  3542                           ; 1 bytes @ 0x6
  3543                           
  3544  0026                     getLoad_AD@channel:	
  3545                           ; 1 bytes @ 0x6
  3546                           
  3547  0026                     getMain_All_Error_Status@status:	
  3548                           ; 1 bytes @ 0x6
  3549                           
  3550  0026                     ___awdiv@sign:	
  3551                           ; 1 bytes @ 0x6
  3552                           
  3553  0026                     getMain_LightsStatus@i:	
  3554                           ; 1 bytes @ 0x6
  3555                           
  3556                           
  3557                           ; 2 bytes @ 0x6
  3558  0026                     	ds	1
  3559  0027                     CC2500_InitSetREG@temp2:	
  3560  0027                     CC2500_InitPATable@loop_d:	
  3561                           ; 1 bytes @ 0x7
  3562                           
  3563  0027                     DelayTimejudge@j:	
  3564                           ; 1 bytes @ 0x7
  3565                           
  3566  0027                     _setDimmerLights_AdjControl$2261:	
  3567                           ; 1 bytes @ 0x7
  3568                           
  3569  0027                     getLoad_AD@k:	
  3570                           ; 1 bytes @ 0x7
  3571                           
  3572  0027                     ___lwdiv@counter:	
  3573                           ; 1 bytes @ 0x7
  3574                           
  3575  0027                     ___awdiv@quotient:	
  3576                           ; 1 bytes @ 0x7
  3577                           
  3578                           
  3579                           ; 2 bytes @ 0x7
  3580  0027                     	ds	1
  3581  0028                     ?___awtoft:	
  3582  0028                     CC2500_InitSetREG@loop_c:	
  3583                           ; 3 bytes @ 0x8
  3584                           
  3585  0028                     DelayTimejudge@k:	
  3586                           ; 1 bytes @ 0x8
  3587                           
  3588  0028                     setDimmerLights_AdjControl@sw:	
  3589                           ; 1 bytes @ 0x8
  3590                           
  3591  0028                     getLoad_AD@j:	
  3592                           ; 1 bytes @ 0x8
  3593                           
  3594  0028                     getMain_LightsStatus@status:	
  3595                           ; 1 bytes @ 0x8
  3596                           
  3597  0028                     ___awtoft@c:	
  3598                           ; 1 bytes @ 0x8
  3599                           
  3600                           
  3601                           ; 2 bytes @ 0x8
  3602  0028                     	ds	1
  3603  0029                     ?_setBuz:	
  3604  0029                     ??_CC2500_PowerOnInitial:	
  3605                           ; 0 bytes @ 0x9
  3606                           
  3607  0029                     ??_Flash_Memory_Main:	
  3608                           ; 0 bytes @ 0x9
  3609                           
  3610  0029                     ??_Load_Main:	
  3611                           ; 0 bytes @ 0x9
  3612                           
  3613  0029                     DelayTimejudge@value:	
  3614                           ; 0 bytes @ 0x9
  3615                           
  3616  0029                     getLoad_AD@i:	
  3617                           ; 1 bytes @ 0x9
  3618                           
  3619  0029                     setBuz@time:	
  3620                           ; 1 bytes @ 0x9
  3621                           
  3622                           
  3623                           ; 2 bytes @ 0x9
  3624  0029                     	ds	1
  3625  002A                     ?_setDelayOff_GO:	
  3626  002A                     setDelayOff_GO@command:	
  3627                           ; 0 bytes @ 0xA
  3628                           
  3629                           
  3630                           ; 1 bytes @ 0xA
  3631  002A                     	ds	1
  3632  002B                     ??_setBuz:	
  3633  002B                     ??___awtoft:	
  3634                           ; 0 bytes @ 0xB
  3635                           
  3636  002B                     setDelayOff_GO@value:	
  3637                           ; 0 bytes @ 0xB
  3638                           
  3639  002B                     Load_Main@j:	
  3640                           ; 1 bytes @ 0xB
  3641                           
  3642                           
  3643                           ; 1 bytes @ 0xB
  3644  002B                     	ds	1
  3645  002C                     ??_setDelayOff_GO:	
  3646  002C                     setBuz@count:	
  3647                           ; 0 bytes @ 0xC
  3648                           
  3649  002C                     Load_Main@adjgo:	
  3650                           ; 1 bytes @ 0xC
  3651                           
  3652                           
  3653                           ; 1 bytes @ 0xC
  3654  002C                     	ds	1
  3655  002D                     ??_setTemp_Main:	
  3656  002D                     ??_setLog_Code:	
  3657                           ; 0 bytes @ 0xD
  3658                           
  3659  002D                     ??_my_MainTimer:	
  3660                           ; 0 bytes @ 0xD
  3661                           
  3662  002D                     ??_setDimmerLights_SwOn:	
  3663                           ; 0 bytes @ 0xD
  3664                           
  3665  002D                     _Load_Main$3395:	
  3666                           ; 0 bytes @ 0xD
  3667                           
  3668  002D                     ___awtoft@sign:	
  3669                           ; 1 bytes @ 0xD
  3670                           
  3671                           
  3672                           ; 1 bytes @ 0xD
  3673  002D                     	ds	1
  3674  002E                     ??_Temp_Main:	
  3675  002E                     ?___ftdiv:	
  3676                           ; 0 bytes @ 0xE
  3677                           
  3678  002E                     ?___ftmul:	
  3679                           ; 3 bytes @ 0xE
  3680                           
  3681  002E                     setDelayOff_GO@sw:	
  3682                           ; 3 bytes @ 0xE
  3683                           
  3684  002E                     setDimmerLights_SwOn@idle:	
  3685                           ; 1 bytes @ 0xE
  3686                           
  3687  002E                     Load_Main@error:	
  3688                           ; 1 bytes @ 0xE
  3689                           
  3690  002E                     ___ftdiv@f2:	
  3691                           ; 1 bytes @ 0xE
  3692                           
  3693  002E                     ___ftmul@f1:	
  3694                           ; 3 bytes @ 0xE
  3695                           
  3696                           
  3697                           ; 3 bytes @ 0xE
  3698  002E                     	ds	1
  3699  002F                     ??_setDimmerLights_SwOff:	
  3700  002F                     setDimmerLights_SwOn@sw:	
  3701                           ; 0 bytes @ 0xF
  3702                           
  3703  002F                     setDimmerLights_SwOff@command:	
  3704                           ; 1 bytes @ 0xF
  3705                           
  3706  002F                     Load_Main@i:	
  3707                           ; 1 bytes @ 0xF
  3708                           
  3709                           
  3710                           ; 1 bytes @ 0xF
  3711  002F                     	ds	1
  3712  0030                     setDimmerLights_SwOff@sw:	
  3713                           
  3714                           ; 1 bytes @ 0x10
  3715  0030                     	ds	1
  3716  0031                     ??_setDimmerLights_ErrorClose:	
  3717  0031                     ??_setRFSW_Control:	
  3718                           ; 0 bytes @ 0x11
  3719                           
  3720  0031                     ??_setSw_Main:	
  3721                           ; 0 bytes @ 0x11
  3722                           
  3723  0031                     ___ftdiv@f1:	
  3724                           ; 0 bytes @ 0x11
  3725                           
  3726  0031                     ___ftmul@f2:	
  3727                           ; 3 bytes @ 0x11
  3728                           
  3729                           
  3730                           ; 3 bytes @ 0x11
  3731  0031                     	ds	1
  3732  0032                     setDimmerLights_ErrorClose@count:	
  3733  0032                     setRFSW_Control@status:	
  3734                           ; 1 bytes @ 0x12
  3735                           
  3736                           
  3737                           ; 1 bytes @ 0x12
  3738  0032                     	ds	1
  3739  0033                     setDimmerLights_ErrorClose@lights:	
  3740  0033                     setRFSW_Control@sw:	
  3741                           ; 1 bytes @ 0x13
  3742                           
  3743  0033                     setSw_Main@sw:	
  3744                           ; 1 bytes @ 0x13
  3745                           
  3746                           
  3747                           ; 1 bytes @ 0x13
  3748  0033                     	ds	1
  3749  0034                     ??___ftdiv:	
  3750  0034                     ??___ftmul:	
  3751                           ; 0 bytes @ 0x14
  3752                           
  3753  0034                     setDimmerLights_ErrorClose@i:	
  3754                           ; 0 bytes @ 0x14
  3755                           
  3756                           
  3757                           ; 2 bytes @ 0x14
  3758  0034                     	ds	2
  3759  0036                     ??_DlyOff_Main:	
  3760  0036                     ??_setMain_Exception:	
  3761                           ; 0 bytes @ 0x16
  3762                           
  3763                           
  3764                           ; 0 bytes @ 0x16
  3765  0036                     	ds	2
  3766  0038                     DlyOff_Main@sw:	
  3767  0038                     setMain_Exception@buz:	
  3768                           ; 1 bytes @ 0x18
  3769                           
  3770  0038                     ___ftdiv@cntr:	
  3771                           ; 1 bytes @ 0x18
  3772                           
  3773  0038                     ___ftmul@exp:	
  3774                           ; 1 bytes @ 0x18
  3775                           
  3776                           
  3777                           ; 1 bytes @ 0x18
  3778  0038                     	ds	1
  3779  0039                     ??_DelayOff_Main:	
  3780  0039                     _setMain_Exception$6300:	
  3781                           ; 0 bytes @ 0x19
  3782                           
  3783  0039                     ___ftdiv@f3:	
  3784                           ; 2 bytes @ 0x19
  3785                           
  3786  0039                     ___ftmul@f3_as_product:	
  3787                           ; 3 bytes @ 0x19
  3788                           
  3789                           
  3790                           ; 3 bytes @ 0x19
  3791  0039                     	ds	2
  3792  003B                     setMain_Exception@status:	
  3793                           
  3794                           ; 1 bytes @ 0x1B
  3795  003B                     	ds	1
  3796  003C                     setMain_Exception@command:	
  3797  003C                     ___ftdiv@exp:	
  3798                           ; 1 bytes @ 0x1C
  3799                           
  3800  003C                     ___ftmul@cntr:	
  3801                           ; 1 bytes @ 0x1C
  3802                           
  3803                           
  3804                           ; 1 bytes @ 0x1C
  3805  003C                     	ds	1
  3806  003D                     ??_Switch_Main:	
  3807  003D                     ___ftdiv@sign:	
  3808                           ; 0 bytes @ 0x1D
  3809                           
  3810  003D                     ___ftmul@sign:	
  3811                           ; 1 bytes @ 0x1D
  3812                           
  3813                           
  3814                           ; 1 bytes @ 0x1D
  3815  003D                     	ds	1
  3816  003E                     ?___ftneg:	
  3817  003E                     Switch_Main@error:	
  3818                           ; 3 bytes @ 0x1E
  3819                           
  3820  003E                     ___ftneg@f1:	
  3821                           ; 1 bytes @ 0x1E
  3822                           
  3823                           
  3824                           ; 3 bytes @ 0x1E
  3825  003E                     	ds	3
  3826  0041                     ??___ftneg:	
  3827  0041                     ?___ftadd:	
  3828                           ; 0 bytes @ 0x21
  3829                           
  3830  0041                     ___ftadd@f1:	
  3831                           ; 3 bytes @ 0x21
  3832                           
  3833                           
  3834                           ; 3 bytes @ 0x21
  3835  0041                     	ds	3
  3836  0044                     ___ftadd@f2:	
  3837                           
  3838                           ; 3 bytes @ 0x24
  3839  0044                     	ds	3
  3840  0047                     ??___ftadd:	
  3841                           
  3842                           ; 0 bytes @ 0x27
  3843  0047                     	ds	4
  3844  004B                     ___ftadd@sign:	
  3845                           
  3846                           ; 1 bytes @ 0x2B
  3847  004B                     	ds	1
  3848  004C                     ___ftadd@exp2:	
  3849                           
  3850                           ; 1 bytes @ 0x2C
  3851  004C                     	ds	1
  3852  004D                     ___ftadd@exp1:	
  3853                           
  3854                           ; 1 bytes @ 0x2D
  3855  004D                     	ds	1
  3856  004E                     ?___fttol:	
  3857  004E                     ___fttol@f1:	
  3858                           ; 4 bytes @ 0x2E
  3859                           
  3860                           
  3861                           ; 3 bytes @ 0x2E
  3862  004E                     	ds	4
  3863  0052                     ??___fttol:	
  3864                           
  3865                           ; 0 bytes @ 0x32
  3866  0052                     	ds	4
  3867  0056                     ___fttol@sign1:	
  3868                           
  3869                           ; 1 bytes @ 0x36
  3870  0056                     	ds	1
  3871  0057                     ___fttol@lval:	
  3872                           
  3873                           ; 4 bytes @ 0x37
  3874  0057                     	ds	4
  3875  005B                     ___fttol@exp1:	
  3876                           
  3877                           ; 1 bytes @ 0x3B
  3878  005B                     	ds	1
  3879  005C                     ??_setPercentValue:	
  3880  005C                     ??_getPercentValue:	
  3881                           ; 0 bytes @ 0x3C
  3882                           
  3883                           
  3884                           ; 0 bytes @ 0x3C
  3885  005C                     	ds	2
  3886  005E                     getPercentValue@value:	
  3887  005E                     setPercentValue@value:	
  3888                           ; 1 bytes @ 0x3E
  3889                           
  3890                           
  3891                           ; 1 bytes @ 0x3E
  3892  005E                     	ds	1
  3893  005F                     getPercentValue@i:	
  3894  005F                     setPercentValue@i:	
  3895                           ; 3 bytes @ 0x3F
  3896                           
  3897                           
  3898                           ; 3 bytes @ 0x3F
  3899  005F                     	ds	3
  3900  0062                     ?_setDimmerLights:	
  3901  0062                     ?_setDimmerLights_Adj:	
  3902                           ; 0 bytes @ 0x42
  3903                           
  3904  0062                     ??_setDimmerLights_AdjRF:	
  3905                           ; 0 bytes @ 0x42
  3906                           
  3907  0062                     ??_Flash_Memory_Initialization:	
  3908                           ; 0 bytes @ 0x42
  3909                           
  3910  0062                     setDimmerLights@status:	
  3911                           ; 0 bytes @ 0x42
  3912                           
  3913  0062                     setDimmerLights_Adj@status:	
  3914                           ; 1 bytes @ 0x42
  3915                           
  3916                           
  3917                           ; 1 bytes @ 0x42
  3918  0062                     	ds	1
  3919  0063                     ??_setDimmerLights:	
  3920  0063                     ??_setDimmerLights_Adj:	
  3921                           ; 0 bytes @ 0x43
  3922                           
  3923  0063                     setDimmerLights_AdjRF@lights:	
  3924                           ; 0 bytes @ 0x43
  3925                           
  3926  0063                     Flash_Memory_Initialization@i:	
  3927                           ; 1 bytes @ 0x43
  3928                           
  3929                           
  3930                           ; 1 bytes @ 0x43
  3931  0063                     	ds	1
  3932  0064                     ??_setRF_DimmerValue:	
  3933                           
  3934                           ; 0 bytes @ 0x44
  3935  0064                     	ds	1
  3936  0065                     setDimmerLights@lights:	
  3937  0065                     setDimmerLights_Adj@lights:	
  3938                           ; 1 bytes @ 0x45
  3939                           
  3940                           
  3941                           ; 1 bytes @ 0x45
  3942  0065                     	ds	1
  3943  0066                     ??_setDimmerLights_Main:	
  3944  0066                     setDimmerLights_Main@lights:	
  3945                           ; 0 bytes @ 0x46
  3946                           
  3947  0066                     setRF_DimmerValue@lights:	
  3948                           ; 1 bytes @ 0x46
  3949                           
  3950                           
  3951                           ; 1 bytes @ 0x46
  3952  0066                     	ds	1
  3953  0067                     ??_setRFSW_AdjControl:	
  3954  0067                     ??_DimmerLights_Main:	
  3955                           ; 0 bytes @ 0x47
  3956                           
  3957                           
  3958                           ; 0 bytes @ 0x47
  3959  0067                     	ds	2
  3960  0069                     setRFSW_AdjControl@status:	
  3961  0069                     _DimmerLights_Main$2234:	
  3962                           ; 1 bytes @ 0x49
  3963                           
  3964                           
  3965                           ; 2 bytes @ 0x49
  3966  0069                     	ds	1
  3967  006A                     setRFSW_AdjControl@sw:	
  3968                           
  3969                           ; 1 bytes @ 0x4A
  3970  006A                     	ds	1
  3971  006B                     ??_getRxData:	
  3972  006B                     ??_setControl_Lights_Table:	
  3973                           ; 0 bytes @ 0x4B
  3974                           
  3975                           
  3976                           ; 0 bytes @ 0x4B
  3977  006B                     	ds	1
  3978  006C                     getRxData@error:	
  3979                           
  3980                           ; 1 bytes @ 0x4C
  3981  006C                     	ds	1
  3982  006D                     ??_setRF_Main:	
  3983                           
  3984                           ; 0 bytes @ 0x4D
  3985  006D                     	ds	1
  3986  006E                     ??_RF_Main:	
  3987  006E                     ??_main:	
  3988                           ; 0 bytes @ 0x4E
  3989                           
  3990                           
  3991                           	psect	maintext
  3992  1640                     __pmaintext:	
  3993                           ; 0 bytes @ 0x4E
  3994 ;;
  3995 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  3996 ;;
  3997 ;; *************** function _main *****************
  3998 ;; Defined at:
  3999 ;;		line 7 in file "../src/main_B1.c"
  4000 ;; Parameters:    Size  Location     Type
  4001 ;;  argc            2    3[BANK1 ] int 
  4002 ;;  argv            2    5[BANK1 ] PTR PTR unsigned char 
  4003 ;; Auto vars:     Size  Location     Type
  4004 ;;		None
  4005 ;; Return value:  Size  Location     Type
  4006 ;;                  2    3[BANK1 ] int 
  4007 ;; Registers used:
  4008 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4009 ;; Tracked objects:
  4010 ;;		On entry : 17F/0
  4011 ;;		On exit  : 0/0
  4012 ;;		Unchanged: 0/0
  4013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4014 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4017 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4018 ;;Total ram usage:        4 bytes
  4019 ;; Hardware stack levels required when called:   15
  4020 ;; This function calls:
  4021 ;;		_Buzzer_Initialization
  4022 ;;		_Buzzer_Main
  4023 ;;		_CC2500_PowerOnInitial
  4024 ;;		_DelayOff_Initialization
  4025 ;;		_DelayOff_Main
  4026 ;;		_DimmerLights_Initialization
  4027 ;;		_DimmerLights_Main
  4028 ;;		_Flash_Memory_Initialization
  4029 ;;		_Flash_Memory_Main
  4030 ;;		_LED_Initialization
  4031 ;;		_LED_Main
  4032 ;;		_Load_Initialization
  4033 ;;		_Load_Main
  4034 ;;		_Mcu_Initialization
  4035 ;;		_RF_Initialization
  4036 ;;		_RF_Main
  4037 ;;		_Switch_Initialization
  4038 ;;		_Switch_Main
  4039 ;;		_Temp_Initialization
  4040 ;;		_Temp_Main
  4041 ;;		_WDT_Main
  4042 ;;		_getLoad_AD
  4043 ;;		_getTemp_AD
  4044 ;;		_myMain_Initialization
  4045 ;;		_my_MainTimer
  4046 ;; This function is called by:
  4047 ;;		Startup code after reset
  4048 ;; This function uses a non-reentrant model
  4049 ;;
  4050                           
  4051                           
  4052                           ;psect for function _main
  4053  1640                     _main:	
  4054                           
  4055                           ;main_B1.c: 8: myMain_Initialization();
  4056                           
  4057                           ;incstack = 0
  4058                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4059  1640  319B  23F9  3196   	fcall	_myMain_Initialization
  4060                           
  4061                           ;main_B1.c: 9: Mcu_Initialization();
  4062  1643  319C  2490  3196   	fcall	_Mcu_Initialization
  4063                           
  4064                           ;main_B1.c: 10: Flash_Memory_Initialization();
  4065  1646  3185  2579  3196   	fcall	_Flash_Memory_Initialization
  4066                           
  4067                           ;main_B1.c: 11: LED_Initialization();
  4068  1649  319B  2390  3196   	fcall	_LED_Initialization
  4069                           
  4070                           ;main_B1.c: 12: Buzzer_Initialization();
  4071  164C  319A  22DB  3196   	fcall	_Buzzer_Initialization
  4072                           
  4073                           ;main_B1.c: 14: ;;
  4074                           ;main_B1.c: 15: Temp_Initialization();
  4075  164F  319A  22E4  3196   	fcall	_Temp_Initialization
  4076                           
  4077                           ;main_B1.c: 16: Load_Initialization();
  4078  1652  319A  22FF  3196   	fcall	_Load_Initialization
  4079                           
  4080                           ;main_B1.c: 17: ;;
  4081                           ;main_B1.c: 18: DelayOff_Initialization();
  4082  1655  319B  2325  3196   	fcall	_DelayOff_Initialization
  4083                           
  4084                           ;main_B1.c: 20: DimmerLights_Initialization();
  4085  1658  319D  25B8  3196   	fcall	_DimmerLights_Initialization
  4086                           
  4087                           ;main_B1.c: 21: ;;
  4088                           ;main_B1.c: 22: ;;
  4089                           ;main_B1.c: 23: ;;
  4090                           ;main_B1.c: 24: Switch_Initialization();
  4091  165B  319B  23C0  3196   	fcall	_Switch_Initialization
  4092                           
  4093                           ;main_B1.c: 25: RF_Initialization();
  4094  165E  319A  22DE  3196   	fcall	_RF_Initialization
  4095                           
  4096                           ;main_B1.c: 26: CC2500_PowerOnInitial();
  4097  1661  319D  2579  3196   	fcall	_CC2500_PowerOnInitial
  4098  1664                     l8432:	
  4099                           ;main_B1.c: 27: ;;
  4100                           ;main_B1.c: 28: ;;
  4101                           ;main_B1.c: 30: while (1) {
  4102                           
  4103                           
  4104                           ;main_B1.c: 32: if (myMain.PowerON == 1) {
  4105  1664  0021               	movlb	1	; select bank1
  4106  1665  1C20               	btfss	_myMain^(0+128),0
  4107  1666  2E6F               	goto	l8436
  4108                           
  4109                           ;main_B1.c: 38: getLoad_AD(0x05);
  4110  1667  3005               	movlw	5
  4111  1668  318B  23F0  3196   	fcall	_getLoad_AD
  4112                           
  4113                           ;main_B1.c: 42: getTemp_AD(0x09);
  4114  166B  3009               	movlw	9
  4115  166C  3192  22B8  3196   	fcall	_getTemp_AD
  4116  166F                     l8436:	
  4117                           
  4118                           ;main_B1.c: 57: }
  4119                           ;main_B1.c: 93: if (Timer1.Timeout == 1) {
  4120  166F  0021               	movlb	1	; select bank1
  4121  1670  1C46               	btfss	_Timer1^(0+128),0
  4122  1671  2E64               	goto	l8432
  4123                           
  4124                           ;main_B1.c: 94: Timer1.Timeout = 0;
  4125  1672  1046               	bcf	_Timer1^(0+128),0
  4126                           
  4127                           ;main_B1.c: 96: my_MainTimer();
  4128  1673  3193  23E8  3196   	fcall	_my_MainTimer
  4129                           
  4130                           ;main_B1.c: 97: WDT_Main();
  4131  1676  319C  24A2  3196   	fcall	_WDT_Main
  4132                           
  4133                           ;main_B1.c: 98: ;;
  4134                           ;main_B1.c: 99: ;;
  4135                           ;main_B1.c: 100: if (myMain.PowerON == 1) {
  4136  1679  0021               	movlb	1	; select bank1
  4137  167A  1C20               	btfss	_myMain^(0+128),0
  4138  167B  2E64               	goto	l8432
  4139                           
  4140                           ;main_B1.c: 102: Flash_Memory_Main();
  4141  167C  3192  2215  3196   	fcall	_Flash_Memory_Main
  4142                           
  4143                           ;main_B1.c: 104: LED_Main();
  4144  167F  319B  239C  3196   	fcall	_LED_Main
  4145                           
  4146                           ;main_B1.c: 105: Buzzer_Main();
  4147  1682  3194  24B5  3196   	fcall	_Buzzer_Main
  4148                           
  4149                           ;main_B1.c: 107: ;;
  4150                           ;main_B1.c: 108: Temp_Main();
  4151  1685  319A  22E7  3196   	fcall	_Temp_Main
  4152                           
  4153                           ;main_B1.c: 109: Load_Main();
  4154  1688  3180  204B  3196   	fcall	_Load_Main
  4155                           
  4156                           ;main_B1.c: 110: ;;
  4157                           ;main_B1.c: 112: ;;
  4158                           ;main_B1.c: 113: DimmerLights_Main();
  4159  168B  3191  21AC  3196   	fcall	_DimmerLights_Main
  4160                           
  4161                           ;main_B1.c: 114: Switch_Main();
  4162  168E  319F  278F  3196   	fcall	_Switch_Main
  4163                           
  4164                           ;main_B1.c: 115: ;;
  4165                           ;main_B1.c: 116: ;;
  4166                           ;main_B1.c: 118: RF_Main();
  4167  1691  319A  22E1  3196   	fcall	_RF_Main
  4168                           
  4169                           ;main_B1.c: 119: DelayOff_Main();
  4170  1694  319B  232D  3196   	fcall	_DelayOff_Main
  4171                           
  4172                           ;main_B1.c: 120: ;;
  4173                           ;main_B1.c: 121: ;;
  4174  1697  2E64               	goto	l8432
  4175  1698                     __end_of_main:	
  4176                           ;main_B1.c: 128: }
  4177                           ;main_B1.c: 129: }
  4178                           ;main_B1.c: 163: }
  4179                           ;main_B1.c: 164: return (0);
  4180                           ;	Return value of _main is never used
  4181                           
  4182                           
  4183                           	psect	text1
  4184  13E8                     __ptext1:	
  4185 ;; *************** function _my_MainTimer *****************
  4186 ;; Defined at:
  4187 ;;		line 183 in file "../src/main_B1.c"
  4188 ;; Parameters:    Size  Location     Type
  4189 ;;		None
  4190 ;; Auto vars:     Size  Location     Type
  4191 ;;		None
  4192 ;; Return value:  Size  Location     Type
  4193 ;;		None               void
  4194 ;; Registers used:
  4195 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4196 ;; Tracked objects:
  4197 ;;		On entry : 0/0
  4198 ;;		On exit  : 0/0
  4199 ;;		Unchanged: 0/0
  4200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4203 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4204 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4205 ;;Total ram usage:        1 bytes
  4206 ;; Hardware stack levels used:    1
  4207 ;; Hardware stack levels required when called:    7
  4208 ;; This function calls:
  4209 ;;		_setBuz
  4210 ;; This function is called by:
  4211 ;;		_main
  4212 ;; This function uses a non-reentrant model
  4213 ;;
  4214                           
  4215                           
  4216                           ;psect for function _my_MainTimer
  4217  13E8                     _my_MainTimer:	
  4218                           
  4219                           ;main_B1.c: 186: if (myMain.PowerON == 0) {
  4220                           
  4221                           ;incstack = 0
  4222                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4223  13E8  0021               	movlb	1	; select bank1
  4224  13E9  1820               	btfsc	_myMain^(0+128),0
  4225  13EA  2C02               	goto	l8298
  4226                           
  4227                           ;main_B1.c: 187: myMain.PowerCount++;
  4228  13EB  3001               	movlw	1
  4229  13EC  0020               	movlb	0	; select bank0
  4230  13ED  00AD               	movwf	??_my_MainTimer
  4231  13EE  082D               	movf	??_my_MainTimer,w
  4232  13EF  0021               	movlb	1	; select bank1
  4233  13F0  07A1               	addwf	(_myMain^(0+128)+1),f
  4234                           
  4235                           ;main_B1.c: 188: if (myMain.PowerCount == 150) {
  4236  13F1  0821               	movf	(_myMain^(0+128)+1),w
  4237  13F2  3A96               	xorlw	150
  4238  13F3  1D03               	skipz
  4239  13F4  0008               	return
  4240                           
  4241                           ;main_B1.c: 189: myMain.PowerCount = 0;
  4242  13F5  01A1               	clrf	(_myMain^(0+128)+1)
  4243                           
  4244                           ;main_B1.c: 190: myMain.PowerON = 1;
  4245  13F6  1420               	bsf	_myMain^(0+128),0
  4246                           
  4247                           ;main_B1.c: 195: setBuz(3, 50);
  4248  13F7  3032               	movlw	50
  4249  13F8  0020               	movlb	0	; select bank0
  4250  13F9  00A9               	movwf	setBuz@time
  4251  13FA  3000               	movlw	0
  4252  13FB  00AA               	movwf	setBuz@time+1
  4253  13FC  3003               	movlw	3
  4254  13FD  3196  2698         	fcall	_setBuz
  4255                           
  4256                           ;main_B1.c: 196: myMain.SelfTest = 1;
  4257  13FF  0021               	movlb	1	; select bank1
  4258  1400  1620               	bsf	_myMain^(0+128),4
  4259                           
  4260                           ;main_B1.c: 205: }
  4261                           ;main_B1.c: 206: } else {
  4262  1401  0008               	return
  4263  1402                     l8298:	
  4264                           
  4265                           ;main_B1.c: 207: myMain.PowerCount++;
  4266  1402  3001               	movlw	1
  4267  1403  0020               	movlb	0	; select bank0
  4268  1404  00AD               	movwf	??_my_MainTimer
  4269  1405  082D               	movf	??_my_MainTimer,w
  4270  1406  0021               	movlb	1	; select bank1
  4271  1407  07A1               	addwf	(_myMain^(0+128)+1),f
  4272                           
  4273                           ;main_B1.c: 208: if (myMain.PowerCount == 100) {
  4274  1408  0821               	movf	(_myMain^(0+128)+1),w
  4275  1409  3A64               	xorlw	100
  4276  140A  1D03               	skipz
  4277  140B  2C10               	goto	l8306
  4278                           
  4279                           ;main_B1.c: 209: myMain.PowerCount = 0;
  4280  140C  01A1               	clrf	(_myMain^(0+128)+1)
  4281                           
  4282                           ;main_B1.c: 210: RB5 = RB5 == 1 ? 0 : 1;
  4283  140D  3020               	movlw	32
  4284  140E  0020               	movlb	0	; select bank0
  4285  140F  068D               	xorwf	13,f
  4286  1410                     l8306:	
  4287                           
  4288                           ;main_B1.c: 221: }
  4289                           ;main_B1.c: 223: myMain.Count1++;
  4290  1410  3001               	movlw	1
  4291  1411  0021               	movlb	1	; select bank1
  4292  1412  07A4               	addwf	(_myMain^(0+128)+4),f
  4293  1413  3000               	movlw	0
  4294  1414  3DA5               	addwfc	((_myMain+1)^(0+128)+4),f
  4295                           
  4296                           ;main_B1.c: 224: if (myMain.Count1 == 100)
  4297  1415  3004               	movlw	4
  4298  1416  3EA0               	addlw	_myMain& (0+255)
  4299  1417  0086               	movwf	6
  4300  1418  0187               	clrf	7
  4301  1419  3F40               	moviw [0]fsr1
  4302  141A  3A64               	xorlw	100
  4303  141B  1D03               	skipz
  4304  141C  2C1F               	goto	u8435
  4305  141D  3F41               	moviw [1]fsr1
  4306  141E  3A00               	xorlw	0
  4307  141F                     u8435:	
  4308  141F  1D03               	skipz
  4309  1420  0008               	return
  4310                           
  4311                           ;main_B1.c: 225: {
  4312                           ;main_B1.c: 226: myMain.Count1 = 0;
  4313  1421  01A4               	clrf	(_myMain^(0+128)+4)
  4314  1422  01A5               	clrf	((_myMain+1)^(0+128)+4)
  4315                           
  4316                           ;main_B1.c: 238: if (myMain.Flag) {
  4317  1423  1CA0               	btfss	_myMain^(0+128),1
  4318  1424  2C27               	goto	l2682
  4319                           
  4320                           ;main_B1.c: 239: myMain.Flag = 0;
  4321  1425  10A0               	bcf	_myMain^(0+128),1
  4322                           
  4323                           ;main_B1.c: 248: } else {
  4324  1426  0008               	return
  4325  1427                     l2682:	
  4326                           
  4327                           ;main_B1.c: 249: myMain.Flag = 1;
  4328  1427  14A0               	bsf	_myMain^(0+128),1
  4329  1428  0008               	return
  4330  1429                     __end_of_my_MainTimer:	
  4331                           
  4332                           	psect	text2
  4333  1BF9                     __ptext2:	
  4334 ;; *************** function _myMain_Initialization *****************
  4335 ;; Defined at:
  4336 ;;		line 170 in file "../src/main_B1.c"
  4337 ;; Parameters:    Size  Location     Type
  4338 ;;		None
  4339 ;; Auto vars:     Size  Location     Type
  4340 ;;		None
  4341 ;; Return value:  Size  Location     Type
  4342 ;;		None               void
  4343 ;; Registers used:
  4344 ;;		wreg, fsr1l, fsr1h
  4345 ;; Tracked objects:
  4346 ;;		On entry : 0/0
  4347 ;;		On exit  : 0/0
  4348 ;;		Unchanged: 0/0
  4349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4351 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4352 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4353 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4354 ;;Total ram usage:        1 bytes
  4355 ;; Hardware stack levels used:    1
  4356 ;; Hardware stack levels required when called:    5
  4357 ;; This function calls:
  4358 ;;		Nothing
  4359 ;; This function is called by:
  4360 ;;		_main
  4361 ;; This function uses a non-reentrant model
  4362 ;;
  4363                           
  4364                           
  4365                           ;psect for function _myMain_Initialization
  4366  1BF9                     _myMain_Initialization:	
  4367                           
  4368                           ;main_B1.c: 172: product = &_product;
  4369                           
  4370                           ;incstack = 0
  4371                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4372  1BF9  3045               	movlw	__product& (0+255)
  4373  1BFA  0020               	movlb	0	; select bank0
  4374  1BFB  00A0               	movwf	??_myMain_Initialization
  4375  1BFC  0820               	movf	??_myMain_Initialization,w
  4376  1BFD  00EE               	movwf	_product
  4377                           
  4378                           ;main_B1.c: 173: product->Data[20] = 210;
  4379  1BFE  30D2               	movlw	210
  4380  1BFF  00A0               	movwf	??_myMain_Initialization
  4381  1C00  086E               	movf	_product,w
  4382  1C01  3E14               	addlw	20
  4383  1C02  0086               	movwf	6
  4384  1C03  3002               	movlw	2	; select bank4/5
  4385  1C04  0087               	movwf	7
  4386  1C05  0820               	movf	??_myMain_Initialization,w
  4387  1C06  0081               	movwf	1
  4388  1C07  0008               	return
  4389  1C08                     __end_of_myMain_Initialization:	
  4390                           
  4391                           	psect	text3
  4392  12B8                     __ptext3:	
  4393 ;; *************** function _getTemp_AD *****************
  4394 ;; Defined at:
  4395 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4396 ;; Parameters:    Size  Location     Type
  4397 ;;  channel         1    wreg     unsigned char 
  4398 ;; Auto vars:     Size  Location     Type
  4399 ;;  channel         1    5[BANK0 ] unsigned char 
  4400 ;; Return value:  Size  Location     Type
  4401 ;;		None               void
  4402 ;; Registers used:
  4403 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4404 ;; Tracked objects:
  4405 ;;		On entry : 0/0
  4406 ;;		On exit  : 0/0
  4407 ;;		Unchanged: 0/0
  4408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4410 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4411 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4412 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4413 ;;Total ram usage:        2 bytes
  4414 ;; Hardware stack levels used:    1
  4415 ;; Hardware stack levels required when called:    7
  4416 ;; This function calls:
  4417 ;;		_getAD
  4418 ;; This function is called by:
  4419 ;;		_main
  4420 ;; This function uses a non-reentrant model
  4421 ;;
  4422                           
  4423                           
  4424                           ;psect for function _getTemp_AD
  4425  12B8                     _getTemp_AD:	
  4426                           
  4427                           ;incstack = 0
  4428                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4429                           ;getTemp_AD@channel stored from wreg
  4430  12B8  0020               	movlb	0	; select bank0
  4431  12B9  00A5               	movwf	getTemp_AD@channel
  4432                           
  4433                           ;OverTemperature_B1.c: 32: if (Temp.ADtoGO == 1) {
  4434  12BA  0021               	movlb	1	; select bank1
  4435  12BB  1D56               	btfss	_Temp^(0+128),2
  4436  12BC  0008               	return
  4437                           
  4438                           ;OverTemperature_B1.c: 33: Temp.GO = 1;
  4439  12BD  1656               	bsf	_Temp^(0+128),4
  4440                           
  4441                           ;OverTemperature_B1.c: 34: Temp.ADRES = getAD(channel, 0xf0);
  4442  12BE  30F0               	movlw	240
  4443  12BF  0020               	movlb	0	; select bank0
  4444  12C0  00A4               	movwf	??_getTemp_AD
  4445  12C1  0824               	movf	??_getTemp_AD,w
  4446  12C2  00A0               	movwf	getAD@adcon1
  4447  12C3  0825               	movf	getTemp_AD@channel,w
  4448  12C4  319E  26C7  3192   	fcall	_getAD
  4449  12C7  0020               	movlb	0	; select bank0
  4450  12C8  0821               	movf	?_getAD+1,w
  4451  12C9  0021               	movlb	1	; select bank1
  4452  12CA  01E3               	clrf	((_Temp+1)^(0+128)+12)
  4453  12CB  07E3               	addwf	((_Temp+1)^(0+128)+12),f
  4454  12CC  0020               	movlb	0	; select bank0
  4455  12CD  0820               	movf	?_getAD,w
  4456  12CE  0021               	movlb	1	; select bank1
  4457  12CF  01E2               	clrf	(_Temp^(0+128)+12)
  4458  12D0  07E2               	addwf	(_Temp^(0+128)+12),f
  4459                           
  4460                           ;OverTemperature_B1.c: 35: if (Temp.ADH[0] < Temp.ADRES) {
  4461  12D1  0863               	movf	((_Temp+1)^(0+128)+12),w
  4462  12D2  025F               	subwf	((_Temp+1)^(0+128)+8),w
  4463  12D3  1D03               	skipz
  4464  12D4  2AD7               	goto	u8355
  4465  12D5  0862               	movf	(_Temp^(0+128)+12),w
  4466  12D6  025E               	subwf	(_Temp^(0+128)+8),w
  4467  12D7                     u8355:	
  4468  12D7  1803               	skipnc
  4469  12D8  2AE0               	goto	l8246
  4470                           
  4471                           ;OverTemperature_B1.c: 36: Temp.ADH[0] = Temp.ADRES;
  4472  12D9  0863               	movf	((_Temp+1)^(0+128)+12),w
  4473  12DA  01DF               	clrf	((_Temp+1)^(0+128)+8)
  4474  12DB  07DF               	addwf	((_Temp+1)^(0+128)+8),f
  4475  12DC  0862               	movf	(_Temp^(0+128)+12),w
  4476  12DD  01DE               	clrf	(_Temp^(0+128)+8)
  4477  12DE  07DE               	addwf	(_Temp^(0+128)+8),f
  4478                           
  4479                           ;OverTemperature_B1.c: 37: } else if (Temp.ADH[1] < Temp.ADRES) {
  4480  12DF  0008               	return
  4481  12E0                     l8246:	
  4482  12E0  0863               	movf	((_Temp+1)^(0+128)+12),w
  4483  12E1  0261               	subwf	((_Temp+1)^(0+128)+10),w
  4484  12E2  1D03               	skipz
  4485  12E3  2AE6               	goto	u8365
  4486  12E4  0862               	movf	(_Temp^(0+128)+12),w
  4487  12E5  0260               	subwf	(_Temp^(0+128)+10),w
  4488  12E6                     u8365:	
  4489  12E6  1803               	skipnc
  4490  12E7  0008               	return
  4491                           
  4492                           ;OverTemperature_B1.c: 38: Temp.ADH[1] = Temp.ADRES;
  4493  12E8  0863               	movf	((_Temp+1)^(0+128)+12),w
  4494  12E9  01E1               	clrf	((_Temp+1)^(0+128)+10)
  4495  12EA  07E1               	addwf	((_Temp+1)^(0+128)+10),f
  4496  12EB  0862               	movf	(_Temp^(0+128)+12),w
  4497  12EC  01E0               	clrf	(_Temp^(0+128)+10)
  4498  12ED  07E0               	addwf	(_Temp^(0+128)+10),f
  4499  12EE  0008               	return
  4500  12EF                     __end_of_getTemp_AD:	
  4501                           
  4502                           	psect	text4
  4503  0BF0                     __ptext4:	
  4504 ;; *************** function _getLoad_AD *****************
  4505 ;; Defined at:
  4506 ;;		line 15 in file "../src/OverLoad_B1.c"
  4507 ;; Parameters:    Size  Location     Type
  4508 ;;  channel         1    wreg     unsigned char 
  4509 ;; Auto vars:     Size  Location     Type
  4510 ;;  channel         1    6[BANK0 ] unsigned char 
  4511 ;;  i               1    9[BANK0 ] unsigned char 
  4512 ;;  j               1    8[BANK0 ] unsigned char 
  4513 ;;  k               1    7[BANK0 ] unsigned char 
  4514 ;; Return value:  Size  Location     Type
  4515 ;;		None               void
  4516 ;; Registers used:
  4517 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4518 ;; Tracked objects:
  4519 ;;		On entry : 0/0
  4520 ;;		On exit  : 0/0
  4521 ;;		Unchanged: 0/0
  4522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4524 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4525 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4526 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4527 ;;Total ram usage:        6 bytes
  4528 ;; Hardware stack levels used:    1
  4529 ;; Hardware stack levels required when called:    7
  4530 ;; This function calls:
  4531 ;;		_getAD
  4532 ;; This function is called by:
  4533 ;;		_main
  4534 ;; This function uses a non-reentrant model
  4535 ;;
  4536                           
  4537                           
  4538                           ;psect for function _getLoad_AD
  4539  0BF0                     _getLoad_AD:	
  4540                           
  4541                           ;incstack = 0
  4542                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4543                           ;getLoad_AD@channel stored from wreg
  4544  0BF0  0020               	movlb	0	; select bank0
  4545  0BF1  00A6               	movwf	getLoad_AD@channel
  4546                           
  4547                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4548  0BF2  01A9               	clrf	getLoad_AD@i
  4549  0BF3  01A8               	clrf	getLoad_AD@j
  4550  0BF4  01A7               	clrf	getLoad_AD@k
  4551                           
  4552                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4553  0BF5  0022               	movlb	2	; select bank2
  4554  0BF6  1E25               	btfss	_Load^(0+256),4
  4555  0BF7  0008               	return
  4556                           
  4557                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4558  0BF8  30F3               	movlw	243
  4559  0BF9  0020               	movlb	0	; select bank0
  4560  0BFA  00A4               	movwf	??_getLoad_AD
  4561  0BFB  0824               	movf	??_getLoad_AD,w
  4562  0BFC  00A0               	movwf	getAD@adcon1
  4563  0BFD  0826               	movf	getLoad_AD@channel,w
  4564  0BFE  319E  26C7  318B   	fcall	_getAD
  4565  0C01  0020               	movlb	0	; select bank0
  4566  0C02  0821               	movf	?_getAD+1,w
  4567  0C03  0022               	movlb	2	; select bank2
  4568  0C04  01C7               	clrf	((_Load+1)^(0+256)+33)
  4569  0C05  07C7               	addwf	((_Load+1)^(0+256)+33),f
  4570  0C06  0020               	movlb	0	; select bank0
  4571  0C07  0820               	movf	?_getAD,w
  4572  0C08  0022               	movlb	2	; select bank2
  4573  0C09  01C6               	clrf	(_Load^(0+256)+33)
  4574  0C0A  07C6               	addwf	(_Load^(0+256)+33),f
  4575                           
  4576                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4577  0C0B  0020               	movlb	0	; select bank0
  4578  0C0C  01A9               	clrf	getLoad_AD@i
  4579  0C0D  3004               	movlw	4
  4580  0C0E  0229               	subwf	getLoad_AD@i,w
  4581  0C0F  1803               	btfsc	3,0
  4582  0C10  2C3E               	goto	l8064
  4583  0C11                     l8052:	
  4584                           
  4585                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4586  0C11  3529               	lslf	getLoad_AD@i,w
  4587  0C12  3E30               	addlw	(_Load+11)& (0+255)
  4588  0C13  0086               	movwf	6
  4589  0C14  3001               	movlw	1	; select bank2/3
  4590  0C15  0087               	movwf	7
  4591  0C16  3F40               	moviw [0]fsr1
  4592  0C17  00A4               	movwf	??_getLoad_AD
  4593  0C18  3F41               	moviw [1]fsr1
  4594  0C19  00A5               	movwf	??_getLoad_AD+1
  4595  0C1A  0022               	movlb	2	; select bank2
  4596  0C1B  0847               	movf	((_Load+1)^(0+256)+33),w
  4597  0C1C  0020               	movlb	0	; select bank0
  4598  0C1D  0225               	subwf	??_getLoad_AD+1,w
  4599  0C1E  1D03               	skipz
  4600  0C1F  2C24               	goto	u7995
  4601  0C20  0022               	movlb	2	; select bank2
  4602  0C21  0846               	movf	(_Load^(0+256)+33),w
  4603  0C22  0020               	movlb	0	; select bank0
  4604  0C23  0224               	subwf	??_getLoad_AD,w
  4605  0C24                     u7995:	
  4606  0C24  1803               	skipnc
  4607  0C25  2C36               	goto	l8060
  4608  0C26  08A8               	movf	getLoad_AD@j,f
  4609  0C27  1D03               	skipz
  4610  0C28  2C36               	goto	l8060
  4611                           
  4612                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4613  0C29  3529               	lslf	getLoad_AD@i,w
  4614  0C2A  3E30               	addlw	(_Load+11)& (0+255)
  4615  0C2B  0086               	movwf	6
  4616  0C2C  3001               	movlw	1	; select bank2/3
  4617  0C2D  0087               	movwf	7
  4618  0C2E  0022               	movlb	2	; select bank2
  4619  0C2F  0846               	movf	(_Load^(0+256)+33),w
  4620  0C30  3FC0               	movwi [0]fsr1
  4621  0C31  0847               	movf	((_Load+1)^(0+256)+33),w
  4622  0C32  3FC1               	movwi [1]fsr1
  4623                           
  4624                           ;OverLoad_B1.c: 24: j = 1;
  4625  0C33  0020               	movlb	0	; select bank0
  4626  0C34  01A8               	clrf	getLoad_AD@j
  4627  0C35  0AA8               	incf	getLoad_AD@j,f
  4628  0C36                     l8060:	
  4629  0C36  3001               	movlw	1
  4630  0C37  00A4               	movwf	??_getLoad_AD
  4631  0C38  0824               	movf	??_getLoad_AD,w
  4632  0C39  07A9               	addwf	getLoad_AD@i,f
  4633  0C3A  3004               	movlw	4
  4634  0C3B  0229               	subwf	getLoad_AD@i,w
  4635  0C3C  1C03               	skipc
  4636  0C3D  2C11               	goto	l8052
  4637  0C3E                     l8064:	
  4638                           
  4639                           ;OverLoad_B1.c: 25: }
  4640                           ;OverLoad_B1.c: 26: }
  4641                           ;OverLoad_B1.c: 27: if (j == 0) {
  4642  0C3E  08A8               	movf	getLoad_AD@j,f
  4643  0C3F  1D03               	skipz
  4644  0C40  0008               	return
  4645                           
  4646                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4647  0C41  01A9               	clrf	getLoad_AD@i
  4648  0C42                     L1:	
  4649  0C42  3004               	movlw	4
  4650  0C43  0229               	subwf	getLoad_AD@i,w
  4651  0C44  1803               	btfsc	3,0
  4652  0C45  0008               	return
  4653                           
  4654                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4655  0C46  3529               	lslf	getLoad_AD@i,w
  4656  0C47  3E3A               	addlw	(_Load+21)& (0+255)
  4657  0C48  0086               	movwf	6
  4658  0C49  3001               	movlw	1	; select bank2/3
  4659  0C4A  0087               	movwf	7
  4660  0C4B  3F40               	moviw [0]fsr1
  4661  0C4C  00A4               	movwf	??_getLoad_AD
  4662  0C4D  3F41               	moviw [1]fsr1
  4663  0C4E  00A5               	movwf	??_getLoad_AD+1
  4664  0C4F  0825               	movf	??_getLoad_AD+1,w
  4665  0C50  0022               	movlb	2	; select bank2
  4666  0C51  0247               	subwf	((_Load+1)^(0+256)+33),w
  4667  0C52  1D03               	skipz
  4668  0C53  2C58               	goto	u8045
  4669  0C54  0020               	movlb	0	; select bank0
  4670  0C55  0824               	movf	??_getLoad_AD,w
  4671  0C56  0022               	movlb	2	; select bank2
  4672  0C57  0246               	subwf	(_Load^(0+256)+33),w
  4673  0C58                     u8045:	
  4674  0C58  1803               	skipnc
  4675  0C59  2C6B               	goto	l8080
  4676  0C5A  0020               	movlb	0	; select bank0
  4677  0C5B  08A7               	movf	getLoad_AD@k,f
  4678  0C5C  1D03               	skipz
  4679  0C5D  2C6B               	goto	l8080
  4680                           
  4681                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4682  0C5E  3529               	lslf	getLoad_AD@i,w
  4683  0C5F  3E3A               	addlw	(_Load+21)& (0+255)
  4684  0C60  0086               	movwf	6
  4685  0C61  3001               	movlw	1	; select bank2/3
  4686  0C62  0087               	movwf	7
  4687  0C63  0022               	movlb	2	; select bank2
  4688  0C64  0846               	movf	(_Load^(0+256)+33),w
  4689  0C65  3FC0               	movwi [0]fsr1
  4690  0C66  0847               	movf	((_Load+1)^(0+256)+33),w
  4691  0C67  3FC1               	movwi [1]fsr1
  4692                           
  4693                           ;OverLoad_B1.c: 31: k = 1;
  4694  0C68  0020               	movlb	0	; select bank0
  4695  0C69  01A7               	clrf	getLoad_AD@k
  4696  0C6A  0AA7               	incf	getLoad_AD@k,f
  4697  0C6B                     l8080:	
  4698  0C6B  3001               	movlw	1
  4699  0C6C  0020               	movlb	0	; select bank0
  4700  0C6D  00A4               	movwf	??_getLoad_AD
  4701  0C6E  0824               	movf	??_getLoad_AD,w
  4702  0C6F  07A9               	addwf	getLoad_AD@i,f
  4703  0C70  2C42               	goto	L1
  4704  0C71                     __end_of_getLoad_AD:	
  4705                           
  4706                           	psect	text5
  4707  1EC7                     __ptext5:	
  4708 ;; *************** function _getAD *****************
  4709 ;; Defined at:
  4710 ;;		line 454 in file "../src/MCU_B1.c"
  4711 ;; Parameters:    Size  Location     Type
  4712 ;;  adcon0          1    wreg     unsigned char 
  4713 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4714 ;; Auto vars:     Size  Location     Type
  4715 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4716 ;; Return value:  Size  Location     Type
  4717 ;;                  2    0[BANK0 ] int 
  4718 ;; Registers used:
  4719 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4720 ;; Tracked objects:
  4721 ;;		On entry : 0/0
  4722 ;;		On exit  : 0/0
  4723 ;;		Unchanged: 0/0
  4724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4725 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4726 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4728 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4729 ;;Total ram usage:        4 bytes
  4730 ;; Hardware stack levels used:    1
  4731 ;; Hardware stack levels required when called:    6
  4732 ;; This function calls:
  4733 ;;		_Timeout_Counter
  4734 ;;		_set_TimeoutCleared
  4735 ;; This function is called by:
  4736 ;;		_getLoad_AD
  4737 ;;		_getTemp_AD
  4738 ;; This function uses a non-reentrant model
  4739 ;;
  4740                           
  4741                           
  4742                           ;psect for function _getAD
  4743  1EC7                     _getAD:	
  4744                           
  4745                           ;incstack = 0
  4746                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4747                           ;getAD@adcon0 stored from wreg
  4748  1EC7  0020               	movlb	0	; select bank0
  4749  1EC8  00A3               	movwf	getAD@adcon0
  4750                           
  4751                           ;MCU_B1.c: 455: ADCON0 = adcon0;
  4752  1EC9  0823               	movf	getAD@adcon0,w
  4753  1ECA  0021               	movlb	1	; select bank1
  4754  1ECB  009D               	movwf	29	;volatile
  4755                           
  4756                           ;MCU_B1.c: 456: ADCON1 = adcon1;
  4757  1ECC  0020               	movlb	0	; select bank0
  4758  1ECD  0820               	movf	getAD@adcon1,w
  4759  1ECE  0021               	movlb	1	; select bank1
  4760  1ECF  009E               	movwf	30	;volatile
  4761                           
  4762                           ;MCU_B1.c: 457: GO_nDONE = 1;
  4763  1ED0  149D               	bsf	29,1	;volatile
  4764                           
  4765                           ;MCU_B1.c: 458: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4766  1ED1  2ED5               	goto	l7462
  4767  1ED2                     l7460:	
  4768                           
  4769                           ;MCU_B1.c: 459: Timeout_Counter();
  4770  1ED2  319D  2564  319E   	fcall	_Timeout_Counter
  4771  1ED5                     l7462:	
  4772  1ED5  0021               	movlb	1	; select bank1
  4773  1ED6  1C9D               	btfss	29,1	;volatile
  4774  1ED7  2EDA               	goto	l7466
  4775  1ED8  1D2B               	btfss	(_myMain^(0+128)+11),2
  4776  1ED9  2ED2               	goto	l7460
  4777  1EDA                     l7466:	
  4778                           
  4779                           ;MCU_B1.c: 460: };
  4780                           ;MCU_B1.c: 461: set_TimeoutCleared();
  4781  1EDA  319A  22FA         	fcall	_set_TimeoutCleared
  4782                           
  4783                           ;MCU_B1.c: 462: return ((ADRESH*256)+ADRESL);
  4784  1EDC  0021               	movlb	1	; select bank1
  4785  1EDD  081C               	movf	28,w	;volatile
  4786  1EDE  0020               	movlb	0	; select bank0
  4787  1EDF  01A1               	clrf	?_getAD+1
  4788  1EE0  07A1               	addwf	?_getAD+1,f
  4789  1EE1  0021               	movlb	1	; select bank1
  4790  1EE2  081B               	movf	27,w	;volatile
  4791  1EE3  0020               	movlb	0	; select bank0
  4792  1EE4  01A0               	clrf	?_getAD
  4793  1EE5  07A0               	addwf	?_getAD,f
  4794  1EE6  0008               	return
  4795  1EE7                     __end_of_getAD:	
  4796                           
  4797                           	psect	text6
  4798  1CA2                     __ptext6:	
  4799 ;; *************** function _WDT_Main *****************
  4800 ;; Defined at:
  4801 ;;		line 1056 in file "../src/MCU_B1.c"
  4802 ;; Parameters:    Size  Location     Type
  4803 ;;		None
  4804 ;; Auto vars:     Size  Location     Type
  4805 ;;		None
  4806 ;; Return value:  Size  Location     Type
  4807 ;;		None               void
  4808 ;; Registers used:
  4809 ;;		wreg, status,2, status,0, pclath, cstack
  4810 ;; Tracked objects:
  4811 ;;		On entry : 0/0
  4812 ;;		On exit  : 0/0
  4813 ;;		Unchanged: 0/0
  4814 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4816 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4817 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4818 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4819 ;;Total ram usage:        1 bytes
  4820 ;; Hardware stack levels used:    1
  4821 ;; Hardware stack levels required when called:    6
  4822 ;; This function calls:
  4823 ;;		_WDT_Clearing
  4824 ;; This function is called by:
  4825 ;;		_main
  4826 ;; This function uses a non-reentrant model
  4827 ;;
  4828                           
  4829                           
  4830                           ;psect for function _WDT_Main
  4831  1CA2                     _WDT_Main:	
  4832                           
  4833                           ;MCU_B1.c: 1057: if (WDT.Enable == 1) {
  4834                           
  4835                           ;incstack = 0
  4836                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4837  1CA2  0021               	movlb	1	; select bank1
  4838  1CA3  1C49               	btfss	_WDT^(0+128),0
  4839  1CA4  0008               	return
  4840                           
  4841                           ;MCU_B1.c: 1058: if (WDT.Timer-- > 0) {
  4842  1CA5  3001               	movlw	1
  4843  1CA6  02CA               	subwf	(_WDT^(0+128)+1),f
  4844  1CA7  084A               	movf	(_WDT^(0+128)+1),w
  4845  1CA8  3AFF               	xorlw	255
  4846  1CA9  1903               	skipnz
  4847  1CAA  0008               	return
  4848                           
  4849                           ;MCU_B1.c: 1059: WDT.Timer = 100;
  4850  1CAB  3064               	movlw	100
  4851  1CAC  0020               	movlb	0	; select bank0
  4852  1CAD  00A0               	movwf	??_WDT_Main
  4853  1CAE  0820               	movf	??_WDT_Main,w
  4854  1CAF  0021               	movlb	1	; select bank1
  4855  1CB0  00CA               	movwf	(_WDT^(0+128)+1)
  4856                           
  4857                           ;MCU_B1.c: 1060: WDT_Clearing();
  4858  1CB1  3180  2002         	fcall	_WDT_Clearing
  4859  1CB3  0008               	return
  4860  1CB4                     __end_of_WDT_Main:	
  4861                           
  4862                           	psect	text7
  4863  0002                     __ptext7:	
  4864 ;; *************** function _WDT_Clearing *****************
  4865 ;; Defined at:
  4866 ;;		line 1066 in file "../src/MCU_B1.c"
  4867 ;; Parameters:    Size  Location     Type
  4868 ;;		None
  4869 ;; Auto vars:     Size  Location     Type
  4870 ;;		None
  4871 ;; Return value:  Size  Location     Type
  4872 ;;		None               void
  4873 ;; Registers used:
  4874 ;;		None
  4875 ;; Tracked objects:
  4876 ;;		On entry : 0/0
  4877 ;;		On exit  : 0/0
  4878 ;;		Unchanged: 0/0
  4879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4883 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4884 ;;Total ram usage:        0 bytes
  4885 ;; Hardware stack levels used:    1
  4886 ;; Hardware stack levels required when called:    5
  4887 ;; This function calls:
  4888 ;;		Nothing
  4889 ;; This function is called by:
  4890 ;;		_WDT_Main
  4891 ;; This function uses a non-reentrant model
  4892 ;;
  4893                           
  4894                           
  4895                           ;psect for function _WDT_Clearing
  4896  0002                     _WDT_Clearing:	
  4897                           
  4898                           ;incstack = 0
  4899                           ; Regs used in _WDT_Clearing: []
  4900  0002  0064               	clrwdt	;# 
  4901  0003  0008               	return
  4902  0004                     __end_of_WDT_Clearing:	
  4903                           
  4904                           	psect	text8
  4905  1AE7                     __ptext8:	
  4906 ;; *************** function _Temp_Main *****************
  4907 ;; Defined at:
  4908 ;;		line 50 in file "../src/OverTemperature_B1.c"
  4909 ;; Parameters:    Size  Location     Type
  4910 ;;		None
  4911 ;; Auto vars:     Size  Location     Type
  4912 ;;		None
  4913 ;; Return value:  Size  Location     Type
  4914 ;;		None               void
  4915 ;; Registers used:
  4916 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4917 ;; Tracked objects:
  4918 ;;		On entry : 0/0
  4919 ;;		On exit  : 0/0
  4920 ;;		Unchanged: 0/0
  4921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4923 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4924 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4925 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4926 ;;Total ram usage:        0 bytes
  4927 ;; Hardware stack levels used:    1
  4928 ;; Hardware stack levels required when called:    8
  4929 ;; This function calls:
  4930 ;;		_setTemp_Main
  4931 ;; This function is called by:
  4932 ;;		_main
  4933 ;; This function uses a non-reentrant model
  4934 ;;
  4935                           
  4936                           
  4937                           ;psect for function _Temp_Main
  4938  1AE7                     _Temp_Main:	
  4939                           
  4940                           ;OverTemperature_B1.c: 52: setTemp_Main();
  4941                           
  4942                           ;incstack = 0
  4943                           ; Regs used in _Temp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4944  1AE7  318E  2611         	fcall	_setTemp_Main
  4945  1AE9  0008               	return
  4946  1AEA                     __end_of_Temp_Main:	
  4947                           
  4948                           	psect	text9
  4949  0E11                     __ptext9:	
  4950 ;; *************** function _setTemp_Main *****************
  4951 ;; Defined at:
  4952 ;;		line 57 in file "../src/OverTemperature_B1.c"
  4953 ;; Parameters:    Size  Location     Type
  4954 ;;		None
  4955 ;; Auto vars:     Size  Location     Type
  4956 ;;		None
  4957 ;; Return value:  Size  Location     Type
  4958 ;;		None               void
  4959 ;; Registers used:
  4960 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4961 ;; Tracked objects:
  4962 ;;		On entry : 0/0
  4963 ;;		On exit  : 0/0
  4964 ;;		Unchanged: 0/0
  4965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4967 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4968 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4969 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4970 ;;Total ram usage:        1 bytes
  4971 ;; Hardware stack levels used:    1
  4972 ;; Hardware stack levels required when called:    7
  4973 ;; This function calls:
  4974 ;;		_getMain_All_Error_Status
  4975 ;;		_setBuz
  4976 ;; This function is called by:
  4977 ;;		_Temp_Main
  4978 ;; This function uses a non-reentrant model
  4979 ;;
  4980                           
  4981                           
  4982                           ;psect for function _setTemp_Main
  4983  0E11                     _setTemp_Main:	
  4984                           
  4985                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  4986                           
  4987                           ;incstack = 0
  4988                           ; Regs used in _setTemp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4989  0E11  0021               	movlb	1	; select bank1
  4990  0E12  1C56               	btfss	_Temp^(0+128),0
  4991  0E13  2E9F               	goto	l1617
  4992                           
  4993                           ;OverTemperature_B1.c: 59: if (Temp.ADtoGO == 0) {
  4994  0E14  1956               	btfsc	_Temp^(0+128),2
  4995  0E15  2E25               	goto	l7538
  4996                           
  4997                           ;OverTemperature_B1.c: 60: Temp.Time++;
  4998  0E16  3001               	movlw	1
  4999  0E17  07D7               	addwf	(_Temp^(0+128)+1),f
  5000  0E18  3000               	movlw	0
  5001  0E19  3DD8               	addwfc	((_Temp+1)^(0+128)+1),f
  5002                           
  5003                           ;OverTemperature_B1.c: 61: if (Temp.Time >= 500) {
  5004  0E1A  3001               	movlw	1
  5005  0E1B  0258               	subwf	((_Temp+1)^(0+128)+1),w
  5006  0E1C  30F4               	movlw	244
  5007  0E1D  1903               	skipnz
  5008  0E1E  0257               	subwf	(_Temp^(0+128)+1),w
  5009  0E1F  1C03               	skipc
  5010  0E20  0008               	return
  5011                           
  5012                           ;OverTemperature_B1.c: 62: Temp.Time = 0;
  5013  0E21  01D7               	clrf	(_Temp^(0+128)+1)
  5014  0E22  01D8               	clrf	((_Temp+1)^(0+128)+1)
  5015                           
  5016                           ;OverTemperature_B1.c: 63: Temp.ADtoGO = 1;
  5017  0E23  1556               	bsf	_Temp^(0+128),2
  5018                           
  5019                           ;OverTemperature_B1.c: 64: }
  5020                           ;OverTemperature_B1.c: 65: } else {
  5021  0E24  0008               	return
  5022  0E25                     l7538:	
  5023                           
  5024                           ;OverTemperature_B1.c: 66: if (getMain_All_Error_Status(2) == 0) {
  5025  0E25  3002               	movlw	2
  5026  0E26  3191  2179  318E   	fcall	_getMain_All_Error_Status
  5027  0E29  3800               	iorlw	0
  5028  0E2A  1D03               	skipz
  5029  0E2B  0008               	return
  5030                           
  5031                           ;OverTemperature_B1.c: 67: Temp.Time++;
  5032  0E2C  3001               	movlw	1
  5033  0E2D  0021               	movlb	1	; select bank1
  5034  0E2E  07D7               	addwf	(_Temp^(0+128)+1),f
  5035  0E2F  3000               	movlw	0
  5036  0E30  3DD8               	addwfc	((_Temp+1)^(0+128)+1),f
  5037                           
  5038                           ;OverTemperature_B1.c: 68: if (Temp.Time >= 5) {
  5039  0E31  3000               	movlw	0
  5040  0E32  0258               	subwf	((_Temp+1)^(0+128)+1),w
  5041  0E33  3005               	movlw	5
  5042  0E34  1903               	skipnz
  5043  0E35  0257               	subwf	(_Temp^(0+128)+1),w
  5044  0E36  1C03               	skipc
  5045  0E37  0008               	return
  5046                           
  5047                           ;OverTemperature_B1.c: 69: Temp.Time = 0;
  5048  0E38  01D7               	clrf	(_Temp^(0+128)+1)
  5049  0E39  01D8               	clrf	((_Temp+1)^(0+128)+1)
  5050                           
  5051                           ;OverTemperature_B1.c: 70: if (Temp.GO == 1) {
  5052  0E3A  1E56               	btfss	_Temp^(0+128),4
  5053  0E3B  0008               	return
  5054                           
  5055                           ;OverTemperature_B1.c: 71: Temp.ADtoGO = 0;
  5056  0E3C  1156               	bcf	_Temp^(0+128),2
  5057                           
  5058                           ;OverTemperature_B1.c: 73: Temp.AD = Temp.ADH[0];
  5059  0E3D  085F               	movf	((_Temp+1)^(0+128)+8),w
  5060  0E3E  01DD               	clrf	((_Temp+1)^(0+128)+6)
  5061  0E3F  07DD               	addwf	((_Temp+1)^(0+128)+6),f
  5062  0E40  085E               	movf	(_Temp^(0+128)+8),w
  5063  0E41  01DC               	clrf	(_Temp^(0+128)+6)
  5064  0E42  07DC               	addwf	(_Temp^(0+128)+6),f
  5065                           
  5066                           ;OverTemperature_B1.c: 83: Temp.SafeValue = 455;
  5067  0E43  30C7               	movlw	199
  5068  0E44  00E4               	movwf	(_Temp^(0+128)+14)
  5069  0E45  3001               	movlw	1
  5070  0E46  00E5               	movwf	(_Temp^(0+128)+15)
  5071                           
  5072                           ;OverTemperature_B1.c: 84: Temp.DangerValue = 415;
  5073  0E47  309F               	movlw	159
  5074  0E48  00E6               	movwf	(_Temp^(0+128)+16)
  5075  0E49  3001               	movlw	1
  5076  0E4A  00E7               	movwf	(_Temp^(0+128)+17)
  5077                           
  5078                           ;OverTemperature_B1.c: 90: if (Temp.ERROR == 1) {
  5079  0E4B  1CD6               	btfss	_Temp^(0+128),1
  5080  0E4C  2E6D               	goto	l7570
  5081                           
  5082                           ;OverTemperature_B1.c: 91: if (Temp.AD >= Temp.SafeValue) {
  5083  0E4D  0865               	movf	((_Temp+1)^(0+128)+14),w
  5084  0E4E  025D               	subwf	((_Temp+1)^(0+128)+6),w
  5085  0E4F  1D03               	skipz
  5086  0E50  2E53               	goto	u7095
  5087  0E51  0864               	movf	(_Temp^(0+128)+14),w
  5088  0E52  025C               	subwf	(_Temp^(0+128)+6),w
  5089  0E53                     u7095:	
  5090  0E53  1C03               	skipc
  5091  0E54  2E6B               	goto	l7568
  5092                           
  5093                           ;OverTemperature_B1.c: 92: Temp.Count++;
  5094  0E55  3001               	movlw	1
  5095  0E56  0020               	movlb	0	; select bank0
  5096  0E57  00AD               	movwf	??_setTemp_Main
  5097  0E58  082D               	movf	??_setTemp_Main,w
  5098  0E59  0021               	movlb	1	; select bank1
  5099  0E5A  07D9               	addwf	(_Temp^(0+128)+3),f
  5100                           
  5101                           ;OverTemperature_B1.c: 93: if (Temp.Count >= 3) {
  5102  0E5B  3003               	movlw	3
  5103  0E5C  0259               	subwf	(_Temp^(0+128)+3),w
  5104  0E5D  1C03               	skipc
  5105  0E5E  2E83               	goto	l7582
  5106                           
  5107                           ;OverTemperature_B1.c: 94: Temp.Count = 0;
  5108  0E5F  01D9               	clrf	(_Temp^(0+128)+3)
  5109                           
  5110                           ;OverTemperature_B1.c: 95: Temp.ERROR = 0;
  5111  0E60  10D6               	bcf	_Temp^(0+128),1
  5112                           
  5113                           ;OverTemperature_B1.c: 96: setBuz(2, 100);
  5114  0E61  3064               	movlw	100
  5115  0E62  0020               	movlb	0	; select bank0
  5116  0E63  00A9               	movwf	setBuz@time
  5117  0E64  3000               	movlw	0
  5118  0E65  00AA               	movwf	setBuz@time+1
  5119  0E66  3002               	movlw	2
  5120  0E67  3196  2698  318E   	fcall	_setBuz
  5121                           
  5122                           ;OverTemperature_B1.c: 97: }
  5123                           ;OverTemperature_B1.c: 98: } else {
  5124  0E6A  2E83               	goto	l7582
  5125  0E6B                     l7568:	
  5126                           
  5127                           ;OverTemperature_B1.c: 99: Temp.Count = 0;
  5128  0E6B  0021               	movlb	1	; select bank1
  5129  0E6C  2E82               	goto	l7580
  5130  0E6D                     l7570:	
  5131                           ;OverTemperature_B1.c: 100: }
  5132                           ;OverTemperature_B1.c: 101: } else {
  5133                           
  5134                           
  5135                           ;OverTemperature_B1.c: 102: if (Temp.AD <= Temp.DangerValue) {
  5136  0E6D  085D               	movf	((_Temp+1)^(0+128)+6),w
  5137  0E6E  0267               	subwf	((_Temp+1)^(0+128)+16),w
  5138  0E6F  1D03               	skipz
  5139  0E70  2E73               	goto	u7115
  5140  0E71  085C               	movf	(_Temp^(0+128)+6),w
  5141  0E72  0266               	subwf	(_Temp^(0+128)+16),w
  5142  0E73                     u7115:	
  5143  0E73  1C03               	skipc
  5144  0E74  2E82               	goto	l7580
  5145                           
  5146                           ;OverTemperature_B1.c: 103: Temp.Count++;
  5147  0E75  3001               	movlw	1
  5148  0E76  0020               	movlb	0	; select bank0
  5149  0E77  00AD               	movwf	??_setTemp_Main
  5150  0E78  082D               	movf	??_setTemp_Main,w
  5151  0E79  0021               	movlb	1	; select bank1
  5152  0E7A  07D9               	addwf	(_Temp^(0+128)+3),f
  5153                           
  5154                           ;OverTemperature_B1.c: 104: if (Temp.Count >= 3) {
  5155  0E7B  3003               	movlw	3
  5156  0E7C  0259               	subwf	(_Temp^(0+128)+3),w
  5157  0E7D  1C03               	skipc
  5158  0E7E  2E83               	goto	l7582
  5159                           
  5160                           ;OverTemperature_B1.c: 105: Temp.Count = 0;
  5161  0E7F  01D9               	clrf	(_Temp^(0+128)+3)
  5162                           
  5163                           ;OverTemperature_B1.c: 106: Temp.ERROR = 1;
  5164  0E80  14D6               	bsf	_Temp^(0+128),1
  5165                           
  5166                           ;OverTemperature_B1.c: 107: }
  5167                           ;OverTemperature_B1.c: 108: } else {
  5168  0E81  2E83               	goto	l7582
  5169  0E82                     l7580:	
  5170                           
  5171                           ;OverTemperature_B1.c: 109: Temp.Count = 0;
  5172  0E82  01D9               	clrf	(_Temp^(0+128)+3)
  5173  0E83                     l7582:	
  5174                           
  5175                           ;OverTemperature_B1.c: 110: }
  5176                           ;OverTemperature_B1.c: 111: }
  5177                           ;OverTemperature_B1.c: 112: product->Data[24]=Temp.AD >> 8;
  5178  0E83  0021               	movlb	1	; select bank1
  5179  0E84  085D               	movf	((_Temp+1)^(0+128)+6),w
  5180  0E85  0020               	movlb	0	; select bank0
  5181  0E86  00AD               	movwf	??_setTemp_Main
  5182  0E87  086E               	movf	_product,w
  5183  0E88  3E18               	addlw	24
  5184  0E89  0086               	movwf	6
  5185  0E8A  3002               	movlw	2	; select bank4/5
  5186  0E8B  0087               	movwf	7
  5187  0E8C  082D               	movf	??_setTemp_Main,w
  5188  0E8D  0081               	movwf	1
  5189                           
  5190                           ;OverTemperature_B1.c: 113: product->Data[25]=Temp.AD;
  5191  0E8E  0021               	movlb	1	; select bank1
  5192  0E8F  085C               	movf	(_Temp^(0+128)+6),w
  5193  0E90  0020               	movlb	0	; select bank0
  5194  0E91  00AD               	movwf	??_setTemp_Main
  5195  0E92  086E               	movf	_product,w
  5196  0E93  3E19               	addlw	25
  5197  0E94  0086               	movwf	6
  5198  0E95  3002               	movlw	2	; select bank4/5
  5199  0E96  0087               	movwf	7
  5200  0E97  082D               	movf	??_setTemp_Main,w
  5201  0E98  0081               	movwf	1
  5202                           
  5203                           ;OverTemperature_B1.c: 125: Temp.ADH[0] = 0;
  5204  0E99  0021               	movlb	1	; select bank1
  5205  0E9A  01DE               	clrf	(_Temp^(0+128)+8)
  5206  0E9B  01DF               	clrf	((_Temp+1)^(0+128)+8)
  5207                           
  5208                           ;OverTemperature_B1.c: 126: Temp.ADH[1] = 0;
  5209  0E9C  01E0               	clrf	(_Temp^(0+128)+10)
  5210  0E9D  01E1               	clrf	((_Temp+1)^(0+128)+10)
  5211                           
  5212                           ;OverTemperature_B1.c: 127: }
  5213                           ;OverTemperature_B1.c: 128: }
  5214                           ;OverTemperature_B1.c: 129: }
  5215                           ;OverTemperature_B1.c: 130: }
  5216                           ;OverTemperature_B1.c: 131: } else {
  5217  0E9E  0008               	return
  5218  0E9F                     l1617:	
  5219                           
  5220                           ;OverTemperature_B1.c: 132: if (myMain.PowerON == 1) {
  5221  0E9F  1C20               	btfss	_myMain^(0+128),0
  5222  0EA0  0008               	return
  5223                           
  5224                           ;OverTemperature_B1.c: 133: Temp.Enable = 1;
  5225  0EA1  1456               	bsf	_Temp^(0+128),0
  5226  0EA2  0008               	return
  5227  0EA3                     __end_of_setTemp_Main:	
  5228                           
  5229                           	psect	text10
  5230  1AE4                     __ptext10:	
  5231 ;; *************** function _Temp_Initialization *****************
  5232 ;; Defined at:
  5233 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5234 ;; Parameters:    Size  Location     Type
  5235 ;;		None
  5236 ;; Auto vars:     Size  Location     Type
  5237 ;;		None
  5238 ;; Return value:  Size  Location     Type
  5239 ;;		None               void
  5240 ;; Registers used:
  5241 ;;		status,2, status,0, pclath, cstack
  5242 ;; Tracked objects:
  5243 ;;		On entry : 0/0
  5244 ;;		On exit  : 0/0
  5245 ;;		Unchanged: 0/0
  5246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5248 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5250 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5251 ;;Total ram usage:        0 bytes
  5252 ;; Hardware stack levels used:    1
  5253 ;; Hardware stack levels required when called:    6
  5254 ;; This function calls:
  5255 ;;		_setTemp_Initialization
  5256 ;; This function is called by:
  5257 ;;		_main
  5258 ;; This function uses a non-reentrant model
  5259 ;;
  5260                           
  5261                           
  5262                           ;psect for function _Temp_Initialization
  5263  1AE4                     _Temp_Initialization:	
  5264                           
  5265                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5266                           
  5267                           ;incstack = 0
  5268                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5269  1AE4  319A  22DA         	fcall	_setTemp_Initialization
  5270  1AE6  0008               	return
  5271  1AE7                     __end_of_Temp_Initialization:	
  5272                           
  5273                           	psect	text11
  5274  1ADA                     __ptext11:	
  5275 ;; *************** function _setTemp_Initialization *****************
  5276 ;; Defined at:
  5277 ;;		line 45 in file "../src/OverTemperature_B1.c"
  5278 ;; Parameters:    Size  Location     Type
  5279 ;;		None
  5280 ;; Auto vars:     Size  Location     Type
  5281 ;;		None
  5282 ;; Return value:  Size  Location     Type
  5283 ;;		None               void
  5284 ;; Registers used:
  5285 ;;		None
  5286 ;; Tracked objects:
  5287 ;;		On entry : 0/0
  5288 ;;		On exit  : 0/0
  5289 ;;		Unchanged: 0/0
  5290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5291 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5292 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5294 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5295 ;;Total ram usage:        0 bytes
  5296 ;; Hardware stack levels used:    1
  5297 ;; Hardware stack levels required when called:    5
  5298 ;; This function calls:
  5299 ;;		Nothing
  5300 ;; This function is called by:
  5301 ;;		_Temp_Initialization
  5302 ;; This function uses a non-reentrant model
  5303 ;;
  5304                           
  5305                           
  5306                           ;psect for function _setTemp_Initialization
  5307  1ADA                     _setTemp_Initialization:	
  5308                           
  5309                           ;incstack = 0
  5310                           ; Regs used in _setTemp_Initialization: []
  5311  1ADA  0008               	return
  5312  1ADB                     __end_of_setTemp_Initialization:	
  5313                           
  5314                           	psect	text12
  5315  1F8F                     __ptext12:	
  5316 ;; *************** function _Switch_Main *****************
  5317 ;; Defined at:
  5318 ;;		line 72 in file "../src/Switch_B1.c"
  5319 ;; Parameters:    Size  Location     Type
  5320 ;;		None
  5321 ;; Auto vars:     Size  Location     Type
  5322 ;;  error           1   30[BANK0 ] unsigned char 
  5323 ;; Return value:  Size  Location     Type
  5324 ;;		None               void
  5325 ;; Registers used:
  5326 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5327 ;; Tracked objects:
  5328 ;;		On entry : 0/0
  5329 ;;		On exit  : 0/0
  5330 ;;		Unchanged: 0/0
  5331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5333 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5334 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5335 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5336 ;;Total ram usage:        2 bytes
  5337 ;; Hardware stack levels used:    1
  5338 ;; Hardware stack levels required when called:   11
  5339 ;; This function calls:
  5340 ;;		_TouchPower
  5341 ;;		_getMain_All_Error_Status
  5342 ;;		_setMain_Exception
  5343 ;;		_setSw_Main
  5344 ;; This function is called by:
  5345 ;;		_main
  5346 ;; This function uses a non-reentrant model
  5347 ;;
  5348                           
  5349                           
  5350                           ;psect for function _Switch_Main
  5351  1F8F                     _Switch_Main:	
  5352                           
  5353                           ;Switch_B1.c: 73: char error = getMain_All_Error_Status(0);
  5354                           
  5355                           ;incstack = 0
  5356                           ; Regs used in _Switch_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5357  1F8F  3000               	movlw	0
  5358  1F90  3191  2179  319F   	fcall	_getMain_All_Error_Status
  5359  1F93  0020               	movlb	0	; select bank0
  5360  1F94  00BD               	movwf	??_Switch_Main
  5361  1F95  083D               	movf	??_Switch_Main,w
  5362  1F96  00BE               	movwf	Switch_Main@error
  5363                           
  5364                           ;Switch_B1.c: 74: if (error != 0) {
  5365  1F97  083E               	movf	Switch_Main@error,w
  5366  1F98  1903               	btfsc	3,2
  5367  1F99  2F9F               	goto	l2385
  5368                           
  5369                           ;Switch_B1.c: 75: if (SwDetect.Error == 0) {
  5370  1F9A  0021               	movlb	1	; select bank1
  5371  1F9B  1851               	btfsc	_SwDetect^(0+128),0
  5372  1F9C  2FA8               	goto	l8274
  5373                           
  5374                           ;Switch_B1.c: 76: SwDetect.Error = 1;
  5375  1F9D  1451               	bsf	_SwDetect^(0+128),0
  5376  1F9E  2FA3               	goto	L2
  5377  1F9F                     l2385:	
  5378                           ;Switch_B1.c: 80: }
  5379                           ;Switch_B1.c: 81: } else {
  5380                           
  5381                           ;Switch_B1.c: 78: setMain_Exception(error);
  5382                           
  5383                           
  5384                           ;Switch_B1.c: 82: if (SwDetect.Error == 1) {
  5385  1F9F  0021               	movlb	1	; select bank1
  5386  1FA0  1C51               	btfss	_SwDetect^(0+128),0
  5387  1FA1  2FA8               	goto	l8274
  5388                           
  5389                           ;Switch_B1.c: 83: SwDetect.Error = 0;
  5390  1FA2  1051               	bcf	_SwDetect^(0+128),0
  5391  1FA3                     L2:	
  5392                           
  5393                           ;Switch_B1.c: 85: setMain_Exception(error);
  5394  1FA3  0020               	movlb	0	; select bank0
  5395  1FA4  083E               	movf	Switch_Main@error,w
  5396  1FA5  3188  2016  319F   	fcall	_setMain_Exception
  5397  1FA8                     l8274:	
  5398                           
  5399                           ;Switch_B1.c: 87: }
  5400                           ;Switch_B1.c: 88: }
  5401                           ;Switch_B1.c: 91: setSw_Main(1);
  5402  1FA8  3001               	movlw	1
  5403  1FA9  3181  21C8  319F   	fcall	_setSw_Main
  5404                           
  5405                           ;Switch_B1.c: 95: setSw_Main(2);
  5406  1FAC  3002               	movlw	2
  5407  1FAD  3181  21C8  319F   	fcall	_setSw_Main
  5408                           
  5409                           ;Switch_B1.c: 103: TouchPower();
  5410  1FB0  319D  25A3         	fcall	_TouchPower
  5411  1FB2  0008               	return
  5412  1FB3                     __end_of_Switch_Main:	
  5413                           
  5414                           	psect	text13
  5415  01C8                     __ptext13:	
  5416 ;; *************** function _setSw_Main *****************
  5417 ;; Defined at:
  5418 ;;		line 137 in file "../src/Switch_B1.c"
  5419 ;; Parameters:    Size  Location     Type
  5420 ;;  sw              1    wreg     unsigned char 
  5421 ;; Auto vars:     Size  Location     Type
  5422 ;;  sw              1   19[BANK0 ] unsigned char 
  5423 ;; Return value:  Size  Location     Type
  5424 ;;		None               void
  5425 ;; Registers used:
  5426 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5427 ;; Tracked objects:
  5428 ;;		On entry : 0/0
  5429 ;;		On exit  : 0/0
  5430 ;;		Unchanged: 0/0
  5431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5433 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5434 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5435 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5436 ;;Total ram usage:        3 bytes
  5437 ;; Hardware stack levels used:    1
  5438 ;; Hardware stack levels required when called:    9
  5439 ;; This function calls:
  5440 ;;		_SwPointSelect
  5441 ;;		_getSw_KeyStatus
  5442 ;;		_setBuz
  5443 ;;		_setDimmerLights_AdjControl
  5444 ;;		_setDimmerLights_SwOff
  5445 ;;		_setDimmerLights_SwOn
  5446 ;;		_setRF_Learn
  5447 ;; This function is called by:
  5448 ;;		_Switch_Main
  5449 ;; This function uses a non-reentrant model
  5450 ;;
  5451                           
  5452                           
  5453                           ;psect for function _setSw_Main
  5454  01C8                     _setSw_Main:	
  5455                           
  5456                           ;incstack = 0
  5457                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5458                           ;setSw_Main@sw stored from wreg
  5459  01C8  0020               	movlb	0	; select bank0
  5460  01C9  00B3               	movwf	setSw_Main@sw
  5461                           
  5462                           ;Switch_B1.c: 138: SwPointSelect(sw);
  5463  01CA  0833               	movf	setSw_Main@sw,w
  5464  01CB  319D  253C  3181   	fcall	_SwPointSelect
  5465                           
  5466                           ;Switch_B1.c: 139: if (Sw->Enable == 1) {
  5467  01CE  087C               	movf	_Sw,w
  5468  01CF  0086               	movwf	6
  5469  01D0  3001               	movlw	1	; select bank2/3
  5470  01D1  0087               	movwf	7
  5471  01D2  1C01               	btfss	1,0
  5472  01D3  2B2E               	goto	l2395
  5473                           
  5474                           ;Switch_B1.c: 140: if (SwDetect.Error == 0) {
  5475  01D4  0021               	movlb	1	; select bank1
  5476  01D5  1851               	btfsc	_SwDetect^(0+128),0
  5477  01D6  29F2               	goto	l7746
  5478                           
  5479                           ;Switch_B1.c: 141: Sw->Detect = 0;
  5480  01D7  0A7C               	incf	_Sw,w
  5481  01D8  0086               	movwf	6
  5482  01D9  3001               	movlw	1	; select bank2/3
  5483  01DA  0087               	movwf	7
  5484  01DB  1081               	bcf	1,1
  5485                           
  5486                           ;Switch_B1.c: 142: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5487  01DC  0020               	movlb	0	; select bank0
  5488  01DD  0833               	movf	setSw_Main@sw,w
  5489  01DE  319E  2688  3181   	fcall	_getSw_KeyStatus
  5490  01E1  3A01               	xorlw	1
  5491  01E2  3000               	movlw	0
  5492  01E3  1903               	skipnz
  5493  01E4  3001               	movlw	1
  5494  01E5  0020               	movlb	0	; select bank0
  5495  01E6  00B1               	movwf	??_setSw_Main
  5496  01E7  087C               	movf	_Sw,w
  5497  01E8  0086               	movwf	6
  5498  01E9  3001               	movlw	1	; select bank2/3
  5499  01EA  0087               	movwf	7
  5500  01EB  0DB1               	rlf	??_setSw_Main,f
  5501  01EC  0801               	movf	1,w
  5502  01ED  0631               	xorwf	??_setSw_Main,w
  5503  01EE  39FD               	andlw	-3
  5504  01EF  0631               	xorwf	??_setSw_Main,w
  5505  01F0  0081               	movwf	1
  5506                           
  5507                           ;Switch_B1.c: 143: } else {
  5508  01F1  2A07               	goto	l2397
  5509  01F2                     l7746:	
  5510                           
  5511                           ;Switch_B1.c: 144: if (Sw->Detect == 0) {
  5512  01F2  0A7C               	incf	_Sw,w
  5513  01F3  0086               	movwf	6
  5514  01F4  3001               	movlw	1	; select bank2/3
  5515  01F5  0087               	movwf	7
  5516  01F6  1881               	btfsc	1,1
  5517  01F7  2A07               	goto	l2397
  5518                           
  5519                           ;Switch_B1.c: 145: Sw->Detect = 1;
  5520  01F8  0A7C               	incf	_Sw,w
  5521  01F9  0086               	movwf	6
  5522  01FA  3001               	movlw	1	; select bank2/3
  5523  01FB  0087               	movwf	7
  5524  01FC  1481               	bsf	1,1
  5525                           
  5526                           ;Switch_B1.c: 146: Sw->Touch = 0;
  5527  01FD  087C               	movf	_Sw,w
  5528  01FE  0086               	movwf	6
  5529  01FF  3001               	movlw	1	; select bank2/3
  5530  0200  0087               	movwf	7
  5531  0201  1081               	bcf	1,1
  5532                           
  5533                           ;Switch_B1.c: 147: Sw->Debounce = 1;
  5534  0202  087C               	movf	_Sw,w
  5535  0203  0086               	movwf	6
  5536  0204  3001               	movlw	1	; select bank2/3
  5537  0205  0087               	movwf	7
  5538  0206  1501               	bsf	1,2
  5539  0207                     l2397:	
  5540                           
  5541                           ;Switch_B1.c: 148: }
  5542                           ;Switch_B1.c: 149: }
  5543                           ;Switch_B1.c: 152: if (Sw->Touch == 1) {
  5544  0207  087C               	movf	_Sw,w
  5545  0208  0086               	movwf	6
  5546  0209  3001               	movlw	1	; select bank2/3
  5547  020A  0087               	movwf	7
  5548  020B  1C81               	btfss	1,1
  5549  020C  2AD7               	goto	l7796
  5550                           
  5551                           ;Switch_B1.c: 153: if (Sw->Debounce == 0) {
  5552  020D  087C               	movf	_Sw,w
  5553  020E  0086               	movwf	6
  5554  020F  3001               	movlw	1	; select bank2/3
  5555  0210  0087               	movwf	7
  5556  0211  1901               	btfsc	1,2
  5557  0212  2A35               	goto	l7762
  5558                           
  5559                           ;Switch_B1.c: 154: Sw->DebounceTime++;
  5560  0213  3001               	movlw	1
  5561  0214  0020               	movlb	0	; select bank0
  5562  0215  00B1               	movwf	??_setSw_Main
  5563  0216  087C               	movf	_Sw,w
  5564  0217  3E02               	addlw	2
  5565  0218  0086               	movwf	6
  5566  0219  3001               	movlw	1	; select bank2/3
  5567  021A  0087               	movwf	7
  5568  021B  0831               	movf	??_setSw_Main,w
  5569  021C  0781               	addwf	1,f
  5570                           
  5571                           ;Switch_B1.c: 155: if (Sw->DebounceTime >= 5) {
  5572  021D  087C               	movf	_Sw,w
  5573  021E  3E02               	addlw	2
  5574  021F  0086               	movwf	6
  5575  0220  3001               	movlw	1	; select bank2/3
  5576  0221  0087               	movwf	7
  5577  0222  3005               	movlw	5
  5578  0223  0201               	subwf	1,w
  5579  0224  1C03               	skipc
  5580  0225  0008               	return
  5581                           
  5582                           ;Switch_B1.c: 156: Sw->DebounceTime = 0;
  5583  0226  087C               	movf	_Sw,w
  5584  0227  3E02               	addlw	2
  5585  0228  0086               	movwf	6
  5586  0229  3001               	movlw	1	; select bank2/3
  5587  022A  0087               	movwf	7
  5588  022B  0181               	clrf	1
  5589                           
  5590                           ;Switch_B1.c: 157: Sw->Debounce = 1;
  5591  022C  087C               	movf	_Sw,w
  5592  022D  0086               	movwf	6
  5593  022E  3001               	movlw	1	; select bank2/3
  5594  022F  0087               	movwf	7
  5595  0230  1501               	bsf	1,2
  5596                           
  5597                           ;Switch_B1.c: 160: setDimmerLights_SwOn(sw);
  5598  0231  0833               	movf	setSw_Main@sw,w
  5599  0232  3192  22EF         	fcall	_setDimmerLights_SwOn
  5600                           
  5601                           ;Switch_B1.c: 162: }
  5602                           ;Switch_B1.c: 163: } else {
  5603  0234  0008               	return
  5604  0235                     l7762:	
  5605                           
  5606                           ;Switch_B1.c: 164: if (Sw->Hold1 == 0) {
  5607  0235  087C               	movf	_Sw,w
  5608  0236  0086               	movwf	6
  5609  0237  3001               	movlw	1	; select bank2/3
  5610  0238  0087               	movwf	7
  5611  0239  1981               	btfsc	1,3
  5612  023A  2A67               	goto	l7772
  5613                           
  5614                           ;Switch_B1.c: 165: Sw->Hold1Time++;
  5615  023B  087C               	movf	_Sw,w
  5616  023C  3E03               	addlw	3
  5617  023D  0086               	movwf	6
  5618  023E  3001               	movlw	1	; select bank2/3
  5619  023F  0087               	movwf	7
  5620  0240  3001               	movlw	1
  5621  0241  0781               	addwf	1,f
  5622  0242  3141               	addfsr 1,1
  5623  0243  1803               	skipnc
  5624  0244  0A81               	incf	1,f
  5625                           
  5626                           ;Switch_B1.c: 166: if (Sw->Hold1Time >= 150) {
  5627  0245  087C               	movf	_Sw,w
  5628  0246  3E03               	addlw	3
  5629  0247  0086               	movwf	6
  5630  0248  3001               	movlw	1	; select bank2/3
  5631  0249  0087               	movwf	7
  5632  024A  3F40               	moviw [0]fsr1
  5633  024B  0020               	movlb	0	; select bank0
  5634  024C  00B1               	movwf	??_setSw_Main
  5635  024D  3F41               	moviw [1]fsr1
  5636  024E  00B2               	movwf	??_setSw_Main+1
  5637  024F  3000               	movlw	0
  5638  0250  0232               	subwf	??_setSw_Main+1,w
  5639  0251  3096               	movlw	150
  5640  0252  1903               	skipnz
  5641  0253  0231               	subwf	??_setSw_Main,w
  5642  0254  1C03               	skipc
  5643  0255  0008               	return
  5644                           
  5645                           ;Switch_B1.c: 167: Sw->Hold1Time = 0;
  5646  0256  087C               	movf	_Sw,w
  5647  0257  3E03               	addlw	3
  5648  0258  0086               	movwf	6
  5649  0259  3001               	movlw	1	; select bank2/3
  5650  025A  0087               	movwf	7
  5651  025B  3000               	movlw	0
  5652  025C  3FC0               	movwi [0]fsr1
  5653  025D  3FC1               	movwi [1]fsr1
  5654                           
  5655                           ;Switch_B1.c: 170: Sw->Hold1 = 1;
  5656  025E  087C               	movf	_Sw,w
  5657  025F  0086               	movwf	6
  5658  0260  3001               	movlw	1	; select bank2/3
  5659  0261  0087               	movwf	7
  5660  0262  1581               	bsf	1,3
  5661                           
  5662                           ;Switch_B1.c: 171: setDimmerLights_AdjControl(sw);
  5663  0263  0833               	movf	setSw_Main@sw,w
  5664  0264  3191  21E0         	fcall	_setDimmerLights_AdjControl
  5665                           
  5666                           ;Switch_B1.c: 174: }
  5667                           ;Switch_B1.c: 175: } else {
  5668  0266  0008               	return
  5669  0267                     l7772:	
  5670                           
  5671                           ;Switch_B1.c: 176: if (Sw->Hold2 == 0) {
  5672  0267  087C               	movf	_Sw,w
  5673  0268  0086               	movwf	6
  5674  0269  3001               	movlw	1	; select bank2/3
  5675  026A  0087               	movwf	7
  5676  026B  1A01               	btfsc	1,4
  5677  026C  2AA5               	goto	l7786
  5678                           
  5679                           ;Switch_B1.c: 177: Sw->Hold2Time++;
  5680  026D  087C               	movf	_Sw,w
  5681  026E  3E05               	addlw	5
  5682  026F  0086               	movwf	6
  5683  0270  3001               	movlw	1	; select bank2/3
  5684  0271  0087               	movwf	7
  5685  0272  3001               	movlw	1
  5686  0273  0781               	addwf	1,f
  5687  0274  3141               	addfsr 1,1
  5688  0275  1803               	skipnc
  5689  0276  0A81               	incf	1,f
  5690                           
  5691                           ;Switch_B1.c: 178: if (Sw->Hold2Time >= 150) {
  5692  0277  087C               	movf	_Sw,w
  5693  0278  3E05               	addlw	5
  5694  0279  0086               	movwf	6
  5695  027A  3001               	movlw	1	; select bank2/3
  5696  027B  0087               	movwf	7
  5697  027C  3F40               	moviw [0]fsr1
  5698  027D  0020               	movlb	0	; select bank0
  5699  027E  00B1               	movwf	??_setSw_Main
  5700  027F  3F41               	moviw [1]fsr1
  5701  0280  00B2               	movwf	??_setSw_Main+1
  5702  0281  3000               	movlw	0
  5703  0282  0232               	subwf	??_setSw_Main+1,w
  5704  0283  3096               	movlw	150
  5705  0284  1903               	skipnz
  5706  0285  0231               	subwf	??_setSw_Main,w
  5707  0286  1C03               	skipc
  5708  0287  0008               	return
  5709                           
  5710                           ;Switch_B1.c: 179: Sw->Hold2Time = 0;
  5711  0288  087C               	movf	_Sw,w
  5712  0289  3E05               	addlw	5
  5713  028A  0086               	movwf	6
  5714  028B  3001               	movlw	1	; select bank2/3
  5715  028C  0087               	movwf	7
  5716  028D  3000               	movlw	0
  5717  028E  3FC0               	movwi [0]fsr1
  5718  028F  3FC1               	movwi [1]fsr1
  5719                           
  5720                           ;Switch_B1.c: 180: Sw->Hold2 = 1;
  5721  0290  087C               	movf	_Sw,w
  5722  0291  0086               	movwf	6
  5723  0292  3001               	movlw	1	; select bank2/3
  5724  0293  0087               	movwf	7
  5725  0294  1601               	bsf	1,4
  5726                           
  5727                           ;Switch_B1.c: 183: setRF_Learn(1);
  5728  0295  3001               	movlw	1
  5729  0296  319D  2550  3181   	fcall	_setRF_Learn
  5730                           
  5731                           ;Switch_B1.c: 185: if (myMain.First == 1) {
  5732  0299  0021               	movlb	1	; select bank1
  5733  029A  1EA0               	btfss	_myMain^(0+128),5
  5734  029B  0008               	return
  5735                           
  5736                           ;Switch_B1.c: 186: setBuz(2, 100);
  5737  029C  3064               	movlw	100
  5738  029D  0020               	movlb	0	; select bank0
  5739  029E  00A9               	movwf	setBuz@time
  5740  029F  3000               	movlw	0
  5741  02A0  00AA               	movwf	setBuz@time+1
  5742  02A1  3002               	movlw	2
  5743  02A2  3196  2698         	fcall	_setBuz
  5744                           
  5745                           ;Switch_B1.c: 187: }
  5746                           ;Switch_B1.c: 189: }
  5747                           ;Switch_B1.c: 190: } else {
  5748  02A4  0008               	return
  5749  02A5                     l7786:	
  5750                           
  5751                           ;Switch_B1.c: 191: if (Sw->Hold3 == 0) {
  5752  02A5  087C               	movf	_Sw,w
  5753  02A6  0086               	movwf	6
  5754  02A7  3001               	movlw	1	; select bank2/3
  5755  02A8  0087               	movwf	7
  5756  02A9  1A81               	btfsc	1,5
  5757  02AA  0008               	return
  5758                           
  5759                           ;Switch_B1.c: 192: Sw->Hold3Time++;
  5760  02AB  087C               	movf	_Sw,w
  5761  02AC  3E07               	addlw	7
  5762  02AD  0086               	movwf	6
  5763  02AE  3001               	movlw	1	; select bank2/3
  5764  02AF  0087               	movwf	7
  5765  02B0  3001               	movlw	1
  5766  02B1  0781               	addwf	1,f
  5767  02B2  3141               	addfsr 1,1
  5768  02B3  1803               	skipnc
  5769  02B4  0A81               	incf	1,f
  5770                           
  5771                           ;Switch_B1.c: 193: if (Sw->Hold3Time >= 300) {
  5772  02B5  087C               	movf	_Sw,w
  5773  02B6  3E07               	addlw	7
  5774  02B7  0086               	movwf	6
  5775  02B8  3001               	movlw	1	; select bank2/3
  5776  02B9  0087               	movwf	7
  5777  02BA  3F40               	moviw [0]fsr1
  5778  02BB  0020               	movlb	0	; select bank0
  5779  02BC  00B1               	movwf	??_setSw_Main
  5780  02BD  3F41               	moviw [1]fsr1
  5781  02BE  00B2               	movwf	??_setSw_Main+1
  5782  02BF  3001               	movlw	1
  5783  02C0  0232               	subwf	??_setSw_Main+1,w
  5784  02C1  302C               	movlw	44
  5785  02C2  1903               	skipnz
  5786  02C3  0231               	subwf	??_setSw_Main,w
  5787  02C4  1C03               	skipc
  5788  02C5  0008               	return
  5789                           
  5790                           ;Switch_B1.c: 194: Sw->Hold3Time = 0;
  5791  02C6  087C               	movf	_Sw,w
  5792  02C7  3E07               	addlw	7
  5793  02C8  0086               	movwf	6
  5794  02C9  3001               	movlw	1	; select bank2/3
  5795  02CA  0087               	movwf	7
  5796  02CB  3000               	movlw	0
  5797  02CC  3FC0               	movwi [0]fsr1
  5798  02CD  3FC1               	movwi [1]fsr1
  5799                           
  5800                           ;Switch_B1.c: 195: Sw->Hold3 = 1;
  5801  02CE  087C               	movf	_Sw,w
  5802  02CF  0086               	movwf	6
  5803  02D0  3001               	movlw	1	; select bank2/3
  5804  02D1  0087               	movwf	7
  5805  02D2  1681               	bsf	1,5
  5806                           
  5807                           ;Switch_B1.c: 198: setRF_Learn(0);
  5808  02D3  3000               	movlw	0
  5809  02D4  319D  2550         	fcall	_setRF_Learn
  5810                           
  5811                           ;Switch_B1.c: 201: }
  5812                           ;Switch_B1.c: 202: }
  5813                           ;Switch_B1.c: 203: }
  5814                           ;Switch_B1.c: 204: }
  5815                           ;Switch_B1.c: 205: }
  5816                           ;Switch_B1.c: 206: } else {
  5817  02D6  0008               	return
  5818  02D7                     l7796:	
  5819                           
  5820                           ;Switch_B1.c: 207: if (Sw->Debounce == 1) {
  5821  02D7  087C               	movf	_Sw,w
  5822  02D8  0086               	movwf	6
  5823  02D9  3001               	movlw	1	; select bank2/3
  5824  02DA  0087               	movwf	7
  5825  02DB  1D01               	btfss	1,2
  5826  02DC  0008               	return
  5827                           
  5828                           ;Switch_B1.c: 208: Sw->DebounceTime++;
  5829  02DD  3001               	movlw	1
  5830  02DE  0020               	movlb	0	; select bank0
  5831  02DF  00B1               	movwf	??_setSw_Main
  5832  02E0  087C               	movf	_Sw,w
  5833  02E1  3E02               	addlw	2
  5834  02E2  0086               	movwf	6
  5835  02E3  3001               	movlw	1	; select bank2/3
  5836  02E4  0087               	movwf	7
  5837  02E5  0831               	movf	??_setSw_Main,w
  5838  02E6  0781               	addwf	1,f
  5839                           
  5840                           ;Switch_B1.c: 209: if (Sw->DebounceTime >= 5) {
  5841  02E7  087C               	movf	_Sw,w
  5842  02E8  3E02               	addlw	2
  5843  02E9  0086               	movwf	6
  5844  02EA  3001               	movlw	1	; select bank2/3
  5845  02EB  0087               	movwf	7
  5846  02EC  3005               	movlw	5
  5847  02ED  0201               	subwf	1,w
  5848  02EE  1C03               	skipc
  5849  02EF  0008               	return
  5850                           
  5851                           ;Switch_B1.c: 210: Sw->DebounceTime = 0;
  5852  02F0  087C               	movf	_Sw,w
  5853  02F1  3E02               	addlw	2
  5854  02F2  0086               	movwf	6
  5855  02F3  3001               	movlw	1	; select bank2/3
  5856  02F4  0087               	movwf	7
  5857  02F5  0181               	clrf	1
  5858                           
  5859                           ;Switch_B1.c: 211: Sw->Debounce = 0;
  5860  02F6  087C               	movf	_Sw,w
  5861  02F7  0086               	movwf	6
  5862  02F8  3001               	movlw	1	; select bank2/3
  5863  02F9  0087               	movwf	7
  5864  02FA  1101               	bcf	1,2
  5865                           
  5866                           ;Switch_B1.c: 212: Sw->Hold1Time = 0;
  5867  02FB  087C               	movf	_Sw,w
  5868  02FC  3E03               	addlw	3
  5869  02FD  0086               	movwf	6
  5870  02FE  3001               	movlw	1	; select bank2/3
  5871  02FF  0087               	movwf	7
  5872  0300  3000               	movlw	0
  5873  0301  3FC0               	movwi [0]fsr1
  5874  0302  3FC1               	movwi [1]fsr1
  5875                           
  5876                           ;Switch_B1.c: 213: Sw->Hold1 = 0;
  5877  0303  087C               	movf	_Sw,w
  5878  0304  0086               	movwf	6
  5879  0305  3001               	movlw	1	; select bank2/3
  5880  0306  0087               	movwf	7
  5881  0307  1181               	bcf	1,3
  5882                           
  5883                           ;Switch_B1.c: 214: Sw->Hold2Time = 0;
  5884  0308  087C               	movf	_Sw,w
  5885  0309  3E05               	addlw	5
  5886  030A  0086               	movwf	6
  5887  030B  3001               	movlw	1	; select bank2/3
  5888  030C  0087               	movwf	7
  5889  030D  3000               	movlw	0
  5890  030E  3FC0               	movwi [0]fsr1
  5891  030F  3FC1               	movwi [1]fsr1
  5892                           
  5893                           ;Switch_B1.c: 215: Sw->Hold2 = 0;
  5894  0310  087C               	movf	_Sw,w
  5895  0311  0086               	movwf	6
  5896  0312  3001               	movlw	1	; select bank2/3
  5897  0313  0087               	movwf	7
  5898  0314  1201               	bcf	1,4
  5899                           
  5900                           ;Switch_B1.c: 216: Sw->Hold3Time = 0;
  5901  0315  087C               	movf	_Sw,w
  5902  0316  3E07               	addlw	7
  5903  0317  0086               	movwf	6
  5904  0318  3001               	movlw	1	; select bank2/3
  5905  0319  0087               	movwf	7
  5906  031A  3000               	movlw	0
  5907  031B  3FC0               	movwi [0]fsr1
  5908  031C  3FC1               	movwi [1]fsr1
  5909                           
  5910                           ;Switch_B1.c: 217: Sw->Hold3 = 0;
  5911  031D  087C               	movf	_Sw,w
  5912  031E  0086               	movwf	6
  5913  031F  3001               	movlw	1	; select bank2/3
  5914  0320  0087               	movwf	7
  5915  0321  1281               	bcf	1,5
  5916                           
  5917                           ;Switch_B1.c: 219: if (SwDetect.Error == 0) {
  5918  0322  0021               	movlb	1	; select bank1
  5919  0323  1851               	btfsc	_SwDetect^(0+128),0
  5920  0324  2B2A               	goto	l7822
  5921                           
  5922                           ;Switch_B1.c: 220: setDimmerLights_SwOff(sw);
  5923  0325  0020               	movlb	0	; select bank0
  5924  0326  0833               	movf	setSw_Main@sw,w
  5925  0327  3194  246C  3181   	fcall	_setDimmerLights_SwOff
  5926  032A                     l7822:	
  5927                           
  5928                           ;Switch_B1.c: 221: }
  5929                           ;Switch_B1.c: 224: setRF_Learn(0);
  5930  032A  3000               	movlw	0
  5931  032B  319D  2550         	fcall	_setRF_Learn
  5932                           
  5933                           ;Switch_B1.c: 226: }
  5934                           ;Switch_B1.c: 227: }
  5935                           ;Switch_B1.c: 228: }
  5936                           ;Switch_B1.c: 229: } else {
  5937  032D  0008               	return
  5938  032E                     l2395:	
  5939                           
  5940                           ;Switch_B1.c: 230: if (myMain.PowerON == 1) {
  5941  032E  0021               	movlb	1	; select bank1
  5942  032F  1C20               	btfss	_myMain^(0+128),0
  5943  0330  0008               	return
  5944                           
  5945                           ;Switch_B1.c: 231: Sw->Enable = 1;
  5946  0331  087C               	movf	_Sw,w
  5947  0332  0086               	movwf	6
  5948  0333  3001               	movlw	1	; select bank2/3
  5949  0334  0087               	movwf	7
  5950  0335  1401               	bsf	1,0
  5951  0336  0008               	return
  5952  0337                     __end_of_setSw_Main:	
  5953                           
  5954                           	psect	text14
  5955  1D50                     __ptext14:	
  5956 ;; *************** function _setRF_Learn *****************
  5957 ;; Defined at:
  5958 ;;		line 23 in file "../src/RF_Control_B1.c"
  5959 ;; Parameters:    Size  Location     Type
  5960 ;;  command         1    wreg     unsigned char 
  5961 ;; Auto vars:     Size  Location     Type
  5962 ;;  command         1    1[BANK0 ] unsigned char 
  5963 ;; Return value:  Size  Location     Type
  5964 ;;		None               void
  5965 ;; Registers used:
  5966 ;;		wreg, status,2, status,0
  5967 ;; Tracked objects:
  5968 ;;		On entry : 0/0
  5969 ;;		On exit  : 0/0
  5970 ;;		Unchanged: 0/0
  5971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5973 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5974 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5975 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5976 ;;Total ram usage:        2 bytes
  5977 ;; Hardware stack levels used:    1
  5978 ;; Hardware stack levels required when called:    5
  5979 ;; This function calls:
  5980 ;;		Nothing
  5981 ;; This function is called by:
  5982 ;;		_setSw_Main
  5983 ;; This function uses a non-reentrant model
  5984 ;;
  5985                           
  5986                           
  5987                           ;psect for function _setRF_Learn
  5988  1D50                     _setRF_Learn:	
  5989                           
  5990                           ;incstack = 0
  5991                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  5992                           ;setRF_Learn@command stored from wreg
  5993  1D50  0020               	movlb	0	; select bank0
  5994  1D51  00A1               	movwf	setRF_Learn@command
  5995                           
  5996                           ;RF_Control_B1.c: 24: RF1.Learn = command == 1 ? 1 : 0;
  5997  1D52  0821               	movf	setRF_Learn@command,w
  5998  1D53  3A01               	xorlw	1
  5999  1D54  3000               	movlw	0
  6000  1D55  1903               	skipnz
  6001  1D56  3001               	movlw	1
  6002  1D57  00A0               	movwf	??_setRF_Learn
  6003  1D58  0EA0               	swapf	??_setRF_Learn,f
  6004  1D59  0DA0               	rlf	??_setRF_Learn,f
  6005  1D5A  0DA0               	rlf	??_setRF_Learn,f
  6006  1D5B  0021               	movlb	1	; select bank1
  6007  1D5C  083A               	movf	_RF1^(0+128),w
  6008  1D5D  0020               	movlb	0	; select bank0
  6009  1D5E  0620               	xorwf	??_setRF_Learn,w
  6010  1D5F  39BF               	andlw	-65
  6011  1D60  0620               	xorwf	??_setRF_Learn,w
  6012  1D61  0021               	movlb	1	; select bank1
  6013  1D62  00BA               	movwf	_RF1^(0+128)
  6014  1D63  0008               	return
  6015  1D64                     __end_of_setRF_Learn:	
  6016                           
  6017                           	psect	text15
  6018  11E0                     __ptext15:	
  6019 ;; *************** function _setDimmerLights_AdjControl *****************
  6020 ;; Defined at:
  6021 ;;		line 546 in file "../src/Dimmer_B1.c"
  6022 ;; Parameters:    Size  Location     Type
  6023 ;;  sw              1    wreg     unsigned char 
  6024 ;; Auto vars:     Size  Location     Type
  6025 ;;  sw              1    8[BANK0 ] unsigned char 
  6026 ;;  idle            1    6[BANK0 ] unsigned char 
  6027 ;; Return value:  Size  Location     Type
  6028 ;;		None               void
  6029 ;; Registers used:
  6030 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6031 ;; Tracked objects:
  6032 ;;		On entry : 0/0
  6033 ;;		On exit  : 0/0
  6034 ;;		Unchanged: 0/0
  6035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6037 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6038 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6039 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6040 ;;Total ram usage:        4 bytes
  6041 ;; Hardware stack levels used:    1
  6042 ;; Hardware stack levels required when called:    7
  6043 ;; This function calls:
  6044 ;;		_DimmerLightsPointSelect
  6045 ;;		_getAll_DimmerLights_AdjGO
  6046 ;;		_setDimmerLights_TriggerAdj
  6047 ;; This function is called by:
  6048 ;;		_setSw_Main
  6049 ;; This function uses a non-reentrant model
  6050 ;;
  6051                           
  6052                           
  6053                           ;psect for function _setDimmerLights_AdjControl
  6054  11E0                     _setDimmerLights_AdjControl:	
  6055                           
  6056                           ;incstack = 0
  6057                           ; Regs used in _setDimmerLights_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  6058                           ;setDimmerLights_AdjControl@sw stored from wreg
  6059  11E0  0020               	movlb	0	; select bank0
  6060  11E1  00A8               	movwf	setDimmerLights_AdjControl@sw
  6061                           
  6062                           ;Dimmer_B1.c: 547: DimmerLightsPointSelect(sw);
  6063  11E2  0828               	movf	setDimmerLights_AdjControl@sw,w
  6064  11E3  319C  24B4  3191   	fcall	_DimmerLightsPointSelect
  6065                           
  6066                           ;Dimmer_B1.c: 548: char idle = 0;
  6067  11E6  0020               	movlb	0	; select bank0
  6068  11E7  01A6               	clrf	setDimmerLights_AdjControl@idle
  6069                           
  6070                           ;Dimmer_B1.c: 550: idle = getAll_DimmerLights_AdjGO() == 1 && Dimmer.LoadOK == 1 ? 1 : 0
      +                          ;
  6071  11E8  01A7               	clrf	_setDimmerLights_AdjControl$2261
  6072  11E9  319C  2439  3191   	fcall	_getAll_DimmerLights_AdjGO
  6073  11EC  3A01               	xorlw	1
  6074  11ED  1D03               	skipz
  6075  11EE  29F5               	goto	l6956
  6076  11EF  0022               	movlb	2	; select bank2
  6077  11F0  1CA0               	btfss	_Dimmer^(0+256),1
  6078  11F1  29F5               	goto	l6956
  6079  11F2  0020               	movlb	0	; select bank0
  6080  11F3  01A7               	clrf	_setDimmerLights_AdjControl$2261
  6081  11F4  0AA7               	incf	_setDimmerLights_AdjControl$2261,f
  6082  11F5                     l6956:	
  6083  11F5  0020               	movlb	0	; select bank0
  6084  11F6  0827               	movf	_setDimmerLights_AdjControl$2261,w
  6085  11F7  00A5               	movwf	??_setDimmerLights_AdjControl
  6086  11F8  0825               	movf	??_setDimmerLights_AdjControl,w
  6087  11F9  00A6               	movwf	setDimmerLights_AdjControl@idle
  6088                           
  6089                           ;Dimmer_B1.c: 552: if (idle == 0) {
  6090  11FA  08A6               	movf	setDimmerLights_AdjControl@idle,f
  6091  11FB  1D03               	skipz
  6092  11FC  0008               	return
  6093                           
  6094                           ;Dimmer_B1.c: 553: if (DimmerLights->SwFlag == 1) {
  6095  11FD  086F               	movf	_DimmerLights,w
  6096  11FE  3E09               	addlw	9
  6097  11FF  0086               	movwf	6
  6098  1200  3001               	movlw	1	; select bank2/3
  6099  1201  0087               	movwf	7
  6100  1202  1F01               	btfss	1,6
  6101  1203  0008               	return
  6102                           
  6103                           ;Dimmer_B1.c: 554: DimmerLights->SwAdj = 1;
  6104  1204  086F               	movf	_DimmerLights,w
  6105  1205  3E09               	addlw	9
  6106  1206  0086               	movwf	6
  6107  1207  3001               	movlw	1	; select bank2/3
  6108  1208  0087               	movwf	7
  6109  1209  1781               	bsf	1,7
  6110                           
  6111                           ;Dimmer_B1.c: 555: DimmerLights->Status = 1;
  6112  120A  086F               	movf	_DimmerLights,w
  6113  120B  0086               	movwf	6
  6114  120C  3001               	movlw	1	; select bank2/3
  6115  120D  0087               	movwf	7
  6116  120E  1681               	bsf	1,5
  6117                           
  6118                           ;Dimmer_B1.c: 556: setDimmerLights_TriggerAdj(sw, 1);
  6119  120F  01A2               	clrf	setDimmerLights_TriggerAdj@command
  6120  1210  0AA2               	incf	setDimmerLights_TriggerAdj@command,f
  6121  1211  0828               	movf	setDimmerLights_AdjControl@sw,w
  6122  1212  319E  26A7         	fcall	_setDimmerLights_TriggerAdj
  6123  1214  0008               	return
  6124  1215                     __end_of_setDimmerLights_AdjControl:	
  6125                           
  6126                           	psect	text16
  6127  1E88                     __ptext16:	
  6128 ;; *************** function _getSw_KeyStatus *****************
  6129 ;; Defined at:
  6130 ;;		line 237 in file "../src/Switch_B1.c"
  6131 ;; Parameters:    Size  Location     Type
  6132 ;;  sw              1    wreg     unsigned char 
  6133 ;; Auto vars:     Size  Location     Type
  6134 ;;  sw              1    4[BANK0 ] unsigned char 
  6135 ;;  status          1    3[BANK0 ] unsigned char 
  6136 ;; Return value:  Size  Location     Type
  6137 ;;                  1    wreg      unsigned char 
  6138 ;; Registers used:
  6139 ;;		wreg, status,2
  6140 ;; Tracked objects:
  6141 ;;		On entry : 0/0
  6142 ;;		On exit  : 0/0
  6143 ;;		Unchanged: 0/0
  6144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6146 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6147 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6148 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6149 ;;Total ram usage:        5 bytes
  6150 ;; Hardware stack levels used:    1
  6151 ;; Hardware stack levels required when called:    5
  6152 ;; This function calls:
  6153 ;;		Nothing
  6154 ;; This function is called by:
  6155 ;;		_setSw_Main
  6156 ;; This function uses a non-reentrant model
  6157 ;;
  6158                           
  6159                           
  6160                           ;psect for function _getSw_KeyStatus
  6161  1E88                     _getSw_KeyStatus:	
  6162                           
  6163                           ;incstack = 0
  6164                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6165                           ;getSw_KeyStatus@sw stored from wreg
  6166  1E88  0020               	movlb	0	; select bank0
  6167  1E89  00A4               	movwf	getSw_KeyStatus@sw
  6168                           
  6169                           ;Switch_B1.c: 238: char status = 0;
  6170  1E8A  01A3               	clrf	getSw_KeyStatus@status
  6171                           
  6172                           ;Switch_B1.c: 250: if (sw == 1) {
  6173  1E8B  0824               	movf	getSw_KeyStatus@sw,w
  6174  1E8C  3A01               	xorlw	1
  6175  1E8D  1D03               	skipz
  6176  1E8E  2E97               	goto	l7156
  6177                           
  6178                           ;Switch_B1.c: 251: status = RA6 == 1 || RA4 == 1 ? 1 : 0;
  6179  1E8F  01A1               	clrf	_getSw_KeyStatus$5628
  6180  1E90  0AA1               	incf	_getSw_KeyStatus$5628,f
  6181  1E91  1F0C               	btfss	12,6	;volatile
  6182  1E92  1A0C               	btfsc	12,4	;volatile
  6183  1E93  2E95               	goto	l7154
  6184  1E94  01A1               	clrf	_getSw_KeyStatus$5628
  6185  1E95                     l7154:	
  6186  1E95  0821               	movf	_getSw_KeyStatus$5628,w
  6187  1E96  2EA2               	goto	L3
  6188  1E97                     l7156:	
  6189                           ;Switch_B1.c: 252: } else if (sw == 2) {
  6190                           
  6191  1E97  0824               	movf	getSw_KeyStatus@sw,w
  6192  1E98  3A02               	xorlw	2
  6193  1E99  1D03               	skipz
  6194  1E9A  2EA5               	goto	l7166
  6195                           
  6196                           ;Switch_B1.c: 253: status = RA0 == 1 || RB1 == 1 ? 1 : 0;
  6197  1E9B  01A2               	clrf	_getSw_KeyStatus$5629
  6198  1E9C  0AA2               	incf	_getSw_KeyStatus$5629,f
  6199  1E9D  1C0C               	btfss	12,0	;volatile
  6200  1E9E  188D               	btfsc	13,1	;volatile
  6201  1E9F  2EA1               	goto	l7164
  6202  1EA0  01A2               	clrf	_getSw_KeyStatus$5629
  6203  1EA1                     l7164:	
  6204  1EA1  0822               	movf	_getSw_KeyStatus$5629,w
  6205  1EA2                     L3:	
  6206  1EA2  00A0               	movwf	??_getSw_KeyStatus
  6207  1EA3  0820               	movf	??_getSw_KeyStatus,w
  6208  1EA4  00A3               	movwf	getSw_KeyStatus@status
  6209  1EA5                     l7166:	
  6210                           
  6211                           ;Switch_B1.c: 254: }
  6212                           ;Switch_B1.c: 261: return status;
  6213  1EA5  0823               	movf	getSw_KeyStatus@status,w
  6214  1EA6  0008               	return
  6215  1EA7                     __end_of_getSw_KeyStatus:	
  6216                           
  6217                           	psect	text17
  6218  1D3C                     __ptext17:	
  6219 ;; *************** function _SwPointSelect *****************
  6220 ;; Defined at:
  6221 ;;		line 25 in file "../src/Switch_B1.c"
  6222 ;; Parameters:    Size  Location     Type
  6223 ;;  sw              1    wreg     unsigned char 
  6224 ;; Auto vars:     Size  Location     Type
  6225 ;;  sw              1    1[BANK0 ] unsigned char 
  6226 ;; Return value:  Size  Location     Type
  6227 ;;		None               void
  6228 ;; Registers used:
  6229 ;;		wreg
  6230 ;; Tracked objects:
  6231 ;;		On entry : 0/0
  6232 ;;		On exit  : 0/0
  6233 ;;		Unchanged: 0/0
  6234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6236 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6237 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6238 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6239 ;;Total ram usage:        2 bytes
  6240 ;; Hardware stack levels used:    1
  6241 ;; Hardware stack levels required when called:    5
  6242 ;; This function calls:
  6243 ;;		Nothing
  6244 ;; This function is called by:
  6245 ;;		_setSw_Main
  6246 ;; This function uses a non-reentrant model
  6247 ;;
  6248                           
  6249                           
  6250                           ;psect for function _SwPointSelect
  6251  1D3C                     _SwPointSelect:	
  6252                           
  6253                           ;incstack = 0
  6254                           ; Regs used in _SwPointSelect: [wreg]
  6255                           ;SwPointSelect@sw stored from wreg
  6256  1D3C  0020               	movlb	0	; select bank0
  6257  1D3D  00A1               	movwf	SwPointSelect@sw
  6258                           
  6259                           ;Switch_B1.c: 28: if (sw == 1) {
  6260  1D3E  0821               	movf	SwPointSelect@sw,w
  6261  1D3F  3A01               	xorlw	1
  6262  1D40  1D03               	skipz
  6263  1D41  2D47               	goto	l7140
  6264                           
  6265                           ;Switch_B1.c: 29: Sw = &Sw1;
  6266  1D42  30DC               	movlw	_Sw1& (0+255)
  6267  1D43  00A0               	movwf	??_SwPointSelect
  6268  1D44  0820               	movf	??_SwPointSelect,w
  6269  1D45  00FC               	movwf	_Sw
  6270                           
  6271                           ;Switch_B1.c: 30: }
  6272  1D46  0008               	return
  6273  1D47                     l7140:	
  6274                           
  6275                           ;Switch_B1.c: 33: else if (sw == 2) {
  6276  1D47  0821               	movf	SwPointSelect@sw,w
  6277  1D48  3A02               	xorlw	2
  6278  1D49  1D03               	skipz
  6279  1D4A  0008               	return
  6280                           
  6281                           ;Switch_B1.c: 34: Sw = &Sw2;
  6282  1D4B  30E5               	movlw	_Sw2& (0+255)
  6283  1D4C  00A0               	movwf	??_SwPointSelect
  6284  1D4D  0820               	movf	??_SwPointSelect,w
  6285  1D4E  00FC               	movwf	_Sw
  6286  1D4F  0008               	return
  6287  1D50                     __end_of_SwPointSelect:	
  6288                           
  6289                           	psect	text18
  6290  0816                     __ptext18:	
  6291 ;; *************** function _setMain_Exception *****************
  6292 ;; Defined at:
  6293 ;;		line 284 in file "../src/main_B1.c"
  6294 ;; Parameters:    Size  Location     Type
  6295 ;;  command         1    wreg     unsigned char 
  6296 ;; Auto vars:     Size  Location     Type
  6297 ;;  command         1   28[BANK0 ] unsigned char 
  6298 ;;  status          1   27[BANK0 ] unsigned char 
  6299 ;;  buz             1   24[BANK0 ] unsigned char 
  6300 ;; Return value:  Size  Location     Type
  6301 ;;		None               void
  6302 ;; Registers used:
  6303 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6304 ;; Tracked objects:
  6305 ;;		On entry : 0/0
  6306 ;;		On exit  : 0/0
  6307 ;;		Unchanged: 0/0
  6308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6310 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6311 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6312 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6313 ;;Total ram usage:        7 bytes
  6314 ;; Hardware stack levels used:    1
  6315 ;; Hardware stack levels required when called:   10
  6316 ;; This function calls:
  6317 ;;		_getDimmerLights_Line
  6318 ;;		_getMain_LightsStatus
  6319 ;;		_setBuz
  6320 ;;		_setDimmerLights_ErrorClose
  6321 ;;		_setLED
  6322 ;; This function is called by:
  6323 ;;		_Switch_Main
  6324 ;; This function uses a non-reentrant model
  6325 ;;
  6326                           
  6327                           
  6328                           ;psect for function _setMain_Exception
  6329  0816                     _setMain_Exception:	
  6330                           
  6331                           ;incstack = 0
  6332                           ; Regs used in _setMain_Exception: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6333                           ;setMain_Exception@command stored from wreg
  6334  0816  0020               	movlb	0	; select bank0
  6335  0817  00BC               	movwf	setMain_Exception@command
  6336                           
  6337                           ;main_B1.c: 285: char status = 0, buz = 0;
  6338  0818  01BB               	clrf	setMain_Exception@status
  6339  0819  01B8               	clrf	setMain_Exception@buz
  6340                           
  6341                           ;main_B1.c: 302: status = command == 3 ? getDimmerLights_Line() : 255;
  6342  081A  083C               	movf	setMain_Exception@command,w
  6343  081B  3A03               	xorlw	3
  6344  081C  1903               	skipnz
  6345  081D  2822               	goto	l7708
  6346  081E  30FF               	movlw	255
  6347  081F  00B9               	movwf	_setMain_Exception$6300
  6348  0820  3000               	movlw	0
  6349  0821  282B               	goto	L4
  6350  0822                     l7708:	
  6351  0822  319C  24ED  3188   	fcall	_getDimmerLights_Line
  6352  0825  0020               	movlb	0	; select bank0
  6353  0826  00B6               	movwf	??_setMain_Exception
  6354  0827  01B7               	clrf	??_setMain_Exception+1
  6355  0828  0836               	movf	??_setMain_Exception,w
  6356  0829  00B9               	movwf	_setMain_Exception$6300
  6357  082A  0837               	movf	??_setMain_Exception+1,w
  6358  082B                     L4:	
  6359  082B  00BA               	movwf	_setMain_Exception$6300+1
  6360  082C  0839               	movf	_setMain_Exception$6300,w
  6361  082D  00B6               	movwf	??_setMain_Exception
  6362  082E  0836               	movf	??_setMain_Exception,w
  6363  082F  00BB               	movwf	setMain_Exception@status
  6364                           
  6365                           ;main_B1.c: 304: if (command == 0) {
  6366  0830  08BC               	movf	setMain_Exception@command,f
  6367  0831  1D03               	skipz
  6368  0832  2835               	goto	l7716
  6369                           
  6370                           ;main_B1.c: 305: setLED(99, 10);
  6371  0833  300A               	movlw	10
  6372  0834  2837               	goto	L5
  6373  0835                     l7716:	
  6374                           ;main_B1.c: 306: } else {
  6375                           
  6376                           
  6377                           ;main_B1.c: 307: setLED(99, 11);
  6378  0835  300B               	movlw	11
  6379  0836  0020               	movlb	0	; select bank0
  6380  0837                     L5:	
  6381  0837  00B6               	movwf	??_setMain_Exception
  6382  0838  0836               	movf	??_setMain_Exception,w
  6383  0839  00A2               	movwf	setLED@command
  6384  083A  3063               	movlw	99
  6385  083B  3195  259C  3188   	fcall	_setLED
  6386                           
  6387                           ;main_B1.c: 308: }
  6388                           ;main_B1.c: 310: if (command != 0) {
  6389  083E  0020               	movlb	0	; select bank0
  6390  083F  083C               	movf	setMain_Exception@command,w
  6391  0840  1903               	btfsc	3,2
  6392  0841  0008               	return
  6393                           
  6394                           ;main_B1.c: 311: switch (command) {
  6395  0842  2863               	goto	l7732
  6396  0843                     l7722:	
  6397                           ;main_B1.c: 312: case 2:
  6398                           
  6399                           
  6400                           ;main_B1.c: 313: if (getMain_LightsStatus() == 1) {
  6401  0843  3190  20EB  3188   	fcall	_getMain_LightsStatus
  6402  0846  3A01               	xorlw	1
  6403  0847  1D03               	skipz
  6404  0848  286C               	goto	l7734
  6405                           
  6406                           ;main_B1.c: 314: setBuz(10, 300);
  6407  0849  302C               	movlw	44
  6408  084A  0020               	movlb	0	; select bank0
  6409  084B  00A9               	movwf	setBuz@time
  6410  084C  3001               	movlw	1
  6411  084D  00AA               	movwf	setBuz@time+1
  6412  084E  300A               	movlw	10
  6413  084F  3196  2698  3188   	fcall	_setBuz
  6414                           
  6415                           ;main_B1.c: 315: }
  6416                           ;main_B1.c: 316: break;
  6417  0852  286C               	goto	l7734
  6418  0853                     l7726:	
  6419                           ;main_B1.c: 317: case 3:
  6420                           
  6421                           
  6422                           ;main_B1.c: 318: if (getMain_LightsStatus() == 1) {
  6423  0853  3190  20EB  3188   	fcall	_getMain_LightsStatus
  6424  0856  3A01               	xorlw	1
  6425  0857  1D03               	skipz
  6426  0858  286C               	goto	l7734
  6427                           
  6428                           ;main_B1.c: 319: setBuz(5, 300);
  6429  0859  302C               	movlw	44
  6430  085A  0020               	movlb	0	; select bank0
  6431  085B  00A9               	movwf	setBuz@time
  6432  085C  3001               	movlw	1
  6433  085D  00AA               	movwf	setBuz@time+1
  6434  085E  3005               	movlw	5
  6435  085F  3196  2698  3188   	fcall	_setBuz
  6436                           
  6437                           ;main_B1.c: 322: }
  6438                           
  6439                           ;main_B1.c: 320: }
  6440                           ;main_B1.c: 321: break;
  6441  0862  286C               	goto	l7734
  6442  0863                     l7732:	
  6443  0863  0020               	movlb	0	; select bank0
  6444  0864  083C               	movf	setMain_Exception@command,w
  6445                           
  6446                           ; Switch size 1, requested type "space"
  6447                           ; Number of cases is 2, Range of values is 2 to 3
  6448                           ; switch strategies available:
  6449                           ; Name         Instructions Cycles
  6450                           ; simple_byte            7     4 (average)
  6451                           ; direct_byte           13     9 (fixed)
  6452                           ; jumptable            263     9 (fixed)
  6453                           ;	Chosen strategy is simple_byte
  6454  0865  3A02               	xorlw	2	; case 2
  6455  0866  1903               	skipnz
  6456  0867  2843               	goto	l7722
  6457  0868  3A01               	xorlw	1	; case 3
  6458  0869  1903               	skipnz
  6459  086A  2853               	goto	l7726
  6460  086B  286C               	goto	l7734
  6461  086C                     l7734:	
  6462                           
  6463                           ;main_B1.c: 323: setDimmerLights_ErrorClose(status);
  6464  086C  0020               	movlb	0	; select bank0
  6465  086D  083B               	movf	setMain_Exception@status,w
  6466  086E  3197  274A         	fcall	_setDimmerLights_ErrorClose
  6467  0870  0020               	movlb	0	; select bank0
  6468  0871  0008               	return
  6469  0872                     __end_of_setMain_Exception:	
  6470                           
  6471                           	psect	text19
  6472  1CED                     __ptext19:	
  6473 ;; *************** function _getDimmerLights_Line *****************
  6474 ;; Defined at:
  6475 ;;		line 695 in file "../src/Dimmer_B1.c"
  6476 ;; Parameters:    Size  Location     Type
  6477 ;;		None
  6478 ;; Auto vars:     Size  Location     Type
  6479 ;;  line            1    1[BANK0 ] unsigned char 
  6480 ;; Return value:  Size  Location     Type
  6481 ;;                  1    wreg      unsigned char 
  6482 ;; Registers used:
  6483 ;;		wreg, status,2
  6484 ;; Tracked objects:
  6485 ;;		On entry : 0/0
  6486 ;;		On exit  : 0/0
  6487 ;;		Unchanged: 0/0
  6488 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6490 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6491 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6492 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6493 ;;Total ram usage:        2 bytes
  6494 ;; Hardware stack levels used:    1
  6495 ;; Hardware stack levels required when called:    5
  6496 ;; This function calls:
  6497 ;;		Nothing
  6498 ;; This function is called by:
  6499 ;;		_setMain_Exception
  6500 ;; This function uses a non-reentrant model
  6501 ;;
  6502                           
  6503                           
  6504                           ;psect for function _getDimmerLights_Line
  6505  1CED                     _getDimmerLights_Line:	
  6506                           
  6507                           ;Dimmer_B1.c: 696: char line = 0;
  6508                           
  6509                           ;incstack = 0
  6510                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
  6511  1CED  0020               	movlb	0	; select bank0
  6512  1CEE  01A1               	clrf	getDimmerLights_Line@line
  6513                           
  6514                           ;Dimmer_B1.c: 698: if (DimmerLights1.Line == 1) {
  6515  1CEF  0023               	movlb	3	; select bank3
  6516  1CF0  1C47               	btfss	(_DimmerLights1^(0+384)+9),0
  6517  1CF1  2CF6               	goto	l866
  6518                           
  6519                           ;Dimmer_B1.c: 699: line = 1;
  6520  1CF2  0020               	movlb	0	; select bank0
  6521  1CF3  01A1               	clrf	getDimmerLights_Line@line
  6522  1CF4  0AA1               	incf	getDimmerLights_Line@line,f
  6523                           
  6524                           ;Dimmer_B1.c: 700: }
  6525  1CF5  2CFD               	goto	l867
  6526  1CF6                     l866:	
  6527                           
  6528                           ;Dimmer_B1.c: 703: else if (DimmerLights2.Line == 1) {
  6529  1CF6  1C56               	btfss	(_DimmerLights2^(0+384)+9),0
  6530  1CF7  2CFD               	goto	l867
  6531                           
  6532                           ;Dimmer_B1.c: 704: line = 2;
  6533  1CF8  3002               	movlw	2
  6534  1CF9  0020               	movlb	0	; select bank0
  6535  1CFA  00A0               	movwf	??_getDimmerLights_Line
  6536  1CFB  0820               	movf	??_getDimmerLights_Line,w
  6537  1CFC  00A1               	movwf	getDimmerLights_Line@line
  6538  1CFD                     l867:	
  6539                           
  6540                           ;Dimmer_B1.c: 705: }
  6541                           ;Dimmer_B1.c: 712: return line;
  6542  1CFD  0020               	movlb	0	; select bank0
  6543  1CFE  0821               	movf	getDimmerLights_Line@line,w
  6544  1CFF  0008               	return
  6545  1D00                     __end_of_getDimmerLights_Line:	
  6546                           
  6547                           	psect	text20
  6548  1BC0                     __ptext20:	
  6549 ;; *************** function _Switch_Initialization *****************
  6550 ;; Defined at:
  6551 ;;		line 46 in file "../src/Switch_B1.c"
  6552 ;; Parameters:    Size  Location     Type
  6553 ;;		None
  6554 ;; Auto vars:     Size  Location     Type
  6555 ;;		None
  6556 ;; Return value:  Size  Location     Type
  6557 ;;		None               void
  6558 ;; Registers used:
  6559 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6560 ;; Tracked objects:
  6561 ;;		On entry : 0/0
  6562 ;;		On exit  : 0/0
  6563 ;;		Unchanged: 0/0
  6564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6566 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6568 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6569 ;;Total ram usage:        0 bytes
  6570 ;; Hardware stack levels used:    1
  6571 ;; Hardware stack levels required when called:    8
  6572 ;; This function calls:
  6573 ;;		_TouchPower
  6574 ;;		_setSw_Initialization
  6575 ;; This function is called by:
  6576 ;;		_main
  6577 ;; This function uses a non-reentrant model
  6578 ;;
  6579                           
  6580                           
  6581                           ;psect for function _Switch_Initialization
  6582  1BC0                     _Switch_Initialization:	
  6583                           
  6584                           ;Switch_B1.c: 47: TouchPower();
  6585                           
  6586                           ;incstack = 0
  6587                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6588  1BC0  319D  25A3  319B   	fcall	_TouchPower
  6589                           
  6590                           ;Switch_B1.c: 49: WPUB1 = 0;
  6591  1BC3  0024               	movlb	4	; select bank4
  6592  1BC4  108D               	bcf	13,1	;volatile
  6593                           
  6594                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6595  1BC5  3001               	movlw	1
  6596  1BC6  319B  2345  319B   	fcall	_setSw_Initialization
  6597                           
  6598                           ;Switch_B1.c: 62: setSw_Initialization(2);
  6599  1BC9  3002               	movlw	2
  6600  1BCA  319B  2345         	fcall	_setSw_Initialization
  6601  1BCC  0008               	return
  6602  1BCD                     __end_of_Switch_Initialization:	
  6603                           
  6604                           	psect	text21
  6605  1B45                     __ptext21:	
  6606 ;; *************** function _setSw_Initialization *****************
  6607 ;; Defined at:
  6608 ;;		line 109 in file "../src/Switch_B1.c"
  6609 ;; Parameters:    Size  Location     Type
  6610 ;;  sw              1    wreg     unsigned char 
  6611 ;; Auto vars:     Size  Location     Type
  6612 ;;  sw              1    4[BANK0 ] unsigned char 
  6613 ;; Return value:  Size  Location     Type
  6614 ;;		None               void
  6615 ;; Registers used:
  6616 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6617 ;; Tracked objects:
  6618 ;;		On entry : 0/0
  6619 ;;		On exit  : 0/0
  6620 ;;		Unchanged: 0/0
  6621 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6622 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6623 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6624 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6625 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6626 ;;Total ram usage:        1 bytes
  6627 ;; Hardware stack levels used:    1
  6628 ;; Hardware stack levels required when called:    7
  6629 ;; This function calls:
  6630 ;;		_setLED
  6631 ;; This function is called by:
  6632 ;;		_Switch_Initialization
  6633 ;; This function uses a non-reentrant model
  6634 ;;
  6635                           
  6636                           
  6637                           ;psect for function _setSw_Initialization
  6638  1B45                     _setSw_Initialization:	
  6639                           
  6640                           ;incstack = 0
  6641                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6642                           ;setSw_Initialization@sw stored from wreg
  6643  1B45  0020               	movlb	0	; select bank0
  6644  1B46  00A4               	movwf	setSw_Initialization@sw
  6645                           
  6646                           ;Switch_B1.c: 110: setLED(sw, 1);
  6647  1B47  01A2               	clrf	setLED@command
  6648  1B48  0AA2               	incf	setLED@command,f
  6649  1B49  0824               	movf	setSw_Initialization@sw,w
  6650  1B4A  3195  259C         	fcall	_setLED
  6651  1B4C  0008               	return
  6652  1B4D                     __end_of_setSw_Initialization:	
  6653                           
  6654                           	psect	text22
  6655  1DA3                     __ptext22:	
  6656 ;; *************** function _TouchPower *****************
  6657 ;; Defined at:
  6658 ;;		line 10 in file "../src/Switch_B1.c"
  6659 ;; Parameters:    Size  Location     Type
  6660 ;;		None
  6661 ;; Auto vars:     Size  Location     Type
  6662 ;;		None
  6663 ;; Return value:  Size  Location     Type
  6664 ;;		None               void
  6665 ;; Registers used:
  6666 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6667 ;; Tracked objects:
  6668 ;;		On entry : 0/0
  6669 ;;		On exit  : 0/0
  6670 ;;		Unchanged: 0/0
  6671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6675 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6676 ;;Total ram usage:        0 bytes
  6677 ;; Hardware stack levels used:    1
  6678 ;; Hardware stack levels required when called:    6
  6679 ;; This function calls:
  6680 ;;		_Timeout_Counter
  6681 ;;		_set_TimeoutCleared
  6682 ;; This function is called by:
  6683 ;;		_Switch_Initialization
  6684 ;;		_Switch_Main
  6685 ;; This function uses a non-reentrant model
  6686 ;;
  6687                           
  6688                           
  6689                           ;psect for function _TouchPower
  6690  1DA3                     _TouchPower:	
  6691                           
  6692                           ;Switch_B1.c: 11: if (RC5 == 0) {
  6693                           
  6694                           ;incstack = 0
  6695                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6696  1DA3  0020               	movlb	0	; select bank0
  6697  1DA4  1A8E               	btfsc	14,5	;volatile
  6698  1DA5  0008               	return
  6699                           
  6700                           ;Switch_B1.c: 12: if (myMain.PowerON == 1) {
  6701  1DA6  0021               	movlb	1	; select bank1
  6702  1DA7  1C20               	btfss	_myMain^(0+128),0
  6703  1DA8  0008               	return
  6704  1DA9  2DAF               	goto	l7694
  6705  1DAA                     l2369:	
  6706                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6707                           
  6708                           
  6709                           ;Switch_B1.c: 14: RC5 = 1;
  6710  1DAA  0020               	movlb	0	; select bank0
  6711  1DAB  168E               	bsf	14,5	;volatile
  6712                           
  6713                           ;Switch_B1.c: 15: Timeout_Counter();
  6714  1DAC  319D  2564  319D   	fcall	_Timeout_Counter
  6715  1DAF                     l7694:	
  6716  1DAF  0020               	movlb	0	; select bank0
  6717  1DB0  1A8E               	btfsc	14,5	;volatile
  6718  1DB1  2DB5               	goto	l7698
  6719  1DB2  0021               	movlb	1	; select bank1
  6720  1DB3  1D2B               	btfss	(_myMain^(0+128)+11),2
  6721  1DB4  2DAA               	goto	l2369
  6722  1DB5                     l7698:	
  6723                           
  6724                           ;Switch_B1.c: 16: }
  6725                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6726  1DB5  319A  22FA         	fcall	_set_TimeoutCleared
  6727  1DB7  0008               	return
  6728  1DB8                     __end_of_TouchPower:	
  6729                           
  6730                           	psect	text23
  6731  1AE1                     __ptext23:	
  6732 ;; *************** function _RF_Main *****************
  6733 ;; Defined at:
  6734 ;;		line 16 in file "../src/RF_Control_B1.c"
  6735 ;; Parameters:    Size  Location     Type
  6736 ;;		None
  6737 ;; Auto vars:     Size  Location     Type
  6738 ;;		None
  6739 ;; Return value:  Size  Location     Type
  6740 ;;		None               void
  6741 ;; Registers used:
  6742 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6743 ;; Tracked objects:
  6744 ;;		On entry : 0/0
  6745 ;;		On exit  : 0/0
  6746 ;;		Unchanged: 0/0
  6747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6751 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6752 ;;Total ram usage:        0 bytes
  6753 ;; Hardware stack levels used:    1
  6754 ;; Hardware stack levels required when called:   14
  6755 ;; This function calls:
  6756 ;;		_setRF_Main
  6757 ;; This function is called by:
  6758 ;;		_main
  6759 ;; This function uses a non-reentrant model
  6760 ;;
  6761                           
  6762                           
  6763                           ;psect for function _RF_Main
  6764  1AE1                     _RF_Main:	
  6765                           
  6766                           ;RF_Control_B1.c: 18: setRF_Main();
  6767                           
  6768                           ;incstack = 0
  6769                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6770  1AE1  3186  2655         	fcall	_setRF_Main
  6771  1AE3  0008               	return
  6772  1AE4                     __end_of_RF_Main:	
  6773                           
  6774                           	psect	text24
  6775  0655                     __ptext24:	
  6776 ;; *************** function _setRF_Main *****************
  6777 ;; Defined at:
  6778 ;;		line 52 in file "../src/RF_Control_B1.c"
  6779 ;; Parameters:    Size  Location     Type
  6780 ;;		None
  6781 ;; Auto vars:     Size  Location     Type
  6782 ;;  error           1    2[BANK1 ] unsigned char 
  6783 ;;  Receive_OK      1    1[BANK1 ] unsigned char 
  6784 ;;  loop_f          1    0[BANK1 ] unsigned char 
  6785 ;; Return value:  Size  Location     Type
  6786 ;;		None               void
  6787 ;; Registers used:
  6788 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6789 ;; Tracked objects:
  6790 ;;		On entry : 0/0
  6791 ;;		On exit  : 0/0
  6792 ;;		Unchanged: 0/0
  6793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6795 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6796 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6797 ;;      Totals:         0       1       3       0       0       0       0       0       0       0       0       0       
      +0       0
  6798 ;;Total ram usage:        4 bytes
  6799 ;; Hardware stack levels used:    1
  6800 ;; Hardware stack levels required when called:   13
  6801 ;; This function calls:
  6802 ;;		_CC2500_RxData
  6803 ;;		_CC2500_TxData
  6804 ;;		_CC2500_WriteCommand
  6805 ;;		_RF_RxDisable
  6806 ;;		_getBuz_GO
  6807 ;;		_getMain_All_Error_Status
  6808 ;;		_getRF_KeyStatus
  6809 ;;		_getRxData
  6810 ;; This function is called by:
  6811 ;;		_RF_Main
  6812 ;; This function uses a non-reentrant model
  6813 ;;
  6814                           
  6815                           
  6816                           ;psect for function _setRF_Main
  6817  0655                     _setRF_Main:	
  6818                           
  6819                           ;RF_Control_B1.c: 53: char loop_f = 0, Receive_OK = 0, error = 0;
  6820                           
  6821                           ;incstack = 0
  6822                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6823  0655  0021               	movlb	1	; select bank1
  6824  0656  01E8               	clrf	setRF_Main@loop_f^(0+128)
  6825  0657  01E9               	clrf	setRF_Main@Receive_OK^(0+128)
  6826  0658  01EA               	clrf	setRF_Main@error^(0+128)
  6827                           
  6828                           ;RF_Control_B1.c: 54: if (RF1.Enable == 1) {
  6829  0659  1C3A               	btfss	_RF1^(0+128),0
  6830  065A  2F1F               	goto	l1970
  6831                           
  6832                           ;RF_Control_B1.c: 58: if (getBuz_GO() == 0) {
  6833  065B  319C  244A  3186   	fcall	_getBuz_GO
  6834  065E  0020               	movlb	0	; select bank0
  6835  065F  0821               	movf	?_getBuz_GO+1,w
  6836  0660  0420               	iorwf	?_getBuz_GO,w
  6837  0661  1D03               	skipz
  6838  0662  0008               	return
  6839                           
  6840                           ;RF_Control_B1.c: 59: if (getMain_All_Error_Status(0) == 0) {
  6841  0663  3000               	movlw	0
  6842  0664  3191  2179  3186   	fcall	_getMain_All_Error_Status
  6843  0667  3800               	iorlw	0
  6844  0668  1D03               	skipz
  6845  0669  2E7E               	goto	l1972
  6846                           
  6847                           ;RF_Control_B1.c: 61: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6848  066A  319C  245B  3186   	fcall	_getRF_KeyStatus
  6849  066D  3A01               	xorlw	1
  6850  066E  3000               	movlw	0
  6851  066F  1903               	skipnz
  6852  0670  3001               	movlw	1
  6853  0671  0020               	movlb	0	; select bank0
  6854  0672  00ED               	movwf	??_setRF_Main
  6855  0673  0CED               	rrf	??_setRF_Main,f
  6856  0674  0CED               	rrf	??_setRF_Main,f
  6857  0675  0021               	movlb	1	; select bank1
  6858  0676  083A               	movf	_RF1^(0+128),w
  6859  0677  0020               	movlb	0	; select bank0
  6860  0678  066D               	xorwf	??_setRF_Main,w
  6861  0679  397F               	andlw	-129
  6862  067A  066D               	xorwf	??_setRF_Main,w
  6863  067B  0021               	movlb	1	; select bank1
  6864  067C  00BA               	movwf	_RF1^(0+128)
  6865                           
  6866                           ;RF_Control_B1.c: 65: } else {
  6867  067D  2E80               	goto	l1973
  6868  067E                     l1972:	
  6869                           
  6870                           ;RF_Control_B1.c: 69: RF1.Key = 0;
  6871  067E  0021               	movlb	1	; select bank1
  6872  067F  13BA               	bcf	_RF1^(0+128),7
  6873  0680                     l1973:	
  6874                           
  6875                           ;RF_Control_B1.c: 70: }
  6876                           ;RF_Control_B1.c: 72: if (RF1.Key == 1 && RF1.Learn == 0) {
  6877  0680  1BBA               	btfsc	_RF1^(0+128),7
  6878  0681  1B3A               	btfsc	_RF1^(0+128),6
  6879  0682  2E88               	goto	l1974
  6880                           
  6881                           ;RF_Control_B1.c: 73: RF1.Count = 0;
  6882  0683  01BC               	clrf	(_RF1^(0+128)+2)
  6883  0684  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6884                           
  6885                           ;RF_Control_B1.c: 74: RF1.Run = 1;
  6886  0685  14BB               	bsf	(_RF1^(0+128)+1),1
  6887                           
  6888                           ;RF_Control_B1.c: 75: RF1.RxStatus = 0;
  6889  0686  11BA               	bcf	_RF1^(0+128),3
  6890                           
  6891                           ;RF_Control_B1.c: 76: } else {
  6892  0687  0008               	return
  6893  0688                     l1974:	
  6894                           
  6895                           ;RF_Control_B1.c: 77: if (RF1.Run == 1 && RF1.Learn == 0) {
  6896  0688  18BB               	btfsc	(_RF1^(0+128)+1),1
  6897  0689  1B3A               	btfsc	_RF1^(0+128),6
  6898  068A  2E9F               	goto	l7620
  6899                           
  6900                           ;RF_Control_B1.c: 78: RF1.Count++;
  6901  068B  3001               	movlw	1
  6902  068C  07BC               	addwf	(_RF1^(0+128)+2),f
  6903  068D  3000               	movlw	0
  6904  068E  3DBD               	addwfc	((_RF1+1)^(0+128)+2),f
  6905                           
  6906                           ;RF_Control_B1.c: 79: if (RF1.Count == RF1.RunTime) {
  6907  068F  3002               	movlw	2
  6908  0690  3EBA               	addlw	_RF1& (0+255)
  6909  0691  0086               	movwf	6
  6910  0692  0187               	clrf	7
  6911  0693  3F40               	moviw [0]fsr1
  6912  0694  0641               	xorwf	(_RF1^(0+128)+7),w
  6913  0695  1D03               	skipz
  6914  0696  2E99               	goto	u7215
  6915  0697  3F41               	moviw [1]fsr1
  6916  0698  0642               	xorwf	((_RF1+1)^(0+128)+7),w
  6917  0699                     u7215:	
  6918  0699  1D03               	skipz
  6919  069A  2EFD               	goto	l7672
  6920                           
  6921                           ;RF_Control_B1.c: 80: RF1.Count = 0;
  6922  069B  01BC               	clrf	(_RF1^(0+128)+2)
  6923  069C  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6924                           
  6925                           ;RF_Control_B1.c: 81: RF1.Run = 0;
  6926  069D  10BB               	bcf	(_RF1^(0+128)+1),1
  6927                           
  6928                           ;RF_Control_B1.c: 82: }
  6929                           ;RF_Control_B1.c: 83: } else {
  6930  069E  2EFD               	goto	l7672
  6931  069F                     l7620:	
  6932                           
  6933                           ;RF_Control_B1.c: 84: RF1.Count = 0;
  6934  069F  01BC               	clrf	(_RF1^(0+128)+2)
  6935  06A0  01BD               	clrf	((_RF1+1)^(0+128)+2)
  6936                           
  6937                           ;RF_Control_B1.c: 85: RF1.Run = 0;
  6938  06A1  10BB               	bcf	(_RF1^(0+128)+1),1
  6939                           
  6940                           ;RF_Control_B1.c: 87: if (RF1.TransceiveGO == 1 && RF1.Learn == 0) {
  6941  06A2  193A               	btfsc	_RF1^(0+128),2
  6942  06A3  1B3A               	btfsc	_RF1^(0+128),6
  6943  06A4  2EB3               	goto	l1979
  6944                           
  6945                           ;RF_Control_B1.c: 88: RF1.TransceiveGO = 0;
  6946  06A5  113A               	bcf	_RF1^(0+128),2
  6947                           
  6948                           ;RF_Control_B1.c: 89: RF1.RxStatus = 0;
  6949  06A6  11BA               	bcf	_RF1^(0+128),3
  6950                           
  6951                           ;RF_Control_B1.c: 90: RF1.ReceiveGO = 0;
  6952  06A7  10BA               	bcf	_RF1^(0+128),1
  6953                           
  6954                           ;RF_Control_B1.c: 91: RF1.RunTime = 10;
  6955  06A8  300A               	movlw	10
  6956  06A9  00C1               	movwf	(_RF1^(0+128)+7)
  6957  06AA  3000               	movlw	0
  6958  06AB  00C2               	movwf	(_RF1^(0+128)+8)
  6959                           
  6960                           ;RF_Control_B1.c: 97: RF_RxDisable();
  6961  06AC  319B  23EA  3186   	fcall	_RF_RxDisable
  6962                           
  6963                           ;RF_Control_B1.c: 104: CC2500_TxData();
  6964  06AF  3189  218D  3186   	fcall	_CC2500_TxData
  6965                           
  6966                           ;RF_Control_B1.c: 106: } else {
  6967  06B2  2EFD               	goto	l7672
  6968  06B3                     l1979:	
  6969                           
  6970                           ;RF_Control_B1.c: 108: if (RF1.RxStatus == 1) {
  6971  06B3  1DBA               	btfss	_RF1^(0+128),3
  6972  06B4  2EEC               	goto	l1981
  6973                           
  6974                           ;RF_Control_B1.c: 110: CC2500_RxData();
  6975  06B5  318B  2386  3186   	fcall	_CC2500_RxData
  6976                           
  6977                           ;RF_Control_B1.c: 112: if (RF1.ReceiveGO == 1) {
  6978  06B8  0021               	movlb	1	; select bank1
  6979  06B9  1CBA               	btfss	_RF1^(0+128),1
  6980  06BA  2EFD               	goto	l7672
  6981                           
  6982                           ;RF_Control_B1.c: 113: RF1.ReceiveGO = 0;
  6983  06BB  10BA               	bcf	_RF1^(0+128),1
  6984                           
  6985                           ;RF_Control_B1.c: 114: RF1.Correction = 0;
  6986  06BC  12BB               	bcf	(_RF1^(0+128)+1),5
  6987                           
  6988                           ;RF_Control_B1.c: 115: RF1.CorrectionCounter = 0;
  6989  06BD  01C4               	clrf	(_RF1^(0+128)+10)
  6990  06BE  01C5               	clrf	((_RF1+1)^(0+128)+10)
  6991                           
  6992                           ;RF_Control_B1.c: 126: getRxData();
  6993  06BF  318D  2581  3186   	fcall	_getRxData
  6994                           
  6995                           ;RF_Control_B1.c: 127: RF1.Run = 1;
  6996  06C2  0021               	movlb	1	; select bank1
  6997  06C3  14BB               	bsf	(_RF1^(0+128)+1),1
  6998                           
  6999                           ;RF_Control_B1.c: 129: if (RF1.Checked == 1) {
  7000  06C4  1DBB               	btfss	(_RF1^(0+128)+1),3
  7001  06C5  2ED3               	goto	l7656
  7002                           
  7003                           ;RF_Control_B1.c: 130: if (RF1.RunTime > 10) {
  7004  06C6  3000               	movlw	0
  7005  06C7  0242               	subwf	((_RF1+1)^(0+128)+7),w
  7006  06C8  300B               	movlw	11
  7007  06C9  1903               	skipnz
  7008  06CA  0241               	subwf	(_RF1^(0+128)+7),w
  7009  06CB  1C03               	skipc
  7010  06CC  2ED1               	goto	l7654
  7011                           
  7012                           ;RF_Control_B1.c: 131: RF1.RunTime = 10;
  7013  06CD  300A               	movlw	10
  7014  06CE  00C1               	movwf	(_RF1^(0+128)+7)
  7015  06CF  3000               	movlw	0
  7016  06D0  00C2               	movwf	(_RF1^(0+128)+8)
  7017  06D1                     l7654:	
  7018                           
  7019                           ;RF_Control_B1.c: 132: }
  7020                           ;RF_Control_B1.c: 133: RF1.CheckCount = 0;
  7021  06D1  01BE               	clrf	(_RF1^(0+128)+4)
  7022                           
  7023                           ;RF_Control_B1.c: 134: } else {
  7024  06D2  2EFD               	goto	l7672
  7025  06D3                     l7656:	
  7026                           
  7027                           ;RF_Control_B1.c: 135: RF1.CheckCount++;
  7028  06D3  3001               	movlw	1
  7029  06D4  0020               	movlb	0	; select bank0
  7030  06D5  00ED               	movwf	??_setRF_Main
  7031  06D6  086D               	movf	??_setRF_Main,w
  7032  06D7  0021               	movlb	1	; select bank1
  7033  06D8  07BE               	addwf	(_RF1^(0+128)+4),f
  7034                           
  7035                           ;RF_Control_B1.c: 136: if (RF1.CheckCount == 2) {
  7036  06D9  083E               	movf	(_RF1^(0+128)+4),w
  7037  06DA  3A02               	xorlw	2
  7038  06DB  1D03               	skipz
  7039  06DC  2EFD               	goto	l7672
  7040                           
  7041                           ;RF_Control_B1.c: 137: RF1.CheckCount = 0;
  7042  06DD  01BE               	clrf	(_RF1^(0+128)+4)
  7043                           
  7044                           ;RF_Control_B1.c: 138: RF1.CheckedCounter = 0;
  7045  06DE  01BF               	clrf	(_RF1^(0+128)+5)
  7046  06DF  01C0               	clrf	((_RF1+1)^(0+128)+5)
  7047                           
  7048                           ;RF_Control_B1.c: 139: if (RF1.RunTime < 200) {
  7049  06E0  3000               	movlw	0
  7050  06E1  0242               	subwf	((_RF1+1)^(0+128)+7),w
  7051  06E2  30C8               	movlw	200
  7052  06E3  1903               	skipnz
  7053  06E4  0241               	subwf	(_RF1^(0+128)+7),w
  7054  06E5  1803               	skipnc
  7055  06E6  2EFD               	goto	l7672
  7056                           
  7057                           ;RF_Control_B1.c: 140: RF1.RunTime += 10;
  7058  06E7  300A               	movlw	10
  7059  06E8  07C1               	addwf	(_RF1^(0+128)+7),f
  7060  06E9  3000               	movlw	0
  7061  06EA  3DC2               	addwfc	((_RF1+1)^(0+128)+7),f
  7062                           
  7063                           ;RF_Control_B1.c: 141: }
  7064                           ;RF_Control_B1.c: 142: }
  7065                           ;RF_Control_B1.c: 143: }
  7066                           ;RF_Control_B1.c: 144: }
  7067                           ;RF_Control_B1.c: 145: } else {
  7068  06EB  2EFD               	goto	l7672
  7069  06EC                     l1981:	
  7070                           
  7071                           ;RF_Control_B1.c: 147: if (RF1.RxStatus == 0 && RF1.ReceiveGO == 0) {
  7072  06EC  1DBA               	btfss	_RF1^(0+128),3
  7073  06ED  18BA               	btfsc	_RF1^(0+128),1
  7074  06EE  2EFD               	goto	l7672
  7075                           
  7076                           ;RF_Control_B1.c: 148: RF1.RxStatus = 1;
  7077  06EF  15BA               	bsf	_RF1^(0+128),3
  7078                           
  7079                           ;RF_Control_B1.c: 149: RF1.Correction = 1;
  7080  06F0  16BB               	bsf	(_RF1^(0+128)+1),5
  7081                           
  7082                           ;RF_Control_B1.c: 151: CC2500_WriteCommand(0x36);
  7083  06F1  3036               	movlw	54
  7084  06F2  319D  25E6  3186   	fcall	_CC2500_WriteCommand
  7085                           
  7086                           ;RF_Control_B1.c: 153: CC2500_WriteCommand(0x3A);
  7087  06F5  303A               	movlw	58
  7088  06F6  319D  25E6  3186   	fcall	_CC2500_WriteCommand
  7089                           
  7090                           ;RF_Control_B1.c: 154: CC2500_WriteCommand(0x34);
  7091  06F9  3034               	movlw	52
  7092  06FA  319D  25E6  3186   	fcall	_CC2500_WriteCommand
  7093  06FD                     l7672:	
  7094                           
  7095                           ;RF_Control_B1.c: 155: }
  7096                           ;RF_Control_B1.c: 157: }
  7097                           ;RF_Control_B1.c: 158: }
  7098                           ;RF_Control_B1.c: 159: }
  7099                           ;RF_Control_B1.c: 160: if (RF1.RxStatus == 1) {
  7100  06FD  0021               	movlb	1	; select bank1
  7101  06FE  1DBA               	btfss	_RF1^(0+128),3
  7102  06FF  0008               	return
  7103                           
  7104                           ;RF_Control_B1.c: 161: RF1.CheckedCounter++;
  7105  0700  3001               	movlw	1
  7106  0701  07BF               	addwf	(_RF1^(0+128)+5),f
  7107  0702  3000               	movlw	0
  7108  0703  3DC0               	addwfc	((_RF1+1)^(0+128)+5),f
  7109                           
  7110                           ;RF_Control_B1.c: 162: if (RF1.CheckedCounter == 100) {
  7111  0704  3005               	movlw	5
  7112  0705  3EBA               	addlw	_RF1& (0+255)
  7113  0706  0086               	movwf	6
  7114  0707  0187               	clrf	7
  7115  0708  3F40               	moviw [0]fsr1
  7116  0709  3A64               	xorlw	100
  7117  070A  1D03               	skipz
  7118  070B  2F0E               	goto	u7335
  7119  070C  3F41               	moviw [1]fsr1
  7120  070D  3A00               	xorlw	0
  7121  070E                     u7335:	
  7122  070E  1D03               	skipz
  7123  070F  0008               	return
  7124                           
  7125                           ;RF_Control_B1.c: 163: RF1.CheckedCounter = 0;
  7126  0710  01BF               	clrf	(_RF1^(0+128)+5)
  7127  0711  01C0               	clrf	((_RF1+1)^(0+128)+5)
  7128                           
  7129                           ;RF_Control_B1.c: 164: RF1.CheckCount = 0;
  7130  0712  01BE               	clrf	(_RF1^(0+128)+4)
  7131                           
  7132                           ;RF_Control_B1.c: 165: if (RF1.RunTime > 10) {
  7133  0713  3000               	movlw	0
  7134  0714  0242               	subwf	((_RF1+1)^(0+128)+7),w
  7135  0715  300B               	movlw	11
  7136  0716  1903               	skipnz
  7137  0717  0241               	subwf	(_RF1^(0+128)+7),w
  7138  0718  1C03               	skipc
  7139  0719  0008               	return
  7140                           
  7141                           ;RF_Control_B1.c: 166: RF1.RunTime -= 10;
  7142  071A  300A               	movlw	10
  7143  071B  02C1               	subwf	(_RF1^(0+128)+7),f
  7144  071C  3000               	movlw	0
  7145  071D  3BC2               	subwfb	((_RF1+1)^(0+128)+7),f
  7146                           
  7147                           ;RF_Control_B1.c: 167: }
  7148                           ;RF_Control_B1.c: 168: }
  7149                           ;RF_Control_B1.c: 169: }
  7150                           ;RF_Control_B1.c: 177: }
  7151                           ;RF_Control_B1.c: 178: }
  7152                           ;RF_Control_B1.c: 185: } else {
  7153  071E  0008               	return
  7154  071F                     l1970:	
  7155                           
  7156                           ;RF_Control_B1.c: 186: if (myMain.PowerON == 1) {
  7157  071F  1C20               	btfss	_myMain^(0+128),0
  7158  0720  0008               	return
  7159                           
  7160                           ;RF_Control_B1.c: 187: RF1.Enable = 1;
  7161  0721  143A               	bsf	_RF1^(0+128),0
  7162  0722  0008               	return
  7163  0723                     __end_of_setRF_Main:	
  7164                           
  7165                           	psect	text25
  7166  0D81                     __ptext25:	
  7167 ;; *************** function _getRxData *****************
  7168 ;; Defined at:
  7169 ;;		line 281 in file "../src/RF_Control_B1.c"
  7170 ;; Parameters:    Size  Location     Type
  7171 ;;		None
  7172 ;; Auto vars:     Size  Location     Type
  7173 ;;  error           1   76[BANK0 ] unsigned char 
  7174 ;; Return value:  Size  Location     Type
  7175 ;;		None               void
  7176 ;; Registers used:
  7177 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7178 ;; Tracked objects:
  7179 ;;		On entry : 0/0
  7180 ;;		On exit  : 0/0
  7181 ;;		Unchanged: 0/0
  7182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7184 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7185 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7186 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7187 ;;Total ram usage:        2 bytes
  7188 ;; Hardware stack levels used:    1
  7189 ;; Hardware stack levels required when called:   12
  7190 ;; This function calls:
  7191 ;;		_getMain_All_Error_Status
  7192 ;;		_setControl_Lights_Table
  7193 ;;		_setLog_Code
  7194 ;;		_setTxData
  7195 ;; This function is called by:
  7196 ;;		_setRF_Main
  7197 ;; This function uses a non-reentrant model
  7198 ;;
  7199                           
  7200                           
  7201                           ;psect for function _getRxData
  7202  0D81                     _getRxData:	
  7203                           
  7204                           ;RF_Control_B1.c: 282: char error = getMain_All_Error_Status(0);
  7205                           
  7206                           ;incstack = 0
  7207                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7208  0D81  3000               	movlw	0
  7209  0D82  3191  2179  318D   	fcall	_getMain_All_Error_Status
  7210  0D85  0020               	movlb	0	; select bank0
  7211  0D86  00EB               	movwf	??_getRxData
  7212  0D87  086B               	movf	??_getRxData,w
  7213  0D88  00EC               	movwf	getRxData@error
  7214                           
  7215                           ;RF_Control_B1.c: 283: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7216  0D89  0023               	movlb	3	; select bank3
  7217  0D8A  0820               	movf	_RF_Data^(0+384),w
  7218  0D8B  3AAA               	xorlw	170
  7219  0D8C  1D03               	skipz
  7220  0D8D  2DA4               	goto	l7090
  7221  0D8E  0821               	movf	(_RF_Data^(0+384)+1),w
  7222  0D8F  3A01               	xorlw	1
  7223  0D90  1D03               	skipz
  7224  0D91  2DA4               	goto	l7090
  7225                           
  7226                           ;RF_Control_B1.c: 285: product->Data[2] = 0x55;
  7227  0D92  3055               	movlw	85
  7228  0D93  0020               	movlb	0	; select bank0
  7229  0D94  00EB               	movwf	??_getRxData
  7230  0D95  086E               	movf	_product,w
  7231  0D96  3E02               	addlw	2
  7232  0D97  0086               	movwf	6
  7233  0D98  3002               	movlw	2	; select bank4/5
  7234  0D99  0087               	movwf	7
  7235  0D9A  086B               	movf	??_getRxData,w
  7236  0D9B  0081               	movwf	1
  7237                           
  7238                           ;RF_Control_B1.c: 286: setTxData();
  7239  0D9C  3187  2723         	fcall	_setTxData
  7240                           
  7241                           ;RF_Control_B1.c: 287: RF1.RunTime = 10;
  7242  0D9E  300A               	movlw	10
  7243  0D9F  0021               	movlb	1	; select bank1
  7244  0DA0  00C1               	movwf	(_RF1^(0+128)+7)
  7245  0DA1  3000               	movlw	0
  7246  0DA2  00C2               	movwf	(_RF1^(0+128)+8)
  7247                           
  7248                           ;RF_Control_B1.c: 293: } else {
  7249  0DA3  0008               	return
  7250  0DA4                     l7090:	
  7251                           
  7252                           ;RF_Control_B1.c: 295: if (error == 0) {
  7253  0DA4  0020               	movlb	0	; select bank0
  7254  0DA5  08EC               	movf	getRxData@error,f
  7255  0DA6  1D03               	skipz
  7256  0DA7  0008               	return
  7257                           
  7258                           ;RF_Control_B1.c: 296: if (RF1.Learn == 1) {
  7259  0DA8  0021               	movlb	1	; select bank1
  7260  0DA9  1F3A               	btfss	_RF1^(0+128),6
  7261  0DAA  2DBB               	goto	l7102
  7262                           
  7263                           ;RF_Control_B1.c: 297: if (RF_Data[0] == 0x0 && RF_Data[1] == 0x64) {
  7264  0DAB  0023               	movlb	3	; select bank3
  7265  0DAC  08A0               	movf	_RF_Data^(0+384),f
  7266  0DAD  1D03               	skipz
  7267  0DAE  2DB8               	goto	l2021
  7268  0DAF  0821               	movf	(_RF_Data^(0+384)+1),w
  7269  0DB0  3A64               	xorlw	100
  7270  0DB1  1D03               	skipz
  7271  0DB2  2DB8               	goto	l2021
  7272                           
  7273                           ;RF_Control_B1.c: 298: setLog_Code();
  7274  0DB3  3192  224B         	fcall	_setLog_Code
  7275                           
  7276                           ;RF_Control_B1.c: 299: RF1.Checked = 1;
  7277  0DB5  0021               	movlb	1	; select bank1
  7278  0DB6  15BB               	bsf	(_RF1^(0+128)+1),3
  7279                           
  7280                           ;RF_Control_B1.c: 300: } else {
  7281  0DB7  0008               	return
  7282  0DB8                     l2021:	
  7283                           
  7284                           ;RF_Control_B1.c: 301: RF1.Checked = 0;
  7285  0DB8  0021               	movlb	1	; select bank1
  7286  0DB9  11BB               	bcf	(_RF1^(0+128)+1),3
  7287                           
  7288                           ;RF_Control_B1.c: 302: }
  7289                           ;RF_Control_B1.c: 303: } else {
  7290  0DBA  0008               	return
  7291  0DBB                     l7102:	
  7292                           
  7293                           ;RF_Control_B1.c: 304: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7294  0DBB  0023               	movlb	3	; select bank3
  7295  0DBC  08A0               	movf	_RF_Data^(0+384),f
  7296  0DBD  1D03               	skipz
  7297  0DBE  2DF9               	goto	l7124
  7298  0DBF  0821               	movf	(_RF_Data^(0+384)+1),w
  7299  0DC0  3A02               	xorlw	2
  7300  0DC1  1D03               	skipz
  7301  0DC2  2DF9               	goto	l7124
  7302                           
  7303                           ;RF_Control_B1.c: 306: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7304  0DC3  082C               	movf	(_RF_Data^(0+384)+12),w
  7305  0DC4  3AFF               	xorlw	255
  7306  0DC5  1D03               	skipz
  7307  0DC6  2DD3               	goto	l7114
  7308  0DC7  082D               	movf	(_RF_Data^(0+384)+13),w
  7309  0DC8  3AFF               	xorlw	255
  7310  0DC9  1D03               	skipz
  7311  0DCA  2DD3               	goto	l7114
  7312  0DCB  082E               	movf	(_RF_Data^(0+384)+14),w
  7313  0DCC  3AFF               	xorlw	255
  7314  0DCD  1D03               	skipz
  7315  0DCE  2DD3               	goto	l7114
  7316                           
  7317                           ;RF_Control_B1.c: 307: __nop();
  7318  0DCF  0000               	nop
  7319                           
  7320                           ;RF_Control_B1.c: 308: RF1.Checked = 0;
  7321  0DD0  0021               	movlb	1	; select bank1
  7322  0DD1  11BB               	bcf	(_RF1^(0+128)+1),3
  7323                           
  7324                           ;RF_Control_B1.c: 309: } else {
  7325  0DD2  0008               	return
  7326  0DD3                     l7114:	
  7327                           
  7328                           ;RF_Control_B1.c: 310: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7329  0DD3  0020               	movlb	0	; select bank0
  7330  0DD4  086E               	movf	_product,w
  7331  0DD5  3E0C               	addlw	12
  7332  0DD6  0086               	movwf	6
  7333  0DD7  3002               	movlw	2	; select bank4/5
  7334  0DD8  0087               	movwf	7
  7335  0DD9  0023               	movlb	3	; select bank3
  7336  0DDA  082C               	movf	(_RF_Data^(0+384)+12),w
  7337  0DDB  0601               	xorwf	1,w
  7338  0DDC  1D03               	skipz
  7339  0DDD  0008               	return
  7340  0DDE  0020               	movlb	0	; select bank0
  7341  0DDF  086E               	movf	_product,w
  7342  0DE0  3E0D               	addlw	13
  7343  0DE1  0086               	movwf	6
  7344  0DE2  3002               	movlw	2	; select bank4/5
  7345  0DE3  0087               	movwf	7
  7346  0DE4  0023               	movlb	3	; select bank3
  7347  0DE5  082D               	movf	(_RF_Data^(0+384)+13),w
  7348  0DE6  0601               	xorwf	1,w
  7349  0DE7  1D03               	skipz
  7350  0DE8  0008               	return
  7351  0DE9  0020               	movlb	0	; select bank0
  7352  0DEA  086E               	movf	_product,w
  7353  0DEB  3E0E               	addlw	14
  7354  0DEC  0086               	movwf	6
  7355  0DED  3002               	movlw	2	; select bank4/5
  7356  0DEE  0087               	movwf	7
  7357  0DEF  0023               	movlb	3	; select bank3
  7358  0DF0  082E               	movf	(_RF_Data^(0+384)+14),w
  7359  0DF1  0601               	xorwf	1,w
  7360  0DF2  1D03               	skipz
  7361  0DF3  0008               	return
  7362                           
  7363                           ;RF_Control_B1.c: 311: setControl_Lights_Table();
  7364  0DF4  318B  231E         	fcall	_setControl_Lights_Table
  7365                           
  7366                           ;RF_Control_B1.c: 312: RF1.Checked = 1;
  7367  0DF6  0021               	movlb	1	; select bank1
  7368  0DF7  15BB               	bsf	(_RF1^(0+128)+1),3
  7369                           
  7370                           ;RF_Control_B1.c: 313: }
  7371                           ;RF_Control_B1.c: 314: }
  7372                           ;RF_Control_B1.c: 315: } else if (RF_Data[0] == 0xff && RF_Data[1] == 0x02) {
  7373  0DF8  0008               	return
  7374  0DF9                     l7124:	
  7375  0DF9  0023               	movlb	3	; select bank3
  7376  0DFA  0820               	movf	_RF_Data^(0+384),w
  7377  0DFB  3AFF               	xorlw	255
  7378  0DFC  1D03               	skipz
  7379  0DFD  2E04               	goto	l7130
  7380  0DFE  0821               	movf	(_RF_Data^(0+384)+1),w
  7381  0DFF  3A02               	xorlw	2
  7382  0E00  1D03               	skipz
  7383  0E01  2E04               	goto	l7130
  7384                           
  7385                           ;RF_Control_B1.c: 316: __nop();
  7386  0E02  0000               	nop
  7387                           
  7388                           ;RF_Control_B1.c: 317: } else if (RF_Data[0] == 0x0 && RF_Data[1] == 0x65) {
  7389  0E03  0008               	return
  7390  0E04                     l7130:	
  7391  0E04  0023               	movlb	3	; select bank3
  7392  0E05  08A0               	movf	_RF_Data^(0+384),f
  7393  0E06  1D03               	skipz
  7394  0E07  2E0E               	goto	l2031
  7395  0E08  0821               	movf	(_RF_Data^(0+384)+1),w
  7396  0E09  3A65               	xorlw	101
  7397  0E0A  1D03               	skipz
  7398  0E0B  2E0E               	goto	l2031
  7399                           
  7400                           ;RF_Control_B1.c: 318: __nop();
  7401  0E0C  0000               	nop
  7402                           
  7403                           ;RF_Control_B1.c: 319: } else {
  7404  0E0D  0008               	return
  7405  0E0E                     l2031:	
  7406                           
  7407                           ;RF_Control_B1.c: 320: RF1.Checked = 0;
  7408  0E0E  0021               	movlb	1	; select bank1
  7409  0E0F  11BB               	bcf	(_RF1^(0+128)+1),3
  7410                           
  7411                           ;RF_Control_B1.c: 328: ;
  7412                           
  7413                           ;RF_Control_B1.c: 321: }
  7414                           ;RF_Control_B1.c: 326: }
  7415                           ;RF_Control_B1.c: 327: } else {
  7416  0E10  0008               	return
  7417  0E11                     __end_of_getRxData:	
  7418                           
  7419                           	psect	text26
  7420  124B                     __ptext26:	
  7421 ;; *************** function _setLog_Code *****************
  7422 ;; Defined at:
  7423 ;;		line 334 in file "../src/RF_Control_B1.c"
  7424 ;; Parameters:    Size  Location     Type
  7425 ;;		None
  7426 ;; Auto vars:     Size  Location     Type
  7427 ;;		None
  7428 ;; Return value:  Size  Location     Type
  7429 ;;		None               void
  7430 ;; Registers used:
  7431 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7432 ;; Tracked objects:
  7433 ;;		On entry : 0/0
  7434 ;;		On exit  : 0/0
  7435 ;;		Unchanged: 0/0
  7436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7439 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7440 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7441 ;;Total ram usage:        1 bytes
  7442 ;; Hardware stack levels used:    1
  7443 ;; Hardware stack levels required when called:    7
  7444 ;; This function calls:
  7445 ;;		_setBuz
  7446 ;;		_setMemory_LoopSave
  7447 ;;		_setMemory_Modify
  7448 ;; This function is called by:
  7449 ;;		_getRxData
  7450 ;; This function uses a non-reentrant model
  7451 ;;
  7452                           
  7453                           
  7454                           ;psect for function _setLog_Code
  7455  124B                     _setLog_Code:	
  7456                           
  7457                           ;RF_Control_B1.c: 335: RF1.Learn = 0;
  7458                           
  7459                           ;incstack = 0
  7460                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7461  124B  0021               	movlb	1	; select bank1
  7462  124C  133A               	bcf	_RF1^(0+128),6
  7463                           
  7464                           ;RF_Control_B1.c: 336: product->Data[12]=RF_Data[12];
  7465  124D  0023               	movlb	3	; select bank3
  7466  124E  082C               	movf	(_RF_Data^(0+384)+12),w
  7467  124F  0020               	movlb	0	; select bank0
  7468  1250  00AD               	movwf	??_setLog_Code
  7469  1251  086E               	movf	_product,w
  7470  1252  3E0C               	addlw	12
  7471  1253  0086               	movwf	6
  7472  1254  3002               	movlw	2	; select bank4/5
  7473  1255  0087               	movwf	7
  7474  1256  082D               	movf	??_setLog_Code,w
  7475  1257  0081               	movwf	1
  7476                           
  7477                           ;RF_Control_B1.c: 337: product->Data[13]=RF_Data[13];
  7478  1258  0023               	movlb	3	; select bank3
  7479  1259  082D               	movf	(_RF_Data^(0+384)+13),w
  7480  125A  0020               	movlb	0	; select bank0
  7481  125B  00AD               	movwf	??_setLog_Code
  7482  125C  086E               	movf	_product,w
  7483  125D  3E0D               	addlw	13
  7484  125E  0086               	movwf	6
  7485  125F  3002               	movlw	2	; select bank4/5
  7486  1260  0087               	movwf	7
  7487  1261  082D               	movf	??_setLog_Code,w
  7488  1262  0081               	movwf	1
  7489                           
  7490                           ;RF_Control_B1.c: 338: product->Data[14]=RF_Data[14];
  7491  1263  0023               	movlb	3	; select bank3
  7492  1264  082E               	movf	(_RF_Data^(0+384)+14),w
  7493  1265  0020               	movlb	0	; select bank0
  7494  1266  00AD               	movwf	??_setLog_Code
  7495  1267  086E               	movf	_product,w
  7496  1268  3E0E               	addlw	14
  7497  1269  0086               	movwf	6
  7498  126A  3002               	movlw	2	; select bank4/5
  7499  126B  0087               	movwf	7
  7500  126C  082D               	movf	??_setLog_Code,w
  7501  126D  0081               	movwf	1
  7502                           
  7503                           ;RF_Control_B1.c: 339: setBuz(1, 100);
  7504  126E  3064               	movlw	100
  7505  126F  00A9               	movwf	setBuz@time
  7506  1270  3000               	movlw	0
  7507  1271  00AA               	movwf	setBuz@time+1
  7508  1272  3001               	movlw	1
  7509  1273  3196  2698  3192   	fcall	_setBuz
  7510                           
  7511                           ;RF_Control_B1.c: 340: if (myMain.First == 1) {
  7512  1276  0021               	movlb	1	; select bank1
  7513  1277  1EA0               	btfss	_myMain^(0+128),5
  7514  1278  2A7D               	goto	l2037
  7515                           
  7516                           ;RF_Control_B1.c: 341: setMemory_LoopSave(1);
  7517  1279  3001               	movlw	1
  7518  127A  319C  24DA  3192   	fcall	_setMemory_LoopSave
  7519  127D                     l2037:	
  7520                           
  7521                           ;RF_Control_B1.c: 342: }
  7522                           ;RF_Control_B1.c: 343: setMemory_Modify(1);
  7523  127D  3001               	movlw	1
  7524  127E  319C  24C7         	fcall	_setMemory_Modify
  7525  1280  0008               	return
  7526  1281                     __end_of_setLog_Code:	
  7527                           
  7528                           	psect	text27
  7529  1CDA                     __ptext27:	
  7530 ;; *************** function _setMemory_LoopSave *****************
  7531 ;; Defined at:
  7532 ;;		line 1029 in file "../src/MCU_B1.c"
  7533 ;; Parameters:    Size  Location     Type
  7534 ;;  command         1    wreg     unsigned char 
  7535 ;; Auto vars:     Size  Location     Type
  7536 ;;  command         1    1[BANK0 ] unsigned char 
  7537 ;; Return value:  Size  Location     Type
  7538 ;;		None               void
  7539 ;; Registers used:
  7540 ;;		wreg, status,2, status,0
  7541 ;; Tracked objects:
  7542 ;;		On entry : 0/0
  7543 ;;		On exit  : 0/0
  7544 ;;		Unchanged: 0/0
  7545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7547 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7548 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7549 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7550 ;;Total ram usage:        2 bytes
  7551 ;; Hardware stack levels used:    1
  7552 ;; Hardware stack levels required when called:    5
  7553 ;; This function calls:
  7554 ;;		Nothing
  7555 ;; This function is called by:
  7556 ;;		_setLog_Code
  7557 ;; This function uses a non-reentrant model
  7558 ;;
  7559                           
  7560                           
  7561                           ;psect for function _setMemory_LoopSave
  7562  1CDA                     _setMemory_LoopSave:	
  7563                           
  7564                           ;incstack = 0
  7565                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7566                           ;setMemory_LoopSave@command stored from wreg
  7567  1CDA  0020               	movlb	0	; select bank0
  7568  1CDB  00A1               	movwf	setMemory_LoopSave@command
  7569                           
  7570                           ;MCU_B1.c: 1030: Memory.LoopSave = command == 1 ? 1 : 0;
  7571  1CDC  0821               	movf	setMemory_LoopSave@command,w
  7572  1CDD  3A01               	xorlw	1
  7573  1CDE  3000               	movlw	0
  7574  1CDF  1903               	skipnz
  7575  1CE0  3001               	movlw	1
  7576  1CE1  00A0               	movwf	??_setMemory_LoopSave
  7577  1CE2  0DA0               	rlf	??_setMemory_LoopSave,f
  7578  1CE3  0DA0               	rlf	??_setMemory_LoopSave,f
  7579  1CE4  0024               	movlb	4	; select bank4
  7580  1CE5  0844               	movf	(_Memory^(0+512)+36),w
  7581  1CE6  0020               	movlb	0	; select bank0
  7582  1CE7  0620               	xorwf	??_setMemory_LoopSave,w
  7583  1CE8  39FB               	andlw	-5
  7584  1CE9  0620               	xorwf	??_setMemory_LoopSave,w
  7585  1CEA  0024               	movlb	4	; select bank4
  7586  1CEB  00C4               	movwf	(_Memory^(0+512)+36)
  7587  1CEC  0008               	return
  7588  1CED                     __end_of_setMemory_LoopSave:	
  7589                           
  7590                           	psect	text28
  7591  0B1E                     __ptext28:	
  7592 ;; *************** function _setControl_Lights_Table *****************
  7593 ;; Defined at:
  7594 ;;		line 347 in file "../src/RF_Control_B1.c"
  7595 ;; Parameters:    Size  Location     Type
  7596 ;;		None
  7597 ;; Auto vars:     Size  Location     Type
  7598 ;;		None
  7599 ;; Return value:  Size  Location     Type
  7600 ;;		None               void
  7601 ;; Registers used:
  7602 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7603 ;; Tracked objects:
  7604 ;;		On entry : 0/0
  7605 ;;		On exit  : 0/0
  7606 ;;		Unchanged: 0/0
  7607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7611 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7612 ;;Total ram usage:        0 bytes
  7613 ;; Hardware stack levels used:    1
  7614 ;; Hardware stack levels required when called:   11
  7615 ;; This function calls:
  7616 ;;		_setBuz
  7617 ;;		_setDimmerLights_ErrorClose
  7618 ;;		_setRFSW_AdjControl
  7619 ;;		_setRFSW_Control
  7620 ;;		_setTxData
  7621 ;; This function is called by:
  7622 ;;		_getRxData
  7623 ;; This function uses a non-reentrant model
  7624 ;;
  7625                           
  7626                           
  7627                           ;psect for function _setControl_Lights_Table
  7628  0B1E                     _setControl_Lights_Table:	
  7629                           
  7630                           ;RF_Control_B1.c: 348: switch (RF_Data[15]) {
  7631                           
  7632                           ;incstack = 0
  7633                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7634  0B1E  2B6A               	goto	l6704
  7635  0B1F                     l6678:	
  7636                           ;RF_Control_B1.c: 349: case 0x00:
  7637                           
  7638                           
  7639                           ;RF_Control_B1.c: 351: setDimmerLights_ErrorClose(255);
  7640  0B1F  30FF               	movlw	255
  7641  0B20  3197  274A  318B   	fcall	_setDimmerLights_ErrorClose
  7642                           
  7643                           ;RF_Control_B1.c: 353: product->Data[9]=0;
  7644  0B23  0020               	movlb	0	; select bank0
  7645  0B24  086E               	movf	_product,w
  7646  0B25  3E09               	addlw	9
  7647  0B26  0086               	movwf	6
  7648  0B27  3002               	movlw	2	; select bank4/5
  7649  0B28  0087               	movwf	7
  7650  0B29  0181               	clrf	1
  7651                           
  7652                           ;RF_Control_B1.c: 354: product->Data[11]=0;
  7653  0B2A  086E               	movf	_product,w
  7654  0B2B  3E0B               	addlw	11
  7655  0B2C  0086               	movwf	6
  7656  0B2D  3002               	movlw	2	; select bank4/5
  7657  0B2E  0087               	movwf	7
  7658  0B2F  0181               	clrf	1
  7659                           
  7660                           ;RF_Control_B1.c: 355: product->Data[15]=0;
  7661  0B30  086E               	movf	_product,w
  7662  0B31  3E0F               	addlw	15
  7663  0B32  0086               	movwf	6
  7664  0B33  3002               	movlw	2	; select bank4/5
  7665  0B34  0087               	movwf	7
  7666  0B35  0181               	clrf	1
  7667                           
  7668                           ;RF_Control_B1.c: 356: product->Data[17]=0;
  7669  0B36  086E               	movf	_product,w
  7670  0B37  3E11               	addlw	17
  7671  0B38  0086               	movwf	6
  7672  0B39  3002               	movlw	2	; select bank4/5
  7673  0B3A  0087               	movwf	7
  7674  0B3B  0181               	clrf	1
  7675                           
  7676                           ;RF_Control_B1.c: 357: setBuz(1, 100);
  7677  0B3C  3064               	movlw	100
  7678  0B3D  00A9               	movwf	setBuz@time
  7679  0B3E  3000               	movlw	0
  7680  0B3F  00AA               	movwf	setBuz@time+1
  7681  0B40  3001               	movlw	1
  7682  0B41  3196  2698         	fcall	_setBuz
  7683                           
  7684                           ;RF_Control_B1.c: 359: break;
  7685  0B43  0008               	return
  7686  0B44                     l6690:	
  7687                           ;RF_Control_B1.c: 360: case 0x20:
  7688                           
  7689                           
  7690                           ;RF_Control_B1.c: 361: product->Data[9]=0;
  7691  0B44  0020               	movlb	0	; select bank0
  7692  0B45  086E               	movf	_product,w
  7693  0B46  3E09               	addlw	9
  7694  0B47  0086               	movwf	6
  7695  0B48  3002               	movlw	2	; select bank4/5
  7696  0B49  0087               	movwf	7
  7697  0B4A  0181               	clrf	1
  7698                           
  7699                           ;RF_Control_B1.c: 362: product->Data[11]=0;
  7700  0B4B  086E               	movf	_product,w
  7701  0B4C  3E0B               	addlw	11
  7702  0B4D  0086               	movwf	6
  7703  0B4E  3002               	movlw	2	; select bank4/5
  7704  0B4F  0087               	movwf	7
  7705  0B50  0181               	clrf	1
  7706                           
  7707                           ;RF_Control_B1.c: 363: product->Data[17]=0;
  7708  0B51  086E               	movf	_product,w
  7709  0B52  3E11               	addlw	17
  7710  0B53  0086               	movwf	6
  7711  0B54  3002               	movlw	2	; select bank4/5
  7712  0B55  0087               	movwf	7
  7713  0B56  0181               	clrf	1
  7714                           
  7715                           ;RF_Control_B1.c: 364: setTxData();
  7716  0B57  3187  2723         	fcall	_setTxData
  7717                           
  7718                           ;RF_Control_B1.c: 365: break;
  7719  0B59  0008               	return
  7720  0B5A                     l6694:	
  7721                           ;RF_Control_B1.c: 366: case 0x01:
  7722                           
  7723                           
  7724                           ;RF_Control_B1.c: 368: setRFSW_Control(1);
  7725  0B5A  3001               	movlw	1
  7726  0B5B  3195  254D         	fcall	_setRFSW_Control
  7727                           
  7728                           ;RF_Control_B1.c: 370: break;
  7729  0B5D  0008               	return
  7730  0B5E                     l6696:	
  7731                           ;RF_Control_B1.c: 371: case 0x02:
  7732                           
  7733                           
  7734                           ;RF_Control_B1.c: 373: setRFSW_Control(2);
  7735  0B5E  3002               	movlw	2
  7736  0B5F  3195  254D         	fcall	_setRFSW_Control
  7737                           
  7738                           ;RF_Control_B1.c: 380: break;
  7739                           
  7740                           ;RF_Control_B1.c: 376: case 0x03:
  7741                           
  7742                           ;RF_Control_B1.c: 375: break;
  7743  0B61  0008               	return
  7744  0B62                     l6698:	
  7745                           ;RF_Control_B1.c: 381: case 0x11:
  7746                           
  7747                           
  7748                           ;RF_Control_B1.c: 384: setRFSW_AdjControl(1);
  7749  0B62  3001               	movlw	1
  7750  0B63  3193  23A8         	fcall	_setRFSW_AdjControl
  7751                           
  7752                           ;RF_Control_B1.c: 387: break;
  7753  0B65  0008               	return
  7754  0B66                     l6700:	
  7755                           ;RF_Control_B1.c: 388: case 0x21:
  7756                           
  7757                           
  7758                           ;RF_Control_B1.c: 391: setRFSW_AdjControl(2);
  7759  0B66  3002               	movlw	2
  7760  0B67  3193  23A8         	fcall	_setRFSW_AdjControl
  7761                           
  7762                           ;RF_Control_B1.c: 402: }
  7763                           
  7764                           ;RF_Control_B1.c: 401: break;
  7765                           
  7766                           ;RF_Control_B1.c: 395: case 0x31:
  7767                           
  7768                           ;RF_Control_B1.c: 394: break;
  7769  0B69  0008               	return
  7770  0B6A                     l6704:	
  7771  0B6A  0023               	movlb	3	; select bank3
  7772  0B6B  082F               	movf	(_RF_Data^(0+384)+15),w
  7773                           
  7774                           ; Switch size 1, requested type "space"
  7775                           ; Number of cases is 8, Range of values is 0 to 49
  7776                           ; switch strategies available:
  7777                           ; Name         Instructions Cycles
  7778                           ; simple_byte           25    13 (average)
  7779                           ; direct_byte          106     6 (fixed)
  7780                           ; jumptable            260     6 (fixed)
  7781                           ;	Chosen strategy is simple_byte
  7782  0B6C  3A00               	xorlw	0	; case 0
  7783  0B6D  1903               	skipnz
  7784  0B6E  2B1F               	goto	l6678
  7785  0B6F  3A01               	xorlw	1	; case 1
  7786  0B70  1903               	skipnz
  7787  0B71  2B5A               	goto	l6694
  7788  0B72  3A03               	xorlw	3	; case 2
  7789  0B73  1903               	skipnz
  7790  0B74  2B5E               	goto	l6696
  7791  0B75  3A01               	xorlw	1	; case 3
  7792  0B76  1903               	skipnz
  7793  0B77  2B85               	goto	l2051
  7794  0B78  3A12               	xorlw	18	; case 17
  7795  0B79  1903               	skipnz
  7796  0B7A  2B62               	goto	l6698
  7797  0B7B  3A31               	xorlw	49	; case 32
  7798  0B7C  1903               	skipnz
  7799  0B7D  2B44               	goto	l6690
  7800  0B7E  3A01               	xorlw	1	; case 33
  7801  0B7F  1903               	skipnz
  7802  0B80  2B66               	goto	l6700
  7803  0B81  3A10               	xorlw	16	; case 49
  7804  0B82  1903               	skipnz
  7805  0B83  2B85               	goto	l2051
  7806  0B84  2B85               	goto	l2051
  7807  0B85                     l2051:	
  7808  0B85  0008               	return
  7809  0B86                     __end_of_setControl_Lights_Table:	
  7810                           
  7811                           	psect	text29
  7812  154D                     __ptext29:	
  7813 ;; *************** function _setRFSW_Control *****************
  7814 ;; Defined at:
  7815 ;;		line 429 in file "../src/RF_Control_B1.c"
  7816 ;; Parameters:    Size  Location     Type
  7817 ;;  sw              1    wreg     unsigned char 
  7818 ;; Auto vars:     Size  Location     Type
  7819 ;;  sw              1   19[BANK0 ] unsigned char 
  7820 ;;  status          1   18[BANK0 ] unsigned char 
  7821 ;; Return value:  Size  Location     Type
  7822 ;;		None               void
  7823 ;; Registers used:
  7824 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7825 ;; Tracked objects:
  7826 ;;		On entry : 0/0
  7827 ;;		On exit  : 0/0
  7828 ;;		Unchanged: 0/0
  7829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7831 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7832 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7833 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7834 ;;Total ram usage:        3 bytes
  7835 ;; Hardware stack levels used:    1
  7836 ;; Hardware stack levels required when called:    9
  7837 ;; This function calls:
  7838 ;;		_getDelayOff_GO
  7839 ;;		_getDimmerLights_Status
  7840 ;;		_setBuz
  7841 ;;		_setDelayOff_GO
  7842 ;;		_setDimmerLights_SwOff
  7843 ;;		_setDimmerLights_SwOn
  7844 ;;		_setRF_DimmerLights
  7845 ;;		_setTxData
  7846 ;; This function is called by:
  7847 ;;		_setControl_Lights_Table
  7848 ;; This function uses a non-reentrant model
  7849 ;;
  7850                           
  7851                           
  7852                           ;psect for function _setRFSW_Control
  7853  154D                     _setRFSW_Control:	
  7854                           
  7855                           ;incstack = 0
  7856                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7857                           ;setRFSW_Control@sw stored from wreg
  7858  154D  0020               	movlb	0	; select bank0
  7859  154E  00B3               	movwf	setRFSW_Control@sw
  7860                           
  7861                           ;RF_Control_B1.c: 430: char status = 0;
  7862  154F  01B2               	clrf	setRFSW_Control@status
  7863                           
  7864                           ;RF_Control_B1.c: 433: if (RF_Data[16] == 0x80) {
  7865  1550  0023               	movlb	3	; select bank3
  7866  1551  0830               	movf	(_RF_Data^(0+384)+16),w
  7867  1552  3A80               	xorlw	128
  7868  1553  1D03               	skipz
  7869  1554  2D80               	goto	l6502
  7870                           
  7871                           ;RF_Control_B1.c: 434: setDelayOff_GO(sw, 1, RF_Data[17]);
  7872  1555  0020               	movlb	0	; select bank0
  7873  1556  01AA               	clrf	setDelayOff_GO@command
  7874  1557  0AAA               	incf	setDelayOff_GO@command,f
  7875  1558  0023               	movlb	3	; select bank3
  7876  1559  0831               	movf	(_RF_Data^(0+384)+17),w
  7877  155A  0020               	movlb	0	; select bank0
  7878  155B  00B1               	movwf	??_setRFSW_Control
  7879  155C  0831               	movf	??_setRFSW_Control,w
  7880  155D  00AB               	movwf	setDelayOff_GO@value
  7881  155E  0833               	movf	setRFSW_Control@sw,w
  7882  155F  3188  2072  3195   	fcall	_setDelayOff_GO
  7883                           
  7884                           ;RF_Control_B1.c: 435: if (getDimmerLights_Status(sw) == 1) {
  7885  1562  0020               	movlb	0	; select bank0
  7886  1563  0833               	movf	setRFSW_Control@sw,w
  7887  1564  319C  2408  3195   	fcall	_getDimmerLights_Status
  7888  1567  3A01               	xorlw	1
  7889  1568  1D03               	skipz
  7890  1569  2D8F               	goto	l6506
  7891                           
  7892                           ;RF_Control_B1.c: 436: setBuz(1, 100);
  7893  156A  3064               	movlw	100
  7894  156B  0020               	movlb	0	; select bank0
  7895  156C  00A9               	movwf	setBuz@time
  7896  156D  3000               	movlw	0
  7897  156E  00AA               	movwf	setBuz@time+1
  7898  156F  3001               	movlw	1
  7899  1570  3196  2698  3195   	fcall	_setBuz
  7900                           
  7901                           ;RF_Control_B1.c: 437: status = 1;
  7902  1573  0020               	movlb	0	; select bank0
  7903  1574  01B2               	clrf	setRFSW_Control@status
  7904  1575  0AB2               	incf	setRFSW_Control@status,f
  7905                           
  7906                           ;RF_Control_B1.c: 438: setRF_DimmerLights(sw, 1);
  7907  1576  01A0               	clrf	setRF_DimmerLights@on
  7908  1577  0AA0               	incf	setRF_DimmerLights@on,f
  7909  1578  0833               	movf	setRFSW_Control@sw,w
  7910  1579  3197  27A4  3195   	fcall	_setRF_DimmerLights
  7911                           
  7912                           ;RF_Control_B1.c: 439: setTxData();
  7913  157C  3187  2723  3195   	fcall	_setTxData
  7914                           
  7915                           ;RF_Control_B1.c: 441: }
  7916                           ;RF_Control_B1.c: 442: } else {
  7917  157F  2D8F               	goto	l6506
  7918  1580                     l6502:	
  7919                           
  7920                           ;RF_Control_B1.c: 444: if (getDelayOff_GO(sw) == 1) {
  7921  1580  0020               	movlb	0	; select bank0
  7922  1581  0833               	movf	setRFSW_Control@sw,w
  7923  1582  319C  2418  3195   	fcall	_getDelayOff_GO
  7924  1585  3A01               	xorlw	1
  7925  1586  1D03               	skipz
  7926  1587  2D8F               	goto	l6506
  7927                           
  7928                           ;RF_Control_B1.c: 445: setDelayOff_GO(sw, 0, 0);
  7929  1588  0020               	movlb	0	; select bank0
  7930  1589  01AA               	clrf	setDelayOff_GO@command
  7931  158A  01AB               	clrf	setDelayOff_GO@value
  7932  158B  0833               	movf	setRFSW_Control@sw,w
  7933  158C  3188  2072  3195   	fcall	_setDelayOff_GO
  7934  158F                     l6506:	
  7935                           
  7936                           ;RF_Control_B1.c: 446: }
  7937                           ;RF_Control_B1.c: 448: }
  7938                           ;RF_Control_B1.c: 449: if (status == 0) {
  7939  158F  0020               	movlb	0	; select bank0
  7940  1590  08B2               	movf	setRFSW_Control@status,f
  7941  1591  1D03               	skipz
  7942  1592  0008               	return
  7943                           
  7944                           ;RF_Control_B1.c: 451: setDimmerLights_SwOn(sw);
  7945  1593  0833               	movf	setRFSW_Control@sw,w
  7946  1594  3192  22EF  3195   	fcall	_setDimmerLights_SwOn
  7947                           
  7948                           ;RF_Control_B1.c: 452: setDimmerLights_SwOff(sw);
  7949  1597  0020               	movlb	0	; select bank0
  7950  1598  0833               	movf	setRFSW_Control@sw,w
  7951  1599  3194  246C         	fcall	_setDimmerLights_SwOff
  7952  159B  0008               	return
  7953  159C                     __end_of_setRFSW_Control:	
  7954                           
  7955                           	psect	text30
  7956  12EF                     __ptext30:	
  7957 ;; *************** function _setDimmerLights_SwOn *****************
  7958 ;; Defined at:
  7959 ;;		line 505 in file "../src/Dimmer_B1.c"
  7960 ;; Parameters:    Size  Location     Type
  7961 ;;  sw              1    wreg     unsigned char 
  7962 ;; Auto vars:     Size  Location     Type
  7963 ;;  sw              1   15[BANK0 ] unsigned char 
  7964 ;;  idle            1   14[BANK0 ] unsigned char 
  7965 ;; Return value:  Size  Location     Type
  7966 ;;		None               void
  7967 ;; Registers used:
  7968 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7969 ;; Tracked objects:
  7970 ;;		On entry : 0/0
  7971 ;;		On exit  : 0/0
  7972 ;;		Unchanged: 0/0
  7973 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7974 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7975 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7976 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7977 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7978 ;;Total ram usage:        3 bytes
  7979 ;; Hardware stack levels used:    1
  7980 ;; Hardware stack levels required when called:    7
  7981 ;; This function calls:
  7982 ;;		_DimmerLightsPointSelect
  7983 ;;		_getAll_DimmerLights_AdjGO
  7984 ;;		_setBuz
  7985 ;;		_setDimmerLights_Trigger
  7986 ;; This function is called by:
  7987 ;;		_setRFSW_Control
  7988 ;;		_setSw_Main
  7989 ;; This function uses a non-reentrant model
  7990 ;;
  7991                           
  7992                           
  7993                           ;psect for function _setDimmerLights_SwOn
  7994  12EF                     _setDimmerLights_SwOn:	
  7995                           
  7996                           ;incstack = 0
  7997                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7998                           ;setDimmerLights_SwOn@sw stored from wreg
  7999  12EF  0020               	movlb	0	; select bank0
  8000  12F0  00AF               	movwf	setDimmerLights_SwOn@sw
  8001                           
  8002                           ;Dimmer_B1.c: 506: DimmerLightsPointSelect(sw);
  8003  12F1  082F               	movf	setDimmerLights_SwOn@sw,w
  8004  12F2  319C  24B4  3192   	fcall	_DimmerLightsPointSelect
  8005                           
  8006                           ;Dimmer_B1.c: 507: char idle = 0;
  8007  12F5  0020               	movlb	0	; select bank0
  8008  12F6  01AE               	clrf	setDimmerLights_SwOn@idle
  8009                           
  8010                           ;Dimmer_B1.c: 509: idle = getAll_DimmerLights_AdjGO() == 1 ? 1 : 0;
  8011  12F7  319C  2439  3192   	fcall	_getAll_DimmerLights_AdjGO
  8012  12FA  3A01               	xorlw	1
  8013  12FB  3000               	movlw	0
  8014  12FC  1903               	skipnz
  8015  12FD  3001               	movlw	1
  8016  12FE  0020               	movlb	0	; select bank0
  8017  12FF  00AD               	movwf	??_setDimmerLights_SwOn
  8018  1300  082D               	movf	??_setDimmerLights_SwOn,w
  8019  1301  00AE               	movwf	setDimmerLights_SwOn@idle
  8020                           
  8021                           ;Dimmer_B1.c: 511: if (idle == 0) {
  8022  1302  08AE               	movf	setDimmerLights_SwOn@idle,f
  8023  1303  1D03               	skipz
  8024  1304  0008               	return
  8025                           
  8026                           ;Dimmer_B1.c: 512: DimmerLights->SwFlag = 1;
  8027  1305  086F               	movf	_DimmerLights,w
  8028  1306  3E09               	addlw	9
  8029  1307  0086               	movwf	6
  8030  1308  3001               	movlw	1	; select bank2/3
  8031  1309  0087               	movwf	7
  8032  130A  1701               	bsf	1,6
  8033                           
  8034                           ;Dimmer_B1.c: 513: setBuz(1, 100);
  8035  130B  3064               	movlw	100
  8036  130C  00A9               	movwf	setBuz@time
  8037  130D  3000               	movlw	0
  8038  130E  00AA               	movwf	setBuz@time+1
  8039  130F  3001               	movlw	1
  8040  1310  3196  2698  3192   	fcall	_setBuz
  8041                           
  8042                           ;Dimmer_B1.c: 514: if (DimmerLights->Status == 0) {
  8043  1313  0020               	movlb	0	; select bank0
  8044  1314  086F               	movf	_DimmerLights,w
  8045  1315  0086               	movwf	6
  8046  1316  3001               	movlw	1	; select bank2/3
  8047  1317  0087               	movwf	7
  8048  1318  1A81               	btfsc	1,5
  8049  1319  2B25               	goto	l6310
  8050                           
  8051                           ;Dimmer_B1.c: 515: DimmerLights->Status = 1;
  8052  131A  086F               	movf	_DimmerLights,w
  8053  131B  0086               	movwf	6
  8054  131C  3001               	movlw	1	; select bank2/3
  8055  131D  0087               	movwf	7
  8056  131E  1681               	bsf	1,5
  8057                           
  8058                           ;Dimmer_B1.c: 516: setDimmerLights_Trigger(sw, 1);
  8059  131F  01A2               	clrf	setDimmerLights_Trigger@command
  8060  1320  0AA2               	incf	setDimmerLights_Trigger@command,f
  8061  1321  082F               	movf	setDimmerLights_SwOn@sw,w
  8062  1322  3187  27E2         	fcall	_setDimmerLights_Trigger
  8063                           
  8064                           ;Dimmer_B1.c: 517: } else {
  8065  1324  0008               	return
  8066  1325                     l6310:	
  8067                           
  8068                           ;Dimmer_B1.c: 518: DimmerLights->Status = 0;
  8069  1325  0020               	movlb	0	; select bank0
  8070  1326  086F               	movf	_DimmerLights,w
  8071  1327  0086               	movwf	6
  8072  1328  3001               	movlw	1	; select bank2/3
  8073  1329  0087               	movwf	7
  8074  132A  1281               	bcf	1,5
  8075  132B  0008               	return
  8076  132C                     __end_of_setDimmerLights_SwOn:	
  8077                           
  8078                           	psect	text31
  8079  13A8                     __ptext31:	
  8080 ;; *************** function _setRFSW_AdjControl *****************
  8081 ;; Defined at:
  8082 ;;		line 458 in file "../src/RF_Control_B1.c"
  8083 ;; Parameters:    Size  Location     Type
  8084 ;;  sw              1    wreg     unsigned char 
  8085 ;; Auto vars:     Size  Location     Type
  8086 ;;  sw              1   74[BANK0 ] unsigned char 
  8087 ;;  status          1   73[BANK0 ] unsigned char 
  8088 ;; Return value:  Size  Location     Type
  8089 ;;		None               void
  8090 ;; Registers used:
  8091 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8092 ;; Tracked objects:
  8093 ;;		On entry : 0/0
  8094 ;;		On exit  : 0/0
  8095 ;;		Unchanged: 0/0
  8096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8097 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8098 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8099 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8100 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8101 ;;Total ram usage:        4 bytes
  8102 ;; Hardware stack levels used:    1
  8103 ;; Hardware stack levels required when called:   10
  8104 ;; This function calls:
  8105 ;;		_getDimmerLights_Status
  8106 ;;		_setMemory_Modify
  8107 ;;		_setRF_DimmerValue
  8108 ;;		_setTxData
  8109 ;; This function is called by:
  8110 ;;		_setControl_Lights_Table
  8111 ;; This function uses a non-reentrant model
  8112 ;;
  8113                           
  8114                           
  8115                           ;psect for function _setRFSW_AdjControl
  8116  13A8                     _setRFSW_AdjControl:	
  8117                           
  8118                           ;incstack = 0
  8119                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8120                           ;setRFSW_AdjControl@sw stored from wreg
  8121  13A8  0020               	movlb	0	; select bank0
  8122  13A9  00EA               	movwf	setRFSW_AdjControl@sw
  8123                           
  8124                           ;RF_Control_B1.c: 459: char status = 0;
  8125  13AA  01E9               	clrf	setRFSW_AdjControl@status
  8126                           
  8127                           ;RF_Control_B1.c: 461: status = getDimmerLights_Status(sw);
  8128  13AB  086A               	movf	setRFSW_AdjControl@sw,w
  8129  13AC  319C  2408  3193   	fcall	_getDimmerLights_Status
  8130  13AF  0020               	movlb	0	; select bank0
  8131  13B0  00E7               	movwf	??_setRFSW_AdjControl
  8132  13B1  0867               	movf	??_setRFSW_AdjControl,w
  8133  13B2  00E9               	movwf	setRFSW_AdjControl@status
  8134                           
  8135                           ;RF_Control_B1.c: 464: if (status == 1) {
  8136  13B3  0869               	movf	setRFSW_AdjControl@status,w
  8137  13B4  3A01               	xorlw	1
  8138  13B5  1D03               	skipz
  8139  13B6  2BC1               	goto	l6520
  8140                           
  8141                           ;RF_Control_B1.c: 465: setMemory_Modify(1);
  8142  13B7  3001               	movlw	1
  8143  13B8  319C  24C7  3193   	fcall	_setMemory_Modify
  8144                           
  8145                           ;RF_Control_B1.c: 466: setRF_DimmerValue(sw);
  8146  13BB  0020               	movlb	0	; select bank0
  8147  13BC  086A               	movf	setRFSW_AdjControl@sw,w
  8148  13BD  3191  2147  3193   	fcall	_setRF_DimmerValue
  8149                           
  8150                           ;RF_Control_B1.c: 467: } else {
  8151  13C0  2BD3               	goto	l2063
  8152  13C1                     l6520:	
  8153                           
  8154                           ;RF_Control_B1.c: 468: product->Data[9]=product->Data[20 + sw];
  8155  13C1  0020               	movlb	0	; select bank0
  8156  13C2  086A               	movf	setRFSW_AdjControl@sw,w
  8157  13C3  3E14               	addlw	20
  8158  13C4  076E               	addwf	_product,w
  8159  13C5  00E7               	movwf	??_setRFSW_AdjControl
  8160  13C6  0867               	movf	??_setRFSW_AdjControl,w
  8161  13C7  0086               	movwf	6
  8162  13C8  3002               	movlw	2	; select bank4/5
  8163  13C9  0087               	movwf	7
  8164  13CA  0801               	movf	1,w
  8165  13CB  00E8               	movwf	??_setRFSW_AdjControl+1
  8166  13CC  086E               	movf	_product,w
  8167  13CD  3E09               	addlw	9
  8168  13CE  0086               	movwf	6
  8169  13CF  3002               	movlw	2	; select bank4/5
  8170  13D0  0087               	movwf	7
  8171  13D1  0868               	movf	??_setRFSW_AdjControl+1,w
  8172  13D2  0081               	movwf	1
  8173  13D3                     l2063:	
  8174                           
  8175                           ;RF_Control_B1.c: 469: }
  8176                           ;RF_Control_B1.c: 470: product->Data[17]=product->Data[26 + sw];
  8177  13D3  0020               	movlb	0	; select bank0
  8178  13D4  086A               	movf	setRFSW_AdjControl@sw,w
  8179  13D5  3E1A               	addlw	26
  8180  13D6  076E               	addwf	_product,w
  8181  13D7  00E7               	movwf	??_setRFSW_AdjControl
  8182  13D8  0867               	movf	??_setRFSW_AdjControl,w
  8183  13D9  0086               	movwf	6
  8184  13DA  3002               	movlw	2	; select bank4/5
  8185  13DB  0087               	movwf	7
  8186  13DC  0801               	movf	1,w
  8187  13DD  00E8               	movwf	??_setRFSW_AdjControl+1
  8188  13DE  086E               	movf	_product,w
  8189  13DF  3E11               	addlw	17
  8190  13E0  0086               	movwf	6
  8191  13E1  3002               	movlw	2	; select bank4/5
  8192  13E2  0087               	movwf	7
  8193  13E3  0868               	movf	??_setRFSW_AdjControl+1,w
  8194  13E4  0081               	movwf	1
  8195                           
  8196                           ;RF_Control_B1.c: 471: setTxData();
  8197  13E5  3187  2723         	fcall	_setTxData
  8198  13E7  0008               	return
  8199  13E8                     __end_of_setRFSW_AdjControl:	
  8200                           
  8201                           	psect	text32
  8202  1147                     __ptext32:	
  8203 ;; *************** function _setRF_DimmerValue *****************
  8204 ;; Defined at:
  8205 ;;		line 476 in file "../src/RF_Control_B1.c"
  8206 ;; Parameters:    Size  Location     Type
  8207 ;;  lights          1    wreg     unsigned char 
  8208 ;; Auto vars:     Size  Location     Type
  8209 ;;  lights          1   70[BANK0 ] unsigned char 
  8210 ;; Return value:  Size  Location     Type
  8211 ;;		None               void
  8212 ;; Registers used:
  8213 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8214 ;; Tracked objects:
  8215 ;;		On entry : 0/0
  8216 ;;		On exit  : 0/0
  8217 ;;		Unchanged: 0/0
  8218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8220 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8221 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8222 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8223 ;;Total ram usage:        3 bytes
  8224 ;; Hardware stack levels used:    1
  8225 ;; Hardware stack levels required when called:    9
  8226 ;; This function calls:
  8227 ;;		_setDimmerLights_AdjRF
  8228 ;; This function is called by:
  8229 ;;		_setRFSW_AdjControl
  8230 ;; This function uses a non-reentrant model
  8231 ;;
  8232                           
  8233                           
  8234                           ;psect for function _setRF_DimmerValue
  8235  1147                     _setRF_DimmerValue:	
  8236                           
  8237                           ;incstack = 0
  8238                           ; Regs used in _setRF_DimmerValue: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8239                           ;setRF_DimmerValue@lights stored from wreg
  8240  1147  0020               	movlb	0	; select bank0
  8241  1148  00E6               	movwf	setRF_DimmerValue@lights
  8242                           
  8243                           ;RF_Control_B1.c: 477: if (RF_Data[9] > 0x64) {
  8244  1149  3065               	movlw	101
  8245  114A  0023               	movlb	3	; select bank3
  8246  114B  0229               	subwf	(_RF_Data^(0+384)+9),w
  8247  114C  1C03               	skipc
  8248  114D  2954               	goto	l6398
  8249                           
  8250                           ;RF_Control_B1.c: 478: RF_Data[9] = 0x64;
  8251  114E  3064               	movlw	100
  8252  114F  0020               	movlb	0	; select bank0
  8253  1150  00E4               	movwf	??_setRF_DimmerValue
  8254  1151  0864               	movf	??_setRF_DimmerValue,w
  8255  1152  0023               	movlb	3	; select bank3
  8256  1153  00A9               	movwf	(_RF_Data^(0+384)+9)
  8257  1154                     l6398:	
  8258                           
  8259                           ;RF_Control_B1.c: 479: }
  8260                           ;RF_Control_B1.c: 480: product->Data[9]=RF_Data[9];
  8261  1154  0829               	movf	(_RF_Data^(0+384)+9),w
  8262  1155  0020               	movlb	0	; select bank0
  8263  1156  00E4               	movwf	??_setRF_DimmerValue
  8264  1157  086E               	movf	_product,w
  8265  1158  3E09               	addlw	9
  8266  1159  0086               	movwf	6
  8267  115A  3002               	movlw	2	; select bank4/5
  8268  115B  0087               	movwf	7
  8269  115C  0864               	movf	??_setRF_DimmerValue,w
  8270  115D  0081               	movwf	1
  8271                           
  8272                           ;RF_Control_B1.c: 481: product->Data[11]=lights;
  8273  115E  0866               	movf	setRF_DimmerValue@lights,w
  8274  115F  00E4               	movwf	??_setRF_DimmerValue
  8275  1160  086E               	movf	_product,w
  8276  1161  3E0B               	addlw	11
  8277  1162  0086               	movwf	6
  8278  1163  3002               	movlw	2	; select bank4/5
  8279  1164  0087               	movwf	7
  8280  1165  0864               	movf	??_setRF_DimmerValue,w
  8281  1166  0081               	movwf	1
  8282                           
  8283                           ;RF_Control_B1.c: 482: product->Data[(20 + lights)]=RF_Data[9];
  8284  1167  0023               	movlb	3	; select bank3
  8285  1168  0829               	movf	(_RF_Data^(0+384)+9),w
  8286  1169  0020               	movlb	0	; select bank0
  8287  116A  00E4               	movwf	??_setRF_DimmerValue
  8288  116B  0866               	movf	setRF_DimmerValue@lights,w
  8289  116C  3E14               	addlw	20
  8290  116D  076E               	addwf	_product,w
  8291  116E  00E5               	movwf	??_setRF_DimmerValue+1
  8292  116F  0865               	movf	??_setRF_DimmerValue+1,w
  8293  1170  0086               	movwf	6
  8294  1171  3002               	movlw	2	; select bank4/5
  8295  1172  0087               	movwf	7
  8296  1173  0864               	movf	??_setRF_DimmerValue,w
  8297  1174  0081               	movwf	1
  8298                           
  8299                           ;RF_Control_B1.c: 483: setDimmerLights_AdjRF(lights);
  8300  1175  0866               	movf	setRF_DimmerValue@lights,w
  8301  1176  319F  276C         	fcall	_setDimmerLights_AdjRF
  8302  1178  0008               	return
  8303  1179                     __end_of_setRF_DimmerValue:	
  8304                           
  8305                           	psect	text33
  8306  1F6C                     __ptext33:	
  8307 ;; *************** function _setDimmerLights_AdjRF *****************
  8308 ;; Defined at:
  8309 ;;		line 746 in file "../src/Dimmer_B1.c"
  8310 ;; Parameters:    Size  Location     Type
  8311 ;;  lights          1    wreg     unsigned char 
  8312 ;; Auto vars:     Size  Location     Type
  8313 ;;  lights          1   67[BANK0 ] unsigned char 
  8314 ;; Return value:  Size  Location     Type
  8315 ;;		None               void
  8316 ;; Registers used:
  8317 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8318 ;; Tracked objects:
  8319 ;;		On entry : 0/0
  8320 ;;		On exit  : 0/0
  8321 ;;		Unchanged: 0/0
  8322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8323 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8324 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8325 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8326 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8327 ;;Total ram usage:        2 bytes
  8328 ;; Hardware stack levels used:    1
  8329 ;; Hardware stack levels required when called:    8
  8330 ;; This function calls:
  8331 ;;		_DimmerLightsPointSelect
  8332 ;;		_getPercentValue
  8333 ;; This function is called by:
  8334 ;;		_setRF_DimmerValue
  8335 ;; This function uses a non-reentrant model
  8336 ;;
  8337                           
  8338                           
  8339                           ;psect for function _setDimmerLights_AdjRF
  8340  1F6C                     _setDimmerLights_AdjRF:	
  8341                           
  8342                           ;incstack = 0
  8343                           ; Regs used in _setDimmerLights_AdjRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  8344                           ;setDimmerLights_AdjRF@lights stored from wreg
  8345  1F6C  0020               	movlb	0	; select bank0
  8346  1F6D  00E3               	movwf	setDimmerLights_AdjRF@lights
  8347                           
  8348                           ;Dimmer_B1.c: 747: DimmerLightsPointSelect(lights);
  8349  1F6E  0863               	movf	setDimmerLights_AdjRF@lights,w
  8350  1F6F  319C  24B4  319F   	fcall	_DimmerLightsPointSelect
  8351                           
  8352                           ;Dimmer_B1.c: 748: DimmerLights->AdjRF = 1;
  8353  1F72  0020               	movlb	0	; select bank0
  8354  1F73  086F               	movf	_DimmerLights,w
  8355  1F74  0086               	movwf	6
  8356  1F75  3001               	movlw	1	; select bank2/3
  8357  1F76  0087               	movwf	7
  8358  1F77  1501               	bsf	1,2
  8359                           
  8360                           ;Dimmer_B1.c: 749: DimmerLights->Signal = 1;
  8361  1F78  086F               	movf	_DimmerLights,w
  8362  1F79  0086               	movwf	6
  8363  1F7A  3001               	movlw	1	; select bank2/3
  8364  1F7B  0087               	movwf	7
  8365  1F7C  1481               	bsf	1,1
  8366                           
  8367                           ;Dimmer_B1.c: 750: DimmerLights->MaxmumValue = getPercentValue(product->Data[9]);
  8368  1F7D  086E               	movf	_product,w
  8369  1F7E  3E09               	addlw	9
  8370  1F7F  0086               	movwf	6
  8371  1F80  3002               	movlw	2	; select bank4/5
  8372  1F81  0087               	movwf	7
  8373  1F82  0801               	movf	1,w
  8374  1F83  318A  2253         	fcall	_getPercentValue
  8375  1F85  0020               	movlb	0	; select bank0
  8376  1F86  00E2               	movwf	??_setDimmerLights_AdjRF
  8377  1F87  086F               	movf	_DimmerLights,w
  8378  1F88  3E05               	addlw	5
  8379  1F89  0086               	movwf	6
  8380  1F8A  3001               	movlw	1	; select bank2/3
  8381  1F8B  0087               	movwf	7
  8382  1F8C  0862               	movf	??_setDimmerLights_AdjRF,w
  8383  1F8D  0081               	movwf	1
  8384  1F8E  0008               	return
  8385  1F8F                     __end_of_setDimmerLights_AdjRF:	
  8386                           
  8387                           	psect	text34
  8388  0A53                     __ptext34:	
  8389 ;; *************** function _getPercentValue *****************
  8390 ;; Defined at:
  8391 ;;		line 858 in file "../src/Dimmer_B1.c"
  8392 ;; Parameters:    Size  Location     Type
  8393 ;;  value           1    wreg     unsigned char 
  8394 ;; Auto vars:     Size  Location     Type
  8395 ;;  value           1   62[BANK0 ] unsigned char 
  8396 ;;  i               3   63[BANK0 ] float 
  8397 ;; Return value:  Size  Location     Type
  8398 ;;                  1    wreg      unsigned char 
  8399 ;; Registers used:
  8400 ;;		wreg, status,2, status,0, pclath, cstack
  8401 ;; Tracked objects:
  8402 ;;		On entry : 0/0
  8403 ;;		On exit  : 0/0
  8404 ;;		Unchanged: 0/0
  8405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8407 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8408 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8409 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8410 ;;Total ram usage:        6 bytes
  8411 ;; Hardware stack levels used:    1
  8412 ;; Hardware stack levels required when called:    7
  8413 ;; This function calls:
  8414 ;;		___awtoft
  8415 ;;		___ftadd
  8416 ;;		___ftdiv
  8417 ;;		___ftmul
  8418 ;;		___ftneg
  8419 ;;		___fttol
  8420 ;; This function is called by:
  8421 ;;		_setDimmerLights_AdjRF
  8422 ;; This function uses a non-reentrant model
  8423 ;;
  8424                           
  8425                           
  8426                           ;psect for function _getPercentValue
  8427  0A53                     _getPercentValue:	
  8428                           
  8429                           ;incstack = 0
  8430                           ; Regs used in _getPercentValue: [wreg+status,2+status,0+pclath+cstack]
  8431                           ;getPercentValue@value stored from wreg
  8432  0A53  0020               	movlb	0	; select bank0
  8433  0A54  00DE               	movwf	getPercentValue@value
  8434                           
  8435                           ;Dimmer_B1.c: 866: float i = ((char)(80*0.8)) - ((char)(15*0.8));
  8436  0A55  3000               	movlw	0
  8437  0A56  00DF               	movwf	getPercentValue@i
  8438  0A57  3050               	movlw	80
  8439  0A58  00E0               	movwf	getPercentValue@i+1
  8440  0A59  3042               	movlw	66
  8441  0A5A  00E1               	movwf	getPercentValue@i+2
  8442                           
  8443                           ;Dimmer_B1.c: 867: i /= 100;
  8444  0A5B  3000               	movlw	0
  8445  0A5C  00AE               	movwf	___ftdiv@f2
  8446  0A5D  30C8               	movlw	200
  8447  0A5E  00AF               	movwf	___ftdiv@f2+1
  8448  0A5F  3042               	movlw	66
  8449  0A60  00B0               	movwf	___ftdiv@f2+2
  8450  0A61  085F               	movf	getPercentValue@i,w
  8451  0A62  00B1               	movwf	___ftdiv@f1
  8452  0A63  0860               	movf	getPercentValue@i+1,w
  8453  0A64  00B2               	movwf	___ftdiv@f1+1
  8454  0A65  0861               	movf	getPercentValue@i+2,w
  8455  0A66  00B3               	movwf	___ftdiv@f1+2
  8456  0A67  318E  26A3  318A   	fcall	___ftdiv
  8457  0A6A  0020               	movlb	0	; select bank0
  8458  0A6B  082E               	movf	?___ftdiv,w
  8459  0A6C  00DF               	movwf	getPercentValue@i
  8460  0A6D  082F               	movf	?___ftdiv+1,w
  8461  0A6E  00E0               	movwf	getPercentValue@i+1
  8462  0A6F  0830               	movf	?___ftdiv+2,w
  8463  0A70  00E1               	movwf	getPercentValue@i+2
  8464                           
  8465                           ;Dimmer_B1.c: 869: return (char) (((char)(80*0.8)) - ((100 - value) * i));
  8466  0A71  085E               	movf	getPercentValue@value,w
  8467  0A72  00DC               	movwf	??_getPercentValue
  8468  0A73  01DD               	clrf	??_getPercentValue+1
  8469  0A74  09DC               	comf	??_getPercentValue,f
  8470  0A75  09DD               	comf	??_getPercentValue+1,f
  8471  0A76  0ADC               	incf	??_getPercentValue,f
  8472  0A77  1903               	skipnz
  8473  0A78  0ADD               	incf	??_getPercentValue+1,f
  8474  0A79  085C               	movf	??_getPercentValue,w
  8475  0A7A  3E64               	addlw	100
  8476  0A7B  00A8               	movwf	___awtoft@c
  8477  0A7C  3000               	movlw	0
  8478  0A7D  3D5D               	addwfc	??_getPercentValue+1,w
  8479  0A7E  00A9               	movwf	___awtoft@c+1
  8480  0A7F  319F  2728  318A   	fcall	___awtoft
  8481  0A82  0020               	movlb	0	; select bank0
  8482  0A83  0828               	movf	?___awtoft,w
  8483  0A84  00B1               	movwf	___ftmul@f2
  8484  0A85  0829               	movf	?___awtoft+1,w
  8485  0A86  00B2               	movwf	___ftmul@f2+1
  8486  0A87  082A               	movf	?___awtoft+2,w
  8487  0A88  00B3               	movwf	___ftmul@f2+2
  8488  0A89  085F               	movf	getPercentValue@i,w
  8489  0A8A  00AE               	movwf	___ftmul@f1
  8490  0A8B  0860               	movf	getPercentValue@i+1,w
  8491  0A8C  00AF               	movwf	___ftmul@f1+1
  8492  0A8D  0861               	movf	getPercentValue@i+2,w
  8493  0A8E  00B0               	movwf	___ftmul@f1+2
  8494  0A8F  318F  274C  318A   	fcall	___ftmul
  8495  0A92  0020               	movlb	0	; select bank0
  8496  0A93  082E               	movf	?___ftmul,w
  8497  0A94  00BE               	movwf	___ftneg@f1
  8498  0A95  082F               	movf	?___ftmul+1,w
  8499  0A96  00BF               	movwf	___ftneg@f1+1
  8500  0A97  0830               	movf	?___ftmul+2,w
  8501  0A98  00C0               	movwf	___ftneg@f1+2
  8502  0A99  319B  234D  318A   	fcall	___ftneg
  8503  0A9C  0020               	movlb	0	; select bank0
  8504  0A9D  083E               	movf	?___ftneg,w
  8505  0A9E  00C4               	movwf	___ftadd@f2
  8506  0A9F  083F               	movf	?___ftneg+1,w
  8507  0AA0  00C5               	movwf	___ftadd@f2+1
  8508  0AA1  0840               	movf	?___ftneg+2,w
  8509  0AA2  00C6               	movwf	___ftadd@f2+2
  8510  0AA3  3000               	movlw	0
  8511  0AA4  00C1               	movwf	___ftadd@f1
  8512  0AA5  3080               	movlw	128
  8513  0AA6  00C2               	movwf	___ftadd@f1+1
  8514  0AA7  3042               	movlw	66
  8515  0AA8  00C3               	movwf	___ftadd@f1+2
  8516  0AA9  3184  2483  318A   	fcall	___ftadd
  8517  0AAC  0020               	movlb	0	; select bank0
  8518  0AAD  0841               	movf	?___ftadd,w
  8519  0AAE  00CE               	movwf	___fttol@f1
  8520  0AAF  0842               	movf	?___ftadd+1,w
  8521  0AB0  00CF               	movwf	___fttol@f1+1
  8522  0AB1  0843               	movf	?___ftadd+2,w
  8523  0AB2  00D0               	movwf	___fttol@f1+2
  8524  0AB3  318C  2471         	fcall	___fttol
  8525  0AB5  0020               	movlb	0	; select bank0
  8526  0AB6  084E               	movf	?___fttol,w
  8527  0AB7  0008               	return
  8528  0AB8                     __end_of_getPercentValue:	
  8529                           
  8530                           	psect	text35
  8531  0F4C                     __ptext35:	
  8532 ;; *************** function ___ftmul *****************
  8533 ;; Defined at:
  8534 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
  8535 ;; Parameters:    Size  Location     Type
  8536 ;;  f1              3   14[BANK0 ] float 
  8537 ;;  f2              3   17[BANK0 ] float 
  8538 ;; Auto vars:     Size  Location     Type
  8539 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
  8540 ;;  sign            1   29[BANK0 ] unsigned char 
  8541 ;;  cntr            1   28[BANK0 ] unsigned char 
  8542 ;;  exp             1   24[BANK0 ] unsigned char 
  8543 ;; Return value:  Size  Location     Type
  8544 ;;                  3   14[BANK0 ] float 
  8545 ;; Registers used:
  8546 ;;		wreg, status,2, status,0, pclath, cstack
  8547 ;; Tracked objects:
  8548 ;;		On entry : 0/0
  8549 ;;		On exit  : 0/0
  8550 ;;		Unchanged: 0/0
  8551 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8552 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8553 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8554 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8555 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8556 ;;Total ram usage:       16 bytes
  8557 ;; Hardware stack levels used:    1
  8558 ;; Hardware stack levels required when called:    6
  8559 ;; This function calls:
  8560 ;;		___ftpack
  8561 ;; This function is called by:
  8562 ;;		_getPercentValue
  8563 ;; This function uses a non-reentrant model
  8564 ;;
  8565                           
  8566                           
  8567                           ;psect for function ___ftmul
  8568  0F4C                     ___ftmul:	
  8569                           
  8570                           ;incstack = 0
  8571                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  8572  0F4C  0020               	movlb	0	; select bank0
  8573  0F4D  082E               	movf	___ftmul@f1,w
  8574  0F4E  00B4               	movwf	??___ftmul
  8575  0F4F  082F               	movf	___ftmul@f1+1,w
  8576  0F50  00B5               	movwf	??___ftmul+1
  8577  0F51  0830               	movf	___ftmul@f1+2,w
  8578  0F52  00B6               	movwf	??___ftmul+2
  8579  0F53  1003               	clrc
  8580  0F54  0D35               	rlf	??___ftmul+1,w
  8581  0F55  0D36               	rlf	??___ftmul+2,w
  8582  0F56  00B7               	movwf	??___ftmul+3
  8583  0F57  0837               	movf	??___ftmul+3,w
  8584  0F58  00B8               	movwf	___ftmul@exp
  8585  0F59  08B8               	movf	___ftmul@exp,f
  8586  0F5A  1D03               	skipz
  8587  0F5B  2F63               	goto	l6012
  8588  0F5C  3000               	movlw	0
  8589  0F5D  00AE               	movwf	?___ftmul
  8590  0F5E  3000               	movlw	0
  8591  0F5F  00AF               	movwf	?___ftmul+1
  8592  0F60  3000               	movlw	0
  8593  0F61  00B0               	movwf	?___ftmul+2
  8594  0F62  0008               	return
  8595  0F63                     l6012:	
  8596  0F63  0831               	movf	___ftmul@f2,w
  8597  0F64  00B4               	movwf	??___ftmul
  8598  0F65  0832               	movf	___ftmul@f2+1,w
  8599  0F66  00B5               	movwf	??___ftmul+1
  8600  0F67  0833               	movf	___ftmul@f2+2,w
  8601  0F68  00B6               	movwf	??___ftmul+2
  8602  0F69  1003               	clrc
  8603  0F6A  0D35               	rlf	??___ftmul+1,w
  8604  0F6B  0D36               	rlf	??___ftmul+2,w
  8605  0F6C  00B7               	movwf	??___ftmul+3
  8606  0F6D  0837               	movf	??___ftmul+3,w
  8607  0F6E  00BD               	movwf	___ftmul@sign
  8608  0F6F  08BD               	movf	___ftmul@sign,f
  8609  0F70  1D03               	skipz
  8610  0F71  2F79               	goto	l6018
  8611  0F72  3000               	movlw	0
  8612  0F73  00AE               	movwf	?___ftmul
  8613  0F74  3000               	movlw	0
  8614  0F75  00AF               	movwf	?___ftmul+1
  8615  0F76  3000               	movlw	0
  8616  0F77  00B0               	movwf	?___ftmul+2
  8617  0F78  0008               	return
  8618  0F79                     l6018:	
  8619  0F79  083D               	movf	___ftmul@sign,w
  8620  0F7A  3E7B               	addlw	123
  8621  0F7B  00B4               	movwf	??___ftmul
  8622  0F7C  0834               	movf	??___ftmul,w
  8623  0F7D  07B8               	addwf	___ftmul@exp,f
  8624  0F7E  082E               	movf	___ftmul@f1,w
  8625  0F7F  00B4               	movwf	??___ftmul
  8626  0F80  082F               	movf	___ftmul@f1+1,w
  8627  0F81  00B5               	movwf	??___ftmul+1
  8628  0F82  0830               	movf	___ftmul@f1+2,w
  8629  0F83  00B6               	movwf	??___ftmul+2
  8630  0F84  3010               	movlw	16
  8631  0F85                     u4755:	
  8632  0F85  36B6               	lsrf	??___ftmul+2,f
  8633  0F86  0CB5               	rrf	??___ftmul+1,f
  8634  0F87  0CB4               	rrf	??___ftmul,f
  8635  0F88  0B89               	decfsz	9,f
  8636  0F89  2F85               	goto	u4755
  8637  0F8A  0834               	movf	??___ftmul,w
  8638  0F8B  00B7               	movwf	??___ftmul+3
  8639  0F8C  0837               	movf	??___ftmul+3,w
  8640  0F8D  00BD               	movwf	___ftmul@sign
  8641  0F8E  0831               	movf	___ftmul@f2,w
  8642  0F8F  00B4               	movwf	??___ftmul
  8643  0F90  0832               	movf	___ftmul@f2+1,w
  8644  0F91  00B5               	movwf	??___ftmul+1
  8645  0F92  0833               	movf	___ftmul@f2+2,w
  8646  0F93  00B6               	movwf	??___ftmul+2
  8647  0F94  3010               	movlw	16
  8648  0F95                     u4765:	
  8649  0F95  36B6               	lsrf	??___ftmul+2,f
  8650  0F96  0CB5               	rrf	??___ftmul+1,f
  8651  0F97  0CB4               	rrf	??___ftmul,f
  8652  0F98  0B89               	decfsz	9,f
  8653  0F99  2F95               	goto	u4765
  8654  0F9A  0834               	movf	??___ftmul,w
  8655  0F9B  00B7               	movwf	??___ftmul+3
  8656  0F9C  0837               	movf	??___ftmul+3,w
  8657  0F9D  06BD               	xorwf	___ftmul@sign,f
  8658  0F9E  3080               	movlw	128
  8659  0F9F  00B4               	movwf	??___ftmul
  8660  0FA0  0834               	movf	??___ftmul,w
  8661  0FA1  05BD               	andwf	___ftmul@sign,f
  8662  0FA2  17AF               	bsf	___ftmul@f1+1,7
  8663  0FA3  17B2               	bsf	___ftmul@f2+1,7
  8664  0FA4  30FF               	movlw	255
  8665  0FA5  05B1               	andwf	___ftmul@f2,f
  8666  0FA6  30FF               	movlw	255
  8667  0FA7  05B2               	andwf	___ftmul@f2+1,f
  8668  0FA8  3000               	movlw	0
  8669  0FA9  05B3               	andwf	___ftmul@f2+2,f
  8670  0FAA  3000               	movlw	0
  8671  0FAB  00B9               	movwf	___ftmul@f3_as_product
  8672  0FAC  3000               	movlw	0
  8673  0FAD  00BA               	movwf	___ftmul@f3_as_product+1
  8674  0FAE  3000               	movlw	0
  8675  0FAF  00BB               	movwf	___ftmul@f3_as_product+2
  8676  0FB0  3007               	movlw	7
  8677  0FB1  00B4               	movwf	??___ftmul
  8678  0FB2  0834               	movf	??___ftmul,w
  8679  0FB3  00BC               	movwf	___ftmul@cntr
  8680  0FB4                     l6030:	
  8681  0FB4  1C2E               	btfss	___ftmul@f1,0
  8682  0FB5  2FBC               	goto	l6034
  8683  0FB6  0831               	movf	___ftmul@f2,w
  8684  0FB7  07B9               	addwf	___ftmul@f3_as_product,f
  8685  0FB8  0832               	movf	___ftmul@f2+1,w
  8686  0FB9  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8687  0FBA  0833               	movf	___ftmul@f2+2,w
  8688  0FBB  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8689  0FBC                     l6034:	
  8690  0FBC  3001               	movlw	1
  8691  0FBD                     u4785:	
  8692  0FBD  36B0               	lsrf	___ftmul@f1+2,f
  8693  0FBE  0CAF               	rrf	___ftmul@f1+1,f
  8694  0FBF  0CAE               	rrf	___ftmul@f1,f
  8695  0FC0  0B89               	decfsz	9,f
  8696  0FC1  2FBD               	goto	u4785
  8697  0FC2  3001               	movlw	1
  8698  0FC3                     u4795:	
  8699  0FC3  35B1               	lslf	___ftmul@f2,f
  8700  0FC4  0DB2               	rlf	___ftmul@f2+1,f
  8701  0FC5  0DB3               	rlf	___ftmul@f2+2,f
  8702  0FC6  0B89               	decfsz	9,f
  8703  0FC7  2FC3               	goto	u4795
  8704  0FC8  3001               	movlw	1
  8705  0FC9  02BC               	subwf	___ftmul@cntr,f
  8706  0FCA  1D03               	btfss	3,2
  8707  0FCB  2FB4               	goto	l6030
  8708  0FCC  3009               	movlw	9
  8709  0FCD  00B4               	movwf	??___ftmul
  8710  0FCE  0834               	movf	??___ftmul,w
  8711  0FCF  00BC               	movwf	___ftmul@cntr
  8712  0FD0                     l6042:	
  8713  0FD0  1C2E               	btfss	___ftmul@f1,0
  8714  0FD1  2FD8               	goto	l6046
  8715  0FD2  0831               	movf	___ftmul@f2,w
  8716  0FD3  07B9               	addwf	___ftmul@f3_as_product,f
  8717  0FD4  0832               	movf	___ftmul@f2+1,w
  8718  0FD5  3DBA               	addwfc	___ftmul@f3_as_product+1,f
  8719  0FD6  0833               	movf	___ftmul@f2+2,w
  8720  0FD7  3DBB               	addwfc	___ftmul@f3_as_product+2,f
  8721  0FD8                     l6046:	
  8722  0FD8  3001               	movlw	1
  8723  0FD9                     u4825:	
  8724  0FD9  36B0               	lsrf	___ftmul@f1+2,f
  8725  0FDA  0CAF               	rrf	___ftmul@f1+1,f
  8726  0FDB  0CAE               	rrf	___ftmul@f1,f
  8727  0FDC  0B89               	decfsz	9,f
  8728  0FDD  2FD9               	goto	u4825
  8729  0FDE  3001               	movlw	1
  8730  0FDF                     u4835:	
  8731  0FDF  36BB               	lsrf	___ftmul@f3_as_product+2,f
  8732  0FE0  0CBA               	rrf	___ftmul@f3_as_product+1,f
  8733  0FE1  0CB9               	rrf	___ftmul@f3_as_product,f
  8734  0FE2  0B89               	decfsz	9,f
  8735  0FE3  2FDF               	goto	u4835
  8736  0FE4  3001               	movlw	1
  8737  0FE5  02BC               	subwf	___ftmul@cntr,f
  8738  0FE6  1D03               	btfss	3,2
  8739  0FE7  2FD0               	goto	l6042
  8740  0FE8  0839               	movf	___ftmul@f3_as_product,w
  8741  0FE9  00A0               	movwf	___ftpack@arg
  8742  0FEA  083A               	movf	___ftmul@f3_as_product+1,w
  8743  0FEB  00A1               	movwf	___ftpack@arg+1
  8744  0FEC  083B               	movf	___ftmul@f3_as_product+2,w
  8745  0FED  00A2               	movwf	___ftpack@arg+2
  8746  0FEE  0838               	movf	___ftmul@exp,w
  8747  0FEF  00B4               	movwf	??___ftmul
  8748  0FF0  0834               	movf	??___ftmul,w
  8749  0FF1  00A3               	movwf	___ftpack@exp
  8750  0FF2  083D               	movf	___ftmul@sign,w
  8751  0FF3  00B5               	movwf	??___ftmul+1
  8752  0FF4  0835               	movf	??___ftmul+1,w
  8753  0FF5  00A4               	movwf	___ftpack@sign
  8754  0FF6  3189  212C         	fcall	___ftpack
  8755  0FF8  0020               	movlb	0	; select bank0
  8756  0FF9  0820               	movf	?___ftpack,w
  8757  0FFA  00AE               	movwf	?___ftmul
  8758  0FFB  0821               	movf	?___ftpack+1,w
  8759  0FFC  00AF               	movwf	?___ftmul+1
  8760  0FFD  0822               	movf	?___ftpack+2,w
  8761  0FFE  00B0               	movwf	?___ftmul+2
  8762  0FFF  0008               	return
  8763  1000                     __end_of___ftmul:	
  8764                           
  8765                           	psect	text36
  8766  1CC7                     __ptext36:	
  8767 ;; *************** function _setMemory_Modify *****************
  8768 ;; Defined at:
  8769 ;;		line 1023 in file "../src/MCU_B1.c"
  8770 ;; Parameters:    Size  Location     Type
  8771 ;;  command         1    wreg     unsigned char 
  8772 ;; Auto vars:     Size  Location     Type
  8773 ;;  command         1    1[BANK0 ] unsigned char 
  8774 ;; Return value:  Size  Location     Type
  8775 ;;		None               void
  8776 ;; Registers used:
  8777 ;;		wreg, status,2, status,0
  8778 ;; Tracked objects:
  8779 ;;		On entry : 0/0
  8780 ;;		On exit  : 0/0
  8781 ;;		Unchanged: 0/0
  8782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8784 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8785 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8786 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8787 ;;Total ram usage:        2 bytes
  8788 ;; Hardware stack levels used:    1
  8789 ;; Hardware stack levels required when called:    5
  8790 ;; This function calls:
  8791 ;;		Nothing
  8792 ;; This function is called by:
  8793 ;;		_setLog_Code
  8794 ;;		_setRFSW_AdjControl
  8795 ;; This function uses a non-reentrant model
  8796 ;;
  8797                           
  8798                           
  8799                           ;psect for function _setMemory_Modify
  8800  1CC7                     _setMemory_Modify:	
  8801                           
  8802                           ;incstack = 0
  8803                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  8804                           ;setMemory_Modify@command stored from wreg
  8805  1CC7  0020               	movlb	0	; select bank0
  8806  1CC8  00A1               	movwf	setMemory_Modify@command
  8807                           
  8808                           ;MCU_B1.c: 1024: Memory.Modify = command == 1 ? 1 : 0;
  8809  1CC9  0821               	movf	setMemory_Modify@command,w
  8810  1CCA  3A01               	xorlw	1
  8811  1CCB  3000               	movlw	0
  8812  1CCC  1903               	skipnz
  8813  1CCD  3001               	movlw	1
  8814  1CCE  00A0               	movwf	??_setMemory_Modify
  8815  1CCF  0024               	movlb	4	; select bank4
  8816  1CD0  0844               	movf	(_Memory^(0+512)+36),w
  8817  1CD1  0020               	movlb	0	; select bank0
  8818  1CD2  0620               	xorwf	??_setMemory_Modify,w
  8819  1CD3  39FE               	andlw	-2
  8820  1CD4  0620               	xorwf	??_setMemory_Modify,w
  8821  1CD5  0024               	movlb	4	; select bank4
  8822  1CD6  00C4               	movwf	(_Memory^(0+512)+36)
  8823                           
  8824                           ;MCU_B1.c: 1025: Memory.Time = 0;
  8825  1CD7  01C2               	clrf	(_Memory^(0+512)+34)
  8826  1CD8  01C3               	clrf	((_Memory+1)^(0+512)+34)
  8827  1CD9  0008               	return
  8828  1CDA                     __end_of_setMemory_Modify:	
  8829                           
  8830                           	psect	text37
  8831  1C5B                     __ptext37:	
  8832 ;; *************** function _getRF_KeyStatus *****************
  8833 ;; Defined at:
  8834 ;;		line 193 in file "../src/RF_Control_B1.c"
  8835 ;; Parameters:    Size  Location     Type
  8836 ;;		None
  8837 ;; Auto vars:     Size  Location     Type
  8838 ;;  key             1    1[BANK0 ] unsigned char 
  8839 ;; Return value:  Size  Location     Type
  8840 ;;                  1    wreg      unsigned char 
  8841 ;; Registers used:
  8842 ;;		wreg, status,2
  8843 ;; Tracked objects:
  8844 ;;		On entry : 0/0
  8845 ;;		On exit  : 0/0
  8846 ;;		Unchanged: 0/0
  8847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8849 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8850 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8851 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8852 ;;Total ram usage:        3 bytes
  8853 ;; Hardware stack levels used:    1
  8854 ;; Hardware stack levels required when called:    5
  8855 ;; This function calls:
  8856 ;;		Nothing
  8857 ;; This function is called by:
  8858 ;;		_setRF_Main
  8859 ;; This function uses a non-reentrant model
  8860 ;;
  8861                           
  8862                           
  8863                           ;psect for function _getRF_KeyStatus
  8864  1C5B                     _getRF_KeyStatus:	
  8865                           
  8866                           ;RF_Control_B1.c: 194: char key = 0;
  8867                           
  8868                           ;incstack = 0
  8869                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8870  1C5B  0020               	movlb	0	; select bank0
  8871  1C5C  01A1               	clrf	getRF_KeyStatus@key
  8872                           
  8873                           ;RF_Control_B1.c: 200: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  8874  1C5D  01A2               	clrf	_getRF_KeyStatus$4663
  8875  1C5E  0AA2               	incf	_getRF_KeyStatus$4663,f
  8876  1C5F  1F0C               	btfss	12,6	;volatile
  8877  1C60  1A0C               	btfsc	12,4	;volatile
  8878  1C61  2C66               	goto	l7066
  8879  1C62  1C0C               	btfss	12,0	;volatile
  8880  1C63  188D               	btfsc	13,1	;volatile
  8881  1C64  2C66               	goto	l7066
  8882  1C65  01A2               	clrf	_getRF_KeyStatus$4663
  8883  1C66                     l7066:	
  8884  1C66  0822               	movf	_getRF_KeyStatus$4663,w
  8885  1C67  00A0               	movwf	??_getRF_KeyStatus
  8886  1C68  0820               	movf	??_getRF_KeyStatus,w
  8887  1C69  00A1               	movwf	getRF_KeyStatus@key
  8888                           
  8889                           ;RF_Control_B1.c: 206: return key;
  8890  1C6A  0821               	movf	getRF_KeyStatus@key,w
  8891  1C6B  0008               	return
  8892  1C6C                     __end_of_getRF_KeyStatus:	
  8893                           
  8894                           	psect	text38
  8895  1C4A                     __ptext38:	
  8896 ;; *************** function _getBuz_GO *****************
  8897 ;; Defined at:
  8898 ;;		line 82 in file "../src/Buzzer_B1.c"
  8899 ;; Parameters:    Size  Location     Type
  8900 ;;		None
  8901 ;; Auto vars:     Size  Location     Type
  8902 ;;  i               2    4[BANK0 ] int 
  8903 ;; Return value:  Size  Location     Type
  8904 ;;                  2    0[BANK0 ] int 
  8905 ;; Registers used:
  8906 ;;		wreg, status,2, status,0
  8907 ;; Tracked objects:
  8908 ;;		On entry : 0/0
  8909 ;;		On exit  : 0/0
  8910 ;;		Unchanged: 0/0
  8911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8912 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8913 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8914 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8915 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8916 ;;Total ram usage:        6 bytes
  8917 ;; Hardware stack levels used:    1
  8918 ;; Hardware stack levels required when called:    5
  8919 ;; This function calls:
  8920 ;;		Nothing
  8921 ;; This function is called by:
  8922 ;;		_setRF_Main
  8923 ;; This function uses a non-reentrant model
  8924 ;;
  8925                           
  8926                           
  8927                           ;psect for function _getBuz_GO
  8928  1C4A                     _getBuz_GO:	
  8929                           
  8930                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8931                           
  8932                           ;incstack = 0
  8933                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8934  1C4A  0021               	movlb	1	; select bank1
  8935  1C4B  0C2E               	rrf	_Buz1^(0+128),w
  8936  1C4C  3901               	andlw	1
  8937  1C4D  0020               	movlb	0	; select bank0
  8938  1C4E  00A2               	movwf	??_getBuz_GO
  8939  1C4F  01A3               	clrf	??_getBuz_GO+1
  8940  1C50  0822               	movf	??_getBuz_GO,w
  8941  1C51  00A4               	movwf	getBuz_GO@i
  8942  1C52  0823               	movf	??_getBuz_GO+1,w
  8943  1C53  00A5               	movwf	getBuz_GO@i+1
  8944                           
  8945                           ;Buzzer_B1.c: 84: return i;
  8946  1C54  0825               	movf	getBuz_GO@i+1,w
  8947  1C55  01A1               	clrf	?_getBuz_GO+1
  8948  1C56  07A1               	addwf	?_getBuz_GO+1,f
  8949  1C57  0824               	movf	getBuz_GO@i,w
  8950  1C58  01A0               	clrf	?_getBuz_GO
  8951  1C59  07A0               	addwf	?_getBuz_GO,f
  8952  1C5A  0008               	return
  8953  1C5B                     __end_of_getBuz_GO:	
  8954                           
  8955                           	psect	text39
  8956  1BEA                     __ptext39:	
  8957 ;; *************** function _RF_RxDisable *****************
  8958 ;; Defined at:
  8959 ;;		line 268 in file "../src/RF_Control_B1.c"
  8960 ;; Parameters:    Size  Location     Type
  8961 ;;		None
  8962 ;; Auto vars:     Size  Location     Type
  8963 ;;		None
  8964 ;; Return value:  Size  Location     Type
  8965 ;;		None               void
  8966 ;; Registers used:
  8967 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8968 ;; Tracked objects:
  8969 ;;		On entry : 0/0
  8970 ;;		On exit  : 0/0
  8971 ;;		Unchanged: 0/0
  8972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8973 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8976 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8977 ;;Total ram usage:        0 bytes
  8978 ;; Hardware stack levels used:    1
  8979 ;; Hardware stack levels required when called:    7
  8980 ;; This function calls:
  8981 ;;		_CC2500_WriteCommand
  8982 ;; This function is called by:
  8983 ;;		_setRF_Main
  8984 ;; This function uses a non-reentrant model
  8985 ;;
  8986                           
  8987                           
  8988                           ;psect for function _RF_RxDisable
  8989  1BEA                     _RF_RxDisable:	
  8990                           
  8991                           ;RF_Control_B1.c: 269: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8992                           
  8993                           ;incstack = 0
  8994                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8995  1BEA  0021               	movlb	1	; select bank1
  8996  1BEB  18BA               	btfsc	_RF1^(0+128),1
  8997  1BEC  2BEF               	goto	l2013
  8998  1BED  1DBA               	btfss	_RF1^(0+128),3
  8999  1BEE  0008               	return
  9000  1BEF                     l2013:	
  9001                           
  9002                           ;RF_Control_B1.c: 270: RF1.RxStatus = 0;
  9003  1BEF  11BA               	bcf	_RF1^(0+128),3
  9004                           
  9005                           ;RF_Control_B1.c: 271: RF1.ReceiveGO = 0;
  9006  1BF0  10BA               	bcf	_RF1^(0+128),1
  9007                           
  9008                           ;RF_Control_B1.c: 272: CC2500_WriteCommand(0x36);
  9009  1BF1  3036               	movlw	54
  9010  1BF2  319D  25E6  319B   	fcall	_CC2500_WriteCommand
  9011                           
  9012                           ;RF_Control_B1.c: 274: CC2500_WriteCommand(0x3A);
  9013  1BF5  303A               	movlw	58
  9014  1BF6  319D  25E6         	fcall	_CC2500_WriteCommand
  9015  1BF8  0008               	return
  9016  1BF9                     __end_of_RF_RxDisable:	
  9017                           
  9018                           	psect	text40
  9019  098D                     __ptext40:	
  9020 ;; *************** function _CC2500_TxData *****************
  9021 ;; Defined at:
  9022 ;;		line 32 in file "../src/CC2500_B1.c"
  9023 ;; Parameters:    Size  Location     Type
  9024 ;;		None
  9025 ;; Auto vars:     Size  Location     Type
  9026 ;;  loop_e          1    5[BANK0 ] unsigned char 
  9027 ;; Return value:  Size  Location     Type
  9028 ;;		None               void
  9029 ;; Registers used:
  9030 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9031 ;; Tracked objects:
  9032 ;;		On entry : 0/0
  9033 ;;		On exit  : 0/0
  9034 ;;		Unchanged: 0/0
  9035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9037 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9038 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9039 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9040 ;;Total ram usage:        2 bytes
  9041 ;; Hardware stack levels used:    1
  9042 ;; Hardware stack levels required when called:    7
  9043 ;; This function calls:
  9044 ;;		_CC2500_WriteByte
  9045 ;;		_CC2500_WriteCommand
  9046 ;;		_Timeout_Counter
  9047 ;;		_set_TimeoutCleared
  9048 ;; This function is called by:
  9049 ;;		_setRF_Main
  9050 ;; This function uses a non-reentrant model
  9051 ;;
  9052                           
  9053                           
  9054                           ;psect for function _CC2500_TxData
  9055  098D                     _CC2500_TxData:	
  9056                           
  9057                           ;CC2500_B1.c: 33: unsigned char loop_e;
  9058                           ;CC2500_B1.c: 35: RC4 = 0;
  9059                           
  9060                           ;incstack = 0
  9061                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9062  098D  0020               	movlb	0	; select bank0
  9063  098E  120E               	bcf	14,4	;volatile
  9064                           
  9065                           ;CC2500_B1.c: 36: SPI0Buffer = 0x3F + 0x40;
  9066  098F  307F               	movlw	127
  9067  0990  00A4               	movwf	??_CC2500_TxData
  9068  0991  0824               	movf	??_CC2500_TxData,w
  9069  0992  00FB               	movwf	_SPI0Buffer
  9070                           
  9071                           ;CC2500_B1.c: 37: while (RC2 == 1 && myMain.Timeout == 0) {
  9072  0993  2997               	goto	l6716
  9073  0994                     l6714:	
  9074                           
  9075                           ;CC2500_B1.c: 38: Timeout_Counter();
  9076  0994  319D  2564  3189   	fcall	_Timeout_Counter
  9077  0997                     l6716:	
  9078  0997  0020               	movlb	0	; select bank0
  9079  0998  1D0E               	btfss	14,2	;volatile
  9080  0999  299D               	goto	l6720
  9081  099A  0021               	movlb	1	; select bank1
  9082  099B  1D2B               	btfss	(_myMain^(0+128)+11),2
  9083  099C  2994               	goto	l6714
  9084  099D                     l6720:	
  9085                           
  9086                           ;CC2500_B1.c: 39: };
  9087                           ;CC2500_B1.c: 40: set_TimeoutCleared();
  9088  099D  319A  22FA  3189   	fcall	_set_TimeoutCleared
  9089                           
  9090                           ;CC2500_B1.c: 42: CC2500_WriteByte();
  9091  09A0  319D  2514  3189   	fcall	_CC2500_WriteByte
  9092                           
  9093                           ;CC2500_B1.c: 43: SPI0Buffer = Tx_Length;
  9094  09A3  0021               	movlb	1	; select bank1
  9095  09A4  0852               	movf	_Tx_Length^(0+128),w
  9096  09A5  0020               	movlb	0	; select bank0
  9097  09A6  00A4               	movwf	??_CC2500_TxData
  9098  09A7  0824               	movf	??_CC2500_TxData,w
  9099  09A8  00FB               	movwf	_SPI0Buffer
  9100                           
  9101                           ;CC2500_B1.c: 44: CC2500_WriteByte();
  9102  09A9  319D  2514  3189   	fcall	_CC2500_WriteByte
  9103                           
  9104                           ;CC2500_B1.c: 45: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  9105  09AC  0020               	movlb	0	; select bank0
  9106  09AD  01A5               	clrf	CC2500_TxData@loop_e
  9107  09AE                     l6734:	
  9108  09AE  0021               	movlb	1	; select bank1
  9109  09AF  0852               	movf	_Tx_Length^(0+128),w
  9110  09B0  0020               	movlb	0	; select bank0
  9111  09B1  0225               	subwf	CC2500_TxData@loop_e,w
  9112  09B2  1803               	btfsc	3,0
  9113  09B3  29C6               	goto	l255
  9114                           
  9115                           ;CC2500_B1.c: 46: SPI0Buffer = RF_Data[loop_e];
  9116  09B4  0825               	movf	CC2500_TxData@loop_e,w
  9117  09B5  3EA0               	addlw	_RF_Data& (0+255)
  9118  09B6  0086               	movwf	6
  9119  09B7  3001               	movlw	1	; select bank3/4
  9120  09B8  0087               	movwf	7
  9121  09B9  0801               	movf	1,w
  9122  09BA  00A4               	movwf	??_CC2500_TxData
  9123  09BB  0824               	movf	??_CC2500_TxData,w
  9124  09BC  00FB               	movwf	_SPI0Buffer
  9125                           
  9126                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  9127  09BD  319D  2514  3189   	fcall	_CC2500_WriteByte
  9128  09C0  3001               	movlw	1
  9129  09C1  0020               	movlb	0	; select bank0
  9130  09C2  00A4               	movwf	??_CC2500_TxData
  9131  09C3  0824               	movf	??_CC2500_TxData,w
  9132  09C4  07A5               	addwf	CC2500_TxData@loop_e,f
  9133  09C5  29AE               	goto	l6734
  9134  09C6                     l255:	
  9135                           
  9136                           ;CC2500_B1.c: 48: }
  9137                           ;CC2500_B1.c: 49: RC4 = 1;
  9138  09C6  160E               	bsf	14,4	;volatile
  9139                           
  9140                           ;CC2500_B1.c: 50: CC2500_WriteCommand(0x35);
  9141  09C7  3035               	movlw	53
  9142  09C8  319D  25E6  3189   	fcall	_CC2500_WriteCommand
  9143                           
  9144                           ;CC2500_B1.c: 51: while (RB0 == 0 && myMain.Timeout == 0) {
  9145  09CB  29CF               	goto	l6740
  9146  09CC                     l6738:	
  9147                           
  9148                           ;CC2500_B1.c: 52: Timeout_Counter();
  9149  09CC  319D  2564  3189   	fcall	_Timeout_Counter
  9150  09CF                     l6740:	
  9151  09CF  0020               	movlb	0	; select bank0
  9152  09D0  180D               	btfsc	13,0	;volatile
  9153  09D1  29D5               	goto	l6744
  9154  09D2  0021               	movlb	1	; select bank1
  9155  09D3  1D2B               	btfss	(_myMain^(0+128)+11),2
  9156  09D4  29CC               	goto	l6738
  9157  09D5                     l6744:	
  9158                           
  9159                           ;CC2500_B1.c: 53: };
  9160                           ;CC2500_B1.c: 54: set_TimeoutCleared();
  9161  09D5  319A  22FA  3189   	fcall	_set_TimeoutCleared
  9162                           
  9163                           ;CC2500_B1.c: 56: while (RB0 == 1 && myMain.Timeout == 0) {
  9164  09D8  29DC               	goto	l6748
  9165  09D9                     l6746:	
  9166                           
  9167                           ;CC2500_B1.c: 57: Timeout_Counter();
  9168  09D9  319D  2564  3189   	fcall	_Timeout_Counter
  9169  09DC                     l6748:	
  9170  09DC  0020               	movlb	0	; select bank0
  9171  09DD  1C0D               	btfss	13,0	;volatile
  9172  09DE  29E2               	goto	l6752
  9173  09DF  0021               	movlb	1	; select bank1
  9174  09E0  1D2B               	btfss	(_myMain^(0+128)+11),2
  9175  09E1  29D9               	goto	l6746
  9176  09E2                     l6752:	
  9177                           
  9178                           ;CC2500_B1.c: 58: };
  9179                           ;CC2500_B1.c: 59: set_TimeoutCleared();
  9180  09E2  319A  22FA  3189   	fcall	_set_TimeoutCleared
  9181                           
  9182                           ;CC2500_B1.c: 61: CC2500_WriteCommand(0x36);
  9183  09E5  3036               	movlw	54
  9184  09E6  319D  25E6  3189   	fcall	_CC2500_WriteCommand
  9185                           
  9186                           ;CC2500_B1.c: 62: CC2500_WriteCommand(0x3B);
  9187  09E9  303B               	movlw	59
  9188  09EA  319D  25E6         	fcall	_CC2500_WriteCommand
  9189                           
  9190                           ;CC2500_B1.c: 64: Transceive_OK = 1;
  9191  09EC  14FD               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9192  09ED  0008               	return
  9193  09EE                     __end_of_CC2500_TxData:	
  9194                           
  9195                           	psect	text41
  9196  0B86                     __ptext41:	
  9197 ;; *************** function _CC2500_RxData *****************
  9198 ;; Defined at:
  9199 ;;		line 70 in file "../src/CC2500_B1.c"
  9200 ;; Parameters:    Size  Location     Type
  9201 ;;		None
  9202 ;; Auto vars:     Size  Location     Type
  9203 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9204 ;; Return value:  Size  Location     Type
  9205 ;;		None               void
  9206 ;; Registers used:
  9207 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9208 ;; Tracked objects:
  9209 ;;		On entry : 0/0
  9210 ;;		On exit  : 0/0
  9211 ;;		Unchanged: 0/0
  9212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9214 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9215 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9216 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9217 ;;Total ram usage:        2 bytes
  9218 ;; Hardware stack levels used:    1
  9219 ;; Hardware stack levels required when called:    7
  9220 ;; This function calls:
  9221 ;;		_CC2500_ReadByte
  9222 ;;		_CC2500_ReadStatus
  9223 ;;		_CC2500_WriteByte
  9224 ;;		_Timeout_Counter
  9225 ;;		_set_TimeoutCleared
  9226 ;; This function is called by:
  9227 ;;		_setRF_Main
  9228 ;; This function uses a non-reentrant model
  9229 ;;
  9230                           
  9231                           
  9232                           ;psect for function _CC2500_RxData
  9233  0B86                     _CC2500_RxData:	
  9234                           
  9235                           ;CC2500_B1.c: 71: unsigned char loop_f;
  9236                           ;CC2500_B1.c: 75: if (RB0 == 1)
  9237                           
  9238                           ;incstack = 0
  9239                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9240  0B86  0020               	movlb	0	; select bank0
  9241  0B87  180D               	btfsc	13,0	;volatile
  9242  0B88  2B8D               	goto	l6766
  9243  0B89  2B96               	goto	l6772
  9244  0B8A                     l6764:	
  9245                           ;CC2500_B1.c: 76: {
  9246                           ;CC2500_B1.c: 77: while (RB0 == 1 && myMain.Timeout == 0) {
  9247                           
  9248                           
  9249                           ;CC2500_B1.c: 78: Timeout_Counter();
  9250  0B8A  319D  2564  318B   	fcall	_Timeout_Counter
  9251  0B8D                     l6766:	
  9252  0B8D  0020               	movlb	0	; select bank0
  9253  0B8E  1C0D               	btfss	13,0	;volatile
  9254  0B8F  2B93               	goto	l6770
  9255  0B90  0021               	movlb	1	; select bank1
  9256  0B91  1D2B               	btfss	(_myMain^(0+128)+11),2
  9257  0B92  2B8A               	goto	l6764
  9258  0B93                     l6770:	
  9259                           
  9260                           ;CC2500_B1.c: 79: };
  9261                           ;CC2500_B1.c: 80: set_TimeoutCleared();
  9262  0B93  319A  22FA  318B   	fcall	_set_TimeoutCleared
  9263  0B96                     l6772:	
  9264                           
  9265                           ;CC2500_B1.c: 81: }
  9266                           ;CC2500_B1.c: 83: CC2500_ReadStatus(0x3B);
  9267  0B96  303B               	movlw	59
  9268  0B97  319F  274A  318B   	fcall	_CC2500_ReadStatus
  9269                           
  9270                           ;CC2500_B1.c: 85: if (s_data != 0) {
  9271  0B9A  0021               	movlb	1	; select bank1
  9272  0B9B  0855               	movf	_s_data^(0+128),w
  9273  0B9C  1903               	btfsc	3,2
  9274  0B9D  0008               	return
  9275                           
  9276                           ;CC2500_B1.c: 86: RC4 = 0;
  9277  0B9E  0020               	movlb	0	; select bank0
  9278  0B9F  120E               	bcf	14,4	;volatile
  9279                           
  9280                           ;CC2500_B1.c: 87: SPI0Buffer = 0x3F + 0xC0;
  9281  0BA0  30FF               	movlw	255
  9282  0BA1  00A4               	movwf	??_CC2500_RxData
  9283  0BA2  0824               	movf	??_CC2500_RxData,w
  9284  0BA3  00FB               	movwf	_SPI0Buffer
  9285                           
  9286                           ;CC2500_B1.c: 88: while (RC2 == 1 && myMain.Timeout == 0) {
  9287  0BA4  2BA8               	goto	l6782
  9288  0BA5                     l6780:	
  9289                           
  9290                           ;CC2500_B1.c: 89: Timeout_Counter();
  9291  0BA5  319D  2564  318B   	fcall	_Timeout_Counter
  9292  0BA8                     l6782:	
  9293  0BA8  0020               	movlb	0	; select bank0
  9294  0BA9  1D0E               	btfss	14,2	;volatile
  9295  0BAA  2BAE               	goto	l6786
  9296  0BAB  0021               	movlb	1	; select bank1
  9297  0BAC  1D2B               	btfss	(_myMain^(0+128)+11),2
  9298  0BAD  2BA5               	goto	l6780
  9299  0BAE                     l6786:	
  9300                           
  9301                           ;CC2500_B1.c: 90: };
  9302                           ;CC2500_B1.c: 91: set_TimeoutCleared();
  9303  0BAE  319A  22FA  318B   	fcall	_set_TimeoutCleared
  9304                           
  9305                           ;CC2500_B1.c: 92: CC2500_WriteByte();
  9306  0BB1  319D  2514  318B   	fcall	_CC2500_WriteByte
  9307                           
  9308                           ;CC2500_B1.c: 94: CC2500_ReadByte();
  9309  0BB4  319D  25CF  318B   	fcall	_CC2500_ReadByte
  9310                           
  9311                           ;CC2500_B1.c: 95: Rx_Length = SPI0Buffer;
  9312  0BB7  087B               	movf	_SPI0Buffer,w
  9313  0BB8  0020               	movlb	0	; select bank0
  9314  0BB9  00A4               	movwf	??_CC2500_RxData
  9315  0BBA  0824               	movf	??_CC2500_RxData,w
  9316  0BBB  0021               	movlb	1	; select bank1
  9317  0BBC  00D0               	movwf	_Rx_Length^(0+128)
  9318                           
  9319                           ;CC2500_B1.c: 96: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9320  0BBD  0020               	movlb	0	; select bank0
  9321  0BBE  01A5               	clrf	CC2500_RxData@loop_f
  9322  0BBF                     l6802:	
  9323  0BBF  0021               	movlb	1	; select bank1
  9324  0BC0  0850               	movf	_Rx_Length^(0+128),w
  9325  0BC1  0020               	movlb	0	; select bank0
  9326  0BC2  0225               	subwf	CC2500_RxData@loop_f,w
  9327  0BC3  1803               	btfsc	3,0
  9328  0BC4  2BD7               	goto	l6804
  9329                           
  9330                           ;CC2500_B1.c: 97: CC2500_ReadByte();
  9331  0BC5  319D  25CF  318B   	fcall	_CC2500_ReadByte
  9332                           
  9333                           ;CC2500_B1.c: 98: RF_Data[loop_f] = SPI0Buffer;
  9334  0BC8  087B               	movf	_SPI0Buffer,w
  9335  0BC9  0020               	movlb	0	; select bank0
  9336  0BCA  00A4               	movwf	??_CC2500_RxData
  9337  0BCB  0825               	movf	CC2500_RxData@loop_f,w
  9338  0BCC  3EA0               	addlw	_RF_Data& (0+255)
  9339  0BCD  0086               	movwf	6
  9340  0BCE  3001               	movlw	1	; select bank3/4
  9341  0BCF  0087               	movwf	7
  9342  0BD0  0824               	movf	??_CC2500_RxData,w
  9343  0BD1  0081               	movwf	1
  9344  0BD2  3001               	movlw	1
  9345  0BD3  00A4               	movwf	??_CC2500_RxData
  9346  0BD4  0824               	movf	??_CC2500_RxData,w
  9347  0BD5  07A5               	addwf	CC2500_RxData@loop_f,f
  9348  0BD6  2BBF               	goto	l6802
  9349  0BD7                     l6804:	
  9350                           
  9351                           ;CC2500_B1.c: 99: }
  9352                           ;CC2500_B1.c: 100: CC2500_ReadByte();
  9353  0BD7  319D  25CF  318B   	fcall	_CC2500_ReadByte
  9354                           
  9355                           ;CC2500_B1.c: 101: RSSI = SPI0Buffer;
  9356  0BDA  087B               	movf	_SPI0Buffer,w
  9357  0BDB  0020               	movlb	0	; select bank0
  9358  0BDC  00A4               	movwf	??_CC2500_RxData
  9359  0BDD  0824               	movf	??_CC2500_RxData,w
  9360  0BDE  0021               	movlb	1	; select bank1
  9361  0BDF  00CF               	movwf	_RSSI^(0+128)
  9362                           
  9363                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  9364  0BE0  319D  25CF         	fcall	_CC2500_ReadByte
  9365                           
  9366                           ;CC2500_B1.c: 103: CRC = SPI0Buffer;
  9367  0BE2  087B               	movf	_SPI0Buffer,w
  9368  0BE3  0020               	movlb	0	; select bank0
  9369  0BE4  00A4               	movwf	??_CC2500_RxData
  9370  0BE5  0824               	movf	??_CC2500_RxData,w
  9371  0BE6  0021               	movlb	1	; select bank1
  9372  0BE7  00CB               	movwf	_CRC^(0+128)
  9373                           
  9374                           ;CC2500_B1.c: 104: RC4 = 1;
  9375  0BE8  0020               	movlb	0	; select bank0
  9376  0BE9  160E               	bsf	14,4	;volatile
  9377                           
  9378                           ;CC2500_B1.c: 105: if (CRC & 0x80)
  9379  0BEA  0021               	movlb	1	; select bank1
  9380  0BEB  1BCB               	btfsc	_CRC^(0+128),7
  9381                           
  9382                           ;CC2500_B1.c: 106: Receive_OK = 1;
  9383  0BEC  147D               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  9384                           
  9385                           ;CC2500_B1.c: 108: RF1.RxStatus = 0;
  9386  0BED  11BA               	bcf	_RF1^(0+128),3
  9387                           
  9388                           ;CC2500_B1.c: 109: RF1.ReceiveGO = 1;
  9389  0BEE  14BA               	bsf	_RF1^(0+128),1
  9390  0BEF  0008               	return
  9391  0BF0                     __end_of_CC2500_RxData:	
  9392                           
  9393                           	psect	text42
  9394  1F4A                     __ptext42:	
  9395 ;; *************** function _CC2500_ReadStatus *****************
  9396 ;; Defined at:
  9397 ;;		line 301 in file "../src/CC2500_B1.c"
  9398 ;; Parameters:    Size  Location     Type
  9399 ;;  status_addr     1    wreg     unsigned char 
  9400 ;; Auto vars:     Size  Location     Type
  9401 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9402 ;; Return value:  Size  Location     Type
  9403 ;;		None               void
  9404 ;; Registers used:
  9405 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9406 ;; Tracked objects:
  9407 ;;		On entry : 0/0
  9408 ;;		On exit  : 0/0
  9409 ;;		Unchanged: 0/0
  9410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9412 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9413 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9414 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9415 ;;Total ram usage:        2 bytes
  9416 ;; Hardware stack levels used:    1
  9417 ;; Hardware stack levels required when called:    6
  9418 ;; This function calls:
  9419 ;;		_CC2500_ReadByte
  9420 ;;		_CC2500_WriteByte
  9421 ;;		_Timeout_Counter
  9422 ;;		_set_TimeoutCleared
  9423 ;; This function is called by:
  9424 ;;		_CC2500_RxData
  9425 ;; This function uses a non-reentrant model
  9426 ;;
  9427                           
  9428                           
  9429                           ;psect for function _CC2500_ReadStatus
  9430  1F4A                     _CC2500_ReadStatus:	
  9431                           
  9432                           ;incstack = 0
  9433                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9434                           ;CC2500_ReadStatus@status_addr stored from wreg
  9435  1F4A  0020               	movlb	0	; select bank0
  9436  1F4B  00A3               	movwf	CC2500_ReadStatus@status_addr
  9437                           
  9438                           ;CC2500_B1.c: 302: RC4 = 0;
  9439  1F4C  120E               	bcf	14,4	;volatile
  9440                           
  9441                           ;CC2500_B1.c: 303: SPI0Buffer = status_addr + 0xC0;
  9442  1F4D  0823               	movf	CC2500_ReadStatus@status_addr,w
  9443  1F4E  3EC0               	addlw	192
  9444  1F4F  00A2               	movwf	??_CC2500_ReadStatus
  9445  1F50  0822               	movf	??_CC2500_ReadStatus,w
  9446  1F51  00FB               	movwf	_SPI0Buffer
  9447                           
  9448                           ;CC2500_B1.c: 305: while (RC2 == 1 && myMain.Timeout == 0) {
  9449  1F52  2F56               	goto	l6546
  9450  1F53                     l6544:	
  9451                           
  9452                           ;CC2500_B1.c: 306: Timeout_Counter();
  9453  1F53  319D  2564  319F   	fcall	_Timeout_Counter
  9454  1F56                     l6546:	
  9455  1F56  0020               	movlb	0	; select bank0
  9456  1F57  1D0E               	btfss	14,2	;volatile
  9457  1F58  2F5C               	goto	l6550
  9458  1F59  0021               	movlb	1	; select bank1
  9459  1F5A  1D2B               	btfss	(_myMain^(0+128)+11),2
  9460  1F5B  2F53               	goto	l6544
  9461  1F5C                     l6550:	
  9462                           
  9463                           ;CC2500_B1.c: 307: };
  9464                           ;CC2500_B1.c: 308: set_TimeoutCleared();
  9465  1F5C  319A  22FA  319F   	fcall	_set_TimeoutCleared
  9466                           
  9467                           ;CC2500_B1.c: 310: CC2500_WriteByte();
  9468  1F5F  319D  2514  319F   	fcall	_CC2500_WriteByte
  9469                           
  9470                           ;CC2500_B1.c: 311: CC2500_ReadByte();
  9471  1F62  319D  25CF         	fcall	_CC2500_ReadByte
  9472                           
  9473                           ;CC2500_B1.c: 312: RC4 = 1;
  9474  1F64  0020               	movlb	0	; select bank0
  9475  1F65  160E               	bsf	14,4	;volatile
  9476                           
  9477                           ;CC2500_B1.c: 314: s_data = SPI0Buffer;
  9478  1F66  087B               	movf	_SPI0Buffer,w
  9479  1F67  00A2               	movwf	??_CC2500_ReadStatus
  9480  1F68  0822               	movf	??_CC2500_ReadStatus,w
  9481  1F69  0021               	movlb	1	; select bank1
  9482  1F6A  00D5               	movwf	_s_data^(0+128)
  9483  1F6B  0008               	return
  9484  1F6C                     __end_of_CC2500_ReadStatus:	
  9485                           
  9486                           	psect	text43
  9487  1DCF                     __ptext43:	
  9488 ;; *************** function _CC2500_ReadByte *****************
  9489 ;; Defined at:
  9490 ;;		line 235 in file "../src/CC2500_B1.c"
  9491 ;; Parameters:    Size  Location     Type
  9492 ;;		None
  9493 ;; Auto vars:     Size  Location     Type
  9494 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9495 ;; Return value:  Size  Location     Type
  9496 ;;		None               void
  9497 ;; Registers used:
  9498 ;;		wreg, status,2, status,0
  9499 ;; Tracked objects:
  9500 ;;		On entry : 0/0
  9501 ;;		On exit  : 0/0
  9502 ;;		Unchanged: 0/0
  9503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9505 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9506 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9507 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9508 ;;Total ram usage:        2 bytes
  9509 ;; Hardware stack levels used:    1
  9510 ;; Hardware stack levels required when called:    5
  9511 ;; This function calls:
  9512 ;;		Nothing
  9513 ;; This function is called by:
  9514 ;;		_CC2500_RxData
  9515 ;;		_CC2500_ReadStatus
  9516 ;;		_CC2500_ReadREG
  9517 ;; This function uses a non-reentrant model
  9518 ;;
  9519                           
  9520                           
  9521                           ;psect for function _CC2500_ReadByte
  9522  1DCF                     _CC2500_ReadByte:	
  9523                           
  9524                           ;CC2500_B1.c: 236: unsigned char loop_b;
  9525                           ;CC2500_B1.c: 237: for (loop_b = 0; loop_b < 8; loop_b++) {
  9526                           
  9527                           ;incstack = 0
  9528                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9529  1DCF  0020               	movlb	0	; select bank0
  9530  1DD0  01A1               	clrf	CC2500_ReadByte@loop_b
  9531  1DD1                     L6:	
  9532  1DD1  3008               	movlw	8
  9533  1DD2  0221               	subwf	CC2500_ReadByte@loop_b,w
  9534  1DD3  1803               	btfsc	3,0
  9535  1DD4  0008               	return
  9536                           
  9537                           ;CC2500_B1.c: 238: RC1 = 1;
  9538  1DD5  148E               	bsf	14,1	;volatile
  9539                           
  9540                           ;CC2500_B1.c: 239: SPI0Buffer <<= 1;
  9541  1DD6  1003               	clrc
  9542  1DD7  0DFB               	rlf	_SPI0Buffer,f
  9543                           
  9544                           ;CC2500_B1.c: 240: if (RC2 == 1)
  9545  1DD8  1D0E               	btfss	14,2	;volatile
  9546  1DD9  2DDC               	goto	l6446
  9547                           
  9548                           ;CC2500_B1.c: 241: SPI0Buffer |= 0x01;
  9549  1DDA  147B               	bsf	_SPI0Buffer,0
  9550  1DDB  2DE0               	goto	l6448
  9551  1DDC                     l6446:	
  9552                           
  9553                           ;CC2500_B1.c: 242: else
  9554                           ;CC2500_B1.c: 243: SPI0Buffer &= 0xFE;
  9555  1DDC  30FE               	movlw	254
  9556  1DDD  00A0               	movwf	??_CC2500_ReadByte
  9557  1DDE  0820               	movf	??_CC2500_ReadByte,w
  9558  1DDF  05FB               	andwf	_SPI0Buffer,f
  9559  1DE0                     l6448:	
  9560                           
  9561                           ;CC2500_B1.c: 244: RC1 = 0;
  9562  1DE0  108E               	bcf	14,1	;volatile
  9563  1DE1  3001               	movlw	1
  9564  1DE2  00A0               	movwf	??_CC2500_ReadByte
  9565  1DE3  0820               	movf	??_CC2500_ReadByte,w
  9566  1DE4  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9567  1DE5  2DD1               	goto	L6
  9568  1DE6                     __end_of_CC2500_ReadByte:	
  9569                           
  9570                           	psect	text44
  9571  1ADE                     __ptext44:	
  9572 ;; *************** function _RF_Initialization *****************
  9573 ;; Defined at:
  9574 ;;		line 9 in file "../src/RF_Control_B1.c"
  9575 ;; Parameters:    Size  Location     Type
  9576 ;;		None
  9577 ;; Auto vars:     Size  Location     Type
  9578 ;;		None
  9579 ;; Return value:  Size  Location     Type
  9580 ;;		None               void
  9581 ;; Registers used:
  9582 ;;		wreg, status,2, status,0, pclath, cstack
  9583 ;; Tracked objects:
  9584 ;;		On entry : 0/0
  9585 ;;		On exit  : 0/0
  9586 ;;		Unchanged: 0/0
  9587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9591 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9592 ;;Total ram usage:        0 bytes
  9593 ;; Hardware stack levels used:    1
  9594 ;; Hardware stack levels required when called:    6
  9595 ;; This function calls:
  9596 ;;		_setRF_Initialization
  9597 ;; This function is called by:
  9598 ;;		_main
  9599 ;; This function uses a non-reentrant model
  9600 ;;
  9601                           
  9602                           
  9603                           ;psect for function _RF_Initialization
  9604  1ADE                     _RF_Initialization:	
  9605                           
  9606                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9607                           
  9608                           ;incstack = 0
  9609                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9610  1ADE  319B  2361         	fcall	_setRF_Initialization
  9611  1AE0  0008               	return
  9612  1AE1                     __end_of_RF_Initialization:	
  9613                           
  9614                           	psect	text45
  9615  1B61                     __ptext45:	
  9616 ;; *************** function _setRF_Initialization *****************
  9617 ;; Defined at:
  9618 ;;		line 43 in file "../src/RF_Control_B1.c"
  9619 ;; Parameters:    Size  Location     Type
  9620 ;;		None
  9621 ;; Auto vars:     Size  Location     Type
  9622 ;;		None
  9623 ;; Return value:  Size  Location     Type
  9624 ;;		None               void
  9625 ;; Registers used:
  9626 ;;		wreg
  9627 ;; Tracked objects:
  9628 ;;		On entry : 0/0
  9629 ;;		On exit  : 0/0
  9630 ;;		Unchanged: 0/0
  9631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9633 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9634 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9635 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9636 ;;Total ram usage:        1 bytes
  9637 ;; Hardware stack levels used:    1
  9638 ;; Hardware stack levels required when called:    5
  9639 ;; This function calls:
  9640 ;;		Nothing
  9641 ;; This function is called by:
  9642 ;;		_RF_Initialization
  9643 ;; This function uses a non-reentrant model
  9644 ;;
  9645                           
  9646                           
  9647                           ;psect for function _setRF_Initialization
  9648  1B61                     _setRF_Initialization:	
  9649                           
  9650                           ;RF_Control_B1.c: 45: Tx_Length = 21;
  9651                           
  9652                           ;incstack = 0
  9653                           ; Regs used in _setRF_Initialization: [wreg]
  9654  1B61  3015               	movlw	21
  9655  1B62  0020               	movlb	0	; select bank0
  9656  1B63  00A0               	movwf	??_setRF_Initialization
  9657  1B64  0820               	movf	??_setRF_Initialization,w
  9658  1B65  0021               	movlb	1	; select bank1
  9659  1B66  00D2               	movwf	_Tx_Length^(0+128)
  9660                           
  9661                           ;RF_Control_B1.c: 46: RF1.RunTime = 10;
  9662  1B67  300A               	movlw	10
  9663  1B68  00C1               	movwf	(_RF1^(0+128)+7)
  9664  1B69  3000               	movlw	0
  9665  1B6A  00C2               	movwf	(_RF1^(0+128)+8)
  9666  1B6B  0008               	return
  9667  1B6C                     __end_of_setRF_Initialization:	
  9668                           
  9669                           	psect	text46
  9670  1C90                     __ptext46:	
  9671 ;; *************** function _Mcu_Initialization *****************
  9672 ;; Defined at:
  9673 ;;		line 30 in file "../src/MCU_B1.c"
  9674 ;; Parameters:    Size  Location     Type
  9675 ;;		None
  9676 ;; Auto vars:     Size  Location     Type
  9677 ;;		None
  9678 ;; Return value:  Size  Location     Type
  9679 ;;		None               void
  9680 ;; Registers used:
  9681 ;;		wreg, status,2, status,0, pclath, cstack
  9682 ;; Tracked objects:
  9683 ;;		On entry : 0/0
  9684 ;;		On exit  : 0/0
  9685 ;;		Unchanged: 0/0
  9686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9690 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9691 ;;Total ram usage:        0 bytes
  9692 ;; Hardware stack levels used:    1
  9693 ;; Hardware stack levels required when called:    6
  9694 ;; This function calls:
  9695 ;;		_ADC_Set
  9696 ;;		_Fosc_Set
  9697 ;;		_IOC_Set
  9698 ;;		_IO_Set
  9699 ;;		_TMR1_Set
  9700 ;;		_WDT_Set
  9701 ;; This function is called by:
  9702 ;;		_main
  9703 ;; This function uses a non-reentrant model
  9704 ;;
  9705                           
  9706                           
  9707                           ;psect for function _Mcu_Initialization
  9708  1C90                     _Mcu_Initialization:	
  9709                           
  9710                           ;MCU_B1.c: 32: Fosc_Set();
  9711                           
  9712                           ;incstack = 0
  9713                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9714  1C90  319A  22F6  319C   	fcall	_Fosc_Set
  9715                           
  9716                           ;MCU_B1.c: 34: IO_Set();
  9717  1C93  319D  25FF  319C   	fcall	_IO_Set
  9718                           
  9719                           ;MCU_B1.c: 36: ;;
  9720                           ;MCU_B1.c: 38: TMR1_Set();
  9721  1C96  319B  23B4  319C   	fcall	_TMR1_Set
  9722                           
  9723                           ;MCU_B1.c: 40: ADC_Set();
  9724  1C99  319B  2316  319C   	fcall	_ADC_Set
  9725                           
  9726                           ;MCU_B1.c: 42: ;;
  9727                           ;MCU_B1.c: 44: ;;
  9728                           ;MCU_B1.c: 46: IOC_Set();
  9729  1C9C  319B  23A8  319C   	fcall	_IOC_Set
  9730                           
  9731                           ;MCU_B1.c: 48: ;;
  9732                           ;MCU_B1.c: 50: ;;
  9733                           ;MCU_B1.c: 52: WDT_Set();
  9734  1C9F  319B  2356         	fcall	_WDT_Set
  9735  1CA1  0008               	return
  9736  1CA2                     __end_of_Mcu_Initialization:	
  9737                           
  9738                           	psect	text47
  9739  1B56                     __ptext47:	
  9740 ;; *************** function _WDT_Set *****************
  9741 ;; Defined at:
  9742 ;;		line 1042 in file "../src/MCU_B1.c"
  9743 ;; Parameters:    Size  Location     Type
  9744 ;;		None
  9745 ;; Auto vars:     Size  Location     Type
  9746 ;;		None
  9747 ;; Return value:  Size  Location     Type
  9748 ;;		None               void
  9749 ;; Registers used:
  9750 ;;		wreg
  9751 ;; Tracked objects:
  9752 ;;		On entry : 0/0
  9753 ;;		On exit  : 0/0
  9754 ;;		Unchanged: 0/0
  9755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9757 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9758 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9759 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9760 ;;Total ram usage:        1 bytes
  9761 ;; Hardware stack levels used:    1
  9762 ;; Hardware stack levels required when called:    5
  9763 ;; This function calls:
  9764 ;;		Nothing
  9765 ;; This function is called by:
  9766 ;;		_Mcu_Initialization
  9767 ;; This function uses a non-reentrant model
  9768 ;;
  9769                           
  9770                           
  9771                           ;psect for function _WDT_Set
  9772  1B56                     _WDT_Set:	
  9773                           
  9774                           ;MCU_B1.c: 1049: WDTCON = 0b00010111;;
  9775                           
  9776                           ;incstack = 0
  9777                           ; Regs used in _WDT_Set: [wreg]
  9778  1B56  3017               	movlw	23
  9779  1B57  0021               	movlb	1	; select bank1
  9780  1B58  0097               	movwf	23	;volatile
  9781                           
  9782                           ;MCU_B1.c: 1051: WDT.Enable = 1;
  9783  1B59  1449               	bsf	_WDT^(0+128),0
  9784                           
  9785                           ;MCU_B1.c: 1052: WDT.Timer = 10;
  9786  1B5A  300A               	movlw	10
  9787  1B5B  0020               	movlb	0	; select bank0
  9788  1B5C  00A0               	movwf	??_WDT_Set
  9789  1B5D  0820               	movf	??_WDT_Set,w
  9790  1B5E  0021               	movlb	1	; select bank1
  9791  1B5F  00CA               	movwf	(_WDT^(0+128)+1)
  9792  1B60  0008               	return
  9793  1B61                     __end_of_WDT_Set:	
  9794                           
  9795                           	psect	text48
  9796  1BB4                     __ptext48:	
  9797 ;; *************** function _TMR1_Set *****************
  9798 ;; Defined at:
  9799 ;;		line 199 in file "../src/MCU_B1.c"
  9800 ;; Parameters:    Size  Location     Type
  9801 ;;		None
  9802 ;; Auto vars:     Size  Location     Type
  9803 ;;		None
  9804 ;; Return value:  Size  Location     Type
  9805 ;;		None               void
  9806 ;; Registers used:
  9807 ;;		wreg
  9808 ;; Tracked objects:
  9809 ;;		On entry : 0/0
  9810 ;;		On exit  : 0/0
  9811 ;;		Unchanged: 0/0
  9812 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9813 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9814 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9816 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9817 ;;Total ram usage:        0 bytes
  9818 ;; Hardware stack levels used:    1
  9819 ;; Hardware stack levels required when called:    5
  9820 ;; This function calls:
  9821 ;;		Nothing
  9822 ;; This function is called by:
  9823 ;;		_Mcu_Initialization
  9824 ;; This function uses a non-reentrant model
  9825 ;;
  9826                           
  9827                           
  9828                           ;psect for function _TMR1_Set
  9829  1BB4                     _TMR1_Set:	
  9830                           
  9831                           ;MCU_B1.c: 200: T1CON = (0x40 | 0x00 | 0x01);
  9832                           
  9833                           ;incstack = 0
  9834                           ; Regs used in _TMR1_Set: [wreg]
  9835  1BB4  3041               	movlw	65
  9836  1BB5  0020               	movlb	0	; select bank0
  9837  1BB6  0098               	movwf	24	;volatile
  9838                           
  9839                           ;MCU_B1.c: 201: TMR1H = ((65536-1480)/256);
  9840  1BB7  30FA               	movlw	250
  9841  1BB8  0097               	movwf	23	;volatile
  9842                           
  9843                           ;MCU_B1.c: 202: TMR1L = ((65536-1480)%256);
  9844  1BB9  3038               	movlw	56
  9845  1BBA  0096               	movwf	22	;volatile
  9846                           
  9847                           ;MCU_B1.c: 203: TMR1IE = 1;
  9848  1BBB  0021               	movlb	1	; select bank1
  9849  1BBC  1411               	bsf	17,0	;volatile
  9850                           
  9851                           ;MCU_B1.c: 204: PEIE = 1;
  9852  1BBD  170B               	bsf	11,6	;volatile
  9853                           
  9854                           ;MCU_B1.c: 205: GIE = 1;
  9855  1BBE  178B               	bsf	11,7	;volatile
  9856  1BBF  0008               	return
  9857  1BC0                     __end_of_TMR1_Set:	
  9858                           
  9859                           	psect	text49
  9860  1DFF                     __ptext49:	
  9861 ;; *************** function _IO_Set *****************
  9862 ;; Defined at:
  9863 ;;		line 60 in file "../src/MCU_B1.c"
  9864 ;; Parameters:    Size  Location     Type
  9865 ;;		None
  9866 ;; Auto vars:     Size  Location     Type
  9867 ;;		None
  9868 ;; Return value:  Size  Location     Type
  9869 ;;		None               void
  9870 ;; Registers used:
  9871 ;;		wreg, status,2
  9872 ;; Tracked objects:
  9873 ;;		On entry : 0/0
  9874 ;;		On exit  : 0/0
  9875 ;;		Unchanged: 0/0
  9876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9877 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9878 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9879 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9880 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9881 ;;Total ram usage:        0 bytes
  9882 ;; Hardware stack levels used:    1
  9883 ;; Hardware stack levels required when called:    5
  9884 ;; This function calls:
  9885 ;;		Nothing
  9886 ;; This function is called by:
  9887 ;;		_Mcu_Initialization
  9888 ;; This function uses a non-reentrant model
  9889 ;;
  9890                           
  9891                           
  9892                           ;psect for function _IO_Set
  9893  1DFF                     _IO_Set:	
  9894                           
  9895                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
  9896                           
  9897                           ;incstack = 0
  9898                           ; Regs used in _IO_Set: [wreg+status,2]
  9899  1DFF  3077               	movlw	119
  9900  1E00  0021               	movlb	1	; select bank1
  9901  1E01  008C               	movwf	12	;volatile
  9902                           
  9903                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
  9904  1E02  3007               	movlw	7
  9905  1E03  008D               	movwf	13	;volatile
  9906                           
  9907                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
  9908  1E04  300C               	movlw	12
  9909  1E05  008E               	movwf	14	;volatile
  9910                           
  9911                           ;MCU_B1.c: 91: LATA = 0b00000000;;
  9912  1E06  0022               	movlb	2	; select bank2
  9913  1E07  018C               	clrf	12	;volatile
  9914                           
  9915                           ;MCU_B1.c: 92: LATB = 0b00000010;;
  9916  1E08  3002               	movlw	2
  9917  1E09  008D               	movwf	13	;volatile
  9918                           
  9919                           ;MCU_B1.c: 93: LATC = 0b00000000;;
  9920  1E0A  018E               	clrf	14	;volatile
  9921                           
  9922                           ;MCU_B1.c: 94: ANSELA = 0b00100010;;
  9923  1E0B  3022               	movlw	34
  9924  1E0C  0023               	movlb	3	; select bank3
  9925  1E0D  008C               	movwf	12	;volatile
  9926                           
  9927                           ;MCU_B1.c: 95: ANSELB = 0b00000000;;
  9928  1E0E  018D               	clrf	13	;volatile
  9929                           
  9930                           ;MCU_B1.c: 96: ANSELC = 0b00000000;;
  9931  1E0F  018E               	clrf	14	;volatile
  9932                           
  9933                           ;MCU_B1.c: 97: PORTA = 0b01110111;;
  9934  1E10  3077               	movlw	119
  9935  1E11  0020               	movlb	0	; select bank0
  9936  1E12  008C               	movwf	12	;volatile
  9937                           
  9938                           ;MCU_B1.c: 98: PORTB = 0b00000111;;
  9939  1E13  3007               	movlw	7
  9940  1E14  008D               	movwf	13	;volatile
  9941                           
  9942                           ;MCU_B1.c: 99: PORTC = 0b00001100;;
  9943  1E15  300C               	movlw	12
  9944  1E16  008E               	movwf	14	;volatile
  9945  1E17  0008               	return
  9946  1E18                     __end_of_IO_Set:	
  9947                           
  9948                           	psect	text50
  9949  1BA8                     __ptext50:	
  9950 ;; *************** function _IOC_Set *****************
  9951 ;; Defined at:
  9952 ;;		line 365 in file "../src/MCU_B1.c"
  9953 ;; Parameters:    Size  Location     Type
  9954 ;;		None
  9955 ;; Auto vars:     Size  Location     Type
  9956 ;;		None
  9957 ;; Return value:  Size  Location     Type
  9958 ;;		None               void
  9959 ;; Registers used:
  9960 ;;		wreg, status,2
  9961 ;; Tracked objects:
  9962 ;;		On entry : 0/0
  9963 ;;		On exit  : 0/0
  9964 ;;		Unchanged: 0/0
  9965 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9967 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9968 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9969 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9970 ;;Total ram usage:        0 bytes
  9971 ;; Hardware stack levels used:    1
  9972 ;; Hardware stack levels required when called:    5
  9973 ;; This function calls:
  9974 ;;		Nothing
  9975 ;; This function is called by:
  9976 ;;		_Mcu_Initialization
  9977 ;; This function uses a non-reentrant model
  9978 ;;
  9979                           
  9980                           
  9981                           ;psect for function _IOC_Set
  9982  1BA8                     _IOC_Set:	
  9983                           
  9984                           ;MCU_B1.c: 366: WPUB2 = 0;
  9985                           
  9986                           ;incstack = 0
  9987                           ; Regs used in _IOC_Set: [wreg+status,2]
  9988  1BA8  0024               	movlb	4	; select bank4
  9989  1BA9  110D               	bcf	13,2	;volatile
  9990                           
  9991                           ;MCU_B1.c: 386: IOCBP = 0b00000000;
  9992  1BAA  0027               	movlb	7	; select bank7
  9993  1BAB  0194               	clrf	20	;volatile
  9994                           
  9995                           ;MCU_B1.c: 387: IOCBN = 0b00000100;
  9996  1BAC  3004               	movlw	4
  9997  1BAD  0095               	movwf	21	;volatile
  9998                           
  9999                           ;MCU_B1.c: 391: IOCBF = 0b00000000;
 10000  1BAE  0196               	clrf	22	;volatile
 10001                           
 10002                           ;MCU_B1.c: 393: IOCIE = 1;
 10003  1BAF  158B               	bsf	11,3	;volatile
 10004                           
 10005                           ;MCU_B1.c: 394: IOCIF = 0;
 10006  1BB0  100B               	bcf	11,0	;volatile
 10007                           
 10008                           ;MCU_B1.c: 395: PEIE = 1;
 10009  1BB1  170B               	bsf	11,6	;volatile
 10010                           
 10011                           ;MCU_B1.c: 396: GIE = 1;
 10012  1BB2  178B               	bsf	11,7	;volatile
 10013  1BB3  0008               	return
 10014  1BB4                     __end_of_IOC_Set:	
 10015                           
 10016                           	psect	text51
 10017  1AF6                     __ptext51:	
 10018 ;; *************** function _Fosc_Set *****************
 10019 ;; Defined at:
 10020 ;;		line 56 in file "../src/MCU_B1.c"
 10021 ;; Parameters:    Size  Location     Type
 10022 ;;		None
 10023 ;; Auto vars:     Size  Location     Type
 10024 ;;		None
 10025 ;; Return value:  Size  Location     Type
 10026 ;;		None               void
 10027 ;; Registers used:
 10028 ;;		wreg
 10029 ;; Tracked objects:
 10030 ;;		On entry : 0/0
 10031 ;;		On exit  : 0/0
 10032 ;;		Unchanged: 0/0
 10033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10035 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10037 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10038 ;;Total ram usage:        0 bytes
 10039 ;; Hardware stack levels used:    1
 10040 ;; Hardware stack levels required when called:    5
 10041 ;; This function calls:
 10042 ;;		Nothing
 10043 ;; This function is called by:
 10044 ;;		_Mcu_Initialization
 10045 ;; This function uses a non-reentrant model
 10046 ;;
 10047                           
 10048                           
 10049                           ;psect for function _Fosc_Set
 10050  1AF6                     _Fosc_Set:	
 10051                           
 10052                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10053                           
 10054                           ;incstack = 0
 10055                           ; Regs used in _Fosc_Set: [wreg]
 10056  1AF6  3078               	movlw	120
 10057  1AF7  0021               	movlb	1	; select bank1
 10058  1AF8  0099               	movwf	25	;volatile
 10059  1AF9  0008               	return
 10060  1AFA                     __end_of_Fosc_Set:	
 10061                           
 10062                           	psect	text52
 10063  1B16                     __ptext52:	
 10064 ;; *************** function _ADC_Set *****************
 10065 ;; Defined at:
 10066 ;;		line 420 in file "../src/MCU_B1.c"
 10067 ;; Parameters:    Size  Location     Type
 10068 ;;		None
 10069 ;; Auto vars:     Size  Location     Type
 10070 ;;		None
 10071 ;; Return value:  Size  Location     Type
 10072 ;;		None               void
 10073 ;; Registers used:
 10074 ;;		wreg
 10075 ;; Tracked objects:
 10076 ;;		On entry : 0/0
 10077 ;;		On exit  : 0/0
 10078 ;;		Unchanged: 0/0
 10079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10083 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10084 ;;Total ram usage:        0 bytes
 10085 ;; Hardware stack levels used:    1
 10086 ;; Hardware stack levels required when called:    5
 10087 ;; This function calls:
 10088 ;;		Nothing
 10089 ;; This function is called by:
 10090 ;;		_Mcu_Initialization
 10091 ;; This function uses a non-reentrant model
 10092 ;;
 10093                           
 10094                           
 10095                           ;psect for function _ADC_Set
 10096  1B16                     _ADC_Set:	
 10097                           
 10098                           ;MCU_B1.c: 421: ADCON1 = 0xf3;
 10099                           
 10100                           ;incstack = 0
 10101                           ; Regs used in _ADC_Set: [wreg]
 10102  1B16  30F3               	movlw	243
 10103  1B17  0021               	movlb	1	; select bank1
 10104  1B18  009E               	movwf	30	;volatile
 10105                           
 10106                           ;MCU_B1.c: 422: FVRCON = 0xc1;
 10107  1B19  30C1               	movlw	193
 10108  1B1A  0022               	movlb	2	; select bank2
 10109  1B1B  0097               	movwf	23	;volatile
 10110  1B1C  0008               	return
 10111  1B1D                     __end_of_ADC_Set:	
 10112                           
 10113                           	psect	text53
 10114  004B                     __ptext53:	
 10115 ;; *************** function _Load_Main *****************
 10116 ;; Defined at:
 10117 ;;		line 39 in file "../src/OverLoad_B1.c"
 10118 ;; Parameters:    Size  Location     Type
 10119 ;;		None
 10120 ;; Auto vars:     Size  Location     Type
 10121 ;;  i               1   15[BANK0 ] unsigned char 
 10122 ;;  error           1   14[BANK0 ] unsigned char 
 10123 ;;  adjgo           1   12[BANK0 ] unsigned char 
 10124 ;;  j               1   11[BANK0 ] unsigned char 
 10125 ;; Return value:  Size  Location     Type
 10126 ;;		None               void
 10127 ;; Registers used:
 10128 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10129 ;; Tracked objects:
 10130 ;;		On entry : 0/0
 10131 ;;		On exit  : 0/0
 10132 ;;		Unchanged: 0/0
 10133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10134 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10135 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10136 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10137 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10138 ;;Total ram usage:        7 bytes
 10139 ;; Hardware stack levels used:    1
 10140 ;; Hardware stack levels required when called:    8
 10141 ;; This function calls:
 10142 ;;		___lwdiv
 10143 ;;		_getAll_DimmerLights_AdjGO
 10144 ;;		_getMain_All_Error_Status
 10145 ;;		_getMain_LightsStatus
 10146 ;;		_getMain_Lights_Count
 10147 ;;		_getMain_LoadOK
 10148 ;;		_setLoad_AH_AL_Restore
 10149 ;; This function is called by:
 10150 ;;		_main
 10151 ;; This function uses a non-reentrant model
 10152 ;;
 10153                           
 10154                           
 10155                           ;psect for function _Load_Main
 10156  004B                     _Load_Main:	
 10157                           
 10158                           ;OverLoad_B1.c: 40: char i = 0, j = 0, error = getMain_All_Error_Status(0), adjgo = 0;
 10159                           
 10160                           ;incstack = 0
 10161                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10162  004B  0020               	movlb	0	; select bank0
 10163  004C  01AF               	clrf	Load_Main@i
 10164  004D  01AB               	clrf	Load_Main@j
 10165  004E  3000               	movlw	0
 10166  004F  3191  2179  3180   	fcall	_getMain_All_Error_Status
 10167  0052  0020               	movlb	0	; select bank0
 10168  0053  00A9               	movwf	??_Load_Main
 10169  0054  0829               	movf	??_Load_Main,w
 10170  0055  00AE               	movwf	Load_Main@error
 10171  0056  01AC               	clrf	Load_Main@adjgo
 10172                           
 10173                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
 10174  0057  0022               	movlb	2	; select bank2
 10175  0058  1C25               	btfss	_Load^(0+256),0
 10176  0059  29C2               	goto	l1460
 10177                           
 10178                           ;OverLoad_B1.c: 45: adjgo = getAll_DimmerLights_AdjGO();
 10179  005A  319C  2439  3180   	fcall	_getAll_DimmerLights_AdjGO
 10180  005D  0020               	movlb	0	; select bank0
 10181  005E  00A9               	movwf	??_Load_Main
 10182  005F  0829               	movf	??_Load_Main,w
 10183  0060  00AC               	movwf	Load_Main@adjgo
 10184                           
 10185                           ;OverLoad_B1.c: 47: Load.GO = getMain_LightsStatus() == 1 && error == 0 && adjgo == 0 ? 
      +                          1 : 0;
 10186  0061  01AD               	clrf	_Load_Main$3395
 10187  0062  3190  20EB  3180   	fcall	_getMain_LightsStatus
 10188  0065  3A01               	xorlw	1
 10189  0066  1D03               	skipz
 10190  0067  2871               	goto	l8104
 10191  0068  0020               	movlb	0	; select bank0
 10192  0069  08AE               	movf	Load_Main@error,f
 10193  006A  1D03               	skipz
 10194  006B  2871               	goto	l8104
 10195  006C  08AC               	movf	Load_Main@adjgo,f
 10196  006D  1D03               	skipz
 10197  006E  2871               	goto	l8104
 10198  006F  01AD               	clrf	_Load_Main$3395
 10199  0070  0AAD               	incf	_Load_Main$3395,f
 10200  0071                     l8104:	
 10201  0071  0020               	movlb	0	; select bank0
 10202  0072  082D               	movf	_Load_Main$3395,w
 10203  0073  0022               	movlb	2	; select bank2
 10204  0074  10A5               	bcf	_Load^(0+256),1
 10205  0075  1D03               	skipz
 10206  0076  14A5               	bsf	_Load^(0+256),1
 10207                           
 10208                           ;OverLoad_B1.c: 48: if (getMain_LoadOK() == 1 && Load.Run == 0) {
 10209  0077  319B  23CD  3180   	fcall	_getMain_LoadOK
 10210  007A  3A01               	xorlw	1
 10211  007B  1D03               	skipz
 10212  007C  2882               	goto	l1463
 10213  007D  0022               	movlb	2	; select bank2
 10214  007E  19A5               	btfsc	_Load^(0+256),3
 10215  007F  2882               	goto	l1463
 10216                           
 10217                           ;OverLoad_B1.c: 49: Load.Run = 1;
 10218  0080  15A5               	bsf	_Load^(0+256),3
 10219                           
 10220                           ;OverLoad_B1.c: 50: Load.OK = 0;
 10221  0081  13A5               	bcf	_Load^(0+256),7
 10222  0082                     l1463:	
 10223                           
 10224                           ;OverLoad_B1.c: 51: }
 10225                           ;OverLoad_B1.c: 54: if (Load.GO == 1) {
 10226  0082  0022               	movlb	2	; select bank2
 10227  0083  1CA5               	btfss	_Load^(0+256),1
 10228  0084  2992               	goto	l1464
 10229                           
 10230                           ;OverLoad_B1.c: 55: Load.LightsON = 1;
 10231  0085  1525               	bsf	_Load^(0+256),2
 10232                           
 10233                           ;OverLoad_B1.c: 57: if (Load.ADtoGO == 1) {
 10234  0086  1E25               	btfss	_Load^(0+256),4
 10235  0087  2990               	goto	l1465
 10236                           
 10237                           ;OverLoad_B1.c: 58: Load.Time++;
 10238  0088  3001               	movlw	1
 10239  0089  07A6               	addwf	(_Load^(0+256)+1),f
 10240  008A  3000               	movlw	0
 10241  008B  3DA7               	addwfc	((_Load+1)^(0+256)+1),f
 10242                           
 10243                           ;OverLoad_B1.c: 59: if (Load.Time >= 5) {
 10244  008C  3000               	movlw	0
 10245  008D  0227               	subwf	((_Load+1)^(0+256)+1),w
 10246  008E  3005               	movlw	5
 10247  008F  1903               	skipnz
 10248  0090  0226               	subwf	(_Load^(0+256)+1),w
 10249  0091  1C03               	skipc
 10250  0092  0008               	return
 10251                           
 10252                           ;OverLoad_B1.c: 60: Load.Time = 0;
 10253  0093  01A6               	clrf	(_Load^(0+256)+1)
 10254  0094  01A7               	clrf	((_Load+1)^(0+256)+1)
 10255                           
 10256                           ;OverLoad_B1.c: 61: Load.ADtoGO = 0;
 10257  0095  1225               	bcf	_Load^(0+256),4
 10258                           
 10259                           ;OverLoad_B1.c: 63: for (i = 1; i < 4; i++) {
 10260  0096  0020               	movlb	0	; select bank0
 10261  0097  01AF               	clrf	Load_Main@i
 10262  0098  0AAF               	incf	Load_Main@i,f
 10263  0099  3004               	movlw	4
 10264  009A  022F               	subwf	Load_Main@i,w
 10265  009B  1803               	btfsc	3,0
 10266  009C  28C7               	goto	l8132
 10267  009D                     l8126:	
 10268                           
 10269                           ;OverLoad_B1.c: 64: Load.ADH += Load.AH[i];
 10270  009D  352F               	lslf	Load_Main@i,w
 10271  009E  3E30               	addlw	(_Load+11)& (0+255)
 10272  009F  0086               	movwf	6
 10273  00A0  3001               	movlw	1	; select bank2/3
 10274  00A1  0087               	movwf	7
 10275  00A2  3F40               	moviw [0]fsr1
 10276  00A3  00A9               	movwf	??_Load_Main
 10277  00A4  3F41               	moviw [1]fsr1
 10278  00A5  00AA               	movwf	??_Load_Main+1
 10279  00A6  0829               	movf	??_Load_Main,w
 10280  00A7  0022               	movlb	2	; select bank2
 10281  00A8  07AA               	addwf	(_Load^(0+256)+5),f
 10282  00A9  0020               	movlb	0	; select bank0
 10283  00AA  082A               	movf	??_Load_Main+1,w
 10284  00AB  0022               	movlb	2	; select bank2
 10285  00AC  3DAB               	addwfc	((_Load+1)^(0+256)+5),f
 10286                           
 10287                           ;OverLoad_B1.c: 65: Load.ADL += Load.AL[i];
 10288  00AD  0020               	movlb	0	; select bank0
 10289  00AE  352F               	lslf	Load_Main@i,w
 10290  00AF  3E3A               	addlw	(_Load+21)& (0+255)
 10291  00B0  0086               	movwf	6
 10292  00B1  3001               	movlw	1	; select bank2/3
 10293  00B2  0087               	movwf	7
 10294  00B3  3F40               	moviw [0]fsr1
 10295  00B4  00A9               	movwf	??_Load_Main
 10296  00B5  3F41               	moviw [1]fsr1
 10297  00B6  00AA               	movwf	??_Load_Main+1
 10298  00B7  0829               	movf	??_Load_Main,w
 10299  00B8  0022               	movlb	2	; select bank2
 10300  00B9  07AC               	addwf	(_Load^(0+256)+7),f
 10301  00BA  0020               	movlb	0	; select bank0
 10302  00BB  082A               	movf	??_Load_Main+1,w
 10303  00BC  0022               	movlb	2	; select bank2
 10304  00BD  3DAD               	addwfc	((_Load+1)^(0+256)+7),f
 10305  00BE  3001               	movlw	1
 10306  00BF  0020               	movlb	0	; select bank0
 10307  00C0  00A9               	movwf	??_Load_Main
 10308  00C1  0829               	movf	??_Load_Main,w
 10309  00C2  07AF               	addwf	Load_Main@i,f
 10310  00C3  3004               	movlw	4
 10311  00C4  022F               	subwf	Load_Main@i,w
 10312  00C5  1C03               	skipc
 10313  00C6  289D               	goto	l8126
 10314  00C7                     l8132:	
 10315                           
 10316                           ;OverLoad_B1.c: 66: }
 10317                           ;OverLoad_B1.c: 67: Load.ADH /= 3;
 10318  00C7  3003               	movlw	3
 10319  00C8  00A0               	movwf	___lwdiv@divisor
 10320  00C9  3000               	movlw	0
 10321  00CA  00A1               	movwf	___lwdiv@divisor+1
 10322  00CB  0022               	movlb	2	; select bank2
 10323  00CC  082B               	movf	((_Load+1)^(0+256)+5),w
 10324  00CD  0020               	movlb	0	; select bank0
 10325  00CE  01A3               	clrf	___lwdiv@dividend+1
 10326  00CF  07A3               	addwf	___lwdiv@dividend+1,f
 10327  00D0  0022               	movlb	2	; select bank2
 10328  00D1  082A               	movf	(_Load^(0+256)+5),w
 10329  00D2  0020               	movlb	0	; select bank0
 10330  00D3  01A2               	clrf	___lwdiv@dividend
 10331  00D4  07A2               	addwf	___lwdiv@dividend,f
 10332  00D5  3192  2281  3180   	fcall	___lwdiv
 10333  00D8  0020               	movlb	0	; select bank0
 10334  00D9  0821               	movf	?___lwdiv+1,w
 10335  00DA  0022               	movlb	2	; select bank2
 10336  00DB  01AB               	clrf	((_Load+1)^(0+256)+5)
 10337  00DC  07AB               	addwf	((_Load+1)^(0+256)+5),f
 10338  00DD  0020               	movlb	0	; select bank0
 10339  00DE  0820               	movf	?___lwdiv,w
 10340  00DF  0022               	movlb	2	; select bank2
 10341  00E0  01AA               	clrf	(_Load^(0+256)+5)
 10342  00E1  07AA               	addwf	(_Load^(0+256)+5),f
 10343                           
 10344                           ;OverLoad_B1.c: 68: Load.ADL /= 3;
 10345  00E2  3003               	movlw	3
 10346  00E3  0020               	movlb	0	; select bank0
 10347  00E4  00A0               	movwf	___lwdiv@divisor
 10348  00E5  3000               	movlw	0
 10349  00E6  00A1               	movwf	___lwdiv@divisor+1
 10350  00E7  0022               	movlb	2	; select bank2
 10351  00E8  082D               	movf	((_Load+1)^(0+256)+7),w
 10352  00E9  0020               	movlb	0	; select bank0
 10353  00EA  01A3               	clrf	___lwdiv@dividend+1
 10354  00EB  07A3               	addwf	___lwdiv@dividend+1,f
 10355  00EC  0022               	movlb	2	; select bank2
 10356  00ED  082C               	movf	(_Load^(0+256)+7),w
 10357  00EE  0020               	movlb	0	; select bank0
 10358  00EF  01A2               	clrf	___lwdiv@dividend
 10359  00F0  07A2               	addwf	___lwdiv@dividend,f
 10360  00F1  3192  2281  3180   	fcall	___lwdiv
 10361  00F4  0020               	movlb	0	; select bank0
 10362  00F5  0821               	movf	?___lwdiv+1,w
 10363  00F6  0022               	movlb	2	; select bank2
 10364  00F7  01AD               	clrf	((_Load+1)^(0+256)+7)
 10365  00F8  07AD               	addwf	((_Load+1)^(0+256)+7),f
 10366  00F9  0020               	movlb	0	; select bank0
 10367  00FA  0820               	movf	?___lwdiv,w
 10368  00FB  0022               	movlb	2	; select bank2
 10369  00FC  01AC               	clrf	(_Load^(0+256)+7)
 10370  00FD  07AC               	addwf	(_Load^(0+256)+7),f
 10371                           
 10372                           ;OverLoad_B1.c: 69: setLoad_AH_AL_Restore();
 10373  00FE  319E  264D  3180   	fcall	_setLoad_AH_AL_Restore
 10374                           
 10375                           ;OverLoad_B1.c: 71: if (Load.ADH > Load.ADL) {
 10376  0101  0022               	movlb	2	; select bank2
 10377  0102  082B               	movf	((_Load+1)^(0+256)+5),w
 10378  0103  022D               	subwf	((_Load+1)^(0+256)+7),w
 10379  0104  1D03               	skipz
 10380  0105  2908               	goto	u8185
 10381  0106  082A               	movf	(_Load^(0+256)+5),w
 10382  0107  022C               	subwf	(_Load^(0+256)+7),w
 10383  0108                     u8185:	
 10384  0108  1803               	skipnc
 10385  0109  0008               	return
 10386                           
 10387                           ;OverLoad_B1.c: 72: Load.AD = Load.ADH - Load.ADL;
 10388  010A  3005               	movlw	5
 10389  010B  3E25               	addlw	_Load& (0+255)
 10390  010C  0086               	movwf	6
 10391  010D  3001               	movlw	1	; select bank2/3
 10392  010E  0087               	movwf	7
 10393  010F  092C               	comf	(_Load^(0+256)+7),w
 10394  0110  0020               	movlb	0	; select bank0
 10395  0111  00A9               	movwf	??_Load_Main
 10396  0112  0022               	movlb	2	; select bank2
 10397  0113  092D               	comf	((_Load+1)^(0+256)+7),w
 10398  0114  0020               	movlb	0	; select bank0
 10399  0115  00AA               	movwf	??_Load_Main+1
 10400  0116  0AA9               	incf	??_Load_Main,f
 10401  0117  1903               	skipnz
 10402  0118  0AAA               	incf	??_Load_Main+1,f
 10403  0119  3F40               	moviw [0]fsr1
 10404  011A  0729               	addwf	??_Load_Main,w
 10405  011B  0022               	movlb	2	; select bank2
 10406  011C  00C4               	movwf	(_Load^(0+256)+31)
 10407  011D  3F41               	moviw [1]fsr1
 10408  011E  0020               	movlb	0	; select bank0
 10409  011F  3D2A               	addwfc	??_Load_Main+1,w
 10410  0120  0022               	movlb	2	; select bank2
 10411  0121  00C5               	movwf	(_Load^(0+256)+32)
 10412                           
 10413                           ;OverLoad_B1.c: 73: Load.ADH = 0;
 10414  0122  01AA               	clrf	(_Load^(0+256)+5)
 10415  0123  01AB               	clrf	((_Load+1)^(0+256)+5)
 10416                           
 10417                           ;OverLoad_B1.c: 74: Load.ADL = 0;
 10418  0124  01AC               	clrf	(_Load^(0+256)+7)
 10419  0125  01AD               	clrf	((_Load+1)^(0+256)+7)
 10420                           
 10421                           ;OverLoad_B1.c: 75: Load.LightsCount = getMain_Lights_Count();
 10422  0126  3188  2000  3180   	fcall	_getMain_Lights_Count
 10423  0129  0020               	movlb	0	; select bank0
 10424  012A  00A9               	movwf	??_Load_Main
 10425  012B  0829               	movf	??_Load_Main,w
 10426  012C  0022               	movlb	2	; select bank2
 10427  012D  00D1               	movwf	(_Load^(0+256)+44)
 10428                           
 10429                           ;OverLoad_B1.c: 77: if (Load.Run == 1) {
 10430  012E  1DA5               	btfss	_Load^(0+256),3
 10431  012F  295B               	goto	l8164
 10432                           
 10433                           ;OverLoad_B1.c: 78: if (Load.Count < 2) {
 10434  0130  3002               	movlw	2
 10435  0131  024E               	subwf	(_Load^(0+256)+41),w
 10436  0132  1803               	skipnc
 10437  0133  295B               	goto	l8164
 10438                           
 10439                           ;OverLoad_B1.c: 79: Load.Count++;
 10440  0134  3001               	movlw	1
 10441  0135  0020               	movlb	0	; select bank0
 10442  0136  00A9               	movwf	??_Load_Main
 10443  0137  0829               	movf	??_Load_Main,w
 10444  0138  0022               	movlb	2	; select bank2
 10445  0139  07CE               	addwf	(_Load^(0+256)+41),f
 10446                           
 10447                           ;OverLoad_B1.c: 80: if (Load.Count == 1) {
 10448  013A  084E               	movf	(_Load^(0+256)+41),w
 10449  013B  3A01               	xorlw	1
 10450  013C  1D03               	skipz
 10451  013D  2948               	goto	l8156
 10452                           
 10453                           ;OverLoad_B1.c: 81: Load.ErrorCountValue = 2;
 10454  013E  3002               	movlw	2
 10455  013F  0020               	movlb	0	; select bank0
 10456  0140  00A9               	movwf	??_Load_Main
 10457  0141  0829               	movf	??_Load_Main,w
 10458  0142  0022               	movlb	2	; select bank2
 10459  0143  00D0               	movwf	(_Load^(0+256)+43)
 10460                           
 10461                           ;OverLoad_B1.c: 82: Load.JudgeValue = (20*50);
 10462  0144  30E8               	movlw	232
 10463  0145  00CA               	movwf	(_Load^(0+256)+37)
 10464  0146  3003               	movlw	3
 10465  0147  2953               	goto	L7
 10466  0148                     l8156:	
 10467                           ;OverLoad_B1.c: 83: } else if (Load.Count == 2) {
 10468                           
 10469  0148  084E               	movf	(_Load^(0+256)+41),w
 10470  0149  3A02               	xorlw	2
 10471  014A  1D03               	skipz
 10472  014B  295B               	goto	l8164
 10473                           
 10474                           ;OverLoad_B1.c: 84: if (Load.LightsCount == 1) {
 10475  014C  0851               	movf	(_Load^(0+256)+44),w
 10476  014D  3A01               	xorlw	1
 10477  014E  1D03               	skipz
 10478  014F  2955               	goto	l8162
 10479                           
 10480                           ;OverLoad_B1.c: 85: Load.JudgeValue = (int)(1.1*50);
 10481  0150  3037               	movlw	55
 10482  0151  00CA               	movwf	(_Load^(0+256)+37)
 10483  0152  3000               	movlw	0
 10484  0153                     L7:	
 10485  0153  00CB               	movwf	(_Load^(0+256)+38)
 10486                           
 10487                           ;OverLoad_B1.c: 86: } else {
 10488  0154  295B               	goto	l8164
 10489  0155                     l8162:	
 10490                           
 10491                           ;OverLoad_B1.c: 87: Load.JudgeValue = (int)(1.1*50) + Load.TotalLoad;
 10492  0155  082E               	movf	(_Load^(0+256)+9),w
 10493  0156  3E37               	addlw	55
 10494  0157  00CA               	movwf	(_Load^(0+256)+37)
 10495  0158  3000               	movlw	0
 10496  0159  3D2F               	addwfc	((_Load+1)^(0+256)+9),w
 10497  015A  00CB               	movwf	((_Load+1)^(0+256)+37)
 10498  015B                     l8164:	
 10499                           
 10500                           ;OverLoad_B1.c: 88: }
 10501                           ;OverLoad_B1.c: 89: }
 10502                           ;OverLoad_B1.c: 90: }
 10503                           ;OverLoad_B1.c: 91: }
 10504                           ;OverLoad_B1.c: 93: if (Load.AD >= Load.JudgeValue) {
 10505  015B  084B               	movf	((_Load+1)^(0+256)+37),w
 10506  015C  0245               	subwf	((_Load+1)^(0+256)+31),w
 10507  015D  1D03               	skipz
 10508  015E  2961               	goto	u8245
 10509  015F  084A               	movf	(_Load^(0+256)+37),w
 10510  0160  0244               	subwf	(_Load^(0+256)+31),w
 10511  0161                     u8245:	
 10512  0161  1C03               	skipc
 10513  0162  2970               	goto	l8174
 10514                           
 10515                           ;OverLoad_B1.c: 94: Load.ErrorCount++;
 10516  0163  3001               	movlw	1
 10517  0164  0020               	movlb	0	; select bank0
 10518  0165  00A9               	movwf	??_Load_Main
 10519  0166  0829               	movf	??_Load_Main,w
 10520  0167  0022               	movlb	2	; select bank2
 10521  0168  07CF               	addwf	(_Load^(0+256)+42),f
 10522                           
 10523                           ;OverLoad_B1.c: 95: if (Load.ErrorCount > Load.ErrorCountValue) {
 10524  0169  084F               	movf	(_Load^(0+256)+42),w
 10525  016A  0250               	subwf	(_Load^(0+256)+43),w
 10526  016B  1803               	skipnc
 10527  016C  0008               	return
 10528                           
 10529                           ;OverLoad_B1.c: 96: Load.ErrorCount = 0;
 10530  016D  01CF               	clrf	(_Load^(0+256)+42)
 10531                           
 10532                           ;OverLoad_B1.c: 97: Load.ERROR = 1;
 10533  016E  16A5               	bsf	_Load^(0+256),5
 10534                           
 10535                           ;OverLoad_B1.c: 118: }
 10536                           ;OverLoad_B1.c: 119: } else {
 10537  016F  0008               	return
 10538  0170                     l8174:	
 10539                           
 10540                           ;OverLoad_B1.c: 120: Load.ErrorCount = 0;
 10541  0170  01CF               	clrf	(_Load^(0+256)+42)
 10542                           
 10543                           ;OverLoad_B1.c: 121: if (Load.Run == 1) {
 10544  0171  1DA5               	btfss	_Load^(0+256),3
 10545  0172  0008               	return
 10546                           
 10547                           ;OverLoad_B1.c: 122: if (Load.OK == 0) {
 10548  0173  1BA5               	btfsc	_Load^(0+256),7
 10549  0174  0008               	return
 10550                           
 10551                           ;OverLoad_B1.c: 123: Load.SafeCount++;
 10552  0175  3001               	movlw	1
 10553  0176  0020               	movlb	0	; select bank0
 10554  0177  00A9               	movwf	??_Load_Main
 10555  0178  0829               	movf	??_Load_Main,w
 10556  0179  0022               	movlb	2	; select bank2
 10557  017A  07D2               	addwf	(_Load^(0+256)+45),f
 10558                           
 10559                           ;OverLoad_B1.c: 124: if (Load.SafeCount >= 3) {
 10560  017B  3003               	movlw	3
 10561  017C  0252               	subwf	(_Load^(0+256)+45),w
 10562  017D  1C03               	skipc
 10563  017E  0008               	return
 10564                           
 10565                           ;OverLoad_B1.c: 125: Load.SafeCount = 0;
 10566  017F  01D2               	clrf	(_Load^(0+256)+45)
 10567                           
 10568                           ;OverLoad_B1.c: 126: Load.OK = 1;
 10569  0180  17A5               	bsf	_Load^(0+256),7
 10570                           
 10571                           ;OverLoad_B1.c: 127: Load.Run = 0;
 10572  0181  11A5               	bcf	_Load^(0+256),3
 10573                           
 10574                           ;OverLoad_B1.c: 128: Load.Count = 0;
 10575  0182  01CE               	clrf	(_Load^(0+256)+41)
 10576                           
 10577                           ;OverLoad_B1.c: 129: Load.TotalLoad = Load.AD;
 10578  0183  0845               	movf	((_Load+1)^(0+256)+31),w
 10579  0184  01AF               	clrf	((_Load+1)^(0+256)+9)
 10580  0185  07AF               	addwf	((_Load+1)^(0+256)+9),f
 10581  0186  0844               	movf	(_Load^(0+256)+31),w
 10582  0187  01AE               	clrf	(_Load^(0+256)+9)
 10583  0188  07AE               	addwf	(_Load^(0+256)+9),f
 10584                           
 10585                           ;OverLoad_B1.c: 130: Load.ErrorCountValue = 3;
 10586  0189  3003               	movlw	3
 10587  018A  0020               	movlb	0	; select bank0
 10588  018B  00A9               	movwf	??_Load_Main
 10589  018C  0829               	movf	??_Load_Main,w
 10590  018D  0022               	movlb	2	; select bank2
 10591  018E  00D0               	movwf	(_Load^(0+256)+43)
 10592                           
 10593                           ;OverLoad_B1.c: 154: }
 10594                           ;OverLoad_B1.c: 155: }
 10595                           ;OverLoad_B1.c: 156: }
 10596                           ;OverLoad_B1.c: 157: }
 10597                           ;OverLoad_B1.c: 158: }
 10598                           ;OverLoad_B1.c: 159: }
 10599                           ;OverLoad_B1.c: 160: } else {
 10600  018F  0008               	return
 10601  0190                     l1465:	
 10602                           
 10603                           ;OverLoad_B1.c: 161: Load.ADtoGO = 1;
 10604  0190  1625               	bsf	_Load^(0+256),4
 10605                           
 10606                           ;OverLoad_B1.c: 162: }
 10607                           ;OverLoad_B1.c: 163: } else {
 10608  0191  0008               	return
 10609  0192                     l1464:	
 10610                           
 10611                           ;OverLoad_B1.c: 164: if (Load.LightsON == 1 && error != 3) {
 10612  0192  1D25               	btfss	_Load^(0+256),2
 10613  0193  29B0               	goto	l8224
 10614  0194  0020               	movlb	0	; select bank0
 10615  0195  082E               	movf	Load_Main@error,w
 10616  0196  3A03               	xorlw	3
 10617  0197  1903               	skipnz
 10618  0198  29B0               	goto	l8224
 10619                           
 10620                           ;OverLoad_B1.c: 165: Load.LightsON = 0;
 10621  0199  0022               	movlb	2	; select bank2
 10622  019A  1125               	bcf	_Load^(0+256),2
 10623                           
 10624                           ;OverLoad_B1.c: 167: Load.Time = 0;
 10625  019B  01A6               	clrf	(_Load^(0+256)+1)
 10626  019C  01A7               	clrf	((_Load+1)^(0+256)+1)
 10627                           
 10628                           ;OverLoad_B1.c: 168: Load.ADtoGO = 0;
 10629  019D  1225               	bcf	_Load^(0+256),4
 10630                           
 10631                           ;OverLoad_B1.c: 169: setLoad_AH_AL_Restore();
 10632  019E  319E  264D  3180   	fcall	_setLoad_AH_AL_Restore
 10633                           
 10634                           ;OverLoad_B1.c: 170: Load.Count = 0;
 10635  01A1  0022               	movlb	2	; select bank2
 10636  01A2  01CE               	clrf	(_Load^(0+256)+41)
 10637                           
 10638                           ;OverLoad_B1.c: 171: Load.ErrorCount = 0;
 10639  01A3  01CF               	clrf	(_Load^(0+256)+42)
 10640                           
 10641                           ;OverLoad_B1.c: 172: Load.SafeCount = 0;
 10642  01A4  01D2               	clrf	(_Load^(0+256)+45)
 10643                           
 10644                           ;OverLoad_B1.c: 174: Load.ADH = 0;
 10645  01A5  01AA               	clrf	(_Load^(0+256)+5)
 10646  01A6  01AB               	clrf	((_Load+1)^(0+256)+5)
 10647                           
 10648                           ;OverLoad_B1.c: 175: Load.ADL = 0;
 10649  01A7  01AC               	clrf	(_Load^(0+256)+7)
 10650  01A8  01AD               	clrf	((_Load+1)^(0+256)+7)
 10651                           
 10652                           ;OverLoad_B1.c: 176: Load.AD = 0;
 10653  01A9  01C4               	clrf	(_Load^(0+256)+31)
 10654  01AA  01C5               	clrf	((_Load+1)^(0+256)+31)
 10655                           
 10656                           ;OverLoad_B1.c: 177: Load.JudgeValue = 0;
 10657  01AB  01CA               	clrf	(_Load^(0+256)+37)
 10658  01AC  01CB               	clrf	((_Load+1)^(0+256)+37)
 10659                           
 10660                           ;OverLoad_B1.c: 178: Load.LightsCount = 0;
 10661  01AD  01D1               	clrf	(_Load^(0+256)+44)
 10662                           
 10663                           ;OverLoad_B1.c: 179: Load.Run = 0;
 10664  01AE  11A5               	bcf	_Load^(0+256),3
 10665                           
 10666                           ;OverLoad_B1.c: 180: Load.OK = 1;
 10667  01AF  17A5               	bsf	_Load^(0+256),7
 10668  01B0                     l8224:	
 10669                           
 10670                           ;OverLoad_B1.c: 201: }
 10671                           ;OverLoad_B1.c: 202: if (Load.ERROR == 1) {
 10672  01B0  0022               	movlb	2	; select bank2
 10673  01B1  1EA5               	btfss	_Load^(0+256),5
 10674  01B2  0008               	return
 10675                           
 10676                           ;OverLoad_B1.c: 203: Load.ErrorTime++;
 10677  01B3  3001               	movlw	1
 10678  01B4  07A8               	addwf	(_Load^(0+256)+3),f
 10679  01B5  3000               	movlw	0
 10680  01B6  3DA9               	addwfc	((_Load+1)^(0+256)+3),f
 10681                           
 10682                           ;OverLoad_B1.c: 204: if (Load.ErrorTime >= 1000) {
 10683  01B7  3003               	movlw	3
 10684  01B8  0229               	subwf	((_Load+1)^(0+256)+3),w
 10685  01B9  30E8               	movlw	232
 10686  01BA  1903               	skipnz
 10687  01BB  0228               	subwf	(_Load^(0+256)+3),w
 10688  01BC  1C03               	skipc
 10689  01BD  0008               	return
 10690                           
 10691                           ;OverLoad_B1.c: 205: Load.ErrorTime = 0;
 10692  01BE  01A8               	clrf	(_Load^(0+256)+3)
 10693  01BF  01A9               	clrf	((_Load+1)^(0+256)+3)
 10694                           
 10695                           ;OverLoad_B1.c: 206: Load.ERROR = 0;
 10696  01C0  12A5               	bcf	_Load^(0+256),5
 10697                           
 10698                           ;OverLoad_B1.c: 207: }
 10699                           ;OverLoad_B1.c: 208: }
 10700                           ;OverLoad_B1.c: 209: }
 10701                           ;OverLoad_B1.c: 210: } else {
 10702  01C1  0008               	return
 10703  01C2                     l1460:	
 10704                           
 10705                           ;OverLoad_B1.c: 211: if (myMain.PowerON == 1) {
 10706  01C2  0021               	movlb	1	; select bank1
 10707  01C3  1C20               	btfss	_myMain^(0+128),0
 10708  01C4  0008               	return
 10709                           
 10710                           ;OverLoad_B1.c: 212: Load.Enable = 1;
 10711  01C5  0022               	movlb	2	; select bank2
 10712  01C6  1425               	bsf	_Load^(0+256),0
 10713  01C7  0008               	return
 10714  01C8                     __end_of_Load_Main:	
 10715                           
 10716                           	psect	text54
 10717  1BCD                     __ptext54:	
 10718 ;; *************** function _getMain_LoadOK *****************
 10719 ;; Defined at:
 10720 ;;		line 442 in file "../src/main_B1.c"
 10721 ;; Parameters:    Size  Location     Type
 10722 ;;		None
 10723 ;; Auto vars:     Size  Location     Type
 10724 ;;  ok              1    2[BANK0 ] unsigned char 
 10725 ;; Return value:  Size  Location     Type
 10726 ;;                  1    wreg      unsigned char 
 10727 ;; Registers used:
 10728 ;;		wreg, status,2, pclath, cstack
 10729 ;; Tracked objects:
 10730 ;;		On entry : 0/0
 10731 ;;		On exit  : 0/0
 10732 ;;		Unchanged: 0/0
 10733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10735 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10736 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10737 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10738 ;;Total ram usage:        2 bytes
 10739 ;; Hardware stack levels used:    1
 10740 ;; Hardware stack levels required when called:    6
 10741 ;; This function calls:
 10742 ;;		_getDimmer_LoadOK
 10743 ;; This function is called by:
 10744 ;;		_Load_Main
 10745 ;; This function uses a non-reentrant model
 10746 ;;
 10747                           
 10748                           
 10749                           ;psect for function _getMain_LoadOK
 10750  1BCD                     _getMain_LoadOK:	
 10751                           
 10752                           ;main_B1.c: 443: char ok = 0;
 10753                           
 10754                           ;incstack = 0
 10755                           ; Regs used in _getMain_LoadOK: [wreg+status,2+pclath+cstack]
 10756  1BCD  0020               	movlb	0	; select bank0
 10757  1BCE  01A2               	clrf	getMain_LoadOK@ok
 10758                           
 10759                           ;main_B1.c: 449: ok = getDimmer_LoadOK() == 1 ? 1 : 0;
 10760  1BCF  319B  233D         	fcall	_getDimmer_LoadOK
 10761  1BD1  3A01               	xorlw	1
 10762  1BD2  3000               	movlw	0
 10763  1BD3  1903               	skipnz
 10764  1BD4  3001               	movlw	1
 10765  1BD5  0020               	movlb	0	; select bank0
 10766  1BD6  00A1               	movwf	??_getMain_LoadOK
 10767  1BD7  0821               	movf	??_getMain_LoadOK,w
 10768  1BD8  00A2               	movwf	getMain_LoadOK@ok
 10769                           
 10770                           ;main_B1.c: 451: return ok;
 10771  1BD9  0822               	movf	getMain_LoadOK@ok,w
 10772  1BDA  0008               	return
 10773  1BDB                     __end_of_getMain_LoadOK:	
 10774                           
 10775                           	psect	text55
 10776  1B3D                     __ptext55:	
 10777 ;; *************** function _getDimmer_LoadOK *****************
 10778 ;; Defined at:
 10779 ;;		line 599 in file "../src/Dimmer_B1.c"
 10780 ;; Parameters:    Size  Location     Type
 10781 ;;		None
 10782 ;; Auto vars:     Size  Location     Type
 10783 ;;  status          1    0[BANK0 ] unsigned char 
 10784 ;; Return value:  Size  Location     Type
 10785 ;;                  1    wreg      unsigned char 
 10786 ;; Registers used:
 10787 ;;		wreg, status,2
 10788 ;; Tracked objects:
 10789 ;;		On entry : 0/0
 10790 ;;		On exit  : 0/0
 10791 ;;		Unchanged: 0/0
 10792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10794 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10796 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10797 ;;Total ram usage:        1 bytes
 10798 ;; Hardware stack levels used:    1
 10799 ;; Hardware stack levels required when called:    5
 10800 ;; This function calls:
 10801 ;;		Nothing
 10802 ;; This function is called by:
 10803 ;;		_getMain_LoadOK
 10804 ;; This function uses a non-reentrant model
 10805 ;;
 10806                           
 10807                           
 10808                           ;psect for function _getDimmer_LoadOK
 10809  1B3D                     _getDimmer_LoadOK:	
 10810                           
 10811                           ;Dimmer_B1.c: 600: char status = Dimmer.LoadOK == 1 ? 1 : 0;
 10812                           
 10813                           ;incstack = 0
 10814                           ; Regs used in _getDimmer_LoadOK: [wreg+status,2]
 10815  1B3D  3000               	movlw	0
 10816  1B3E  0022               	movlb	2	; select bank2
 10817  1B3F  18A0               	btfsc	_Dimmer^(0+256),1
 10818  1B40  3001               	movlw	1
 10819  1B41  0020               	movlb	0	; select bank0
 10820  1B42  00A0               	movwf	getDimmer_LoadOK@status
 10821                           
 10822                           ;Dimmer_B1.c: 601: return status;
 10823  1B43  0820               	movf	getDimmer_LoadOK@status,w
 10824  1B44  0008               	return
 10825  1B45                     __end_of_getDimmer_LoadOK:	
 10826                           
 10827                           	psect	text56
 10828  0800                     __ptext56:	
 10829 ;; *************** function _getMain_Lights_Count *****************
 10830 ;; Defined at:
 10831 ;;		line 412 in file "../src/main_B1.c"
 10832 ;; Parameters:    Size  Location     Type
 10833 ;;		None
 10834 ;; Auto vars:     Size  Location     Type
 10835 ;;  status2         1    3[BANK0 ] unsigned char 
 10836 ;;  status1         1    2[BANK0 ] unsigned char 
 10837 ;;  status3         1    1[BANK0 ] unsigned char 
 10838 ;;  count           1    0[BANK0 ] unsigned char 
 10839 ;; Return value:  Size  Location     Type
 10840 ;;                  1    wreg      unsigned char 
 10841 ;; Registers used:
 10842 ;;		wreg, status,2, status,0
 10843 ;; Tracked objects:
 10844 ;;		On entry : 0/0
 10845 ;;		On exit  : 0/0
 10846 ;;		Unchanged: 0/0
 10847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10849 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10851 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10852 ;;Total ram usage:        4 bytes
 10853 ;; Hardware stack levels used:    1
 10854 ;; Hardware stack levels required when called:    5
 10855 ;; This function calls:
 10856 ;;		Nothing
 10857 ;; This function is called by:
 10858 ;;		_Load_Main
 10859 ;; This function uses a non-reentrant model
 10860 ;;
 10861                           
 10862                           
 10863                           ;psect for function _getMain_Lights_Count
 10864  0800                     _getMain_Lights_Count:	
 10865                           
 10866                           ;main_B1.c: 413: char status1 = 0, status2 = 0, status3 = 0, count = 0;
 10867                           
 10868                           ;incstack = 0
 10869                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 10870  0800  0020               	movlb	0	; select bank0
 10871  0801  01A2               	clrf	getMain_Lights_Count@status1
 10872  0802  01A3               	clrf	getMain_Lights_Count@status2
 10873  0803  01A1               	clrf	getMain_Lights_Count@status3
 10874  0804  01A0               	clrf	getMain_Lights_Count@count
 10875                           
 10876                           ;main_B1.c: 417: status1 = DimmerLights1.Loop == 1 ? 1 : 0;
 10877  0805  3000               	movlw	0
 10878  0806  0023               	movlb	3	; select bank3
 10879  0807  18C7               	btfsc	(_DimmerLights1^(0+384)+9),1
 10880  0808  3001               	movlw	1
 10881  0809  0020               	movlb	0	; select bank0
 10882  080A  00A2               	movwf	getMain_Lights_Count@status1
 10883                           
 10884                           ;main_B1.c: 420: status2 = DimmerLights2.Loop == 1 ? 1 : 0;
 10885  080B  3000               	movlw	0
 10886  080C  0023               	movlb	3	; select bank3
 10887  080D  18D6               	btfsc	(_DimmerLights2^(0+384)+9),1
 10888  080E  3001               	movlw	1
 10889  080F  0020               	movlb	0	; select bank0
 10890  0810  00A3               	movwf	getMain_Lights_Count@status2
 10891                           
 10892                           ;main_B1.c: 438: return count = (status1 + status2 + status3);
 10893  0811  0822               	movf	getMain_Lights_Count@status1,w
 10894  0812  0723               	addwf	getMain_Lights_Count@status2,w
 10895  0813  0721               	addwf	getMain_Lights_Count@status3,w
 10896  0814  00A0               	movwf	getMain_Lights_Count@count
 10897  0815  0008               	return
 10898  0816                     __end_of_getMain_Lights_Count:	
 10899                           
 10900                           	psect	text57
 10901  1C39                     __ptext57:	
 10902 ;; *************** function _getAll_DimmerLights_AdjGO *****************
 10903 ;; Defined at:
 10904 ;;		line 490 in file "../src/Dimmer_B1.c"
 10905 ;; Parameters:    Size  Location     Type
 10906 ;;		None
 10907 ;; Auto vars:     Size  Location     Type
 10908 ;;  adjgo           1    1[BANK0 ] unsigned char 
 10909 ;; Return value:  Size  Location     Type
 10910 ;;                  1    wreg      unsigned char 
 10911 ;; Registers used:
 10912 ;;		wreg, status,2
 10913 ;; Tracked objects:
 10914 ;;		On entry : 0/0
 10915 ;;		On exit  : 0/0
 10916 ;;		Unchanged: 0/0
 10917 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10918 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10919 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10920 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10921 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10922 ;;Total ram usage:        3 bytes
 10923 ;; Hardware stack levels used:    1
 10924 ;; Hardware stack levels required when called:    5
 10925 ;; This function calls:
 10926 ;;		Nothing
 10927 ;; This function is called by:
 10928 ;;		_setDimmerLights_SwOn
 10929 ;;		_setDimmerLights_AdjControl
 10930 ;;		_Load_Main
 10931 ;; This function uses a non-reentrant model
 10932 ;;
 10933                           
 10934                           
 10935                           ;psect for function _getAll_DimmerLights_AdjGO
 10936  1C39                     _getAll_DimmerLights_AdjGO:	
 10937                           
 10938                           ;Dimmer_B1.c: 491: char adjgo = 0;
 10939                           
 10940                           ;incstack = 0
 10941                           ; Regs used in _getAll_DimmerLights_AdjGO: [wreg+status,2]
 10942  1C39  0020               	movlb	0	; select bank0
 10943  1C3A  01A1               	clrf	getAll_DimmerLights_AdjGO@adjgo
 10944                           
 10945                           ;Dimmer_B1.c: 496: adjgo = DimmerLights1.AdjGo == 1 || DimmerLights2.AdjGo == 1 ? 1 : 0;
 10946  1C3B  01A2               	clrf	_getAll_DimmerLights_AdjGO$2248
 10947  1C3C  0AA2               	incf	_getAll_DimmerLights_AdjGO$2248,f
 10948  1C3D  0023               	movlb	3	; select bank3
 10949  1C3E  1DC6               	btfss	(_DimmerLights1^(0+384)+8),3
 10950  1C3F  19D5               	btfsc	(_DimmerLights2^(0+384)+8),3
 10951  1C40  2C43               	goto	l6260
 10952  1C41  0020               	movlb	0	; select bank0
 10953  1C42  01A2               	clrf	_getAll_DimmerLights_AdjGO$2248
 10954  1C43                     l6260:	
 10955  1C43  0020               	movlb	0	; select bank0
 10956  1C44  0822               	movf	_getAll_DimmerLights_AdjGO$2248,w
 10957  1C45  00A0               	movwf	??_getAll_DimmerLights_AdjGO
 10958  1C46  0820               	movf	??_getAll_DimmerLights_AdjGO,w
 10959  1C47  00A1               	movwf	getAll_DimmerLights_AdjGO@adjgo
 10960                           
 10961                           ;Dimmer_B1.c: 501: return adjgo;
 10962  1C48  0821               	movf	getAll_DimmerLights_AdjGO@adjgo,w
 10963  1C49  0008               	return
 10964  1C4A                     __end_of_getAll_DimmerLights_AdjGO:	
 10965                           
 10966                           	psect	text58
 10967  1281                     __ptext58:	
 10968 ;; *************** function ___lwdiv *****************
 10969 ;; Defined at:
 10970 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 10971 ;; Parameters:    Size  Location     Type
 10972 ;;  divisor         2    0[BANK0 ] unsigned int 
 10973 ;;  dividend        2    2[BANK0 ] unsigned int 
 10974 ;; Auto vars:     Size  Location     Type
 10975 ;;  quotient        2    5[BANK0 ] unsigned int 
 10976 ;;  counter         1    7[BANK0 ] unsigned char 
 10977 ;; Return value:  Size  Location     Type
 10978 ;;                  2    0[BANK0 ] unsigned int 
 10979 ;; Registers used:
 10980 ;;		wreg, status,2, status,0
 10981 ;; Tracked objects:
 10982 ;;		On entry : 0/0
 10983 ;;		On exit  : 0/0
 10984 ;;		Unchanged: 0/0
 10985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10986 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10987 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10988 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10989 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10990 ;;Total ram usage:        8 bytes
 10991 ;; Hardware stack levels used:    1
 10992 ;; Hardware stack levels required when called:    5
 10993 ;; This function calls:
 10994 ;;		Nothing
 10995 ;; This function is called by:
 10996 ;;		_Load_Main
 10997 ;; This function uses a non-reentrant model
 10998 ;;
 10999                           
 11000                           
 11001                           ;psect for function ___lwdiv
 11002  1281                     ___lwdiv:	
 11003                           
 11004                           ;incstack = 0
 11005                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11006  1281  0020               	movlb	0	; select bank0
 11007  1282  01A5               	clrf	___lwdiv@quotient
 11008  1283  01A6               	clrf	___lwdiv@quotient+1
 11009  1284  0821               	movf	___lwdiv@divisor+1,w
 11010  1285  0420               	iorwf	___lwdiv@divisor,w
 11011  1286  1903               	skipnz
 11012  1287  2AB1               	goto	l7848
 11013  1288  01A7               	clrf	___lwdiv@counter
 11014  1289  0AA7               	incf	___lwdiv@counter,f
 11015  128A                     l7836:	
 11016  128A  1BA1               	btfsc	___lwdiv@divisor+1,7
 11017  128B  2A96               	goto	l7838
 11018  128C  3001               	movlw	1
 11019  128D                     u7635:	
 11020  128D  35A0               	lslf	___lwdiv@divisor,f
 11021  128E  0DA1               	rlf	___lwdiv@divisor+1,f
 11022  128F  0B89               	decfsz	9,f
 11023  1290  2A8D               	goto	u7635
 11024  1291  3001               	movlw	1
 11025  1292  00A4               	movwf	??___lwdiv
 11026  1293  0824               	movf	??___lwdiv,w
 11027  1294  07A7               	addwf	___lwdiv@counter,f
 11028  1295  2A8A               	goto	l7836
 11029  1296                     l7838:	
 11030  1296  3001               	movlw	1
 11031  1297                     u7655:	
 11032  1297  35A5               	lslf	___lwdiv@quotient,f
 11033  1298  0DA6               	rlf	___lwdiv@quotient+1,f
 11034  1299  0B89               	decfsz	9,f
 11035  129A  2A97               	goto	u7655
 11036  129B  0821               	movf	___lwdiv@divisor+1,w
 11037  129C  0223               	subwf	___lwdiv@dividend+1,w
 11038  129D  1D03               	skipz
 11039  129E  2AA1               	goto	u7665
 11040  129F  0820               	movf	___lwdiv@divisor,w
 11041  12A0  0222               	subwf	___lwdiv@dividend,w
 11042  12A1                     u7665:	
 11043  12A1  1C03               	skipc
 11044  12A2  2AA8               	goto	l7844
 11045  12A3  0820               	movf	___lwdiv@divisor,w
 11046  12A4  02A2               	subwf	___lwdiv@dividend,f
 11047  12A5  0821               	movf	___lwdiv@divisor+1,w
 11048  12A6  3BA3               	subwfb	___lwdiv@dividend+1,f
 11049  12A7  1425               	bsf	___lwdiv@quotient,0
 11050  12A8                     l7844:	
 11051  12A8  3001               	movlw	1
 11052  12A9                     u7675:	
 11053  12A9  36A1               	lsrf	___lwdiv@divisor+1,f
 11054  12AA  0CA0               	rrf	___lwdiv@divisor,f
 11055  12AB  0B89               	decfsz	9,f
 11056  12AC  2AA9               	goto	u7675
 11057  12AD  3001               	movlw	1
 11058  12AE  02A7               	subwf	___lwdiv@counter,f
 11059  12AF  1D03               	btfss	3,2
 11060  12B0  2A96               	goto	l7838
 11061  12B1                     l7848:	
 11062  12B1  0826               	movf	___lwdiv@quotient+1,w
 11063  12B2  01A1               	clrf	?___lwdiv+1
 11064  12B3  07A1               	addwf	?___lwdiv+1,f
 11065  12B4  0825               	movf	___lwdiv@quotient,w
 11066  12B5  01A0               	clrf	?___lwdiv
 11067  12B6  07A0               	addwf	?___lwdiv,f
 11068  12B7  0008               	return
 11069  12B8                     __end_of___lwdiv:	
 11070                           
 11071                           	psect	text59
 11072  1AFF                     __ptext59:	
 11073 ;; *************** function _Load_Initialization *****************
 11074 ;; Defined at:
 11075 ;;		line 9 in file "../src/OverLoad_B1.c"
 11076 ;; Parameters:    Size  Location     Type
 11077 ;;		None
 11078 ;; Auto vars:     Size  Location     Type
 11079 ;;		None
 11080 ;; Return value:  Size  Location     Type
 11081 ;;		None               void
 11082 ;; Registers used:
 11083 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11084 ;; Tracked objects:
 11085 ;;		On entry : 0/0
 11086 ;;		On exit  : 0/0
 11087 ;;		Unchanged: 0/0
 11088 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11089 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11090 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11091 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11092 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11093 ;;Total ram usage:        0 bytes
 11094 ;; Hardware stack levels used:    1
 11095 ;; Hardware stack levels required when called:    6
 11096 ;; This function calls:
 11097 ;;		_setLoad_AH_AL_Restore
 11098 ;; This function is called by:
 11099 ;;		_main
 11100 ;; This function uses a non-reentrant model
 11101 ;;
 11102                           
 11103                           
 11104                           ;psect for function _Load_Initialization
 11105  1AFF                     _Load_Initialization:	
 11106                           
 11107                           ;OverLoad_B1.c: 10: Load.OK = 1;
 11108                           
 11109                           ;incstack = 0
 11110                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11111  1AFF  0022               	movlb	2	; select bank2
 11112  1B00  17A5               	bsf	_Load^(0+256),7
 11113                           
 11114                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11115  1B01  319E  264D         	fcall	_setLoad_AH_AL_Restore
 11116  1B03  0008               	return
 11117  1B04                     __end_of_Load_Initialization:	
 11118                           
 11119                           	psect	text60
 11120  1E4D                     __ptext60:	
 11121 ;; *************** function _setLoad_AH_AL_Restore *****************
 11122 ;; Defined at:
 11123 ;;		line 239 in file "../src/OverLoad_B1.c"
 11124 ;; Parameters:    Size  Location     Type
 11125 ;;		None
 11126 ;; Auto vars:     Size  Location     Type
 11127 ;;  i               1    1[BANK0 ] unsigned char 
 11128 ;; Return value:  Size  Location     Type
 11129 ;;		None               void
 11130 ;; Registers used:
 11131 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11132 ;; Tracked objects:
 11133 ;;		On entry : 0/0
 11134 ;;		On exit  : 0/0
 11135 ;;		Unchanged: 0/0
 11136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11138 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11139 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11140 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11141 ;;Total ram usage:        2 bytes
 11142 ;; Hardware stack levels used:    1
 11143 ;; Hardware stack levels required when called:    5
 11144 ;; This function calls:
 11145 ;;		Nothing
 11146 ;; This function is called by:
 11147 ;;		_Load_Initialization
 11148 ;;		_Load_Main
 11149 ;; This function uses a non-reentrant model
 11150 ;;
 11151                           
 11152                           
 11153                           ;psect for function _setLoad_AH_AL_Restore
 11154  1E4D                     _setLoad_AH_AL_Restore:	
 11155                           
 11156                           ;OverLoad_B1.c: 240: char i;
 11157                           ;OverLoad_B1.c: 241: for (i = 0; i < 5; i++) {
 11158                           
 11159                           ;incstack = 0
 11160                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11161  1E4D  0020               	movlb	0	; select bank0
 11162  1E4E  01A1               	clrf	setLoad_AH_AL_Restore@i
 11163  1E4F                     L8:	
 11164  1E4F  3005               	movlw	5
 11165  1E50  0221               	subwf	setLoad_AH_AL_Restore@i,w
 11166  1E51  1803               	btfsc	3,0
 11167  1E52  0008               	return
 11168                           
 11169                           ;OverLoad_B1.c: 242: Load.AH[i] = 0;
 11170  1E53  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11171  1E54  3E30               	addlw	(_Load+11)& (0+255)
 11172  1E55  0086               	movwf	6
 11173  1E56  3001               	movlw	1	; select bank2/3
 11174  1E57  0087               	movwf	7
 11175  1E58  3000               	movlw	0
 11176  1E59  3FC0               	movwi [0]fsr1
 11177  1E5A  3FC1               	movwi [1]fsr1
 11178                           
 11179                           ;OverLoad_B1.c: 243: Load.AL[i] = 0xffff;
 11180  1E5B  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11181  1E5C  3E3A               	addlw	(_Load+21)& (0+255)
 11182  1E5D  0086               	movwf	6
 11183  1E5E  3001               	movlw	1	; select bank2/3
 11184  1E5F  0087               	movwf	7
 11185  1E60  30FF               	movlw	255
 11186  1E61  3FC0               	movwi [0]fsr1
 11187  1E62  30FF               	movlw	255
 11188  1E63  3FC1               	movwi [1]fsr1
 11189  1E64  3001               	movlw	1
 11190  1E65  00A0               	movwf	??_setLoad_AH_AL_Restore
 11191  1E66  0820               	movf	??_setLoad_AH_AL_Restore,w
 11192  1E67  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 11193  1E68  2E4F               	goto	L8
 11194  1E69                     __end_of_setLoad_AH_AL_Restore:	
 11195                           
 11196                           	psect	text61
 11197  1B9C                     __ptext61:	
 11198 ;; *************** function _LED_Main *****************
 11199 ;; Defined at:
 11200 ;;		line 47 in file "../src/LED_B1.c"
 11201 ;; Parameters:    Size  Location     Type
 11202 ;;		None
 11203 ;; Auto vars:     Size  Location     Type
 11204 ;;		None
 11205 ;; Return value:  Size  Location     Type
 11206 ;;		None               void
 11207 ;; Registers used:
 11208 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11209 ;; Tracked objects:
 11210 ;;		On entry : 0/0
 11211 ;;		On exit  : 0/0
 11212 ;;		Unchanged: 0/0
 11213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11215 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11216 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11217 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11218 ;;Total ram usage:        0 bytes
 11219 ;; Hardware stack levels used:    1
 11220 ;; Hardware stack levels required when called:    7
 11221 ;; This function calls:
 11222 ;;		_setLED_Main
 11223 ;; This function is called by:
 11224 ;;		_main
 11225 ;; This function uses a non-reentrant model
 11226 ;;
 11227                           
 11228                           
 11229                           ;psect for function _LED_Main
 11230  1B9C                     _LED_Main:	
 11231                           
 11232                           ;LED_B1.c: 53: setLED_Main(1);
 11233                           
 11234                           ;incstack = 0
 11235                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11236  1B9C  3001               	movlw	1
 11237  1B9D  3193  236A  319B   	fcall	_setLED_Main
 11238                           
 11239                           ;LED_B1.c: 56: setLED_Main(2);
 11240  1BA0  3002               	movlw	2
 11241  1BA1  3193  236A  319B   	fcall	_setLED_Main
 11242                           
 11243                           ;LED_B1.c: 62: setLED_Main(99);
 11244  1BA4  3063               	movlw	99
 11245  1BA5  3193  236A         	fcall	_setLED_Main
 11246  1BA7  0008               	return
 11247  1BA8                     __end_of_LED_Main:	
 11248                           
 11249                           	psect	text62
 11250  136A                     __ptext62:	
 11251 ;; *************** function _setLED_Main *****************
 11252 ;; Defined at:
 11253 ;;		line 221 in file "../src/LED_B1.c"
 11254 ;; Parameters:    Size  Location     Type
 11255 ;;  led             1    wreg     unsigned char 
 11256 ;; Auto vars:     Size  Location     Type
 11257 ;;  led             1    4[BANK0 ] unsigned char 
 11258 ;; Return value:  Size  Location     Type
 11259 ;;		None               void
 11260 ;; Registers used:
 11261 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11262 ;; Tracked objects:
 11263 ;;		On entry : 0/0
 11264 ;;		On exit  : 0/0
 11265 ;;		Unchanged: 0/0
 11266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11268 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11269 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11270 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11271 ;;Total ram usage:        3 bytes
 11272 ;; Hardware stack levels used:    1
 11273 ;; Hardware stack levels required when called:    6
 11274 ;; This function calls:
 11275 ;;		_LedPointSelect
 11276 ;; This function is called by:
 11277 ;;		_LED_Main
 11278 ;; This function uses a non-reentrant model
 11279 ;;
 11280                           
 11281                           
 11282                           ;psect for function _setLED_Main
 11283  136A                     _setLED_Main:	
 11284                           
 11285                           ;incstack = 0
 11286                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11287                           ;setLED_Main@led stored from wreg
 11288  136A  0020               	movlb	0	; select bank0
 11289  136B  00A4               	movwf	setLED_Main@led
 11290                           
 11291                           ;LED_B1.c: 222: LedPointSelect(led);
 11292  136C  0824               	movf	setLED_Main@led,w
 11293  136D  319E  2632  3193   	fcall	_LedPointSelect
 11294                           
 11295                           ;LED_B1.c: 223: if (LED->GO == 1) {
 11296  1370  087A               	movf	_LED,w
 11297  1371  0086               	movwf	6
 11298  1372  3001               	movlw	1	; select bank2/3
 11299  1373  0087               	movwf	7
 11300  1374  1C81               	btfss	1,1
 11301  1375  0008               	return
 11302                           
 11303                           ;LED_B1.c: 224: LED->Time++;
 11304  1376  0A7A               	incf	_LED,w
 11305  1377  0086               	movwf	6
 11306  1378  3001               	movlw	1	; select bank2/3
 11307  1379  0087               	movwf	7
 11308  137A  3001               	movlw	1
 11309  137B  0781               	addwf	1,f
 11310  137C  3141               	addfsr 1,1
 11311  137D  1803               	skipnc
 11312  137E  0A81               	incf	1,f
 11313                           
 11314                           ;LED_B1.c: 225: if (LED->Time >= 500 / 10) {
 11315  137F  0A7A               	incf	_LED,w
 11316  1380  0086               	movwf	6
 11317  1381  3001               	movlw	1	; select bank2/3
 11318  1382  0087               	movwf	7
 11319  1383  3F40               	moviw [0]fsr1
 11320  1384  0020               	movlb	0	; select bank0
 11321  1385  00A2               	movwf	??_setLED_Main
 11322  1386  3F41               	moviw [1]fsr1
 11323  1387  00A3               	movwf	??_setLED_Main+1
 11324  1388  3000               	movlw	0
 11325  1389  0223               	subwf	??_setLED_Main+1,w
 11326  138A  3032               	movlw	50
 11327  138B  1903               	skipnz
 11328  138C  0222               	subwf	??_setLED_Main,w
 11329  138D  1C03               	skipc
 11330  138E  0008               	return
 11331                           
 11332                           ;LED_B1.c: 226: LED->Time = 0;
 11333  138F  0A7A               	incf	_LED,w
 11334  1390  0086               	movwf	6
 11335  1391  3001               	movlw	1	; select bank2/3
 11336  1392  0087               	movwf	7
 11337  1393  3000               	movlw	0
 11338  1394  3FC0               	movwi [0]fsr1
 11339  1395  3FC1               	movwi [1]fsr1
 11340                           
 11341                           ;LED_B1.c: 228: if (led == 1) {
 11342  1396  0824               	movf	setLED_Main@led,w
 11343  1397  3A01               	xorlw	1
 11344                           
 11345                           ;LED_B1.c: 229: RA3 = RA3 == 1 ? 0 : 1;
 11346  1398  3008               	movlw	8
 11347  1399  1903               	btfsc	3,2
 11348  139A  068C               	xorwf	12,f
 11349                           
 11350                           ;LED_B1.c: 230: }
 11351                           ;LED_B1.c: 233: if (led == 2) {
 11352  139B  0824               	movf	setLED_Main@led,w
 11353  139C  3A02               	xorlw	2
 11354  139D  1D03               	skipz
 11355  139E  2BA1               	goto	l1033
 11356                           
 11357                           ;LED_B1.c: 234: RC7 = RC7 == 1 ? 0 : 1;
 11358  139F  3080               	movlw	128
 11359  13A0  068E               	xorwf	14,f
 11360  13A1                     l1033:	
 11361                           
 11362                           ;LED_B1.c: 235: }
 11363                           ;LED_B1.c: 243: if (led == 99) {
 11364  13A1  0824               	movf	setLED_Main@led,w
 11365  13A2  3A63               	xorlw	99
 11366  13A3  1D03               	skipz
 11367  13A4  0008               	return
 11368                           
 11369                           ;LED_B1.c: 244: RB5 = RB5 == 1 ? 0 : 1;
 11370  13A5  3020               	movlw	32
 11371  13A6  068D               	xorwf	13,f
 11372  13A7  0008               	return
 11373  13A8                     __end_of_setLED_Main:	
 11374                           
 11375                           	psect	text63
 11376  1B90                     __ptext63:	
 11377 ;; *************** function _LED_Initialization *****************
 11378 ;; Defined at:
 11379 ;;		line 31 in file "../src/LED_B1.c"
 11380 ;; Parameters:    Size  Location     Type
 11381 ;;		None
 11382 ;; Auto vars:     Size  Location     Type
 11383 ;;		None
 11384 ;; Return value:  Size  Location     Type
 11385 ;;		None               void
 11386 ;; Registers used:
 11387 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11388 ;; Tracked objects:
 11389 ;;		On entry : 0/0
 11390 ;;		On exit  : 0/0
 11391 ;;		Unchanged: 0/0
 11392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11393 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11394 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11395 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11396 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11397 ;;Total ram usage:        0 bytes
 11398 ;; Hardware stack levels used:    1
 11399 ;; Hardware stack levels required when called:    8
 11400 ;; This function calls:
 11401 ;;		_setLED_Initialization
 11402 ;; This function is called by:
 11403 ;;		_main
 11404 ;; This function uses a non-reentrant model
 11405 ;;
 11406                           
 11407                           
 11408                           ;psect for function _LED_Initialization
 11409  1B90                     _LED_Initialization:	
 11410                           
 11411                           ;LED_B1.c: 33: setLED_Initialization(1);
 11412                           
 11413                           ;incstack = 0
 11414                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11415  1B90  3001               	movlw	1
 11416  1B91  319C  2428  319B   	fcall	_setLED_Initialization
 11417                           
 11418                           ;LED_B1.c: 36: setLED_Initialization(2);
 11419  1B94  3002               	movlw	2
 11420  1B95  319C  2428  319B   	fcall	_setLED_Initialization
 11421                           
 11422                           ;LED_B1.c: 42: setLED_Initialization(99);
 11423  1B98  3063               	movlw	99
 11424  1B99  319C  2428         	fcall	_setLED_Initialization
 11425  1B9B  0008               	return
 11426  1B9C                     __end_of_LED_Initialization:	
 11427                           
 11428                           	psect	text64
 11429  1C28                     __ptext64:	
 11430 ;; *************** function _setLED_Initialization *****************
 11431 ;; Defined at:
 11432 ;;		line 69 in file "../src/LED_B1.c"
 11433 ;; Parameters:    Size  Location     Type
 11434 ;;  led             1    wreg     unsigned char 
 11435 ;; Auto vars:     Size  Location     Type
 11436 ;;  led             1    4[BANK0 ] unsigned char 
 11437 ;; Return value:  Size  Location     Type
 11438 ;;		None               void
 11439 ;; Registers used:
 11440 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11441 ;; Tracked objects:
 11442 ;;		On entry : 0/0
 11443 ;;		On exit  : 0/0
 11444 ;;		Unchanged: 0/0
 11445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11447 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11448 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11449 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11450 ;;Total ram usage:        1 bytes
 11451 ;; Hardware stack levels used:    1
 11452 ;; Hardware stack levels required when called:    7
 11453 ;; This function calls:
 11454 ;;		_LedPointSelect
 11455 ;;		_setLED
 11456 ;; This function is called by:
 11457 ;;		_LED_Initialization
 11458 ;; This function uses a non-reentrant model
 11459 ;;
 11460                           
 11461                           
 11462                           ;psect for function _setLED_Initialization
 11463  1C28                     _setLED_Initialization:	
 11464                           
 11465                           ;incstack = 0
 11466                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11467                           ;setLED_Initialization@led stored from wreg
 11468  1C28  0020               	movlb	0	; select bank0
 11469  1C29  00A4               	movwf	setLED_Initialization@led
 11470                           
 11471                           ;LED_B1.c: 70: LedPointSelect(led);
 11472  1C2A  0824               	movf	setLED_Initialization@led,w
 11473  1C2B  319E  2632  319C   	fcall	_LedPointSelect
 11474                           
 11475                           ;LED_B1.c: 71: LED->Enable = 1;
 11476  1C2E  087A               	movf	_LED,w
 11477  1C2F  0086               	movwf	6
 11478  1C30  3001               	movlw	1	; select bank2/3
 11479  1C31  0087               	movwf	7
 11480  1C32  1401               	bsf	1,0
 11481                           
 11482                           ;LED_B1.c: 72: setLED(led, 0);
 11483  1C33  0020               	movlb	0	; select bank0
 11484  1C34  01A2               	clrf	setLED@command
 11485  1C35  0824               	movf	setLED_Initialization@led,w
 11486  1C36  3195  259C         	fcall	_setLED
 11487  1C38  0008               	return
 11488  1C39                     __end_of_setLED_Initialization:	
 11489                           
 11490                           	psect	text65
 11491  1215                     __ptext65:	
 11492 ;; *************** function _Flash_Memory_Main *****************
 11493 ;; Defined at:
 11494 ;;		line 924 in file "../src/MCU_B1.c"
 11495 ;; Parameters:    Size  Location     Type
 11496 ;;		None
 11497 ;; Auto vars:     Size  Location     Type
 11498 ;;		None
 11499 ;; Return value:  Size  Location     Type
 11500 ;;		None               void
 11501 ;; Registers used:
 11502 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11503 ;; Tracked objects:
 11504 ;;		On entry : 0/0
 11505 ;;		On exit  : 0/0
 11506 ;;		Unchanged: 0/0
 11507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11509 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11510 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11511 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11512 ;;Total ram usage:        1 bytes
 11513 ;; Hardware stack levels used:    1
 11514 ;; Hardware stack levels required when called:    8
 11515 ;; This function calls:
 11516 ;;		_Flash_Memory_Modify
 11517 ;;		_getMain_LightsStatus
 11518 ;; This function is called by:
 11519 ;;		_main
 11520 ;; This function uses a non-reentrant model
 11521 ;;
 11522                           
 11523                           
 11524                           ;psect for function _Flash_Memory_Main
 11525  1215                     _Flash_Memory_Main:	
 11526                           
 11527                           ;MCU_B1.c: 925: if (Memory.Modify == 1) {
 11528                           
 11529                           ;incstack = 0
 11530                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11531  1215  0024               	movlb	4	; select bank4
 11532  1216  1C44               	btfss	(_Memory^(0+512)+36),0
 11533  1217  0008               	return
 11534                           
 11535                           ;MCU_B1.c: 926: Memory.GO = getMain_LightsStatus() == 0 ? 1 : 0;
 11536  1218  3190  20EB  3192   	fcall	_getMain_LightsStatus
 11537  121B  3A00               	xorlw	0
 11538  121C  3000               	movlw	0
 11539  121D  1903               	skipnz
 11540  121E  3001               	movlw	1
 11541  121F  0020               	movlb	0	; select bank0
 11542  1220  00A9               	movwf	??_Flash_Memory_Main
 11543  1221  0DA9               	rlf	??_Flash_Memory_Main,f
 11544  1222  0024               	movlb	4	; select bank4
 11545  1223  0844               	movf	(_Memory^(0+512)+36),w
 11546  1224  0020               	movlb	0	; select bank0
 11547  1225  0629               	xorwf	??_Flash_Memory_Main,w
 11548  1226  39FD               	andlw	-3
 11549  1227  0629               	xorwf	??_Flash_Memory_Main,w
 11550  1228  0024               	movlb	4	; select bank4
 11551  1229  00C4               	movwf	(_Memory^(0+512)+36)
 11552                           
 11553                           ;MCU_B1.c: 927: if (Memory.GO == 1) {
 11554  122A  1CC4               	btfss	(_Memory^(0+512)+36),1
 11555  122B  2A45               	goto	l1301
 11556                           
 11557                           ;MCU_B1.c: 928: Memory.Runtime = 1;
 11558  122C  15C4               	bsf	(_Memory^(0+512)+36),3
 11559                           
 11560                           ;MCU_B1.c: 929: Memory.Time++;
 11561  122D  3001               	movlw	1
 11562  122E  07C2               	addwf	(_Memory^(0+512)+34),f
 11563  122F  3000               	movlw	0
 11564  1230  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 11565                           
 11566                           ;MCU_B1.c: 930: if (Memory.Time == 25) {
 11567  1231  3022               	movlw	34
 11568  1232  3E20               	addlw	_Memory& (0+255)
 11569  1233  0086               	movwf	6
 11570  1234  3002               	movlw	2	; select bank4/5
 11571  1235  0087               	movwf	7
 11572  1236  3F40               	moviw [0]fsr1
 11573  1237  3A19               	xorlw	25
 11574  1238  1D03               	skipz
 11575  1239  2A3C               	goto	u7935
 11576  123A  3F41               	moviw [1]fsr1
 11577  123B  3A00               	xorlw	0
 11578  123C                     u7935:	
 11579  123C  1D03               	skipz
 11580  123D  0008               	return
 11581                           
 11582                           ;MCU_B1.c: 931: Memory.Time = 0;
 11583  123E  01C2               	clrf	(_Memory^(0+512)+34)
 11584  123F  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11585                           
 11586                           ;MCU_B1.c: 932: Memory.Modify = 0;
 11587  1240  1044               	bcf	(_Memory^(0+512)+36),0
 11588                           
 11589                           ;MCU_B1.c: 933: Memory.GO = 0;
 11590  1241  10C4               	bcf	(_Memory^(0+512)+36),1
 11591                           
 11592                           ;MCU_B1.c: 934: Flash_Memory_Modify();
 11593  1242  3194  24FF         	fcall	_Flash_Memory_Modify
 11594                           
 11595                           ;MCU_B1.c: 935: }
 11596                           ;MCU_B1.c: 936: } else {
 11597  1244  0008               	return
 11598  1245                     l1301:	
 11599                           
 11600                           ;MCU_B1.c: 937: if (Memory.Runtime == 1) {
 11601  1245  1DC4               	btfss	(_Memory^(0+512)+36),3
 11602  1246  0008               	return
 11603                           
 11604                           ;MCU_B1.c: 938: Memory.Runtime = 0;
 11605  1247  11C4               	bcf	(_Memory^(0+512)+36),3
 11606                           
 11607                           ;MCU_B1.c: 939: Memory.Time = 0;
 11608  1248  01C2               	clrf	(_Memory^(0+512)+34)
 11609  1249  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11610  124A  0008               	return
 11611  124B                     __end_of_Flash_Memory_Main:	
 11612                           
 11613                           	psect	text66
 11614  14FF                     __ptext66:	
 11615 ;; *************** function _Flash_Memory_Modify *****************
 11616 ;; Defined at:
 11617 ;;		line 997 in file "../src/MCU_B1.c"
 11618 ;; Parameters:    Size  Location     Type
 11619 ;;		None
 11620 ;; Auto vars:     Size  Location     Type
 11621 ;;  i               1    5[BANK0 ] unsigned char 
 11622 ;; Return value:  Size  Location     Type
 11623 ;;		None               void
 11624 ;; Registers used:
 11625 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11626 ;; Tracked objects:
 11627 ;;		On entry : 0/0
 11628 ;;		On exit  : 0/0
 11629 ;;		Unchanged: 0/0
 11630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11632 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11633 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11634 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11635 ;;Total ram usage:        2 bytes
 11636 ;; Hardware stack levels used:    1
 11637 ;; Hardware stack levels required when called:    7
 11638 ;; This function calls:
 11639 ;;		_Flash_Memory_Erasing
 11640 ;;		_Flash_Memory_Read
 11641 ;;		_Flash_Memory_Write
 11642 ;;		_setMemory_Data
 11643 ;; This function is called by:
 11644 ;;		_Flash_Memory_Main
 11645 ;; This function uses a non-reentrant model
 11646 ;;
 11647                           
 11648                           
 11649                           ;psect for function _Flash_Memory_Modify
 11650  14FF                     _Flash_Memory_Modify:	
 11651                           
 11652                           ;MCU_B1.c: 998: char i = 0;
 11653                           
 11654                           ;incstack = 0
 11655                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11656  14FF  0020               	movlb	0	; select bank0
 11657  1500  01A5               	clrf	Flash_Memory_Modify@i
 11658                           
 11659                           ;MCU_B1.c: 999: for (i = 0; i < 32; i++) {
 11660  1501  01A5               	clrf	Flash_Memory_Modify@i
 11661  1502  3020               	movlw	32
 11662  1503  0225               	subwf	Flash_Memory_Modify@i,w
 11663  1504  1803               	btfsc	3,0
 11664  1505  2D1B               	goto	l7484
 11665  1506                     l7478:	
 11666                           
 11667                           ;MCU_B1.c: 1000: Memory.Data[i] = Flash_Memory_Read(i);
 11668  1506  0825               	movf	Flash_Memory_Modify@i,w
 11669  1507  319E  2618  3194   	fcall	_Flash_Memory_Read
 11670  150A  0020               	movlb	0	; select bank0
 11671  150B  00A4               	movwf	??_Flash_Memory_Modify
 11672  150C  0825               	movf	Flash_Memory_Modify@i,w
 11673  150D  3E20               	addlw	_Memory& (0+255)
 11674  150E  0086               	movwf	6
 11675  150F  3002               	movlw	2	; select bank4/5
 11676  1510  0087               	movwf	7
 11677  1511  0824               	movf	??_Flash_Memory_Modify,w
 11678  1512  0081               	movwf	1
 11679  1513  3001               	movlw	1
 11680  1514  00A4               	movwf	??_Flash_Memory_Modify
 11681  1515  0824               	movf	??_Flash_Memory_Modify,w
 11682  1516  07A5               	addwf	Flash_Memory_Modify@i,f
 11683  1517  3020               	movlw	32
 11684  1518  0225               	subwf	Flash_Memory_Modify@i,w
 11685  1519  1C03               	skipc
 11686  151A  2D06               	goto	l7478
 11687  151B                     l7484:	
 11688                           
 11689                           ;MCU_B1.c: 1001: }
 11690                           ;MCU_B1.c: 1002: setMemory_Data(0, product->Data[12]);
 11691  151B  086E               	movf	_product,w
 11692  151C  0086               	movwf	6
 11693  151D  3002               	movlw	2	; select bank4/5
 11694  151E  0087               	movwf	7
 11695  151F  3002               	movlw	2	; select bank4/5
 11696  1520  3F4C               	moviw [12]fsr1
 11697  1521  00A0               	movwf	setMemory_Data@data
 11698  1522  3000               	movlw	0
 11699  1523  319B  2378  3194   	fcall	_setMemory_Data
 11700                           
 11701                           ;MCU_B1.c: 1003: setMemory_Data(1, product->Data[13]);
 11702  1526  0020               	movlb	0	; select bank0
 11703  1527  086E               	movf	_product,w
 11704  1528  0086               	movwf	6
 11705  1529  3002               	movlw	2	; select bank4/5
 11706  152A  0087               	movwf	7
 11707  152B  3002               	movlw	2	; select bank4/5
 11708  152C  3F4D               	moviw [13]fsr1
 11709  152D  00A0               	movwf	setMemory_Data@data
 11710  152E  3001               	movlw	1
 11711  152F  319B  2378  3194   	fcall	_setMemory_Data
 11712                           
 11713                           ;MCU_B1.c: 1004: setMemory_Data(2, product->Data[14]);
 11714  1532  0020               	movlb	0	; select bank0
 11715  1533  086E               	movf	_product,w
 11716  1534  0086               	movwf	6
 11717  1535  3002               	movlw	2	; select bank4/5
 11718  1536  0087               	movwf	7
 11719  1537  3002               	movlw	2	; select bank4/5
 11720  1538  3F4E               	moviw [14]fsr1
 11721  1539  00A0               	movwf	setMemory_Data@data
 11722  153A  3002               	movlw	2
 11723  153B  319B  2378  3194   	fcall	_setMemory_Data
 11724                           
 11725                           ;MCU_B1.c: 1010: if (Memory.LoopSave == 1) {
 11726  153E  0024               	movlb	4	; select bank4
 11727  153F  1D44               	btfss	(_Memory^(0+512)+36),2
 11728  1540  2D45               	goto	l1324
 11729                           
 11730                           ;MCU_B1.c: 1011: Memory.LoopSave = 0;
 11731  1541  1144               	bcf	(_Memory^(0+512)+36),2
 11732                           
 11733                           ;MCU_B1.c: 1012: myMain.FirstOpen = 0;
 11734  1542  0021               	movlb	1	; select bank1
 11735  1543  11A0               	bcf	_myMain^(0+128),3
 11736                           
 11737                           ;MCU_B1.c: 1013: myMain.First = 0;
 11738  1544  12A0               	bcf	_myMain^(0+128),5
 11739  1545                     l1324:	
 11740                           
 11741                           ;MCU_B1.c: 1015: }
 11742                           ;MCU_B1.c: 1016: GIE = 0;
 11743  1545  138B               	bcf	11,7	;volatile
 11744                           
 11745                           ;MCU_B1.c: 1017: Flash_Memory_Erasing();
 11746  1546  319B  2384  3194   	fcall	_Flash_Memory_Erasing
 11747                           
 11748                           ;MCU_B1.c: 1018: Flash_Memory_Write();
 11749  1549  3191  2118         	fcall	_Flash_Memory_Write
 11750                           
 11751                           ;MCU_B1.c: 1019: GIE = 1;
 11752  154B  178B               	bsf	11,7	;volatile
 11753  154C  0008               	return
 11754  154D                     __end_of_Flash_Memory_Modify:	
 11755                           
 11756                           	psect	text67
 11757  1B84                     __ptext67:	
 11758 ;; *************** function _Flash_Memory_Erasing *****************
 11759 ;; Defined at:
 11760 ;;		line 986 in file "../src/MCU_B1.c"
 11761 ;; Parameters:    Size  Location     Type
 11762 ;;		None
 11763 ;; Auto vars:     Size  Location     Type
 11764 ;;		None
 11765 ;; Return value:  Size  Location     Type
 11766 ;;		None               void
 11767 ;; Registers used:
 11768 ;;		wreg, status,2, status,0, pclath, cstack
 11769 ;; Tracked objects:
 11770 ;;		On entry : 0/0
 11771 ;;		On exit  : 0/0
 11772 ;;		Unchanged: 0/0
 11773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11777 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11778 ;;Total ram usage:        0 bytes
 11779 ;; Hardware stack levels used:    1
 11780 ;; Hardware stack levels required when called:    6
 11781 ;; This function calls:
 11782 ;;		_Flash_Memory_Unlock
 11783 ;; This function is called by:
 11784 ;;		_Flash_Memory_Modify
 11785 ;; This function uses a non-reentrant model
 11786 ;;
 11787                           
 11788                           
 11789                           ;psect for function _Flash_Memory_Erasing
 11790  1B84                     _Flash_Memory_Erasing:	
 11791                           
 11792                           ;MCU_B1.c: 987: CFGS = 0;
 11793                           
 11794                           ;incstack = 0
 11795                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 11796  1B84  0023               	movlb	3	; select bank3
 11797  1B85  1315               	bcf	21,6	;volatile
 11798                           
 11799                           ;MCU_B1.c: 988: PMADRH = 0x30;
 11800  1B86  3030               	movlw	48
 11801  1B87  0092               	movwf	18	;volatile
 11802                           
 11803                           ;MCU_B1.c: 989: PMADRL = 0x00;
 11804  1B88  0191               	clrf	17	;volatile
 11805                           
 11806                           ;MCU_B1.c: 990: FREE = 1;
 11807  1B89  1615               	bsf	21,4	;volatile
 11808                           
 11809                           ;MCU_B1.c: 991: WREN = 1;
 11810  1B8A  1515               	bsf	21,2	;volatile
 11811                           
 11812                           ;MCU_B1.c: 992: Flash_Memory_Unlock();
 11813  1B8B  3190  2066         	fcall	_Flash_Memory_Unlock
 11814                           
 11815                           ;MCU_B1.c: 993: WREN = 0;
 11816  1B8D  0023               	movlb	3	; select bank3
 11817  1B8E  1115               	bcf	21,2	;volatile
 11818  1B8F  0008               	return
 11819  1B90                     __end_of_Flash_Memory_Erasing:	
 11820                           
 11821                           	psect	text68
 11822  0579                     __ptext68:	
 11823 ;; *************** function _Flash_Memory_Initialization *****************
 11824 ;; Defined at:
 11825 ;;		line 883 in file "../src/MCU_B1.c"
 11826 ;; Parameters:    Size  Location     Type
 11827 ;;		None
 11828 ;; Auto vars:     Size  Location     Type
 11829 ;;  i               1   67[BANK0 ] unsigned char 
 11830 ;; Return value:  Size  Location     Type
 11831 ;;		None               void
 11832 ;; Registers used:
 11833 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11834 ;; Tracked objects:
 11835 ;;		On entry : 0/0
 11836 ;;		On exit  : 0/0
 11837 ;;		Unchanged: 0/0
 11838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11839 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11840 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11841 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11842 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11843 ;;Total ram usage:        2 bytes
 11844 ;; Hardware stack levels used:    1
 11845 ;; Hardware stack levels required when called:    8
 11846 ;; This function calls:
 11847 ;;		_Flash_Memory_Read
 11848 ;;		_Flash_Memory_Write
 11849 ;;		_setMemory_Data
 11850 ;;		_setPercentValue
 11851 ;; This function is called by:
 11852 ;;		_main
 11853 ;; This function uses a non-reentrant model
 11854 ;;
 11855                           
 11856                           
 11857                           ;psect for function _Flash_Memory_Initialization
 11858  0579                     _Flash_Memory_Initialization:	
 11859                           
 11860                           ;MCU_B1.c: 884: char i = 0;
 11861                           
 11862                           ;incstack = 0
 11863                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 11864  0579  0020               	movlb	0	; select bank0
 11865  057A  01E3               	clrf	Flash_Memory_Initialization@i
 11866                           
 11867                           ;MCU_B1.c: 885: if (Flash_Memory_Read(31) == 0xaa) {
 11868  057B  301F               	movlw	31
 11869  057C  319E  2618  3185   	fcall	_Flash_Memory_Read
 11870  057F  3AAA               	xorlw	170
 11871  0580  1D03               	skipz
 11872  0581  2DEB               	goto	l7972
 11873                           
 11874                           ;MCU_B1.c: 886: product->Data[12] = Flash_Memory_Read(0);
 11875  0582  3000               	movlw	0
 11876  0583  319E  2618  3185   	fcall	_Flash_Memory_Read
 11877  0586  0020               	movlb	0	; select bank0
 11878  0587  00E2               	movwf	??_Flash_Memory_Initialization
 11879  0588  086E               	movf	_product,w
 11880  0589  3E0C               	addlw	12
 11881  058A  0086               	movwf	6
 11882  058B  3002               	movlw	2	; select bank4/5
 11883  058C  0087               	movwf	7
 11884  058D  0862               	movf	??_Flash_Memory_Initialization,w
 11885  058E  0081               	movwf	1
 11886                           
 11887                           ;MCU_B1.c: 887: product->Data[13] = Flash_Memory_Read(1);
 11888  058F  3001               	movlw	1
 11889  0590  319E  2618  3185   	fcall	_Flash_Memory_Read
 11890  0593  0020               	movlb	0	; select bank0
 11891  0594  00E2               	movwf	??_Flash_Memory_Initialization
 11892  0595  086E               	movf	_product,w
 11893  0596  3E0D               	addlw	13
 11894  0597  0086               	movwf	6
 11895  0598  3002               	movlw	2	; select bank4/5
 11896  0599  0087               	movwf	7
 11897  059A  0862               	movf	??_Flash_Memory_Initialization,w
 11898  059B  0081               	movwf	1
 11899                           
 11900                           ;MCU_B1.c: 888: product->Data[14] = Flash_Memory_Read(2);
 11901  059C  3002               	movlw	2
 11902  059D  319E  2618  3185   	fcall	_Flash_Memory_Read
 11903  05A0  0020               	movlb	0	; select bank0
 11904  05A1  00E2               	movwf	??_Flash_Memory_Initialization
 11905  05A2  086E               	movf	_product,w
 11906  05A3  3E0E               	addlw	14
 11907  05A4  0086               	movwf	6
 11908  05A5  3002               	movlw	2	; select bank4/5
 11909  05A6  0087               	movwf	7
 11910  05A7  0862               	movf	??_Flash_Memory_Initialization,w
 11911  05A8  0081               	movwf	1
 11912                           
 11913                           ;MCU_B1.c: 894: i = setPercentValue(((char)(80*0.8)));
 11914  05A9  3040               	movlw	64
 11915  05AA  3189  21EE  3185   	fcall	_setPercentValue
 11916  05AD  0020               	movlb	0	; select bank0
 11917  05AE  00E2               	movwf	??_Flash_Memory_Initialization
 11918  05AF  0862               	movf	??_Flash_Memory_Initialization,w
 11919  05B0  00E3               	movwf	Flash_Memory_Initialization@i
 11920                           
 11921                           ;MCU_B1.c: 895: product->Data[21] = i;
 11922  05B1  0863               	movf	Flash_Memory_Initialization@i,w
 11923  05B2  00E2               	movwf	??_Flash_Memory_Initialization
 11924  05B3  086E               	movf	_product,w
 11925  05B4  3E15               	addlw	21
 11926  05B5  0086               	movwf	6
 11927  05B6  3002               	movlw	2	; select bank4/5
 11928  05B7  0087               	movwf	7
 11929  05B8  0862               	movf	??_Flash_Memory_Initialization,w
 11930  05B9  0081               	movwf	1
 11931                           
 11932                           ;MCU_B1.c: 896: product->Data[22] = i;
 11933  05BA  0863               	movf	Flash_Memory_Initialization@i,w
 11934  05BB  00E2               	movwf	??_Flash_Memory_Initialization
 11935  05BC  086E               	movf	_product,w
 11936  05BD  3E16               	addlw	22
 11937  05BE  0086               	movwf	6
 11938  05BF  3002               	movlw	2	; select bank4/5
 11939  05C0  0087               	movwf	7
 11940  05C1  0862               	movf	??_Flash_Memory_Initialization,w
 11941  05C2  0081               	movwf	1
 11942                           
 11943                           ;MCU_B1.c: 897: product->Data[23] = i;
 11944  05C3  0863               	movf	Flash_Memory_Initialization@i,w
 11945  05C4  00E2               	movwf	??_Flash_Memory_Initialization
 11946  05C5  086E               	movf	_product,w
 11947  05C6  3E17               	addlw	23
 11948  05C7  0086               	movwf	6
 11949  05C8  3002               	movlw	2	; select bank4/5
 11950  05C9  0087               	movwf	7
 11951  05CA  0862               	movf	??_Flash_Memory_Initialization,w
 11952  05CB  0081               	movwf	1
 11953                           
 11954                           ;MCU_B1.c: 899: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 11955  05CC  086E               	movf	_product,w
 11956  05CD  3E0C               	addlw	12
 11957  05CE  0086               	movwf	6
 11958  05CF  3002               	movlw	2	; select bank4/5
 11959  05D0  0087               	movwf	7
 11960  05D1  0801               	movf	1,w
 11961  05D2  3AFF               	xorlw	255
 11962  05D3  1D03               	skipz
 11963  05D4  0008               	return
 11964  05D5  086E               	movf	_product,w
 11965  05D6  3E0D               	addlw	13
 11966  05D7  0086               	movwf	6
 11967  05D8  3002               	movlw	2	; select bank4/5
 11968  05D9  0087               	movwf	7
 11969  05DA  0801               	movf	1,w
 11970  05DB  3AFF               	xorlw	255
 11971  05DC  1D03               	skipz
 11972  05DD  0008               	return
 11973  05DE  086E               	movf	_product,w
 11974  05DF  3E0E               	addlw	14
 11975  05E0  0086               	movwf	6
 11976  05E1  3002               	movlw	2	; select bank4/5
 11977  05E2  0087               	movwf	7
 11978  05E3  0801               	movf	1,w
 11979  05E4  3AFF               	xorlw	255
 11980  05E5  1D03               	skipz
 11981  05E6  0008               	return
 11982                           
 11983                           ;MCU_B1.c: 900: myMain.FirstOpen = 1;
 11984  05E7  0021               	movlb	1	; select bank1
 11985  05E8  15A0               	bsf	_myMain^(0+128),3
 11986                           
 11987                           ;MCU_B1.c: 901: myMain.First = 1;
 11988  05E9  16A0               	bsf	_myMain^(0+128),5
 11989                           
 11990                           ;MCU_B1.c: 902: }
 11991                           ;MCU_B1.c: 903: } else {
 11992  05EA  0008               	return
 11993  05EB                     l7972:	
 11994                           
 11995                           ;MCU_B1.c: 904: i = setPercentValue(((char)(80*0.8)));
 11996  05EB  3040               	movlw	64
 11997  05EC  3189  21EE  3185   	fcall	_setPercentValue
 11998  05EF  0020               	movlb	0	; select bank0
 11999  05F0  00E2               	movwf	??_Flash_Memory_Initialization
 12000  05F1  0862               	movf	??_Flash_Memory_Initialization,w
 12001  05F2  00E3               	movwf	Flash_Memory_Initialization@i
 12002                           
 12003                           ;MCU_B1.c: 905: setMemory_Data(0, 0xff);
 12004  05F3  30FF               	movlw	255
 12005  05F4  00E2               	movwf	??_Flash_Memory_Initialization
 12006  05F5  0862               	movf	??_Flash_Memory_Initialization,w
 12007  05F6  00A0               	movwf	setMemory_Data@data
 12008  05F7  3000               	movlw	0
 12009  05F8  319B  2378  3185   	fcall	_setMemory_Data
 12010                           
 12011                           ;MCU_B1.c: 906: setMemory_Data(1, 0xff);
 12012  05FB  30FF               	movlw	255
 12013  05FC  0020               	movlb	0	; select bank0
 12014  05FD  00E2               	movwf	??_Flash_Memory_Initialization
 12015  05FE  0862               	movf	??_Flash_Memory_Initialization,w
 12016  05FF  00A0               	movwf	setMemory_Data@data
 12017  0600  3001               	movlw	1
 12018  0601  319B  2378  3185   	fcall	_setMemory_Data
 12019                           
 12020                           ;MCU_B1.c: 907: setMemory_Data(2, 0xff);
 12021  0604  30FF               	movlw	255
 12022  0605  0020               	movlb	0	; select bank0
 12023  0606  00E2               	movwf	??_Flash_Memory_Initialization
 12024  0607  0862               	movf	??_Flash_Memory_Initialization,w
 12025  0608  00A0               	movwf	setMemory_Data@data
 12026  0609  3002               	movlw	2
 12027  060A  319B  2378  3185   	fcall	_setMemory_Data
 12028                           
 12029                           ;MCU_B1.c: 908: setMemory_Data(3, 0xff);
 12030  060D  30FF               	movlw	255
 12031  060E  0020               	movlb	0	; select bank0
 12032  060F  00E2               	movwf	??_Flash_Memory_Initialization
 12033  0610  0862               	movf	??_Flash_Memory_Initialization,w
 12034  0611  00A0               	movwf	setMemory_Data@data
 12035  0612  3003               	movlw	3
 12036  0613  319B  2378  3185   	fcall	_setMemory_Data
 12037                           
 12038                           ;MCU_B1.c: 909: setMemory_Data(4, 0xff);
 12039  0616  30FF               	movlw	255
 12040  0617  0020               	movlb	0	; select bank0
 12041  0618  00E2               	movwf	??_Flash_Memory_Initialization
 12042  0619  0862               	movf	??_Flash_Memory_Initialization,w
 12043  061A  00A0               	movwf	setMemory_Data@data
 12044  061B  3004               	movlw	4
 12045  061C  319B  2378  3185   	fcall	_setMemory_Data
 12046                           
 12047                           ;MCU_B1.c: 910: setMemory_Data(5, 0xff);
 12048  061F  30FF               	movlw	255
 12049  0620  0020               	movlb	0	; select bank0
 12050  0621  00E2               	movwf	??_Flash_Memory_Initialization
 12051  0622  0862               	movf	??_Flash_Memory_Initialization,w
 12052  0623  00A0               	movwf	setMemory_Data@data
 12053  0624  3005               	movlw	5
 12054  0625  319B  2378  3185   	fcall	_setMemory_Data
 12055                           
 12056                           ;MCU_B1.c: 911: setMemory_Data(31, 0xaa);
 12057  0628  30AA               	movlw	170
 12058  0629  0020               	movlb	0	; select bank0
 12059  062A  00E2               	movwf	??_Flash_Memory_Initialization
 12060  062B  0862               	movf	??_Flash_Memory_Initialization,w
 12061  062C  00A0               	movwf	setMemory_Data@data
 12062  062D  301F               	movlw	31
 12063  062E  319B  2378  3185   	fcall	_setMemory_Data
 12064                           
 12065                           ;MCU_B1.c: 912: product->Data[21] = i;
 12066  0631  0020               	movlb	0	; select bank0
 12067  0632  0863               	movf	Flash_Memory_Initialization@i,w
 12068  0633  00E2               	movwf	??_Flash_Memory_Initialization
 12069  0634  086E               	movf	_product,w
 12070  0635  3E15               	addlw	21
 12071  0636  0086               	movwf	6
 12072  0637  3002               	movlw	2	; select bank4/5
 12073  0638  0087               	movwf	7
 12074  0639  0862               	movf	??_Flash_Memory_Initialization,w
 12075  063A  0081               	movwf	1
 12076                           
 12077                           ;MCU_B1.c: 913: product->Data[22] = i;
 12078  063B  0863               	movf	Flash_Memory_Initialization@i,w
 12079  063C  00E2               	movwf	??_Flash_Memory_Initialization
 12080  063D  086E               	movf	_product,w
 12081  063E  3E16               	addlw	22
 12082  063F  0086               	movwf	6
 12083  0640  3002               	movlw	2	; select bank4/5
 12084  0641  0087               	movwf	7
 12085  0642  0862               	movf	??_Flash_Memory_Initialization,w
 12086  0643  0081               	movwf	1
 12087                           
 12088                           ;MCU_B1.c: 914: product->Data[23] = i;
 12089  0644  0863               	movf	Flash_Memory_Initialization@i,w
 12090  0645  00E2               	movwf	??_Flash_Memory_Initialization
 12091  0646  086E               	movf	_product,w
 12092  0647  3E17               	addlw	23
 12093  0648  0086               	movwf	6
 12094  0649  3002               	movlw	2	; select bank4/5
 12095  064A  0087               	movwf	7
 12096  064B  0862               	movf	??_Flash_Memory_Initialization,w
 12097  064C  0081               	movwf	1
 12098                           
 12099                           ;MCU_B1.c: 915: GIE = 0;
 12100  064D  138B               	bcf	11,7	;volatile
 12101                           
 12102                           ;MCU_B1.c: 916: Flash_Memory_Write();
 12103  064E  3191  2118         	fcall	_Flash_Memory_Write
 12104                           
 12105                           ;MCU_B1.c: 917: GIE = 1;
 12106  0650  178B               	bsf	11,7	;volatile
 12107                           
 12108                           ;MCU_B1.c: 918: myMain.FirstOpen = 1;
 12109  0651  0021               	movlb	1	; select bank1
 12110  0652  15A0               	bsf	_myMain^(0+128),3
 12111                           
 12112                           ;MCU_B1.c: 919: myMain.First = 1;
 12113  0653  16A0               	bsf	_myMain^(0+128),5
 12114  0654  0008               	return
 12115  0655                     __end_of_Flash_Memory_Initialization:	
 12116                           
 12117                           	psect	text69
 12118  1B78                     __ptext69:	
 12119 ;; *************** function _setMemory_Data *****************
 12120 ;; Defined at:
 12121 ;;		line 1034 in file "../src/MCU_B1.c"
 12122 ;; Parameters:    Size  Location     Type
 12123 ;;  address         1    wreg     unsigned char 
 12124 ;;  data            1    0[BANK0 ] unsigned char 
 12125 ;; Auto vars:     Size  Location     Type
 12126 ;;  address         1    2[BANK0 ] unsigned char 
 12127 ;; Return value:  Size  Location     Type
 12128 ;;		None               void
 12129 ;; Registers used:
 12130 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12131 ;; Tracked objects:
 12132 ;;		On entry : 0/0
 12133 ;;		On exit  : 0/0
 12134 ;;		Unchanged: 0/0
 12135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12136 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12137 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12138 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12139 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12140 ;;Total ram usage:        3 bytes
 12141 ;; Hardware stack levels used:    1
 12142 ;; Hardware stack levels required when called:    5
 12143 ;; This function calls:
 12144 ;;		Nothing
 12145 ;; This function is called by:
 12146 ;;		_Flash_Memory_Initialization
 12147 ;;		_Flash_Memory_Modify
 12148 ;; This function uses a non-reentrant model
 12149 ;;
 12150                           
 12151                           
 12152                           ;psect for function _setMemory_Data
 12153  1B78                     _setMemory_Data:	
 12154                           
 12155                           ;incstack = 0
 12156                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12157                           ;setMemory_Data@address stored from wreg
 12158  1B78  0020               	movlb	0	; select bank0
 12159  1B79  00A2               	movwf	setMemory_Data@address
 12160                           
 12161                           ;MCU_B1.c: 1035: Memory.Data[address] = data;
 12162  1B7A  0820               	movf	setMemory_Data@data,w
 12163  1B7B  00A1               	movwf	??_setMemory_Data
 12164  1B7C  0822               	movf	setMemory_Data@address,w
 12165  1B7D  3E20               	addlw	_Memory& (0+255)
 12166  1B7E  0086               	movwf	6
 12167  1B7F  3002               	movlw	2	; select bank4/5
 12168  1B80  0087               	movwf	7
 12169  1B81  0821               	movf	??_setMemory_Data,w
 12170  1B82  0081               	movwf	1
 12171  1B83  0008               	return
 12172  1B84                     __end_of_setMemory_Data:	
 12173                           
 12174                           	psect	text70
 12175  1118                     __ptext70:	
 12176 ;; *************** function _Flash_Memory_Write *****************
 12177 ;; Defined at:
 12178 ;;		line 967 in file "../src/MCU_B1.c"
 12179 ;; Parameters:    Size  Location     Type
 12180 ;;		None
 12181 ;; Auto vars:     Size  Location     Type
 12182 ;;  i               1    1[BANK0 ] unsigned char 
 12183 ;; Return value:  Size  Location     Type
 12184 ;;		None               void
 12185 ;; Registers used:
 12186 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12187 ;; Tracked objects:
 12188 ;;		On entry : 0/0
 12189 ;;		On exit  : 0/0
 12190 ;;		Unchanged: 0/0
 12191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12193 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12194 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12195 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12196 ;;Total ram usage:        2 bytes
 12197 ;; Hardware stack levels used:    1
 12198 ;; Hardware stack levels required when called:    6
 12199 ;; This function calls:
 12200 ;;		_Flash_Memory_Unlock
 12201 ;; This function is called by:
 12202 ;;		_Flash_Memory_Initialization
 12203 ;;		_Flash_Memory_Modify
 12204 ;; This function uses a non-reentrant model
 12205 ;;
 12206                           
 12207                           
 12208                           ;psect for function _Flash_Memory_Write
 12209  1118                     _Flash_Memory_Write:	
 12210                           
 12211                           ;MCU_B1.c: 968: char i = 0;
 12212                           
 12213                           ;incstack = 0
 12214                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12215  1118  0020               	movlb	0	; select bank0
 12216  1119  01A1               	clrf	Flash_Memory_Write@i
 12217                           
 12218                           ;MCU_B1.c: 969: CFGS = 0;
 12219  111A  0023               	movlb	3	; select bank3
 12220  111B  1315               	bcf	21,6	;volatile
 12221                           
 12222                           ;MCU_B1.c: 970: PMADRH = 0x30;
 12223  111C  3030               	movlw	48
 12224  111D  0092               	movwf	18	;volatile
 12225                           
 12226                           ;MCU_B1.c: 971: PMDATH = 0;
 12227  111E  0194               	clrf	20	;volatile
 12228                           
 12229                           ;MCU_B1.c: 972: FREE = 0;
 12230  111F  1215               	bcf	21,4	;volatile
 12231                           
 12232                           ;MCU_B1.c: 973: LWLO = 1;
 12233  1120  1695               	bsf	21,5	;volatile
 12234                           
 12235                           ;MCU_B1.c: 974: WREN = 1;
 12236  1121  1515               	bsf	21,2	;volatile
 12237                           
 12238                           ;MCU_B1.c: 975: for (i = 0; i < 32; i++) {
 12239  1122  0020               	movlb	0	; select bank0
 12240  1123  01A1               	clrf	Flash_Memory_Write@i
 12241  1124  3020               	movlw	32
 12242  1125  0221               	subwf	Flash_Memory_Write@i,w
 12243  1126  1803               	btfsc	3,0
 12244  1127  2940               	goto	l1315
 12245  1128                     l7022:	
 12246                           
 12247                           ;MCU_B1.c: 976: PMADRL = i;
 12248  1128  0821               	movf	Flash_Memory_Write@i,w
 12249  1129  0023               	movlb	3	; select bank3
 12250  112A  0091               	movwf	17	;volatile
 12251                           
 12252                           ;MCU_B1.c: 977: PMDATL = Memory.Data[i];
 12253  112B  0020               	movlb	0	; select bank0
 12254  112C  0821               	movf	Flash_Memory_Write@i,w
 12255  112D  3E20               	addlw	_Memory& (0+255)
 12256  112E  0086               	movwf	6
 12257  112F  3002               	movlw	2	; select bank4/5
 12258  1130  0087               	movwf	7
 12259  1131  0801               	movf	1,w
 12260  1132  0023               	movlb	3	; select bank3
 12261  1133  0093               	movwf	19	;volatile
 12262                           
 12263                           ;MCU_B1.c: 978: Flash_Memory_Unlock();
 12264  1134  3190  2066  3191   	fcall	_Flash_Memory_Unlock
 12265  1137  3001               	movlw	1
 12266  1138  0020               	movlb	0	; select bank0
 12267  1139  00A0               	movwf	??_Flash_Memory_Write
 12268  113A  0820               	movf	??_Flash_Memory_Write,w
 12269  113B  07A1               	addwf	Flash_Memory_Write@i,f
 12270  113C  3020               	movlw	32
 12271  113D  0221               	subwf	Flash_Memory_Write@i,w
 12272  113E  1C03               	skipc
 12273  113F  2928               	goto	l7022
 12274  1140                     l1315:	
 12275                           
 12276                           ;MCU_B1.c: 979: }
 12277                           ;MCU_B1.c: 980: LWLO = 0;
 12278  1140  0023               	movlb	3	; select bank3
 12279  1141  1295               	bcf	21,5	;volatile
 12280                           
 12281                           ;MCU_B1.c: 981: Flash_Memory_Unlock();
 12282  1142  3190  2066         	fcall	_Flash_Memory_Unlock
 12283                           
 12284                           ;MCU_B1.c: 982: WREN = 0;
 12285  1144  0023               	movlb	3	; select bank3
 12286  1145  1115               	bcf	21,2	;volatile
 12287  1146  0008               	return
 12288  1147                     __end_of_Flash_Memory_Write:	
 12289                           
 12290                           	psect	text71
 12291  1066                     __ptext71:	
 12292 ;; *************** function _Flash_Memory_Unlock *****************
 12293 ;; Defined at:
 12294 ;;		line 946 in file "../src/MCU_B1.c"
 12295 ;; Parameters:    Size  Location     Type
 12296 ;;		None
 12297 ;; Auto vars:     Size  Location     Type
 12298 ;;		None
 12299 ;; Return value:  Size  Location     Type
 12300 ;;		None               void
 12301 ;; Registers used:
 12302 ;;		wreg
 12303 ;; Tracked objects:
 12304 ;;		On entry : 0/0
 12305 ;;		On exit  : 0/0
 12306 ;;		Unchanged: 0/0
 12307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12308 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12309 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12311 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12312 ;;Total ram usage:        0 bytes
 12313 ;; Hardware stack levels used:    1
 12314 ;; Hardware stack levels required when called:    5
 12315 ;; This function calls:
 12316 ;;		Nothing
 12317 ;; This function is called by:
 12318 ;;		_Flash_Memory_Write
 12319 ;;		_Flash_Memory_Erasing
 12320 ;; This function uses a non-reentrant model
 12321 ;;
 12322                           
 12323                           
 12324                           ;psect for function _Flash_Memory_Unlock
 12325  1066                     _Flash_Memory_Unlock:	
 12326                           
 12327                           ;MCU_B1.c: 947: PMCON2 = 0x55;
 12328                           
 12329                           ;incstack = 0
 12330                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12331  1066  3055               	movlw	85
 12332  1067  0023               	movlb	3	; select bank3
 12333  1068  0096               	movwf	22	;volatile
 12334                           
 12335                           ;MCU_B1.c: 948: PMCON2 = 0xaa;
 12336  1069  30AA               	movlw	170
 12337  106A  0096               	movwf	22	;volatile
 12338                           
 12339                           ;MCU_B1.c: 949: WR = 1;
 12340  106B  1495               	bsf	21,1	;volatile
 12341                           
 12342                           ;MCU_B1.c: 950: __nop();
 12343  106C  0000               	nop
 12344                           
 12345                           ;MCU_B1.c: 951: __nop();
 12346  106D  0000               	nop
 12347  106E  0008               	return
 12348  106F                     __end_of_Flash_Memory_Unlock:	
 12349                           
 12350                           	psect	text72
 12351  1E18                     __ptext72:	
 12352 ;; *************** function _Flash_Memory_Read *****************
 12353 ;; Defined at:
 12354 ;;		line 955 in file "../src/MCU_B1.c"
 12355 ;; Parameters:    Size  Location     Type
 12356 ;;  address         1    wreg     unsigned char 
 12357 ;; Auto vars:     Size  Location     Type
 12358 ;;  address         1    2[BANK0 ] unsigned char 
 12359 ;;  ret             1    3[BANK0 ] unsigned char 
 12360 ;;  i               1    1[BANK0 ] unsigned char 
 12361 ;; Return value:  Size  Location     Type
 12362 ;;                  1    wreg      unsigned char 
 12363 ;; Registers used:
 12364 ;;		wreg, status,2
 12365 ;; Tracked objects:
 12366 ;;		On entry : 0/0
 12367 ;;		On exit  : 0/0
 12368 ;;		Unchanged: 0/0
 12369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12371 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12372 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12373 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12374 ;;Total ram usage:        4 bytes
 12375 ;; Hardware stack levels used:    1
 12376 ;; Hardware stack levels required when called:    5
 12377 ;; This function calls:
 12378 ;;		Nothing
 12379 ;; This function is called by:
 12380 ;;		_Flash_Memory_Initialization
 12381 ;;		_Flash_Memory_Modify
 12382 ;; This function uses a non-reentrant model
 12383 ;;
 12384                           
 12385                           
 12386                           ;psect for function _Flash_Memory_Read
 12387  1E18                     _Flash_Memory_Read:	
 12388                           
 12389                           ;incstack = 0
 12390                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12391                           ;Flash_Memory_Read@address stored from wreg
 12392  1E18  0020               	movlb	0	; select bank0
 12393  1E19  00A2               	movwf	Flash_Memory_Read@address
 12394                           
 12395                           ;MCU_B1.c: 956: char i = 0, ret = 0;
 12396  1E1A  01A1               	clrf	Flash_Memory_Read@i
 12397  1E1B  01A3               	clrf	Flash_Memory_Read@ret
 12398                           
 12399                           ;MCU_B1.c: 957: PMADRH = 0x30;
 12400  1E1C  3030               	movlw	48
 12401  1E1D  0023               	movlb	3	; select bank3
 12402  1E1E  0092               	movwf	18	;volatile
 12403                           
 12404                           ;MCU_B1.c: 958: PMADRL = address;
 12405  1E1F  0020               	movlb	0	; select bank0
 12406  1E20  0822               	movf	Flash_Memory_Read@address,w
 12407  1E21  0023               	movlb	3	; select bank3
 12408  1E22  0091               	movwf	17	;volatile
 12409                           
 12410                           ;MCU_B1.c: 959: CFGS = 0;
 12411  1E23  1315               	bcf	21,6	;volatile
 12412                           
 12413                           ;MCU_B1.c: 960: RD = 1;
 12414  1E24  1415               	bsf	21,0	;volatile
 12415                           
 12416                           ;MCU_B1.c: 961: i = PMDATH;
 12417  1E25  0814               	movf	20,w	;volatile
 12418  1E26  0020               	movlb	0	; select bank0
 12419  1E27  00A0               	movwf	??_Flash_Memory_Read
 12420  1E28  0820               	movf	??_Flash_Memory_Read,w
 12421  1E29  00A1               	movwf	Flash_Memory_Read@i
 12422                           
 12423                           ;MCU_B1.c: 962: ret = PMDATL;
 12424  1E2A  0023               	movlb	3	; select bank3
 12425  1E2B  0813               	movf	19,w	;volatile
 12426  1E2C  0020               	movlb	0	; select bank0
 12427  1E2D  00A0               	movwf	??_Flash_Memory_Read
 12428  1E2E  0820               	movf	??_Flash_Memory_Read,w
 12429  1E2F  00A3               	movwf	Flash_Memory_Read@ret
 12430                           
 12431                           ;MCU_B1.c: 963: return ret;
 12432  1E30  0823               	movf	Flash_Memory_Read@ret,w
 12433  1E31  0008               	return
 12434  1E32                     __end_of_Flash_Memory_Read:	
 12435                           
 12436                           	psect	text73
 12437  11AC                     __ptext73:	
 12438 ;; *************** function _DimmerLights_Main *****************
 12439 ;; Defined at:
 12440 ;;		line 390 in file "../src/Dimmer_B1.c"
 12441 ;; Parameters:    Size  Location     Type
 12442 ;;		None
 12443 ;; Auto vars:     Size  Location     Type
 12444 ;;		None
 12445 ;; Return value:  Size  Location     Type
 12446 ;;		None               void
 12447 ;; Registers used:
 12448 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12449 ;; Tracked objects:
 12450 ;;		On entry : 0/0
 12451 ;;		On exit  : 0/0
 12452 ;;		Unchanged: 0/0
 12453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12455 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12456 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12457 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12458 ;;Total ram usage:        4 bytes
 12459 ;; Hardware stack levels used:    1
 12460 ;; Hardware stack levels required when called:   10
 12461 ;; This function calls:
 12462 ;;		_getLoad_OK
 12463 ;;		_getMain_All_Error_Status
 12464 ;;		_getMain_LightsStatus
 12465 ;;		_setDimmerLights_Main
 12466 ;; This function is called by:
 12467 ;;		_main
 12468 ;; This function uses a non-reentrant model
 12469 ;;
 12470                           
 12471                           
 12472                           ;psect for function _DimmerLights_Main
 12473  11AC                     _DimmerLights_Main:	
 12474                           
 12475                           ;Dimmer_B1.c: 392: if (getMain_All_Error_Status(0) == 0) {
 12476                           
 12477                           ;incstack = 0
 12478                           ; Regs used in _DimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12479  11AC  3000               	movlw	0
 12480  11AD  3191  2179  3191   	fcall	_getMain_All_Error_Status
 12481  11B0  3800               	iorlw	0
 12482  11B1  1D03               	skipz
 12483  11B2  29D6               	goto	l778
 12484                           
 12485                           ;Dimmer_B1.c: 393: if (Dimmer.LoadOK == 1) {
 12486  11B3  0022               	movlb	2	; select bank2
 12487  11B4  1CA0               	btfss	_Dimmer^(0+256),1
 12488  11B5  29D8               	goto	l7914
 12489                           
 12490                           ;Dimmer_B1.c: 394: Dimmer.LoadOK = getLoad_OK() == 1 || getMain_LightsStatus() == 0 ? 0 
      +                          : Dimmer.LoadOK;
 12491  11B6  319B  2335  3191   	fcall	_getLoad_OK
 12492  11B9  3A01               	xorlw	1
 12493  11BA  1903               	skipnz
 12494  11BB  29CD               	goto	l7910
 12495  11BC  3190  20EB  3191   	fcall	_getMain_LightsStatus
 12496  11BF  3A00               	xorlw	0
 12497  11C0  1903               	skipnz
 12498  11C1  29CD               	goto	l7910
 12499  11C2  0022               	movlb	2	; select bank2
 12500  11C3  0C20               	rrf	_Dimmer^(0+256),w
 12501  11C4  3901               	andlw	1
 12502  11C5  0020               	movlb	0	; select bank0
 12503  11C6  00E7               	movwf	??_DimmerLights_Main
 12504  11C7  01E8               	clrf	??_DimmerLights_Main+1
 12505  11C8  0867               	movf	??_DimmerLights_Main,w
 12506  11C9  00E9               	movwf	_DimmerLights_Main$2234
 12507  11CA  0868               	movf	??_DimmerLights_Main+1,w
 12508  11CB  00EA               	movwf	_DimmerLights_Main$2234+1
 12509  11CC  29D0               	goto	l7912
 12510  11CD                     l7910:	
 12511  11CD  0020               	movlb	0	; select bank0
 12512  11CE  01E9               	clrf	_DimmerLights_Main$2234
 12513  11CF  01EA               	clrf	_DimmerLights_Main$2234+1
 12514  11D0                     l7912:	
 12515  11D0  0869               	movf	_DimmerLights_Main$2234,w
 12516  11D1  0022               	movlb	2	; select bank2
 12517  11D2  10A0               	bcf	_Dimmer^(0+256),1
 12518  11D3  1D03               	skipz
 12519  11D4  14A0               	bsf	_Dimmer^(0+256),1
 12520                           
 12521                           ;Dimmer_B1.c: 395: }
 12522                           ;Dimmer_B1.c: 396: } else {
 12523  11D5  29D8               	goto	l7914
 12524  11D6                     l778:	
 12525                           
 12526                           ;Dimmer_B1.c: 397: Dimmer.LoadOK = 0;
 12527  11D6  0022               	movlb	2	; select bank2
 12528  11D7  10A0               	bcf	_Dimmer^(0+256),1
 12529  11D8                     l7914:	
 12530                           
 12531                           ;Dimmer_B1.c: 398: }
 12532                           ;Dimmer_B1.c: 402: setDimmerLights_Main(1);
 12533  11D8  3001               	movlw	1
 12534  11D9  3196  26F1  3191   	fcall	_setDimmerLights_Main
 12535                           
 12536                           ;Dimmer_B1.c: 406: setDimmerLights_Main(2);
 12537  11DC  3002               	movlw	2
 12538  11DD  3196  26F1         	fcall	_setDimmerLights_Main
 12539  11DF  0008               	return
 12540  11E0                     __end_of_DimmerLights_Main:	
 12541                           
 12542                           	psect	text74
 12543  16F1                     __ptext74:	
 12544 ;; *************** function _setDimmerLights_Main *****************
 12545 ;; Defined at:
 12546 ;;		line 416 in file "../src/Dimmer_B1.c"
 12547 ;; Parameters:    Size  Location     Type
 12548 ;;  lights          1    wreg     unsigned char 
 12549 ;; Auto vars:     Size  Location     Type
 12550 ;;  lights          1   70[BANK0 ] unsigned char 
 12551 ;; Return value:  Size  Location     Type
 12552 ;;		None               void
 12553 ;; Registers used:
 12554 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12555 ;; Tracked objects:
 12556 ;;		On entry : 0/0
 12557 ;;		On exit  : 0/0
 12558 ;;		Unchanged: 0/0
 12559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12561 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12563 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12564 ;;Total ram usage:        1 bytes
 12565 ;; Hardware stack levels used:    1
 12566 ;; Hardware stack levels required when called:    9
 12567 ;; This function calls:
 12568 ;;		_DimmerLightsPointSelect
 12569 ;;		_setBuz
 12570 ;;		_setDimmerLights
 12571 ;;		_setDimmerLights_Adj
 12572 ;; This function is called by:
 12573 ;;		_DimmerLights_Main
 12574 ;; This function uses a non-reentrant model
 12575 ;;
 12576                           
 12577                           
 12578                           ;psect for function _setDimmerLights_Main
 12579  16F1                     _setDimmerLights_Main:	
 12580                           
 12581                           ;incstack = 0
 12582                           ; Regs used in _setDimmerLights_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12583                           ;setDimmerLights_Main@lights stored from wreg
 12584  16F1  0020               	movlb	0	; select bank0
 12585  16F2  00E6               	movwf	setDimmerLights_Main@lights
 12586                           
 12587                           ;Dimmer_B1.c: 417: DimmerLightsPointSelect(lights);
 12588  16F3  0866               	movf	setDimmerLights_Main@lights,w
 12589  16F4  319C  24B4  3196   	fcall	_DimmerLightsPointSelect
 12590                           
 12591                           ;Dimmer_B1.c: 418: if (DimmerLights->Trigger == 1) {
 12592  16F7  0020               	movlb	0	; select bank0
 12593  16F8  086F               	movf	_DimmerLights,w
 12594  16F9  3E08               	addlw	8
 12595  16FA  0086               	movwf	6
 12596  16FB  3001               	movlw	1	; select bank2/3
 12597  16FC  0087               	movwf	7
 12598  16FD  1D01               	btfss	1,2
 12599  16FE  2F1C               	goto	l7368
 12600                           
 12601                           ;Dimmer_B1.c: 420: if (Dimmer.LoadOK == 0) {
 12602  16FF  0022               	movlb	2	; select bank2
 12603  1700  18A0               	btfsc	_Dimmer^(0+256),1
 12604  1701  0008               	return
 12605                           
 12606                           ;Dimmer_B1.c: 421: DimmerLights->Trigger = 0;
 12607  1702  0020               	movlb	0	; select bank0
 12608  1703  086F               	movf	_DimmerLights,w
 12609  1704  3E08               	addlw	8
 12610  1705  0086               	movwf	6
 12611  1706  3001               	movlw	1	; select bank2/3
 12612  1707  0087               	movwf	7
 12613  1708  1101               	bcf	1,2
 12614                           
 12615                           ;Dimmer_B1.c: 423: if (DimmerLights->Switch == 1) {
 12616  1709  086F               	movf	_DimmerLights,w
 12617  170A  3E08               	addlw	8
 12618  170B  0086               	movwf	6
 12619  170C  3001               	movlw	1	; select bank2/3
 12620  170D  0087               	movwf	7
 12621  170E  1C81               	btfss	1,1
 12622  170F  2F16               	goto	l7366
 12623                           
 12624                           ;Dimmer_B1.c: 424: setDimmerLights(lights, 1);
 12625  1710  01E2               	clrf	setDimmerLights@status
 12626  1711  0AE2               	incf	setDimmerLights@status,f
 12627  1712  0866               	movf	setDimmerLights_Main@lights,w
 12628  1713  318C  24F8         	fcall	_setDimmerLights
 12629                           
 12630                           ;Dimmer_B1.c: 425: } else {
 12631  1715  0008               	return
 12632  1716                     l7366:	
 12633                           
 12634                           ;Dimmer_B1.c: 426: setDimmerLights(lights, 0);
 12635  1716  0020               	movlb	0	; select bank0
 12636  1717  01E2               	clrf	setDimmerLights@status
 12637  1718  0866               	movf	setDimmerLights_Main@lights,w
 12638  1719  318C  24F8         	fcall	_setDimmerLights
 12639                           
 12640                           ;Dimmer_B1.c: 427: }
 12641                           ;Dimmer_B1.c: 428: }
 12642                           ;Dimmer_B1.c: 429: } else {
 12643  171B  0008               	return
 12644  171C                     l7368:	
 12645                           
 12646                           ;Dimmer_B1.c: 430: if (DimmerLights->TriggerAdj == 1) {
 12647  171C  0020               	movlb	0	; select bank0
 12648  171D  086F               	movf	_DimmerLights,w
 12649  171E  3E08               	addlw	8
 12650  171F  0086               	movwf	6
 12651  1720  3001               	movlw	1	; select bank2/3
 12652  1721  0087               	movwf	7
 12653  1722  1E01               	btfss	1,4
 12654  1723  0008               	return
 12655                           
 12656                           ;Dimmer_B1.c: 431: if (Dimmer.LoadOK == 0) {
 12657  1724  0022               	movlb	2	; select bank2
 12658  1725  18A0               	btfsc	_Dimmer^(0+256),1
 12659  1726  0008               	return
 12660                           
 12661                           ;Dimmer_B1.c: 432: DimmerLights->TriggerAdj = 0;
 12662  1727  0020               	movlb	0	; select bank0
 12663  1728  086F               	movf	_DimmerLights,w
 12664  1729  3E08               	addlw	8
 12665  172A  0086               	movwf	6
 12666  172B  3001               	movlw	1	; select bank2/3
 12667  172C  0087               	movwf	7
 12668  172D  1201               	bcf	1,4
 12669                           
 12670                           ;Dimmer_B1.c: 433: if (DimmerLights->AdjGo == 1) {
 12671  172E  086F               	movf	_DimmerLights,w
 12672  172F  3E08               	addlw	8
 12673  1730  0086               	movwf	6
 12674  1731  3001               	movlw	1	; select bank2/3
 12675  1732  0087               	movwf	7
 12676  1733  1D81               	btfss	1,3
 12677  1734  2F44               	goto	l7378
 12678                           
 12679                           ;Dimmer_B1.c: 434: setDimmerLights_Adj(lights, 1);
 12680  1735  01E2               	clrf	setDimmerLights_Adj@status
 12681  1736  0AE2               	incf	setDimmerLights_Adj@status,f
 12682  1737  0866               	movf	setDimmerLights_Main@lights,w
 12683  1738  318A  22B8  3196   	fcall	_setDimmerLights_Adj
 12684                           
 12685                           ;Dimmer_B1.c: 435: setBuz(1, 100);
 12686  173B  3064               	movlw	100
 12687  173C  0020               	movlb	0	; select bank0
 12688  173D  00A9               	movwf	setBuz@time
 12689  173E  3000               	movlw	0
 12690  173F  00AA               	movwf	setBuz@time+1
 12691  1740  3001               	movlw	1
 12692  1741  3196  2698         	fcall	_setBuz
 12693                           
 12694                           ;Dimmer_B1.c: 436: } else {
 12695  1743  0008               	return
 12696  1744                     l7378:	
 12697                           
 12698                           ;Dimmer_B1.c: 437: setDimmerLights_Adj(lights, 0);
 12699  1744  0020               	movlb	0	; select bank0
 12700  1745  01E2               	clrf	setDimmerLights_Adj@status
 12701  1746  0866               	movf	setDimmerLights_Main@lights,w
 12702  1747  318A  22B8         	fcall	_setDimmerLights_Adj
 12703  1749  0008               	return
 12704  174A                     __end_of_setDimmerLights_Main:	
 12705                           
 12706                           	psect	text75
 12707  0AB8                     __ptext75:	
 12708 ;; *************** function _setDimmerLights_Adj *****************
 12709 ;; Defined at:
 12710 ;;		line 716 in file "../src/Dimmer_B1.c"
 12711 ;; Parameters:    Size  Location     Type
 12712 ;;  lights          1    wreg     unsigned char 
 12713 ;;  status          1   66[BANK0 ] unsigned char 
 12714 ;; Auto vars:     Size  Location     Type
 12715 ;;  lights          1   69[BANK0 ] unsigned char 
 12716 ;; Return value:  Size  Location     Type
 12717 ;;		None               void
 12718 ;; Registers used:
 12719 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12720 ;; Tracked objects:
 12721 ;;		On entry : 0/0
 12722 ;;		On exit  : 0/0
 12723 ;;		Unchanged: 0/0
 12724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12725 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12726 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12727 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12728 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12729 ;;Total ram usage:        4 bytes
 12730 ;; Hardware stack levels used:    1
 12731 ;; Hardware stack levels required when called:    8
 12732 ;; This function calls:
 12733 ;;		_DimmerLightsPointSelect
 12734 ;;		_getMain_All_Error_Status
 12735 ;;		_setPercentValue
 12736 ;;		_setRF_DimmerLights
 12737 ;;		_setTxData
 12738 ;; This function is called by:
 12739 ;;		_setDimmerLights_Main
 12740 ;; This function uses a non-reentrant model
 12741 ;;
 12742                           
 12743                           
 12744                           ;psect for function _setDimmerLights_Adj
 12745  0AB8                     _setDimmerLights_Adj:	
 12746                           
 12747                           ;incstack = 0
 12748                           ; Regs used in _setDimmerLights_Adj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12749                           ;setDimmerLights_Adj@lights stored from wreg
 12750  0AB8  0020               	movlb	0	; select bank0
 12751  0AB9  00E5               	movwf	setDimmerLights_Adj@lights
 12752                           
 12753                           ;Dimmer_B1.c: 717: DimmerLightsPointSelect(lights);
 12754  0ABA  0865               	movf	setDimmerLights_Adj@lights,w
 12755  0ABB  319C  24B4  318A   	fcall	_DimmerLightsPointSelect
 12756                           
 12757                           ;Dimmer_B1.c: 718: if (status == 1) {
 12758  0ABE  0020               	movlb	0	; select bank0
 12759  0ABF  0862               	movf	setDimmerLights_Adj@status,w
 12760  0AC0  3A01               	xorlw	1
 12761  0AC1  1D03               	skipz
 12762  0AC2  2ACE               	goto	l6932
 12763                           
 12764                           ;Dimmer_B1.c: 719: DimmerLights->AdjFlag = 1;
 12765  0AC3  086F               	movf	_DimmerLights,w
 12766  0AC4  0086               	movwf	6
 12767  0AC5  3001               	movlw	1	; select bank2/3
 12768  0AC6  0087               	movwf	7
 12769  0AC7  1581               	bsf	1,3
 12770                           
 12771                           ;Dimmer_B1.c: 720: DimmerLights->Signal = 1;
 12772  0AC8  086F               	movf	_DimmerLights,w
 12773  0AC9  0086               	movwf	6
 12774  0ACA  3001               	movlw	1	; select bank2/3
 12775  0ACB  0087               	movwf	7
 12776  0ACC  1481               	bsf	1,1
 12777                           
 12778                           ;Dimmer_B1.c: 721: } else {
 12779  0ACD  0008               	return
 12780  0ACE                     l6932:	
 12781                           
 12782                           ;Dimmer_B1.c: 722: if (DimmerLights->AdjFlag == 1) {
 12783  0ACE  086F               	movf	_DimmerLights,w
 12784  0ACF  0086               	movwf	6
 12785  0AD0  3001               	movlw	1	; select bank2/3
 12786  0AD1  0087               	movwf	7
 12787  0AD2  1D81               	btfss	1,3
 12788  0AD3  0008               	return
 12789                           
 12790                           ;Dimmer_B1.c: 723: DimmerLights->Signal = 0;
 12791  0AD4  086F               	movf	_DimmerLights,w
 12792  0AD5  0086               	movwf	6
 12793  0AD6  3001               	movlw	1	; select bank2/3
 12794  0AD7  0087               	movwf	7
 12795  0AD8  1081               	bcf	1,1
 12796                           
 12797                           ;Dimmer_B1.c: 724: DimmerLights->AdjFlag = 0;
 12798  0AD9  086F               	movf	_DimmerLights,w
 12799  0ADA  0086               	movwf	6
 12800  0ADB  3001               	movlw	1	; select bank2/3
 12801  0ADC  0087               	movwf	7
 12802  0ADD  1181               	bcf	1,3
 12803                           
 12804                           ;Dimmer_B1.c: 725: DimmerLights->MaxmumValue = DimmerLights->DimmingValue;
 12805  0ADE  086F               	movf	_DimmerLights,w
 12806  0ADF  3E04               	addlw	4
 12807  0AE0  0086               	movwf	6
 12808  0AE1  3001               	movlw	1	; select bank2/3
 12809  0AE2  0087               	movwf	7
 12810  0AE3  0801               	movf	1,w
 12811  0AE4  00E3               	movwf	??_setDimmerLights_Adj
 12812  0AE5  086F               	movf	_DimmerLights,w
 12813  0AE6  3E05               	addlw	5
 12814  0AE7  0086               	movwf	6
 12815  0AE8  3001               	movlw	1	; select bank2/3
 12816  0AE9  0087               	movwf	7
 12817  0AEA  0863               	movf	??_setDimmerLights_Adj,w
 12818  0AEB  0081               	movwf	1
 12819                           
 12820                           ;Dimmer_B1.c: 726: product->Data[(20 + lights)]=setPercentValue(DimmerLights->DimmingVal
      +                          ue);
 12821  0AEC  086F               	movf	_DimmerLights,w
 12822  0AED  3E04               	addlw	4
 12823  0AEE  0086               	movwf	6
 12824  0AEF  3001               	movlw	1	; select bank2/3
 12825  0AF0  0087               	movwf	7
 12826  0AF1  0801               	movf	1,w
 12827  0AF2  3189  21EE  318A   	fcall	_setPercentValue
 12828  0AF5  0020               	movlb	0	; select bank0
 12829  0AF6  00E3               	movwf	??_setDimmerLights_Adj
 12830  0AF7  0865               	movf	setDimmerLights_Adj@lights,w
 12831  0AF8  3E14               	addlw	20
 12832  0AF9  076E               	addwf	_product,w
 12833  0AFA  00E4               	movwf	??_setDimmerLights_Adj+1
 12834  0AFB  0864               	movf	??_setDimmerLights_Adj+1,w
 12835  0AFC  0086               	movwf	6
 12836  0AFD  3002               	movlw	2	; select bank4/5
 12837  0AFE  0087               	movwf	7
 12838  0AFF  0863               	movf	??_setDimmerLights_Adj,w
 12839  0B00  0081               	movwf	1
 12840                           
 12841                           ;Dimmer_B1.c: 736: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 12842  0B01  3000               	movlw	0
 12843  0B02  3191  2179  318A   	fcall	_getMain_All_Error_Status
 12844  0B05  3A00               	xorlw	0
 12845  0B06  3000               	movlw	0
 12846  0B07  1903               	skipnz
 12847  0B08  3001               	movlw	1
 12848  0B09  0020               	movlb	0	; select bank0
 12849  0B0A  00E3               	movwf	??_setDimmerLights_Adj
 12850  0B0B  0DE3               	rlf	??_setDimmerLights_Adj,f
 12851  0B0C  0022               	movlb	2	; select bank2
 12852  0B0D  0820               	movf	_Dimmer^(0+256),w
 12853  0B0E  0020               	movlb	0	; select bank0
 12854  0B0F  0663               	xorwf	??_setDimmerLights_Adj,w
 12855  0B10  39FD               	andlw	-3
 12856  0B11  0663               	xorwf	??_setDimmerLights_Adj,w
 12857  0B12  0022               	movlb	2	; select bank2
 12858  0B13  00A0               	movwf	_Dimmer^(0+256)
 12859                           
 12860                           ;Dimmer_B1.c: 739: setRF_DimmerLights(lights, 1);
 12861  0B14  0020               	movlb	0	; select bank0
 12862  0B15  01A0               	clrf	setRF_DimmerLights@on
 12863  0B16  0AA0               	incf	setRF_DimmerLights@on,f
 12864  0B17  0865               	movf	setDimmerLights_Adj@lights,w
 12865  0B18  3197  27A4  318A   	fcall	_setRF_DimmerLights
 12866                           
 12867                           ;Dimmer_B1.c: 740: setTxData();
 12868  0B1B  3187  2723         	fcall	_setTxData
 12869  0B1D  0008               	return
 12870  0B1E                     __end_of_setDimmerLights_Adj:	
 12871                           
 12872                           	psect	text76
 12873  0CF8                     __ptext76:	
 12874 ;; *************** function _setDimmerLights *****************
 12875 ;; Defined at:
 12876 ;;		line 611 in file "../src/Dimmer_B1.c"
 12877 ;; Parameters:    Size  Location     Type
 12878 ;;  lights          1    wreg     unsigned char 
 12879 ;;  status          1   66[BANK0 ] unsigned char 
 12880 ;; Auto vars:     Size  Location     Type
 12881 ;;  lights          1   69[BANK0 ] unsigned char 
 12882 ;; Return value:  Size  Location     Type
 12883 ;;		None               void
 12884 ;; Registers used:
 12885 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12886 ;; Tracked objects:
 12887 ;;		On entry : 0/0
 12888 ;;		On exit  : 0/0
 12889 ;;		Unchanged: 0/0
 12890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12891 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12892 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12893 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12894 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12895 ;;Total ram usage:        4 bytes
 12896 ;; Hardware stack levels used:    1
 12897 ;; Hardware stack levels required when called:    8
 12898 ;; This function calls:
 12899 ;;		_DimmerLightsPointSelect
 12900 ;;		_getMain_All_Error_Status
 12901 ;;		_setDimmerLights_Line
 12902 ;;		_setLED
 12903 ;;		_setPercentValue
 12904 ;;		_setRF_DimmerLights
 12905 ;;		_setTxData
 12906 ;; This function is called by:
 12907 ;;		_setDimmerLights_Main
 12908 ;; This function uses a non-reentrant model
 12909 ;;
 12910                           
 12911                           
 12912                           ;psect for function _setDimmerLights
 12913  0CF8                     _setDimmerLights:	
 12914                           
 12915                           ;incstack = 0
 12916                           ; Regs used in _setDimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12917                           ;setDimmerLights@lights stored from wreg
 12918  0CF8  0020               	movlb	0	; select bank0
 12919  0CF9  00E5               	movwf	setDimmerLights@lights
 12920                           
 12921                           ;Dimmer_B1.c: 612: DimmerLightsPointSelect(lights);
 12922  0CFA  0865               	movf	setDimmerLights@lights,w
 12923  0CFB  319C  24B4  318C   	fcall	_DimmerLightsPointSelect
 12924                           
 12925                           ;Dimmer_B1.c: 615: Dimmer.LoadOK = getMain_All_Error_Status(0) == 0 ? 1 : 0;
 12926  0CFE  3000               	movlw	0
 12927  0CFF  3191  2179  318C   	fcall	_getMain_All_Error_Status
 12928  0D02  3A00               	xorlw	0
 12929  0D03  3000               	movlw	0
 12930  0D04  1903               	skipnz
 12931  0D05  3001               	movlw	1
 12932  0D06  0020               	movlb	0	; select bank0
 12933  0D07  00E3               	movwf	??_setDimmerLights
 12934  0D08  0DE3               	rlf	??_setDimmerLights,f
 12935  0D09  0022               	movlb	2	; select bank2
 12936  0D0A  0820               	movf	_Dimmer^(0+256),w
 12937  0D0B  0020               	movlb	0	; select bank0
 12938  0D0C  0663               	xorwf	??_setDimmerLights,w
 12939  0D0D  39FD               	andlw	-3
 12940  0D0E  0663               	xorwf	??_setDimmerLights,w
 12941  0D0F  0022               	movlb	2	; select bank2
 12942  0D10  00A0               	movwf	_Dimmer^(0+256)
 12943                           
 12944                           ;Dimmer_B1.c: 619: if (status == 1) {
 12945  0D11  0020               	movlb	0	; select bank0
 12946  0D12  0862               	movf	setDimmerLights@status,w
 12947  0D13  3A01               	xorlw	1
 12948  0D14  1D03               	skipz
 12949  0D15  2D46               	goto	l6912
 12950                           
 12951                           ;Dimmer_B1.c: 620: DimmerLights->Loop = 1;
 12952  0D16  086F               	movf	_DimmerLights,w
 12953  0D17  3E09               	addlw	9
 12954  0D18  0086               	movwf	6
 12955  0D19  3001               	movlw	1	; select bank2/3
 12956  0D1A  0087               	movwf	7
 12957  0D1B  1481               	bsf	1,1
 12958                           
 12959                           ;Dimmer_B1.c: 621: setLED(lights, 0);
 12960  0D1C  01A2               	clrf	setLED@command
 12961  0D1D  0865               	movf	setDimmerLights@lights,w
 12962  0D1E  3195  259C  318C   	fcall	_setLED
 12963                           
 12964                           ;Dimmer_B1.c: 623: setDimmerLights_Line(lights);
 12965  0D21  0020               	movlb	0	; select bank0
 12966  0D22  0865               	movf	setDimmerLights@lights,w
 12967  0D23  319D  258E  318C   	fcall	_setDimmerLights_Line
 12968                           
 12969                           ;Dimmer_B1.c: 624: DimmerLights->StatusFlag = 1;
 12970  0D26  0020               	movlb	0	; select bank0
 12971  0D27  086F               	movf	_DimmerLights,w
 12972  0D28  0086               	movwf	6
 12973  0D29  3001               	movlw	1	; select bank2/3
 12974  0D2A  0087               	movwf	7
 12975  0D2B  1701               	bsf	1,6
 12976                           
 12977                           ;Dimmer_B1.c: 631: DimmerLights->DimmingValue = ((char)(80*0.8));
 12978  0D2C  3040               	movlw	64
 12979  0D2D  00E3               	movwf	??_setDimmerLights
 12980  0D2E  086F               	movf	_DimmerLights,w
 12981  0D2F  3E04               	addlw	4
 12982  0D30  0086               	movwf	6
 12983  0D31  3001               	movlw	1	; select bank2/3
 12984  0D32  0087               	movwf	7
 12985  0D33  0863               	movf	??_setDimmerLights,w
 12986  0D34  0081               	movwf	1
 12987                           
 12988                           ;Dimmer_B1.c: 632: product->Data[(20 + lights)]=setPercentValue(((char)(80*0.8)));
 12989  0D35  3040               	movlw	64
 12990  0D36  3189  21EE  318C   	fcall	_setPercentValue
 12991  0D39  0020               	movlb	0	; select bank0
 12992  0D3A  00E3               	movwf	??_setDimmerLights
 12993  0D3B  0865               	movf	setDimmerLights@lights,w
 12994  0D3C  3E14               	addlw	20
 12995  0D3D  076E               	addwf	_product,w
 12996  0D3E  00E4               	movwf	??_setDimmerLights+1
 12997  0D3F  0864               	movf	??_setDimmerLights+1,w
 12998  0D40  0086               	movwf	6
 12999  0D41  3002               	movlw	2	; select bank4/5
 13000  0D42  0087               	movwf	7
 13001  0D43  0863               	movf	??_setDimmerLights,w
 13002  0D44  0081               	movwf	1
 13003  0D45  2D6D               	goto	l6924
 13004  0D46                     l6912:	
 13005                           ;Dimmer_B1.c: 642: } else {
 13006                           
 13007                           ;Dimmer_B1.c: 640: DimmerLights->DimmingTimeValue = 7;
 13008                           
 13009                           
 13010                           ;Dimmer_B1.c: 643: DimmerLights->StatusFlag = 0;
 13011  0D46  086F               	movf	_DimmerLights,w
 13012  0D47  0086               	movwf	6
 13013  0D48  3001               	movlw	1	; select bank2/3
 13014  0D49  0087               	movwf	7
 13015  0D4A  1301               	bcf	1,6
 13016                           
 13017                           ;Dimmer_B1.c: 644: DimmerLights->Loop = 0;
 13018  0D4B  086F               	movf	_DimmerLights,w
 13019  0D4C  3E09               	addlw	9
 13020  0D4D  0086               	movwf	6
 13021  0D4E  3001               	movlw	1	; select bank2/3
 13022  0D4F  0087               	movwf	7
 13023  0D50  1081               	bcf	1,1
 13024                           
 13025                           ;Dimmer_B1.c: 645: setLED(lights, 1);
 13026  0D51  01A2               	clrf	setLED@command
 13027  0D52  0AA2               	incf	setLED@command,f
 13028  0D53  0865               	movf	setDimmerLights@lights,w
 13029  0D54  3195  259C  318C   	fcall	_setLED
 13030                           
 13031                           ;Dimmer_B1.c: 653: DimmerLights->MosfetClose = 1;
 13032  0D57  0020               	movlb	0	; select bank0
 13033  0D58  086F               	movf	_DimmerLights,w
 13034  0D59  3E08               	addlw	8
 13035  0D5A  0086               	movwf	6
 13036  0D5B  3001               	movlw	1	; select bank2/3
 13037  0D5C  0087               	movwf	7
 13038  0D5D  1781               	bsf	1,7
 13039                           
 13040                           ;Dimmer_B1.c: 656: DimmerLights->AdjFlag = 0;
 13041  0D5E  086F               	movf	_DimmerLights,w
 13042  0D5F  0086               	movwf	6
 13043  0D60  3001               	movlw	1	; select bank2/3
 13044  0D61  0087               	movwf	7
 13045  0D62  1181               	bcf	1,3
 13046                           
 13047                           ;Dimmer_B1.c: 657: DimmerLights->AdjStatus = 0;
 13048  0D63  086F               	movf	_DimmerLights,w
 13049  0D64  0086               	movwf	6
 13050  0D65  3001               	movlw	1	; select bank2/3
 13051  0D66  0087               	movwf	7
 13052  0D67  1201               	bcf	1,4
 13053                           
 13054                           ;Dimmer_B1.c: 658: DimmerLights->AdjRF = 0;
 13055  0D68  086F               	movf	_DimmerLights,w
 13056  0D69  0086               	movwf	6
 13057  0D6A  3001               	movlw	1	; select bank2/3
 13058  0D6B  0087               	movwf	7
 13059  0D6C  1101               	bcf	1,2
 13060  0D6D                     l6924:	
 13061                           
 13062                           ;Dimmer_B1.c: 659: DimmerLights->DimmingTimeValue = 7;
 13063  0D6D  3007               	movlw	7
 13064  0D6E  00E3               	movwf	??_setDimmerLights
 13065  0D6F  086F               	movf	_DimmerLights,w
 13066  0D70  3E02               	addlw	2
 13067  0D71  0086               	movwf	6
 13068  0D72  3001               	movlw	1	; select bank2/3
 13069  0D73  0087               	movwf	7
 13070  0D74  0863               	movf	??_setDimmerLights,w
 13071  0D75  0081               	movwf	1
 13072                           
 13073                           ;Dimmer_B1.c: 661: }
 13074                           ;Dimmer_B1.c: 662: setRF_DimmerLights(lights, status);
 13075  0D76  0862               	movf	setDimmerLights@status,w
 13076  0D77  00E3               	movwf	??_setDimmerLights
 13077  0D78  0863               	movf	??_setDimmerLights,w
 13078  0D79  00A0               	movwf	setRF_DimmerLights@on
 13079  0D7A  0865               	movf	setDimmerLights@lights,w
 13080  0D7B  3197  27A4  318C   	fcall	_setRF_DimmerLights
 13081                           
 13082                           ;Dimmer_B1.c: 663: setTxData();
 13083  0D7E  3187  2723         	fcall	_setTxData
 13084  0D80  0008               	return
 13085  0D81                     __end_of_setDimmerLights:	
 13086                           
 13087                           	psect	text77
 13088  0723                     __ptext77:	
 13089 ;; *************** function _setTxData *****************
 13090 ;; Defined at:
 13091 ;;		line 210 in file "../src/RF_Control_B1.c"
 13092 ;; Parameters:    Size  Location     Type
 13093 ;;		None
 13094 ;; Auto vars:     Size  Location     Type
 13095 ;;  i               1    0        unsigned char 
 13096 ;; Return value:  Size  Location     Type
 13097 ;;		None               void
 13098 ;; Registers used:
 13099 ;;		wreg, fsr1l, fsr1h
 13100 ;; Tracked objects:
 13101 ;;		On entry : 0/0
 13102 ;;		On exit  : 0/0
 13103 ;;		Unchanged: 0/0
 13104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13105 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13106 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13107 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13108 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13109 ;;Total ram usage:        1 bytes
 13110 ;; Hardware stack levels used:    1
 13111 ;; Hardware stack levels required when called:    5
 13112 ;; This function calls:
 13113 ;;		Nothing
 13114 ;; This function is called by:
 13115 ;;		_setDimmerLights
 13116 ;;		_setDimmerLights_Adj
 13117 ;;		_getRxData
 13118 ;;		_setControl_Lights_Table
 13119 ;;		_setRFSW_Control
 13120 ;;		_setRFSW_AdjControl
 13121 ;; This function uses a non-reentrant model
 13122 ;;
 13123                           
 13124                           
 13125                           ;psect for function _setTxData
 13126  0723                     _setTxData:	
 13127                           
 13128                           ;RF_Control_B1.c: 211: char i;
 13129                           ;RF_Control_B1.c: 212: if (RF1.Enable == 1) {
 13130                           
 13131                           ;incstack = 0
 13132                           ; Regs used in _setTxData: [wregfsr1]
 13133  0723  0021               	movlb	1	; select bank1
 13134  0724  1C3A               	btfss	_RF1^(0+128),0
 13135  0725  0008               	return
 13136                           
 13137                           ;RF_Control_B1.c: 214: if (RF1.TransceiveGO == 0) {
 13138  0726  193A               	btfsc	_RF1^(0+128),2
 13139  0727  0008               	return
 13140                           
 13141                           ;RF_Control_B1.c: 215: RF1.TransceiveGO = 1;
 13142  0728  153A               	bsf	_RF1^(0+128),2
 13143                           
 13144                           ;RF_Control_B1.c: 216: RF1.RunTime = 20;
 13145  0729  3014               	movlw	20
 13146  072A  00C1               	movwf	(_RF1^(0+128)+7)
 13147  072B  3000               	movlw	0
 13148  072C  00C2               	movwf	(_RF1^(0+128)+8)
 13149                           
 13150                           ;RF_Control_B1.c: 228: RF_Data[0] = 0x63;
 13151  072D  3063               	movlw	99
 13152  072E  0020               	movlb	0	; select bank0
 13153  072F  00A0               	movwf	??_setTxData
 13154  0730  0820               	movf	??_setTxData,w
 13155  0731  0023               	movlb	3	; select bank3
 13156  0732  00A0               	movwf	_RF_Data^(0+384)
 13157                           
 13158                           ;RF_Control_B1.c: 229: RF_Data[1] = 0x02;
 13159  0733  3002               	movlw	2
 13160  0734  0020               	movlb	0	; select bank0
 13161  0735  00A0               	movwf	??_setTxData
 13162  0736  0820               	movf	??_setTxData,w
 13163  0737  0023               	movlb	3	; select bank3
 13164  0738  00A1               	movwf	(_RF_Data^(0+384)+1)
 13165                           
 13166                           ;RF_Control_B1.c: 231: RF_Data[2] = product->Data[2];
 13167  0739  0020               	movlb	0	; select bank0
 13168  073A  086E               	movf	_product,w
 13169  073B  0086               	movwf	6
 13170  073C  3002               	movlw	2	; select bank4/5
 13171  073D  0087               	movwf	7
 13172  073E  3002               	movlw	2	; select bank4/5
 13173  073F  3F42               	moviw [2]fsr1
 13174  0740  0023               	movlb	3	; select bank3
 13175  0741  00A2               	movwf	(_RF_Data^(0+384)+2)
 13176                           
 13177                           ;RF_Control_B1.c: 232: RF_Data[3] = product->Data[3];
 13178  0742  0020               	movlb	0	; select bank0
 13179  0743  086E               	movf	_product,w
 13180  0744  0086               	movwf	6
 13181  0745  3002               	movlw	2	; select bank4/5
 13182  0746  0087               	movwf	7
 13183  0747  3002               	movlw	2	; select bank4/5
 13184  0748  3F43               	moviw [3]fsr1
 13185  0749  0023               	movlb	3	; select bank3
 13186  074A  00A3               	movwf	(_RF_Data^(0+384)+3)
 13187                           
 13188                           ;RF_Control_B1.c: 233: RF_Data[4] = product->Data[4];
 13189  074B  0020               	movlb	0	; select bank0
 13190  074C  086E               	movf	_product,w
 13191  074D  0086               	movwf	6
 13192  074E  3002               	movlw	2	; select bank4/5
 13193  074F  0087               	movwf	7
 13194  0750  3002               	movlw	2	; select bank4/5
 13195  0751  3F44               	moviw [4]fsr1
 13196  0752  0023               	movlb	3	; select bank3
 13197  0753  00A4               	movwf	(_RF_Data^(0+384)+4)
 13198                           
 13199                           ;RF_Control_B1.c: 234: RF_Data[5] = product->Data[5];
 13200  0754  0020               	movlb	0	; select bank0
 13201  0755  086E               	movf	_product,w
 13202  0756  0086               	movwf	6
 13203  0757  3002               	movlw	2	; select bank4/5
 13204  0758  0087               	movwf	7
 13205  0759  3002               	movlw	2	; select bank4/5
 13206  075A  3F45               	moviw [5]fsr1
 13207  075B  0023               	movlb	3	; select bank3
 13208  075C  00A5               	movwf	(_RF_Data^(0+384)+5)
 13209                           
 13210                           ;RF_Control_B1.c: 235: RF_Data[6] = product->Data[6];
 13211  075D  0020               	movlb	0	; select bank0
 13212  075E  086E               	movf	_product,w
 13213  075F  0086               	movwf	6
 13214  0760  3002               	movlw	2	; select bank4/5
 13215  0761  0087               	movwf	7
 13216  0762  3002               	movlw	2	; select bank4/5
 13217  0763  3F46               	moviw [6]fsr1
 13218  0764  0023               	movlb	3	; select bank3
 13219  0765  00A6               	movwf	(_RF_Data^(0+384)+6)
 13220                           
 13221                           ;RF_Control_B1.c: 236: RF_Data[7] = product->Data[7];
 13222  0766  0020               	movlb	0	; select bank0
 13223  0767  086E               	movf	_product,w
 13224  0768  0086               	movwf	6
 13225  0769  3002               	movlw	2	; select bank4/5
 13226  076A  0087               	movwf	7
 13227  076B  3002               	movlw	2	; select bank4/5
 13228  076C  3F47               	moviw [7]fsr1
 13229  076D  0023               	movlb	3	; select bank3
 13230  076E  00A7               	movwf	(_RF_Data^(0+384)+7)
 13231                           
 13232                           ;RF_Control_B1.c: 237: RF_Data[8] = product->Data[8];
 13233  076F  0020               	movlb	0	; select bank0
 13234  0770  086E               	movf	_product,w
 13235  0771  0086               	movwf	6
 13236  0772  3002               	movlw	2	; select bank4/5
 13237  0773  0087               	movwf	7
 13238  0774  3002               	movlw	2	; select bank4/5
 13239  0775  3F48               	moviw [8]fsr1
 13240  0776  0023               	movlb	3	; select bank3
 13241  0777  00A8               	movwf	(_RF_Data^(0+384)+8)
 13242                           
 13243                           ;RF_Control_B1.c: 238: RF_Data[9] = product->Data[9];
 13244  0778  0020               	movlb	0	; select bank0
 13245  0779  086E               	movf	_product,w
 13246  077A  0086               	movwf	6
 13247  077B  3002               	movlw	2	; select bank4/5
 13248  077C  0087               	movwf	7
 13249  077D  3002               	movlw	2	; select bank4/5
 13250  077E  3F49               	moviw [9]fsr1
 13251  077F  0023               	movlb	3	; select bank3
 13252  0780  00A9               	movwf	(_RF_Data^(0+384)+9)
 13253                           
 13254                           ;RF_Control_B1.c: 239: RF_Data[10] = product->Data[10];
 13255  0781  0020               	movlb	0	; select bank0
 13256  0782  086E               	movf	_product,w
 13257  0783  0086               	movwf	6
 13258  0784  3002               	movlw	2	; select bank4/5
 13259  0785  0087               	movwf	7
 13260  0786  3002               	movlw	2	; select bank4/5
 13261  0787  3F4A               	moviw [10]fsr1
 13262  0788  0023               	movlb	3	; select bank3
 13263  0789  00AA               	movwf	(_RF_Data^(0+384)+10)
 13264                           
 13265                           ;RF_Control_B1.c: 240: RF_Data[11] = product->Data[11];
 13266  078A  0020               	movlb	0	; select bank0
 13267  078B  086E               	movf	_product,w
 13268  078C  0086               	movwf	6
 13269  078D  3002               	movlw	2	; select bank4/5
 13270  078E  0087               	movwf	7
 13271  078F  3002               	movlw	2	; select bank4/5
 13272  0790  3F4B               	moviw [11]fsr1
 13273  0791  0023               	movlb	3	; select bank3
 13274  0792  00AB               	movwf	(_RF_Data^(0+384)+11)
 13275                           
 13276                           ;RF_Control_B1.c: 241: RF_Data[12] = product->Data[12];
 13277  0793  0020               	movlb	0	; select bank0
 13278  0794  086E               	movf	_product,w
 13279  0795  0086               	movwf	6
 13280  0796  3002               	movlw	2	; select bank4/5
 13281  0797  0087               	movwf	7
 13282  0798  3002               	movlw	2	; select bank4/5
 13283  0799  3F4C               	moviw [12]fsr1
 13284  079A  0023               	movlb	3	; select bank3
 13285  079B  00AC               	movwf	(_RF_Data^(0+384)+12)
 13286                           
 13287                           ;RF_Control_B1.c: 242: RF_Data[13] = product->Data[13];
 13288  079C  0020               	movlb	0	; select bank0
 13289  079D  086E               	movf	_product,w
 13290  079E  0086               	movwf	6
 13291  079F  3002               	movlw	2	; select bank4/5
 13292  07A0  0087               	movwf	7
 13293  07A1  3002               	movlw	2	; select bank4/5
 13294  07A2  3F4D               	moviw [13]fsr1
 13295  07A3  0023               	movlb	3	; select bank3
 13296  07A4  00AD               	movwf	(_RF_Data^(0+384)+13)
 13297                           
 13298                           ;RF_Control_B1.c: 243: RF_Data[14] = product->Data[14];
 13299  07A5  0020               	movlb	0	; select bank0
 13300  07A6  086E               	movf	_product,w
 13301  07A7  0086               	movwf	6
 13302  07A8  3002               	movlw	2	; select bank4/5
 13303  07A9  0087               	movwf	7
 13304  07AA  3002               	movlw	2	; select bank4/5
 13305  07AB  3F4E               	moviw [14]fsr1
 13306  07AC  0023               	movlb	3	; select bank3
 13307  07AD  00AE               	movwf	(_RF_Data^(0+384)+14)
 13308                           
 13309                           ;RF_Control_B1.c: 244: RF_Data[15] = product->Data[15];
 13310  07AE  0020               	movlb	0	; select bank0
 13311  07AF  086E               	movf	_product,w
 13312  07B0  0086               	movwf	6
 13313  07B1  3002               	movlw	2	; select bank4/5
 13314  07B2  0087               	movwf	7
 13315  07B3  3002               	movlw	2	; select bank4/5
 13316  07B4  3F4F               	moviw [15]fsr1
 13317  07B5  0023               	movlb	3	; select bank3
 13318  07B6  00AF               	movwf	(_RF_Data^(0+384)+15)
 13319                           
 13320                           ;RF_Control_B1.c: 245: RF_Data[16] = product->Data[16];
 13321  07B7  0020               	movlb	0	; select bank0
 13322  07B8  086E               	movf	_product,w
 13323  07B9  0086               	movwf	6
 13324  07BA  3002               	movlw	2	; select bank4/5
 13325  07BB  0087               	movwf	7
 13326  07BC  3002               	movlw	2	; select bank4/5
 13327  07BD  3F50               	moviw [16]fsr1
 13328  07BE  0023               	movlb	3	; select bank3
 13329  07BF  00B0               	movwf	(_RF_Data^(0+384)+16)
 13330                           
 13331                           ;RF_Control_B1.c: 246: RF_Data[17] = product->Data[17];
 13332  07C0  0020               	movlb	0	; select bank0
 13333  07C1  086E               	movf	_product,w
 13334  07C2  0086               	movwf	6
 13335  07C3  3002               	movlw	2	; select bank4/5
 13336  07C4  0087               	movwf	7
 13337  07C5  3002               	movlw	2	; select bank4/5
 13338  07C6  3F51               	moviw [17]fsr1
 13339  07C7  0023               	movlb	3	; select bank3
 13340  07C8  00B1               	movwf	(_RF_Data^(0+384)+17)
 13341                           
 13342                           ;RF_Control_B1.c: 247: RF_Data[18] = product->Data[18];
 13343  07C9  0020               	movlb	0	; select bank0
 13344  07CA  086E               	movf	_product,w
 13345  07CB  0086               	movwf	6
 13346  07CC  3002               	movlw	2	; select bank4/5
 13347  07CD  0087               	movwf	7
 13348  07CE  3002               	movlw	2	; select bank4/5
 13349  07CF  3F52               	moviw [18]fsr1
 13350  07D0  0023               	movlb	3	; select bank3
 13351  07D1  00B2               	movwf	(_RF_Data^(0+384)+18)
 13352                           
 13353                           ;RF_Control_B1.c: 248: RF_Data[19] = product->Data[19];
 13354  07D2  0020               	movlb	0	; select bank0
 13355  07D3  086E               	movf	_product,w
 13356  07D4  0086               	movwf	6
 13357  07D5  3002               	movlw	2	; select bank4/5
 13358  07D6  0087               	movwf	7
 13359  07D7  3002               	movlw	2	; select bank4/5
 13360  07D8  3F53               	moviw [19]fsr1
 13361  07D9  0023               	movlb	3	; select bank3
 13362  07DA  00B3               	movwf	(_RF_Data^(0+384)+19)
 13363                           
 13364                           ;RF_Control_B1.c: 249: RF_Data[20] = 210;
 13365  07DB  30D2               	movlw	210
 13366  07DC  0020               	movlb	0	; select bank0
 13367  07DD  00A0               	movwf	??_setTxData
 13368  07DE  0820               	movf	??_setTxData,w
 13369  07DF  0023               	movlb	3	; select bank3
 13370  07E0  00B4               	movwf	(_RF_Data^(0+384)+20)
 13371  07E1  0008               	return
 13372  07E2                     __end_of_setTxData:	
 13373                           
 13374                           	psect	text78
 13375  17A4                     __ptext78:	
 13376 ;; *************** function _setRF_DimmerLights *****************
 13377 ;; Defined at:
 13378 ;;		line 487 in file "../src/RF_Control_B1.c"
 13379 ;; Parameters:    Size  Location     Type
 13380 ;;  lights          1    wreg     unsigned char 
 13381 ;;  on              1    0[BANK0 ] unsigned char 
 13382 ;; Auto vars:     Size  Location     Type
 13383 ;;  lights          1    4[BANK0 ] unsigned char 
 13384 ;;  status          1    3[BANK0 ] unsigned char 
 13385 ;; Return value:  Size  Location     Type
 13386 ;;		None               void
 13387 ;; Registers used:
 13388 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13389 ;; Tracked objects:
 13390 ;;		On entry : 0/0
 13391 ;;		On exit  : 0/0
 13392 ;;		Unchanged: 0/0
 13393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13394 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13395 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13396 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13397 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13398 ;;Total ram usage:        5 bytes
 13399 ;; Hardware stack levels used:    1
 13400 ;; Hardware stack levels required when called:    5
 13401 ;; This function calls:
 13402 ;;		Nothing
 13403 ;; This function is called by:
 13404 ;;		_setDimmerLights
 13405 ;;		_setDimmerLights_Adj
 13406 ;;		_setRFSW_Control
 13407 ;; This function uses a non-reentrant model
 13408 ;;
 13409                           
 13410                           
 13411                           ;psect for function _setRF_DimmerLights
 13412  17A4                     _setRF_DimmerLights:	
 13413                           
 13414                           ;incstack = 0
 13415                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0]
 13416                           ;setRF_DimmerLights@lights stored from wreg
 13417  17A4  0020               	movlb	0	; select bank0
 13418  17A5  00A4               	movwf	setRF_DimmerLights@lights
 13419                           
 13420                           ;RF_Control_B1.c: 488: char status = 1;
 13421  17A6  01A3               	clrf	setRF_DimmerLights@status
 13422  17A7  0AA3               	incf	setRF_DimmerLights@status,f
 13423                           
 13424                           ;RF_Control_B1.c: 489: status <<= (lights - 1);
 13425  17A8  0824               	movf	setRF_DimmerLights@lights,w
 13426  17A9  3EFF               	addlw	-1
 13427  17AA  0A89               	incf	9,f
 13428  17AB  2FAE               	goto	u5280
 13429  17AC                     u5285:	
 13430  17AC  1003               	clrc
 13431  17AD  0DA3               	rlf	setRF_DimmerLights@status,f
 13432  17AE                     u5280:	
 13433  17AE  3EFF               	addlw	-1
 13434  17AF  1D03               	skipz
 13435  17B0  2FAC               	goto	u5285
 13436                           
 13437                           ;RF_Control_B1.c: 490: product->Data[11]=lights;
 13438  17B1  0824               	movf	setRF_DimmerLights@lights,w
 13439  17B2  00A1               	movwf	??_setRF_DimmerLights
 13440  17B3  086E               	movf	_product,w
 13441  17B4  3E0B               	addlw	11
 13442  17B5  0086               	movwf	6
 13443  17B6  3002               	movlw	2	; select bank4/5
 13444  17B7  0087               	movwf	7
 13445  17B8  0821               	movf	??_setRF_DimmerLights,w
 13446  17B9  0081               	movwf	1
 13447                           
 13448                           ;RF_Control_B1.c: 498: product->Data[9]=product->Data[20 + lights];
 13449  17BA  0824               	movf	setRF_DimmerLights@lights,w
 13450  17BB  3E14               	addlw	20
 13451  17BC  076E               	addwf	_product,w
 13452  17BD  00A1               	movwf	??_setRF_DimmerLights
 13453  17BE  0821               	movf	??_setRF_DimmerLights,w
 13454  17BF  0086               	movwf	6
 13455  17C0  3002               	movlw	2	; select bank4/5
 13456  17C1  0087               	movwf	7
 13457  17C2  0801               	movf	1,w
 13458  17C3  00A2               	movwf	??_setRF_DimmerLights+1
 13459  17C4  086E               	movf	_product,w
 13460  17C5  3E09               	addlw	9
 13461  17C6  0086               	movwf	6
 13462  17C7  3002               	movlw	2	; select bank4/5
 13463  17C8  0087               	movwf	7
 13464  17C9  0822               	movf	??_setRF_DimmerLights+1,w
 13465  17CA  0081               	movwf	1
 13466                           
 13467                           ;RF_Control_B1.c: 499: product->Data[17]=product->Data[26 + lights];
 13468  17CB  0824               	movf	setRF_DimmerLights@lights,w
 13469  17CC  3E1A               	addlw	26
 13470  17CD  076E               	addwf	_product,w
 13471  17CE  00A1               	movwf	??_setRF_DimmerLights
 13472  17CF  0821               	movf	??_setRF_DimmerLights,w
 13473  17D0  0086               	movwf	6
 13474  17D1  3002               	movlw	2	; select bank4/5
 13475  17D2  0087               	movwf	7
 13476  17D3  0801               	movf	1,w
 13477  17D4  00A2               	movwf	??_setRF_DimmerLights+1
 13478  17D5  086E               	movf	_product,w
 13479  17D6  3E11               	addlw	17
 13480  17D7  0086               	movwf	6
 13481  17D8  3002               	movlw	2	; select bank4/5
 13482  17D9  0087               	movwf	7
 13483  17DA  0822               	movf	??_setRF_DimmerLights+1,w
 13484  17DB  0081               	movwf	1
 13485                           
 13486                           ;RF_Control_B1.c: 500: if (on == 1) {
 13487  17DC  0820               	movf	setRF_DimmerLights@on,w
 13488  17DD  3A01               	xorlw	1
 13489  17DE  1D03               	skipz
 13490  17DF  2FF0               	goto	l6344
 13491                           
 13492                           ;RF_Control_B1.c: 501: product->Data[15]=(product->Data[15] | status);
 13493  17E0  086E               	movf	_product,w
 13494  17E1  3E0F               	addlw	15
 13495  17E2  0086               	movwf	6
 13496  17E3  3002               	movlw	2	; select bank4/5
 13497  17E4  0087               	movwf	7
 13498  17E5  0801               	movf	1,w
 13499  17E6  0423               	iorwf	setRF_DimmerLights@status,w
 13500  17E7  00A1               	movwf	??_setRF_DimmerLights
 13501  17E8  086E               	movf	_product,w
 13502  17E9  3E0F               	addlw	15
 13503  17EA  0086               	movwf	6
 13504  17EB  3002               	movlw	2	; select bank4/5
 13505  17EC  0087               	movwf	7
 13506  17ED  0821               	movf	??_setRF_DimmerLights,w
 13507  17EE  0081               	movwf	1
 13508                           
 13509                           ;RF_Control_B1.c: 502: } else {
 13510  17EF  0008               	return
 13511  17F0                     l6344:	
 13512                           
 13513                           ;RF_Control_B1.c: 503: product->Data[15]=(product->Data[15]&(~status));
 13514  17F0  086E               	movf	_product,w
 13515  17F1  3E0F               	addlw	15
 13516  17F2  0086               	movwf	6
 13517  17F3  3002               	movlw	2	; select bank4/5
 13518  17F4  0087               	movwf	7
 13519  17F5  0923               	comf	setRF_DimmerLights@status,w
 13520  17F6  0501               	andwf	1,w
 13521  17F7  00A1               	movwf	??_setRF_DimmerLights
 13522  17F8  086E               	movf	_product,w
 13523  17F9  3E0F               	addlw	15
 13524  17FA  0086               	movwf	6
 13525  17FB  3002               	movlw	2	; select bank4/5
 13526  17FC  0087               	movwf	7
 13527  17FD  0821               	movf	??_setRF_DimmerLights,w
 13528  17FE  0081               	movwf	1
 13529  17FF  0008               	return
 13530  1800                     __end_of_setRF_DimmerLights:	
 13531                           
 13532                           	psect	text79
 13533  09EE                     __ptext79:	
 13534 ;; *************** function _setPercentValue *****************
 13535 ;; Defined at:
 13536 ;;		line 874 in file "../src/Dimmer_B1.c"
 13537 ;; Parameters:    Size  Location     Type
 13538 ;;  value           1    wreg     unsigned char 
 13539 ;; Auto vars:     Size  Location     Type
 13540 ;;  value           1   62[BANK0 ] unsigned char 
 13541 ;;  i               3   63[BANK0 ] float 
 13542 ;; Return value:  Size  Location     Type
 13543 ;;                  1    wreg      unsigned char 
 13544 ;; Registers used:
 13545 ;;		wreg, status,2, status,0, pclath, cstack
 13546 ;; Tracked objects:
 13547 ;;		On entry : 0/0
 13548 ;;		On exit  : 0/0
 13549 ;;		Unchanged: 0/0
 13550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13552 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13553 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13554 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13555 ;;Total ram usage:        6 bytes
 13556 ;; Hardware stack levels used:    1
 13557 ;; Hardware stack levels required when called:    7
 13558 ;; This function calls:
 13559 ;;		___awtoft
 13560 ;;		___ftadd
 13561 ;;		___ftdiv
 13562 ;;		___ftneg
 13563 ;;		___fttol
 13564 ;; This function is called by:
 13565 ;;		_setDimmerLights
 13566 ;;		_setDimmerLights_Adj
 13567 ;;		_Flash_Memory_Initialization
 13568 ;; This function uses a non-reentrant model
 13569 ;;
 13570                           
 13571                           
 13572                           ;psect for function _setPercentValue
 13573  09EE                     _setPercentValue:	
 13574                           
 13575                           ;incstack = 0
 13576                           ; Regs used in _setPercentValue: [wreg+status,2+status,0+pclath+cstack]
 13577                           ;setPercentValue@value stored from wreg
 13578  09EE  0020               	movlb	0	; select bank0
 13579  09EF  00DE               	movwf	setPercentValue@value
 13580                           
 13581                           ;Dimmer_B1.c: 882: float i = ((char)(80*0.8)) - ((char)(15*0.8));
 13582  09F0  3000               	movlw	0
 13583  09F1  00DF               	movwf	setPercentValue@i
 13584  09F2  3050               	movlw	80
 13585  09F3  00E0               	movwf	setPercentValue@i+1
 13586  09F4  3042               	movlw	66
 13587  09F5  00E1               	movwf	setPercentValue@i+2
 13588                           
 13589                           ;Dimmer_B1.c: 883: i /= 100;
 13590  09F6  3000               	movlw	0
 13591  09F7  00AE               	movwf	___ftdiv@f2
 13592  09F8  30C8               	movlw	200
 13593  09F9  00AF               	movwf	___ftdiv@f2+1
 13594  09FA  3042               	movlw	66
 13595  09FB  00B0               	movwf	___ftdiv@f2+2
 13596  09FC  085F               	movf	setPercentValue@i,w
 13597  09FD  00B1               	movwf	___ftdiv@f1
 13598  09FE  0860               	movf	setPercentValue@i+1,w
 13599  09FF  00B2               	movwf	___ftdiv@f1+1
 13600  0A00  0861               	movf	setPercentValue@i+2,w
 13601  0A01  00B3               	movwf	___ftdiv@f1+2
 13602  0A02  318E  26A3  3189   	fcall	___ftdiv
 13603  0A05  0020               	movlb	0	; select bank0
 13604  0A06  082E               	movf	?___ftdiv,w
 13605  0A07  00DF               	movwf	setPercentValue@i
 13606  0A08  082F               	movf	?___ftdiv+1,w
 13607  0A09  00E0               	movwf	setPercentValue@i+1
 13608  0A0A  0830               	movf	?___ftdiv+2,w
 13609  0A0B  00E1               	movwf	setPercentValue@i+2
 13610                           
 13611                           ;Dimmer_B1.c: 885: return (char) (100 - ((((char)(80*0.8)) - value) / i));
 13612  0A0C  085E               	movf	setPercentValue@value,w
 13613  0A0D  00DC               	movwf	??_setPercentValue
 13614  0A0E  01DD               	clrf	??_setPercentValue+1
 13615  0A0F  09DC               	comf	??_setPercentValue,f
 13616  0A10  09DD               	comf	??_setPercentValue+1,f
 13617  0A11  0ADC               	incf	??_setPercentValue,f
 13618  0A12  1903               	skipnz
 13619  0A13  0ADD               	incf	??_setPercentValue+1,f
 13620  0A14  085C               	movf	??_setPercentValue,w
 13621  0A15  3E40               	addlw	64
 13622  0A16  00A8               	movwf	___awtoft@c
 13623  0A17  3000               	movlw	0
 13624  0A18  3D5D               	addwfc	??_setPercentValue+1,w
 13625  0A19  00A9               	movwf	___awtoft@c+1
 13626  0A1A  319F  2728  3189   	fcall	___awtoft
 13627  0A1D  0020               	movlb	0	; select bank0
 13628  0A1E  0828               	movf	?___awtoft,w
 13629  0A1F  00B1               	movwf	___ftdiv@f1
 13630  0A20  0829               	movf	?___awtoft+1,w
 13631  0A21  00B2               	movwf	___ftdiv@f1+1
 13632  0A22  082A               	movf	?___awtoft+2,w
 13633  0A23  00B3               	movwf	___ftdiv@f1+2
 13634  0A24  085F               	movf	setPercentValue@i,w
 13635  0A25  00AE               	movwf	___ftdiv@f2
 13636  0A26  0860               	movf	setPercentValue@i+1,w
 13637  0A27  00AF               	movwf	___ftdiv@f2+1
 13638  0A28  0861               	movf	setPercentValue@i+2,w
 13639  0A29  00B0               	movwf	___ftdiv@f2+2
 13640  0A2A  318E  26A3  3189   	fcall	___ftdiv
 13641  0A2D  0020               	movlb	0	; select bank0
 13642  0A2E  082E               	movf	?___ftdiv,w
 13643  0A2F  00BE               	movwf	___ftneg@f1
 13644  0A30  082F               	movf	?___ftdiv+1,w
 13645  0A31  00BF               	movwf	___ftneg@f1+1
 13646  0A32  0830               	movf	?___ftdiv+2,w
 13647  0A33  00C0               	movwf	___ftneg@f1+2
 13648  0A34  319B  234D  3189   	fcall	___ftneg
 13649  0A37  0020               	movlb	0	; select bank0
 13650  0A38  083E               	movf	?___ftneg,w
 13651  0A39  00C4               	movwf	___ftadd@f2
 13652  0A3A  083F               	movf	?___ftneg+1,w
 13653  0A3B  00C5               	movwf	___ftadd@f2+1
 13654  0A3C  0840               	movf	?___ftneg+2,w
 13655  0A3D  00C6               	movwf	___ftadd@f2+2
 13656  0A3E  3000               	movlw	0
 13657  0A3F  00C1               	movwf	___ftadd@f1
 13658  0A40  30C8               	movlw	200
 13659  0A41  00C2               	movwf	___ftadd@f1+1
 13660  0A42  3042               	movlw	66
 13661  0A43  00C3               	movwf	___ftadd@f1+2
 13662  0A44  3184  2483  3189   	fcall	___ftadd
 13663  0A47  0020               	movlb	0	; select bank0
 13664  0A48  0841               	movf	?___ftadd,w
 13665  0A49  00CE               	movwf	___fttol@f1
 13666  0A4A  0842               	movf	?___ftadd+1,w
 13667  0A4B  00CF               	movwf	___fttol@f1+1
 13668  0A4C  0843               	movf	?___ftadd+2,w
 13669  0A4D  00D0               	movwf	___fttol@f1+2
 13670  0A4E  318C  2471         	fcall	___fttol
 13671  0A50  0020               	movlb	0	; select bank0
 13672  0A51  084E               	movf	?___fttol,w
 13673  0A52  0008               	return
 13674  0A53                     __end_of_setPercentValue:	
 13675                           
 13676                           	psect	text80
 13677  0C71                     __ptext80:	
 13678 ;; *************** function ___fttol *****************
 13679 ;; Defined at:
 13680 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 13681 ;; Parameters:    Size  Location     Type
 13682 ;;  f1              3   46[BANK0 ] float 
 13683 ;; Auto vars:     Size  Location     Type
 13684 ;;  lval            4   55[BANK0 ] unsigned long 
 13685 ;;  exp1            1   59[BANK0 ] unsigned char 
 13686 ;;  sign1           1   54[BANK0 ] unsigned char 
 13687 ;; Return value:  Size  Location     Type
 13688 ;;                  4   46[BANK0 ] long 
 13689 ;; Registers used:
 13690 ;;		wreg, status,2, status,0
 13691 ;; Tracked objects:
 13692 ;;		On entry : 0/0
 13693 ;;		On exit  : 0/0
 13694 ;;		Unchanged: 0/0
 13695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13696 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13697 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13698 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13699 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13700 ;;Total ram usage:       14 bytes
 13701 ;; Hardware stack levels used:    1
 13702 ;; Hardware stack levels required when called:    5
 13703 ;; This function calls:
 13704 ;;		Nothing
 13705 ;; This function is called by:
 13706 ;;		_getPercentValue
 13707 ;;		_setPercentValue
 13708 ;; This function uses a non-reentrant model
 13709 ;;
 13710                           
 13711                           
 13712                           ;psect for function ___fttol
 13713  0C71                     ___fttol:	
 13714                           
 13715                           ;incstack = 0
 13716                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 13717  0C71  0020               	movlb	0	; select bank0
 13718  0C72  084E               	movf	___fttol@f1,w
 13719  0C73  00D2               	movwf	??___fttol
 13720  0C74  084F               	movf	___fttol@f1+1,w
 13721  0C75  00D3               	movwf	??___fttol+1
 13722  0C76  0850               	movf	___fttol@f1+2,w
 13723  0C77  00D4               	movwf	??___fttol+2
 13724  0C78  1003               	clrc
 13725  0C79  0D53               	rlf	??___fttol+1,w
 13726  0C7A  0D54               	rlf	??___fttol+2,w
 13727  0C7B  00D5               	movwf	??___fttol+3
 13728  0C7C  0855               	movf	??___fttol+3,w
 13729  0C7D  00DB               	movwf	___fttol@exp1
 13730  0C7E  08DB               	movf	___fttol@exp1,f
 13731  0C7F  1D03               	skipz
 13732  0C80  2C8A               	goto	l6070
 13733  0C81  3000               	movlw	0
 13734  0C82  00D1               	movwf	?___fttol+3
 13735  0C83  3000               	movlw	0
 13736  0C84  00D0               	movwf	?___fttol+2
 13737  0C85  3000               	movlw	0
 13738  0C86  00CF               	movwf	?___fttol+1
 13739  0C87  3000               	movlw	0
 13740  0C88  00CE               	movwf	?___fttol
 13741  0C89  0008               	return
 13742  0C8A                     l6070:	
 13743  0C8A  084E               	movf	___fttol@f1,w
 13744  0C8B  00D2               	movwf	??___fttol
 13745  0C8C  084F               	movf	___fttol@f1+1,w
 13746  0C8D  00D3               	movwf	??___fttol+1
 13747  0C8E  0850               	movf	___fttol@f1+2,w
 13748  0C8F  00D4               	movwf	??___fttol+2
 13749  0C90  3017               	movlw	23
 13750  0C91                     u4875:	
 13751  0C91  36D4               	lsrf	??___fttol+2,f
 13752  0C92  0CD3               	rrf	??___fttol+1,f
 13753  0C93  0CD2               	rrf	??___fttol,f
 13754  0C94  0B89               	decfsz	9,f
 13755  0C95  2C91               	goto	u4875
 13756  0C96  0852               	movf	??___fttol,w
 13757  0C97  00D5               	movwf	??___fttol+3
 13758  0C98  0855               	movf	??___fttol+3,w
 13759  0C99  00D6               	movwf	___fttol@sign1
 13760  0C9A  17CF               	bsf	___fttol@f1+1,7
 13761  0C9B  30FF               	movlw	255
 13762  0C9C  05CE               	andwf	___fttol@f1,f
 13763  0C9D  30FF               	movlw	255
 13764  0C9E  05CF               	andwf	___fttol@f1+1,f
 13765  0C9F  3000               	movlw	0
 13766  0CA0  05D0               	andwf	___fttol@f1+2,f
 13767  0CA1  084E               	movf	___fttol@f1,w
 13768  0CA2  00D7               	movwf	___fttol@lval
 13769  0CA3  084F               	movf	___fttol@f1+1,w
 13770  0CA4  00D8               	movwf	___fttol@lval+1
 13771  0CA5  0850               	movf	___fttol@f1+2,w
 13772  0CA6  00D9               	movwf	___fttol@lval+2
 13773  0CA7  01DA               	clrf	___fttol@lval+3
 13774  0CA8  308E               	movlw	142
 13775  0CA9  02DB               	subwf	___fttol@exp1,f
 13776  0CAA  1FDB               	btfss	___fttol@exp1,7
 13777  0CAB  2CC8               	goto	l6090
 13778  0CAC  085B               	movf	___fttol@exp1,w
 13779  0CAD  3A80               	xorlw	128
 13780  0CAE  3E8F               	addlw	143
 13781  0CAF  1803               	skipnc
 13782  0CB0  2CBA               	goto	l6088
 13783  0CB1  3000               	movlw	0
 13784  0CB2  00D1               	movwf	?___fttol+3
 13785  0CB3  3000               	movlw	0
 13786  0CB4  00D0               	movwf	?___fttol+2
 13787  0CB5  3000               	movlw	0
 13788  0CB6  00CF               	movwf	?___fttol+1
 13789  0CB7  3000               	movlw	0
 13790  0CB8  00CE               	movwf	?___fttol
 13791  0CB9  0008               	return
 13792  0CBA                     l6088:	
 13793  0CBA  3001               	movlw	1
 13794  0CBB                     u4905:	
 13795  0CBB  36DA               	lsrf	___fttol@lval+3,f
 13796  0CBC  0CD9               	rrf	___fttol@lval+2,f
 13797  0CBD  0CD8               	rrf	___fttol@lval+1,f
 13798  0CBE  0CD7               	rrf	___fttol@lval,f
 13799  0CBF  0B89               	decfsz	9,f
 13800  0CC0  2CBB               	goto	u4905
 13801  0CC1  3001               	movlw	1
 13802  0CC2  00D2               	movwf	??___fttol
 13803  0CC3  0852               	movf	??___fttol,w
 13804  0CC4  07DB               	addwf	___fttol@exp1,f
 13805  0CC5  1903               	btfsc	3,2
 13806  0CC6  2CE1               	goto	l6100
 13807  0CC7  2CBA               	goto	l6088
 13808  0CC8                     l6090:	
 13809  0CC8  3018               	movlw	24
 13810  0CC9  025B               	subwf	___fttol@exp1,w
 13811  0CCA  1C03               	skipc
 13812  0CCB  2CDE               	goto	l6098
 13813  0CCC  3000               	movlw	0
 13814  0CCD  00D1               	movwf	?___fttol+3
 13815  0CCE  3000               	movlw	0
 13816  0CCF  00D0               	movwf	?___fttol+2
 13817  0CD0  3000               	movlw	0
 13818  0CD1  00CF               	movwf	?___fttol+1
 13819  0CD2  3000               	movlw	0
 13820  0CD3  00CE               	movwf	?___fttol
 13821  0CD4  0008               	return
 13822  0CD5                     l6096:	
 13823  0CD5  3001               	movlw	1
 13824  0CD6                     u4935:	
 13825  0CD6  35D7               	lslf	___fttol@lval,f
 13826  0CD7  0DD8               	rlf	___fttol@lval+1,f
 13827  0CD8  0DD9               	rlf	___fttol@lval+2,f
 13828  0CD9  0DDA               	rlf	___fttol@lval+3,f
 13829  0CDA  0B89               	decfsz	9,f
 13830  0CDB  2CD6               	goto	u4935
 13831  0CDC  3001               	movlw	1
 13832  0CDD  02DB               	subwf	___fttol@exp1,f
 13833  0CDE                     l6098:	
 13834  0CDE  08DB               	movf	___fttol@exp1,f
 13835  0CDF  1D03               	skipz
 13836  0CE0  2CD5               	goto	l6096
 13837  0CE1                     l6100:	
 13838  0CE1  0856               	movf	___fttol@sign1,w
 13839  0CE2  1903               	btfsc	3,2
 13840  0CE3  2CEF               	goto	l6104
 13841  0CE4  09D7               	comf	___fttol@lval,f
 13842  0CE5  09D8               	comf	___fttol@lval+1,f
 13843  0CE6  09D9               	comf	___fttol@lval+2,f
 13844  0CE7  09DA               	comf	___fttol@lval+3,f
 13845  0CE8  0AD7               	incf	___fttol@lval,f
 13846  0CE9  1903               	skipnz
 13847  0CEA  0AD8               	incf	___fttol@lval+1,f
 13848  0CEB  1903               	skipnz
 13849  0CEC  0AD9               	incf	___fttol@lval+2,f
 13850  0CED  1903               	skipnz
 13851  0CEE  0ADA               	incf	___fttol@lval+3,f
 13852  0CEF                     l6104:	
 13853  0CEF  085A               	movf	___fttol@lval+3,w
 13854  0CF0  00D1               	movwf	?___fttol+3
 13855  0CF1  0859               	movf	___fttol@lval+2,w
 13856  0CF2  00D0               	movwf	?___fttol+2
 13857  0CF3  0858               	movf	___fttol@lval+1,w
 13858  0CF4  00CF               	movwf	?___fttol+1
 13859  0CF5  0857               	movf	___fttol@lval,w
 13860  0CF6  00CE               	movwf	?___fttol
 13861  0CF7  0008               	return
 13862  0CF8                     __end_of___fttol:	
 13863                           
 13864                           	psect	text81
 13865  1B4D                     __ptext81:	
 13866 ;; *************** function ___ftneg *****************
 13867 ;; Defined at:
 13868 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 13869 ;; Parameters:    Size  Location     Type
 13870 ;;  f1              3   30[BANK0 ] float 
 13871 ;; Auto vars:     Size  Location     Type
 13872 ;;		None
 13873 ;; Return value:  Size  Location     Type
 13874 ;;                  3   30[BANK0 ] float 
 13875 ;; Registers used:
 13876 ;;		wreg
 13877 ;; Tracked objects:
 13878 ;;		On entry : 0/0
 13879 ;;		On exit  : 0/0
 13880 ;;		Unchanged: 0/0
 13881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13882 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13884 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13885 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13886 ;;Total ram usage:        3 bytes
 13887 ;; Hardware stack levels used:    1
 13888 ;; Hardware stack levels required when called:    5
 13889 ;; This function calls:
 13890 ;;		Nothing
 13891 ;; This function is called by:
 13892 ;;		_getPercentValue
 13893 ;;		_setPercentValue
 13894 ;; This function uses a non-reentrant model
 13895 ;;
 13896                           
 13897                           
 13898                           ;psect for function ___ftneg
 13899  1B4D                     ___ftneg:	
 13900                           
 13901                           ;incstack = 0
 13902                           ; Regs used in ___ftneg: [wreg]
 13903  1B4D  0020               	movlb	0	; select bank0
 13904  1B4E  0840               	movf	___ftneg@f1+2,w
 13905  1B4F  043F               	iorwf	___ftneg@f1+1,w
 13906  1B50  043E               	iorwf	___ftneg@f1,w
 13907  1B51  1903               	skipnz
 13908  1B52  0008               	return
 13909  1B53  3080               	movlw	128
 13910  1B54  06C0               	xorwf	___ftneg@f1+2,f
 13911  1B55  0008               	return
 13912  1B56                     __end_of___ftneg:	
 13913                           
 13914                           	psect	text82
 13915  0EA3                     __ptext82:	
 13916 ;; *************** function ___ftdiv *****************
 13917 ;; Defined at:
 13918 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 13919 ;; Parameters:    Size  Location     Type
 13920 ;;  f2              3   14[BANK0 ] float 
 13921 ;;  f1              3   17[BANK0 ] float 
 13922 ;; Auto vars:     Size  Location     Type
 13923 ;;  f3              3   25[BANK0 ] float 
 13924 ;;  sign            1   29[BANK0 ] unsigned char 
 13925 ;;  exp             1   28[BANK0 ] unsigned char 
 13926 ;;  cntr            1   24[BANK0 ] unsigned char 
 13927 ;; Return value:  Size  Location     Type
 13928 ;;                  3   14[BANK0 ] float 
 13929 ;; Registers used:
 13930 ;;		wreg, status,2, status,0, pclath, cstack
 13931 ;; Tracked objects:
 13932 ;;		On entry : 0/0
 13933 ;;		On exit  : 0/0
 13934 ;;		Unchanged: 0/0
 13935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13936 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13937 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13938 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13939 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13940 ;;Total ram usage:       16 bytes
 13941 ;; Hardware stack levels used:    1
 13942 ;; Hardware stack levels required when called:    6
 13943 ;; This function calls:
 13944 ;;		___ftpack
 13945 ;; This function is called by:
 13946 ;;		_getPercentValue
 13947 ;;		_setPercentValue
 13948 ;; This function uses a non-reentrant model
 13949 ;;
 13950                           
 13951                           
 13952                           ;psect for function ___ftdiv
 13953  0EA3                     ___ftdiv:	
 13954                           
 13955                           ;incstack = 0
 13956                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 13957  0EA3  0020               	movlb	0	; select bank0
 13958  0EA4  0831               	movf	___ftdiv@f1,w
 13959  0EA5  00B4               	movwf	??___ftdiv
 13960  0EA6  0832               	movf	___ftdiv@f1+1,w
 13961  0EA7  00B5               	movwf	??___ftdiv+1
 13962  0EA8  0833               	movf	___ftdiv@f1+2,w
 13963  0EA9  00B6               	movwf	??___ftdiv+2
 13964  0EAA  1003               	clrc
 13965  0EAB  0D35               	rlf	??___ftdiv+1,w
 13966  0EAC  0D36               	rlf	??___ftdiv+2,w
 13967  0EAD  00B7               	movwf	??___ftdiv+3
 13968  0EAE  0837               	movf	??___ftdiv+3,w
 13969  0EAF  00BC               	movwf	___ftdiv@exp
 13970  0EB0  08BC               	movf	___ftdiv@exp,f
 13971  0EB1  1D03               	skipz
 13972  0EB2  2EBA               	goto	l5970
 13973  0EB3  3000               	movlw	0
 13974  0EB4  00AE               	movwf	?___ftdiv
 13975  0EB5  3000               	movlw	0
 13976  0EB6  00AF               	movwf	?___ftdiv+1
 13977  0EB7  3000               	movlw	0
 13978  0EB8  00B0               	movwf	?___ftdiv+2
 13979  0EB9  0008               	return
 13980  0EBA                     l5970:	
 13981  0EBA  082E               	movf	___ftdiv@f2,w
 13982  0EBB  00B4               	movwf	??___ftdiv
 13983  0EBC  082F               	movf	___ftdiv@f2+1,w
 13984  0EBD  00B5               	movwf	??___ftdiv+1
 13985  0EBE  0830               	movf	___ftdiv@f2+2,w
 13986  0EBF  00B6               	movwf	??___ftdiv+2
 13987  0EC0  1003               	clrc
 13988  0EC1  0D35               	rlf	??___ftdiv+1,w
 13989  0EC2  0D36               	rlf	??___ftdiv+2,w
 13990  0EC3  00B7               	movwf	??___ftdiv+3
 13991  0EC4  0837               	movf	??___ftdiv+3,w
 13992  0EC5  00BD               	movwf	___ftdiv@sign
 13993  0EC6  08BD               	movf	___ftdiv@sign,f
 13994  0EC7  1D03               	skipz
 13995  0EC8  2ED0               	goto	l5976
 13996  0EC9  3000               	movlw	0
 13997  0ECA  00AE               	movwf	?___ftdiv
 13998  0ECB  3000               	movlw	0
 13999  0ECC  00AF               	movwf	?___ftdiv+1
 14000  0ECD  3000               	movlw	0
 14001  0ECE  00B0               	movwf	?___ftdiv+2
 14002  0ECF  0008               	return
 14003  0ED0                     l5976:	
 14004  0ED0  3000               	movlw	0
 14005  0ED1  00B9               	movwf	___ftdiv@f3
 14006  0ED2  3000               	movlw	0
 14007  0ED3  00BA               	movwf	___ftdiv@f3+1
 14008  0ED4  3000               	movlw	0
 14009  0ED5  00BB               	movwf	___ftdiv@f3+2
 14010  0ED6  3089               	movlw	137
 14011  0ED7  073D               	addwf	___ftdiv@sign,w
 14012  0ED8  00B4               	movwf	??___ftdiv
 14013  0ED9  0834               	movf	??___ftdiv,w
 14014  0EDA  02BC               	subwf	___ftdiv@exp,f
 14015  0EDB  0831               	movf	___ftdiv@f1,w
 14016  0EDC  00B4               	movwf	??___ftdiv
 14017  0EDD  0832               	movf	___ftdiv@f1+1,w
 14018  0EDE  00B5               	movwf	??___ftdiv+1
 14019  0EDF  0833               	movf	___ftdiv@f1+2,w
 14020  0EE0  00B6               	movwf	??___ftdiv+2
 14021  0EE1  3010               	movlw	16
 14022  0EE2                     u4675:	
 14023  0EE2  36B6               	lsrf	??___ftdiv+2,f
 14024  0EE3  0CB5               	rrf	??___ftdiv+1,f
 14025  0EE4  0CB4               	rrf	??___ftdiv,f
 14026  0EE5  0B89               	decfsz	9,f
 14027  0EE6  2EE2               	goto	u4675
 14028  0EE7  0834               	movf	??___ftdiv,w
 14029  0EE8  00B7               	movwf	??___ftdiv+3
 14030  0EE9  0837               	movf	??___ftdiv+3,w
 14031  0EEA  00BD               	movwf	___ftdiv@sign
 14032  0EEB  082E               	movf	___ftdiv@f2,w
 14033  0EEC  00B4               	movwf	??___ftdiv
 14034  0EED  082F               	movf	___ftdiv@f2+1,w
 14035  0EEE  00B5               	movwf	??___ftdiv+1
 14036  0EEF  0830               	movf	___ftdiv@f2+2,w
 14037  0EF0  00B6               	movwf	??___ftdiv+2
 14038  0EF1  3010               	movlw	16
 14039  0EF2                     u4685:	
 14040  0EF2  36B6               	lsrf	??___ftdiv+2,f
 14041  0EF3  0CB5               	rrf	??___ftdiv+1,f
 14042  0EF4  0CB4               	rrf	??___ftdiv,f
 14043  0EF5  0B89               	decfsz	9,f
 14044  0EF6  2EF2               	goto	u4685
 14045  0EF7  0834               	movf	??___ftdiv,w
 14046  0EF8  00B7               	movwf	??___ftdiv+3
 14047  0EF9  0837               	movf	??___ftdiv+3,w
 14048  0EFA  06BD               	xorwf	___ftdiv@sign,f
 14049  0EFB  3080               	movlw	128
 14050  0EFC  00B4               	movwf	??___ftdiv
 14051  0EFD  0834               	movf	??___ftdiv,w
 14052  0EFE  05BD               	andwf	___ftdiv@sign,f
 14053  0EFF  17B2               	bsf	___ftdiv@f1+1,7
 14054  0F00  30FF               	movlw	255
 14055  0F01  05B1               	andwf	___ftdiv@f1,f
 14056  0F02  30FF               	movlw	255
 14057  0F03  05B2               	andwf	___ftdiv@f1+1,f
 14058  0F04  3000               	movlw	0
 14059  0F05  05B3               	andwf	___ftdiv@f1+2,f
 14060  0F06  17AF               	bsf	___ftdiv@f2+1,7
 14061  0F07  30FF               	movlw	255
 14062  0F08  05AE               	andwf	___ftdiv@f2,f
 14063  0F09  30FF               	movlw	255
 14064  0F0A  05AF               	andwf	___ftdiv@f2+1,f
 14065  0F0B  3000               	movlw	0
 14066  0F0C  05B0               	andwf	___ftdiv@f2+2,f
 14067  0F0D  3018               	movlw	24
 14068  0F0E  00B4               	movwf	??___ftdiv
 14069  0F0F  0834               	movf	??___ftdiv,w
 14070  0F10  00B8               	movwf	___ftdiv@cntr
 14071  0F11                     l5990:	
 14072  0F11  3001               	movlw	1
 14073  0F12                     u4695:	
 14074  0F12  35B9               	lslf	___ftdiv@f3,f
 14075  0F13  0DBA               	rlf	___ftdiv@f3+1,f
 14076  0F14  0DBB               	rlf	___ftdiv@f3+2,f
 14077  0F15  0B89               	decfsz	9,f
 14078  0F16  2F12               	goto	u4695
 14079  0F17  0830               	movf	___ftdiv@f2+2,w
 14080  0F18  0233               	subwf	___ftdiv@f1+2,w
 14081  0F19  1D03               	skipz
 14082  0F1A  2F21               	goto	u4705
 14083  0F1B  082F               	movf	___ftdiv@f2+1,w
 14084  0F1C  0232               	subwf	___ftdiv@f1+1,w
 14085  0F1D  1D03               	skipz
 14086  0F1E  2F21               	goto	u4705
 14087  0F1F  082E               	movf	___ftdiv@f2,w
 14088  0F20  0231               	subwf	___ftdiv@f1,w
 14089  0F21                     u4705:	
 14090  0F21  1C03               	skipc
 14091  0F22  2F2A               	goto	l5998
 14092  0F23  082E               	movf	___ftdiv@f2,w
 14093  0F24  02B1               	subwf	___ftdiv@f1,f
 14094  0F25  082F               	movf	___ftdiv@f2+1,w
 14095  0F26  3BB2               	subwfb	___ftdiv@f1+1,f
 14096  0F27  0830               	movf	___ftdiv@f2+2,w
 14097  0F28  3BB3               	subwfb	___ftdiv@f1+2,f
 14098  0F29  1439               	bsf	___ftdiv@f3,0
 14099  0F2A                     l5998:	
 14100  0F2A  3001               	movlw	1
 14101  0F2B                     u4715:	
 14102  0F2B  35B1               	lslf	___ftdiv@f1,f
 14103  0F2C  0DB2               	rlf	___ftdiv@f1+1,f
 14104  0F2D  0DB3               	rlf	___ftdiv@f1+2,f
 14105  0F2E  0B89               	decfsz	9,f
 14106  0F2F  2F2B               	goto	u4715
 14107  0F30  3001               	movlw	1
 14108  0F31  02B8               	subwf	___ftdiv@cntr,f
 14109  0F32  1D03               	btfss	3,2
 14110  0F33  2F11               	goto	l5990
 14111  0F34  0839               	movf	___ftdiv@f3,w
 14112  0F35  00A0               	movwf	___ftpack@arg
 14113  0F36  083A               	movf	___ftdiv@f3+1,w
 14114  0F37  00A1               	movwf	___ftpack@arg+1
 14115  0F38  083B               	movf	___ftdiv@f3+2,w
 14116  0F39  00A2               	movwf	___ftpack@arg+2
 14117  0F3A  083C               	movf	___ftdiv@exp,w
 14118  0F3B  00B4               	movwf	??___ftdiv
 14119  0F3C  0834               	movf	??___ftdiv,w
 14120  0F3D  00A3               	movwf	___ftpack@exp
 14121  0F3E  083D               	movf	___ftdiv@sign,w
 14122  0F3F  00B5               	movwf	??___ftdiv+1
 14123  0F40  0835               	movf	??___ftdiv+1,w
 14124  0F41  00A4               	movwf	___ftpack@sign
 14125  0F42  3189  212C         	fcall	___ftpack
 14126  0F44  0020               	movlb	0	; select bank0
 14127  0F45  0820               	movf	?___ftpack,w
 14128  0F46  00AE               	movwf	?___ftdiv
 14129  0F47  0821               	movf	?___ftpack+1,w
 14130  0F48  00AF               	movwf	?___ftdiv+1
 14131  0F49  0822               	movf	?___ftpack+2,w
 14132  0F4A  00B0               	movwf	?___ftdiv+2
 14133  0F4B  0008               	return
 14134  0F4C                     __end_of___ftdiv:	
 14135                           
 14136                           	psect	text83
 14137  0483                     __ptext83:	
 14138 ;; *************** function ___ftadd *****************
 14139 ;; Defined at:
 14140 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 14141 ;; Parameters:    Size  Location     Type
 14142 ;;  f1              3   33[BANK0 ] float 
 14143 ;;  f2              3   36[BANK0 ] float 
 14144 ;; Auto vars:     Size  Location     Type
 14145 ;;  exp1            1   45[BANK0 ] unsigned char 
 14146 ;;  exp2            1   44[BANK0 ] unsigned char 
 14147 ;;  sign            1   43[BANK0 ] unsigned char 
 14148 ;; Return value:  Size  Location     Type
 14149 ;;                  3   33[BANK0 ] float 
 14150 ;; Registers used:
 14151 ;;		wreg, status,2, status,0, pclath, cstack
 14152 ;; Tracked objects:
 14153 ;;		On entry : 0/0
 14154 ;;		On exit  : 0/0
 14155 ;;		Unchanged: 0/0
 14156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14157 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14158 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14159 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14160 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14161 ;;Total ram usage:       13 bytes
 14162 ;; Hardware stack levels used:    1
 14163 ;; Hardware stack levels required when called:    6
 14164 ;; This function calls:
 14165 ;;		___ftpack
 14166 ;; This function is called by:
 14167 ;;		_getPercentValue
 14168 ;;		_setPercentValue
 14169 ;; This function uses a non-reentrant model
 14170 ;;
 14171                           
 14172                           
 14173                           ;psect for function ___ftadd
 14174  0483                     ___ftadd:	
 14175                           
 14176                           ;incstack = 0
 14177                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 14178  0483  0020               	movlb	0	; select bank0
 14179  0484  0841               	movf	___ftadd@f1,w
 14180  0485  00C7               	movwf	??___ftadd
 14181  0486  0842               	movf	___ftadd@f1+1,w
 14182  0487  00C8               	movwf	??___ftadd+1
 14183  0488  0843               	movf	___ftadd@f1+2,w
 14184  0489  00C9               	movwf	??___ftadd+2
 14185  048A  1003               	clrc
 14186  048B  0D48               	rlf	??___ftadd+1,w
 14187  048C  0D49               	rlf	??___ftadd+2,w
 14188  048D  00CA               	movwf	??___ftadd+3
 14189  048E  084A               	movf	??___ftadd+3,w
 14190  048F  00CD               	movwf	___ftadd@exp1
 14191  0490  0844               	movf	___ftadd@f2,w
 14192  0491  00C7               	movwf	??___ftadd
 14193  0492  0845               	movf	___ftadd@f2+1,w
 14194  0493  00C8               	movwf	??___ftadd+1
 14195  0494  0846               	movf	___ftadd@f2+2,w
 14196  0495  00C9               	movwf	??___ftadd+2
 14197  0496  1003               	clrc
 14198  0497  0D48               	rlf	??___ftadd+1,w
 14199  0498  0D49               	rlf	??___ftadd+2,w
 14200  0499  00CA               	movwf	??___ftadd+3
 14201  049A  084A               	movf	??___ftadd+3,w
 14202  049B  00CC               	movwf	___ftadd@exp2
 14203  049C  084D               	movf	___ftadd@exp1,w
 14204  049D  1903               	btfsc	3,2
 14205  049E  2CAB               	goto	l5900
 14206  049F  084C               	movf	___ftadd@exp2,w
 14207  04A0  024D               	subwf	___ftadd@exp1,w
 14208  04A1  1803               	skipnc
 14209  04A2  2CB2               	goto	l5904
 14210  04A3  034D               	decf	___ftadd@exp1,w
 14211  04A4  3AFF               	xorlw	255
 14212  04A5  074C               	addwf	___ftadd@exp2,w
 14213  04A6  00C7               	movwf	??___ftadd
 14214  04A7  3019               	movlw	25
 14215  04A8  0247               	subwf	??___ftadd,w
 14216  04A9  1C03               	skipc
 14217  04AA  2CB2               	goto	l5904
 14218  04AB                     l5900:	
 14219  04AB  0844               	movf	___ftadd@f2,w
 14220  04AC  00C1               	movwf	?___ftadd
 14221  04AD  0845               	movf	___ftadd@f2+1,w
 14222  04AE  00C2               	movwf	?___ftadd+1
 14223  04AF  0846               	movf	___ftadd@f2+2,w
 14224  04B0  00C3               	movwf	?___ftadd+2
 14225  04B1  0008               	return
 14226  04B2                     l5904:	
 14227  04B2  084C               	movf	___ftadd@exp2,w
 14228  04B3  1903               	btfsc	3,2
 14229  04B4  0008               	return
 14230  04B5  084D               	movf	___ftadd@exp1,w
 14231  04B6  024C               	subwf	___ftadd@exp2,w
 14232  04B7  1803               	skipnc
 14233  04B8  2CC1               	goto	l5910
 14234  04B9  034C               	decf	___ftadd@exp2,w
 14235  04BA  3AFF               	xorlw	255
 14236  04BB  074D               	addwf	___ftadd@exp1,w
 14237  04BC  00C7               	movwf	??___ftadd
 14238  04BD  3019               	movlw	25
 14239  04BE  0247               	subwf	??___ftadd,w
 14240  04BF  1803               	btfsc	3,0
 14241  04C0  0008               	return
 14242  04C1                     l5910:	
 14243  04C1  3006               	movlw	6
 14244  04C2  00C7               	movwf	??___ftadd
 14245  04C3  0847               	movf	??___ftadd,w
 14246  04C4  00CB               	movwf	___ftadd@sign
 14247  04C5  1BC3               	btfsc	___ftadd@f1+2,7
 14248  04C6  17CB               	bsf	___ftadd@sign,7
 14249  04C7  1BC6               	btfsc	___ftadd@f2+2,7
 14250  04C8  174B               	bsf	___ftadd@sign,6
 14251  04C9  17C2               	bsf	___ftadd@f1+1,7
 14252  04CA  30FF               	movlw	255
 14253  04CB  05C1               	andwf	___ftadd@f1,f
 14254  04CC  30FF               	movlw	255
 14255  04CD  05C2               	andwf	___ftadd@f1+1,f
 14256  04CE  3000               	movlw	0
 14257  04CF  05C3               	andwf	___ftadd@f1+2,f
 14258  04D0  17C5               	bsf	___ftadd@f2+1,7
 14259  04D1  30FF               	movlw	255
 14260  04D2  05C4               	andwf	___ftadd@f2,f
 14261  04D3  30FF               	movlw	255
 14262  04D4  05C5               	andwf	___ftadd@f2+1,f
 14263  04D5  3000               	movlw	0
 14264  04D6  05C6               	andwf	___ftadd@f2+2,f
 14265  04D7  084C               	movf	___ftadd@exp2,w
 14266  04D8  024D               	subwf	___ftadd@exp1,w
 14267  04D9  1803               	skipnc
 14268  04DA  2CFD               	goto	l5932
 14269  04DB                     l5922:	
 14270  04DB  3001               	movlw	1
 14271  04DC                     u4515:	
 14272  04DC  35C4               	lslf	___ftadd@f2,f
 14273  04DD  0DC5               	rlf	___ftadd@f2+1,f
 14274  04DE  0DC6               	rlf	___ftadd@f2+2,f
 14275  04DF  0B89               	decfsz	9,f
 14276  04E0  2CDC               	goto	u4515
 14277  04E1  3001               	movlw	1
 14278  04E2  02CC               	subwf	___ftadd@exp2,f
 14279  04E3  084C               	movf	___ftadd@exp2,w
 14280  04E4  064D               	xorwf	___ftadd@exp1,w
 14281  04E5  1903               	skipnz
 14282  04E6  2CF8               	goto	l5930
 14283  04E7  3001               	movlw	1
 14284  04E8  02CB               	subwf	___ftadd@sign,f
 14285  04E9  084B               	movf	___ftadd@sign,w
 14286  04EA  3907               	andlw	7
 14287  04EB  1903               	btfsc	3,2
 14288  04EC  2CF8               	goto	l5930
 14289  04ED  2CDB               	goto	l5922
 14290  04EE                     l5928:	
 14291  04EE  3001               	movlw	1
 14292  04EF                     u4545:	
 14293  04EF  36C3               	lsrf	___ftadd@f1+2,f
 14294  04F0  0CC2               	rrf	___ftadd@f1+1,f
 14295  04F1  0CC1               	rrf	___ftadd@f1,f
 14296  04F2  0B89               	decfsz	9,f
 14297  04F3  2CEF               	goto	u4545
 14298  04F4  3001               	movlw	1
 14299  04F5  00C7               	movwf	??___ftadd
 14300  04F6  0847               	movf	??___ftadd,w
 14301  04F7  07CD               	addwf	___ftadd@exp1,f
 14302  04F8                     l5930:	
 14303  04F8  084D               	movf	___ftadd@exp1,w
 14304  04F9  064C               	xorwf	___ftadd@exp2,w
 14305  04FA  1903               	btfsc	3,2
 14306  04FB  2D22               	goto	l3015
 14307  04FC  2CEE               	goto	l5928
 14308  04FD                     l5932:	
 14309  04FD  084D               	movf	___ftadd@exp1,w
 14310  04FE  024C               	subwf	___ftadd@exp2,w
 14311  04FF  1803               	skipnc
 14312  0500  2D22               	goto	l3015
 14313  0501                     l5934:	
 14314  0501  3001               	movlw	1
 14315  0502                     u4575:	
 14316  0502  35C1               	lslf	___ftadd@f1,f
 14317  0503  0DC2               	rlf	___ftadd@f1+1,f
 14318  0504  0DC3               	rlf	___ftadd@f1+2,f
 14319  0505  0B89               	decfsz	9,f
 14320  0506  2D02               	goto	u4575
 14321  0507  3001               	movlw	1
 14322  0508  02CD               	subwf	___ftadd@exp1,f
 14323  0509  084C               	movf	___ftadd@exp2,w
 14324  050A  064D               	xorwf	___ftadd@exp1,w
 14325  050B  1903               	skipnz
 14326  050C  2D1E               	goto	l5942
 14327  050D  3001               	movlw	1
 14328  050E  02CB               	subwf	___ftadd@sign,f
 14329  050F  084B               	movf	___ftadd@sign,w
 14330  0510  3907               	andlw	7
 14331  0511  1903               	btfsc	3,2
 14332  0512  2D1E               	goto	l5942
 14333  0513  2D01               	goto	l5934
 14334  0514                     l5940:	
 14335  0514  3001               	movlw	1
 14336  0515                     u4605:	
 14337  0515  36C6               	lsrf	___ftadd@f2+2,f
 14338  0516  0CC5               	rrf	___ftadd@f2+1,f
 14339  0517  0CC4               	rrf	___ftadd@f2,f
 14340  0518  0B89               	decfsz	9,f
 14341  0519  2D15               	goto	u4605
 14342  051A  3001               	movlw	1
 14343  051B  00C7               	movwf	??___ftadd
 14344  051C  0847               	movf	??___ftadd,w
 14345  051D  07CC               	addwf	___ftadd@exp2,f
 14346  051E                     l5942:	
 14347  051E  084D               	movf	___ftadd@exp1,w
 14348  051F  064C               	xorwf	___ftadd@exp2,w
 14349  0520  1D03               	skipz
 14350  0521  2D14               	goto	l5940
 14351  0522                     l3015:	
 14352  0522  1FCB               	btfss	___ftadd@sign,7
 14353  0523  2D34               	goto	l5946
 14354  0524  30FF               	movlw	255
 14355  0525  06C1               	xorwf	___ftadd@f1,f
 14356  0526  30FF               	movlw	255
 14357  0527  06C2               	xorwf	___ftadd@f1+1,f
 14358  0528  30FF               	movlw	255
 14359  0529  06C3               	xorwf	___ftadd@f1+2,f
 14360  052A  3001               	movlw	1
 14361  052B  07C1               	addwf	___ftadd@f1,f
 14362  052C  3000               	movlw	0
 14363  052D  1803               	skipnc
 14364  052E  3001               	movlw	1
 14365  052F  07C2               	addwf	___ftadd@f1+1,f
 14366  0530  3000               	movlw	0
 14367  0531  1803               	skipnc
 14368  0532  3001               	movlw	1
 14369  0533  07C3               	addwf	___ftadd@f1+2,f
 14370  0534                     l5946:	
 14371  0534  1F4B               	btfss	___ftadd@sign,6
 14372  0535  2D46               	goto	l5950
 14373  0536  30FF               	movlw	255
 14374  0537  06C4               	xorwf	___ftadd@f2,f
 14375  0538  30FF               	movlw	255
 14376  0539  06C5               	xorwf	___ftadd@f2+1,f
 14377  053A  30FF               	movlw	255
 14378  053B  06C6               	xorwf	___ftadd@f2+2,f
 14379  053C  3001               	movlw	1
 14380  053D  07C4               	addwf	___ftadd@f2,f
 14381  053E  3000               	movlw	0
 14382  053F  1803               	skipnc
 14383  0540  3001               	movlw	1
 14384  0541  07C5               	addwf	___ftadd@f2+1,f
 14385  0542  3000               	movlw	0
 14386  0543  1803               	skipnc
 14387  0544  3001               	movlw	1
 14388  0545  07C6               	addwf	___ftadd@f2+2,f
 14389  0546                     l5950:	
 14390  0546  01CB               	clrf	___ftadd@sign
 14391  0547  0841               	movf	___ftadd@f1,w
 14392  0548  07C4               	addwf	___ftadd@f2,f
 14393  0549  0842               	movf	___ftadd@f1+1,w
 14394  054A  3DC5               	addwfc	___ftadd@f2+1,f
 14395  054B  0843               	movf	___ftadd@f1+2,w
 14396  054C  3DC6               	addwfc	___ftadd@f2+2,f
 14397  054D  1FC6               	btfss	___ftadd@f2+2,7
 14398  054E  2D61               	goto	l5960
 14399  054F  30FF               	movlw	255
 14400  0550  06C4               	xorwf	___ftadd@f2,f
 14401  0551  30FF               	movlw	255
 14402  0552  06C5               	xorwf	___ftadd@f2+1,f
 14403  0553  30FF               	movlw	255
 14404  0554  06C6               	xorwf	___ftadd@f2+2,f
 14405  0555  3001               	movlw	1
 14406  0556  07C4               	addwf	___ftadd@f2,f
 14407  0557  3000               	movlw	0
 14408  0558  1803               	skipnc
 14409  0559  3001               	movlw	1
 14410  055A  07C5               	addwf	___ftadd@f2+1,f
 14411  055B  3000               	movlw	0
 14412  055C  1803               	skipnc
 14413  055D  3001               	movlw	1
 14414  055E  07C6               	addwf	___ftadd@f2+2,f
 14415  055F  01CB               	clrf	___ftadd@sign
 14416  0560  0ACB               	incf	___ftadd@sign,f
 14417  0561                     l5960:	
 14418  0561  0844               	movf	___ftadd@f2,w
 14419  0562  00A0               	movwf	___ftpack@arg
 14420  0563  0845               	movf	___ftadd@f2+1,w
 14421  0564  00A1               	movwf	___ftpack@arg+1
 14422  0565  0846               	movf	___ftadd@f2+2,w
 14423  0566  00A2               	movwf	___ftpack@arg+2
 14424  0567  084D               	movf	___ftadd@exp1,w
 14425  0568  00C7               	movwf	??___ftadd
 14426  0569  0847               	movf	??___ftadd,w
 14427  056A  00A3               	movwf	___ftpack@exp
 14428  056B  084B               	movf	___ftadd@sign,w
 14429  056C  00C8               	movwf	??___ftadd+1
 14430  056D  0848               	movf	??___ftadd+1,w
 14431  056E  00A4               	movwf	___ftpack@sign
 14432  056F  3189  212C         	fcall	___ftpack
 14433  0571  0020               	movlb	0	; select bank0
 14434  0572  0820               	movf	?___ftpack,w
 14435  0573  00C1               	movwf	?___ftadd
 14436  0574  0821               	movf	?___ftpack+1,w
 14437  0575  00C2               	movwf	?___ftadd+1
 14438  0576  0822               	movf	?___ftpack+2,w
 14439  0577  00C3               	movwf	?___ftadd+2
 14440  0578  0008               	return
 14441  0579                     __end_of___ftadd:	
 14442                           
 14443                           	psect	text84
 14444  1F28                     __ptext84:	
 14445 ;; *************** function ___awtoft *****************
 14446 ;; Defined at:
 14447 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 14448 ;; Parameters:    Size  Location     Type
 14449 ;;  c               2    8[BANK0 ] int 
 14450 ;; Auto vars:     Size  Location     Type
 14451 ;;  sign            1   13[BANK0 ] unsigned char 
 14452 ;; Return value:  Size  Location     Type
 14453 ;;                  3    8[BANK0 ] float 
 14454 ;; Registers used:
 14455 ;;		wreg, status,2, status,0, pclath, cstack
 14456 ;; Tracked objects:
 14457 ;;		On entry : 0/0
 14458 ;;		On exit  : 0/0
 14459 ;;		Unchanged: 0/0
 14460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14461 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14462 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14463 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14464 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14465 ;;Total ram usage:        6 bytes
 14466 ;; Hardware stack levels used:    1
 14467 ;; Hardware stack levels required when called:    6
 14468 ;; This function calls:
 14469 ;;		___ftpack
 14470 ;; This function is called by:
 14471 ;;		_getPercentValue
 14472 ;;		_setPercentValue
 14473 ;; This function uses a non-reentrant model
 14474 ;;
 14475                           
 14476                           
 14477                           ;psect for function ___awtoft
 14478  1F28                     ___awtoft:	
 14479                           
 14480                           ;incstack = 0
 14481                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 14482  1F28  0020               	movlb	0	; select bank0
 14483  1F29  01AD               	clrf	___awtoft@sign
 14484  1F2A  1FA9               	btfss	___awtoft@c+1,7
 14485  1F2B  2F33               	goto	l5888
 14486  1F2C  09A8               	comf	___awtoft@c,f
 14487  1F2D  09A9               	comf	___awtoft@c+1,f
 14488  1F2E  0AA8               	incf	___awtoft@c,f
 14489  1F2F  1903               	skipnz
 14490  1F30  0AA9               	incf	___awtoft@c+1,f
 14491  1F31  01AD               	clrf	___awtoft@sign
 14492  1F32  0AAD               	incf	___awtoft@sign,f
 14493  1F33                     l5888:	
 14494  1F33  0828               	movf	___awtoft@c,w
 14495  1F34  00A0               	movwf	___ftpack@arg
 14496  1F35  0829               	movf	___awtoft@c+1,w
 14497  1F36  00A1               	movwf	___ftpack@arg+1
 14498  1F37  01A2               	clrf	___ftpack@arg+2
 14499  1F38  308E               	movlw	142
 14500  1F39  00AB               	movwf	??___awtoft
 14501  1F3A  082B               	movf	??___awtoft,w
 14502  1F3B  00A3               	movwf	___ftpack@exp
 14503  1F3C  082D               	movf	___awtoft@sign,w
 14504  1F3D  00AC               	movwf	??___awtoft+1
 14505  1F3E  082C               	movf	??___awtoft+1,w
 14506  1F3F  00A4               	movwf	___ftpack@sign
 14507  1F40  3189  212C         	fcall	___ftpack
 14508  1F42  0020               	movlb	0	; select bank0
 14509  1F43  0820               	movf	?___ftpack,w
 14510  1F44  00A8               	movwf	?___awtoft
 14511  1F45  0821               	movf	?___ftpack+1,w
 14512  1F46  00A9               	movwf	?___awtoft+1
 14513  1F47  0822               	movf	?___ftpack+2,w
 14514  1F48  00AA               	movwf	?___awtoft+2
 14515  1F49  0008               	return
 14516  1F4A                     __end_of___awtoft:	
 14517                           
 14518                           	psect	text85
 14519  092C                     __ptext85:	
 14520 ;; *************** function ___ftpack *****************
 14521 ;; Defined at:
 14522 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 14523 ;; Parameters:    Size  Location     Type
 14524 ;;  arg             3    0[BANK0 ] unsigned um
 14525 ;;  exp             1    3[BANK0 ] unsigned char 
 14526 ;;  sign            1    4[BANK0 ] unsigned char 
 14527 ;; Auto vars:     Size  Location     Type
 14528 ;;		None
 14529 ;; Return value:  Size  Location     Type
 14530 ;;                  3    0[BANK0 ] float 
 14531 ;; Registers used:
 14532 ;;		wreg, status,2, status,0
 14533 ;; Tracked objects:
 14534 ;;		On entry : 0/0
 14535 ;;		On exit  : 0/0
 14536 ;;		Unchanged: 0/0
 14537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14538 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14540 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14541 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14542 ;;Total ram usage:        8 bytes
 14543 ;; Hardware stack levels used:    1
 14544 ;; Hardware stack levels required when called:    5
 14545 ;; This function calls:
 14546 ;;		Nothing
 14547 ;; This function is called by:
 14548 ;;		___awtoft
 14549 ;;		___ftadd
 14550 ;;		___ftdiv
 14551 ;;		___ftmul
 14552 ;; This function uses a non-reentrant model
 14553 ;;
 14554                           
 14555                           
 14556                           ;psect for function ___ftpack
 14557  092C                     ___ftpack:	
 14558                           
 14559                           ;incstack = 0
 14560                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 14561  092C  0020               	movlb	0	; select bank0
 14562  092D  0823               	movf	___ftpack@exp,w
 14563  092E  1903               	btfsc	3,2
 14564  092F  2935               	goto	l5838
 14565  0930  0822               	movf	___ftpack@arg+2,w
 14566  0931  0421               	iorwf	___ftpack@arg+1,w
 14567  0932  0420               	iorwf	___ftpack@arg,w
 14568  0933  1D03               	skipz
 14569  0934  2946               	goto	l5844
 14570  0935                     l5838:	
 14571  0935  3000               	movlw	0
 14572  0936  00A0               	movwf	?___ftpack
 14573  0937  3000               	movlw	0
 14574  0938  00A1               	movwf	?___ftpack+1
 14575  0939  3000               	movlw	0
 14576  093A  00A2               	movwf	?___ftpack+2
 14577  093B  0008               	return
 14578  093C                     l5842:	
 14579  093C  3001               	movlw	1
 14580  093D  00A5               	movwf	??___ftpack
 14581  093E  0825               	movf	??___ftpack,w
 14582  093F  07A3               	addwf	___ftpack@exp,f
 14583  0940  3001               	movlw	1
 14584  0941                     u4305:	
 14585  0941  36A2               	lsrf	___ftpack@arg+2,f
 14586  0942  0CA1               	rrf	___ftpack@arg+1,f
 14587  0943  0CA0               	rrf	___ftpack@arg,f
 14588  0944  0B89               	decfsz	9,f
 14589  0945  2941               	goto	u4305
 14590  0946                     l5844:	
 14591  0946  30FE               	movlw	254
 14592  0947  0522               	andwf	___ftpack@arg+2,w
 14593  0948  1903               	btfsc	3,2
 14594  0949  295F               	goto	l2986
 14595  094A  293C               	goto	l5842
 14596  094B                     l5846:	
 14597  094B  3001               	movlw	1
 14598  094C  00A5               	movwf	??___ftpack
 14599  094D  0825               	movf	??___ftpack,w
 14600  094E  07A3               	addwf	___ftpack@exp,f
 14601  094F  3001               	movlw	1
 14602  0950  07A0               	addwf	___ftpack@arg,f
 14603  0951  3000               	movlw	0
 14604  0952  1803               	skipnc
 14605  0953  3001               	movlw	1
 14606  0954  07A1               	addwf	___ftpack@arg+1,f
 14607  0955  3000               	movlw	0
 14608  0956  1803               	skipnc
 14609  0957  3001               	movlw	1
 14610  0958  07A2               	addwf	___ftpack@arg+2,f
 14611  0959  3001               	movlw	1
 14612  095A                     u4325:	
 14613  095A  36A2               	lsrf	___ftpack@arg+2,f
 14614  095B  0CA1               	rrf	___ftpack@arg+1,f
 14615  095C  0CA0               	rrf	___ftpack@arg,f
 14616  095D  0B89               	decfsz	9,f
 14617  095E  295A               	goto	u4325
 14618  095F                     l2986:	
 14619  095F  30FF               	movlw	255
 14620  0960  0522               	andwf	___ftpack@arg+2,w
 14621  0961  1903               	btfsc	3,2
 14622  0962  296C               	goto	l5854
 14623  0963  294B               	goto	l5846
 14624  0964                     l5852:	
 14625  0964  3001               	movlw	1
 14626  0965  02A3               	subwf	___ftpack@exp,f
 14627  0966  3001               	movlw	1
 14628  0967                     u4345:	
 14629  0967  35A0               	lslf	___ftpack@arg,f
 14630  0968  0DA1               	rlf	___ftpack@arg+1,f
 14631  0969  0DA2               	rlf	___ftpack@arg+2,f
 14632  096A  0B89               	decfsz	9,f
 14633  096B  2967               	goto	u4345
 14634  096C                     l5854:	
 14635  096C  1FA1               	btfss	___ftpack@arg+1,7
 14636  096D  2964               	goto	l5852
 14637  096E  1823               	btfsc	___ftpack@exp,0
 14638  096F  2976               	goto	l2992
 14639  0970  30FF               	movlw	255
 14640  0971  05A0               	andwf	___ftpack@arg,f
 14641  0972  307F               	movlw	127
 14642  0973  05A1               	andwf	___ftpack@arg+1,f
 14643  0974  30FF               	movlw	255
 14644  0975  05A2               	andwf	___ftpack@arg+2,f
 14645  0976                     l2992:	
 14646  0976  1003               	clrc
 14647  0977  0CA3               	rrf	___ftpack@exp,f
 14648  0978  0823               	movf	___ftpack@exp,w
 14649  0979  00A5               	movwf	??___ftpack
 14650  097A  01A6               	clrf	??___ftpack+1
 14651  097B  01A7               	clrf	??___ftpack+2
 14652  097C  3010               	movlw	16
 14653  097D                     u4375:	
 14654  097D  35A5               	lslf	??___ftpack,f
 14655  097E  0DA6               	rlf	??___ftpack+1,f
 14656  097F  0DA7               	rlf	??___ftpack+2,f
 14657  0980  0B89               	decfsz	9,f
 14658  0981  297D               	goto	u4375
 14659  0982  0825               	movf	??___ftpack,w
 14660  0983  04A0               	iorwf	___ftpack@arg,f
 14661  0984  0826               	movf	??___ftpack+1,w
 14662  0985  04A1               	iorwf	___ftpack@arg+1,f
 14663  0986  0827               	movf	??___ftpack+2,w
 14664  0987  04A2               	iorwf	___ftpack@arg+2,f
 14665  0988  0824               	movf	___ftpack@sign,w
 14666  0989  1903               	btfsc	3,2
 14667  098A  0008               	return
 14668  098B  17A2               	bsf	___ftpack@arg+2,7
 14669  098C  0008               	return
 14670  098D                     __end_of___ftpack:	
 14671                           
 14672                           	psect	text86
 14673  159C                     __ptext86:	
 14674 ;; *************** function _setLED *****************
 14675 ;; Defined at:
 14676 ;;		line 76 in file "../src/LED_B1.c"
 14677 ;; Parameters:    Size  Location     Type
 14678 ;;  led             1    wreg     unsigned char 
 14679 ;;  command         1    2[BANK0 ] unsigned char 
 14680 ;; Auto vars:     Size  Location     Type
 14681 ;;  led             1    3[BANK0 ] unsigned char 
 14682 ;; Return value:  Size  Location     Type
 14683 ;;		None               void
 14684 ;; Registers used:
 14685 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14686 ;; Tracked objects:
 14687 ;;		On entry : 0/0
 14688 ;;		On exit  : 0/0
 14689 ;;		Unchanged: 0/0
 14690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14691 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14692 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14693 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14694 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14695 ;;Total ram usage:        2 bytes
 14696 ;; Hardware stack levels used:    1
 14697 ;; Hardware stack levels required when called:    6
 14698 ;; This function calls:
 14699 ;;		_LedPointSelect
 14700 ;; This function is called by:
 14701 ;;		_setDimmerLights
 14702 ;;		_setLED_Initialization
 14703 ;;		_setSw_Initialization
 14704 ;;		_setMain_Exception
 14705 ;; This function uses a non-reentrant model
 14706 ;;
 14707                           
 14708                           
 14709                           ;psect for function _setLED
 14710  159C                     _setLED:	
 14711                           
 14712                           ;incstack = 0
 14713                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14714                           ;setLED@led stored from wreg
 14715  159C  0020               	movlb	0	; select bank0
 14716  159D  00A3               	movwf	setLED@led
 14717                           
 14718                           ;LED_B1.c: 77: LedPointSelect(led);
 14719  159E  0823               	movf	setLED@led,w
 14720  159F  319E  2632  3195   	fcall	_LedPointSelect
 14721                           
 14722                           ;LED_B1.c: 78: if (command == 0) {
 14723  15A2  0020               	movlb	0	; select bank0
 14724  15A3  08A2               	movf	setLED@command,f
 14725  15A4  1D03               	skipz
 14726  15A5  2DB3               	goto	l6606
 14727                           
 14728                           ;LED_B1.c: 80: if (led == 1) {
 14729  15A6  0823               	movf	setLED@led,w
 14730  15A7  3A01               	xorlw	1
 14731  15A8  1D03               	skipz
 14732  15A9  2DAB               	goto	l6598
 14733                           
 14734                           ;LED_B1.c: 84: RA3 = 1;
 14735  15AA  158C               	bsf	12,3	;volatile
 14736  15AB                     l6598:	
 14737                           
 14738                           ;LED_B1.c: 86: }
 14739                           ;LED_B1.c: 89: if (led == 2) {
 14740  15AB  0823               	movf	setLED@led,w
 14741  15AC  3A02               	xorlw	2
 14742  15AD  1903               	btfsc	3,2
 14743                           
 14744                           ;LED_B1.c: 93: RC7 = 1;
 14745  15AE  178E               	bsf	14,7	;volatile
 14746                           
 14747                           ;LED_B1.c: 95: }
 14748                           ;LED_B1.c: 107: if (led == 99) {
 14749  15AF  0823               	movf	setLED@led,w
 14750  15B0  3A63               	xorlw	99
 14751  15B1  1903               	btfsc	3,2
 14752                           
 14753                           ;LED_B1.c: 111: RB5 = 1;
 14754  15B2  168D               	bsf	13,5	;volatile
 14755  15B3                     l6606:	
 14756                           
 14757                           ;LED_B1.c: 113: }
 14758                           ;LED_B1.c: 115: }
 14759                           ;LED_B1.c: 116: if (command == 1) {
 14760  15B3  0822               	movf	setLED@command,w
 14761  15B4  3A01               	xorlw	1
 14762  15B5  1D03               	skipz
 14763  15B6  2DC4               	goto	l6620
 14764                           
 14765                           ;LED_B1.c: 118: if (led == 1) {
 14766  15B7  0823               	movf	setLED@led,w
 14767  15B8  3A01               	xorlw	1
 14768  15B9  1D03               	skipz
 14769  15BA  2DBC               	goto	l6612
 14770                           
 14771                           ;LED_B1.c: 122: RA3 = 0;
 14772  15BB  118C               	bcf	12,3	;volatile
 14773  15BC                     l6612:	
 14774                           
 14775                           ;LED_B1.c: 124: }
 14776                           ;LED_B1.c: 127: if (led == 2) {
 14777  15BC  0823               	movf	setLED@led,w
 14778  15BD  3A02               	xorlw	2
 14779  15BE  1903               	btfsc	3,2
 14780                           
 14781                           ;LED_B1.c: 131: RC7 = 0;
 14782  15BF  138E               	bcf	14,7	;volatile
 14783                           
 14784                           ;LED_B1.c: 133: }
 14785                           ;LED_B1.c: 145: if (led == 99) {
 14786  15C0  0823               	movf	setLED@led,w
 14787  15C1  3A63               	xorlw	99
 14788  15C2  1903               	btfsc	3,2
 14789                           
 14790                           ;LED_B1.c: 149: RB5 = 0;
 14791  15C3  128D               	bcf	13,5	;volatile
 14792  15C4                     l6620:	
 14793                           
 14794                           ;LED_B1.c: 151: }
 14795                           ;LED_B1.c: 153: }
 14796                           ;LED_B1.c: 154: if (command == 10) {
 14797  15C4  0822               	movf	setLED@command,w
 14798  15C5  3A0A               	xorlw	10
 14799  15C6  1D03               	skipz
 14800  15C7  2DE2               	goto	l6636
 14801                           
 14802                           ;LED_B1.c: 155: LED->GO = 0;
 14803  15C8  087A               	movf	_LED,w
 14804  15C9  0086               	movwf	6
 14805  15CA  3001               	movlw	1	; select bank2/3
 14806  15CB  0087               	movwf	7
 14807  15CC  1081               	bcf	1,1
 14808                           
 14809                           ;LED_B1.c: 156: LED->Time = 0;
 14810  15CD  0A7A               	incf	_LED,w
 14811  15CE  0086               	movwf	6
 14812  15CF  3001               	movlw	1	; select bank2/3
 14813  15D0  0087               	movwf	7
 14814  15D1  3000               	movlw	0
 14815  15D2  3FC0               	movwi [0]fsr1
 14816  15D3  3FC1               	movwi [1]fsr1
 14817                           
 14818                           ;LED_B1.c: 158: if (led == 1) {
 14819  15D4  0823               	movf	setLED@led,w
 14820  15D5  3A01               	xorlw	1
 14821  15D6  1D03               	skipz
 14822  15D7  2DDA               	goto	l6628
 14823                           
 14824                           ;LED_B1.c: 162: RA3 = 1;
 14825  15D8  158C               	bsf	12,3	;volatile
 14826                           
 14827                           ;LED_B1.c: 164: }
 14828  15D9  2DDE               	goto	l6632
 14829  15DA                     l6628:	
 14830                           
 14831                           ;LED_B1.c: 167: else if (led == 2) {
 14832  15DA  0823               	movf	setLED@led,w
 14833  15DB  3A02               	xorlw	2
 14834  15DC  1903               	btfsc	3,2
 14835                           
 14836                           ;LED_B1.c: 171: RC7 = 1;
 14837  15DD  178E               	bsf	14,7	;volatile
 14838  15DE                     l6632:	
 14839                           
 14840                           ;LED_B1.c: 173: }
 14841                           ;LED_B1.c: 185: if (led == 99) {
 14842  15DE  0823               	movf	setLED@led,w
 14843  15DF  3A63               	xorlw	99
 14844  15E0  1903               	btfsc	3,2
 14845                           
 14846                           ;LED_B1.c: 189: RB5 = 1;
 14847  15E1  168D               	bsf	13,5	;volatile
 14848  15E2                     l6636:	
 14849                           
 14850                           ;LED_B1.c: 191: }
 14851                           ;LED_B1.c: 193: }
 14852                           ;LED_B1.c: 194: if (command == 11) {
 14853  15E2  0822               	movf	setLED@command,w
 14854  15E3  3A0B               	xorlw	11
 14855  15E4  1D03               	skipz
 14856  15E5  0008               	return
 14857                           
 14858                           ;LED_B1.c: 195: LED->GO = 1;
 14859  15E6  087A               	movf	_LED,w
 14860  15E7  0086               	movwf	6
 14861  15E8  3001               	movlw	1	; select bank2/3
 14862  15E9  0087               	movwf	7
 14863  15EA  1481               	bsf	1,1
 14864  15EB  0008               	return
 14865  15EC                     __end_of_setLED:	
 14866                           
 14867                           	psect	text87
 14868  1E32                     __ptext87:	
 14869 ;; *************** function _LedPointSelect *****************
 14870 ;; Defined at:
 14871 ;;		line 7 in file "../src/LED_B1.c"
 14872 ;; Parameters:    Size  Location     Type
 14873 ;;  led             1    wreg     unsigned char 
 14874 ;; Auto vars:     Size  Location     Type
 14875 ;;  led             1    1[BANK0 ] unsigned char 
 14876 ;; Return value:  Size  Location     Type
 14877 ;;		None               void
 14878 ;; Registers used:
 14879 ;;		wreg
 14880 ;; Tracked objects:
 14881 ;;		On entry : 0/0
 14882 ;;		On exit  : 0/0
 14883 ;;		Unchanged: 0/0
 14884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14885 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14886 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14887 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14888 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14889 ;;Total ram usage:        2 bytes
 14890 ;; Hardware stack levels used:    1
 14891 ;; Hardware stack levels required when called:    5
 14892 ;; This function calls:
 14893 ;;		Nothing
 14894 ;; This function is called by:
 14895 ;;		_setLED_Initialization
 14896 ;;		_setLED
 14897 ;;		_setLED_Main
 14898 ;; This function uses a non-reentrant model
 14899 ;;
 14900                           
 14901                           
 14902                           ;psect for function _LedPointSelect
 14903  1E32                     _LedPointSelect:	
 14904                           
 14905                           ;incstack = 0
 14906                           ; Regs used in _LedPointSelect: [wreg]
 14907                           ;LedPointSelect@led stored from wreg
 14908  1E32  0020               	movlb	0	; select bank0
 14909  1E33  00A1               	movwf	LedPointSelect@led
 14910                           
 14911                           ;LED_B1.c: 9: if (led == 1) {
 14912  1E34  0821               	movf	LedPointSelect@led,w
 14913  1E35  3A01               	xorlw	1
 14914  1E36  1D03               	skipz
 14915  1E37  2E3C               	goto	l998
 14916                           
 14917                           ;LED_B1.c: 10: LED = &VarLED1;
 14918  1E38  3061               	movlw	_VarLED1& (0+255)
 14919  1E39  00A0               	movwf	??_LedPointSelect
 14920  1E3A  0820               	movf	??_LedPointSelect,w
 14921  1E3B  00FA               	movwf	_LED
 14922  1E3C                     l998:	
 14923                           
 14924                           ;LED_B1.c: 11: }
 14925                           ;LED_B1.c: 14: if (led == 2) {
 14926  1E3C  0821               	movf	LedPointSelect@led,w
 14927  1E3D  3A02               	xorlw	2
 14928  1E3E  1D03               	skipz
 14929  1E3F  2E44               	goto	l999
 14930                           
 14931                           ;LED_B1.c: 15: LED = &VarLED2;
 14932  1E40  3065               	movlw	_VarLED2& (0+255)
 14933  1E41  00A0               	movwf	??_LedPointSelect
 14934  1E42  0820               	movf	??_LedPointSelect,w
 14935  1E43  00FA               	movwf	_LED
 14936  1E44                     l999:	
 14937                           
 14938                           ;LED_B1.c: 16: }
 14939                           ;LED_B1.c: 24: if (led == 99) {
 14940  1E44  0821               	movf	LedPointSelect@led,w
 14941  1E45  3A63               	xorlw	99
 14942  1E46  1D03               	skipz
 14943  1E47  0008               	return
 14944                           
 14945                           ;LED_B1.c: 25: LED = &VarErrLED;
 14946  1E48  305D               	movlw	_VarErrLED& (0+255)
 14947  1E49  00A0               	movwf	??_LedPointSelect
 14948  1E4A  0820               	movf	??_LedPointSelect,w
 14949  1E4B  00FA               	movwf	_LED
 14950  1E4C  0008               	return
 14951  1E4D                     __end_of_LedPointSelect:	
 14952                           
 14953                           	psect	text88
 14954  1D8E                     __ptext88:	
 14955 ;; *************** function _setDimmerLights_Line *****************
 14956 ;; Defined at:
 14957 ;;		line 667 in file "../src/Dimmer_B1.c"
 14958 ;; Parameters:    Size  Location     Type
 14959 ;;  lights          1    wreg     unsigned char 
 14960 ;; Auto vars:     Size  Location     Type
 14961 ;;  lights          1    0[BANK0 ] unsigned char 
 14962 ;; Return value:  Size  Location     Type
 14963 ;;		None               void
 14964 ;; Registers used:
 14965 ;;		wreg
 14966 ;; Tracked objects:
 14967 ;;		On entry : 0/0
 14968 ;;		On exit  : 0/0
 14969 ;;		Unchanged: 0/0
 14970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14972 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14974 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14975 ;;Total ram usage:        1 bytes
 14976 ;; Hardware stack levels used:    1
 14977 ;; Hardware stack levels required when called:    5
 14978 ;; This function calls:
 14979 ;;		Nothing
 14980 ;; This function is called by:
 14981 ;;		_setDimmerLights
 14982 ;; This function uses a non-reentrant model
 14983 ;;
 14984                           
 14985                           
 14986                           ;psect for function _setDimmerLights_Line
 14987  1D8E                     _setDimmerLights_Line:	
 14988                           
 14989                           ;incstack = 0
 14990                           ; Regs used in _setDimmerLights_Line: [wreg]
 14991                           ;setDimmerLights_Line@lights stored from wreg
 14992  1D8E  0020               	movlb	0	; select bank0
 14993  1D8F  00A0               	movwf	setDimmerLights_Line@lights
 14994                           
 14995                           ;Dimmer_B1.c: 669: DimmerLights1.Line = 0;
 14996  1D90  0023               	movlb	3	; select bank3
 14997  1D91  1047               	bcf	(_DimmerLights1^(0+384)+9),0
 14998                           
 14999                           ;Dimmer_B1.c: 672: DimmerLights2.Line = 0;
 15000  1D92  1056               	bcf	(_DimmerLights2^(0+384)+9),0
 15001                           
 15002                           ;Dimmer_B1.c: 678: if (lights == 1) {
 15003  1D93  0020               	movlb	0	; select bank0
 15004  1D94  0820               	movf	setDimmerLights_Line@lights,w
 15005  1D95  3A01               	xorlw	1
 15006  1D96  1D03               	skipz
 15007  1D97  2D9B               	goto	l6646
 15008                           
 15009                           ;Dimmer_B1.c: 679: DimmerLights1.Line = 1;
 15010  1D98  0023               	movlb	3	; select bank3
 15011  1D99  1447               	bsf	(_DimmerLights1^(0+384)+9),0
 15012                           
 15013                           ;Dimmer_B1.c: 680: }
 15014  1D9A  0008               	return
 15015  1D9B                     l6646:	
 15016                           
 15017                           ;Dimmer_B1.c: 683: else if (lights == 2) {
 15018  1D9B  0020               	movlb	0	; select bank0
 15019  1D9C  0820               	movf	setDimmerLights_Line@lights,w
 15020  1D9D  3A02               	xorlw	2
 15021  1D9E  1D03               	skipz
 15022  1D9F  0008               	return
 15023                           
 15024                           ;Dimmer_B1.c: 684: DimmerLights2.Line = 1;
 15025  1DA0  0023               	movlb	3	; select bank3
 15026  1DA1  1456               	bsf	(_DimmerLights2^(0+384)+9),0
 15027  1DA2  0008               	return
 15028  1DA3                     __end_of_setDimmerLights_Line:	
 15029                           
 15030                           	psect	text89
 15031  1179                     __ptext89:	
 15032 ;; *************** function _getMain_All_Error_Status *****************
 15033 ;; Defined at:
 15034 ;;		line 371 in file "../src/main_B1.c"
 15035 ;; Parameters:    Size  Location     Type
 15036 ;;  command         1    wreg     unsigned char 
 15037 ;; Auto vars:     Size  Location     Type
 15038 ;;  command         1    5[BANK0 ] unsigned char 
 15039 ;;  status          1    6[BANK0 ] unsigned char 
 15040 ;; Return value:  Size  Location     Type
 15041 ;;                  1    wreg      unsigned char 
 15042 ;; Registers used:
 15043 ;;		wreg, status,2, status,0
 15044 ;; Tracked objects:
 15045 ;;		On entry : 0/0
 15046 ;;		On exit  : 0/0
 15047 ;;		Unchanged: 0/0
 15048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15050 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15051 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15052 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15053 ;;Total ram usage:        7 bytes
 15054 ;; Hardware stack levels used:    1
 15055 ;; Hardware stack levels required when called:    5
 15056 ;; This function calls:
 15057 ;;		Nothing
 15058 ;; This function is called by:
 15059 ;;		_DimmerLights_Main
 15060 ;;		_setDimmerLights
 15061 ;;		_setDimmerLights_Adj
 15062 ;;		_Load_Main
 15063 ;;		_setTemp_Main
 15064 ;;		_setRF_Main
 15065 ;;		_getRxData
 15066 ;;		_Switch_Main
 15067 ;; This function uses a non-reentrant model
 15068 ;;
 15069                           
 15070                           
 15071                           ;psect for function _getMain_All_Error_Status
 15072  1179                     _getMain_All_Error_Status:	
 15073                           
 15074                           ;incstack = 0
 15075                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 15076                           ;getMain_All_Error_Status@command stored from wreg
 15077  1179  0020               	movlb	0	; select bank0
 15078  117A  00A5               	movwf	getMain_All_Error_Status@command
 15079                           
 15080                           ;main_B1.c: 372: char status = 0;
 15081  117B  01A6               	clrf	getMain_All_Error_Status@status
 15082                           
 15083                           ;main_B1.c: 383: if (status == 0 && command != 2) {
 15084  117C  08A6               	movf	getMain_All_Error_Status@status,f
 15085  117D  1D03               	skipz
 15086  117E  2993               	goto	l6578
 15087  117F  0825               	movf	getMain_All_Error_Status@command,w
 15088  1180  3A02               	xorlw	2
 15089  1181  1903               	skipnz
 15090  1182  2993               	goto	l6578
 15091                           
 15092                           ;main_B1.c: 384: status = Temp.ERROR == 1 ? 2 : 0;
 15093  1183  0021               	movlb	1	; select bank1
 15094  1184  18D6               	btfsc	_Temp^(0+128),1
 15095  1185  298A               	goto	l6576
 15096  1186  0020               	movlb	0	; select bank0
 15097  1187  01A1               	clrf	_getMain_All_Error_Status$6310
 15098  1188  01A2               	clrf	_getMain_All_Error_Status$6310+1
 15099  1189  298F               	goto	l2725
 15100  118A                     l6576:	
 15101  118A  3002               	movlw	2
 15102  118B  0020               	movlb	0	; select bank0
 15103  118C  00A1               	movwf	_getMain_All_Error_Status$6310
 15104  118D  3000               	movlw	0
 15105  118E  00A2               	movwf	_getMain_All_Error_Status$6310+1
 15106  118F                     l2725:	
 15107  118F  0821               	movf	_getMain_All_Error_Status$6310,w
 15108  1190  00A0               	movwf	??_getMain_All_Error_Status
 15109  1191  0820               	movf	??_getMain_All_Error_Status,w
 15110  1192  00A6               	movwf	getMain_All_Error_Status@status
 15111  1193                     l6578:	
 15112                           
 15113                           ;main_B1.c: 385: }
 15114                           ;main_B1.c: 390: if (status == 0 && command != 3) {
 15115  1193  08A6               	movf	getMain_All_Error_Status@status,f
 15116  1194  1D03               	skipz
 15117  1195  29AA               	goto	l2726
 15118  1196  0825               	movf	getMain_All_Error_Status@command,w
 15119  1197  3A03               	xorlw	3
 15120  1198  1903               	skipnz
 15121  1199  29AA               	goto	l2726
 15122                           
 15123                           ;main_B1.c: 391: status = Load.ERROR == 1 ? 3 : 0;
 15124  119A  0022               	movlb	2	; select bank2
 15125  119B  1AA5               	btfsc	_Load^(0+256),5
 15126  119C  29A1               	goto	l6586
 15127  119D  0020               	movlb	0	; select bank0
 15128  119E  01A3               	clrf	_getMain_All_Error_Status$6311
 15129  119F  01A4               	clrf	_getMain_All_Error_Status$6311+1
 15130  11A0  29A6               	goto	l2730
 15131  11A1                     l6586:	
 15132  11A1  3003               	movlw	3
 15133  11A2  0020               	movlb	0	; select bank0
 15134  11A3  00A3               	movwf	_getMain_All_Error_Status$6311
 15135  11A4  3000               	movlw	0
 15136  11A5  00A4               	movwf	_getMain_All_Error_Status$6311+1
 15137  11A6                     l2730:	
 15138  11A6  0823               	movf	_getMain_All_Error_Status$6311,w
 15139  11A7  00A0               	movwf	??_getMain_All_Error_Status
 15140  11A8  0820               	movf	??_getMain_All_Error_Status,w
 15141  11A9  00A6               	movwf	getMain_All_Error_Status@status
 15142  11AA                     l2726:	
 15143                           
 15144                           ;main_B1.c: 392: }
 15145                           ;main_B1.c: 408: return status;
 15146  11AA  0826               	movf	getMain_All_Error_Status@status,w
 15147  11AB  0008               	return
 15148  11AC                     __end_of_getMain_All_Error_Status:	
 15149                           
 15150                           	psect	text90
 15151  10EB                     __ptext90:	
 15152 ;; *************** function _getMain_LightsStatus *****************
 15153 ;; Defined at:
 15154 ;;		line 344 in file "../src/main_B1.c"
 15155 ;; Parameters:    Size  Location     Type
 15156 ;;		None
 15157 ;; Auto vars:     Size  Location     Type
 15158 ;;  i               2    6[BANK0 ] int 
 15159 ;;  status          1    8[BANK0 ] unsigned char 
 15160 ;;  count           1    5[BANK0 ] unsigned char 
 15161 ;; Return value:  Size  Location     Type
 15162 ;;                  1    wreg      unsigned char 
 15163 ;; Registers used:
 15164 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15165 ;; Tracked objects:
 15166 ;;		On entry : 0/0
 15167 ;;		On exit  : 0/0
 15168 ;;		Unchanged: 0/0
 15169 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15170 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15171 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15172 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15173 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15174 ;;Total ram usage:        5 bytes
 15175 ;; Hardware stack levels used:    1
 15176 ;; Hardware stack levels required when called:    7
 15177 ;; This function calls:
 15178 ;;		_getDimmerLights_Status
 15179 ;; This function is called by:
 15180 ;;		_DimmerLights_Main
 15181 ;;		_Flash_Memory_Main
 15182 ;;		_Load_Main
 15183 ;;		_setMain_Exception
 15184 ;; This function uses a non-reentrant model
 15185 ;;
 15186                           
 15187                           
 15188                           ;psect for function _getMain_LightsStatus
 15189  10EB                     _getMain_LightsStatus:	
 15190                           
 15191                           ;main_B1.c: 345: char status = 0, count = 0;
 15192                           
 15193                           ;incstack = 0
 15194                           ; Regs used in _getMain_LightsStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15195  10EB  0020               	movlb	0	; select bank0
 15196  10EC  01A8               	clrf	getMain_LightsStatus@status
 15197  10ED  01A5               	clrf	getMain_LightsStatus@count
 15198                           
 15199                           ;main_B1.c: 351: count = 2;
 15200  10EE  3002               	movlw	2
 15201  10EF  00A4               	movwf	??_getMain_LightsStatus
 15202  10F0  0824               	movf	??_getMain_LightsStatus,w
 15203  10F1  00A5               	movwf	getMain_LightsStatus@count
 15204                           
 15205                           ;main_B1.c: 357: for (int i = 0; i < count; i++) {
 15206  10F2  01A6               	clrf	getMain_LightsStatus@i
 15207  10F3  01A7               	clrf	getMain_LightsStatus@i+1
 15208  10F4                     l6888:	
 15209  10F4  0827               	movf	getMain_LightsStatus@i+1,w
 15210  10F5  3A80               	xorlw	128
 15211  10F6  00A4               	movwf	??_getMain_LightsStatus
 15212  10F7  3080               	movlw	128
 15213  10F8  0224               	subwf	??_getMain_LightsStatus,w
 15214  10F9  1D03               	skipz
 15215  10FA  28FD               	goto	u6095
 15216  10FB  0825               	movf	getMain_LightsStatus@count,w
 15217  10FC  0226               	subwf	getMain_LightsStatus@i,w
 15218  10FD                     u6095:	
 15219  10FD  1803               	btfsc	3,0
 15220  10FE  2915               	goto	l6890
 15221                           
 15222                           ;main_B1.c: 358: if (status == 0) {
 15223  10FF  0020               	movlb	0	; select bank0
 15224  1100  08A8               	movf	getMain_LightsStatus@status,f
 15225  1101  1D03               	skipz
 15226  1102  2910               	goto	l6886
 15227                           
 15228                           ;main_B1.c: 363: status = getDimmerLights_Status(i + 1) == 1 ? 1 : 0;
 15229  1103  0826               	movf	getMain_LightsStatus@i,w
 15230  1104  3E01               	addlw	1
 15231  1105  319C  2408  3190   	fcall	_getDimmerLights_Status
 15232  1108  3A01               	xorlw	1
 15233  1109  3000               	movlw	0
 15234  110A  1903               	skipnz
 15235  110B  3001               	movlw	1
 15236  110C  0020               	movlb	0	; select bank0
 15237  110D  00A4               	movwf	??_getMain_LightsStatus
 15238  110E  0824               	movf	??_getMain_LightsStatus,w
 15239  110F  00A8               	movwf	getMain_LightsStatus@status
 15240  1110                     l6886:	
 15241  1110  3001               	movlw	1
 15242  1111  07A6               	addwf	getMain_LightsStatus@i,f
 15243  1112  3000               	movlw	0
 15244  1113  3DA7               	addwfc	getMain_LightsStatus@i+1,f
 15245  1114  28F4               	goto	l6888
 15246  1115                     l6890:	
 15247                           
 15248                           ;main_B1.c: 365: }
 15249                           ;main_B1.c: 366: }
 15250                           ;main_B1.c: 367: return status;
 15251  1115  0020               	movlb	0	; select bank0
 15252  1116  0828               	movf	getMain_LightsStatus@status,w
 15253  1117  0008               	return
 15254  1118                     __end_of_getMain_LightsStatus:	
 15255                           
 15256                           	psect	text91
 15257  1B35                     __ptext91:	
 15258 ;; *************** function _getLoad_OK *****************
 15259 ;; Defined at:
 15260 ;;		line 219 in file "../src/OverLoad_B1.c"
 15261 ;; Parameters:    Size  Location     Type
 15262 ;;		None
 15263 ;; Auto vars:     Size  Location     Type
 15264 ;;  ok              1    0[BANK0 ] unsigned char 
 15265 ;; Return value:  Size  Location     Type
 15266 ;;                  1    wreg      unsigned char 
 15267 ;; Registers used:
 15268 ;;		wreg, status,2
 15269 ;; Tracked objects:
 15270 ;;		On entry : 0/0
 15271 ;;		On exit  : 0/0
 15272 ;;		Unchanged: 0/0
 15273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15274 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15275 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15276 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15277 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15278 ;;Total ram usage:        1 bytes
 15279 ;; Hardware stack levels used:    1
 15280 ;; Hardware stack levels required when called:    5
 15281 ;; This function calls:
 15282 ;;		Nothing
 15283 ;; This function is called by:
 15284 ;;		_DimmerLights_Main
 15285 ;; This function uses a non-reentrant model
 15286 ;;
 15287                           
 15288                           
 15289                           ;psect for function _getLoad_OK
 15290  1B35                     _getLoad_OK:	
 15291                           
 15292                           ;OverLoad_B1.c: 220: char ok = Load.OK == 1 ? 1 : 0;
 15293                           
 15294                           ;incstack = 0
 15295                           ; Regs used in _getLoad_OK: [wreg+status,2]
 15296  1B35  3000               	movlw	0
 15297  1B36  0022               	movlb	2	; select bank2
 15298  1B37  1BA5               	btfsc	_Load^(0+256),7
 15299  1B38  3001               	movlw	1
 15300  1B39  0020               	movlb	0	; select bank0
 15301  1B3A  00A0               	movwf	getLoad_OK@ok
 15302                           
 15303                           ;OverLoad_B1.c: 221: return ok;
 15304  1B3B  0820               	movf	getLoad_OK@ok,w
 15305  1B3C  0008               	return
 15306  1B3D                     __end_of_getLoad_OK:	
 15307                           
 15308                           	psect	text92
 15309  1DB8                     __ptext92:	
 15310 ;; *************** function _DimmerLights_Initialization *****************
 15311 ;; Defined at:
 15312 ;;		line 329 in file "../src/Dimmer_B1.c"
 15313 ;; Parameters:    Size  Location     Type
 15314 ;;		None
 15315 ;; Auto vars:     Size  Location     Type
 15316 ;;		None
 15317 ;; Return value:  Size  Location     Type
 15318 ;;		None               void
 15319 ;; Registers used:
 15320 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15321 ;; Tracked objects:
 15322 ;;		On entry : 0/0
 15323 ;;		On exit  : 0/0
 15324 ;;		Unchanged: 0/0
 15325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15328 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15329 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15330 ;;Total ram usage:        1 bytes
 15331 ;; Hardware stack levels used:    1
 15332 ;; Hardware stack levels required when called:    7
 15333 ;; This function calls:
 15334 ;;		_Dimmer_Initialization
 15335 ;;		_setDimmerLights_Initialization
 15336 ;; This function is called by:
 15337 ;;		_main
 15338 ;; This function uses a non-reentrant model
 15339 ;;
 15340                           
 15341                           
 15342                           ;psect for function _DimmerLights_Initialization
 15343  1DB8                     _DimmerLights_Initialization:	
 15344                           
 15345                           ;Dimmer_B1.c: 331: DimmerLights11 = &DimmerLights1;
 15346                           
 15347                           ;incstack = 0
 15348                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 15349  1DB8  30BE               	movlw	_DimmerLights1& (0+255)
 15350  1DB9  0020               	movlb	0	; select bank0
 15351  1DBA  00A4               	movwf	??_DimmerLights_Initialization
 15352  1DBB  0824               	movf	??_DimmerLights_Initialization,w
 15353  1DBC  0021               	movlb	1	; select bank1
 15354  1DBD  00CC               	movwf	_DimmerLights11^(0+128)
 15355                           
 15356                           ;Dimmer_B1.c: 332: setDimmerLights_Initialization(1);
 15357  1DBE  3001               	movlw	1
 15358  1DBF  319F  27D9  319D   	fcall	_setDimmerLights_Initialization
 15359                           
 15360                           ;Dimmer_B1.c: 336: DimmerLights22 = &DimmerLights2;
 15361  1DC2  30CD               	movlw	_DimmerLights2& (0+255)
 15362  1DC3  0020               	movlb	0	; select bank0
 15363  1DC4  00A4               	movwf	??_DimmerLights_Initialization
 15364  1DC5  0824               	movf	??_DimmerLights_Initialization,w
 15365  1DC6  0021               	movlb	1	; select bank1
 15366  1DC7  00CD               	movwf	_DimmerLights22^(0+128)
 15367                           
 15368                           ;Dimmer_B1.c: 337: setDimmerLights_Initialization(2);
 15369  1DC8  3002               	movlw	2
 15370  1DC9  319F  27D9  319D   	fcall	_setDimmerLights_Initialization
 15371                           
 15372                           ;Dimmer_B1.c: 346: Dimmer_Initialization();
 15373  1DCC  319A  22D9         	fcall	_Dimmer_Initialization
 15374  1DCE  0008               	return
 15375  1DCF                     __end_of_DimmerLights_Initialization:	
 15376                           
 15377                           	psect	text93
 15378  1FD9                     __ptext93:	
 15379 ;; *************** function _setDimmerLights_Initialization *****************
 15380 ;; Defined at:
 15381 ;;		line 352 in file "../src/Dimmer_B1.c"
 15382 ;; Parameters:    Size  Location     Type
 15383 ;;  lights          1    wreg     unsigned char 
 15384 ;; Auto vars:     Size  Location     Type
 15385 ;;  lights          1    3[BANK0 ] unsigned char 
 15386 ;; Return value:  Size  Location     Type
 15387 ;;		None               void
 15388 ;; Registers used:
 15389 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15390 ;; Tracked objects:
 15391 ;;		On entry : 0/0
 15392 ;;		On exit  : 0/0
 15393 ;;		Unchanged: 0/0
 15394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15396 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15397 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15398 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15399 ;;Total ram usage:        2 bytes
 15400 ;; Hardware stack levels used:    1
 15401 ;; Hardware stack levels required when called:    6
 15402 ;; This function calls:
 15403 ;;		_DimmerLightsPointSelect
 15404 ;; This function is called by:
 15405 ;;		_DimmerLights_Initialization
 15406 ;; This function uses a non-reentrant model
 15407 ;;
 15408                           
 15409                           
 15410                           ;psect for function _setDimmerLights_Initialization
 15411  1FD9                     _setDimmerLights_Initialization:	
 15412                           
 15413                           ;incstack = 0
 15414                           ; Regs used in _setDimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pcla
      +                          th+cstack]
 15415                           ;setDimmerLights_Initialization@lights stored from wreg
 15416  1FD9  0020               	movlb	0	; select bank0
 15417  1FDA  00A3               	movwf	setDimmerLights_Initialization@lights
 15418                           
 15419                           ;Dimmer_B1.c: 354: DimmerLightsPointSelect(lights);
 15420  1FDB  0823               	movf	setDimmerLights_Initialization@lights,w
 15421  1FDC  319C  24B4         	fcall	_DimmerLightsPointSelect
 15422                           
 15423                           ;Dimmer_B1.c: 360: DimmerLights->MaxmumValue = ((char)(80*0.8));
 15424  1FDE  3040               	movlw	64
 15425  1FDF  0020               	movlb	0	; select bank0
 15426  1FE0  00A2               	movwf	??_setDimmerLights_Initialization
 15427  1FE1  086F               	movf	_DimmerLights,w
 15428  1FE2  3E05               	addlw	5
 15429  1FE3  0086               	movwf	6
 15430  1FE4  3001               	movlw	1	; select bank2/3
 15431  1FE5  0087               	movwf	7
 15432  1FE6  0822               	movf	??_setDimmerLights_Initialization,w
 15433  1FE7  0081               	movwf	1
 15434                           
 15435                           ;Dimmer_B1.c: 361: DimmerLights->MinimumValue = ((char)(15*0.8));
 15436  1FE8  300C               	movlw	12
 15437  1FE9  00A2               	movwf	??_setDimmerLights_Initialization
 15438  1FEA  086F               	movf	_DimmerLights,w
 15439  1FEB  3E06               	addlw	6
 15440  1FEC  0086               	movwf	6
 15441  1FED  3001               	movlw	1	; select bank2/3
 15442  1FEE  0087               	movwf	7
 15443  1FEF  0822               	movf	??_setDimmerLights_Initialization,w
 15444  1FF0  0081               	movwf	1
 15445                           
 15446                           ;Dimmer_B1.c: 375: DimmerLights->DimmingValue = DimmerLights->MaxmumValue;
 15447  1FF1  086F               	movf	_DimmerLights,w
 15448  1FF2  3E05               	addlw	5
 15449  1FF3  0086               	movwf	6
 15450  1FF4  3001               	movlw	1	; select bank2/3
 15451  1FF5  0087               	movwf	7
 15452  1FF6  0801               	movf	1,w
 15453  1FF7  00A2               	movwf	??_setDimmerLights_Initialization
 15454  1FF8  086F               	movf	_DimmerLights,w
 15455  1FF9  3E04               	addlw	4
 15456  1FFA  0086               	movwf	6
 15457  1FFB  3001               	movlw	1	; select bank2/3
 15458  1FFC  0087               	movwf	7
 15459  1FFD  0822               	movf	??_setDimmerLights_Initialization,w
 15460  1FFE  0081               	movwf	1
 15461  1FFF  0008               	return
 15462  2000                     __end_of_setDimmerLights_Initialization:	
 15463                           
 15464                           	psect	text94
 15465  1AD9                     __ptext94:	
 15466 ;; *************** function _Dimmer_Initialization *****************
 15467 ;; Defined at:
 15468 ;;		line 892 in file "../src/Dimmer_B1.c"
 15469 ;; Parameters:    Size  Location     Type
 15470 ;;		None
 15471 ;; Auto vars:     Size  Location     Type
 15472 ;;		None
 15473 ;; Return value:  Size  Location     Type
 15474 ;;		None               void
 15475 ;; Registers used:
 15476 ;;		None
 15477 ;; Tracked objects:
 15478 ;;		On entry : 0/0
 15479 ;;		On exit  : 0/0
 15480 ;;		Unchanged: 0/0
 15481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15485 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15486 ;;Total ram usage:        0 bytes
 15487 ;; Hardware stack levels used:    1
 15488 ;; Hardware stack levels required when called:    5
 15489 ;; This function calls:
 15490 ;;		Nothing
 15491 ;; This function is called by:
 15492 ;;		_DimmerLights_Initialization
 15493 ;; This function uses a non-reentrant model
 15494 ;;
 15495                           
 15496                           
 15497                           ;psect for function _Dimmer_Initialization
 15498  1AD9                     _Dimmer_Initialization:	
 15499                           
 15500                           ;incstack = 0
 15501                           ; Regs used in _Dimmer_Initialization: []
 15502  1AD9  0008               	return
 15503  1ADA                     __end_of_Dimmer_Initialization:	
 15504                           
 15505                           	psect	text95
 15506  1B2D                     __ptext95:	
 15507 ;; *************** function _DelayOff_Main *****************
 15508 ;; Defined at:
 15509 ;;		line 41 in file "../src/DelayOff_B1.c"
 15510 ;; Parameters:    Size  Location     Type
 15511 ;;		None
 15512 ;; Auto vars:     Size  Location     Type
 15513 ;;		None
 15514 ;; Return value:  Size  Location     Type
 15515 ;;		None               void
 15516 ;; Registers used:
 15517 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15518 ;; Tracked objects:
 15519 ;;		On entry : 0/0
 15520 ;;		On exit  : 0/0
 15521 ;;		Unchanged: 0/0
 15522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15526 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15527 ;;Total ram usage:        0 bytes
 15528 ;; Hardware stack levels used:    1
 15529 ;; Hardware stack levels required when called:   11
 15530 ;; This function calls:
 15531 ;;		_DlyOff_Main
 15532 ;; This function is called by:
 15533 ;;		_main
 15534 ;; This function uses a non-reentrant model
 15535 ;;
 15536                           
 15537                           
 15538                           ;psect for function _DelayOff_Main
 15539  1B2D                     _DelayOff_Main:	
 15540                           
 15541                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 15542                           
 15543                           ;incstack = 0
 15544                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15545  1B2D  3001               	movlw	1
 15546  1B2E  3188  20CF  319B   	fcall	_DlyOff_Main
 15547                           
 15548                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 15549  1B31  3002               	movlw	2
 15550  1B32  3188  20CF         	fcall	_DlyOff_Main
 15551  1B34  0008               	return
 15552  1B35                     __end_of_DelayOff_Main:	
 15553                           
 15554                           	psect	text96
 15555  08CF                     __ptext96:	
 15556 ;; *************** function _DlyOff_Main *****************
 15557 ;; Defined at:
 15558 ;;		line 61 in file "../src/DelayOff_B1.c"
 15559 ;; Parameters:    Size  Location     Type
 15560 ;;  sw              1    wreg     unsigned char 
 15561 ;; Auto vars:     Size  Location     Type
 15562 ;;  sw              1   24[BANK0 ] unsigned char 
 15563 ;; Return value:  Size  Location     Type
 15564 ;;		None               void
 15565 ;; Registers used:
 15566 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15567 ;; Tracked objects:
 15568 ;;		On entry : 0/0
 15569 ;;		On exit  : 0/0
 15570 ;;		Unchanged: 0/0
 15571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15572 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15573 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15574 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15575 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15576 ;;Total ram usage:        3 bytes
 15577 ;; Hardware stack levels used:    1
 15578 ;; Hardware stack levels required when called:   10
 15579 ;; This function calls:
 15580 ;;		_DelayOffPointSelect
 15581 ;;		_setBuz
 15582 ;;		_setDimmerLights_ErrorClose
 15583 ;; This function is called by:
 15584 ;;		_DelayOff_Main
 15585 ;; This function uses a non-reentrant model
 15586 ;;
 15587                           
 15588                           
 15589                           ;psect for function _DlyOff_Main
 15590  08CF                     _DlyOff_Main:	
 15591                           
 15592                           ;incstack = 0
 15593                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15594                           ;DlyOff_Main@sw stored from wreg
 15595  08CF  0020               	movlb	0	; select bank0
 15596  08D0  00B8               	movwf	DlyOff_Main@sw
 15597                           
 15598                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 15599  08D1  0838               	movf	DlyOff_Main@sw,w
 15600  08D2  319D  2528  3188   	fcall	_DelayOffPointSelect
 15601                           
 15602                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 15603  08D5  0878               	movf	_DelayOff,w
 15604  08D6  0086               	movwf	6
 15605  08D7  3001               	movlw	1	; select bank2/3
 15606  08D8  0087               	movwf	7
 15607  08D9  1C81               	btfss	1,1
 15608  08DA  0008               	return
 15609                           
 15610                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 15611  08DB  0878               	movf	_DelayOff,w
 15612  08DC  3E02               	addlw	2
 15613  08DD  0086               	movwf	6
 15614  08DE  3001               	movlw	1	; select bank2/3
 15615  08DF  0087               	movwf	7
 15616  08E0  3001               	movlw	1
 15617  08E1  0781               	addwf	1,f
 15618  08E2  3141               	addfsr 1,1
 15619  08E3  1803               	skipnc
 15620  08E4  0A81               	incf	1,f
 15621                           
 15622                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 6000) {
 15623  08E5  0878               	movf	_DelayOff,w
 15624  08E6  3E02               	addlw	2
 15625  08E7  0086               	movwf	6
 15626  08E8  3001               	movlw	1	; select bank2/3
 15627  08E9  0087               	movwf	7
 15628  08EA  3F40               	moviw [0]fsr1
 15629  08EB  0020               	movlb	0	; select bank0
 15630  08EC  00B6               	movwf	??_DlyOff_Main
 15631  08ED  3F41               	moviw [1]fsr1
 15632  08EE  00B7               	movwf	??_DlyOff_Main+1
 15633  08EF  3017               	movlw	23
 15634  08F0  0237               	subwf	??_DlyOff_Main+1,w
 15635  08F1  3070               	movlw	112
 15636  08F2  1903               	skipnz
 15637  08F3  0236               	subwf	??_DlyOff_Main,w
 15638  08F4  1C03               	skipc
 15639  08F5  0008               	return
 15640                           
 15641                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 15642  08F6  0878               	movf	_DelayOff,w
 15643  08F7  3E02               	addlw	2
 15644  08F8  0086               	movwf	6
 15645  08F9  3001               	movlw	1	; select bank2/3
 15646  08FA  0087               	movwf	7
 15647  08FB  3000               	movlw	0
 15648  08FC  3FC0               	movwi [0]fsr1
 15649  08FD  3FC1               	movwi [1]fsr1
 15650                           
 15651                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 15652  08FE  3001               	movlw	1
 15653  08FF  00B6               	movwf	??_DlyOff_Main
 15654  0900  0878               	movf	_DelayOff,w
 15655  0901  3E04               	addlw	4
 15656  0902  0086               	movwf	6
 15657  0903  3001               	movlw	1	; select bank2/3
 15658  0904  0087               	movwf	7
 15659  0905  0836               	movf	??_DlyOff_Main,w
 15660  0906  0781               	addwf	1,f
 15661                           
 15662                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 15663  0907  0878               	movf	_DelayOff,w
 15664  0908  3E04               	addlw	4
 15665  0909  0086               	movwf	6
 15666  090A  3001               	movlw	1	; select bank2/3
 15667  090B  0087               	movwf	7
 15668  090C  0A78               	incf	_DelayOff,w
 15669  090D  0084               	movwf	4
 15670  090E  3001               	movlw	1	; select bank2/3
 15671  090F  0085               	movwf	5
 15672  0910  0800               	movf	0,w
 15673  0911  0201               	subwf	1,w
 15674  0912  1C03               	skipc
 15675  0913  0008               	return
 15676                           
 15677                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 15678  0914  0878               	movf	_DelayOff,w
 15679  0915  3E04               	addlw	4
 15680  0916  0086               	movwf	6
 15681  0917  3001               	movlw	1	; select bank2/3
 15682  0918  0087               	movwf	7
 15683  0919  0181               	clrf	1
 15684                           
 15685                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 15686  091A  0878               	movf	_DelayOff,w
 15687  091B  0086               	movwf	6
 15688  091C  3001               	movlw	1	; select bank2/3
 15689  091D  0087               	movwf	7
 15690  091E  1081               	bcf	1,1
 15691                           
 15692                           ;DelayOff_B1.c: 72: setBuz(1, 100);
 15693  091F  3064               	movlw	100
 15694  0920  00A9               	movwf	setBuz@time
 15695  0921  3000               	movlw	0
 15696  0922  00AA               	movwf	setBuz@time+1
 15697  0923  3001               	movlw	1
 15698  0924  3196  2698  3188   	fcall	_setBuz
 15699                           
 15700                           ;DelayOff_B1.c: 75: setDimmerLights_ErrorClose(sw);
 15701  0927  0020               	movlb	0	; select bank0
 15702  0928  0838               	movf	DlyOff_Main@sw,w
 15703  0929  3197  274A         	fcall	_setDimmerLights_ErrorClose
 15704  092B  0008               	return
 15705  092C                     __end_of_DlyOff_Main:	
 15706                           
 15707                           	psect	text97
 15708  174A                     __ptext97:	
 15709 ;; *************** function _setDimmerLights_ErrorClose *****************
 15710 ;; Defined at:
 15711 ;;		line 562 in file "../src/Dimmer_B1.c"
 15712 ;; Parameters:    Size  Location     Type
 15713 ;;  lights          1    wreg     unsigned char 
 15714 ;; Auto vars:     Size  Location     Type
 15715 ;;  lights          1   19[BANK0 ] unsigned char 
 15716 ;;  i               2   20[BANK0 ] int 
 15717 ;;  count           1   18[BANK0 ] unsigned char 
 15718 ;; Return value:  Size  Location     Type
 15719 ;;		None               void
 15720 ;; Registers used:
 15721 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15722 ;; Tracked objects:
 15723 ;;		On entry : 0/0
 15724 ;;		On exit  : 0/0
 15725 ;;		Unchanged: 0/0
 15726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15728 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15729 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15730 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15731 ;;Total ram usage:        5 bytes
 15732 ;; Hardware stack levels used:    1
 15733 ;; Hardware stack levels required when called:    9
 15734 ;; This function calls:
 15735 ;;		_DimmerLightsPointSelect
 15736 ;;		_getDimmerLights_Status
 15737 ;;		_setDimmerLights_SwOff
 15738 ;; This function is called by:
 15739 ;;		_DlyOff_Main
 15740 ;;		_setControl_Lights_Table
 15741 ;;		_setMain_Exception
 15742 ;; This function uses a non-reentrant model
 15743 ;;
 15744                           
 15745                           
 15746                           ;psect for function _setDimmerLights_ErrorClose
 15747  174A                     _setDimmerLights_ErrorClose:	
 15748                           
 15749                           ;incstack = 0
 15750                           ; Regs used in _setDimmerLights_ErrorClose: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 15751                           ;setDimmerLights_ErrorClose@lights stored from wreg
 15752  174A  0020               	movlb	0	; select bank0
 15753  174B  00B3               	movwf	setDimmerLights_ErrorClose@lights
 15754                           
 15755                           ;Dimmer_B1.c: 563: if (lights == 255) {
 15756  174C  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15757  174D  3AFF               	xorlw	255
 15758  174E  1D03               	skipz
 15759  174F  2F87               	goto	l6470
 15760                           
 15761                           ;Dimmer_B1.c: 568: char count = 2;
 15762  1750  3002               	movlw	2
 15763  1751  00B1               	movwf	??_setDimmerLights_ErrorClose
 15764  1752  0831               	movf	??_setDimmerLights_ErrorClose,w
 15765  1753  00B2               	movwf	setDimmerLights_ErrorClose@count
 15766                           
 15767                           ;Dimmer_B1.c: 573: for (int i = 0; i < count; i++) {
 15768  1754  01B4               	clrf	setDimmerLights_ErrorClose@i
 15769  1755  01B5               	clrf	setDimmerLights_ErrorClose@i+1
 15770  1756                     l6468:	
 15771  1756  0835               	movf	setDimmerLights_ErrorClose@i+1,w
 15772  1757  3A80               	xorlw	128
 15773  1758  00B1               	movwf	??_setDimmerLights_ErrorClose
 15774  1759  3080               	movlw	128
 15775  175A  0231               	subwf	??_setDimmerLights_ErrorClose,w
 15776  175B  1D03               	skipz
 15777  175C  2F5F               	goto	u5425
 15778  175D  0832               	movf	setDimmerLights_ErrorClose@count,w
 15779  175E  0234               	subwf	setDimmerLights_ErrorClose@i,w
 15780  175F                     u5425:	
 15781  175F  1803               	btfsc	3,0
 15782  1760  0008               	return
 15783                           
 15784                           ;Dimmer_B1.c: 574: DimmerLightsPointSelect(i + 1);
 15785  1761  0020               	movlb	0	; select bank0
 15786  1762  0834               	movf	setDimmerLights_ErrorClose@i,w
 15787  1763  3E01               	addlw	1
 15788  1764  319C  24B4  3197   	fcall	_DimmerLightsPointSelect
 15789                           
 15790                           ;Dimmer_B1.c: 575: if (getDimmerLights_Status(i + 1) == 1) {
 15791  1767  0020               	movlb	0	; select bank0
 15792  1768  0834               	movf	setDimmerLights_ErrorClose@i,w
 15793  1769  3E01               	addlw	1
 15794  176A  319C  2408  3197   	fcall	_getDimmerLights_Status
 15795  176D  3A01               	xorlw	1
 15796  176E  1D03               	skipz
 15797  176F  2F81               	goto	l6466
 15798                           
 15799                           ;Dimmer_B1.c: 576: DimmerLights->SwFlag = 1;
 15800  1770  0020               	movlb	0	; select bank0
 15801  1771  086F               	movf	_DimmerLights,w
 15802  1772  3E09               	addlw	9
 15803  1773  0086               	movwf	6
 15804  1774  3001               	movlw	1	; select bank2/3
 15805  1775  0087               	movwf	7
 15806  1776  1701               	bsf	1,6
 15807                           
 15808                           ;Dimmer_B1.c: 577: DimmerLights->Status = 0;
 15809  1777  086F               	movf	_DimmerLights,w
 15810  1778  0086               	movwf	6
 15811  1779  3001               	movlw	1	; select bank2/3
 15812  177A  0087               	movwf	7
 15813  177B  1281               	bcf	1,5
 15814                           
 15815                           ;Dimmer_B1.c: 578: setDimmerLights_SwOff(i + 1);
 15816  177C  0834               	movf	setDimmerLights_ErrorClose@i,w
 15817  177D  3E01               	addlw	1
 15818  177E  3194  246C  3197   	fcall	_setDimmerLights_SwOff
 15819  1781                     l6466:	
 15820  1781  3001               	movlw	1
 15821  1782  0020               	movlb	0	; select bank0
 15822  1783  07B4               	addwf	setDimmerLights_ErrorClose@i,f
 15823  1784  3000               	movlw	0
 15824  1785  3DB5               	addwfc	setDimmerLights_ErrorClose@i+1,f
 15825  1786  2F56               	goto	l6468
 15826  1787                     l6470:	
 15827                           ;Dimmer_B1.c: 579: }
 15828                           ;Dimmer_B1.c: 580: }
 15829                           ;Dimmer_B1.c: 581: } else {
 15830                           
 15831                           
 15832                           ;Dimmer_B1.c: 582: DimmerLightsPointSelect(lights);
 15833  1787  0020               	movlb	0	; select bank0
 15834  1788  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15835  1789  319C  24B4  3197   	fcall	_DimmerLightsPointSelect
 15836                           
 15837                           ;Dimmer_B1.c: 583: if (getDimmerLights_Status(lights) == 1) {
 15838  178C  0020               	movlb	0	; select bank0
 15839  178D  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15840  178E  319C  2408  3197   	fcall	_getDimmerLights_Status
 15841  1791  3A01               	xorlw	1
 15842  1792  1D03               	skipz
 15843  1793  0008               	return
 15844                           
 15845                           ;Dimmer_B1.c: 584: DimmerLights->SwFlag = 1;
 15846  1794  0020               	movlb	0	; select bank0
 15847  1795  086F               	movf	_DimmerLights,w
 15848  1796  3E09               	addlw	9
 15849  1797  0086               	movwf	6
 15850  1798  3001               	movlw	1	; select bank2/3
 15851  1799  0087               	movwf	7
 15852  179A  1701               	bsf	1,6
 15853                           
 15854                           ;Dimmer_B1.c: 585: DimmerLights->Status = 0;
 15855  179B  086F               	movf	_DimmerLights,w
 15856  179C  0086               	movwf	6
 15857  179D  3001               	movlw	1	; select bank2/3
 15858  179E  0087               	movwf	7
 15859  179F  1281               	bcf	1,5
 15860                           
 15861                           ;Dimmer_B1.c: 586: setDimmerLights_SwOff(lights);
 15862  17A0  0833               	movf	setDimmerLights_ErrorClose@lights,w
 15863  17A1  3194  246C         	fcall	_setDimmerLights_SwOff
 15864  17A3  0008               	return
 15865  17A4                     __end_of_setDimmerLights_ErrorClose:	
 15866                           
 15867                           	psect	text98
 15868  146C                     __ptext98:	
 15869 ;; *************** function _setDimmerLights_SwOff *****************
 15870 ;; Defined at:
 15871 ;;		line 524 in file "../src/Dimmer_B1.c"
 15872 ;; Parameters:    Size  Location     Type
 15873 ;;  sw              1    wreg     unsigned char 
 15874 ;; Auto vars:     Size  Location     Type
 15875 ;;  sw              1   16[BANK0 ] unsigned char 
 15876 ;;  command         1   15[BANK0 ] unsigned char 
 15877 ;; Return value:  Size  Location     Type
 15878 ;;		None               void
 15879 ;; Registers used:
 15880 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15881 ;; Tracked objects:
 15882 ;;		On entry : 0/0
 15883 ;;		On exit  : 0/0
 15884 ;;		Unchanged: 0/0
 15885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15887 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15888 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15889 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15890 ;;Total ram usage:        2 bytes
 15891 ;; Hardware stack levels used:    1
 15892 ;; Hardware stack levels required when called:    8
 15893 ;; This function calls:
 15894 ;;		_DimmerLightsPointSelect
 15895 ;;		_getDelayOff_GO
 15896 ;;		_setDelayOff_GO
 15897 ;;		_setDimmerLights_Trigger
 15898 ;;		_setDimmerLights_TriggerAdj
 15899 ;; This function is called by:
 15900 ;;		_setDimmerLights_ErrorClose
 15901 ;;		_setRFSW_Control
 15902 ;;		_setSw_Main
 15903 ;; This function uses a non-reentrant model
 15904 ;;
 15905                           
 15906                           
 15907                           ;psect for function _setDimmerLights_SwOff
 15908  146C                     _setDimmerLights_SwOff:	
 15909                           
 15910                           ;incstack = 0
 15911                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 15912                           ;setDimmerLights_SwOff@sw stored from wreg
 15913  146C  0020               	movlb	0	; select bank0
 15914  146D  00B0               	movwf	setDimmerLights_SwOff@sw
 15915                           
 15916                           ;Dimmer_B1.c: 525: DimmerLightsPointSelect(sw);
 15917  146E  0830               	movf	setDimmerLights_SwOff@sw,w
 15918  146F  319C  24B4  3194   	fcall	_DimmerLightsPointSelect
 15919                           
 15920                           ;Dimmer_B1.c: 526: char command = DimmerLights->Status == 1 ? 1 : 0;
 15921  1472  0020               	movlb	0	; select bank0
 15922  1473  086F               	movf	_DimmerLights,w
 15923  1474  0086               	movwf	6
 15924  1475  3001               	movlw	1	; select bank2/3
 15925  1476  0087               	movwf	7
 15926  1477  3000               	movlw	0
 15927  1478  1A81               	btfsc	1,5
 15928  1479  3001               	movlw	1
 15929  147A  00AF               	movwf	setDimmerLights_SwOff@command
 15930                           
 15931                           ;Dimmer_B1.c: 527: if (DimmerLights->SwFlag == 1) {
 15932  147B  086F               	movf	_DimmerLights,w
 15933  147C  3E09               	addlw	9
 15934  147D  0086               	movwf	6
 15935  147E  3001               	movlw	1	; select bank2/3
 15936  147F  0087               	movwf	7
 15937  1480  1F01               	btfss	1,6
 15938  1481  0008               	return
 15939                           
 15940                           ;Dimmer_B1.c: 528: DimmerLights->SwFlag = 0;
 15941  1482  086F               	movf	_DimmerLights,w
 15942  1483  3E09               	addlw	9
 15943  1484  0086               	movwf	6
 15944  1485  3001               	movlw	1	; select bank2/3
 15945  1486  0087               	movwf	7
 15946  1487  1301               	bcf	1,6
 15947                           
 15948                           ;Dimmer_B1.c: 529: if (DimmerLights->Status == 1) {
 15949  1488  086F               	movf	_DimmerLights,w
 15950  1489  0086               	movwf	6
 15951  148A  3001               	movlw	1	; select bank2/3
 15952  148B  0087               	movwf	7
 15953  148C  1E81               	btfss	1,5
 15954  148D  2CA0               	goto	l6326
 15955                           
 15956                           ;Dimmer_B1.c: 530: if (DimmerLights->SwAdj == 1) {
 15957  148E  086F               	movf	_DimmerLights,w
 15958  148F  3E09               	addlw	9
 15959  1490  0086               	movwf	6
 15960  1491  3001               	movlw	1	; select bank2/3
 15961  1492  0087               	movwf	7
 15962  1493  1F81               	btfss	1,7
 15963  1494  0008               	return
 15964                           
 15965                           ;Dimmer_B1.c: 531: DimmerLights->SwAdj = 0;
 15966  1495  086F               	movf	_DimmerLights,w
 15967  1496  3E09               	addlw	9
 15968  1497  0086               	movwf	6
 15969  1498  3001               	movlw	1	; select bank2/3
 15970  1499  0087               	movwf	7
 15971  149A  1381               	bcf	1,7
 15972                           
 15973                           ;Dimmer_B1.c: 532: setDimmerLights_TriggerAdj(sw, 0);
 15974  149B  01A2               	clrf	setDimmerLights_TriggerAdj@command
 15975  149C  0830               	movf	setDimmerLights_SwOff@sw,w
 15976  149D  319E  26A7         	fcall	_setDimmerLights_TriggerAdj
 15977                           
 15978                           ;Dimmer_B1.c: 533: }
 15979                           ;Dimmer_B1.c: 534: } else {
 15980  149F  0008               	return
 15981  14A0                     l6326:	
 15982                           
 15983                           ;Dimmer_B1.c: 535: setDimmerLights_Trigger(sw, 0);
 15984  14A0  0020               	movlb	0	; select bank0
 15985  14A1  01A2               	clrf	setDimmerLights_Trigger@command
 15986  14A2  0830               	movf	setDimmerLights_SwOff@sw,w
 15987  14A3  3187  27E2  3194   	fcall	_setDimmerLights_Trigger
 15988                           
 15989                           ;Dimmer_B1.c: 537: if (getDelayOff_GO(sw) == 1) {
 15990  14A6  0020               	movlb	0	; select bank0
 15991  14A7  0830               	movf	setDimmerLights_SwOff@sw,w
 15992  14A8  319C  2418  3194   	fcall	_getDelayOff_GO
 15993  14AB  3A01               	xorlw	1
 15994  14AC  1D03               	skipz
 15995  14AD  0008               	return
 15996                           
 15997                           ;Dimmer_B1.c: 538: setDelayOff_GO(sw, 0, 0);
 15998  14AE  0020               	movlb	0	; select bank0
 15999  14AF  01AA               	clrf	setDelayOff_GO@command
 16000  14B0  01AB               	clrf	setDelayOff_GO@value
 16001  14B1  0830               	movf	setDimmerLights_SwOff@sw,w
 16002  14B2  3188  2072         	fcall	_setDelayOff_GO
 16003  14B4  0008               	return
 16004  14B5                     __end_of_setDimmerLights_SwOff:	
 16005                           
 16006                           	psect	text99
 16007  1EA7                     __ptext99:	
 16008 ;; *************** function _setDimmerLights_TriggerAdj *****************
 16009 ;; Defined at:
 16010 ;;		line 773 in file "../src/Dimmer_B1.c"
 16011 ;; Parameters:    Size  Location     Type
 16012 ;;  lights          1    wreg     unsigned char 
 16013 ;;  command         1    2[BANK0 ] unsigned char 
 16014 ;; Auto vars:     Size  Location     Type
 16015 ;;  lights          1    4[BANK0 ] unsigned char 
 16016 ;; Return value:  Size  Location     Type
 16017 ;;		None               void
 16018 ;; Registers used:
 16019 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16020 ;; Tracked objects:
 16021 ;;		On entry : 0/0
 16022 ;;		On exit  : 0/0
 16023 ;;		Unchanged: 0/0
 16024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16025 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16026 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16027 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16028 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16029 ;;Total ram usage:        3 bytes
 16030 ;; Hardware stack levels used:    1
 16031 ;; Hardware stack levels required when called:    6
 16032 ;; This function calls:
 16033 ;;		_DimmerLightsPointSelect
 16034 ;; This function is called by:
 16035 ;;		_setDimmerLights_SwOff
 16036 ;;		_setDimmerLights_AdjControl
 16037 ;; This function uses a non-reentrant model
 16038 ;;
 16039                           
 16040                           
 16041                           ;psect for function _setDimmerLights_TriggerAdj
 16042  1EA7                     _setDimmerLights_TriggerAdj:	
 16043                           
 16044                           ;incstack = 0
 16045                           ; Regs used in _setDimmerLights_TriggerAdj: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 16046                           ;setDimmerLights_TriggerAdj@lights stored from wreg
 16047  1EA7  0020               	movlb	0	; select bank0
 16048  1EA8  00A4               	movwf	setDimmerLights_TriggerAdj@lights
 16049                           
 16050                           ;Dimmer_B1.c: 774: DimmerLightsPointSelect(lights);
 16051  1EA9  0824               	movf	setDimmerLights_TriggerAdj@lights,w
 16052  1EAA  319C  24B4         	fcall	_DimmerLightsPointSelect
 16053                           
 16054                           ;Dimmer_B1.c: 775: DimmerLights->TriggerAdj = 1;
 16055  1EAC  0020               	movlb	0	; select bank0
 16056  1EAD  086F               	movf	_DimmerLights,w
 16057  1EAE  3E08               	addlw	8
 16058  1EAF  0086               	movwf	6
 16059  1EB0  3001               	movlw	1	; select bank2/3
 16060  1EB1  0087               	movwf	7
 16061  1EB2  1601               	bsf	1,4
 16062                           
 16063                           ;Dimmer_B1.c: 776: DimmerLights->AdjGo = command == 1 ? 1 : 0;
 16064  1EB3  0822               	movf	setDimmerLights_TriggerAdj@command,w
 16065  1EB4  3A01               	xorlw	1
 16066  1EB5  3000               	movlw	0
 16067  1EB6  1903               	skipnz
 16068  1EB7  3001               	movlw	1
 16069  1EB8  00A3               	movwf	??_setDimmerLights_TriggerAdj
 16070  1EB9  086F               	movf	_DimmerLights,w
 16071  1EBA  3E08               	addlw	8
 16072  1EBB  0086               	movwf	6
 16073  1EBC  3001               	movlw	1	; select bank2/3
 16074  1EBD  0087               	movwf	7
 16075  1EBE  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 16076  1EBF  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 16077  1EC0  0DA3               	rlf	??_setDimmerLights_TriggerAdj,f
 16078  1EC1  0801               	movf	1,w
 16079  1EC2  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 16080  1EC3  39F7               	andlw	-9
 16081  1EC4  0623               	xorwf	??_setDimmerLights_TriggerAdj,w
 16082  1EC5  0081               	movwf	1
 16083  1EC6  0008               	return
 16084  1EC7                     __end_of_setDimmerLights_TriggerAdj:	
 16085                           
 16086                           	psect	text100
 16087  07E2                     __ptext100:	
 16088 ;; *************** function _setDimmerLights_Trigger *****************
 16089 ;; Defined at:
 16090 ;;		line 767 in file "../src/Dimmer_B1.c"
 16091 ;; Parameters:    Size  Location     Type
 16092 ;;  lights          1    wreg     unsigned char 
 16093 ;;  command         1    2[BANK0 ] unsigned char 
 16094 ;; Auto vars:     Size  Location     Type
 16095 ;;  lights          1    4[BANK0 ] unsigned char 
 16096 ;; Return value:  Size  Location     Type
 16097 ;;		None               void
 16098 ;; Registers used:
 16099 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16100 ;; Tracked objects:
 16101 ;;		On entry : 0/0
 16102 ;;		On exit  : 0/0
 16103 ;;		Unchanged: 0/0
 16104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16105 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16106 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16107 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16108 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16109 ;;Total ram usage:        3 bytes
 16110 ;; Hardware stack levels used:    1
 16111 ;; Hardware stack levels required when called:    6
 16112 ;; This function calls:
 16113 ;;		_DimmerLightsPointSelect
 16114 ;; This function is called by:
 16115 ;;		_setDimmerLights_SwOn
 16116 ;;		_setDimmerLights_SwOff
 16117 ;; This function uses a non-reentrant model
 16118 ;;
 16119                           
 16120                           
 16121                           ;psect for function _setDimmerLights_Trigger
 16122  07E2                     _setDimmerLights_Trigger:	
 16123                           
 16124                           ;incstack = 0
 16125                           ; Regs used in _setDimmerLights_Trigger: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 16126                           ;setDimmerLights_Trigger@lights stored from wreg
 16127  07E2  0020               	movlb	0	; select bank0
 16128  07E3  00A4               	movwf	setDimmerLights_Trigger@lights
 16129                           
 16130                           ;Dimmer_B1.c: 768: DimmerLightsPointSelect(lights);
 16131  07E4  0824               	movf	setDimmerLights_Trigger@lights,w
 16132  07E5  319C  24B4         	fcall	_DimmerLightsPointSelect
 16133                           
 16134                           ;Dimmer_B1.c: 769: DimmerLights->Trigger = 1;
 16135  07E7  0020               	movlb	0	; select bank0
 16136  07E8  086F               	movf	_DimmerLights,w
 16137  07E9  3E08               	addlw	8
 16138  07EA  0086               	movwf	6
 16139  07EB  3001               	movlw	1	; select bank2/3
 16140  07EC  0087               	movwf	7
 16141  07ED  1501               	bsf	1,2
 16142                           
 16143                           ;Dimmer_B1.c: 770: DimmerLights->Switch = command == 1 ? 1 : 0;
 16144  07EE  0822               	movf	setDimmerLights_Trigger@command,w
 16145  07EF  3A01               	xorlw	1
 16146  07F0  3000               	movlw	0
 16147  07F1  1903               	skipnz
 16148  07F2  3001               	movlw	1
 16149  07F3  00A3               	movwf	??_setDimmerLights_Trigger
 16150  07F4  086F               	movf	_DimmerLights,w
 16151  07F5  3E08               	addlw	8
 16152  07F6  0086               	movwf	6
 16153  07F7  3001               	movlw	1	; select bank2/3
 16154  07F8  0087               	movwf	7
 16155  07F9  0DA3               	rlf	??_setDimmerLights_Trigger,f
 16156  07FA  0801               	movf	1,w
 16157  07FB  0623               	xorwf	??_setDimmerLights_Trigger,w
 16158  07FC  39FD               	andlw	-3
 16159  07FD  0623               	xorwf	??_setDimmerLights_Trigger,w
 16160  07FE  0081               	movwf	1
 16161  07FF  0008               	return
 16162  0800                     __end_of_setDimmerLights_Trigger:	
 16163                           
 16164                           	psect	text101
 16165  0872                     __ptext101:	
 16166 ;; *************** function _setDelayOff_GO *****************
 16167 ;; Defined at:
 16168 ;;		line 83 in file "../src/DelayOff_B1.c"
 16169 ;; Parameters:    Size  Location     Type
 16170 ;;  sw              1    wreg     unsigned char 
 16171 ;;  command         1   10[BANK0 ] unsigned char 
 16172 ;;  value           1   11[BANK0 ] unsigned char 
 16173 ;; Auto vars:     Size  Location     Type
 16174 ;;  sw              1   14[BANK0 ] unsigned char 
 16175 ;; Return value:  Size  Location     Type
 16176 ;;		None               void
 16177 ;; Registers used:
 16178 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16179 ;; Tracked objects:
 16180 ;;		On entry : 0/0
 16181 ;;		On exit  : 0/0
 16182 ;;		Unchanged: 0/0
 16183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16184 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16185 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16186 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16187 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16188 ;;Total ram usage:        5 bytes
 16189 ;; Hardware stack levels used:    1
 16190 ;; Hardware stack levels required when called:    7
 16191 ;; This function calls:
 16192 ;;		_DelayOffPointSelect
 16193 ;;		_DelayTimejudge
 16194 ;; This function is called by:
 16195 ;;		_setDimmerLights_SwOff
 16196 ;;		_setRFSW_Control
 16197 ;; This function uses a non-reentrant model
 16198 ;;
 16199                           
 16200                           
 16201                           ;psect for function _setDelayOff_GO
 16202  0872                     _setDelayOff_GO:	
 16203                           
 16204                           ;incstack = 0
 16205                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16206                           ;setDelayOff_GO@sw stored from wreg
 16207  0872  0020               	movlb	0	; select bank0
 16208  0873  00AE               	movwf	setDelayOff_GO@sw
 16209                           
 16210                           ;DelayOff_B1.c: 86: DelayOffPointSelect(sw);
 16211  0874  082E               	movf	setDelayOff_GO@sw,w
 16212  0875  319D  2528  3188   	fcall	_DelayOffPointSelect
 16213                           
 16214                           ;DelayOff_B1.c: 87: DelayOff->GO = command == 1 ? 1 : 0;
 16215  0878  0020               	movlb	0	; select bank0
 16216  0879  082A               	movf	setDelayOff_GO@command,w
 16217  087A  3A01               	xorlw	1
 16218  087B  3000               	movlw	0
 16219  087C  1903               	skipnz
 16220  087D  3001               	movlw	1
 16221  087E  00AC               	movwf	??_setDelayOff_GO
 16222  087F  0878               	movf	_DelayOff,w
 16223  0880  0086               	movwf	6
 16224  0881  3001               	movlw	1	; select bank2/3
 16225  0882  0087               	movwf	7
 16226  0883  0DAC               	rlf	??_setDelayOff_GO,f
 16227  0884  0801               	movf	1,w
 16228  0885  062C               	xorwf	??_setDelayOff_GO,w
 16229  0886  39FD               	andlw	-3
 16230  0887  062C               	xorwf	??_setDelayOff_GO,w
 16231  0888  0081               	movwf	1
 16232                           
 16233                           ;DelayOff_B1.c: 89: if (command == 1) {
 16234  0889  082A               	movf	setDelayOff_GO@command,w
 16235  088A  3A01               	xorlw	1
 16236  088B  1D03               	skipz
 16237  088C  28B7               	goto	l6236
 16238                           
 16239                           ;DelayOff_B1.c: 90: DelayOff->Value = DelayTimejudge(value);
 16240  088D  082B               	movf	setDelayOff_GO@value,w
 16241  088E  3190  20C1  3188   	fcall	_DelayTimejudge
 16242  0891  0020               	movlb	0	; select bank0
 16243  0892  00AC               	movwf	??_setDelayOff_GO
 16244  0893  0A78               	incf	_DelayOff,w
 16245  0894  0086               	movwf	6
 16246  0895  3001               	movlw	1	; select bank2/3
 16247  0896  0087               	movwf	7
 16248  0897  082C               	movf	??_setDelayOff_GO,w
 16249  0898  0081               	movwf	1
 16250                           
 16251                           ;DelayOff_B1.c: 91: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x25) {
 16252  0899  300F               	movlw	15
 16253  089A  052B               	andwf	setDelayOff_GO@value,w
 16254  089B  00AC               	movwf	??_setDelayOff_GO
 16255  089C  082C               	movf	??_setDelayOff_GO,w
 16256  089D  3A05               	xorlw	5
 16257  089E  1903               	skipnz
 16258  089F  28A4               	goto	l6230
 16259  08A0  082B               	movf	setDelayOff_GO@value,w
 16260  08A1  390F               	andlw	15
 16261  08A2  1D03               	btfss	3,2
 16262  08A3  28AA               	goto	l6234
 16263  08A4                     l6230:	
 16264  08A4  3026               	movlw	38
 16265  08A5  022B               	subwf	setDelayOff_GO@value,w
 16266  08A6  1803               	skipnc
 16267  08A7  28AA               	goto	l6234
 16268                           
 16269                           ;DelayOff_B1.c: 92: product->Data[26 + sw]=value;
 16270  08A8  082B               	movf	setDelayOff_GO@value,w
 16271  08A9  28AB               	goto	L9
 16272  08AA                     l6234:	
 16273                           ;DelayOff_B1.c: 93: } else {
 16274                           
 16275                           
 16276                           ;DelayOff_B1.c: 94: product->Data[26 + sw]=0x05;
 16277  08AA  3005               	movlw	5
 16278  08AB                     L9:	
 16279  08AB  00AC               	movwf	??_setDelayOff_GO
 16280  08AC  082E               	movf	setDelayOff_GO@sw,w
 16281  08AD  3E1A               	addlw	26
 16282  08AE  076E               	addwf	_product,w
 16283  08AF  00AD               	movwf	??_setDelayOff_GO+1
 16284  08B0  082D               	movf	??_setDelayOff_GO+1,w
 16285  08B1  0086               	movwf	6
 16286  08B2  3002               	movlw	2	; select bank4/5
 16287  08B3  0087               	movwf	7
 16288  08B4  082C               	movf	??_setDelayOff_GO,w
 16289  08B5  0081               	movwf	1
 16290                           
 16291                           ;DelayOff_B1.c: 95: }
 16292                           ;DelayOff_B1.c: 96: } else {
 16293  08B6  28C0               	goto	l6238
 16294  08B7                     l6236:	
 16295                           
 16296                           ;DelayOff_B1.c: 97: product->Data[sw + 26]=0;
 16297  08B7  082E               	movf	setDelayOff_GO@sw,w
 16298  08B8  3E1A               	addlw	26
 16299  08B9  076E               	addwf	_product,w
 16300  08BA  00AC               	movwf	??_setDelayOff_GO
 16301  08BB  082C               	movf	??_setDelayOff_GO,w
 16302  08BC  0086               	movwf	6
 16303  08BD  3002               	movlw	2	; select bank4/5
 16304  08BE  0087               	movwf	7
 16305  08BF  0181               	clrf	1
 16306  08C0                     l6238:	
 16307                           
 16308                           ;DelayOff_B1.c: 98: }
 16309                           ;DelayOff_B1.c: 99: DelayOff->SecondTime = 0;
 16310  08C0  0878               	movf	_DelayOff,w
 16311  08C1  3E02               	addlw	2
 16312  08C2  0086               	movwf	6
 16313  08C3  3001               	movlw	1	; select bank2/3
 16314  08C4  0087               	movwf	7
 16315  08C5  3000               	movlw	0
 16316  08C6  3FC0               	movwi [0]fsr1
 16317  08C7  3FC1               	movwi [1]fsr1
 16318                           
 16319                           ;DelayOff_B1.c: 100: DelayOff->MinuteTime = 0;
 16320  08C8  0878               	movf	_DelayOff,w
 16321  08C9  3E04               	addlw	4
 16322  08CA  0086               	movwf	6
 16323  08CB  3001               	movlw	1	; select bank2/3
 16324  08CC  0087               	movwf	7
 16325  08CD  0181               	clrf	1
 16326  08CE  0008               	return
 16327  08CF                     __end_of_setDelayOff_GO:	
 16328                           
 16329                           	psect	text102
 16330  10C1                     __ptext102:	
 16331 ;; *************** function _DelayTimejudge *****************
 16332 ;; Defined at:
 16333 ;;		line 112 in file "../src/DelayOff_B1.c"
 16334 ;; Parameters:    Size  Location     Type
 16335 ;;  value           1    wreg     unsigned char 
 16336 ;; Auto vars:     Size  Location     Type
 16337 ;;  value           1    9[BANK0 ] unsigned char 
 16338 ;;  k               1    8[BANK0 ] unsigned char 
 16339 ;;  j               1    7[BANK0 ] unsigned char 
 16340 ;;  i               1    6[BANK0 ] unsigned char 
 16341 ;; Return value:  Size  Location     Type
 16342 ;;                  1    wreg      unsigned char 
 16343 ;; Registers used:
 16344 ;;		wreg, status,2, status,0, pclath, cstack
 16345 ;; Tracked objects:
 16346 ;;		On entry : 0/0
 16347 ;;		On exit  : 0/0
 16348 ;;		Unchanged: 0/0
 16349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16351 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16352 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16353 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16354 ;;Total ram usage:        6 bytes
 16355 ;; Hardware stack levels used:    1
 16356 ;; Hardware stack levels required when called:    6
 16357 ;; This function calls:
 16358 ;;		___bmul
 16359 ;; This function is called by:
 16360 ;;		_setDelayOff_GO
 16361 ;; This function uses a non-reentrant model
 16362 ;;
 16363                           
 16364                           
 16365                           ;psect for function _DelayTimejudge
 16366  10C1                     _DelayTimejudge:	
 16367                           
 16368                           ;incstack = 0
 16369                           ; Regs used in _DelayTimejudge: [wreg+status,2+status,0+pclath+cstack]
 16370                           ;DelayTimejudge@value stored from wreg
 16371  10C1  0020               	movlb	0	; select bank0
 16372  10C2  00A9               	movwf	DelayTimejudge@value
 16373                           
 16374                           ;DelayOff_B1.c: 113: char i = 5, j = 0, k = 0;
 16375  10C3  3005               	movlw	5
 16376  10C4  00A4               	movwf	??_DelayTimejudge
 16377  10C5  0824               	movf	??_DelayTimejudge,w
 16378  10C6  00A6               	movwf	DelayTimejudge@i
 16379  10C7  01A7               	clrf	DelayTimejudge@j
 16380  10C8  01A8               	clrf	DelayTimejudge@k
 16381                           
 16382                           ;DelayOff_B1.c: 114: if (value <= 0x30) {
 16383  10C9  3031               	movlw	49
 16384  10CA  0229               	subwf	DelayTimejudge@value,w
 16385  10CB  1803               	skipnc
 16386  10CC  28E9               	goto	l6128
 16387                           
 16388                           ;DelayOff_B1.c: 115: j = value & 0x0f;
 16389  10CD  0829               	movf	DelayTimejudge@value,w
 16390  10CE  390F               	andlw	15
 16391  10CF  00A4               	movwf	??_DelayTimejudge
 16392  10D0  0824               	movf	??_DelayTimejudge,w
 16393  10D1  00A7               	movwf	DelayTimejudge@j
 16394                           
 16395                           ;DelayOff_B1.c: 116: k = (value >> 4) & 0x0f;
 16396  10D2  0829               	movf	DelayTimejudge@value,w
 16397  10D3  00A4               	movwf	??_DelayTimejudge
 16398  10D4  3004               	movlw	4
 16399  10D5                     u4995:	
 16400  10D5  36A4               	lsrf	??_DelayTimejudge,f
 16401  10D6  0B89               	decfsz	9,f
 16402  10D7  28D5               	goto	u4995
 16403  10D8  0824               	movf	??_DelayTimejudge,w
 16404  10D9  390F               	andlw	15
 16405  10DA  00A5               	movwf	??_DelayTimejudge+1
 16406  10DB  0825               	movf	??_DelayTimejudge+1,w
 16407  10DC  00A8               	movwf	DelayTimejudge@k
 16408                           
 16409                           ;DelayOff_B1.c: 117: i = j + (k * 10);
 16410  10DD  300A               	movlw	10
 16411  10DE  00A4               	movwf	??_DelayTimejudge
 16412  10DF  0824               	movf	??_DelayTimejudge,w
 16413  10E0  00A0               	movwf	___bmul@multiplicand
 16414  10E1  0828               	movf	DelayTimejudge@k,w
 16415  10E2  319C  247E         	fcall	___bmul
 16416  10E4  0020               	movlb	0	; select bank0
 16417  10E5  0727               	addwf	DelayTimejudge@j,w
 16418  10E6  00A5               	movwf	??_DelayTimejudge+1
 16419  10E7  0825               	movf	??_DelayTimejudge+1,w
 16420  10E8  00A6               	movwf	DelayTimejudge@i
 16421  10E9                     l6128:	
 16422                           
 16423                           ;DelayOff_B1.c: 118: }
 16424                           ;DelayOff_B1.c: 139: return i;
 16425  10E9  0826               	movf	DelayTimejudge@i,w
 16426  10EA  0008               	return
 16427  10EB                     __end_of_DelayTimejudge:	
 16428                           
 16429                           	psect	text103
 16430  1C7E                     __ptext103:	
 16431 ;; *************** function ___bmul *****************
 16432 ;; Defined at:
 16433 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 16434 ;; Parameters:    Size  Location     Type
 16435 ;;  multiplier      1    wreg     unsigned char 
 16436 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 16437 ;; Auto vars:     Size  Location     Type
 16438 ;;  multiplier      1    3[BANK0 ] unsigned char 
 16439 ;;  product         1    2[BANK0 ] unsigned char 
 16440 ;; Return value:  Size  Location     Type
 16441 ;;                  1    wreg      unsigned char 
 16442 ;; Registers used:
 16443 ;;		wreg, status,2, status,0
 16444 ;; Tracked objects:
 16445 ;;		On entry : 0/0
 16446 ;;		On exit  : 0/0
 16447 ;;		Unchanged: 0/0
 16448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16449 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16450 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16451 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16452 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16453 ;;Total ram usage:        4 bytes
 16454 ;; Hardware stack levels used:    1
 16455 ;; Hardware stack levels required when called:    5
 16456 ;; This function calls:
 16457 ;;		Nothing
 16458 ;; This function is called by:
 16459 ;;		_DelayTimejudge
 16460 ;; This function uses a non-reentrant model
 16461 ;;
 16462                           
 16463                           
 16464                           ;psect for function ___bmul
 16465  1C7E                     ___bmul:	
 16466                           
 16467                           ;incstack = 0
 16468                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 16469                           ;___bmul@multiplier stored from wreg
 16470  1C7E  0020               	movlb	0	; select bank0
 16471  1C7F  00A3               	movwf	___bmul@multiplier
 16472  1C80  01A2               	clrf	___bmul@product
 16473  1C81                     l5866:	
 16474  1C81  1C23               	btfss	___bmul@multiplier,0
 16475  1C82  2C87               	goto	l5870
 16476  1C83  0820               	movf	___bmul@multiplicand,w
 16477  1C84  00A1               	movwf	??___bmul
 16478  1C85  0821               	movf	??___bmul,w
 16479  1C86  07A2               	addwf	___bmul@product,f
 16480  1C87                     l5870:	
 16481  1C87  1003               	clrc
 16482  1C88  0DA0               	rlf	___bmul@multiplicand,f
 16483  1C89  1003               	clrc
 16484  1C8A  0CA3               	rrf	___bmul@multiplier,f
 16485  1C8B  08A3               	movf	___bmul@multiplier,f
 16486  1C8C  1D03               	skipz
 16487  1C8D  2C81               	goto	l5866
 16488  1C8E  0822               	movf	___bmul@product,w
 16489  1C8F  0008               	return
 16490  1C90                     __end_of___bmul:	
 16491                           
 16492                           	psect	text104
 16493  1C18                     __ptext104:	
 16494 ;; *************** function _getDelayOff_GO *****************
 16495 ;; Defined at:
 16496 ;;		line 105 in file "../src/DelayOff_B1.c"
 16497 ;; Parameters:    Size  Location     Type
 16498 ;;  sw              1    wreg     unsigned char 
 16499 ;; Auto vars:     Size  Location     Type
 16500 ;;  sw              1    2[BANK0 ] unsigned char 
 16501 ;;  go              1    3[BANK0 ] unsigned char 
 16502 ;; Return value:  Size  Location     Type
 16503 ;;                  1    wreg      unsigned char 
 16504 ;; Registers used:
 16505 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16506 ;; Tracked objects:
 16507 ;;		On entry : 0/0
 16508 ;;		On exit  : 0/0
 16509 ;;		Unchanged: 0/0
 16510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16511 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16512 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16514 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16515 ;;Total ram usage:        2 bytes
 16516 ;; Hardware stack levels used:    1
 16517 ;; Hardware stack levels required when called:    6
 16518 ;; This function calls:
 16519 ;;		_DelayOffPointSelect
 16520 ;; This function is called by:
 16521 ;;		_setDimmerLights_SwOff
 16522 ;;		_setRFSW_Control
 16523 ;; This function uses a non-reentrant model
 16524 ;;
 16525                           
 16526                           
 16527                           ;psect for function _getDelayOff_GO
 16528  1C18                     _getDelayOff_GO:	
 16529                           
 16530                           ;incstack = 0
 16531                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16532                           ;getDelayOff_GO@sw stored from wreg
 16533  1C18  0020               	movlb	0	; select bank0
 16534  1C19  00A2               	movwf	getDelayOff_GO@sw
 16535                           
 16536                           ;DelayOff_B1.c: 106: DelayOffPointSelect(sw);
 16537  1C1A  0822               	movf	getDelayOff_GO@sw,w
 16538  1C1B  319D  2528         	fcall	_DelayOffPointSelect
 16539                           
 16540                           ;DelayOff_B1.c: 107: char go = DelayOff->GO == 1 ? 1 : 0;
 16541  1C1D  0878               	movf	_DelayOff,w
 16542  1C1E  0086               	movwf	6
 16543  1C1F  3001               	movlw	1	; select bank2/3
 16544  1C20  0087               	movwf	7
 16545  1C21  3000               	movlw	0
 16546  1C22  1881               	btfsc	1,1
 16547  1C23  3001               	movlw	1
 16548  1C24  0020               	movlb	0	; select bank0
 16549  1C25  00A3               	movwf	getDelayOff_GO@go
 16550                           
 16551                           ;DelayOff_B1.c: 108: return go;
 16552  1C26  0823               	movf	getDelayOff_GO@go,w
 16553  1C27  0008               	return
 16554  1C28                     __end_of_getDelayOff_GO:	
 16555                           
 16556                           	psect	text105
 16557  1C08                     __ptext105:	
 16558 ;; *************** function _getDimmerLights_Status *****************
 16559 ;; Defined at:
 16560 ;;		line 445 in file "../src/Dimmer_B1.c"
 16561 ;; Parameters:    Size  Location     Type
 16562 ;;  lights          1    wreg     unsigned char 
 16563 ;; Auto vars:     Size  Location     Type
 16564 ;;  lights          1    2[BANK0 ] unsigned char 
 16565 ;;  status          1    3[BANK0 ] unsigned char 
 16566 ;; Return value:  Size  Location     Type
 16567 ;;                  1    wreg      unsigned char 
 16568 ;; Registers used:
 16569 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16570 ;; Tracked objects:
 16571 ;;		On entry : 0/0
 16572 ;;		On exit  : 0/0
 16573 ;;		Unchanged: 0/0
 16574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16575 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16576 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16578 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16579 ;;Total ram usage:        2 bytes
 16580 ;; Hardware stack levels used:    1
 16581 ;; Hardware stack levels required when called:    6
 16582 ;; This function calls:
 16583 ;;		_DimmerLightsPointSelect
 16584 ;; This function is called by:
 16585 ;;		_setDimmerLights_ErrorClose
 16586 ;;		_setRFSW_Control
 16587 ;;		_setRFSW_AdjControl
 16588 ;;		_getMain_LightsStatus
 16589 ;; This function uses a non-reentrant model
 16590 ;;
 16591                           
 16592                           
 16593                           ;psect for function _getDimmerLights_Status
 16594  1C08                     _getDimmerLights_Status:	
 16595                           
 16596                           ;incstack = 0
 16597                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 16598                           ;getDimmerLights_Status@lights stored from wreg
 16599  1C08  0020               	movlb	0	; select bank0
 16600  1C09  00A2               	movwf	getDimmerLights_Status@lights
 16601                           
 16602                           ;Dimmer_B1.c: 446: DimmerLightsPointSelect(lights);
 16603  1C0A  0822               	movf	getDimmerLights_Status@lights,w
 16604  1C0B  319C  24B4         	fcall	_DimmerLightsPointSelect
 16605                           
 16606                           ;Dimmer_B1.c: 447: char status = DimmerLights->Status == 1 ? 1 : 0;
 16607  1C0D  0020               	movlb	0	; select bank0
 16608  1C0E  086F               	movf	_DimmerLights,w
 16609  1C0F  0086               	movwf	6
 16610  1C10  3001               	movlw	1	; select bank2/3
 16611  1C11  0087               	movwf	7
 16612  1C12  3000               	movlw	0
 16613  1C13  1A81               	btfsc	1,5
 16614  1C14  3001               	movlw	1
 16615  1C15  00A3               	movwf	getDimmerLights_Status@status
 16616                           
 16617                           ;Dimmer_B1.c: 448: return status;
 16618  1C16  0823               	movf	getDimmerLights_Status@status,w
 16619  1C17  0008               	return
 16620  1C18                     __end_of_getDimmerLights_Status:	
 16621                           
 16622                           	psect	text106
 16623  1CB4                     __ptext106:	
 16624 ;; *************** function _DimmerLightsPointSelect *****************
 16625 ;; Defined at:
 16626 ;;		line 310 in file "../src/Dimmer_B1.c"
 16627 ;; Parameters:    Size  Location     Type
 16628 ;;  lights          1    wreg     unsigned char 
 16629 ;; Auto vars:     Size  Location     Type
 16630 ;;  lights          1    1[BANK0 ] unsigned char 
 16631 ;; Return value:  Size  Location     Type
 16632 ;;		None               void
 16633 ;; Registers used:
 16634 ;;		wreg
 16635 ;; Tracked objects:
 16636 ;;		On entry : 0/0
 16637 ;;		On exit  : 0/0
 16638 ;;		Unchanged: 0/0
 16639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16641 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16642 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16643 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16644 ;;Total ram usage:        2 bytes
 16645 ;; Hardware stack levels used:    1
 16646 ;; Hardware stack levels required when called:    5
 16647 ;; This function calls:
 16648 ;;		Nothing
 16649 ;; This function is called by:
 16650 ;;		_setDimmerLights_Initialization
 16651 ;;		_setDimmerLights_Main
 16652 ;;		_getDimmerLights_Status
 16653 ;;		_setDimmerLights_SwOn
 16654 ;;		_setDimmerLights_SwOff
 16655 ;;		_setDimmerLights_AdjControl
 16656 ;;		_setDimmerLights_ErrorClose
 16657 ;;		_setDimmerLights
 16658 ;;		_setDimmerLights_Adj
 16659 ;;		_setDimmerLights_AdjRF
 16660 ;;		_setDimmerLights_Trigger
 16661 ;;		_setDimmerLights_TriggerAdj
 16662 ;;		_setDimmerLights_Status
 16663 ;;		_setDimmerLights_GO
 16664 ;;		_setDimmerLights_MaxmumValue
 16665 ;; This function uses a non-reentrant model
 16666 ;;
 16667                           
 16668                           
 16669                           ;psect for function _DimmerLightsPointSelect
 16670  1CB4                     _DimmerLightsPointSelect:	
 16671                           
 16672                           ;incstack = 0
 16673                           ; Regs used in _DimmerLightsPointSelect: [wreg]
 16674                           ;DimmerLightsPointSelect@lights stored from wreg
 16675  1CB4  0020               	movlb	0	; select bank0
 16676  1CB5  00A1               	movwf	DimmerLightsPointSelect@lights
 16677                           
 16678                           ;Dimmer_B1.c: 312: if (lights == 1) {
 16679  1CB6  0821               	movf	DimmerLightsPointSelect@lights,w
 16680  1CB7  3A01               	xorlw	1
 16681  1CB8  1D03               	skipz
 16682  1CB9  2CBE               	goto	l767
 16683                           
 16684                           ;Dimmer_B1.c: 313: DimmerLights = &DimmerLights1;
 16685  1CBA  30BE               	movlw	_DimmerLights1& (0+255)
 16686  1CBB  00A0               	movwf	??_DimmerLightsPointSelect
 16687  1CBC  0820               	movf	??_DimmerLightsPointSelect,w
 16688  1CBD  00EF               	movwf	_DimmerLights
 16689  1CBE                     l767:	
 16690                           
 16691                           ;Dimmer_B1.c: 314: }
 16692                           ;Dimmer_B1.c: 317: if (lights == 2) {
 16693  1CBE  0821               	movf	DimmerLightsPointSelect@lights,w
 16694  1CBF  3A02               	xorlw	2
 16695  1CC0  1D03               	skipz
 16696  1CC1  0008               	return
 16697                           
 16698                           ;Dimmer_B1.c: 318: DimmerLights = &DimmerLights2;
 16699  1CC2  30CD               	movlw	_DimmerLights2& (0+255)
 16700  1CC3  00A0               	movwf	??_DimmerLightsPointSelect
 16701  1CC4  0820               	movf	??_DimmerLightsPointSelect,w
 16702  1CC5  00EF               	movwf	_DimmerLights
 16703  1CC6  0008               	return
 16704  1CC7                     __end_of_DimmerLightsPointSelect:	
 16705                           
 16706                           	psect	text107
 16707  1698                     __ptext107:	
 16708 ;; *************** function _setBuz *****************
 16709 ;; Defined at:
 16710 ;;		line 22 in file "../src/Buzzer_B1.c"
 16711 ;; Parameters:    Size  Location     Type
 16712 ;;  count           1    wreg     unsigned char 
 16713 ;;  time            2    9[BANK0 ] int 
 16714 ;; Auto vars:     Size  Location     Type
 16715 ;;  count           1   12[BANK0 ] unsigned char 
 16716 ;; Return value:  Size  Location     Type
 16717 ;;		None               void
 16718 ;; Registers used:
 16719 ;;		wreg, status,2, status,0, pclath, cstack
 16720 ;; Tracked objects:
 16721 ;;		On entry : 0/0
 16722 ;;		On exit  : 0/0
 16723 ;;		Unchanged: 0/0
 16724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16725 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16726 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16727 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16728 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16729 ;;Total ram usage:        4 bytes
 16730 ;; Hardware stack levels used:    1
 16731 ;; Hardware stack levels required when called:    6
 16732 ;; This function calls:
 16733 ;;		___awdiv
 16734 ;; This function is called by:
 16735 ;;		_DlyOff_Main
 16736 ;;		_setDimmerLights_Main
 16737 ;;		_setDimmerLights_SwOn
 16738 ;;		_setTemp_Main
 16739 ;;		_setLog_Code
 16740 ;;		_setControl_Lights_Table
 16741 ;;		_setRFSW_Control
 16742 ;;		_setSw_Main
 16743 ;;		_my_MainTimer
 16744 ;;		_setMain_Exception
 16745 ;; This function uses a non-reentrant model
 16746 ;;
 16747                           
 16748                           
 16749                           ;psect for function _setBuz
 16750  1698                     _setBuz:	
 16751                           
 16752                           ;incstack = 0
 16753                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 16754                           ;setBuz@count stored from wreg
 16755  1698  0020               	movlb	0	; select bank0
 16756  1699  00AC               	movwf	setBuz@count
 16757                           
 16758                           ;Buzzer_B1.c: 23: time /= 10;
 16759  169A  300A               	movlw	10
 16760  169B  00A0               	movwf	___awdiv@divisor
 16761  169C  3000               	movlw	0
 16762  169D  00A1               	movwf	___awdiv@divisor+1
 16763  169E  082A               	movf	setBuz@time+1,w
 16764  169F  01A3               	clrf	___awdiv@dividend+1
 16765  16A0  07A3               	addwf	___awdiv@dividend+1,f
 16766  16A1  0829               	movf	setBuz@time,w
 16767  16A2  01A2               	clrf	___awdiv@dividend
 16768  16A3  07A2               	addwf	___awdiv@dividend,f
 16769  16A4  3195  25EC  3196   	fcall	___awdiv
 16770  16A7  0020               	movlb	0	; select bank0
 16771  16A8  0821               	movf	?___awdiv+1,w
 16772  16A9  01AA               	clrf	setBuz@time+1
 16773  16AA  07AA               	addwf	setBuz@time+1,f
 16774  16AB  0820               	movf	?___awdiv,w
 16775  16AC  01A9               	clrf	setBuz@time
 16776  16AD  07A9               	addwf	setBuz@time,f
 16777                           
 16778                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 16779  16AE  0021               	movlb	1	; select bank1
 16780  16AF  1C2E               	btfss	_Buz1^(0+128),0
 16781  16B0  0008               	return
 16782                           
 16783                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 16784  16B1  18AE               	btfsc	_Buz1^(0+128),1
 16785  16B2  2EC9               	goto	l96
 16786                           
 16787                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 16788  16B3  14AE               	bsf	_Buz1^(0+128),1
 16789                           
 16790                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 16791  16B4  01AF               	clrf	(_Buz1^(0+128)+1)
 16792  16B5  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 16793                           
 16794                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 16795  16B6  0020               	movlb	0	; select bank0
 16796  16B7  082C               	movf	setBuz@count,w
 16797  16B8  00AB               	movwf	??_setBuz
 16798  16B9  082B               	movf	??_setBuz,w
 16799  16BA  0021               	movlb	1	; select bank1
 16800  16BB  00B1               	movwf	(_Buz1^(0+128)+3)
 16801                           
 16802                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 16803  16BC  0020               	movlb	0	; select bank0
 16804  16BD  082A               	movf	setBuz@time+1,w
 16805  16BE  0021               	movlb	1	; select bank1
 16806  16BF  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 16807  16C0  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 16808  16C1  0020               	movlb	0	; select bank0
 16809  16C2  0829               	movf	setBuz@time,w
 16810  16C3  0021               	movlb	1	; select bank1
 16811  16C4  01B4               	clrf	(_Buz1^(0+128)+6)
 16812  16C5  07B4               	addwf	(_Buz1^(0+128)+6),f
 16813                           
 16814                           ;Buzzer_B1.c: 30: RB3 = 1;
 16815  16C6  0020               	movlb	0	; select bank0
 16816  16C7  158D               	bsf	13,3	;volatile
 16817                           
 16818                           ;Buzzer_B1.c: 31: } else {
 16819  16C8  0008               	return
 16820  16C9                     l96:	
 16821                           
 16822                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 16823  16C9  19AE               	btfsc	_Buz1^(0+128),3
 16824  16CA  2EDD               	goto	l98
 16825                           
 16826                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 16827  16CB  15AE               	bsf	_Buz1^(0+128),3
 16828                           
 16829                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 16830  16CC  0020               	movlb	0	; select bank0
 16831  16CD  082C               	movf	setBuz@count,w
 16832  16CE  00AB               	movwf	??_setBuz
 16833  16CF  082B               	movf	??_setBuz,w
 16834  16D0  0021               	movlb	1	; select bank1
 16835  16D1  00B2               	movwf	(_Buz1^(0+128)+4)
 16836                           
 16837                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 16838  16D2  0020               	movlb	0	; select bank0
 16839  16D3  082A               	movf	setBuz@time+1,w
 16840  16D4  0021               	movlb	1	; select bank1
 16841  16D5  01B7               	clrf	((_Buz1+1)^(0+128)+8)
 16842  16D6  07B7               	addwf	((_Buz1+1)^(0+128)+8),f
 16843  16D7  0020               	movlb	0	; select bank0
 16844  16D8  0829               	movf	setBuz@time,w
 16845  16D9  0021               	movlb	1	; select bank1
 16846  16DA  01B6               	clrf	(_Buz1^(0+128)+8)
 16847  16DB  07B6               	addwf	(_Buz1^(0+128)+8),f
 16848                           
 16849                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 16850  16DC  0008               	return
 16851  16DD                     l98:	
 16852  16DD  1A2E               	btfsc	_Buz1^(0+128),4
 16853  16DE  0008               	return
 16854                           
 16855                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 16856  16DF  162E               	bsf	_Buz1^(0+128),4
 16857                           
 16858                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 16859  16E0  0020               	movlb	0	; select bank0
 16860  16E1  082C               	movf	setBuz@count,w
 16861  16E2  00AB               	movwf	??_setBuz
 16862  16E3  082B               	movf	??_setBuz,w
 16863  16E4  0021               	movlb	1	; select bank1
 16864  16E5  00B3               	movwf	(_Buz1^(0+128)+5)
 16865                           
 16866                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 16867  16E6  0020               	movlb	0	; select bank0
 16868  16E7  082A               	movf	setBuz@time+1,w
 16869  16E8  0021               	movlb	1	; select bank1
 16870  16E9  01B9               	clrf	((_Buz1+1)^(0+128)+10)
 16871  16EA  07B9               	addwf	((_Buz1+1)^(0+128)+10),f
 16872  16EB  0020               	movlb	0	; select bank0
 16873  16EC  0829               	movf	setBuz@time,w
 16874  16ED  0021               	movlb	1	; select bank1
 16875  16EE  01B8               	clrf	(_Buz1^(0+128)+10)
 16876  16EF  07B8               	addwf	(_Buz1^(0+128)+10),f
 16877  16F0  0008               	return
 16878  16F1                     __end_of_setBuz:	
 16879                           
 16880                           	psect	text108
 16881  15EC                     __ptext108:	
 16882 ;; *************** function ___awdiv *****************
 16883 ;; Defined at:
 16884 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 16885 ;; Parameters:    Size  Location     Type
 16886 ;;  divisor         2    0[BANK0 ] int 
 16887 ;;  dividend        2    2[BANK0 ] int 
 16888 ;; Auto vars:     Size  Location     Type
 16889 ;;  quotient        2    7[BANK0 ] int 
 16890 ;;  sign            1    6[BANK0 ] unsigned char 
 16891 ;;  counter         1    5[BANK0 ] unsigned char 
 16892 ;; Return value:  Size  Location     Type
 16893 ;;                  2    0[BANK0 ] int 
 16894 ;; Registers used:
 16895 ;;		wreg, status,2, status,0
 16896 ;; Tracked objects:
 16897 ;;		On entry : 0/0
 16898 ;;		On exit  : 0/0
 16899 ;;		Unchanged: 0/0
 16900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16901 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16902 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16903 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16904 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16905 ;;Total ram usage:        9 bytes
 16906 ;; Hardware stack levels used:    1
 16907 ;; Hardware stack levels required when called:    5
 16908 ;; This function calls:
 16909 ;;		Nothing
 16910 ;; This function is called by:
 16911 ;;		_setBuz
 16912 ;; This function uses a non-reentrant model
 16913 ;;
 16914                           
 16915                           
 16916                           ;psect for function ___awdiv
 16917  15EC                     ___awdiv:	
 16918                           
 16919                           ;incstack = 0
 16920                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 16921  15EC  0020               	movlb	0	; select bank0
 16922  15ED  01A6               	clrf	___awdiv@sign
 16923  15EE  1FA1               	btfss	___awdiv@divisor+1,7
 16924  15EF  2DF7               	goto	l6154
 16925  15F0  09A0               	comf	___awdiv@divisor,f
 16926  15F1  09A1               	comf	___awdiv@divisor+1,f
 16927  15F2  0AA0               	incf	___awdiv@divisor,f
 16928  15F3  1903               	skipnz
 16929  15F4  0AA1               	incf	___awdiv@divisor+1,f
 16930  15F5  01A6               	clrf	___awdiv@sign
 16931  15F6  0AA6               	incf	___awdiv@sign,f
 16932  15F7                     l6154:	
 16933  15F7  1FA3               	btfss	___awdiv@dividend+1,7
 16934  15F8  2E02               	goto	l6160
 16935  15F9  09A2               	comf	___awdiv@dividend,f
 16936  15FA  09A3               	comf	___awdiv@dividend+1,f
 16937  15FB  0AA2               	incf	___awdiv@dividend,f
 16938  15FC  1903               	skipnz
 16939  15FD  0AA3               	incf	___awdiv@dividend+1,f
 16940  15FE  3001               	movlw	1
 16941  15FF  00A4               	movwf	??___awdiv
 16942  1600  0824               	movf	??___awdiv,w
 16943  1601  06A6               	xorwf	___awdiv@sign,f
 16944  1602                     l6160:	
 16945  1602  01A7               	clrf	___awdiv@quotient
 16946  1603  01A8               	clrf	___awdiv@quotient+1
 16947  1604  0821               	movf	___awdiv@divisor+1,w
 16948  1605  0420               	iorwf	___awdiv@divisor,w
 16949  1606  1903               	skipnz
 16950  1607  2E31               	goto	l6182
 16951  1608  01A5               	clrf	___awdiv@counter
 16952  1609  0AA5               	incf	___awdiv@counter,f
 16953  160A                     l6170:	
 16954  160A  1BA1               	btfsc	___awdiv@divisor+1,7
 16955  160B  2E16               	goto	l6172
 16956  160C  3001               	movlw	1
 16957  160D                     u5055:	
 16958  160D  35A0               	lslf	___awdiv@divisor,f
 16959  160E  0DA1               	rlf	___awdiv@divisor+1,f
 16960  160F  0B89               	decfsz	9,f
 16961  1610  2E0D               	goto	u5055
 16962  1611  3001               	movlw	1
 16963  1612  00A4               	movwf	??___awdiv
 16964  1613  0824               	movf	??___awdiv,w
 16965  1614  07A5               	addwf	___awdiv@counter,f
 16966  1615  2E0A               	goto	l6170
 16967  1616                     l6172:	
 16968  1616  3001               	movlw	1
 16969  1617                     u5075:	
 16970  1617  35A7               	lslf	___awdiv@quotient,f
 16971  1618  0DA8               	rlf	___awdiv@quotient+1,f
 16972  1619  0B89               	decfsz	9,f
 16973  161A  2E17               	goto	u5075
 16974  161B  0821               	movf	___awdiv@divisor+1,w
 16975  161C  0223               	subwf	___awdiv@dividend+1,w
 16976  161D  1D03               	skipz
 16977  161E  2E21               	goto	u5085
 16978  161F  0820               	movf	___awdiv@divisor,w
 16979  1620  0222               	subwf	___awdiv@dividend,w
 16980  1621                     u5085:	
 16981  1621  1C03               	skipc
 16982  1622  2E28               	goto	l6178
 16983  1623  0820               	movf	___awdiv@divisor,w
 16984  1624  02A2               	subwf	___awdiv@dividend,f
 16985  1625  0821               	movf	___awdiv@divisor+1,w
 16986  1626  3BA3               	subwfb	___awdiv@dividend+1,f
 16987  1627  1427               	bsf	___awdiv@quotient,0
 16988  1628                     l6178:	
 16989  1628  3001               	movlw	1
 16990  1629                     u5095:	
 16991  1629  36A1               	lsrf	___awdiv@divisor+1,f
 16992  162A  0CA0               	rrf	___awdiv@divisor,f
 16993  162B  0B89               	decfsz	9,f
 16994  162C  2E29               	goto	u5095
 16995  162D  3001               	movlw	1
 16996  162E  02A5               	subwf	___awdiv@counter,f
 16997  162F  1D03               	btfss	3,2
 16998  1630  2E16               	goto	l6172
 16999  1631                     l6182:	
 17000  1631  0826               	movf	___awdiv@sign,w
 17001  1632  1903               	btfsc	3,2
 17002  1633  2E39               	goto	l6186
 17003  1634  09A7               	comf	___awdiv@quotient,f
 17004  1635  09A8               	comf	___awdiv@quotient+1,f
 17005  1636  0AA7               	incf	___awdiv@quotient,f
 17006  1637  1903               	skipnz
 17007  1638  0AA8               	incf	___awdiv@quotient+1,f
 17008  1639                     l6186:	
 17009  1639  0828               	movf	___awdiv@quotient+1,w
 17010  163A  01A1               	clrf	?___awdiv+1
 17011  163B  07A1               	addwf	?___awdiv+1,f
 17012  163C  0827               	movf	___awdiv@quotient,w
 17013  163D  01A0               	clrf	?___awdiv
 17014  163E  07A0               	addwf	?___awdiv,f
 17015  163F  0008               	return
 17016  1640                     __end_of___awdiv:	
 17017                           
 17018                           	psect	text109
 17019  1B25                     __ptext109:	
 17020 ;; *************** function _DelayOff_Initialization *****************
 17021 ;; Defined at:
 17022 ;;		line 26 in file "../src/DelayOff_B1.c"
 17023 ;; Parameters:    Size  Location     Type
 17024 ;;		None
 17025 ;; Auto vars:     Size  Location     Type
 17026 ;;		None
 17027 ;; Return value:  Size  Location     Type
 17028 ;;		None               void
 17029 ;; Registers used:
 17030 ;;		wreg, status,2, status,0, pclath, cstack
 17031 ;; Tracked objects:
 17032 ;;		On entry : 0/0
 17033 ;;		On exit  : 0/0
 17034 ;;		Unchanged: 0/0
 17035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17037 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17038 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17039 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17040 ;;Total ram usage:        0 bytes
 17041 ;; Hardware stack levels used:    1
 17042 ;; Hardware stack levels required when called:    7
 17043 ;; This function calls:
 17044 ;;		_DlyOff_Initialization
 17045 ;; This function is called by:
 17046 ;;		_main
 17047 ;; This function uses a non-reentrant model
 17048 ;;
 17049                           
 17050                           
 17051                           ;psect for function _DelayOff_Initialization
 17052  1B25                     _DelayOff_Initialization:	
 17053                           
 17054                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 17055                           
 17056                           ;incstack = 0
 17057                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 17058  1B25  3001               	movlw	1
 17059  1B26  319B  2304  319B   	fcall	_DlyOff_Initialization
 17060                           
 17061                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 17062  1B29  3002               	movlw	2
 17063  1B2A  319B  2304         	fcall	_DlyOff_Initialization
 17064  1B2C  0008               	return
 17065  1B2D                     __end_of_DelayOff_Initialization:	
 17066                           
 17067                           	psect	text110
 17068  1B04                     __ptext110:	
 17069 ;; *************** function _DlyOff_Initialization *****************
 17070 ;; Defined at:
 17071 ;;		line 56 in file "../src/DelayOff_B1.c"
 17072 ;; Parameters:    Size  Location     Type
 17073 ;;  sw              1    wreg     unsigned char 
 17074 ;; Auto vars:     Size  Location     Type
 17075 ;;  sw              1    2[BANK0 ] unsigned char 
 17076 ;; Return value:  Size  Location     Type
 17077 ;;		None               void
 17078 ;; Registers used:
 17079 ;;		wreg, status,2, status,0, pclath, cstack
 17080 ;; Tracked objects:
 17081 ;;		On entry : 0/0
 17082 ;;		On exit  : 0/0
 17083 ;;		Unchanged: 0/0
 17084 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17086 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17088 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17089 ;;Total ram usage:        1 bytes
 17090 ;; Hardware stack levels used:    1
 17091 ;; Hardware stack levels required when called:    6
 17092 ;; This function calls:
 17093 ;;		_DelayOffPointSelect
 17094 ;; This function is called by:
 17095 ;;		_DelayOff_Initialization
 17096 ;; This function uses a non-reentrant model
 17097 ;;
 17098                           
 17099                           
 17100                           ;psect for function _DlyOff_Initialization
 17101  1B04                     _DlyOff_Initialization:	
 17102                           
 17103                           ;incstack = 0
 17104                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 17105                           ;DlyOff_Initialization@sw stored from wreg
 17106  1B04  0020               	movlb	0	; select bank0
 17107  1B05  00A2               	movwf	DlyOff_Initialization@sw
 17108                           
 17109                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 17110  1B06  0822               	movf	DlyOff_Initialization@sw,w
 17111  1B07  319D  2528         	fcall	_DelayOffPointSelect
 17112  1B09  0008               	return
 17113  1B0A                     __end_of_DlyOff_Initialization:	
 17114                           
 17115                           	psect	text111
 17116  1D28                     __ptext111:	
 17117 ;; *************** function _DelayOffPointSelect *****************
 17118 ;; Defined at:
 17119 ;;		line 7 in file "../src/DelayOff_B1.c"
 17120 ;; Parameters:    Size  Location     Type
 17121 ;;  sw              1    wreg     unsigned char 
 17122 ;; Auto vars:     Size  Location     Type
 17123 ;;  sw              1    1[BANK0 ] unsigned char 
 17124 ;; Return value:  Size  Location     Type
 17125 ;;		None               void
 17126 ;; Registers used:
 17127 ;;		wreg
 17128 ;; Tracked objects:
 17129 ;;		On entry : 0/0
 17130 ;;		On exit  : 0/0
 17131 ;;		Unchanged: 0/0
 17132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17134 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17135 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17136 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17137 ;;Total ram usage:        2 bytes
 17138 ;; Hardware stack levels used:    1
 17139 ;; Hardware stack levels required when called:    5
 17140 ;; This function calls:
 17141 ;;		Nothing
 17142 ;; This function is called by:
 17143 ;;		_DlyOff_Initialization
 17144 ;;		_DlyOff_Main
 17145 ;;		_setDelayOff_GO
 17146 ;;		_getDelayOff_GO
 17147 ;; This function uses a non-reentrant model
 17148 ;;
 17149                           
 17150                           
 17151                           ;psect for function _DelayOffPointSelect
 17152  1D28                     _DelayOffPointSelect:	
 17153                           
 17154                           ;incstack = 0
 17155                           ; Regs used in _DelayOffPointSelect: [wreg]
 17156                           ;DelayOffPointSelect@sw stored from wreg
 17157  1D28  0020               	movlb	0	; select bank0
 17158  1D29  00A1               	movwf	DelayOffPointSelect@sw
 17159                           
 17160                           ;DelayOff_B1.c: 9: if (sw == 1) {
 17161  1D2A  0821               	movf	DelayOffPointSelect@sw,w
 17162  1D2B  3A01               	xorlw	1
 17163  1D2C  1D03               	skipz
 17164  1D2D  2D33               	goto	l6112
 17165                           
 17166                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 17167  1D2E  3053               	movlw	_DlySw1& (0+255)
 17168  1D2F  00A0               	movwf	??_DelayOffPointSelect
 17169  1D30  0820               	movf	??_DelayOffPointSelect,w
 17170  1D31  00F8               	movwf	_DelayOff
 17171                           
 17172                           ;DelayOff_B1.c: 11: }
 17173  1D32  0008               	return
 17174  1D33                     l6112:	
 17175                           
 17176                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 17177  1D33  0821               	movf	DelayOffPointSelect@sw,w
 17178  1D34  3A02               	xorlw	2
 17179  1D35  1D03               	skipz
 17180  1D36  0008               	return
 17181                           
 17182                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 17183  1D37  3058               	movlw	_DlySw2& (0+255)
 17184  1D38  00A0               	movwf	??_DelayOffPointSelect
 17185  1D39  0820               	movf	??_DelayOffPointSelect,w
 17186  1D3A  00F8               	movwf	_DelayOff
 17187  1D3B  0008               	return
 17188  1D3C                     __end_of_DelayOffPointSelect:	
 17189                           
 17190                           	psect	text112
 17191  1D79                     __ptext112:	
 17192 ;; *************** function _CC2500_PowerOnInitial *****************
 17193 ;; Defined at:
 17194 ;;		line 119 in file "../src/CC2500_B1.c"
 17195 ;; Parameters:    Size  Location     Type
 17196 ;;		None
 17197 ;; Auto vars:     Size  Location     Type
 17198 ;;		None
 17199 ;; Return value:  Size  Location     Type
 17200 ;;		None               void
 17201 ;; Registers used:
 17202 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17203 ;; Tracked objects:
 17204 ;;		On entry : 0/0
 17205 ;;		On exit  : 0/0
 17206 ;;		Unchanged: 0/0
 17207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17209 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17211 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17212 ;;Total ram usage:        0 bytes
 17213 ;; Hardware stack levels used:    1
 17214 ;; Hardware stack levels required when called:    8
 17215 ;; This function calls:
 17216 ;;		_CC2500_ClearRXFIFO
 17217 ;;		_CC2500_ClearTXFIFO
 17218 ;;		_CC2500_FrequencyCabr
 17219 ;;		_CC2500_InitPATable
 17220 ;;		_CC2500_InitSetREG
 17221 ;;		_CC2500_PowerRST
 17222 ;;		_CC2500_SIDLEMode
 17223 ;; This function is called by:
 17224 ;;		_main
 17225 ;; This function uses a non-reentrant model
 17226 ;;
 17227                           
 17228                           
 17229                           ;psect for function _CC2500_PowerOnInitial
 17230  1D79                     _CC2500_PowerOnInitial:	
 17231                           
 17232                           ;CC2500_B1.c: 120: CC2500_PowerRST();
 17233                           
 17234                           ;incstack = 0
 17235                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17236  1D79  3194  2429  319D   	fcall	_CC2500_PowerRST
 17237                           
 17238                           ;CC2500_B1.c: 121: CC2500_InitSetREG();
 17239  1D7C  3190  2097  319D   	fcall	_CC2500_InitSetREG
 17240                           
 17241                           ;CC2500_B1.c: 122: CC2500_InitPATable();
 17242  1D7F  319E  2669  319D   	fcall	_CC2500_InitPATable
 17243                           
 17244                           ;CC2500_B1.c: 123: CC2500_ClearTXFIFO();
 17245  1D82  319A  22EE  319D   	fcall	_CC2500_ClearTXFIFO
 17246                           
 17247                           ;CC2500_B1.c: 124: CC2500_ClearRXFIFO();
 17248  1D85  319A  22EA  319D   	fcall	_CC2500_ClearRXFIFO
 17249                           
 17250                           ;CC2500_B1.c: 125: CC2500_FrequencyCabr();
 17251  1D88  319B  236C  319D   	fcall	_CC2500_FrequencyCabr
 17252                           
 17253                           ;CC2500_B1.c: 126: CC2500_SIDLEMode();
 17254  1D8B  319A  22F2         	fcall	_CC2500_SIDLEMode
 17255  1D8D  0008               	return
 17256  1D8E                     __end_of_CC2500_PowerOnInitial:	
 17257                           
 17258                           	psect	text113
 17259  1AF2                     __ptext113:	
 17260 ;; *************** function _CC2500_SIDLEMode *****************
 17261 ;; Defined at:
 17262 ;;		line 209 in file "../src/CC2500_B1.c"
 17263 ;; Parameters:    Size  Location     Type
 17264 ;;		None
 17265 ;; Auto vars:     Size  Location     Type
 17266 ;;		None
 17267 ;; Return value:  Size  Location     Type
 17268 ;;		None               void
 17269 ;; Registers used:
 17270 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17271 ;; Tracked objects:
 17272 ;;		On entry : 0/0
 17273 ;;		On exit  : 0/0
 17274 ;;		Unchanged: 0/0
 17275 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17278 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17279 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17280 ;;Total ram usage:        0 bytes
 17281 ;; Hardware stack levels used:    1
 17282 ;; Hardware stack levels required when called:    7
 17283 ;; This function calls:
 17284 ;;		_CC2500_WriteCommand
 17285 ;; This function is called by:
 17286 ;;		_CC2500_PowerOnInitial
 17287 ;; This function uses a non-reentrant model
 17288 ;;
 17289                           
 17290                           
 17291                           ;psect for function _CC2500_SIDLEMode
 17292  1AF2                     _CC2500_SIDLEMode:	
 17293                           
 17294                           ;CC2500_B1.c: 210: CC2500_WriteCommand(0x36);
 17295                           
 17296                           ;incstack = 0
 17297                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17298  1AF2  3036               	movlw	54
 17299  1AF3  319D  25E6         	fcall	_CC2500_WriteCommand
 17300  1AF5  0008               	return
 17301  1AF6                     __end_of_CC2500_SIDLEMode:	
 17302                           
 17303                           	psect	text114
 17304  1429                     __ptext114:	
 17305 ;; *************** function _CC2500_PowerRST *****************
 17306 ;; Defined at:
 17307 ;;		line 132 in file "../src/CC2500_B1.c"
 17308 ;; Parameters:    Size  Location     Type
 17309 ;;		None
 17310 ;; Auto vars:     Size  Location     Type
 17311 ;;		None
 17312 ;; Return value:  Size  Location     Type
 17313 ;;		None               void
 17314 ;; Registers used:
 17315 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17316 ;; Tracked objects:
 17317 ;;		On entry : 0/0
 17318 ;;		On exit  : 0/0
 17319 ;;		Unchanged: 0/0
 17320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17323 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17324 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17325 ;;Total ram usage:        1 bytes
 17326 ;; Hardware stack levels used:    1
 17327 ;; Hardware stack levels required when called:    6
 17328 ;; This function calls:
 17329 ;;		_CC2500_WriteByte
 17330 ;;		_DelayTime_1us
 17331 ;;		_Timeout_Counter
 17332 ;;		_set_TimeoutCleared
 17333 ;; This function is called by:
 17334 ;;		_CC2500_PowerOnInitial
 17335 ;; This function uses a non-reentrant model
 17336 ;;
 17337                           
 17338                           
 17339                           ;psect for function _CC2500_PowerRST
 17340  1429                     _CC2500_PowerRST:	
 17341                           
 17342                           ;CC2500_B1.c: 133: RC1 = 0;
 17343                           
 17344                           ;incstack = 0
 17345                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17346  1429  0020               	movlb	0	; select bank0
 17347  142A  108E               	bcf	14,1	;volatile
 17348                           
 17349                           ;CC2500_B1.c: 134: RC0 = 0;
 17350  142B  100E               	bcf	14,0	;volatile
 17351                           
 17352                           ;CC2500_B1.c: 135: RC4 = 1;
 17353  142C  160E               	bsf	14,4	;volatile
 17354                           
 17355                           ;CC2500_B1.c: 136: DelayTime_1us(10);
 17356  142D  300A               	movlw	10
 17357  142E  00A0               	movwf	DelayTime_1us@count
 17358  142F  3000               	movlw	0
 17359  1430  00A1               	movwf	DelayTime_1us@count+1
 17360  1431  319F  27B3  3194   	fcall	_DelayTime_1us
 17361                           
 17362                           ;CC2500_B1.c: 137: RC4 = 0;
 17363  1434  0020               	movlb	0	; select bank0
 17364  1435  120E               	bcf	14,4	;volatile
 17365                           
 17366                           ;CC2500_B1.c: 138: DelayTime_1us(10);
 17367  1436  300A               	movlw	10
 17368  1437  00A0               	movwf	DelayTime_1us@count
 17369  1438  3000               	movlw	0
 17370  1439  00A1               	movwf	DelayTime_1us@count+1
 17371  143A  319F  27B3  3194   	fcall	_DelayTime_1us
 17372                           
 17373                           ;CC2500_B1.c: 139: RC4 = 1;
 17374  143D  0020               	movlb	0	; select bank0
 17375  143E  160E               	bsf	14,4	;volatile
 17376                           
 17377                           ;CC2500_B1.c: 140: DelayTime_1us(40);
 17378  143F  3028               	movlw	40
 17379  1440  00A0               	movwf	DelayTime_1us@count
 17380  1441  3000               	movlw	0
 17381  1442  00A1               	movwf	DelayTime_1us@count+1
 17382  1443  319F  27B3  3194   	fcall	_DelayTime_1us
 17383                           
 17384                           ;CC2500_B1.c: 141: RC4 = 0;
 17385  1446  0020               	movlb	0	; select bank0
 17386  1447  120E               	bcf	14,4	;volatile
 17387                           
 17388                           ;CC2500_B1.c: 142: SPI0Buffer = 0x30;
 17389  1448  3030               	movlw	48
 17390  1449  00A6               	movwf	??_CC2500_PowerRST
 17391  144A  0826               	movf	??_CC2500_PowerRST,w
 17392  144B  00FB               	movwf	_SPI0Buffer
 17393                           
 17394                           ;CC2500_B1.c: 143: while (RC2 == 1 && myMain.Timeout == 0) {
 17395  144C  2C50               	goto	l7184
 17396  144D                     l7182:	
 17397                           
 17398                           ;CC2500_B1.c: 144: Timeout_Counter();
 17399  144D  319D  2564  3194   	fcall	_Timeout_Counter
 17400  1450                     l7184:	
 17401  1450  0020               	movlb	0	; select bank0
 17402  1451  1D0E               	btfss	14,2	;volatile
 17403  1452  2C56               	goto	l7188
 17404  1453  0021               	movlb	1	; select bank1
 17405  1454  1D2B               	btfss	(_myMain^(0+128)+11),2
 17406  1455  2C4D               	goto	l7182
 17407  1456                     l7188:	
 17408                           
 17409                           ;CC2500_B1.c: 145: };
 17410                           ;CC2500_B1.c: 146: set_TimeoutCleared();
 17411  1456  319A  22FA  3194   	fcall	_set_TimeoutCleared
 17412                           
 17413                           ;CC2500_B1.c: 147: CC2500_WriteByte();
 17414  1459  319D  2514  3194   	fcall	_CC2500_WriteByte
 17415                           
 17416                           ;CC2500_B1.c: 148: while (RC2 == 1 && myMain.Timeout == 0) {
 17417  145C  2C60               	goto	l7194
 17418  145D                     l7192:	
 17419                           
 17420                           ;CC2500_B1.c: 149: Timeout_Counter();
 17421  145D  319D  2564  3194   	fcall	_Timeout_Counter
 17422  1460                     l7194:	
 17423  1460  0020               	movlb	0	; select bank0
 17424  1461  1D0E               	btfss	14,2	;volatile
 17425  1462  2C66               	goto	l7198
 17426  1463  0021               	movlb	1	; select bank1
 17427  1464  1D2B               	btfss	(_myMain^(0+128)+11),2
 17428  1465  2C5D               	goto	l7192
 17429  1466                     l7198:	
 17430                           
 17431                           ;CC2500_B1.c: 150: };
 17432                           ;CC2500_B1.c: 151: set_TimeoutCleared();
 17433  1466  319A  22FA         	fcall	_set_TimeoutCleared
 17434                           
 17435                           ;CC2500_B1.c: 152: RC0 = 0;
 17436  1468  0020               	movlb	0	; select bank0
 17437  1469  100E               	bcf	14,0	;volatile
 17438                           
 17439                           ;CC2500_B1.c: 153: RC4 = 1;
 17440  146A  160E               	bsf	14,4	;volatile
 17441  146B  0008               	return
 17442  146C                     __end_of_CC2500_PowerRST:	
 17443                           
 17444                           	psect	text115
 17445  1097                     __ptext115:	
 17446 ;; *************** function _CC2500_InitSetREG *****************
 17447 ;; Defined at:
 17448 ;;		line 159 in file "../src/CC2500_B1.c"
 17449 ;; Parameters:    Size  Location     Type
 17450 ;;		None
 17451 ;; Auto vars:     Size  Location     Type
 17452 ;;  loop_c          1    8[BANK0 ] unsigned char 
 17453 ;;  temp2           1    7[BANK0 ] unsigned char 
 17454 ;;  temp1           1    6[BANK0 ] unsigned char 
 17455 ;; Return value:  Size  Location     Type
 17456 ;;		None               void
 17457 ;; Registers used:
 17458 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17459 ;; Tracked objects:
 17460 ;;		On entry : 0/0
 17461 ;;		On exit  : 0/0
 17462 ;;		Unchanged: 0/0
 17463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17464 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17465 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17466 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17467 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17468 ;;Total ram usage:        4 bytes
 17469 ;; Hardware stack levels used:    1
 17470 ;; Hardware stack levels required when called:    7
 17471 ;; This function calls:
 17472 ;;		_CC2500_WriteREG
 17473 ;; This function is called by:
 17474 ;;		_CC2500_PowerOnInitial
 17475 ;; This function uses a non-reentrant model
 17476 ;;
 17477                           
 17478                           
 17479                           ;psect for function _CC2500_InitSetREG
 17480  1097                     _CC2500_InitSetREG:	
 17481                           
 17482                           ;CC2500_B1.c: 160: unsigned char loop_c;
 17483                           ;CC2500_B1.c: 161: unsigned char temp1, temp2;
 17484                           ;CC2500_B1.c: 163: for (loop_c = 0; loop_c < 47; loop_c++) {
 17485                           
 17486                           ;incstack = 0
 17487                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17488  1097  0020               	movlb	0	; select bank0
 17489  1098  01A8               	clrf	CC2500_InitSetREG@loop_c
 17490  1099                     L10:	
 17491  1099  302F               	movlw	47
 17492  109A  0228               	subwf	CC2500_InitSetREG@loop_c,w
 17493  109B  1803               	btfsc	3,0
 17494  109C  0008               	return
 17495                           
 17496                           ;CC2500_B1.c: 164: temp1 = CC2500_registers_address[loop_c];
 17497  109D  0828               	movf	CC2500_InitSetREG@loop_c,w
 17498  109E  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
 17499  109F  0084               	movwf	4
 17500  10A0  3090               	movlw	high (_CC2500_registers_address| (0+32768))
 17501  10A1  1803               	skipnc
 17502  10A2  3E01               	addlw	1
 17503  10A3  0085               	movwf	5
 17504  10A4  0800               	movf	0,w	;code access
 17505  10A5  00A5               	movwf	??_CC2500_InitSetREG
 17506  10A6  0825               	movf	??_CC2500_InitSetREG,w
 17507  10A7  00A6               	movwf	CC2500_InitSetREG@temp1
 17508                           
 17509                           ;CC2500_B1.c: 165: temp2 = CC2500_rfSettings[loop_c];
 17510  10A8  0828               	movf	CC2500_InitSetREG@loop_c,w
 17511  10A9  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
 17512  10AA  0084               	movwf	4
 17513  10AB  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
 17514  10AC  1803               	skipnc
 17515  10AD  3E01               	addlw	1
 17516  10AE  0085               	movwf	5
 17517  10AF  0800               	movf	0,w	;code access
 17518  10B0  00A5               	movwf	??_CC2500_InitSetREG
 17519  10B1  0825               	movf	??_CC2500_InitSetREG,w
 17520  10B2  00A7               	movwf	CC2500_InitSetREG@temp2
 17521                           
 17522                           ;CC2500_B1.c: 167: CC2500_WriteREG(temp1, temp2);
 17523  10B3  0827               	movf	CC2500_InitSetREG@temp2,w
 17524  10B4  00A5               	movwf	??_CC2500_InitSetREG
 17525  10B5  0825               	movf	??_CC2500_InitSetREG,w
 17526  10B6  00A2               	movwf	CC2500_WriteREG@value
 17527  10B7  0826               	movf	CC2500_InitSetREG@temp1,w
 17528  10B8  319F  2707  3190   	fcall	_CC2500_WriteREG
 17529  10BB  3001               	movlw	1
 17530  10BC  0020               	movlb	0	; select bank0
 17531  10BD  00A5               	movwf	??_CC2500_InitSetREG
 17532  10BE  0825               	movf	??_CC2500_InitSetREG,w
 17533  10BF  07A8               	addwf	CC2500_InitSetREG@loop_c,f
 17534  10C0  2899               	goto	L10
 17535  10C1                     __end_of_CC2500_InitSetREG:	
 17536                           
 17537                           	psect	text116
 17538  1E69                     __ptext116:	
 17539 ;; *************** function _CC2500_InitPATable *****************
 17540 ;; Defined at:
 17541 ;;		line 174 in file "../src/CC2500_B1.c"
 17542 ;; Parameters:    Size  Location     Type
 17543 ;;		None
 17544 ;; Auto vars:     Size  Location     Type
 17545 ;;  loop_d          1    7[BANK0 ] unsigned char 
 17546 ;;  temp            1    6[BANK0 ] unsigned char 
 17547 ;; Return value:  Size  Location     Type
 17548 ;;		None               void
 17549 ;; Registers used:
 17550 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17551 ;; Tracked objects:
 17552 ;;		On entry : 0/0
 17553 ;;		On exit  : 0/0
 17554 ;;		Unchanged: 0/0
 17555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17557 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17558 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17559 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17560 ;;Total ram usage:        3 bytes
 17561 ;; Hardware stack levels used:    1
 17562 ;; Hardware stack levels required when called:    7
 17563 ;; This function calls:
 17564 ;;		_CC2500_WriteREG
 17565 ;; This function is called by:
 17566 ;;		_CC2500_PowerOnInitial
 17567 ;; This function uses a non-reentrant model
 17568 ;;
 17569                           
 17570                           
 17571                           ;psect for function _CC2500_InitPATable
 17572  1E69                     _CC2500_InitPATable:	
 17573                           
 17574                           ;CC2500_B1.c: 175: unsigned char loop_d;
 17575                           ;CC2500_B1.c: 176: unsigned char temp;
 17576                           ;CC2500_B1.c: 178: for (loop_d = 0; loop_d < 8; loop_d++) {
 17577                           
 17578                           ;incstack = 0
 17579                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17580  1E69  0020               	movlb	0	; select bank0
 17581  1E6A  01A7               	clrf	CC2500_InitPATable@loop_d
 17582  1E6B                     L11:	
 17583  1E6B  3008               	movlw	8
 17584  1E6C  0227               	subwf	CC2500_InitPATable@loop_d,w
 17585  1E6D  1803               	btfsc	3,0
 17586  1E6E  0008               	return
 17587                           
 17588                           ;CC2500_B1.c: 179: temp = CC2500_patable_vaule[loop_d];
 17589  1E6F  0827               	movf	CC2500_InitPATable@loop_d,w
 17590  1E70  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
 17591  1E71  0084               	movwf	4
 17592  1E72  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
 17593  1E73  1803               	skipnc
 17594  1E74  3E01               	addlw	1
 17595  1E75  0085               	movwf	5
 17596  1E76  0800               	movf	0,w	;code access
 17597  1E77  00A5               	movwf	??_CC2500_InitPATable
 17598  1E78  0825               	movf	??_CC2500_InitPATable,w
 17599  1E79  00A6               	movwf	CC2500_InitPATable@temp
 17600                           
 17601                           ;CC2500_B1.c: 180: CC2500_WriteREG(0x3E, temp);
 17602  1E7A  0826               	movf	CC2500_InitPATable@temp,w
 17603  1E7B  00A5               	movwf	??_CC2500_InitPATable
 17604  1E7C  0825               	movf	??_CC2500_InitPATable,w
 17605  1E7D  00A2               	movwf	CC2500_WriteREG@value
 17606  1E7E  303E               	movlw	62
 17607  1E7F  319F  2707  319E   	fcall	_CC2500_WriteREG
 17608  1E82  3001               	movlw	1
 17609  1E83  0020               	movlb	0	; select bank0
 17610  1E84  00A5               	movwf	??_CC2500_InitPATable
 17611  1E85  0825               	movf	??_CC2500_InitPATable,w
 17612  1E86  07A7               	addwf	CC2500_InitPATable@loop_d,f
 17613  1E87  2E6B               	goto	L11
 17614  1E88                     __end_of_CC2500_InitPATable:	
 17615                           
 17616                           	psect	text117
 17617  1F07                     __ptext117:	
 17618 ;; *************** function _CC2500_WriteREG *****************
 17619 ;; Defined at:
 17620 ;;		line 251 in file "../src/CC2500_B1.c"
 17621 ;; Parameters:    Size  Location     Type
 17622 ;;  w_addr          1    wreg     unsigned char 
 17623 ;;  value           1    2[BANK0 ] unsigned char 
 17624 ;; Auto vars:     Size  Location     Type
 17625 ;;  w_addr          1    4[BANK0 ] unsigned char 
 17626 ;; Return value:  Size  Location     Type
 17627 ;;		None               void
 17628 ;; Registers used:
 17629 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17630 ;; Tracked objects:
 17631 ;;		On entry : 0/0
 17632 ;;		On exit  : 0/0
 17633 ;;		Unchanged: 0/0
 17634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17635 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17636 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17637 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17638 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17639 ;;Total ram usage:        3 bytes
 17640 ;; Hardware stack levels used:    1
 17641 ;; Hardware stack levels required when called:    6
 17642 ;; This function calls:
 17643 ;;		_CC2500_WriteByte
 17644 ;;		_Timeout_Counter
 17645 ;;		_set_TimeoutCleared
 17646 ;; This function is called by:
 17647 ;;		_CC2500_InitSetREG
 17648 ;;		_CC2500_InitPATable
 17649 ;; This function uses a non-reentrant model
 17650 ;;
 17651                           
 17652                           
 17653                           ;psect for function _CC2500_WriteREG
 17654  1F07                     _CC2500_WriteREG:	
 17655                           
 17656                           ;incstack = 0
 17657                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17658                           ;CC2500_WriteREG@w_addr stored from wreg
 17659  1F07  0020               	movlb	0	; select bank0
 17660  1F08  00A4               	movwf	CC2500_WriteREG@w_addr
 17661                           
 17662                           ;CC2500_B1.c: 252: RC4 = 0;
 17663  1F09  120E               	bcf	14,4	;volatile
 17664                           
 17665                           ;CC2500_B1.c: 253: SPI0Buffer = w_addr;
 17666  1F0A  0824               	movf	CC2500_WriteREG@w_addr,w
 17667  1F0B  00A3               	movwf	??_CC2500_WriteREG
 17668  1F0C  0823               	movf	??_CC2500_WriteREG,w
 17669  1F0D  00FB               	movwf	_SPI0Buffer
 17670                           
 17671                           ;CC2500_B1.c: 254: while (RC2 == 1 && myMain.Timeout == 0) {
 17672  1F0E  2F12               	goto	l6834
 17673  1F0F                     l6832:	
 17674                           
 17675                           ;CC2500_B1.c: 255: Timeout_Counter();
 17676  1F0F  319D  2564  319F   	fcall	_Timeout_Counter
 17677  1F12                     l6834:	
 17678  1F12  0020               	movlb	0	; select bank0
 17679  1F13  1D0E               	btfss	14,2	;volatile
 17680  1F14  2F18               	goto	l6838
 17681  1F15  0021               	movlb	1	; select bank1
 17682  1F16  1D2B               	btfss	(_myMain^(0+128)+11),2
 17683  1F17  2F0F               	goto	l6832
 17684  1F18                     l6838:	
 17685                           
 17686                           ;CC2500_B1.c: 256: };
 17687                           ;CC2500_B1.c: 257: set_TimeoutCleared();
 17688  1F18  319A  22FA  319F   	fcall	_set_TimeoutCleared
 17689                           
 17690                           ;CC2500_B1.c: 259: CC2500_WriteByte();
 17691  1F1B  319D  2514  319F   	fcall	_CC2500_WriteByte
 17692                           
 17693                           ;CC2500_B1.c: 260: SPI0Buffer = value;
 17694  1F1E  0020               	movlb	0	; select bank0
 17695  1F1F  0822               	movf	CC2500_WriteREG@value,w
 17696  1F20  00A3               	movwf	??_CC2500_WriteREG
 17697  1F21  0823               	movf	??_CC2500_WriteREG,w
 17698  1F22  00FB               	movwf	_SPI0Buffer
 17699                           
 17700                           ;CC2500_B1.c: 261: CC2500_WriteByte();
 17701  1F23  319D  2514         	fcall	_CC2500_WriteByte
 17702                           
 17703                           ;CC2500_B1.c: 262: RC4 = 1;
 17704  1F25  0020               	movlb	0	; select bank0
 17705  1F26  160E               	bsf	14,4	;volatile
 17706  1F27  0008               	return
 17707  1F28                     __end_of_CC2500_WriteREG:	
 17708                           
 17709                           	psect	text118
 17710  1B6C                     __ptext118:	
 17711 ;; *************** function _CC2500_FrequencyCabr *****************
 17712 ;; Defined at:
 17713 ;;		line 201 in file "../src/CC2500_B1.c"
 17714 ;; Parameters:    Size  Location     Type
 17715 ;;		None
 17716 ;; Auto vars:     Size  Location     Type
 17717 ;;		None
 17718 ;; Return value:  Size  Location     Type
 17719 ;;		None               void
 17720 ;; Registers used:
 17721 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17722 ;; Tracked objects:
 17723 ;;		On entry : 0/0
 17724 ;;		On exit  : 0/0
 17725 ;;		Unchanged: 0/0
 17726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17730 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17731 ;;Total ram usage:        0 bytes
 17732 ;; Hardware stack levels used:    1
 17733 ;; Hardware stack levels required when called:    7
 17734 ;; This function calls:
 17735 ;;		_CC2500_WriteCommand
 17736 ;;		_DelayTime_1us
 17737 ;; This function is called by:
 17738 ;;		_CC2500_PowerOnInitial
 17739 ;; This function uses a non-reentrant model
 17740 ;;
 17741                           
 17742                           
 17743                           ;psect for function _CC2500_FrequencyCabr
 17744  1B6C                     _CC2500_FrequencyCabr:	
 17745                           
 17746                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x33);
 17747                           
 17748                           ;incstack = 0
 17749                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17750  1B6C  3033               	movlw	51
 17751  1B6D  319D  25E6  319B   	fcall	_CC2500_WriteCommand
 17752                           
 17753                           ;CC2500_B1.c: 203: DelayTime_1us(1000);
 17754  1B70  30E8               	movlw	232
 17755  1B71  0020               	movlb	0	; select bank0
 17756  1B72  00A0               	movwf	DelayTime_1us@count
 17757  1B73  3003               	movlw	3
 17758  1B74  00A1               	movwf	DelayTime_1us@count+1
 17759  1B75  319F  27B3         	fcall	_DelayTime_1us
 17760  1B77  0008               	return
 17761  1B78                     __end_of_CC2500_FrequencyCabr:	
 17762                           
 17763                           	psect	text119
 17764  1FB3                     __ptext119:	
 17765 ;; *************** function _DelayTime_1us *****************
 17766 ;; Defined at:
 17767 ;;		line 320 in file "../src/CC2500_B1.c"
 17768 ;; Parameters:    Size  Location     Type
 17769 ;;  count           2    0[BANK0 ] int 
 17770 ;; Auto vars:     Size  Location     Type
 17771 ;;  j               2    4[BANK0 ] unsigned int 
 17772 ;;  i               2    2[BANK0 ] unsigned int 
 17773 ;; Return value:  Size  Location     Type
 17774 ;;		None               void
 17775 ;; Registers used:
 17776 ;;		wreg, status,2
 17777 ;; Tracked objects:
 17778 ;;		On entry : 0/0
 17779 ;;		On exit  : 0/0
 17780 ;;		Unchanged: 0/0
 17781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17782 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17783 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17785 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17786 ;;Total ram usage:        6 bytes
 17787 ;; Hardware stack levels used:    1
 17788 ;; Hardware stack levels required when called:    5
 17789 ;; This function calls:
 17790 ;;		Nothing
 17791 ;; This function is called by:
 17792 ;;		_CC2500_PowerRST
 17793 ;;		_CC2500_FrequencyCabr
 17794 ;; This function uses a non-reentrant model
 17795 ;;
 17796                           
 17797                           
 17798                           ;psect for function _DelayTime_1us
 17799  1FB3                     _DelayTime_1us:	
 17800                           
 17801                           ;CC2500_B1.c: 321: unsigned int i, j;
 17802                           ;CC2500_B1.c: 322: for (i = 1; i < count; i++)
 17803                           
 17804                           ;incstack = 0
 17805                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 17806  1FB3  3001               	movlw	1
 17807  1FB4  0020               	movlb	0	; select bank0
 17808  1FB5  00A2               	movwf	DelayTime_1us@i
 17809  1FB6  3000               	movlw	0
 17810  1FB7  00A3               	movwf	DelayTime_1us@i+1
 17811  1FB8                     l372:	
 17812  1FB8  0821               	movf	DelayTime_1us@count+1,w
 17813  1FB9  0223               	subwf	DelayTime_1us@i+1,w
 17814  1FBA  1D03               	skipz
 17815  1FBB  2FBE               	goto	u5975
 17816  1FBC  0820               	movf	DelayTime_1us@count,w
 17817  1FBD  0222               	subwf	DelayTime_1us@i,w
 17818  1FBE                     u5975:	
 17819  1FBE  1803               	btfsc	3,0
 17820  1FBF  0008               	return
 17821                           
 17822                           ;CC2500_B1.c: 323: for (j = 0; j <= 1; j++);
 17823  1FC0  01A4               	clrf	DelayTime_1us@j
 17824  1FC1  01A5               	clrf	DelayTime_1us@j+1
 17825  1FC2  3000               	movlw	0
 17826  1FC3  0225               	subwf	DelayTime_1us@j+1,w
 17827  1FC4  3002               	movlw	2
 17828  1FC5  1903               	skipnz
 17829  1FC6  0224               	subwf	DelayTime_1us@j,w
 17830  1FC7  1803               	btfsc	3,0
 17831  1FC8  2FD4               	goto	l6826
 17832  1FC9                     l6824:	
 17833  1FC9  3001               	movlw	1
 17834  1FCA  07A4               	addwf	DelayTime_1us@j,f
 17835  1FCB  3000               	movlw	0
 17836  1FCC  3DA5               	addwfc	DelayTime_1us@j+1,f
 17837  1FCD  3000               	movlw	0
 17838  1FCE  0225               	subwf	DelayTime_1us@j+1,w
 17839  1FCF  3002               	movlw	2
 17840  1FD0  1903               	skipnz
 17841  1FD1  0224               	subwf	DelayTime_1us@j,w
 17842  1FD2  1C03               	skipc
 17843  1FD3  2FC9               	goto	l6824
 17844  1FD4                     l6826:	
 17845  1FD4  3001               	movlw	1
 17846  1FD5  07A2               	addwf	DelayTime_1us@i,f
 17847  1FD6  3000               	movlw	0
 17848  1FD7  3DA3               	addwfc	DelayTime_1us@i+1,f
 17849  1FD8  2FB8               	goto	l372
 17850  1FD9                     __end_of_DelayTime_1us:	
 17851                           
 17852                           	psect	text120
 17853  1AEE                     __ptext120:	
 17854 ;; *************** function _CC2500_ClearTXFIFO *****************
 17855 ;; Defined at:
 17856 ;;		line 187 in file "../src/CC2500_B1.c"
 17857 ;; Parameters:    Size  Location     Type
 17858 ;;		None
 17859 ;; Auto vars:     Size  Location     Type
 17860 ;;		None
 17861 ;; Return value:  Size  Location     Type
 17862 ;;		None               void
 17863 ;; Registers used:
 17864 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17865 ;; Tracked objects:
 17866 ;;		On entry : 0/0
 17867 ;;		On exit  : 0/0
 17868 ;;		Unchanged: 0/0
 17869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17873 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17874 ;;Total ram usage:        0 bytes
 17875 ;; Hardware stack levels used:    1
 17876 ;; Hardware stack levels required when called:    7
 17877 ;; This function calls:
 17878 ;;		_CC2500_WriteCommand
 17879 ;; This function is called by:
 17880 ;;		_CC2500_PowerOnInitial
 17881 ;; This function uses a non-reentrant model
 17882 ;;
 17883                           
 17884                           
 17885                           ;psect for function _CC2500_ClearTXFIFO
 17886  1AEE                     _CC2500_ClearTXFIFO:	
 17887                           
 17888                           ;CC2500_B1.c: 188: CC2500_WriteCommand(0x3B);
 17889                           
 17890                           ;incstack = 0
 17891                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17892  1AEE  303B               	movlw	59
 17893  1AEF  319D  25E6         	fcall	_CC2500_WriteCommand
 17894  1AF1  0008               	return
 17895  1AF2                     __end_of_CC2500_ClearTXFIFO:	
 17896                           
 17897                           	psect	text121
 17898  1AEA                     __ptext121:	
 17899 ;; *************** function _CC2500_ClearRXFIFO *****************
 17900 ;; Defined at:
 17901 ;;		line 194 in file "../src/CC2500_B1.c"
 17902 ;; Parameters:    Size  Location     Type
 17903 ;;		None
 17904 ;; Auto vars:     Size  Location     Type
 17905 ;;		None
 17906 ;; Return value:  Size  Location     Type
 17907 ;;		None               void
 17908 ;; Registers used:
 17909 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17910 ;; Tracked objects:
 17911 ;;		On entry : 0/0
 17912 ;;		On exit  : 0/0
 17913 ;;		Unchanged: 0/0
 17914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17918 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17919 ;;Total ram usage:        0 bytes
 17920 ;; Hardware stack levels used:    1
 17921 ;; Hardware stack levels required when called:    7
 17922 ;; This function calls:
 17923 ;;		_CC2500_WriteCommand
 17924 ;; This function is called by:
 17925 ;;		_CC2500_PowerOnInitial
 17926 ;; This function uses a non-reentrant model
 17927 ;;
 17928                           
 17929                           
 17930                           ;psect for function _CC2500_ClearRXFIFO
 17931  1AEA                     _CC2500_ClearRXFIFO:	
 17932                           
 17933                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3A);
 17934                           
 17935                           ;incstack = 0
 17936                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17937  1AEA  303A               	movlw	58
 17938  1AEB  319D  25E6         	fcall	_CC2500_WriteCommand
 17939  1AED  0008               	return
 17940  1AEE                     __end_of_CC2500_ClearRXFIFO:	
 17941                           
 17942                           	psect	text122
 17943  1DE6                     __ptext122:	
 17944 ;; *************** function _CC2500_WriteCommand *****************
 17945 ;; Defined at:
 17946 ;;		line 285 in file "../src/CC2500_B1.c"
 17947 ;; Parameters:    Size  Location     Type
 17948 ;;  command         1    wreg     unsigned char 
 17949 ;; Auto vars:     Size  Location     Type
 17950 ;;  command         1    3[BANK0 ] unsigned char 
 17951 ;; Return value:  Size  Location     Type
 17952 ;;		None               void
 17953 ;; Registers used:
 17954 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17955 ;; Tracked objects:
 17956 ;;		On entry : 0/0
 17957 ;;		On exit  : 0/0
 17958 ;;		Unchanged: 0/0
 17959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17961 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17962 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17963 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17964 ;;Total ram usage:        2 bytes
 17965 ;; Hardware stack levels used:    1
 17966 ;; Hardware stack levels required when called:    6
 17967 ;; This function calls:
 17968 ;;		_CC2500_WriteByte
 17969 ;;		_Timeout_Counter
 17970 ;;		_set_TimeoutCleared
 17971 ;; This function is called by:
 17972 ;;		_CC2500_TxData
 17973 ;;		_CC2500_ClearTXFIFO
 17974 ;;		_CC2500_ClearRXFIFO
 17975 ;;		_CC2500_FrequencyCabr
 17976 ;;		_CC2500_SIDLEMode
 17977 ;;		_setRF_Main
 17978 ;;		_RF_RxDisable
 17979 ;; This function uses a non-reentrant model
 17980 ;;
 17981                           
 17982                           
 17983                           ;psect for function _CC2500_WriteCommand
 17984  1DE6                     _CC2500_WriteCommand:	
 17985                           
 17986                           ;incstack = 0
 17987                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17988                           ;CC2500_WriteCommand@command stored from wreg
 17989  1DE6  0020               	movlb	0	; select bank0
 17990  1DE7  00A3               	movwf	CC2500_WriteCommand@command
 17991                           
 17992                           ;CC2500_B1.c: 286: RC4 = 0;
 17993  1DE8  120E               	bcf	14,4	;volatile
 17994                           
 17995                           ;CC2500_B1.c: 287: SPI0Buffer = command;
 17996  1DE9  0823               	movf	CC2500_WriteCommand@command,w
 17997  1DEA  00A2               	movwf	??_CC2500_WriteCommand
 17998  1DEB  0822               	movf	??_CC2500_WriteCommand,w
 17999  1DEC  00FB               	movwf	_SPI0Buffer
 18000                           
 18001                           ;CC2500_B1.c: 289: while (RC2 == 1 && myMain.Timeout == 0) {
 18002  1DED  2DF1               	goto	l6530
 18003  1DEE                     l6528:	
 18004                           
 18005                           ;CC2500_B1.c: 290: Timeout_Counter();
 18006  1DEE  319D  2564  319D   	fcall	_Timeout_Counter
 18007  1DF1                     l6530:	
 18008  1DF1  0020               	movlb	0	; select bank0
 18009  1DF2  1D0E               	btfss	14,2	;volatile
 18010  1DF3  2DF7               	goto	l6534
 18011  1DF4  0021               	movlb	1	; select bank1
 18012  1DF5  1D2B               	btfss	(_myMain^(0+128)+11),2
 18013  1DF6  2DEE               	goto	l6528
 18014  1DF7                     l6534:	
 18015                           
 18016                           ;CC2500_B1.c: 291: };
 18017                           ;CC2500_B1.c: 292: set_TimeoutCleared();
 18018  1DF7  319A  22FA  319D   	fcall	_set_TimeoutCleared
 18019                           
 18020                           ;CC2500_B1.c: 294: CC2500_WriteByte();
 18021  1DFA  319D  2514         	fcall	_CC2500_WriteByte
 18022                           
 18023                           ;CC2500_B1.c: 295: RC4 = 1;
 18024  1DFC  0020               	movlb	0	; select bank0
 18025  1DFD  160E               	bsf	14,4	;volatile
 18026  1DFE  0008               	return
 18027  1DFF                     __end_of_CC2500_WriteCommand:	
 18028                           
 18029                           	psect	text123
 18030  1AFA                     __ptext123:	
 18031 ;; *************** function _set_TimeoutCleared *****************
 18032 ;; Defined at:
 18033 ;;		line 278 in file "../src/main_B1.c"
 18034 ;; Parameters:    Size  Location     Type
 18035 ;;		None
 18036 ;; Auto vars:     Size  Location     Type
 18037 ;;		None
 18038 ;; Return value:  Size  Location     Type
 18039 ;;		None               void
 18040 ;; Registers used:
 18041 ;;		status,2
 18042 ;; Tracked objects:
 18043 ;;		On entry : 0/0
 18044 ;;		On exit  : 0/0
 18045 ;;		Unchanged: 0/0
 18046 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18048 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18050 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18051 ;;Total ram usage:        0 bytes
 18052 ;; Hardware stack levels used:    1
 18053 ;; Hardware stack levels required when called:    5
 18054 ;; This function calls:
 18055 ;;		Nothing
 18056 ;; This function is called by:
 18057 ;;		_CC2500_TxData
 18058 ;;		_CC2500_RxData
 18059 ;;		_CC2500_PowerRST
 18060 ;;		_CC2500_WriteREG
 18061 ;;		_CC2500_WriteCommand
 18062 ;;		_CC2500_ReadStatus
 18063 ;;		_getAD
 18064 ;;		_TouchPower
 18065 ;;		_CC2500_ReadREG
 18066 ;; This function uses a non-reentrant model
 18067 ;;
 18068                           
 18069                           
 18070                           ;psect for function _set_TimeoutCleared
 18071  1AFA                     _set_TimeoutCleared:	
 18072                           
 18073                           ;main_B1.c: 279: myMain.Timeout = 0;
 18074                           
 18075                           ;incstack = 0
 18076                           ; Regs used in _set_TimeoutCleared: [status,2]
 18077  1AFA  0021               	movlb	1	; select bank1
 18078  1AFB  112B               	bcf	(_myMain^(0+128)+11),2
 18079                           
 18080                           ;main_B1.c: 280: myMain.Timeout_Counter = 0;
 18081  1AFC  01AC               	clrf	(_myMain^(0+128)+12)
 18082  1AFD  01AD               	clrf	((_myMain+1)^(0+128)+12)
 18083  1AFE  0008               	return
 18084  1AFF                     __end_of_set_TimeoutCleared:	
 18085                           
 18086                           	psect	text124
 18087  1D64                     __ptext124:	
 18088 ;; *************** function _Timeout_Counter *****************
 18089 ;; Defined at:
 18090 ;;		line 269 in file "../src/main_B1.c"
 18091 ;; Parameters:    Size  Location     Type
 18092 ;;		None
 18093 ;; Auto vars:     Size  Location     Type
 18094 ;;		None
 18095 ;; Return value:  Size  Location     Type
 18096 ;;		None               void
 18097 ;; Registers used:
 18098 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18099 ;; Tracked objects:
 18100 ;;		On entry : 0/0
 18101 ;;		On exit  : 0/0
 18102 ;;		Unchanged: 0/0
 18103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18106 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18107 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18108 ;;Total ram usage:        0 bytes
 18109 ;; Hardware stack levels used:    1
 18110 ;; Hardware stack levels required when called:    5
 18111 ;; This function calls:
 18112 ;;		Nothing
 18113 ;; This function is called by:
 18114 ;;		_CC2500_TxData
 18115 ;;		_CC2500_RxData
 18116 ;;		_CC2500_PowerRST
 18117 ;;		_CC2500_WriteREG
 18118 ;;		_CC2500_WriteCommand
 18119 ;;		_CC2500_ReadStatus
 18120 ;;		_getAD
 18121 ;;		_TouchPower
 18122 ;;		_CC2500_ReadREG
 18123 ;; This function uses a non-reentrant model
 18124 ;;
 18125                           
 18126                           
 18127                           ;psect for function _Timeout_Counter
 18128  1D64                     _Timeout_Counter:	
 18129                           
 18130                           ;main_B1.c: 270: myMain.Timeout_Counter++;
 18131                           
 18132                           ;incstack = 0
 18133                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 18134  1D64  3001               	movlw	1
 18135  1D65  0021               	movlb	1	; select bank1
 18136  1D66  07AC               	addwf	(_myMain^(0+128)+12),f
 18137  1D67  3000               	movlw	0
 18138  1D68  3DAD               	addwfc	((_myMain+1)^(0+128)+12),f
 18139                           
 18140                           ;main_B1.c: 271: if (myMain.Timeout_Counter == 10000) {
 18141  1D69  300C               	movlw	12
 18142  1D6A  3EA0               	addlw	_myMain& (0+255)
 18143  1D6B  0086               	movwf	6
 18144  1D6C  0187               	clrf	7
 18145  1D6D  3F40               	moviw [0]fsr1
 18146  1D6E  3A10               	xorlw	16
 18147  1D6F  1D03               	skipz
 18148  1D70  2D73               	goto	u5335
 18149  1D71  3F41               	moviw [1]fsr1
 18150  1D72  3A27               	xorlw	39
 18151  1D73                     u5335:	
 18152  1D73  1D03               	skipz
 18153  1D74  0008               	return
 18154                           
 18155                           ;main_B1.c: 272: myMain.Timeout_Counter = 0;
 18156  1D75  01AC               	clrf	(_myMain^(0+128)+12)
 18157  1D76  01AD               	clrf	((_myMain+1)^(0+128)+12)
 18158                           
 18159                           ;main_B1.c: 273: myMain.Timeout = 1;
 18160  1D77  152B               	bsf	(_myMain^(0+128)+11),2
 18161  1D78  0008               	return
 18162  1D79                     __end_of_Timeout_Counter:	
 18163                           
 18164                           	psect	text125
 18165  1D14                     __ptext125:	
 18166 ;; *************** function _CC2500_WriteByte *****************
 18167 ;; Defined at:
 18168 ;;		line 219 in file "../src/CC2500_B1.c"
 18169 ;; Parameters:    Size  Location     Type
 18170 ;;		None
 18171 ;; Auto vars:     Size  Location     Type
 18172 ;;  loop_a          1    1[BANK0 ] unsigned char 
 18173 ;; Return value:  Size  Location     Type
 18174 ;;		None               void
 18175 ;; Registers used:
 18176 ;;		wreg, status,2, status,0
 18177 ;; Tracked objects:
 18178 ;;		On entry : 0/0
 18179 ;;		On exit  : 0/0
 18180 ;;		Unchanged: 0/0
 18181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18183 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18184 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18185 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18186 ;;Total ram usage:        2 bytes
 18187 ;; Hardware stack levels used:    1
 18188 ;; Hardware stack levels required when called:    5
 18189 ;; This function calls:
 18190 ;;		Nothing
 18191 ;; This function is called by:
 18192 ;;		_CC2500_TxData
 18193 ;;		_CC2500_RxData
 18194 ;;		_CC2500_PowerRST
 18195 ;;		_CC2500_WriteREG
 18196 ;;		_CC2500_WriteCommand
 18197 ;;		_CC2500_ReadStatus
 18198 ;;		_CC2500_ReadREG
 18199 ;; This function uses a non-reentrant model
 18200 ;;
 18201                           
 18202                           
 18203                           ;psect for function _CC2500_WriteByte
 18204  1D14                     _CC2500_WriteByte:	
 18205                           
 18206                           ;CC2500_B1.c: 220: unsigned char loop_a;
 18207                           ;CC2500_B1.c: 221: for (loop_a = 0; loop_a < 8; loop_a++) {
 18208                           
 18209                           ;incstack = 0
 18210                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 18211  1D14  0020               	movlb	0	; select bank0
 18212  1D15  01A1               	clrf	CC2500_WriteByte@loop_a
 18213  1D16                     L12:	
 18214  1D16  3008               	movlw	8
 18215  1D17  0221               	subwf	CC2500_WriteByte@loop_a,w
 18216  1D18  1803               	btfsc	3,0
 18217  1D19  0008               	return
 18218                           
 18219                           ;CC2500_B1.c: 222: if (SPI0Buffer & 0x80)
 18220  1D1A  1FFB               	btfss	_SPI0Buffer,7
 18221  1D1B  2D1E               	goto	l328
 18222                           
 18223                           ;CC2500_B1.c: 223: RC0 = 1;
 18224  1D1C  140E               	bsf	14,0	;volatile
 18225  1D1D  2D1F               	goto	l329
 18226  1D1E                     l328:	
 18227                           
 18228                           ;CC2500_B1.c: 224: else
 18229                           ;CC2500_B1.c: 225: RC0 = 0;
 18230  1D1E  100E               	bcf	14,0	;volatile
 18231  1D1F                     l329:	
 18232                           
 18233                           ;CC2500_B1.c: 226: RC1 = 1;
 18234  1D1F  148E               	bsf	14,1	;volatile
 18235                           
 18236                           ;CC2500_B1.c: 227: SPI0Buffer <<= 1;
 18237  1D20  1003               	clrc
 18238  1D21  0DFB               	rlf	_SPI0Buffer,f
 18239                           
 18240                           ;CC2500_B1.c: 228: RC1 = 0;
 18241  1D22  108E               	bcf	14,1	;volatile
 18242  1D23  3001               	movlw	1
 18243  1D24  00A0               	movwf	??_CC2500_WriteByte
 18244  1D25  0820               	movf	??_CC2500_WriteByte,w
 18245  1D26  07A1               	addwf	CC2500_WriteByte@loop_a,f
 18246  1D27  2D16               	goto	L12
 18247  1D28                     __end_of_CC2500_WriteByte:	
 18248                           
 18249                           	psect	text126
 18250  14B5                     __ptext126:	
 18251 ;; *************** function _Buzzer_Main *****************
 18252 ;; Defined at:
 18253 ;;		line 46 in file "../src/Buzzer_B1.c"
 18254 ;; Parameters:    Size  Location     Type
 18255 ;;		None
 18256 ;; Auto vars:     Size  Location     Type
 18257 ;;		None
 18258 ;; Return value:  Size  Location     Type
 18259 ;;		None               void
 18260 ;; Registers used:
 18261 ;;		wreg, status,2, status,0
 18262 ;; Tracked objects:
 18263 ;;		On entry : 0/0
 18264 ;;		On exit  : 0/0
 18265 ;;		Unchanged: 0/0
 18266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18269 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18270 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18271 ;;Total ram usage:        1 bytes
 18272 ;; Hardware stack levels used:    1
 18273 ;; Hardware stack levels required when called:    5
 18274 ;; This function calls:
 18275 ;;		Nothing
 18276 ;; This function is called by:
 18277 ;;		_main
 18278 ;; This function uses a non-reentrant model
 18279 ;;
 18280                           
 18281                           
 18282                           ;psect for function _Buzzer_Main
 18283  14B5                     _Buzzer_Main:	
 18284                           
 18285                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 18286                           
 18287                           ;incstack = 0
 18288                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 18289  14B5  0021               	movlb	1	; select bank1
 18290  14B6  1CAE               	btfss	_Buz1^(0+128),1
 18291  14B7  0008               	return
 18292                           
 18293                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 18294  14B8  3001               	movlw	1
 18295  14B9  07AF               	addwf	(_Buz1^(0+128)+1),f
 18296  14BA  3000               	movlw	0
 18297  14BB  3DB0               	addwfc	((_Buz1+1)^(0+128)+1),f
 18298                           
 18299                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 18300  14BC  0835               	movf	((_Buz1+1)^(0+128)+6),w
 18301  14BD  0230               	subwf	((_Buz1+1)^(0+128)+1),w
 18302  14BE  1D03               	skipz
 18303  14BF  2CC2               	goto	u7705
 18304  14C0  0834               	movf	(_Buz1^(0+128)+6),w
 18305  14C1  022F               	subwf	(_Buz1^(0+128)+1),w
 18306  14C2                     u7705:	
 18307  14C2  1C03               	skipc
 18308  14C3  0008               	return
 18309                           
 18310                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 18311  14C4  01AF               	clrf	(_Buz1^(0+128)+1)
 18312  14C5  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 18313                           
 18314                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 18315  14C6  12AE               	bcf	_Buz1^(0+128),5
 18316  14C7  0020               	movlb	0	; select bank0
 18317  14C8  1D8D               	btfss	13,3	;volatile
 18318  14C9  2CCC               	goto	l7862
 18319  14CA  0021               	movlb	1	; select bank1
 18320  14CB  16AE               	bsf	_Buz1^(0+128),5
 18321  14CC                     l7862:	
 18322                           
 18323                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 18324  14CC  0021               	movlb	1	; select bank1
 18325  14CD  1AAE               	btfsc	_Buz1^(0+128),5
 18326  14CE  2CF8               	goto	l106
 18327                           
 18328                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 18329  14CF  08B1               	movf	(_Buz1^(0+128)+3),f
 18330  14D0  1D03               	skipz
 18331  14D1  2CF4               	goto	l107
 18332                           
 18333                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 18334  14D2  1DAE               	btfss	_Buz1^(0+128),3
 18335  14D3  2CE2               	goto	l108
 18336                           
 18337                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 18338  14D4  11AE               	bcf	_Buz1^(0+128),3
 18339                           
 18340                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 18341  14D5  0832               	movf	(_Buz1^(0+128)+4),w
 18342  14D6  0020               	movlb	0	; select bank0
 18343  14D7  00A0               	movwf	??_Buzzer_Main
 18344  14D8  0820               	movf	??_Buzzer_Main,w
 18345  14D9  0021               	movlb	1	; select bank1
 18346  14DA  00B1               	movwf	(_Buz1^(0+128)+3)
 18347                           
 18348                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 18349  14DB  0837               	movf	((_Buz1+1)^(0+128)+8),w
 18350  14DC  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18351  14DD  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18352  14DE  0836               	movf	(_Buz1^(0+128)+8),w
 18353  14DF  01B4               	clrf	(_Buz1^(0+128)+6)
 18354  14E0  07B4               	addwf	(_Buz1^(0+128)+6),f
 18355                           
 18356                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 18357  14E1  0008               	return
 18358  14E2                     l108:	
 18359  14E2  1E2E               	btfss	_Buz1^(0+128),4
 18360  14E3  2CF2               	goto	l110
 18361                           
 18362                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 18363  14E4  122E               	bcf	_Buz1^(0+128),4
 18364                           
 18365                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 18366  14E5  0833               	movf	(_Buz1^(0+128)+5),w
 18367  14E6  0020               	movlb	0	; select bank0
 18368  14E7  00A0               	movwf	??_Buzzer_Main
 18369  14E8  0820               	movf	??_Buzzer_Main,w
 18370  14E9  0021               	movlb	1	; select bank1
 18371  14EA  00B1               	movwf	(_Buz1^(0+128)+3)
 18372                           
 18373                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 18374  14EB  0839               	movf	((_Buz1+1)^(0+128)+10),w
 18375  14EC  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18376  14ED  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18377  14EE  0838               	movf	(_Buz1^(0+128)+10),w
 18378  14EF  01B4               	clrf	(_Buz1^(0+128)+6)
 18379  14F0  07B4               	addwf	(_Buz1^(0+128)+6),f
 18380                           
 18381                           ;Buzzer_B1.c: 62: } else {
 18382  14F1  0008               	return
 18383  14F2                     l110:	
 18384                           
 18385                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 18386  14F2  10AE               	bcf	_Buz1^(0+128),1
 18387                           
 18388                           ;Buzzer_B1.c: 64: }
 18389                           ;Buzzer_B1.c: 65: } else {
 18390  14F3  0008               	return
 18391  14F4                     l107:	
 18392                           
 18393                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 18394  14F4  16AE               	bsf	_Buz1^(0+128),5
 18395                           
 18396                           ;Buzzer_B1.c: 68: RB3 = 1;
 18397  14F5  0020               	movlb	0	; select bank0
 18398  14F6  158D               	bsf	13,3	;volatile
 18399                           
 18400                           ;Buzzer_B1.c: 69: }
 18401                           ;Buzzer_B1.c: 70: } else {
 18402  14F7  0008               	return
 18403  14F8                     l106:	
 18404                           
 18405                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 18406  14F8  12AE               	bcf	_Buz1^(0+128),5
 18407                           
 18408                           ;Buzzer_B1.c: 73: RB3 = 0;
 18409  14F9  0020               	movlb	0	; select bank0
 18410  14FA  118D               	bcf	13,3	;volatile
 18411                           
 18412                           ;Buzzer_B1.c: 75: Buz1.Count--;
 18413  14FB  3001               	movlw	1
 18414  14FC  0021               	movlb	1	; select bank1
 18415  14FD  02B1               	subwf	(_Buz1^(0+128)+3),f
 18416  14FE  0008               	return
 18417  14FF                     __end_of_Buzzer_Main:	
 18418                           
 18419                           	psect	text127
 18420  1ADB                     __ptext127:	
 18421 ;; *************** function _Buzzer_Initialization *****************
 18422 ;; Defined at:
 18423 ;;		line 11 in file "../src/Buzzer_B1.c"
 18424 ;; Parameters:    Size  Location     Type
 18425 ;;		None
 18426 ;; Auto vars:     Size  Location     Type
 18427 ;;		None
 18428 ;; Return value:  Size  Location     Type
 18429 ;;		None               void
 18430 ;; Registers used:
 18431 ;;		None
 18432 ;; Tracked objects:
 18433 ;;		On entry : 0/0
 18434 ;;		On exit  : 0/0
 18435 ;;		Unchanged: 0/0
 18436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18440 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18441 ;;Total ram usage:        0 bytes
 18442 ;; Hardware stack levels used:    1
 18443 ;; Hardware stack levels required when called:    5
 18444 ;; This function calls:
 18445 ;;		Nothing
 18446 ;; This function is called by:
 18447 ;;		_main
 18448 ;; This function uses a non-reentrant model
 18449 ;;
 18450                           
 18451                           
 18452                           ;psect for function _Buzzer_Initialization
 18453  1ADB                     _Buzzer_Initialization:	
 18454                           
 18455                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 18456                           
 18457                           ;incstack = 0
 18458                           ; Regs used in _Buzzer_Initialization: []
 18459  1ADB  0021               	movlb	1	; select bank1
 18460  1ADC  142E               	bsf	_Buz1^(0+128),0
 18461  1ADD  0008               	return
 18462  1ADE                     __end_of_Buzzer_Initialization:	
 18463                           
 18464                           	psect	intentry
 18465  0004                     __pintentry:	
 18466 ;; *************** function _ISR *****************
 18467 ;; Defined at:
 18468 ;;		line 107 in file "../src/MCU_B1.c"
 18469 ;; Parameters:    Size  Location     Type
 18470 ;;		None
 18471 ;; Auto vars:     Size  Location     Type
 18472 ;;		None
 18473 ;; Return value:  Size  Location     Type
 18474 ;;		None               void
 18475 ;; Registers used:
 18476 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18477 ;; Tracked objects:
 18478 ;;		On entry : 0/0
 18479 ;;		On exit  : 0/0
 18480 ;;		Unchanged: 0/0
 18481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18482 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18484 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18485 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18486 ;;Total ram usage:        1 bytes
 18487 ;; Hardware stack levels used:    1
 18488 ;; Hardware stack levels required when called:    4
 18489 ;; This function calls:
 18490 ;;		_IOC_ISR
 18491 ;;		_TMR1_ISR
 18492 ;; This function is called by:
 18493 ;;		Interrupt level 1
 18494 ;; This function uses a non-reentrant model
 18495 ;;
 18496                           
 18497  0004                     _ISR:	
 18498                           
 18499                           ;incstack = 0
 18500                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18501  0004  147E               	bsf	126,0	;set compiler interrupt flag
 18502  0005  3180               	pagesel	$
 18503  0006  0020               	movlb	0	; select bank0
 18504  0007  087F               	movf	127,w
 18505  0008  00F7               	movwf	??_ISR
 18506                           
 18507                           ;MCU_B1.c: 109: IOC_ISR();
 18508  0009  319B  23DB  3180   	fcall	_IOC_ISR
 18509                           
 18510                           ;MCU_B1.c: 111: ;;
 18511                           ;MCU_B1.c: 113: TMR1_ISR();
 18512  000C  3190  206F         	fcall	_TMR1_ISR
 18513  000E  0877               	movf	??_ISR,w
 18514  000F  0020               	movlb	0	; select bank0
 18515  0010  00FF               	movwf	127
 18516  0011  107E               	bcf	126,0	;clear compiler interrupt flag
 18517  0012  0009               	retfie
 18518  0013                     __end_of_ISR:	
 18519                           
 18520                           	psect	text129
 18521  106F                     __ptext129:	
 18522 ;; *************** function _TMR1_ISR *****************
 18523 ;; Defined at:
 18524 ;;		line 209 in file "../src/MCU_B1.c"
 18525 ;; Parameters:    Size  Location     Type
 18526 ;;		None
 18527 ;; Auto vars:     Size  Location     Type
 18528 ;;		None
 18529 ;; Return value:  Size  Location     Type
 18530 ;;		None               void
 18531 ;; Registers used:
 18532 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18533 ;; Tracked objects:
 18534 ;;		On entry : 0/0
 18535 ;;		On exit  : 0/0
 18536 ;;		Unchanged: 0/0
 18537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18539 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18540 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18541 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18542 ;;Total ram usage:        0 bytes
 18543 ;; Hardware stack levels used:    1
 18544 ;; Hardware stack levels required when called:    2
 18545 ;; This function calls:
 18546 ;;		_setDimmerLights_IntrControl
 18547 ;; This function is called by:
 18548 ;;		_ISR
 18549 ;; This function uses a non-reentrant model
 18550 ;;
 18551                           
 18552                           
 18553                           ;psect for function _TMR1_ISR
 18554  106F                     _TMR1_ISR:	
 18555                           
 18556                           ;MCU_B1.c: 210: if (TMR1IE == 1 && TMR1IF == 1) {
 18557                           
 18558                           ;incstack = 0
 18559                           ; Regs used in _TMR1_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18560  106F  0021               	movlb	1	; select bank1
 18561  1070  1C11               	btfss	17,0	;volatile
 18562  1071  0008               	return
 18563  1072  0020               	movlb	0	; select bank0
 18564  1073  1C11               	btfss	17,0	;volatile
 18565  1074  0008               	return
 18566                           
 18567                           ;MCU_B1.c: 212: TMR1H = ((65536-1480)/256);
 18568  1075  30FA               	movlw	250
 18569  1076  0097               	movwf	23	;volatile
 18570                           
 18571                           ;MCU_B1.c: 213: TMR1L = ((65536-1480)%256);
 18572  1077  3038               	movlw	56
 18573  1078  0096               	movwf	22	;volatile
 18574                           
 18575                           ;MCU_B1.c: 214: TMR1IF = 0;
 18576  1079  1011               	bcf	17,0	;volatile
 18577                           
 18578                           ;MCU_B1.c: 219: setDimmerLights_IntrControl(1);
 18579  107A  3001               	movlw	1
 18580  107B  3183  2337  3190   	fcall	_setDimmerLights_IntrControl
 18581                           
 18582                           ;MCU_B1.c: 224: setDimmerLights_IntrControl(2);
 18583  107E  3002               	movlw	2
 18584  107F  3183  2337  3190   	fcall	_setDimmerLights_IntrControl
 18585                           
 18586                           ;MCU_B1.c: 234: Timer1.Count++;
 18587  1082  3001               	movlw	1
 18588  1083  0021               	movlb	1	; select bank1
 18589  1084  07C7               	addwf	(_Timer1^(0+128)+1),f
 18590  1085  3000               	movlw	0
 18591  1086  3DC8               	addwfc	((_Timer1+1)^(0+128)+1),f
 18592                           
 18593                           ;MCU_B1.c: 235: if (Timer1.Count == 100) {
 18594  1087  3001               	movlw	1
 18595  1088  3EC6               	addlw	_Timer1& (0+255)
 18596  1089  0086               	movwf	6
 18597  108A  0187               	clrf	7
 18598  108B  3F40               	moviw [0]fsr1
 18599  108C  3A64               	xorlw	100
 18600  108D  1D03               	skipz
 18601  108E  2891               	goto	u786_25
 18602  108F  3F41               	moviw [1]fsr1
 18603  1090  3A00               	xorlw	0
 18604  1091                     u786_25:	
 18605  1091  1D03               	skipz
 18606  1092  0008               	return
 18607                           
 18608                           ;MCU_B1.c: 236: Timer1.Count = 0;
 18609  1093  01C7               	clrf	(_Timer1^(0+128)+1)
 18610  1094  01C8               	clrf	((_Timer1+1)^(0+128)+1)
 18611                           
 18612                           ;MCU_B1.c: 237: Timer1.Timeout = 1;
 18613  1095  1446               	bsf	_Timer1^(0+128),0
 18614  1096  0008               	return
 18615  1097                     __end_of_TMR1_ISR:	
 18616                           
 18617                           	psect	text130
 18618  0337                     __ptext130:	
 18619 ;; *************** function _setDimmerLights_IntrControl *****************
 18620 ;; Defined at:
 18621 ;;		line 94 in file "../src/Dimmer_B1.c"
 18622 ;; Parameters:    Size  Location     Type
 18623 ;;  lights          1    wreg     unsigned char 
 18624 ;; Auto vars:     Size  Location     Type
 18625 ;;  lights          1    6[COMMON] unsigned char 
 18626 ;; Return value:  Size  Location     Type
 18627 ;;		None               void
 18628 ;; Registers used:
 18629 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18630 ;; Tracked objects:
 18631 ;;		On entry : 0/0
 18632 ;;		On exit  : 0/0
 18633 ;;		Unchanged: 0/0
 18634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18635 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18636 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18637 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18638 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18639 ;;Total ram usage:        5 bytes
 18640 ;; Hardware stack levels used:    1
 18641 ;; Hardware stack levels required when called:    1
 18642 ;; This function calls:
 18643 ;;		_DimmerIntrPointSelect
 18644 ;; This function is called by:
 18645 ;;		_TMR1_ISR
 18646 ;; This function uses a non-reentrant model
 18647 ;;
 18648                           
 18649                           
 18650                           ;psect for function _setDimmerLights_IntrControl
 18651  0337                     _setDimmerLights_IntrControl:	
 18652                           
 18653                           ;incstack = 0
 18654                           ; Regs used in _setDimmerLights_IntrControl: [wreg-fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18655                           ;setDimmerLights_IntrControl@lights stored from wreg
 18656  0337  00F6               	movwf	setDimmerLights_IntrControl@lights
 18657                           
 18658                           ;Dimmer_B1.c: 232: DimmerIntrPointSelect(lights);
 18659  0338  0876               	movf	setDimmerLights_IntrControl@lights,w
 18660  0339  319C  246C  3183   	fcall	_DimmerIntrPointSelect
 18661                           
 18662                           ;Dimmer_B1.c: 233: if (DimmerLightsIntr->GO == 1) {
 18663  033C  0879               	movf	_DimmerLightsIntr,w
 18664  033D  0086               	movwf	6
 18665  033E  3001               	movlw	1	; select bank2/3
 18666  033F  0087               	movwf	7
 18667  0340  1C01               	btfss	1,0
 18668  0341  2B99               	goto	i1l7290
 18669                           
 18670                           ;Dimmer_B1.c: 234: DimmerLightsIntr->Count++;
 18671  0342  3001               	movlw	1
 18672  0343  00F2               	movwf	??_setDimmerLights_IntrControl
 18673  0344  0879               	movf	_DimmerLightsIntr,w
 18674  0345  3E03               	addlw	3
 18675  0346  0086               	movwf	6
 18676  0347  3001               	movlw	1	; select bank2/3
 18677  0348  0087               	movwf	7
 18678  0349  0872               	movf	??_setDimmerLights_IntrControl,w
 18679  034A  0781               	addwf	1,f
 18680                           
 18681                           ;Dimmer_B1.c: 235: if (DimmerLightsIntr->Count
 18682                           ;Dimmer_B1.c: 236: >= (DimmerLightsIntr->DimmingValue - Dimmer.Correction)) {
 18683  034B  0022               	movlb	2	; select bank2
 18684  034C  0822               	movf	(_Dimmer^(0+256)+2),w
 18685  034D  00F2               	movwf	??_setDimmerLights_IntrControl
 18686  034E  01F3               	clrf	??_setDimmerLights_IntrControl+1
 18687  034F  09F2               	comf	??_setDimmerLights_IntrControl,f
 18688  0350  09F3               	comf	??_setDimmerLights_IntrControl+1,f
 18689  0351  0AF2               	incf	??_setDimmerLights_IntrControl,f
 18690  0352  1903               	skipnz
 18691  0353  0AF3               	incf	??_setDimmerLights_IntrControl+1,f
 18692  0354  0879               	movf	_DimmerLightsIntr,w
 18693  0355  3E04               	addlw	4
 18694  0356  0086               	movwf	6
 18695  0357  3001               	movlw	1	; select bank2/3
 18696  0358  0087               	movwf	7
 18697  0359  0801               	movf	1,w
 18698  035A  0772               	addwf	??_setDimmerLights_IntrControl,w
 18699  035B  00F4               	movwf	??_setDimmerLights_IntrControl+2
 18700  035C  0873               	movf	??_setDimmerLights_IntrControl+1,w
 18701  035D  1803               	skipnc
 18702  035E  0A73               	incf	??_setDimmerLights_IntrControl+1,w
 18703  035F  00F5               	movwf	??_setDimmerLights_IntrControl+3
 18704  0360  0879               	movf	_DimmerLightsIntr,w
 18705  0361  3E03               	addlw	3
 18706  0362  0086               	movwf	6
 18707  0363  3001               	movlw	1	; select bank2/3
 18708  0364  0087               	movwf	7
 18709  0365  0875               	movf	??_setDimmerLights_IntrControl+3,w
 18710  0366  3A80               	xorlw	128
 18711  0367  3C80               	sublw	128
 18712  0368  1D03               	skipz
 18713  0369  2B6C               	goto	u665_25
 18714  036A  0874               	movf	??_setDimmerLights_IntrControl+2,w
 18715  036B  0201               	subwf	1,w
 18716  036C                     u665_25:	
 18717  036C  1C03               	skipc
 18718  036D  0008               	return
 18719                           
 18720                           ;Dimmer_B1.c: 237: DimmerLightsIntr->Count = 0;
 18721  036E  0879               	movf	_DimmerLightsIntr,w
 18722  036F  3E03               	addlw	3
 18723  0370  0086               	movwf	6
 18724  0371  3001               	movlw	1	; select bank2/3
 18725  0372  0087               	movwf	7
 18726  0373  0181               	clrf	1
 18727                           
 18728                           ;Dimmer_B1.c: 238: DimmerLightsIntr->GO = 0;
 18729  0374  0879               	movf	_DimmerLightsIntr,w
 18730  0375  0086               	movwf	6
 18731  0376  3001               	movlw	1	; select bank2/3
 18732  0377  0087               	movwf	7
 18733  0378  1001               	bcf	1,0
 18734                           
 18735                           ;Dimmer_B1.c: 239: DimmerLightsIntr->Flag = 1;
 18736  0379  0879               	movf	_DimmerLightsIntr,w
 18737  037A  3E08               	addlw	8
 18738  037B  0086               	movwf	6
 18739  037C  3001               	movlw	1	; select bank2/3
 18740  037D  0087               	movwf	7
 18741  037E  1401               	bsf	1,0
 18742                           
 18743                           ;Dimmer_B1.c: 240: if (DimmerLightsIntr->MOSFET == 1) {
 18744  037F  0879               	movf	_DimmerLightsIntr,w
 18745  0380  3E09               	addlw	9
 18746  0381  0086               	movwf	6
 18747  0382  3001               	movlw	1	; select bank2/3
 18748  0383  0087               	movwf	7
 18749  0384  1E01               	btfss	1,4
 18750  0385  0008               	return
 18751                           
 18752                           ;Dimmer_B1.c: 241: DimmerLightsIntr->MOSFET = 0;
 18753  0386  0879               	movf	_DimmerLightsIntr,w
 18754  0387  3E09               	addlw	9
 18755  0388  0086               	movwf	6
 18756  0389  3001               	movlw	1	; select bank2/3
 18757  038A  0087               	movwf	7
 18758  038B  1201               	bcf	1,4
 18759                           
 18760                           ;Dimmer_B1.c: 243: if (lights == 1) {
 18761  038C  0876               	movf	setDimmerLights_IntrControl@lights,w
 18762  038D  3A01               	xorlw	1
 18763  038E  1D03               	skipz
 18764  038F  2B92               	goto	i1l7286
 18765                           
 18766                           ;Dimmer_B1.c: 244: RA7 = 0;
 18767  0390  0020               	movlb	0	; select bank0
 18768  0391  138C               	bcf	12,7	;volatile
 18769  0392                     i1l7286:	
 18770                           
 18771                           ;Dimmer_B1.c: 246: }
 18772                           ;Dimmer_B1.c: 249: if (lights == 2) {
 18773  0392  0876               	movf	setDimmerLights_IntrControl@lights,w
 18774  0393  3A02               	xorlw	2
 18775  0394  1D03               	skipz
 18776  0395  0008               	return
 18777                           
 18778                           ;Dimmer_B1.c: 250: RB4 = 0;
 18779  0396  0020               	movlb	0	; select bank0
 18780  0397  120D               	bcf	13,4	;volatile
 18781                           
 18782                           ;Dimmer_B1.c: 251: }
 18783                           ;Dimmer_B1.c: 253: }
 18784                           ;Dimmer_B1.c: 254: }
 18785                           ;Dimmer_B1.c: 255: } else {
 18786  0398  0008               	return
 18787  0399                     i1l7290:	
 18788                           
 18789                           ;Dimmer_B1.c: 256: if (DimmerLightsIntr->Flag == 1) {
 18790  0399  0879               	movf	_DimmerLightsIntr,w
 18791  039A  3E08               	addlw	8
 18792  039B  0086               	movwf	6
 18793  039C  3001               	movlw	1	; select bank2/3
 18794  039D  0087               	movwf	7
 18795  039E  1C01               	btfss	1,0
 18796  039F  2C5D               	goto	i1l746
 18797                           
 18798                           ;Dimmer_B1.c: 257: DimmerLightsIntr->Flag = 0;
 18799  03A0  0879               	movf	_DimmerLightsIntr,w
 18800  03A1  3E08               	addlw	8
 18801  03A2  0086               	movwf	6
 18802  03A3  3001               	movlw	1	; select bank2/3
 18803  03A4  0087               	movwf	7
 18804  03A5  1001               	bcf	1,0
 18805                           
 18806                           ;Dimmer_B1.c: 258: if (DimmerLightsIntr->Signal == 1) {
 18807  03A6  0879               	movf	_DimmerLightsIntr,w
 18808  03A7  0086               	movwf	6
 18809  03A8  3001               	movlw	1	; select bank2/3
 18810  03A9  0087               	movwf	7
 18811  03AA  1C81               	btfss	1,1
 18812  03AB  2C5D               	goto	i1l746
 18813                           
 18814                           ;Dimmer_B1.c: 259: DimmerLightsIntr->DimmingTime++;
 18815  03AC  3001               	movlw	1
 18816  03AD  00F2               	movwf	??_setDimmerLights_IntrControl
 18817  03AE  0A79               	incf	_DimmerLightsIntr,w
 18818  03AF  0086               	movwf	6
 18819  03B0  3001               	movlw	1	; select bank2/3
 18820  03B1  0087               	movwf	7
 18821  03B2  0872               	movf	??_setDimmerLights_IntrControl,w
 18822  03B3  0781               	addwf	1,f
 18823                           
 18824                           ;Dimmer_B1.c: 260: if (DimmerLightsIntr->DimmingTime >= DimmerLightsIntr->DimmingTimeVal
      +                          ue) {
 18825  03B4  0A79               	incf	_DimmerLightsIntr,w
 18826  03B5  0086               	movwf	6
 18827  03B6  3001               	movlw	1	; select bank2/3
 18828  03B7  0087               	movwf	7
 18829  03B8  0879               	movf	_DimmerLightsIntr,w
 18830  03B9  3E02               	addlw	2
 18831  03BA  0084               	movwf	4
 18832  03BB  3001               	movlw	1	; select bank2/3
 18833  03BC  0085               	movwf	5
 18834  03BD  0800               	movf	0,w
 18835  03BE  0201               	subwf	1,w
 18836  03BF  1C03               	skipc
 18837  03C0  2C5D               	goto	i1l746
 18838                           
 18839                           ;Dimmer_B1.c: 261: DimmerLightsIntr->DimmingTime = 0;
 18840  03C1  0A79               	incf	_DimmerLightsIntr,w
 18841  03C2  0086               	movwf	6
 18842  03C3  3001               	movlw	1	; select bank2/3
 18843  03C4  0087               	movwf	7
 18844  03C5  0181               	clrf	1
 18845                           
 18846                           ;Dimmer_B1.c: 262: if (DimmerLightsIntr->AdjFlag == 1) {
 18847  03C6  0879               	movf	_DimmerLightsIntr,w
 18848  03C7  0086               	movwf	6
 18849  03C8  3001               	movlw	1	; select bank2/3
 18850  03C9  0087               	movwf	7
 18851  03CA  1D81               	btfss	1,3
 18852  03CB  2C12               	goto	i1l7320
 18853                           
 18854                           ;Dimmer_B1.c: 263: if (DimmerLightsIntr->AdjStatus == 0) {
 18855  03CC  0879               	movf	_DimmerLightsIntr,w
 18856  03CD  0086               	movwf	6
 18857  03CE  3001               	movlw	1	; select bank2/3
 18858  03CF  0087               	movwf	7
 18859  03D0  1A01               	btfsc	1,4
 18860  03D1  2BF3               	goto	i1l7312
 18861                           
 18862                           ;Dimmer_B1.c: 264: if (DimmerLightsIntr->DimmingValue < ((char)(80*0.8))) {
 18863  03D2  0879               	movf	_DimmerLightsIntr,w
 18864  03D3  3E04               	addlw	4
 18865  03D4  0086               	movwf	6
 18866  03D5  3001               	movlw	1	; select bank2/3
 18867  03D6  0087               	movwf	7
 18868  03D7  3040               	movlw	64
 18869  03D8  0201               	subwf	1,w
 18870  03D9  1803               	skipnc
 18871  03DA  2BE4               	goto	i1l7308
 18872                           
 18873                           ;Dimmer_B1.c: 265: DimmerLightsIntr->DimmingValue++;
 18874  03DB  3001               	movlw	1
 18875  03DC  00F2               	movwf	??_setDimmerLights_IntrControl
 18876  03DD  0879               	movf	_DimmerLightsIntr,w
 18877  03DE  3E04               	addlw	4
 18878  03DF  0086               	movwf	6
 18879  03E0  3001               	movlw	1	; select bank2/3
 18880  03E1  0087               	movwf	7
 18881  03E2  0872               	movf	??_setDimmerLights_IntrControl,w
 18882  03E3  0781               	addwf	1,f
 18883  03E4                     i1l7308:	
 18884                           
 18885                           ;Dimmer_B1.c: 266: }
 18886                           ;Dimmer_B1.c: 267: if (DimmerLightsIntr->DimmingValue == ((char)(80*0.8))) {
 18887  03E4  0879               	movf	_DimmerLightsIntr,w
 18888  03E5  3E04               	addlw	4
 18889  03E6  0086               	movwf	6
 18890  03E7  3001               	movlw	1	; select bank2/3
 18891  03E8  0087               	movwf	7
 18892  03E9  0801               	movf	1,w
 18893  03EA  3A40               	xorlw	64
 18894  03EB  1D03               	skipz
 18895  03EC  2C5D               	goto	i1l746
 18896                           
 18897                           ;Dimmer_B1.c: 268: DimmerLightsIntr->AdjStatus = 1;
 18898  03ED  0879               	movf	_DimmerLightsIntr,w
 18899  03EE  0086               	movwf	6
 18900  03EF  3001               	movlw	1	; select bank2/3
 18901  03F0  0087               	movwf	7
 18902  03F1  1601               	bsf	1,4
 18903                           
 18904                           ;Dimmer_B1.c: 269: }
 18905                           ;Dimmer_B1.c: 270: } else {
 18906  03F2  2C5D               	goto	i1l746
 18907  03F3                     i1l7312:	
 18908                           
 18909                           ;Dimmer_B1.c: 271: if (DimmerLightsIntr->DimmingValue > ((char)(15*0.8))) {
 18910  03F3  0879               	movf	_DimmerLightsIntr,w
 18911  03F4  3E04               	addlw	4
 18912  03F5  0086               	movwf	6
 18913  03F6  3001               	movlw	1	; select bank2/3
 18914  03F7  0087               	movwf	7
 18915  03F8  300D               	movlw	13
 18916  03F9  0201               	subwf	1,w
 18917  03FA  1C03               	skipc
 18918  03FB  2C03               	goto	i1l7316
 18919                           
 18920                           ;Dimmer_B1.c: 272: DimmerLightsIntr->DimmingValue--;
 18921  03FC  0879               	movf	_DimmerLightsIntr,w
 18922  03FD  3E04               	addlw	4
 18923  03FE  0086               	movwf	6
 18924  03FF  3001               	movlw	1	; select bank2/3
 18925  0400  0087               	movwf	7
 18926  0401  3001               	movlw	1
 18927  0402  0281               	subwf	1,f
 18928  0403                     i1l7316:	
 18929                           
 18930                           ;Dimmer_B1.c: 273: }
 18931                           ;Dimmer_B1.c: 274: if (DimmerLightsIntr->DimmingValue == ((char)(15*0.8))) {
 18932  0403  0879               	movf	_DimmerLightsIntr,w
 18933  0404  3E04               	addlw	4
 18934  0405  0086               	movwf	6
 18935  0406  3001               	movlw	1	; select bank2/3
 18936  0407  0087               	movwf	7
 18937  0408  0801               	movf	1,w
 18938  0409  3A0C               	xorlw	12
 18939  040A  1D03               	skipz
 18940  040B  2C5D               	goto	i1l746
 18941                           
 18942                           ;Dimmer_B1.c: 275: DimmerLightsIntr->AdjStatus = 0;
 18943  040C  0879               	movf	_DimmerLightsIntr,w
 18944  040D  0086               	movwf	6
 18945  040E  3001               	movlw	1	; select bank2/3
 18946  040F  0087               	movwf	7
 18947  0410  1201               	bcf	1,4
 18948                           
 18949                           ;Dimmer_B1.c: 276: }
 18950                           ;Dimmer_B1.c: 277: }
 18951                           ;Dimmer_B1.c: 278: } else if (DimmerLightsIntr->AdjRF == 1) {
 18952  0411  2C5D               	goto	i1l746
 18953  0412                     i1l7320:	
 18954  0412  0879               	movf	_DimmerLightsIntr,w
 18955  0413  0086               	movwf	6
 18956  0414  3001               	movlw	1	; select bank2/3
 18957  0415  0087               	movwf	7
 18958  0416  1D01               	btfss	1,2
 18959  0417  2C5D               	goto	i1l746
 18960                           
 18961                           ;Dimmer_B1.c: 279: if (DimmerLightsIntr->DimmingValue < DimmerLightsIntr->MaxmumValue) {
 18962  0418  0879               	movf	_DimmerLightsIntr,w
 18963  0419  3E04               	addlw	4
 18964  041A  0086               	movwf	6
 18965  041B  3001               	movlw	1	; select bank2/3
 18966  041C  0087               	movwf	7
 18967  041D  0879               	movf	_DimmerLightsIntr,w
 18968  041E  3E05               	addlw	5
 18969  041F  0084               	movwf	4
 18970  0420  3001               	movlw	1	; select bank2/3
 18971  0421  0085               	movwf	5
 18972  0422  0800               	movf	0,w
 18973  0423  0201               	subwf	1,w
 18974  0424  1803               	skipnc
 18975  0425  2C30               	goto	i1l7326
 18976                           
 18977                           ;Dimmer_B1.c: 280: DimmerLightsIntr->DimmingValue++;
 18978  0426  3001               	movlw	1
 18979  0427  00F2               	movwf	??_setDimmerLights_IntrControl
 18980  0428  0879               	movf	_DimmerLightsIntr,w
 18981  0429  3E04               	addlw	4
 18982  042A  0086               	movwf	6
 18983  042B  3001               	movlw	1	; select bank2/3
 18984  042C  0087               	movwf	7
 18985  042D  0872               	movf	??_setDimmerLights_IntrControl,w
 18986  042E  0781               	addwf	1,f
 18987                           
 18988                           ;Dimmer_B1.c: 281: } else if (DimmerLightsIntr->DimmingValue > DimmerLightsIntr->MaxmumV
      +                          alue) {
 18989  042F  2C45               	goto	i1l7330
 18990  0430                     i1l7326:	
 18991  0430  0879               	movf	_DimmerLightsIntr,w
 18992  0431  3E05               	addlw	5
 18993  0432  0086               	movwf	6
 18994  0433  3001               	movlw	1	; select bank2/3
 18995  0434  0087               	movwf	7
 18996  0435  0879               	movf	_DimmerLightsIntr,w
 18997  0436  3E04               	addlw	4
 18998  0437  0084               	movwf	4
 18999  0438  3001               	movlw	1	; select bank2/3
 19000  0439  0085               	movwf	5
 19001  043A  0800               	movf	0,w
 19002  043B  0201               	subwf	1,w
 19003  043C  1803               	skipnc
 19004  043D  2C45               	goto	i1l7330
 19005                           
 19006                           ;Dimmer_B1.c: 282: DimmerLightsIntr->DimmingValue--;
 19007  043E  0879               	movf	_DimmerLightsIntr,w
 19008  043F  3E04               	addlw	4
 19009  0440  0086               	movwf	6
 19010  0441  3001               	movlw	1	; select bank2/3
 19011  0442  0087               	movwf	7
 19012  0443  3001               	movlw	1
 19013  0444  0281               	subwf	1,f
 19014  0445                     i1l7330:	
 19015                           
 19016                           ;Dimmer_B1.c: 283: }
 19017                           ;Dimmer_B1.c: 284: if (DimmerLightsIntr->DimmingValue == DimmerLightsIntr->MaxmumValue) 
      +                          {
 19018  0445  0879               	movf	_DimmerLightsIntr,w
 19019  0446  3E05               	addlw	5
 19020  0447  0086               	movwf	6
 19021  0448  3001               	movlw	1	; select bank2/3
 19022  0449  0087               	movwf	7
 19023  044A  0879               	movf	_DimmerLightsIntr,w
 19024  044B  3E04               	addlw	4
 19025  044C  0084               	movwf	4
 19026  044D  3001               	movlw	1	; select bank2/3
 19027  044E  0085               	movwf	5
 19028  044F  0800               	movf	0,w
 19029  0450  0601               	xorwf	1,w
 19030  0451  1D03               	skipz
 19031  0452  2C5D               	goto	i1l746
 19032                           
 19033                           ;Dimmer_B1.c: 285: DimmerLightsIntr->AdjRF = 0;
 19034  0453  0879               	movf	_DimmerLightsIntr,w
 19035  0454  0086               	movwf	6
 19036  0455  3001               	movlw	1	; select bank2/3
 19037  0456  0087               	movwf	7
 19038  0457  1101               	bcf	1,2
 19039                           
 19040                           ;Dimmer_B1.c: 286: DimmerLightsIntr->Signal = 0;
 19041  0458  0879               	movf	_DimmerLightsIntr,w
 19042  0459  0086               	movwf	6
 19043  045A  3001               	movlw	1	; select bank2/3
 19044  045B  0087               	movwf	7
 19045  045C  1081               	bcf	1,1
 19046  045D                     i1l746:	
 19047                           
 19048                           ;Dimmer_B1.c: 287: }
 19049                           ;Dimmer_B1.c: 288: }
 19050                           ;Dimmer_B1.c: 289: }
 19051                           ;Dimmer_B1.c: 290: }
 19052                           ;Dimmer_B1.c: 291: }
 19053                           ;Dimmer_B1.c: 293: if (DimmerLightsIntr->MosfetSignal == 1) {
 19054  045D  0879               	movf	_DimmerLightsIntr,w
 19055  045E  3E09               	addlw	9
 19056  045F  0086               	movwf	6
 19057  0460  3001               	movlw	1	; select bank2/3
 19058  0461  0087               	movwf	7
 19059  0462  1D81               	btfss	1,3
 19060  0463  0008               	return
 19061                           
 19062                           ;Dimmer_B1.c: 294: DimmerLightsIntr->MosfetSignalCount++;
 19063  0464  3001               	movlw	1
 19064  0465  00F2               	movwf	??_setDimmerLights_IntrControl
 19065  0466  0879               	movf	_DimmerLightsIntr,w
 19066  0467  3E0C               	addlw	12
 19067  0468  0086               	movwf	6
 19068  0469  3001               	movlw	1	; select bank2/3
 19069  046A  0087               	movwf	7
 19070  046B  0872               	movf	??_setDimmerLights_IntrControl,w
 19071  046C  0781               	addwf	1,f
 19072                           
 19073                           ;Dimmer_B1.c: 295: if (DimmerLightsIntr->MosfetSignalCount == 5) {
 19074  046D  0879               	movf	_DimmerLightsIntr,w
 19075  046E  3E0C               	addlw	12
 19076  046F  0086               	movwf	6
 19077  0470  3001               	movlw	1	; select bank2/3
 19078  0471  0087               	movwf	7
 19079  0472  0801               	movf	1,w
 19080  0473  3A05               	xorlw	5
 19081  0474  1D03               	skipz
 19082  0475  0008               	return
 19083                           
 19084                           ;Dimmer_B1.c: 296: DimmerLightsIntr->MosfetSignalCount = 0;
 19085  0476  0879               	movf	_DimmerLightsIntr,w
 19086  0477  3E0C               	addlw	12
 19087  0478  0086               	movwf	6
 19088  0479  3001               	movlw	1	; select bank2/3
 19089  047A  0087               	movwf	7
 19090  047B  0181               	clrf	1
 19091                           
 19092                           ;Dimmer_B1.c: 297: DimmerLightsIntr->MosfetSignal = 0;
 19093  047C  0879               	movf	_DimmerLightsIntr,w
 19094  047D  3E09               	addlw	9
 19095  047E  0086               	movwf	6
 19096  047F  3001               	movlw	1	; select bank2/3
 19097  0480  0087               	movwf	7
 19098  0481  1181               	bcf	1,3
 19099  0482  0008               	return
 19100  0483                     __end_of_setDimmerLights_IntrControl:	
 19101                           
 19102                           	psect	text131
 19103  1C6C                     __ptext131:	
 19104 ;; *************** function _DimmerIntrPointSelect *****************
 19105 ;; Defined at:
 19106 ;;		line 72 in file "../src/Dimmer_B1.c"
 19107 ;; Parameters:    Size  Location     Type
 19108 ;;  lights          1    wreg     unsigned char 
 19109 ;; Auto vars:     Size  Location     Type
 19110 ;;  lights          1    1[COMMON] unsigned char 
 19111 ;; Return value:  Size  Location     Type
 19112 ;;		None               void
 19113 ;; Registers used:
 19114 ;;		wreg
 19115 ;; Tracked objects:
 19116 ;;		On entry : 0/0
 19117 ;;		On exit  : 0/0
 19118 ;;		Unchanged: 0/0
 19119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19121 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19122 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19123 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19124 ;;Total ram usage:        2 bytes
 19125 ;; Hardware stack levels used:    1
 19126 ;; This function calls:
 19127 ;;		Nothing
 19128 ;; This function is called by:
 19129 ;;		_setDimmerLights_IntrControl
 19130 ;; This function uses a non-reentrant model
 19131 ;;
 19132                           
 19133                           
 19134                           ;psect for function _DimmerIntrPointSelect
 19135  1C6C                     _DimmerIntrPointSelect:	
 19136                           
 19137                           ;incstack = 0
 19138                           ; Regs used in _DimmerIntrPointSelect: [wreg]
 19139                           ;DimmerIntrPointSelect@lights stored from wreg
 19140  1C6C  00F1               	movwf	DimmerIntrPointSelect@lights
 19141                           
 19142                           ;Dimmer_B1.c: 74: if (lights == 1) {
 19143  1C6D  0871               	movf	DimmerIntrPointSelect@lights,w
 19144  1C6E  3A01               	xorlw	1
 19145  1C6F  1D03               	skipz
 19146  1C70  2C75               	goto	i1l735
 19147                           
 19148                           ;Dimmer_B1.c: 75: DimmerLightsIntr = &DimmerLights1;
 19149  1C71  30BE               	movlw	_DimmerLights1& (0+255)
 19150  1C72  00F0               	movwf	??_DimmerIntrPointSelect
 19151  1C73  0870               	movf	??_DimmerIntrPointSelect,w
 19152  1C74  00F9               	movwf	_DimmerLightsIntr
 19153  1C75                     i1l735:	
 19154                           
 19155                           ;Dimmer_B1.c: 76: }
 19156                           ;Dimmer_B1.c: 79: if (lights == 2) {
 19157  1C75  0871               	movf	DimmerIntrPointSelect@lights,w
 19158  1C76  3A02               	xorlw	2
 19159  1C77  1D03               	skipz
 19160  1C78  0008               	return
 19161                           
 19162                           ;Dimmer_B1.c: 80: DimmerLightsIntr = &DimmerLights2;
 19163  1C79  30CD               	movlw	_DimmerLights2& (0+255)
 19164  1C7A  00F0               	movwf	??_DimmerIntrPointSelect
 19165  1C7B  0870               	movf	??_DimmerIntrPointSelect,w
 19166  1C7C  00F9               	movwf	_DimmerLightsIntr
 19167  1C7D  0008               	return
 19168  1C7E                     __end_of_DimmerIntrPointSelect:	
 19169                           
 19170                           	psect	text132
 19171  1BDB                     __ptext132:	
 19172 ;; *************** function _IOC_ISR *****************
 19173 ;; Defined at:
 19174 ;;		line 400 in file "../src/MCU_B1.c"
 19175 ;; Parameters:    Size  Location     Type
 19176 ;;		None
 19177 ;; Auto vars:     Size  Location     Type
 19178 ;;		None
 19179 ;; Return value:  Size  Location     Type
 19180 ;;		None               void
 19181 ;; Registers used:
 19182 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19183 ;; Tracked objects:
 19184 ;;		On entry : 0/0
 19185 ;;		On exit  : 0/0
 19186 ;;		Unchanged: 0/0
 19187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19191 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19192 ;;Total ram usage:        0 bytes
 19193 ;; Hardware stack levels used:    1
 19194 ;; Hardware stack levels required when called:    3
 19195 ;; This function calls:
 19196 ;;		_setDimmerReClock
 19197 ;; This function is called by:
 19198 ;;		_ISR
 19199 ;; This function uses a non-reentrant model
 19200 ;;
 19201                           
 19202                           
 19203                           ;psect for function _IOC_ISR
 19204  1BDB                     _IOC_ISR:	
 19205                           
 19206                           ;MCU_B1.c: 401: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 19207                           
 19208                           ;incstack = 0
 19209                           ; Regs used in _IOC_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19210  1BDB  1D8B               	btfss	11,3	;volatile
 19211  1BDC  0008               	return
 19212  1BDD  1C0B               	btfss	11,0	;volatile
 19213  1BDE  0008               	return
 19214  1BDF  0027               	movlb	7	; select bank7
 19215  1BE0  1D16               	btfss	22,2	;volatile
 19216  1BE1  0008               	return
 19217                           
 19218                           ;MCU_B1.c: 402: IOCBF2 = 0;
 19219  1BE2  1116               	bcf	22,2	;volatile
 19220                           
 19221                           ;MCU_B1.c: 403: IOCIF = 0;
 19222  1BE3  100B               	bcf	11,0	;volatile
 19223                           
 19224                           ;MCU_B1.c: 404: if (myMain.PowerON == 1) {
 19225  1BE4  0021               	movlb	1	; select bank1
 19226  1BE5  1C20               	btfss	_myMain^(0+128),0
 19227  1BE6  0008               	return
 19228                           
 19229                           ;MCU_B1.c: 407: setDimmerReClock();
 19230  1BE7  319B  231D         	fcall	_setDimmerReClock
 19231  1BE9  0008               	return
 19232  1BEA                     __end_of_IOC_ISR:	
 19233                           
 19234                           	psect	text133
 19235  1B1D                     __ptext133:	
 19236 ;; *************** function _setDimmerReClock *****************
 19237 ;; Defined at:
 19238 ;;		line 243 in file "../src/MCU_B1.c"
 19239 ;; Parameters:    Size  Location     Type
 19240 ;;		None
 19241 ;; Auto vars:     Size  Location     Type
 19242 ;;		None
 19243 ;; Return value:  Size  Location     Type
 19244 ;;		None               void
 19245 ;; Registers used:
 19246 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19247 ;; Tracked objects:
 19248 ;;		On entry : 0/0
 19249 ;;		On exit  : 0/0
 19250 ;;		Unchanged: 0/0
 19251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19255 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19256 ;;Total ram usage:        0 bytes
 19257 ;; Hardware stack levels used:    1
 19258 ;; Hardware stack levels required when called:    2
 19259 ;; This function calls:
 19260 ;;		_setDimmerLights_IntrIOC_GO
 19261 ;; This function is called by:
 19262 ;;		_IOC_ISR
 19263 ;; This function uses a non-reentrant model
 19264 ;;
 19265                           
 19266                           
 19267                           ;psect for function _setDimmerReClock
 19268  1B1D                     _setDimmerReClock:	
 19269                           
 19270                           ;MCU_B1.c: 248: setDimmerLights_IntrIOC_GO(1);
 19271                           
 19272                           ;incstack = 0
 19273                           ; Regs used in _setDimmerReClock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19274  1B1D  3001               	movlw	1
 19275  1B1E  3193  232C  319B   	fcall	_setDimmerLights_IntrIOC_GO
 19276                           
 19277                           ;MCU_B1.c: 252: setDimmerLights_IntrIOC_GO(2);
 19278  1B21  3002               	movlw	2
 19279  1B22  3193  232C         	fcall	_setDimmerLights_IntrIOC_GO
 19280  1B24  0008               	return
 19281  1B25                     __end_of_setDimmerReClock:	
 19282                           
 19283                           	psect	text134
 19284  132C                     __ptext134:	
 19285 ;; *************** function _setDimmerLights_IntrIOC_GO *****************
 19286 ;; Defined at:
 19287 ;;		line 28 in file "../src/Dimmer_B1.c"
 19288 ;; Parameters:    Size  Location     Type
 19289 ;;  lights          1    wreg     unsigned char 
 19290 ;; Auto vars:     Size  Location     Type
 19291 ;;  lights          1    2[COMMON] unsigned char 
 19292 ;; Return value:  Size  Location     Type
 19293 ;;		None               void
 19294 ;; Registers used:
 19295 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19296 ;; Tracked objects:
 19297 ;;		On entry : 0/0
 19298 ;;		On exit  : 0/0
 19299 ;;		Unchanged: 0/0
 19300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19301 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19302 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19304 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19305 ;;Total ram usage:        1 bytes
 19306 ;; Hardware stack levels used:    1
 19307 ;; Hardware stack levels required when called:    1
 19308 ;; This function calls:
 19309 ;;		_DimmerIntrIOCPointSelect
 19310 ;; This function is called by:
 19311 ;;		_setDimmerReClock
 19312 ;; This function uses a non-reentrant model
 19313 ;;
 19314                           
 19315                           
 19316                           ;psect for function _setDimmerLights_IntrIOC_GO
 19317  132C                     _setDimmerLights_IntrIOC_GO:	
 19318                           
 19319                           ;incstack = 0
 19320                           ; Regs used in _setDimmerLights_IntrIOC_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
 19321                           ;setDimmerLights_IntrIOC_GO@lights stored from wreg
 19322  132C  00F2               	movwf	setDimmerLights_IntrIOC_GO@lights
 19323                           
 19324                           ;Dimmer_B1.c: 29: DimmerIntrIOCPointSelect(lights);
 19325  132D  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19326  132E  319D  2500  3193   	fcall	_DimmerIntrIOCPointSelect
 19327                           
 19328                           ;Dimmer_B1.c: 45: if (DimmerLightsIntrIOC->GO == 0 && DimmerLightsIntrIOC->MosfetSignal 
      +                          == 0 && RB2 == 0) {
 19329  1331  0021               	movlb	1	; select bank1
 19330  1332  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 19331  1333  0086               	movwf	6
 19332  1334  3001               	movlw	1	; select bank2/3
 19333  1335  0087               	movwf	7
 19334  1336  1801               	btfsc	1,0
 19335  1337  0008               	return
 19336  1338  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 19337  1339  3E09               	addlw	9
 19338  133A  0086               	movwf	6
 19339  133B  3001               	movlw	1	; select bank2/3
 19340  133C  0087               	movwf	7
 19341  133D  1981               	btfsc	1,3
 19342  133E  0008               	return
 19343  133F  0020               	movlb	0	; select bank0
 19344  1340  190D               	btfsc	13,2	;volatile
 19345  1341  0008               	return
 19346                           
 19347                           ;Dimmer_B1.c: 46: DimmerLightsIntrIOC->GO = 1;
 19348  1342  0021               	movlb	1	; select bank1
 19349  1343  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 19350  1344  0086               	movwf	6
 19351  1345  3001               	movlw	1	; select bank2/3
 19352  1346  0087               	movwf	7
 19353  1347  1401               	bsf	1,0
 19354                           
 19355                           ;Dimmer_B1.c: 47: DimmerLightsIntrIOC->MosfetSignal = 1;
 19356  1348  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 19357  1349  3E09               	addlw	9
 19358  134A  0086               	movwf	6
 19359  134B  3001               	movlw	1	; select bank2/3
 19360  134C  0087               	movwf	7
 19361  134D  1581               	bsf	1,3
 19362                           
 19363                           ;Dimmer_B1.c: 48: Dimmer.Correction = 0;
 19364  134E  0022               	movlb	2	; select bank2
 19365  134F  01A2               	clrf	(_Dimmer^(0+256)+2)
 19366                           
 19367                           ;Dimmer_B1.c: 50: if (DimmerLightsIntrIOC->StatusFlag == 1) {
 19368  1350  0021               	movlb	1	; select bank1
 19369  1351  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 19370  1352  0086               	movwf	6
 19371  1353  3001               	movlw	1	; select bank2/3
 19372  1354  0087               	movwf	7
 19373  1355  1F01               	btfss	1,6
 19374  1356  0008               	return
 19375                           
 19376                           ;Dimmer_B1.c: 51: DimmerLightsIntrIOC->MOSFET = 1;
 19377  1357  084E               	movf	_DimmerLightsIntrIOC^(0+128),w
 19378  1358  3E09               	addlw	9
 19379  1359  0086               	movwf	6
 19380  135A  3001               	movlw	1	; select bank2/3
 19381  135B  0087               	movwf	7
 19382  135C  1601               	bsf	1,4
 19383                           
 19384                           ;Dimmer_B1.c: 53: if (lights == 1) {
 19385  135D  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19386  135E  3A01               	xorlw	1
 19387  135F  1D03               	skipz
 19388  1360  2B63               	goto	i1l6866
 19389                           
 19390                           ;Dimmer_B1.c: 54: RA7 = 1;
 19391  1361  0020               	movlb	0	; select bank0
 19392  1362  178C               	bsf	12,7	;volatile
 19393  1363                     i1l6866:	
 19394                           
 19395                           ;Dimmer_B1.c: 56: }
 19396                           ;Dimmer_B1.c: 59: if (lights == 2) {
 19397  1363  0872               	movf	setDimmerLights_IntrIOC_GO@lights,w
 19398  1364  3A02               	xorlw	2
 19399  1365  1D03               	skipz
 19400  1366  0008               	return
 19401                           
 19402                           ;Dimmer_B1.c: 60: RB4 = 1;
 19403  1367  0020               	movlb	0	; select bank0
 19404  1368  160D               	bsf	13,4	;volatile
 19405  1369  0008               	return
 19406  136A                     __end_of_setDimmerLights_IntrIOC_GO:	
 19407                           
 19408                           	psect	text135
 19409  1D00                     __ptext135:	
 19410 ;; *************** function _DimmerIntrIOCPointSelect *****************
 19411 ;; Defined at:
 19412 ;;		line 8 in file "../src/Dimmer_B1.c"
 19413 ;; Parameters:    Size  Location     Type
 19414 ;;  lights          1    wreg     unsigned char 
 19415 ;; Auto vars:     Size  Location     Type
 19416 ;;  lights          1    1[COMMON] unsigned char 
 19417 ;; Return value:  Size  Location     Type
 19418 ;;		None               void
 19419 ;; Registers used:
 19420 ;;		wreg
 19421 ;; Tracked objects:
 19422 ;;		On entry : 0/0
 19423 ;;		On exit  : 0/0
 19424 ;;		Unchanged: 0/0
 19425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19427 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19428 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19429 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19430 ;;Total ram usage:        2 bytes
 19431 ;; Hardware stack levels used:    1
 19432 ;; This function calls:
 19433 ;;		Nothing
 19434 ;; This function is called by:
 19435 ;;		_setDimmerLights_IntrIOC_GO
 19436 ;; This function uses a non-reentrant model
 19437 ;;
 19438                           
 19439                           
 19440                           ;psect for function _DimmerIntrIOCPointSelect
 19441  1D00                     _DimmerIntrIOCPointSelect:	
 19442                           
 19443                           ;incstack = 0
 19444                           ; Regs used in _DimmerIntrIOCPointSelect: [wreg]
 19445                           ;DimmerIntrIOCPointSelect@lights stored from wreg
 19446  1D00  00F1               	movwf	DimmerIntrIOCPointSelect@lights
 19447                           
 19448                           ;Dimmer_B1.c: 10: if (lights == 1) {
 19449  1D01  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19450  1D02  3A01               	xorlw	1
 19451  1D03  1D03               	skipz
 19452  1D04  2D0A               	goto	i1l723
 19453                           
 19454                           ;Dimmer_B1.c: 11: DimmerLightsIntrIOC = &DimmerLights1;
 19455  1D05  30BE               	movlw	_DimmerLights1& (0+255)
 19456  1D06  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19457  1D07  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19458  1D08  0021               	movlb	1	; select bank1
 19459  1D09  00CE               	movwf	_DimmerLightsIntrIOC^(0+128)
 19460  1D0A                     i1l723:	
 19461                           
 19462                           ;Dimmer_B1.c: 12: }
 19463                           ;Dimmer_B1.c: 15: if (lights == 2) {
 19464  1D0A  0871               	movf	DimmerIntrIOCPointSelect@lights,w
 19465  1D0B  3A02               	xorlw	2
 19466  1D0C  1D03               	skipz
 19467  1D0D  0008               	return
 19468                           
 19469                           ;Dimmer_B1.c: 16: DimmerLightsIntrIOC = &DimmerLights2;
 19470  1D0E  30CD               	movlw	_DimmerLights2& (0+255)
 19471  1D0F  00F0               	movwf	??_DimmerIntrIOCPointSelect
 19472  1D10  0870               	movf	??_DimmerIntrIOCPointSelect,w
 19473  1D11  0021               	movlb	1	; select bank1
 19474  1D12  00CE               	movwf	_DimmerLightsIntrIOC^(0+128)
 19475  1D13  0008               	return
 19476  1D14                     __end_of_DimmerIntrIOCPointSelect:	
 19477  007E                     btemp	set	126	;btemp
 19478  007E                     pic14e$flags	set	126
 19479  007E                     wtemp	set	126
 19480  007E                     wtemp0	set	126
 19481  0080                     wtemp1	set	128
 19482  0082                     wtemp2	set	130
 19483  0084                     wtemp3	set	132
 19484  0086                     wtemp4	set	134
 19485  0088                     wtemp5	set	136
 19486  007F                     wtemp6	set	127
 19487  007E                     ttemp	set	126
 19488  007E                     ttemp0	set	126
 19489  0081                     ttemp1	set	129
 19490  0084                     ttemp2	set	132
 19491  0087                     ttemp3	set	135
 19492  007F                     ttemp4	set	127
 19493  007E                     ltemp	set	126
 19494  007E                     ltemp0	set	126
 19495  0082                     ltemp1	set	130
 19496  0086                     ltemp2	set	134
 19497  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         266
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      14
    BANK0            80     78      80
    BANK1            80      7      79
    BANK2            80      0      73
    BANK3            80      0      78
    BANK4            80      0      69
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK2[4]), VarLED2(BANK2[4]), VarLED1(BANK2[4]), 

    DimmerLights22	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), 

    DimmerLights11	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights1(BANK3[15]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntr	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    DimmerLightsIntrIOC	PTR struct DimmerLights size(1) Largest target is 15
		 -> NULL(NULL[0]), DimmerLights2(BANK3[15]), DimmerLights1(BANK3[15]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK2[5]), DlySw1(BANK2[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_setDimmerLights_IntrControl
    _setDimmerLights_IntrControl->_DimmerIntrPointSelect
    _setDimmerReClock->_setDimmerLights_IntrIOC_GO
    _setDimmerLights_IntrIOC_GO->_DimmerIntrIOCPointSelect

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setBuz
    _Switch_Main->_setMain_Exception
    _setSw_Main->_setDimmerLights_SwOff
    _setDimmerLights_AdjControl->_setDimmerLights_TriggerAdj
    _setMain_Exception->_setDimmerLights_ErrorClose
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setLog_Code->_setBuz
    _setControl_Lights_Table->_setRFSW_AdjControl
    _setRFSW_Control->_setDimmerLights_SwOff
    _setDimmerLights_SwOn->_setBuz
    _setRFSW_AdjControl->_setRF_DimmerValue
    _setRF_DimmerValue->_setDimmerLights_AdjRF
    _setDimmerLights_AdjRF->_getPercentValue
    _getPercentValue->___fttol
    ___ftmul->___awtoft
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->_getMain_LightsStatus
    _getMain_LoadOK->_getDimmer_LoadOK
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_getMain_LightsStatus
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_setPercentValue
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights
    _setDimmerLights_Main->_setDimmerLights_Adj
    _setDimmerLights_Adj->_setPercentValue
    _setDimmerLights->_setPercentValue
    _setPercentValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _setLED->_LedPointSelect
    _getMain_LightsStatus->_getDimmerLights_Status
    _DimmerLights_Initialization->_setDimmerLights_Initialization
    _setDimmerLights_Initialization->_DimmerLightsPointSelect
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setDimmerLights_ErrorClose
    _setDimmerLights_ErrorClose->_setDimmerLights_SwOff
    _setDimmerLights_SwOff->_setDelayOff_GO
    _setDimmerLights_TriggerAdj->_DimmerLightsPointSelect
    _setDimmerLights_Trigger->_DimmerLightsPointSelect
    _setDelayOff_GO->_DelayTimejudge
    _DelayTimejudge->___bmul
    _getDelayOff_GO->_DelayOffPointSelect
    _getDimmerLights_Status->_DimmerLightsPointSelect
    _setBuz->___awdiv
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4   77965
                                              3 BANK1      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1287
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     194
                                              4 BANK0      2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     445
                                              4 BANK0      6     6      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     172
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    1448
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         1     1      0    1448
                                             13 BANK0      1     1      0
           _getMain_All_Error_Status
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          2     2      0    9897
                                             29 BANK0      2     2      0
                         _TouchPower
           _getMain_All_Error_Status
                  _setMain_Exception
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    5283
                                             17 BANK0      3     3      0
                      _SwPointSelect
                    _getSw_KeyStatus
                             _setBuz
         _setDimmerLights_AdjControl
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_AdjControl                           4     4      0     400
                                              5 BANK0      4     4      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     117
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setMain_Exception                                    7     7      0    4386
                                             22 BANK0      7     7      0
               _getDimmerLights_Line
               _getMain_LightsStatus
                             _setBuz
         _setDimmerLights_ErrorClose
                             _setLED
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Line                                 2     2      0      25
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     780
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     780
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   23520
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           4     4      0   23520
                                             77 BANK0      1     1      0
                                              0 BANK1      3     3      0
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                          _getBuz_GO
           _getMain_All_Error_Status
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   22737
                                             75 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    1331
                                             13 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   21222
                             _setBuz
         _setDimmerLights_ErrorClose
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0    6258
                                             17 BANK0      3     3      0
                     _getDelayOff_GO
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 3     3      0    1663
                                             13 BANK0      3     3      0
            _DimmerLightsPointSelect
          _getAll_DimmerLights_AdjGO
                             _setBuz
            _setDimmerLights_Trigger
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   11703
                                             71 BANK0      4     4      0
             _getDimmerLights_Status
                   _setMemory_Modify
                  _setRF_DimmerValue
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerValue                                    3     3      0   11480
                                             68 BANK0      3     3      0
              _setDimmerLights_AdjRF
 ---------------------------------------------------------------------------------
 (7) _setDimmerLights_AdjRF                                2     2      0   11414
                                             66 BANK0      2     2      0
            _DimmerLightsPointSelect
                    _getPercentValue
 ---------------------------------------------------------------------------------
 (8) _getPercentValue                                      6     6      0   11348
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___ftmul                                             16    10      6    2502
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     252
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            7     7      0    1227
                                              9 BANK0      7     7      0
                            ___lwdiv
          _getAll_DimmerLights_AdjGO
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _getMain_Lights_Count
                     _getMain_LoadOK
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_LoadOK                                       2     2      0      47
                                              1 BANK0      2     2      0
                   _getDimmer_LoadOK
 ---------------------------------------------------------------------------------
 (3) _getDimmer_LoadOK                                     1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 4     4      0      73
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _getAll_DimmerLights_AdjGO                            3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     418
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0     868
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0     868
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1119
                                              9 BANK0      1     1      0
                _Flash_Memory_Modify
               _getMain_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0     914
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    9804
                                             66 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
                    _setPercentValue
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     684
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    4     4      0   21974
                                             71 BANK0      4     4      0
                         _getLoad_OK
           _getMain_All_Error_Status
               _getMain_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   21561
                                             70 BANK0      1     1      0
            _DimmerLightsPointSelect
                             _setBuz
                    _setDimmerLights
                _setDimmerLights_Adj
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Adj                                  4     3      1    9615
                                             66 BANK0      4     3      1
            _DimmerLightsPointSelect
           _getMain_All_Error_Status
                    _setPercentValue
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights                                      4     3      1   10505
                                             66 BANK0      4     3      1
            _DimmerLightsPointSelect
           _getMain_All_Error_Status
               _setDimmerLights_Line
                             _setLED
                    _setPercentValue
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1     348
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (2) _setPercentValue                                      6     6      0    8846
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (9) ___fttol                                             14    10      4     380
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     173
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             16    10      6    2712
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___ftadd                                             13     7      6    3246
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             6     3      3    2267
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (10) ___ftpack                                            8     3      5    2048
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     758
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     161
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (3) _getMain_LightsStatus                                 5     5      0     205
                                              4 BANK0      5     5      0
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (2) _getLoad_OK                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          1     1      0      66
                                              4 BANK0      1     1      0
              _Dimmer_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       2     2      0      66
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (2) _Dimmer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    3349
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    3349
                                             22 BANK0      3     3      0
                _DelayOffPointSelect
                             _setBuz
         _setDimmerLights_ErrorClose
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_ErrorClose                           5     5      0    1974
                                             17 BANK0      5     5      0
            _DimmerLightsPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                2     2      0    1640
                                             15 BANK0      2     2      0
            _DimmerLightsPointSelect
                     _getDelayOff_GO
                     _setDelayOff_GO
            _setDimmerLights_Trigger
         _setDimmerLights_TriggerAdj
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_TriggerAdj                           3     2      1     216
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Trigger                              3     2      1     216
                                              2 BANK0      3     2      1
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (4) _setDelayOff_GO                                       5     3      2     964
                                             10 BANK0      5     3      2
                _DelayOffPointSelect
                     _DelayTimejudge
 ---------------------------------------------------------------------------------
 (5) _DelayTimejudge                                       6     6      0     294
                                              4 BANK0      6     6      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (6) ___bmul                                               4     3      1     156
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      89
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_Status                               2     2      0      89
                                              2 BANK0      2     2      0
            _DimmerLightsPointSelect
 ---------------------------------------------------------------------------------
 (5) _DimmerLightsPointSelect                              2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1287
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     428
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      66
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      66
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (5) _DelayOffPointSelect                                  2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _CC2500_PowerOnInitial                                0     0      0    1677
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (2) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_PowerRST                                      1     1      0     394
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitSetREG                                    4     4      0     354
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (2) _CC2500_InitPATable                                   3     3      0     309
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (3) _CC2500_WriteREG                                      3     2      1     218
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (2) _CC2500_FrequencyCabr                                 0     0      0     416
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (3) _DelayTime_1us                                        6     4      2     348
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (2) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 1     1      0     220
                                              7 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (12) _TMR1_ISR                                            0     0      0     110
        _setDimmerLights_IntrControl
 ---------------------------------------------------------------------------------
 (13) _setDimmerLights_IntrControl                         5     5      0     110
                                              2 COMMON     5     5      0
              _DimmerIntrPointSelect
 ---------------------------------------------------------------------------------
 (14) _DimmerIntrPointSelect                               2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (12) _IOC_ISR                                             0     0      0     110
                   _setDimmerReClock
 ---------------------------------------------------------------------------------
 (13) _setDimmerReClock                                    0     0      0     110
         _setDimmerLights_IntrIOC_GO
 ---------------------------------------------------------------------------------
 (14) _setDimmerLights_IntrIOC_GO                          1     1      0     110
                                              2 COMMON     1     1      0
           _DimmerIntrIOCPointSelect
 ---------------------------------------------------------------------------------
 (15) _DimmerIntrIOCPointSelect                            2     2      0      44
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 15
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _Timeout_Counter
       _set_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
           _setDimmerLights_Trigger
             _DimmerLightsPointSelect
           _setDimmerLights_TriggerAdj
             _DimmerLightsPointSelect
   _DimmerLights_Initialization
     _Dimmer_Initialization
     _setDimmerLights_Initialization
       _DimmerLightsPointSelect
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _setDimmerLights_Main
       _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights
         _DimmerLightsPointSelect
         _getMain_All_Error_Status
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setRF_DimmerLights
         _setTxData
       _setDimmerLights_Adj
         _DimmerLightsPointSelect
         _getMain_All_Error_Status
         _setPercentValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setRF_DimmerLights
         _setTxData
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
     _setPercentValue
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     _getAll_DimmerLights_AdjGO
     _getMain_All_Error_Status
     _getMain_LightsStatus
       _getDimmerLights_Status
         _DimmerLightsPointSelect
     _getMain_Lights_Count
     _getMain_LoadOK
       _getDimmer_LoadOK
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
         _Timeout_Counter
         _set_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _Timeout_Counter
         _set_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _Timeout_Counter
           _set_TimeoutCleared
       _getBuz_GO
       _getMain_All_Error_Status
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _setBuz
             ___awdiv
           _setDimmerLights_ErrorClose
             _DimmerLightsPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setDimmerLights_TriggerAdj
                 _DimmerLightsPointSelect
           _setRFSW_AdjControl
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setMemory_Modify
             _setRF_DimmerValue
               _setDimmerLights_AdjRF
                 _DimmerLightsPointSelect
                 _getPercentValue
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDelayOff_GO
               _DelayOffPointSelect
             _getDimmerLights_Status
               _DimmerLightsPointSelect
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               _DelayTimejudge
                 ___bmul
             _setDimmerLights_SwOff
               _DimmerLightsPointSelect
               _getDelayOff_GO
                 _DelayOffPointSelect
               _setDelayOff_GO
                 _DelayOffPointSelect
                 _DelayTimejudge
                   ___bmul
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
               _setDimmerLights_TriggerAdj
                 _DimmerLightsPointSelect
             _setDimmerLights_SwOn
               _DimmerLightsPointSelect
               _getAll_DimmerLights_AdjGO
               _setBuz
                 ___awdiv
               _setDimmerLights_Trigger
                 _DimmerLightsPointSelect
             _setRF_DimmerLights
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
         _setTxData
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _getMain_All_Error_Status
     _setMain_Exception
       _getDimmerLights_Line
       _getMain_LightsStatus
         _getDimmerLights_Status
           _DimmerLightsPointSelect
       _setBuz
         ___awdiv
       _setDimmerLights_ErrorClose
         _DimmerLightsPointSelect
         _getDimmerLights_Status
           _DimmerLightsPointSelect
         _setDimmerLights_SwOff
           _DimmerLightsPointSelect
           _getDelayOff_GO
             _DelayOffPointSelect
           _setDelayOff_GO
             _DelayOffPointSelect
             _DelayTimejudge
               ___bmul
           _setDimmerLights_Trigger
             _DimmerLightsPointSelect
           _setDimmerLights_TriggerAdj
             _DimmerLightsPointSelect
       _setLED
         _LedPointSelect
     _setSw_Main
       _SwPointSelect
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_AdjControl
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
       _setDimmerLights_SwOff
         _DimmerLightsPointSelect
         _getDelayOff_GO
           _DelayOffPointSelect
         _setDelayOff_GO
           _DelayOffPointSelect
           _DelayTimejudge
             ___bmul
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
         _setDimmerLights_TriggerAdj
           _DimmerLightsPointSelect
       _setDimmerLights_SwOn
         _DimmerLightsPointSelect
         _getAll_DimmerLights_AdjGO
         _setBuz
           ___awdiv
         _setDimmerLights_Trigger
           _DimmerLightsPointSelect
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _setDimmerReClock
       _setDimmerLights_IntrIOC_GO
         _DimmerIntrIOCPointSelect
   _TMR1_ISR
     _setDimmerLights_IntrControl
       _DimmerIntrPointSelect

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      8       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      7      4F       7       98.8%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      49       9       91.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4E      11       97.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      45      13       86.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     189      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     189      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Sat Dec 06 13:46:06 2014

                   __size_of_Switch_Main 0024                    ?_Flash_Memory_Erasing 0070  
                           _WDT_Clearing 0002             ??_setDimmerLights_TriggerAdj 0023  
                         ___bmul@product 0022                getMain_Lights_Count@count 0020  
                                     l96 16C9                                       l98 16DD  
                                     _RD 0CA8                  __end_of_CC2500_WriteREG 1F28  
                                     _WR 0CA9                             ___awdiv@sign 0026  
                                     _Sw 007C                     _getDimmerLights_Line 1CED  
                 __end_of_setDelayOff_GO 08CF                             ___ftadd@exp1 004D  
                           ___ftadd@exp2 004C                setDimmerLights_Adj@lights 0065  
               __size_of_getRF_KeyStatus 0011                     _setDimmerLights_Main 16F1  
                   _setDimmerLights_Line 1D8E                             ___ftadd@sign 004B  
                                    l110 14F2                                      l106 14F8  
                                    l107 14F4                                      l108 14E2  
                   _setDimmerLights_SwOn 12EF                                      l255 09C6  
                                    l328 1D1E                                      l329 1D1F  
                                    l372 1FB8                                      l767 1CBE  
                                    l778 11D6                                      l866 1CF6  
                                    l867 1CFD                                      _GIE 005F  
                                    _CRC 00CB                                      l998 1E3C  
                                    l999 1E44                                      _RA0 0060  
                                    _RB0 0068     __size_of_DimmerLights_Initialization 0017  
                                    _RB1 0069                                      _RA3 0063  
                                    _RC0 0070                                      _RB2 006A  
                                    _RA4 0064                                      _LED 007A  
                                    _RC1 0071                                      _RB3 006B  
                                    _RC2 0072                                      _RB4 006C  
                                    _RA6 0066                                      _RB5 006D  
                                    _RA7 0067                                      _RC4 0074  
                                    _RC5 0075                                      _RC7 0077  
                                    _RF1 00BA                                      _ISR 0004  
                                    _WDT 00C9             getDimmerLights_Status@lights 0022  
                                    _Sw1 01DC                                      _Sw2 01E5  
              setDimmerLights_Adj@status 0062                 __end_of_CC2500_WriteByte 1D28  
                  _Buzzer_Initialization 1ADB                          __end_of_ADC_Set 1B1D  
                        ?_DelayTimejudge 0070                                      wreg 0009  
   setDimmerLights_Initialization@lights 0023             getDimmerLights_Status@status 0023  
                        _setDimmerLights 0CF8                   _setMain_Exception$6300 0039  
                      ??_getSw_KeyStatus 0020                    _setDimmerLights_AdjRF 1F6C  
                                   ?_ISR 0070          setDimmerLights_ErrorClose@count 0032  
                           ___ftdiv@cntr 0038                          __end_of_IOC_ISR 1BEA  
                             Load_Main@i 002F                               Load_Main@j 002B  
                           ___ftdiv@sign 003D                                     l1033 13A1  
                                   l1301 1245                                     l2013 1BEF  
                                   l2021 0DB8                                     l2031 0E0E  
                                   l1315 1140                                     l2051 0B85  
                                   l1324 1545                                     l2037 127D  
                                   l3015 0522                                     l2063 13D3  
               ?_DimmerLightsPointSelect 0070                                     l1460 01C2  
                                   l1463 0082                                     l1464 0192  
                                   l1465 0190                                     l1617 0E9F  
                        __end_of_IOC_Set 1BB4                                     l2369 1DAA  
                                   l2385 1F9F                           _Load_Main$3395 002D  
                                   l2730 11A6                                     l2395 032E  
                                   l6100 0CE1                                     l6012 0F63  
                                   l2725 118F                                     l2397 0207  
                                   l2726 11AA                                     l6030 0FB4  
                                   l6112 1D33                                     l6104 0CEF  
                                   l6042 0FD0                                     l6034 0FBC  
                                   l6018 0F79                                     l1970 071F  
                                   l2682 1427                                     l1972 067E  
                                   l1981 06EC                                     l1973 0680  
                                   l6230 08A4                                     l6070 0C8A  
                                   l7022 1128                                     l6046 0FD8  
                                   l6310 1325                                     l7102 0DBB  
                                   l1974 0688                                     l6160 1602  
                                   l6128 10E9                                     l6170 160A  
                                   l6154 15F7                                     l6234 08AA  
                                   l6090 0CC8                                     l7130 0E04  
                                   l7114 0DD3                                     l1979 06B3  
                                   l6172 1616                                     l6236 08B7  
                                   l6260 1C43                                     l7124 0DF9  
                                   l7140 1D47                                     l6182 1631  
                                   l6238 08C0                                     l6326 14A0  
                                   l6502 1580                                     l2992 0976  
                                   l6096 0CD5                                     l6088 0CBA  
                                   l6344 17F0                                     l8104 0071  
                                   l6520 13C1                                     l6530 1DF1  
                                   l6186 1639                                     l6178 1628  
                                   l2986 095F                                     l6098 0CDE  
                                   l7066 1C66                                     l6506 158F  
                                   l7090 0DA4                                     l7154 1E95  
                                   l6612 15BC                                     l6620 15C4  
                                   l5900 04AB                                     l8132 00C7  
                                   l6700 0B66                                     l7164 1EA1  
                                   l7156 1E97                                     l8060 0C36  
                                   l8052 0C11                    _setDimmerLights_SwOff 146C  
                                   l6534 1DF7                                     l7182 144D  
                                   l6470 1787                                     l6606 15B3  
                                   l5910 04C1                                     l8126 009D  
                                   l6446 1DDC                                     l6550 1F5C  
                                   l7166 1EA5                                     l6528 1DEE  
                                   l7192 145D                                     l7184 1450  
                                   l6632 15DE                                     l5904 04B2  
                                   l8224 01B0                                     l6448 1DE0  
                                   l6544 1F53                                     l6720 099D  
                                   l6704 0B6A                                     l8080 0C6B  
                                   l8064 0C3E                                     l7194 1460  
                                   l6466 1781                                     l5842 093C  
                                   l5930 04F8                                     l5922 04DB  
                                   l8162 0155                                     l6546 1F56  
                                   l6802 0BBF                                     l6714 0994  
                                   l8306 1410                                     l7188 1456  
                                   l6468 1756                                     l6628 15DA  
                                   l6636 15E2                                     l5852 0964  
                                   l5844 0946                                     l5940 0514  
                                   l5932 04FD                                     l8156 0148  
                                   l8164 015B                                     l6804 0BD7  
                                   l6740 09CF                                     l6716 0997  
                                   l7620 069F                                     l7460 1ED2  
                                   l7198 1466                                     l5870 1C87  
                                   l6646 1D9B                                     l5854 096C  
                                   l5846 094B                                     l5838 0935  
                                   l5950 0546                                     l5942 051E  
                                   l5934 0501                                     l7366 1716  
                                   l8174 0170                                     l6734 09AE  
                                   l6398 1154                                     l7462 1ED5  
                                   l8246 12E0                                     l6824 1FC9  
                                   l6832 1F0F                                     l6576 118A  
                                   l5960 0561                                     l5928 04EE  
                                   l6912 0D46                                     l7368 171C  
                                   l6752 09E2                                     l6744 09D5  
                                   l8432 1664                                     l6826 1FD4  
                                   l6834 1F12                                     l5866 1C81  
                                   l6586 11A1                                     l6578 1193  
                                   l5946 0534                                     l5970 0EBA  
                                   l7378 1744                                     l6770 0B93  
                                   l6746 09D9                                     l6738 09CC  
                                   l6690 0B44                                     l7722 0843  
                                   l8274 1FA8                                     l7570 0E6D  
                                   l7538 0E25                                     l7466 1EDA  
                                   l6924 0D6D                                     l6932 0ACE  
                                   l7484 151B                                     l6780 0BA5  
                                   l6764 0B8A                                     l6772 0B96  
                                   l6748 09DC                                     l7732 0863  
                                   l7716 0835                                     l7708 0822  
                                   l7580 0E82                                     l8436 166F  
                                   l6838 1F18                                     l6598 15AB  
                                   l5990 0F11                                     l7910 11CD  
                                   l7478 1506                                     l6782 0BA8  
                                   l6766 0B8D                                     l6694 0B5A  
                                   l6678 0B1F                                     l7654 06D1  
                                   l7726 0853                                     l7734 086C  
                                   l7822 032A                                     l7582 0E83  
                                   l5888 1F33                                     l5976 0ED0  
                                   l7912 11D0                                     l6696 0B5E  
                                   l7656 06D3                                     l7672 06FD  
                                   l7568 0E6B                                     l6890 1115  
                                   l7914 11D8                                     l6786 0BAE  
                                   l6698 0B62                                     l7762 0235  
                                   l7746 01F2                                     l8298 1402  
                                   l7844 12A8                                     l7836 128A  
                                   l6956 11F5                                     l7772 0267  
                  _myMain_Initialization 1BF9                                     l7862 14CC  
                                   l6886 1110                                     l5998 0F2A  
                                   l7838 1296                                     l7694 1DAF  
                                   l6888 10F4                                     l7848 12B1  
                                   l7698 1DB5                                     l7786 02A5  
                                   l7972 05EB                                     l7796 02D7  
                                   _CFGS 0CAE                             __CFG_WDTE$ON 0000  
                                   _FREE 0CAC                                     _LATA 010C  
                                   _LATB 010D                                     _LATC 010E  
                                   u4305 0941                                     u4325 095A  
                                   u5055 160D                                     u4345 0967  
                                   u5075 1617                                     u4515 04DC  
                                   _PEIE 005E                                     u5085 1621  
                                   u4605 0515                                     u5335 1D73  
                                   u5095 1629                                     u4375 097D  
                                   u5280 17AE                                     u5425 175F  
                                   u4545 04EF                                     u4705 0F21  
                                   u4715 0F2B                                     u7115 0E73  
                                   u5285 17AC                                     u6095 10FD  
                                   u4575 0502                                     u7215 0699  
                                   u4905 0CBB                                     u4825 0FD9  
                                   u4675 0EE2                                     u4835 0FDF  
                                   u4755 0F85                                     u4685 0EF2  
                                   u4765 0F95                                     u8045 0C58  
                                   u4695 0F12                                     u4935 0CD6  
                                   u7335 070E                                     u7095 0E53  
                                   u4785 0FBD                                     u4875 0C91  
                                   u4795 0FC3                                     u8245 0161  
                                   u7705 14C2                                     u8185 0108  
                                   u4995 10D5                                     u7635 128D  
                                   u8355 12D7                                     u8435 141F  
                                   u8365 12E6                                     u5975 1FBE  
                                   u7655 1297                                     u7665 12A1  
                                   u7675 12A9                                     u7935 123C  
                                   u7995 0C24                                     _LWLO 0CAD  
                                   _RSSI 00CF                                     _WREN 0CAA  
                                   _Buz1 00AE                                     _Load 0125  
                                   _Temp 00D6                                     _main 1640  
                           ___ftpack@arg 0020                      __end_of_DlyOff_Main 092C  
                        __end_of_RF_Main 1AE4                             ___ftpack@exp 0023  
                                   fsr0h 0005                                     fsr1h 0007  
                                   fsr0l 0004                                     indf0 0000  
                                   indf1 0001                                     fsr1l 0006  
    __size_of_setDimmerLights_TriggerAdj 0020                                     btemp 007E  
                        __end_of_WDT_Set 1B61                                     ltemp 007E  
          __size_of_setRF_Initialization 000B                         _setDimmerReClock 1B1D  
                                   start 0013                                     ttemp 007E  
                                   wtemp 007E                      DelayTimejudge@value 0029  
             __end_of_setRFSW_AdjControl 13E8                        ___bmul@multiplier 0023  
                           ___ftmul@cntr 003C                             ___ftmul@sign 003D  
           __size_of_Temp_Initialization 0003                        ?_getDimmer_LoadOK 0070  
                                  ??_ISR 0077                             ___fttol@exp1 005B  
                           ___fttol@lval 0057                   _getDimmerLights_Status 1C08  
                     ??_getDimmer_LoadOK 0020           __size_of_DimmerIntrPointSelect 0012  
                       __end_of_LED_Main 1BA8         setDimmerLights_ErrorClose@lights 0033  
          __end_of_DimmerIntrPointSelect 1C7E                    ?_getDimmerLights_Line 0070  
                  ?_setDimmerLights_Main 0070                    ?_setDimmerLights_Line 0070  
                        ?_setDelayOff_GO 002A                    ?_setDimmerLights_SwOn 0070  
                                  ?_main 00EB                          __end_of___awdiv 1640  
                        __end_of___ftadd 0579                          __end_of___ftdiv 0F4C  
                        __end_of___ftneg 1B56                          __end_of___ftmul 1000  
                        ___awdiv@divisor 0020                                    _T1CON 0018  
                        __end_of___fttol 0CF8                                    _IOCBF 0396  
                                  _IOCBN 0395                                    _IOCBP 0394  
                                  _IOCIE 005B                                    _IOCIF 0058  
                        __end_of___lwdiv 12B8                                    i1l723 1D0A  
                                  i1l735 1C75                                    i1l746 045D  
                        ___awdiv@counter 0025            __size_of_CC2500_FrequencyCabr 000C  
                                  _TMR1H 0017                                    _TMR1L 0016  
                                  _PORTA 000C                                    _PORTB 000D  
                                  _PORTC 000E                             ?_setLED_Main 0070  
                     setRF_Learn@command 0021                                    _TRISA 008C  
                                  _TRISB 008D                                    _TRISC 008E  
                                  _WPUB1 1069                                    _WPUB2 106A  
                   setMain_Exception@buz 0038                  __end_of_Timeout_Counter 1D79  
                          __CFG_WRT$HALF 0000       __end_of_setDimmerLights_IntrIOC_GO 136A  
             _setDimmerLights_IntrIOC_GO 132C                         __end_of_TMR1_ISR 1097  
           __size_of_CC2500_WriteCommand 0019       __end_of_setDimmerLights_ErrorClose 17A4  
             _setDimmerLights_ErrorClose 174A                         __end_of_TMR1_Set 1BC0  
                                  _getAD 1EC7                            ___awtoft@sign 002D  
            DimmerIntrPointSelect@lights 0071                            ___ftpack@sign 0024  
            __size_of_CC2500_ClearRXFIFO 0004                            ??_Buzzer_Main 0020  
                       __end_of_WDT_Main 1CB4              __size_of_CC2500_ClearTXFIFO 0004  
                    CC2500_RxData@loop_f 0025                           __pbitbssCOMMON 03E8  
                         __CFG_BOREN$OFF 0000             __end_of_getMain_Lights_Count 0816  
                     Flash_Memory_Read@i 0021                         ?_CC2500_ReadByte 0070  
                                  ltemp0 007E                                    ltemp1 0082  
                                  ltemp2 0086                                    ltemp3 0080  
         __size_of_setLED_Initialization 0011             __end_of_getMain_LightsStatus 1118  
          __end_of_setLED_Initialization 1C39                                    ttemp0 007E  
                                  ttemp1 0081                                    ttemp2 0084  
                                  ttemp3 0087                                    ttemp4 007F  
                           ?_setRF_Learn 0070                                    status 0003  
                                  wtemp0 007E                                    wtemp1 0080  
                                  wtemp2 0082                                    wtemp3 0084  
                                  wtemp4 0086                                    wtemp5 0088  
                                  wtemp6 007F                       _setRF_DimmerLights 17A4  
            __size_of_Flash_Memory_Write 002F                        ?_CC2500_SIDLEMode 0070  
             __size_of_RF_Initialization 0003         __size_of_DelayOff_Initialization 0008  
                 ?_setLoad_AH_AL_Restore 0070                   ??_Flash_Memory_Erasing 0020  
                        _getPercentValue 0A53                       ??_CC2500_SIDLEMode 0024  
                        __initialization 0015                         ?_CC2500_PowerRST 0070  
                      ?_setMemory_Modify 0070                  __size_of_getDelayOff_GO 0010  
                      ??_setPercentValue 005C                             __end_of_main 1698  
                    ?_setRF_DimmerLights 0020                         __end_of_Fosc_Set 1AFA  
                     ??_setMemory_Modify 0020                         ?_CC2500_WriteREG 0022  
                              ??_ADC_Set 0020                  __end_of_setDimmerLights 0D81  
                   _setSw_Initialization 1B45                                   ??_main 006E  
                          ___fttol@sign1 0056                             ?_setLog_Code 0070  
                _setControl_Lights_Table 0B1E                           _setMemory_Data 1B78  
                 ?_Buzzer_Initialization 0070        __size_of_DimmerIntrIOCPointSelect 0014  
                ??_DlyOff_Initialization 0022                               _Receive_OK 03E8  
              ?_DimmerIntrIOCPointSelect 0070                                ??_IOC_ISR 0073  
                              ??_IOC_Set 0020          __end_of_DimmerLightsPointSelect 1CC7  
                 ?_setDimmerLights_AdjRF 0070                 __size_of_setRFSW_Control 004F  
                ??_Switch_Initialization 0025                     ??_setRF_DimmerLights 0021  
                                 ?_getAD 0020             setDimmerLights_AdjControl@sw 0028  
                      ??_getRF_KeyStatus 0020                   ?_setDimmerLights_SwOff 0070  
                            _DlyOff_Main 08CF                   ?_myMain_Initialization 0070  
                                 _ADCON0 009D                                   _ADCON1 009E  
                              ??_RF_Main 006E                                   _ADRESH 009C  
                                 _ADRESL 009B                         ___awdiv@dividend 0022  
                              ??_WDT_Set 0020                         __end_of___awtoft 1F4A  
                                 _ANSELA 018C                                   _ANSELB 018D  
                                 _ANSELC 018E                         __end_of___ftpack 098D  
               _getMain_All_Error_Status 1179                                   _IOCBF2 1CB2  
                _setDimmerLights_Trigger 07E2                                   i1l7312 03F3  
                                 i1l7320 0412                                   i1l7330 0445  
                                 i1l7316 0403                                   i1l7308 03E4  
                                 i1l7326 0430                                   i1l7290 0399  
                                 i1l7286 0392                                   i1l6866 1363  
                                 _FVRCON 0117                                   _PMADRH 0192  
                                 _PMADRL 0191                                   _PMDATH 0194  
                                 _PMDATL 0193                                   _PMCON2 0196  
                                 _OSCCON 0099                       __size_of_Load_Main 017D  
                                 u665_25 036C                                   _TMR1IE 0488  
                                 _TMR1IF 0088                                   _IO_Set 1DFF  
                                 u786_25 1091                                   _WDTCON 0097  
                     DelayTime_1us@count 0020                    _Dimmer_Initialization 1AD9  
         __size_of_CC2500_PowerOnInitial 0015            __end_of_CC2500_PowerOnInitial 1D8E  
                                 _Dimmer 0120                                   _DlySw1 0153  
                                 _DlySw2 0158               __end_of_Mcu_Initialization 1CA2  
                    __end_of_Buzzer_Main 14FF                                   _Memory 0220  
                                 _Timer1 00C6       __end_of_setDimmerLights_TriggerAdj 1EC7  
             _setDimmerLights_TriggerAdj 1EA7                                   ___bmul 1C7E  
                              ??___awdiv 0024                                ??___ftadd 0047  
           __size_of_DelayOffPointSelect 0014                                ??___ftdiv 0034  
                              ??___ftneg 0041                    setDimmerLights@lights 0065  
                              ??___ftmul 0034                                ??___fttol 0052  
           ?_Flash_Memory_Initialization 0070                   ??_getDimmerLights_Line 0020  
                              ??___lwdiv 0024              setDimmerLights_AdjRF@lights 0063  
                 ??_setDimmerLights_Main 0066                   ??_setDimmerLights_Line 0020  
                                 _r_data 00D4                                   _s_data 00D5  
                 ??_setDimmerLights_SwOn 002D                                   _setLED 159C  
                                 _myMain 00A0                   __end_of_setMemory_Data 1B84  
                       _DimmerLightsIntr 0079                    ?_setSw_Initialization 0070  
                  setDimmerLights@status 0062                         ___awdiv@quotient 0027  
                                 _setBuz 1698                       __size_of_Temp_Main 0003  
            __end_of_Load_Initialization 1B04         ??_setDimmerLights_Initialization 0022  
        ?_setDimmerLights_Initialization 0070                    ___ftmul@f3_as_product 0039  
            ?_setDimmerLights_AdjControl 0070      __end_of_setDimmerLights_IntrControl 0483  
            _setDimmerLights_IntrControl 0337                 Flash_Memory_Read@address 0022  
                       ?_Timeout_Counter 0070               __end_of_setMemory_LoopSave 1CED  
            getMain_Lights_Count@status1 0022              getMain_Lights_Count@status2 0023  
            getMain_Lights_Count@status3 0021                    __end_of_SwPointSelect 1D50  
           __size_of_Flash_Memory_Modify 004E        setDimmerLights_IntrControl@lights 0076  
                __size_of_LedPointSelect 001B                  __size_of_getMain_LoadOK 000E  
                    Flash_Memory_Write@i 0021             __size_of_Flash_Memory_Unlock 0009  
             getMain_LightsStatus@status 0028                               _TouchPower 1DA3  
             ?_getAll_DimmerLights_AdjGO 0070              __size_of_CC2500_InitPATable 001F  
                    CC2500_TxData@loop_e 0025                  __end_of_getPercentValue 0AB8  
       __end_of_CC2500_registers_address 102F                  __end_of__initialization 0047  
                              ?_LED_Main 0070                               ___ftadd@f1 0041  
                             ___ftadd@f2 0044                     _getRF_KeyStatus$4663 0022  
                          ?_my_MainTimer 0070                               ___ftdiv@f1 0031  
                             ___ftdiv@f2 002E                               ___ftdiv@f3 0039  
                             ___ftneg@f1 003E                               ___awtoft@c 0028  
                    ___bmul@multiplicand 0020             ?_DimmerLights_Initialization 0070  
                             ___ftmul@f1 002E                               ___ftmul@f2 0031  
                             ___fttol@f1 004E                           __pcstackCOMMON 0070  
         DimmerIntrIOCPointSelect@lights 0071                             __pidataBANK4 1EE7  
                          __end_of_getAD 1EE7                                ?_TMR1_ISR 0070  
                              ?_TMR1_Set 0070                   setLoad_AH_AL_Restore@i 0021  
              setMemory_LoopSave@command 0021             __size_of_setDimmerLights_Adj 0066  
                     _LED_Initialization 1B90                          _getSw_KeyStatus 1E88  
              ??_setControl_Lights_Table 006B                       getRF_KeyStatus@key 0021  
                       ??_DelayTimejudge 0024                          ?_setMemory_Data 0020  
          ??_Flash_Memory_Initialization 0062                         ?_setDimmerLights 0062  
                   _getMain_Lights_Count 0800                                ?_WDT_Main 0070  
                      __end_of_Load_Main 01C8                       __size_of_getBuz_GO 0011  
                   _getMain_LightsStatus 10EB               __end_of_set_TimeoutCleared 1AFF  
               __end_of_setDimmerReClock 1B25                       __size_of_getRxData 0090  
                    ?_LED_Initialization 0070                    getMain_LightsStatus@i 0026  
                      ?_CC2500_WriteByte 0070                           _DimmerLights11 00CC  
                         _DimmerLights22 00CD                     __size_of_setLED_Main 003E  
              ??_setDimmerLights_Trigger 0023                                  ??_getAD 0023  
                    _Temp_Initialization 1AE4                       ??_CC2500_WriteByte 0020  
                             __pbssBANK0 006F                               __pbssBANK1 00A0  
                             __pbssBANK2 0120                               __pbssBANK3 01A0  
                             __pbssBANK4 0220                                ?_Fosc_Set 0070  
                            _Buzzer_Main 14B5                        ??_setRFSW_Control 0031  
                      __end_of_Temp_Main 1AEA                   ?_Dimmer_Initialization 0070  
                                ?_IO_Set 0070                           ??_my_MainTimer 002D  
                             ??_LED_Main 0025                          __CFG_VCAPEN$OFF 0000  
                _DelayOff_Initialization 1B25                getMain_LightsStatus@count 0025  
                          ??_Switch_Main 003D                           DelayTime_1us@i 0022  
                         DelayTime_1us@j 0024                     ??_LED_Initialization 0025  
                           _DimmerLights 006F                        LedPointSelect@led 0021  
                 __size_of_DelayOff_Main 0008                     __size_of_setRF_Learn 0014  
                            setBuz@count 002C                  ?_getDimmerLights_Status 0070  
                             __pmaintext 1640                           _getDelayOff_GO 1C18  
                    _CC2500_WriteCommand 1DE6                     ?_Temp_Initialization 0070  
                                ?___bmul 0020         __size_of_DimmerLightsPointSelect 0013  
                       ??_setDelayOff_GO 002C            ??_DimmerLights_Initialization 0024  
                             ??_TMR1_ISR 0077                            ?_setTemp_Main 0070  
                             _getLoad_AD 0BF0                               ??_TMR1_Set 0020  
                             __pintentry 0004                   ??_setSw_Initialization 0024  
                             _getLoad_OK 1B35                       __size_of_setTxData 00BF  
                                ?_setLED 0022                   __size_of_DelayTime_1us 0026  
                  ?_getMain_Lights_Count 0070                                  _ADC_Set 1B16  
                                ?_setBuz 0029                                ?___awtoft 0028  
                              ?___ftpack 0020                               _getTemp_AD 12B8  
                             ??_WDT_Main 0020                    ?_getMain_LightsStatus 0070  
           __end_of_setRF_Initialization 1B6C                       _setRFSW_AdjControl 13A8  
                                _IOC_ISR 1BDB                                  _IOC_Set 1BA8  
                   __size_of_setLog_Code 0036                     ?_CC2500_WriteCommand 0070  
                      _Flash_Memory_Main 1215                __size_of_getDimmer_LoadOK 0008  
                      _Flash_Memory_Read 1E18              ?_setDimmerLights_IntrIOC_GO 0070  
                 __size_of_CC2500_RxData 006A                   __size_of_CC2500_TxData 0061  
            ?_setDimmerLights_ErrorClose 0070                      ?_setRFSW_AdjControl 0070  
                                _RF_Data 01A0                                  _RF_Main 1AE1  
                     ?_Flash_Memory_Main 0070                       ?_Flash_Memory_Read 0070  
                                _WDT_Set 1B56          __end_of_setControl_Lights_Table 0B86  
                        setRF_Main@error 00EA                               ??_Fosc_Set 0020  
                            ?_TouchPower 0070                          _setPercentValue 09EE  
                ??_setLoad_AH_AL_Restore 0020                         ?_getPercentValue 0070  
           __end_of_CC2500_FrequencyCabr 1B78                          __size_of_IO_Set 0019  
                      __end_of_getBuz_GO 1C5B                      ??_Flash_Memory_Main 0029  
                    ??_Flash_Memory_Read 0020                   __end_of_getDelayOff_GO 1C28  
                                _VarLED1 0161                                  _VarLED2 0165  
         __end_of_getDimmerLights_Status 1C18                        __end_of_getRxData 0E11  
                __end_of_getSw_KeyStatus 1EA7                 _CC2500_registers_address 1000  
       __end_of_DimmerIntrIOCPointSelect 1D14                    ??_Temp_Initialization 0020  
        __end_of_setDimmerLights_Trigger 0800                     ??_setRFSW_AdjControl 0067  
                         ??_setTemp_Main 002D                          __size_of___bmul 0012  
                                ___awdiv 15EC                                  ___ftadd 0483  
                                ___ftdiv 0EA3                                  ___ftneg 1B4D  
                                ___ftmul 0F4C                                  ___fttol 0C71  
                    __end_of_Switch_Main 1FB3                                  ___lwdiv 1281  
                ??_Buzzer_Initialization 0020                          _getRF_KeyStatus 1C5B  
                             ??___awtoft 002B                               ??___ftpack 0025  
                        __size_of_setLED 0050                     setRFSW_AdjControl@sw 006A  
                        __size_of_setBuz 0059                                  __ptext1 13E8  
                                __ptext2 1BF9                                  __ptext3 12B8  
                                __ptext4 0BF0                                  __ptext5 1EC7  
                                __ptext6 1CA2                                  __ptext7 0002  
                                __ptext8 1AE7                                  __ptext9 0E11  
                ??_setDimmerLights_AdjRF 0062                __size_of_CC2500_SIDLEMode 0004  
                  _DimmerIntrPointSelect 1C6C                             __size_of_ISR 000F  
             ??_getMain_All_Error_Status 0020                __end_of_Flash_Memory_Main 124B  
              __end_of_Flash_Memory_Read 1E32                  ??_setDimmerLights_SwOff 002F  
                             _setRF_Main 0655                  ??_myMain_Initialization 0020  
                          _DelayOff_Main 1B2D                        _DimmerLights_Main 11AC  
         __size_of_DlyOff_Initialization 0006                    ??_CC2500_WriteCommand 0022  
              __size_of_setMemory_Modify 0013            __end_of_DlyOff_Initialization 1B0A  
             __end_of_CC2500_ClearRXFIFO 1AEE                 ??_setTemp_Initialization 0020  
             __end_of_CC2500_ClearTXFIFO 1AF2            DimmerLightsPointSelect@lights 0021  
                           ?_DlyOff_Main 0070                       ?_DimmerLights_Main 0070  
                                _product 006E                           _LedPointSelect 1E32  
                    _DelayOffPointSelect 1D28                           _getMain_LoadOK 1BCD  
                                clrloop0 1B11           __size_of_Switch_Initialization 000D  
          __end_of_Switch_Initialization 1BCD                     end_of_initialization 0047  
              ??_DelayOff_Initialization 0023                        _CC2500_InitSetREG 1097  
                          _DelayTime_1us 1FB3                        __end_of_setTxData 07E2  
             __end_of_Flash_Memory_Write 1147                                  init_ram 1B0A  
                     ?_CC2500_InitSetREG 0070                      ??_DimmerLights_Main 0067  
                   Flash_Memory_Read@ret 0023                                  initloop 1B0B  
                             _setSw_Main 01C8                    CC2500_ReadByte@loop_b 0021  
                 setDimmerLights_SwOn@sw 002F                        _CC2500_ReadStatus 1F4A  
                   Flash_Memory_Modify@i 0025                    _setLED_Initialization 1C28  
                        ?_getDelayOff_GO 0070                               getBuz_GO@i 0024  
                     ?_CC2500_ReadStatus 0070                 __size_of_CC2500_ReadByte 0017  
                          _CC2500_RxData 0B86                            _CC2500_TxData 098D  
                    ??_CC2500_InitSetREG 0025              ?_setDimmerLights_TriggerAdj 0022  
          __size_of_Flash_Memory_Erasing 000C                     ?_DelayOffPointSelect 0070  
                    _Flash_Memory_Modify 14FF                              ?_getLoad_AD 0070  
                            ?_getLoad_OK 0070                   ??_getMain_Lights_Count 0020  
                           __pstringtext 1000                      _Flash_Memory_Unlock 1066  
                    ??_CC2500_ReadStatus 0022                   ??_getMain_LightsStatus 0024  
                CC2500_InitSetREG@loop_c 0028                              ?_getTemp_AD 0070  
                    __size_of_TouchPower 0015                 setLED_Initialization@led 0024  
                 setSw_Initialization@sw 0024                __end_of_DimmerLights_Main 11E0  
                     _Mcu_Initialization 1C90                 __size_of_CC2500_PowerRST 0043  
                   __end_of_my_MainTimer 1429                           ?_DelayOff_Main 0070  
                       __CFG_FOSC$INTOSC 0000                   __end_of_LedPointSelect 1E4D  
                __end_of_setPercentValue 0A53                   __end_of_getMain_LoadOK 1BDB  
               __size_of_CC2500_WriteREG 0021                __end_of_CC2500_InitSetREG 10C1  
                    ?_Mcu_Initialization 0070                     ?_Flash_Memory_Modify 0070  
            __size_of_setRF_DimmerLights 005C                           ?_DelayTime_1us 0020  
                    _setDimmerLights_Adj 0AB8                     ?_Flash_Memory_Unlock 0070  
              __end_of_CC2500_ReadStatus 1F6C                            ?_RF_RxDisable 0070  
            ??_getAll_DimmerLights_AdjGO 0020          getMain_All_Error_Status@command 0025  
                            ___ftdiv@exp 003C                           __end_of_IO_Set 1E18  
                   _setRF_Initialization 1B61                       _setMemory_LoopSave 1CDA  
                            _Switch_Main 1F8F                        __size_of_LED_Main 000C  
                       ?_getSw_KeyStatus 0070                           ?_CC2500_RxData 0070  
                         ?_CC2500_TxData 0070                  _DimmerLightsPointSelect 1CB4  
                __end_of_getRF_KeyStatus 1C6C                        _setMain_Exception 0816  
                       ??_setMemory_Data 0021                              ___ftmul@exp 0038  
                  _CC2500_PowerOnInitial 1D79                     ??_Mcu_Initialization 0021  
                  ??_DelayOffPointSelect 0020                            ?_WDT_Clearing 0070  
                     ?_setMain_Exception 0070                      ?_setMemory_LoopSave 0070  
                   ?_setDimmerLights_Adj 0062                           __end_of___bmul 1C90  
               setMain_Exception@command 003C                     setRF_DimmerLights@on 0020  
        _setDimmerLights_AdjControl$2261 0027                 _DimmerIntrIOCPointSelect 1D00  
                      getSw_KeyStatus@sw 0024                        __size_of_TMR1_ISR 0028  
          __size_of_getDimmerLights_Line 0013                   ?_DimmerIntrPointSelect 0070  
                      __size_of_TMR1_Set 000C            __size_of_setDimmerLights_Main 0059  
                         __end_of_setLED 15EC            __size_of_setDimmerLights_Line 0015  
          __size_of_setDimmerLights_SwOn 003D                           __end_of_setBuz 16F1  
                    ??_setMain_Exception 0036                     _CC2500_FrequencyCabr 1B6C  
             __size_of_Flash_Memory_Main 0036               __size_of_Flash_Memory_Read 001A  
                            ?_setRF_Main 0070                          _setRFSW_Control 154D  
                      __size_of_WDT_Main 0012                        ?_setDimmerReClock 0070  
                    start_initialization 0015                        _setRF_DimmerValue 1147  
                        ?_LedPointSelect 0070                                _Load_Main 004B  
                            __end_of_ISR 0013                          ?_getMain_LoadOK 0070  
                       _getDimmer_LoadOK 1B3D                    ??_Flash_Memory_Modify 0024  
           __size_of_Load_Initialization 0005                       ??_setDimmerReClock 0073  
                     ?_setRF_DimmerValue 0070               __end_of_CC2500_InitPATable 1E88  
        __size_of_setTemp_Initialization 0001                     ??_setMemory_LoopSave 0020  
                  ??_Flash_Memory_Unlock 0020                  ??_Dimmer_Initialization 0020  
                   __end_of_setTemp_Main 0EA3                           ??_RF_RxDisable 0024  
                    __size_of_getLoad_AD 0081                             ?_Buzzer_Main 0070  
                    __size_of_getLoad_OK 0008                       _set_TimeoutCleared 1AFA  
                               ??_IO_Set 0020                 __size_of_Timeout_Counter 0015  
                              _VarErrLED 015D                              ?_setSw_Main 0070  
                    ??_setRF_DimmerValue 0064                      __size_of_getTemp_AD 0037  
                 ?_setLED_Initialization 0070                    ?_setRF_Initialization 0070  
                      __size_of_Fosc_Set 0004                __end_of_setMain_Exception 0872  
              __size_of_CC2500_WriteByte 0014                                _Temp_Main 1AE7  
                    ?_set_TimeoutCleared 0070                           ??_WDT_Clearing 0020  
                              _Rx_Length 00D0                  setRF_DimmerValue@lights 0066  
                               ??___bmul 0021                    ??_setDimmerLights_Adj 0063  
                 __size_of_SwPointSelect 0014                                _Tx_Length 00D2  
                            __pdataBANK4 0245                _getAll_DimmerLights_AdjGO 1C39  
                               ??_setLED 0023                                 ?_ADC_Set 0070  
                               ??_setBuz 002B                          ??_DelayOff_Main 0039  
                      ??_CC2500_ReadByte 0020         __end_of_getMain_All_Error_Status 11AC  
                       _CC2500_SIDLEMode 1AF2               __size_of_DimmerLights_Main 0034  
              __end_of_setRF_DimmerValue 1179                       setMemory_Data@data 0020  
                  ?_CC2500_FrequencyCabr 0070                            ??_setLED_Main 0022  
                      __size_of___awtoft 0022                        __size_of___ftpack 0061  
                               ?_IOC_ISR 0070           _getAll_DimmerLights_AdjGO$2248 0022  
                            __pbssCOMMON 0078                                 ?_IOC_Set 0070  
                              ___latbits 0003                         _setMemory_Modify 1CC7  
                             ?_Load_Main 0070                            __pcstackBANK0 0020  
                          __pcstackBANK1 00E8                     ??_set_TimeoutCleared 0020  
                       ?_setPercentValue 0070                          ??_DelayTime_1us 0022  
             __size_of_CC2500_InitSetREG 002A                 __size_of_setDimmerLights 0089  
                          DlyOff_Main@sw 0038                        ??_CC2500_PowerRST 0026  
                               ?_RF_Main 0070                                 ?_WDT_Set 0070  
                           ??_TouchPower 0020                     __size_of_DlyOff_Main 005D  
             __size_of_CC2500_ReadStatus 0022                        ??_CC2500_WriteREG 0023  
                          ??_setRF_Learn 0020                            _DimmerLights1 01BE  
                          _DimmerLights2 01CD                    CC2500_WriteREG@w_addr 0024  
                  setDelayOff_GO@command 002A                ??_DimmerLightsPointSelect 0020  
         __size_of_setLoad_AH_AL_Restore 001C                          ??_CC2500_RxData 0024  
          __end_of_setLoad_AH_AL_Restore 1E69                 setRFSW_AdjControl@status 0069  
                        ??_CC2500_TxData 0024                                __pnvBANK0 006E  
                         getRxData@error 006C              __size_of_LED_Initialization 000C  
                 ?_CC2500_PowerOnInitial 0070                               ?_Temp_Main 0070  
                    __size_of_setRF_Main 00CE                           Load_Main@adjgo 002C  
                       ___lwdiv@dividend 0022                    DelayOffPointSelect@sw 0021  
                             setBuz@time 0029                      setDelayOff_GO@value 002B  
               ?_setControl_Lights_Table 0070                         ?_getRF_KeyStatus 0070  
                         Load_Main@error 002E                   _setTemp_Initialization 1ADA  
                              _getBuz_GO 1C4A      __end_of_Flash_Memory_Initialization 0655  
            _Flash_Memory_Initialization 0579                                 ?___awdiv 0020  
                              __ptext100 07E2                                __ptext101 0872  
                              __ptext110 1B04                                __ptext102 10C1  
                              __ptext111 1D28                                __ptext103 1C7E  
                              __ptext120 1AEE                                __ptext112 1D79  
                              __ptext104 1C18                                __ptext121 1AEA  
                              __ptext113 1AF2                                __ptext105 1C08  
                              __ptext130 0337                                __ptext122 1DE6  
                              __ptext114 1429                                __ptext106 1CB4  
                              __ptext131 1C6C                                __ptext123 1AFA  
                              __ptext115 1097                                __ptext107 1698  
                              __ptext132 1BDB                                __ptext124 1D64  
                              __ptext116 1E69                                __ptext108 15EC  
                              __ptext133 1B1D                                __ptext125 1D14  
                              __ptext117 1F07                                __ptext109 1B25  
                               ?___ftadd 0041                                __ptext134 132C  
                              __ptext126 14B5                                __ptext118 1B6C  
                              __ptext135 1D00                                __ptext127 1ADB  
                              __ptext119 1FB3                                __ptext129 106F  
                              _getRxData 0D81                                 ?___ftdiv 002E  
                               ?___ftneg 003E                                 ?___ftmul 002E  
                               ?___fttol 004E                    __size_of_my_MainTimer 0041  
                               ?___lwdiv 0020                  __end_of_setRFSW_Control 159C  
          __size_of_setSw_Initialization 0008           __size_of_Buzzer_Initialization 0003  
                       getMain_LoadOK@ok 0022            __end_of_Buzzer_Initialization 1ADE  
                       getPercentValue@i 005F                         setPercentValue@i 005F  
                          ??_setLog_Code 002D                 getDimmerLights_Line@line 0021  
                     __end_of_TouchPower 1DB8                 ?_setDimmerLights_Trigger 0022  
                        DelayTimejudge@i 0026                          DelayTimejudge@j 0027  
                        DelayTimejudge@k 0028                      __size_of_setSw_Main 016F  
           CC2500_ReadStatus@status_addr 0023           __size_of_setDimmerLights_AdjRF 0023  
          __end_of_setDimmerLights_AdjRF 1F8F                   CC2500_WriteByte@loop_a 0021  
                 _DimmerLights_Main$2234 0069                                _r_address 00D3  
         __size_of_setDimmerLights_SwOff 0049           __size_of_myMain_Initialization 000F  
          __end_of_setDimmerLights_SwOff 14B5             __end_of_CC2500_patable_vaule 1066  
          __end_of_myMain_Initialization 1C08                           __size_of_getAD 0020  
                       ___lwdiv@quotient 0025                  __size_of_DelayTimejudge 002A  
                          _SwPointSelect 1D3C                      __end_of_setLED_Main 13A8  
                       ??_getDelayOff_GO 0022                      _DimmerLightsIntrIOC 00CE  
                 ??_setRF_Initialization 0020              __end_of_Temp_Initialization 1AE7  
           setDimmerLights_SwOff@command 002F                        _CC2500_rfSettings 102F  
                               _LED_Main 1B9C                          SwPointSelect@sw 0021  
                              clear_ram0 1B10                 CC2500_InitPATable@loop_d 0027  
             __size_of_setMain_Exception 005C                             _my_MainTimer 13E8  
                              _setTxData 0723      __end_of_DimmerLights_Initialization 1DCF  
            _DimmerLights_Initialization 1DB8                       _CC2500_ClearRXFIFO 1AEA  
                     _CC2500_ClearTXFIFO 1AEE           setDimmerLights_Trigger@command 0022  
               setRF_DimmerLights@lights 0024                                 _GO_nDONE 04E9  
                    __end_of_setRF_Learn 1D64                        ??_Timeout_Counter 0020  
                             ?_getBuz_GO 0020                 __size_of_getPercentValue 0065  
               setRF_DimmerLights@status 0023              __size_of_setRFSW_AdjControl 0040  
                     _Flash_Memory_Write 1118                               ?_getRxData 0070  
                           ??_getLoad_AD 0024                                 _TMR1_ISR 106F  
                 CC2500_InitSetREG@temp1 0026                   CC2500_InitSetREG@temp2 0027  
                           ??_getLoad_OK 0020                                 _TMR1_Set 1BB4  
                    ?_CC2500_ClearRXFIFO 0070                      ?_CC2500_ClearTXFIFO 0070  
      setDimmerLights_TriggerAdj@command 0022                                 _RF_Count 0123  
                   __end_of_RF_RxDisable 1BF9                             ??_getTemp_AD 0024  
            __end_of_CC2500_WriteCommand 1DFF                   ??_CC2500_FrequencyCabr 0026  
                               _WDT_Main 1CA2                  DlyOff_Initialization@sw 0022  
                  getSw_KeyStatus@status 0023                         __size_of_ADC_Set 0007  
             __size_of_setRF_DimmerValue 0032                      ?_Flash_Memory_Write 0070  
                       setRF_Main@loop_f 00E8                    __size_of_setTemp_Main 0092  
                __size_of_setDelayOff_GO 005D             ??_setDimmerLights_AdjControl 0025  
                               _DelayOff 0078                             setSw_Main@sw 0033  
       setDimmerLights_IntrIOC_GO@lights 0072                              ??_Load_Main 0029  
                       __size_of_IOC_ISR 000F             ?_setDimmerLights_IntrControl 0070  
         getMain_All_Error_Status@status 0026                         __size_of_IOC_Set 000C  
           __end_of_Flash_Memory_Erasing 1B90                           ?_SwPointSelect 0070  
                            getAD@adcon0 0023                              getAD@adcon1 0020  
                         setLED_Main@led 0024                     __end_of_WDT_Clearing 0004  
                    __end_of_setLog_Code 1281                    _DlyOff_Initialization 1B04  
                   ??_CC2500_ClearRXFIFO 0024                     ??_CC2500_ClearTXFIFO 0024  
              __end_of_CC2500_rfSettings 105E                         __size_of_RF_Main 0003  
                               _Fosc_Set 1AF6                         __size_of_WDT_Set 000B  
                  setRFSW_Control@status 0032                  setMain_Exception@status 003B  
                     __end_of_getLoad_AD 0C71                       __end_of_getLoad_OK 1B3D  
                  _Switch_Initialization 1BC0        __size_of_getMain_All_Error_Status 0033  
                   ??_Flash_Memory_Write 0020                        ??_setDimmerLights 0063  
              ?_getMain_All_Error_Status 0070                     __size_of_Buzzer_Main 004A  
                     __end_of_getTemp_AD 12EF                               ?_setTxData 0070  
                           ?_Switch_Main 0070               ??_DimmerIntrIOCPointSelect 0070  
                       _CC2500_WriteByte 1D14                        getLoad_AD@channel 0026  
           Flash_Memory_Initialization@i 0063                                 _SwDetect 00D1  
                            ??_Temp_Main 002E                        setRFSW_Control@sw 0033  
          _getMain_All_Error_Status$6310 0021            _getMain_All_Error_Status$6311 0023  
               __end_of_getDimmer_LoadOK 1B45                      _Load_Initialization 1AFF  
                              setLED@led 0023                  ??_DimmerIntrPointSelect 0070  
    __size_of_setDimmerLights_AdjControl 0035                             _setTemp_Main 0E11  
                       __size_of___awdiv 0054                         __size_of___ftadd 00F6  
                       ?_setRFSW_Control 0070                         __size_of___ftdiv 00A9  
                       __size_of___ftneg 0009                         __size_of___ftmul 00B4  
                       __size_of___fttol 0087                         __size_of___lwdiv 0037  
               setDimmerLights_SwOn@idle 002E                                 ___awtoft 1F28  
                       ??_LedPointSelect 0020                                 ___ftpack 092C  
          __size_of_getMain_Lights_Count 0016                         ??_getMain_LoadOK 0021  
          __size_of_getMain_LightsStatus 002D                        getTemp_AD@channel 0025  
                           ??_setRF_Main 006D                     CC2500_WriteREG@value 0022  
                            _setLED_Main 136A               __end_of_setRF_DimmerLights 1800  
               ?_DelayOff_Initialization 0070                         getDelayOff_GO@go 0023  
                       getDelayOff_GO@sw 0022                         setDelayOff_GO@sw 002E  
                        ___lwdiv@divisor 0020       __size_of_getAll_DimmerLights_AdjGO 0011  
                   ?_Load_Initialization 0070                          ___lwdiv@counter 0027  
                               __ptext10 1AE4                                 __ptext11 1ADA  
                               __ptext20 1BC0                                 __ptext12 1F8F  
                               __ptext21 1B45                                 __ptext13 01C8  
                               __ptext30 12EF                                 __ptext22 1DA3  
                               __ptext14 1D50                                 __ptext31 13A8  
                               __ptext23 1AE1                                 __ptext15 11E0  
                               __ptext40 098D                                 __ptext32 1147  
                               __ptext24 0655                                 __ptext16 1E88  
                               __ptext41 0B86                                 __ptext33 1F6C  
                               __ptext25 0D81                                 __ptext17 1D3C  
                               __ptext50 1BA8                                 __ptext42 1F4A  
                               __ptext34 0A53                                 __ptext26 124B  
                               __ptext18 0816                                 __ptext51 1AF6  
                               __ptext43 1DCF                                 __ptext35 0F4C  
                               __ptext27 1CDA                                 __ptext19 1CED  
                               __ptext60 1E4D                                 __ptext52 1B16  
                               __ptext44 1ADE                                 __ptext36 1CC7  
                               __ptext28 0B1E                                 __ptext61 1B9C  
                               __ptext53 004B                                 __ptext45 1B61  
                               __ptext37 1C5B                                 __ptext29 154D  
                               __ptext70 1118                                 __ptext62 136A  
                               __ptext54 1BCD                                 __ptext46 1C90  
                               __ptext38 1C4A                                 __ptext71 1066  
                               __ptext63 1B90                                 __ptext55 1B3D  
                               __ptext47 1B56                                 __ptext39 1BEA  
                               __ptext80 0C71                                 __ptext72 1E18  
                               __ptext64 1C28                                 __ptext56 0800  
                               __ptext48 1BB4                                 __ptext81 1B4D  
                               __ptext73 11AC                                 __ptext65 1215  
                               __ptext57 1C39                                 __ptext49 1DFF  
                               __ptext90 10EB                                 __ptext82 0EA3  
                               __ptext74 16F1                                 __ptext66 14FF  
                               __ptext58 1281                                 __ptext91 1B35  
                               __ptext83 0483                                 __ptext75 0AB8  
                               __ptext67 1B84                                 __ptext59 1AFF  
                               __ptext92 1DB8                                 __ptext84 1F28  
                               __ptext76 0CF8                                 __ptext68 0579  
                               __ptext93 1FD9                                 __ptext85 092C  
                               __ptext77 0723                                 __ptext69 1B78  
                               __ptext94 1AD9                                 __ptext86 159C  
                               __ptext78 17A4                                 __ptext95 1B2D  
                               __ptext87 1E32                                 __ptext79 09EE  
                               __ptext96 08CF                                 __ptext88 1D8E  
                               __ptext97 174A                                 __ptext89 1179  
                               __ptext98 146C                                 __ptext99 1EA7  
                               __product 0245            ??_setDimmerLights_IntrControl 0072  
                ??_setLED_Initialization 0024                 ??_getDimmerLights_Status 0022  
         __size_of_Dimmer_Initialization 0001             __end_of_getDimmerLights_Line 1D00  
          __end_of_Dimmer_Initialization 1ADA             __end_of_setDimmerLights_Main 174A  
           __end_of_setDimmerLights_Line 1DA3                         Switch_Main@error 003E  
           __end_of_setDimmerLights_SwOn 132C                   getDimmer_LoadOK@status 0020  
                           ??_setSw_Main 0031                            setLED@command 0022  
                          __size_of_main 0058                              _setRF_Learn 1D50  
               __end_of_CC2500_SIDLEMode 1AF6               setDimmerLights_Main@lights 0066  
            __end_of_DelayOffPointSelect 1D3C               CC2500_WriteCommand@command 0023  
                   setRF_Main@Receive_OK 00E9                __size_of_setDimmerReClock 0008  
         setDimmerLights_AdjControl@idle 0026                          _CC2500_ReadByte 1DCF  
                     _CC2500_InitPATable 1E69                 __end_of_setMemory_Modify 1CDA  
          setDimmerLights_Trigger@lights 0024                       __end_of_setRF_Main 0723  
                            ??_getBuz_GO 0022              __size_of_Mcu_Initialization 0012  
            setDimmerLights_ErrorClose@i 0034                     _CC2500_patable_vaule 105E  
                            ??_getRxData 006B                             getLoad_OK@ok 0020  
       setDimmerLights_TriggerAdj@lights 0024                                 main@argc 00EB  
                               main@argv 00ED                      ?_CC2500_InitPATable 0070  
                   _getSw_KeyStatus$5628 0021                     _getSw_KeyStatus$5629 0022  
                        _CC2500_PowerRST 1429                 __size_of_getSw_KeyStatus 001F  
            __end_of_Flash_Memory_Modify 154D                        ??_getPercentValue 005C  
                            _setLog_Code 124B              __end_of_Flash_Memory_Unlock 106F  
                        ??_SwPointSelect 0020                          _CC2500_WriteREG 1F07  
                     __end_of_setSw_Main 0337                    ??_Load_Initialization 0022  
                          _Transceive_OK 03E9                   ?_DlyOff_Initialization 0070  
                         _DelayTimejudge 10C1                              pic14e$flags 007E  
           ??_setDimmerLights_IntrIOC_GO 0072               setDimmerLights_Line@lights 0020  
           ??_setDimmerLights_ErrorClose 0031                  setDimmerLights_SwOff@sw 0030  
      __end_of_getAll_DimmerLights_AdjGO 1C4A              __size_of_setMemory_LoopSave 0013  
                               intlevel1 0000                     ??_CC2500_InitPATable 0025  
                 ?_Switch_Initialization 0070                  ??_CC2500_PowerOnInitial 0029  
 __end_of_setDimmerLights_Initialization 2000  __size_of_setDimmerLights_Initialization 0027  
         _setDimmerLights_Initialization 1FD9              __end_of_setDimmerLights_Adj 0B1E  
                ?_setTemp_Initialization 0070                              ??_setTxData 0020  
                 CC2500_InitPATable@temp 0026                    __size_of_RF_RxDisable 000F  
                      _RF_Initialization 1ADE     __size_of_setDimmerLights_IntrControl 014C  
                            getLoad_AD@i 0029                              getLoad_AD@j 0028  
                            getLoad_AD@k 0027                     _Flash_Memory_Erasing 1B84  
                     ?_RF_Initialization 0070                               _SPI0Buffer 007B  
        __end_of_DelayOff_Initialization 1B2D      __size_of_setDimmerLights_IntrIOC_GO 003E  
    __size_of_setDimmerLights_ErrorClose 005A                    __size_of_WDT_Clearing 0002  
                  __end_of_DelayOff_Main 1B35       __end_of_setDimmerLights_AdjControl 1215  
             _setDimmerLights_AdjControl 11E0                      ??_RF_Initialization 0021  
                __size_of_setMemory_Data 000C                           _setDelayOff_GO 0872  
       __size_of_setControl_Lights_Table 0068                   __end_of_DelayTimejudge 10EB  
   __size_of_Flash_Memory_Initialization 00DC              __size_of_set_TimeoutCleared 0005  
                          ??_DlyOff_Main 0036                    setMemory_Data@address 0022  
                  __end_of_DelayTime_1us 1FD9                  __end_of_CC2500_ReadByte 1DE6  
           __end_of_setSw_Initialization 1B4D                          _Timeout_Counter 1D64  
        __size_of_getDimmerLights_Status 0010                     getPercentValue@value 005E  
                           _RF_RxDisable 1BEA               __end_of_LED_Initialization 1B9C  
       __size_of_setDimmerLights_Trigger 001E           __end_of_setTemp_Initialization 1ADB  
               __size_of_setPercentValue 0065                  setMemory_Modify@command 0021  
                   setPercentValue@value 005E                __end_of_RF_Initialization 1AE1  
                  __end_of_CC2500_RxData 0BF0                    __end_of_CC2500_TxData 09EE  
                  _setLoad_AH_AL_Restore 1E4D                  __end_of_CC2500_PowerRST 146C  
         getAll_DimmerLights_AdjGO@adjgo 0021  
