

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Tue Jan 27 16:29:24 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssBANK0,global,bit,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    13                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,inline,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,inline,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,inline,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text126,local,class=CODE,merge=1,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text133,local,class=CODE,merge=1,delta=2
   154                           	psect	text134,local,class=CODE,merge=1,delta=2
   155                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	text136,local,class=CODE,merge=1,inline,delta=2
   157                           	psect	intentry,global,class=CODE,delta=2
   158                           	psect	text138,local,class=CODE,merge=1,inline,delta=2
   159                           	psect	text139,local,class=CODE,merge=1,inline,delta=2
   160                           	psect	text140,local,class=CODE,merge=1,inline,delta=2
   161                           	psect	text141,local,class=CODE,merge=1,inline,delta=2
   162                           	psect	text142,local,class=CODE,merge=1,inline,delta=2
   163                           	psect	text143,local,class=CODE,merge=1,inline,delta=2
   164                           	psect	text144,local,class=CODE,merge=1,inline,delta=2
   165                           	psect	text145,local,class=CODE,merge=1,delta=2
   166                           	dabs	1,0x7E,2
   167  0000                     	;# 
   168  0001                     	;# 
   169  0002                     	;# 
   170  0003                     	;# 
   171  0004                     	;# 
   172  0005                     	;# 
   173  0006                     	;# 
   174  0007                     	;# 
   175  0008                     	;# 
   176  0009                     	;# 
   177  000A                     	;# 
   178  000B                     	;# 
   179  000C                     	;# 
   180  000D                     	;# 
   181  000E                     	;# 
   182  0010                     	;# 
   183  0011                     	;# 
   184  0012                     	;# 
   185  0015                     	;# 
   186  0016                     	;# 
   187  0016                     	;# 
   188  0017                     	;# 
   189  0018                     	;# 
   190  0019                     	;# 
   191  001A                     	;# 
   192  001B                     	;# 
   193  001C                     	;# 
   194  008C                     	;# 
   195  008D                     	;# 
   196  008E                     	;# 
   197  0090                     	;# 
   198  0091                     	;# 
   199  0092                     	;# 
   200  0095                     	;# 
   201  0096                     	;# 
   202  0097                     	;# 
   203  0099                     	;# 
   204  009A                     	;# 
   205  009B                     	;# 
   206  009B                     	;# 
   207  009C                     	;# 
   208  009D                     	;# 
   209  009E                     	;# 
   210  010C                     	;# 
   211  010D                     	;# 
   212  010E                     	;# 
   213  0116                     	;# 
   214  0117                     	;# 
   215  011D                     	;# 
   216  018C                     	;# 
   217  018D                     	;# 
   218  018E                     	;# 
   219  0191                     	;# 
   220  0191                     	;# 
   221  0192                     	;# 
   222  0193                     	;# 
   223  0193                     	;# 
   224  0194                     	;# 
   225  0195                     	;# 
   226  0196                     	;# 
   227  0197                     	;# 
   228  0199                     	;# 
   229  019A                     	;# 
   230  019B                     	;# 
   231  019B                     	;# 
   232  019B                     	;# 
   233  019B                     	;# 
   234  019C                     	;# 
   235  019C                     	;# 
   236  019D                     	;# 
   237  019E                     	;# 
   238  019F                     	;# 
   239  020D                     	;# 
   240  0210                     	;# 
   241  0211                     	;# 
   242  0211                     	;# 
   243  0212                     	;# 
   244  0212                     	;# 
   245  0213                     	;# 
   246  0213                     	;# 
   247  0214                     	;# 
   248  0214                     	;# 
   249  0215                     	;# 
   250  0215                     	;# 
   251  0215                     	;# 
   252  0216                     	;# 
   253  0216                     	;# 
   254  0217                     	;# 
   255  0217                     	;# 
   256  0291                     	;# 
   257  0291                     	;# 
   258  0292                     	;# 
   259  0293                     	;# 
   260  0298                     	;# 
   261  0298                     	;# 
   262  0299                     	;# 
   263  029A                     	;# 
   264  0394                     	;# 
   265  0395                     	;# 
   266  0396                     	;# 
   267  0FE4                     	;# 
   268  0FE5                     	;# 
   269  0FE6                     	;# 
   270  0FE7                     	;# 
   271  0FE8                     	;# 
   272  0FE9                     	;# 
   273  0FEA                     	;# 
   274  0FEB                     	;# 
   275  0FED                     	;# 
   276  0FEE                     	;# 
   277  0FEF                     	;# 
   278  0000                     	;# 
   279  0001                     	;# 
   280  0002                     	;# 
   281  0003                     	;# 
   282  0004                     	;# 
   283  0005                     	;# 
   284  0006                     	;# 
   285  0007                     	;# 
   286  0008                     	;# 
   287  0009                     	;# 
   288  000A                     	;# 
   289  000B                     	;# 
   290  000C                     	;# 
   291  000D                     	;# 
   292  000E                     	;# 
   293  0010                     	;# 
   294  0011                     	;# 
   295  0012                     	;# 
   296  0015                     	;# 
   297  0016                     	;# 
   298  0016                     	;# 
   299  0017                     	;# 
   300  0018                     	;# 
   301  0019                     	;# 
   302  001A                     	;# 
   303  001B                     	;# 
   304  001C                     	;# 
   305  008C                     	;# 
   306  008D                     	;# 
   307  008E                     	;# 
   308  0090                     	;# 
   309  0091                     	;# 
   310  0092                     	;# 
   311  0095                     	;# 
   312  0096                     	;# 
   313  0097                     	;# 
   314  0099                     	;# 
   315  009A                     	;# 
   316  009B                     	;# 
   317  009B                     	;# 
   318  009C                     	;# 
   319  009D                     	;# 
   320  009E                     	;# 
   321  010C                     	;# 
   322  010D                     	;# 
   323  010E                     	;# 
   324  0116                     	;# 
   325  0117                     	;# 
   326  011D                     	;# 
   327  018C                     	;# 
   328  018D                     	;# 
   329  018E                     	;# 
   330  0191                     	;# 
   331  0191                     	;# 
   332  0192                     	;# 
   333  0193                     	;# 
   334  0193                     	;# 
   335  0194                     	;# 
   336  0195                     	;# 
   337  0196                     	;# 
   338  0197                     	;# 
   339  0199                     	;# 
   340  019A                     	;# 
   341  019B                     	;# 
   342  019B                     	;# 
   343  019B                     	;# 
   344  019B                     	;# 
   345  019C                     	;# 
   346  019C                     	;# 
   347  019D                     	;# 
   348  019E                     	;# 
   349  019F                     	;# 
   350  020D                     	;# 
   351  0210                     	;# 
   352  0211                     	;# 
   353  0211                     	;# 
   354  0212                     	;# 
   355  0212                     	;# 
   356  0213                     	;# 
   357  0213                     	;# 
   358  0214                     	;# 
   359  0214                     	;# 
   360  0215                     	;# 
   361  0215                     	;# 
   362  0215                     	;# 
   363  0216                     	;# 
   364  0216                     	;# 
   365  0217                     	;# 
   366  0217                     	;# 
   367  0291                     	;# 
   368  0291                     	;# 
   369  0292                     	;# 
   370  0293                     	;# 
   371  0298                     	;# 
   372  0298                     	;# 
   373  0299                     	;# 
   374  029A                     	;# 
   375  0394                     	;# 
   376  0395                     	;# 
   377  0396                     	;# 
   378  0FE4                     	;# 
   379  0FE5                     	;# 
   380  0FE6                     	;# 
   381  0FE7                     	;# 
   382  0FE8                     	;# 
   383  0FE9                     	;# 
   384  0FEA                     	;# 
   385  0FEB                     	;# 
   386  0FED                     	;# 
   387  0FEE                     	;# 
   388  0FEF                     	;# 
   389  0000                     	;# 
   390  0001                     	;# 
   391  0002                     	;# 
   392  0003                     	;# 
   393  0004                     	;# 
   394  0005                     	;# 
   395  0006                     	;# 
   396  0007                     	;# 
   397  0008                     	;# 
   398  0009                     	;# 
   399  000A                     	;# 
   400  000B                     	;# 
   401  000C                     	;# 
   402  000D                     	;# 
   403  000E                     	;# 
   404  0010                     	;# 
   405  0011                     	;# 
   406  0012                     	;# 
   407  0015                     	;# 
   408  0016                     	;# 
   409  0016                     	;# 
   410  0017                     	;# 
   411  0018                     	;# 
   412  0019                     	;# 
   413  001A                     	;# 
   414  001B                     	;# 
   415  001C                     	;# 
   416  008C                     	;# 
   417  008D                     	;# 
   418  008E                     	;# 
   419  0090                     	;# 
   420  0091                     	;# 
   421  0092                     	;# 
   422  0095                     	;# 
   423  0096                     	;# 
   424  0097                     	;# 
   425  0099                     	;# 
   426  009A                     	;# 
   427  009B                     	;# 
   428  009B                     	;# 
   429  009C                     	;# 
   430  009D                     	;# 
   431  009E                     	;# 
   432  010C                     	;# 
   433  010D                     	;# 
   434  010E                     	;# 
   435  0116                     	;# 
   436  0117                     	;# 
   437  011D                     	;# 
   438  018C                     	;# 
   439  018D                     	;# 
   440  018E                     	;# 
   441  0191                     	;# 
   442  0191                     	;# 
   443  0192                     	;# 
   444  0193                     	;# 
   445  0193                     	;# 
   446  0194                     	;# 
   447  0195                     	;# 
   448  0196                     	;# 
   449  0197                     	;# 
   450  0199                     	;# 
   451  019A                     	;# 
   452  019B                     	;# 
   453  019B                     	;# 
   454  019B                     	;# 
   455  019B                     	;# 
   456  019C                     	;# 
   457  019C                     	;# 
   458  019D                     	;# 
   459  019E                     	;# 
   460  019F                     	;# 
   461  020D                     	;# 
   462  0210                     	;# 
   463  0211                     	;# 
   464  0211                     	;# 
   465  0212                     	;# 
   466  0212                     	;# 
   467  0213                     	;# 
   468  0213                     	;# 
   469  0214                     	;# 
   470  0214                     	;# 
   471  0215                     	;# 
   472  0215                     	;# 
   473  0215                     	;# 
   474  0216                     	;# 
   475  0216                     	;# 
   476  0217                     	;# 
   477  0217                     	;# 
   478  0291                     	;# 
   479  0291                     	;# 
   480  0292                     	;# 
   481  0293                     	;# 
   482  0298                     	;# 
   483  0298                     	;# 
   484  0299                     	;# 
   485  029A                     	;# 
   486  0394                     	;# 
   487  0395                     	;# 
   488  0396                     	;# 
   489  0FE4                     	;# 
   490  0FE5                     	;# 
   491  0FE6                     	;# 
   492  0FE7                     	;# 
   493  0FE8                     	;# 
   494  0FE9                     	;# 
   495  0FEA                     	;# 
   496  0FEB                     	;# 
   497  0FED                     	;# 
   498  0FEE                     	;# 
   499  0FEF                     	;# 
   500  0000                     	;# 
   501  0001                     	;# 
   502  0002                     	;# 
   503  0003                     	;# 
   504  0004                     	;# 
   505  0005                     	;# 
   506  0006                     	;# 
   507  0007                     	;# 
   508  0008                     	;# 
   509  0009                     	;# 
   510  000A                     	;# 
   511  000B                     	;# 
   512  000C                     	;# 
   513  000D                     	;# 
   514  000E                     	;# 
   515  0010                     	;# 
   516  0011                     	;# 
   517  0012                     	;# 
   518  0015                     	;# 
   519  0016                     	;# 
   520  0016                     	;# 
   521  0017                     	;# 
   522  0018                     	;# 
   523  0019                     	;# 
   524  001A                     	;# 
   525  001B                     	;# 
   526  001C                     	;# 
   527  008C                     	;# 
   528  008D                     	;# 
   529  008E                     	;# 
   530  0090                     	;# 
   531  0091                     	;# 
   532  0092                     	;# 
   533  0095                     	;# 
   534  0096                     	;# 
   535  0097                     	;# 
   536  0099                     	;# 
   537  009A                     	;# 
   538  009B                     	;# 
   539  009B                     	;# 
   540  009C                     	;# 
   541  009D                     	;# 
   542  009E                     	;# 
   543  010C                     	;# 
   544  010D                     	;# 
   545  010E                     	;# 
   546  0116                     	;# 
   547  0117                     	;# 
   548  011D                     	;# 
   549  018C                     	;# 
   550  018D                     	;# 
   551  018E                     	;# 
   552  0191                     	;# 
   553  0191                     	;# 
   554  0192                     	;# 
   555  0193                     	;# 
   556  0193                     	;# 
   557  0194                     	;# 
   558  0195                     	;# 
   559  0196                     	;# 
   560  0197                     	;# 
   561  0199                     	;# 
   562  019A                     	;# 
   563  019B                     	;# 
   564  019B                     	;# 
   565  019B                     	;# 
   566  019B                     	;# 
   567  019C                     	;# 
   568  019C                     	;# 
   569  019D                     	;# 
   570  019E                     	;# 
   571  019F                     	;# 
   572  020D                     	;# 
   573  0210                     	;# 
   574  0211                     	;# 
   575  0211                     	;# 
   576  0212                     	;# 
   577  0212                     	;# 
   578  0213                     	;# 
   579  0213                     	;# 
   580  0214                     	;# 
   581  0214                     	;# 
   582  0215                     	;# 
   583  0215                     	;# 
   584  0215                     	;# 
   585  0216                     	;# 
   586  0216                     	;# 
   587  0217                     	;# 
   588  0217                     	;# 
   589  0291                     	;# 
   590  0291                     	;# 
   591  0292                     	;# 
   592  0293                     	;# 
   593  0298                     	;# 
   594  0298                     	;# 
   595  0299                     	;# 
   596  029A                     	;# 
   597  0394                     	;# 
   598  0395                     	;# 
   599  0396                     	;# 
   600  0FE4                     	;# 
   601  0FE5                     	;# 
   602  0FE6                     	;# 
   603  0FE7                     	;# 
   604  0FE8                     	;# 
   605  0FE9                     	;# 
   606  0FEA                     	;# 
   607  0FEB                     	;# 
   608  0FED                     	;# 
   609  0FEE                     	;# 
   610  0FEF                     	;# 
   611  0000                     	;# 
   612  0001                     	;# 
   613  0002                     	;# 
   614  0003                     	;# 
   615  0004                     	;# 
   616  0005                     	;# 
   617  0006                     	;# 
   618  0007                     	;# 
   619  0008                     	;# 
   620  0009                     	;# 
   621  000A                     	;# 
   622  000B                     	;# 
   623  000C                     	;# 
   624  000D                     	;# 
   625  000E                     	;# 
   626  0010                     	;# 
   627  0011                     	;# 
   628  0012                     	;# 
   629  0015                     	;# 
   630  0016                     	;# 
   631  0016                     	;# 
   632  0017                     	;# 
   633  0018                     	;# 
   634  0019                     	;# 
   635  001A                     	;# 
   636  001B                     	;# 
   637  001C                     	;# 
   638  008C                     	;# 
   639  008D                     	;# 
   640  008E                     	;# 
   641  0090                     	;# 
   642  0091                     	;# 
   643  0092                     	;# 
   644  0095                     	;# 
   645  0096                     	;# 
   646  0097                     	;# 
   647  0099                     	;# 
   648  009A                     	;# 
   649  009B                     	;# 
   650  009B                     	;# 
   651  009C                     	;# 
   652  009D                     	;# 
   653  009E                     	;# 
   654  010C                     	;# 
   655  010D                     	;# 
   656  010E                     	;# 
   657  0116                     	;# 
   658  0117                     	;# 
   659  011D                     	;# 
   660  018C                     	;# 
   661  018D                     	;# 
   662  018E                     	;# 
   663  0191                     	;# 
   664  0191                     	;# 
   665  0192                     	;# 
   666  0193                     	;# 
   667  0193                     	;# 
   668  0194                     	;# 
   669  0195                     	;# 
   670  0196                     	;# 
   671  0197                     	;# 
   672  0199                     	;# 
   673  019A                     	;# 
   674  019B                     	;# 
   675  019B                     	;# 
   676  019B                     	;# 
   677  019B                     	;# 
   678  019C                     	;# 
   679  019C                     	;# 
   680  019D                     	;# 
   681  019E                     	;# 
   682  019F                     	;# 
   683  020D                     	;# 
   684  0210                     	;# 
   685  0211                     	;# 
   686  0211                     	;# 
   687  0212                     	;# 
   688  0212                     	;# 
   689  0213                     	;# 
   690  0213                     	;# 
   691  0214                     	;# 
   692  0214                     	;# 
   693  0215                     	;# 
   694  0215                     	;# 
   695  0215                     	;# 
   696  0216                     	;# 
   697  0216                     	;# 
   698  0217                     	;# 
   699  0217                     	;# 
   700  0291                     	;# 
   701  0291                     	;# 
   702  0292                     	;# 
   703  0293                     	;# 
   704  0298                     	;# 
   705  0298                     	;# 
   706  0299                     	;# 
   707  029A                     	;# 
   708  0394                     	;# 
   709  0395                     	;# 
   710  0396                     	;# 
   711  0FE4                     	;# 
   712  0FE5                     	;# 
   713  0FE6                     	;# 
   714  0FE7                     	;# 
   715  0FE8                     	;# 
   716  0FE9                     	;# 
   717  0FEA                     	;# 
   718  0FEB                     	;# 
   719  0FED                     	;# 
   720  0FEE                     	;# 
   721  0FEF                     	;# 
   722  0000                     	;# 
   723  0001                     	;# 
   724  0002                     	;# 
   725  0003                     	;# 
   726  0004                     	;# 
   727  0005                     	;# 
   728  0006                     	;# 
   729  0007                     	;# 
   730  0008                     	;# 
   731  0009                     	;# 
   732  000A                     	;# 
   733  000B                     	;# 
   734  000C                     	;# 
   735  000D                     	;# 
   736  000E                     	;# 
   737  0010                     	;# 
   738  0011                     	;# 
   739  0012                     	;# 
   740  0015                     	;# 
   741  0016                     	;# 
   742  0016                     	;# 
   743  0017                     	;# 
   744  0018                     	;# 
   745  0019                     	;# 
   746  001A                     	;# 
   747  001B                     	;# 
   748  001C                     	;# 
   749  008C                     	;# 
   750  008D                     	;# 
   751  008E                     	;# 
   752  0090                     	;# 
   753  0091                     	;# 
   754  0092                     	;# 
   755  0095                     	;# 
   756  0096                     	;# 
   757  0097                     	;# 
   758  0099                     	;# 
   759  009A                     	;# 
   760  009B                     	;# 
   761  009B                     	;# 
   762  009C                     	;# 
   763  009D                     	;# 
   764  009E                     	;# 
   765  010C                     	;# 
   766  010D                     	;# 
   767  010E                     	;# 
   768  0116                     	;# 
   769  0117                     	;# 
   770  011D                     	;# 
   771  018C                     	;# 
   772  018D                     	;# 
   773  018E                     	;# 
   774  0191                     	;# 
   775  0191                     	;# 
   776  0192                     	;# 
   777  0193                     	;# 
   778  0193                     	;# 
   779  0194                     	;# 
   780  0195                     	;# 
   781  0196                     	;# 
   782  0197                     	;# 
   783  0199                     	;# 
   784  019A                     	;# 
   785  019B                     	;# 
   786  019B                     	;# 
   787  019B                     	;# 
   788  019B                     	;# 
   789  019C                     	;# 
   790  019C                     	;# 
   791  019D                     	;# 
   792  019E                     	;# 
   793  019F                     	;# 
   794  020D                     	;# 
   795  0210                     	;# 
   796  0211                     	;# 
   797  0211                     	;# 
   798  0212                     	;# 
   799  0212                     	;# 
   800  0213                     	;# 
   801  0213                     	;# 
   802  0214                     	;# 
   803  0214                     	;# 
   804  0215                     	;# 
   805  0215                     	;# 
   806  0215                     	;# 
   807  0216                     	;# 
   808  0216                     	;# 
   809  0217                     	;# 
   810  0217                     	;# 
   811  0291                     	;# 
   812  0291                     	;# 
   813  0292                     	;# 
   814  0293                     	;# 
   815  0298                     	;# 
   816  0298                     	;# 
   817  0299                     	;# 
   818  029A                     	;# 
   819  0394                     	;# 
   820  0395                     	;# 
   821  0396                     	;# 
   822  0FE4                     	;# 
   823  0FE5                     	;# 
   824  0FE6                     	;# 
   825  0FE7                     	;# 
   826  0FE8                     	;# 
   827  0FE9                     	;# 
   828  0FEA                     	;# 
   829  0FEB                     	;# 
   830  0FED                     	;# 
   831  0FEE                     	;# 
   832  0FEF                     	;# 
   833  0000                     	;# 
   834  0001                     	;# 
   835  0002                     	;# 
   836  0003                     	;# 
   837  0004                     	;# 
   838  0005                     	;# 
   839  0006                     	;# 
   840  0007                     	;# 
   841  0008                     	;# 
   842  0009                     	;# 
   843  000A                     	;# 
   844  000B                     	;# 
   845  000C                     	;# 
   846  000D                     	;# 
   847  000E                     	;# 
   848  0010                     	;# 
   849  0011                     	;# 
   850  0012                     	;# 
   851  0015                     	;# 
   852  0016                     	;# 
   853  0016                     	;# 
   854  0017                     	;# 
   855  0018                     	;# 
   856  0019                     	;# 
   857  001A                     	;# 
   858  001B                     	;# 
   859  001C                     	;# 
   860  008C                     	;# 
   861  008D                     	;# 
   862  008E                     	;# 
   863  0090                     	;# 
   864  0091                     	;# 
   865  0092                     	;# 
   866  0095                     	;# 
   867  0096                     	;# 
   868  0097                     	;# 
   869  0099                     	;# 
   870  009A                     	;# 
   871  009B                     	;# 
   872  009B                     	;# 
   873  009C                     	;# 
   874  009D                     	;# 
   875  009E                     	;# 
   876  010C                     	;# 
   877  010D                     	;# 
   878  010E                     	;# 
   879  0116                     	;# 
   880  0117                     	;# 
   881  011D                     	;# 
   882  018C                     	;# 
   883  018D                     	;# 
   884  018E                     	;# 
   885  0191                     	;# 
   886  0191                     	;# 
   887  0192                     	;# 
   888  0193                     	;# 
   889  0193                     	;# 
   890  0194                     	;# 
   891  0195                     	;# 
   892  0196                     	;# 
   893  0197                     	;# 
   894  0199                     	;# 
   895  019A                     	;# 
   896  019B                     	;# 
   897  019B                     	;# 
   898  019B                     	;# 
   899  019B                     	;# 
   900  019C                     	;# 
   901  019C                     	;# 
   902  019D                     	;# 
   903  019E                     	;# 
   904  019F                     	;# 
   905  020D                     	;# 
   906  0210                     	;# 
   907  0211                     	;# 
   908  0211                     	;# 
   909  0212                     	;# 
   910  0212                     	;# 
   911  0213                     	;# 
   912  0213                     	;# 
   913  0214                     	;# 
   914  0214                     	;# 
   915  0215                     	;# 
   916  0215                     	;# 
   917  0215                     	;# 
   918  0216                     	;# 
   919  0216                     	;# 
   920  0217                     	;# 
   921  0217                     	;# 
   922  0291                     	;# 
   923  0291                     	;# 
   924  0292                     	;# 
   925  0293                     	;# 
   926  0298                     	;# 
   927  0298                     	;# 
   928  0299                     	;# 
   929  029A                     	;# 
   930  0394                     	;# 
   931  0395                     	;# 
   932  0396                     	;# 
   933  0FE4                     	;# 
   934  0FE5                     	;# 
   935  0FE6                     	;# 
   936  0FE7                     	;# 
   937  0FE8                     	;# 
   938  0FE9                     	;# 
   939  0FEA                     	;# 
   940  0FEB                     	;# 
   941  0FED                     	;# 
   942  0FEE                     	;# 
   943  0FEF                     	;# 
   944  0000                     	;# 
   945  0001                     	;# 
   946  0002                     	;# 
   947  0003                     	;# 
   948  0004                     	;# 
   949  0005                     	;# 
   950  0006                     	;# 
   951  0007                     	;# 
   952  0008                     	;# 
   953  0009                     	;# 
   954  000A                     	;# 
   955  000B                     	;# 
   956  000C                     	;# 
   957  000D                     	;# 
   958  000E                     	;# 
   959  0010                     	;# 
   960  0011                     	;# 
   961  0012                     	;# 
   962  0015                     	;# 
   963  0016                     	;# 
   964  0016                     	;# 
   965  0017                     	;# 
   966  0018                     	;# 
   967  0019                     	;# 
   968  001A                     	;# 
   969  001B                     	;# 
   970  001C                     	;# 
   971  008C                     	;# 
   972  008D                     	;# 
   973  008E                     	;# 
   974  0090                     	;# 
   975  0091                     	;# 
   976  0092                     	;# 
   977  0095                     	;# 
   978  0096                     	;# 
   979  0097                     	;# 
   980  0099                     	;# 
   981  009A                     	;# 
   982  009B                     	;# 
   983  009B                     	;# 
   984  009C                     	;# 
   985  009D                     	;# 
   986  009E                     	;# 
   987  010C                     	;# 
   988  010D                     	;# 
   989  010E                     	;# 
   990  0116                     	;# 
   991  0117                     	;# 
   992  011D                     	;# 
   993  018C                     	;# 
   994  018D                     	;# 
   995  018E                     	;# 
   996  0191                     	;# 
   997  0191                     	;# 
   998  0192                     	;# 
   999  0193                     	;# 
  1000  0193                     	;# 
  1001  0194                     	;# 
  1002  0195                     	;# 
  1003  0196                     	;# 
  1004  0197                     	;# 
  1005  0199                     	;# 
  1006  019A                     	;# 
  1007  019B                     	;# 
  1008  019B                     	;# 
  1009  019B                     	;# 
  1010  019B                     	;# 
  1011  019C                     	;# 
  1012  019C                     	;# 
  1013  019D                     	;# 
  1014  019E                     	;# 
  1015  019F                     	;# 
  1016  020D                     	;# 
  1017  0210                     	;# 
  1018  0211                     	;# 
  1019  0211                     	;# 
  1020  0212                     	;# 
  1021  0212                     	;# 
  1022  0213                     	;# 
  1023  0213                     	;# 
  1024  0214                     	;# 
  1025  0214                     	;# 
  1026  0215                     	;# 
  1027  0215                     	;# 
  1028  0215                     	;# 
  1029  0216                     	;# 
  1030  0216                     	;# 
  1031  0217                     	;# 
  1032  0217                     	;# 
  1033  0291                     	;# 
  1034  0291                     	;# 
  1035  0292                     	;# 
  1036  0293                     	;# 
  1037  0298                     	;# 
  1038  0298                     	;# 
  1039  0299                     	;# 
  1040  029A                     	;# 
  1041  0394                     	;# 
  1042  0395                     	;# 
  1043  0396                     	;# 
  1044  0FE4                     	;# 
  1045  0FE5                     	;# 
  1046  0FE6                     	;# 
  1047  0FE7                     	;# 
  1048  0FE8                     	;# 
  1049  0FE9                     	;# 
  1050  0FEA                     	;# 
  1051  0FEB                     	;# 
  1052  0FED                     	;# 
  1053  0FEE                     	;# 
  1054  0FEF                     	;# 
  1055  0000                     	;# 
  1056  0001                     	;# 
  1057  0002                     	;# 
  1058  0003                     	;# 
  1059  0004                     	;# 
  1060  0005                     	;# 
  1061  0006                     	;# 
  1062  0007                     	;# 
  1063  0008                     	;# 
  1064  0009                     	;# 
  1065  000A                     	;# 
  1066  000B                     	;# 
  1067  000C                     	;# 
  1068  000D                     	;# 
  1069  000E                     	;# 
  1070  0010                     	;# 
  1071  0011                     	;# 
  1072  0012                     	;# 
  1073  0015                     	;# 
  1074  0016                     	;# 
  1075  0016                     	;# 
  1076  0017                     	;# 
  1077  0018                     	;# 
  1078  0019                     	;# 
  1079  001A                     	;# 
  1080  001B                     	;# 
  1081  001C                     	;# 
  1082  008C                     	;# 
  1083  008D                     	;# 
  1084  008E                     	;# 
  1085  0090                     	;# 
  1086  0091                     	;# 
  1087  0092                     	;# 
  1088  0095                     	;# 
  1089  0096                     	;# 
  1090  0097                     	;# 
  1091  0099                     	;# 
  1092  009A                     	;# 
  1093  009B                     	;# 
  1094  009B                     	;# 
  1095  009C                     	;# 
  1096  009D                     	;# 
  1097  009E                     	;# 
  1098  010C                     	;# 
  1099  010D                     	;# 
  1100  010E                     	;# 
  1101  0116                     	;# 
  1102  0117                     	;# 
  1103  011D                     	;# 
  1104  018C                     	;# 
  1105  018D                     	;# 
  1106  018E                     	;# 
  1107  0191                     	;# 
  1108  0191                     	;# 
  1109  0192                     	;# 
  1110  0193                     	;# 
  1111  0193                     	;# 
  1112  0194                     	;# 
  1113  0195                     	;# 
  1114  0196                     	;# 
  1115  0197                     	;# 
  1116  0199                     	;# 
  1117  019A                     	;# 
  1118  019B                     	;# 
  1119  019B                     	;# 
  1120  019B                     	;# 
  1121  019B                     	;# 
  1122  019C                     	;# 
  1123  019C                     	;# 
  1124  019D                     	;# 
  1125  019E                     	;# 
  1126  019F                     	;# 
  1127  020D                     	;# 
  1128  0210                     	;# 
  1129  0211                     	;# 
  1130  0211                     	;# 
  1131  0212                     	;# 
  1132  0212                     	;# 
  1133  0213                     	;# 
  1134  0213                     	;# 
  1135  0214                     	;# 
  1136  0214                     	;# 
  1137  0215                     	;# 
  1138  0215                     	;# 
  1139  0215                     	;# 
  1140  0216                     	;# 
  1141  0216                     	;# 
  1142  0217                     	;# 
  1143  0217                     	;# 
  1144  0291                     	;# 
  1145  0291                     	;# 
  1146  0292                     	;# 
  1147  0293                     	;# 
  1148  0298                     	;# 
  1149  0298                     	;# 
  1150  0299                     	;# 
  1151  029A                     	;# 
  1152  0394                     	;# 
  1153  0395                     	;# 
  1154  0396                     	;# 
  1155  0FE4                     	;# 
  1156  0FE5                     	;# 
  1157  0FE6                     	;# 
  1158  0FE7                     	;# 
  1159  0FE8                     	;# 
  1160  0FE9                     	;# 
  1161  0FEA                     	;# 
  1162  0FEB                     	;# 
  1163  0FED                     	;# 
  1164  0FEE                     	;# 
  1165  0FEF                     	;# 
  1166  0000                     	;# 
  1167  0001                     	;# 
  1168  0002                     	;# 
  1169  0003                     	;# 
  1170  0004                     	;# 
  1171  0005                     	;# 
  1172  0006                     	;# 
  1173  0007                     	;# 
  1174  0008                     	;# 
  1175  0009                     	;# 
  1176  000A                     	;# 
  1177  000B                     	;# 
  1178  000C                     	;# 
  1179  000D                     	;# 
  1180  000E                     	;# 
  1181  0010                     	;# 
  1182  0011                     	;# 
  1183  0012                     	;# 
  1184  0015                     	;# 
  1185  0016                     	;# 
  1186  0016                     	;# 
  1187  0017                     	;# 
  1188  0018                     	;# 
  1189  0019                     	;# 
  1190  001A                     	;# 
  1191  001B                     	;# 
  1192  001C                     	;# 
  1193  008C                     	;# 
  1194  008D                     	;# 
  1195  008E                     	;# 
  1196  0090                     	;# 
  1197  0091                     	;# 
  1198  0092                     	;# 
  1199  0095                     	;# 
  1200  0096                     	;# 
  1201  0097                     	;# 
  1202  0099                     	;# 
  1203  009A                     	;# 
  1204  009B                     	;# 
  1205  009B                     	;# 
  1206  009C                     	;# 
  1207  009D                     	;# 
  1208  009E                     	;# 
  1209  010C                     	;# 
  1210  010D                     	;# 
  1211  010E                     	;# 
  1212  0116                     	;# 
  1213  0117                     	;# 
  1214  011D                     	;# 
  1215  018C                     	;# 
  1216  018D                     	;# 
  1217  018E                     	;# 
  1218  0191                     	;# 
  1219  0191                     	;# 
  1220  0192                     	;# 
  1221  0193                     	;# 
  1222  0193                     	;# 
  1223  0194                     	;# 
  1224  0195                     	;# 
  1225  0196                     	;# 
  1226  0197                     	;# 
  1227  0199                     	;# 
  1228  019A                     	;# 
  1229  019B                     	;# 
  1230  019B                     	;# 
  1231  019B                     	;# 
  1232  019B                     	;# 
  1233  019C                     	;# 
  1234  019C                     	;# 
  1235  019D                     	;# 
  1236  019E                     	;# 
  1237  019F                     	;# 
  1238  020D                     	;# 
  1239  0210                     	;# 
  1240  0211                     	;# 
  1241  0211                     	;# 
  1242  0212                     	;# 
  1243  0212                     	;# 
  1244  0213                     	;# 
  1245  0213                     	;# 
  1246  0214                     	;# 
  1247  0214                     	;# 
  1248  0215                     	;# 
  1249  0215                     	;# 
  1250  0215                     	;# 
  1251  0216                     	;# 
  1252  0216                     	;# 
  1253  0217                     	;# 
  1254  0217                     	;# 
  1255  0291                     	;# 
  1256  0291                     	;# 
  1257  0292                     	;# 
  1258  0293                     	;# 
  1259  0298                     	;# 
  1260  0298                     	;# 
  1261  0299                     	;# 
  1262  029A                     	;# 
  1263  0394                     	;# 
  1264  0395                     	;# 
  1265  0396                     	;# 
  1266  0FE4                     	;# 
  1267  0FE5                     	;# 
  1268  0FE6                     	;# 
  1269  0FE7                     	;# 
  1270  0FE8                     	;# 
  1271  0FE9                     	;# 
  1272  0FEA                     	;# 
  1273  0FEB                     	;# 
  1274  0FED                     	;# 
  1275  0FEE                     	;# 
  1276  0FEF                     	;# 
  1277  0000                     	;# 
  1278  0001                     	;# 
  1279  0002                     	;# 
  1280  0003                     	;# 
  1281  0004                     	;# 
  1282  0005                     	;# 
  1283  0006                     	;# 
  1284  0007                     	;# 
  1285  0008                     	;# 
  1286  0009                     	;# 
  1287  000A                     	;# 
  1288  000B                     	;# 
  1289  000C                     	;# 
  1290  000D                     	;# 
  1291  000E                     	;# 
  1292  0010                     	;# 
  1293  0011                     	;# 
  1294  0012                     	;# 
  1295  0015                     	;# 
  1296  0016                     	;# 
  1297  0016                     	;# 
  1298  0017                     	;# 
  1299  0018                     	;# 
  1300  0019                     	;# 
  1301  001A                     	;# 
  1302  001B                     	;# 
  1303  001C                     	;# 
  1304  008C                     	;# 
  1305  008D                     	;# 
  1306  008E                     	;# 
  1307  0090                     	;# 
  1308  0091                     	;# 
  1309  0092                     	;# 
  1310  0095                     	;# 
  1311  0096                     	;# 
  1312  0097                     	;# 
  1313  0099                     	;# 
  1314  009A                     	;# 
  1315  009B                     	;# 
  1316  009B                     	;# 
  1317  009C                     	;# 
  1318  009D                     	;# 
  1319  009E                     	;# 
  1320  010C                     	;# 
  1321  010D                     	;# 
  1322  010E                     	;# 
  1323  0116                     	;# 
  1324  0117                     	;# 
  1325  011D                     	;# 
  1326  018C                     	;# 
  1327  018D                     	;# 
  1328  018E                     	;# 
  1329  0191                     	;# 
  1330  0191                     	;# 
  1331  0192                     	;# 
  1332  0193                     	;# 
  1333  0193                     	;# 
  1334  0194                     	;# 
  1335  0195                     	;# 
  1336  0196                     	;# 
  1337  0197                     	;# 
  1338  0199                     	;# 
  1339  019A                     	;# 
  1340  019B                     	;# 
  1341  019B                     	;# 
  1342  019B                     	;# 
  1343  019B                     	;# 
  1344  019C                     	;# 
  1345  019C                     	;# 
  1346  019D                     	;# 
  1347  019E                     	;# 
  1348  019F                     	;# 
  1349  020D                     	;# 
  1350  0210                     	;# 
  1351  0211                     	;# 
  1352  0211                     	;# 
  1353  0212                     	;# 
  1354  0212                     	;# 
  1355  0213                     	;# 
  1356  0213                     	;# 
  1357  0214                     	;# 
  1358  0214                     	;# 
  1359  0215                     	;# 
  1360  0215                     	;# 
  1361  0215                     	;# 
  1362  0216                     	;# 
  1363  0216                     	;# 
  1364  0217                     	;# 
  1365  0217                     	;# 
  1366  0291                     	;# 
  1367  0291                     	;# 
  1368  0292                     	;# 
  1369  0293                     	;# 
  1370  0298                     	;# 
  1371  0298                     	;# 
  1372  0299                     	;# 
  1373  029A                     	;# 
  1374  0394                     	;# 
  1375  0395                     	;# 
  1376  0396                     	;# 
  1377  0FE4                     	;# 
  1378  0FE5                     	;# 
  1379  0FE6                     	;# 
  1380  0FE7                     	;# 
  1381  0FE8                     	;# 
  1382  0FE9                     	;# 
  1383  0FEA                     	;# 
  1384  0FEB                     	;# 
  1385  0FED                     	;# 
  1386  0FEE                     	;# 
  1387  0FEF                     	;# 
  1388  0000                     	;# 
  1389  0001                     	;# 
  1390  0002                     	;# 
  1391  0003                     	;# 
  1392  0004                     	;# 
  1393  0005                     	;# 
  1394  0006                     	;# 
  1395  0007                     	;# 
  1396  0008                     	;# 
  1397  0009                     	;# 
  1398  000A                     	;# 
  1399  000B                     	;# 
  1400  000C                     	;# 
  1401  000D                     	;# 
  1402  000E                     	;# 
  1403  0010                     	;# 
  1404  0011                     	;# 
  1405  0012                     	;# 
  1406  0015                     	;# 
  1407  0016                     	;# 
  1408  0016                     	;# 
  1409  0017                     	;# 
  1410  0018                     	;# 
  1411  0019                     	;# 
  1412  001A                     	;# 
  1413  001B                     	;# 
  1414  001C                     	;# 
  1415  008C                     	;# 
  1416  008D                     	;# 
  1417  008E                     	;# 
  1418  0090                     	;# 
  1419  0091                     	;# 
  1420  0092                     	;# 
  1421  0095                     	;# 
  1422  0096                     	;# 
  1423  0097                     	;# 
  1424  0099                     	;# 
  1425  009A                     	;# 
  1426  009B                     	;# 
  1427  009B                     	;# 
  1428  009C                     	;# 
  1429  009D                     	;# 
  1430  009E                     	;# 
  1431  010C                     	;# 
  1432  010D                     	;# 
  1433  010E                     	;# 
  1434  0116                     	;# 
  1435  0117                     	;# 
  1436  011D                     	;# 
  1437  018C                     	;# 
  1438  018D                     	;# 
  1439  018E                     	;# 
  1440  0191                     	;# 
  1441  0191                     	;# 
  1442  0192                     	;# 
  1443  0193                     	;# 
  1444  0193                     	;# 
  1445  0194                     	;# 
  1446  0195                     	;# 
  1447  0196                     	;# 
  1448  0197                     	;# 
  1449  0199                     	;# 
  1450  019A                     	;# 
  1451  019B                     	;# 
  1452  019B                     	;# 
  1453  019B                     	;# 
  1454  019B                     	;# 
  1455  019C                     	;# 
  1456  019C                     	;# 
  1457  019D                     	;# 
  1458  019E                     	;# 
  1459  019F                     	;# 
  1460  020D                     	;# 
  1461  0210                     	;# 
  1462  0211                     	;# 
  1463  0211                     	;# 
  1464  0212                     	;# 
  1465  0212                     	;# 
  1466  0213                     	;# 
  1467  0213                     	;# 
  1468  0214                     	;# 
  1469  0214                     	;# 
  1470  0215                     	;# 
  1471  0215                     	;# 
  1472  0215                     	;# 
  1473  0216                     	;# 
  1474  0216                     	;# 
  1475  0217                     	;# 
  1476  0217                     	;# 
  1477  0291                     	;# 
  1478  0291                     	;# 
  1479  0292                     	;# 
  1480  0293                     	;# 
  1481  0298                     	;# 
  1482  0298                     	;# 
  1483  0299                     	;# 
  1484  029A                     	;# 
  1485  0394                     	;# 
  1486  0395                     	;# 
  1487  0396                     	;# 
  1488  0FE4                     	;# 
  1489  0FE5                     	;# 
  1490  0FE6                     	;# 
  1491  0FE7                     	;# 
  1492  0FE8                     	;# 
  1493  0FE9                     	;# 
  1494  0FEA                     	;# 
  1495  0FEB                     	;# 
  1496  0FED                     	;# 
  1497  0FEE                     	;# 
  1498  0FEF                     	;# 
  1499  0000                     	;# 
  1500  0001                     	;# 
  1501  0002                     	;# 
  1502  0003                     	;# 
  1503  0004                     	;# 
  1504  0005                     	;# 
  1505  0006                     	;# 
  1506  0007                     	;# 
  1507  0008                     	;# 
  1508  0009                     	;# 
  1509  000A                     	;# 
  1510  000B                     	;# 
  1511  000C                     	;# 
  1512  000D                     	;# 
  1513  000E                     	;# 
  1514  0010                     	;# 
  1515  0011                     	;# 
  1516  0012                     	;# 
  1517  0015                     	;# 
  1518  0016                     	;# 
  1519  0016                     	;# 
  1520  0017                     	;# 
  1521  0018                     	;# 
  1522  0019                     	;# 
  1523  001A                     	;# 
  1524  001B                     	;# 
  1525  001C                     	;# 
  1526  008C                     	;# 
  1527  008D                     	;# 
  1528  008E                     	;# 
  1529  0090                     	;# 
  1530  0091                     	;# 
  1531  0092                     	;# 
  1532  0095                     	;# 
  1533  0096                     	;# 
  1534  0097                     	;# 
  1535  0099                     	;# 
  1536  009A                     	;# 
  1537  009B                     	;# 
  1538  009B                     	;# 
  1539  009C                     	;# 
  1540  009D                     	;# 
  1541  009E                     	;# 
  1542  010C                     	;# 
  1543  010D                     	;# 
  1544  010E                     	;# 
  1545  0116                     	;# 
  1546  0117                     	;# 
  1547  011D                     	;# 
  1548  018C                     	;# 
  1549  018D                     	;# 
  1550  018E                     	;# 
  1551  0191                     	;# 
  1552  0191                     	;# 
  1553  0192                     	;# 
  1554  0193                     	;# 
  1555  0193                     	;# 
  1556  0194                     	;# 
  1557  0195                     	;# 
  1558  0196                     	;# 
  1559  0197                     	;# 
  1560  0199                     	;# 
  1561  019A                     	;# 
  1562  019B                     	;# 
  1563  019B                     	;# 
  1564  019B                     	;# 
  1565  019B                     	;# 
  1566  019C                     	;# 
  1567  019C                     	;# 
  1568  019D                     	;# 
  1569  019E                     	;# 
  1570  019F                     	;# 
  1571  020D                     	;# 
  1572  0210                     	;# 
  1573  0211                     	;# 
  1574  0211                     	;# 
  1575  0212                     	;# 
  1576  0212                     	;# 
  1577  0213                     	;# 
  1578  0213                     	;# 
  1579  0214                     	;# 
  1580  0214                     	;# 
  1581  0215                     	;# 
  1582  0215                     	;# 
  1583  0215                     	;# 
  1584  0216                     	;# 
  1585  0216                     	;# 
  1586  0217                     	;# 
  1587  0217                     	;# 
  1588  0291                     	;# 
  1589  0291                     	;# 
  1590  0292                     	;# 
  1591  0293                     	;# 
  1592  0298                     	;# 
  1593  0298                     	;# 
  1594  0299                     	;# 
  1595  029A                     	;# 
  1596  0394                     	;# 
  1597  0395                     	;# 
  1598  0396                     	;# 
  1599  0FE4                     	;# 
  1600  0FE5                     	;# 
  1601  0FE6                     	;# 
  1602  0FE7                     	;# 
  1603  0FE8                     	;# 
  1604  0FE9                     	;# 
  1605  0FEA                     	;# 
  1606  0FEB                     	;# 
  1607  0FED                     	;# 
  1608  0FEE                     	;# 
  1609  0FEF                     	;# 
  1610  0000                     	;# 
  1611  0001                     	;# 
  1612  0002                     	;# 
  1613  0003                     	;# 
  1614  0004                     	;# 
  1615  0005                     	;# 
  1616  0006                     	;# 
  1617  0007                     	;# 
  1618  0008                     	;# 
  1619  0009                     	;# 
  1620  000A                     	;# 
  1621  000B                     	;# 
  1622  000C                     	;# 
  1623  000D                     	;# 
  1624  000E                     	;# 
  1625  0010                     	;# 
  1626  0011                     	;# 
  1627  0012                     	;# 
  1628  0015                     	;# 
  1629  0016                     	;# 
  1630  0016                     	;# 
  1631  0017                     	;# 
  1632  0018                     	;# 
  1633  0019                     	;# 
  1634  001A                     	;# 
  1635  001B                     	;# 
  1636  001C                     	;# 
  1637  008C                     	;# 
  1638  008D                     	;# 
  1639  008E                     	;# 
  1640  0090                     	;# 
  1641  0091                     	;# 
  1642  0092                     	;# 
  1643  0095                     	;# 
  1644  0096                     	;# 
  1645  0097                     	;# 
  1646  0099                     	;# 
  1647  009A                     	;# 
  1648  009B                     	;# 
  1649  009B                     	;# 
  1650  009C                     	;# 
  1651  009D                     	;# 
  1652  009E                     	;# 
  1653  010C                     	;# 
  1654  010D                     	;# 
  1655  010E                     	;# 
  1656  0116                     	;# 
  1657  0117                     	;# 
  1658  011D                     	;# 
  1659  018C                     	;# 
  1660  018D                     	;# 
  1661  018E                     	;# 
  1662  0191                     	;# 
  1663  0191                     	;# 
  1664  0192                     	;# 
  1665  0193                     	;# 
  1666  0193                     	;# 
  1667  0194                     	;# 
  1668  0195                     	;# 
  1669  0196                     	;# 
  1670  0197                     	;# 
  1671  0199                     	;# 
  1672  019A                     	;# 
  1673  019B                     	;# 
  1674  019B                     	;# 
  1675  019B                     	;# 
  1676  019B                     	;# 
  1677  019C                     	;# 
  1678  019C                     	;# 
  1679  019D                     	;# 
  1680  019E                     	;# 
  1681  019F                     	;# 
  1682  020D                     	;# 
  1683  0210                     	;# 
  1684  0211                     	;# 
  1685  0211                     	;# 
  1686  0212                     	;# 
  1687  0212                     	;# 
  1688  0213                     	;# 
  1689  0213                     	;# 
  1690  0214                     	;# 
  1691  0214                     	;# 
  1692  0215                     	;# 
  1693  0215                     	;# 
  1694  0215                     	;# 
  1695  0216                     	;# 
  1696  0216                     	;# 
  1697  0217                     	;# 
  1698  0217                     	;# 
  1699  0291                     	;# 
  1700  0291                     	;# 
  1701  0292                     	;# 
  1702  0293                     	;# 
  1703  0298                     	;# 
  1704  0298                     	;# 
  1705  0299                     	;# 
  1706  029A                     	;# 
  1707  0394                     	;# 
  1708  0395                     	;# 
  1709  0396                     	;# 
  1710  0FE4                     	;# 
  1711  0FE5                     	;# 
  1712  0FE6                     	;# 
  1713  0FE7                     	;# 
  1714  0FE8                     	;# 
  1715  0FE9                     	;# 
  1716  0FEA                     	;# 
  1717  0FEB                     	;# 
  1718  0FED                     	;# 
  1719  0FEE                     	;# 
  1720  0FEF                     	;# 
  1721  0000                     	;# 
  1722  0001                     	;# 
  1723  0002                     	;# 
  1724  0003                     	;# 
  1725  0004                     	;# 
  1726  0005                     	;# 
  1727  0006                     	;# 
  1728  0007                     	;# 
  1729  0008                     	;# 
  1730  0009                     	;# 
  1731  000A                     	;# 
  1732  000B                     	;# 
  1733  000C                     	;# 
  1734  000D                     	;# 
  1735  000E                     	;# 
  1736  0010                     	;# 
  1737  0011                     	;# 
  1738  0012                     	;# 
  1739  0015                     	;# 
  1740  0016                     	;# 
  1741  0016                     	;# 
  1742  0017                     	;# 
  1743  0018                     	;# 
  1744  0019                     	;# 
  1745  001A                     	;# 
  1746  001B                     	;# 
  1747  001C                     	;# 
  1748  008C                     	;# 
  1749  008D                     	;# 
  1750  008E                     	;# 
  1751  0090                     	;# 
  1752  0091                     	;# 
  1753  0092                     	;# 
  1754  0095                     	;# 
  1755  0096                     	;# 
  1756  0097                     	;# 
  1757  0099                     	;# 
  1758  009A                     	;# 
  1759  009B                     	;# 
  1760  009B                     	;# 
  1761  009C                     	;# 
  1762  009D                     	;# 
  1763  009E                     	;# 
  1764  010C                     	;# 
  1765  010D                     	;# 
  1766  010E                     	;# 
  1767  0116                     	;# 
  1768  0117                     	;# 
  1769  011D                     	;# 
  1770  018C                     	;# 
  1771  018D                     	;# 
  1772  018E                     	;# 
  1773  0191                     	;# 
  1774  0191                     	;# 
  1775  0192                     	;# 
  1776  0193                     	;# 
  1777  0193                     	;# 
  1778  0194                     	;# 
  1779  0195                     	;# 
  1780  0196                     	;# 
  1781  0197                     	;# 
  1782  0199                     	;# 
  1783  019A                     	;# 
  1784  019B                     	;# 
  1785  019B                     	;# 
  1786  019B                     	;# 
  1787  019B                     	;# 
  1788  019C                     	;# 
  1789  019C                     	;# 
  1790  019D                     	;# 
  1791  019E                     	;# 
  1792  019F                     	;# 
  1793  020D                     	;# 
  1794  0210                     	;# 
  1795  0211                     	;# 
  1796  0211                     	;# 
  1797  0212                     	;# 
  1798  0212                     	;# 
  1799  0213                     	;# 
  1800  0213                     	;# 
  1801  0214                     	;# 
  1802  0214                     	;# 
  1803  0215                     	;# 
  1804  0215                     	;# 
  1805  0215                     	;# 
  1806  0216                     	;# 
  1807  0216                     	;# 
  1808  0217                     	;# 
  1809  0217                     	;# 
  1810  0291                     	;# 
  1811  0291                     	;# 
  1812  0292                     	;# 
  1813  0293                     	;# 
  1814  0298                     	;# 
  1815  0298                     	;# 
  1816  0299                     	;# 
  1817  029A                     	;# 
  1818  0394                     	;# 
  1819  0395                     	;# 
  1820  0396                     	;# 
  1821  0FE4                     	;# 
  1822  0FE5                     	;# 
  1823  0FE6                     	;# 
  1824  0FE7                     	;# 
  1825  0FE8                     	;# 
  1826  0FE9                     	;# 
  1827  0FEA                     	;# 
  1828  0FEB                     	;# 
  1829  0FED                     	;# 
  1830  0FEE                     	;# 
  1831  0FEF                     	;# 
  1832  0000                     	;# 
  1833  0001                     	;# 
  1834  0002                     	;# 
  1835  0003                     	;# 
  1836  0004                     	;# 
  1837  0005                     	;# 
  1838  0006                     	;# 
  1839  0007                     	;# 
  1840  0008                     	;# 
  1841  0009                     	;# 
  1842  000A                     	;# 
  1843  000B                     	;# 
  1844  000C                     	;# 
  1845  000D                     	;# 
  1846  000E                     	;# 
  1847  0010                     	;# 
  1848  0011                     	;# 
  1849  0012                     	;# 
  1850  0015                     	;# 
  1851  0016                     	;# 
  1852  0016                     	;# 
  1853  0017                     	;# 
  1854  0018                     	;# 
  1855  0019                     	;# 
  1856  001A                     	;# 
  1857  001B                     	;# 
  1858  001C                     	;# 
  1859  008C                     	;# 
  1860  008D                     	;# 
  1861  008E                     	;# 
  1862  0090                     	;# 
  1863  0091                     	;# 
  1864  0092                     	;# 
  1865  0095                     	;# 
  1866  0096                     	;# 
  1867  0097                     	;# 
  1868  0099                     	;# 
  1869  009A                     	;# 
  1870  009B                     	;# 
  1871  009B                     	;# 
  1872  009C                     	;# 
  1873  009D                     	;# 
  1874  009E                     	;# 
  1875  010C                     	;# 
  1876  010D                     	;# 
  1877  010E                     	;# 
  1878  0116                     	;# 
  1879  0117                     	;# 
  1880  011D                     	;# 
  1881  018C                     	;# 
  1882  018D                     	;# 
  1883  018E                     	;# 
  1884  0191                     	;# 
  1885  0191                     	;# 
  1886  0192                     	;# 
  1887  0193                     	;# 
  1888  0193                     	;# 
  1889  0194                     	;# 
  1890  0195                     	;# 
  1891  0196                     	;# 
  1892  0197                     	;# 
  1893  0199                     	;# 
  1894  019A                     	;# 
  1895  019B                     	;# 
  1896  019B                     	;# 
  1897  019B                     	;# 
  1898  019B                     	;# 
  1899  019C                     	;# 
  1900  019C                     	;# 
  1901  019D                     	;# 
  1902  019E                     	;# 
  1903  019F                     	;# 
  1904  020D                     	;# 
  1905  0210                     	;# 
  1906  0211                     	;# 
  1907  0211                     	;# 
  1908  0212                     	;# 
  1909  0212                     	;# 
  1910  0213                     	;# 
  1911  0213                     	;# 
  1912  0214                     	;# 
  1913  0214                     	;# 
  1914  0215                     	;# 
  1915  0215                     	;# 
  1916  0215                     	;# 
  1917  0216                     	;# 
  1918  0216                     	;# 
  1919  0217                     	;# 
  1920  0217                     	;# 
  1921  0291                     	;# 
  1922  0291                     	;# 
  1923  0292                     	;# 
  1924  0293                     	;# 
  1925  0298                     	;# 
  1926  0298                     	;# 
  1927  0299                     	;# 
  1928  029A                     	;# 
  1929  0394                     	;# 
  1930  0395                     	;# 
  1931  0396                     	;# 
  1932  0FE4                     	;# 
  1933  0FE5                     	;# 
  1934  0FE6                     	;# 
  1935  0FE7                     	;# 
  1936  0FE8                     	;# 
  1937  0FE9                     	;# 
  1938  0FEA                     	;# 
  1939  0FEB                     	;# 
  1940  0FED                     	;# 
  1941  0FEE                     	;# 
  1942  0FEF                     	;# 
  1943  0000                     	;# 
  1944  0001                     	;# 
  1945  0002                     	;# 
  1946  0003                     	;# 
  1947  0004                     	;# 
  1948  0005                     	;# 
  1949  0006                     	;# 
  1950  0007                     	;# 
  1951  0008                     	;# 
  1952  0009                     	;# 
  1953  000A                     	;# 
  1954  000B                     	;# 
  1955  000C                     	;# 
  1956  000D                     	;# 
  1957  000E                     	;# 
  1958  0010                     	;# 
  1959  0011                     	;# 
  1960  0012                     	;# 
  1961  0015                     	;# 
  1962  0016                     	;# 
  1963  0016                     	;# 
  1964  0017                     	;# 
  1965  0018                     	;# 
  1966  0019                     	;# 
  1967  001A                     	;# 
  1968  001B                     	;# 
  1969  001C                     	;# 
  1970  008C                     	;# 
  1971  008D                     	;# 
  1972  008E                     	;# 
  1973  0090                     	;# 
  1974  0091                     	;# 
  1975  0092                     	;# 
  1976  0095                     	;# 
  1977  0096                     	;# 
  1978  0097                     	;# 
  1979  0099                     	;# 
  1980  009A                     	;# 
  1981  009B                     	;# 
  1982  009B                     	;# 
  1983  009C                     	;# 
  1984  009D                     	;# 
  1985  009E                     	;# 
  1986  010C                     	;# 
  1987  010D                     	;# 
  1988  010E                     	;# 
  1989  0116                     	;# 
  1990  0117                     	;# 
  1991  011D                     	;# 
  1992  018C                     	;# 
  1993  018D                     	;# 
  1994  018E                     	;# 
  1995  0191                     	;# 
  1996  0191                     	;# 
  1997  0192                     	;# 
  1998  0193                     	;# 
  1999  0193                     	;# 
  2000  0194                     	;# 
  2001  0195                     	;# 
  2002  0196                     	;# 
  2003  0197                     	;# 
  2004  0199                     	;# 
  2005  019A                     	;# 
  2006  019B                     	;# 
  2007  019B                     	;# 
  2008  019B                     	;# 
  2009  019B                     	;# 
  2010  019C                     	;# 
  2011  019C                     	;# 
  2012  019D                     	;# 
  2013  019E                     	;# 
  2014  019F                     	;# 
  2015  020D                     	;# 
  2016  0210                     	;# 
  2017  0211                     	;# 
  2018  0211                     	;# 
  2019  0212                     	;# 
  2020  0212                     	;# 
  2021  0213                     	;# 
  2022  0213                     	;# 
  2023  0214                     	;# 
  2024  0214                     	;# 
  2025  0215                     	;# 
  2026  0215                     	;# 
  2027  0215                     	;# 
  2028  0216                     	;# 
  2029  0216                     	;# 
  2030  0217                     	;# 
  2031  0217                     	;# 
  2032  0291                     	;# 
  2033  0291                     	;# 
  2034  0292                     	;# 
  2035  0293                     	;# 
  2036  0298                     	;# 
  2037  0298                     	;# 
  2038  0299                     	;# 
  2039  029A                     	;# 
  2040  0394                     	;# 
  2041  0395                     	;# 
  2042  0396                     	;# 
  2043  0FE4                     	;# 
  2044  0FE5                     	;# 
  2045  0FE6                     	;# 
  2046  0FE7                     	;# 
  2047  0FE8                     	;# 
  2048  0FE9                     	;# 
  2049  0FEA                     	;# 
  2050  0FEB                     	;# 
  2051  0FED                     	;# 
  2052  0FEE                     	;# 
  2053  0FEF                     	;# 
  2054  0000                     	;# 
  2055  0001                     	;# 
  2056  0002                     	;# 
  2057  0003                     	;# 
  2058  0004                     	;# 
  2059  0005                     	;# 
  2060  0006                     	;# 
  2061  0007                     	;# 
  2062  0008                     	;# 
  2063  0009                     	;# 
  2064  000A                     	;# 
  2065  000B                     	;# 
  2066  000C                     	;# 
  2067  000D                     	;# 
  2068  000E                     	;# 
  2069  0010                     	;# 
  2070  0011                     	;# 
  2071  0012                     	;# 
  2072  0015                     	;# 
  2073  0016                     	;# 
  2074  0016                     	;# 
  2075  0017                     	;# 
  2076  0018                     	;# 
  2077  0019                     	;# 
  2078  001A                     	;# 
  2079  001B                     	;# 
  2080  001C                     	;# 
  2081  008C                     	;# 
  2082  008D                     	;# 
  2083  008E                     	;# 
  2084  0090                     	;# 
  2085  0091                     	;# 
  2086  0092                     	;# 
  2087  0095                     	;# 
  2088  0096                     	;# 
  2089  0097                     	;# 
  2090  0099                     	;# 
  2091  009A                     	;# 
  2092  009B                     	;# 
  2093  009B                     	;# 
  2094  009C                     	;# 
  2095  009D                     	;# 
  2096  009E                     	;# 
  2097  010C                     	;# 
  2098  010D                     	;# 
  2099  010E                     	;# 
  2100  0116                     	;# 
  2101  0117                     	;# 
  2102  011D                     	;# 
  2103  018C                     	;# 
  2104  018D                     	;# 
  2105  018E                     	;# 
  2106  0191                     	;# 
  2107  0191                     	;# 
  2108  0192                     	;# 
  2109  0193                     	;# 
  2110  0193                     	;# 
  2111  0194                     	;# 
  2112  0195                     	;# 
  2113  0196                     	;# 
  2114  0197                     	;# 
  2115  0199                     	;# 
  2116  019A                     	;# 
  2117  019B                     	;# 
  2118  019B                     	;# 
  2119  019B                     	;# 
  2120  019B                     	;# 
  2121  019C                     	;# 
  2122  019C                     	;# 
  2123  019D                     	;# 
  2124  019E                     	;# 
  2125  019F                     	;# 
  2126  020D                     	;# 
  2127  0210                     	;# 
  2128  0211                     	;# 
  2129  0211                     	;# 
  2130  0212                     	;# 
  2131  0212                     	;# 
  2132  0213                     	;# 
  2133  0213                     	;# 
  2134  0214                     	;# 
  2135  0214                     	;# 
  2136  0215                     	;# 
  2137  0215                     	;# 
  2138  0215                     	;# 
  2139  0216                     	;# 
  2140  0216                     	;# 
  2141  0217                     	;# 
  2142  0217                     	;# 
  2143  0291                     	;# 
  2144  0291                     	;# 
  2145  0292                     	;# 
  2146  0293                     	;# 
  2147  0298                     	;# 
  2148  0298                     	;# 
  2149  0299                     	;# 
  2150  029A                     	;# 
  2151  0394                     	;# 
  2152  0395                     	;# 
  2153  0396                     	;# 
  2154  0FE4                     	;# 
  2155  0FE5                     	;# 
  2156  0FE6                     	;# 
  2157  0FE7                     	;# 
  2158  0FE8                     	;# 
  2159  0FE9                     	;# 
  2160  0FEA                     	;# 
  2161  0FEB                     	;# 
  2162  0FED                     	;# 
  2163  0FEE                     	;# 
  2164  0FEF                     	;# 
  2165                           
  2166                           	psect	idataBANK4
  2167  1DFB                     __pidataBANK4:	
  2168                           
  2169                           ;initializer for __product
  2170  1DFB  3463               	retlw	99
  2171  1DFC  3402               	retlw	2
  2172  1DFD  3400               	retlw	0
  2173  1DFE  3400               	retlw	0
  2174  1DFF  3400               	retlw	0
  2175  1E00  3400               	retlw	0
  2176  1E01  3400               	retlw	0
  2177  1E02  3400               	retlw	0
  2178  1E03  3400               	retlw	0
  2179  1E04  3400               	retlw	0
  2180  1E05  3400               	retlw	0
  2181  1E06  3400               	retlw	0
  2182  1E07  34FF               	retlw	255
  2183  1E08  34FF               	retlw	255
  2184  1E09  34FF               	retlw	255
  2185  1E0A  3400               	retlw	0
  2186  1E0B  3400               	retlw	0
  2187  1E0C  3400               	retlw	0
  2188  1E0D  3400               	retlw	0
  2189  1E0E  3400               	retlw	0
  2190  1E0F  3400               	retlw	0
  2191  1E10  3400               	retlw	0
  2192  1E11  3400               	retlw	0
  2193  1E12  3400               	retlw	0
  2194  1E13  3400               	retlw	0
  2195  1E14  3400               	retlw	0
  2196  1E15  3400               	retlw	0
  2197  1E16  3400               	retlw	0
  2198  1E17  3400               	retlw	0
  2199  1E18  3400               	retlw	0
  2200  1E19  3400               	retlw	0
  2201  1E1A  3400               	retlw	0
  2202                           
  2203                           	psect	stringtext
  2204  1800                     __pstringtext:	
  2205  1800                     _CC2500_registers_address:	
  2206  1800  3403               	retlw	3
  2207  1801  3416               	retlw	22
  2208  1802  3417               	retlw	23
  2209  1803  341E               	retlw	30
  2210  1804  341F               	retlw	31
  2211  1805  3420               	retlw	32
  2212  1806  342A               	retlw	42
  2213  1807  342B               	retlw	43
  2214  1808  340B               	retlw	11
  2215  1809  340C               	retlw	12
  2216  180A  340D               	retlw	13
  2217  180B  340E               	retlw	14
  2218  180C  340F               	retlw	15
  2219  180D  3410               	retlw	16
  2220  180E  3411               	retlw	17
  2221  180F  3412               	retlw	18
  2222  1810  3413               	retlw	19
  2223  1811  3414               	retlw	20
  2224  1812  340A               	retlw	10
  2225  1813  3415               	retlw	21
  2226  1814  3421               	retlw	33
  2227  1815  3422               	retlw	34
  2228  1816  3418               	retlw	24
  2229  1817  3419               	retlw	25
  2230  1818  341A               	retlw	26
  2231  1819  341B               	retlw	27
  2232  181A  341C               	retlw	28
  2233  181B  341D               	retlw	29
  2234  181C  3423               	retlw	35
  2235  181D  3424               	retlw	36
  2236  181E  3425               	retlw	37
  2237  181F  3426               	retlw	38
  2238  1820  3429               	retlw	41
  2239  1821  342C               	retlw	44
  2240  1822  342D               	retlw	45
  2241  1823  342E               	retlw	46
  2242  1824  3400               	retlw	0
  2243  1825  3401               	retlw	1
  2244  1826  3402               	retlw	2
  2245  1827  3407               	retlw	7
  2246  1828  3408               	retlw	8
  2247  1829  3409               	retlw	9
  2248  182A  3406               	retlw	6
  2249  182B  3404               	retlw	4
  2250  182C  3405               	retlw	5
  2251  182D  3427               	retlw	39
  2252  182E  3428               	retlw	40
  2253  182F                     __end_of_CC2500_registers_address:	
  2254  182F                     _CC2500_rfSettings:	
  2255  182F  3407               	retlw	7
  2256  1830  3407               	retlw	7
  2257  1831  3430               	retlw	48
  2258  1832  3487               	retlw	135
  2259  1833  346B               	retlw	107
  2260  1834  34F8               	retlw	248
  2261  1835  347F               	retlw	127
  2262  1836  343F               	retlw	63
  2263  1837  3409               	retlw	9
  2264  1838  3400               	retlw	0
  2265  1839  345C               	retlw	92
  2266  183A  34A7               	retlw	167
  2267  183B  3462               	retlw	98
  2268  183C  3486               	retlw	134
  2269  183D  3483               	retlw	131
  2270  183E  3403               	retlw	3
  2271  183F  3422               	retlw	34
  2272  1840  34F8               	retlw	248
  2273  1841  3400               	retlw	0
  2274  1842  3444               	retlw	68
  2275  1843  34B6               	retlw	182
  2276  1844  3410               	retlw	16
  2277  1845  3418               	retlw	24
  2278  1846  341D               	retlw	29
  2279  1847  341C               	retlw	28
  2280  1848  34C7               	retlw	199
  2281  1849  3400               	retlw	0
  2282  184A  34B2               	retlw	178
  2283  184B  34EA               	retlw	234
  2284  184C  340A               	retlw	10
  2285  184D  3400               	retlw	0
  2286  184E  3411               	retlw	17
  2287  184F  3459               	retlw	89
  2288  1850  3488               	retlw	136
  2289  1851  3431               	retlw	49
  2290  1852  340B               	retlw	11
  2291  1853  342F               	retlw	47
  2292  1854  342E               	retlw	46
  2293  1855  3406               	retlw	6
  2294  1856  3404               	retlw	4
  2295  1857  3405               	retlw	5
  2296  1858  3400               	retlw	0
  2297  1859  3430               	retlw	48
  2298  185A  34D3               	retlw	211
  2299  185B  3491               	retlw	145
  2300  185C  3441               	retlw	65
  2301  185D  3400               	retlw	0
  2302  185E                     __end_of_CC2500_rfSettings:	
  2303  185E                     _CC2500_patable_vaule:	
  2304  185E  34FE               	retlw	254
  2305  185F  34FE               	retlw	254
  2306  1860  34FE               	retlw	254
  2307  1861  34FE               	retlw	254
  2308  1862  34FE               	retlw	254
  2309  1863  34FE               	retlw	254
  2310  1864  34FE               	retlw	254
  2311  1865  34FE               	retlw	254
  2312  1866                     __end_of_CC2500_patable_vaule:	
  2313                           
  2314                           	psect	nvBANK1
  2315  00ED                     __pnvBANK1:	
  2316  00ED                     _product:	
  2317  00ED                     	ds	1
  2318  000C                     _PORTA	set	12
  2319  000D                     _PORTB	set	13
  2320  000E                     _PORTC	set	14
  2321  0018                     _T1CON	set	24
  2322  0017                     _TMR1H	set	23
  2323  0016                     _TMR1L	set	22
  2324  005F                     _GIE	set	95
  2325  005B                     _IOCIE	set	91
  2326  0058                     _IOCIF	set	88
  2327  005E                     _PEIE	set	94
  2328  0060                     _RA0	set	96
  2329  0063                     _RA3	set	99
  2330  0064                     _RA4	set	100
  2331  0066                     _RA6	set	102
  2332  0067                     _RA7	set	103
  2333  0068                     _RB0	set	104
  2334  0069                     _RB1	set	105
  2335  006B                     _RB3	set	107
  2336  006C                     _RB4	set	108
  2337  006D                     _RB5	set	109
  2338  0070                     _RC0	set	112
  2339  0071                     _RC1	set	113
  2340  0072                     _RC2	set	114
  2341  0074                     _RC4	set	116
  2342  0075                     _RC5	set	117
  2343  0077                     _RC7	set	119
  2344  0088                     _TMR1IF	set	136
  2345  009D                     _ADCON0	set	157
  2346  009E                     _ADCON1	set	158
  2347  009C                     _ADRESH	set	156
  2348  009B                     _ADRESL	set	155
  2349  0099                     _OSCCON	set	153
  2350  008C                     _TRISA	set	140
  2351  008D                     _TRISB	set	141
  2352  008E                     _TRISC	set	142
  2353  0097                     _WDTCON	set	151
  2354  04E9                     _GO_nDONE	set	1257
  2355  0488                     _TMR1IE	set	1160
  2356  0117                     _FVRCON	set	279
  2357  010C                     _LATA	set	268
  2358  010D                     _LATB	set	269
  2359  010E                     _LATC	set	270
  2360  018C                     _ANSELA	set	396
  2361  018D                     _ANSELB	set	397
  2362  018E                     _ANSELC	set	398
  2363  0192                     _PMADRH	set	402
  2364  0191                     _PMADRL	set	401
  2365  0196                     _PMCON2	set	406
  2366  0194                     _PMDATH	set	404
  2367  0193                     _PMDATL	set	403
  2368  0CAE                     _CFGS	set	3246
  2369  0CAC                     _FREE	set	3244
  2370  0CAD                     _LWLO	set	3245
  2371  0CA8                     _RD	set	3240
  2372  0CA9                     _WR	set	3241
  2373  0CAA                     _WREN	set	3242
  2374  020D                     _WPUB	set	525
  2375  0396                     _IOCBF	set	918
  2376  0395                     _IOCBN	set	917
  2377  0394                     _IOCBP	set	916
  2378  1CB2                     _IOCBF2	set	7346
  2379                           
  2380                           ; #config settings
  2381  0000                     
  2382                           	psect	cinit
  2383  0022                     start_initialization:	
  2384  0022                     __initialization:	
  2385                           
  2386                           ; Clear objects allocated to BITBANK0
  2387  0022  01EE               	clrf	(__pbitbssBANK0/(0+8))& (0+127)
  2388                           
  2389                           ; Clear objects allocated to BANK1
  2390  0023  30A0               	movlw	low __pbssBANK1
  2391  0024  0084               	movwf	4
  2392  0025  3000               	movlw	high __pbssBANK1
  2393  0026  0085               	movwf	5
  2394  0027  3045               	movlw	69
  2395  0028  3199  218A  3180   	fcall	clear_ram0
  2396                           
  2397                           ; Clear objects allocated to BANK2
  2398  002B  3020               	movlw	low __pbssBANK2
  2399  002C  0084               	movwf	4
  2400  002D  3001               	movlw	high __pbssBANK2
  2401  002E  0085               	movwf	5
  2402  002F  3050               	movlw	80
  2403  0030  3199  218A  3180   	fcall	clear_ram0
  2404                           
  2405                           ; Clear objects allocated to BANK3
  2406  0033  30A0               	movlw	low __pbssBANK3
  2407  0034  0084               	movwf	4
  2408  0035  3001               	movlw	high __pbssBANK3
  2409  0036  0085               	movwf	5
  2410  0037  304E               	movlw	78
  2411  0038  3199  218A  3180   	fcall	clear_ram0
  2412                           
  2413                           ; Clear objects allocated to BANK4
  2414  003B  3020               	movlw	low __pbssBANK4
  2415  003C  0084               	movwf	4
  2416  003D  3002               	movlw	high __pbssBANK4
  2417  003E  0085               	movwf	5
  2418  003F  3025               	movlw	37
  2419  0040  3199  218A  3180   	fcall	clear_ram0
  2420                           
  2421                           ; Initialize objects allocated to BANK4
  2422  0043  30FB               	movlw	low __pidataBANK4
  2423  0044  0084               	movwf	4
  2424  0045  309D               	movlw	(high __pidataBANK4)| (0+128)
  2425  0046  0085               	movwf	5
  2426  0047  3045               	movlw	low __pdataBANK4
  2427  0048  0086               	movwf	6
  2428  0049  3002               	movlw	high __pdataBANK4
  2429  004A  0087               	movwf	7
  2430  004B  3020               	movlw	32
  2431  004C  3199  2184         	fcall	init_ram
  2432  004E                     end_of_initialization:	
  2433                           ;End of C runtime variable initialization code
  2434                           
  2435  004E                     __end_of__initialization:	
  2436  004E  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2437  004F  0020               	movlb	0
  2438  0050  3195  2D51         	ljmp	_main	;jump to C main() function
  2439                           
  2440                           	psect	bitbssBANK0
  2441  0370                     __pbitbssBANK0:	
  2442  0370                     _Receive_OK:	
  2443  0370                     	ds	1
  2444  0371                     _Transceive_OK:	
  2445  0371                     	ds	1
  2446                           
  2447                           	psect	bssBANK1
  2448  00A0                     __pbssBANK1:	
  2449  00A0                     _RF1:	
  2450  00A0                     	ds	14
  2451  00AE                     _DimmerIntr1:	
  2452  00AE                     	ds	12
  2453  00BA                     _DimmerIntr2:	
  2454  00BA                     	ds	12
  2455  00C6                     _Timer1:	
  2456  00C6                     	ds	3
  2457  00C9                     _WDT:	
  2458  00C9                     	ds	2
  2459  00CB                     _CRC:	
  2460  00CB                     	ds	1
  2461  00CC                     _Cmd:	
  2462  00CC                     	ds	1
  2463  00CD                     _DelayOff:	
  2464  00CD                     	ds	1
  2465  00CE                     _DimmerIntr:	
  2466  00CE                     	ds	1
  2467  00CF                     _DimmerLights:	
  2468  00CF                     	ds	1
  2469  00D0                     _LED:	
  2470  00D0                     	ds	1
  2471  00D1                     _Light:	
  2472  00D1                     	ds	1
  2473  00D2                     _RSSI:	
  2474  00D2                     	ds	1
  2475  00D3                     _Rx_Length:	
  2476  00D3                     	ds	1
  2477  00D4                     _SPI0Buffer:	
  2478  00D4                     	ds	1
  2479  00D5                     _Sw:	
  2480  00D5                     	ds	1
  2481  00D6                     _SwDetect:	
  2482  00D6                     	ds	1
  2483  00D7                     _Tx_Length:	
  2484  00D7                     	ds	1
  2485  00D8                     _r_address:	
  2486  00D8                     	ds	1
  2487  00D9                     _r_data:	
  2488  00D9                     	ds	1
  2489  00DA                     _s_data:	
  2490  00DA                     	ds	1
  2491  00DB                     _Temp:	
  2492  00DB                     	ds	10
  2493                           
  2494                           	psect	bssBANK2
  2495  0120                     __pbssBANK2:	
  2496  0120                     _myMain:	
  2497  0120                     	ds	13
  2498  012D                     _Buz1:	
  2499  012D                     	ds	12
  2500  0139                     _Dimmer:	
  2501  0139                     	ds	5
  2502  013E                     _RF_Count:	
  2503  013E                     	ds	2
  2504  0140                     _Load:	
  2505  0140                     	ds	40
  2506  0168                     _DimmerLights1:	
  2507  0168                     	ds	8
  2508                           
  2509                           	psect	bssBANK3
  2510  01A0                     __pbssBANK3:	
  2511  01A0                     _RF_Data:	
  2512  01A0                     	ds	30
  2513  01BE                     _Sw1:	
  2514  01BE                     	ds	9
  2515  01C7                     _Sw2:	
  2516  01C7                     	ds	9
  2517  01D0                     _DimmerLights2:	
  2518  01D0                     	ds	8
  2519  01D8                     _DlySw1:	
  2520  01D8                     	ds	5
  2521  01DD                     _DlySw2:	
  2522  01DD                     	ds	5
  2523  01E2                     _VarErrLED:	
  2524  01E2                     	ds	4
  2525  01E6                     _VarLED1:	
  2526  01E6                     	ds	4
  2527  01EA                     _VarLED2:	
  2528  01EA                     	ds	4
  2529                           
  2530                           	psect	bssBANK4
  2531  0220                     __pbssBANK4:	
  2532  0220                     _Memory:	
  2533  0220                     	ds	37
  2534                           
  2535                           	psect	dataBANK4
  2536  0245                     __pdataBANK4:	
  2537  0245                     __product:	
  2538  0245                     	ds	32
  2539                           
  2540                           	psect	clrtext
  2541  198A                     clear_ram0:	
  2542                           ;	Called with FSR0 containing the base address, and
  2543                           ;	WREG with the size to clear
  2544                           
  2545  198A  0064               	clrwdt	;clear the watchdog before getting into this loop
  2546  198B                     clrloop0:	
  2547  198B  0180               	clrf	0	;clear RAM location pointed to by FSR
  2548  198C  3101               	addfsr 0,1
  2549  198D  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2550  198E  298B               	goto	clrloop0	;have we reached the end yet?
  2551  198F  3400               	retlw	0	;all done for this memory range, return
  2552                           
  2553                           	psect	inittext
  2554  1984                     init_ram:	
  2555  1984  00FE               	movwf	126
  2556  1985                     initloop:	
  2557  1985  0012               	moviw fsr0++
  2558  1986  001E               	movwi fsr1++
  2559  1987  0BFE               	decfsz	126,f
  2560  1988  2985               	goto	initloop
  2561  1989  3400               	retlw	0
  2562                           
  2563                           	psect	cstackBANK4
  2564  0265                     __pcstackBANK4:	
  2565  0265                     ?_main:	
  2566  0265                     main@argc:	
  2567                           ; 2 bytes @ 0x0
  2568                           
  2569                           
  2570                           ; 2 bytes @ 0x0
  2571  0265                     	ds	2
  2572  0267                     main@argv:	
  2573                           
  2574                           ; 2 bytes @ 0x2
  2575  0267                     	ds	2
  2576                           
  2577                           	psect	cstackBANK1
  2578  00E5                     __pcstackBANK1:	
  2579  00E5                     ?_setDimmerLights_OnOff:	
  2580  00E5                     ??_setRFSW_Control:	
  2581                           ; 0 bytes @ 0x0
  2582                           
  2583  00E5                     setDimmerLights_OnOff@command:	
  2584                           ; 0 bytes @ 0x0
  2585                           
  2586  00E5                     setTemp_Main@error:	
  2587                           ; 1 bytes @ 0x0
  2588                           
  2589                           
  2590                           ; 1 bytes @ 0x0
  2591  00E5                     	ds	1
  2592  00E6                     ??_setDimmerLights_OnOff:	
  2593  00E6                     setTemp_Main@TempGO:	
  2594                           ; 0 bytes @ 0x1
  2595                           
  2596  00E6                     setRFSW_Control@status:	
  2597                           ; 1 bytes @ 0x1
  2598                           
  2599                           
  2600                           ; 1 bytes @ 0x1
  2601  00E6                     	ds	1
  2602  00E7                     setRFSW_Control@sw:	
  2603  00E7                     setTemp_Main@SafeValue:	
  2604                           ; 1 bytes @ 0x2
  2605                           
  2606                           
  2607                           ; 2 bytes @ 0x2
  2608  00E7                     	ds	1
  2609  00E8                     ??_getRxData:	
  2610  00E8                     setDimmerLights_OnOff@lights:	
  2611                           ; 0 bytes @ 0x3
  2612                           
  2613                           
  2614                           ; 1 bytes @ 0x3
  2615  00E8                     	ds	1
  2616  00E9                     setDimmerLights_Main@lights:	
  2617  00E9                     getRxData@error:	
  2618                           ; 1 bytes @ 0x4
  2619                           
  2620  00E9                     setTemp_Main@DangerValue:	
  2621                           ; 1 bytes @ 0x4
  2622                           
  2623                           
  2624                           ; 2 bytes @ 0x4
  2625  00E9                     	ds	1
  2626  00EA                     ??_setRF_Main:	
  2627                           
  2628                           ; 0 bytes @ 0x5
  2629  00EA                     	ds	1
  2630  00EB                     setRF_Main@error:	
  2631  00EB                     setTemp_Main@AD:	
  2632                           ; 1 bytes @ 0x6
  2633                           
  2634                           
  2635                           ; 2 bytes @ 0x6
  2636  00EB                     	ds	2
  2637                           
  2638                           	psect	cstackCOMMON
  2639  0070                     __pcstackCOMMON:	
  2640  0070                     ?_CC2500_WriteCommand:	
  2641  0070                     ?_RF_Timeout_Counter:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_setRF_TimeoutCleared:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_CC2500_WriteByte:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_CC2500_ReadStatus:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_CC2500_ReadByte:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_CC2500_PowerRST:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_CC2500_InitSetREG:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_CC2500_InitPATable:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_CC2500_ClearTXFIFO:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_CC2500_ClearRXFIFO:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_CC2500_FrequencyCabr:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_CC2500_SIDLEMode:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_DlyOff_Initialization:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_DlyOff_Main:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_setDimmerLights_SwOn:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_setDimmerLights_SwOff:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_setDimmerLights_Initialization:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_setDimmerLights_Main:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_setDimmerLights_Line:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_setTxData:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_setRF_TransceiveGO:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_setLED_Initialization:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_setLED_Main:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_Fosc_Set:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_IO_Set:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_TMR1_Set:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ?_ADC_Set:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_IOC_Set:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ?_WDT_Set:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ?_TMR1_ISR:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_IOC_ISR:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_Timeout_Counter:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_set_TimeoutCleared:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_Flash_Memory_Write:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?_Flash_Memory_Modify:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ?_WDT_Clearing:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0070                     ?_setLoad_AH_AL_Restore:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0070                     ?_setTemp_Initialization:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0070                     ?_setTemp_Main:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0070                     ?_setRF_Initialization:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0070                     ?_setRF_Main:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0070                     ?_RF_RxDisable:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0070                     ?_getRxData:	
  2768                           ; 0 bytes @ 0x0
  2769                           
  2770  0070                     ?_setLog_Code:	
  2771                           ; 0 bytes @ 0x0
  2772                           
  2773  0070                     ?_setControl_Lights_Table:	
  2774                           ; 0 bytes @ 0x0
  2775                           
  2776  0070                     ?_setRFSW_Control:	
  2777                           ; 0 bytes @ 0x0
  2778                           
  2779  0070                     ?_setRFSW_AdjControl:	
  2780                           ; 0 bytes @ 0x0
  2781                           
  2782  0070                     ?_setSw_Initialization:	
  2783                           ; 0 bytes @ 0x0
  2784                           
  2785  0070                     ?_setSw_Main:	
  2786                           ; 0 bytes @ 0x0
  2787                           
  2788  0070                     ?_myMain_Initialization:	
  2789                           ; 0 bytes @ 0x0
  2790                           
  2791  0070                     ?_my_MainTimer:	
  2792                           ; 0 bytes @ 0x0
  2793                           
  2794  0070                     ?_Exception_Main:	
  2795                           ; 0 bytes @ 0x0
  2796                           
  2797  0070                     ?_Buzzer_Initialization:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0070                     ?_Buzzer_Main:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0070                     ?_CC2500_TxData:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0070                     ?_CC2500_RxData:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0070                     ?_CC2500_PowerOnInitial:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0070                     ?_DelayOffPointSelect:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0070                     ?_DelayOff_Initialization:	
  2816                           ; 0 bytes @ 0x0
  2817                           
  2818  0070                     ?_DelayOff_Main:	
  2819                           ; 0 bytes @ 0x0
  2820                           
  2821  0070                     ?_DimmerIntr_Initialization:	
  2822                           ; 0 bytes @ 0x0
  2823                           
  2824  0070                     ?_DimmerLights_SelectPointer:	
  2825                           ; 0 bytes @ 0x0
  2826                           
  2827  0070                     ?_DimmerLights_Initialization:	
  2828                           ; 0 bytes @ 0x0
  2829                           
  2830  0070                     ?_setDimmerLights_DimmingOn:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0070                     ?_DimmerLights_Main:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0070                     ?_DimmerLights_TMR_1:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0070                     ??_DimmerLights_TMR_1:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0070                     ?_DimmerLights_IOC_1:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0070                     ?_DimmerLights_TMR_2:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0070                     ??_DimmerLights_TMR_2:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0070                     ?_DimmerLights_IOC_2:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0070                     ?_LedPointSelect:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0070                     ?_LED_Initialization:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0070                     ?_LED_Main:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0070                     ?_Mcu_Initialization:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0070                     ?_ISR:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0070                     ?_Flash_Memory_Initialization:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0070                     ?_Flash_Memory_Main:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0070                     ?_Flash_Memory_Unlock:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0070                     ?_Flash_Memory_Erasing:	
  2879                           ; 0 bytes @ 0x0
  2880                           
  2881  0070                     ?_setMemory_Modify:	
  2882                           ; 0 bytes @ 0x0
  2883                           
  2884  0070                     ?_setMemory_LoopSave:	
  2885                           ; 0 bytes @ 0x0
  2886                           
  2887  0070                     ?_WDT_Main:	
  2888                           ; 0 bytes @ 0x0
  2889                           
  2890  0070                     ?_Load_Initialization:	
  2891                           ; 0 bytes @ 0x0
  2892                           
  2893  0070                     ?_getLoad_AD:	
  2894                           ; 0 bytes @ 0x0
  2895                           
  2896  0070                     ?_Load_Main:	
  2897                           ; 0 bytes @ 0x0
  2898                           
  2899  0070                     ?_Temp_Initialization:	
  2900                           ; 0 bytes @ 0x0
  2901                           
  2902  0070                     ?_getTemp_AD:	
  2903                           ; 0 bytes @ 0x0
  2904                           
  2905  0070                     ?_Temp_Main:	
  2906                           ; 0 bytes @ 0x0
  2907                           
  2908  0070                     ?_RF_Initialization:	
  2909                           ; 0 bytes @ 0x0
  2910                           
  2911  0070                     ?_RF_Main:	
  2912                           ; 0 bytes @ 0x0
  2913                           
  2914  0070                     ?_setRF_Learn:	
  2915                           ; 0 bytes @ 0x0
  2916                           
  2917  0070                     ?_TouchPower:	
  2918                           ; 0 bytes @ 0x0
  2919                           
  2920  0070                     ?_SwPointSelect:	
  2921                           ; 0 bytes @ 0x0
  2922                           
  2923  0070                     ?_Switch_Initialization:	
  2924                           ; 0 bytes @ 0x0
  2925                           
  2926  0070                     ?_Switch_Main:	
  2927                           ; 0 bytes @ 0x0
  2928                           
  2929  0070                     ?_getDimmerLights_Status:	
  2930                           ; 0 bytes @ 0x0
  2931                           
  2932  0070                     ?_getLoad_OK:	
  2933                           ; 1 bytes @ 0x0
  2934                           
  2935  0070                     ?_getMain_All_Error_Status:	
  2936                           ; 1 bytes @ 0x0
  2937                           
  2938  0070                     ?_getMain_All_LightsStatus:	
  2939                           ; 1 bytes @ 0x0
  2940                           
  2941  0070                     ?_getDimmerLights_Allow_Condition:	
  2942                           ; 1 bytes @ 0x0
  2943                           
  2944  0070                     ?_getDimmerLights_PercentToValue:	
  2945                           ; 1 bytes @ 0x0
  2946                           
  2947  0070                     ?_getDimmerLights_ValueToPercent:	
  2948                           ; 1 bytes @ 0x0
  2949                           
  2950  0070                     ?_getCmd_Status:	
  2951                           ; 1 bytes @ 0x0
  2952                           
  2953  0070                     ?_Flash_Memory_Read:	
  2954                           ; 1 bytes @ 0x0
  2955                           
  2956  0070                     ?_getMain_Lights_Count:	
  2957                           ; 1 bytes @ 0x0
  2958                           
  2959  0070                     ?_getRF_KeyStatus:	
  2960                           ; 1 bytes @ 0x0
  2961                           
  2962  0070                     ?_getSw_KeyStatus:	
  2963                           ; 1 bytes @ 0x0
  2964                           
  2965  0070                     ?_getDelayOff_GO:	
  2966                           ; 1 bytes @ 0x0
  2967                           
  2968  0070                     ?_getDimmerIntr_DimmingValue:	
  2969                           ; 1 bytes @ 0x0
  2970                           
  2971  0070                     ?_getAll_DimmerIntr_Dimming_Sw_RF:	
  2972                           ; 1 bytes @ 0x0
  2973                           
  2974  0070                     ?_getDimmerLights_Line:	
  2975                           ; 1 bytes @ 0x0
  2976                           
  2977  0070                     ?_getDimmer_LoadGO:	
  2978                           ; 1 bytes @ 0x0
  2979                           
  2980  0070                     ?_getDimmer_Load_Status:	
  2981                           ; 1 bytes @ 0x0
  2982                           
  2983  0070                     ?___lbdiv:	
  2984                           ; 1 bytes @ 0x0
  2985                           
  2986  0070                     setDimmerLights_Initialization@lights:	
  2987                           ; 1 bytes @ 0x0
  2988                           
  2989  0070                     ___lbdiv@divisor:	
  2990                           ; 1 bytes @ 0x0
  2991                           
  2992                           
  2993                           ; 1 bytes @ 0x0
  2994  0070                     	ds	1
  2995  0071                     ??___lbdiv:	
  2996  0071                     DimmerLights_TMR_1@count:	
  2997                           ; 0 bytes @ 0x1
  2998                           
  2999  0071                     DimmerLights_TMR_2@count:	
  3000                           ; 1 bytes @ 0x1
  3001                           
  3002                           
  3003                           ; 1 bytes @ 0x1
  3004  0071                     	ds	1
  3005  0072                     ??_TMR1_ISR:	
  3006  0072                     ___lbdiv@dividend:	
  3007                           ; 0 bytes @ 0x2
  3008                           
  3009                           
  3010                           ; 1 bytes @ 0x2
  3011  0072                     	ds	1
  3012  0073                     ___lbdiv@counter:	
  3013                           
  3014                           ; 1 bytes @ 0x3
  3015  0073                     	ds	1
  3016  0074                     ___lbdiv@quotient:	
  3017                           
  3018                           ; 1 bytes @ 0x4
  3019  0074                     	ds	1
  3020  0075                     ?_Division:	
  3021  0075                     Division@num:	
  3022                           ; 1 bytes @ 0x5
  3023                           
  3024                           
  3025                           ; 1 bytes @ 0x5
  3026  0075                     	ds	1
  3027  0076                     ??_Division:	
  3028                           
  3029                           ; 0 bytes @ 0x6
  3030  0076                     	ds	2
  3031  0078                     Division@value:	
  3032                           
  3033                           ; 1 bytes @ 0x8
  3034  0078                     	ds	1
  3035  0079                     Division@result:	
  3036                           
  3037                           ; 1 bytes @ 0x9
  3038  0079                     	ds	1
  3039  007A                     ??_DimmerLights_IOC_1:	
  3040  007A                     ??_DimmerLights_IOC_2:	
  3041                           ; 0 bytes @ 0xA
  3042                           
  3043                           
  3044                           ; 0 bytes @ 0xA
  3045  007A                     	ds	2
  3046  007C                     DimmerLights_IOC_1@count:	
  3047  007C                     DimmerLights_IOC_2@count:	
  3048                           ; 1 bytes @ 0xC
  3049                           
  3050                           
  3051                           ; 1 bytes @ 0xC
  3052  007C                     	ds	1
  3053  007D                     DimmerLights_IOC_1@dimming:	
  3054  007D                     DimmerLights_IOC_2@dimming:	
  3055                           ; 1 bytes @ 0xD
  3056                           
  3057                           
  3058                           ; 1 bytes @ 0xD
  3059  007D                     	ds	1
  3060  007E                     ??_IOC_ISR:	
  3061                           
  3062                           	psect	cstackBANK0
  3063  0020                     __pcstackBANK0:	
  3064                           ; 0 bytes @ 0xE
  3065                           
  3066  0020                     ??_ISR:	
  3067                           
  3068                           ; 0 bytes @ 0x0
  3069  0020                     	ds	1
  3070  0021                     ??_RF_Timeout_Counter:	
  3071  0021                     ??_setRF_TimeoutCleared:	
  3072                           ; 0 bytes @ 0x1
  3073                           
  3074  0021                     ??_CC2500_WriteByte:	
  3075                           ; 0 bytes @ 0x1
  3076                           
  3077  0021                     ??_CC2500_ReadByte:	
  3078                           ; 0 bytes @ 0x1
  3079                           
  3080  0021                     ?_DelayTime_1us:	
  3081                           ; 0 bytes @ 0x1
  3082                           
  3083  0021                     ??_setDimmerLights_Initialization:	
  3084                           ; 0 bytes @ 0x1
  3085                           
  3086  0021                     ??_getLoad_OK:	
  3087                           ; 0 bytes @ 0x1
  3088                           
  3089  0021                     ??_getMain_All_Error_Status:	
  3090                           ; 0 bytes @ 0x1
  3091                           
  3092  0021                     ??_getMain_All_LightsStatus:	
  3093                           ; 0 bytes @ 0x1
  3094                           
  3095  0021                     ??_setDimmerLights_Line:	
  3096                           ; 0 bytes @ 0x1
  3097                           
  3098  0021                     ??_getCmd_Status:	
  3099                           ; 0 bytes @ 0x1
  3100                           
  3101  0021                     ?_setCmd_Status:	
  3102                           ; 0 bytes @ 0x1
  3103                           
  3104  0021                     ??_setTxData:	
  3105                           ; 0 bytes @ 0x1
  3106                           
  3107  0021                     ??_setRF_TransceiveGO:	
  3108                           ; 0 bytes @ 0x1
  3109                           
  3110  0021                     ??_Fosc_Set:	
  3111                           ; 0 bytes @ 0x1
  3112                           
  3113  0021                     ??_IO_Set:	
  3114                           ; 0 bytes @ 0x1
  3115                           
  3116  0021                     ??_TMR1_Set:	
  3117                           ; 0 bytes @ 0x1
  3118                           
  3119  0021                     ??_ADC_Set:	
  3120                           ; 0 bytes @ 0x1
  3121                           
  3122  0021                     ??_IOC_Set:	
  3123                           ; 0 bytes @ 0x1
  3124                           
  3125  0021                     ??_WDT_Set:	
  3126                           ; 0 bytes @ 0x1
  3127                           
  3128  0021                     ??_Timeout_Counter:	
  3129                           ; 0 bytes @ 0x1
  3130                           
  3131  0021                     ??_set_TimeoutCleared:	
  3132                           ; 0 bytes @ 0x1
  3133                           
  3134  0021                     ??_Flash_Memory_Read:	
  3135                           ; 0 bytes @ 0x1
  3136                           
  3137  0021                     ?_setMemory_Data:	
  3138                           ; 0 bytes @ 0x1
  3139                           
  3140  0021                     ??_Flash_Memory_Write:	
  3141                           ; 0 bytes @ 0x1
  3142                           
  3143  0021                     ??_WDT_Clearing:	
  3144                           ; 0 bytes @ 0x1
  3145                           
  3146  0021                     ??_setLoad_AH_AL_Restore:	
  3147                           ; 0 bytes @ 0x1
  3148                           
  3149  0021                     ??_getMain_Lights_Count:	
  3150                           ; 0 bytes @ 0x1
  3151                           
  3152  0021                     ??_setTemp_Initialization:	
  3153                           ; 0 bytes @ 0x1
  3154                           
  3155  0021                     ??_setRF_Initialization:	
  3156                           ; 0 bytes @ 0x1
  3157                           
  3158  0021                     ??_getRF_KeyStatus:	
  3159                           ; 0 bytes @ 0x1
  3160                           
  3161  0021                     ??_getSw_KeyStatus:	
  3162                           ; 0 bytes @ 0x1
  3163                           
  3164  0021                     ??_myMain_Initialization:	
  3165                           ; 0 bytes @ 0x1
  3166                           
  3167  0021                     ??_Buzzer_Initialization:	
  3168                           ; 0 bytes @ 0x1
  3169                           
  3170  0021                     ??_Buzzer_Main:	
  3171                           ; 0 bytes @ 0x1
  3172                           
  3173  0021                     ??_DelayOffPointSelect:	
  3174                           ; 0 bytes @ 0x1
  3175                           
  3176  0021                     ??_DimmerIntr_Initialization:	
  3177                           ; 0 bytes @ 0x1
  3178                           
  3179  0021                     ?_setDimmerIntr_ControlStatus:	
  3180                           ; 0 bytes @ 0x1
  3181                           
  3182  0021                     ?_setDimmerIntr_DimmingValue:	
  3183                           ; 0 bytes @ 0x1
  3184                           
  3185  0021                     ??_getDimmerIntr_DimmingValue:	
  3186                           ; 0 bytes @ 0x1
  3187                           
  3188  0021                     ?_setDimmerIntr_Dimming_Sw:	
  3189                           ; 0 bytes @ 0x1
  3190                           
  3191  0021                     ?_setDimmerIntr_Dimming_RF:	
  3192                           ; 0 bytes @ 0x1
  3193                           
  3194  0021                     ??_getAll_DimmerIntr_Dimming_Sw_RF:	
  3195                           ; 0 bytes @ 0x1
  3196                           
  3197  0021                     ??_DimmerLights_SelectPointer:	
  3198                           ; 0 bytes @ 0x1
  3199                           
  3200  0021                     ??_getDimmerLights_Line:	
  3201                           ; 0 bytes @ 0x1
  3202                           
  3203  0021                     ??_getDimmer_LoadGO:	
  3204                           ; 0 bytes @ 0x1
  3205                           
  3206  0021                     ??_getDimmer_Load_Status:	
  3207                           ; 0 bytes @ 0x1
  3208                           
  3209  0021                     ??_LedPointSelect:	
  3210                           ; 0 bytes @ 0x1
  3211                           
  3212  0021                     ??_Flash_Memory_Unlock:	
  3213                           ; 0 bytes @ 0x1
  3214                           
  3215  0021                     ??_Flash_Memory_Erasing:	
  3216                           ; 0 bytes @ 0x1
  3217                           
  3218  0021                     ??_setMemory_Modify:	
  3219                           ; 0 bytes @ 0x1
  3220                           
  3221  0021                     ??_setMemory_LoopSave:	
  3222                           ; 0 bytes @ 0x1
  3223                           
  3224  0021                     ??_WDT_Main:	
  3225                           ; 0 bytes @ 0x1
  3226                           
  3227  0021                     ??_Temp_Initialization:	
  3228                           ; 0 bytes @ 0x1
  3229                           
  3230  0021                     ??_setRF_Learn:	
  3231                           ; 0 bytes @ 0x1
  3232                           
  3233  0021                     ??_TouchPower:	
  3234                           ; 0 bytes @ 0x1
  3235                           
  3236  0021                     ??_SwPointSelect:	
  3237                           ; 0 bytes @ 0x1
  3238                           
  3239  0021                     ?___bmul:	
  3240                           ; 0 bytes @ 0x1
  3241                           
  3242  0021                     ?_getBuz_GO:	
  3243                           ; 1 bytes @ 0x1
  3244                           
  3245  0021                     ?_getAD:	
  3246                           ; 2 bytes @ 0x1
  3247                           
  3248  0021                     ?___wmul:	
  3249                           ; 2 bytes @ 0x1
  3250                           
  3251  0021                     ?___awdiv:	
  3252                           ; 2 bytes @ 0x1
  3253                           
  3254  0021                     ?___lwdiv:	
  3255                           ; 2 bytes @ 0x1
  3256                           
  3257  0021                     ?___ftpack:	
  3258                           ; 2 bytes @ 0x1
  3259                           
  3260  0021                     setDimmerIntr_ControlStatus@command:	
  3261                           ; 3 bytes @ 0x1
  3262                           
  3263  0021                     setDimmerIntr_DimmingValue@value:	
  3264                           ; 1 bytes @ 0x1
  3265                           
  3266  0021                     setDimmerIntr_Dimming_Sw@command:	
  3267                           ; 1 bytes @ 0x1
  3268                           
  3269  0021                     setDimmerIntr_Dimming_RF@command:	
  3270                           ; 1 bytes @ 0x1
  3271                           
  3272  0021                     setDimmerLights_Line@lights:	
  3273                           ; 1 bytes @ 0x1
  3274                           
  3275  0021                     getDimmer_LoadGO@loadgo:	
  3276                           ; 1 bytes @ 0x1
  3277                           
  3278  0021                     getDimmer_Load_Status@status:	
  3279                           ; 1 bytes @ 0x1
  3280                           
  3281  0021                     getAD@adcon1:	
  3282                           ; 1 bytes @ 0x1
  3283                           
  3284  0021                     setMemory_Data@data:	
  3285                           ; 1 bytes @ 0x1
  3286                           
  3287  0021                     getLoad_OK@ok:	
  3288                           ; 1 bytes @ 0x1
  3289                           
  3290  0021                     getMain_All_LightsStatus@status:	
  3291                           ; 1 bytes @ 0x1
  3292                           
  3293  0021                     getMain_Lights_Count@count:	
  3294                           ; 1 bytes @ 0x1
  3295                           
  3296  0021                     setCmd_Status@cmd:	
  3297                           ; 1 bytes @ 0x1
  3298                           
  3299  0021                     getCmd_Status@number:	
  3300                           ; 1 bytes @ 0x1
  3301                           
  3302  0021                     ___bmul@multiplicand:	
  3303                           ; 1 bytes @ 0x1
  3304                           
  3305  0021                     DelayTime_1us@count:	
  3306                           ; 1 bytes @ 0x1
  3307                           
  3308  0021                     ___wmul@multiplier:	
  3309                           ; 2 bytes @ 0x1
  3310                           
  3311  0021                     ___awdiv@divisor:	
  3312                           ; 2 bytes @ 0x1
  3313                           
  3314  0021                     ___lwdiv@divisor:	
  3315                           ; 2 bytes @ 0x1
  3316                           
  3317  0021                     ___ftpack@arg:	
  3318                           ; 2 bytes @ 0x1
  3319                           
  3320                           
  3321                           ; 3 bytes @ 0x1
  3322  0021                     	ds	1
  3323  0022                     ??_getDimmerLights_Allow_Condition:	
  3324  0022                     ??_setCmd_Status:	
  3325                           ; 0 bytes @ 0x2
  3326                           
  3327  0022                     ??_setMemory_Data:	
  3328                           ; 0 bytes @ 0x2
  3329                           
  3330  0022                     ??_setDimmerIntr_ControlStatus:	
  3331                           ; 0 bytes @ 0x2
  3332                           
  3333  0022                     ??_setDimmerIntr_DimmingValue:	
  3334                           ; 0 bytes @ 0x2
  3335                           
  3336  0022                     ??_setDimmerIntr_Dimming_Sw:	
  3337                           ; 0 bytes @ 0x2
  3338                           
  3339  0022                     ??_setDimmerIntr_Dimming_RF:	
  3340                           ; 0 bytes @ 0x2
  3341                           
  3342  0022                     ??_DimmerLights_Initialization:	
  3343                           ; 0 bytes @ 0x2
  3344                           
  3345  0022                     ??_Mcu_Initialization:	
  3346                           ; 0 bytes @ 0x2
  3347                           
  3348  0022                     ??_RF_Initialization:	
  3349                           ; 0 bytes @ 0x2
  3350                           
  3351  0022                     ??___bmul:	
  3352                           ; 0 bytes @ 0x2
  3353                           
  3354  0022                     CC2500_WriteByte@loop_a:	
  3355                           ; 0 bytes @ 0x2
  3356                           
  3357  0022                     CC2500_ReadByte@loop_b:	
  3358                           ; 1 bytes @ 0x2
  3359                           
  3360  0022                     DelayOffPointSelect@sw:	
  3361                           ; 1 bytes @ 0x2
  3362                           
  3363  0022                     getDimmerIntr_DimmingValue@value:	
  3364                           ; 1 bytes @ 0x2
  3365                           
  3366  0022                     _getAll_DimmerIntr_Dimming_Sw_RF$2260:	
  3367                           ; 1 bytes @ 0x2
  3368                           
  3369  0022                     DimmerLights_SelectPointer@lights:	
  3370                           ; 1 bytes @ 0x2
  3371                           
  3372  0022                     getDimmerLights_Line@line:	
  3373                           ; 1 bytes @ 0x2
  3374                           
  3375  0022                     LedPointSelect@led:	
  3376                           ; 1 bytes @ 0x2
  3377                           
  3378  0022                     Flash_Memory_Read@i:	
  3379                           ; 1 bytes @ 0x2
  3380                           
  3381  0022                     Flash_Memory_Write@i:	
  3382                           ; 1 bytes @ 0x2
  3383                           
  3384  0022                     setMemory_Modify@command:	
  3385                           ; 1 bytes @ 0x2
  3386                           
  3387  0022                     setMemory_LoopSave@command:	
  3388                           ; 1 bytes @ 0x2
  3389                           
  3390  0022                     setLoad_AH_AL_Restore@i:	
  3391                           ; 1 bytes @ 0x2
  3392                           
  3393  0022                     setRF_Learn@command:	
  3394                           ; 1 bytes @ 0x2
  3395                           
  3396  0022                     getRF_KeyStatus@key:	
  3397                           ; 1 bytes @ 0x2
  3398                           
  3399  0022                     setRF_TransceiveGO@command:	
  3400                           ; 1 bytes @ 0x2
  3401                           
  3402  0022                     SwPointSelect@sw:	
  3403                           ; 1 bytes @ 0x2
  3404                           
  3405  0022                     _getSw_KeyStatus$6079:	
  3406                           ; 1 bytes @ 0x2
  3407                           
  3408  0022                     getMain_Lights_Count@status1:	
  3409                           ; 1 bytes @ 0x2
  3410                           
  3411  0022                     getCmd_Status@cmd:	
  3412                           ; 1 bytes @ 0x2
  3413                           
  3414  0022                     _getMain_All_Error_Status$6812:	
  3415                           ; 1 bytes @ 0x2
  3416                           
  3417                           
  3418                           ; 2 bytes @ 0x2
  3419  0022                     	ds	1
  3420  0023                     ??_CC2500_WriteCommand:	
  3421  0023                     ??_CC2500_ReadStatus:	
  3422                           ; 0 bytes @ 0x3
  3423                           
  3424  0023                     ??_DelayTime_1us:	
  3425                           ; 0 bytes @ 0x3
  3426                           
  3427  0023                     ?_CC2500_WriteREG:	
  3428                           ; 0 bytes @ 0x3
  3429                           
  3430  0023                     ??_DlyOff_Initialization:	
  3431                           ; 0 bytes @ 0x3
  3432                           
  3433  0023                     ??_getDimmerLights_Status:	
  3434                           ; 0 bytes @ 0x3
  3435                           
  3436  0023                     ??_setDimmerLights_SwOff:	
  3437                           ; 0 bytes @ 0x3
  3438                           
  3439  0023                     ?_setLED:	
  3440                           ; 0 bytes @ 0x3
  3441                           
  3442  0023                     ??_setLED_Main:	
  3443                           ; 0 bytes @ 0x3
  3444                           
  3445  0023                     ??_getBuz_GO:	
  3446                           ; 0 bytes @ 0x3
  3447                           
  3448  0023                     ??_getDelayOff_GO:	
  3449                           ; 0 bytes @ 0x3
  3450                           
  3451  0023                     ??_setDimmerLights_DimmingOn:	
  3452                           ; 0 bytes @ 0x3
  3453                           
  3454  0023                     ?_setDimmerLights_DimmingRun:	
  3455                           ; 0 bytes @ 0x3
  3456                           
  3457  0023                     ??_Load_Initialization:	
  3458                           ; 0 bytes @ 0x3
  3459                           
  3460  0023                     CC2500_WriteREG@value:	
  3461                           ; 0 bytes @ 0x3
  3462                           
  3463  0023                     DlyOff_Initialization@sw:	
  3464                           ; 1 bytes @ 0x3
  3465                           
  3466  0023                     getDelayOff_GO@sw:	
  3467                           ; 1 bytes @ 0x3
  3468                           
  3469  0023                     setDimmerIntr_ControlStatus@lights:	
  3470                           ; 1 bytes @ 0x3
  3471                           
  3472  0023                     setDimmerIntr_DimmingValue@lights:	
  3473                           ; 1 bytes @ 0x3
  3474                           
  3475  0023                     getDimmerIntr_DimmingValue@lights:	
  3476                           ; 1 bytes @ 0x3
  3477                           
  3478  0023                     setDimmerIntr_Dimming_Sw@lights:	
  3479                           ; 1 bytes @ 0x3
  3480                           
  3481  0023                     setDimmerIntr_Dimming_RF@lights:	
  3482                           ; 1 bytes @ 0x3
  3483                           
  3484  0023                     _getAll_DimmerIntr_Dimming_Sw_RF$2261:	
  3485                           ; 1 bytes @ 0x3
  3486                           
  3487  0023                     setDimmerLights_SwOff@sw:	
  3488                           ; 1 bytes @ 0x3
  3489                           
  3490  0023                     setDimmerLights_DimmingOn@sw:	
  3491                           ; 1 bytes @ 0x3
  3492                           
  3493  0023                     _getDimmerLights_Allow_Condition$2367:	
  3494                           ; 1 bytes @ 0x3
  3495                           
  3496  0023                     getDimmerLights_Status@lights:	
  3497                           ; 1 bytes @ 0x3
  3498                           
  3499  0023                     setDimmerLights_DimmingRun@command:	
  3500                           ; 1 bytes @ 0x3
  3501                           
  3502  0023                     setLED@command:	
  3503                           ; 1 bytes @ 0x3
  3504                           
  3505  0023                     Flash_Memory_Read@address:	
  3506                           ; 1 bytes @ 0x3
  3507                           
  3508  0023                     setMemory_Data@address:	
  3509                           ; 1 bytes @ 0x3
  3510                           
  3511  0023                     _getRF_KeyStatus$5034:	
  3512                           ; 1 bytes @ 0x3
  3513                           
  3514  0023                     _getSw_KeyStatus$6080:	
  3515                           ; 1 bytes @ 0x3
  3516                           
  3517  0023                     getMain_Lights_Count@status2:	
  3518                           ; 1 bytes @ 0x3
  3519                           
  3520  0023                     setCmd_Status@number:	
  3521                           ; 1 bytes @ 0x3
  3522                           
  3523  0023                     ___bmul@product:	
  3524                           ; 1 bytes @ 0x3
  3525                           
  3526  0023                     DelayTime_1us@i:	
  3527                           ; 1 bytes @ 0x3
  3528                           
  3529  0023                     ___wmul@multiplicand:	
  3530                           ; 2 bytes @ 0x3
  3531                           
  3532  0023                     ___awdiv@dividend:	
  3533                           ; 2 bytes @ 0x3
  3534                           
  3535  0023                     ___lwdiv@dividend:	
  3536                           ; 2 bytes @ 0x3
  3537                           
  3538                           
  3539                           ; 2 bytes @ 0x3
  3540  0023                     	ds	1
  3541  0024                     ??_CC2500_WriteREG:	
  3542  0024                     ??_setLED:	
  3543                           ; 0 bytes @ 0x4
  3544                           
  3545  0024                     ??_DelayOff_Initialization:	
  3546                           ; 0 bytes @ 0x4
  3547                           
  3548  0024                     ??_setDimmerLights_DimmingRun:	
  3549                           ; 0 bytes @ 0x4
  3550                           
  3551  0024                     ??_getAD:	
  3552                           ; 0 bytes @ 0x4
  3553                           
  3554  0024                     CC2500_WriteCommand@command:	
  3555                           ; 0 bytes @ 0x4
  3556                           
  3557  0024                     CC2500_ReadStatus@status_addr:	
  3558                           ; 1 bytes @ 0x4
  3559                           
  3560  0024                     getDelayOff_GO@go:	
  3561                           ; 1 bytes @ 0x4
  3562                           
  3563  0024                     getAll_DimmerIntr_Dimming_Sw_RF@status:	
  3564                           ; 1 bytes @ 0x4
  3565                           
  3566  0024                     _getDimmerLights_Allow_Condition$2368:	
  3567                           ; 1 bytes @ 0x4
  3568                           
  3569  0024                     getDimmerLights_Status@status:	
  3570                           ; 1 bytes @ 0x4
  3571                           
  3572  0024                     setLED@led:	
  3573                           ; 1 bytes @ 0x4
  3574                           
  3575  0024                     getAD@adcon0:	
  3576                           ; 1 bytes @ 0x4
  3577                           
  3578  0024                     Flash_Memory_Read@ret:	
  3579                           ; 1 bytes @ 0x4
  3580                           
  3581  0024                     getSw_KeyStatus@status:	
  3582                           ; 1 bytes @ 0x4
  3583                           
  3584  0024                     ___bmul@multiplier:	
  3585                           ; 1 bytes @ 0x4
  3586                           
  3587  0024                     ___ftpack@exp:	
  3588                           ; 1 bytes @ 0x4
  3589                           
  3590  0024                     _getMain_All_Error_Status$6813:	
  3591                           ; 1 bytes @ 0x4
  3592                           
  3593                           
  3594                           ; 2 bytes @ 0x4
  3595  0024                     	ds	1
  3596  0025                     ??_CC2500_ClearTXFIFO:	
  3597  0025                     ??_CC2500_ClearRXFIFO:	
  3598                           ; 0 bytes @ 0x5
  3599                           
  3600  0025                     ??_CC2500_SIDLEMode:	
  3601                           ; 0 bytes @ 0x5
  3602                           
  3603  0025                     ??_setLED_Initialization:	
  3604                           ; 0 bytes @ 0x5
  3605                           
  3606  0025                     ??_Flash_Memory_Modify:	
  3607                           ; 0 bytes @ 0x5
  3608                           
  3609  0025                     ??_RF_RxDisable:	
  3610                           ; 0 bytes @ 0x5
  3611                           
  3612  0025                     ??_setSw_Initialization:	
  3613                           ; 0 bytes @ 0x5
  3614                           
  3615  0025                     ??_CC2500_TxData:	
  3616                           ; 0 bytes @ 0x5
  3617                           
  3618  0025                     ??_CC2500_RxData:	
  3619                           ; 0 bytes @ 0x5
  3620                           
  3621  0025                     ??_getLoad_AD:	
  3622                           ; 0 bytes @ 0x5
  3623                           
  3624  0025                     ??_getTemp_AD:	
  3625                           ; 0 bytes @ 0x5
  3626                           
  3627  0025                     ??___wmul:	
  3628                           ; 0 bytes @ 0x5
  3629                           
  3630  0025                     ??___awdiv:	
  3631                           ; 0 bytes @ 0x5
  3632                           
  3633  0025                     ??___lwdiv:	
  3634                           ; 0 bytes @ 0x5
  3635                           
  3636  0025                     CC2500_WriteREG@w_addr:	
  3637                           ; 0 bytes @ 0x5
  3638                           
  3639  0025                     _getDimmerLights_Allow_Condition$2369:	
  3640                           ; 1 bytes @ 0x5
  3641                           
  3642  0025                     setDimmerLights_DimmingRun@lights:	
  3643                           ; 1 bytes @ 0x5
  3644                           
  3645  0025                     setLED_Initialization@led:	
  3646                           ; 1 bytes @ 0x5
  3647                           
  3648  0025                     setLED_Main@led:	
  3649                           ; 1 bytes @ 0x5
  3650                           
  3651  0025                     setSw_Initialization@sw:	
  3652                           ; 1 bytes @ 0x5
  3653                           
  3654  0025                     getSw_KeyStatus@sw:	
  3655                           ; 1 bytes @ 0x5
  3656                           
  3657  0025                     ___ftpack@sign:	
  3658                           ; 1 bytes @ 0x5
  3659                           
  3660  0025                     getBuz_GO@i:	
  3661                           ; 1 bytes @ 0x5
  3662                           
  3663  0025                     DelayTime_1us@j:	
  3664                           ; 2 bytes @ 0x5
  3665                           
  3666  0025                     ___wmul@product:	
  3667                           ; 2 bytes @ 0x5
  3668                           
  3669                           
  3670                           ; 2 bytes @ 0x5
  3671  0025                     	ds	1
  3672  0026                     ??_CC2500_InitSetREG:	
  3673  0026                     ??_CC2500_InitPATable:	
  3674                           ; 0 bytes @ 0x6
  3675                           
  3676  0026                     ??___ftpack:	
  3677                           ; 0 bytes @ 0x6
  3678                           
  3679  0026                     ??_LED_Initialization:	
  3680                           ; 0 bytes @ 0x6
  3681                           
  3682  0026                     ??_LED_Main:	
  3683                           ; 0 bytes @ 0x6
  3684                           
  3685  0026                     ??_Switch_Initialization:	
  3686                           ; 0 bytes @ 0x6
  3687                           
  3688  0026                     CC2500_TxData@loop_e:	
  3689                           ; 0 bytes @ 0x6
  3690                           
  3691  0026                     CC2500_RxData@loop_f:	
  3692                           ; 1 bytes @ 0x6
  3693                           
  3694  0026                     getDimmerLights_Allow_Condition@lights:	
  3695                           ; 1 bytes @ 0x6
  3696                           
  3697  0026                     Flash_Memory_Modify@i:	
  3698                           ; 1 bytes @ 0x6
  3699                           
  3700  0026                     getTemp_AD@channel:	
  3701                           ; 1 bytes @ 0x6
  3702                           
  3703  0026                     getMain_All_Error_Status@command:	
  3704                           ; 1 bytes @ 0x6
  3705                           
  3706  0026                     ___awdiv@counter:	
  3707                           ; 1 bytes @ 0x6
  3708                           
  3709  0026                     ___lwdiv@quotient:	
  3710                           ; 1 bytes @ 0x6
  3711                           
  3712                           
  3713                           ; 2 bytes @ 0x6
  3714  0026                     	ds	1
  3715  0027                     ??_CC2500_PowerRST:	
  3716  0027                     ??_CC2500_FrequencyCabr:	
  3717                           ; 0 bytes @ 0x7
  3718                           
  3719  0027                     ??_Flash_Memory_Main:	
  3720                           ; 0 bytes @ 0x7
  3721                           
  3722  0027                     CC2500_InitSetREG@temp1:	
  3723                           ; 0 bytes @ 0x7
  3724                           
  3725  0027                     CC2500_InitPATable@temp:	
  3726                           ; 1 bytes @ 0x7
  3727                           
  3728  0027                     getDimmerLights_Allow_Condition@allow:	
  3729                           ; 1 bytes @ 0x7
  3730                           
  3731  0027                     getLoad_AD@channel:	
  3732                           ; 1 bytes @ 0x7
  3733                           
  3734  0027                     getMain_All_Error_Status@status:	
  3735                           ; 1 bytes @ 0x7
  3736                           
  3737  0027                     ___awdiv@sign:	
  3738                           ; 1 bytes @ 0x7
  3739                           
  3740  0027                     getTemp_AD@ADRES:	
  3741                           ; 1 bytes @ 0x7
  3742                           
  3743                           
  3744                           ; 2 bytes @ 0x7
  3745  0027                     	ds	1
  3746  0028                     CC2500_InitSetREG@temp2:	
  3747  0028                     CC2500_InitPATable@loop_d:	
  3748                           ; 1 bytes @ 0x8
  3749                           
  3750  0028                     getLoad_AD@k:	
  3751                           ; 1 bytes @ 0x8
  3752                           
  3753  0028                     ___lwdiv@counter:	
  3754                           ; 1 bytes @ 0x8
  3755                           
  3756  0028                     ___awdiv@quotient:	
  3757                           ; 1 bytes @ 0x8
  3758                           
  3759                           
  3760                           ; 2 bytes @ 0x8
  3761  0028                     	ds	1
  3762  0029                     ??_Load_Main:	
  3763  0029                     ?___awtoft:	
  3764                           ; 0 bytes @ 0x9
  3765                           
  3766  0029                     CC2500_InitSetREG@loop_c:	
  3767                           ; 3 bytes @ 0x9
  3768                           
  3769  0029                     getLoad_AD@j:	
  3770                           ; 1 bytes @ 0x9
  3771                           
  3772  0029                     ___awtoft@c:	
  3773                           ; 1 bytes @ 0x9
  3774                           
  3775                           
  3776                           ; 2 bytes @ 0x9
  3777  0029                     	ds	1
  3778  002A                     ?_setBuz:	
  3779  002A                     ??_CC2500_PowerOnInitial:	
  3780                           ; 0 bytes @ 0xA
  3781                           
  3782  002A                     setBuz@time:	
  3783                           ; 0 bytes @ 0xA
  3784                           
  3785  002A                     getLoad_AD@ADRES:	
  3786                           ; 2 bytes @ 0xA
  3787                           
  3788                           
  3789                           ; 2 bytes @ 0xA
  3790  002A                     	ds	1
  3791  002B                     Load_Main@error:	
  3792                           
  3793                           ; 1 bytes @ 0xB
  3794  002B                     	ds	1
  3795  002C                     ??_setBuz:	
  3796  002C                     ??___awtoft:	
  3797                           ; 0 bytes @ 0xC
  3798                           
  3799  002C                     getLoad_AD@i:	
  3800                           ; 0 bytes @ 0xC
  3801                           
  3802  002C                     _Load_Main$3627:	
  3803                           ; 1 bytes @ 0xC
  3804                           
  3805                           
  3806                           ; 2 bytes @ 0xC
  3807  002C                     	ds	1
  3808  002D                     setBuz@count:	
  3809                           
  3810                           ; 1 bytes @ 0xD
  3811  002D                     	ds	1
  3812  002E                     ??_setDimmerLights_SwOn:	
  3813  002E                     ??_my_MainTimer:	
  3814                           ; 0 bytes @ 0xE
  3815                           
  3816  002E                     ??_Exception_Main:	
  3817                           ; 0 bytes @ 0xE
  3818                           
  3819  002E                     Load_Main@ErrorCountValue:	
  3820                           ; 0 bytes @ 0xE
  3821                           
  3822  002E                     ___awtoft@sign:	
  3823                           ; 1 bytes @ 0xE
  3824                           
  3825                           
  3826                           ; 1 bytes @ 0xE
  3827  002E                     	ds	1
  3828  002F                     ?___ftdiv:	
  3829  002F                     ?___ftmul:	
  3830                           ; 3 bytes @ 0xF
  3831                           
  3832  002F                     _setDimmerLights_SwOn$2306:	
  3833                           ; 3 bytes @ 0xF
  3834                           
  3835  002F                     Load_Main@Load_RunStatus:	
  3836                           ; 1 bytes @ 0xF
  3837                           
  3838  002F                     Exception_Main@status:	
  3839                           ; 1 bytes @ 0xF
  3840                           
  3841  002F                     ___ftdiv@f2:	
  3842                           ; 1 bytes @ 0xF
  3843                           
  3844  002F                     ___ftmul@f1:	
  3845                           ; 3 bytes @ 0xF
  3846                           
  3847                           
  3848                           ; 3 bytes @ 0xF
  3849  002F                     	ds	1
  3850  0030                     _setDimmerLights_SwOn$2315:	
  3851  0030                     Load_Main@LightsCount:	
  3852                           ; 1 bytes @ 0x10
  3853                           
  3854  0030                     Exception_Main@count:	
  3855                           ; 1 bytes @ 0x10
  3856                           
  3857                           
  3858                           ; 1 bytes @ 0x10
  3859  0030                     	ds	1
  3860  0031                     setDimmerLights_SwOn@idle:	
  3861  0031                     Load_Main@i:	
  3862                           ; 1 bytes @ 0x11
  3863                           
  3864  0031                     Exception_Main@i:	
  3865                           ; 2 bytes @ 0x11
  3866                           
  3867                           
  3868                           ; 2 bytes @ 0x11
  3869  0031                     	ds	1
  3870  0032                     setDimmerLights_SwOn@sw:	
  3871  0032                     ___ftdiv@f1:	
  3872                           ; 1 bytes @ 0x12
  3873                           
  3874  0032                     ___ftmul@f2:	
  3875                           ; 3 bytes @ 0x12
  3876                           
  3877                           
  3878                           ; 3 bytes @ 0x12
  3879  0032                     	ds	1
  3880  0033                     ??_setSw_Main:	
  3881  0033                     Exception_Main@i_6825:	
  3882                           ; 0 bytes @ 0x13
  3883                           
  3884                           
  3885                           ; 2 bytes @ 0x13
  3886  0033                     	ds	2
  3887  0035                     ??___ftdiv:	
  3888  0035                     ??___ftmul:	
  3889                           ; 0 bytes @ 0x15
  3890                           
  3891  0035                     setSw_Main@sw:	
  3892                           ; 0 bytes @ 0x15
  3893                           
  3894  0035                     Exception_Main@lights:	
  3895                           ; 1 bytes @ 0x15
  3896                           
  3897                           
  3898                           ; 1 bytes @ 0x15
  3899  0035                     	ds	1
  3900  0036                     ??_Switch_Main:	
  3901  0036                     Exception_Main@error:	
  3902                           ; 0 bytes @ 0x16
  3903                           
  3904                           
  3905                           ; 1 bytes @ 0x16
  3906  0036                     	ds	3
  3907  0039                     ___ftdiv@cntr:	
  3908  0039                     ___ftmul@exp:	
  3909                           ; 1 bytes @ 0x19
  3910                           
  3911                           
  3912                           ; 1 bytes @ 0x19
  3913  0039                     	ds	1
  3914  003A                     ___ftdiv@f3:	
  3915  003A                     ___ftmul@f3_as_product:	
  3916                           ; 3 bytes @ 0x1A
  3917                           
  3918                           
  3919                           ; 3 bytes @ 0x1A
  3920  003A                     	ds	3
  3921  003D                     ___ftdiv@exp:	
  3922  003D                     ___ftmul@cntr:	
  3923                           ; 1 bytes @ 0x1D
  3924                           
  3925                           
  3926                           ; 1 bytes @ 0x1D
  3927  003D                     	ds	1
  3928  003E                     ___ftdiv@sign:	
  3929  003E                     ___ftmul@sign:	
  3930                           ; 1 bytes @ 0x1E
  3931                           
  3932                           
  3933                           ; 1 bytes @ 0x1E
  3934  003E                     	ds	1
  3935  003F                     ?___ftneg:	
  3936  003F                     ___ftneg@f1:	
  3937                           ; 3 bytes @ 0x1F
  3938                           
  3939                           
  3940                           ; 3 bytes @ 0x1F
  3941  003F                     	ds	3
  3942  0042                     ??___ftneg:	
  3943  0042                     ?___ftadd:	
  3944                           ; 0 bytes @ 0x22
  3945                           
  3946  0042                     ___ftadd@f1:	
  3947                           ; 3 bytes @ 0x22
  3948                           
  3949                           
  3950                           ; 3 bytes @ 0x22
  3951  0042                     	ds	3
  3952  0045                     ___ftadd@f2:	
  3953                           
  3954                           ; 3 bytes @ 0x25
  3955  0045                     	ds	3
  3956  0048                     ??___ftadd:	
  3957                           
  3958                           ; 0 bytes @ 0x28
  3959  0048                     	ds	4
  3960  004C                     ___ftadd@sign:	
  3961                           
  3962                           ; 1 bytes @ 0x2C
  3963  004C                     	ds	1
  3964  004D                     ___ftadd@exp2:	
  3965                           
  3966                           ; 1 bytes @ 0x2D
  3967  004D                     	ds	1
  3968  004E                     ___ftadd@exp1:	
  3969                           
  3970                           ; 1 bytes @ 0x2E
  3971  004E                     	ds	1
  3972  004F                     ?___fttol:	
  3973  004F                     ___fttol@f1:	
  3974                           ; 4 bytes @ 0x2F
  3975                           
  3976                           
  3977                           ; 3 bytes @ 0x2F
  3978  004F                     	ds	4
  3979  0053                     ??___fttol:	
  3980                           
  3981                           ; 0 bytes @ 0x33
  3982  0053                     	ds	4
  3983  0057                     ___fttol@sign1:	
  3984                           
  3985                           ; 1 bytes @ 0x37
  3986  0057                     	ds	1
  3987  0058                     ___fttol@lval:	
  3988                           
  3989                           ; 4 bytes @ 0x38
  3990  0058                     	ds	4
  3991  005C                     ___fttol@exp1:	
  3992                           
  3993                           ; 1 bytes @ 0x3C
  3994  005C                     	ds	1
  3995  005D                     ??_getDimmerLights_PercentToValue:	
  3996  005D                     ??_getDimmerLights_ValueToPercent:	
  3997                           ; 0 bytes @ 0x3D
  3998                           
  3999                           
  4000                           ; 0 bytes @ 0x3D
  4001  005D                     	ds	2
  4002  005F                     getDimmerLights_PercentToValue@value:	
  4003  005F                     getDimmerLights_ValueToPercent@value:	
  4004                           ; 1 bytes @ 0x3F
  4005                           
  4006                           
  4007                           ; 1 bytes @ 0x3F
  4008  005F                     	ds	1
  4009  0060                     getDimmerLights_PercentToValue@i:	
  4010  0060                     getDimmerLights_ValueToPercent@i:	
  4011                           ; 3 bytes @ 0x40
  4012                           
  4013                           
  4014                           ; 3 bytes @ 0x40
  4015  0060                     	ds	3
  4016  0063                     ?_setProductData:	
  4017  0063                     ?_setDimmerIntr_MaxmumValue:	
  4018                           ; 0 bytes @ 0x43
  4019                           
  4020  0063                     ??_Flash_Memory_Initialization:	
  4021                           ; 0 bytes @ 0x43
  4022                           
  4023  0063                     setDimmerIntr_MaxmumValue@value:	
  4024                           ; 0 bytes @ 0x43
  4025                           
  4026  0063                     setProductData@value:	
  4027                           ; 1 bytes @ 0x43
  4028                           
  4029                           
  4030                           ; 1 bytes @ 0x43
  4031  0063                     	ds	1
  4032  0064                     ??_setProductData:	
  4033  0064                     ??_setDimmerIntr_MaxmumValue:	
  4034                           ; 0 bytes @ 0x44
  4035                           
  4036  0064                     Flash_Memory_Initialization@i:	
  4037                           ; 0 bytes @ 0x44
  4038                           
  4039                           
  4040                           ; 1 bytes @ 0x44
  4041  0064                     	ds	1
  4042  0065                     setDimmerIntr_MaxmumValue@lights:	
  4043  0065                     setProductData@address:	
  4044                           ; 1 bytes @ 0x45
  4045                           
  4046                           
  4047                           ; 1 bytes @ 0x45
  4048  0065                     	ds	1
  4049  0066                     ??_DlyOff_Main:	
  4050  0066                     ?_setRF_DimmerLights:	
  4051                           ; 0 bytes @ 0x46
  4052                           
  4053  0066                     ??_setTemp_Main:	
  4054                           ; 0 bytes @ 0x46
  4055                           
  4056  0066                     ??_setLog_Code:	
  4057                           ; 0 bytes @ 0x46
  4058                           
  4059  0066                     ??_setRFSW_AdjControl:	
  4060                           ; 0 bytes @ 0x46
  4061                           
  4062  0066                     ?_setDelayOff_GO:	
  4063                           ; 0 bytes @ 0x46
  4064                           
  4065  0066                     setDelayOff_GO@command:	
  4066                           ; 0 bytes @ 0x46
  4067                           
  4068  0066                     setRF_DimmerLights@on:	
  4069                           ; 1 bytes @ 0x46
  4070                           
  4071                           
  4072                           ; 1 bytes @ 0x46
  4073  0066                     	ds	1
  4074  0067                     ??_setRF_DimmerLights:	
  4075  0067                     ??_Temp_Main:	
  4076                           ; 0 bytes @ 0x47
  4077                           
  4078  0067                     setDelayOff_GO@value:	
  4079                           ; 0 bytes @ 0x47
  4080                           
  4081                           
  4082                           ; 1 bytes @ 0x47
  4083  0067                     	ds	1
  4084  0068                     ??_setDelayOff_GO:	
  4085  0068                     DlyOff_Main@sw:	
  4086                           ; 0 bytes @ 0x48
  4087                           
  4088  0068                     setRFSW_AdjControl@status:	
  4089                           ; 1 bytes @ 0x48
  4090                           
  4091                           
  4092                           ; 1 bytes @ 0x48
  4093  0068                     	ds	1
  4094  0069                     ??_DelayOff_Main:	
  4095  0069                     setRFSW_AdjControl@sw:	
  4096                           ; 0 bytes @ 0x49
  4097                           
  4098  0069                     setRF_DimmerLights@status:	
  4099                           ; 1 bytes @ 0x49
  4100                           
  4101                           
  4102                           ; 1 bytes @ 0x49
  4103  0069                     	ds	1
  4104  006A                     setDelayOff_GO@i:	
  4105  006A                     setRF_DimmerLights@lights:	
  4106                           ; 1 bytes @ 0x4A
  4107                           
  4108                           
  4109                           ; 1 bytes @ 0x4A
  4110  006A                     	ds	1
  4111  006B                     ?_setDimmerLights_Dimming:	
  4112  006B                     setDelayOff_GO@j:	
  4113                           ; 0 bytes @ 0x4B
  4114                           
  4115  006B                     setDimmerLights_Dimming@status:	
  4116                           ; 1 bytes @ 0x4B
  4117                           
  4118                           
  4119                           ; 1 bytes @ 0x4B
  4120  006B                     	ds	1
  4121  006C                     ??_setDimmerLights_Dimming:	
  4122  006C                     setDelayOff_GO@k:	
  4123                           ; 0 bytes @ 0x4C
  4124                           
  4125                           
  4126                           ; 1 bytes @ 0x4C
  4127  006C                     	ds	1
  4128  006D                     setDelayOff_GO@sw:	
  4129  006D                     setDimmerLights_Dimming@lights:	
  4130                           ; 1 bytes @ 0x4D
  4131                           
  4132                           
  4133                           ; 1 bytes @ 0x4D
  4134  006D                     	ds	1
  4135  006E                     ??_setDimmerLights_Main:	
  4136  006E                     ??_setControl_Lights_Table:	
  4137                           ; 0 bytes @ 0x4E
  4138                           
  4139  006E                     ??_DimmerLights_Main:	
  4140                           ; 0 bytes @ 0x4E
  4141                           
  4142  006E                     ??_RF_Main:	
  4143                           ; 0 bytes @ 0x4E
  4144                           
  4145  006E                     ??_main:	
  4146                           ; 0 bytes @ 0x4E
  4147                           
  4148                           
  4149                           	psect	maintext
  4150  1551                     __pmaintext:	
  4151                           ; 0 bytes @ 0x4E
  4152 ;;
  4153 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4154 ;;
  4155 ;; *************** function _main *****************
  4156 ;; Defined at:
  4157 ;;		line 7 in file "../src/main_B1.c"
  4158 ;; Parameters:    Size  Location     Type
  4159 ;;  argc            2    0[BANK4 ] int 
  4160 ;;  argv            2    2[BANK4 ] PTR PTR unsigned char 
  4161 ;; Auto vars:     Size  Location     Type
  4162 ;;		None
  4163 ;; Return value:  Size  Location     Type
  4164 ;;                  2    0[BANK4 ] int 
  4165 ;; Registers used:
  4166 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4167 ;; Tracked objects:
  4168 ;;		On entry : 17F/0
  4169 ;;		On exit  : 0/0
  4170 ;;		Unchanged: 0/0
  4171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4172 ;;      Params:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  4173 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4174 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4175 ;;      Totals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0
  4176 ;;Total ram usage:        4 bytes
  4177 ;; Hardware stack levels required when called:   13
  4178 ;; This function calls:
  4179 ;;		_Buzzer_Initialization
  4180 ;;		_Buzzer_Main
  4181 ;;		_CC2500_PowerOnInitial
  4182 ;;		_DelayOff_Initialization
  4183 ;;		_DelayOff_Main
  4184 ;;		_DimmerLights_Initialization
  4185 ;;		_DimmerLights_Main
  4186 ;;		_Exception_Main
  4187 ;;		_Flash_Memory_Initialization
  4188 ;;		_Flash_Memory_Main
  4189 ;;		_LED_Initialization
  4190 ;;		_LED_Main
  4191 ;;		_Load_Initialization
  4192 ;;		_Load_Main
  4193 ;;		_Mcu_Initialization
  4194 ;;		_RF_Initialization
  4195 ;;		_RF_Main
  4196 ;;		_Switch_Initialization
  4197 ;;		_Switch_Main
  4198 ;;		_Temp_Initialization
  4199 ;;		_Temp_Main
  4200 ;;		_WDT_Main
  4201 ;;		_getLoad_AD
  4202 ;;		_getTemp_AD
  4203 ;;		_myMain_Initialization
  4204 ;;		_my_MainTimer
  4205 ;; This function is called by:
  4206 ;;		Startup code after reset
  4207 ;; This function uses a non-reentrant model
  4208 ;;
  4209                           
  4210                           
  4211                           ;psect for function _main
  4212  1551                     _main:	
  4213                           
  4214                           ;main_B1.c: 8: myMain_Initialization();
  4215                           
  4216                           ;incstack = 0
  4217                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4218  1551  319B  2380  3195   	fcall	_myMain_Initialization
  4219                           
  4220                           ;main_B1.c: 9: Mcu_Initialization();
  4221  1554  319B  2310  3195   	fcall	_Mcu_Initialization
  4222                           
  4223                           ;main_B1.c: 10: Flash_Memory_Initialization();
  4224  1557  3184  247E  3195   	fcall	_Flash_Memory_Initialization
  4225                           
  4226                           ;main_B1.c: 11: LED_Initialization();
  4227  155A  319A  2247  3195   	fcall	_LED_Initialization
  4228                           
  4229                           ;main_B1.c: 12: Buzzer_Initialization();
  4230  155D  3199  2153  3195   	fcall	_Buzzer_Initialization
  4231                           
  4232                           ;main_B1.c: 14: ;;
  4233                           ;main_B1.c: 15: Temp_Initialization();
  4234  1560  3199  215F  3195   	fcall	_Temp_Initialization
  4235                           
  4236                           ;main_B1.c: 16: Load_Initialization();
  4237  1563  3199  2156  3195   	fcall	_Load_Initialization
  4238                           
  4239                           ;main_B1.c: 17: ;;
  4240                           ;main_B1.c: 18: DelayOff_Initialization();
  4241  1566  3199  2197  3195   	fcall	_DelayOff_Initialization
  4242                           
  4243                           ;main_B1.c: 20: DimmerLights_Initialization();
  4244  1569  3199  21EB  3195   	fcall	_DimmerLights_Initialization
  4245                           
  4246                           ;main_B1.c: 21: ;;
  4247                           ;main_B1.c: 22: ;;
  4248                           ;main_B1.c: 23: ;;
  4249                           ;main_B1.c: 24: Switch_Initialization();
  4250  156C  3199  21C7  3195   	fcall	_Switch_Initialization
  4251                           
  4252                           ;main_B1.c: 25: RF_Initialization();
  4253  156F  3199  2159  3195   	fcall	_RF_Initialization
  4254                           
  4255                           ;main_B1.c: 26: CC2500_PowerOnInitial();
  4256  1572  319B  23D0  3195   	fcall	_CC2500_PowerOnInitial
  4257  1575                     l10041:	
  4258                           ;main_B1.c: 27: ;;
  4259                           ;main_B1.c: 28: ;;
  4260                           ;main_B1.c: 30: while (1) {
  4261                           
  4262                           
  4263                           ;main_B1.c: 32: if (myMain.PowerON == 1) {
  4264  1575  0022               	movlb	2	; select bank2
  4265  1576  1C20               	btfss	_myMain^(0+256),0
  4266  1577  2D80               	goto	l10045
  4267                           
  4268                           ;main_B1.c: 38: getLoad_AD(0x05);
  4269  1578  3005               	movlw	5
  4270  1579  318A  22A4  3195   	fcall	_getLoad_AD
  4271                           
  4272                           ;main_B1.c: 42: getTemp_AD(0x09);
  4273  157C  3009               	movlw	9
  4274  157D  3192  225C  3195   	fcall	_getTemp_AD
  4275  1580                     l10045:	
  4276                           
  4277                           ;main_B1.c: 57: }
  4278                           ;main_B1.c: 93: if (Timer1.Timeout == 1) {
  4279  1580  0021               	movlb	1	; select bank1
  4280  1581  1C46               	btfss	_Timer1^(0+128),0
  4281  1582  2D75               	goto	l10041
  4282                           
  4283                           ;main_B1.c: 94: Timer1.Timeout = 0;
  4284  1583  1046               	bcf	_Timer1^(0+128),0
  4285                           
  4286                           ;main_B1.c: 96: my_MainTimer();
  4287  1584  3191  21E1  3195   	fcall	_my_MainTimer
  4288                           
  4289                           ;main_B1.c: 97: WDT_Main();
  4290  1587  319B  2322  3195   	fcall	_WDT_Main
  4291                           
  4292                           ;main_B1.c: 98: ;;
  4293                           ;main_B1.c: 99: ;;
  4294                           ;main_B1.c: 100: if (myMain.PowerON == 1) {
  4295  158A  0022               	movlb	2	; select bank2
  4296  158B  1C20               	btfss	_myMain^(0+256),0
  4297  158C  2D75               	goto	l10041
  4298                           
  4299                           ;main_B1.c: 101: Flash_Memory_Main();
  4300  158D  3191  213B  3195   	fcall	_Flash_Memory_Main
  4301                           
  4302                           ;main_B1.c: 103: LED_Main();
  4303  1590  319A  2253  3195   	fcall	_LED_Main
  4304                           
  4305                           ;main_B1.c: 104: Buzzer_Main();
  4306  1593  3193  2364  3195   	fcall	_Buzzer_Main
  4307                           
  4308                           ;main_B1.c: 106: ;;
  4309                           ;main_B1.c: 107: Temp_Main();
  4310  1596  3199  2162  3195   	fcall	_Temp_Main
  4311                           
  4312                           ;main_B1.c: 108: Load_Main();
  4313  1599  3180  2052  3195   	fcall	_Load_Main
  4314                           
  4315                           ;main_B1.c: 109: ;;
  4316                           ;main_B1.c: 111: ;;
  4317                           ;main_B1.c: 112: DimmerLights_Main();
  4318  159C  319D  25DB  3195   	fcall	_DimmerLights_Main
  4319                           
  4320                           ;main_B1.c: 113: Switch_Main();
  4321  159F  319A  220C  3195   	fcall	_Switch_Main
  4322                           
  4323                           ;main_B1.c: 114: ;;
  4324                           ;main_B1.c: 115: ;;
  4325                           ;main_B1.c: 117: RF_Main();
  4326  15A2  3199  215C  3195   	fcall	_RF_Main
  4327                           
  4328                           ;main_B1.c: 118: DelayOff_Main();
  4329  15A5  3199  219F  3195   	fcall	_DelayOff_Main
  4330                           
  4331                           ;main_B1.c: 119: ;;
  4332                           ;main_B1.c: 120: ;;
  4333                           ;main_B1.c: 121: Exception_Main();
  4334  15A8  3186  2644  3195   	fcall	_Exception_Main
  4335  15AB  2D75               	goto	l10041
  4336  15AC                     __end_of_main:	
  4337                           ;main_B1.c: 128: }
  4338                           ;main_B1.c: 129: }
  4339                           ;main_B1.c: 163: }
  4340                           ;main_B1.c: 164: return (0);
  4341                           ;	Return value of _main is never used
  4342                           
  4343                           
  4344                           	psect	text1
  4345  11E1                     __ptext1:	
  4346 ;; *************** function _my_MainTimer *****************
  4347 ;; Defined at:
  4348 ;;		line 185 in file "../src/main_B1.c"
  4349 ;; Parameters:    Size  Location     Type
  4350 ;;		None
  4351 ;; Auto vars:     Size  Location     Type
  4352 ;;		None
  4353 ;; Return value:  Size  Location     Type
  4354 ;;		None               void
  4355 ;; Registers used:
  4356 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4357 ;; Tracked objects:
  4358 ;;		On entry : 0/0
  4359 ;;		On exit  : 0/0
  4360 ;;		Unchanged: 0/0
  4361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4363 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4364 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4365 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4366 ;;Total ram usage:        1 bytes
  4367 ;; Hardware stack levels used:    1
  4368 ;; Hardware stack levels required when called:    7
  4369 ;; This function calls:
  4370 ;;		_setBuz
  4371 ;; This function is called by:
  4372 ;;		_main
  4373 ;; This function uses a non-reentrant model
  4374 ;;
  4375                           
  4376                           
  4377                           ;psect for function _my_MainTimer
  4378  11E1                     _my_MainTimer:	
  4379                           
  4380                           ;main_B1.c: 187: if (myMain.PowerON == 0) {
  4381                           
  4382                           ;incstack = 0
  4383                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4384  11E1  0022               	movlb	2	; select bank2
  4385  11E2  1820               	btfsc	_myMain^(0+256),0
  4386  11E3  29FB               	goto	l9939
  4387                           
  4388                           ;main_B1.c: 188: myMain.PowerCount++;
  4389  11E4  3001               	movlw	1
  4390  11E5  0020               	movlb	0	; select bank0
  4391  11E6  00AE               	movwf	??_my_MainTimer
  4392  11E7  082E               	movf	??_my_MainTimer,w
  4393  11E8  0022               	movlb	2	; select bank2
  4394  11E9  07A1               	addwf	(_myMain^(0+256)+1),f
  4395                           
  4396                           ;main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  4397  11EA  0821               	movf	(_myMain^(0+256)+1),w
  4398  11EB  3A4B               	xorlw	75
  4399  11EC  1D03               	skipz
  4400  11ED  0008               	return
  4401                           
  4402                           ;main_B1.c: 190: myMain.PowerCount = 0;
  4403  11EE  01A1               	clrf	(_myMain^(0+256)+1)
  4404                           
  4405                           ;main_B1.c: 191: myMain.PowerON = 1;
  4406  11EF  1420               	bsf	_myMain^(0+256),0
  4407                           
  4408                           ;main_B1.c: 196: setBuz(3, 50);
  4409  11F0  3032               	movlw	50
  4410  11F1  0020               	movlb	0	; select bank0
  4411  11F2  00AA               	movwf	setBuz@time
  4412  11F3  3000               	movlw	0
  4413  11F4  00AB               	movwf	setBuz@time+1
  4414  11F5  3003               	movlw	3
  4415  11F6  3194  24F8         	fcall	_setBuz
  4416                           
  4417                           ;main_B1.c: 197: myMain.SelfTest = 1;
  4418  11F8  0022               	movlb	2	; select bank2
  4419  11F9  1620               	bsf	_myMain^(0+256),4
  4420                           
  4421                           ;main_B1.c: 206: }
  4422                           ;main_B1.c: 207: } else {
  4423  11FA  0008               	return
  4424  11FB                     l9939:	
  4425                           
  4426                           ;main_B1.c: 208: myMain.PowerCount++;
  4427  11FB  3001               	movlw	1
  4428  11FC  0020               	movlb	0	; select bank0
  4429  11FD  00AE               	movwf	??_my_MainTimer
  4430  11FE  082E               	movf	??_my_MainTimer,w
  4431  11FF  0022               	movlb	2	; select bank2
  4432  1200  07A1               	addwf	(_myMain^(0+256)+1),f
  4433                           
  4434                           ;main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  4435  1201  0821               	movf	(_myMain^(0+256)+1),w
  4436  1202  3A32               	xorlw	50
  4437  1203  1903               	btfsc	3,2
  4438                           
  4439                           ;main_B1.c: 210: myMain.PowerCount = 0;
  4440  1204  01A1               	clrf	(_myMain^(0+256)+1)
  4441                           
  4442                           ;main_B1.c: 226: }
  4443                           ;main_B1.c: 228: myMain.Count1++;
  4444  1205  3001               	movlw	1
  4445  1206  07A4               	addwf	(_myMain^(0+256)+4),f
  4446  1207  3000               	movlw	0
  4447  1208  3DA5               	addwfc	((_myMain+1)^(0+256)+4),f
  4448                           
  4449                           ;main_B1.c: 229: if (myMain.Count1 == (1000 / 20)) {
  4450  1209  3004               	movlw	4
  4451  120A  3E20               	addlw	_myMain& (0+255)
  4452  120B  0086               	movwf	6
  4453  120C  3001               	movlw	1	; select bank2/3
  4454  120D  0087               	movwf	7
  4455  120E  3F40               	moviw [0]fsr1
  4456  120F  3A32               	xorlw	50
  4457  1210  1D03               	skipz
  4458  1211  2A14               	goto	u11555
  4459  1212  3F41               	moviw [1]fsr1
  4460  1213  3A00               	xorlw	0
  4461  1214                     u11555:	
  4462  1214  1D03               	skipz
  4463  1215  0008               	return
  4464                           
  4465                           ;main_B1.c: 230: myMain.Count1 = 0;
  4466  1216  01A4               	clrf	(_myMain^(0+256)+4)
  4467  1217  01A5               	clrf	((_myMain+1)^(0+256)+4)
  4468                           
  4469                           ;main_B1.c: 242: if (myMain.Flag) {
  4470  1218  1CA0               	btfss	_myMain^(0+256),1
  4471  1219  2A1C               	goto	l2831
  4472                           
  4473                           ;main_B1.c: 243: myMain.Flag = 0;
  4474  121A  10A0               	bcf	_myMain^(0+256),1
  4475                           
  4476                           ;main_B1.c: 252: } else {
  4477  121B  0008               	return
  4478  121C                     l2831:	
  4479                           
  4480                           ;main_B1.c: 253: myMain.Flag = 1;
  4481  121C  14A0               	bsf	_myMain^(0+256),1
  4482  121D  0008               	return
  4483  121E                     __end_of_my_MainTimer:	
  4484                           
  4485                           	psect	text2
  4486  1B80                     __ptext2:	
  4487 ;; *************** function _myMain_Initialization *****************
  4488 ;; Defined at:
  4489 ;;		line 170 in file "../src/main_B1.c"
  4490 ;; Parameters:    Size  Location     Type
  4491 ;;		None
  4492 ;; Auto vars:     Size  Location     Type
  4493 ;;		None
  4494 ;; Return value:  Size  Location     Type
  4495 ;;		None               void
  4496 ;; Registers used:
  4497 ;;		wreg, fsr1l, fsr1h
  4498 ;; Tracked objects:
  4499 ;;		On entry : 0/0
  4500 ;;		On exit  : 0/0
  4501 ;;		Unchanged: 0/0
  4502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4504 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4505 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4506 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4507 ;;Total ram usage:        1 bytes
  4508 ;; Hardware stack levels used:    1
  4509 ;; Hardware stack levels required when called:    5
  4510 ;; This function calls:
  4511 ;;		Nothing
  4512 ;; This function is called by:
  4513 ;;		_main
  4514 ;; This function uses a non-reentrant model
  4515 ;;
  4516                           
  4517                           
  4518                           ;psect for function _myMain_Initialization
  4519  1B80                     _myMain_Initialization:	
  4520                           
  4521                           ;main_B1.c: 173: product = &_product;
  4522                           
  4523                           ;incstack = 0
  4524                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4525  1B80  3045               	movlw	__product& (0+255)
  4526  1B81  0020               	movlb	0	; select bank0
  4527  1B82  00A1               	movwf	??_myMain_Initialization
  4528  1B83  0821               	movf	??_myMain_Initialization,w
  4529  1B84  0021               	movlb	1	; select bank1
  4530  1B85  00ED               	movwf	_product^(0+128)
  4531                           
  4532                           ;main_B1.c: 174: product->Data[20] = 210;
  4533  1B86  30D2               	movlw	210
  4534  1B87  0020               	movlb	0	; select bank0
  4535  1B88  00A1               	movwf	??_myMain_Initialization
  4536  1B89  0021               	movlb	1	; select bank1
  4537  1B8A  086D               	movf	_product^(0+128),w
  4538  1B8B  3E14               	addlw	20
  4539  1B8C  0086               	movwf	6
  4540  1B8D  3002               	movlw	2	; select bank4/5
  4541  1B8E  0087               	movwf	7
  4542  1B8F  0020               	movlb	0	; select bank0
  4543  1B90  0821               	movf	??_myMain_Initialization,w
  4544  1B91  0081               	movwf	1
  4545  1B92  0008               	return
  4546  1B93                     __end_of_myMain_Initialization:	
  4547                           
  4548                           	psect	text3
  4549  125C                     __ptext3:	
  4550 ;; *************** function _getTemp_AD *****************
  4551 ;; Defined at:
  4552 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4553 ;; Parameters:    Size  Location     Type
  4554 ;;  channel         1    wreg     unsigned char 
  4555 ;; Auto vars:     Size  Location     Type
  4556 ;;  channel         1    6[BANK0 ] unsigned char 
  4557 ;;  ADRES           2    7[BANK0 ] unsigned int 
  4558 ;; Return value:  Size  Location     Type
  4559 ;;		None               void
  4560 ;; Registers used:
  4561 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4562 ;; Tracked objects:
  4563 ;;		On entry : 0/0
  4564 ;;		On exit  : 0/0
  4565 ;;		Unchanged: 0/0
  4566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4567 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4568 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4569 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4570 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4571 ;;Total ram usage:        4 bytes
  4572 ;; Hardware stack levels used:    1
  4573 ;; Hardware stack levels required when called:    7
  4574 ;; This function calls:
  4575 ;;		_getAD
  4576 ;; This function is called by:
  4577 ;;		_main
  4578 ;; This function uses a non-reentrant model
  4579 ;;
  4580                           
  4581                           
  4582                           ;psect for function _getTemp_AD
  4583  125C                     _getTemp_AD:	
  4584                           
  4585                           ;incstack = 0
  4586                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4587                           ;getTemp_AD@channel stored from wreg
  4588  125C  0020               	movlb	0	; select bank0
  4589  125D  00A6               	movwf	getTemp_AD@channel
  4590                           
  4591                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  4592  125E  01A7               	clrf	getTemp_AD@ADRES
  4593  125F  01A8               	clrf	getTemp_AD@ADRES+1
  4594                           
  4595                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  4596  1260  0021               	movlb	1	; select bank1
  4597  1261  1D5B               	btfss	_Temp^(0+128),2
  4598  1262  2A8C               	goto	l8743
  4599                           
  4600                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0xf0);
  4601  1263  30F0               	movlw	240
  4602  1264  0020               	movlb	0	; select bank0
  4603  1265  00A5               	movwf	??_getTemp_AD
  4604  1266  0825               	movf	??_getTemp_AD,w
  4605  1267  00A1               	movwf	getAD@adcon1
  4606  1268  0826               	movf	getTemp_AD@channel,w
  4607  1269  319E  267E  3192   	fcall	_getAD
  4608  126C  0020               	movlb	0	; select bank0
  4609  126D  0822               	movf	?_getAD+1,w
  4610  126E  01A8               	clrf	getTemp_AD@ADRES+1
  4611  126F  07A8               	addwf	getTemp_AD@ADRES+1,f
  4612  1270  0821               	movf	?_getAD,w
  4613  1271  01A7               	clrf	getTemp_AD@ADRES
  4614  1272  07A7               	addwf	getTemp_AD@ADRES,f
  4615                           
  4616                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  4617  1273  0828               	movf	getTemp_AD@ADRES+1,w
  4618  1274  0427               	iorwf	getTemp_AD@ADRES,w
  4619  1275  1903               	skipnz
  4620  1276  2A8C               	goto	l8743
  4621                           
  4622                           ;OverTemperature_B1.c: 30: if (Temp.ADV < ADRES) {
  4623  1277  0828               	movf	getTemp_AD@ADRES+1,w
  4624  1278  0021               	movlb	1	; select bank1
  4625  1279  0264               	subwf	((_Temp+1)^(0+128)+8),w
  4626  127A  1D03               	skipz
  4627  127B  2A80               	goto	u9435
  4628  127C  0020               	movlb	0	; select bank0
  4629  127D  0827               	movf	getTemp_AD@ADRES,w
  4630  127E  0021               	movlb	1	; select bank1
  4631  127F  0263               	subwf	(_Temp^(0+128)+8),w
  4632  1280                     u9435:	
  4633  1280  1803               	skipnc
  4634  1281  2A8C               	goto	l8743
  4635                           
  4636                           ;OverTemperature_B1.c: 31: Temp.ADV = ADRES;
  4637  1282  0020               	movlb	0	; select bank0
  4638  1283  0828               	movf	getTemp_AD@ADRES+1,w
  4639  1284  0021               	movlb	1	; select bank1
  4640  1285  01E4               	clrf	((_Temp+1)^(0+128)+8)
  4641  1286  07E4               	addwf	((_Temp+1)^(0+128)+8),f
  4642  1287  0020               	movlb	0	; select bank0
  4643  1288  0827               	movf	getTemp_AD@ADRES,w
  4644  1289  0021               	movlb	1	; select bank1
  4645  128A  01E3               	clrf	(_Temp^(0+128)+8)
  4646  128B  07E3               	addwf	(_Temp^(0+128)+8),f
  4647  128C                     l8743:	
  4648                           
  4649                           ;OverTemperature_B1.c: 32: }
  4650                           ;OverTemperature_B1.c: 33: }
  4651                           ;OverTemperature_B1.c: 34: }
  4652                           ;OverTemperature_B1.c: 41: ADRES = getAD(channel, 0xf0);
  4653  128C  30F0               	movlw	240
  4654  128D  0020               	movlb	0	; select bank0
  4655  128E  00A5               	movwf	??_getTemp_AD
  4656  128F  0825               	movf	??_getTemp_AD,w
  4657  1290  00A1               	movwf	getAD@adcon1
  4658  1291  0826               	movf	getTemp_AD@channel,w
  4659  1292  319E  267E         	fcall	_getAD
  4660  1294  0020               	movlb	0	; select bank0
  4661  1295  0822               	movf	?_getAD+1,w
  4662  1296  01A8               	clrf	getTemp_AD@ADRES+1
  4663  1297  07A8               	addwf	getTemp_AD@ADRES+1,f
  4664  1298  0821               	movf	?_getAD,w
  4665  1299  01A7               	clrf	getTemp_AD@ADRES
  4666  129A  07A7               	addwf	getTemp_AD@ADRES,f
  4667  129B  0008               	return
  4668  129C                     __end_of_getTemp_AD:	
  4669                           
  4670                           	psect	text4
  4671  0AA4                     __ptext4:	
  4672 ;; *************** function _getLoad_AD *****************
  4673 ;; Defined at:
  4674 ;;		line 15 in file "../src/OverLoad_B1.c"
  4675 ;; Parameters:    Size  Location     Type
  4676 ;;  channel         1    wreg     unsigned char 
  4677 ;; Auto vars:     Size  Location     Type
  4678 ;;  channel         1    7[BANK0 ] unsigned char 
  4679 ;;  ADRES           2   10[BANK0 ] unsigned int 
  4680 ;;  i               1   12[BANK0 ] unsigned char 
  4681 ;;  j               1    9[BANK0 ] unsigned char 
  4682 ;;  k               1    8[BANK0 ] unsigned char 
  4683 ;; Return value:  Size  Location     Type
  4684 ;;		None               void
  4685 ;; Registers used:
  4686 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4687 ;; Tracked objects:
  4688 ;;		On entry : 0/0
  4689 ;;		On exit  : 0/0
  4690 ;;		Unchanged: 0/0
  4691 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4692 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4693 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4694 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4695 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4696 ;;Total ram usage:        8 bytes
  4697 ;; Hardware stack levels used:    1
  4698 ;; Hardware stack levels required when called:    7
  4699 ;; This function calls:
  4700 ;;		_getAD
  4701 ;; This function is called by:
  4702 ;;		_main
  4703 ;; This function uses a non-reentrant model
  4704 ;;
  4705                           
  4706                           
  4707                           ;psect for function _getLoad_AD
  4708  0AA4                     _getLoad_AD:	
  4709                           
  4710                           ;incstack = 0
  4711                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4712                           ;getLoad_AD@channel stored from wreg
  4713  0AA4  0020               	movlb	0	; select bank0
  4714  0AA5  00A7               	movwf	getLoad_AD@channel
  4715                           
  4716                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4717  0AA6  01AC               	clrf	getLoad_AD@i
  4718  0AA7  01A9               	clrf	getLoad_AD@j
  4719  0AA8  01A8               	clrf	getLoad_AD@k
  4720                           
  4721                           ;OverLoad_B1.c: 17: ADtype ADRES = 0;
  4722  0AA9  01AA               	clrf	getLoad_AD@ADRES
  4723  0AAA  01AB               	clrf	getLoad_AD@ADRES+1
  4724                           
  4725                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4726  0AAB  0022               	movlb	2	; select bank2
  4727  0AAC  1E40               	btfss	_Load^(0+256),4
  4728  0AAD  0008               	return
  4729                           
  4730                           ;OverLoad_B1.c: 20: ADRES = getAD(channel, 0xf3);
  4731  0AAE  30F3               	movlw	243
  4732  0AAF  0020               	movlb	0	; select bank0
  4733  0AB0  00A5               	movwf	??_getLoad_AD
  4734  0AB1  0825               	movf	??_getLoad_AD,w
  4735  0AB2  00A1               	movwf	getAD@adcon1
  4736  0AB3  0827               	movf	getLoad_AD@channel,w
  4737  0AB4  319E  267E  318A   	fcall	_getAD
  4738  0AB7  0020               	movlb	0	; select bank0
  4739  0AB8  0822               	movf	?_getAD+1,w
  4740  0AB9  01AB               	clrf	getLoad_AD@ADRES+1
  4741  0ABA  07AB               	addwf	getLoad_AD@ADRES+1,f
  4742  0ABB  0821               	movf	?_getAD,w
  4743  0ABC  01AA               	clrf	getLoad_AD@ADRES
  4744  0ABD  07AA               	addwf	getLoad_AD@ADRES,f
  4745                           
  4746                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4747  0ABE  01AC               	clrf	getLoad_AD@i
  4748  0ABF  3004               	movlw	4
  4749  0AC0  022C               	subwf	getLoad_AD@i,w
  4750  0AC1  1803               	btfsc	3,0
  4751  0AC2  2AEA               	goto	l8553
  4752  0AC3                     l8541:	
  4753                           
  4754                           ;OverLoad_B1.c: 22: if (Load.AH[i] < ADRES && j == 0) {
  4755  0AC3  352C               	lslf	getLoad_AD@i,w
  4756  0AC4  3E4B               	addlw	(_Load+11)& (0+255)
  4757  0AC5  0086               	movwf	6
  4758  0AC6  3001               	movlw	1	; select bank2/3
  4759  0AC7  0087               	movwf	7
  4760  0AC8  3F40               	moviw [0]fsr1
  4761  0AC9  00A5               	movwf	??_getLoad_AD
  4762  0ACA  3F41               	moviw [1]fsr1
  4763  0ACB  00A6               	movwf	??_getLoad_AD+1
  4764  0ACC  082B               	movf	getLoad_AD@ADRES+1,w
  4765  0ACD  0226               	subwf	??_getLoad_AD+1,w
  4766  0ACE  1D03               	skipz
  4767  0ACF  2AD2               	goto	u9025
  4768  0AD0  082A               	movf	getLoad_AD@ADRES,w
  4769  0AD1  0225               	subwf	??_getLoad_AD,w
  4770  0AD2                     u9025:	
  4771  0AD2  1803               	skipnc
  4772  0AD3  2AE2               	goto	l8549
  4773  0AD4  08A9               	movf	getLoad_AD@j,f
  4774  0AD5  1D03               	skipz
  4775  0AD6  2AE2               	goto	l8549
  4776                           
  4777                           ;OverLoad_B1.c: 23: Load.AH[i] = ADRES;
  4778  0AD7  352C               	lslf	getLoad_AD@i,w
  4779  0AD8  3E4B               	addlw	(_Load+11)& (0+255)
  4780  0AD9  0086               	movwf	6
  4781  0ADA  3001               	movlw	1	; select bank2/3
  4782  0ADB  0087               	movwf	7
  4783  0ADC  082A               	movf	getLoad_AD@ADRES,w
  4784  0ADD  3FC0               	movwi [0]fsr1
  4785  0ADE  082B               	movf	getLoad_AD@ADRES+1,w
  4786  0ADF  3FC1               	movwi [1]fsr1
  4787                           
  4788                           ;OverLoad_B1.c: 24: j = 1;
  4789  0AE0  01A9               	clrf	getLoad_AD@j
  4790  0AE1  0AA9               	incf	getLoad_AD@j,f
  4791  0AE2                     l8549:	
  4792  0AE2  3001               	movlw	1
  4793  0AE3  00A5               	movwf	??_getLoad_AD
  4794  0AE4  0825               	movf	??_getLoad_AD,w
  4795  0AE5  07AC               	addwf	getLoad_AD@i,f
  4796  0AE6  3004               	movlw	4
  4797  0AE7  022C               	subwf	getLoad_AD@i,w
  4798  0AE8  1C03               	skipc
  4799  0AE9  2AC3               	goto	l8541
  4800  0AEA                     l8553:	
  4801                           
  4802                           ;OverLoad_B1.c: 25: }
  4803                           ;OverLoad_B1.c: 26: }
  4804                           ;OverLoad_B1.c: 27: if (j == 0) {
  4805  0AEA  08A9               	movf	getLoad_AD@j,f
  4806  0AEB  1D03               	skipz
  4807  0AEC  0008               	return
  4808                           
  4809                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4810  0AED  01AC               	clrf	getLoad_AD@i
  4811  0AEE                     L1:	
  4812  0AEE  3004               	movlw	4
  4813  0AEF  022C               	subwf	getLoad_AD@i,w
  4814  0AF0  1803               	btfsc	3,0
  4815  0AF1  0008               	return
  4816                           
  4817                           ;OverLoad_B1.c: 29: if (Load.AL[i] > ADRES && k == 0) {
  4818  0AF2  352C               	lslf	getLoad_AD@i,w
  4819  0AF3  3E55               	addlw	(_Load+21)& (0+255)
  4820  0AF4  0086               	movwf	6
  4821  0AF5  3001               	movlw	1	; select bank2/3
  4822  0AF6  0087               	movwf	7
  4823  0AF7  3F40               	moviw [0]fsr1
  4824  0AF8  00A5               	movwf	??_getLoad_AD
  4825  0AF9  3F41               	moviw [1]fsr1
  4826  0AFA  00A6               	movwf	??_getLoad_AD+1
  4827  0AFB  0826               	movf	??_getLoad_AD+1,w
  4828  0AFC  022B               	subwf	getLoad_AD@ADRES+1,w
  4829  0AFD  1D03               	skipz
  4830  0AFE  2B01               	goto	u9075
  4831  0AFF  0825               	movf	??_getLoad_AD,w
  4832  0B00  022A               	subwf	getLoad_AD@ADRES,w
  4833  0B01                     u9075:	
  4834  0B01  1803               	skipnc
  4835  0B02  2B11               	goto	l8569
  4836  0B03  08A8               	movf	getLoad_AD@k,f
  4837  0B04  1D03               	skipz
  4838  0B05  2B11               	goto	l8569
  4839                           
  4840                           ;OverLoad_B1.c: 30: Load.AL[i] = ADRES;
  4841  0B06  352C               	lslf	getLoad_AD@i,w
  4842  0B07  3E55               	addlw	(_Load+21)& (0+255)
  4843  0B08  0086               	movwf	6
  4844  0B09  3001               	movlw	1	; select bank2/3
  4845  0B0A  0087               	movwf	7
  4846  0B0B  082A               	movf	getLoad_AD@ADRES,w
  4847  0B0C  3FC0               	movwi [0]fsr1
  4848  0B0D  082B               	movf	getLoad_AD@ADRES+1,w
  4849  0B0E  3FC1               	movwi [1]fsr1
  4850                           
  4851                           ;OverLoad_B1.c: 31: k = 1;
  4852  0B0F  01A8               	clrf	getLoad_AD@k
  4853  0B10  0AA8               	incf	getLoad_AD@k,f
  4854  0B11                     l8569:	
  4855  0B11  3001               	movlw	1
  4856  0B12  00A5               	movwf	??_getLoad_AD
  4857  0B13  0825               	movf	??_getLoad_AD,w
  4858  0B14  07AC               	addwf	getLoad_AD@i,f
  4859  0B15  2AEE               	goto	L1
  4860  0B16                     __end_of_getLoad_AD:	
  4861                           
  4862                           	psect	text5
  4863  1E7E                     __ptext5:	
  4864 ;; *************** function _getAD *****************
  4865 ;; Defined at:
  4866 ;;		line 459 in file "../src/MCU_B1.c"
  4867 ;; Parameters:    Size  Location     Type
  4868 ;;  adcon0          1    wreg     unsigned char 
  4869 ;;  adcon1          1    1[BANK0 ] unsigned char 
  4870 ;; Auto vars:     Size  Location     Type
  4871 ;;  adcon0          1    4[BANK0 ] unsigned char 
  4872 ;; Return value:  Size  Location     Type
  4873 ;;                  2    1[BANK0 ] int 
  4874 ;; Registers used:
  4875 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4876 ;; Tracked objects:
  4877 ;;		On entry : 0/0
  4878 ;;		On exit  : 0/0
  4879 ;;		Unchanged: 0/0
  4880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4881 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4882 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4884 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4885 ;;Total ram usage:        4 bytes
  4886 ;; Hardware stack levels used:    1
  4887 ;; Hardware stack levels required when called:    6
  4888 ;; This function calls:
  4889 ;;		_Timeout_Counter
  4890 ;;		_set_TimeoutCleared
  4891 ;; This function is called by:
  4892 ;;		_getLoad_AD
  4893 ;;		_getTemp_AD
  4894 ;; This function uses a non-reentrant model
  4895 ;;
  4896                           
  4897                           
  4898                           ;psect for function _getAD
  4899  1E7E                     _getAD:	
  4900                           
  4901                           ;incstack = 0
  4902                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4903                           ;getAD@adcon0 stored from wreg
  4904  1E7E  0020               	movlb	0	; select bank0
  4905  1E7F  00A4               	movwf	getAD@adcon0
  4906                           
  4907                           ;MCU_B1.c: 460: ADCON0 = adcon0;
  4908  1E80  0824               	movf	getAD@adcon0,w
  4909  1E81  0021               	movlb	1	; select bank1
  4910  1E82  009D               	movwf	29	;volatile
  4911                           
  4912                           ;MCU_B1.c: 461: ADCON1 = adcon1;
  4913  1E83  0020               	movlb	0	; select bank0
  4914  1E84  0821               	movf	getAD@adcon1,w
  4915  1E85  0021               	movlb	1	; select bank1
  4916  1E86  009E               	movwf	30	;volatile
  4917                           
  4918                           ;MCU_B1.c: 462: GO_nDONE = 1;
  4919  1E87  149D               	bsf	29,1	;volatile
  4920                           
  4921                           ;MCU_B1.c: 463: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4922  1E88  2E8C               	goto	l8047
  4923  1E89                     l8045:	
  4924                           
  4925                           ;MCU_B1.c: 464: Timeout_Counter();
  4926  1E89  3188  2000  319E   	fcall	_Timeout_Counter
  4927  1E8C                     l8047:	
  4928  1E8C  0021               	movlb	1	; select bank1
  4929  1E8D  1C9D               	btfss	29,1	;volatile
  4930  1E8E  2E92               	goto	l8051
  4931  1E8F  0022               	movlb	2	; select bank2
  4932  1E90  1D2A               	btfss	(_myMain^(0+256)+10),2
  4933  1E91  2E89               	goto	l8045
  4934  1E92                     l8051:	
  4935                           
  4936                           ;MCU_B1.c: 465: };
  4937                           ;MCU_B1.c: 466: set_TimeoutCleared();
  4938  1E92  3199  2179         	fcall	_set_TimeoutCleared
  4939                           
  4940                           ;MCU_B1.c: 467: return ((ADRESH*256)+ADRESL);
  4941  1E94  0021               	movlb	1	; select bank1
  4942  1E95  081C               	movf	28,w	;volatile
  4943  1E96  0020               	movlb	0	; select bank0
  4944  1E97  01A2               	clrf	?_getAD+1
  4945  1E98  07A2               	addwf	?_getAD+1,f
  4946  1E99  0021               	movlb	1	; select bank1
  4947  1E9A  081B               	movf	27,w	;volatile
  4948  1E9B  0020               	movlb	0	; select bank0
  4949  1E9C  01A1               	clrf	?_getAD
  4950  1E9D  07A1               	addwf	?_getAD,f
  4951  1E9E  0008               	return
  4952  1E9F                     __end_of_getAD:	
  4953                           
  4954                           	psect	text6
  4955  1B22                     __ptext6:	
  4956 ;; *************** function _WDT_Main *****************
  4957 ;; Defined at:
  4958 ;;		line 1103 in file "../src/MCU_B1.c"
  4959 ;; Parameters:    Size  Location     Type
  4960 ;;		None
  4961 ;; Auto vars:     Size  Location     Type
  4962 ;;		None
  4963 ;; Return value:  Size  Location     Type
  4964 ;;		None               void
  4965 ;; Registers used:
  4966 ;;		wreg, status,2, status,0, pclath, cstack
  4967 ;; Tracked objects:
  4968 ;;		On entry : 0/0
  4969 ;;		On exit  : 0/0
  4970 ;;		Unchanged: 0/0
  4971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4974 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4975 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4976 ;;Total ram usage:        1 bytes
  4977 ;; Hardware stack levels used:    1
  4978 ;; Hardware stack levels required when called:    6
  4979 ;; This function calls:
  4980 ;;		_WDT_Clearing
  4981 ;; This function is called by:
  4982 ;;		_main
  4983 ;; This function uses a non-reentrant model
  4984 ;;
  4985                           
  4986                           
  4987                           ;psect for function _WDT_Main
  4988  1B22                     _WDT_Main:	
  4989                           
  4990                           ;MCU_B1.c: 1104: if (WDT.Enable == 1) {
  4991                           
  4992                           ;incstack = 0
  4993                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4994  1B22  0021               	movlb	1	; select bank1
  4995  1B23  1C49               	btfss	_WDT^(0+128),0
  4996  1B24  0008               	return
  4997                           
  4998                           ;MCU_B1.c: 1105: if (WDT.Timer-- > 0) {
  4999  1B25  3001               	movlw	1
  5000  1B26  02CA               	subwf	(_WDT^(0+128)+1),f
  5001  1B27  084A               	movf	(_WDT^(0+128)+1),w
  5002  1B28  3AFF               	xorlw	255
  5003  1B29  1903               	skipnz
  5004  1B2A  0008               	return
  5005                           
  5006                           ;MCU_B1.c: 1106: WDT.Timer = 100;
  5007  1B2B  3064               	movlw	100
  5008  1B2C  0020               	movlb	0	; select bank0
  5009  1B2D  00A1               	movwf	??_WDT_Main
  5010  1B2E  0821               	movf	??_WDT_Main,w
  5011  1B2F  0021               	movlb	1	; select bank1
  5012  1B30  00CA               	movwf	(_WDT^(0+128)+1)
  5013                           
  5014                           ;MCU_B1.c: 1107: WDT_Clearing();
  5015  1B31  3180  2002         	fcall	_WDT_Clearing
  5016  1B33  0008               	return
  5017  1B34                     __end_of_WDT_Main:	
  5018                           
  5019                           	psect	text7
  5020  0002                     __ptext7:	
  5021 ;; *************** function _WDT_Clearing *****************
  5022 ;; Defined at:
  5023 ;;		line 1113 in file "../src/MCU_B1.c"
  5024 ;; Parameters:    Size  Location     Type
  5025 ;;		None
  5026 ;; Auto vars:     Size  Location     Type
  5027 ;;		None
  5028 ;; Return value:  Size  Location     Type
  5029 ;;		None               void
  5030 ;; Registers used:
  5031 ;;		None
  5032 ;; Tracked objects:
  5033 ;;		On entry : 0/0
  5034 ;;		On exit  : 0/0
  5035 ;;		Unchanged: 0/0
  5036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5038 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5040 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5041 ;;Total ram usage:        0 bytes
  5042 ;; Hardware stack levels used:    1
  5043 ;; Hardware stack levels required when called:    5
  5044 ;; This function calls:
  5045 ;;		Nothing
  5046 ;; This function is called by:
  5047 ;;		_WDT_Main
  5048 ;; This function uses a non-reentrant model
  5049 ;;
  5050                           
  5051                           
  5052                           ;psect for function _WDT_Clearing
  5053  0002                     _WDT_Clearing:	
  5054                           
  5055                           ;incstack = 0
  5056                           ; Regs used in _WDT_Clearing: []
  5057  0002  0064               	clrwdt	;# 
  5058  0003  0008               	return
  5059  0004                     __end_of_WDT_Clearing:	
  5060                           
  5061                           	psect	text8
  5062  1962                     __ptext8:	
  5063 ;; *************** function _Temp_Main *****************
  5064 ;; Defined at:
  5065 ;;		line 57 in file "../src/OverTemperature_B1.c"
  5066 ;; Parameters:    Size  Location     Type
  5067 ;;		None
  5068 ;; Auto vars:     Size  Location     Type
  5069 ;;		None
  5070 ;; Return value:  Size  Location     Type
  5071 ;;		None               void
  5072 ;; Registers used:
  5073 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5074 ;; Tracked objects:
  5075 ;;		On entry : 0/0
  5076 ;;		On exit  : 0/0
  5077 ;;		Unchanged: 0/0
  5078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5081 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5082 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5083 ;;Total ram usage:        0 bytes
  5084 ;; Hardware stack levels used:    1
  5085 ;; Hardware stack levels required when called:    8
  5086 ;; This function calls:
  5087 ;;		_setTemp_Main
  5088 ;; This function is called by:
  5089 ;;		_main
  5090 ;; This function uses a non-reentrant model
  5091 ;;
  5092                           
  5093                           
  5094                           ;psect for function _Temp_Main
  5095  1962                     _Temp_Main:	
  5096                           
  5097                           ;OverTemperature_B1.c: 59: setTemp_Main();
  5098                           
  5099                           ;incstack = 0
  5100                           ; Regs used in _Temp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5101  1962  318D  25E1         	fcall	_setTemp_Main
  5102  1964  0008               	return
  5103  1965                     __end_of_Temp_Main:	
  5104                           
  5105                           	psect	text9
  5106  0DE1                     __ptext9:	
  5107 ;; *************** function _setTemp_Main *****************
  5108 ;; Defined at:
  5109 ;;		line 64 in file "../src/OverTemperature_B1.c"
  5110 ;; Parameters:    Size  Location     Type
  5111 ;;		None
  5112 ;; Auto vars:     Size  Location     Type
  5113 ;;  AD              2    6[BANK1 ] unsigned int 
  5114 ;;  DangerValue     2    4[BANK1 ] unsigned int 
  5115 ;;  SafeValue       2    2[BANK1 ] unsigned int 
  5116 ;;  TempGO          1    1[BANK1 ] unsigned char 
  5117 ;;  error           1    0[BANK1 ] unsigned char 
  5118 ;; Return value:  Size  Location     Type
  5119 ;;		None               void
  5120 ;; Registers used:
  5121 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5122 ;; Tracked objects:
  5123 ;;		On entry : 0/0
  5124 ;;		On exit  : 0/0
  5125 ;;		Unchanged: 0/0
  5126 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5128 ;;      Locals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0
  5129 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5130 ;;      Totals:         0       1       8       0       0       0       0       0       0       0       0       0       
      +0       0
  5131 ;;Total ram usage:        9 bytes
  5132 ;; Hardware stack levels used:    1
  5133 ;; Hardware stack levels required when called:    7
  5134 ;; This function calls:
  5135 ;;		_getMain_All_Error_Status
  5136 ;;		_getMain_All_LightsStatus
  5137 ;;		_setBuz
  5138 ;;		_setProductData
  5139 ;; This function is called by:
  5140 ;;		_Temp_Main
  5141 ;; This function uses a non-reentrant model
  5142 ;;
  5143                           
  5144                           
  5145                           ;psect for function _setTemp_Main
  5146  0DE1                     _setTemp_Main:	
  5147                           
  5148                           ;OverTemperature_B1.c: 65: char error = getMain_All_Error_Status(0);
  5149                           
  5150                           ;incstack = 0
  5151                           ; Regs used in _setTemp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5152  0DE1  3000               	movlw	0
  5153  0DE2  3190  20D4  318D   	fcall	_getMain_All_Error_Status
  5154  0DE5  0020               	movlb	0	; select bank0
  5155  0DE6  00E6               	movwf	??_setTemp_Main
  5156  0DE7  0866               	movf	??_setTemp_Main,w
  5157  0DE8  0021               	movlb	1	; select bank1
  5158  0DE9  00E5               	movwf	setTemp_Main@error^(0+128)
  5159                           
  5160                           ;OverTemperature_B1.c: 66: ADtype SafeValue = 0, DangerValue = 0, AD;
  5161  0DEA  01E7               	clrf	setTemp_Main@SafeValue^(0+128)
  5162  0DEB  01E8               	clrf	(setTemp_Main@SafeValue+1)^(0+128)
  5163  0DEC  01E9               	clrf	setTemp_Main@DangerValue^(0+128)
  5164  0DED  01EA               	clrf	(setTemp_Main@DangerValue+1)^(0+128)
  5165                           
  5166                           ;OverTemperature_B1.c: 67: char TempGO = getMain_All_LightsStatus();
  5167  0DEE  319B  2347  318D   	fcall	_getMain_All_LightsStatus
  5168  0DF1  0020               	movlb	0	; select bank0
  5169  0DF2  00E6               	movwf	??_setTemp_Main
  5170  0DF3  0866               	movf	??_setTemp_Main,w
  5171  0DF4  0021               	movlb	1	; select bank1
  5172  0DF5  00E6               	movwf	setTemp_Main@TempGO^(0+128)
  5173                           
  5174                           ;OverTemperature_B1.c: 69: if (Temp.Enable == 1) {
  5175  0DF6  1C5B               	btfss	_Temp^(0+128),0
  5176  0DF7  2E8B               	goto	l1758
  5177                           
  5178                           ;OverTemperature_B1.c: 77: if (Temp.ADtoGO == 0) {
  5179  0DF8  195B               	btfsc	_Temp^(0+128),2
  5180  0DF9  2E14               	goto	l9513
  5181                           
  5182                           ;OverTemperature_B1.c: 78: if ((TempGO == 1 && Temp.ERROR == 0) || Temp.ERROR == 1) {
  5183  0DFA  0866               	movf	setTemp_Main@TempGO^(0+128),w
  5184  0DFB  3A01               	xorlw	1
  5185  0DFC  1D03               	skipz
  5186  0DFD  2E00               	goto	l1764
  5187  0DFE  1CDB               	btfss	_Temp^(0+128),1
  5188  0DFF  2E02               	goto	l9505
  5189  0E00                     l1764:	
  5190  0E00  1CDB               	btfss	_Temp^(0+128),1
  5191  0E01  2E11               	goto	l9511
  5192  0E02                     l9505:	
  5193                           
  5194                           ;OverTemperature_B1.c: 79: Temp.Time++;
  5195  0E02  3001               	movlw	1
  5196  0E03  07DC               	addwf	(_Temp^(0+128)+1),f
  5197  0E04  3000               	movlw	0
  5198  0E05  3DDD               	addwfc	((_Temp+1)^(0+128)+1),f
  5199                           
  5200                           ;OverTemperature_B1.c: 80: if (Temp.Time >= (5000 / 20)) {
  5201  0E06  3000               	movlw	0
  5202  0E07  025D               	subwf	((_Temp+1)^(0+128)+1),w
  5203  0E08  30FA               	movlw	250
  5204  0E09  1903               	skipnz
  5205  0E0A  025C               	subwf	(_Temp^(0+128)+1),w
  5206  0E0B  1C03               	skipc
  5207  0E0C  0008               	return
  5208                           
  5209                           ;OverTemperature_B1.c: 81: Temp.Time = 0;
  5210  0E0D  01DC               	clrf	(_Temp^(0+128)+1)
  5211  0E0E  01DD               	clrf	((_Temp+1)^(0+128)+1)
  5212                           
  5213                           ;OverTemperature_B1.c: 82: Temp.ADtoGO = 1;
  5214  0E0F  155B               	bsf	_Temp^(0+128),2
  5215                           
  5216                           ;OverTemperature_B1.c: 83: }
  5217                           ;OverTemperature_B1.c: 84: } else {
  5218  0E10  0008               	return
  5219  0E11                     l9511:	
  5220                           
  5221                           ;OverTemperature_B1.c: 85: Temp.Time = 0;
  5222  0E11  01DC               	clrf	(_Temp^(0+128)+1)
  5223  0E12  01DD               	clrf	((_Temp+1)^(0+128)+1)
  5224                           
  5225                           ;OverTemperature_B1.c: 86: }
  5226                           ;OverTemperature_B1.c: 87: } else {
  5227  0E13  0008               	return
  5228  0E14                     l9513:	
  5229                           
  5230                           ;OverTemperature_B1.c: 88: Temp.Time++;
  5231  0E14  3001               	movlw	1
  5232  0E15  07DC               	addwf	(_Temp^(0+128)+1),f
  5233  0E16  3000               	movlw	0
  5234  0E17  3DDD               	addwfc	((_Temp+1)^(0+128)+1),f
  5235                           
  5236                           ;OverTemperature_B1.c: 89: if (Temp.Time >= (100 / 20)) {
  5237  0E18  3000               	movlw	0
  5238  0E19  025D               	subwf	((_Temp+1)^(0+128)+1),w
  5239  0E1A  3005               	movlw	5
  5240  0E1B  1903               	skipnz
  5241  0E1C  025C               	subwf	(_Temp^(0+128)+1),w
  5242  0E1D  1C03               	skipc
  5243  0E1E  0008               	return
  5244                           
  5245                           ;OverTemperature_B1.c: 90: Temp.Time = 0;
  5246  0E1F  01DC               	clrf	(_Temp^(0+128)+1)
  5247  0E20  01DD               	clrf	((_Temp+1)^(0+128)+1)
  5248                           
  5249                           ;OverTemperature_B1.c: 95: if (Temp.ADV > 0) {
  5250  0E21  3008               	movlw	8
  5251  0E22  3EDB               	addlw	_Temp& (0+255)
  5252  0E23  0086               	movwf	6
  5253  0E24  0187               	clrf	7
  5254  0E25  0016               	moviw fsr1++
  5255  0E26  0401               	iorwf	1,w
  5256  0E27  1903               	skipnz
  5257  0E28  2E83               	goto	l1769
  5258                           
  5259                           ;OverTemperature_B1.c: 96: Temp.ADtoGO = 0;
  5260  0E29  115B               	bcf	_Temp^(0+128),2
  5261                           
  5262                           ;OverTemperature_B1.c: 97: AD = Temp.ADV;
  5263  0E2A  0864               	movf	((_Temp+1)^(0+128)+8),w
  5264  0E2B  01EC               	clrf	(setTemp_Main@AD+1)^(0+128)
  5265  0E2C  07EC               	addwf	(setTemp_Main@AD+1)^(0+128),f
  5266  0E2D  0863               	movf	(_Temp^(0+128)+8),w
  5267  0E2E  01EB               	clrf	setTemp_Main@AD^(0+128)
  5268  0E2F  07EB               	addwf	setTemp_Main@AD^(0+128),f
  5269                           
  5270                           ;OverTemperature_B1.c: 112: SafeValue = 455;
  5271  0E30  30C7               	movlw	199
  5272  0E31  00E7               	movwf	setTemp_Main@SafeValue^(0+128)
  5273  0E32  3001               	movlw	1
  5274  0E33  00E8               	movwf	(setTemp_Main@SafeValue^(0+128)+1)
  5275                           
  5276                           ;OverTemperature_B1.c: 113: DangerValue = 415;
  5277  0E34  309F               	movlw	159
  5278  0E35  00E9               	movwf	setTemp_Main@DangerValue^(0+128)
  5279  0E36  3001               	movlw	1
  5280  0E37  00EA               	movwf	(setTemp_Main@DangerValue^(0+128)+1)
  5281                           
  5282                           ;OverTemperature_B1.c: 119: if (Temp.ERROR == 1) {
  5283  0E38  1CDB               	btfss	_Temp^(0+128),1
  5284  0E39  2E5A               	goto	l9543
  5285                           
  5286                           ;OverTemperature_B1.c: 120: if (AD >= SafeValue) {
  5287  0E3A  0868               	movf	(setTemp_Main@SafeValue+1)^(0+128),w
  5288  0E3B  026C               	subwf	(setTemp_Main@AD+1)^(0+128),w
  5289  0E3C  1D03               	skipz
  5290  0E3D  2E40               	goto	u10795
  5291  0E3E  0867               	movf	setTemp_Main@SafeValue^(0+128),w
  5292  0E3F  026B               	subwf	setTemp_Main@AD^(0+128),w
  5293  0E40                     u10795:	
  5294  0E40  1C03               	skipc
  5295  0E41  2E58               	goto	l9541
  5296                           
  5297                           ;OverTemperature_B1.c: 121: Temp.Count++;
  5298  0E42  3001               	movlw	1
  5299  0E43  0020               	movlb	0	; select bank0
  5300  0E44  00E6               	movwf	??_setTemp_Main
  5301  0E45  0866               	movf	??_setTemp_Main,w
  5302  0E46  0021               	movlb	1	; select bank1
  5303  0E47  07DE               	addwf	(_Temp^(0+128)+3),f
  5304                           
  5305                           ;OverTemperature_B1.c: 122: if (Temp.Count >= 3) {
  5306  0E48  3003               	movlw	3
  5307  0E49  025E               	subwf	(_Temp^(0+128)+3),w
  5308  0E4A  1C03               	skipc
  5309  0E4B  2E70               	goto	l9555
  5310                           
  5311                           ;OverTemperature_B1.c: 123: Temp.Count = 0;
  5312  0E4C  01DE               	clrf	(_Temp^(0+128)+3)
  5313                           
  5314                           ;OverTemperature_B1.c: 124: Temp.ERROR = 0;
  5315  0E4D  10DB               	bcf	_Temp^(0+128),1
  5316                           
  5317                           ;OverTemperature_B1.c: 125: setBuz(2, 100);
  5318  0E4E  3064               	movlw	100
  5319  0E4F  0020               	movlb	0	; select bank0
  5320  0E50  00AA               	movwf	setBuz@time
  5321  0E51  3000               	movlw	0
  5322  0E52  00AB               	movwf	setBuz@time+1
  5323  0E53  3002               	movlw	2
  5324  0E54  3194  24F8  318D   	fcall	_setBuz
  5325                           
  5326                           ;OverTemperature_B1.c: 126: }
  5327                           ;OverTemperature_B1.c: 127: } else {
  5328  0E57  2E70               	goto	l9555
  5329  0E58                     l9541:	
  5330                           
  5331                           ;OverTemperature_B1.c: 128: Temp.Count = 0;
  5332  0E58  0021               	movlb	1	; select bank1
  5333  0E59  2E6F               	goto	l9553
  5334  0E5A                     l9543:	
  5335                           ;OverTemperature_B1.c: 129: }
  5336                           ;OverTemperature_B1.c: 130: } else {
  5337                           
  5338                           
  5339                           ;OverTemperature_B1.c: 131: if (AD <= DangerValue) {
  5340  0E5A  086C               	movf	(setTemp_Main@AD+1)^(0+128),w
  5341  0E5B  026A               	subwf	(setTemp_Main@DangerValue+1)^(0+128),w
  5342  0E5C  1D03               	skipz
  5343  0E5D  2E60               	goto	u10815
  5344  0E5E  086B               	movf	setTemp_Main@AD^(0+128),w
  5345  0E5F  0269               	subwf	setTemp_Main@DangerValue^(0+128),w
  5346  0E60                     u10815:	
  5347  0E60  1C03               	skipc
  5348  0E61  2E6F               	goto	l9553
  5349                           
  5350                           ;OverTemperature_B1.c: 132: Temp.Count++;
  5351  0E62  3001               	movlw	1
  5352  0E63  0020               	movlb	0	; select bank0
  5353  0E64  00E6               	movwf	??_setTemp_Main
  5354  0E65  0866               	movf	??_setTemp_Main,w
  5355  0E66  0021               	movlb	1	; select bank1
  5356  0E67  07DE               	addwf	(_Temp^(0+128)+3),f
  5357                           
  5358                           ;OverTemperature_B1.c: 133: if (Temp.Count >= 3) {
  5359  0E68  3003               	movlw	3
  5360  0E69  025E               	subwf	(_Temp^(0+128)+3),w
  5361  0E6A  1C03               	skipc
  5362  0E6B  2E70               	goto	l9555
  5363                           
  5364                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  5365  0E6C  01DE               	clrf	(_Temp^(0+128)+3)
  5366                           
  5367                           ;OverTemperature_B1.c: 135: Temp.ERROR = 1;
  5368  0E6D  14DB               	bsf	_Temp^(0+128),1
  5369                           
  5370                           ;OverTemperature_B1.c: 136: }
  5371                           ;OverTemperature_B1.c: 137: } else {
  5372  0E6E  2E70               	goto	l9555
  5373  0E6F                     l9553:	
  5374                           
  5375                           ;OverTemperature_B1.c: 138: Temp.Count = 0;
  5376  0E6F  01DE               	clrf	(_Temp^(0+128)+3)
  5377  0E70                     l9555:	
  5378                           
  5379                           ;OverTemperature_B1.c: 139: }
  5380                           ;OverTemperature_B1.c: 140: }
  5381                           ;OverTemperature_B1.c: 141: setProductData(24, AD >> 8);
  5382  0E70  0021               	movlb	1	; select bank1
  5383  0E71  086C               	movf	(setTemp_Main@AD+1)^(0+128),w
  5384  0E72  0020               	movlb	0	; select bank0
  5385  0E73  00E6               	movwf	??_setTemp_Main
  5386  0E74  0866               	movf	??_setTemp_Main,w
  5387  0E75  00E3               	movwf	setProductData@value
  5388  0E76  3018               	movlw	24
  5389  0E77  319A  2223  318D   	fcall	_setProductData
  5390                           
  5391                           ;OverTemperature_B1.c: 142: setProductData(25, AD);
  5392  0E7A  0021               	movlb	1	; select bank1
  5393  0E7B  086B               	movf	setTemp_Main@AD^(0+128),w
  5394  0E7C  0020               	movlb	0	; select bank0
  5395  0E7D  00E6               	movwf	??_setTemp_Main
  5396  0E7E  0866               	movf	??_setTemp_Main,w
  5397  0E7F  00E3               	movwf	setProductData@value
  5398  0E80  3019               	movlw	25
  5399  0E81  319A  2223         	fcall	_setProductData
  5400  0E83                     l1769:	
  5401                           
  5402                           ;OverTemperature_B1.c: 158: }
  5403                           ;OverTemperature_B1.c: 159: Temp.ADH[0] = 0;
  5404  0E83  0021               	movlb	1	; select bank1
  5405  0E84  01DF               	clrf	(_Temp^(0+128)+4)
  5406  0E85  01E0               	clrf	((_Temp+1)^(0+128)+4)
  5407                           
  5408                           ;OverTemperature_B1.c: 160: Temp.ADH[1] = 0;
  5409  0E86  01E1               	clrf	(_Temp^(0+128)+6)
  5410  0E87  01E2               	clrf	((_Temp+1)^(0+128)+6)
  5411                           
  5412                           ;OverTemperature_B1.c: 161: Temp.ADV = 0;
  5413  0E88  01E3               	clrf	(_Temp^(0+128)+8)
  5414  0E89  01E4               	clrf	((_Temp+1)^(0+128)+8)
  5415                           
  5416                           ;OverTemperature_B1.c: 162: }
  5417                           ;OverTemperature_B1.c: 163: }
  5418                           ;OverTemperature_B1.c: 166: } else {
  5419  0E8A  0008               	return
  5420  0E8B                     l1758:	
  5421                           
  5422                           ;OverTemperature_B1.c: 167: if (myMain.PowerON == 1) {
  5423  0E8B  0022               	movlb	2	; select bank2
  5424  0E8C  1C20               	btfss	_myMain^(0+256),0
  5425  0E8D  0008               	return
  5426                           
  5427                           ;OverTemperature_B1.c: 168: Temp.Enable = 1;
  5428  0E8E  0021               	movlb	1	; select bank1
  5429  0E8F  145B               	bsf	_Temp^(0+128),0
  5430  0E90  0008               	return
  5431  0E91                     __end_of_setTemp_Main:	
  5432                           
  5433                           	psect	text10
  5434  195F                     __ptext10:	
  5435 ;; *************** function _Temp_Initialization *****************
  5436 ;; Defined at:
  5437 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5438 ;; Parameters:    Size  Location     Type
  5439 ;;		None
  5440 ;; Auto vars:     Size  Location     Type
  5441 ;;		None
  5442 ;; Return value:  Size  Location     Type
  5443 ;;		None               void
  5444 ;; Registers used:
  5445 ;;		status,2, status,0, pclath, cstack
  5446 ;; Tracked objects:
  5447 ;;		On entry : 0/0
  5448 ;;		On exit  : 0/0
  5449 ;;		Unchanged: 0/0
  5450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5454 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5455 ;;Total ram usage:        0 bytes
  5456 ;; Hardware stack levels used:    1
  5457 ;; Hardware stack levels required when called:    6
  5458 ;; This function calls:
  5459 ;;		_setTemp_Initialization
  5460 ;; This function is called by:
  5461 ;;		_main
  5462 ;; This function uses a non-reentrant model
  5463 ;;
  5464                           
  5465                           
  5466                           ;psect for function _Temp_Initialization
  5467  195F                     _Temp_Initialization:	
  5468                           
  5469                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5470                           
  5471                           ;incstack = 0
  5472                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5473  195F  3187  27FF         	fcall	_setTemp_Initialization
  5474  1961  0008               	return
  5475  1962                     __end_of_Temp_Initialization:	
  5476                           
  5477                           	psect	text11
  5478  07FF                     __ptext11:	
  5479 ;; *************** function _setTemp_Initialization *****************
  5480 ;; Defined at:
  5481 ;;		line 52 in file "../src/OverTemperature_B1.c"
  5482 ;; Parameters:    Size  Location     Type
  5483 ;;		None
  5484 ;; Auto vars:     Size  Location     Type
  5485 ;;		None
  5486 ;; Return value:  Size  Location     Type
  5487 ;;		None               void
  5488 ;; Registers used:
  5489 ;;		None
  5490 ;; Tracked objects:
  5491 ;;		On entry : 0/0
  5492 ;;		On exit  : 0/0
  5493 ;;		Unchanged: 0/0
  5494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5498 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5499 ;;Total ram usage:        0 bytes
  5500 ;; Hardware stack levels used:    1
  5501 ;; Hardware stack levels required when called:    5
  5502 ;; This function calls:
  5503 ;;		Nothing
  5504 ;; This function is called by:
  5505 ;;		_Temp_Initialization
  5506 ;; This function uses a non-reentrant model
  5507 ;;
  5508                           
  5509                           
  5510                           ;psect for function _setTemp_Initialization
  5511  07FF                     _setTemp_Initialization:	
  5512                           
  5513                           ;incstack = 0
  5514                           ; Regs used in _setTemp_Initialization: []
  5515  07FF  0008               	return
  5516  0800                     __end_of_setTemp_Initialization:	
  5517                           
  5518                           	psect	text12
  5519  1A0C                     __ptext12:	
  5520 ;; *************** function _Switch_Main *****************
  5521 ;; Defined at:
  5522 ;;		line 76 in file "../src/Switch_B1.c"
  5523 ;; Parameters:    Size  Location     Type
  5524 ;;		None
  5525 ;; Auto vars:     Size  Location     Type
  5526 ;;		None
  5527 ;; Return value:  Size  Location     Type
  5528 ;;		None               void
  5529 ;; Registers used:
  5530 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5531 ;; Tracked objects:
  5532 ;;		On entry : 0/0
  5533 ;;		On exit  : 0/0
  5534 ;;		Unchanged: 0/0
  5535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5539 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5540 ;;Total ram usage:        0 bytes
  5541 ;; Hardware stack levels used:    1
  5542 ;; Hardware stack levels required when called:    9
  5543 ;; This function calls:
  5544 ;;		_TouchPower
  5545 ;;		_setSw_Main
  5546 ;; This function is called by:
  5547 ;;		_main
  5548 ;; This function uses a non-reentrant model
  5549 ;;
  5550                           
  5551                           
  5552                           ;psect for function _Switch_Main
  5553  1A0C                     _Switch_Main:	
  5554                           
  5555                           ;Switch_B1.c: 79: setSw_Main(1);
  5556                           
  5557                           ;incstack = 0
  5558                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5559  1A0C  3001               	movlw	1
  5560  1A0D  3182  2202  319A   	fcall	_setSw_Main
  5561                           
  5562                           ;Switch_B1.c: 83: setSw_Main(2);
  5563  1A10  3002               	movlw	2
  5564  1A11  3182  2202  319A   	fcall	_setSw_Main
  5565                           
  5566                           ;Switch_B1.c: 91: TouchPower();
  5567  1A14  319B  23E5         	fcall	_TouchPower
  5568  1A16  0008               	return
  5569  1A17                     __end_of_Switch_Main:	
  5570                           
  5571                           	psect	text13
  5572  0202                     __ptext13:	
  5573 ;; *************** function _setSw_Main *****************
  5574 ;; Defined at:
  5575 ;;		line 117 in file "../src/Switch_B1.c"
  5576 ;; Parameters:    Size  Location     Type
  5577 ;;  sw              1    wreg     unsigned char 
  5578 ;; Auto vars:     Size  Location     Type
  5579 ;;  sw              1   21[BANK0 ] unsigned char 
  5580 ;; Return value:  Size  Location     Type
  5581 ;;		None               void
  5582 ;; Registers used:
  5583 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5584 ;; Tracked objects:
  5585 ;;		On entry : 0/0
  5586 ;;		On exit  : 0/0
  5587 ;;		Unchanged: 0/0
  5588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5590 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5591 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5592 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5593 ;;Total ram usage:        3 bytes
  5594 ;; Hardware stack levels used:    1
  5595 ;; Hardware stack levels required when called:    8
  5596 ;; This function calls:
  5597 ;;		_SwPointSelect
  5598 ;;		_getMain_All_Error_Status
  5599 ;;		_getSw_KeyStatus
  5600 ;;		_setBuz
  5601 ;;		_setDimmerLights_DimmingOn
  5602 ;;		_setDimmerLights_SwOff
  5603 ;;		_setDimmerLights_SwOn
  5604 ;;		_setRF_Learn
  5605 ;; This function is called by:
  5606 ;;		_Switch_Main
  5607 ;; This function uses a non-reentrant model
  5608 ;;
  5609                           
  5610                           
  5611                           ;psect for function _setSw_Main
  5612  0202                     _setSw_Main:	
  5613                           
  5614                           ;incstack = 0
  5615                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5616                           ;setSw_Main@sw stored from wreg
  5617  0202  0020               	movlb	0	; select bank0
  5618  0203  00B5               	movwf	setSw_Main@sw
  5619                           
  5620                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5621  0204  0835               	movf	setSw_Main@sw,w
  5622  0205  319C  2456  3182   	fcall	_SwPointSelect
  5623                           
  5624                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5625  0208  0021               	movlb	1	; select bank1
  5626  0209  0855               	movf	_Sw^(0+128),w
  5627  020A  0086               	movwf	6
  5628  020B  3001               	movlw	1	; select bank2/3
  5629  020C  0087               	movwf	7
  5630  020D  1C01               	btfss	1,0
  5631  020E  2B7E               	goto	l2545
  5632                           
  5633                           ;Switch_B1.c: 121: if (getMain_All_Error_Status(0) == 0) {
  5634  020F  3000               	movlw	0
  5635  0210  3190  20D4  3182   	fcall	_getMain_All_Error_Status
  5636  0213  3800               	iorlw	0
  5637  0214  1D03               	skipz
  5638  0215  2A34               	goto	l9649
  5639                           
  5640                           ;Switch_B1.c: 122: Sw->Detect = 0;
  5641  0216  0021               	movlb	1	; select bank1
  5642  0217  0A55               	incf	_Sw^(0+128),w
  5643  0218  0086               	movwf	6
  5644  0219  3001               	movlw	1	; select bank2/3
  5645  021A  0087               	movwf	7
  5646  021B  1081               	bcf	1,1
  5647                           
  5648                           ;Switch_B1.c: 123: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5649  021C  0020               	movlb	0	; select bank0
  5650  021D  0835               	movf	setSw_Main@sw,w
  5651  021E  319D  259C  3182   	fcall	_getSw_KeyStatus
  5652  0221  3A01               	xorlw	1
  5653  0222  3000               	movlw	0
  5654  0223  1903               	skipnz
  5655  0224  3001               	movlw	1
  5656  0225  0020               	movlb	0	; select bank0
  5657  0226  00B3               	movwf	??_setSw_Main
  5658  0227  0021               	movlb	1	; select bank1
  5659  0228  0855               	movf	_Sw^(0+128),w
  5660  0229  0086               	movwf	6
  5661  022A  3001               	movlw	1	; select bank2/3
  5662  022B  0087               	movwf	7
  5663  022C  0020               	movlb	0	; select bank0
  5664  022D  0DB3               	rlf	??_setSw_Main,f
  5665  022E  0801               	movf	1,w
  5666  022F  0633               	xorwf	??_setSw_Main,w
  5667  0230  39FD               	andlw	-3
  5668  0231  0633               	xorwf	??_setSw_Main,w
  5669  0232  0081               	movwf	1
  5670                           
  5671                           ;Switch_B1.c: 124: } else {
  5672  0233  2A4A               	goto	l2547
  5673  0234                     l9649:	
  5674                           
  5675                           ;Switch_B1.c: 125: if (Sw->Detect == 0) {
  5676  0234  0021               	movlb	1	; select bank1
  5677  0235  0A55               	incf	_Sw^(0+128),w
  5678  0236  0086               	movwf	6
  5679  0237  3001               	movlw	1	; select bank2/3
  5680  0238  0087               	movwf	7
  5681  0239  1881               	btfsc	1,1
  5682  023A  2A4A               	goto	l2547
  5683                           
  5684                           ;Switch_B1.c: 126: Sw->Detect = 1;
  5685  023B  0A55               	incf	_Sw^(0+128),w
  5686  023C  0086               	movwf	6
  5687  023D  3001               	movlw	1	; select bank2/3
  5688  023E  0087               	movwf	7
  5689  023F  1481               	bsf	1,1
  5690                           
  5691                           ;Switch_B1.c: 128: Sw->Touch = 0;
  5692  0240  0855               	movf	_Sw^(0+128),w
  5693  0241  0086               	movwf	6
  5694  0242  3001               	movlw	1	; select bank2/3
  5695  0243  0087               	movwf	7
  5696  0244  1081               	bcf	1,1
  5697                           
  5698                           ;Switch_B1.c: 129: Sw->Debounce = 1;
  5699  0245  0855               	movf	_Sw^(0+128),w
  5700  0246  0086               	movwf	6
  5701  0247  3001               	movlw	1	; select bank2/3
  5702  0248  0087               	movwf	7
  5703  0249  1501               	bsf	1,2
  5704  024A                     l2547:	
  5705                           
  5706                           ;Switch_B1.c: 130: }
  5707                           ;Switch_B1.c: 131: }
  5708                           ;Switch_B1.c: 133: if (Sw->Touch == 1) {
  5709  024A  0021               	movlb	1	; select bank1
  5710  024B  0855               	movf	_Sw^(0+128),w
  5711  024C  0086               	movwf	6
  5712  024D  3001               	movlw	1	; select bank2/3
  5713  024E  0087               	movwf	7
  5714  024F  1C81               	btfss	1,1
  5715  0250  2B26               	goto	l9699
  5716                           
  5717                           ;Switch_B1.c: 134: if (Sw->Debounce == 0) {
  5718  0251  0855               	movf	_Sw^(0+128),w
  5719  0252  0086               	movwf	6
  5720  0253  3001               	movlw	1	; select bank2/3
  5721  0254  0087               	movwf	7
  5722  0255  1901               	btfsc	1,2
  5723  0256  2A7D               	goto	l9665
  5724                           
  5725                           ;Switch_B1.c: 135: Sw->DebounceTime++;
  5726  0257  3001               	movlw	1
  5727  0258  0020               	movlb	0	; select bank0
  5728  0259  00B3               	movwf	??_setSw_Main
  5729  025A  0021               	movlb	1	; select bank1
  5730  025B  0855               	movf	_Sw^(0+128),w
  5731  025C  3E02               	addlw	2
  5732  025D  0086               	movwf	6
  5733  025E  3001               	movlw	1	; select bank2/3
  5734  025F  0087               	movwf	7
  5735  0260  0020               	movlb	0	; select bank0
  5736  0261  0833               	movf	??_setSw_Main,w
  5737  0262  0781               	addwf	1,f
  5738                           
  5739                           ;Switch_B1.c: 136: if (Sw->DebounceTime >= (60 / 20)) {
  5740  0263  0021               	movlb	1	; select bank1
  5741  0264  0855               	movf	_Sw^(0+128),w
  5742  0265  3E02               	addlw	2
  5743  0266  0086               	movwf	6
  5744  0267  3001               	movlw	1	; select bank2/3
  5745  0268  0087               	movwf	7
  5746  0269  3003               	movlw	3
  5747  026A  0201               	subwf	1,w
  5748  026B  1C03               	skipc
  5749  026C  0008               	return
  5750                           
  5751                           ;Switch_B1.c: 137: Sw->DebounceTime = 0;
  5752  026D  0855               	movf	_Sw^(0+128),w
  5753  026E  3E02               	addlw	2
  5754  026F  0086               	movwf	6
  5755  0270  3001               	movlw	1	; select bank2/3
  5756  0271  0087               	movwf	7
  5757  0272  0181               	clrf	1
  5758                           
  5759                           ;Switch_B1.c: 138: Sw->Debounce = 1;
  5760  0273  0855               	movf	_Sw^(0+128),w
  5761  0274  0086               	movwf	6
  5762  0275  3001               	movlw	1	; select bank2/3
  5763  0276  0087               	movwf	7
  5764  0277  1501               	bsf	1,2
  5765                           
  5766                           ;Switch_B1.c: 143: setDimmerLights_SwOn(sw);
  5767  0278  0020               	movlb	0	; select bank0
  5768  0279  0835               	movf	setSw_Main@sw,w
  5769  027A  3195  25AC         	fcall	_setDimmerLights_SwOn
  5770                           
  5771                           ;Switch_B1.c: 146: }
  5772                           ;Switch_B1.c: 147: } else {
  5773  027C  0008               	return
  5774  027D                     l9665:	
  5775                           
  5776                           ;Switch_B1.c: 148: if (Sw->Hold1 == 0) {
  5777  027D  0021               	movlb	1	; select bank1
  5778  027E  0855               	movf	_Sw^(0+128),w
  5779  027F  0086               	movwf	6
  5780  0280  3001               	movlw	1	; select bank2/3
  5781  0281  0087               	movwf	7
  5782  0282  1981               	btfsc	1,3
  5783  0283  2AB2               	goto	l9675
  5784                           
  5785                           ;Switch_B1.c: 149: Sw->Hold1Time++;
  5786  0284  0855               	movf	_Sw^(0+128),w
  5787  0285  3E03               	addlw	3
  5788  0286  0086               	movwf	6
  5789  0287  3001               	movlw	1	; select bank2/3
  5790  0288  0087               	movwf	7
  5791  0289  3001               	movlw	1
  5792  028A  0781               	addwf	1,f
  5793  028B  3141               	addfsr 1,1
  5794  028C  1803               	skipnc
  5795  028D  0A81               	incf	1,f
  5796                           
  5797                           ;Switch_B1.c: 150: if (Sw->Hold1Time >= (1500 / 20)) {
  5798  028E  0855               	movf	_Sw^(0+128),w
  5799  028F  3E03               	addlw	3
  5800  0290  0086               	movwf	6
  5801  0291  3001               	movlw	1	; select bank2/3
  5802  0292  0087               	movwf	7
  5803  0293  3F40               	moviw [0]fsr1
  5804  0294  0020               	movlb	0	; select bank0
  5805  0295  00B3               	movwf	??_setSw_Main
  5806  0296  3F41               	moviw [1]fsr1
  5807  0297  00B4               	movwf	??_setSw_Main+1
  5808  0298  3000               	movlw	0
  5809  0299  0234               	subwf	??_setSw_Main+1,w
  5810  029A  304B               	movlw	75
  5811  029B  1903               	skipnz
  5812  029C  0233               	subwf	??_setSw_Main,w
  5813  029D  1C03               	skipc
  5814  029E  0008               	return
  5815                           
  5816                           ;Switch_B1.c: 151: Sw->Hold1Time = 0;
  5817  029F  0021               	movlb	1	; select bank1
  5818  02A0  0855               	movf	_Sw^(0+128),w
  5819  02A1  3E03               	addlw	3
  5820  02A2  0086               	movwf	6
  5821  02A3  3001               	movlw	1	; select bank2/3
  5822  02A4  0087               	movwf	7
  5823  02A5  3000               	movlw	0
  5824  02A6  3FC0               	movwi [0]fsr1
  5825  02A7  3FC1               	movwi [1]fsr1
  5826                           
  5827                           ;Switch_B1.c: 152: Sw->Hold1 = 1;
  5828  02A8  0855               	movf	_Sw^(0+128),w
  5829  02A9  0086               	movwf	6
  5830  02AA  3001               	movlw	1	; select bank2/3
  5831  02AB  0087               	movwf	7
  5832  02AC  1581               	bsf	1,3
  5833                           
  5834                           ;Switch_B1.c: 158: setDimmerLights_DimmingOn(sw);
  5835  02AD  0020               	movlb	0	; select bank0
  5836  02AE  0835               	movf	setSw_Main@sw,w
  5837  02AF  319F  272F         	fcall	_setDimmerLights_DimmingOn
  5838                           
  5839                           ;Switch_B1.c: 161: }
  5840                           ;Switch_B1.c: 162: } else {
  5841  02B1  0008               	return
  5842  02B2                     l9675:	
  5843                           
  5844                           ;Switch_B1.c: 164: if (Sw->Hold2 == 0) {
  5845  02B2  0021               	movlb	1	; select bank1
  5846  02B3  0855               	movf	_Sw^(0+128),w
  5847  02B4  0086               	movwf	6
  5848  02B5  3001               	movlw	1	; select bank2/3
  5849  02B6  0087               	movwf	7
  5850  02B7  1A01               	btfsc	1,4
  5851  02B8  2AF2               	goto	l9689
  5852                           
  5853                           ;Switch_B1.c: 165: Sw->Hold2Time++;
  5854  02B9  0855               	movf	_Sw^(0+128),w
  5855  02BA  3E05               	addlw	5
  5856  02BB  0086               	movwf	6
  5857  02BC  3001               	movlw	1	; select bank2/3
  5858  02BD  0087               	movwf	7
  5859  02BE  3001               	movlw	1
  5860  02BF  0781               	addwf	1,f
  5861  02C0  3141               	addfsr 1,1
  5862  02C1  1803               	skipnc
  5863  02C2  0A81               	incf	1,f
  5864                           
  5865                           ;Switch_B1.c: 166: if (Sw->Hold2Time >= (1500 / 20)) {
  5866  02C3  0855               	movf	_Sw^(0+128),w
  5867  02C4  3E05               	addlw	5
  5868  02C5  0086               	movwf	6
  5869  02C6  3001               	movlw	1	; select bank2/3
  5870  02C7  0087               	movwf	7
  5871  02C8  3F40               	moviw [0]fsr1
  5872  02C9  0020               	movlb	0	; select bank0
  5873  02CA  00B3               	movwf	??_setSw_Main
  5874  02CB  3F41               	moviw [1]fsr1
  5875  02CC  00B4               	movwf	??_setSw_Main+1
  5876  02CD  3000               	movlw	0
  5877  02CE  0234               	subwf	??_setSw_Main+1,w
  5878  02CF  304B               	movlw	75
  5879  02D0  1903               	skipnz
  5880  02D1  0233               	subwf	??_setSw_Main,w
  5881  02D2  1C03               	skipc
  5882  02D3  0008               	return
  5883                           
  5884                           ;Switch_B1.c: 167: Sw->Hold2Time = 0;
  5885  02D4  0021               	movlb	1	; select bank1
  5886  02D5  0855               	movf	_Sw^(0+128),w
  5887  02D6  3E05               	addlw	5
  5888  02D7  0086               	movwf	6
  5889  02D8  3001               	movlw	1	; select bank2/3
  5890  02D9  0087               	movwf	7
  5891  02DA  3000               	movlw	0
  5892  02DB  3FC0               	movwi [0]fsr1
  5893  02DC  3FC1               	movwi [1]fsr1
  5894                           
  5895                           ;Switch_B1.c: 168: Sw->Hold2 = 1;
  5896  02DD  0855               	movf	_Sw^(0+128),w
  5897  02DE  0086               	movwf	6
  5898  02DF  3001               	movlw	1	; select bank2/3
  5899  02E0  0087               	movwf	7
  5900  02E1  1601               	bsf	1,4
  5901                           
  5902                           ;Switch_B1.c: 171: setRF_Learn(1);
  5903  02E2  3001               	movlw	1
  5904  02E3  319B  23A7  3182   	fcall	_setRF_Learn
  5905                           
  5906                           ;Switch_B1.c: 172: if (myMain.First == 1) {
  5907  02E6  0022               	movlb	2	; select bank2
  5908  02E7  1EA0               	btfss	_myMain^(0+256),5
  5909  02E8  0008               	return
  5910                           
  5911                           ;Switch_B1.c: 173: setBuz(2, 100);
  5912  02E9  3064               	movlw	100
  5913  02EA  0020               	movlb	0	; select bank0
  5914  02EB  00AA               	movwf	setBuz@time
  5915  02EC  3000               	movlw	0
  5916  02ED  00AB               	movwf	setBuz@time+1
  5917  02EE  3002               	movlw	2
  5918  02EF  3194  24F8         	fcall	_setBuz
  5919                           
  5920                           ;Switch_B1.c: 174: }
  5921                           ;Switch_B1.c: 178: }
  5922                           ;Switch_B1.c: 179: } else {
  5923  02F1  0008               	return
  5924  02F2                     l9689:	
  5925                           
  5926                           ;Switch_B1.c: 180: if (Sw->Hold3 == 0) {
  5927  02F2  0021               	movlb	1	; select bank1
  5928  02F3  0855               	movf	_Sw^(0+128),w
  5929  02F4  0086               	movwf	6
  5930  02F5  3001               	movlw	1	; select bank2/3
  5931  02F6  0087               	movwf	7
  5932  02F7  1A81               	btfsc	1,5
  5933  02F8  0008               	return
  5934                           
  5935                           ;Switch_B1.c: 181: Sw->Hold3Time++;
  5936  02F9  0855               	movf	_Sw^(0+128),w
  5937  02FA  3E07               	addlw	7
  5938  02FB  0086               	movwf	6
  5939  02FC  3001               	movlw	1	; select bank2/3
  5940  02FD  0087               	movwf	7
  5941  02FE  3001               	movlw	1
  5942  02FF  0781               	addwf	1,f
  5943  0300  3141               	addfsr 1,1
  5944  0301  1803               	skipnc
  5945  0302  0A81               	incf	1,f
  5946                           
  5947                           ;Switch_B1.c: 182: if (Sw->Hold3Time >= (3000 / 20)) {
  5948  0303  0855               	movf	_Sw^(0+128),w
  5949  0304  3E07               	addlw	7
  5950  0305  0086               	movwf	6
  5951  0306  3001               	movlw	1	; select bank2/3
  5952  0307  0087               	movwf	7
  5953  0308  3F40               	moviw [0]fsr1
  5954  0309  0020               	movlb	0	; select bank0
  5955  030A  00B3               	movwf	??_setSw_Main
  5956  030B  3F41               	moviw [1]fsr1
  5957  030C  00B4               	movwf	??_setSw_Main+1
  5958  030D  3000               	movlw	0
  5959  030E  0234               	subwf	??_setSw_Main+1,w
  5960  030F  3096               	movlw	150
  5961  0310  1903               	skipnz
  5962  0311  0233               	subwf	??_setSw_Main,w
  5963  0312  1C03               	skipc
  5964  0313  0008               	return
  5965                           
  5966                           ;Switch_B1.c: 183: Sw->Hold3Time = 0;
  5967  0314  0021               	movlb	1	; select bank1
  5968  0315  0855               	movf	_Sw^(0+128),w
  5969  0316  3E07               	addlw	7
  5970  0317  0086               	movwf	6
  5971  0318  3001               	movlw	1	; select bank2/3
  5972  0319  0087               	movwf	7
  5973  031A  3000               	movlw	0
  5974  031B  3FC0               	movwi [0]fsr1
  5975  031C  3FC1               	movwi [1]fsr1
  5976                           
  5977                           ;Switch_B1.c: 184: Sw->Hold3 = 1;
  5978  031D  0855               	movf	_Sw^(0+128),w
  5979  031E  0086               	movwf	6
  5980  031F  3001               	movlw	1	; select bank2/3
  5981  0320  0087               	movwf	7
  5982  0321  1681               	bsf	1,5
  5983                           
  5984                           ;Switch_B1.c: 187: setRF_Learn(0);
  5985  0322  3000               	movlw	0
  5986  0323  319B  23A7         	fcall	_setRF_Learn
  5987                           
  5988                           ;Switch_B1.c: 190: }
  5989                           ;Switch_B1.c: 191: }
  5990                           ;Switch_B1.c: 192: }
  5991                           ;Switch_B1.c: 194: }
  5992                           ;Switch_B1.c: 195: }
  5993                           ;Switch_B1.c: 196: } else {
  5994  0325  0008               	return
  5995  0326                     l9699:	
  5996                           
  5997                           ;Switch_B1.c: 197: if (Sw->Debounce == 1) {
  5998  0326  0021               	movlb	1	; select bank1
  5999  0327  0855               	movf	_Sw^(0+128),w
  6000  0328  0086               	movwf	6
  6001  0329  3001               	movlw	1	; select bank2/3
  6002  032A  0087               	movwf	7
  6003  032B  1D01               	btfss	1,2
  6004  032C  0008               	return
  6005                           
  6006                           ;Switch_B1.c: 198: Sw->DebounceTime++;
  6007  032D  3001               	movlw	1
  6008  032E  0020               	movlb	0	; select bank0
  6009  032F  00B3               	movwf	??_setSw_Main
  6010  0330  0021               	movlb	1	; select bank1
  6011  0331  0855               	movf	_Sw^(0+128),w
  6012  0332  3E02               	addlw	2
  6013  0333  0086               	movwf	6
  6014  0334  3001               	movlw	1	; select bank2/3
  6015  0335  0087               	movwf	7
  6016  0336  0020               	movlb	0	; select bank0
  6017  0337  0833               	movf	??_setSw_Main,w
  6018  0338  0781               	addwf	1,f
  6019                           
  6020                           ;Switch_B1.c: 199: if (Sw->DebounceTime >= (60 / 20)) {
  6021  0339  0021               	movlb	1	; select bank1
  6022  033A  0855               	movf	_Sw^(0+128),w
  6023  033B  3E02               	addlw	2
  6024  033C  0086               	movwf	6
  6025  033D  3001               	movlw	1	; select bank2/3
  6026  033E  0087               	movwf	7
  6027  033F  3003               	movlw	3
  6028  0340  0201               	subwf	1,w
  6029  0341  1C03               	skipc
  6030  0342  0008               	return
  6031                           
  6032                           ;Switch_B1.c: 200: Sw->DebounceTime = 0;
  6033  0343  0855               	movf	_Sw^(0+128),w
  6034  0344  3E02               	addlw	2
  6035  0345  0086               	movwf	6
  6036  0346  3001               	movlw	1	; select bank2/3
  6037  0347  0087               	movwf	7
  6038  0348  0181               	clrf	1
  6039                           
  6040                           ;Switch_B1.c: 201: Sw->Debounce = 0;
  6041  0349  0855               	movf	_Sw^(0+128),w
  6042  034A  0086               	movwf	6
  6043  034B  3001               	movlw	1	; select bank2/3
  6044  034C  0087               	movwf	7
  6045  034D  1101               	bcf	1,2
  6046                           
  6047                           ;Switch_B1.c: 202: Sw->Hold1Time = 0;
  6048  034E  0855               	movf	_Sw^(0+128),w
  6049  034F  3E03               	addlw	3
  6050  0350  0086               	movwf	6
  6051  0351  3001               	movlw	1	; select bank2/3
  6052  0352  0087               	movwf	7
  6053  0353  3000               	movlw	0
  6054  0354  3FC0               	movwi [0]fsr1
  6055  0355  3FC1               	movwi [1]fsr1
  6056                           
  6057                           ;Switch_B1.c: 203: Sw->Hold1 = 0;
  6058  0356  0855               	movf	_Sw^(0+128),w
  6059  0357  0086               	movwf	6
  6060  0358  3001               	movlw	1	; select bank2/3
  6061  0359  0087               	movwf	7
  6062  035A  1181               	bcf	1,3
  6063                           
  6064                           ;Switch_B1.c: 205: Sw->Hold2 = 0;
  6065  035B  0855               	movf	_Sw^(0+128),w
  6066  035C  0086               	movwf	6
  6067  035D  3001               	movlw	1	; select bank2/3
  6068  035E  0087               	movwf	7
  6069  035F  1201               	bcf	1,4
  6070                           
  6071                           ;Switch_B1.c: 206: Sw->Hold3 = 0;
  6072  0360  0855               	movf	_Sw^(0+128),w
  6073  0361  0086               	movwf	6
  6074  0362  3001               	movlw	1	; select bank2/3
  6075  0363  0087               	movwf	7
  6076  0364  1281               	bcf	1,5
  6077                           
  6078                           ;Switch_B1.c: 207: Sw->Hold2Time = 0;
  6079  0365  0855               	movf	_Sw^(0+128),w
  6080  0366  3E05               	addlw	5
  6081  0367  0086               	movwf	6
  6082  0368  3001               	movlw	1	; select bank2/3
  6083  0369  0087               	movwf	7
  6084  036A  3000               	movlw	0
  6085  036B  3FC0               	movwi [0]fsr1
  6086  036C  3FC1               	movwi [1]fsr1
  6087                           
  6088                           ;Switch_B1.c: 208: Sw->Hold3Time = 0;
  6089  036D  0855               	movf	_Sw^(0+128),w
  6090  036E  3E07               	addlw	7
  6091  036F  0086               	movwf	6
  6092  0370  3001               	movlw	1	; select bank2/3
  6093  0371  0087               	movwf	7
  6094  0372  3000               	movlw	0
  6095  0373  3FC0               	movwi [0]fsr1
  6096  0374  3FC1               	movwi [1]fsr1
  6097                           
  6098                           ;Switch_B1.c: 215: setDimmerLights_SwOff(sw);
  6099  0375  0020               	movlb	0	; select bank0
  6100  0376  0835               	movf	setSw_Main@sw,w
  6101  0377  3191  21A8  3182   	fcall	_setDimmerLights_SwOff
  6102                           
  6103                           ;Switch_B1.c: 219: setRF_Learn(0);
  6104  037A  3000               	movlw	0
  6105  037B  319B  23A7         	fcall	_setRF_Learn
  6106                           
  6107                           ;Switch_B1.c: 221: }
  6108                           ;Switch_B1.c: 222: }
  6109                           ;Switch_B1.c: 223: }
  6110                           ;Switch_B1.c: 224: } else {
  6111  037D  0008               	return
  6112  037E                     l2545:	
  6113                           
  6114                           ;Switch_B1.c: 225: if (myMain.PowerON == 1) {
  6115  037E  0022               	movlb	2	; select bank2
  6116  037F  1C20               	btfss	_myMain^(0+256),0
  6117  0380  0008               	return
  6118                           
  6119                           ;Switch_B1.c: 226: Sw->Enable = 1;
  6120  0381  0021               	movlb	1	; select bank1
  6121  0382  0855               	movf	_Sw^(0+128),w
  6122  0383  0086               	movwf	6
  6123  0384  3001               	movlw	1	; select bank2/3
  6124  0385  0087               	movwf	7
  6125  0386  1401               	bsf	1,0
  6126  0387  0008               	return
  6127  0388                     __end_of_setSw_Main:	
  6128                           
  6129                           	psect	text14
  6130  1BA7                     __ptext14:	
  6131 ;; *************** function _setRF_Learn *****************
  6132 ;; Defined at:
  6133 ;;		line 33 in file "../src/RF_Control_B1.c"
  6134 ;; Parameters:    Size  Location     Type
  6135 ;;  command         1    wreg     unsigned char 
  6136 ;; Auto vars:     Size  Location     Type
  6137 ;;  command         1    2[BANK0 ] unsigned char 
  6138 ;; Return value:  Size  Location     Type
  6139 ;;		None               void
  6140 ;; Registers used:
  6141 ;;		wreg, status,2, status,0
  6142 ;; Tracked objects:
  6143 ;;		On entry : 0/0
  6144 ;;		On exit  : 0/0
  6145 ;;		Unchanged: 0/0
  6146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6147 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6148 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6149 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6150 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6151 ;;Total ram usage:        2 bytes
  6152 ;; Hardware stack levels used:    1
  6153 ;; Hardware stack levels required when called:    5
  6154 ;; This function calls:
  6155 ;;		Nothing
  6156 ;; This function is called by:
  6157 ;;		_setSw_Main
  6158 ;; This function uses a non-reentrant model
  6159 ;;
  6160                           
  6161                           
  6162                           ;psect for function _setRF_Learn
  6163  1BA7                     _setRF_Learn:	
  6164                           
  6165                           ;incstack = 0
  6166                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6167                           ;setRF_Learn@command stored from wreg
  6168  1BA7  0020               	movlb	0	; select bank0
  6169  1BA8  00A2               	movwf	setRF_Learn@command
  6170                           
  6171                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  6172  1BA9  0822               	movf	setRF_Learn@command,w
  6173  1BAA  3A01               	xorlw	1
  6174  1BAB  3000               	movlw	0
  6175  1BAC  1903               	skipnz
  6176  1BAD  3001               	movlw	1
  6177  1BAE  00A1               	movwf	??_setRF_Learn
  6178  1BAF  0EA1               	swapf	??_setRF_Learn,f
  6179  1BB0  0DA1               	rlf	??_setRF_Learn,f
  6180  1BB1  0DA1               	rlf	??_setRF_Learn,f
  6181  1BB2  0021               	movlb	1	; select bank1
  6182  1BB3  0820               	movf	_RF1^(0+128),w
  6183  1BB4  0020               	movlb	0	; select bank0
  6184  1BB5  0621               	xorwf	??_setRF_Learn,w
  6185  1BB6  39BF               	andlw	-65
  6186  1BB7  0621               	xorwf	??_setRF_Learn,w
  6187  1BB8  0021               	movlb	1	; select bank1
  6188  1BB9  00A0               	movwf	_RF1^(0+128)
  6189  1BBA  0008               	return
  6190  1BBB                     __end_of_setRF_Learn:	
  6191                           
  6192                           	psect	text15
  6193  1F2F                     __ptext15:	
  6194 ;; *************** function _setDimmerLights_DimmingOn *****************
  6195 ;; Defined at:
  6196 ;;		line 715 in file "../src/Dimmer_B1.c"
  6197 ;; Parameters:    Size  Location     Type
  6198 ;;  sw              1    wreg     unsigned char 
  6199 ;; Auto vars:     Size  Location     Type
  6200 ;;  sw              1    3[BANK0 ] unsigned char 
  6201 ;; Return value:  Size  Location     Type
  6202 ;;		None               void
  6203 ;; Registers used:
  6204 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6205 ;; Tracked objects:
  6206 ;;		On entry : 0/0
  6207 ;;		On exit  : 0/0
  6208 ;;		Unchanged: 0/0
  6209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6211 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6213 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6214 ;;Total ram usage:        1 bytes
  6215 ;; Hardware stack levels used:    1
  6216 ;; Hardware stack levels required when called:    6
  6217 ;; This function calls:
  6218 ;;		_DimmerLights_SelectPointer
  6219 ;; This function is called by:
  6220 ;;		_setSw_Main
  6221 ;; This function uses a non-reentrant model
  6222 ;;
  6223                           
  6224                           
  6225                           ;psect for function _setDimmerLights_DimmingOn
  6226  1F2F                     _setDimmerLights_DimmingOn:	
  6227                           
  6228                           ;incstack = 0
  6229                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6230                           ;setDimmerLights_DimmingOn@sw stored from wreg
  6231  1F2F  0020               	movlb	0	; select bank0
  6232  1F30  00A3               	movwf	setDimmerLights_DimmingOn@sw
  6233                           
  6234                           ;Dimmer_B1.c: 721: DimmerLights_SelectPointer(sw);
  6235  1F31  0823               	movf	setDimmerLights_DimmingOn@sw,w
  6236  1F32  319C  2411  319F   	fcall	_DimmerLights_SelectPointer
  6237                           
  6238                           ;Dimmer_B1.c: 722: if (DimmerLights->Trigger == 0) {
  6239  1F35  0021               	movlb	1	; select bank1
  6240  1F36  084F               	movf	_DimmerLights^(0+128),w
  6241  1F37  0086               	movwf	6
  6242  1F38  3001               	movlw	1	; select bank2/3
  6243  1F39  0087               	movwf	7
  6244  1F3A  1881               	btfsc	1,1
  6245  1F3B  0008               	return
  6246                           
  6247                           ;Dimmer_B1.c: 723: if (DimmerLights->SwFlag == 1) {
  6248  1F3C  084F               	movf	_DimmerLights^(0+128),w
  6249  1F3D  0086               	movwf	6
  6250  1F3E  3001               	movlw	1	; select bank2/3
  6251  1F3F  0087               	movwf	7
  6252  1F40  1C01               	btfss	1,0
  6253  1F41  0008               	return
  6254                           
  6255                           ;Dimmer_B1.c: 724: DimmerLights->Status = 1;
  6256  1F42  0A4F               	incf	_DimmerLights^(0+128),w
  6257  1F43  0086               	movwf	6
  6258  1F44  3001               	movlw	1	; select bank2/3
  6259  1F45  0087               	movwf	7
  6260  1F46  1401               	bsf	1,0
  6261                           
  6262                           ;Dimmer_B1.c: 726: DimmerLights->DimmingSwFlag = 1;
  6263  1F47  084F               	movf	_DimmerLights^(0+128),w
  6264  1F48  0086               	movwf	6
  6265  1F49  3001               	movlw	1	; select bank2/3
  6266  1F4A  0087               	movwf	7
  6267  1F4B  1581               	bsf	1,3
  6268                           
  6269                           ;Dimmer_B1.c: 727: DimmerLights->DimmingTrigger = 1;
  6270  1F4C  084F               	movf	_DimmerLights^(0+128),w
  6271  1F4D  0086               	movwf	6
  6272  1F4E  3001               	movlw	1	; select bank2/3
  6273  1F4F  0087               	movwf	7
  6274  1F50  1601               	bsf	1,4
  6275                           
  6276                           ;Dimmer_B1.c: 728: DimmerLights->DimmingSwitch = 1;
  6277  1F51  084F               	movf	_DimmerLights^(0+128),w
  6278  1F52  0086               	movwf	6
  6279  1F53  3001               	movlw	1	; select bank2/3
  6280  1F54  0087               	movwf	7
  6281  1F55  1681               	bsf	1,5
  6282  1F56  0008               	return
  6283  1F57                     __end_of_setDimmerLights_DimmingOn:	
  6284                           
  6285                           	psect	text16
  6286  1D9C                     __ptext16:	
  6287 ;; *************** function _getSw_KeyStatus *****************
  6288 ;; Defined at:
  6289 ;;		line 237 in file "../src/Switch_B1.c"
  6290 ;; Parameters:    Size  Location     Type
  6291 ;;  sw              1    wreg     unsigned char 
  6292 ;; Auto vars:     Size  Location     Type
  6293 ;;  sw              1    5[BANK0 ] unsigned char 
  6294 ;;  status          1    4[BANK0 ] unsigned char 
  6295 ;; Return value:  Size  Location     Type
  6296 ;;                  1    wreg      unsigned char 
  6297 ;; Registers used:
  6298 ;;		wreg, status,2
  6299 ;; Tracked objects:
  6300 ;;		On entry : 0/0
  6301 ;;		On exit  : 0/0
  6302 ;;		Unchanged: 0/0
  6303 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6304 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6305 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6306 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6307 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6308 ;;Total ram usage:        5 bytes
  6309 ;; Hardware stack levels used:    1
  6310 ;; Hardware stack levels required when called:    5
  6311 ;; This function calls:
  6312 ;;		Nothing
  6313 ;; This function is called by:
  6314 ;;		_setSw_Main
  6315 ;; This function uses a non-reentrant model
  6316 ;;
  6317                           
  6318                           
  6319                           ;psect for function _getSw_KeyStatus
  6320  1D9C                     _getSw_KeyStatus:	
  6321                           
  6322                           ;incstack = 0
  6323                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6324                           ;getSw_KeyStatus@sw stored from wreg
  6325  1D9C  0020               	movlb	0	; select bank0
  6326  1D9D  00A5               	movwf	getSw_KeyStatus@sw
  6327                           
  6328                           ;Switch_B1.c: 238: char status = 0;
  6329  1D9E  01A4               	clrf	getSw_KeyStatus@status
  6330                           
  6331                           ;Switch_B1.c: 258: if (sw == 1) {
  6332  1D9F  0825               	movf	getSw_KeyStatus@sw,w
  6333  1DA0  3A01               	xorlw	1
  6334  1DA1  1D03               	skipz
  6335  1DA2  2DAB               	goto	l7659
  6336                           
  6337                           ;Switch_B1.c: 259: status = RA6 == 1 || RA4 == 1 ? 1 : 0;
  6338  1DA3  01A2               	clrf	_getSw_KeyStatus$6079
  6339  1DA4  0AA2               	incf	_getSw_KeyStatus$6079,f
  6340  1DA5  1F0C               	btfss	12,6	;volatile
  6341  1DA6  1A0C               	btfsc	12,4	;volatile
  6342  1DA7  2DA9               	goto	l7657
  6343  1DA8  01A2               	clrf	_getSw_KeyStatus$6079
  6344  1DA9                     l7657:	
  6345  1DA9  0822               	movf	_getSw_KeyStatus$6079,w
  6346  1DAA  2DB6               	goto	L2
  6347  1DAB                     l7659:	
  6348                           ;Switch_B1.c: 260: } else if (sw == 2) {
  6349                           
  6350  1DAB  0825               	movf	getSw_KeyStatus@sw,w
  6351  1DAC  3A02               	xorlw	2
  6352  1DAD  1D03               	skipz
  6353  1DAE  2DB9               	goto	l7669
  6354                           
  6355                           ;Switch_B1.c: 261: status = RA0 == 1 || RB1 == 1 ? 1 : 0;
  6356  1DAF  01A3               	clrf	_getSw_KeyStatus$6080
  6357  1DB0  0AA3               	incf	_getSw_KeyStatus$6080,f
  6358  1DB1  1C0C               	btfss	12,0	;volatile
  6359  1DB2  188D               	btfsc	13,1	;volatile
  6360  1DB3  2DB5               	goto	l7667
  6361  1DB4  01A3               	clrf	_getSw_KeyStatus$6080
  6362  1DB5                     l7667:	
  6363  1DB5  0823               	movf	_getSw_KeyStatus$6080,w
  6364  1DB6                     L2:	
  6365  1DB6  00A1               	movwf	??_getSw_KeyStatus
  6366  1DB7  0821               	movf	??_getSw_KeyStatus,w
  6367  1DB8  00A4               	movwf	getSw_KeyStatus@status
  6368  1DB9                     l7669:	
  6369                           
  6370                           ;Switch_B1.c: 262: }
  6371                           ;Switch_B1.c: 275: return status;
  6372  1DB9  0824               	movf	getSw_KeyStatus@status,w
  6373  1DBA  0008               	return
  6374  1DBB                     __end_of_getSw_KeyStatus:	
  6375                           
  6376                           	psect	text17
  6377  1C56                     __ptext17:	
  6378 ;; *************** function _SwPointSelect *****************
  6379 ;; Defined at:
  6380 ;;		line 25 in file "../src/Switch_B1.c"
  6381 ;; Parameters:    Size  Location     Type
  6382 ;;  sw              1    wreg     unsigned char 
  6383 ;; Auto vars:     Size  Location     Type
  6384 ;;  sw              1    2[BANK0 ] unsigned char 
  6385 ;; Return value:  Size  Location     Type
  6386 ;;		None               void
  6387 ;; Registers used:
  6388 ;;		wreg
  6389 ;; Tracked objects:
  6390 ;;		On entry : 0/0
  6391 ;;		On exit  : 0/0
  6392 ;;		Unchanged: 0/0
  6393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6395 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6396 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6397 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6398 ;;Total ram usage:        2 bytes
  6399 ;; Hardware stack levels used:    1
  6400 ;; Hardware stack levels required when called:    5
  6401 ;; This function calls:
  6402 ;;		Nothing
  6403 ;; This function is called by:
  6404 ;;		_setSw_Main
  6405 ;; This function uses a non-reentrant model
  6406 ;;
  6407                           
  6408                           
  6409                           ;psect for function _SwPointSelect
  6410  1C56                     _SwPointSelect:	
  6411                           
  6412                           ;incstack = 0
  6413                           ; Regs used in _SwPointSelect: [wreg]
  6414                           ;SwPointSelect@sw stored from wreg
  6415  1C56  0020               	movlb	0	; select bank0
  6416  1C57  00A2               	movwf	SwPointSelect@sw
  6417                           
  6418                           ;Switch_B1.c: 28: if (sw == 1) {
  6419  1C58  0822               	movf	SwPointSelect@sw,w
  6420  1C59  3A01               	xorlw	1
  6421  1C5A  1D03               	skipz
  6422  1C5B  2C62               	goto	l7643
  6423                           
  6424                           ;Switch_B1.c: 29: Sw = &Sw1;
  6425  1C5C  30BE               	movlw	_Sw1& (0+255)
  6426  1C5D  00A1               	movwf	??_SwPointSelect
  6427  1C5E  0821               	movf	??_SwPointSelect,w
  6428  1C5F  0021               	movlb	1	; select bank1
  6429  1C60  00D5               	movwf	_Sw^(0+128)
  6430                           
  6431                           ;Switch_B1.c: 30: }
  6432  1C61  0008               	return
  6433  1C62                     l7643:	
  6434                           
  6435                           ;Switch_B1.c: 33: else if (sw == 2) {
  6436  1C62  0020               	movlb	0	; select bank0
  6437  1C63  0822               	movf	SwPointSelect@sw,w
  6438  1C64  3A02               	xorlw	2
  6439  1C65  1D03               	skipz
  6440  1C66  0008               	return
  6441                           
  6442                           ;Switch_B1.c: 34: Sw = &Sw2;
  6443  1C67  30C7               	movlw	_Sw2& (0+255)
  6444  1C68  00A1               	movwf	??_SwPointSelect
  6445  1C69  0821               	movf	??_SwPointSelect,w
  6446  1C6A  0021               	movlb	1	; select bank1
  6447  1C6B  00D5               	movwf	_Sw^(0+128)
  6448  1C6C  0008               	return
  6449  1C6D                     __end_of_SwPointSelect:	
  6450                           
  6451                           	psect	text18
  6452  1BE5                     __ptext18:	
  6453 ;; *************** function _TouchPower *****************
  6454 ;; Defined at:
  6455 ;;		line 10 in file "../src/Switch_B1.c"
  6456 ;; Parameters:    Size  Location     Type
  6457 ;;		None
  6458 ;; Auto vars:     Size  Location     Type
  6459 ;;		None
  6460 ;; Return value:  Size  Location     Type
  6461 ;;		None               void
  6462 ;; Registers used:
  6463 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6464 ;; Tracked objects:
  6465 ;;		On entry : 0/0
  6466 ;;		On exit  : 0/0
  6467 ;;		Unchanged: 0/0
  6468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6472 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6473 ;;Total ram usage:        0 bytes
  6474 ;; Hardware stack levels used:    1
  6475 ;; Hardware stack levels required when called:    6
  6476 ;; This function calls:
  6477 ;;		_Timeout_Counter
  6478 ;;		_set_TimeoutCleared
  6479 ;; This function is called by:
  6480 ;;		_Switch_Main
  6481 ;; This function uses a non-reentrant model
  6482 ;;
  6483                           
  6484                           
  6485                           ;psect for function _TouchPower
  6486  1BE5                     _TouchPower:	
  6487                           
  6488                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6489                           
  6490                           ;incstack = 0
  6491                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6492  1BE5  0022               	movlb	2	; select bank2
  6493  1BE6  1C20               	btfss	_myMain^(0+256),0
  6494  1BE7  0008               	return
  6495                           
  6496                           ;Switch_B1.c: 12: if (RC5 == 0) {
  6497  1BE8  0020               	movlb	0	; select bank0
  6498  1BE9  1A8E               	btfsc	14,5	;volatile
  6499  1BEA  0008               	return
  6500  1BEB  2BF1               	goto	l8263
  6501  1BEC                     l2523:	
  6502                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6503                           
  6504                           
  6505                           ;Switch_B1.c: 14: RC5 = 1;
  6506  1BEC  0020               	movlb	0	; select bank0
  6507  1BED  168E               	bsf	14,5	;volatile
  6508                           
  6509                           ;Switch_B1.c: 15: Timeout_Counter();
  6510  1BEE  3188  2000  319B   	fcall	_Timeout_Counter
  6511  1BF1                     l8263:	
  6512  1BF1  0020               	movlb	0	; select bank0
  6513  1BF2  1A8E               	btfsc	14,5	;volatile
  6514  1BF3  2BF7               	goto	l8267
  6515  1BF4  0022               	movlb	2	; select bank2
  6516  1BF5  1D2A               	btfss	(_myMain^(0+256)+10),2
  6517  1BF6  2BEC               	goto	l2523
  6518  1BF7                     l8267:	
  6519                           
  6520                           ;Switch_B1.c: 16: }
  6521                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6522  1BF7  3199  2179         	fcall	_set_TimeoutCleared
  6523  1BF9  0008               	return
  6524  1BFA                     __end_of_TouchPower:	
  6525                           
  6526                           	psect	text19
  6527  1979                     __ptext19:	
  6528 ;; *************** function _set_TimeoutCleared *****************
  6529 ;; Defined at:
  6530 ;;		line 281 in file "../src/main_B1.c"
  6531 ;; Parameters:    Size  Location     Type
  6532 ;;		None
  6533 ;; Auto vars:     Size  Location     Type
  6534 ;;		None
  6535 ;; Return value:  Size  Location     Type
  6536 ;;		None               void
  6537 ;; Registers used:
  6538 ;;		status,2
  6539 ;; Tracked objects:
  6540 ;;		On entry : 0/0
  6541 ;;		On exit  : 0/0
  6542 ;;		Unchanged: 0/0
  6543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6544 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6545 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6547 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6548 ;;Total ram usage:        0 bytes
  6549 ;; Hardware stack levels used:    1
  6550 ;; Hardware stack levels required when called:    5
  6551 ;; This function calls:
  6552 ;;		Nothing
  6553 ;; This function is called by:
  6554 ;;		_getAD
  6555 ;;		_TouchPower
  6556 ;; This function uses a non-reentrant model
  6557 ;;
  6558                           
  6559                           
  6560                           ;psect for function _set_TimeoutCleared
  6561  1979                     _set_TimeoutCleared:	
  6562                           
  6563                           ;main_B1.c: 282: myMain.Timeout = 0;
  6564                           
  6565                           ;incstack = 0
  6566                           ; Regs used in _set_TimeoutCleared: [status,2]
  6567  1979  0022               	movlb	2	; select bank2
  6568  197A  112A               	bcf	(_myMain^(0+256)+10),2
  6569                           
  6570                           ;main_B1.c: 283: myMain.Timeout_Counter = 0;
  6571  197B  01AB               	clrf	(_myMain^(0+256)+11)
  6572  197C  01AC               	clrf	((_myMain+1)^(0+256)+11)
  6573  197D  0008               	return
  6574  197E                     __end_of_set_TimeoutCleared:	
  6575                           
  6576                           	psect	text20
  6577  0800                     __ptext20:	
  6578 ;; *************** function _Timeout_Counter *****************
  6579 ;; Defined at:
  6580 ;;		line 272 in file "../src/main_B1.c"
  6581 ;; Parameters:    Size  Location     Type
  6582 ;;		None
  6583 ;; Auto vars:     Size  Location     Type
  6584 ;;		None
  6585 ;; Return value:  Size  Location     Type
  6586 ;;		None               void
  6587 ;; Registers used:
  6588 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6589 ;; Tracked objects:
  6590 ;;		On entry : 0/0
  6591 ;;		On exit  : 0/0
  6592 ;;		Unchanged: 0/0
  6593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6597 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6598 ;;Total ram usage:        0 bytes
  6599 ;; Hardware stack levels used:    1
  6600 ;; Hardware stack levels required when called:    5
  6601 ;; This function calls:
  6602 ;;		Nothing
  6603 ;; This function is called by:
  6604 ;;		_getAD
  6605 ;;		_TouchPower
  6606 ;; This function uses a non-reentrant model
  6607 ;;
  6608                           
  6609                           
  6610                           ;psect for function _Timeout_Counter
  6611  0800                     _Timeout_Counter:	
  6612                           
  6613                           ;main_B1.c: 273: myMain.Timeout_Counter++;
  6614                           
  6615                           ;incstack = 0
  6616                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6617  0800  3001               	movlw	1
  6618  0801  0022               	movlb	2	; select bank2
  6619  0802  07AB               	addwf	(_myMain^(0+256)+11),f
  6620  0803  3000               	movlw	0
  6621  0804  3DAC               	addwfc	((_myMain+1)^(0+256)+11),f
  6622                           
  6623                           ;main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  6624  0805  300B               	movlw	11
  6625  0806  3E20               	addlw	_myMain& (0+255)
  6626  0807  0086               	movwf	6
  6627  0808  3001               	movlw	1	; select bank2/3
  6628  0809  0087               	movwf	7
  6629  080A  3F40               	moviw [0]fsr1
  6630  080B  3AA8               	xorlw	168
  6631  080C  1D03               	skipz
  6632  080D  2810               	goto	u7115
  6633  080E  3F41               	moviw [1]fsr1
  6634  080F  3A61               	xorlw	97
  6635  0810                     u7115:	
  6636  0810  1D03               	skipz
  6637  0811  0008               	return
  6638                           
  6639                           ;main_B1.c: 275: myMain.Timeout_Counter = 0;
  6640  0812  01AB               	clrf	(_myMain^(0+256)+11)
  6641  0813  01AC               	clrf	((_myMain+1)^(0+256)+11)
  6642                           
  6643                           ;main_B1.c: 276: myMain.Timeout = 1;
  6644  0814  152A               	bsf	(_myMain^(0+256)+10),2
  6645  0815  0008               	return
  6646  0816                     __end_of_Timeout_Counter:	
  6647                           
  6648                           	psect	text21
  6649  19C7                     __ptext21:	
  6650 ;; *************** function _Switch_Initialization *****************
  6651 ;; Defined at:
  6652 ;;		line 46 in file "../src/Switch_B1.c"
  6653 ;; Parameters:    Size  Location     Type
  6654 ;;		None
  6655 ;; Auto vars:     Size  Location     Type
  6656 ;;		None
  6657 ;; Return value:  Size  Location     Type
  6658 ;;		None               void
  6659 ;; Registers used:
  6660 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6661 ;; Tracked objects:
  6662 ;;		On entry : 0/0
  6663 ;;		On exit  : 0/0
  6664 ;;		Unchanged: 0/0
  6665 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6669 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6670 ;;Total ram usage:        0 bytes
  6671 ;; Hardware stack levels used:    1
  6672 ;; Hardware stack levels required when called:    8
  6673 ;; This function calls:
  6674 ;;		_setSw_Initialization
  6675 ;; This function is called by:
  6676 ;;		_main
  6677 ;; This function uses a non-reentrant model
  6678 ;;
  6679                           
  6680                           
  6681                           ;psect for function _Switch_Initialization
  6682  19C7                     _Switch_Initialization:	
  6683                           
  6684                           ;Switch_B1.c: 52: setSw_Initialization(1);
  6685                           
  6686                           ;incstack = 0
  6687                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6688  19C7  3001               	movlw	1
  6689  19C8  3199  21BF  3199   	fcall	_setSw_Initialization
  6690                           
  6691                           ;Switch_B1.c: 56: setSw_Initialization(2);
  6692  19CB  3002               	movlw	2
  6693  19CC  3199  21BF         	fcall	_setSw_Initialization
  6694  19CE  0008               	return
  6695  19CF                     __end_of_Switch_Initialization:	
  6696                           
  6697                           	psect	text22
  6698  19BF                     __ptext22:	
  6699 ;; *************** function _setSw_Initialization *****************
  6700 ;; Defined at:
  6701 ;;		line 66 in file "../src/Switch_B1.c"
  6702 ;; Parameters:    Size  Location     Type
  6703 ;;  sw              1    wreg     unsigned char 
  6704 ;; Auto vars:     Size  Location     Type
  6705 ;;  sw              1    5[BANK0 ] unsigned char 
  6706 ;; Return value:  Size  Location     Type
  6707 ;;		None               void
  6708 ;; Registers used:
  6709 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6710 ;; Tracked objects:
  6711 ;;		On entry : 0/0
  6712 ;;		On exit  : 0/0
  6713 ;;		Unchanged: 0/0
  6714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6715 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6716 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6718 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6719 ;;Total ram usage:        1 bytes
  6720 ;; Hardware stack levels used:    1
  6721 ;; Hardware stack levels required when called:    7
  6722 ;; This function calls:
  6723 ;;		_setLED
  6724 ;; This function is called by:
  6725 ;;		_Switch_Initialization
  6726 ;; This function uses a non-reentrant model
  6727 ;;
  6728                           
  6729                           
  6730                           ;psect for function _setSw_Initialization
  6731  19BF                     _setSw_Initialization:	
  6732                           
  6733                           ;incstack = 0
  6734                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6735                           ;setSw_Initialization@sw stored from wreg
  6736  19BF  0020               	movlb	0	; select bank0
  6737  19C0  00A5               	movwf	setSw_Initialization@sw
  6738                           
  6739                           ;Switch_B1.c: 68: setLED(sw, 1);
  6740  19C1  01A3               	clrf	setLED@command
  6741  19C2  0AA3               	incf	setLED@command,f
  6742  19C3  0825               	movf	setSw_Initialization@sw,w
  6743  19C4  3194  2451         	fcall	_setLED
  6744  19C6  0008               	return
  6745  19C7                     __end_of_setSw_Initialization:	
  6746                           
  6747                           	psect	text23
  6748  195C                     __ptext23:	
  6749 ;; *************** function _RF_Main *****************
  6750 ;; Defined at:
  6751 ;;		line 26 in file "../src/RF_Control_B1.c"
  6752 ;; Parameters:    Size  Location     Type
  6753 ;;		None
  6754 ;; Auto vars:     Size  Location     Type
  6755 ;;		None
  6756 ;; Return value:  Size  Location     Type
  6757 ;;		None               void
  6758 ;; Registers used:
  6759 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6760 ;; Tracked objects:
  6761 ;;		On entry : 0/0
  6762 ;;		On exit  : 0/0
  6763 ;;		Unchanged: 0/0
  6764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6766 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6768 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6769 ;;Total ram usage:        0 bytes
  6770 ;; Hardware stack levels used:    1
  6771 ;; Hardware stack levels required when called:   12
  6772 ;; This function calls:
  6773 ;;		_setRF_Main
  6774 ;; This function is called by:
  6775 ;;		_main
  6776 ;; This function uses a non-reentrant model
  6777 ;;
  6778                           
  6779                           
  6780                           ;psect for function _RF_Main
  6781  195C                     _RF_Main:	
  6782                           
  6783                           ;RF_Control_B1.c: 28: setRF_Main();
  6784                           
  6785                           ;incstack = 0
  6786                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6787  195C  3185  256D         	fcall	_setRF_Main
  6788  195E  0008               	return
  6789  195F                     __end_of_RF_Main:	
  6790                           
  6791                           	psect	text24
  6792  056D                     __ptext24:	
  6793 ;; *************** function _setRF_Main *****************
  6794 ;; Defined at:
  6795 ;;		line 53 in file "../src/RF_Control_B1.c"
  6796 ;; Parameters:    Size  Location     Type
  6797 ;;		None
  6798 ;; Auto vars:     Size  Location     Type
  6799 ;;  error           1    6[BANK1 ] unsigned char 
  6800 ;; Return value:  Size  Location     Type
  6801 ;;		None               void
  6802 ;; Registers used:
  6803 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6804 ;; Tracked objects:
  6805 ;;		On entry : 0/0
  6806 ;;		On exit  : 0/0
  6807 ;;		Unchanged: 0/0
  6808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6810 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6811 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6812 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6813 ;;Total ram usage:        2 bytes
  6814 ;; Hardware stack levels used:    1
  6815 ;; Hardware stack levels required when called:   11
  6816 ;; This function calls:
  6817 ;;		_CC2500_PowerOnInitial
  6818 ;;		_CC2500_RxData
  6819 ;;		_CC2500_TxData
  6820 ;;		_CC2500_WriteCommand
  6821 ;;		_RF_RxDisable
  6822 ;;		___lwdiv
  6823 ;;		_getBuz_GO
  6824 ;;		_getRF_KeyStatus
  6825 ;;		_getRxData
  6826 ;; This function is called by:
  6827 ;;		_RF_Main
  6828 ;; This function uses a non-reentrant model
  6829 ;;
  6830                           
  6831                           
  6832                           ;psect for function _setRF_Main
  6833  056D                     _setRF_Main:	
  6834                           
  6835                           ;RF_Control_B1.c: 54: char error = 0;
  6836                           
  6837                           ;incstack = 0
  6838                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6839  056D  0021               	movlb	1	; select bank1
  6840  056E  01EB               	clrf	setRF_Main@error^(0+128)
  6841                           
  6842                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  6843  056F  1C20               	btfss	_RF1^(0+128),0
  6844  0570  2E3E               	goto	l2126
  6845                           
  6846                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  6847  0571  319A  22A6  3185   	fcall	_getBuz_GO
  6848  0574  0020               	movlb	0	; select bank0
  6849  0575  0822               	movf	?_getBuz_GO+1,w
  6850  0576  0421               	iorwf	?_getBuz_GO,w
  6851  0577  1D03               	skipz
  6852  0578  2E1F               	goto	l9617
  6853                           
  6854                           ;RF_Control_B1.c: 59: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6855  0579  319A  22B7  3185   	fcall	_getRF_KeyStatus
  6856  057C  3A01               	xorlw	1
  6857  057D  3000               	movlw	0
  6858  057E  1903               	skipnz
  6859  057F  3001               	movlw	1
  6860  0580  0021               	movlb	1	; select bank1
  6861  0581  00EA               	movwf	??_setRF_Main^(0+128)
  6862  0582  0CEA               	rrf	??_setRF_Main^(0+128),f
  6863  0583  0CEA               	rrf	??_setRF_Main^(0+128),f
  6864  0584  0820               	movf	_RF1^(0+128),w
  6865  0585  066A               	xorwf	??_setRF_Main^(0+128),w
  6866  0586  397F               	andlw	-129
  6867  0587  066A               	xorwf	??_setRF_Main^(0+128),w
  6868  0588  00A0               	movwf	_RF1^(0+128)
  6869                           
  6870                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  6871  0589  1FA0               	btfss	_RF1^(0+128),7
  6872  058A  2D8D               	goto	l2130
  6873  058B  1F20               	btfss	_RF1^(0+128),6
  6874  058C  2E1F               	goto	l9617
  6875  058D                     l2130:	
  6876                           
  6877                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  6878  058D  1D20               	btfss	_RF1^(0+128),2
  6879  058E  2DDE               	goto	l2131
  6880                           
  6881                           ;RF_Control_B1.c: 67: if (RF1.Learn == 0) {
  6882  058F  1B20               	btfsc	_RF1^(0+128),6
  6883  0590  2DD9               	goto	l9589
  6884                           
  6885                           ;RF_Control_B1.c: 68: RF1.Count++;
  6886  0591  3001               	movlw	1
  6887  0592  07A2               	addwf	(_RF1^(0+128)+2),f
  6888  0593  3000               	movlw	0
  6889  0594  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6890                           
  6891                           ;RF_Control_B1.c: 69: if (RF1.Count >= (RF1.RunTime / 20)) {
  6892  0595  3014               	movlw	20
  6893  0596  0020               	movlb	0	; select bank0
  6894  0597  00A1               	movwf	___lwdiv@divisor
  6895  0598  3000               	movlw	0
  6896  0599  00A2               	movwf	___lwdiv@divisor+1
  6897  059A  0021               	movlb	1	; select bank1
  6898  059B  0828               	movf	((_RF1+1)^(0+128)+7),w
  6899  059C  0020               	movlb	0	; select bank0
  6900  059D  01A4               	clrf	___lwdiv@dividend+1
  6901  059E  07A4               	addwf	___lwdiv@dividend+1,f
  6902  059F  0021               	movlb	1	; select bank1
  6903  05A0  0827               	movf	(_RF1^(0+128)+7),w
  6904  05A1  0020               	movlb	0	; select bank0
  6905  05A2  01A3               	clrf	___lwdiv@dividend
  6906  05A3  07A3               	addwf	___lwdiv@dividend,f
  6907  05A4  3191  2171  3185   	fcall	___lwdiv
  6908  05A7  0020               	movlb	0	; select bank0
  6909  05A8  0822               	movf	?___lwdiv+1,w
  6910  05A9  0021               	movlb	1	; select bank1
  6911  05AA  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6912  05AB  1D03               	skipz
  6913  05AC  2DB1               	goto	u10905
  6914  05AD  0020               	movlb	0	; select bank0
  6915  05AE  0821               	movf	?___lwdiv,w
  6916  05AF  0021               	movlb	1	; select bank1
  6917  05B0  0222               	subwf	(_RF1^(0+128)+2),w
  6918  05B1                     u10905:	
  6919  05B1  1C03               	skipc
  6920  05B2  2E1F               	goto	l9617
  6921                           
  6922                           ;RF_Control_B1.c: 70: RF1.Count = (RF1.RunTime / 20);
  6923  05B3  3014               	movlw	20
  6924  05B4  0020               	movlb	0	; select bank0
  6925  05B5  00A1               	movwf	___lwdiv@divisor
  6926  05B6  3000               	movlw	0
  6927  05B7  00A2               	movwf	___lwdiv@divisor+1
  6928  05B8  0021               	movlb	1	; select bank1
  6929  05B9  0828               	movf	((_RF1+1)^(0+128)+7),w
  6930  05BA  0020               	movlb	0	; select bank0
  6931  05BB  01A4               	clrf	___lwdiv@dividend+1
  6932  05BC  07A4               	addwf	___lwdiv@dividend+1,f
  6933  05BD  0021               	movlb	1	; select bank1
  6934  05BE  0827               	movf	(_RF1^(0+128)+7),w
  6935  05BF  0020               	movlb	0	; select bank0
  6936  05C0  01A3               	clrf	___lwdiv@dividend
  6937  05C1  07A3               	addwf	___lwdiv@dividend,f
  6938  05C2  3191  2171  3185   	fcall	___lwdiv
  6939  05C5  0020               	movlb	0	; select bank0
  6940  05C6  0822               	movf	?___lwdiv+1,w
  6941  05C7  0021               	movlb	1	; select bank1
  6942  05C8  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6943  05C9  07A3               	addwf	((_RF1+1)^(0+128)+2),f
  6944  05CA  0020               	movlb	0	; select bank0
  6945  05CB  0821               	movf	?___lwdiv,w
  6946  05CC  0021               	movlb	1	; select bank1
  6947  05CD  01A2               	clrf	(_RF1^(0+128)+2)
  6948  05CE  07A2               	addwf	(_RF1^(0+128)+2),f
  6949                           
  6950                           ;RF_Control_B1.c: 72: RF1.TransceiveGO = 0;
  6951  05CF  1120               	bcf	_RF1^(0+128),2
  6952                           
  6953                           ;RF_Control_B1.c: 73: RF1.CorrectionCounter = 0;
  6954  05D0  01AA               	clrf	(_RF1^(0+128)+10)
  6955  05D1  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6956                           
  6957                           ;RF_Control_B1.c: 74: RF_RxDisable();
  6958  05D2  3187  27F0  3185   	fcall	_RF_RxDisable
  6959                           
  6960                           ;RF_Control_B1.c: 75: CC2500_TxData();
  6961  05D5  3188  20E8  3185   	fcall	_CC2500_TxData
  6962                           
  6963                           ;RF_Control_B1.c: 77: }
  6964                           ;RF_Control_B1.c: 78: } else {
  6965  05D8  2E1F               	goto	l9617
  6966  05D9                     l9589:	
  6967                           
  6968                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  6969  05D9  0021               	movlb	1	; select bank1
  6970  05DA  01A2               	clrf	(_RF1^(0+128)+2)
  6971  05DB  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6972                           
  6973                           ;RF_Control_B1.c: 80: RF1.TransceiveGO = 0;
  6974  05DC  1120               	bcf	_RF1^(0+128),2
  6975                           
  6976                           ;RF_Control_B1.c: 81: }
  6977                           ;RF_Control_B1.c: 82: } else {
  6978  05DD  2E1F               	goto	l9617
  6979  05DE                     l2131:	
  6980                           
  6981                           ;RF_Control_B1.c: 83: if (RF1.RxStatus == 1) {
  6982  05DE  1DA0               	btfss	_RF1^(0+128),3
  6983  05DF  2DED               	goto	l9603
  6984                           
  6985                           ;RF_Control_B1.c: 85: CC2500_RxData();
  6986  05E0  3189  2155  3185   	fcall	_CC2500_RxData
  6987                           
  6988                           ;RF_Control_B1.c: 87: if (RF1.ReceiveGO == 1) {
  6989  05E3  0021               	movlb	1	; select bank1
  6990  05E4  1CA0               	btfss	_RF1^(0+128),1
  6991  05E5  2E1F               	goto	l9617
  6992                           
  6993                           ;RF_Control_B1.c: 88: RF1.ReceiveGO = 0;
  6994  05E6  10A0               	bcf	_RF1^(0+128),1
  6995                           
  6996                           ;RF_Control_B1.c: 89: RF1.CorrectionCounter = 0;
  6997  05E7  01AA               	clrf	(_RF1^(0+128)+10)
  6998  05E8  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6999                           
  7000                           ;RF_Control_B1.c: 97: getRxData();
  7001  05E9  318A  2232  3185   	fcall	_getRxData
  7002                           
  7003                           ;RF_Control_B1.c: 100: }
  7004                           ;RF_Control_B1.c: 101: } else {
  7005  05EC  2E1F               	goto	l9617
  7006  05ED                     l9603:	
  7007                           
  7008                           ;RF_Control_B1.c: 102: RF1.Count++;
  7009  05ED  3001               	movlw	1
  7010  05EE  0021               	movlb	1	; select bank1
  7011  05EF  07A2               	addwf	(_RF1^(0+128)+2),f
  7012  05F0  3000               	movlw	0
  7013  05F1  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  7014                           
  7015                           ;RF_Control_B1.c: 103: if (RF1.Count >= (RF1.RunTime / 20)) {
  7016  05F2  3014               	movlw	20
  7017  05F3  0020               	movlb	0	; select bank0
  7018  05F4  00A1               	movwf	___lwdiv@divisor
  7019  05F5  3000               	movlw	0
  7020  05F6  00A2               	movwf	___lwdiv@divisor+1
  7021  05F7  0021               	movlb	1	; select bank1
  7022  05F8  0828               	movf	((_RF1+1)^(0+128)+7),w
  7023  05F9  0020               	movlb	0	; select bank0
  7024  05FA  01A4               	clrf	___lwdiv@dividend+1
  7025  05FB  07A4               	addwf	___lwdiv@dividend+1,f
  7026  05FC  0021               	movlb	1	; select bank1
  7027  05FD  0827               	movf	(_RF1^(0+128)+7),w
  7028  05FE  0020               	movlb	0	; select bank0
  7029  05FF  01A3               	clrf	___lwdiv@dividend
  7030  0600  07A3               	addwf	___lwdiv@dividend,f
  7031  0601  3191  2171  3185   	fcall	___lwdiv
  7032  0604  0020               	movlb	0	; select bank0
  7033  0605  0822               	movf	?___lwdiv+1,w
  7034  0606  0021               	movlb	1	; select bank1
  7035  0607  0223               	subwf	((_RF1+1)^(0+128)+2),w
  7036  0608  1D03               	skipz
  7037  0609  2E0E               	goto	u10935
  7038  060A  0020               	movlb	0	; select bank0
  7039  060B  0821               	movf	?___lwdiv,w
  7040  060C  0021               	movlb	1	; select bank1
  7041  060D  0222               	subwf	(_RF1^(0+128)+2),w
  7042  060E                     u10935:	
  7043  060E  1C03               	skipc
  7044  060F  2E1F               	goto	l9617
  7045                           
  7046                           ;RF_Control_B1.c: 104: RF1.Count = 0;
  7047  0610  01A2               	clrf	(_RF1^(0+128)+2)
  7048  0611  01A3               	clrf	((_RF1+1)^(0+128)+2)
  7049                           
  7050                           ;RF_Control_B1.c: 106: RF1.RxStatus = 1;
  7051  0612  15A0               	bsf	_RF1^(0+128),3
  7052                           
  7053                           ;RF_Control_B1.c: 107: CC2500_WriteCommand(0x36);
  7054  0613  3036               	movlw	54
  7055  0614  319C  24B9  3185   	fcall	_CC2500_WriteCommand
  7056                           
  7057                           ;RF_Control_B1.c: 108: CC2500_WriteCommand(0x3A);
  7058  0617  303A               	movlw	58
  7059  0618  319C  24B9  3185   	fcall	_CC2500_WriteCommand
  7060                           
  7061                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x34);
  7062  061B  3034               	movlw	52
  7063  061C  319C  24B9  3185   	fcall	_CC2500_WriteCommand
  7064  061F                     l9617:	
  7065                           
  7066                           ;RF_Control_B1.c: 111: }
  7067                           ;RF_Control_B1.c: 112: }
  7068                           ;RF_Control_B1.c: 113: }
  7069                           ;RF_Control_B1.c: 114: }
  7070                           ;RF_Control_B1.c: 115: }
  7071                           ;RF_Control_B1.c: 117: RF1.CorrectionCounter++;
  7072  061F  3001               	movlw	1
  7073  0620  0021               	movlb	1	; select bank1
  7074  0621  07AA               	addwf	(_RF1^(0+128)+10),f
  7075  0622  3000               	movlw	0
  7076  0623  3DAB               	addwfc	((_RF1+1)^(0+128)+10),f
  7077                           
  7078                           ;RF_Control_B1.c: 118: if (RF1.CorrectionCounter > (60000 / 20)) {
  7079  0624  300B               	movlw	11
  7080  0625  022B               	subwf	((_RF1+1)^(0+128)+10),w
  7081  0626  30B9               	movlw	185
  7082  0627  1903               	skipnz
  7083  0628  022A               	subwf	(_RF1^(0+128)+10),w
  7084  0629  1C03               	skipc
  7085  062A  2E37               	goto	l9631
  7086                           
  7087                           ;RF_Control_B1.c: 119: RF1.CorrectionCounter = 0;
  7088  062B  01AA               	clrf	(_RF1^(0+128)+10)
  7089  062C  01AB               	clrf	((_RF1+1)^(0+128)+10)
  7090                           
  7091                           ;RF_Control_B1.c: 121: RF1.RxStatus = 0;
  7092  062D  11A0               	bcf	_RF1^(0+128),3
  7093                           
  7094                           ;RF_Control_B1.c: 122: RF1.ReceiveGO = 0;
  7095  062E  10A0               	bcf	_RF1^(0+128),1
  7096                           
  7097                           ;RF_Control_B1.c: 123: CC2500_WriteCommand(0x36);
  7098  062F  3036               	movlw	54
  7099  0630  319C  24B9  3185   	fcall	_CC2500_WriteCommand
  7100                           
  7101                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x3A);
  7102  0633  303A               	movlw	58
  7103  0634  319C  24B9  3185   	fcall	_CC2500_WriteCommand
  7104  0637                     l9631:	
  7105                           
  7106                           ;RF_Control_B1.c: 125: }
  7107                           ;RF_Control_B1.c: 127: if (RF1.Timeout == 1) {
  7108  0637  0021               	movlb	1	; select bank1
  7109  0638  1F21               	btfss	(_RF1^(0+128)+1),6
  7110  0639  0008               	return
  7111                           
  7112                           ;RF_Control_B1.c: 128: RF1.Timeout = 0;
  7113  063A  1321               	bcf	(_RF1^(0+128)+1),6
  7114                           
  7115                           ;RF_Control_B1.c: 129: CC2500_PowerOnInitial();
  7116  063B  319B  23D0         	fcall	_CC2500_PowerOnInitial
  7117                           
  7118                           ;RF_Control_B1.c: 130: }
  7119                           ;RF_Control_B1.c: 132: } else {
  7120  063D  0008               	return
  7121  063E                     l2126:	
  7122                           
  7123                           ;RF_Control_B1.c: 133: if (myMain.PowerON == 1) {
  7124  063E  0022               	movlb	2	; select bank2
  7125  063F  1C20               	btfss	_myMain^(0+256),0
  7126  0640  0008               	return
  7127                           
  7128                           ;RF_Control_B1.c: 134: RF1.Enable = 1;
  7129  0641  0021               	movlb	1	; select bank1
  7130  0642  1420               	bsf	_RF1^(0+128),0
  7131  0643  0008               	return
  7132  0644                     __end_of_setRF_Main:	
  7133                           
  7134                           	psect	text25
  7135  0A32                     __ptext25:	
  7136 ;; *************** function _getRxData *****************
  7137 ;; Defined at:
  7138 ;;		line 227 in file "../src/RF_Control_B1.c"
  7139 ;; Parameters:    Size  Location     Type
  7140 ;;		None
  7141 ;; Auto vars:     Size  Location     Type
  7142 ;;  error           1    4[BANK1 ] unsigned char 
  7143 ;; Return value:  Size  Location     Type
  7144 ;;		None               void
  7145 ;; Registers used:
  7146 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7147 ;; Tracked objects:
  7148 ;;		On entry : 0/0
  7149 ;;		On exit  : 0/0
  7150 ;;		Unchanged: 0/0
  7151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7153 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7154 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7155 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7156 ;;Total ram usage:        2 bytes
  7157 ;; Hardware stack levels used:    1
  7158 ;; Hardware stack levels required when called:   10
  7159 ;; This function calls:
  7160 ;;		_getMain_All_Error_Status
  7161 ;;		_setControl_Lights_Table
  7162 ;;		_setLog_Code
  7163 ;;		_setTxData
  7164 ;; This function is called by:
  7165 ;;		_setRF_Main
  7166 ;; This function uses a non-reentrant model
  7167 ;;
  7168                           
  7169                           
  7170                           ;psect for function _getRxData
  7171  0A32                     _getRxData:	
  7172                           
  7173                           ;RF_Control_B1.c: 229: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7174                           
  7175                           ;incstack = 0
  7176                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7177  0A32  0023               	movlb	3	; select bank3
  7178  0A33  0820               	movf	_RF_Data^(0+384),w
  7179  0A34  3AAA               	xorlw	170
  7180  0A35  1D03               	skipz
  7181  0A36  2A48               	goto	l9405
  7182  0A37  0821               	movf	(_RF_Data^(0+384)+1),w
  7183  0A38  3A01               	xorlw	1
  7184  0A39  1D03               	skipz
  7185  0A3A  2A48               	goto	l9405
  7186                           
  7187                           ;RF_Control_B1.c: 230: product->Data[2] = 0x55;
  7188  0A3B  3055               	movlw	85
  7189  0A3C  0021               	movlb	1	; select bank1
  7190  0A3D  00E8               	movwf	??_getRxData^(0+128)
  7191  0A3E  086D               	movf	_product^(0+128),w
  7192  0A3F  3E02               	addlw	2
  7193  0A40  0086               	movwf	6
  7194  0A41  3002               	movlw	2	; select bank4/5
  7195  0A42  0087               	movwf	7
  7196  0A43  0868               	movf	??_getRxData^(0+128),w
  7197  0A44  0081               	movwf	1
  7198                           
  7199                           ;RF_Control_B1.c: 231: setTxData();
  7200  0A45  318F  2745         	fcall	_setTxData
  7201                           
  7202                           ;RF_Control_B1.c: 235: } else {
  7203  0A47  0008               	return
  7204  0A48                     l9405:	
  7205                           
  7206                           ;RF_Control_B1.c: 236: char error = getMain_All_Error_Status(0);
  7207  0A48  3000               	movlw	0
  7208  0A49  3190  20D4  318A   	fcall	_getMain_All_Error_Status
  7209  0A4C  0021               	movlb	1	; select bank1
  7210  0A4D  00E8               	movwf	??_getRxData^(0+128)
  7211  0A4E  0868               	movf	??_getRxData^(0+128),w
  7212  0A4F  00E9               	movwf	getRxData@error^(0+128)
  7213                           
  7214                           ;RF_Control_B1.c: 237: if (error == 0) {
  7215  0A50  08E9               	movf	getRxData@error^(0+128),f
  7216  0A51  1D03               	skipz
  7217  0A52  2AA2               	goto	l2171
  7218                           
  7219                           ;RF_Control_B1.c: 238: if (RF1.Learn == 1) {
  7220  0A53  1F20               	btfss	_RF1^(0+128),6
  7221  0A54  2A60               	goto	l9417
  7222                           
  7223                           ;RF_Control_B1.c: 240: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  7224  0A55  0023               	movlb	3	; select bank3
  7225  0A56  08A0               	movf	_RF_Data^(0+384),f
  7226  0A57  1D03               	skipz
  7227  0A58  0008               	return
  7228  0A59  0821               	movf	(_RF_Data^(0+384)+1),w
  7229  0A5A  3A64               	xorlw	100
  7230  0A5B  1D03               	skipz
  7231  0A5C  0008               	return
  7232                           
  7233                           ;RF_Control_B1.c: 241: setLog_Code();
  7234  0A5D  3191  2107         	fcall	_setLog_Code
  7235                           
  7236                           ;RF_Control_B1.c: 242: }
  7237                           ;RF_Control_B1.c: 243: } else {
  7238  0A5F  0008               	return
  7239  0A60                     l9417:	
  7240                           
  7241                           ;RF_Control_B1.c: 244: if (RF_Data[20] == 210 || RF_Data[20] == 0x0a) {
  7242  0A60  0023               	movlb	3	; select bank3
  7243  0A61  0834               	movf	(_RF_Data^(0+384)+20),w
  7244  0A62  3AD2               	xorlw	210
  7245  0A63  1903               	skipnz
  7246  0A64  2A69               	goto	l9421
  7247  0A65  0834               	movf	(_RF_Data^(0+384)+20),w
  7248  0A66  3A0A               	xorlw	10
  7249  0A67  1D03               	skipz
  7250  0A68  0008               	return
  7251  0A69                     l9421:	
  7252                           
  7253                           ;RF_Control_B1.c: 246: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7254  0A69  08A0               	movf	_RF_Data^(0+384),f
  7255  0A6A  1D03               	skipz
  7256  0A6B  0008               	return
  7257  0A6C  0821               	movf	(_RF_Data^(0+384)+1),w
  7258  0A6D  3A02               	xorlw	2
  7259  0A6E  1D03               	skipz
  7260  0A6F  0008               	return
  7261                           
  7262                           ;RF_Control_B1.c: 248: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7263  0A70  082C               	movf	(_RF_Data^(0+384)+12),w
  7264  0A71  3AFF               	xorlw	255
  7265  0A72  1D03               	skipz
  7266  0A73  2A7E               	goto	l9433
  7267  0A74  082D               	movf	(_RF_Data^(0+384)+13),w
  7268  0A75  3AFF               	xorlw	255
  7269  0A76  1D03               	skipz
  7270  0A77  2A7E               	goto	l9433
  7271  0A78  082E               	movf	(_RF_Data^(0+384)+14),w
  7272  0A79  3AFF               	xorlw	255
  7273  0A7A  1D03               	skipz
  7274  0A7B  2A7E               	goto	l9433
  7275                           
  7276                           ;RF_Control_B1.c: 249: __nop();
  7277  0A7C  0000               	nop
  7278                           
  7279                           ;RF_Control_B1.c: 250: } else {
  7280  0A7D  0008               	return
  7281  0A7E                     l9433:	
  7282                           
  7283                           ;RF_Control_B1.c: 251: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7284  0A7E  0021               	movlb	1	; select bank1
  7285  0A7F  086D               	movf	_product^(0+128),w
  7286  0A80  3E0C               	addlw	12
  7287  0A81  0086               	movwf	6
  7288  0A82  3002               	movlw	2	; select bank4/5
  7289  0A83  0087               	movwf	7
  7290  0A84  0023               	movlb	3	; select bank3
  7291  0A85  082C               	movf	(_RF_Data^(0+384)+12),w
  7292  0A86  0601               	xorwf	1,w
  7293  0A87  1D03               	skipz
  7294  0A88  0008               	return
  7295  0A89  0021               	movlb	1	; select bank1
  7296  0A8A  086D               	movf	_product^(0+128),w
  7297  0A8B  3E0D               	addlw	13
  7298  0A8C  0086               	movwf	6
  7299  0A8D  3002               	movlw	2	; select bank4/5
  7300  0A8E  0087               	movwf	7
  7301  0A8F  0023               	movlb	3	; select bank3
  7302  0A90  082D               	movf	(_RF_Data^(0+384)+13),w
  7303  0A91  0601               	xorwf	1,w
  7304  0A92  1D03               	skipz
  7305  0A93  0008               	return
  7306  0A94  0021               	movlb	1	; select bank1
  7307  0A95  086D               	movf	_product^(0+128),w
  7308  0A96  3E0E               	addlw	14
  7309  0A97  0086               	movwf	6
  7310  0A98  3002               	movlw	2	; select bank4/5
  7311  0A99  0087               	movwf	7
  7312  0A9A  0023               	movlb	3	; select bank3
  7313  0A9B  082E               	movf	(_RF_Data^(0+384)+14),w
  7314  0A9C  0601               	xorwf	1,w
  7315  0A9D  1D03               	skipz
  7316  0A9E  0008               	return
  7317                           
  7318                           ;RF_Control_B1.c: 252: setControl_Lights_Table();
  7319  0A9F  318C  24A9         	fcall	_setControl_Lights_Table
  7320                           
  7321                           ;RF_Control_B1.c: 253: }
  7322                           ;RF_Control_B1.c: 254: }
  7323                           ;RF_Control_B1.c: 256: }
  7324                           ;RF_Control_B1.c: 267: }
  7325                           ;RF_Control_B1.c: 268: }
  7326                           ;RF_Control_B1.c: 269: } else {
  7327  0AA1  0008               	return
  7328  0AA2                     l2171:	
  7329                           
  7330                           ;RF_Control_B1.c: 270: __nop();
  7331  0AA2  0000               	nop
  7332  0AA3  0008               	return
  7333  0AA4                     __end_of_getRxData:	
  7334                           
  7335                           	psect	text26
  7336  1107                     __ptext26:	
  7337 ;; *************** function _setLog_Code *****************
  7338 ;; Defined at:
  7339 ;;		line 276 in file "../src/RF_Control_B1.c"
  7340 ;; Parameters:    Size  Location     Type
  7341 ;;		None
  7342 ;; Auto vars:     Size  Location     Type
  7343 ;;		None
  7344 ;; Return value:  Size  Location     Type
  7345 ;;		None               void
  7346 ;; Registers used:
  7347 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7348 ;; Tracked objects:
  7349 ;;		On entry : 0/0
  7350 ;;		On exit  : 0/0
  7351 ;;		Unchanged: 0/0
  7352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7355 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7356 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7357 ;;Total ram usage:        1 bytes
  7358 ;; Hardware stack levels used:    1
  7359 ;; Hardware stack levels required when called:    7
  7360 ;; This function calls:
  7361 ;;		_setBuz
  7362 ;;		_setMemory_LoopSave
  7363 ;;		_setMemory_Modify
  7364 ;;		_setProductData
  7365 ;; This function is called by:
  7366 ;;		_getRxData
  7367 ;; This function uses a non-reentrant model
  7368 ;;
  7369                           
  7370                           
  7371                           ;psect for function _setLog_Code
  7372  1107                     _setLog_Code:	
  7373                           
  7374                           ;RF_Control_B1.c: 277: RF1.Learn = 0;
  7375                           
  7376                           ;incstack = 0
  7377                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7378  1107  0021               	movlb	1	; select bank1
  7379  1108  1320               	bcf	_RF1^(0+128),6
  7380                           
  7381                           ;RF_Control_B1.c: 278: setProductData(12, RF_Data[12]);
  7382  1109  0023               	movlb	3	; select bank3
  7383  110A  082C               	movf	(_RF_Data^(0+384)+12),w
  7384  110B  0020               	movlb	0	; select bank0
  7385  110C  00E6               	movwf	??_setLog_Code
  7386  110D  0866               	movf	??_setLog_Code,w
  7387  110E  00E3               	movwf	setProductData@value
  7388  110F  300C               	movlw	12
  7389  1110  319A  2223  3191   	fcall	_setProductData
  7390                           
  7391                           ;RF_Control_B1.c: 279: setProductData(13, RF_Data[13]);
  7392  1113  0023               	movlb	3	; select bank3
  7393  1114  082D               	movf	(_RF_Data^(0+384)+13),w
  7394  1115  0020               	movlb	0	; select bank0
  7395  1116  00E6               	movwf	??_setLog_Code
  7396  1117  0866               	movf	??_setLog_Code,w
  7397  1118  00E3               	movwf	setProductData@value
  7398  1119  300D               	movlw	13
  7399  111A  319A  2223  3191   	fcall	_setProductData
  7400                           
  7401                           ;RF_Control_B1.c: 280: setProductData(14, RF_Data[14]);
  7402  111D  0023               	movlb	3	; select bank3
  7403  111E  082E               	movf	(_RF_Data^(0+384)+14),w
  7404  111F  0020               	movlb	0	; select bank0
  7405  1120  00E6               	movwf	??_setLog_Code
  7406  1121  0866               	movf	??_setLog_Code,w
  7407  1122  00E3               	movwf	setProductData@value
  7408  1123  300E               	movlw	14
  7409  1124  319A  2223  3191   	fcall	_setProductData
  7410                           
  7411                           ;RF_Control_B1.c: 281: setBuz(1, 100);
  7412  1127  3064               	movlw	100
  7413  1128  0020               	movlb	0	; select bank0
  7414  1129  00AA               	movwf	setBuz@time
  7415  112A  3000               	movlw	0
  7416  112B  00AB               	movwf	setBuz@time+1
  7417  112C  3001               	movlw	1
  7418  112D  3194  24F8  3191   	fcall	_setBuz
  7419                           
  7420                           ;RF_Control_B1.c: 282: if (myMain.First == 1) {
  7421  1130  0022               	movlb	2	; select bank2
  7422  1131  1EA0               	btfss	_myMain^(0+256),5
  7423  1132  2937               	goto	l2186
  7424                           
  7425                           ;RF_Control_B1.c: 283: setMemory_LoopSave(1);
  7426  1133  3001               	movlw	1
  7427  1134  319B  236D  3191   	fcall	_setMemory_LoopSave
  7428  1137                     l2186:	
  7429                           
  7430                           ;RF_Control_B1.c: 284: }
  7431                           ;RF_Control_B1.c: 285: setMemory_Modify(1);
  7432  1137  3001               	movlw	1
  7433  1138  319B  235A         	fcall	_setMemory_Modify
  7434  113A  0008               	return
  7435  113B                     __end_of_setLog_Code:	
  7436                           
  7437                           	psect	text27
  7438  1B6D                     __ptext27:	
  7439 ;; *************** function _setMemory_LoopSave *****************
  7440 ;; Defined at:
  7441 ;;		line 1076 in file "../src/MCU_B1.c"
  7442 ;; Parameters:    Size  Location     Type
  7443 ;;  command         1    wreg     unsigned char 
  7444 ;; Auto vars:     Size  Location     Type
  7445 ;;  command         1    2[BANK0 ] unsigned char 
  7446 ;; Return value:  Size  Location     Type
  7447 ;;		None               void
  7448 ;; Registers used:
  7449 ;;		wreg, status,2, status,0
  7450 ;; Tracked objects:
  7451 ;;		On entry : 0/0
  7452 ;;		On exit  : 0/0
  7453 ;;		Unchanged: 0/0
  7454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7456 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7457 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7458 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7459 ;;Total ram usage:        2 bytes
  7460 ;; Hardware stack levels used:    1
  7461 ;; Hardware stack levels required when called:    5
  7462 ;; This function calls:
  7463 ;;		Nothing
  7464 ;; This function is called by:
  7465 ;;		_setLog_Code
  7466 ;; This function uses a non-reentrant model
  7467 ;;
  7468                           
  7469                           
  7470                           ;psect for function _setMemory_LoopSave
  7471  1B6D                     _setMemory_LoopSave:	
  7472                           
  7473                           ;incstack = 0
  7474                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7475                           ;setMemory_LoopSave@command stored from wreg
  7476  1B6D  0020               	movlb	0	; select bank0
  7477  1B6E  00A2               	movwf	setMemory_LoopSave@command
  7478                           
  7479                           ;MCU_B1.c: 1077: Memory.LoopSave = command == 1 ? 1 : 0;
  7480  1B6F  0822               	movf	setMemory_LoopSave@command,w
  7481  1B70  3A01               	xorlw	1
  7482  1B71  3000               	movlw	0
  7483  1B72  1903               	skipnz
  7484  1B73  3001               	movlw	1
  7485  1B74  00A1               	movwf	??_setMemory_LoopSave
  7486  1B75  0DA1               	rlf	??_setMemory_LoopSave,f
  7487  1B76  0DA1               	rlf	??_setMemory_LoopSave,f
  7488  1B77  0024               	movlb	4	; select bank4
  7489  1B78  0844               	movf	(_Memory^(0+512)+36),w
  7490  1B79  0020               	movlb	0	; select bank0
  7491  1B7A  0621               	xorwf	??_setMemory_LoopSave,w
  7492  1B7B  39FB               	andlw	-5
  7493  1B7C  0621               	xorwf	??_setMemory_LoopSave,w
  7494  1B7D  0024               	movlb	4	; select bank4
  7495  1B7E  00C4               	movwf	(_Memory^(0+512)+36)
  7496  1B7F  0008               	return
  7497  1B80                     __end_of_setMemory_LoopSave:	
  7498                           
  7499                           	psect	text28
  7500  0CA9                     __ptext28:	
  7501 ;; *************** function _setControl_Lights_Table *****************
  7502 ;; Defined at:
  7503 ;;		line 289 in file "../src/RF_Control_B1.c"
  7504 ;; Parameters:    Size  Location     Type
  7505 ;;		None
  7506 ;; Auto vars:     Size  Location     Type
  7507 ;;		None
  7508 ;; Return value:  Size  Location     Type
  7509 ;;		None               void
  7510 ;; Registers used:
  7511 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7512 ;; Tracked objects:
  7513 ;;		On entry : 0/0
  7514 ;;		On exit  : 0/0
  7515 ;;		Unchanged: 0/0
  7516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7520 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7521 ;;Total ram usage:        0 bytes
  7522 ;; Hardware stack levels used:    1
  7523 ;; Hardware stack levels required when called:    9
  7524 ;; This function calls:
  7525 ;;		_getDimmerLights_Status
  7526 ;;		_getMain_All_LightsStatus
  7527 ;;		_setCmd_Status
  7528 ;;		_setDimmerLights_SwOff
  7529 ;;		_setDimmerLights_SwOn
  7530 ;;		_setProductData
  7531 ;;		_setRFSW_AdjControl
  7532 ;;		_setRFSW_Control
  7533 ;;		_setTxData
  7534 ;; This function is called by:
  7535 ;;		_getRxData
  7536 ;; This function uses a non-reentrant model
  7537 ;;
  7538                           
  7539                           
  7540                           ;psect for function _setControl_Lights_Table
  7541  0CA9                     _setControl_Lights_Table:	
  7542                           
  7543                           ;RF_Control_B1.c: 290: switch (RF_Data[15]) {
  7544                           
  7545                           ;incstack = 0
  7546                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7547  0CA9  2D22               	goto	l9323
  7548  0CAA                     l9299:	
  7549                           ;RF_Control_B1.c: 292: case 0x00:
  7550                           
  7551                           
  7552                           ;RF_Control_B1.c: 293: if (getMain_All_LightsStatus() == 1) {
  7553  0CAA  319B  2347  318C   	fcall	_getMain_All_LightsStatus
  7554  0CAD  3A01               	xorlw	1
  7555  0CAE  1D03               	skipz
  7556  0CAF  2CD5               	goto	l9309
  7557                           
  7558                           ;RF_Control_B1.c: 296: if (getDimmerLights_Status(1) == 1) {
  7559  0CB0  3001               	movlw	1
  7560  0CB1  319A  2284  318C   	fcall	_getDimmerLights_Status
  7561  0CB4  3A01               	xorlw	1
  7562  0CB5  1D03               	skipz
  7563  0CB6  2CBF               	goto	l2193
  7564                           
  7565                           ;RF_Control_B1.c: 297: setDimmerLights_SwOn(1);
  7566  0CB7  3001               	movlw	1
  7567  0CB8  3195  25AC  318C   	fcall	_setDimmerLights_SwOn
  7568                           
  7569                           ;RF_Control_B1.c: 298: setDimmerLights_SwOff(1);
  7570  0CBB  3001               	movlw	1
  7571  0CBC  3191  21A8  318C   	fcall	_setDimmerLights_SwOff
  7572  0CBF                     l2193:	
  7573                           
  7574                           ;RF_Control_B1.c: 299: }
  7575                           ;RF_Control_B1.c: 302: if (getDimmerLights_Status(2) == 1) {
  7576  0CBF  3002               	movlw	2
  7577  0CC0  319A  2284  318C   	fcall	_getDimmerLights_Status
  7578  0CC3  3A01               	xorlw	1
  7579  0CC4  1D03               	skipz
  7580  0CC5  2CCE               	goto	l9307
  7581                           
  7582                           ;RF_Control_B1.c: 303: setDimmerLights_SwOn(2);
  7583  0CC6  3002               	movlw	2
  7584  0CC7  3195  25AC  318C   	fcall	_setDimmerLights_SwOn
  7585                           
  7586                           ;RF_Control_B1.c: 304: setDimmerLights_SwOff(2);
  7587  0CCA  3002               	movlw	2
  7588  0CCB  3191  21A8  318C   	fcall	_setDimmerLights_SwOff
  7589  0CCE                     l9307:	
  7590                           
  7591                           ;RF_Control_B1.c: 305: }
  7592                           ;RF_Control_B1.c: 314: setCmd_Status(1, 1);
  7593  0CCE  0020               	movlb	0	; select bank0
  7594  0CCF  01A1               	clrf	setCmd_Status@cmd
  7595  0CD0  0AA1               	incf	setCmd_Status@cmd,f
  7596  0CD1  3001               	movlw	1
  7597  0CD2  319C  246D         	fcall	_setCmd_Status
  7598                           
  7599                           ;RF_Control_B1.c: 315: } else {
  7600  0CD4  0008               	return
  7601  0CD5                     l9309:	
  7602                           
  7603                           ;RF_Control_B1.c: 316: setProductData(9, 0);
  7604  0CD5  0020               	movlb	0	; select bank0
  7605  0CD6  01E3               	clrf	setProductData@value
  7606  0CD7  3009               	movlw	9
  7607  0CD8  319A  2223  318C   	fcall	_setProductData
  7608                           
  7609                           ;RF_Control_B1.c: 317: setProductData(11, 0);
  7610  0CDB  0020               	movlb	0	; select bank0
  7611  0CDC  01E3               	clrf	setProductData@value
  7612  0CDD  300B               	movlw	11
  7613  0CDE  319A  2223  318C   	fcall	_setProductData
  7614                           
  7615                           ;RF_Control_B1.c: 318: setProductData(15, 0);
  7616  0CE1  0020               	movlb	0	; select bank0
  7617  0CE2  01E3               	clrf	setProductData@value
  7618  0CE3  300F               	movlw	15
  7619  0CE4  319A  2223  318C   	fcall	_setProductData
  7620                           
  7621                           ;RF_Control_B1.c: 319: setProductData(17, 0);
  7622  0CE7  0020               	movlb	0	; select bank0
  7623  0CE8  01E3               	clrf	setProductData@value
  7624  0CE9  3011               	movlw	17
  7625  0CEA  319A  2223  318C   	fcall	_setProductData
  7626                           
  7627                           ;RF_Control_B1.c: 320: setTxData();
  7628  0CED  318F  2745         	fcall	_setTxData
  7629                           
  7630                           ;RF_Control_B1.c: 321: }
  7631                           ;RF_Control_B1.c: 322: break;
  7632  0CEF  0008               	return
  7633  0CF0                     l9311:	
  7634                           ;RF_Control_B1.c: 324: case 0x20:
  7635                           
  7636                           
  7637                           ;RF_Control_B1.c: 325: setProductData(9, 0);
  7638  0CF0  0020               	movlb	0	; select bank0
  7639  0CF1  01E3               	clrf	setProductData@value
  7640  0CF2  3009               	movlw	9
  7641  0CF3  319A  2223  318C   	fcall	_setProductData
  7642                           
  7643                           ;RF_Control_B1.c: 326: setProductData(11, 0);
  7644  0CF6  0020               	movlb	0	; select bank0
  7645  0CF7  01E3               	clrf	setProductData@value
  7646  0CF8  300B               	movlw	11
  7647  0CF9  319A  2223  318C   	fcall	_setProductData
  7648                           
  7649                           ;RF_Control_B1.c: 327: setProductData(15, product->Data[15]);
  7650  0CFC  0021               	movlb	1	; select bank1
  7651  0CFD  086D               	movf	_product^(0+128),w
  7652  0CFE  0086               	movwf	6
  7653  0CFF  3002               	movlw	2	; select bank4/5
  7654  0D00  0087               	movwf	7
  7655  0D01  3002               	movlw	2	; select bank4/5
  7656  0D02  3F4F               	moviw [15]fsr1
  7657  0D03  0020               	movlb	0	; select bank0
  7658  0D04  00E3               	movwf	setProductData@value
  7659  0D05  300F               	movlw	15
  7660  0D06  319A  2223  318C   	fcall	_setProductData
  7661                           
  7662                           ;RF_Control_B1.c: 328: setProductData(17, 0);
  7663  0D09  0020               	movlb	0	; select bank0
  7664  0D0A  01E3               	clrf	setProductData@value
  7665  0D0B  3011               	movlw	17
  7666  0D0C  319A  2223  318C   	fcall	_setProductData
  7667                           
  7668                           ;RF_Control_B1.c: 329: setTxData();
  7669  0D0F  318F  2745         	fcall	_setTxData
  7670                           
  7671                           ;RF_Control_B1.c: 330: break;
  7672  0D11  0008               	return
  7673  0D12                     l9313:	
  7674                           ;RF_Control_B1.c: 333: case 0x01:
  7675                           
  7676                           
  7677                           ;RF_Control_B1.c: 334: setRFSW_Control(1);
  7678  0D12  3001               	movlw	1
  7679  0D13  3192  22DD         	fcall	_setRFSW_Control
  7680                           
  7681                           ;RF_Control_B1.c: 335: break;
  7682  0D15  0008               	return
  7683  0D16                     l9315:	
  7684                           ;RF_Control_B1.c: 339: case 0x11:
  7685                           
  7686                           
  7687                           ;RF_Control_B1.c: 340: setRFSW_AdjControl(1);
  7688  0D16  3001               	movlw	1
  7689  0D17  318B  2316         	fcall	_setRFSW_AdjControl
  7690                           
  7691                           ;RF_Control_B1.c: 341: break;
  7692  0D19  0008               	return
  7693  0D1A                     l9317:	
  7694                           ;RF_Control_B1.c: 346: case 0x02:
  7695                           
  7696                           
  7697                           ;RF_Control_B1.c: 347: setRFSW_Control(2);
  7698  0D1A  3002               	movlw	2
  7699  0D1B  3192  22DD         	fcall	_setRFSW_Control
  7700                           
  7701                           ;RF_Control_B1.c: 348: break;
  7702  0D1D  0008               	return
  7703  0D1E                     l9319:	
  7704                           ;RF_Control_B1.c: 351: case 0x21:
  7705                           
  7706                           
  7707                           ;RF_Control_B1.c: 352: setRFSW_AdjControl(2);
  7708  0D1E  3002               	movlw	2
  7709  0D1F  318B  2316         	fcall	_setRFSW_AdjControl
  7710                           
  7711                           ;RF_Control_B1.c: 370: }
  7712                           
  7713                           ;RF_Control_B1.c: 353: break;
  7714  0D21  0008               	return
  7715  0D22                     l9323:	
  7716  0D22  0023               	movlb	3	; select bank3
  7717  0D23  082F               	movf	(_RF_Data^(0+384)+15),w
  7718                           
  7719                           ; Switch size 1, requested type "space"
  7720                           ; Number of cases is 6, Range of values is 0 to 33
  7721                           ; switch strategies available:
  7722                           ; Name         Instructions Cycles
  7723                           ; simple_byte           19    10 (average)
  7724                           ; direct_byte           74     6 (fixed)
  7725                           ; jumptable            260     6 (fixed)
  7726                           ;	Chosen strategy is simple_byte
  7727  0D24  3A00               	xorlw	0	; case 0
  7728  0D25  1903               	skipnz
  7729  0D26  2CAA               	goto	l9299
  7730  0D27  3A01               	xorlw	1	; case 1
  7731  0D28  1903               	skipnz
  7732  0D29  2D12               	goto	l9313
  7733  0D2A  3A03               	xorlw	3	; case 2
  7734  0D2B  1903               	skipnz
  7735  0D2C  2D1A               	goto	l9317
  7736  0D2D  3A13               	xorlw	19	; case 17
  7737  0D2E  1903               	skipnz
  7738  0D2F  2D16               	goto	l9315
  7739  0D30  3A31               	xorlw	49	; case 32
  7740  0D31  1903               	skipnz
  7741  0D32  2CF0               	goto	l9311
  7742  0D33  3A01               	xorlw	1	; case 33
  7743  0D34  1903               	skipnz
  7744  0D35  2D1E               	goto	l9319
  7745  0D36  2D37               	goto	l2202
  7746  0D37                     l2202:	
  7747  0D37  0008               	return
  7748  0D38                     __end_of_setControl_Lights_Table:	
  7749                           
  7750                           	psect	text29
  7751  12DD                     __ptext29:	
  7752 ;; *************** function _setRFSW_Control *****************
  7753 ;; Defined at:
  7754 ;;		line 378 in file "../src/RF_Control_B1.c"
  7755 ;; Parameters:    Size  Location     Type
  7756 ;;  sw              1    wreg     unsigned char 
  7757 ;; Auto vars:     Size  Location     Type
  7758 ;;  sw              1    2[BANK1 ] unsigned char 
  7759 ;;  status          1    1[BANK1 ] unsigned char 
  7760 ;; Return value:  Size  Location     Type
  7761 ;;		None               void
  7762 ;; Registers used:
  7763 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7764 ;; Tracked objects:
  7765 ;;		On entry : 0/0
  7766 ;;		On exit  : 0/0
  7767 ;;		Unchanged: 0/0
  7768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7770 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7771 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7772 ;;      Totals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  7773 ;;Total ram usage:        3 bytes
  7774 ;; Hardware stack levels used:    1
  7775 ;; Hardware stack levels required when called:    8
  7776 ;; This function calls:
  7777 ;;		_getDimmerLights_Status
  7778 ;;		_setBuz
  7779 ;;		_setDelayOff_GO
  7780 ;;		_setDimmerLights_SwOff
  7781 ;;		_setDimmerLights_SwOn
  7782 ;;		_setRF_DimmerLights
  7783 ;;		_setTxData
  7784 ;; This function is called by:
  7785 ;;		_setControl_Lights_Table
  7786 ;; This function uses a non-reentrant model
  7787 ;;
  7788                           
  7789                           
  7790                           ;psect for function _setRFSW_Control
  7791  12DD                     _setRFSW_Control:	
  7792                           
  7793                           ;incstack = 0
  7794                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7795                           ;setRFSW_Control@sw stored from wreg
  7796  12DD  0021               	movlb	1	; select bank1
  7797  12DE  00E7               	movwf	setRFSW_Control@sw^(0+128)
  7798                           
  7799                           ;RF_Control_B1.c: 379: char status = 0;
  7800  12DF  01E6               	clrf	setRFSW_Control@status^(0+128)
  7801                           
  7802                           ;RF_Control_B1.c: 381: if (RF_Data[16] == 0x80) {
  7803  12E0  0023               	movlb	3	; select bank3
  7804  12E1  0830               	movf	(_RF_Data^(0+384)+16),w
  7805  12E2  3A80               	xorlw	128
  7806  12E3  1D03               	skipz
  7807  12E4  2B13               	goto	l9233
  7808                           
  7809                           ;RF_Control_B1.c: 382: setDelayOff_GO(sw, 1, RF_Data[17]);
  7810  12E5  0020               	movlb	0	; select bank0
  7811  12E6  01E6               	clrf	setDelayOff_GO@command
  7812  12E7  0AE6               	incf	setDelayOff_GO@command,f
  7813  12E8  0023               	movlb	3	; select bank3
  7814  12E9  0831               	movf	(_RF_Data^(0+384)+17),w
  7815  12EA  0021               	movlb	1	; select bank1
  7816  12EB  00E5               	movwf	??_setRFSW_Control^(0+128)
  7817  12EC  0865               	movf	??_setRFSW_Control^(0+128),w
  7818  12ED  0020               	movlb	0	; select bank0
  7819  12EE  00E7               	movwf	setDelayOff_GO@value
  7820  12EF  0021               	movlb	1	; select bank1
  7821  12F0  0867               	movf	setRFSW_Control@sw^(0+128),w
  7822  12F1  318C  241D  3192   	fcall	_setDelayOff_GO
  7823                           
  7824                           ;RF_Control_B1.c: 383: if (getDimmerLights_Status(sw) == 1) {
  7825  12F4  0021               	movlb	1	; select bank1
  7826  12F5  0867               	movf	setRFSW_Control@sw^(0+128),w
  7827  12F6  319A  2284  3192   	fcall	_getDimmerLights_Status
  7828  12F9  3A01               	xorlw	1
  7829  12FA  1D03               	skipz
  7830  12FB  2B13               	goto	l9233
  7831                           
  7832                           ;RF_Control_B1.c: 384: setBuz(1, 100);
  7833  12FC  3064               	movlw	100
  7834  12FD  0020               	movlb	0	; select bank0
  7835  12FE  00AA               	movwf	setBuz@time
  7836  12FF  3000               	movlw	0
  7837  1300  00AB               	movwf	setBuz@time+1
  7838  1301  3001               	movlw	1
  7839  1302  3194  24F8  3192   	fcall	_setBuz
  7840                           
  7841                           ;RF_Control_B1.c: 385: setRF_DimmerLights(sw, 1);
  7842  1305  0020               	movlb	0	; select bank0
  7843  1306  01E6               	clrf	setRF_DimmerLights@on
  7844  1307  0AE6               	incf	setRF_DimmerLights@on,f
  7845  1308  0021               	movlb	1	; select bank1
  7846  1309  0867               	movf	setRFSW_Control@sw^(0+128),w
  7847  130A  3196  26CE  3192   	fcall	_setRF_DimmerLights
  7848                           
  7849                           ;RF_Control_B1.c: 386: setTxData();
  7850  130D  318F  2745  3192   	fcall	_setTxData
  7851                           
  7852                           ;RF_Control_B1.c: 387: status = 1;
  7853  1310  0021               	movlb	1	; select bank1
  7854  1311  01E6               	clrf	setRFSW_Control@status^(0+128)
  7855  1312  0AE6               	incf	setRFSW_Control@status^(0+128),f
  7856  1313                     l9233:	
  7857                           
  7858                           ;RF_Control_B1.c: 388: }
  7859                           ;RF_Control_B1.c: 389: }
  7860                           ;RF_Control_B1.c: 391: if (status == 0) {
  7861  1313  0021               	movlb	1	; select bank1
  7862  1314  08E6               	movf	setRFSW_Control@status^(0+128),f
  7863  1315  1D03               	skipz
  7864  1316  0008               	return
  7865                           
  7866                           ;RF_Control_B1.c: 393: setDimmerLights_SwOn(sw);
  7867  1317  0867               	movf	setRFSW_Control@sw^(0+128),w
  7868  1318  3195  25AC  3192   	fcall	_setDimmerLights_SwOn
  7869                           
  7870                           ;RF_Control_B1.c: 394: setDimmerLights_SwOff(sw);
  7871  131B  0021               	movlb	1	; select bank1
  7872  131C  0867               	movf	setRFSW_Control@sw^(0+128),w
  7873  131D  3191  21A8         	fcall	_setDimmerLights_SwOff
  7874  131F  0008               	return
  7875  1320                     __end_of_setRFSW_Control:	
  7876                           
  7877                           	psect	text30
  7878  0B16                     __ptext30:	
  7879 ;; *************** function _setRFSW_AdjControl *****************
  7880 ;; Defined at:
  7881 ;;		line 400 in file "../src/RF_Control_B1.c"
  7882 ;; Parameters:    Size  Location     Type
  7883 ;;  sw              1    wreg     unsigned char 
  7884 ;; Auto vars:     Size  Location     Type
  7885 ;;  sw              1   73[BANK0 ] unsigned char 
  7886 ;;  status          1   72[BANK0 ] unsigned char 
  7887 ;; Return value:  Size  Location     Type
  7888 ;;		None               void
  7889 ;; Registers used:
  7890 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7891 ;; Tracked objects:
  7892 ;;		On entry : 0/0
  7893 ;;		On exit  : 0/0
  7894 ;;		Unchanged: 0/0
  7895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7897 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7898 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7899 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7900 ;;Total ram usage:        4 bytes
  7901 ;; Hardware stack levels used:    1
  7902 ;; Hardware stack levels required when called:    8
  7903 ;; This function calls:
  7904 ;;		_getDimmerLights_PercentToValue
  7905 ;;		_getDimmerLights_Status
  7906 ;;		_setDimmerIntr_Dimming_RF
  7907 ;;		_setDimmerIntr_MaxmumValue
  7908 ;;		_setDimmerLights_DimmingRun
  7909 ;;		_setDimmerLights_SwOff
  7910 ;;		_setDimmerLights_SwOn
  7911 ;;		_setMemory_Modify
  7912 ;;		_setProductData
  7913 ;;		_setTxData
  7914 ;; This function is called by:
  7915 ;;		_setControl_Lights_Table
  7916 ;; This function uses a non-reentrant model
  7917 ;;
  7918                           
  7919                           
  7920                           ;psect for function _setRFSW_AdjControl
  7921  0B16                     _setRFSW_AdjControl:	
  7922                           
  7923                           ;incstack = 0
  7924                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7925                           ;setRFSW_AdjControl@sw stored from wreg
  7926  0B16  0020               	movlb	0	; select bank0
  7927  0B17  00E9               	movwf	setRFSW_AdjControl@sw
  7928                           
  7929                           ;RF_Control_B1.c: 401: char status = 0;
  7930  0B18  01E8               	clrf	setRFSW_AdjControl@status
  7931                           
  7932                           ;RF_Control_B1.c: 403: status = getDimmerLights_Status(sw);
  7933  0B19  0869               	movf	setRFSW_AdjControl@sw,w
  7934  0B1A  319A  2284  318B   	fcall	_getDimmerLights_Status
  7935  0B1D  0020               	movlb	0	; select bank0
  7936  0B1E  00E6               	movwf	??_setRFSW_AdjControl
  7937  0B1F  0866               	movf	??_setRFSW_AdjControl,w
  7938  0B20  00E8               	movwf	setRFSW_AdjControl@status
  7939                           
  7940                           ;RF_Control_B1.c: 405: if (RF_Data[9] > 0x64) {
  7941  0B21  3065               	movlw	101
  7942  0B22  0023               	movlb	3	; select bank3
  7943  0B23  0229               	subwf	(_RF_Data^(0+384)+9),w
  7944  0B24  1C03               	skipc
  7945  0B25  2B2D               	goto	l9245
  7946                           
  7947                           ;RF_Control_B1.c: 406: RF_Data[9] = 0x64;
  7948  0B26  3064               	movlw	100
  7949  0B27  0020               	movlb	0	; select bank0
  7950  0B28  00E6               	movwf	??_setRFSW_AdjControl
  7951  0B29  0866               	movf	??_setRFSW_AdjControl,w
  7952  0B2A  0023               	movlb	3	; select bank3
  7953  0B2B  00A9               	movwf	(_RF_Data^(0+384)+9)
  7954                           
  7955                           ;RF_Control_B1.c: 407: } else if (RF_Data[9] < 0x01) {
  7956  0B2C  2B32               	goto	l9249
  7957  0B2D                     l9245:	
  7958  0B2D  08A9               	movf	(_RF_Data^(0+384)+9),f
  7959  0B2E  1D03               	skipz
  7960  0B2F  2B32               	goto	l9249
  7961                           
  7962                           ;RF_Control_B1.c: 408: RF_Data[9] = 0x01;
  7963  0B30  01A9               	clrf	(_RF_Data^(0+384)+9)
  7964  0B31  0AA9               	incf	(_RF_Data^(0+384)+9),f
  7965  0B32                     l9249:	
  7966                           
  7967                           ;RF_Control_B1.c: 409: }
  7968                           ;RF_Control_B1.c: 410: setProductData(9, RF_Data[9]);
  7969  0B32  0829               	movf	(_RF_Data^(0+384)+9),w
  7970  0B33  0020               	movlb	0	; select bank0
  7971  0B34  00E6               	movwf	??_setRFSW_AdjControl
  7972  0B35  0866               	movf	??_setRFSW_AdjControl,w
  7973  0B36  00E3               	movwf	setProductData@value
  7974  0B37  3009               	movlw	9
  7975  0B38  319A  2223  318B   	fcall	_setProductData
  7976                           
  7977                           ;RF_Control_B1.c: 411: setProductData(11, sw);
  7978  0B3B  0020               	movlb	0	; select bank0
  7979  0B3C  0869               	movf	setRFSW_AdjControl@sw,w
  7980  0B3D  00E6               	movwf	??_setRFSW_AdjControl
  7981  0B3E  0866               	movf	??_setRFSW_AdjControl,w
  7982  0B3F  00E3               	movwf	setProductData@value
  7983  0B40  300B               	movlw	11
  7984  0B41  319A  2223  318B   	fcall	_setProductData
  7985                           
  7986                           ;RF_Control_B1.c: 412: setProductData(17, product->Data[26 + sw]);
  7987  0B44  0020               	movlb	0	; select bank0
  7988  0B45  0869               	movf	setRFSW_AdjControl@sw,w
  7989  0B46  3E1A               	addlw	26
  7990  0B47  0021               	movlb	1	; select bank1
  7991  0B48  076D               	addwf	_product^(0+128),w
  7992  0B49  0020               	movlb	0	; select bank0
  7993  0B4A  00E6               	movwf	??_setRFSW_AdjControl
  7994  0B4B  0866               	movf	??_setRFSW_AdjControl,w
  7995  0B4C  0086               	movwf	6
  7996  0B4D  3002               	movlw	2	; select bank4/5
  7997  0B4E  0087               	movwf	7
  7998  0B4F  0801               	movf	1,w
  7999  0B50  00E7               	movwf	??_setRFSW_AdjControl+1
  8000  0B51  0867               	movf	??_setRFSW_AdjControl+1,w
  8001  0B52  00E3               	movwf	setProductData@value
  8002  0B53  3011               	movlw	17
  8003  0B54  319A  2223  318B   	fcall	_setProductData
  8004                           
  8005                           ;RF_Control_B1.c: 413: setProductData((20 + sw), RF_Data[9]);
  8006  0B57  0023               	movlb	3	; select bank3
  8007  0B58  0829               	movf	(_RF_Data^(0+384)+9),w
  8008  0B59  0020               	movlb	0	; select bank0
  8009  0B5A  00E6               	movwf	??_setRFSW_AdjControl
  8010  0B5B  0866               	movf	??_setRFSW_AdjControl,w
  8011  0B5C  00E3               	movwf	setProductData@value
  8012  0B5D  0869               	movf	setRFSW_AdjControl@sw,w
  8013  0B5E  3E14               	addlw	20
  8014  0B5F  319A  2223  318B   	fcall	_setProductData
  8015                           
  8016                           ;RF_Control_B1.c: 414: setMemory_Modify(1);
  8017  0B62  3001               	movlw	1
  8018  0B63  319B  235A  318B   	fcall	_setMemory_Modify
  8019                           
  8020                           ;RF_Control_B1.c: 416: if (status == 1) {
  8021  0B66  0020               	movlb	0	; select bank0
  8022  0B67  0868               	movf	setRFSW_AdjControl@status,w
  8023  0B68  3A01               	xorlw	1
  8024  0B69  1D03               	skipz
  8025  0B6A  2B82               	goto	l9259
  8026                           
  8027                           ;RF_Control_B1.c: 417: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(RF_D
      +                          ata[9]));
  8028  0B6B  0023               	movlb	3	; select bank3
  8029  0B6C  0829               	movf	(_RF_Data^(0+384)+9),w
  8030  0B6D  3197  2733  318B   	fcall	_getDimmerLights_PercentToValue
  8031  0B70  0020               	movlb	0	; select bank0
  8032  0B71  00E6               	movwf	??_setRFSW_AdjControl
  8033  0B72  0866               	movf	??_setRFSW_AdjControl,w
  8034  0B73  00E3               	movwf	setDimmerIntr_MaxmumValue@value
  8035  0B74  0869               	movf	setRFSW_AdjControl@sw,w
  8036  0B75  319C  2428  318B   	fcall	_setDimmerIntr_MaxmumValue
  8037                           
  8038                           ;RF_Control_B1.c: 418: setDimmerIntr_Dimming_RF(sw, 1);
  8039  0B78  0020               	movlb	0	; select bank0
  8040  0B79  01A1               	clrf	setDimmerIntr_Dimming_RF@command
  8041  0B7A  0AA1               	incf	setDimmerIntr_Dimming_RF@command,f
  8042  0B7B  0869               	movf	setRFSW_AdjControl@sw,w
  8043  0B7C  3190  2045  318B   	fcall	_setDimmerIntr_Dimming_RF
  8044                           
  8045                           ;RF_Control_B1.c: 419: setTxData();
  8046  0B7F  318F  2745         	fcall	_setTxData
  8047                           
  8048                           ;RF_Control_B1.c: 421: } else if (status == 0) {
  8049  0B81  0008               	return
  8050  0B82                     l9259:	
  8051  0B82  0020               	movlb	0	; select bank0
  8052  0B83  08E8               	movf	setRFSW_AdjControl@status,f
  8053  0B84  1D03               	skipz
  8054  0B85  0008               	return
  8055                           
  8056                           ;RF_Control_B1.c: 425: setDimmerLights_DimmingRun(sw, 1);
  8057  0B86  01A3               	clrf	setDimmerLights_DimmingRun@command
  8058  0B87  0AA3               	incf	setDimmerLights_DimmingRun@command,f
  8059  0B88  0869               	movf	setRFSW_AdjControl@sw,w
  8060  0B89  319C  24EE  318B   	fcall	_setDimmerLights_DimmingRun
  8061                           
  8062                           ;RF_Control_B1.c: 426: setDimmerLights_SwOn(sw);
  8063  0B8C  0020               	movlb	0	; select bank0
  8064  0B8D  0869               	movf	setRFSW_AdjControl@sw,w
  8065  0B8E  3195  25AC  318B   	fcall	_setDimmerLights_SwOn
  8066                           
  8067                           ;RF_Control_B1.c: 427: setDimmerLights_SwOff(sw);
  8068  0B91  0020               	movlb	0	; select bank0
  8069  0B92  0869               	movf	setRFSW_AdjControl@sw,w
  8070  0B93  3191  21A8         	fcall	_setDimmerLights_SwOff
  8071  0B95  0008               	return
  8072  0B96                     __end_of_setRFSW_AdjControl:	
  8073                           
  8074                           	psect	text31
  8075  1B5A                     __ptext31:	
  8076 ;; *************** function _setMemory_Modify *****************
  8077 ;; Defined at:
  8078 ;;		line 1070 in file "../src/MCU_B1.c"
  8079 ;; Parameters:    Size  Location     Type
  8080 ;;  command         1    wreg     unsigned char 
  8081 ;; Auto vars:     Size  Location     Type
  8082 ;;  command         1    2[BANK0 ] unsigned char 
  8083 ;; Return value:  Size  Location     Type
  8084 ;;		None               void
  8085 ;; Registers used:
  8086 ;;		wreg, status,2, status,0
  8087 ;; Tracked objects:
  8088 ;;		On entry : 0/0
  8089 ;;		On exit  : 0/0
  8090 ;;		Unchanged: 0/0
  8091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8093 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8094 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8095 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8096 ;;Total ram usage:        2 bytes
  8097 ;; Hardware stack levels used:    1
  8098 ;; Hardware stack levels required when called:    5
  8099 ;; This function calls:
  8100 ;;		Nothing
  8101 ;; This function is called by:
  8102 ;;		_setLog_Code
  8103 ;;		_setRFSW_AdjControl
  8104 ;; This function uses a non-reentrant model
  8105 ;;
  8106                           
  8107                           
  8108                           ;psect for function _setMemory_Modify
  8109  1B5A                     _setMemory_Modify:	
  8110                           
  8111                           ;incstack = 0
  8112                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  8113                           ;setMemory_Modify@command stored from wreg
  8114  1B5A  0020               	movlb	0	; select bank0
  8115  1B5B  00A2               	movwf	setMemory_Modify@command
  8116                           
  8117                           ;MCU_B1.c: 1071: Memory.Modify = command == 1 ? 1 : 0;
  8118  1B5C  0822               	movf	setMemory_Modify@command,w
  8119  1B5D  3A01               	xorlw	1
  8120  1B5E  3000               	movlw	0
  8121  1B5F  1903               	skipnz
  8122  1B60  3001               	movlw	1
  8123  1B61  00A1               	movwf	??_setMemory_Modify
  8124  1B62  0024               	movlb	4	; select bank4
  8125  1B63  0844               	movf	(_Memory^(0+512)+36),w
  8126  1B64  0020               	movlb	0	; select bank0
  8127  1B65  0621               	xorwf	??_setMemory_Modify,w
  8128  1B66  39FE               	andlw	-2
  8129  1B67  0621               	xorwf	??_setMemory_Modify,w
  8130  1B68  0024               	movlb	4	; select bank4
  8131  1B69  00C4               	movwf	(_Memory^(0+512)+36)
  8132                           
  8133                           ;MCU_B1.c: 1072: Memory.Time = 0;
  8134  1B6A  01C2               	clrf	(_Memory^(0+512)+34)
  8135  1B6B  01C3               	clrf	((_Memory+1)^(0+512)+34)
  8136  1B6C  0008               	return
  8137  1B6D                     __end_of_setMemory_Modify:	
  8138                           
  8139                           	psect	text32
  8140  1CEE                     __ptext32:	
  8141 ;; *************** function _setDimmerLights_DimmingRun *****************
  8142 ;; Defined at:
  8143 ;;		line 1012 in file "../src/Dimmer_B1.c"
  8144 ;; Parameters:    Size  Location     Type
  8145 ;;  lights          1    wreg     unsigned char 
  8146 ;;  command         1    3[BANK0 ] unsigned char 
  8147 ;; Auto vars:     Size  Location     Type
  8148 ;;  lights          1    5[BANK0 ] unsigned char 
  8149 ;; Return value:  Size  Location     Type
  8150 ;;		None               void
  8151 ;; Registers used:
  8152 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8153 ;; Tracked objects:
  8154 ;;		On entry : 0/0
  8155 ;;		On exit  : 0/0
  8156 ;;		Unchanged: 0/0
  8157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8158 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8159 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8160 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8161 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8162 ;;Total ram usage:        3 bytes
  8163 ;; Hardware stack levels used:    1
  8164 ;; Hardware stack levels required when called:    6
  8165 ;; This function calls:
  8166 ;;		_DimmerLights_SelectPointer
  8167 ;; This function is called by:
  8168 ;;		_setRFSW_AdjControl
  8169 ;; This function uses a non-reentrant model
  8170 ;;
  8171                           
  8172                           
  8173                           ;psect for function _setDimmerLights_DimmingRun
  8174  1CEE                     _setDimmerLights_DimmingRun:	
  8175                           
  8176                           ;incstack = 0
  8177                           ; Regs used in _setDimmerLights_DimmingRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  8178                           ;setDimmerLights_DimmingRun@lights stored from wreg
  8179  1CEE  0020               	movlb	0	; select bank0
  8180  1CEF  00A5               	movwf	setDimmerLights_DimmingRun@lights
  8181                           
  8182                           ;Dimmer_B1.c: 1013: DimmerLights_SelectPointer(lights);
  8183  1CF0  0825               	movf	setDimmerLights_DimmingRun@lights,w
  8184  1CF1  319C  2411         	fcall	_DimmerLights_SelectPointer
  8185                           
  8186                           ;Dimmer_B1.c: 1014: DimmerLights->DimmingRun = command == 1 ? 1 : 0;
  8187  1CF3  0020               	movlb	0	; select bank0
  8188  1CF4  0823               	movf	setDimmerLights_DimmingRun@command,w
  8189  1CF5  3A01               	xorlw	1
  8190  1CF6  3000               	movlw	0
  8191  1CF7  1903               	skipnz
  8192  1CF8  3001               	movlw	1
  8193  1CF9  00A4               	movwf	??_setDimmerLights_DimmingRun
  8194  1CFA  0021               	movlb	1	; select bank1
  8195  1CFB  0A4F               	incf	_DimmerLights^(0+128),w
  8196  1CFC  0086               	movwf	6
  8197  1CFD  3001               	movlw	1	; select bank2/3
  8198  1CFE  0087               	movwf	7
  8199  1CFF  0020               	movlb	0	; select bank0
  8200  1D00  0EA4               	swapf	??_setDimmerLights_DimmingRun,f
  8201  1D01  0DA4               	rlf	??_setDimmerLights_DimmingRun,f
  8202  1D02  0DA4               	rlf	??_setDimmerLights_DimmingRun,f
  8203  1D03  0801               	movf	1,w
  8204  1D04  0624               	xorwf	??_setDimmerLights_DimmingRun,w
  8205  1D05  39BF               	andlw	-65
  8206  1D06  0624               	xorwf	??_setDimmerLights_DimmingRun,w
  8207  1D07  0081               	movwf	1
  8208  1D08  0008               	return
  8209  1D09                     __end_of_setDimmerLights_DimmingRun:	
  8210                           
  8211                           	psect	text33
  8212  1AB7                     __ptext33:	
  8213 ;; *************** function _getRF_KeyStatus *****************
  8214 ;; Defined at:
  8215 ;;		line 166 in file "../src/RF_Control_B1.c"
  8216 ;; Parameters:    Size  Location     Type
  8217 ;;		None
  8218 ;; Auto vars:     Size  Location     Type
  8219 ;;  key             1    2[BANK0 ] unsigned char 
  8220 ;; Return value:  Size  Location     Type
  8221 ;;                  1    wreg      unsigned char 
  8222 ;; Registers used:
  8223 ;;		wreg, status,2
  8224 ;; Tracked objects:
  8225 ;;		On entry : 0/0
  8226 ;;		On exit  : 0/0
  8227 ;;		Unchanged: 0/0
  8228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8230 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8231 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8232 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8233 ;;Total ram usage:        3 bytes
  8234 ;; Hardware stack levels used:    1
  8235 ;; Hardware stack levels required when called:    5
  8236 ;; This function calls:
  8237 ;;		Nothing
  8238 ;; This function is called by:
  8239 ;;		_setRF_Main
  8240 ;; This function uses a non-reentrant model
  8241 ;;
  8242                           
  8243                           
  8244                           ;psect for function _getRF_KeyStatus
  8245  1AB7                     _getRF_KeyStatus:	
  8246                           
  8247                           ;RF_Control_B1.c: 167: char key = 0;
  8248                           
  8249                           ;incstack = 0
  8250                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8251  1AB7  0020               	movlb	0	; select bank0
  8252  1AB8  01A2               	clrf	getRF_KeyStatus@key
  8253                           
  8254                           ;RF_Control_B1.c: 173: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  8255  1AB9  01A3               	clrf	_getRF_KeyStatus$5034
  8256  1ABA  0AA3               	incf	_getRF_KeyStatus$5034,f
  8257  1ABB  1F0C               	btfss	12,6	;volatile
  8258  1ABC  1A0C               	btfsc	12,4	;volatile
  8259  1ABD  2AC2               	goto	l7583
  8260  1ABE  1C0C               	btfss	12,0	;volatile
  8261  1ABF  188D               	btfsc	13,1	;volatile
  8262  1AC0  2AC2               	goto	l7583
  8263  1AC1  01A3               	clrf	_getRF_KeyStatus$5034
  8264  1AC2                     l7583:	
  8265  1AC2  0823               	movf	_getRF_KeyStatus$5034,w
  8266  1AC3  00A1               	movwf	??_getRF_KeyStatus
  8267  1AC4  0821               	movf	??_getRF_KeyStatus,w
  8268  1AC5  00A2               	movwf	getRF_KeyStatus@key
  8269                           
  8270                           ;RF_Control_B1.c: 179: return key;
  8271  1AC6  0822               	movf	getRF_KeyStatus@key,w
  8272  1AC7  0008               	return
  8273  1AC8                     __end_of_getRF_KeyStatus:	
  8274                           
  8275                           	psect	text34
  8276  1AA6                     __ptext34:	
  8277 ;; *************** function _getBuz_GO *****************
  8278 ;; Defined at:
  8279 ;;		line 82 in file "../src/Buzzer_B1.c"
  8280 ;; Parameters:    Size  Location     Type
  8281 ;;		None
  8282 ;; Auto vars:     Size  Location     Type
  8283 ;;  i               2    5[BANK0 ] int 
  8284 ;; Return value:  Size  Location     Type
  8285 ;;                  2    1[BANK0 ] int 
  8286 ;; Registers used:
  8287 ;;		wreg, status,2, status,0
  8288 ;; Tracked objects:
  8289 ;;		On entry : 0/0
  8290 ;;		On exit  : 0/0
  8291 ;;		Unchanged: 0/0
  8292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8293 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8294 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8295 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8296 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8297 ;;Total ram usage:        6 bytes
  8298 ;; Hardware stack levels used:    1
  8299 ;; Hardware stack levels required when called:    5
  8300 ;; This function calls:
  8301 ;;		Nothing
  8302 ;; This function is called by:
  8303 ;;		_setRF_Main
  8304 ;; This function uses a non-reentrant model
  8305 ;;
  8306                           
  8307                           
  8308                           ;psect for function _getBuz_GO
  8309  1AA6                     _getBuz_GO:	
  8310                           
  8311                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8312                           
  8313                           ;incstack = 0
  8314                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8315  1AA6  0022               	movlb	2	; select bank2
  8316  1AA7  0C2D               	rrf	_Buz1^(0+256),w
  8317  1AA8  3901               	andlw	1
  8318  1AA9  0020               	movlb	0	; select bank0
  8319  1AAA  00A3               	movwf	??_getBuz_GO
  8320  1AAB  01A4               	clrf	??_getBuz_GO+1
  8321  1AAC  0823               	movf	??_getBuz_GO,w
  8322  1AAD  00A5               	movwf	getBuz_GO@i
  8323  1AAE  0824               	movf	??_getBuz_GO+1,w
  8324  1AAF  00A6               	movwf	getBuz_GO@i+1
  8325                           
  8326                           ;Buzzer_B1.c: 84: return i;
  8327  1AB0  0826               	movf	getBuz_GO@i+1,w
  8328  1AB1  01A2               	clrf	?_getBuz_GO+1
  8329  1AB2  07A2               	addwf	?_getBuz_GO+1,f
  8330  1AB3  0825               	movf	getBuz_GO@i,w
  8331  1AB4  01A1               	clrf	?_getBuz_GO
  8332  1AB5  07A1               	addwf	?_getBuz_GO,f
  8333  1AB6  0008               	return
  8334  1AB7                     __end_of_getBuz_GO:	
  8335                           
  8336                           	psect	text35
  8337  07F0                     __ptext35:	
  8338 ;; *************** function _RF_RxDisable *****************
  8339 ;; Defined at:
  8340 ;;		line 154 in file "../src/RF_Control_B1.c"
  8341 ;; Parameters:    Size  Location     Type
  8342 ;;		None
  8343 ;; Auto vars:     Size  Location     Type
  8344 ;;		None
  8345 ;; Return value:  Size  Location     Type
  8346 ;;		None               void
  8347 ;; Registers used:
  8348 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8349 ;; Tracked objects:
  8350 ;;		On entry : 0/0
  8351 ;;		On exit  : 0/0
  8352 ;;		Unchanged: 0/0
  8353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8355 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8357 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8358 ;;Total ram usage:        0 bytes
  8359 ;; Hardware stack levels used:    1
  8360 ;; Hardware stack levels required when called:    7
  8361 ;; This function calls:
  8362 ;;		_CC2500_WriteCommand
  8363 ;; This function is called by:
  8364 ;;		_setRF_Main
  8365 ;; This function uses a non-reentrant model
  8366 ;;
  8367                           
  8368                           
  8369                           ;psect for function _RF_RxDisable
  8370  07F0                     _RF_RxDisable:	
  8371                           
  8372                           ;RF_Control_B1.c: 155: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8373                           
  8374                           ;incstack = 0
  8375                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8376  07F0  0021               	movlb	1	; select bank1
  8377  07F1  18A0               	btfsc	_RF1^(0+128),1
  8378  07F2  2FF5               	goto	l2156
  8379  07F3  1DA0               	btfss	_RF1^(0+128),3
  8380  07F4  0008               	return
  8381  07F5                     l2156:	
  8382                           
  8383                           ;RF_Control_B1.c: 156: RF1.RxStatus = 0;
  8384  07F5  11A0               	bcf	_RF1^(0+128),3
  8385                           
  8386                           ;RF_Control_B1.c: 157: RF1.ReceiveGO = 0;
  8387  07F6  10A0               	bcf	_RF1^(0+128),1
  8388                           
  8389                           ;RF_Control_B1.c: 158: CC2500_WriteCommand(0x36);
  8390  07F7  3036               	movlw	54
  8391  07F8  319C  24B9  3187   	fcall	_CC2500_WriteCommand
  8392                           
  8393                           ;RF_Control_B1.c: 159: CC2500_WriteCommand(0x3A);
  8394  07FB  303A               	movlw	58
  8395  07FC  319C  24B9         	fcall	_CC2500_WriteCommand
  8396  07FE  0008               	return
  8397  07FF                     __end_of_RF_RxDisable:	
  8398                           
  8399                           	psect	text36
  8400  08E8                     __ptext36:	
  8401 ;; *************** function _CC2500_TxData *****************
  8402 ;; Defined at:
  8403 ;;		line 32 in file "../src/CC2500_B1.c"
  8404 ;; Parameters:    Size  Location     Type
  8405 ;;		None
  8406 ;; Auto vars:     Size  Location     Type
  8407 ;;  loop_e          1    6[BANK0 ] unsigned char 
  8408 ;; Return value:  Size  Location     Type
  8409 ;;		None               void
  8410 ;; Registers used:
  8411 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8412 ;; Tracked objects:
  8413 ;;		On entry : 0/0
  8414 ;;		On exit  : 0/0
  8415 ;;		Unchanged: 0/0
  8416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8418 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8419 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8420 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8421 ;;Total ram usage:        2 bytes
  8422 ;; Hardware stack levels used:    1
  8423 ;; Hardware stack levels required when called:    7
  8424 ;; This function calls:
  8425 ;;		_CC2500_WriteByte
  8426 ;;		_CC2500_WriteCommand
  8427 ;;		_RF_Timeout_Counter
  8428 ;;		_setRF_TimeoutCleared
  8429 ;; This function is called by:
  8430 ;;		_setRF_Main
  8431 ;; This function uses a non-reentrant model
  8432 ;;
  8433                           
  8434                           
  8435                           ;psect for function _CC2500_TxData
  8436  08E8                     _CC2500_TxData:	
  8437                           
  8438                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8439                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8440                           
  8441                           ;incstack = 0
  8442                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8443  08E8  3036               	movlw	54
  8444  08E9  319C  24B9  3188   	fcall	_CC2500_WriteCommand
  8445                           
  8446                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8447  08EC  303B               	movlw	59
  8448  08ED  319C  24B9  3188   	fcall	_CC2500_WriteCommand
  8449                           
  8450                           ;CC2500_B1.c: 38: RC4 = 0;
  8451  08F0  0020               	movlb	0	; select bank0
  8452  08F1  120E               	bcf	14,4	;volatile
  8453                           
  8454                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8455  08F2  307F               	movlw	127
  8456  08F3  00A5               	movwf	??_CC2500_TxData
  8457  08F4  0825               	movf	??_CC2500_TxData,w
  8458  08F5  0021               	movlb	1	; select bank1
  8459  08F6  00D4               	movwf	_SPI0Buffer^(0+128)
  8460                           
  8461                           ;CC2500_B1.c: 40: while (RC2 == 1 && RF1.Timeout == 0) {
  8462  08F7  28FB               	goto	l7265
  8463  08F8                     l7263:	
  8464                           
  8465                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8466  08F8  319B  23BB  3188   	fcall	_RF_Timeout_Counter
  8467  08FB                     l7265:	
  8468  08FB  0020               	movlb	0	; select bank0
  8469  08FC  1D0E               	btfss	14,2	;volatile
  8470  08FD  2901               	goto	l7269
  8471  08FE  0021               	movlb	1	; select bank1
  8472  08FF  1F21               	btfss	(_RF1^(0+128)+1),6
  8473  0900  28F8               	goto	l7263
  8474  0901                     l7269:	
  8475                           
  8476                           ;CC2500_B1.c: 42: };
  8477                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8478  0901  3199  2169  3188   	fcall	_setRF_TimeoutCleared
  8479                           
  8480                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8481  0904  319C  2486  3188   	fcall	_CC2500_WriteByte
  8482                           
  8483                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8484  0907  0021               	movlb	1	; select bank1
  8485  0908  0857               	movf	_Tx_Length^(0+128),w
  8486  0909  0020               	movlb	0	; select bank0
  8487  090A  00A5               	movwf	??_CC2500_TxData
  8488  090B  0825               	movf	??_CC2500_TxData,w
  8489  090C  0021               	movlb	1	; select bank1
  8490  090D  00D4               	movwf	_SPI0Buffer^(0+128)
  8491                           
  8492                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8493  090E  319C  2486  3188   	fcall	_CC2500_WriteByte
  8494                           
  8495                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8496  0911  0020               	movlb	0	; select bank0
  8497  0912  01A6               	clrf	CC2500_TxData@loop_e
  8498  0913                     l7283:	
  8499  0913  0021               	movlb	1	; select bank1
  8500  0914  0857               	movf	_Tx_Length^(0+128),w
  8501  0915  0020               	movlb	0	; select bank0
  8502  0916  0226               	subwf	CC2500_TxData@loop_e,w
  8503  0917  1803               	btfsc	3,0
  8504  0918  292C               	goto	l259
  8505                           
  8506                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8507  0919  0826               	movf	CC2500_TxData@loop_e,w
  8508  091A  3EA0               	addlw	_RF_Data& (0+255)
  8509  091B  0086               	movwf	6
  8510  091C  3001               	movlw	1	; select bank3/4
  8511  091D  0087               	movwf	7
  8512  091E  0801               	movf	1,w
  8513  091F  00A5               	movwf	??_CC2500_TxData
  8514  0920  0825               	movf	??_CC2500_TxData,w
  8515  0921  0021               	movlb	1	; select bank1
  8516  0922  00D4               	movwf	_SPI0Buffer^(0+128)
  8517                           
  8518                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8519  0923  319C  2486  3188   	fcall	_CC2500_WriteByte
  8520  0926  3001               	movlw	1
  8521  0927  0020               	movlb	0	; select bank0
  8522  0928  00A5               	movwf	??_CC2500_TxData
  8523  0929  0825               	movf	??_CC2500_TxData,w
  8524  092A  07A6               	addwf	CC2500_TxData@loop_e,f
  8525  092B  2913               	goto	l7283
  8526  092C                     l259:	
  8527                           
  8528                           ;CC2500_B1.c: 51: }
  8529                           ;CC2500_B1.c: 52: RC4 = 1;
  8530  092C  160E               	bsf	14,4	;volatile
  8531                           
  8532                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8533  092D  3035               	movlw	53
  8534  092E  319C  24B9  3188   	fcall	_CC2500_WriteCommand
  8535                           
  8536                           ;CC2500_B1.c: 54: while (RB0 == 0 && RF1.Timeout == 0) {
  8537  0931  2935               	goto	l7289
  8538  0932                     l7287:	
  8539                           
  8540                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8541  0932  319B  23BB  3188   	fcall	_RF_Timeout_Counter
  8542  0935                     l7289:	
  8543  0935  0020               	movlb	0	; select bank0
  8544  0936  180D               	btfsc	13,0	;volatile
  8545  0937  293B               	goto	l7293
  8546  0938  0021               	movlb	1	; select bank1
  8547  0939  1F21               	btfss	(_RF1^(0+128)+1),6
  8548  093A  2932               	goto	l7287
  8549  093B                     l7293:	
  8550                           
  8551                           ;CC2500_B1.c: 56: };
  8552                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8553  093B  3199  2169  3188   	fcall	_setRF_TimeoutCleared
  8554                           
  8555                           ;CC2500_B1.c: 59: while (RB0 == 1 && RF1.Timeout == 0) {
  8556  093E  2942               	goto	l7297
  8557  093F                     l7295:	
  8558                           
  8559                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8560  093F  319B  23BB  3188   	fcall	_RF_Timeout_Counter
  8561  0942                     l7297:	
  8562  0942  0020               	movlb	0	; select bank0
  8563  0943  1C0D               	btfss	13,0	;volatile
  8564  0944  2948               	goto	l7301
  8565  0945  0021               	movlb	1	; select bank1
  8566  0946  1F21               	btfss	(_RF1^(0+128)+1),6
  8567  0947  293F               	goto	l7295
  8568  0948                     l7301:	
  8569                           
  8570                           ;CC2500_B1.c: 61: };
  8571                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8572  0948  3199  2169  3188   	fcall	_setRF_TimeoutCleared
  8573                           
  8574                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8575  094B  3036               	movlw	54
  8576  094C  319C  24B9  3188   	fcall	_CC2500_WriteCommand
  8577                           
  8578                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8579  094F  303B               	movlw	59
  8580  0950  319C  24B9         	fcall	_CC2500_WriteCommand
  8581                           
  8582                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8583  0952  0020               	movlb	0	; select bank0
  8584  0953  14EE               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8585  0954  0008               	return
  8586  0955                     __end_of_CC2500_TxData:	
  8587                           
  8588                           	psect	text37
  8589  0955                     __ptext37:	
  8590 ;; *************** function _CC2500_RxData *****************
  8591 ;; Defined at:
  8592 ;;		line 73 in file "../src/CC2500_B1.c"
  8593 ;; Parameters:    Size  Location     Type
  8594 ;;		None
  8595 ;; Auto vars:     Size  Location     Type
  8596 ;;  loop_f          1    6[BANK0 ] unsigned char 
  8597 ;; Return value:  Size  Location     Type
  8598 ;;		None               void
  8599 ;; Registers used:
  8600 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8601 ;; Tracked objects:
  8602 ;;		On entry : 0/0
  8603 ;;		On exit  : 0/0
  8604 ;;		Unchanged: 0/0
  8605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8607 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8608 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8609 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8610 ;;Total ram usage:        2 bytes
  8611 ;; Hardware stack levels used:    1
  8612 ;; Hardware stack levels required when called:    7
  8613 ;; This function calls:
  8614 ;;		_CC2500_ReadByte
  8615 ;;		_CC2500_ReadStatus
  8616 ;;		_CC2500_WriteByte
  8617 ;;		_CC2500_WriteCommand
  8618 ;;		_RF_Timeout_Counter
  8619 ;;		_setRF_TimeoutCleared
  8620 ;; This function is called by:
  8621 ;;		_setRF_Main
  8622 ;; This function uses a non-reentrant model
  8623 ;;
  8624                           
  8625                           
  8626                           ;psect for function _CC2500_RxData
  8627  0955                     _CC2500_RxData:	
  8628                           
  8629                           ;CC2500_B1.c: 74: unsigned char loop_f;
  8630                           ;CC2500_B1.c: 78: if (RB0 == 0) {
  8631                           
  8632                           ;incstack = 0
  8633                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8634  0955  0020               	movlb	0	; select bank0
  8635  0956  180D               	btfsc	13,0	;volatile
  8636  0957  0008               	return
  8637                           
  8638                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  8639  0958  303B               	movlw	59
  8640  0959  319E  26E4  3189   	fcall	_CC2500_ReadStatus
  8641                           
  8642                           ;CC2500_B1.c: 89: if (s_data != 0) {
  8643  095C  0021               	movlb	1	; select bank1
  8644  095D  085A               	movf	_s_data^(0+128),w
  8645  095E  1903               	btfsc	3,2
  8646  095F  0008               	return
  8647                           
  8648                           ;CC2500_B1.c: 90: RC4 = 0;
  8649  0960  0020               	movlb	0	; select bank0
  8650  0961  120E               	bcf	14,4	;volatile
  8651                           
  8652                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  8653  0962  30FF               	movlw	255
  8654  0963  00A5               	movwf	??_CC2500_RxData
  8655  0964  0825               	movf	??_CC2500_RxData,w
  8656  0965  0021               	movlb	1	; select bank1
  8657  0966  00D4               	movwf	_SPI0Buffer^(0+128)
  8658                           
  8659                           ;CC2500_B1.c: 93: while (RC2 == 1 && RF1.Timeout == 0) {
  8660  0967  296B               	goto	l7321
  8661  0968                     l7319:	
  8662                           
  8663                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  8664  0968  319B  23BB  3189   	fcall	_RF_Timeout_Counter
  8665  096B                     l7321:	
  8666  096B  0020               	movlb	0	; select bank0
  8667  096C  1D0E               	btfss	14,2	;volatile
  8668  096D  2971               	goto	l7325
  8669  096E  0021               	movlb	1	; select bank1
  8670  096F  1F21               	btfss	(_RF1^(0+128)+1),6
  8671  0970  2968               	goto	l7319
  8672  0971                     l7325:	
  8673                           
  8674                           ;CC2500_B1.c: 95: };
  8675                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  8676  0971  3199  2169  3189   	fcall	_setRF_TimeoutCleared
  8677                           
  8678                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  8679  0974  319C  2486  3189   	fcall	_CC2500_WriteByte
  8680                           
  8681                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  8682  0977  319D  2542  3189   	fcall	_CC2500_ReadByte
  8683                           
  8684                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  8685  097A  0021               	movlb	1	; select bank1
  8686  097B  0854               	movf	_SPI0Buffer^(0+128),w
  8687  097C  0020               	movlb	0	; select bank0
  8688  097D  00A5               	movwf	??_CC2500_RxData
  8689  097E  0825               	movf	??_CC2500_RxData,w
  8690  097F  0021               	movlb	1	; select bank1
  8691  0980  00D3               	movwf	_Rx_Length^(0+128)
  8692                           
  8693                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8694  0981  0020               	movlb	0	; select bank0
  8695  0982  01A6               	clrf	CC2500_RxData@loop_f
  8696  0983                     l7341:	
  8697  0983  0021               	movlb	1	; select bank1
  8698  0984  0853               	movf	_Rx_Length^(0+128),w
  8699  0985  0020               	movlb	0	; select bank0
  8700  0986  0226               	subwf	CC2500_RxData@loop_f,w
  8701  0987  1803               	btfsc	3,0
  8702  0988  299C               	goto	l7343
  8703                           
  8704                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8705  0989  319D  2542  3189   	fcall	_CC2500_ReadByte
  8706                           
  8707                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  8708  098C  0021               	movlb	1	; select bank1
  8709  098D  0854               	movf	_SPI0Buffer^(0+128),w
  8710  098E  0020               	movlb	0	; select bank0
  8711  098F  00A5               	movwf	??_CC2500_RxData
  8712  0990  0826               	movf	CC2500_RxData@loop_f,w
  8713  0991  3EA0               	addlw	_RF_Data& (0+255)
  8714  0992  0086               	movwf	6
  8715  0993  3001               	movlw	1	; select bank3/4
  8716  0994  0087               	movwf	7
  8717  0995  0825               	movf	??_CC2500_RxData,w
  8718  0996  0081               	movwf	1
  8719  0997  3001               	movlw	1
  8720  0998  00A5               	movwf	??_CC2500_RxData
  8721  0999  0825               	movf	??_CC2500_RxData,w
  8722  099A  07A6               	addwf	CC2500_RxData@loop_f,f
  8723  099B  2983               	goto	l7341
  8724  099C                     l7343:	
  8725                           
  8726                           ;CC2500_B1.c: 104: }
  8727                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  8728  099C  319D  2542  3189   	fcall	_CC2500_ReadByte
  8729                           
  8730                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  8731  099F  0021               	movlb	1	; select bank1
  8732  09A0  0854               	movf	_SPI0Buffer^(0+128),w
  8733  09A1  0020               	movlb	0	; select bank0
  8734  09A2  00A5               	movwf	??_CC2500_RxData
  8735  09A3  0825               	movf	??_CC2500_RxData,w
  8736  09A4  0021               	movlb	1	; select bank1
  8737  09A5  00D2               	movwf	_RSSI^(0+128)
  8738                           
  8739                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  8740  09A6  319D  2542  3189   	fcall	_CC2500_ReadByte
  8741                           
  8742                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  8743  09A9  0021               	movlb	1	; select bank1
  8744  09AA  0854               	movf	_SPI0Buffer^(0+128),w
  8745  09AB  0020               	movlb	0	; select bank0
  8746  09AC  00A5               	movwf	??_CC2500_RxData
  8747  09AD  0825               	movf	??_CC2500_RxData,w
  8748  09AE  0021               	movlb	1	; select bank1
  8749  09AF  00CB               	movwf	_CRC^(0+128)
  8750                           
  8751                           ;CC2500_B1.c: 109: RC4 = 1;
  8752  09B0  0020               	movlb	0	; select bank0
  8753  09B1  160E               	bsf	14,4	;volatile
  8754                           
  8755                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  8756  09B2  0021               	movlb	1	; select bank1
  8757  09B3  1FCB               	btfss	_CRC^(0+128),7
  8758  09B4  29B7               	goto	l283
  8759                           
  8760                           ;CC2500_B1.c: 111: Receive_OK = 1;
  8761  09B5  0020               	movlb	0	; select bank0
  8762  09B6  146E               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8763  09B7                     l283:	
  8764                           
  8765                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  8766  09B7  0021               	movlb	1	; select bank1
  8767  09B8  11A0               	bcf	_RF1^(0+128),3
  8768                           
  8769                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  8770  09B9  14A0               	bsf	_RF1^(0+128),1
  8771                           
  8772                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  8773  09BA  3036               	movlw	54
  8774  09BB  319C  24B9  3189   	fcall	_CC2500_WriteCommand
  8775                           
  8776                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  8777  09BE  303A               	movlw	58
  8778  09BF  319C  24B9         	fcall	_CC2500_WriteCommand
  8779  09C1  0021               	movlb	1	; select bank1
  8780  09C2  0008               	return
  8781  09C3                     __end_of_CC2500_RxData:	
  8782                           
  8783                           	psect	text38
  8784  1EE4                     __ptext38:	
  8785 ;; *************** function _CC2500_ReadStatus *****************
  8786 ;; Defined at:
  8787 ;;		line 308 in file "../src/CC2500_B1.c"
  8788 ;; Parameters:    Size  Location     Type
  8789 ;;  status_addr     1    wreg     unsigned char 
  8790 ;; Auto vars:     Size  Location     Type
  8791 ;;  status_addr     1    4[BANK0 ] unsigned char 
  8792 ;; Return value:  Size  Location     Type
  8793 ;;		None               void
  8794 ;; Registers used:
  8795 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8796 ;; Tracked objects:
  8797 ;;		On entry : 0/0
  8798 ;;		On exit  : 0/0
  8799 ;;		Unchanged: 0/0
  8800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8801 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8802 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8803 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8804 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8805 ;;Total ram usage:        2 bytes
  8806 ;; Hardware stack levels used:    1
  8807 ;; Hardware stack levels required when called:    6
  8808 ;; This function calls:
  8809 ;;		_CC2500_ReadByte
  8810 ;;		_CC2500_WriteByte
  8811 ;;		_RF_Timeout_Counter
  8812 ;;		_setRF_TimeoutCleared
  8813 ;; This function is called by:
  8814 ;;		_CC2500_RxData
  8815 ;; This function uses a non-reentrant model
  8816 ;;
  8817                           
  8818                           
  8819                           ;psect for function _CC2500_ReadStatus
  8820  1EE4                     _CC2500_ReadStatus:	
  8821                           
  8822                           ;incstack = 0
  8823                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8824                           ;CC2500_ReadStatus@status_addr stored from wreg
  8825  1EE4  0020               	movlb	0	; select bank0
  8826  1EE5  00A4               	movwf	CC2500_ReadStatus@status_addr
  8827                           
  8828                           ;CC2500_B1.c: 309: RC4 = 0;
  8829  1EE6  120E               	bcf	14,4	;volatile
  8830                           
  8831                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  8832  1EE7  0824               	movf	CC2500_ReadStatus@status_addr,w
  8833  1EE8  3EC0               	addlw	192
  8834  1EE9  00A3               	movwf	??_CC2500_ReadStatus
  8835  1EEA  0823               	movf	??_CC2500_ReadStatus,w
  8836  1EEB  0021               	movlb	1	; select bank1
  8837  1EEC  00D4               	movwf	_SPI0Buffer^(0+128)
  8838                           
  8839                           ;CC2500_B1.c: 312: while (RC2 == 1 && RF1.Timeout == 0) {
  8840  1EED  2EF1               	goto	l6935
  8841  1EEE                     l6933:	
  8842                           
  8843                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  8844  1EEE  319B  23BB  319E   	fcall	_RF_Timeout_Counter
  8845  1EF1                     l6935:	
  8846  1EF1  0020               	movlb	0	; select bank0
  8847  1EF2  1D0E               	btfss	14,2	;volatile
  8848  1EF3  2EF7               	goto	l6939
  8849  1EF4  0021               	movlb	1	; select bank1
  8850  1EF5  1F21               	btfss	(_RF1^(0+128)+1),6
  8851  1EF6  2EEE               	goto	l6933
  8852  1EF7                     l6939:	
  8853                           
  8854                           ;CC2500_B1.c: 314: };
  8855                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  8856  1EF7  3199  2169  319E   	fcall	_setRF_TimeoutCleared
  8857                           
  8858                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  8859  1EFA  319C  2486  319E   	fcall	_CC2500_WriteByte
  8860                           
  8861                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  8862  1EFD  319D  2542         	fcall	_CC2500_ReadByte
  8863                           
  8864                           ;CC2500_B1.c: 319: RC4 = 1;
  8865  1EFF  0020               	movlb	0	; select bank0
  8866  1F00  160E               	bsf	14,4	;volatile
  8867                           
  8868                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  8869  1F01  0021               	movlb	1	; select bank1
  8870  1F02  0854               	movf	_SPI0Buffer^(0+128),w
  8871  1F03  0020               	movlb	0	; select bank0
  8872  1F04  00A3               	movwf	??_CC2500_ReadStatus
  8873  1F05  0823               	movf	??_CC2500_ReadStatus,w
  8874  1F06  0021               	movlb	1	; select bank1
  8875  1F07  00DA               	movwf	_s_data^(0+128)
  8876  1F08  0008               	return
  8877  1F09                     __end_of_CC2500_ReadStatus:	
  8878                           
  8879                           	psect	text39
  8880  1D42                     __ptext39:	
  8881 ;; *************** function _CC2500_ReadByte *****************
  8882 ;; Defined at:
  8883 ;;		line 242 in file "../src/CC2500_B1.c"
  8884 ;; Parameters:    Size  Location     Type
  8885 ;;		None
  8886 ;; Auto vars:     Size  Location     Type
  8887 ;;  loop_b          1    2[BANK0 ] unsigned char 
  8888 ;; Return value:  Size  Location     Type
  8889 ;;		None               void
  8890 ;; Registers used:
  8891 ;;		wreg, status,2, status,0
  8892 ;; Tracked objects:
  8893 ;;		On entry : 0/0
  8894 ;;		On exit  : 0/0
  8895 ;;		Unchanged: 0/0
  8896 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8897 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8898 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8899 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8900 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8901 ;;Total ram usage:        2 bytes
  8902 ;; Hardware stack levels used:    1
  8903 ;; Hardware stack levels required when called:    5
  8904 ;; This function calls:
  8905 ;;		Nothing
  8906 ;; This function is called by:
  8907 ;;		_CC2500_RxData
  8908 ;;		_CC2500_ReadStatus
  8909 ;;		_CC2500_ReadREG
  8910 ;; This function uses a non-reentrant model
  8911 ;;
  8912                           
  8913                           
  8914                           ;psect for function _CC2500_ReadByte
  8915  1D42                     _CC2500_ReadByte:	
  8916                           
  8917                           ;CC2500_B1.c: 243: unsigned char loop_b;
  8918                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  8919                           
  8920                           ;incstack = 0
  8921                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8922  1D42  0020               	movlb	0	; select bank0
  8923  1D43  01A2               	clrf	CC2500_ReadByte@loop_b
  8924  1D44                     L3:	
  8925  1D44  3008               	movlw	8
  8926  1D45  0222               	subwf	CC2500_ReadByte@loop_b,w
  8927  1D46  1803               	btfsc	3,0
  8928  1D47  0008               	return
  8929                           
  8930                           ;CC2500_B1.c: 245: RC1 = 1;
  8931  1D48  148E               	bsf	14,1	;volatile
  8932                           
  8933                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  8934  1D49  1003               	clrc
  8935  1D4A  0021               	movlb	1	; select bank1
  8936  1D4B  0DD4               	rlf	_SPI0Buffer^(0+128),f
  8937                           
  8938                           ;CC2500_B1.c: 247: if (RC2 == 1)
  8939  1D4C  0020               	movlb	0	; select bank0
  8940  1D4D  1D0E               	btfss	14,2	;volatile
  8941  1D4E  2D52               	goto	l6819
  8942                           
  8943                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  8944  1D4F  0021               	movlb	1	; select bank1
  8945  1D50  1454               	bsf	_SPI0Buffer^(0+128),0
  8946  1D51  2D58               	goto	l6821
  8947  1D52                     l6819:	
  8948                           
  8949                           ;CC2500_B1.c: 249: else
  8950                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  8951  1D52  30FE               	movlw	254
  8952  1D53  0020               	movlb	0	; select bank0
  8953  1D54  00A1               	movwf	??_CC2500_ReadByte
  8954  1D55  0821               	movf	??_CC2500_ReadByte,w
  8955  1D56  0021               	movlb	1	; select bank1
  8956  1D57  05D4               	andwf	_SPI0Buffer^(0+128),f
  8957  1D58                     l6821:	
  8958                           
  8959                           ;CC2500_B1.c: 251: RC1 = 0;
  8960  1D58  0020               	movlb	0	; select bank0
  8961  1D59  108E               	bcf	14,1	;volatile
  8962  1D5A  3001               	movlw	1
  8963  1D5B  00A1               	movwf	??_CC2500_ReadByte
  8964  1D5C  0821               	movf	??_CC2500_ReadByte,w
  8965  1D5D  07A2               	addwf	CC2500_ReadByte@loop_b,f
  8966  1D5E  2D44               	goto	L3
  8967  1D5F                     __end_of_CC2500_ReadByte:	
  8968                           
  8969                           	psect	text40
  8970  1BD0                     __ptext40:	
  8971 ;; *************** function _CC2500_PowerOnInitial *****************
  8972 ;; Defined at:
  8973 ;;		line 126 in file "../src/CC2500_B1.c"
  8974 ;; Parameters:    Size  Location     Type
  8975 ;;		None
  8976 ;; Auto vars:     Size  Location     Type
  8977 ;;		None
  8978 ;; Return value:  Size  Location     Type
  8979 ;;		None               void
  8980 ;; Registers used:
  8981 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8982 ;; Tracked objects:
  8983 ;;		On entry : 0/0
  8984 ;;		On exit  : 0/0
  8985 ;;		Unchanged: 0/0
  8986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8988 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8989 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8990 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8991 ;;Total ram usage:        0 bytes
  8992 ;; Hardware stack levels used:    1
  8993 ;; Hardware stack levels required when called:    8
  8994 ;; This function calls:
  8995 ;;		_CC2500_ClearRXFIFO
  8996 ;;		_CC2500_ClearTXFIFO
  8997 ;;		_CC2500_FrequencyCabr
  8998 ;;		_CC2500_InitPATable
  8999 ;;		_CC2500_InitSetREG
  9000 ;;		_CC2500_PowerRST
  9001 ;;		_CC2500_SIDLEMode
  9002 ;; This function is called by:
  9003 ;;		_setRF_Main
  9004 ;;		_main
  9005 ;; This function uses a non-reentrant model
  9006 ;;
  9007                           
  9008                           
  9009                           ;psect for function _CC2500_PowerOnInitial
  9010  1BD0                     _CC2500_PowerOnInitial:	
  9011                           
  9012                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  9013                           
  9014                           ;incstack = 0
  9015                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9016  1BD0  3193  2320  319B   	fcall	_CC2500_PowerRST
  9017                           
  9018                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  9019  1BD3  319F  27AB  319B   	fcall	_CC2500_InitSetREG
  9020                           
  9021                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  9022  1BD6  319D  257D  319B   	fcall	_CC2500_InitPATable
  9023                           
  9024                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  9025  1BD9  3199  2171  319B   	fcall	_CC2500_ClearTXFIFO
  9026                           
  9027                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  9028  1BDC  3199  216D  319B   	fcall	_CC2500_ClearRXFIFO
  9029                           
  9030                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  9031  1BDF  319A  226B  319B   	fcall	_CC2500_FrequencyCabr
  9032                           
  9033                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  9034  1BE2  3199  2175         	fcall	_CC2500_SIDLEMode
  9035  1BE4  0008               	return
  9036  1BE5                     __end_of_CC2500_PowerOnInitial:	
  9037                           
  9038                           	psect	text41
  9039  1975                     __ptext41:	
  9040 ;; *************** function _CC2500_SIDLEMode *****************
  9041 ;; Defined at:
  9042 ;;		line 216 in file "../src/CC2500_B1.c"
  9043 ;; Parameters:    Size  Location     Type
  9044 ;;		None
  9045 ;; Auto vars:     Size  Location     Type
  9046 ;;		None
  9047 ;; Return value:  Size  Location     Type
  9048 ;;		None               void
  9049 ;; Registers used:
  9050 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9051 ;; Tracked objects:
  9052 ;;		On entry : 0/0
  9053 ;;		On exit  : 0/0
  9054 ;;		Unchanged: 0/0
  9055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9059 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9060 ;;Total ram usage:        0 bytes
  9061 ;; Hardware stack levels used:    1
  9062 ;; Hardware stack levels required when called:    7
  9063 ;; This function calls:
  9064 ;;		_CC2500_WriteCommand
  9065 ;; This function is called by:
  9066 ;;		_CC2500_PowerOnInitial
  9067 ;; This function uses a non-reentrant model
  9068 ;;
  9069                           
  9070                           
  9071                           ;psect for function _CC2500_SIDLEMode
  9072  1975                     _CC2500_SIDLEMode:	
  9073                           
  9074                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  9075                           
  9076                           ;incstack = 0
  9077                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9078  1975  3036               	movlw	54
  9079  1976  319C  24B9         	fcall	_CC2500_WriteCommand
  9080  1978  0008               	return
  9081  1979                     __end_of_CC2500_SIDLEMode:	
  9082                           
  9083                           	psect	text42
  9084  1320                     __ptext42:	
  9085 ;; *************** function _CC2500_PowerRST *****************
  9086 ;; Defined at:
  9087 ;;		line 139 in file "../src/CC2500_B1.c"
  9088 ;; Parameters:    Size  Location     Type
  9089 ;;		None
  9090 ;; Auto vars:     Size  Location     Type
  9091 ;;		None
  9092 ;; Return value:  Size  Location     Type
  9093 ;;		None               void
  9094 ;; Registers used:
  9095 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9096 ;; Tracked objects:
  9097 ;;		On entry : 0/0
  9098 ;;		On exit  : 0/0
  9099 ;;		Unchanged: 0/0
  9100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9102 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9103 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9104 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9105 ;;Total ram usage:        1 bytes
  9106 ;; Hardware stack levels used:    1
  9107 ;; Hardware stack levels required when called:    6
  9108 ;; This function calls:
  9109 ;;		_CC2500_WriteByte
  9110 ;;		_DelayTime_1us
  9111 ;;		_RF_Timeout_Counter
  9112 ;;		_setRF_TimeoutCleared
  9113 ;; This function is called by:
  9114 ;;		_CC2500_PowerOnInitial
  9115 ;; This function uses a non-reentrant model
  9116 ;;
  9117                           
  9118                           
  9119                           ;psect for function _CC2500_PowerRST
  9120  1320                     _CC2500_PowerRST:	
  9121                           
  9122                           ;CC2500_B1.c: 140: RC1 = 0;
  9123                           
  9124                           ;incstack = 0
  9125                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9126  1320  0020               	movlb	0	; select bank0
  9127  1321  108E               	bcf	14,1	;volatile
  9128                           
  9129                           ;CC2500_B1.c: 141: RC0 = 0;
  9130  1322  100E               	bcf	14,0	;volatile
  9131                           
  9132                           ;CC2500_B1.c: 142: RC4 = 1;
  9133  1323  160E               	bsf	14,4	;volatile
  9134                           
  9135                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  9136  1324  300A               	movlw	10
  9137  1325  00A1               	movwf	DelayTime_1us@count
  9138  1326  3000               	movlw	0
  9139  1327  00A2               	movwf	DelayTime_1us@count+1
  9140  1328  319F  2709  3193   	fcall	_DelayTime_1us
  9141                           
  9142                           ;CC2500_B1.c: 144: RC4 = 0;
  9143  132B  0020               	movlb	0	; select bank0
  9144  132C  120E               	bcf	14,4	;volatile
  9145                           
  9146                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  9147  132D  300A               	movlw	10
  9148  132E  00A1               	movwf	DelayTime_1us@count
  9149  132F  3000               	movlw	0
  9150  1330  00A2               	movwf	DelayTime_1us@count+1
  9151  1331  319F  2709  3193   	fcall	_DelayTime_1us
  9152                           
  9153                           ;CC2500_B1.c: 146: RC4 = 1;
  9154  1334  0020               	movlb	0	; select bank0
  9155  1335  160E               	bsf	14,4	;volatile
  9156                           
  9157                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  9158  1336  3028               	movlw	40
  9159  1337  00A1               	movwf	DelayTime_1us@count
  9160  1338  3000               	movlw	0
  9161  1339  00A2               	movwf	DelayTime_1us@count+1
  9162  133A  319F  2709  3193   	fcall	_DelayTime_1us
  9163                           
  9164                           ;CC2500_B1.c: 148: RC4 = 0;
  9165  133D  0020               	movlb	0	; select bank0
  9166  133E  120E               	bcf	14,4	;volatile
  9167                           
  9168                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  9169  133F  3030               	movlw	48
  9170  1340  00A7               	movwf	??_CC2500_PowerRST
  9171  1341  0827               	movf	??_CC2500_PowerRST,w
  9172  1342  0021               	movlb	1	; select bank1
  9173  1343  00D4               	movwf	_SPI0Buffer^(0+128)
  9174                           
  9175                           ;CC2500_B1.c: 150: while (RC2 == 1 && RF1.Timeout == 0) {
  9176  1344  2B48               	goto	l6963
  9177  1345                     l6961:	
  9178                           
  9179                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  9180  1345  319B  23BB  3193   	fcall	_RF_Timeout_Counter
  9181  1348                     l6963:	
  9182  1348  0020               	movlb	0	; select bank0
  9183  1349  1D0E               	btfss	14,2	;volatile
  9184  134A  2B4E               	goto	l6967
  9185  134B  0021               	movlb	1	; select bank1
  9186  134C  1F21               	btfss	(_RF1^(0+128)+1),6
  9187  134D  2B45               	goto	l6961
  9188  134E                     l6967:	
  9189                           
  9190                           ;CC2500_B1.c: 152: };
  9191                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  9192  134E  3199  2169  3193   	fcall	_setRF_TimeoutCleared
  9193                           
  9194                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  9195  1351  319C  2486  3193   	fcall	_CC2500_WriteByte
  9196                           
  9197                           ;CC2500_B1.c: 155: while (RC2 == 1 && RF1.Timeout == 0) {
  9198  1354  2B58               	goto	l6973
  9199  1355                     l6971:	
  9200                           
  9201                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  9202  1355  319B  23BB  3193   	fcall	_RF_Timeout_Counter
  9203  1358                     l6973:	
  9204  1358  0020               	movlb	0	; select bank0
  9205  1359  1D0E               	btfss	14,2	;volatile
  9206  135A  2B5E               	goto	l6977
  9207  135B  0021               	movlb	1	; select bank1
  9208  135C  1F21               	btfss	(_RF1^(0+128)+1),6
  9209  135D  2B55               	goto	l6971
  9210  135E                     l6977:	
  9211                           
  9212                           ;CC2500_B1.c: 157: };
  9213                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  9214  135E  3199  2169         	fcall	_setRF_TimeoutCleared
  9215                           
  9216                           ;CC2500_B1.c: 159: RC0 = 0;
  9217  1360  0020               	movlb	0	; select bank0
  9218  1361  100E               	bcf	14,0	;volatile
  9219                           
  9220                           ;CC2500_B1.c: 160: RC4 = 1;
  9221  1362  160E               	bsf	14,4	;volatile
  9222  1363  0008               	return
  9223  1364                     __end_of_CC2500_PowerRST:	
  9224                           
  9225                           	psect	text43
  9226  1FAB                     __ptext43:	
  9227 ;; *************** function _CC2500_InitSetREG *****************
  9228 ;; Defined at:
  9229 ;;		line 166 in file "../src/CC2500_B1.c"
  9230 ;; Parameters:    Size  Location     Type
  9231 ;;		None
  9232 ;; Auto vars:     Size  Location     Type
  9233 ;;  loop_c          1    9[BANK0 ] unsigned char 
  9234 ;;  temp2           1    8[BANK0 ] unsigned char 
  9235 ;;  temp1           1    7[BANK0 ] unsigned char 
  9236 ;; Return value:  Size  Location     Type
  9237 ;;		None               void
  9238 ;; Registers used:
  9239 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9240 ;; Tracked objects:
  9241 ;;		On entry : 0/0
  9242 ;;		On exit  : 0/0
  9243 ;;		Unchanged: 0/0
  9244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9246 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9247 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9248 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9249 ;;Total ram usage:        4 bytes
  9250 ;; Hardware stack levels used:    1
  9251 ;; Hardware stack levels required when called:    7
  9252 ;; This function calls:
  9253 ;;		_CC2500_WriteREG
  9254 ;; This function is called by:
  9255 ;;		_CC2500_PowerOnInitial
  9256 ;; This function uses a non-reentrant model
  9257 ;;
  9258                           
  9259                           
  9260                           ;psect for function _CC2500_InitSetREG
  9261  1FAB                     _CC2500_InitSetREG:	
  9262                           
  9263                           ;CC2500_B1.c: 167: unsigned char loop_c;
  9264                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  9265                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  9266                           
  9267                           ;incstack = 0
  9268                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9269  1FAB  0020               	movlb	0	; select bank0
  9270  1FAC  01A9               	clrf	CC2500_InitSetREG@loop_c
  9271  1FAD                     L4:	
  9272  1FAD  302F               	movlw	47
  9273  1FAE  0229               	subwf	CC2500_InitSetREG@loop_c,w
  9274  1FAF  1803               	btfsc	3,0
  9275  1FB0  0008               	return
  9276                           
  9277                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  9278  1FB1  0829               	movf	CC2500_InitSetREG@loop_c,w
  9279  1FB2  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  9280  1FB3  0084               	movwf	4
  9281  1FB4  3098               	movlw	high (_CC2500_registers_address| (0+32768))
  9282  1FB5  1803               	skipnc
  9283  1FB6  3E01               	addlw	1
  9284  1FB7  0085               	movwf	5
  9285  1FB8  0800               	movf	0,w	;code access
  9286  1FB9  00A6               	movwf	??_CC2500_InitSetREG
  9287  1FBA  0826               	movf	??_CC2500_InitSetREG,w
  9288  1FBB  00A7               	movwf	CC2500_InitSetREG@temp1
  9289                           
  9290                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9291  1FBC  0829               	movf	CC2500_InitSetREG@loop_c,w
  9292  1FBD  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9293  1FBE  0084               	movwf	4
  9294  1FBF  3098               	movlw	high (_CC2500_rfSettings| (0+32768))
  9295  1FC0  1803               	skipnc
  9296  1FC1  3E01               	addlw	1
  9297  1FC2  0085               	movwf	5
  9298  1FC3  0800               	movf	0,w	;code access
  9299  1FC4  00A6               	movwf	??_CC2500_InitSetREG
  9300  1FC5  0826               	movf	??_CC2500_InitSetREG,w
  9301  1FC6  00A8               	movwf	CC2500_InitSetREG@temp2
  9302                           
  9303                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9304  1FC7  0828               	movf	CC2500_InitSetREG@temp2,w
  9305  1FC8  00A6               	movwf	??_CC2500_InitSetREG
  9306  1FC9  0826               	movf	??_CC2500_InitSetREG,w
  9307  1FCA  00A3               	movwf	CC2500_WriteREG@value
  9308  1FCB  0827               	movf	CC2500_InitSetREG@temp1,w
  9309  1FCC  319E  26C1  319F   	fcall	_CC2500_WriteREG
  9310  1FCF  3001               	movlw	1
  9311  1FD0  0020               	movlb	0	; select bank0
  9312  1FD1  00A6               	movwf	??_CC2500_InitSetREG
  9313  1FD2  0826               	movf	??_CC2500_InitSetREG,w
  9314  1FD3  07A9               	addwf	CC2500_InitSetREG@loop_c,f
  9315  1FD4  2FAD               	goto	L4
  9316  1FD5                     __end_of_CC2500_InitSetREG:	
  9317                           
  9318                           	psect	text44
  9319  1D7D                     __ptext44:	
  9320 ;; *************** function _CC2500_InitPATable *****************
  9321 ;; Defined at:
  9322 ;;		line 181 in file "../src/CC2500_B1.c"
  9323 ;; Parameters:    Size  Location     Type
  9324 ;;		None
  9325 ;; Auto vars:     Size  Location     Type
  9326 ;;  loop_d          1    8[BANK0 ] unsigned char 
  9327 ;;  temp            1    7[BANK0 ] unsigned char 
  9328 ;; Return value:  Size  Location     Type
  9329 ;;		None               void
  9330 ;; Registers used:
  9331 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9332 ;; Tracked objects:
  9333 ;;		On entry : 0/0
  9334 ;;		On exit  : 0/0
  9335 ;;		Unchanged: 0/0
  9336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9338 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9339 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9340 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9341 ;;Total ram usage:        3 bytes
  9342 ;; Hardware stack levels used:    1
  9343 ;; Hardware stack levels required when called:    7
  9344 ;; This function calls:
  9345 ;;		_CC2500_WriteREG
  9346 ;; This function is called by:
  9347 ;;		_CC2500_PowerOnInitial
  9348 ;; This function uses a non-reentrant model
  9349 ;;
  9350                           
  9351                           
  9352                           ;psect for function _CC2500_InitPATable
  9353  1D7D                     _CC2500_InitPATable:	
  9354                           
  9355                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9356                           ;CC2500_B1.c: 183: unsigned char temp;
  9357                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9358                           
  9359                           ;incstack = 0
  9360                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9361  1D7D  0020               	movlb	0	; select bank0
  9362  1D7E  01A8               	clrf	CC2500_InitPATable@loop_d
  9363  1D7F                     L5:	
  9364  1D7F  3008               	movlw	8
  9365  1D80  0228               	subwf	CC2500_InitPATable@loop_d,w
  9366  1D81  1803               	btfsc	3,0
  9367  1D82  0008               	return
  9368                           
  9369                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9370  1D83  0828               	movf	CC2500_InitPATable@loop_d,w
  9371  1D84  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9372  1D85  0084               	movwf	4
  9373  1D86  3098               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9374  1D87  1803               	skipnc
  9375  1D88  3E01               	addlw	1
  9376  1D89  0085               	movwf	5
  9377  1D8A  0800               	movf	0,w	;code access
  9378  1D8B  00A6               	movwf	??_CC2500_InitPATable
  9379  1D8C  0826               	movf	??_CC2500_InitPATable,w
  9380  1D8D  00A7               	movwf	CC2500_InitPATable@temp
  9381                           
  9382                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9383  1D8E  0827               	movf	CC2500_InitPATable@temp,w
  9384  1D8F  00A6               	movwf	??_CC2500_InitPATable
  9385  1D90  0826               	movf	??_CC2500_InitPATable,w
  9386  1D91  00A3               	movwf	CC2500_WriteREG@value
  9387  1D92  303E               	movlw	62
  9388  1D93  319E  26C1  319D   	fcall	_CC2500_WriteREG
  9389  1D96  3001               	movlw	1
  9390  1D97  0020               	movlb	0	; select bank0
  9391  1D98  00A6               	movwf	??_CC2500_InitPATable
  9392  1D99  0826               	movf	??_CC2500_InitPATable,w
  9393  1D9A  07A8               	addwf	CC2500_InitPATable@loop_d,f
  9394  1D9B  2D7F               	goto	L5
  9395  1D9C                     __end_of_CC2500_InitPATable:	
  9396                           
  9397                           	psect	text45
  9398  1EC1                     __ptext45:	
  9399 ;; *************** function _CC2500_WriteREG *****************
  9400 ;; Defined at:
  9401 ;;		line 258 in file "../src/CC2500_B1.c"
  9402 ;; Parameters:    Size  Location     Type
  9403 ;;  w_addr          1    wreg     unsigned char 
  9404 ;;  value           1    3[BANK0 ] unsigned char 
  9405 ;; Auto vars:     Size  Location     Type
  9406 ;;  w_addr          1    5[BANK0 ] unsigned char 
  9407 ;; Return value:  Size  Location     Type
  9408 ;;		None               void
  9409 ;; Registers used:
  9410 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9411 ;; Tracked objects:
  9412 ;;		On entry : 0/0
  9413 ;;		On exit  : 0/0
  9414 ;;		Unchanged: 0/0
  9415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9416 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9417 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9418 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9419 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9420 ;;Total ram usage:        3 bytes
  9421 ;; Hardware stack levels used:    1
  9422 ;; Hardware stack levels required when called:    6
  9423 ;; This function calls:
  9424 ;;		_CC2500_WriteByte
  9425 ;;		_RF_Timeout_Counter
  9426 ;;		_setRF_TimeoutCleared
  9427 ;; This function is called by:
  9428 ;;		_CC2500_InitSetREG
  9429 ;;		_CC2500_InitPATable
  9430 ;; This function uses a non-reentrant model
  9431 ;;
  9432                           
  9433                           
  9434                           ;psect for function _CC2500_WriteREG
  9435  1EC1                     _CC2500_WriteREG:	
  9436                           
  9437                           ;incstack = 0
  9438                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9439                           ;CC2500_WriteREG@w_addr stored from wreg
  9440  1EC1  0020               	movlb	0	; select bank0
  9441  1EC2  00A5               	movwf	CC2500_WriteREG@w_addr
  9442                           
  9443                           ;CC2500_B1.c: 259: RC4 = 0;
  9444  1EC3  120E               	bcf	14,4	;volatile
  9445                           
  9446                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9447  1EC4  0825               	movf	CC2500_WriteREG@w_addr,w
  9448  1EC5  00A4               	movwf	??_CC2500_WriteREG
  9449  1EC6  0824               	movf	??_CC2500_WriteREG,w
  9450  1EC7  0021               	movlb	1	; select bank1
  9451  1EC8  00D4               	movwf	_SPI0Buffer^(0+128)
  9452                           
  9453                           ;CC2500_B1.c: 261: while (RC2 == 1 && RF1.Timeout == 0) {
  9454  1EC9  2ECD               	goto	l6843
  9455  1ECA                     l6841:	
  9456                           
  9457                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9458  1ECA  319B  23BB  319E   	fcall	_RF_Timeout_Counter
  9459  1ECD                     l6843:	
  9460  1ECD  0020               	movlb	0	; select bank0
  9461  1ECE  1D0E               	btfss	14,2	;volatile
  9462  1ECF  2ED3               	goto	l6847
  9463  1ED0  0021               	movlb	1	; select bank1
  9464  1ED1  1F21               	btfss	(_RF1^(0+128)+1),6
  9465  1ED2  2ECA               	goto	l6841
  9466  1ED3                     l6847:	
  9467                           
  9468                           ;CC2500_B1.c: 263: };
  9469                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9470  1ED3  3199  2169  319E   	fcall	_setRF_TimeoutCleared
  9471                           
  9472                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9473  1ED6  319C  2486  319E   	fcall	_CC2500_WriteByte
  9474                           
  9475                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9476  1ED9  0020               	movlb	0	; select bank0
  9477  1EDA  0823               	movf	CC2500_WriteREG@value,w
  9478  1EDB  00A4               	movwf	??_CC2500_WriteREG
  9479  1EDC  0824               	movf	??_CC2500_WriteREG,w
  9480  1EDD  0021               	movlb	1	; select bank1
  9481  1EDE  00D4               	movwf	_SPI0Buffer^(0+128)
  9482                           
  9483                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9484  1EDF  319C  2486         	fcall	_CC2500_WriteByte
  9485                           
  9486                           ;CC2500_B1.c: 269: RC4 = 1;
  9487  1EE1  0020               	movlb	0	; select bank0
  9488  1EE2  160E               	bsf	14,4	;volatile
  9489  1EE3  0008               	return
  9490  1EE4                     __end_of_CC2500_WriteREG:	
  9491                           
  9492                           	psect	text46
  9493  1A6B                     __ptext46:	
  9494 ;; *************** function _CC2500_FrequencyCabr *****************
  9495 ;; Defined at:
  9496 ;;		line 208 in file "../src/CC2500_B1.c"
  9497 ;; Parameters:    Size  Location     Type
  9498 ;;		None
  9499 ;; Auto vars:     Size  Location     Type
  9500 ;;		None
  9501 ;; Return value:  Size  Location     Type
  9502 ;;		None               void
  9503 ;; Registers used:
  9504 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9505 ;; Tracked objects:
  9506 ;;		On entry : 0/0
  9507 ;;		On exit  : 0/0
  9508 ;;		Unchanged: 0/0
  9509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9513 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9514 ;;Total ram usage:        0 bytes
  9515 ;; Hardware stack levels used:    1
  9516 ;; Hardware stack levels required when called:    7
  9517 ;; This function calls:
  9518 ;;		_CC2500_WriteCommand
  9519 ;;		_DelayTime_1us
  9520 ;; This function is called by:
  9521 ;;		_CC2500_PowerOnInitial
  9522 ;; This function uses a non-reentrant model
  9523 ;;
  9524                           
  9525                           
  9526                           ;psect for function _CC2500_FrequencyCabr
  9527  1A6B                     _CC2500_FrequencyCabr:	
  9528                           
  9529                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9530                           
  9531                           ;incstack = 0
  9532                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9533  1A6B  3033               	movlw	51
  9534  1A6C  319C  24B9  319A   	fcall	_CC2500_WriteCommand
  9535                           
  9536                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9537  1A6F  30E8               	movlw	232
  9538  1A70  0020               	movlb	0	; select bank0
  9539  1A71  00A1               	movwf	DelayTime_1us@count
  9540  1A72  3003               	movlw	3
  9541  1A73  00A2               	movwf	DelayTime_1us@count+1
  9542  1A74  319F  2709         	fcall	_DelayTime_1us
  9543  1A76  0008               	return
  9544  1A77                     __end_of_CC2500_FrequencyCabr:	
  9545                           
  9546                           	psect	text47
  9547  1F09                     __ptext47:	
  9548 ;; *************** function _DelayTime_1us *****************
  9549 ;; Defined at:
  9550 ;;		line 327 in file "../src/CC2500_B1.c"
  9551 ;; Parameters:    Size  Location     Type
  9552 ;;  count           2    1[BANK0 ] int 
  9553 ;; Auto vars:     Size  Location     Type
  9554 ;;  j               2    5[BANK0 ] unsigned int 
  9555 ;;  i               2    3[BANK0 ] unsigned int 
  9556 ;; Return value:  Size  Location     Type
  9557 ;;		None               void
  9558 ;; Registers used:
  9559 ;;		wreg, status,2
  9560 ;; Tracked objects:
  9561 ;;		On entry : 0/0
  9562 ;;		On exit  : 0/0
  9563 ;;		Unchanged: 0/0
  9564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9565 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9566 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9568 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9569 ;;Total ram usage:        6 bytes
  9570 ;; Hardware stack levels used:    1
  9571 ;; Hardware stack levels required when called:    5
  9572 ;; This function calls:
  9573 ;;		Nothing
  9574 ;; This function is called by:
  9575 ;;		_CC2500_PowerRST
  9576 ;;		_CC2500_FrequencyCabr
  9577 ;; This function uses a non-reentrant model
  9578 ;;
  9579                           
  9580                           
  9581                           ;psect for function _DelayTime_1us
  9582  1F09                     _DelayTime_1us:	
  9583                           
  9584                           ;CC2500_B1.c: 328: unsigned int i, j;
  9585                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9586                           
  9587                           ;incstack = 0
  9588                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9589  1F09  3001               	movlw	1
  9590  1F0A  0020               	movlb	0	; select bank0
  9591  1F0B  00A3               	movwf	DelayTime_1us@i
  9592  1F0C  3000               	movlw	0
  9593  1F0D  00A4               	movwf	DelayTime_1us@i+1
  9594  1F0E                     l371:	
  9595  1F0E  0822               	movf	DelayTime_1us@count+1,w
  9596  1F0F  0224               	subwf	DelayTime_1us@i+1,w
  9597  1F10  1D03               	skipz
  9598  1F11  2F14               	goto	u6145
  9599  1F12  0821               	movf	DelayTime_1us@count,w
  9600  1F13  0223               	subwf	DelayTime_1us@i,w
  9601  1F14                     u6145:	
  9602  1F14  1803               	btfsc	3,0
  9603  1F15  0008               	return
  9604                           
  9605                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9606  1F16  01A5               	clrf	DelayTime_1us@j
  9607  1F17  01A6               	clrf	DelayTime_1us@j+1
  9608  1F18  3000               	movlw	0
  9609  1F19  0226               	subwf	DelayTime_1us@j+1,w
  9610  1F1A  3002               	movlw	2
  9611  1F1B  1903               	skipnz
  9612  1F1C  0225               	subwf	DelayTime_1us@j,w
  9613  1F1D  1803               	btfsc	3,0
  9614  1F1E  2F2A               	goto	l6835
  9615  1F1F                     l6833:	
  9616  1F1F  3001               	movlw	1
  9617  1F20  07A5               	addwf	DelayTime_1us@j,f
  9618  1F21  3000               	movlw	0
  9619  1F22  3DA6               	addwfc	DelayTime_1us@j+1,f
  9620  1F23  3000               	movlw	0
  9621  1F24  0226               	subwf	DelayTime_1us@j+1,w
  9622  1F25  3002               	movlw	2
  9623  1F26  1903               	skipnz
  9624  1F27  0225               	subwf	DelayTime_1us@j,w
  9625  1F28  1C03               	skipc
  9626  1F29  2F1F               	goto	l6833
  9627  1F2A                     l6835:	
  9628  1F2A  3001               	movlw	1
  9629  1F2B  07A3               	addwf	DelayTime_1us@i,f
  9630  1F2C  3000               	movlw	0
  9631  1F2D  3DA4               	addwfc	DelayTime_1us@i+1,f
  9632  1F2E  2F0E               	goto	l371
  9633  1F2F                     __end_of_DelayTime_1us:	
  9634                           
  9635                           	psect	text48
  9636  1971                     __ptext48:	
  9637 ;; *************** function _CC2500_ClearTXFIFO *****************
  9638 ;; Defined at:
  9639 ;;		line 194 in file "../src/CC2500_B1.c"
  9640 ;; Parameters:    Size  Location     Type
  9641 ;;		None
  9642 ;; Auto vars:     Size  Location     Type
  9643 ;;		None
  9644 ;; Return value:  Size  Location     Type
  9645 ;;		None               void
  9646 ;; Registers used:
  9647 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9648 ;; Tracked objects:
  9649 ;;		On entry : 0/0
  9650 ;;		On exit  : 0/0
  9651 ;;		Unchanged: 0/0
  9652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9654 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9656 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9657 ;;Total ram usage:        0 bytes
  9658 ;; Hardware stack levels used:    1
  9659 ;; Hardware stack levels required when called:    7
  9660 ;; This function calls:
  9661 ;;		_CC2500_WriteCommand
  9662 ;; This function is called by:
  9663 ;;		_CC2500_PowerOnInitial
  9664 ;; This function uses a non-reentrant model
  9665 ;;
  9666                           
  9667                           
  9668                           ;psect for function _CC2500_ClearTXFIFO
  9669  1971                     _CC2500_ClearTXFIFO:	
  9670                           
  9671                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
  9672                           
  9673                           ;incstack = 0
  9674                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9675  1971  303B               	movlw	59
  9676  1972  319C  24B9         	fcall	_CC2500_WriteCommand
  9677  1974  0008               	return
  9678  1975                     __end_of_CC2500_ClearTXFIFO:	
  9679                           
  9680                           	psect	text49
  9681  196D                     __ptext49:	
  9682 ;; *************** function _CC2500_ClearRXFIFO *****************
  9683 ;; Defined at:
  9684 ;;		line 201 in file "../src/CC2500_B1.c"
  9685 ;; Parameters:    Size  Location     Type
  9686 ;;		None
  9687 ;; Auto vars:     Size  Location     Type
  9688 ;;		None
  9689 ;; Return value:  Size  Location     Type
  9690 ;;		None               void
  9691 ;; Registers used:
  9692 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9693 ;; Tracked objects:
  9694 ;;		On entry : 0/0
  9695 ;;		On exit  : 0/0
  9696 ;;		Unchanged: 0/0
  9697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9699 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9701 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9702 ;;Total ram usage:        0 bytes
  9703 ;; Hardware stack levels used:    1
  9704 ;; Hardware stack levels required when called:    7
  9705 ;; This function calls:
  9706 ;;		_CC2500_WriteCommand
  9707 ;; This function is called by:
  9708 ;;		_CC2500_PowerOnInitial
  9709 ;; This function uses a non-reentrant model
  9710 ;;
  9711                           
  9712                           
  9713                           ;psect for function _CC2500_ClearRXFIFO
  9714  196D                     _CC2500_ClearRXFIFO:	
  9715                           
  9716                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
  9717                           
  9718                           ;incstack = 0
  9719                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9720  196D  303A               	movlw	58
  9721  196E  319C  24B9         	fcall	_CC2500_WriteCommand
  9722  1970  0008               	return
  9723  1971                     __end_of_CC2500_ClearRXFIFO:	
  9724                           
  9725                           	psect	text50
  9726  1CB9                     __ptext50:	
  9727 ;; *************** function _CC2500_WriteCommand *****************
  9728 ;; Defined at:
  9729 ;;		line 292 in file "../src/CC2500_B1.c"
  9730 ;; Parameters:    Size  Location     Type
  9731 ;;  command         1    wreg     unsigned char 
  9732 ;; Auto vars:     Size  Location     Type
  9733 ;;  command         1    4[BANK0 ] unsigned char 
  9734 ;; Return value:  Size  Location     Type
  9735 ;;		None               void
  9736 ;; Registers used:
  9737 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9738 ;; Tracked objects:
  9739 ;;		On entry : 0/0
  9740 ;;		On exit  : 0/0
  9741 ;;		Unchanged: 0/0
  9742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9744 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9745 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9746 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9747 ;;Total ram usage:        2 bytes
  9748 ;; Hardware stack levels used:    1
  9749 ;; Hardware stack levels required when called:    6
  9750 ;; This function calls:
  9751 ;;		_CC2500_WriteByte
  9752 ;;		_RF_Timeout_Counter
  9753 ;;		_setRF_TimeoutCleared
  9754 ;; This function is called by:
  9755 ;;		_CC2500_TxData
  9756 ;;		_CC2500_RxData
  9757 ;;		_CC2500_ClearTXFIFO
  9758 ;;		_CC2500_ClearRXFIFO
  9759 ;;		_CC2500_FrequencyCabr
  9760 ;;		_CC2500_SIDLEMode
  9761 ;;		_setRF_Main
  9762 ;;		_RF_RxDisable
  9763 ;; This function uses a non-reentrant model
  9764 ;;
  9765                           
  9766                           
  9767                           ;psect for function _CC2500_WriteCommand
  9768  1CB9                     _CC2500_WriteCommand:	
  9769                           
  9770                           ;incstack = 0
  9771                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9772                           ;CC2500_WriteCommand@command stored from wreg
  9773  1CB9  0020               	movlb	0	; select bank0
  9774  1CBA  00A4               	movwf	CC2500_WriteCommand@command
  9775                           
  9776                           ;CC2500_B1.c: 293: RC4 = 0;
  9777  1CBB  120E               	bcf	14,4	;volatile
  9778                           
  9779                           ;CC2500_B1.c: 294: SPI0Buffer = command;
  9780  1CBC  0824               	movf	CC2500_WriteCommand@command,w
  9781  1CBD  00A3               	movwf	??_CC2500_WriteCommand
  9782  1CBE  0823               	movf	??_CC2500_WriteCommand,w
  9783  1CBF  0021               	movlb	1	; select bank1
  9784  1CC0  00D4               	movwf	_SPI0Buffer^(0+128)
  9785                           
  9786                           ;CC2500_B1.c: 296: while (RC2 == 1 && RF1.Timeout == 0) {
  9787  1CC1  2CC5               	goto	l6797
  9788  1CC2                     l6795:	
  9789                           
  9790                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
  9791  1CC2  319B  23BB  319C   	fcall	_RF_Timeout_Counter
  9792  1CC5                     l6797:	
  9793  1CC5  0020               	movlb	0	; select bank0
  9794  1CC6  1D0E               	btfss	14,2	;volatile
  9795  1CC7  2CCB               	goto	l6801
  9796  1CC8  0021               	movlb	1	; select bank1
  9797  1CC9  1F21               	btfss	(_RF1^(0+128)+1),6
  9798  1CCA  2CC2               	goto	l6795
  9799  1CCB                     l6801:	
  9800                           
  9801                           ;CC2500_B1.c: 298: };
  9802                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
  9803  1CCB  3199  2169  319C   	fcall	_setRF_TimeoutCleared
  9804                           
  9805                           ;CC2500_B1.c: 301: CC2500_WriteByte();
  9806  1CCE  319C  2486         	fcall	_CC2500_WriteByte
  9807                           
  9808                           ;CC2500_B1.c: 302: RC4 = 1;
  9809  1CD0  0020               	movlb	0	; select bank0
  9810  1CD1  160E               	bsf	14,4	;volatile
  9811  1CD2  0008               	return
  9812  1CD3                     __end_of_CC2500_WriteCommand:	
  9813                           
  9814                           	psect	text51
  9815  1969                     __ptext51:	
  9816 ;; *************** function _setRF_TimeoutCleared *****************
  9817 ;; Defined at:
  9818 ;;		line 149 in file "../src/RF_Control_B1.c"
  9819 ;; Parameters:    Size  Location     Type
  9820 ;;		None
  9821 ;; Auto vars:     Size  Location     Type
  9822 ;;		None
  9823 ;; Return value:  Size  Location     Type
  9824 ;;		None               void
  9825 ;; Registers used:
  9826 ;;		status,2
  9827 ;; Tracked objects:
  9828 ;;		On entry : 0/0
  9829 ;;		On exit  : 0/0
  9830 ;;		Unchanged: 0/0
  9831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9832 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9833 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9834 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9835 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9836 ;;Total ram usage:        0 bytes
  9837 ;; Hardware stack levels used:    1
  9838 ;; Hardware stack levels required when called:    5
  9839 ;; This function calls:
  9840 ;;		Nothing
  9841 ;; This function is called by:
  9842 ;;		_CC2500_TxData
  9843 ;;		_CC2500_RxData
  9844 ;;		_CC2500_PowerRST
  9845 ;;		_CC2500_WriteREG
  9846 ;;		_CC2500_WriteCommand
  9847 ;;		_CC2500_ReadStatus
  9848 ;;		_CC2500_ReadREG
  9849 ;; This function uses a non-reentrant model
  9850 ;;
  9851                           
  9852                           
  9853                           ;psect for function _setRF_TimeoutCleared
  9854  1969                     _setRF_TimeoutCleared:	
  9855                           
  9856                           ;RF_Control_B1.c: 150: RF1.TimeoutCount = 0;
  9857                           
  9858                           ;incstack = 0
  9859                           ; Regs used in _setRF_TimeoutCleared: [status,2]
  9860  1969  0021               	movlb	1	; select bank1
  9861  196A  01AC               	clrf	(_RF1^(0+128)+12)
  9862  196B  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9863  196C  0008               	return
  9864  196D                     __end_of_setRF_TimeoutCleared:	
  9865                           
  9866                           	psect	text52
  9867  1BBB                     __ptext52:	
  9868 ;; *************** function _RF_Timeout_Counter *****************
  9869 ;; Defined at:
  9870 ;;		line 141 in file "../src/RF_Control_B1.c"
  9871 ;; Parameters:    Size  Location     Type
  9872 ;;		None
  9873 ;; Auto vars:     Size  Location     Type
  9874 ;;		None
  9875 ;; Return value:  Size  Location     Type
  9876 ;;		None               void
  9877 ;; Registers used:
  9878 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9879 ;; Tracked objects:
  9880 ;;		On entry : 0/0
  9881 ;;		On exit  : 0/0
  9882 ;;		Unchanged: 0/0
  9883 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9884 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9885 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9886 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9887 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9888 ;;Total ram usage:        0 bytes
  9889 ;; Hardware stack levels used:    1
  9890 ;; Hardware stack levels required when called:    5
  9891 ;; This function calls:
  9892 ;;		Nothing
  9893 ;; This function is called by:
  9894 ;;		_CC2500_TxData
  9895 ;;		_CC2500_RxData
  9896 ;;		_CC2500_PowerRST
  9897 ;;		_CC2500_WriteREG
  9898 ;;		_CC2500_WriteCommand
  9899 ;;		_CC2500_ReadStatus
  9900 ;;		_CC2500_ReadREG
  9901 ;; This function uses a non-reentrant model
  9902 ;;
  9903                           
  9904                           
  9905                           ;psect for function _RF_Timeout_Counter
  9906  1BBB                     _RF_Timeout_Counter:	
  9907                           
  9908                           ;RF_Control_B1.c: 142: RF1.TimeoutCount++;
  9909                           
  9910                           ;incstack = 0
  9911                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  9912  1BBB  3001               	movlw	1
  9913  1BBC  0021               	movlb	1	; select bank1
  9914  1BBD  07AC               	addwf	(_RF1^(0+128)+12),f
  9915  1BBE  3000               	movlw	0
  9916  1BBF  3DAD               	addwfc	((_RF1+1)^(0+128)+12),f
  9917                           
  9918                           ;RF_Control_B1.c: 143: if (RF1.TimeoutCount == 25000) {
  9919  1BC0  300C               	movlw	12
  9920  1BC1  3EA0               	addlw	_RF1& (0+255)
  9921  1BC2  0086               	movwf	6
  9922  1BC3  0187               	clrf	7
  9923  1BC4  3F40               	moviw [0]fsr1
  9924  1BC5  3AA8               	xorlw	168
  9925  1BC6  1D03               	skipz
  9926  1BC7  2BCA               	goto	u5785
  9927  1BC8  3F41               	moviw [1]fsr1
  9928  1BC9  3A61               	xorlw	97
  9929  1BCA                     u5785:	
  9930  1BCA  1D03               	skipz
  9931  1BCB  0008               	return
  9932                           
  9933                           ;RF_Control_B1.c: 144: RF1.TimeoutCount = 0;
  9934  1BCC  01AC               	clrf	(_RF1^(0+128)+12)
  9935  1BCD  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9936                           
  9937                           ;RF_Control_B1.c: 145: RF1.Timeout = 1;
  9938  1BCE  1721               	bsf	(_RF1^(0+128)+1),6
  9939  1BCF  0008               	return
  9940  1BD0                     __end_of_RF_Timeout_Counter:	
  9941                           
  9942                           	psect	text53
  9943  1C86                     __ptext53:	
  9944 ;; *************** function _CC2500_WriteByte *****************
  9945 ;; Defined at:
  9946 ;;		line 226 in file "../src/CC2500_B1.c"
  9947 ;; Parameters:    Size  Location     Type
  9948 ;;		None
  9949 ;; Auto vars:     Size  Location     Type
  9950 ;;  loop_a          1    2[BANK0 ] unsigned char 
  9951 ;; Return value:  Size  Location     Type
  9952 ;;		None               void
  9953 ;; Registers used:
  9954 ;;		wreg, status,2, status,0
  9955 ;; Tracked objects:
  9956 ;;		On entry : 0/0
  9957 ;;		On exit  : 0/0
  9958 ;;		Unchanged: 0/0
  9959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9960 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9961 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9962 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9963 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9964 ;;Total ram usage:        2 bytes
  9965 ;; Hardware stack levels used:    1
  9966 ;; Hardware stack levels required when called:    5
  9967 ;; This function calls:
  9968 ;;		Nothing
  9969 ;; This function is called by:
  9970 ;;		_CC2500_TxData
  9971 ;;		_CC2500_RxData
  9972 ;;		_CC2500_PowerRST
  9973 ;;		_CC2500_WriteREG
  9974 ;;		_CC2500_WriteCommand
  9975 ;;		_CC2500_ReadStatus
  9976 ;;		_CC2500_ReadREG
  9977 ;; This function uses a non-reentrant model
  9978 ;;
  9979                           
  9980                           
  9981                           ;psect for function _CC2500_WriteByte
  9982  1C86                     _CC2500_WriteByte:	
  9983                           
  9984                           ;CC2500_B1.c: 227: unsigned char loop_a;
  9985                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
  9986                           
  9987                           ;incstack = 0
  9988                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
  9989  1C86  0020               	movlb	0	; select bank0
  9990  1C87  01A2               	clrf	CC2500_WriteByte@loop_a
  9991  1C88                     L6:	
  9992  1C88  3008               	movlw	8
  9993  1C89  0222               	subwf	CC2500_WriteByte@loop_a,w
  9994  1C8A  1803               	btfsc	3,0
  9995  1C8B  0008               	return
  9996                           
  9997                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
  9998  1C8C  0021               	movlb	1	; select bank1
  9999  1C8D  1FD4               	btfss	_SPI0Buffer^(0+128),7
 10000  1C8E  2C92               	goto	l327
 10001                           
 10002                           ;CC2500_B1.c: 230: RC0 = 1;
 10003  1C8F  0020               	movlb	0	; select bank0
 10004  1C90  140E               	bsf	14,0	;volatile
 10005  1C91  2C94               	goto	l328
 10006  1C92                     l327:	
 10007                           
 10008                           ;CC2500_B1.c: 231: else
 10009                           ;CC2500_B1.c: 232: RC0 = 0;
 10010  1C92  0020               	movlb	0	; select bank0
 10011  1C93  100E               	bcf	14,0	;volatile
 10012  1C94                     l328:	
 10013                           
 10014                           ;CC2500_B1.c: 233: RC1 = 1;
 10015  1C94  148E               	bsf	14,1	;volatile
 10016                           
 10017                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
 10018  1C95  1003               	clrc
 10019  1C96  0021               	movlb	1	; select bank1
 10020  1C97  0DD4               	rlf	_SPI0Buffer^(0+128),f
 10021                           
 10022                           ;CC2500_B1.c: 235: RC1 = 0;
 10023  1C98  0020               	movlb	0	; select bank0
 10024  1C99  108E               	bcf	14,1	;volatile
 10025  1C9A  3001               	movlw	1
 10026  1C9B  00A1               	movwf	??_CC2500_WriteByte
 10027  1C9C  0821               	movf	??_CC2500_WriteByte,w
 10028  1C9D  07A2               	addwf	CC2500_WriteByte@loop_a,f
 10029  1C9E  2C88               	goto	L6
 10030  1C9F                     __end_of_CC2500_WriteByte:	
 10031                           
 10032                           	psect	text54
 10033  1959                     __ptext54:	
 10034 ;; *************** function _RF_Initialization *****************
 10035 ;; Defined at:
 10036 ;;		line 9 in file "../src/RF_Control_B1.c"
 10037 ;; Parameters:    Size  Location     Type
 10038 ;;		None
 10039 ;; Auto vars:     Size  Location     Type
 10040 ;;		None
 10041 ;; Return value:  Size  Location     Type
 10042 ;;		None               void
 10043 ;; Registers used:
 10044 ;;		wreg, status,2, status,0, pclath, cstack
 10045 ;; Tracked objects:
 10046 ;;		On entry : 0/0
 10047 ;;		On exit  : 0/0
 10048 ;;		Unchanged: 0/0
 10049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10051 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10052 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10053 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10054 ;;Total ram usage:        0 bytes
 10055 ;; Hardware stack levels used:    1
 10056 ;; Hardware stack levels required when called:    6
 10057 ;; This function calls:
 10058 ;;		_setRF_Initialization
 10059 ;; This function is called by:
 10060 ;;		_main
 10061 ;; This function uses a non-reentrant model
 10062 ;;
 10063                           
 10064                           
 10065                           ;psect for function _RF_Initialization
 10066  1959                     _RF_Initialization:	
 10067                           
 10068                           ;RF_Control_B1.c: 11: setRF_Initialization();
 10069                           
 10070                           ;incstack = 0
 10071                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10072  1959  319A  2201         	fcall	_setRF_Initialization
 10073  195B  0008               	return
 10074  195C                     __end_of_RF_Initialization:	
 10075                           
 10076                           	psect	text55
 10077  1A01                     __ptext55:	
 10078 ;; *************** function _setRF_Initialization *****************
 10079 ;; Defined at:
 10080 ;;		line 17 in file "../src/RF_Control_B1.c"
 10081 ;; Parameters:    Size  Location     Type
 10082 ;;		None
 10083 ;; Auto vars:     Size  Location     Type
 10084 ;;		None
 10085 ;; Return value:  Size  Location     Type
 10086 ;;		None               void
 10087 ;; Registers used:
 10088 ;;		wreg
 10089 ;; Tracked objects:
 10090 ;;		On entry : 0/0
 10091 ;;		On exit  : 0/0
 10092 ;;		Unchanged: 0/0
 10093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10096 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10097 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10098 ;;Total ram usage:        1 bytes
 10099 ;; Hardware stack levels used:    1
 10100 ;; Hardware stack levels required when called:    5
 10101 ;; This function calls:
 10102 ;;		Nothing
 10103 ;; This function is called by:
 10104 ;;		_RF_Initialization
 10105 ;; This function uses a non-reentrant model
 10106 ;;
 10107                           
 10108                           
 10109                           ;psect for function _setRF_Initialization
 10110  1A01                     _setRF_Initialization:	
 10111                           
 10112                           ;RF_Control_B1.c: 19: Tx_Length = 21;
 10113                           
 10114                           ;incstack = 0
 10115                           ; Regs used in _setRF_Initialization: [wreg]
 10116  1A01  3015               	movlw	21
 10117  1A02  0020               	movlb	0	; select bank0
 10118  1A03  00A1               	movwf	??_setRF_Initialization
 10119  1A04  0821               	movf	??_setRF_Initialization,w
 10120  1A05  0021               	movlb	1	; select bank1
 10121  1A06  00D7               	movwf	_Tx_Length^(0+128)
 10122                           
 10123                           ;RF_Control_B1.c: 20: RF1.RunTime = 200;
 10124  1A07  30C8               	movlw	200
 10125  1A08  00A7               	movwf	(_RF1^(0+128)+7)
 10126  1A09  3000               	movlw	0
 10127  1A0A  00A8               	movwf	(_RF1^(0+128)+8)
 10128  1A0B  0008               	return
 10129  1A0C                     __end_of_setRF_Initialization:	
 10130                           
 10131                           	psect	text56
 10132  1B10                     __ptext56:	
 10133 ;; *************** function _Mcu_Initialization *****************
 10134 ;; Defined at:
 10135 ;;		line 30 in file "../src/MCU_B1.c"
 10136 ;; Parameters:    Size  Location     Type
 10137 ;;		None
 10138 ;; Auto vars:     Size  Location     Type
 10139 ;;		None
 10140 ;; Return value:  Size  Location     Type
 10141 ;;		None               void
 10142 ;; Registers used:
 10143 ;;		wreg, status,2, status,0, pclath, cstack
 10144 ;; Tracked objects:
 10145 ;;		On entry : 0/0
 10146 ;;		On exit  : 0/0
 10147 ;;		Unchanged: 0/0
 10148 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10149 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10150 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10152 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10153 ;;Total ram usage:        0 bytes
 10154 ;; Hardware stack levels used:    1
 10155 ;; Hardware stack levels required when called:    6
 10156 ;; This function calls:
 10157 ;;		_ADC_Set
 10158 ;;		_Fosc_Set
 10159 ;;		_IOC_Set
 10160 ;;		_IO_Set
 10161 ;;		_TMR1_Set
 10162 ;;		_WDT_Set
 10163 ;; This function is called by:
 10164 ;;		_main
 10165 ;; This function uses a non-reentrant model
 10166 ;;
 10167                           
 10168                           
 10169                           ;psect for function _Mcu_Initialization
 10170  1B10                     _Mcu_Initialization:	
 10171                           
 10172                           ;MCU_B1.c: 32: Fosc_Set();
 10173                           
 10174                           ;incstack = 0
 10175                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10176  1B10  3199  2165  319B   	fcall	_Fosc_Set
 10177                           
 10178                           ;MCU_B1.c: 34: IO_Set();
 10179  1B13  319C  24D3  319B   	fcall	_IO_Set
 10180                           
 10181                           ;MCU_B1.c: 36: ;;
 10182                           ;MCU_B1.c: 38: TMR1_Set();
 10183  1B16  319A  225F  319B   	fcall	_TMR1_Set
 10184                           
 10185                           ;MCU_B1.c: 40: ADC_Set();
 10186  1B19  3199  2190  319B   	fcall	_ADC_Set
 10187                           
 10188                           ;MCU_B1.c: 42: ;;
 10189                           ;MCU_B1.c: 44: ;;
 10190                           ;MCU_B1.c: 46: IOC_Set();
 10191  1B1C  3199  21E1  319B   	fcall	_IOC_Set
 10192                           
 10193                           ;MCU_B1.c: 48: ;;
 10194                           ;MCU_B1.c: 50: ;;
 10195                           ;MCU_B1.c: 52: WDT_Set();
 10196  1B1F  3199  21F6         	fcall	_WDT_Set
 10197  1B21  0008               	return
 10198  1B22                     __end_of_Mcu_Initialization:	
 10199                           
 10200                           	psect	text57
 10201  19F6                     __ptext57:	
 10202 ;; *************** function _WDT_Set *****************
 10203 ;; Defined at:
 10204 ;;		line 1089 in file "../src/MCU_B1.c"
 10205 ;; Parameters:    Size  Location     Type
 10206 ;;		None
 10207 ;; Auto vars:     Size  Location     Type
 10208 ;;		None
 10209 ;; Return value:  Size  Location     Type
 10210 ;;		None               void
 10211 ;; Registers used:
 10212 ;;		wreg
 10213 ;; Tracked objects:
 10214 ;;		On entry : 0/0
 10215 ;;		On exit  : 0/0
 10216 ;;		Unchanged: 0/0
 10217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10220 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10221 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10222 ;;Total ram usage:        1 bytes
 10223 ;; Hardware stack levels used:    1
 10224 ;; Hardware stack levels required when called:    5
 10225 ;; This function calls:
 10226 ;;		Nothing
 10227 ;; This function is called by:
 10228 ;;		_Mcu_Initialization
 10229 ;; This function uses a non-reentrant model
 10230 ;;
 10231                           
 10232                           
 10233                           ;psect for function _WDT_Set
 10234  19F6                     _WDT_Set:	
 10235                           
 10236                           ;MCU_B1.c: 1096: WDTCON = 0b00010111;;
 10237                           
 10238                           ;incstack = 0
 10239                           ; Regs used in _WDT_Set: [wreg]
 10240  19F6  3017               	movlw	23
 10241  19F7  0021               	movlb	1	; select bank1
 10242  19F8  0097               	movwf	23	;volatile
 10243                           
 10244                           ;MCU_B1.c: 1098: WDT.Enable = 1;
 10245  19F9  1449               	bsf	_WDT^(0+128),0
 10246                           
 10247                           ;MCU_B1.c: 1099: WDT.Timer = 10;
 10248  19FA  300A               	movlw	10
 10249  19FB  0020               	movlb	0	; select bank0
 10250  19FC  00A1               	movwf	??_WDT_Set
 10251  19FD  0821               	movf	??_WDT_Set,w
 10252  19FE  0021               	movlb	1	; select bank1
 10253  19FF  00CA               	movwf	(_WDT^(0+128)+1)
 10254  1A00  0008               	return
 10255  1A01                     __end_of_WDT_Set:	
 10256                           
 10257                           	psect	text58
 10258  1A5F                     __ptext58:	
 10259 ;; *************** function _TMR1_Set *****************
 10260 ;; Defined at:
 10261 ;;		line 226 in file "../src/MCU_B1.c"
 10262 ;; Parameters:    Size  Location     Type
 10263 ;;		None
 10264 ;; Auto vars:     Size  Location     Type
 10265 ;;		None
 10266 ;; Return value:  Size  Location     Type
 10267 ;;		None               void
 10268 ;; Registers used:
 10269 ;;		wreg
 10270 ;; Tracked objects:
 10271 ;;		On entry : 0/0
 10272 ;;		On exit  : 0/0
 10273 ;;		Unchanged: 0/0
 10274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10275 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10276 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10277 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10278 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10279 ;;Total ram usage:        0 bytes
 10280 ;; Hardware stack levels used:    1
 10281 ;; Hardware stack levels required when called:    5
 10282 ;; This function calls:
 10283 ;;		Nothing
 10284 ;; This function is called by:
 10285 ;;		_Mcu_Initialization
 10286 ;; This function uses a non-reentrant model
 10287 ;;
 10288                           
 10289                           
 10290                           ;psect for function _TMR1_Set
 10291  1A5F                     _TMR1_Set:	
 10292                           
 10293                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
 10294                           
 10295                           ;incstack = 0
 10296                           ; Regs used in _TMR1_Set: [wreg]
 10297  1A5F  3041               	movlw	65
 10298  1A60  0020               	movlb	0	; select bank0
 10299  1A61  0098               	movwf	24	;volatile
 10300                           
 10301                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
 10302  1A62  30FA               	movlw	250
 10303  1A63  0097               	movwf	23	;volatile
 10304                           
 10305                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
 10306  1A64  3038               	movlw	56
 10307  1A65  0096               	movwf	22	;volatile
 10308                           
 10309                           ;MCU_B1.c: 230: TMR1IE = 1;
 10310  1A66  0021               	movlb	1	; select bank1
 10311  1A67  1411               	bsf	17,0	;volatile
 10312                           
 10313                           ;MCU_B1.c: 231: PEIE = 1;
 10314  1A68  170B               	bsf	11,6	;volatile
 10315                           
 10316                           ;MCU_B1.c: 232: GIE = 1;
 10317  1A69  178B               	bsf	11,7	;volatile
 10318  1A6A  0008               	return
 10319  1A6B                     __end_of_TMR1_Set:	
 10320                           
 10321                           	psect	text59
 10322  1CD3                     __ptext59:	
 10323 ;; *************** function _IO_Set *****************
 10324 ;; Defined at:
 10325 ;;		line 60 in file "../src/MCU_B1.c"
 10326 ;; Parameters:    Size  Location     Type
 10327 ;;		None
 10328 ;; Auto vars:     Size  Location     Type
 10329 ;;		None
 10330 ;; Return value:  Size  Location     Type
 10331 ;;		None               void
 10332 ;; Registers used:
 10333 ;;		wreg, status,2
 10334 ;; Tracked objects:
 10335 ;;		On entry : 0/0
 10336 ;;		On exit  : 0/0
 10337 ;;		Unchanged: 0/0
 10338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10342 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10343 ;;Total ram usage:        0 bytes
 10344 ;; Hardware stack levels used:    1
 10345 ;; Hardware stack levels required when called:    5
 10346 ;; This function calls:
 10347 ;;		Nothing
 10348 ;; This function is called by:
 10349 ;;		_Mcu_Initialization
 10350 ;; This function uses a non-reentrant model
 10351 ;;
 10352                           
 10353                           
 10354                           ;psect for function _IO_Set
 10355  1CD3                     _IO_Set:	
 10356                           
 10357                           ;MCU_B1.c: 92: TRISA = 0b01110111;;
 10358                           
 10359                           ;incstack = 0
 10360                           ; Regs used in _IO_Set: [wreg+status,2]
 10361  1CD3  3077               	movlw	119
 10362  1CD4  0021               	movlb	1	; select bank1
 10363  1CD5  008C               	movwf	12	;volatile
 10364                           
 10365                           ;MCU_B1.c: 93: TRISB = 0b00000111;;
 10366  1CD6  3007               	movlw	7
 10367  1CD7  008D               	movwf	13	;volatile
 10368                           
 10369                           ;MCU_B1.c: 94: TRISC = 0b00001100;;
 10370  1CD8  300C               	movlw	12
 10371  1CD9  008E               	movwf	14	;volatile
 10372                           
 10373                           ;MCU_B1.c: 96: LATA = 0b00000000;;
 10374  1CDA  0022               	movlb	2	; select bank2
 10375  1CDB  018C               	clrf	12	;volatile
 10376                           
 10377                           ;MCU_B1.c: 97: LATB = 0b00000010;;
 10378  1CDC  3002               	movlw	2
 10379  1CDD  008D               	movwf	13	;volatile
 10380                           
 10381                           ;MCU_B1.c: 98: LATC = 0b00000000;;
 10382  1CDE  018E               	clrf	14	;volatile
 10383                           
 10384                           ;MCU_B1.c: 100: ANSELA = 0b00100010;;
 10385  1CDF  3022               	movlw	34
 10386  1CE0  0023               	movlb	3	; select bank3
 10387  1CE1  008C               	movwf	12	;volatile
 10388                           
 10389                           ;MCU_B1.c: 101: ANSELB = 0b00000000;;
 10390  1CE2  018D               	clrf	13	;volatile
 10391                           
 10392                           ;MCU_B1.c: 102: ANSELC = 0b00000000;;
 10393  1CE3  018E               	clrf	14	;volatile
 10394                           
 10395                           ;MCU_B1.c: 104: PORTA = 0b01110111;;
 10396  1CE4  3077               	movlw	119
 10397  1CE5  0020               	movlb	0	; select bank0
 10398  1CE6  008C               	movwf	12	;volatile
 10399                           
 10400                           ;MCU_B1.c: 105: PORTB = 0b00000111;;
 10401  1CE7  3007               	movlw	7
 10402  1CE8  008D               	movwf	13	;volatile
 10403                           
 10404                           ;MCU_B1.c: 106: PORTC = 0b00001100;;
 10405  1CE9  300C               	movlw	12
 10406  1CEA  008E               	movwf	14	;volatile
 10407                           
 10408                           ;MCU_B1.c: 108: WPUB = 0b00000000;;
 10409  1CEB  0024               	movlb	4	; select bank4
 10410  1CEC  018D               	clrf	13	;volatile
 10411  1CED  0008               	return
 10412  1CEE                     __end_of_IO_Set:	
 10413                           
 10414                           	psect	text60
 10415  19E1                     __ptext60:	
 10416 ;; *************** function _IOC_Set *****************
 10417 ;; Defined at:
 10418 ;;		line 379 in file "../src/MCU_B1.c"
 10419 ;; Parameters:    Size  Location     Type
 10420 ;;		None
 10421 ;; Auto vars:     Size  Location     Type
 10422 ;;		None
 10423 ;; Return value:  Size  Location     Type
 10424 ;;		None               void
 10425 ;; Registers used:
 10426 ;;		wreg, status,2
 10427 ;; Tracked objects:
 10428 ;;		On entry : 0/0
 10429 ;;		On exit  : 0/0
 10430 ;;		Unchanged: 0/0
 10431 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10435 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10436 ;;Total ram usage:        0 bytes
 10437 ;; Hardware stack levels used:    1
 10438 ;; Hardware stack levels required when called:    5
 10439 ;; This function calls:
 10440 ;;		Nothing
 10441 ;; This function is called by:
 10442 ;;		_Mcu_Initialization
 10443 ;; This function uses a non-reentrant model
 10444 ;;
 10445                           
 10446                           
 10447                           ;psect for function _IOC_Set
 10448  19E1                     _IOC_Set:	
 10449                           
 10450                           ;MCU_B1.c: 381: IOCBP = 0b00000000;;
 10451                           
 10452                           ;incstack = 0
 10453                           ; Regs used in _IOC_Set: [wreg+status,2]
 10454  19E1  0027               	movlb	7	; select bank7
 10455  19E2  0194               	clrf	20	;volatile
 10456                           
 10457                           ;MCU_B1.c: 382: IOCBN = 0b00000100;;
 10458  19E3  3004               	movlw	4
 10459  19E4  0095               	movwf	21	;volatile
 10460                           
 10461                           ;MCU_B1.c: 384: IOCBF = 0b00000000;
 10462  19E5  0196               	clrf	22	;volatile
 10463                           
 10464                           ;MCU_B1.c: 386: IOCIE = 1;
 10465  19E6  158B               	bsf	11,3	;volatile
 10466                           
 10467                           ;MCU_B1.c: 387: IOCIF = 0;
 10468  19E7  100B               	bcf	11,0	;volatile
 10469                           
 10470                           ;MCU_B1.c: 388: PEIE = 1;
 10471  19E8  170B               	bsf	11,6	;volatile
 10472                           
 10473                           ;MCU_B1.c: 389: GIE = 1;
 10474  19E9  178B               	bsf	11,7	;volatile
 10475  19EA  0008               	return
 10476  19EB                     __end_of_IOC_Set:	
 10477                           
 10478                           	psect	text61
 10479  1965                     __ptext61:	
 10480 ;; *************** function _Fosc_Set *****************
 10481 ;; Defined at:
 10482 ;;		line 56 in file "../src/MCU_B1.c"
 10483 ;; Parameters:    Size  Location     Type
 10484 ;;		None
 10485 ;; Auto vars:     Size  Location     Type
 10486 ;;		None
 10487 ;; Return value:  Size  Location     Type
 10488 ;;		None               void
 10489 ;; Registers used:
 10490 ;;		wreg
 10491 ;; Tracked objects:
 10492 ;;		On entry : 0/0
 10493 ;;		On exit  : 0/0
 10494 ;;		Unchanged: 0/0
 10495 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10496 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10497 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10499 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10500 ;;Total ram usage:        0 bytes
 10501 ;; Hardware stack levels used:    1
 10502 ;; Hardware stack levels required when called:    5
 10503 ;; This function calls:
 10504 ;;		Nothing
 10505 ;; This function is called by:
 10506 ;;		_Mcu_Initialization
 10507 ;; This function uses a non-reentrant model
 10508 ;;
 10509                           
 10510                           
 10511                           ;psect for function _Fosc_Set
 10512  1965                     _Fosc_Set:	
 10513                           
 10514                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10515                           
 10516                           ;incstack = 0
 10517                           ; Regs used in _Fosc_Set: [wreg]
 10518  1965  3078               	movlw	120
 10519  1966  0021               	movlb	1	; select bank1
 10520  1967  0099               	movwf	25	;volatile
 10521  1968  0008               	return
 10522  1969                     __end_of_Fosc_Set:	
 10523                           
 10524                           	psect	text62
 10525  1990                     __ptext62:	
 10526 ;; *************** function _ADC_Set *****************
 10527 ;; Defined at:
 10528 ;;		line 425 in file "../src/MCU_B1.c"
 10529 ;; Parameters:    Size  Location     Type
 10530 ;;		None
 10531 ;; Auto vars:     Size  Location     Type
 10532 ;;		None
 10533 ;; Return value:  Size  Location     Type
 10534 ;;		None               void
 10535 ;; Registers used:
 10536 ;;		wreg
 10537 ;; Tracked objects:
 10538 ;;		On entry : 0/0
 10539 ;;		On exit  : 0/0
 10540 ;;		Unchanged: 0/0
 10541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10545 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10546 ;;Total ram usage:        0 bytes
 10547 ;; Hardware stack levels used:    1
 10548 ;; Hardware stack levels required when called:    5
 10549 ;; This function calls:
 10550 ;;		Nothing
 10551 ;; This function is called by:
 10552 ;;		_Mcu_Initialization
 10553 ;; This function uses a non-reentrant model
 10554 ;;
 10555                           
 10556                           
 10557                           ;psect for function _ADC_Set
 10558  1990                     _ADC_Set:	
 10559                           
 10560                           ;MCU_B1.c: 426: ADCON1 = 0xf3;
 10561                           
 10562                           ;incstack = 0
 10563                           ; Regs used in _ADC_Set: [wreg]
 10564  1990  30F3               	movlw	243
 10565  1991  0021               	movlb	1	; select bank1
 10566  1992  009E               	movwf	30	;volatile
 10567                           
 10568                           ;MCU_B1.c: 427: FVRCON = 0xc1;
 10569  1993  30C1               	movlw	193
 10570  1994  0022               	movlb	2	; select bank2
 10571  1995  0097               	movwf	23	;volatile
 10572  1996  0008               	return
 10573  1997                     __end_of_ADC_Set:	
 10574                           
 10575                           	psect	text63
 10576  0052                     __ptext63:	
 10577 ;; *************** function _Load_Main *****************
 10578 ;; Defined at:
 10579 ;;		line 39 in file "../src/OverLoad_B1.c"
 10580 ;; Parameters:    Size  Location     Type
 10581 ;;		None
 10582 ;; Auto vars:     Size  Location     Type
 10583 ;;  i               2   17[BANK0 ] int 
 10584 ;;  LightsCount     1   16[BANK0 ] unsigned char 
 10585 ;;  Load_RunStat    1   15[BANK0 ] unsigned char 
 10586 ;;  ErrorCountVa    1   14[BANK0 ] unsigned char 
 10587 ;;  error           1   11[BANK0 ] unsigned char 
 10588 ;; Return value:  Size  Location     Type
 10589 ;;		None               void
 10590 ;; Registers used:
 10591 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10592 ;; Tracked objects:
 10593 ;;		On entry : 0/0
 10594 ;;		On exit  : 0/0
 10595 ;;		Unchanged: 0/0
 10596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10598 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10599 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10600 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10601 ;;Total ram usage:       10 bytes
 10602 ;; Hardware stack levels used:    1
 10603 ;; Hardware stack levels required when called:    6
 10604 ;; This function calls:
 10605 ;;		___lwdiv
 10606 ;;		___wmul
 10607 ;;		_getAll_DimmerIntr_Dimming_Sw_RF
 10608 ;;		_getDimmer_LoadGO
 10609 ;;		_getDimmer_Load_Status
 10610 ;;		_getMain_All_Error_Status
 10611 ;;		_getMain_All_LightsStatus
 10612 ;;		_getMain_Lights_Count
 10613 ;;		_setLoad_AH_AL_Restore
 10614 ;; This function is called by:
 10615 ;;		_main
 10616 ;; This function uses a non-reentrant model
 10617 ;;
 10618                           
 10619                           
 10620                           ;psect for function _Load_Main
 10621  0052                     _Load_Main:	
 10622                           
 10623                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
 10624                           
 10625                           ;incstack = 0
 10626                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10627  0052  3000               	movlw	0
 10628  0053  3190  20D4  3180   	fcall	_getMain_All_Error_Status
 10629  0056  0020               	movlb	0	; select bank0
 10630  0057  00A9               	movwf	??_Load_Main
 10631  0058  0829               	movf	??_Load_Main,w
 10632  0059  00AB               	movwf	Load_Main@error
 10633                           
 10634                           ;OverLoad_B1.c: 41: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount=0;
 10635  005A  01AF               	clrf	Load_Main@Load_RunStatus
 10636  005B  01AE               	clrf	Load_Main@ErrorCountValue
 10637  005C  01B0               	clrf	Load_Main@LightsCount
 10638                           
 10639                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
 10640  005D  0022               	movlb	2	; select bank2
 10641  005E  1C40               	btfss	_Load^(0+256),0
 10642  005F  29FE               	goto	l1584
 10643                           
 10644                           ;OverLoad_B1.c: 44: if (getMain_All_LightsStatus() == 0) {
 10645  0060  319B  2347  3180   	fcall	_getMain_All_LightsStatus
 10646  0063  3800               	iorlw	0
 10647  0064  1D03               	skipz
 10648  0065  2868               	goto	l9777
 10649                           
 10650                           ;OverLoad_B1.c: 45: Load.GO = 0;
 10651  0066  0022               	movlb	2	; select bank2
 10652  0067  2889               	goto	l9795
 10653  0068                     l9777:	
 10654                           ;OverLoad_B1.c: 46: } else {
 10655                           
 10656                           
 10657                           ;OverLoad_B1.c: 49: if (error == 0 && getAll_DimmerIntr_Dimming_Sw_RF() == 0) {
 10658  0068  0020               	movlb	0	; select bank0
 10659  0069  08AB               	movf	Load_Main@error,f
 10660  006A  1D03               	skipz
 10661  006B  2886               	goto	l1587
 10662  006C  319E  265D  3180   	fcall	_getAll_DimmerIntr_Dimming_Sw_RF
 10663  006F  3800               	iorlw	0
 10664  0070  1D03               	skipz
 10665  0071  2886               	goto	l1587
 10666                           
 10667                           ;OverLoad_B1.c: 50: Load.GO = 1;
 10668  0072  0022               	movlb	2	; select bank2
 10669  0073  14C0               	bsf	_Load^(0+256),1
 10670                           
 10671                           ;OverLoad_B1.c: 52: if (getDimmer_LoadGO() == 1) {
 10672  0074  3199  21AF  3180   	fcall	_getDimmer_LoadGO
 10673  0077  3A01               	xorlw	1
 10674  0078  1D03               	skipz
 10675  0079  2881               	goto	l1588
 10676                           
 10677                           ;OverLoad_B1.c: 53: if (Load.Run == 0 && Load.OK == 0) {
 10678  007A  0022               	movlb	2	; select bank2
 10679  007B  1DC0               	btfss	_Load^(0+256),3
 10680  007C  1BC0               	btfsc	_Load^(0+256),7
 10681  007D  288A               	goto	l1586
 10682                           
 10683                           ;OverLoad_B1.c: 54: Load.Run = 1;
 10684  007E  15C0               	bsf	_Load^(0+256),3
 10685                           
 10686                           ;OverLoad_B1.c: 55: Load.Count = 0;
 10687  007F  01E5               	clrf	(_Load^(0+256)+37)
 10688                           
 10689                           ;OverLoad_B1.c: 56: }
 10690                           ;OverLoad_B1.c: 57: } else {
 10691  0080  288A               	goto	l1586
 10692  0081                     l1588:	
 10693                           
 10694                           ;OverLoad_B1.c: 58: if (Load.OK == 1) {
 10695  0081  0022               	movlb	2	; select bank2
 10696  0082  1FC0               	btfss	_Load^(0+256),7
 10697  0083  288A               	goto	l1586
 10698                           
 10699                           ;OverLoad_B1.c: 59: Load.OK = 0;
 10700  0084  13C0               	bcf	_Load^(0+256),7
 10701                           
 10702                           ;OverLoad_B1.c: 60: }
 10703                           ;OverLoad_B1.c: 61: }
 10704                           ;OverLoad_B1.c: 62: } else {
 10705  0085  288A               	goto	l1586
 10706  0086                     l1587:	
 10707                           
 10708                           ;OverLoad_B1.c: 63: if (Load.GO == 1) {
 10709  0086  0022               	movlb	2	; select bank2
 10710  0087  1CC0               	btfss	_Load^(0+256),1
 10711  0088  288A               	goto	l1586
 10712  0089                     l9795:	
 10713                           
 10714                           ;OverLoad_B1.c: 64: Load.GO = 0;
 10715  0089  10C0               	bcf	_Load^(0+256),1
 10716  008A                     l1586:	
 10717                           
 10718                           ;OverLoad_B1.c: 65: }
 10719                           ;OverLoad_B1.c: 66: }
 10720                           ;OverLoad_B1.c: 88: }
 10721                           ;OverLoad_B1.c: 91: if (Load.GO == 1) {
 10722  008A  1CC0               	btfss	_Load^(0+256),1
 10723  008B  29DA               	goto	l1594
 10724                           
 10725                           ;OverLoad_B1.c: 92: Load.LightsON = 1;
 10726  008C  1540               	bsf	_Load^(0+256),2
 10727                           
 10728                           ;OverLoad_B1.c: 94: if (Load.ADtoGO == 1) {
 10729  008D  1E40               	btfss	_Load^(0+256),4
 10730  008E  29D8               	goto	l1595
 10731                           
 10732                           ;OverLoad_B1.c: 95: Load.Time++;
 10733  008F  3001               	movlw	1
 10734  0090  07C1               	addwf	(_Load^(0+256)+1),f
 10735  0091  3000               	movlw	0
 10736  0092  3DC2               	addwfc	((_Load+1)^(0+256)+1),f
 10737                           
 10738                           ;OverLoad_B1.c: 96: if (Load.Time >= (40 / 20)) {
 10739  0093  3000               	movlw	0
 10740  0094  0242               	subwf	((_Load+1)^(0+256)+1),w
 10741  0095  3002               	movlw	2
 10742  0096  1903               	skipnz
 10743  0097  0241               	subwf	(_Load^(0+256)+1),w
 10744  0098  1C03               	skipc
 10745  0099  0008               	return
 10746                           
 10747                           ;OverLoad_B1.c: 97: Load.Time = 0;
 10748  009A  01C1               	clrf	(_Load^(0+256)+1)
 10749  009B  01C2               	clrf	((_Load+1)^(0+256)+1)
 10750                           
 10751                           ;OverLoad_B1.c: 98: Load.ADtoGO = 0;
 10752  009C  1240               	bcf	_Load^(0+256),4
 10753                           
 10754                           ;OverLoad_B1.c: 100: for (int i = 1; i < 4; i++) {
 10755  009D  3001               	movlw	1
 10756  009E  0020               	movlb	0	; select bank0
 10757  009F  00B1               	movwf	Load_Main@i
 10758  00A0  3000               	movlw	0
 10759  00A1  00B2               	movwf	Load_Main@i+1
 10760  00A2  0832               	movf	Load_Main@i+1,w
 10761  00A3  3A80               	xorlw	128
 10762  00A4  00A9               	movwf	??_Load_Main
 10763  00A5  3080               	movlw	128
 10764  00A6  0229               	subwf	??_Load_Main,w
 10765  00A7  1D03               	skipz
 10766  00A8  28AB               	goto	u11335
 10767  00A9  3004               	movlw	4
 10768  00AA  0231               	subwf	Load_Main@i,w
 10769  00AB                     u11335:	
 10770  00AB  1803               	btfsc	3,0
 10771  00AC  28DF               	goto	l9817
 10772  00AD                     l9811:	
 10773                           
 10774                           ;OverLoad_B1.c: 101: Load.ADH += Load.AH[i];
 10775  00AD  0020               	movlb	0	; select bank0
 10776  00AE  3531               	lslf	Load_Main@i,w
 10777  00AF  3E4B               	addlw	(_Load+11)& (0+255)
 10778  00B0  0086               	movwf	6
 10779  00B1  3001               	movlw	1	; select bank2/3
 10780  00B2  0087               	movwf	7
 10781  00B3  3F40               	moviw [0]fsr1
 10782  00B4  00A9               	movwf	??_Load_Main
 10783  00B5  3F41               	moviw [1]fsr1
 10784  00B6  00AA               	movwf	??_Load_Main+1
 10785  00B7  0829               	movf	??_Load_Main,w
 10786  00B8  0022               	movlb	2	; select bank2
 10787  00B9  07C5               	addwf	(_Load^(0+256)+5),f
 10788  00BA  0020               	movlb	0	; select bank0
 10789  00BB  082A               	movf	??_Load_Main+1,w
 10790  00BC  0022               	movlb	2	; select bank2
 10791  00BD  3DC6               	addwfc	((_Load+1)^(0+256)+5),f
 10792                           
 10793                           ;OverLoad_B1.c: 102: Load.ADL += Load.AL[i];
 10794  00BE  0020               	movlb	0	; select bank0
 10795  00BF  3531               	lslf	Load_Main@i,w
 10796  00C0  3E55               	addlw	(_Load+21)& (0+255)
 10797  00C1  0086               	movwf	6
 10798  00C2  3001               	movlw	1	; select bank2/3
 10799  00C3  0087               	movwf	7
 10800  00C4  3F40               	moviw [0]fsr1
 10801  00C5  00A9               	movwf	??_Load_Main
 10802  00C6  3F41               	moviw [1]fsr1
 10803  00C7  00AA               	movwf	??_Load_Main+1
 10804  00C8  0829               	movf	??_Load_Main,w
 10805  00C9  0022               	movlb	2	; select bank2
 10806  00CA  07C7               	addwf	(_Load^(0+256)+7),f
 10807  00CB  0020               	movlb	0	; select bank0
 10808  00CC  082A               	movf	??_Load_Main+1,w
 10809  00CD  0022               	movlb	2	; select bank2
 10810  00CE  3DC8               	addwfc	((_Load+1)^(0+256)+7),f
 10811  00CF  3001               	movlw	1
 10812  00D0  0020               	movlb	0	; select bank0
 10813  00D1  07B1               	addwf	Load_Main@i,f
 10814  00D2  3000               	movlw	0
 10815  00D3  3DB2               	addwfc	Load_Main@i+1,f
 10816  00D4  0832               	movf	Load_Main@i+1,w
 10817  00D5  3A80               	xorlw	128
 10818  00D6  00A9               	movwf	??_Load_Main
 10819  00D7  3080               	movlw	128
 10820  00D8  0229               	subwf	??_Load_Main,w
 10821  00D9  1D03               	skipz
 10822  00DA  28DD               	goto	u11345
 10823  00DB  3004               	movlw	4
 10824  00DC  0231               	subwf	Load_Main@i,w
 10825  00DD                     u11345:	
 10826  00DD  1C03               	skipc
 10827  00DE  28AD               	goto	l9811
 10828  00DF                     l9817:	
 10829                           
 10830                           ;OverLoad_B1.c: 103: }
 10831                           ;OverLoad_B1.c: 104: Load.ADH /= 3;
 10832  00DF  3003               	movlw	3
 10833  00E0  0020               	movlb	0	; select bank0
 10834  00E1  00A1               	movwf	___lwdiv@divisor
 10835  00E2  3000               	movlw	0
 10836  00E3  00A2               	movwf	___lwdiv@divisor+1
 10837  00E4  0022               	movlb	2	; select bank2
 10838  00E5  0846               	movf	((_Load+1)^(0+256)+5),w
 10839  00E6  0020               	movlb	0	; select bank0
 10840  00E7  01A4               	clrf	___lwdiv@dividend+1
 10841  00E8  07A4               	addwf	___lwdiv@dividend+1,f
 10842  00E9  0022               	movlb	2	; select bank2
 10843  00EA  0845               	movf	(_Load^(0+256)+5),w
 10844  00EB  0020               	movlb	0	; select bank0
 10845  00EC  01A3               	clrf	___lwdiv@dividend
 10846  00ED  07A3               	addwf	___lwdiv@dividend,f
 10847  00EE  3191  2171  3180   	fcall	___lwdiv
 10848  00F1  0020               	movlb	0	; select bank0
 10849  00F2  0822               	movf	?___lwdiv+1,w
 10850  00F3  0022               	movlb	2	; select bank2
 10851  00F4  01C6               	clrf	((_Load+1)^(0+256)+5)
 10852  00F5  07C6               	addwf	((_Load+1)^(0+256)+5),f
 10853  00F6  0020               	movlb	0	; select bank0
 10854  00F7  0821               	movf	?___lwdiv,w
 10855  00F8  0022               	movlb	2	; select bank2
 10856  00F9  01C5               	clrf	(_Load^(0+256)+5)
 10857  00FA  07C5               	addwf	(_Load^(0+256)+5),f
 10858                           
 10859                           ;OverLoad_B1.c: 105: Load.ADL /= 3;
 10860  00FB  3003               	movlw	3
 10861  00FC  0020               	movlb	0	; select bank0
 10862  00FD  00A1               	movwf	___lwdiv@divisor
 10863  00FE  3000               	movlw	0
 10864  00FF  00A2               	movwf	___lwdiv@divisor+1
 10865  0100  0022               	movlb	2	; select bank2
 10866  0101  0848               	movf	((_Load+1)^(0+256)+7),w
 10867  0102  0020               	movlb	0	; select bank0
 10868  0103  01A4               	clrf	___lwdiv@dividend+1
 10869  0104  07A4               	addwf	___lwdiv@dividend+1,f
 10870  0105  0022               	movlb	2	; select bank2
 10871  0106  0847               	movf	(_Load^(0+256)+7),w
 10872  0107  0020               	movlb	0	; select bank0
 10873  0108  01A3               	clrf	___lwdiv@dividend
 10874  0109  07A3               	addwf	___lwdiv@dividend,f
 10875  010A  3191  2171  3180   	fcall	___lwdiv
 10876  010D  0020               	movlb	0	; select bank0
 10877  010E  0822               	movf	?___lwdiv+1,w
 10878  010F  0022               	movlb	2	; select bank2
 10879  0110  01C8               	clrf	((_Load+1)^(0+256)+7)
 10880  0111  07C8               	addwf	((_Load+1)^(0+256)+7),f
 10881  0112  0020               	movlb	0	; select bank0
 10882  0113  0821               	movf	?___lwdiv,w
 10883  0114  0022               	movlb	2	; select bank2
 10884  0115  01C7               	clrf	(_Load^(0+256)+7)
 10885  0116  07C7               	addwf	(_Load^(0+256)+7),f
 10886                           
 10887                           ;OverLoad_B1.c: 106: setLoad_AH_AL_Restore();
 10888  0117  319D  2509  3180   	fcall	_setLoad_AH_AL_Restore
 10889                           
 10890                           ;OverLoad_B1.c: 108: if (Load.ADH >= Load.ADL) {
 10891  011A  0022               	movlb	2	; select bank2
 10892  011B  0848               	movf	((_Load+1)^(0+256)+7),w
 10893  011C  0246               	subwf	((_Load+1)^(0+256)+5),w
 10894  011D  1D03               	skipz
 10895  011E  2921               	goto	u11355
 10896  011F  0847               	movf	(_Load^(0+256)+7),w
 10897  0120  0245               	subwf	(_Load^(0+256)+5),w
 10898  0121                     u11355:	
 10899  0121  1C03               	skipc
 10900  0122  0008               	return
 10901                           
 10902                           ;OverLoad_B1.c: 109: Load.AD = Load.ADH - Load.ADL;
 10903  0123  3005               	movlw	5
 10904  0124  3E40               	addlw	_Load& (0+255)
 10905  0125  0086               	movwf	6
 10906  0126  3001               	movlw	1	; select bank2/3
 10907  0127  0087               	movwf	7
 10908  0128  0947               	comf	(_Load^(0+256)+7),w
 10909  0129  0020               	movlb	0	; select bank0
 10910  012A  00A9               	movwf	??_Load_Main
 10911  012B  0022               	movlb	2	; select bank2
 10912  012C  0948               	comf	((_Load+1)^(0+256)+7),w
 10913  012D  0020               	movlb	0	; select bank0
 10914  012E  00AA               	movwf	??_Load_Main+1
 10915  012F  0AA9               	incf	??_Load_Main,f
 10916  0130  1903               	skipnz
 10917  0131  0AAA               	incf	??_Load_Main+1,f
 10918  0132  3F40               	moviw [0]fsr1
 10919  0133  0729               	addwf	??_Load_Main,w
 10920  0134  0022               	movlb	2	; select bank2
 10921  0135  00DF               	movwf	(_Load^(0+256)+31)
 10922  0136  3F41               	moviw [1]fsr1
 10923  0137  0020               	movlb	0	; select bank0
 10924  0138  3D2A               	addwfc	??_Load_Main+1,w
 10925  0139  0022               	movlb	2	; select bank2
 10926  013A  00E0               	movwf	(_Load^(0+256)+32)
 10927                           
 10928                           ;OverLoad_B1.c: 110: Load.ADH = 0;
 10929  013B  01C5               	clrf	(_Load^(0+256)+5)
 10930  013C  01C6               	clrf	((_Load+1)^(0+256)+5)
 10931                           
 10932                           ;OverLoad_B1.c: 111: Load.ADL = 0;
 10933  013D  01C7               	clrf	(_Load^(0+256)+7)
 10934  013E  01C8               	clrf	((_Load+1)^(0+256)+7)
 10935                           
 10936                           ;OverLoad_B1.c: 113: if (Load.Run == 1) {
 10937  013F  1DC0               	btfss	_Load^(0+256),3
 10938  0140  299A               	goto	l9857
 10939                           
 10940                           ;OverLoad_B1.c: 114: if (Load.Count < 2) {
 10941  0141  3002               	movlw	2
 10942  0142  0265               	subwf	(_Load^(0+256)+37),w
 10943  0143  1803               	skipnc
 10944  0144  299A               	goto	l9857
 10945                           
 10946                           ;OverLoad_B1.c: 115: Load.Count++;
 10947  0145  3001               	movlw	1
 10948  0146  0020               	movlb	0	; select bank0
 10949  0147  00A9               	movwf	??_Load_Main
 10950  0148  0829               	movf	??_Load_Main,w
 10951  0149  0022               	movlb	2	; select bank2
 10952  014A  07E5               	addwf	(_Load^(0+256)+37),f
 10953                           
 10954                           ;OverLoad_B1.c: 117: Load_RunStatus = getDimmer_Load_Status();
 10955  014B  3199  21B7  3180   	fcall	_getDimmer_Load_Status
 10956  014E  0020               	movlb	0	; select bank0
 10957  014F  00A9               	movwf	??_Load_Main
 10958  0150  0829               	movf	??_Load_Main,w
 10959  0151  00AF               	movwf	Load_Main@Load_RunStatus
 10960                           
 10961                           ;OverLoad_B1.c: 122: LightsCount = getMain_Lights_Count();
 10962  0152  319A  22FE  3180   	fcall	_getMain_Lights_Count
 10963  0155  0020               	movlb	0	; select bank0
 10964  0156  00A9               	movwf	??_Load_Main
 10965  0157  0829               	movf	??_Load_Main,w
 10966  0158  00B0               	movwf	Load_Main@LightsCount
 10967                           
 10968                           ;OverLoad_B1.c: 124: if (Load.Count == 1) {
 10969  0159  0022               	movlb	2	; select bank2
 10970  015A  0865               	movf	(_Load^(0+256)+37),w
 10971  015B  3A01               	xorlw	1
 10972  015C  1D03               	skipz
 10973  015D  2962               	goto	l9843
 10974                           
 10975                           ;OverLoad_B1.c: 126: Load.JudgeValue = (20*50);
 10976  015E  30E8               	movlw	232
 10977  015F  00E3               	movwf	(_Load^(0+256)+35)
 10978  0160  3003               	movlw	3
 10979  0161  296F               	goto	L7
 10980  0162                     l9843:	
 10981                           ;OverLoad_B1.c: 127: } else if (Load.Count == 2) {
 10982                           
 10983  0162  0865               	movf	(_Load^(0+256)+37),w
 10984  0163  3A02               	xorlw	2
 10985  0164  1D03               	skipz
 10986  0165  299A               	goto	l9857
 10987                           
 10988                           ;OverLoad_B1.c: 128: if (LightsCount == 1) {
 10989  0166  0020               	movlb	0	; select bank0
 10990  0167  0830               	movf	Load_Main@LightsCount,w
 10991  0168  3A01               	xorlw	1
 10992  0169  1D03               	skipz
 10993  016A  2971               	goto	l9849
 10994                           
 10995                           ;OverLoad_B1.c: 129: Load.JudgeValue = (int)(1.1*50);
 10996  016B  3037               	movlw	55
 10997  016C  0022               	movlb	2	; select bank2
 10998  016D  00E3               	movwf	(_Load^(0+256)+35)
 10999  016E  3000               	movlw	0
 11000  016F                     L7:	
 11001  016F  00E4               	movwf	(_Load^(0+256)+36)
 11002                           
 11003                           ;OverLoad_B1.c: 130: } else {
 11004  0170  299A               	goto	l9857
 11005  0171                     l9849:	
 11006                           
 11007                           ;OverLoad_B1.c: 131: if (Load_RunStatus == 0) {
 11008  0171  0020               	movlb	0	; select bank0
 11009  0172  08AF               	movf	Load_Main@Load_RunStatus,f
 11010  0173  1D03               	skipz
 11011  0174  298E               	goto	l9853
 11012                           
 11013                           ;OverLoad_B1.c: 132: Load.JudgeValue = (int)(1.1*50) * LightsCount;
 11014  0175  0830               	movf	Load_Main@LightsCount,w
 11015  0176  00A9               	movwf	??_Load_Main
 11016  0177  01AA               	clrf	??_Load_Main+1
 11017  0178  0829               	movf	??_Load_Main,w
 11018  0179  00A1               	movwf	___wmul@multiplier
 11019  017A  082A               	movf	??_Load_Main+1,w
 11020  017B  00A2               	movwf	___wmul@multiplier+1
 11021  017C  3037               	movlw	55
 11022  017D  00A3               	movwf	___wmul@multiplicand
 11023  017E  3000               	movlw	0
 11024  017F  00A4               	movwf	___wmul@multiplicand+1
 11025  0180  319D  255F  3180   	fcall	___wmul
 11026  0183  0020               	movlb	0	; select bank0
 11027  0184  0822               	movf	?___wmul+1,w
 11028  0185  0022               	movlb	2	; select bank2
 11029  0186  01E4               	clrf	((_Load+1)^(0+256)+35)
 11030  0187  07E4               	addwf	((_Load+1)^(0+256)+35),f
 11031  0188  0020               	movlb	0	; select bank0
 11032  0189  0821               	movf	?___wmul,w
 11033  018A  0022               	movlb	2	; select bank2
 11034  018B  01E3               	clrf	(_Load^(0+256)+35)
 11035  018C  07E3               	addwf	(_Load^(0+256)+35),f
 11036                           
 11037                           ;OverLoad_B1.c: 133: } else if (Load_RunStatus == 1) {
 11038  018D  299A               	goto	l9857
 11039  018E                     l9853:	
 11040  018E  0020               	movlb	0	; select bank0
 11041  018F  082F               	movf	Load_Main@Load_RunStatus,w
 11042  0190  3A01               	xorlw	1
 11043  0191  1D03               	skipz
 11044  0192  299A               	goto	l9857
 11045                           
 11046                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(1.1*50) + Load.TotalLoad;
 11047  0193  0022               	movlb	2	; select bank2
 11048  0194  0849               	movf	(_Load^(0+256)+9),w
 11049  0195  3E37               	addlw	55
 11050  0196  00E3               	movwf	(_Load^(0+256)+35)
 11051  0197  3000               	movlw	0
 11052  0198  3D4A               	addwfc	((_Load+1)^(0+256)+9),w
 11053  0199  00E4               	movwf	((_Load+1)^(0+256)+35)
 11054  019A                     l9857:	
 11055                           
 11056                           ;OverLoad_B1.c: 135: }
 11057                           ;OverLoad_B1.c: 136: }
 11058                           ;OverLoad_B1.c: 137: }
 11059                           ;OverLoad_B1.c: 138: }
 11060                           ;OverLoad_B1.c: 139: }
 11061                           ;OverLoad_B1.c: 141: if (Load.AD >= Load.JudgeValue) {
 11062  019A  0022               	movlb	2	; select bank2
 11063  019B  0864               	movf	((_Load+1)^(0+256)+35),w
 11064  019C  0260               	subwf	((_Load+1)^(0+256)+31),w
 11065  019D  1D03               	skipz
 11066  019E  29A1               	goto	u11435
 11067  019F  0863               	movf	(_Load^(0+256)+35),w
 11068  01A0  025F               	subwf	(_Load^(0+256)+31),w
 11069  01A1                     u11435:	
 11070  01A1  1C03               	skipc
 11071  01A2  29C0               	goto	l9873
 11072                           
 11073                           ;OverLoad_B1.c: 142: ErrorCountValue = LightsCount == 1 ? 2 : 3;
 11074  01A3  0020               	movlb	0	; select bank0
 11075  01A4  0830               	movf	Load_Main@LightsCount,w
 11076  01A5  3A01               	xorlw	1
 11077  01A6  1903               	skipnz
 11078  01A7  29AA               	goto	l9863
 11079  01A8  3003               	movlw	3
 11080  01A9  29AB               	goto	L8
 11081  01AA                     l9863:	
 11082  01AA  3002               	movlw	2
 11083  01AB                     L8:	
 11084  01AB  00AC               	movwf	_Load_Main$3627
 11085  01AC  3000               	movlw	0
 11086  01AD  00AD               	movwf	_Load_Main$3627+1
 11087  01AE  082C               	movf	_Load_Main$3627,w
 11088  01AF  00A9               	movwf	??_Load_Main
 11089  01B0  0829               	movf	??_Load_Main,w
 11090  01B1  00AE               	movwf	Load_Main@ErrorCountValue
 11091                           
 11092                           ;OverLoad_B1.c: 143: Load.ErrorCount++;
 11093  01B2  3001               	movlw	1
 11094  01B3  00A9               	movwf	??_Load_Main
 11095  01B4  0829               	movf	??_Load_Main,w
 11096  01B5  0022               	movlb	2	; select bank2
 11097  01B6  07E6               	addwf	(_Load^(0+256)+38),f
 11098                           
 11099                           ;OverLoad_B1.c: 144: if (Load.ErrorCount > ErrorCountValue) {
 11100  01B7  0866               	movf	(_Load^(0+256)+38),w
 11101  01B8  0020               	movlb	0	; select bank0
 11102  01B9  022E               	subwf	Load_Main@ErrorCountValue,w
 11103  01BA  1803               	skipnc
 11104  01BB  0008               	return
 11105                           
 11106                           ;OverLoad_B1.c: 145: Load.ErrorCount = 0;
 11107  01BC  0022               	movlb	2	; select bank2
 11108  01BD  01E6               	clrf	(_Load^(0+256)+38)
 11109                           
 11110                           ;OverLoad_B1.c: 146: Load.ERROR = 1;
 11111  01BE  16C0               	bsf	_Load^(0+256),5
 11112                           
 11113                           ;OverLoad_B1.c: 168: }
 11114                           ;OverLoad_B1.c: 169: } else {
 11115  01BF  0008               	return
 11116  01C0                     l9873:	
 11117                           
 11118                           ;OverLoad_B1.c: 170: Load.ErrorCount = 0;
 11119  01C0  01E6               	clrf	(_Load^(0+256)+38)
 11120                           
 11121                           ;OverLoad_B1.c: 171: if (Load.Run == 1) {
 11122  01C1  1DC0               	btfss	_Load^(0+256),3
 11123  01C2  0008               	return
 11124                           
 11125                           ;OverLoad_B1.c: 172: Load.SafeCount++;
 11126  01C3  3001               	movlw	1
 11127  01C4  0020               	movlb	0	; select bank0
 11128  01C5  00A9               	movwf	??_Load_Main
 11129  01C6  0829               	movf	??_Load_Main,w
 11130  01C7  0022               	movlb	2	; select bank2
 11131  01C8  07E7               	addwf	(_Load^(0+256)+39),f
 11132                           
 11133                           ;OverLoad_B1.c: 173: if (Load.SafeCount >= 3) {
 11134  01C9  3003               	movlw	3
 11135  01CA  0267               	subwf	(_Load^(0+256)+39),w
 11136  01CB  1C03               	skipc
 11137  01CC  0008               	return
 11138                           
 11139                           ;OverLoad_B1.c: 174: Load.SafeCount = 0;
 11140  01CD  01E7               	clrf	(_Load^(0+256)+39)
 11141                           
 11142                           ;OverLoad_B1.c: 175: Load.OK = 1;
 11143  01CE  17C0               	bsf	_Load^(0+256),7
 11144                           
 11145                           ;OverLoad_B1.c: 176: Load.Run = 0;
 11146  01CF  11C0               	bcf	_Load^(0+256),3
 11147                           
 11148                           ;OverLoad_B1.c: 177: Load.Count = 0;
 11149  01D0  01E5               	clrf	(_Load^(0+256)+37)
 11150                           
 11151                           ;OverLoad_B1.c: 178: Load.TotalLoad = Load.AD;
 11152  01D1  0860               	movf	((_Load+1)^(0+256)+31),w
 11153  01D2  01CA               	clrf	((_Load+1)^(0+256)+9)
 11154  01D3  07CA               	addwf	((_Load+1)^(0+256)+9),f
 11155  01D4  085F               	movf	(_Load^(0+256)+31),w
 11156  01D5  01C9               	clrf	(_Load^(0+256)+9)
 11157  01D6  07C9               	addwf	(_Load^(0+256)+9),f
 11158                           
 11159                           ;OverLoad_B1.c: 182: }
 11160                           ;OverLoad_B1.c: 183: }
 11161                           ;OverLoad_B1.c: 206: }
 11162                           ;OverLoad_B1.c: 207: }
 11163                           ;OverLoad_B1.c: 208: }
 11164                           ;OverLoad_B1.c: 209: } else {
 11165  01D7  0008               	return
 11166  01D8                     l1595:	
 11167                           
 11168                           ;OverLoad_B1.c: 210: Load.ADtoGO = 1;
 11169  01D8  1640               	bsf	_Load^(0+256),4
 11170                           
 11171                           ;OverLoad_B1.c: 211: }
 11172                           ;OverLoad_B1.c: 212: } else {
 11173  01D9  0008               	return
 11174  01DA                     l1594:	
 11175                           
 11176                           ;OverLoad_B1.c: 214: if (Load.LightsON == 1) {
 11177  01DA  1D40               	btfss	_Load^(0+256),2
 11178  01DB  29ED               	goto	l9909
 11179                           
 11180                           ;OverLoad_B1.c: 215: Load.LightsON = 0;
 11181  01DC  1140               	bcf	_Load^(0+256),2
 11182                           
 11183                           ;OverLoad_B1.c: 217: Load.ADtoGO = 0;
 11184  01DD  1240               	bcf	_Load^(0+256),4
 11185                           
 11186                           ;OverLoad_B1.c: 218: Load.Time = 0;
 11187  01DE  01C1               	clrf	(_Load^(0+256)+1)
 11188  01DF  01C2               	clrf	((_Load+1)^(0+256)+1)
 11189                           
 11190                           ;OverLoad_B1.c: 219: setLoad_AH_AL_Restore();
 11191  01E0  319D  2509  3180   	fcall	_setLoad_AH_AL_Restore
 11192                           
 11193                           ;OverLoad_B1.c: 221: Load.ErrorCount = 0;
 11194  01E3  0022               	movlb	2	; select bank2
 11195  01E4  01E6               	clrf	(_Load^(0+256)+38)
 11196                           
 11197                           ;OverLoad_B1.c: 222: Load.SafeCount = 0;
 11198  01E5  01E7               	clrf	(_Load^(0+256)+39)
 11199                           
 11200                           ;OverLoad_B1.c: 224: Load.ADH = 0;
 11201  01E6  01C5               	clrf	(_Load^(0+256)+5)
 11202  01E7  01C6               	clrf	((_Load+1)^(0+256)+5)
 11203                           
 11204                           ;OverLoad_B1.c: 225: Load.ADL = 0;
 11205  01E8  01C7               	clrf	(_Load^(0+256)+7)
 11206  01E9  01C8               	clrf	((_Load+1)^(0+256)+7)
 11207                           
 11208                           ;OverLoad_B1.c: 231: Load.Run = 0;
 11209  01EA  11C0               	bcf	_Load^(0+256),3
 11210                           
 11211                           ;OverLoad_B1.c: 232: Load.Count = 0;
 11212  01EB  01E5               	clrf	(_Load^(0+256)+37)
 11213                           
 11214                           ;OverLoad_B1.c: 233: Load.OK = 0;
 11215  01EC  13C0               	bcf	_Load^(0+256),7
 11216  01ED                     l9909:	
 11217                           
 11218                           ;OverLoad_B1.c: 255: }
 11219                           ;OverLoad_B1.c: 256: if (Load.ERROR == 1) {
 11220  01ED  1EC0               	btfss	_Load^(0+256),5
 11221  01EE  0008               	return
 11222                           
 11223                           ;OverLoad_B1.c: 257: Load.ErrorTime++;
 11224  01EF  3001               	movlw	1
 11225  01F0  07C3               	addwf	(_Load^(0+256)+3),f
 11226  01F1  3000               	movlw	0
 11227  01F2  3DC4               	addwfc	((_Load+1)^(0+256)+3),f
 11228                           
 11229                           ;OverLoad_B1.c: 258: if (Load.ErrorTime >= (10000 / 20)) {
 11230  01F3  3001               	movlw	1
 11231  01F4  0244               	subwf	((_Load+1)^(0+256)+3),w
 11232  01F5  30F4               	movlw	244
 11233  01F6  1903               	skipnz
 11234  01F7  0243               	subwf	(_Load^(0+256)+3),w
 11235  01F8  1C03               	skipc
 11236  01F9  0008               	return
 11237                           
 11238                           ;OverLoad_B1.c: 259: Load.ErrorTime = 0;
 11239  01FA  01C3               	clrf	(_Load^(0+256)+3)
 11240  01FB  01C4               	clrf	((_Load+1)^(0+256)+3)
 11241                           
 11242                           ;OverLoad_B1.c: 260: Load.ERROR = 0;
 11243  01FC  12C0               	bcf	_Load^(0+256),5
 11244                           
 11245                           ;OverLoad_B1.c: 261: }
 11246                           ;OverLoad_B1.c: 262: }
 11247                           ;OverLoad_B1.c: 263: }
 11248                           ;OverLoad_B1.c: 264: } else {
 11249  01FD  0008               	return
 11250  01FE                     l1584:	
 11251                           
 11252                           ;OverLoad_B1.c: 265: if (myMain.PowerON == 1) {
 11253  01FE  1C20               	btfss	_myMain^(0+256),0
 11254  01FF  0008               	return
 11255                           
 11256                           ;OverLoad_B1.c: 266: Load.Enable = 1;
 11257  0200  1440               	bsf	_Load^(0+256),0
 11258  0201  0008               	return
 11259  0202                     __end_of_Load_Main:	
 11260                           
 11261                           	psect	text64
 11262  1AFE                     __ptext64:	
 11263 ;; *************** function _getMain_Lights_Count *****************
 11264 ;; Defined at:
 11265 ;;		line 459 in file "../src/main_B1.c"
 11266 ;; Parameters:    Size  Location     Type
 11267 ;;		None
 11268 ;; Auto vars:     Size  Location     Type
 11269 ;;  status2         1    3[BANK0 ] unsigned char 
 11270 ;;  status1         1    2[BANK0 ] unsigned char 
 11271 ;;  count           1    1[BANK0 ] unsigned char 
 11272 ;; Return value:  Size  Location     Type
 11273 ;;                  1    wreg      unsigned char 
 11274 ;; Registers used:
 11275 ;;		wreg, status,2, status,0
 11276 ;; Tracked objects:
 11277 ;;		On entry : 0/0
 11278 ;;		On exit  : 0/0
 11279 ;;		Unchanged: 0/0
 11280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11282 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11284 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11285 ;;Total ram usage:        3 bytes
 11286 ;; Hardware stack levels used:    1
 11287 ;; Hardware stack levels required when called:    5
 11288 ;; This function calls:
 11289 ;;		Nothing
 11290 ;; This function is called by:
 11291 ;;		_Load_Main
 11292 ;; This function uses a non-reentrant model
 11293 ;;
 11294                           
 11295                           
 11296                           ;psect for function _getMain_Lights_Count
 11297  1AFE                     _getMain_Lights_Count:	
 11298                           
 11299                           ;main_B1.c: 460: char count = 0;
 11300                           
 11301                           ;incstack = 0
 11302                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 11303  1AFE  0020               	movlb	0	; select bank0
 11304  1AFF  01A1               	clrf	getMain_Lights_Count@count
 11305                           
 11306                           ;main_B1.c: 464: char status1 = DimmerIntr1.ControlStatus == 1 ? 1 : 0;
 11307  1B00  3000               	movlw	0
 11308  1B01  0021               	movlb	1	; select bank1
 11309  1B02  19AE               	btfsc	_DimmerIntr1^(0+128),3
 11310  1B03  3001               	movlw	1
 11311  1B04  0020               	movlb	0	; select bank0
 11312  1B05  00A2               	movwf	getMain_Lights_Count@status1
 11313                           
 11314                           ;main_B1.c: 467: char status2 = DimmerIntr2.ControlStatus == 1 ? 1 : 0;
 11315  1B06  3000               	movlw	0
 11316  1B07  0021               	movlb	1	; select bank1
 11317  1B08  19BA               	btfsc	_DimmerIntr2^(0+128),3
 11318  1B09  3001               	movlw	1
 11319  1B0A  0020               	movlb	0	; select bank0
 11320  1B0B  00A3               	movwf	getMain_Lights_Count@status2
 11321                           
 11322                           ;main_B1.c: 490: return count = (status1 + status2);
 11323  1B0C  0822               	movf	getMain_Lights_Count@status1,w
 11324  1B0D  0723               	addwf	getMain_Lights_Count@status2,w
 11325  1B0E  00A1               	movwf	getMain_Lights_Count@count
 11326  1B0F  0008               	return
 11327  1B10                     __end_of_getMain_Lights_Count:	
 11328                           
 11329                           	psect	text65
 11330  19B7                     __ptext65:	
 11331 ;; *************** function _getDimmer_Load_Status *****************
 11332 ;; Defined at:
 11333 ;;		line 1084 in file "../src/Dimmer_B1.c"
 11334 ;; Parameters:    Size  Location     Type
 11335 ;;		None
 11336 ;; Auto vars:     Size  Location     Type
 11337 ;;  status          1    1[BANK0 ] unsigned char 
 11338 ;; Return value:  Size  Location     Type
 11339 ;;                  1    wreg      unsigned char 
 11340 ;; Registers used:
 11341 ;;		wreg, status,2
 11342 ;; Tracked objects:
 11343 ;;		On entry : 0/0
 11344 ;;		On exit  : 0/0
 11345 ;;		Unchanged: 0/0
 11346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11348 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11350 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11351 ;;Total ram usage:        1 bytes
 11352 ;; Hardware stack levels used:    1
 11353 ;; Hardware stack levels required when called:    5
 11354 ;; This function calls:
 11355 ;;		Nothing
 11356 ;; This function is called by:
 11357 ;;		_Load_Main
 11358 ;; This function uses a non-reentrant model
 11359 ;;
 11360                           
 11361                           
 11362                           ;psect for function _getDimmer_Load_Status
 11363  19B7                     _getDimmer_Load_Status:	
 11364                           
 11365                           ;Dimmer_B1.c: 1085: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11366                           
 11367                           ;incstack = 0
 11368                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11369  19B7  3000               	movlw	0
 11370  19B8  0022               	movlb	2	; select bank2
 11371  19B9  1939               	btfsc	_Dimmer^(0+256),2
 11372  19BA  3001               	movlw	1
 11373  19BB  0020               	movlb	0	; select bank0
 11374  19BC  00A1               	movwf	getDimmer_Load_Status@status
 11375                           
 11376                           ;Dimmer_B1.c: 1086: return status;
 11377  19BD  0821               	movf	getDimmer_Load_Status@status,w
 11378  19BE  0008               	return
 11379  19BF                     __end_of_getDimmer_Load_Status:	
 11380                           
 11381                           	psect	text66
 11382  19AF                     __ptext66:	
 11383 ;; *************** function _getDimmer_LoadGO *****************
 11384 ;; Defined at:
 11385 ;;		line 1078 in file "../src/Dimmer_B1.c"
 11386 ;; Parameters:    Size  Location     Type
 11387 ;;		None
 11388 ;; Auto vars:     Size  Location     Type
 11389 ;;  loadgo          1    1[BANK0 ] unsigned char 
 11390 ;; Return value:  Size  Location     Type
 11391 ;;                  1    wreg      unsigned char 
 11392 ;; Registers used:
 11393 ;;		wreg, status,2
 11394 ;; Tracked objects:
 11395 ;;		On entry : 0/0
 11396 ;;		On exit  : 0/0
 11397 ;;		Unchanged: 0/0
 11398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11400 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11402 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11403 ;;Total ram usage:        1 bytes
 11404 ;; Hardware stack levels used:    1
 11405 ;; Hardware stack levels required when called:    5
 11406 ;; This function calls:
 11407 ;;		Nothing
 11408 ;; This function is called by:
 11409 ;;		_Load_Main
 11410 ;; This function uses a non-reentrant model
 11411 ;;
 11412                           
 11413                           
 11414                           ;psect for function _getDimmer_LoadGO
 11415  19AF                     _getDimmer_LoadGO:	
 11416                           
 11417                           ;Dimmer_B1.c: 1079: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11418                           
 11419                           ;incstack = 0
 11420                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11421  19AF  3000               	movlw	0
 11422  19B0  0022               	movlb	2	; select bank2
 11423  19B1  18B9               	btfsc	_Dimmer^(0+256),1
 11424  19B2  3001               	movlw	1
 11425  19B3  0020               	movlb	0	; select bank0
 11426  19B4  00A1               	movwf	getDimmer_LoadGO@loadgo
 11427                           
 11428                           ;Dimmer_B1.c: 1080: return loadgo;
 11429  19B5  0821               	movf	getDimmer_LoadGO@loadgo,w
 11430  19B6  0008               	return
 11431  19B7                     __end_of_getDimmer_LoadGO:	
 11432                           
 11433                           	psect	text67
 11434  1E5D                     __ptext67:	
 11435 ;; *************** function _getAll_DimmerIntr_Dimming_Sw_RF *****************
 11436 ;; Defined at:
 11437 ;;		line 242 in file "../src/Dimmer_B1.c"
 11438 ;; Parameters:    Size  Location     Type
 11439 ;;		None
 11440 ;; Auto vars:     Size  Location     Type
 11441 ;;  status          1    4[BANK0 ] unsigned char 
 11442 ;; Return value:  Size  Location     Type
 11443 ;;                  1    wreg      unsigned char 
 11444 ;; Registers used:
 11445 ;;		wreg, status,2, status,0
 11446 ;; Tracked objects:
 11447 ;;		On entry : 0/0
 11448 ;;		On exit  : 0/0
 11449 ;;		Unchanged: 0/0
 11450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11452 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11453 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11454 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11455 ;;Total ram usage:        4 bytes
 11456 ;; Hardware stack levels used:    1
 11457 ;; Hardware stack levels required when called:    5
 11458 ;; This function calls:
 11459 ;;		Nothing
 11460 ;; This function is called by:
 11461 ;;		_Load_Main
 11462 ;; This function uses a non-reentrant model
 11463 ;;
 11464                           
 11465                           
 11466                           ;psect for function _getAll_DimmerIntr_Dimming_Sw_RF
 11467  1E5D                     _getAll_DimmerIntr_Dimming_Sw_RF:	
 11468                           
 11469                           ;Dimmer_B1.c: 243: char status = 0;
 11470                           
 11471                           ;incstack = 0
 11472                           ; Regs used in _getAll_DimmerIntr_Dimming_Sw_RF: [wreg+status,2+status,0]
 11473  1E5D  0020               	movlb	0	; select bank0
 11474  1E5E  01A4               	clrf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11475                           
 11476                           ;Dimmer_B1.c: 250: status = (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr2.Dimming_Sw == 1)
      +                           ? 1 : 0;
 11477  1E5F  01A2               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2260
 11478  1E60  0AA2               	incf	_getAll_DimmerIntr_Dimming_Sw_RF$2260,f
 11479  1E61  0021               	movlb	1	; select bank1
 11480  1E62  1E2E               	btfss	_DimmerIntr1^(0+128),4
 11481  1E63  1A3A               	btfsc	_DimmerIntr2^(0+128),4
 11482  1E64  2E67               	goto	l7735
 11483  1E65  0020               	movlb	0	; select bank0
 11484  1E66  01A2               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2260
 11485  1E67                     l7735:	
 11486  1E67  0020               	movlb	0	; select bank0
 11487  1E68  0822               	movf	_getAll_DimmerIntr_Dimming_Sw_RF$2260,w
 11488  1E69  00A1               	movwf	??_getAll_DimmerIntr_Dimming_Sw_RF
 11489  1E6A  0821               	movf	??_getAll_DimmerIntr_Dimming_Sw_RF,w
 11490  1E6B  00A4               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11491                           
 11492                           ;Dimmer_B1.c: 258: if (status == 0) {
 11493  1E6C  08A4               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,f
 11494  1E6D  1D03               	skipz
 11495  1E6E  2E7C               	goto	l7747
 11496                           
 11497                           ;Dimmer_B1.c: 264: status = (DimmerIntr1.Dimming_RF == 1 || DimmerIntr2.Dimming_RF == 1)
      +                           ? 1 : 0;
 11498  1E6F  01A3               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2261
 11499  1E70  0AA3               	incf	_getAll_DimmerIntr_Dimming_Sw_RF$2261,f
 11500  1E71  0021               	movlb	1	; select bank1
 11501  1E72  1F2E               	btfss	_DimmerIntr1^(0+128),6
 11502  1E73  1B3A               	btfsc	_DimmerIntr2^(0+128),6
 11503  1E74  2E77               	goto	l7745
 11504  1E75  0020               	movlb	0	; select bank0
 11505  1E76  01A3               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2261
 11506  1E77                     l7745:	
 11507  1E77  0020               	movlb	0	; select bank0
 11508  1E78  0823               	movf	_getAll_DimmerIntr_Dimming_Sw_RF$2261,w
 11509  1E79  00A1               	movwf	??_getAll_DimmerIntr_Dimming_Sw_RF
 11510  1E7A  0821               	movf	??_getAll_DimmerIntr_Dimming_Sw_RF,w
 11511  1E7B  00A4               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11512  1E7C                     l7747:	
 11513                           
 11514                           ;Dimmer_B1.c: 270: }
 11515                           ;Dimmer_B1.c: 272: return status;
 11516  1E7C  0824               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,w
 11517  1E7D  0008               	return
 11518  1E7E                     __end_of_getAll_DimmerIntr_Dimming_Sw_RF:	
 11519                           
 11520                           	psect	text68
 11521  1D5F                     __ptext68:	
 11522 ;; *************** function ___wmul *****************
 11523 ;; Defined at:
 11524 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11525 ;; Parameters:    Size  Location     Type
 11526 ;;  multiplier      2    1[BANK0 ] unsigned int 
 11527 ;;  multiplicand    2    3[BANK0 ] unsigned int 
 11528 ;; Auto vars:     Size  Location     Type
 11529 ;;  product         2    5[BANK0 ] unsigned int 
 11530 ;; Return value:  Size  Location     Type
 11531 ;;                  2    1[BANK0 ] unsigned int 
 11532 ;; Registers used:
 11533 ;;		wreg, status,2, status,0
 11534 ;; Tracked objects:
 11535 ;;		On entry : 0/0
 11536 ;;		On exit  : 0/0
 11537 ;;		Unchanged: 0/0
 11538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11539 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11540 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11542 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11543 ;;Total ram usage:        6 bytes
 11544 ;; Hardware stack levels used:    1
 11545 ;; Hardware stack levels required when called:    5
 11546 ;; This function calls:
 11547 ;;		Nothing
 11548 ;; This function is called by:
 11549 ;;		_Load_Main
 11550 ;; This function uses a non-reentrant model
 11551 ;;
 11552                           
 11553                           
 11554                           ;psect for function ___wmul
 11555  1D5F                     ___wmul:	
 11556                           
 11557                           ;incstack = 0
 11558                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11559  1D5F  0020               	movlb	0	; select bank0
 11560  1D60  01A5               	clrf	___wmul@product
 11561  1D61  01A6               	clrf	___wmul@product+1
 11562  1D62                     l8361:	
 11563  1D62  1C21               	btfss	___wmul@multiplier,0
 11564  1D63  2D68               	goto	l2992
 11565  1D64  0823               	movf	___wmul@multiplicand,w
 11566  1D65  07A5               	addwf	___wmul@product,f
 11567  1D66  0824               	movf	___wmul@multiplicand+1,w
 11568  1D67  3DA6               	addwfc	___wmul@product+1,f
 11569  1D68                     l2992:	
 11570  1D68  3001               	movlw	1
 11571  1D69                     u8745:	
 11572  1D69  35A3               	lslf	___wmul@multiplicand,f
 11573  1D6A  0DA4               	rlf	___wmul@multiplicand+1,f
 11574  1D6B  0B89               	decfsz	9,f
 11575  1D6C  2D69               	goto	u8745
 11576  1D6D  3001               	movlw	1
 11577  1D6E                     u8755:	
 11578  1D6E  36A2               	lsrf	___wmul@multiplier+1,f
 11579  1D6F  0CA1               	rrf	___wmul@multiplier,f
 11580  1D70  0B89               	decfsz	9,f
 11581  1D71  2D6E               	goto	u8755
 11582  1D72  0822               	movf	___wmul@multiplier+1,w
 11583  1D73  0421               	iorwf	___wmul@multiplier,w
 11584  1D74  1D03               	skipz
 11585  1D75  2D62               	goto	l8361
 11586  1D76  0826               	movf	___wmul@product+1,w
 11587  1D77  01A2               	clrf	?___wmul+1
 11588  1D78  07A2               	addwf	?___wmul+1,f
 11589  1D79  0825               	movf	___wmul@product,w
 11590  1D7A  01A1               	clrf	?___wmul
 11591  1D7B  07A1               	addwf	?___wmul,f
 11592  1D7C  0008               	return
 11593  1D7D                     __end_of___wmul:	
 11594                           
 11595                           	psect	text69
 11596  1171                     __ptext69:	
 11597 ;; *************** function ___lwdiv *****************
 11598 ;; Defined at:
 11599 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11600 ;; Parameters:    Size  Location     Type
 11601 ;;  divisor         2    1[BANK0 ] unsigned int 
 11602 ;;  dividend        2    3[BANK0 ] unsigned int 
 11603 ;; Auto vars:     Size  Location     Type
 11604 ;;  quotient        2    6[BANK0 ] unsigned int 
 11605 ;;  counter         1    8[BANK0 ] unsigned char 
 11606 ;; Return value:  Size  Location     Type
 11607 ;;                  2    1[BANK0 ] unsigned int 
 11608 ;; Registers used:
 11609 ;;		wreg, status,2, status,0
 11610 ;; Tracked objects:
 11611 ;;		On entry : 0/0
 11612 ;;		On exit  : 0/0
 11613 ;;		Unchanged: 0/0
 11614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11615 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11616 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11617 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11618 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11619 ;;Total ram usage:        8 bytes
 11620 ;; Hardware stack levels used:    1
 11621 ;; Hardware stack levels required when called:    5
 11622 ;; This function calls:
 11623 ;;		Nothing
 11624 ;; This function is called by:
 11625 ;;		_Load_Main
 11626 ;;		_setRF_Main
 11627 ;; This function uses a non-reentrant model
 11628 ;;
 11629                           
 11630                           
 11631                           ;psect for function ___lwdiv
 11632  1171                     ___lwdiv:	
 11633                           
 11634                           ;incstack = 0
 11635                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11636  1171  0020               	movlb	0	; select bank0
 11637  1172  01A6               	clrf	___lwdiv@quotient
 11638  1173  01A7               	clrf	___lwdiv@quotient+1
 11639  1174  0822               	movf	___lwdiv@divisor+1,w
 11640  1175  0421               	iorwf	___lwdiv@divisor,w
 11641  1176  1903               	skipnz
 11642  1177  29A1               	goto	l7695
 11643  1178  01A8               	clrf	___lwdiv@counter
 11644  1179  0AA8               	incf	___lwdiv@counter,f
 11645  117A                     l7683:	
 11646  117A  1BA2               	btfsc	___lwdiv@divisor+1,7
 11647  117B  2986               	goto	l7685
 11648  117C  3001               	movlw	1
 11649  117D                     u7455:	
 11650  117D  35A1               	lslf	___lwdiv@divisor,f
 11651  117E  0DA2               	rlf	___lwdiv@divisor+1,f
 11652  117F  0B89               	decfsz	9,f
 11653  1180  297D               	goto	u7455
 11654  1181  3001               	movlw	1
 11655  1182  00A5               	movwf	??___lwdiv
 11656  1183  0825               	movf	??___lwdiv,w
 11657  1184  07A8               	addwf	___lwdiv@counter,f
 11658  1185  297A               	goto	l7683
 11659  1186                     l7685:	
 11660  1186  3001               	movlw	1
 11661  1187                     u7475:	
 11662  1187  35A6               	lslf	___lwdiv@quotient,f
 11663  1188  0DA7               	rlf	___lwdiv@quotient+1,f
 11664  1189  0B89               	decfsz	9,f
 11665  118A  2987               	goto	u7475
 11666  118B  0822               	movf	___lwdiv@divisor+1,w
 11667  118C  0224               	subwf	___lwdiv@dividend+1,w
 11668  118D  1D03               	skipz
 11669  118E  2991               	goto	u7485
 11670  118F  0821               	movf	___lwdiv@divisor,w
 11671  1190  0223               	subwf	___lwdiv@dividend,w
 11672  1191                     u7485:	
 11673  1191  1C03               	skipc
 11674  1192  2998               	goto	l7691
 11675  1193  0821               	movf	___lwdiv@divisor,w
 11676  1194  02A3               	subwf	___lwdiv@dividend,f
 11677  1195  0822               	movf	___lwdiv@divisor+1,w
 11678  1196  3BA4               	subwfb	___lwdiv@dividend+1,f
 11679  1197  1426               	bsf	___lwdiv@quotient,0
 11680  1198                     l7691:	
 11681  1198  3001               	movlw	1
 11682  1199                     u7495:	
 11683  1199  36A2               	lsrf	___lwdiv@divisor+1,f
 11684  119A  0CA1               	rrf	___lwdiv@divisor,f
 11685  119B  0B89               	decfsz	9,f
 11686  119C  2999               	goto	u7495
 11687  119D  3001               	movlw	1
 11688  119E  02A8               	subwf	___lwdiv@counter,f
 11689  119F  1D03               	btfss	3,2
 11690  11A0  2986               	goto	l7685
 11691  11A1                     l7695:	
 11692  11A1  0827               	movf	___lwdiv@quotient+1,w
 11693  11A2  01A2               	clrf	?___lwdiv+1
 11694  11A3  07A2               	addwf	?___lwdiv+1,f
 11695  11A4  0826               	movf	___lwdiv@quotient,w
 11696  11A5  01A1               	clrf	?___lwdiv
 11697  11A6  07A1               	addwf	?___lwdiv,f
 11698  11A7  0008               	return
 11699  11A8                     __end_of___lwdiv:	
 11700                           
 11701                           	psect	text70
 11702  1956                     __ptext70:	
 11703 ;; *************** function _Load_Initialization *****************
 11704 ;; Defined at:
 11705 ;;		line 9 in file "../src/OverLoad_B1.c"
 11706 ;; Parameters:    Size  Location     Type
 11707 ;;		None
 11708 ;; Auto vars:     Size  Location     Type
 11709 ;;		None
 11710 ;; Return value:  Size  Location     Type
 11711 ;;		None               void
 11712 ;; Registers used:
 11713 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11714 ;; Tracked objects:
 11715 ;;		On entry : 0/0
 11716 ;;		On exit  : 0/0
 11717 ;;		Unchanged: 0/0
 11718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11719 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11720 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11721 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11722 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11723 ;;Total ram usage:        0 bytes
 11724 ;; Hardware stack levels used:    1
 11725 ;; Hardware stack levels required when called:    6
 11726 ;; This function calls:
 11727 ;;		_setLoad_AH_AL_Restore
 11728 ;; This function is called by:
 11729 ;;		_main
 11730 ;; This function uses a non-reentrant model
 11731 ;;
 11732                           
 11733                           
 11734                           ;psect for function _Load_Initialization
 11735  1956                     _Load_Initialization:	
 11736                           
 11737                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11738                           
 11739                           ;incstack = 0
 11740                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11741  1956  319D  2509         	fcall	_setLoad_AH_AL_Restore
 11742  1958  0008               	return
 11743  1959                     __end_of_Load_Initialization:	
 11744                           
 11745                           	psect	text71
 11746  1D09                     __ptext71:	
 11747 ;; *************** function _setLoad_AH_AL_Restore *****************
 11748 ;; Defined at:
 11749 ;;		line 292 in file "../src/OverLoad_B1.c"
 11750 ;; Parameters:    Size  Location     Type
 11751 ;;		None
 11752 ;; Auto vars:     Size  Location     Type
 11753 ;;  i               1    2[BANK0 ] unsigned char 
 11754 ;; Return value:  Size  Location     Type
 11755 ;;		None               void
 11756 ;; Registers used:
 11757 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11758 ;; Tracked objects:
 11759 ;;		On entry : 0/0
 11760 ;;		On exit  : 0/0
 11761 ;;		Unchanged: 0/0
 11762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11764 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11765 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11766 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11767 ;;Total ram usage:        2 bytes
 11768 ;; Hardware stack levels used:    1
 11769 ;; Hardware stack levels required when called:    5
 11770 ;; This function calls:
 11771 ;;		Nothing
 11772 ;; This function is called by:
 11773 ;;		_Load_Initialization
 11774 ;;		_Load_Main
 11775 ;; This function uses a non-reentrant model
 11776 ;;
 11777                           
 11778                           
 11779                           ;psect for function _setLoad_AH_AL_Restore
 11780  1D09                     _setLoad_AH_AL_Restore:	
 11781                           
 11782                           ;OverLoad_B1.c: 293: char i;
 11783                           ;OverLoad_B1.c: 294: for (i = 0; i < 5; i++) {
 11784                           
 11785                           ;incstack = 0
 11786                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11787  1D09  0020               	movlb	0	; select bank0
 11788  1D0A  01A2               	clrf	setLoad_AH_AL_Restore@i
 11789  1D0B                     L9:	
 11790  1D0B  3005               	movlw	5
 11791  1D0C  0222               	subwf	setLoad_AH_AL_Restore@i,w
 11792  1D0D  1803               	btfsc	3,0
 11793  1D0E  0008               	return
 11794                           
 11795                           ;OverLoad_B1.c: 295: Load.AH[i] = 0;
 11796  1D0F  3522               	lslf	setLoad_AH_AL_Restore@i,w
 11797  1D10  3E4B               	addlw	(_Load+11)& (0+255)
 11798  1D11  0086               	movwf	6
 11799  1D12  3001               	movlw	1	; select bank2/3
 11800  1D13  0087               	movwf	7
 11801  1D14  3000               	movlw	0
 11802  1D15  3FC0               	movwi [0]fsr1
 11803  1D16  3FC1               	movwi [1]fsr1
 11804                           
 11805                           ;OverLoad_B1.c: 296: Load.AL[i] = 0xffff;
 11806  1D17  3522               	lslf	setLoad_AH_AL_Restore@i,w
 11807  1D18  3E55               	addlw	(_Load+21)& (0+255)
 11808  1D19  0086               	movwf	6
 11809  1D1A  3001               	movlw	1	; select bank2/3
 11810  1D1B  0087               	movwf	7
 11811  1D1C  30FF               	movlw	255
 11812  1D1D  3FC0               	movwi [0]fsr1
 11813  1D1E  30FF               	movlw	255
 11814  1D1F  3FC1               	movwi [1]fsr1
 11815  1D20  3001               	movlw	1
 11816  1D21  00A1               	movwf	??_setLoad_AH_AL_Restore
 11817  1D22  0821               	movf	??_setLoad_AH_AL_Restore,w
 11818  1D23  07A2               	addwf	setLoad_AH_AL_Restore@i,f
 11819  1D24  2D0B               	goto	L9
 11820  1D25                     __end_of_setLoad_AH_AL_Restore:	
 11821                           
 11822                           	psect	text72
 11823  1A53                     __ptext72:	
 11824 ;; *************** function _LED_Main *****************
 11825 ;; Defined at:
 11826 ;;		line 47 in file "../src/LED_B1.c"
 11827 ;; Parameters:    Size  Location     Type
 11828 ;;		None
 11829 ;; Auto vars:     Size  Location     Type
 11830 ;;		None
 11831 ;; Return value:  Size  Location     Type
 11832 ;;		None               void
 11833 ;; Registers used:
 11834 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11835 ;; Tracked objects:
 11836 ;;		On entry : 0/0
 11837 ;;		On exit  : 0/0
 11838 ;;		Unchanged: 0/0
 11839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11843 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11844 ;;Total ram usage:        0 bytes
 11845 ;; Hardware stack levels used:    1
 11846 ;; Hardware stack levels required when called:    7
 11847 ;; This function calls:
 11848 ;;		_setLED_Main
 11849 ;; This function is called by:
 11850 ;;		_main
 11851 ;; This function uses a non-reentrant model
 11852 ;;
 11853                           
 11854                           
 11855                           ;psect for function _LED_Main
 11856  1A53                     _LED_Main:	
 11857                           
 11858                           ;LED_B1.c: 58: setLED_Main(1);
 11859                           
 11860                           ;incstack = 0
 11861                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11862  1A53  3001               	movlw	1
 11863  1A54  3192  229C  319A   	fcall	_setLED_Main
 11864                           
 11865                           ;LED_B1.c: 61: setLED_Main(2);
 11866  1A57  3002               	movlw	2
 11867  1A58  3192  229C  319A   	fcall	_setLED_Main
 11868                           
 11869                           ;LED_B1.c: 67: setLED_Main(99);
 11870  1A5B  3063               	movlw	99
 11871  1A5C  3192  229C         	fcall	_setLED_Main
 11872  1A5E  0008               	return
 11873  1A5F                     __end_of_LED_Main:	
 11874                           
 11875                           	psect	text73
 11876  129C                     __ptext73:	
 11877 ;; *************** function _setLED_Main *****************
 11878 ;; Defined at:
 11879 ;;		line 229 in file "../src/LED_B1.c"
 11880 ;; Parameters:    Size  Location     Type
 11881 ;;  led             1    wreg     unsigned char 
 11882 ;; Auto vars:     Size  Location     Type
 11883 ;;  led             1    5[BANK0 ] unsigned char 
 11884 ;; Return value:  Size  Location     Type
 11885 ;;		None               void
 11886 ;; Registers used:
 11887 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11888 ;; Tracked objects:
 11889 ;;		On entry : 0/0
 11890 ;;		On exit  : 0/0
 11891 ;;		Unchanged: 0/0
 11892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11894 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11895 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11896 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11897 ;;Total ram usage:        3 bytes
 11898 ;; Hardware stack levels used:    1
 11899 ;; Hardware stack levels required when called:    6
 11900 ;; This function calls:
 11901 ;;		_LedPointSelect
 11902 ;; This function is called by:
 11903 ;;		_LED_Main
 11904 ;; This function uses a non-reentrant model
 11905 ;;
 11906                           
 11907                           
 11908                           ;psect for function _setLED_Main
 11909  129C                     _setLED_Main:	
 11910                           
 11911                           ;incstack = 0
 11912                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11913                           ;setLED_Main@led stored from wreg
 11914  129C  0020               	movlb	0	; select bank0
 11915  129D  00A5               	movwf	setLED_Main@led
 11916                           
 11917                           ;LED_B1.c: 230: LedPointSelect(led);
 11918  129E  0825               	movf	setLED_Main@led,w
 11919  129F  319D  25BB  3192   	fcall	_LedPointSelect
 11920                           
 11921                           ;LED_B1.c: 231: if (LED->GO == 1) {
 11922  12A2  0021               	movlb	1	; select bank1
 11923  12A3  0850               	movf	_LED^(0+128),w
 11924  12A4  0086               	movwf	6
 11925  12A5  3001               	movlw	1	; select bank2/3
 11926  12A6  0087               	movwf	7
 11927  12A7  1C81               	btfss	1,1
 11928  12A8  0008               	return
 11929                           
 11930                           ;LED_B1.c: 232: LED->Time++;
 11931  12A9  0A50               	incf	_LED^(0+128),w
 11932  12AA  0086               	movwf	6
 11933  12AB  3001               	movlw	1	; select bank2/3
 11934  12AC  0087               	movwf	7
 11935  12AD  3001               	movlw	1
 11936  12AE  0781               	addwf	1,f
 11937  12AF  3141               	addfsr 1,1
 11938  12B0  1803               	skipnc
 11939  12B1  0A81               	incf	1,f
 11940                           
 11941                           ;LED_B1.c: 233: if (LED->Time >= (500 / 20)) {
 11942  12B2  0A50               	incf	_LED^(0+128),w
 11943  12B3  0086               	movwf	6
 11944  12B4  3001               	movlw	1	; select bank2/3
 11945  12B5  0087               	movwf	7
 11946  12B6  3F40               	moviw [0]fsr1
 11947  12B7  0020               	movlb	0	; select bank0
 11948  12B8  00A3               	movwf	??_setLED_Main
 11949  12B9  3F41               	moviw [1]fsr1
 11950  12BA  00A4               	movwf	??_setLED_Main+1
 11951  12BB  3000               	movlw	0
 11952  12BC  0224               	subwf	??_setLED_Main+1,w
 11953  12BD  3019               	movlw	25
 11954  12BE  1903               	skipnz
 11955  12BF  0223               	subwf	??_setLED_Main,w
 11956  12C0  1C03               	skipc
 11957  12C1  0008               	return
 11958                           
 11959                           ;LED_B1.c: 234: LED->Time = 0;
 11960  12C2  0021               	movlb	1	; select bank1
 11961  12C3  0A50               	incf	_LED^(0+128),w
 11962  12C4  0086               	movwf	6
 11963  12C5  3001               	movlw	1	; select bank2/3
 11964  12C6  0087               	movwf	7
 11965  12C7  3000               	movlw	0
 11966  12C8  3FC0               	movwi [0]fsr1
 11967  12C9  3FC1               	movwi [1]fsr1
 11968                           
 11969                           ;LED_B1.c: 237: if (led == 1) {
 11970  12CA  0020               	movlb	0	; select bank0
 11971  12CB  0825               	movf	setLED_Main@led,w
 11972  12CC  3A01               	xorlw	1
 11973                           
 11974                           ;LED_B1.c: 238: RA3 = RA3 == 1 ? 0 : 1;
 11975  12CD  3008               	movlw	8
 11976  12CE  1903               	btfsc	3,2
 11977  12CF  068C               	xorwf	12,f
 11978                           
 11979                           ;LED_B1.c: 239: }
 11980                           ;LED_B1.c: 242: if (led == 2) {
 11981  12D0  0825               	movf	setLED_Main@led,w
 11982  12D1  3A02               	xorlw	2
 11983  12D2  1D03               	skipz
 11984  12D3  2AD6               	goto	l1149
 11985                           
 11986                           ;LED_B1.c: 243: RC7 = RC7 == 1 ? 0 : 1;
 11987  12D4  3080               	movlw	128
 11988  12D5  068E               	xorwf	14,f
 11989  12D6                     l1149:	
 11990                           
 11991                           ;LED_B1.c: 244: }
 11992                           ;LED_B1.c: 252: if (led == 99) {
 11993  12D6  0825               	movf	setLED_Main@led,w
 11994  12D7  3A63               	xorlw	99
 11995  12D8  1D03               	skipz
 11996  12D9  0008               	return
 11997                           
 11998                           ;LED_B1.c: 253: RB5 = RB5 == 1 ? 0 : 1;
 11999  12DA  3020               	movlw	32
 12000  12DB  068D               	xorwf	13,f
 12001  12DC  0008               	return
 12002  12DD                     __end_of_setLED_Main:	
 12003                           
 12004                           	psect	text74
 12005  1A47                     __ptext74:	
 12006 ;; *************** function _LED_Initialization *****************
 12007 ;; Defined at:
 12008 ;;		line 31 in file "../src/LED_B1.c"
 12009 ;; Parameters:    Size  Location     Type
 12010 ;;		None
 12011 ;; Auto vars:     Size  Location     Type
 12012 ;;		None
 12013 ;; Return value:  Size  Location     Type
 12014 ;;		None               void
 12015 ;; Registers used:
 12016 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12017 ;; Tracked objects:
 12018 ;;		On entry : 0/0
 12019 ;;		On exit  : 0/0
 12020 ;;		Unchanged: 0/0
 12021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12023 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12025 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12026 ;;Total ram usage:        0 bytes
 12027 ;; Hardware stack levels used:    1
 12028 ;; Hardware stack levels required when called:    8
 12029 ;; This function calls:
 12030 ;;		_setLED_Initialization
 12031 ;; This function is called by:
 12032 ;;		_main
 12033 ;; This function uses a non-reentrant model
 12034 ;;
 12035                           
 12036                           
 12037                           ;psect for function _LED_Initialization
 12038  1A47                     _LED_Initialization:	
 12039                           
 12040                           ;LED_B1.c: 33: setLED_Initialization(1);
 12041                           
 12042                           ;incstack = 0
 12043                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12044  1A47  3001               	movlw	1
 12045  1A48  319A  22EC  319A   	fcall	_setLED_Initialization
 12046                           
 12047                           ;LED_B1.c: 36: setLED_Initialization(2);
 12048  1A4B  3002               	movlw	2
 12049  1A4C  319A  22EC  319A   	fcall	_setLED_Initialization
 12050                           
 12051                           ;LED_B1.c: 42: setLED_Initialization(99);
 12052  1A4F  3063               	movlw	99
 12053  1A50  319A  22EC         	fcall	_setLED_Initialization
 12054  1A52  0008               	return
 12055  1A53                     __end_of_LED_Initialization:	
 12056                           
 12057                           	psect	text75
 12058  1AEC                     __ptext75:	
 12059 ;; *************** function _setLED_Initialization *****************
 12060 ;; Defined at:
 12061 ;;		line 74 in file "../src/LED_B1.c"
 12062 ;; Parameters:    Size  Location     Type
 12063 ;;  led             1    wreg     unsigned char 
 12064 ;; Auto vars:     Size  Location     Type
 12065 ;;  led             1    5[BANK0 ] unsigned char 
 12066 ;; Return value:  Size  Location     Type
 12067 ;;		None               void
 12068 ;; Registers used:
 12069 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12070 ;; Tracked objects:
 12071 ;;		On entry : 0/0
 12072 ;;		On exit  : 0/0
 12073 ;;		Unchanged: 0/0
 12074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12075 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12076 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12077 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12078 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12079 ;;Total ram usage:        1 bytes
 12080 ;; Hardware stack levels used:    1
 12081 ;; Hardware stack levels required when called:    7
 12082 ;; This function calls:
 12083 ;;		_LedPointSelect
 12084 ;;		_setLED
 12085 ;; This function is called by:
 12086 ;;		_LED_Initialization
 12087 ;; This function uses a non-reentrant model
 12088 ;;
 12089                           
 12090                           
 12091                           ;psect for function _setLED_Initialization
 12092  1AEC                     _setLED_Initialization:	
 12093                           
 12094                           ;incstack = 0
 12095                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12096                           ;setLED_Initialization@led stored from wreg
 12097  1AEC  0020               	movlb	0	; select bank0
 12098  1AED  00A5               	movwf	setLED_Initialization@led
 12099                           
 12100                           ;LED_B1.c: 75: LedPointSelect(led);
 12101  1AEE  0825               	movf	setLED_Initialization@led,w
 12102  1AEF  319D  25BB  319A   	fcall	_LedPointSelect
 12103                           
 12104                           ;LED_B1.c: 76: LED->Enable = 1;
 12105  1AF2  0021               	movlb	1	; select bank1
 12106  1AF3  0850               	movf	_LED^(0+128),w
 12107  1AF4  0086               	movwf	6
 12108  1AF5  3001               	movlw	1	; select bank2/3
 12109  1AF6  0087               	movwf	7
 12110  1AF7  1401               	bsf	1,0
 12111                           
 12112                           ;LED_B1.c: 77: setLED(led, 0);
 12113  1AF8  0020               	movlb	0	; select bank0
 12114  1AF9  01A3               	clrf	setLED@command
 12115  1AFA  0825               	movf	setLED_Initialization@led,w
 12116  1AFB  3194  2451         	fcall	_setLED
 12117  1AFD  0008               	return
 12118  1AFE                     __end_of_setLED_Initialization:	
 12119                           
 12120                           	psect	text76
 12121  113B                     __ptext76:	
 12122 ;; *************** function _Flash_Memory_Main *****************
 12123 ;; Defined at:
 12124 ;;		line 971 in file "../src/MCU_B1.c"
 12125 ;; Parameters:    Size  Location     Type
 12126 ;;		None
 12127 ;; Auto vars:     Size  Location     Type
 12128 ;;		None
 12129 ;; Return value:  Size  Location     Type
 12130 ;;		None               void
 12131 ;; Registers used:
 12132 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12133 ;; Tracked objects:
 12134 ;;		On entry : 0/0
 12135 ;;		On exit  : 0/0
 12136 ;;		Unchanged: 0/0
 12137 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12140 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12141 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12142 ;;Total ram usage:        1 bytes
 12143 ;; Hardware stack levels used:    1
 12144 ;; Hardware stack levels required when called:    8
 12145 ;; This function calls:
 12146 ;;		_Flash_Memory_Modify
 12147 ;;		_getMain_All_LightsStatus
 12148 ;; This function is called by:
 12149 ;;		_main
 12150 ;; This function uses a non-reentrant model
 12151 ;;
 12152                           
 12153                           
 12154                           ;psect for function _Flash_Memory_Main
 12155  113B                     _Flash_Memory_Main:	
 12156                           
 12157                           ;MCU_B1.c: 972: if (Memory.Modify == 1) {
 12158                           
 12159                           ;incstack = 0
 12160                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12161  113B  0024               	movlb	4	; select bank4
 12162  113C  1C44               	btfss	(_Memory^(0+512)+36),0
 12163  113D  0008               	return
 12164                           
 12165                           ;MCU_B1.c: 973: Memory.GO = getMain_All_LightsStatus() == 0 ? 1 : 0;
 12166  113E  319B  2347  3191   	fcall	_getMain_All_LightsStatus
 12167  1141  3A00               	xorlw	0
 12168  1142  3000               	movlw	0
 12169  1143  1903               	skipnz
 12170  1144  3001               	movlw	1
 12171  1145  0020               	movlb	0	; select bank0
 12172  1146  00A7               	movwf	??_Flash_Memory_Main
 12173  1147  0DA7               	rlf	??_Flash_Memory_Main,f
 12174  1148  0024               	movlb	4	; select bank4
 12175  1149  0844               	movf	(_Memory^(0+512)+36),w
 12176  114A  0020               	movlb	0	; select bank0
 12177  114B  0627               	xorwf	??_Flash_Memory_Main,w
 12178  114C  39FD               	andlw	-3
 12179  114D  0627               	xorwf	??_Flash_Memory_Main,w
 12180  114E  0024               	movlb	4	; select bank4
 12181  114F  00C4               	movwf	(_Memory^(0+512)+36)
 12182                           
 12183                           ;MCU_B1.c: 974: if (Memory.GO == 1) {
 12184  1150  1CC4               	btfss	(_Memory^(0+512)+36),1
 12185  1151  296B               	goto	l1421
 12186                           
 12187                           ;MCU_B1.c: 975: Memory.Runtime = 1;
 12188  1152  15C4               	bsf	(_Memory^(0+512)+36),3
 12189                           
 12190                           ;MCU_B1.c: 976: Memory.Time++;
 12191  1153  3001               	movlw	1
 12192  1154  07C2               	addwf	(_Memory^(0+512)+34),f
 12193  1155  3000               	movlw	0
 12194  1156  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 12195                           
 12196                           ;MCU_B1.c: 977: if (Memory.Time == (200 / 20)) {
 12197  1157  3022               	movlw	34
 12198  1158  3E20               	addlw	_Memory& (0+255)
 12199  1159  0086               	movwf	6
 12200  115A  3002               	movlw	2	; select bank4/5
 12201  115B  0087               	movwf	7
 12202  115C  3F40               	moviw [0]fsr1
 12203  115D  3A0A               	xorlw	10
 12204  115E  1D03               	skipz
 12205  115F  2962               	goto	u11195
 12206  1160  3F41               	moviw [1]fsr1
 12207  1161  3A00               	xorlw	0
 12208  1162                     u11195:	
 12209  1162  1D03               	skipz
 12210  1163  0008               	return
 12211                           
 12212                           ;MCU_B1.c: 978: Memory.Time = 0;
 12213  1164  01C2               	clrf	(_Memory^(0+512)+34)
 12214  1165  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12215                           
 12216                           ;MCU_B1.c: 979: Memory.Modify = 0;
 12217  1166  1044               	bcf	(_Memory^(0+512)+36),0
 12218                           
 12219                           ;MCU_B1.c: 980: Memory.GO = 0;
 12220  1167  10C4               	bcf	(_Memory^(0+512)+36),1
 12221                           
 12222                           ;MCU_B1.c: 981: Flash_Memory_Modify();
 12223  1168  3193  23FF         	fcall	_Flash_Memory_Modify
 12224                           
 12225                           ;MCU_B1.c: 982: }
 12226                           ;MCU_B1.c: 983: } else {
 12227  116A  0008               	return
 12228  116B                     l1421:	
 12229                           
 12230                           ;MCU_B1.c: 984: if (Memory.Runtime == 1) {
 12231  116B  1DC4               	btfss	(_Memory^(0+512)+36),3
 12232  116C  0008               	return
 12233                           
 12234                           ;MCU_B1.c: 985: Memory.Runtime = 0;
 12235  116D  11C4               	bcf	(_Memory^(0+512)+36),3
 12236                           
 12237                           ;MCU_B1.c: 986: Memory.Time = 0;
 12238  116E  01C2               	clrf	(_Memory^(0+512)+34)
 12239  116F  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12240  1170  0008               	return
 12241  1171                     __end_of_Flash_Memory_Main:	
 12242                           
 12243                           	psect	text77
 12244  13FF                     __ptext77:	
 12245 ;; *************** function _Flash_Memory_Modify *****************
 12246 ;; Defined at:
 12247 ;;		line 1044 in file "../src/MCU_B1.c"
 12248 ;; Parameters:    Size  Location     Type
 12249 ;;		None
 12250 ;; Auto vars:     Size  Location     Type
 12251 ;;  i               1    6[BANK0 ] unsigned char 
 12252 ;; Return value:  Size  Location     Type
 12253 ;;		None               void
 12254 ;; Registers used:
 12255 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12256 ;; Tracked objects:
 12257 ;;		On entry : 0/0
 12258 ;;		On exit  : 0/0
 12259 ;;		Unchanged: 0/0
 12260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12262 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12263 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12264 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12265 ;;Total ram usage:        2 bytes
 12266 ;; Hardware stack levels used:    1
 12267 ;; Hardware stack levels required when called:    7
 12268 ;; This function calls:
 12269 ;;		_Flash_Memory_Erasing
 12270 ;;		_Flash_Memory_Read
 12271 ;;		_Flash_Memory_Write
 12272 ;;		_setMemory_Data
 12273 ;; This function is called by:
 12274 ;;		_Flash_Memory_Main
 12275 ;; This function uses a non-reentrant model
 12276 ;;
 12277                           
 12278                           
 12279                           ;psect for function _Flash_Memory_Modify
 12280  13FF                     _Flash_Memory_Modify:	
 12281                           
 12282                           ;MCU_B1.c: 1045: char i = 0;
 12283                           
 12284                           ;incstack = 0
 12285                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12286  13FF  0020               	movlb	0	; select bank0
 12287  1400  01A6               	clrf	Flash_Memory_Modify@i
 12288                           
 12289                           ;MCU_B1.c: 1046: for (i = 0; i < 32; i++) {
 12290  1401  01A6               	clrf	Flash_Memory_Modify@i
 12291  1402  3020               	movlw	32
 12292  1403  0226               	subwf	Flash_Memory_Modify@i,w
 12293  1404  1803               	btfsc	3,0
 12294  1405  2C1B               	goto	l8069
 12295  1406                     l8063:	
 12296                           
 12297                           ;MCU_B1.c: 1047: Memory.Data[i] = Flash_Memory_Read(i);
 12298  1406  0826               	movf	Flash_Memory_Modify@i,w
 12299  1407  319C  249F  3193   	fcall	_Flash_Memory_Read
 12300  140A  0020               	movlb	0	; select bank0
 12301  140B  00A5               	movwf	??_Flash_Memory_Modify
 12302  140C  0826               	movf	Flash_Memory_Modify@i,w
 12303  140D  3E20               	addlw	_Memory& (0+255)
 12304  140E  0086               	movwf	6
 12305  140F  3002               	movlw	2	; select bank4/5
 12306  1410  0087               	movwf	7
 12307  1411  0825               	movf	??_Flash_Memory_Modify,w
 12308  1412  0081               	movwf	1
 12309  1413  3001               	movlw	1
 12310  1414  00A5               	movwf	??_Flash_Memory_Modify
 12311  1415  0825               	movf	??_Flash_Memory_Modify,w
 12312  1416  07A6               	addwf	Flash_Memory_Modify@i,f
 12313  1417  3020               	movlw	32
 12314  1418  0226               	subwf	Flash_Memory_Modify@i,w
 12315  1419  1C03               	skipc
 12316  141A  2C06               	goto	l8063
 12317  141B                     l8069:	
 12318                           
 12319                           ;MCU_B1.c: 1048: }
 12320                           ;MCU_B1.c: 1049: setMemory_Data(0, product->Data[12]);
 12321  141B  0021               	movlb	1	; select bank1
 12322  141C  086D               	movf	_product^(0+128),w
 12323  141D  0086               	movwf	6
 12324  141E  3002               	movlw	2	; select bank4/5
 12325  141F  0087               	movwf	7
 12326  1420  3002               	movlw	2	; select bank4/5
 12327  1421  3F4C               	moviw [12]fsr1
 12328  1422  0020               	movlb	0	; select bank0
 12329  1423  00A1               	movwf	setMemory_Data@data
 12330  1424  3000               	movlw	0
 12331  1425  319A  222F  3193   	fcall	_setMemory_Data
 12332                           
 12333                           ;MCU_B1.c: 1050: setMemory_Data(1, product->Data[13]);
 12334  1428  0021               	movlb	1	; select bank1
 12335  1429  086D               	movf	_product^(0+128),w
 12336  142A  0086               	movwf	6
 12337  142B  3002               	movlw	2	; select bank4/5
 12338  142C  0087               	movwf	7
 12339  142D  3002               	movlw	2	; select bank4/5
 12340  142E  3F4D               	moviw [13]fsr1
 12341  142F  0020               	movlb	0	; select bank0
 12342  1430  00A1               	movwf	setMemory_Data@data
 12343  1431  3001               	movlw	1
 12344  1432  319A  222F  3193   	fcall	_setMemory_Data
 12345                           
 12346                           ;MCU_B1.c: 1051: setMemory_Data(2, product->Data[14]);
 12347  1435  0021               	movlb	1	; select bank1
 12348  1436  086D               	movf	_product^(0+128),w
 12349  1437  0086               	movwf	6
 12350  1438  3002               	movlw	2	; select bank4/5
 12351  1439  0087               	movwf	7
 12352  143A  3002               	movlw	2	; select bank4/5
 12353  143B  3F4E               	moviw [14]fsr1
 12354  143C  0020               	movlb	0	; select bank0
 12355  143D  00A1               	movwf	setMemory_Data@data
 12356  143E  3002               	movlw	2
 12357  143F  319A  222F  3193   	fcall	_setMemory_Data
 12358                           
 12359                           ;MCU_B1.c: 1057: if (Memory.LoopSave == 1) {
 12360  1442  0024               	movlb	4	; select bank4
 12361  1443  1D44               	btfss	(_Memory^(0+512)+36),2
 12362  1444  2C49               	goto	l1444
 12363                           
 12364                           ;MCU_B1.c: 1058: Memory.LoopSave = 0;
 12365  1445  1144               	bcf	(_Memory^(0+512)+36),2
 12366                           
 12367                           ;MCU_B1.c: 1059: myMain.FirstOpen = 0;
 12368  1446  0022               	movlb	2	; select bank2
 12369  1447  11A0               	bcf	_myMain^(0+256),3
 12370                           
 12371                           ;MCU_B1.c: 1060: myMain.First = 0;
 12372  1448  12A0               	bcf	_myMain^(0+256),5
 12373  1449                     l1444:	
 12374                           
 12375                           ;MCU_B1.c: 1062: }
 12376                           ;MCU_B1.c: 1063: GIE = 0;
 12377  1449  138B               	bcf	11,7	;volatile
 12378                           
 12379                           ;MCU_B1.c: 1064: Flash_Memory_Erasing();
 12380  144A  319A  223B  3193   	fcall	_Flash_Memory_Erasing
 12381                           
 12382                           ;MCU_B1.c: 1065: Flash_Memory_Write();
 12383  144D  3190  2074         	fcall	_Flash_Memory_Write
 12384                           
 12385                           ;MCU_B1.c: 1066: GIE = 1;
 12386  144F  178B               	bsf	11,7	;volatile
 12387  1450  0008               	return
 12388  1451                     __end_of_Flash_Memory_Modify:	
 12389                           
 12390                           	psect	text78
 12391  1A3B                     __ptext78:	
 12392 ;; *************** function _Flash_Memory_Erasing *****************
 12393 ;; Defined at:
 12394 ;;		line 1033 in file "../src/MCU_B1.c"
 12395 ;; Parameters:    Size  Location     Type
 12396 ;;		None
 12397 ;; Auto vars:     Size  Location     Type
 12398 ;;		None
 12399 ;; Return value:  Size  Location     Type
 12400 ;;		None               void
 12401 ;; Registers used:
 12402 ;;		wreg, status,2, status,0, pclath, cstack
 12403 ;; Tracked objects:
 12404 ;;		On entry : 0/0
 12405 ;;		On exit  : 0/0
 12406 ;;		Unchanged: 0/0
 12407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12409 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12411 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12412 ;;Total ram usage:        0 bytes
 12413 ;; Hardware stack levels used:    1
 12414 ;; Hardware stack levels required when called:    6
 12415 ;; This function calls:
 12416 ;;		_Flash_Memory_Unlock
 12417 ;; This function is called by:
 12418 ;;		_Flash_Memory_Modify
 12419 ;; This function uses a non-reentrant model
 12420 ;;
 12421                           
 12422                           
 12423                           ;psect for function _Flash_Memory_Erasing
 12424  1A3B                     _Flash_Memory_Erasing:	
 12425                           
 12426                           ;MCU_B1.c: 1034: CFGS = 0;
 12427                           
 12428                           ;incstack = 0
 12429                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12430  1A3B  0023               	movlb	3	; select bank3
 12431  1A3C  1315               	bcf	21,6	;volatile
 12432                           
 12433                           ;MCU_B1.c: 1035: PMADRH = 0x30;
 12434  1A3D  3030               	movlw	48
 12435  1A3E  0092               	movwf	18	;volatile
 12436                           
 12437                           ;MCU_B1.c: 1036: PMADRL = 0x00;
 12438  1A3F  0191               	clrf	17	;volatile
 12439                           
 12440                           ;MCU_B1.c: 1037: FREE = 1;
 12441  1A40  1615               	bsf	21,4	;volatile
 12442                           
 12443                           ;MCU_B1.c: 1038: WREN = 1;
 12444  1A41  1515               	bsf	21,2	;volatile
 12445                           
 12446                           ;MCU_B1.c: 1039: Flash_Memory_Unlock();
 12447  1A42  3199  21D8         	fcall	_Flash_Memory_Unlock
 12448                           
 12449                           ;MCU_B1.c: 1040: WREN = 0;
 12450  1A44  0023               	movlb	3	; select bank3
 12451  1A45  1115               	bcf	21,2	;volatile
 12452  1A46  0008               	return
 12453  1A47                     __end_of_Flash_Memory_Erasing:	
 12454                           
 12455                           	psect	text79
 12456  047E                     __ptext79:	
 12457 ;; *************** function _Flash_Memory_Initialization *****************
 12458 ;; Defined at:
 12459 ;;		line 930 in file "../src/MCU_B1.c"
 12460 ;; Parameters:    Size  Location     Type
 12461 ;;		None
 12462 ;; Auto vars:     Size  Location     Type
 12463 ;;  i               1   68[BANK0 ] unsigned char 
 12464 ;; Return value:  Size  Location     Type
 12465 ;;		None               void
 12466 ;; Registers used:
 12467 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12468 ;; Tracked objects:
 12469 ;;		On entry : 0/0
 12470 ;;		On exit  : 0/0
 12471 ;;		Unchanged: 0/0
 12472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12473 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12474 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12475 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12476 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12477 ;;Total ram usage:        2 bytes
 12478 ;; Hardware stack levels used:    1
 12479 ;; Hardware stack levels required when called:    8
 12480 ;; This function calls:
 12481 ;;		_Flash_Memory_Read
 12482 ;;		_Flash_Memory_Write
 12483 ;;		_getDimmerLights_ValueToPercent
 12484 ;;		_setMemory_Data
 12485 ;; This function is called by:
 12486 ;;		_main
 12487 ;; This function uses a non-reentrant model
 12488 ;;
 12489                           
 12490                           
 12491                           ;psect for function _Flash_Memory_Initialization
 12492  047E                     _Flash_Memory_Initialization:	
 12493                           
 12494                           ;MCU_B1.c: 931: char i = 0;
 12495                           
 12496                           ;incstack = 0
 12497                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12498  047E  0020               	movlb	0	; select bank0
 12499  047F  01E4               	clrf	Flash_Memory_Initialization@i
 12500                           
 12501                           ;MCU_B1.c: 932: if (Flash_Memory_Read(31) == 0xaa) {
 12502  0480  301F               	movlw	31
 12503  0481  319C  249F  3184   	fcall	_Flash_Memory_Read
 12504  0484  3AAA               	xorlw	170
 12505  0485  1D03               	skipz
 12506  0486  2CFD               	goto	l8463
 12507                           
 12508                           ;MCU_B1.c: 933: product->Data[12] = Flash_Memory_Read(0);
 12509  0487  3000               	movlw	0
 12510  0488  319C  249F  3184   	fcall	_Flash_Memory_Read
 12511  048B  0020               	movlb	0	; select bank0
 12512  048C  00E3               	movwf	??_Flash_Memory_Initialization
 12513  048D  0021               	movlb	1	; select bank1
 12514  048E  086D               	movf	_product^(0+128),w
 12515  048F  3E0C               	addlw	12
 12516  0490  0086               	movwf	6
 12517  0491  3002               	movlw	2	; select bank4/5
 12518  0492  0087               	movwf	7
 12519  0493  0020               	movlb	0	; select bank0
 12520  0494  0863               	movf	??_Flash_Memory_Initialization,w
 12521  0495  0081               	movwf	1
 12522                           
 12523                           ;MCU_B1.c: 934: product->Data[13] = Flash_Memory_Read(1);
 12524  0496  3001               	movlw	1
 12525  0497  319C  249F  3184   	fcall	_Flash_Memory_Read
 12526  049A  0020               	movlb	0	; select bank0
 12527  049B  00E3               	movwf	??_Flash_Memory_Initialization
 12528  049C  0021               	movlb	1	; select bank1
 12529  049D  086D               	movf	_product^(0+128),w
 12530  049E  3E0D               	addlw	13
 12531  049F  0086               	movwf	6
 12532  04A0  3002               	movlw	2	; select bank4/5
 12533  04A1  0087               	movwf	7
 12534  04A2  0020               	movlb	0	; select bank0
 12535  04A3  0863               	movf	??_Flash_Memory_Initialization,w
 12536  04A4  0081               	movwf	1
 12537                           
 12538                           ;MCU_B1.c: 935: product->Data[14] = Flash_Memory_Read(2);
 12539  04A5  3002               	movlw	2
 12540  04A6  319C  249F  3184   	fcall	_Flash_Memory_Read
 12541  04A9  0020               	movlb	0	; select bank0
 12542  04AA  00E3               	movwf	??_Flash_Memory_Initialization
 12543  04AB  0021               	movlb	1	; select bank1
 12544  04AC  086D               	movf	_product^(0+128),w
 12545  04AD  3E0E               	addlw	14
 12546  04AE  0086               	movwf	6
 12547  04AF  3002               	movlw	2	; select bank4/5
 12548  04B0  0087               	movwf	7
 12549  04B1  0020               	movlb	0	; select bank0
 12550  04B2  0863               	movf	??_Flash_Memory_Initialization,w
 12551  04B3  0081               	movwf	1
 12552                           
 12553                           ;MCU_B1.c: 941: i = getDimmerLights_ValueToPercent(((char)(65*0.65)));
 12554  04B4  302A               	movlw	42
 12555  04B5  3196  2669  3184   	fcall	_getDimmerLights_ValueToPercent
 12556  04B8  0020               	movlb	0	; select bank0
 12557  04B9  00E3               	movwf	??_Flash_Memory_Initialization
 12558  04BA  0863               	movf	??_Flash_Memory_Initialization,w
 12559  04BB  00E4               	movwf	Flash_Memory_Initialization@i
 12560                           
 12561                           ;MCU_B1.c: 942: product->Data[21] = i;
 12562  04BC  0864               	movf	Flash_Memory_Initialization@i,w
 12563  04BD  00E3               	movwf	??_Flash_Memory_Initialization
 12564  04BE  0021               	movlb	1	; select bank1
 12565  04BF  086D               	movf	_product^(0+128),w
 12566  04C0  3E15               	addlw	21
 12567  04C1  0086               	movwf	6
 12568  04C2  3002               	movlw	2	; select bank4/5
 12569  04C3  0087               	movwf	7
 12570  04C4  0020               	movlb	0	; select bank0
 12571  04C5  0863               	movf	??_Flash_Memory_Initialization,w
 12572  04C6  0081               	movwf	1
 12573                           
 12574                           ;MCU_B1.c: 943: product->Data[22] = i;
 12575  04C7  0864               	movf	Flash_Memory_Initialization@i,w
 12576  04C8  00E3               	movwf	??_Flash_Memory_Initialization
 12577  04C9  0021               	movlb	1	; select bank1
 12578  04CA  086D               	movf	_product^(0+128),w
 12579  04CB  3E16               	addlw	22
 12580  04CC  0086               	movwf	6
 12581  04CD  3002               	movlw	2	; select bank4/5
 12582  04CE  0087               	movwf	7
 12583  04CF  0020               	movlb	0	; select bank0
 12584  04D0  0863               	movf	??_Flash_Memory_Initialization,w
 12585  04D1  0081               	movwf	1
 12586                           
 12587                           ;MCU_B1.c: 944: product->Data[23] = i;
 12588  04D2  0864               	movf	Flash_Memory_Initialization@i,w
 12589  04D3  00E3               	movwf	??_Flash_Memory_Initialization
 12590  04D4  0021               	movlb	1	; select bank1
 12591  04D5  086D               	movf	_product^(0+128),w
 12592  04D6  3E17               	addlw	23
 12593  04D7  0086               	movwf	6
 12594  04D8  3002               	movlw	2	; select bank4/5
 12595  04D9  0087               	movwf	7
 12596  04DA  0020               	movlb	0	; select bank0
 12597  04DB  0863               	movf	??_Flash_Memory_Initialization,w
 12598  04DC  0081               	movwf	1
 12599                           
 12600                           ;MCU_B1.c: 946: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12601  04DD  0021               	movlb	1	; select bank1
 12602  04DE  086D               	movf	_product^(0+128),w
 12603  04DF  3E0C               	addlw	12
 12604  04E0  0086               	movwf	6
 12605  04E1  3002               	movlw	2	; select bank4/5
 12606  04E2  0087               	movwf	7
 12607  04E3  0801               	movf	1,w
 12608  04E4  3AFF               	xorlw	255
 12609  04E5  1D03               	skipz
 12610  04E6  0008               	return
 12611  04E7  086D               	movf	_product^(0+128),w
 12612  04E8  3E0D               	addlw	13
 12613  04E9  0086               	movwf	6
 12614  04EA  3002               	movlw	2	; select bank4/5
 12615  04EB  0087               	movwf	7
 12616  04EC  0801               	movf	1,w
 12617  04ED  3AFF               	xorlw	255
 12618  04EE  1D03               	skipz
 12619  04EF  0008               	return
 12620  04F0  086D               	movf	_product^(0+128),w
 12621  04F1  3E0E               	addlw	14
 12622  04F2  0086               	movwf	6
 12623  04F3  3002               	movlw	2	; select bank4/5
 12624  04F4  0087               	movwf	7
 12625  04F5  0801               	movf	1,w
 12626  04F6  3AFF               	xorlw	255
 12627  04F7  1D03               	skipz
 12628  04F8  0008               	return
 12629                           
 12630                           ;MCU_B1.c: 947: myMain.FirstOpen = 1;
 12631  04F9  0022               	movlb	2	; select bank2
 12632  04FA  15A0               	bsf	_myMain^(0+256),3
 12633                           
 12634                           ;MCU_B1.c: 948: myMain.First = 1;
 12635  04FB  16A0               	bsf	_myMain^(0+256),5
 12636                           
 12637                           ;MCU_B1.c: 949: }
 12638                           ;MCU_B1.c: 950: } else {
 12639  04FC  0008               	return
 12640  04FD                     l8463:	
 12641                           
 12642                           ;MCU_B1.c: 951: i = getDimmerLights_ValueToPercent(((char)(65*0.65)));
 12643  04FD  302A               	movlw	42
 12644  04FE  3196  2669  3184   	fcall	_getDimmerLights_ValueToPercent
 12645  0501  0020               	movlb	0	; select bank0
 12646  0502  00E3               	movwf	??_Flash_Memory_Initialization
 12647  0503  0863               	movf	??_Flash_Memory_Initialization,w
 12648  0504  00E4               	movwf	Flash_Memory_Initialization@i
 12649                           
 12650                           ;MCU_B1.c: 952: setMemory_Data(0, 0xff);
 12651  0505  30FF               	movlw	255
 12652  0506  00E3               	movwf	??_Flash_Memory_Initialization
 12653  0507  0863               	movf	??_Flash_Memory_Initialization,w
 12654  0508  00A1               	movwf	setMemory_Data@data
 12655  0509  3000               	movlw	0
 12656  050A  319A  222F  3184   	fcall	_setMemory_Data
 12657                           
 12658                           ;MCU_B1.c: 953: setMemory_Data(1, 0xff);
 12659  050D  30FF               	movlw	255
 12660  050E  0020               	movlb	0	; select bank0
 12661  050F  00E3               	movwf	??_Flash_Memory_Initialization
 12662  0510  0863               	movf	??_Flash_Memory_Initialization,w
 12663  0511  00A1               	movwf	setMemory_Data@data
 12664  0512  3001               	movlw	1
 12665  0513  319A  222F  3184   	fcall	_setMemory_Data
 12666                           
 12667                           ;MCU_B1.c: 954: setMemory_Data(2, 0xff);
 12668  0516  30FF               	movlw	255
 12669  0517  0020               	movlb	0	; select bank0
 12670  0518  00E3               	movwf	??_Flash_Memory_Initialization
 12671  0519  0863               	movf	??_Flash_Memory_Initialization,w
 12672  051A  00A1               	movwf	setMemory_Data@data
 12673  051B  3002               	movlw	2
 12674  051C  319A  222F  3184   	fcall	_setMemory_Data
 12675                           
 12676                           ;MCU_B1.c: 955: setMemory_Data(3, 0xff);
 12677  051F  30FF               	movlw	255
 12678  0520  0020               	movlb	0	; select bank0
 12679  0521  00E3               	movwf	??_Flash_Memory_Initialization
 12680  0522  0863               	movf	??_Flash_Memory_Initialization,w
 12681  0523  00A1               	movwf	setMemory_Data@data
 12682  0524  3003               	movlw	3
 12683  0525  319A  222F  3184   	fcall	_setMemory_Data
 12684                           
 12685                           ;MCU_B1.c: 956: setMemory_Data(4, 0xff);
 12686  0528  30FF               	movlw	255
 12687  0529  0020               	movlb	0	; select bank0
 12688  052A  00E3               	movwf	??_Flash_Memory_Initialization
 12689  052B  0863               	movf	??_Flash_Memory_Initialization,w
 12690  052C  00A1               	movwf	setMemory_Data@data
 12691  052D  3004               	movlw	4
 12692  052E  319A  222F  3184   	fcall	_setMemory_Data
 12693                           
 12694                           ;MCU_B1.c: 957: setMemory_Data(5, 0xff);
 12695  0531  30FF               	movlw	255
 12696  0532  0020               	movlb	0	; select bank0
 12697  0533  00E3               	movwf	??_Flash_Memory_Initialization
 12698  0534  0863               	movf	??_Flash_Memory_Initialization,w
 12699  0535  00A1               	movwf	setMemory_Data@data
 12700  0536  3005               	movlw	5
 12701  0537  319A  222F  3184   	fcall	_setMemory_Data
 12702                           
 12703                           ;MCU_B1.c: 958: setMemory_Data(31, 0xaa);
 12704  053A  30AA               	movlw	170
 12705  053B  0020               	movlb	0	; select bank0
 12706  053C  00E3               	movwf	??_Flash_Memory_Initialization
 12707  053D  0863               	movf	??_Flash_Memory_Initialization,w
 12708  053E  00A1               	movwf	setMemory_Data@data
 12709  053F  301F               	movlw	31
 12710  0540  319A  222F  3184   	fcall	_setMemory_Data
 12711                           
 12712                           ;MCU_B1.c: 959: product->Data[21] = i;
 12713  0543  0020               	movlb	0	; select bank0
 12714  0544  0864               	movf	Flash_Memory_Initialization@i,w
 12715  0545  00E3               	movwf	??_Flash_Memory_Initialization
 12716  0546  0021               	movlb	1	; select bank1
 12717  0547  086D               	movf	_product^(0+128),w
 12718  0548  3E15               	addlw	21
 12719  0549  0086               	movwf	6
 12720  054A  3002               	movlw	2	; select bank4/5
 12721  054B  0087               	movwf	7
 12722  054C  0020               	movlb	0	; select bank0
 12723  054D  0863               	movf	??_Flash_Memory_Initialization,w
 12724  054E  0081               	movwf	1
 12725                           
 12726                           ;MCU_B1.c: 960: product->Data[22] = i;
 12727  054F  0864               	movf	Flash_Memory_Initialization@i,w
 12728  0550  00E3               	movwf	??_Flash_Memory_Initialization
 12729  0551  0021               	movlb	1	; select bank1
 12730  0552  086D               	movf	_product^(0+128),w
 12731  0553  3E16               	addlw	22
 12732  0554  0086               	movwf	6
 12733  0555  3002               	movlw	2	; select bank4/5
 12734  0556  0087               	movwf	7
 12735  0557  0020               	movlb	0	; select bank0
 12736  0558  0863               	movf	??_Flash_Memory_Initialization,w
 12737  0559  0081               	movwf	1
 12738                           
 12739                           ;MCU_B1.c: 961: product->Data[23] = i;
 12740  055A  0864               	movf	Flash_Memory_Initialization@i,w
 12741  055B  00E3               	movwf	??_Flash_Memory_Initialization
 12742  055C  0021               	movlb	1	; select bank1
 12743  055D  086D               	movf	_product^(0+128),w
 12744  055E  3E17               	addlw	23
 12745  055F  0086               	movwf	6
 12746  0560  3002               	movlw	2	; select bank4/5
 12747  0561  0087               	movwf	7
 12748  0562  0020               	movlb	0	; select bank0
 12749  0563  0863               	movf	??_Flash_Memory_Initialization,w
 12750  0564  0081               	movwf	1
 12751                           
 12752                           ;MCU_B1.c: 962: GIE = 0;
 12753  0565  138B               	bcf	11,7	;volatile
 12754                           
 12755                           ;MCU_B1.c: 963: Flash_Memory_Write();
 12756  0566  3190  2074         	fcall	_Flash_Memory_Write
 12757                           
 12758                           ;MCU_B1.c: 964: GIE = 1;
 12759  0568  178B               	bsf	11,7	;volatile
 12760                           
 12761                           ;MCU_B1.c: 965: myMain.FirstOpen = 1;
 12762  0569  0022               	movlb	2	; select bank2
 12763  056A  15A0               	bsf	_myMain^(0+256),3
 12764                           
 12765                           ;MCU_B1.c: 966: myMain.First = 1;
 12766  056B  16A0               	bsf	_myMain^(0+256),5
 12767  056C  0008               	return
 12768  056D                     __end_of_Flash_Memory_Initialization:	
 12769                           
 12770                           	psect	text80
 12771  1A2F                     __ptext80:	
 12772 ;; *************** function _setMemory_Data *****************
 12773 ;; Defined at:
 12774 ;;		line 1081 in file "../src/MCU_B1.c"
 12775 ;; Parameters:    Size  Location     Type
 12776 ;;  address         1    wreg     unsigned char 
 12777 ;;  data            1    1[BANK0 ] unsigned char 
 12778 ;; Auto vars:     Size  Location     Type
 12779 ;;  address         1    3[BANK0 ] unsigned char 
 12780 ;; Return value:  Size  Location     Type
 12781 ;;		None               void
 12782 ;; Registers used:
 12783 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12784 ;; Tracked objects:
 12785 ;;		On entry : 0/0
 12786 ;;		On exit  : 0/0
 12787 ;;		Unchanged: 0/0
 12788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12789 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12790 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12791 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12792 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12793 ;;Total ram usage:        3 bytes
 12794 ;; Hardware stack levels used:    1
 12795 ;; Hardware stack levels required when called:    5
 12796 ;; This function calls:
 12797 ;;		Nothing
 12798 ;; This function is called by:
 12799 ;;		_Flash_Memory_Initialization
 12800 ;;		_Flash_Memory_Modify
 12801 ;; This function uses a non-reentrant model
 12802 ;;
 12803                           
 12804                           
 12805                           ;psect for function _setMemory_Data
 12806  1A2F                     _setMemory_Data:	
 12807                           
 12808                           ;incstack = 0
 12809                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12810                           ;setMemory_Data@address stored from wreg
 12811  1A2F  0020               	movlb	0	; select bank0
 12812  1A30  00A3               	movwf	setMemory_Data@address
 12813                           
 12814                           ;MCU_B1.c: 1082: Memory.Data[address] = data;
 12815  1A31  0821               	movf	setMemory_Data@data,w
 12816  1A32  00A2               	movwf	??_setMemory_Data
 12817  1A33  0823               	movf	setMemory_Data@address,w
 12818  1A34  3E20               	addlw	_Memory& (0+255)
 12819  1A35  0086               	movwf	6
 12820  1A36  3002               	movlw	2	; select bank4/5
 12821  1A37  0087               	movwf	7
 12822  1A38  0822               	movf	??_setMemory_Data,w
 12823  1A39  0081               	movwf	1
 12824  1A3A  0008               	return
 12825  1A3B                     __end_of_setMemory_Data:	
 12826                           
 12827                           	psect	text81
 12828  1074                     __ptext81:	
 12829 ;; *************** function _Flash_Memory_Write *****************
 12830 ;; Defined at:
 12831 ;;		line 1014 in file "../src/MCU_B1.c"
 12832 ;; Parameters:    Size  Location     Type
 12833 ;;		None
 12834 ;; Auto vars:     Size  Location     Type
 12835 ;;  i               1    2[BANK0 ] unsigned char 
 12836 ;; Return value:  Size  Location     Type
 12837 ;;		None               void
 12838 ;; Registers used:
 12839 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12840 ;; Tracked objects:
 12841 ;;		On entry : 0/0
 12842 ;;		On exit  : 0/0
 12843 ;;		Unchanged: 0/0
 12844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12846 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12847 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12848 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12849 ;;Total ram usage:        2 bytes
 12850 ;; Hardware stack levels used:    1
 12851 ;; Hardware stack levels required when called:    6
 12852 ;; This function calls:
 12853 ;;		_Flash_Memory_Unlock
 12854 ;; This function is called by:
 12855 ;;		_Flash_Memory_Initialization
 12856 ;;		_Flash_Memory_Modify
 12857 ;; This function uses a non-reentrant model
 12858 ;;
 12859                           
 12860                           
 12861                           ;psect for function _Flash_Memory_Write
 12862  1074                     _Flash_Memory_Write:	
 12863                           
 12864                           ;MCU_B1.c: 1015: char i = 0;
 12865                           
 12866                           ;incstack = 0
 12867                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12868  1074  0020               	movlb	0	; select bank0
 12869  1075  01A2               	clrf	Flash_Memory_Write@i
 12870                           
 12871                           ;MCU_B1.c: 1016: CFGS = 0;
 12872  1076  0023               	movlb	3	; select bank3
 12873  1077  1315               	bcf	21,6	;volatile
 12874                           
 12875                           ;MCU_B1.c: 1017: PMADRH = 0x30;
 12876  1078  3030               	movlw	48
 12877  1079  0092               	movwf	18	;volatile
 12878                           
 12879                           ;MCU_B1.c: 1018: PMDATH = 0;
 12880  107A  0194               	clrf	20	;volatile
 12881                           
 12882                           ;MCU_B1.c: 1019: FREE = 0;
 12883  107B  1215               	bcf	21,4	;volatile
 12884                           
 12885                           ;MCU_B1.c: 1020: LWLO = 1;
 12886  107C  1695               	bsf	21,5	;volatile
 12887                           
 12888                           ;MCU_B1.c: 1021: WREN = 1;
 12889  107D  1515               	bsf	21,2	;volatile
 12890                           
 12891                           ;MCU_B1.c: 1022: for (i = 0; i < 32; i++) {
 12892  107E  0020               	movlb	0	; select bank0
 12893  107F  01A2               	clrf	Flash_Memory_Write@i
 12894  1080  3020               	movlw	32
 12895  1081  0222               	subwf	Flash_Memory_Write@i,w
 12896  1082  1803               	btfsc	3,0
 12897  1083  289C               	goto	l1435
 12898  1084                     l7539:	
 12899                           
 12900                           ;MCU_B1.c: 1023: PMADRL = i;
 12901  1084  0822               	movf	Flash_Memory_Write@i,w
 12902  1085  0023               	movlb	3	; select bank3
 12903  1086  0091               	movwf	17	;volatile
 12904                           
 12905                           ;MCU_B1.c: 1024: PMDATL = Memory.Data[i];
 12906  1087  0020               	movlb	0	; select bank0
 12907  1088  0822               	movf	Flash_Memory_Write@i,w
 12908  1089  3E20               	addlw	_Memory& (0+255)
 12909  108A  0086               	movwf	6
 12910  108B  3002               	movlw	2	; select bank4/5
 12911  108C  0087               	movwf	7
 12912  108D  0801               	movf	1,w
 12913  108E  0023               	movlb	3	; select bank3
 12914  108F  0093               	movwf	19	;volatile
 12915                           
 12916                           ;MCU_B1.c: 1025: Flash_Memory_Unlock();
 12917  1090  3199  21D8  3190   	fcall	_Flash_Memory_Unlock
 12918  1093  3001               	movlw	1
 12919  1094  0020               	movlb	0	; select bank0
 12920  1095  00A1               	movwf	??_Flash_Memory_Write
 12921  1096  0821               	movf	??_Flash_Memory_Write,w
 12922  1097  07A2               	addwf	Flash_Memory_Write@i,f
 12923  1098  3020               	movlw	32
 12924  1099  0222               	subwf	Flash_Memory_Write@i,w
 12925  109A  1C03               	skipc
 12926  109B  2884               	goto	l7539
 12927  109C                     l1435:	
 12928                           
 12929                           ;MCU_B1.c: 1026: }
 12930                           ;MCU_B1.c: 1027: LWLO = 0;
 12931  109C  0023               	movlb	3	; select bank3
 12932  109D  1295               	bcf	21,5	;volatile
 12933                           
 12934                           ;MCU_B1.c: 1028: Flash_Memory_Unlock();
 12935  109E  3199  21D8         	fcall	_Flash_Memory_Unlock
 12936                           
 12937                           ;MCU_B1.c: 1029: WREN = 0;
 12938  10A0  0023               	movlb	3	; select bank3
 12939  10A1  1115               	bcf	21,2	;volatile
 12940  10A2  0008               	return
 12941  10A3                     __end_of_Flash_Memory_Write:	
 12942                           
 12943                           	psect	text82
 12944  19D8                     __ptext82:	
 12945 ;; *************** function _Flash_Memory_Unlock *****************
 12946 ;; Defined at:
 12947 ;;		line 993 in file "../src/MCU_B1.c"
 12948 ;; Parameters:    Size  Location     Type
 12949 ;;		None
 12950 ;; Auto vars:     Size  Location     Type
 12951 ;;		None
 12952 ;; Return value:  Size  Location     Type
 12953 ;;		None               void
 12954 ;; Registers used:
 12955 ;;		wreg
 12956 ;; Tracked objects:
 12957 ;;		On entry : 0/0
 12958 ;;		On exit  : 0/0
 12959 ;;		Unchanged: 0/0
 12960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12964 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12965 ;;Total ram usage:        0 bytes
 12966 ;; Hardware stack levels used:    1
 12967 ;; Hardware stack levels required when called:    5
 12968 ;; This function calls:
 12969 ;;		Nothing
 12970 ;; This function is called by:
 12971 ;;		_Flash_Memory_Write
 12972 ;;		_Flash_Memory_Erasing
 12973 ;; This function uses a non-reentrant model
 12974 ;;
 12975                           
 12976                           
 12977                           ;psect for function _Flash_Memory_Unlock
 12978  19D8                     _Flash_Memory_Unlock:	
 12979                           
 12980                           ;MCU_B1.c: 994: PMCON2 = 0x55;
 12981                           
 12982                           ;incstack = 0
 12983                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12984  19D8  3055               	movlw	85
 12985  19D9  0023               	movlb	3	; select bank3
 12986  19DA  0096               	movwf	22	;volatile
 12987                           
 12988                           ;MCU_B1.c: 995: PMCON2 = 0xaa;
 12989  19DB  30AA               	movlw	170
 12990  19DC  0096               	movwf	22	;volatile
 12991                           
 12992                           ;MCU_B1.c: 996: WR = 1;
 12993  19DD  1495               	bsf	21,1	;volatile
 12994                           
 12995                           ;MCU_B1.c: 997: __nop();
 12996  19DE  0000               	nop
 12997                           
 12998                           ;MCU_B1.c: 998: __nop();
 12999  19DF  0000               	nop
 13000  19E0  0008               	return
 13001  19E1                     __end_of_Flash_Memory_Unlock:	
 13002                           
 13003                           	psect	text83
 13004  1C9F                     __ptext83:	
 13005 ;; *************** function _Flash_Memory_Read *****************
 13006 ;; Defined at:
 13007 ;;		line 1002 in file "../src/MCU_B1.c"
 13008 ;; Parameters:    Size  Location     Type
 13009 ;;  address         1    wreg     unsigned char 
 13010 ;; Auto vars:     Size  Location     Type
 13011 ;;  address         1    3[BANK0 ] unsigned char 
 13012 ;;  ret             1    4[BANK0 ] unsigned char 
 13013 ;;  i               1    2[BANK0 ] unsigned char 
 13014 ;; Return value:  Size  Location     Type
 13015 ;;                  1    wreg      unsigned char 
 13016 ;; Registers used:
 13017 ;;		wreg, status,2
 13018 ;; Tracked objects:
 13019 ;;		On entry : 0/0
 13020 ;;		On exit  : 0/0
 13021 ;;		Unchanged: 0/0
 13022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13024 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13025 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13026 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13027 ;;Total ram usage:        4 bytes
 13028 ;; Hardware stack levels used:    1
 13029 ;; Hardware stack levels required when called:    5
 13030 ;; This function calls:
 13031 ;;		Nothing
 13032 ;; This function is called by:
 13033 ;;		_Flash_Memory_Initialization
 13034 ;;		_Flash_Memory_Modify
 13035 ;; This function uses a non-reentrant model
 13036 ;;
 13037                           
 13038                           
 13039                           ;psect for function _Flash_Memory_Read
 13040  1C9F                     _Flash_Memory_Read:	
 13041                           
 13042                           ;incstack = 0
 13043                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 13044                           ;Flash_Memory_Read@address stored from wreg
 13045  1C9F  0020               	movlb	0	; select bank0
 13046  1CA0  00A3               	movwf	Flash_Memory_Read@address
 13047                           
 13048                           ;MCU_B1.c: 1003: char i = 0, ret = 0;
 13049  1CA1  01A2               	clrf	Flash_Memory_Read@i
 13050  1CA2  01A4               	clrf	Flash_Memory_Read@ret
 13051                           
 13052                           ;MCU_B1.c: 1004: PMADRH = 0x30;
 13053  1CA3  3030               	movlw	48
 13054  1CA4  0023               	movlb	3	; select bank3
 13055  1CA5  0092               	movwf	18	;volatile
 13056                           
 13057                           ;MCU_B1.c: 1005: PMADRL = address;
 13058  1CA6  0020               	movlb	0	; select bank0
 13059  1CA7  0823               	movf	Flash_Memory_Read@address,w
 13060  1CA8  0023               	movlb	3	; select bank3
 13061  1CA9  0091               	movwf	17	;volatile
 13062                           
 13063                           ;MCU_B1.c: 1006: CFGS = 0;
 13064  1CAA  1315               	bcf	21,6	;volatile
 13065                           
 13066                           ;MCU_B1.c: 1007: RD = 1;
 13067  1CAB  1415               	bsf	21,0	;volatile
 13068                           
 13069                           ;MCU_B1.c: 1008: i = PMDATH;
 13070  1CAC  0814               	movf	20,w	;volatile
 13071  1CAD  0020               	movlb	0	; select bank0
 13072  1CAE  00A1               	movwf	??_Flash_Memory_Read
 13073  1CAF  0821               	movf	??_Flash_Memory_Read,w
 13074  1CB0  00A2               	movwf	Flash_Memory_Read@i
 13075                           
 13076                           ;MCU_B1.c: 1009: ret = PMDATL;
 13077  1CB1  0023               	movlb	3	; select bank3
 13078  1CB2  0813               	movf	19,w	;volatile
 13079  1CB3  0020               	movlb	0	; select bank0
 13080  1CB4  00A1               	movwf	??_Flash_Memory_Read
 13081  1CB5  0821               	movf	??_Flash_Memory_Read,w
 13082  1CB6  00A4               	movwf	Flash_Memory_Read@ret
 13083                           
 13084                           ;MCU_B1.c: 1010: return ret;
 13085  1CB7  0824               	movf	Flash_Memory_Read@ret,w
 13086  1CB8  0008               	return
 13087  1CB9                     __end_of_Flash_Memory_Read:	
 13088                           
 13089                           	psect	text84
 13090  0644                     __ptext84:	
 13091 ;; *************** function _Exception_Main *****************
 13092 ;; Defined at:
 13093 ;;		line 499 in file "../src/main_B1.c"
 13094 ;; Parameters:    Size  Location     Type
 13095 ;;		None
 13096 ;; Auto vars:     Size  Location     Type
 13097 ;;  i               2   19[BANK0 ] int 
 13098 ;;  i               2   17[BANK0 ] int 
 13099 ;;  error           1   22[BANK0 ] unsigned char 
 13100 ;;  lights          1   21[BANK0 ] unsigned char 
 13101 ;;  count           1   16[BANK0 ] unsigned char 
 13102 ;;  status          1   15[BANK0 ] unsigned char 
 13103 ;; Return value:  Size  Location     Type
 13104 ;;		None               void
 13105 ;; Registers used:
 13106 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13107 ;; Tracked objects:
 13108 ;;		On entry : 0/0
 13109 ;;		On exit  : 0/0
 13110 ;;		Unchanged: 0/0
 13111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13113 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13114 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13115 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13116 ;;Total ram usage:        9 bytes
 13117 ;; Hardware stack levels used:    1
 13118 ;; Hardware stack levels required when called:    7
 13119 ;; This function calls:
 13120 ;;		_getDimmerLights_Line
 13121 ;;		_getDimmerLights_Status
 13122 ;;		_getMain_All_Error_Status
 13123 ;;		_getMain_All_LightsStatus
 13124 ;;		_setBuz
 13125 ;;		_setDimmerLights_SwOff
 13126 ;;		_setLED
 13127 ;; This function is called by:
 13128 ;;		_main
 13129 ;; This function uses a non-reentrant model
 13130 ;;
 13131                           
 13132                           
 13133                           ;psect for function _Exception_Main
 13134  0644                     _Exception_Main:	
 13135                           
 13136                           ;main_B1.c: 500: char error = getMain_All_Error_Status(0);
 13137                           
 13138                           ;incstack = 0
 13139                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13140  0644  3000               	movlw	0
 13141  0645  3190  20D4  3186   	fcall	_getMain_All_Error_Status
 13142  0648  0020               	movlb	0	; select bank0
 13143  0649  00AE               	movwf	??_Exception_Main
 13144  064A  082E               	movf	??_Exception_Main,w
 13145  064B  00B6               	movwf	Exception_Main@error
 13146                           
 13147                           ;main_B1.c: 501: char lights = 0, count = 2;
 13148  064C  01B5               	clrf	Exception_Main@lights
 13149  064D  3002               	movlw	2
 13150  064E  00AE               	movwf	??_Exception_Main
 13151  064F  082E               	movf	??_Exception_Main,w
 13152  0650  00B0               	movwf	Exception_Main@count
 13153                           
 13154                           ;main_B1.c: 502: char status = 0;
 13155  0651  01AF               	clrf	Exception_Main@status
 13156                           
 13157                           ;main_B1.c: 504: if (myMain.Error_Run == 1) {
 13158  0652  0022               	movlb	2	; select bank2
 13159  0653  1DAA               	btfss	(_myMain^(0+256)+10),3
 13160  0654  2E64               	goto	l9971
 13161                           
 13162                           ;main_B1.c: 505: if (error == 0) {
 13163  0655  0020               	movlb	0	; select bank0
 13164  0656  08B6               	movf	Exception_Main@error,f
 13165  0657  1D03               	skipz
 13166  0658  0008               	return
 13167                           
 13168                           ;main_B1.c: 506: myMain.Error_Run = 0;
 13169  0659  0022               	movlb	2	; select bank2
 13170  065A  11AA               	bcf	(_myMain^(0+256)+10),3
 13171                           
 13172                           ;main_B1.c: 511: setLED(error, 110);
 13173  065B  306E               	movlw	110
 13174  065C  0020               	movlb	0	; select bank0
 13175  065D  00AE               	movwf	??_Exception_Main
 13176  065E  082E               	movf	??_Exception_Main,w
 13177  065F  00A3               	movwf	setLED@command
 13178  0660  0836               	movf	Exception_Main@error,w
 13179  0661  3194  2451         	fcall	_setLED
 13180                           
 13181                           ;main_B1.c: 522: }
 13182                           ;main_B1.c: 523: } else {
 13183  0663  0008               	return
 13184  0664                     l9971:	
 13185                           
 13186                           ;main_B1.c: 524: if (error != 0) {
 13187  0664  0020               	movlb	0	; select bank0
 13188  0665  0836               	movf	Exception_Main@error,w
 13189  0666  1903               	btfsc	3,2
 13190  0667  0008               	return
 13191                           
 13192                           ;main_B1.c: 525: myMain.Error_Run = 1;
 13193  0668  0022               	movlb	2	; select bank2
 13194  0669  15AA               	bsf	(_myMain^(0+256)+10),3
 13195                           
 13196                           ;main_B1.c: 529: setLED(error, 111);
 13197  066A  306F               	movlw	111
 13198  066B  0020               	movlb	0	; select bank0
 13199  066C  00AE               	movwf	??_Exception_Main
 13200  066D  082E               	movf	??_Exception_Main,w
 13201  066E  00A3               	movwf	setLED@command
 13202  066F  0836               	movf	Exception_Main@error,w
 13203  0670  3194  2451  3186   	fcall	_setLED
 13204                           
 13205                           ;main_B1.c: 538: switch (error) {
 13206  0673  2F10               	goto	l10019
 13207  0674                     l9977:	
 13208                           ;main_B1.c: 539: case 2:
 13209                           
 13210                           
 13211                           ;main_B1.c: 546: if (getMain_All_LightsStatus() == 1) {
 13212  0674  319B  2347  3186   	fcall	_getMain_All_LightsStatus
 13213  0677  3A01               	xorlw	1
 13214  0678  1D03               	skipz
 13215  0679  2E83               	goto	l9981
 13216                           
 13217                           ;main_B1.c: 547: setBuz(10, 300);
 13218  067A  302C               	movlw	44
 13219  067B  0020               	movlb	0	; select bank0
 13220  067C  00AA               	movwf	setBuz@time
 13221  067D  3001               	movlw	1
 13222  067E  00AB               	movwf	setBuz@time+1
 13223  067F  300A               	movlw	10
 13224  0680  3194  24F8  3186   	fcall	_setBuz
 13225  0683                     l9981:	
 13226                           
 13227                           ;main_B1.c: 548: }
 13228                           ;main_B1.c: 550: for (int i = 0; i < count; i++) {
 13229  0683  0020               	movlb	0	; select bank0
 13230  0684  01B1               	clrf	Exception_Main@i
 13231  0685  01B2               	clrf	Exception_Main@i+1
 13232  0686                     l9991:	
 13233  0686  0832               	movf	Exception_Main@i+1,w
 13234  0687  3A80               	xorlw	128
 13235  0688  00AE               	movwf	??_Exception_Main
 13236  0689  3080               	movlw	128
 13237  068A  022E               	subwf	??_Exception_Main,w
 13238  068B  1D03               	skipz
 13239  068C  2E8F               	goto	u11625
 13240  068D  0830               	movf	Exception_Main@count,w
 13241  068E  0231               	subwf	Exception_Main@i,w
 13242  068F                     u11625:	
 13243  068F  1803               	btfsc	3,0
 13244  0690  2EB1               	goto	u11620
 13245                           
 13246                           ;main_B1.c: 552: if (getDimmerLights_Status(i + 1) == 1) {
 13247  0691  0020               	movlb	0	; select bank0
 13248  0692  0831               	movf	Exception_Main@i,w
 13249  0693  3E01               	addlw	1
 13250  0694  319A  2284  3186   	fcall	_getDimmerLights_Status
 13251  0697  3A01               	xorlw	1
 13252  0698  1D03               	skipz
 13253  0699  2EAB               	goto	l9989
 13254                           
 13255                           ;main_B1.c: 553: DimmerLights->SwFlag = 1;
 13256  069A  0021               	movlb	1	; select bank1
 13257  069B  084F               	movf	_DimmerLights^(0+128),w
 13258  069C  0086               	movwf	6
 13259  069D  3001               	movlw	1	; select bank2/3
 13260  069E  0087               	movwf	7
 13261  069F  1401               	bsf	1,0
 13262                           
 13263                           ;main_B1.c: 554: DimmerLights->Status = 0;
 13264  06A0  0A4F               	incf	_DimmerLights^(0+128),w
 13265  06A1  0086               	movwf	6
 13266  06A2  3001               	movlw	1	; select bank2/3
 13267  06A3  0087               	movwf	7
 13268  06A4  1001               	bcf	1,0
 13269                           
 13270                           ;main_B1.c: 555: setDimmerLights_SwOff(i + 1);
 13271  06A5  0020               	movlb	0	; select bank0
 13272  06A6  0831               	movf	Exception_Main@i,w
 13273  06A7  3E01               	addlw	1
 13274  06A8  3191  21A8  3186   	fcall	_setDimmerLights_SwOff
 13275  06AB                     l9989:	
 13276  06AB  3001               	movlw	1
 13277  06AC  0020               	movlb	0	; select bank0
 13278  06AD  07B1               	addwf	Exception_Main@i,f
 13279  06AE  3000               	movlw	0
 13280  06AF  3DB2               	addwfc	Exception_Main@i+1,f
 13281  06B0  2E86               	goto	l9991
 13282  06B1                     u11620:	
 13283  06B1  0020               	movlb	0	; select bank0
 13284  06B2  0008               	return
 13285  06B3                     l9993:	
 13286                           ;main_B1.c: 561: case 3:
 13287                           
 13288                           ;main_B1.c: 556: }
 13289                           ;main_B1.c: 557: }
 13290                           ;main_B1.c: 560: break;
 13291                           
 13292                           
 13293                           ;main_B1.c: 563: setBuz(5, 300);
 13294  06B3  302C               	movlw	44
 13295  06B4  0020               	movlb	0	; select bank0
 13296  06B5  00AA               	movwf	setBuz@time
 13297  06B6  3001               	movlw	1
 13298  06B7  00AB               	movwf	setBuz@time+1
 13299  06B8  3005               	movlw	5
 13300  06B9  3194  24F8  3186   	fcall	_setBuz
 13301                           
 13302                           ;main_B1.c: 564: lights = getDimmerLights_Line();
 13303  06BC  319B  2393  3186   	fcall	_getDimmerLights_Line
 13304  06BF  0020               	movlb	0	; select bank0
 13305  06C0  00AE               	movwf	??_Exception_Main
 13306  06C1  082E               	movf	??_Exception_Main,w
 13307  06C2  00B5               	movwf	Exception_Main@lights
 13308                           
 13309                           ;main_B1.c: 565: if (lights == 0) {
 13310  06C3  08B5               	movf	Exception_Main@lights,f
 13311  06C4  1D03               	skipz
 13312  06C5  2EF5               	goto	l10011
 13313                           
 13314                           ;main_B1.c: 567: for (int i = 0; i < count; i++) {
 13315  06C6  01B3               	clrf	Exception_Main@i_6825
 13316  06C7  01B4               	clrf	Exception_Main@i_6825+1
 13317  06C8                     l10009:	
 13318  06C8  0834               	movf	Exception_Main@i_6825+1,w
 13319  06C9  3A80               	xorlw	128
 13320  06CA  00AE               	movwf	??_Exception_Main
 13321  06CB  3080               	movlw	128
 13322  06CC  022E               	subwf	??_Exception_Main,w
 13323  06CD  1D03               	skipz
 13324  06CE  2ED1               	goto	u11655
 13325  06CF  0830               	movf	Exception_Main@count,w
 13326  06D0  0233               	subwf	Exception_Main@i_6825,w
 13327  06D1                     u11655:	
 13328  06D1  1803               	btfsc	3,0
 13329  06D2  2EF3               	goto	u11650
 13330                           
 13331                           ;main_B1.c: 569: if (getDimmerLights_Status(i + 1) == 1) {
 13332  06D3  0020               	movlb	0	; select bank0
 13333  06D4  0833               	movf	Exception_Main@i_6825,w
 13334  06D5  3E01               	addlw	1
 13335  06D6  319A  2284  3186   	fcall	_getDimmerLights_Status
 13336  06D9  3A01               	xorlw	1
 13337  06DA  1D03               	skipz
 13338  06DB  2EED               	goto	l10007
 13339                           
 13340                           ;main_B1.c: 570: DimmerLights->SwFlag = 1;
 13341  06DC  0021               	movlb	1	; select bank1
 13342  06DD  084F               	movf	_DimmerLights^(0+128),w
 13343  06DE  0086               	movwf	6
 13344  06DF  3001               	movlw	1	; select bank2/3
 13345  06E0  0087               	movwf	7
 13346  06E1  1401               	bsf	1,0
 13347                           
 13348                           ;main_B1.c: 571: DimmerLights->Status = 0;
 13349  06E2  0A4F               	incf	_DimmerLights^(0+128),w
 13350  06E3  0086               	movwf	6
 13351  06E4  3001               	movlw	1	; select bank2/3
 13352  06E5  0087               	movwf	7
 13353  06E6  1001               	bcf	1,0
 13354                           
 13355                           ;main_B1.c: 572: setDimmerLights_SwOff(i + 1);
 13356  06E7  0020               	movlb	0	; select bank0
 13357  06E8  0833               	movf	Exception_Main@i_6825,w
 13358  06E9  3E01               	addlw	1
 13359  06EA  3191  21A8  3186   	fcall	_setDimmerLights_SwOff
 13360  06ED                     l10007:	
 13361  06ED  3001               	movlw	1
 13362  06EE  0020               	movlb	0	; select bank0
 13363  06EF  07B3               	addwf	Exception_Main@i_6825,f
 13364  06F0  3000               	movlw	0
 13365  06F1  3DB4               	addwfc	Exception_Main@i_6825+1,f
 13366  06F2  2EC8               	goto	l10009
 13367  06F3                     u11650:	
 13368  06F3  0020               	movlb	0	; select bank0
 13369  06F4  0008               	return
 13370  06F5                     l10011:	
 13371                           ;main_B1.c: 573: }
 13372                           ;main_B1.c: 574: }
 13373                           ;main_B1.c: 575: } else {
 13374                           
 13375                           
 13376                           ;main_B1.c: 577: if (getDimmerLights_Status(lights) == 1) {
 13377  06F5  0020               	movlb	0	; select bank0
 13378  06F6  0835               	movf	Exception_Main@lights,w
 13379  06F7  319A  2284  3186   	fcall	_getDimmerLights_Status
 13380  06FA  3A01               	xorlw	1
 13381  06FB  1903               	btfsc	3,2
 13382  06FC  2EFF               	goto	l10013
 13383  06FD  0020               	movlb	0	; select bank0
 13384  06FE  0008               	return
 13385  06FF                     l10013:	
 13386                           
 13387                           ;main_B1.c: 579: DimmerLights->SwFlag = 1;
 13388  06FF  0021               	movlb	1	; select bank1
 13389  0700  084F               	movf	_DimmerLights^(0+128),w
 13390  0701  0086               	movwf	6
 13391  0702  3001               	movlw	1	; select bank2/3
 13392  0703  0087               	movwf	7
 13393  0704  1401               	bsf	1,0
 13394                           
 13395                           ;main_B1.c: 580: DimmerLights->Status = 0;
 13396  0705  0A4F               	incf	_DimmerLights^(0+128),w
 13397  0706  0086               	movwf	6
 13398  0707  3001               	movlw	1	; select bank2/3
 13399  0708  0087               	movwf	7
 13400  0709  1001               	bcf	1,0
 13401                           
 13402                           ;main_B1.c: 581: setDimmerLights_SwOff(lights);
 13403  070A  0020               	movlb	0	; select bank0
 13404  070B  0835               	movf	Exception_Main@lights,w
 13405  070C  3191  21A8         	fcall	_setDimmerLights_SwOff
 13406  070E  0020               	movlb	0	; select bank0
 13407  070F  0008               	return
 13408  0710                     l10019:	
 13409                           ;main_B1.c: 586: }
 13410                           
 13411                           ;main_B1.c: 582: }
 13412                           ;main_B1.c: 583: }
 13413                           ;main_B1.c: 585: break;
 13414                           
 13415  0710  0020               	movlb	0	; select bank0
 13416  0711  0836               	movf	Exception_Main@error,w
 13417                           
 13418                           ; Switch size 1, requested type "space"
 13419                           ; Number of cases is 2, Range of values is 2 to 3
 13420                           ; switch strategies available:
 13421                           ; Name         Instructions Cycles
 13422                           ; simple_byte            7     4 (average)
 13423                           ; direct_byte           13     9 (fixed)
 13424                           ; jumptable            263     9 (fixed)
 13425                           ;	Chosen strategy is simple_byte
 13426  0712  3A02               	xorlw	2	; case 2
 13427  0713  1903               	skipnz
 13428  0714  2E74               	goto	l9977
 13429  0715  3A01               	xorlw	1	; case 3
 13430  0716  1903               	skipnz
 13431  0717  2EB3               	goto	l9993
 13432  0718  2F1A               	goto	l2887
 13433  0719  0008               	return
 13434  071A                     l2887:	
 13435  071A  0008               	return
 13436  071B                     __end_of_Exception_Main:	
 13437                           
 13438                           	psect	text85
 13439  1B93                     __ptext85:	
 13440 ;; *************** function _getDimmerLights_Line *****************
 13441 ;; Defined at:
 13442 ;;		line 978 in file "../src/Dimmer_B1.c"
 13443 ;; Parameters:    Size  Location     Type
 13444 ;;		None
 13445 ;; Auto vars:     Size  Location     Type
 13446 ;;  line            1    2[BANK0 ] unsigned char 
 13447 ;; Return value:  Size  Location     Type
 13448 ;;                  1    wreg      unsigned char 
 13449 ;; Registers used:
 13450 ;;		wreg, status,2
 13451 ;; Tracked objects:
 13452 ;;		On entry : 0/0
 13453 ;;		On exit  : 0/0
 13454 ;;		Unchanged: 0/0
 13455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13457 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13458 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13459 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13460 ;;Total ram usage:        2 bytes
 13461 ;; Hardware stack levels used:    1
 13462 ;; Hardware stack levels required when called:    5
 13463 ;; This function calls:
 13464 ;;		Nothing
 13465 ;; This function is called by:
 13466 ;;		_Exception_Main
 13467 ;; This function uses a non-reentrant model
 13468 ;;
 13469                           
 13470                           
 13471                           ;psect for function _getDimmerLights_Line
 13472  1B93                     _getDimmerLights_Line:	
 13473                           
 13474                           ;Dimmer_B1.c: 979: char line = 0;
 13475                           
 13476                           ;incstack = 0
 13477                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 13478  1B93  0020               	movlb	0	; select bank0
 13479  1B94  01A2               	clrf	getDimmerLights_Line@line
 13480                           
 13481                           ;Dimmer_B1.c: 981: if (DimmerLights1.Line == 1) {
 13482  1B95  0022               	movlb	2	; select bank2
 13483  1B96  1CE9               	btfss	(_DimmerLights1^(0+256)+1),1
 13484  1B97  2B9C               	goto	l908
 13485                           
 13486                           ;Dimmer_B1.c: 982: line = 1;
 13487  1B98  0020               	movlb	0	; select bank0
 13488  1B99  01A2               	clrf	getDimmerLights_Line@line
 13489  1B9A  0AA2               	incf	getDimmerLights_Line@line,f
 13490                           
 13491                           ;Dimmer_B1.c: 983: }
 13492  1B9B  2BA4               	goto	l909
 13493  1B9C                     l908:	
 13494                           
 13495                           ;Dimmer_B1.c: 986: else if (DimmerLights2.Line == 1) {
 13496  1B9C  0023               	movlb	3	; select bank3
 13497  1B9D  1CD1               	btfss	(_DimmerLights2^(0+384)+1),1
 13498  1B9E  2BA4               	goto	l909
 13499                           
 13500                           ;Dimmer_B1.c: 987: line = 2;
 13501  1B9F  3002               	movlw	2
 13502  1BA0  0020               	movlb	0	; select bank0
 13503  1BA1  00A1               	movwf	??_getDimmerLights_Line
 13504  1BA2  0821               	movf	??_getDimmerLights_Line,w
 13505  1BA3  00A2               	movwf	getDimmerLights_Line@line
 13506  1BA4                     l909:	
 13507                           
 13508                           ;Dimmer_B1.c: 988: }
 13509                           ;Dimmer_B1.c: 995: return line;
 13510  1BA4  0020               	movlb	0	; select bank0
 13511  1BA5  0822               	movf	getDimmerLights_Line@line,w
 13512  1BA6  0008               	return
 13513  1BA7                     __end_of_getDimmerLights_Line:	
 13514                           
 13515                           	psect	text86
 13516  1DDB                     __ptext86:	
 13517 ;; *************** function _DimmerLights_Main *****************
 13518 ;; Defined at:
 13519 ;;		line 736 in file "../src/Dimmer_B1.c"
 13520 ;; Parameters:    Size  Location     Type
 13521 ;;		None
 13522 ;; Auto vars:     Size  Location     Type
 13523 ;;		None
 13524 ;; Return value:  Size  Location     Type
 13525 ;;		None               void
 13526 ;; Registers used:
 13527 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13528 ;; Tracked objects:
 13529 ;;		On entry : 0/0
 13530 ;;		On exit  : 0/0
 13531 ;;		Unchanged: 0/0
 13532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13534 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13536 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13537 ;;Total ram usage:        0 bytes
 13538 ;; Hardware stack levels used:    1
 13539 ;; Hardware stack levels required when called:   10
 13540 ;; This function calls:
 13541 ;;		_getLoad_OK
 13542 ;;		_getMain_All_Error_Status
 13543 ;;		_getMain_All_LightsStatus
 13544 ;;		_setDimmerLights_Main
 13545 ;; This function is called by:
 13546 ;;		_main
 13547 ;; This function uses a non-reentrant model
 13548 ;;
 13549                           
 13550                           
 13551                           ;psect for function _DimmerLights_Main
 13552  1DDB                     _DimmerLights_Main:	
 13553                           
 13554                           ;Dimmer_B1.c: 739: if (Dimmer.LoadGO == 1) {
 13555                           
 13556                           ;incstack = 0
 13557                           ; Regs used in _DimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13558  1DDB  0022               	movlb	2	; select bank2
 13559  1DDC  1CB9               	btfss	_Dimmer^(0+256),1
 13560  1DDD  2DF3               	goto	l9737
 13561                           
 13562                           ;Dimmer_B1.c: 740: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          All_LightsStatus() == 0) {
 13563  1DDE  3199  21A7  319D   	fcall	_getLoad_OK
 13564  1DE1  3A01               	xorlw	1
 13565  1DE2  1903               	skipnz
 13566  1DE3  2DF1               	goto	l850
 13567  1DE4  3000               	movlw	0
 13568  1DE5  3190  20D4  319D   	fcall	_getMain_All_Error_Status
 13569  1DE8  3800               	iorlw	0
 13570  1DE9  1D03               	skipz
 13571  1DEA  2DF1               	goto	l850
 13572  1DEB  319B  2347  319D   	fcall	_getMain_All_LightsStatus
 13573  1DEE  3800               	iorlw	0
 13574  1DEF  1D03               	skipz
 13575  1DF0  2DF3               	goto	l9737
 13576  1DF1                     l850:	
 13577                           
 13578                           ;Dimmer_B1.c: 741: Dimmer.LoadGO = 0;
 13579  1DF1  0022               	movlb	2	; select bank2
 13580  1DF2  10B9               	bcf	_Dimmer^(0+256),1
 13581  1DF3                     l9737:	
 13582                           
 13583                           ;Dimmer_B1.c: 742: }
 13584                           ;Dimmer_B1.c: 743: }
 13585                           ;Dimmer_B1.c: 747: setDimmerLights_Main(1);
 13586  1DF3  3001               	movlw	1
 13587  1DF4  3197  2798  319D   	fcall	_setDimmerLights_Main
 13588                           
 13589                           ;Dimmer_B1.c: 751: setDimmerLights_Main(2);
 13590  1DF7  3002               	movlw	2
 13591  1DF8  3197  2798         	fcall	_setDimmerLights_Main
 13592  1DFA  0008               	return
 13593  1DFB                     __end_of_DimmerLights_Main:	
 13594                           
 13595                           	psect	text87
 13596  1798                     __ptext87:	
 13597 ;; *************** function _setDimmerLights_Main *****************
 13598 ;; Defined at:
 13599 ;;		line 765 in file "../src/Dimmer_B1.c"
 13600 ;; Parameters:    Size  Location     Type
 13601 ;;  lights          1    wreg     unsigned char 
 13602 ;; Auto vars:     Size  Location     Type
 13603 ;;  lights          1    4[BANK1 ] unsigned char 
 13604 ;; Return value:  Size  Location     Type
 13605 ;;		None               void
 13606 ;; Registers used:
 13607 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13608 ;; Tracked objects:
 13609 ;;		On entry : 0/0
 13610 ;;		On exit  : 0/0
 13611 ;;		Unchanged: 0/0
 13612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13614 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13616 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13617 ;;Total ram usage:        1 bytes
 13618 ;; Hardware stack levels used:    1
 13619 ;; Hardware stack levels required when called:    9
 13620 ;; This function calls:
 13621 ;;		_DimmerLights_SelectPointer
 13622 ;;		_getDimmerLights_Allow_Condition
 13623 ;;		_getMain_All_LightsStatus
 13624 ;;		_setDimmerLights_Dimming
 13625 ;;		_setDimmerLights_OnOff
 13626 ;; This function is called by:
 13627 ;;		_DimmerLights_Main
 13628 ;; This function uses a non-reentrant model
 13629 ;;
 13630                           
 13631                           
 13632                           ;psect for function _setDimmerLights_Main
 13633  1798                     _setDimmerLights_Main:	
 13634                           
 13635                           ;incstack = 0
 13636                           ; Regs used in _setDimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13637                           ;setDimmerLights_Main@lights stored from wreg
 13638  1798  0021               	movlb	1	; select bank1
 13639  1799  00E9               	movwf	setDimmerLights_Main@lights^(0+128)
 13640                           
 13641                           ;Dimmer_B1.c: 767: DimmerLights_SelectPointer(lights);
 13642  179A  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13643  179B  319C  2411  3197   	fcall	_DimmerLights_SelectPointer
 13644                           
 13645                           ;Dimmer_B1.c: 768: if (DimmerLights->Trigger == 1) {
 13646  179E  0021               	movlb	1	; select bank1
 13647  179F  084F               	movf	_DimmerLights^(0+128),w
 13648  17A0  0086               	movwf	6
 13649  17A1  3001               	movlw	1	; select bank2/3
 13650  17A2  0087               	movwf	7
 13651  17A3  1C81               	btfss	1,1
 13652  17A4  2FC4               	goto	l9475
 13653                           
 13654                           ;Dimmer_B1.c: 769: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13655  17A5  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13656  17A6  3192  221E  3197   	fcall	_getDimmerLights_Allow_Condition
 13657  17A9  3800               	iorlw	0
 13658  17AA  1D03               	skipz
 13659  17AB  0008               	return
 13660                           
 13661                           ;Dimmer_B1.c: 770: DimmerLights->Trigger = 0;
 13662  17AC  0021               	movlb	1	; select bank1
 13663  17AD  084F               	movf	_DimmerLights^(0+128),w
 13664  17AE  0086               	movwf	6
 13665  17AF  3001               	movlw	1	; select bank2/3
 13666  17B0  0087               	movwf	7
 13667  17B1  1081               	bcf	1,1
 13668                           
 13669                           ;Dimmer_B1.c: 771: if (DimmerLights->Switch == 1) {
 13670  17B2  084F               	movf	_DimmerLights^(0+128),w
 13671  17B3  0086               	movwf	6
 13672  17B4  3001               	movlw	1	; select bank2/3
 13673  17B5  0087               	movwf	7
 13674  17B6  1D01               	btfss	1,2
 13675  17B7  2FBE               	goto	l9473
 13676                           
 13677                           ;Dimmer_B1.c: 772: setDimmerLights_OnOff(lights, 1);
 13678  17B8  01E5               	clrf	setDimmerLights_OnOff@command^(0+128)
 13679  17B9  0AE5               	incf	setDimmerLights_OnOff@command^(0+128),f
 13680  17BA  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13681  17BB  3187  271B         	fcall	_setDimmerLights_OnOff
 13682                           
 13683                           ;Dimmer_B1.c: 773: } else {
 13684  17BD  0008               	return
 13685  17BE                     l9473:	
 13686                           
 13687                           ;Dimmer_B1.c: 774: setDimmerLights_OnOff(lights, 0);
 13688  17BE  0021               	movlb	1	; select bank1
 13689  17BF  01E5               	clrf	setDimmerLights_OnOff@command^(0+128)
 13690  17C0  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13691  17C1  3187  271B         	fcall	_setDimmerLights_OnOff
 13692                           
 13693                           ;Dimmer_B1.c: 775: }
 13694                           ;Dimmer_B1.c: 776: }
 13695                           ;Dimmer_B1.c: 777: } else {
 13696  17C3  0008               	return
 13697  17C4                     l9475:	
 13698                           
 13699                           ;Dimmer_B1.c: 778: if (getMain_All_LightsStatus() == 1) {
 13700  17C4  319B  2347  3197   	fcall	_getMain_All_LightsStatus
 13701  17C7  3A01               	xorlw	1
 13702  17C8  1D03               	skipz
 13703  17C9  2FF3               	goto	l9487
 13704                           
 13705                           ;Dimmer_B1.c: 779: if (DimmerLights->DimmingTrigger == 1) {
 13706  17CA  0021               	movlb	1	; select bank1
 13707  17CB  084F               	movf	_DimmerLights^(0+128),w
 13708  17CC  0086               	movwf	6
 13709  17CD  3001               	movlw	1	; select bank2/3
 13710  17CE  0087               	movwf	7
 13711  17CF  1E01               	btfss	1,4
 13712  17D0  0008               	return
 13713                           
 13714                           ;Dimmer_B1.c: 780: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13715  17D1  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13716  17D2  3192  221E  3197   	fcall	_getDimmerLights_Allow_Condition
 13717  17D5  3800               	iorlw	0
 13718  17D6  1D03               	skipz
 13719  17D7  0008               	return
 13720                           
 13721                           ;Dimmer_B1.c: 781: DimmerLights->DimmingTrigger = 0;
 13722  17D8  0021               	movlb	1	; select bank1
 13723  17D9  084F               	movf	_DimmerLights^(0+128),w
 13724  17DA  0086               	movwf	6
 13725  17DB  3001               	movlw	1	; select bank2/3
 13726  17DC  0087               	movwf	7
 13727  17DD  1201               	bcf	1,4
 13728                           
 13729                           ;Dimmer_B1.c: 782: if (DimmerLights->DimmingSwitch == 1) {
 13730  17DE  084F               	movf	_DimmerLights^(0+128),w
 13731  17DF  0086               	movwf	6
 13732  17E0  3001               	movlw	1	; select bank2/3
 13733  17E1  0087               	movwf	7
 13734  17E2  1E81               	btfss	1,5
 13735  17E3  2FEC               	goto	l9485
 13736                           
 13737                           ;Dimmer_B1.c: 783: setDimmerLights_Dimming(lights, 1);
 13738  17E4  0020               	movlb	0	; select bank0
 13739  17E5  01EB               	clrf	setDimmerLights_Dimming@status
 13740  17E6  0AEB               	incf	setDimmerLights_Dimming@status,f
 13741  17E7  0021               	movlb	1	; select bank1
 13742  17E8  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13743  17E9  3193  23AE         	fcall	_setDimmerLights_Dimming
 13744                           
 13745                           ;Dimmer_B1.c: 784: } else {
 13746  17EB  0008               	return
 13747  17EC                     l9485:	
 13748                           
 13749                           ;Dimmer_B1.c: 785: setDimmerLights_Dimming(lights, 0);
 13750  17EC  0020               	movlb	0	; select bank0
 13751  17ED  01EB               	clrf	setDimmerLights_Dimming@status
 13752  17EE  0021               	movlb	1	; select bank1
 13753  17EF  0869               	movf	setDimmerLights_Main@lights^(0+128),w
 13754  17F0  3193  23AE         	fcall	_setDimmerLights_Dimming
 13755                           
 13756                           ;Dimmer_B1.c: 786: }
 13757                           ;Dimmer_B1.c: 787: }
 13758                           ;Dimmer_B1.c: 788: }
 13759                           ;Dimmer_B1.c: 789: } else {
 13760  17F2  0008               	return
 13761  17F3                     l9487:	
 13762                           
 13763                           ;Dimmer_B1.c: 790: if (DimmerLights->DimmingTrigger == 1) {
 13764  17F3  0021               	movlb	1	; select bank1
 13765  17F4  084F               	movf	_DimmerLights^(0+128),w
 13766  17F5  0086               	movwf	6
 13767  17F6  3001               	movlw	1	; select bank2/3
 13768  17F7  0087               	movwf	7
 13769  17F8  1E01               	btfss	1,4
 13770  17F9  0008               	return
 13771                           
 13772                           ;Dimmer_B1.c: 791: DimmerLights->DimmingTrigger = 0;
 13773  17FA  084F               	movf	_DimmerLights^(0+128),w
 13774  17FB  0086               	movwf	6
 13775  17FC  3001               	movlw	1	; select bank2/3
 13776  17FD  0087               	movwf	7
 13777  17FE  1201               	bcf	1,4
 13778  17FF  0008               	return
 13779  1800                     __end_of_setDimmerLights_Main:	
 13780                           
 13781                           	psect	text88
 13782  071B                     __ptext88:	
 13783 ;; *************** function _setDimmerLights_OnOff *****************
 13784 ;; Defined at:
 13785 ;;		line 799 in file "../src/Dimmer_B1.c"
 13786 ;; Parameters:    Size  Location     Type
 13787 ;;  lights          1    wreg     unsigned char 
 13788 ;;  command         1    0[BANK1 ] unsigned char 
 13789 ;; Auto vars:     Size  Location     Type
 13790 ;;  lights          1    3[BANK1 ] unsigned char 
 13791 ;; Return value:  Size  Location     Type
 13792 ;;		None               void
 13793 ;; Registers used:
 13794 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13795 ;; Tracked objects:
 13796 ;;		On entry : 0/0
 13797 ;;		On exit  : 0/0
 13798 ;;		Unchanged: 0/0
 13799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13800 ;;      Params:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13801 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13802 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
 13803 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
 13804 ;;Total ram usage:        4 bytes
 13805 ;; Hardware stack levels used:    1
 13806 ;; Hardware stack levels required when called:    8
 13807 ;; This function calls:
 13808 ;;		_getCmd_Status
 13809 ;;		_getDelayOff_GO
 13810 ;;		_getDimmerLights_PercentToValue
 13811 ;;		_getDimmerLights_ValueToPercent
 13812 ;;		_getMain_All_LightsStatus
 13813 ;;		_setCmd_Status
 13814 ;;		_setDelayOff_GO
 13815 ;;		_setDimmerIntr_ControlStatus
 13816 ;;		_setDimmerIntr_DimmingValue
 13817 ;;		_setDimmerIntr_Dimming_RF
 13818 ;;		_setDimmerIntr_MaxmumValue
 13819 ;;		_setDimmerLights_Line
 13820 ;;		_setLED
 13821 ;;		_setProductData
 13822 ;;		_setRF_DimmerLights
 13823 ;;		_setTxData
 13824 ;; This function is called by:
 13825 ;;		_setDimmerLights_Main
 13826 ;; This function uses a non-reentrant model
 13827 ;;
 13828                           
 13829                           
 13830                           ;psect for function _setDimmerLights_OnOff
 13831  071B                     _setDimmerLights_OnOff:	
 13832                           
 13833                           ;incstack = 0
 13834                           ; Regs used in _setDimmerLights_OnOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13835                           ;setDimmerLights_OnOff@lights stored from wreg
 13836  071B  0021               	movlb	1	; select bank1
 13837  071C  00E8               	movwf	setDimmerLights_OnOff@lights^(0+128)
 13838                           
 13839                           ;Dimmer_B1.c: 801: if (command == 1) {
 13840  071D  0865               	movf	setDimmerLights_OnOff@command^(0+128),w
 13841  071E  3A01               	xorlw	1
 13842  071F  1D03               	skipz
 13843  0720  2F88               	goto	l9347
 13844                           
 13845                           ;Dimmer_B1.c: 802: setDimmerIntr_ControlStatus(lights, 1);
 13846  0721  0020               	movlb	0	; select bank0
 13847  0722  01A1               	clrf	setDimmerIntr_ControlStatus@command
 13848  0723  0AA1               	incf	setDimmerIntr_ControlStatus@command,f
 13849  0724  0021               	movlb	1	; select bank1
 13850  0725  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13851  0726  3190  2016  3187   	fcall	_setDimmerIntr_ControlStatus
 13852                           
 13853                           ;Dimmer_B1.c: 805: Dimmer.Load_Status = 1;
 13854  0729  0022               	movlb	2	; select bank2
 13855  072A  1539               	bsf	_Dimmer^(0+256),2
 13856                           
 13857                           ;Dimmer_B1.c: 806: setDimmerLights_Line(lights);
 13858  072B  0021               	movlb	1	; select bank1
 13859  072C  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13860  072D  319D  2525  3187   	fcall	_setDimmerLights_Line
 13861                           
 13862                           ;Dimmer_B1.c: 812: setLED(lights, 0);
 13863  0730  0020               	movlb	0	; select bank0
 13864  0731  01A3               	clrf	setLED@command
 13865  0732  0021               	movlb	1	; select bank1
 13866  0733  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13867  0734  3194  2451  3187   	fcall	_setLED
 13868                           
 13869                           ;Dimmer_B1.c: 818: setDimmerIntr_DimmingValue(lights, ((char)(65*0.65)));
 13870  0737  302A               	movlw	42
 13871  0738  0021               	movlb	1	; select bank1
 13872  0739  00E6               	movwf	??_setDimmerLights_OnOff^(0+128)
 13873  073A  0866               	movf	??_setDimmerLights_OnOff^(0+128),w
 13874  073B  0020               	movlb	0	; select bank0
 13875  073C  00A1               	movwf	setDimmerIntr_DimmingValue@value
 13876  073D  0021               	movlb	1	; select bank1
 13877  073E  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13878  073F  319C  243F  3187   	fcall	_setDimmerIntr_DimmingValue
 13879                           
 13880                           ;Dimmer_B1.c: 820: if (DimmerLights->DimmingRun == 1) {
 13881  0742  0021               	movlb	1	; select bank1
 13882  0743  0A4F               	incf	_DimmerLights^(0+128),w
 13883  0744  0086               	movwf	6
 13884  0745  3001               	movlw	1	; select bank2/3
 13885  0746  0087               	movwf	7
 13886  0747  1F01               	btfss	1,6
 13887  0748  2F6D               	goto	l9343
 13888                           
 13889                           ;Dimmer_B1.c: 821: DimmerLights->DimmingRun = 0;
 13890  0749  0A4F               	incf	_DimmerLights^(0+128),w
 13891  074A  0086               	movwf	6
 13892  074B  3001               	movlw	1	; select bank2/3
 13893  074C  0087               	movwf	7
 13894  074D  1301               	bcf	1,6
 13895                           
 13896                           ;Dimmer_B1.c: 822: setDimmerIntr_MaxmumValue(lights, getDimmerLights_PercentToValue(prod
      +                          uct->Data[20 + lights]));
 13897  074E  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13898  074F  3E14               	addlw	20
 13899  0750  076D               	addwf	_product^(0+128),w
 13900  0751  00E6               	movwf	??_setDimmerLights_OnOff^(0+128)
 13901  0752  0866               	movf	??_setDimmerLights_OnOff^(0+128),w
 13902  0753  0086               	movwf	6
 13903  0754  3002               	movlw	2	; select bank4/5
 13904  0755  0087               	movwf	7
 13905  0756  0801               	movf	1,w
 13906  0757  3197  2733  3187   	fcall	_getDimmerLights_PercentToValue
 13907  075A  0021               	movlb	1	; select bank1
 13908  075B  00E7               	movwf	(??_setDimmerLights_OnOff+1)^(0+128)
 13909  075C  0867               	movf	(??_setDimmerLights_OnOff+1)^(0+128),w
 13910  075D  0020               	movlb	0	; select bank0
 13911  075E  00E3               	movwf	setDimmerIntr_MaxmumValue@value
 13912  075F  0021               	movlb	1	; select bank1
 13913  0760  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13914  0761  319C  2428  3187   	fcall	_setDimmerIntr_MaxmumValue
 13915                           
 13916                           ;Dimmer_B1.c: 823: setDimmerIntr_Dimming_RF(lights, 1);
 13917  0764  0020               	movlb	0	; select bank0
 13918  0765  01A1               	clrf	setDimmerIntr_Dimming_RF@command
 13919  0766  0AA1               	incf	setDimmerIntr_Dimming_RF@command,f
 13920  0767  0021               	movlb	1	; select bank1
 13921  0768  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13922  0769  3190  2045  3187   	fcall	_setDimmerIntr_Dimming_RF
 13923                           
 13924                           ;Dimmer_B1.c: 824: } else {
 13925  076C  2FC0               	goto	l9365
 13926  076D                     l9343:	
 13927                           
 13928                           ;Dimmer_B1.c: 825: setDimmerIntr_MaxmumValue(lights, ((char)(65*0.65)));
 13929  076D  302A               	movlw	42
 13930  076E  0021               	movlb	1	; select bank1
 13931  076F  00E6               	movwf	??_setDimmerLights_OnOff^(0+128)
 13932  0770  0866               	movf	??_setDimmerLights_OnOff^(0+128),w
 13933  0771  0020               	movlb	0	; select bank0
 13934  0772  00E3               	movwf	setDimmerIntr_MaxmumValue@value
 13935  0773  0021               	movlb	1	; select bank1
 13936  0774  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13937  0775  319C  2428  3187   	fcall	_setDimmerIntr_MaxmumValue
 13938                           
 13939                           ;Dimmer_B1.c: 826: setProductData((20 + lights), getDimmerLights_ValueToPercent(((char)(
      +                          65*0.65))));
 13940  0778  302A               	movlw	42
 13941  0779  3196  2669  3187   	fcall	_getDimmerLights_ValueToPercent
 13942  077C  0021               	movlb	1	; select bank1
 13943  077D  00E6               	movwf	??_setDimmerLights_OnOff^(0+128)
 13944  077E  0866               	movf	??_setDimmerLights_OnOff^(0+128),w
 13945  077F  0020               	movlb	0	; select bank0
 13946  0780  00E3               	movwf	setProductData@value
 13947  0781  0021               	movlb	1	; select bank1
 13948  0782  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13949  0783  3E14               	addlw	20
 13950  0784  319A  2223  3187   	fcall	_setProductData
 13951                           
 13952                           ;Dimmer_B1.c: 827: }
 13953                           ;Dimmer_B1.c: 830: } else if (command == 0) {
 13954  0787  2FC0               	goto	l9365
 13955  0788                     l9347:	
 13956  0788  0021               	movlb	1	; select bank1
 13957  0789  08E5               	movf	setDimmerLights_OnOff@command^(0+128),f
 13958  078A  1D03               	skipz
 13959  078B  2FC0               	goto	l9365
 13960                           
 13961                           ;Dimmer_B1.c: 831: setDimmerIntr_ControlStatus(lights, 0);
 13962  078C  0020               	movlb	0	; select bank0
 13963  078D  01A1               	clrf	setDimmerIntr_ControlStatus@command
 13964  078E  0021               	movlb	1	; select bank1
 13965  078F  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13966  0790  3190  2016  3187   	fcall	_setDimmerIntr_ControlStatus
 13967                           
 13968                           ;Dimmer_B1.c: 833: Dimmer.Load_Status = 0;
 13969  0793  0022               	movlb	2	; select bank2
 13970  0794  1139               	bcf	_Dimmer^(0+256),2
 13971                           
 13972                           ;Dimmer_B1.c: 834: setDimmerLights_Line(0);
 13973  0795  3000               	movlw	0
 13974  0796  319D  2525  3187   	fcall	_setDimmerLights_Line
 13975                           
 13976                           ;Dimmer_B1.c: 838: if (getDelayOff_GO(lights) == 1) {
 13977  0799  0021               	movlb	1	; select bank1
 13978  079A  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13979  079B  319A  2295  3187   	fcall	_getDelayOff_GO
 13980  079E  3A01               	xorlw	1
 13981  079F  1D03               	skipz
 13982  07A0  2FA9               	goto	l874
 13983                           
 13984                           ;Dimmer_B1.c: 839: setDelayOff_GO(lights, 0, 0);
 13985  07A1  0020               	movlb	0	; select bank0
 13986  07A2  01E6               	clrf	setDelayOff_GO@command
 13987  07A3  01E7               	clrf	setDelayOff_GO@value
 13988  07A4  0021               	movlb	1	; select bank1
 13989  07A5  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13990  07A6  318C  241D  3187   	fcall	_setDelayOff_GO
 13991  07A9                     l874:	
 13992                           
 13993                           ;Dimmer_B1.c: 840: }
 13994                           ;Dimmer_B1.c: 845: setLED(lights, 1);
 13995  07A9  0020               	movlb	0	; select bank0
 13996  07AA  01A3               	clrf	setLED@command
 13997  07AB  0AA3               	incf	setLED@command,f
 13998  07AC  0021               	movlb	1	; select bank1
 13999  07AD  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14000  07AE  3194  2451  3187   	fcall	_setLED
 14001                           
 14002                           ;Dimmer_B1.c: 850: if (lights == 1) {
 14003  07B1  0021               	movlb	1	; select bank1
 14004  07B2  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14005  07B3  3A01               	xorlw	1
 14006  07B4  1D03               	skipz
 14007  07B5  2FB9               	goto	l9361
 14008                           
 14009                           ;Dimmer_B1.c: 851: RA7 = 0;
 14010  07B6  0020               	movlb	0	; select bank0
 14011  07B7  138C               	bcf	12,7	;volatile
 14012                           
 14013                           ;Dimmer_B1.c: 853: }
 14014  07B8  2FC0               	goto	l9365
 14015  07B9                     l9361:	
 14016                           
 14017                           ;Dimmer_B1.c: 856: else if (lights == 2) {
 14018  07B9  0021               	movlb	1	; select bank1
 14019  07BA  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14020  07BB  3A02               	xorlw	2
 14021  07BC  1D03               	skipz
 14022  07BD  2FC0               	goto	l9365
 14023                           
 14024                           ;Dimmer_B1.c: 857: RB4 = 0;
 14025  07BE  0020               	movlb	0	; select bank0
 14026  07BF  120D               	bcf	13,4	;volatile
 14027  07C0                     l9365:	
 14028                           
 14029                           ;Dimmer_B1.c: 858: }
 14030                           ;Dimmer_B1.c: 864: }
 14031                           ;Dimmer_B1.c: 867: setRF_DimmerLights(lights, command);
 14032  07C0  0021               	movlb	1	; select bank1
 14033  07C1  0865               	movf	setDimmerLights_OnOff@command^(0+128),w
 14034  07C2  00E6               	movwf	??_setDimmerLights_OnOff^(0+128)
 14035  07C3  0866               	movf	??_setDimmerLights_OnOff^(0+128),w
 14036  07C4  0020               	movlb	0	; select bank0
 14037  07C5  00E6               	movwf	setRF_DimmerLights@on
 14038  07C6  0021               	movlb	1	; select bank1
 14039  07C7  0868               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14040  07C8  3196  26CE  3187   	fcall	_setRF_DimmerLights
 14041                           
 14042                           ;Dimmer_B1.c: 869: if (getCmd_Status(1) == 1) {
 14043  07CB  3001               	movlw	1
 14044  07CC  319A  22C8  3187   	fcall	_getCmd_Status
 14045  07CF  3A01               	xorlw	1
 14046  07D0  1D03               	skipz
 14047  07D1  2FED               	goto	l9379
 14048                           
 14049                           ;Dimmer_B1.c: 870: if (getMain_All_LightsStatus() == 0) {
 14050  07D2  319B  2347  3187   	fcall	_getMain_All_LightsStatus
 14051  07D5  3800               	iorlw	0
 14052  07D6  1D03               	skipz
 14053  07D7  0008               	return
 14054                           
 14055                           ;Dimmer_B1.c: 871: setCmd_Status(1, 0);
 14056  07D8  0020               	movlb	0	; select bank0
 14057  07D9  01A1               	clrf	setCmd_Status@cmd
 14058  07DA  3001               	movlw	1
 14059  07DB  319C  246D  3187   	fcall	_setCmd_Status
 14060                           
 14061                           ;Dimmer_B1.c: 872: setProductData(11, 0);
 14062  07DE  0020               	movlb	0	; select bank0
 14063  07DF  01E3               	clrf	setProductData@value
 14064  07E0  300B               	movlw	11
 14065  07E1  319A  2223  3187   	fcall	_setProductData
 14066                           
 14067                           ;Dimmer_B1.c: 873: setProductData(17, 0);
 14068  07E4  0020               	movlb	0	; select bank0
 14069  07E5  01E3               	clrf	setProductData@value
 14070  07E6  3011               	movlw	17
 14071  07E7  319A  2223  3187   	fcall	_setProductData
 14072                           
 14073                           ;Dimmer_B1.c: 874: setTxData();
 14074  07EA  318F  2745         	fcall	_setTxData
 14075                           
 14076                           ;Dimmer_B1.c: 875: }
 14077                           ;Dimmer_B1.c: 876: } else {
 14078  07EC  0008               	return
 14079  07ED                     l9379:	
 14080                           
 14081                           ;Dimmer_B1.c: 877: setTxData();
 14082  07ED  318F  2745         	fcall	_setTxData
 14083  07EF  0008               	return
 14084  07F0                     __end_of_setDimmerLights_OnOff:	
 14085                           
 14086                           	psect	text89
 14087  1451                     __ptext89:	
 14088 ;; *************** function _setLED *****************
 14089 ;; Defined at:
 14090 ;;		line 81 in file "../src/LED_B1.c"
 14091 ;; Parameters:    Size  Location     Type
 14092 ;;  led             1    wreg     unsigned char 
 14093 ;;  command         1    3[BANK0 ] unsigned char 
 14094 ;; Auto vars:     Size  Location     Type
 14095 ;;  led             1    4[BANK0 ] unsigned char 
 14096 ;; Return value:  Size  Location     Type
 14097 ;;		None               void
 14098 ;; Registers used:
 14099 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14100 ;; Tracked objects:
 14101 ;;		On entry : 0/0
 14102 ;;		On exit  : 0/0
 14103 ;;		Unchanged: 0/0
 14104 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14105 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14106 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14107 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14108 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14109 ;;Total ram usage:        2 bytes
 14110 ;; Hardware stack levels used:    1
 14111 ;; Hardware stack levels required when called:    6
 14112 ;; This function calls:
 14113 ;;		_LedPointSelect
 14114 ;; This function is called by:
 14115 ;;		_setDimmerLights_OnOff
 14116 ;;		_setLED_Initialization
 14117 ;;		_setSw_Initialization
 14118 ;;		_Exception_Main
 14119 ;; This function uses a non-reentrant model
 14120 ;;
 14121                           
 14122                           
 14123                           ;psect for function _setLED
 14124  1451                     _setLED:	
 14125                           
 14126                           ;incstack = 0
 14127                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14128                           ;setLED@led stored from wreg
 14129  1451  0020               	movlb	0	; select bank0
 14130  1452  00A4               	movwf	setLED@led
 14131                           
 14132                           ;LED_B1.c: 82: LedPointSelect(led);
 14133  1453  0824               	movf	setLED@led,w
 14134  1454  319D  25BB  3194   	fcall	_LedPointSelect
 14135                           
 14136                           ;LED_B1.c: 83: if (command == 0) {
 14137  1457  0020               	movlb	0	; select bank0
 14138  1458  08A3               	movf	setLED@command,f
 14139  1459  1D03               	skipz
 14140  145A  2C68               	goto	l7125
 14141                           
 14142                           ;LED_B1.c: 85: if (led == 1) {
 14143  145B  0824               	movf	setLED@led,w
 14144  145C  3A01               	xorlw	1
 14145  145D  1D03               	skipz
 14146  145E  2C60               	goto	l7117
 14147                           
 14148                           ;LED_B1.c: 89: RA3 = 1;
 14149  145F  158C               	bsf	12,3	;volatile
 14150  1460                     l7117:	
 14151                           
 14152                           ;LED_B1.c: 91: }
 14153                           ;LED_B1.c: 94: if (led == 2) {
 14154  1460  0824               	movf	setLED@led,w
 14155  1461  3A02               	xorlw	2
 14156  1462  1903               	btfsc	3,2
 14157                           
 14158                           ;LED_B1.c: 98: RC7 = 1;
 14159  1463  178E               	bsf	14,7	;volatile
 14160                           
 14161                           ;LED_B1.c: 100: }
 14162                           ;LED_B1.c: 112: if (led == 99) {
 14163  1464  0824               	movf	setLED@led,w
 14164  1465  3A63               	xorlw	99
 14165  1466  1903               	btfsc	3,2
 14166                           
 14167                           ;LED_B1.c: 116: RB5 = 1;
 14168  1467  168D               	bsf	13,5	;volatile
 14169  1468                     l7125:	
 14170                           
 14171                           ;LED_B1.c: 118: }
 14172                           ;LED_B1.c: 120: }
 14173                           ;LED_B1.c: 121: if (command == 1) {
 14174  1468  0823               	movf	setLED@command,w
 14175  1469  3A01               	xorlw	1
 14176  146A  1D03               	skipz
 14177  146B  2C79               	goto	l7139
 14178                           
 14179                           ;LED_B1.c: 123: if (led == 1) {
 14180  146C  0824               	movf	setLED@led,w
 14181  146D  3A01               	xorlw	1
 14182  146E  1D03               	skipz
 14183  146F  2C71               	goto	l7131
 14184                           
 14185                           ;LED_B1.c: 127: RA3 = 0;
 14186  1470  118C               	bcf	12,3	;volatile
 14187  1471                     l7131:	
 14188                           
 14189                           ;LED_B1.c: 129: }
 14190                           ;LED_B1.c: 132: if (led == 2) {
 14191  1471  0824               	movf	setLED@led,w
 14192  1472  3A02               	xorlw	2
 14193  1473  1903               	btfsc	3,2
 14194                           
 14195                           ;LED_B1.c: 136: RC7 = 0;
 14196  1474  138E               	bcf	14,7	;volatile
 14197                           
 14198                           ;LED_B1.c: 138: }
 14199                           ;LED_B1.c: 150: if (led == 99) {
 14200  1475  0824               	movf	setLED@led,w
 14201  1476  3A63               	xorlw	99
 14202  1477  1903               	btfsc	3,2
 14203                           
 14204                           ;LED_B1.c: 154: RB5 = 0;
 14205  1478  128D               	bcf	13,5	;volatile
 14206  1479                     l7139:	
 14207                           
 14208                           ;LED_B1.c: 156: }
 14209                           ;LED_B1.c: 158: }
 14210                           ;LED_B1.c: 159: if (command == 10) {
 14211  1479  0823               	movf	setLED@command,w
 14212  147A  3A0A               	xorlw	10
 14213  147B  1D03               	skipz
 14214  147C  2C99               	goto	l7155
 14215                           
 14216                           ;LED_B1.c: 160: LED->GO = 0;
 14217  147D  0021               	movlb	1	; select bank1
 14218  147E  0850               	movf	_LED^(0+128),w
 14219  147F  0086               	movwf	6
 14220  1480  3001               	movlw	1	; select bank2/3
 14221  1481  0087               	movwf	7
 14222  1482  1081               	bcf	1,1
 14223                           
 14224                           ;LED_B1.c: 161: LED->Time = 0;
 14225  1483  0A50               	incf	_LED^(0+128),w
 14226  1484  0086               	movwf	6
 14227  1485  3001               	movlw	1	; select bank2/3
 14228  1486  0087               	movwf	7
 14229  1487  3000               	movlw	0
 14230  1488  3FC0               	movwi [0]fsr1
 14231  1489  3FC1               	movwi [1]fsr1
 14232                           
 14233                           ;LED_B1.c: 163: if (led == 1) {
 14234  148A  0020               	movlb	0	; select bank0
 14235  148B  0824               	movf	setLED@led,w
 14236  148C  3A01               	xorlw	1
 14237  148D  1D03               	skipz
 14238  148E  2C91               	goto	l7147
 14239                           
 14240                           ;LED_B1.c: 167: RA3 = 1;
 14241  148F  158C               	bsf	12,3	;volatile
 14242                           
 14243                           ;LED_B1.c: 169: }
 14244  1490  2C95               	goto	l7151
 14245  1491                     l7147:	
 14246                           
 14247                           ;LED_B1.c: 172: else if (led == 2) {
 14248  1491  0824               	movf	setLED@led,w
 14249  1492  3A02               	xorlw	2
 14250  1493  1903               	btfsc	3,2
 14251                           
 14252                           ;LED_B1.c: 176: RC7 = 1;
 14253  1494  178E               	bsf	14,7	;volatile
 14254  1495                     l7151:	
 14255                           
 14256                           ;LED_B1.c: 178: }
 14257                           ;LED_B1.c: 190: if (led == 99) {
 14258  1495  0824               	movf	setLED@led,w
 14259  1496  3A63               	xorlw	99
 14260  1497  1903               	btfsc	3,2
 14261                           
 14262                           ;LED_B1.c: 194: RB5 = 1;
 14263  1498  168D               	bsf	13,5	;volatile
 14264  1499                     l7155:	
 14265                           
 14266                           ;LED_B1.c: 196: }
 14267                           ;LED_B1.c: 198: }
 14268                           ;LED_B1.c: 199: if (command == 11) {
 14269  1499  0823               	movf	setLED@command,w
 14270  149A  3A0B               	xorlw	11
 14271  149B  1D03               	skipz
 14272  149C  0008               	return
 14273                           
 14274                           ;LED_B1.c: 200: LED->GO = 1;
 14275  149D  0021               	movlb	1	; select bank1
 14276  149E  0850               	movf	_LED^(0+128),w
 14277  149F  0086               	movwf	6
 14278  14A0  3001               	movlw	1	; select bank2/3
 14279  14A1  0087               	movwf	7
 14280  14A2  1481               	bsf	1,1
 14281  14A3  0008               	return
 14282  14A4                     __end_of_setLED:	
 14283                           
 14284                           	psect	text90
 14285  1DBB                     __ptext90:	
 14286 ;; *************** function _LedPointSelect *****************
 14287 ;; Defined at:
 14288 ;;		line 7 in file "../src/LED_B1.c"
 14289 ;; Parameters:    Size  Location     Type
 14290 ;;  led             1    wreg     unsigned char 
 14291 ;; Auto vars:     Size  Location     Type
 14292 ;;  led             1    2[BANK0 ] unsigned char 
 14293 ;; Return value:  Size  Location     Type
 14294 ;;		None               void
 14295 ;; Registers used:
 14296 ;;		wreg
 14297 ;; Tracked objects:
 14298 ;;		On entry : 0/0
 14299 ;;		On exit  : 0/0
 14300 ;;		Unchanged: 0/0
 14301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14302 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14303 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14304 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14305 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14306 ;;Total ram usage:        2 bytes
 14307 ;; Hardware stack levels used:    1
 14308 ;; Hardware stack levels required when called:    5
 14309 ;; This function calls:
 14310 ;;		Nothing
 14311 ;; This function is called by:
 14312 ;;		_setLED_Initialization
 14313 ;;		_setLED
 14314 ;;		_setLED_Main
 14315 ;; This function uses a non-reentrant model
 14316 ;;
 14317                           
 14318                           
 14319                           ;psect for function _LedPointSelect
 14320  1DBB                     _LedPointSelect:	
 14321                           
 14322                           ;incstack = 0
 14323                           ; Regs used in _LedPointSelect: [wreg]
 14324                           ;LedPointSelect@led stored from wreg
 14325  1DBB  0020               	movlb	0	; select bank0
 14326  1DBC  00A2               	movwf	LedPointSelect@led
 14327                           
 14328                           ;LED_B1.c: 9: if (led == 1) {
 14329  1DBD  0822               	movf	LedPointSelect@led,w
 14330  1DBE  3A01               	xorlw	1
 14331  1DBF  1D03               	skipz
 14332  1DC0  2DC6               	goto	l1114
 14333                           
 14334                           ;LED_B1.c: 10: LED = &VarLED1;
 14335  1DC1  30E6               	movlw	_VarLED1& (0+255)
 14336  1DC2  00A1               	movwf	??_LedPointSelect
 14337  1DC3  0821               	movf	??_LedPointSelect,w
 14338  1DC4  0021               	movlb	1	; select bank1
 14339  1DC5  00D0               	movwf	_LED^(0+128)
 14340  1DC6                     l1114:	
 14341                           
 14342                           ;LED_B1.c: 11: }
 14343                           ;LED_B1.c: 14: if (led == 2) {
 14344  1DC6  0020               	movlb	0	; select bank0
 14345  1DC7  0822               	movf	LedPointSelect@led,w
 14346  1DC8  3A02               	xorlw	2
 14347  1DC9  1D03               	skipz
 14348  1DCA  2DD0               	goto	l1115
 14349                           
 14350                           ;LED_B1.c: 15: LED = &VarLED2;
 14351  1DCB  30EA               	movlw	_VarLED2& (0+255)
 14352  1DCC  00A1               	movwf	??_LedPointSelect
 14353  1DCD  0821               	movf	??_LedPointSelect,w
 14354  1DCE  0021               	movlb	1	; select bank1
 14355  1DCF  00D0               	movwf	_LED^(0+128)
 14356  1DD0                     l1115:	
 14357                           
 14358                           ;LED_B1.c: 16: }
 14359                           ;LED_B1.c: 24: if (led == 99) {
 14360  1DD0  0020               	movlb	0	; select bank0
 14361  1DD1  0822               	movf	LedPointSelect@led,w
 14362  1DD2  3A63               	xorlw	99
 14363  1DD3  1D03               	skipz
 14364  1DD4  0008               	return
 14365                           
 14366                           ;LED_B1.c: 25: LED = &VarErrLED;
 14367  1DD5  30E2               	movlw	_VarErrLED& (0+255)
 14368  1DD6  00A1               	movwf	??_LedPointSelect
 14369  1DD7  0821               	movf	??_LedPointSelect,w
 14370  1DD8  0021               	movlb	1	; select bank1
 14371  1DD9  00D0               	movwf	_LED^(0+128)
 14372  1DDA  0008               	return
 14373  1DDB                     __end_of_LedPointSelect:	
 14374                           
 14375                           	psect	text91
 14376  1045                     __ptext91:	
 14377 ;; *************** function _setDimmerIntr_Dimming_RF *****************
 14378 ;; Defined at:
 14379 ;;		line 184 in file "../src/Dimmer_B1.c"
 14380 ;; Parameters:    Size  Location     Type
 14381 ;;  lights          1    wreg     unsigned char 
 14382 ;;  command         1    1[BANK0 ] unsigned char 
 14383 ;; Auto vars:     Size  Location     Type
 14384 ;;  lights          1    3[BANK0 ] unsigned char 
 14385 ;; Return value:  Size  Location     Type
 14386 ;;		None               void
 14387 ;; Registers used:
 14388 ;;		wreg, status,2, status,0
 14389 ;; Tracked objects:
 14390 ;;		On entry : 0/0
 14391 ;;		On exit  : 0/0
 14392 ;;		Unchanged: 0/0
 14393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14394 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14395 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14396 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14397 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14398 ;;Total ram usage:        3 bytes
 14399 ;; Hardware stack levels used:    1
 14400 ;; Hardware stack levels required when called:    5
 14401 ;; This function calls:
 14402 ;;		Nothing
 14403 ;; This function is called by:
 14404 ;;		_setDimmerLights_OnOff
 14405 ;;		_setRFSW_AdjControl
 14406 ;; This function uses a non-reentrant model
 14407 ;;
 14408                           
 14409                           
 14410                           ;psect for function _setDimmerIntr_Dimming_RF
 14411  1045                     _setDimmerIntr_Dimming_RF:	
 14412                           
 14413                           ;incstack = 0
 14414                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
 14415                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
 14416  1045  0020               	movlb	0	; select bank0
 14417  1046  00A3               	movwf	setDimmerIntr_Dimming_RF@lights
 14418                           
 14419                           ;Dimmer_B1.c: 186: if (lights == 1) {
 14420  1047  0823               	movf	setDimmerIntr_Dimming_RF@lights,w
 14421  1048  3A01               	xorlw	1
 14422  1049  1D03               	skipz
 14423  104A  285D               	goto	l6709
 14424                           
 14425                           ;Dimmer_B1.c: 187: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
 14426  104B  0821               	movf	setDimmerIntr_Dimming_RF@command,w
 14427  104C  3A01               	xorlw	1
 14428  104D  3000               	movlw	0
 14429  104E  1903               	skipnz
 14430  104F  3001               	movlw	1
 14431  1050  00A2               	movwf	??_setDimmerIntr_Dimming_RF
 14432  1051  0EA2               	swapf	??_setDimmerIntr_Dimming_RF,f
 14433  1052  0DA2               	rlf	??_setDimmerIntr_Dimming_RF,f
 14434  1053  0DA2               	rlf	??_setDimmerIntr_Dimming_RF,f
 14435  1054  0021               	movlb	1	; select bank1
 14436  1055  082E               	movf	_DimmerIntr1^(0+128),w
 14437  1056  0020               	movlb	0	; select bank0
 14438  1057  0622               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14439  1058  39BF               	andlw	-65
 14440  1059  0622               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14441  105A  0021               	movlb	1	; select bank1
 14442  105B  00AE               	movwf	_DimmerIntr1^(0+128)
 14443                           
 14444                           ;Dimmer_B1.c: 188: }
 14445  105C  0008               	return
 14446  105D                     l6709:	
 14447                           
 14448                           ;Dimmer_B1.c: 191: else if (lights == 2) {
 14449  105D  0020               	movlb	0	; select bank0
 14450  105E  0823               	movf	setDimmerIntr_Dimming_RF@lights,w
 14451  105F  3A02               	xorlw	2
 14452  1060  1D03               	skipz
 14453  1061  0008               	return
 14454                           
 14455                           ;Dimmer_B1.c: 192: DimmerIntr2.Dimming_RF = command == 1 ? 1 : 0;
 14456  1062  0821               	movf	setDimmerIntr_Dimming_RF@command,w
 14457  1063  3A01               	xorlw	1
 14458  1064  3000               	movlw	0
 14459  1065  1903               	skipnz
 14460  1066  3001               	movlw	1
 14461  1067  00A2               	movwf	??_setDimmerIntr_Dimming_RF
 14462  1068  0EA2               	swapf	??_setDimmerIntr_Dimming_RF,f
 14463  1069  0DA2               	rlf	??_setDimmerIntr_Dimming_RF,f
 14464  106A  0DA2               	rlf	??_setDimmerIntr_Dimming_RF,f
 14465  106B  0021               	movlb	1	; select bank1
 14466  106C  083A               	movf	_DimmerIntr2^(0+128),w
 14467  106D  0020               	movlb	0	; select bank0
 14468  106E  0622               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14469  106F  39BF               	andlw	-65
 14470  1070  0622               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14471  1071  0021               	movlb	1	; select bank1
 14472  1072  00BA               	movwf	_DimmerIntr2^(0+128)
 14473  1073  0008               	return
 14474  1074                     __end_of_setDimmerIntr_Dimming_RF:	
 14475                           
 14476                           	psect	text92
 14477  1C3F                     __ptext92:	
 14478 ;; *************** function _setDimmerIntr_DimmingValue *****************
 14479 ;; Defined at:
 14480 ;;		line 49 in file "../src/Dimmer_B1.c"
 14481 ;; Parameters:    Size  Location     Type
 14482 ;;  lights          1    wreg     unsigned char 
 14483 ;;  value           1    1[BANK0 ] unsigned char 
 14484 ;; Auto vars:     Size  Location     Type
 14485 ;;  lights          1    3[BANK0 ] unsigned char 
 14486 ;; Return value:  Size  Location     Type
 14487 ;;		None               void
 14488 ;; Registers used:
 14489 ;;		wreg
 14490 ;; Tracked objects:
 14491 ;;		On entry : 0/0
 14492 ;;		On exit  : 0/0
 14493 ;;		Unchanged: 0/0
 14494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14495 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14496 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14497 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14498 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14499 ;;Total ram usage:        3 bytes
 14500 ;; Hardware stack levels used:    1
 14501 ;; Hardware stack levels required when called:    5
 14502 ;; This function calls:
 14503 ;;		Nothing
 14504 ;; This function is called by:
 14505 ;;		_setDimmerLights_OnOff
 14506 ;; This function uses a non-reentrant model
 14507 ;;
 14508                           
 14509                           
 14510                           ;psect for function _setDimmerIntr_DimmingValue
 14511  1C3F                     _setDimmerIntr_DimmingValue:	
 14512                           
 14513                           ;incstack = 0
 14514                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 14515                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 14516  1C3F  0020               	movlb	0	; select bank0
 14517  1C40  00A3               	movwf	setDimmerIntr_DimmingValue@lights
 14518                           
 14519                           ;Dimmer_B1.c: 51: if (lights == 1) {
 14520  1C41  0823               	movf	setDimmerIntr_DimmingValue@lights,w
 14521  1C42  3A01               	xorlw	1
 14522  1C43  1D03               	skipz
 14523  1C44  2C4B               	goto	l7041
 14524                           
 14525                           ;Dimmer_B1.c: 52: DimmerIntr1.DimmingValue = value;
 14526  1C45  0821               	movf	setDimmerIntr_DimmingValue@value,w
 14527  1C46  00A2               	movwf	??_setDimmerIntr_DimmingValue
 14528  1C47  0822               	movf	??_setDimmerIntr_DimmingValue,w
 14529  1C48  0021               	movlb	1	; select bank1
 14530  1C49  00B3               	movwf	(_DimmerIntr1^(0+128)+5)
 14531                           
 14532                           ;Dimmer_B1.c: 53: }
 14533  1C4A  0008               	return
 14534  1C4B                     l7041:	
 14535                           
 14536                           ;Dimmer_B1.c: 56: else if (lights == 2) {
 14537  1C4B  0020               	movlb	0	; select bank0
 14538  1C4C  0823               	movf	setDimmerIntr_DimmingValue@lights,w
 14539  1C4D  3A02               	xorlw	2
 14540  1C4E  1D03               	skipz
 14541  1C4F  0008               	return
 14542                           
 14543                           ;Dimmer_B1.c: 57: DimmerIntr2.DimmingValue = value;
 14544  1C50  0821               	movf	setDimmerIntr_DimmingValue@value,w
 14545  1C51  00A2               	movwf	??_setDimmerIntr_DimmingValue
 14546  1C52  0822               	movf	??_setDimmerIntr_DimmingValue,w
 14547  1C53  0021               	movlb	1	; select bank1
 14548  1C54  00BF               	movwf	(_DimmerIntr2^(0+128)+5)
 14549  1C55  0008               	return
 14550  1C56                     __end_of_setDimmerIntr_DimmingValue:	
 14551                           
 14552                           	psect	text93
 14553  1016                     __ptext93:	
 14554 ;; *************** function _setDimmerIntr_ControlStatus *****************
 14555 ;; Defined at:
 14556 ;;		line 31 in file "../src/Dimmer_B1.c"
 14557 ;; Parameters:    Size  Location     Type
 14558 ;;  lights          1    wreg     unsigned char 
 14559 ;;  command         1    1[BANK0 ] unsigned char 
 14560 ;; Auto vars:     Size  Location     Type
 14561 ;;  lights          1    3[BANK0 ] unsigned char 
 14562 ;; Return value:  Size  Location     Type
 14563 ;;		None               void
 14564 ;; Registers used:
 14565 ;;		wreg, status,2, status,0
 14566 ;; Tracked objects:
 14567 ;;		On entry : 0/0
 14568 ;;		On exit  : 0/0
 14569 ;;		Unchanged: 0/0
 14570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14571 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14572 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14573 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14574 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14575 ;;Total ram usage:        3 bytes
 14576 ;; Hardware stack levels used:    1
 14577 ;; Hardware stack levels required when called:    5
 14578 ;; This function calls:
 14579 ;;		Nothing
 14580 ;; This function is called by:
 14581 ;;		_setDimmerLights_OnOff
 14582 ;; This function uses a non-reentrant model
 14583 ;;
 14584                           
 14585                           
 14586                           ;psect for function _setDimmerIntr_ControlStatus
 14587  1016                     _setDimmerIntr_ControlStatus:	
 14588                           
 14589                           ;incstack = 0
 14590                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 14591                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 14592  1016  0020               	movlb	0	; select bank0
 14593  1017  00A3               	movwf	setDimmerIntr_ControlStatus@lights
 14594                           
 14595                           ;Dimmer_B1.c: 33: if (lights == 1) {
 14596  1018  0823               	movf	setDimmerIntr_ControlStatus@lights,w
 14597  1019  3A01               	xorlw	1
 14598  101A  1D03               	skipz
 14599  101B  282E               	goto	l7033
 14600                           
 14601                           ;Dimmer_B1.c: 34: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 14602  101C  0821               	movf	setDimmerIntr_ControlStatus@command,w
 14603  101D  3A01               	xorlw	1
 14604  101E  3000               	movlw	0
 14605  101F  1903               	skipnz
 14606  1020  3001               	movlw	1
 14607  1021  00A2               	movwf	??_setDimmerIntr_ControlStatus
 14608  1022  0DA2               	rlf	??_setDimmerIntr_ControlStatus,f
 14609  1023  0DA2               	rlf	??_setDimmerIntr_ControlStatus,f
 14610  1024  0DA2               	rlf	??_setDimmerIntr_ControlStatus,f
 14611  1025  0021               	movlb	1	; select bank1
 14612  1026  082E               	movf	_DimmerIntr1^(0+128),w
 14613  1027  0020               	movlb	0	; select bank0
 14614  1028  0622               	xorwf	??_setDimmerIntr_ControlStatus,w
 14615  1029  39F7               	andlw	-9
 14616  102A  0622               	xorwf	??_setDimmerIntr_ControlStatus,w
 14617  102B  0021               	movlb	1	; select bank1
 14618  102C  00AE               	movwf	_DimmerIntr1^(0+128)
 14619                           
 14620                           ;Dimmer_B1.c: 35: }
 14621  102D  0008               	return
 14622  102E                     l7033:	
 14623                           
 14624                           ;Dimmer_B1.c: 38: else if (lights == 2) {
 14625  102E  0020               	movlb	0	; select bank0
 14626  102F  0823               	movf	setDimmerIntr_ControlStatus@lights,w
 14627  1030  3A02               	xorlw	2
 14628  1031  1D03               	skipz
 14629  1032  0008               	return
 14630                           
 14631                           ;Dimmer_B1.c: 39: DimmerIntr2.ControlStatus = command == 1 ? 1 : 0;
 14632  1033  0821               	movf	setDimmerIntr_ControlStatus@command,w
 14633  1034  3A01               	xorlw	1
 14634  1035  3000               	movlw	0
 14635  1036  1903               	skipnz
 14636  1037  3001               	movlw	1
 14637  1038  00A2               	movwf	??_setDimmerIntr_ControlStatus
 14638  1039  0DA2               	rlf	??_setDimmerIntr_ControlStatus,f
 14639  103A  0DA2               	rlf	??_setDimmerIntr_ControlStatus,f
 14640  103B  0DA2               	rlf	??_setDimmerIntr_ControlStatus,f
 14641  103C  0021               	movlb	1	; select bank1
 14642  103D  083A               	movf	_DimmerIntr2^(0+128),w
 14643  103E  0020               	movlb	0	; select bank0
 14644  103F  0622               	xorwf	??_setDimmerIntr_ControlStatus,w
 14645  1040  39F7               	andlw	-9
 14646  1041  0622               	xorwf	??_setDimmerIntr_ControlStatus,w
 14647  1042  0021               	movlb	1	; select bank1
 14648  1043  00BA               	movwf	_DimmerIntr2^(0+128)
 14649  1044  0008               	return
 14650  1045                     __end_of_setDimmerIntr_ControlStatus:	
 14651                           
 14652                           	psect	text94
 14653  0C1D                     __ptext94:	
 14654 ;; *************** function _setDelayOff_GO *****************
 14655 ;; Defined at:
 14656 ;;		line 87 in file "../src/DelayOff_B1.c"
 14657 ;; Parameters:    Size  Location     Type
 14658 ;;  sw              1    wreg     unsigned char 
 14659 ;;  command         1   70[BANK0 ] unsigned char 
 14660 ;;  value           1   71[BANK0 ] unsigned char 
 14661 ;; Auto vars:     Size  Location     Type
 14662 ;;  sw              1   77[BANK0 ] unsigned char 
 14663 ;;  k               1   76[BANK0 ] unsigned char 
 14664 ;;  j               1   75[BANK0 ] unsigned char 
 14665 ;;  i               1   74[BANK0 ] unsigned char 
 14666 ;; Return value:  Size  Location     Type
 14667 ;;		None               void
 14668 ;; Registers used:
 14669 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14670 ;; Tracked objects:
 14671 ;;		On entry : 0/0
 14672 ;;		On exit  : 0/0
 14673 ;;		Unchanged: 0/0
 14674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14675 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14676 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14677 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14678 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14679 ;;Total ram usage:        8 bytes
 14680 ;; Hardware stack levels used:    1
 14681 ;; Hardware stack levels required when called:    6
 14682 ;; This function calls:
 14683 ;;		_DelayOffPointSelect
 14684 ;;		___bmul
 14685 ;;		_setProductData
 14686 ;; This function is called by:
 14687 ;;		_setDimmerLights_OnOff
 14688 ;;		_setRFSW_Control
 14689 ;; This function uses a non-reentrant model
 14690 ;;
 14691                           
 14692                           
 14693                           ;psect for function _setDelayOff_GO
 14694  0C1D                     _setDelayOff_GO:	
 14695                           
 14696                           ;incstack = 0
 14697                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14698                           ;setDelayOff_GO@sw stored from wreg
 14699  0C1D  0020               	movlb	0	; select bank0
 14700  0C1E  00ED               	movwf	setDelayOff_GO@sw
 14701                           
 14702                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 14703  0C1F  086D               	movf	setDelayOff_GO@sw,w
 14704  0C20  319B  23FA  318C   	fcall	_DelayOffPointSelect
 14705                           
 14706                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 14707  0C23  0020               	movlb	0	; select bank0
 14708  0C24  0866               	movf	setDelayOff_GO@command,w
 14709  0C25  3A01               	xorlw	1
 14710  0C26  3000               	movlw	0
 14711  0C27  1903               	skipnz
 14712  0C28  3001               	movlw	1
 14713  0C29  00E8               	movwf	??_setDelayOff_GO
 14714  0C2A  0021               	movlb	1	; select bank1
 14715  0C2B  084D               	movf	_DelayOff^(0+128),w
 14716  0C2C  0086               	movwf	6
 14717  0C2D  3001               	movlw	1	; select bank2/3
 14718  0C2E  0087               	movwf	7
 14719  0C2F  0020               	movlb	0	; select bank0
 14720  0C30  0DE8               	rlf	??_setDelayOff_GO,f
 14721  0C31  0801               	movf	1,w
 14722  0C32  0668               	xorwf	??_setDelayOff_GO,w
 14723  0C33  39FD               	andlw	-3
 14724  0C34  0668               	xorwf	??_setDelayOff_GO,w
 14725  0C35  0081               	movwf	1
 14726                           
 14727                           ;DelayOff_B1.c: 91: DelayOff->SecondTime = 0;
 14728  0C36  0021               	movlb	1	; select bank1
 14729  0C37  084D               	movf	_DelayOff^(0+128),w
 14730  0C38  3E02               	addlw	2
 14731  0C39  0086               	movwf	6
 14732  0C3A  3001               	movlw	1	; select bank2/3
 14733  0C3B  0087               	movwf	7
 14734  0C3C  3000               	movlw	0
 14735  0C3D  3FC0               	movwi [0]fsr1
 14736  0C3E  3FC1               	movwi [1]fsr1
 14737                           
 14738                           ;DelayOff_B1.c: 92: DelayOff->MinuteTime = 0;
 14739  0C3F  084D               	movf	_DelayOff^(0+128),w
 14740  0C40  3E04               	addlw	4
 14741  0C41  0086               	movwf	6
 14742  0C42  3001               	movlw	1	; select bank2/3
 14743  0C43  0087               	movwf	7
 14744  0C44  0181               	clrf	1
 14745                           
 14746                           ;DelayOff_B1.c: 94: if (command == 1) {
 14747  0C45  0020               	movlb	0	; select bank0
 14748  0C46  0866               	movf	setDelayOff_GO@command,w
 14749  0C47  3A01               	xorlw	1
 14750  0C48  1D03               	skipz
 14751  0C49  2C9F               	goto	l9189
 14752                           
 14753                           ;DelayOff_B1.c: 96: char i = 5, j = 0, k = 0;
 14754  0C4A  3005               	movlw	5
 14755  0C4B  00E8               	movwf	??_setDelayOff_GO
 14756  0C4C  0868               	movf	??_setDelayOff_GO,w
 14757  0C4D  00EA               	movwf	setDelayOff_GO@i
 14758  0C4E  01EB               	clrf	setDelayOff_GO@j
 14759  0C4F  01EC               	clrf	setDelayOff_GO@k
 14760                           
 14761                           ;DelayOff_B1.c: 97: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x30) {
 14762  0C50  300F               	movlw	15
 14763  0C51  0567               	andwf	setDelayOff_GO@value,w
 14764  0C52  00E8               	movwf	??_setDelayOff_GO
 14765  0C53  0868               	movf	??_setDelayOff_GO,w
 14766  0C54  3A05               	xorlw	5
 14767  0C55  1903               	skipnz
 14768  0C56  2C5B               	goto	l9175
 14769  0C57  0867               	movf	setDelayOff_GO@value,w
 14770  0C58  390F               	andlw	15
 14771  0C59  1D03               	btfss	3,2
 14772  0C5A  2C8B               	goto	l9185
 14773  0C5B                     l9175:	
 14774  0C5B  3031               	movlw	49
 14775  0C5C  0267               	subwf	setDelayOff_GO@value,w
 14776  0C5D  1803               	skipnc
 14777  0C5E  2C8B               	goto	l9185
 14778                           
 14779                           ;DelayOff_B1.c: 98: j = value & 0x0f;
 14780  0C5F  0867               	movf	setDelayOff_GO@value,w
 14781  0C60  390F               	andlw	15
 14782  0C61  00E8               	movwf	??_setDelayOff_GO
 14783  0C62  0868               	movf	??_setDelayOff_GO,w
 14784  0C63  00EB               	movwf	setDelayOff_GO@j
 14785                           
 14786                           ;DelayOff_B1.c: 99: k = (value >> 4) & 0x0f;
 14787  0C64  0867               	movf	setDelayOff_GO@value,w
 14788  0C65  00E8               	movwf	??_setDelayOff_GO
 14789  0C66  3004               	movlw	4
 14790  0C67                     u10105:	
 14791  0C67  36E8               	lsrf	??_setDelayOff_GO,f
 14792  0C68  0B89               	decfsz	9,f
 14793  0C69  2C67               	goto	u10105
 14794  0C6A  0868               	movf	??_setDelayOff_GO,w
 14795  0C6B  390F               	andlw	15
 14796  0C6C  00E9               	movwf	??_setDelayOff_GO+1
 14797  0C6D  0869               	movf	??_setDelayOff_GO+1,w
 14798  0C6E  00EC               	movwf	setDelayOff_GO@k
 14799                           
 14800                           ;DelayOff_B1.c: 100: DelayOff->Value = j + (k * 10);
 14801  0C6F  300A               	movlw	10
 14802  0C70  00E8               	movwf	??_setDelayOff_GO
 14803  0C71  0868               	movf	??_setDelayOff_GO,w
 14804  0C72  00A1               	movwf	___bmul@multiplicand
 14805  0C73  086C               	movf	setDelayOff_GO@k,w
 14806  0C74  319A  22DA  318C   	fcall	___bmul
 14807  0C77  0020               	movlb	0	; select bank0
 14808  0C78  076B               	addwf	setDelayOff_GO@j,w
 14809  0C79  00E9               	movwf	??_setDelayOff_GO+1
 14810  0C7A  0021               	movlb	1	; select bank1
 14811  0C7B  0A4D               	incf	_DelayOff^(0+128),w
 14812  0C7C  0086               	movwf	6
 14813  0C7D  3001               	movlw	1	; select bank2/3
 14814  0C7E  0087               	movwf	7
 14815  0C7F  0020               	movlb	0	; select bank0
 14816  0C80  0869               	movf	??_setDelayOff_GO+1,w
 14817  0C81  0081               	movwf	1
 14818                           
 14819                           ;DelayOff_B1.c: 102: setProductData(26 + sw, value);
 14820  0C82  0867               	movf	setDelayOff_GO@value,w
 14821  0C83  00E8               	movwf	??_setDelayOff_GO
 14822  0C84  0868               	movf	??_setDelayOff_GO,w
 14823  0C85  00E3               	movwf	setProductData@value
 14824  0C86  086D               	movf	setDelayOff_GO@sw,w
 14825  0C87  3E1A               	addlw	26
 14826  0C88  319A  2223         	fcall	_setProductData
 14827                           
 14828                           ;DelayOff_B1.c: 103: } else {
 14829  0C8A  0008               	return
 14830  0C8B                     l9185:	
 14831                           
 14832                           ;DelayOff_B1.c: 104: DelayOff->Value = 0x05;
 14833  0C8B  3005               	movlw	5
 14834  0C8C  0020               	movlb	0	; select bank0
 14835  0C8D  00E8               	movwf	??_setDelayOff_GO
 14836  0C8E  0021               	movlb	1	; select bank1
 14837  0C8F  0A4D               	incf	_DelayOff^(0+128),w
 14838  0C90  0086               	movwf	6
 14839  0C91  3001               	movlw	1	; select bank2/3
 14840  0C92  0087               	movwf	7
 14841  0C93  0020               	movlb	0	; select bank0
 14842  0C94  0868               	movf	??_setDelayOff_GO,w
 14843  0C95  0081               	movwf	1
 14844                           
 14845                           ;DelayOff_B1.c: 105: setProductData(26 + sw, 0x05);
 14846  0C96  3005               	movlw	5
 14847  0C97  00E8               	movwf	??_setDelayOff_GO
 14848  0C98  0868               	movf	??_setDelayOff_GO,w
 14849  0C99  00E3               	movwf	setProductData@value
 14850  0C9A  086D               	movf	setDelayOff_GO@sw,w
 14851  0C9B  3E1A               	addlw	26
 14852  0C9C  319A  2223         	fcall	_setProductData
 14853                           
 14854                           ;DelayOff_B1.c: 106: }
 14855                           ;DelayOff_B1.c: 108: } else if (command == 0) {
 14856  0C9E  0008               	return
 14857  0C9F                     l9189:	
 14858  0C9F  0020               	movlb	0	; select bank0
 14859  0CA0  08E6               	movf	setDelayOff_GO@command,f
 14860  0CA1  1D03               	skipz
 14861  0CA2  0008               	return
 14862                           
 14863                           ;DelayOff_B1.c: 109: setProductData(26 + sw, 0);
 14864  0CA3  01E3               	clrf	setProductData@value
 14865  0CA4  086D               	movf	setDelayOff_GO@sw,w
 14866  0CA5  3E1A               	addlw	26
 14867  0CA6  319A  2223         	fcall	_setProductData
 14868  0CA8  0008               	return
 14869  0CA9                     __end_of_setDelayOff_GO:	
 14870                           
 14871                           	psect	text95
 14872  1ADA                     __ptext95:	
 14873 ;; *************** function ___bmul *****************
 14874 ;; Defined at:
 14875 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 14876 ;; Parameters:    Size  Location     Type
 14877 ;;  multiplier      1    wreg     unsigned char 
 14878 ;;  multiplicand    1    1[BANK0 ] unsigned char 
 14879 ;; Auto vars:     Size  Location     Type
 14880 ;;  multiplier      1    4[BANK0 ] unsigned char 
 14881 ;;  product         1    3[BANK0 ] unsigned char 
 14882 ;; Return value:  Size  Location     Type
 14883 ;;                  1    wreg      unsigned char 
 14884 ;; Registers used:
 14885 ;;		wreg, status,2, status,0
 14886 ;; Tracked objects:
 14887 ;;		On entry : 0/0
 14888 ;;		On exit  : 0/0
 14889 ;;		Unchanged: 0/0
 14890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14891 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14892 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14893 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14894 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14895 ;;Total ram usage:        4 bytes
 14896 ;; Hardware stack levels used:    1
 14897 ;; Hardware stack levels required when called:    5
 14898 ;; This function calls:
 14899 ;;		Nothing
 14900 ;; This function is called by:
 14901 ;;		_setDelayOff_GO
 14902 ;;		_DelayTimejudge
 14903 ;; This function uses a non-reentrant model
 14904 ;;
 14905                           
 14906                           
 14907                           ;psect for function ___bmul
 14908  1ADA                     ___bmul:	
 14909                           
 14910                           ;incstack = 0
 14911                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 14912                           ;___bmul@multiplier stored from wreg
 14913  1ADA  0020               	movlb	0	; select bank0
 14914  1ADB  00A4               	movwf	___bmul@multiplier
 14915  1ADC  01A3               	clrf	___bmul@product
 14916  1ADD                     l6335:	
 14917  1ADD  1C24               	btfss	___bmul@multiplier,0
 14918  1ADE  2AE3               	goto	l6339
 14919  1ADF  0821               	movf	___bmul@multiplicand,w
 14920  1AE0  00A2               	movwf	??___bmul
 14921  1AE1  0822               	movf	??___bmul,w
 14922  1AE2  07A3               	addwf	___bmul@product,f
 14923  1AE3                     l6339:	
 14924  1AE3  1003               	clrc
 14925  1AE4  0DA1               	rlf	___bmul@multiplicand,f
 14926  1AE5  1003               	clrc
 14927  1AE6  0CA4               	rrf	___bmul@multiplier,f
 14928  1AE7  08A4               	movf	___bmul@multiplier,f
 14929  1AE8  1D03               	skipz
 14930  1AE9  2ADD               	goto	l6335
 14931  1AEA  0823               	movf	___bmul@product,w
 14932  1AEB  0008               	return
 14933  1AEC                     __end_of___bmul:	
 14934                           
 14935                           	psect	text96
 14936  1C6D                     __ptext96:	
 14937 ;; *************** function _setCmd_Status *****************
 14938 ;; Defined at:
 14939 ;;		line 651 in file "../src/main_B1.c"
 14940 ;; Parameters:    Size  Location     Type
 14941 ;;  number          1    wreg     unsigned char 
 14942 ;;  cmd             1    1[BANK0 ] unsigned char 
 14943 ;; Auto vars:     Size  Location     Type
 14944 ;;  number          1    3[BANK0 ] unsigned char 
 14945 ;; Return value:  Size  Location     Type
 14946 ;;		None               void
 14947 ;; Registers used:
 14948 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14949 ;; Tracked objects:
 14950 ;;		On entry : 0/0
 14951 ;;		On exit  : 0/0
 14952 ;;		Unchanged: 0/0
 14953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14954 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14955 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14956 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14957 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14958 ;;Total ram usage:        3 bytes
 14959 ;; Hardware stack levels used:    1
 14960 ;; Hardware stack levels required when called:    5
 14961 ;; This function calls:
 14962 ;;		Nothing
 14963 ;; This function is called by:
 14964 ;;		_setDimmerLights_OnOff
 14965 ;;		_setControl_Lights_Table
 14966 ;; This function uses a non-reentrant model
 14967 ;;
 14968                           
 14969                           
 14970                           ;psect for function _setCmd_Status
 14971  1C6D                     _setCmd_Status:	
 14972                           
 14973                           ;incstack = 0
 14974                           ; Regs used in _setCmd_Status: [wreg-fsr0h+status,2+status,0]
 14975                           ;setCmd_Status@number stored from wreg
 14976  1C6D  0020               	movlb	0	; select bank0
 14977  1C6E  00A3               	movwf	setCmd_Status@number
 14978                           
 14979                           ;main_B1.c: 652: switch (number) {
 14980  1C6F  2C7F               	goto	l6873
 14981  1C70                     l6869:	
 14982                           ;main_B1.c: 653: case 1:
 14983                           
 14984                           
 14985                           ;main_B1.c: 654: Cmd.all_off = cmd == 1 ? 1 : 0;
 14986  1C70  0821               	movf	setCmd_Status@cmd,w
 14987  1C71  3A01               	xorlw	1
 14988  1C72  3000               	movlw	0
 14989  1C73  1903               	skipnz
 14990  1C74  3001               	movlw	1
 14991  1C75  00A2               	movwf	??_setCmd_Status
 14992  1C76  0021               	movlb	1	; select bank1
 14993  1C77  084C               	movf	_Cmd^(0+128),w
 14994  1C78  0020               	movlb	0	; select bank0
 14995  1C79  0622               	xorwf	??_setCmd_Status,w
 14996  1C7A  39FE               	andlw	-2
 14997  1C7B  0622               	xorwf	??_setCmd_Status,w
 14998  1C7C  0021               	movlb	1	; select bank1
 14999  1C7D  00CC               	movwf	_Cmd^(0+128)
 15000                           
 15001                           ;main_B1.c: 656: }
 15002                           
 15003                           ;main_B1.c: 655: break;
 15004  1C7E  0008               	return
 15005  1C7F                     l6873:	
 15006  1C7F  0020               	movlb	0	; select bank0
 15007  1C80  0823               	movf	setCmd_Status@number,w
 15008                           
 15009                           ; Switch size 1, requested type "space"
 15010                           ; Number of cases is 1, Range of values is 1 to 1
 15011                           ; switch strategies available:
 15012                           ; Name         Instructions Cycles
 15013                           ; simple_byte            4     3 (average)
 15014                           ; direct_byte           11     9 (fixed)
 15015                           ; jumptable            263     9 (fixed)
 15016                           ;	Chosen strategy is simple_byte
 15017  1C81  3A01               	xorlw	1	; case 1
 15018  1C82  1903               	skipnz
 15019  1C83  2C70               	goto	l6869
 15020  1C84  2C85               	goto	l2896
 15021  1C85                     l2896:	
 15022  1C85  0008               	return
 15023  1C86                     __end_of_setCmd_Status:	
 15024                           
 15025                           	psect	text97
 15026  1B47                     __ptext97:	
 15027 ;; *************** function _getMain_All_LightsStatus *****************
 15028 ;; Defined at:
 15029 ;;		line 373 in file "../src/main_B1.c"
 15030 ;; Parameters:    Size  Location     Type
 15031 ;;		None
 15032 ;; Auto vars:     Size  Location     Type
 15033 ;;  status          1    1[BANK0 ] unsigned char 
 15034 ;; Return value:  Size  Location     Type
 15035 ;;                  1    wreg      unsigned char 
 15036 ;; Registers used:
 15037 ;;		wreg, status,2, status,0
 15038 ;; Tracked objects:
 15039 ;;		On entry : 0/0
 15040 ;;		On exit  : 0/0
 15041 ;;		Unchanged: 0/0
 15042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15044 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15045 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15046 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15047 ;;Total ram usage:        1 bytes
 15048 ;; Hardware stack levels used:    1
 15049 ;; Hardware stack levels required when called:    5
 15050 ;; This function calls:
 15051 ;;		Nothing
 15052 ;; This function is called by:
 15053 ;;		_DimmerLights_Main
 15054 ;;		_setDimmerLights_Main
 15055 ;;		_setDimmerLights_OnOff
 15056 ;;		_Flash_Memory_Main
 15057 ;;		_Load_Main
 15058 ;;		_setTemp_Main
 15059 ;;		_setControl_Lights_Table
 15060 ;;		_Exception_Main
 15061 ;; This function uses a non-reentrant model
 15062 ;;
 15063                           
 15064                           
 15065                           ;psect for function _getMain_All_LightsStatus
 15066  1B47                     _getMain_All_LightsStatus:	
 15067                           
 15068                           ;main_B1.c: 374: char status = 0;
 15069                           
 15070                           ;incstack = 0
 15071                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2+status,0]
 15072  1B47  0020               	movlb	0	; select bank0
 15073  1B48  01A1               	clrf	getMain_All_LightsStatus@status
 15074                           
 15075                           ;main_B1.c: 393: status = DimmerLights1.Status == 1 ? 1 : 0;
 15076  1B49  3000               	movlw	0
 15077  1B4A  0022               	movlb	2	; select bank2
 15078  1B4B  1869               	btfsc	(_DimmerLights1^(0+256)+1),0
 15079  1B4C  3001               	movlw	1
 15080  1B4D  0020               	movlb	0	; select bank0
 15081  1B4E  00A1               	movwf	getMain_All_LightsStatus@status
 15082                           
 15083                           ;main_B1.c: 394: if (status == 0) {
 15084  1B4F  08A1               	movf	getMain_All_LightsStatus@status,f
 15085  1B50  1D03               	skipz
 15086  1B51  2B58               	goto	l9215
 15087                           
 15088                           ;main_B1.c: 395: status = DimmerLights2.Status == 1 ? 1 : 0;
 15089  1B52  3000               	movlw	0
 15090  1B53  0023               	movlb	3	; select bank3
 15091  1B54  1851               	btfsc	(_DimmerLights2^(0+384)+1),0
 15092  1B55  3001               	movlw	1
 15093  1B56  0020               	movlb	0	; select bank0
 15094  1B57  00A1               	movwf	getMain_All_LightsStatus@status
 15095  1B58                     l9215:	
 15096                           
 15097                           ;main_B1.c: 396: }
 15098                           ;main_B1.c: 420: return status;
 15099  1B58  0821               	movf	getMain_All_LightsStatus@status,w
 15100  1B59  0008               	return
 15101  1B5A                     __end_of_getMain_All_LightsStatus:	
 15102                           
 15103                           	psect	text98
 15104  1733                     __ptext98:	
 15105 ;; *************** function _getDimmerLights_PercentToValue *****************
 15106 ;; Defined at:
 15107 ;;		line 1039 in file "../src/Dimmer_B1.c"
 15108 ;; Parameters:    Size  Location     Type
 15109 ;;  value           1    wreg     unsigned char 
 15110 ;; Auto vars:     Size  Location     Type
 15111 ;;  value           1   63[BANK0 ] unsigned char 
 15112 ;;  i               3   64[BANK0 ] float 
 15113 ;; Return value:  Size  Location     Type
 15114 ;;                  1    wreg      unsigned char 
 15115 ;; Registers used:
 15116 ;;		wreg, status,2, status,0, pclath, cstack
 15117 ;; Tracked objects:
 15118 ;;		On entry : 0/0
 15119 ;;		On exit  : 0/0
 15120 ;;		Unchanged: 0/0
 15121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15123 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15124 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15125 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15126 ;;Total ram usage:        6 bytes
 15127 ;; Hardware stack levels used:    1
 15128 ;; Hardware stack levels required when called:    7
 15129 ;; This function calls:
 15130 ;;		___awtoft
 15131 ;;		___ftadd
 15132 ;;		___ftdiv
 15133 ;;		___ftmul
 15134 ;;		___ftneg
 15135 ;;		___fttol
 15136 ;; This function is called by:
 15137 ;;		_setDimmerLights_OnOff
 15138 ;;		_setRFSW_AdjControl
 15139 ;; This function uses a non-reentrant model
 15140 ;;
 15141                           
 15142                           
 15143                           ;psect for function _getDimmerLights_PercentToValue
 15144  1733                     _getDimmerLights_PercentToValue:	
 15145                           
 15146                           ;incstack = 0
 15147                           ; Regs used in _getDimmerLights_PercentToValue: [wreg+status,2+status,0+pclath+cstack]
 15148                           ;getDimmerLights_PercentToValue@value stored from wreg
 15149  1733  0020               	movlb	0	; select bank0
 15150  1734  00DF               	movwf	getDimmerLights_PercentToValue@value
 15151                           
 15152                           ;Dimmer_B1.c: 1047: float i = ((char)(65*0.65)) - ((char)(20*0.65));
 15153  1735  3000               	movlw	0
 15154  1736  00E0               	movwf	getDimmerLights_PercentToValue@i
 15155  1737  30E8               	movlw	232
 15156  1738  00E1               	movwf	getDimmerLights_PercentToValue@i+1
 15157  1739  3041               	movlw	65
 15158  173A  00E2               	movwf	getDimmerLights_PercentToValue@i+2
 15159                           
 15160                           ;Dimmer_B1.c: 1048: i /= 100;
 15161  173B  3000               	movlw	0
 15162  173C  00AF               	movwf	___ftdiv@f2
 15163  173D  30C8               	movlw	200
 15164  173E  00B0               	movwf	___ftdiv@f2+1
 15165  173F  3042               	movlw	66
 15166  1740  00B1               	movwf	___ftdiv@f2+2
 15167  1741  0860               	movf	getDimmerLights_PercentToValue@i,w
 15168  1742  00B2               	movwf	___ftdiv@f1
 15169  1743  0861               	movf	getDimmerLights_PercentToValue@i+1,w
 15170  1744  00B3               	movwf	___ftdiv@f1+1
 15171  1745  0862               	movf	getDimmerLights_PercentToValue@i+2,w
 15172  1746  00B4               	movwf	___ftdiv@f1+2
 15173  1747  318D  2538  3197   	fcall	___ftdiv
 15174  174A  0020               	movlb	0	; select bank0
 15175  174B  082F               	movf	?___ftdiv,w
 15176  174C  00E0               	movwf	getDimmerLights_PercentToValue@i
 15177  174D  0830               	movf	?___ftdiv+1,w
 15178  174E  00E1               	movwf	getDimmerLights_PercentToValue@i+1
 15179  174F  0831               	movf	?___ftdiv+2,w
 15180  1750  00E2               	movwf	getDimmerLights_PercentToValue@i+2
 15181                           
 15182                           ;Dimmer_B1.c: 1050: return (char) (((char)(65*0.65)) - ((100 - value) * i));
 15183  1751  085F               	movf	getDimmerLights_PercentToValue@value,w
 15184  1752  00DD               	movwf	??_getDimmerLights_PercentToValue
 15185  1753  01DE               	clrf	??_getDimmerLights_PercentToValue+1
 15186  1754  09DD               	comf	??_getDimmerLights_PercentToValue,f
 15187  1755  09DE               	comf	??_getDimmerLights_PercentToValue+1,f
 15188  1756  0ADD               	incf	??_getDimmerLights_PercentToValue,f
 15189  1757  1903               	skipnz
 15190  1758  0ADE               	incf	??_getDimmerLights_PercentToValue+1,f
 15191  1759  085D               	movf	??_getDimmerLights_PercentToValue,w
 15192  175A  3E64               	addlw	100
 15193  175B  00A9               	movwf	___awtoft@c
 15194  175C  3000               	movlw	0
 15195  175D  3D5E               	addwfc	??_getDimmerLights_PercentToValue+1,w
 15196  175E  00AA               	movwf	___awtoft@c+1
 15197  175F  319E  269F  3197   	fcall	___awtoft
 15198  1762  0020               	movlb	0	; select bank0
 15199  1763  0829               	movf	?___awtoft,w
 15200  1764  00B2               	movwf	___ftmul@f2
 15201  1765  082A               	movf	?___awtoft+1,w
 15202  1766  00B3               	movwf	___ftmul@f2+1
 15203  1767  082B               	movf	?___awtoft+2,w
 15204  1768  00B4               	movwf	___ftmul@f2+2
 15205  1769  0860               	movf	getDimmerLights_PercentToValue@i,w
 15206  176A  00AF               	movwf	___ftmul@f1
 15207  176B  0861               	movf	getDimmerLights_PercentToValue@i+1,w
 15208  176C  00B0               	movwf	___ftmul@f1+1
 15209  176D  0862               	movf	getDimmerLights_PercentToValue@i+2,w
 15210  176E  00B1               	movwf	___ftmul@f1+2
 15211  176F  318E  2691  3197   	fcall	___ftmul
 15212  1772  0020               	movlb	0	; select bank0
 15213  1773  082F               	movf	?___ftmul,w
 15214  1774  00BF               	movwf	___ftneg@f1
 15215  1775  0830               	movf	?___ftmul+1,w
 15216  1776  00C0               	movwf	___ftneg@f1+1
 15217  1777  0831               	movf	?___ftmul+2,w
 15218  1778  00C1               	movwf	___ftneg@f1+2
 15219  1779  3199  21CF  3197   	fcall	___ftneg
 15220  177C  0020               	movlb	0	; select bank0
 15221  177D  083F               	movf	?___ftneg,w
 15222  177E  00C5               	movwf	___ftadd@f2
 15223  177F  0840               	movf	?___ftneg+1,w
 15224  1780  00C6               	movwf	___ftadd@f2+1
 15225  1781  0841               	movf	?___ftneg+2,w
 15226  1782  00C7               	movwf	___ftadd@f2+2
 15227  1783  3000               	movlw	0
 15228  1784  00C2               	movwf	___ftadd@f1
 15229  1785  3028               	movlw	40
 15230  1786  00C3               	movwf	___ftadd@f1+1
 15231  1787  3042               	movlw	66
 15232  1788  00C4               	movwf	___ftadd@f1+2
 15233  1789  3183  2388  3197   	fcall	___ftadd
 15234  178C  0020               	movlb	0	; select bank0
 15235  178D  0842               	movf	?___ftadd,w
 15236  178E  00CF               	movwf	___fttol@f1
 15237  178F  0843               	movf	?___ftadd+1,w
 15238  1790  00D0               	movwf	___fttol@f1+1
 15239  1791  0844               	movf	?___ftadd+2,w
 15240  1792  00D1               	movwf	___fttol@f1+2
 15241  1793  318B  2396         	fcall	___fttol
 15242  1795  0020               	movlb	0	; select bank0
 15243  1796  084F               	movf	?___fttol,w
 15244  1797  0008               	return
 15245  1798                     __end_of_getDimmerLights_PercentToValue:	
 15246                           
 15247                           	psect	text99
 15248  0E91                     __ptext99:	
 15249 ;; *************** function ___ftmul *****************
 15250 ;; Defined at:
 15251 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 15252 ;; Parameters:    Size  Location     Type
 15253 ;;  f1              3   15[BANK0 ] float 
 15254 ;;  f2              3   18[BANK0 ] float 
 15255 ;; Auto vars:     Size  Location     Type
 15256 ;;  f3_as_produc    3   26[BANK0 ] unsigned um
 15257 ;;  sign            1   30[BANK0 ] unsigned char 
 15258 ;;  cntr            1   29[BANK0 ] unsigned char 
 15259 ;;  exp             1   25[BANK0 ] unsigned char 
 15260 ;; Return value:  Size  Location     Type
 15261 ;;                  3   15[BANK0 ] float 
 15262 ;; Registers used:
 15263 ;;		wreg, status,2, status,0, pclath, cstack
 15264 ;; Tracked objects:
 15265 ;;		On entry : 0/0
 15266 ;;		On exit  : 0/0
 15267 ;;		Unchanged: 0/0
 15268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15269 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15270 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15271 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15272 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15273 ;;Total ram usage:       16 bytes
 15274 ;; Hardware stack levels used:    1
 15275 ;; Hardware stack levels required when called:    6
 15276 ;; This function calls:
 15277 ;;		___ftpack
 15278 ;; This function is called by:
 15279 ;;		_getDimmerLights_PercentToValue
 15280 ;; This function uses a non-reentrant model
 15281 ;;
 15282                           
 15283                           
 15284                           ;psect for function ___ftmul
 15285  0E91                     ___ftmul:	
 15286                           
 15287                           ;incstack = 0
 15288                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 15289  0E91  0020               	movlb	0	; select bank0
 15290  0E92  082F               	movf	___ftmul@f1,w
 15291  0E93  00B5               	movwf	??___ftmul
 15292  0E94  0830               	movf	___ftmul@f1+1,w
 15293  0E95  00B6               	movwf	??___ftmul+1
 15294  0E96  0831               	movf	___ftmul@f1+2,w
 15295  0E97  00B7               	movwf	??___ftmul+2
 15296  0E98  1003               	clrc
 15297  0E99  0D36               	rlf	??___ftmul+1,w
 15298  0E9A  0D37               	rlf	??___ftmul+2,w
 15299  0E9B  00B8               	movwf	??___ftmul+3
 15300  0E9C  0838               	movf	??___ftmul+3,w
 15301  0E9D  00B9               	movwf	___ftmul@exp
 15302  0E9E  08B9               	movf	___ftmul@exp,f
 15303  0E9F  1D03               	skipz
 15304  0EA0  2EA8               	goto	l6481
 15305  0EA1  3000               	movlw	0
 15306  0EA2  00AF               	movwf	?___ftmul
 15307  0EA3  3000               	movlw	0
 15308  0EA4  00B0               	movwf	?___ftmul+1
 15309  0EA5  3000               	movlw	0
 15310  0EA6  00B1               	movwf	?___ftmul+2
 15311  0EA7  0008               	return
 15312  0EA8                     l6481:	
 15313  0EA8  0832               	movf	___ftmul@f2,w
 15314  0EA9  00B5               	movwf	??___ftmul
 15315  0EAA  0833               	movf	___ftmul@f2+1,w
 15316  0EAB  00B6               	movwf	??___ftmul+1
 15317  0EAC  0834               	movf	___ftmul@f2+2,w
 15318  0EAD  00B7               	movwf	??___ftmul+2
 15319  0EAE  1003               	clrc
 15320  0EAF  0D36               	rlf	??___ftmul+1,w
 15321  0EB0  0D37               	rlf	??___ftmul+2,w
 15322  0EB1  00B8               	movwf	??___ftmul+3
 15323  0EB2  0838               	movf	??___ftmul+3,w
 15324  0EB3  00BE               	movwf	___ftmul@sign
 15325  0EB4  08BE               	movf	___ftmul@sign,f
 15326  0EB5  1D03               	skipz
 15327  0EB6  2EBE               	goto	l6487
 15328  0EB7  3000               	movlw	0
 15329  0EB8  00AF               	movwf	?___ftmul
 15330  0EB9  3000               	movlw	0
 15331  0EBA  00B0               	movwf	?___ftmul+1
 15332  0EBB  3000               	movlw	0
 15333  0EBC  00B1               	movwf	?___ftmul+2
 15334  0EBD  0008               	return
 15335  0EBE                     l6487:	
 15336  0EBE  083E               	movf	___ftmul@sign,w
 15337  0EBF  3E7B               	addlw	123
 15338  0EC0  00B5               	movwf	??___ftmul
 15339  0EC1  0835               	movf	??___ftmul,w
 15340  0EC2  07B9               	addwf	___ftmul@exp,f
 15341  0EC3  082F               	movf	___ftmul@f1,w
 15342  0EC4  00B5               	movwf	??___ftmul
 15343  0EC5  0830               	movf	___ftmul@f1+1,w
 15344  0EC6  00B6               	movwf	??___ftmul+1
 15345  0EC7  0831               	movf	___ftmul@f1+2,w
 15346  0EC8  00B7               	movwf	??___ftmul+2
 15347  0EC9  3010               	movlw	16
 15348  0ECA                     u5575:	
 15349  0ECA  36B7               	lsrf	??___ftmul+2,f
 15350  0ECB  0CB6               	rrf	??___ftmul+1,f
 15351  0ECC  0CB5               	rrf	??___ftmul,f
 15352  0ECD  0B89               	decfsz	9,f
 15353  0ECE  2ECA               	goto	u5575
 15354  0ECF  0835               	movf	??___ftmul,w
 15355  0ED0  00B8               	movwf	??___ftmul+3
 15356  0ED1  0838               	movf	??___ftmul+3,w
 15357  0ED2  00BE               	movwf	___ftmul@sign
 15358  0ED3  0832               	movf	___ftmul@f2,w
 15359  0ED4  00B5               	movwf	??___ftmul
 15360  0ED5  0833               	movf	___ftmul@f2+1,w
 15361  0ED6  00B6               	movwf	??___ftmul+1
 15362  0ED7  0834               	movf	___ftmul@f2+2,w
 15363  0ED8  00B7               	movwf	??___ftmul+2
 15364  0ED9  3010               	movlw	16
 15365  0EDA                     u5585:	
 15366  0EDA  36B7               	lsrf	??___ftmul+2,f
 15367  0EDB  0CB6               	rrf	??___ftmul+1,f
 15368  0EDC  0CB5               	rrf	??___ftmul,f
 15369  0EDD  0B89               	decfsz	9,f
 15370  0EDE  2EDA               	goto	u5585
 15371  0EDF  0835               	movf	??___ftmul,w
 15372  0EE0  00B8               	movwf	??___ftmul+3
 15373  0EE1  0838               	movf	??___ftmul+3,w
 15374  0EE2  06BE               	xorwf	___ftmul@sign,f
 15375  0EE3  3080               	movlw	128
 15376  0EE4  00B5               	movwf	??___ftmul
 15377  0EE5  0835               	movf	??___ftmul,w
 15378  0EE6  05BE               	andwf	___ftmul@sign,f
 15379  0EE7  17B0               	bsf	___ftmul@f1+1,7
 15380  0EE8  17B3               	bsf	___ftmul@f2+1,7
 15381  0EE9  30FF               	movlw	255
 15382  0EEA  05B2               	andwf	___ftmul@f2,f
 15383  0EEB  30FF               	movlw	255
 15384  0EEC  05B3               	andwf	___ftmul@f2+1,f
 15385  0EED  3000               	movlw	0
 15386  0EEE  05B4               	andwf	___ftmul@f2+2,f
 15387  0EEF  3000               	movlw	0
 15388  0EF0  00BA               	movwf	___ftmul@f3_as_product
 15389  0EF1  3000               	movlw	0
 15390  0EF2  00BB               	movwf	___ftmul@f3_as_product+1
 15391  0EF3  3000               	movlw	0
 15392  0EF4  00BC               	movwf	___ftmul@f3_as_product+2
 15393  0EF5  3007               	movlw	7
 15394  0EF6  00B5               	movwf	??___ftmul
 15395  0EF7  0835               	movf	??___ftmul,w
 15396  0EF8  00BD               	movwf	___ftmul@cntr
 15397  0EF9                     l6499:	
 15398  0EF9  1C2F               	btfss	___ftmul@f1,0
 15399  0EFA  2F01               	goto	l6503
 15400  0EFB  0832               	movf	___ftmul@f2,w
 15401  0EFC  07BA               	addwf	___ftmul@f3_as_product,f
 15402  0EFD  0833               	movf	___ftmul@f2+1,w
 15403  0EFE  3DBB               	addwfc	___ftmul@f3_as_product+1,f
 15404  0EFF  0834               	movf	___ftmul@f2+2,w
 15405  0F00  3DBC               	addwfc	___ftmul@f3_as_product+2,f
 15406  0F01                     l6503:	
 15407  0F01  3001               	movlw	1
 15408  0F02                     u5605:	
 15409  0F02  36B1               	lsrf	___ftmul@f1+2,f
 15410  0F03  0CB0               	rrf	___ftmul@f1+1,f
 15411  0F04  0CAF               	rrf	___ftmul@f1,f
 15412  0F05  0B89               	decfsz	9,f
 15413  0F06  2F02               	goto	u5605
 15414  0F07  3001               	movlw	1
 15415  0F08                     u5615:	
 15416  0F08  35B2               	lslf	___ftmul@f2,f
 15417  0F09  0DB3               	rlf	___ftmul@f2+1,f
 15418  0F0A  0DB4               	rlf	___ftmul@f2+2,f
 15419  0F0B  0B89               	decfsz	9,f
 15420  0F0C  2F08               	goto	u5615
 15421  0F0D  3001               	movlw	1
 15422  0F0E  02BD               	subwf	___ftmul@cntr,f
 15423  0F0F  1D03               	btfss	3,2
 15424  0F10  2EF9               	goto	l6499
 15425  0F11  3009               	movlw	9
 15426  0F12  00B5               	movwf	??___ftmul
 15427  0F13  0835               	movf	??___ftmul,w
 15428  0F14  00BD               	movwf	___ftmul@cntr
 15429  0F15                     l6511:	
 15430  0F15  1C2F               	btfss	___ftmul@f1,0
 15431  0F16  2F1D               	goto	l6515
 15432  0F17  0832               	movf	___ftmul@f2,w
 15433  0F18  07BA               	addwf	___ftmul@f3_as_product,f
 15434  0F19  0833               	movf	___ftmul@f2+1,w
 15435  0F1A  3DBB               	addwfc	___ftmul@f3_as_product+1,f
 15436  0F1B  0834               	movf	___ftmul@f2+2,w
 15437  0F1C  3DBC               	addwfc	___ftmul@f3_as_product+2,f
 15438  0F1D                     l6515:	
 15439  0F1D  3001               	movlw	1
 15440  0F1E                     u5645:	
 15441  0F1E  36B1               	lsrf	___ftmul@f1+2,f
 15442  0F1F  0CB0               	rrf	___ftmul@f1+1,f
 15443  0F20  0CAF               	rrf	___ftmul@f1,f
 15444  0F21  0B89               	decfsz	9,f
 15445  0F22  2F1E               	goto	u5645
 15446  0F23  3001               	movlw	1
 15447  0F24                     u5655:	
 15448  0F24  36BC               	lsrf	___ftmul@f3_as_product+2,f
 15449  0F25  0CBB               	rrf	___ftmul@f3_as_product+1,f
 15450  0F26  0CBA               	rrf	___ftmul@f3_as_product,f
 15451  0F27  0B89               	decfsz	9,f
 15452  0F28  2F24               	goto	u5655
 15453  0F29  3001               	movlw	1
 15454  0F2A  02BD               	subwf	___ftmul@cntr,f
 15455  0F2B  1D03               	btfss	3,2
 15456  0F2C  2F15               	goto	l6511
 15457  0F2D  083A               	movf	___ftmul@f3_as_product,w
 15458  0F2E  00A1               	movwf	___ftpack@arg
 15459  0F2F  083B               	movf	___ftmul@f3_as_product+1,w
 15460  0F30  00A2               	movwf	___ftpack@arg+1
 15461  0F31  083C               	movf	___ftmul@f3_as_product+2,w
 15462  0F32  00A3               	movwf	___ftpack@arg+2
 15463  0F33  0839               	movf	___ftmul@exp,w
 15464  0F34  00B5               	movwf	??___ftmul
 15465  0F35  0835               	movf	??___ftmul,w
 15466  0F36  00A4               	movwf	___ftpack@exp
 15467  0F37  083E               	movf	___ftmul@sign,w
 15468  0F38  00B6               	movwf	??___ftmul+1
 15469  0F39  0836               	movf	??___ftmul+1,w
 15470  0F3A  00A5               	movwf	___ftpack@sign
 15471  0F3B  3196  2608         	fcall	___ftpack
 15472  0F3D  0020               	movlb	0	; select bank0
 15473  0F3E  0821               	movf	?___ftpack,w
 15474  0F3F  00AF               	movwf	?___ftmul
 15475  0F40  0822               	movf	?___ftpack+1,w
 15476  0F41  00B0               	movwf	?___ftmul+1
 15477  0F42  0823               	movf	?___ftpack+2,w
 15478  0F43  00B1               	movwf	?___ftmul+2
 15479  0F44  0008               	return
 15480  0F45                     __end_of___ftmul:	
 15481                           
 15482                           	psect	text100
 15483  1A95                     __ptext100:	
 15484 ;; *************** function _getDelayOff_GO *****************
 15485 ;; Defined at:
 15486 ;;		line 114 in file "../src/DelayOff_B1.c"
 15487 ;; Parameters:    Size  Location     Type
 15488 ;;  sw              1    wreg     unsigned char 
 15489 ;; Auto vars:     Size  Location     Type
 15490 ;;  sw              1    3[BANK0 ] unsigned char 
 15491 ;;  go              1    4[BANK0 ] unsigned char 
 15492 ;; Return value:  Size  Location     Type
 15493 ;;                  1    wreg      unsigned char 
 15494 ;; Registers used:
 15495 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15496 ;; Tracked objects:
 15497 ;;		On entry : 0/0
 15498 ;;		On exit  : 0/0
 15499 ;;		Unchanged: 0/0
 15500 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15502 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15503 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15504 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15505 ;;Total ram usage:        2 bytes
 15506 ;; Hardware stack levels used:    1
 15507 ;; Hardware stack levels required when called:    6
 15508 ;; This function calls:
 15509 ;;		_DelayOffPointSelect
 15510 ;; This function is called by:
 15511 ;;		_setDimmerLights_OnOff
 15512 ;; This function uses a non-reentrant model
 15513 ;;
 15514                           
 15515                           
 15516                           ;psect for function _getDelayOff_GO
 15517  1A95                     _getDelayOff_GO:	
 15518                           
 15519                           ;incstack = 0
 15520                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15521                           ;getDelayOff_GO@sw stored from wreg
 15522  1A95  0020               	movlb	0	; select bank0
 15523  1A96  00A3               	movwf	getDelayOff_GO@sw
 15524                           
 15525                           ;DelayOff_B1.c: 115: DelayOffPointSelect(sw);
 15526  1A97  0823               	movf	getDelayOff_GO@sw,w
 15527  1A98  319B  23FA         	fcall	_DelayOffPointSelect
 15528                           
 15529                           ;DelayOff_B1.c: 116: char go = DelayOff->GO == 1 ? 1 : 0;
 15530  1A9A  0021               	movlb	1	; select bank1
 15531  1A9B  084D               	movf	_DelayOff^(0+128),w
 15532  1A9C  0086               	movwf	6
 15533  1A9D  3001               	movlw	1	; select bank2/3
 15534  1A9E  0087               	movwf	7
 15535  1A9F  3000               	movlw	0
 15536  1AA0  1881               	btfsc	1,1
 15537  1AA1  3001               	movlw	1
 15538  1AA2  0020               	movlb	0	; select bank0
 15539  1AA3  00A4               	movwf	getDelayOff_GO@go
 15540                           
 15541                           ;DelayOff_B1.c: 117: return go;
 15542  1AA4  0824               	movf	getDelayOff_GO@go,w
 15543  1AA5  0008               	return
 15544  1AA6                     __end_of_getDelayOff_GO:	
 15545                           
 15546                           	psect	text101
 15547  1AC8                     __ptext101:	
 15548 ;; *************** function _getCmd_Status *****************
 15549 ;; Defined at:
 15550 ;;		line 659 in file "../src/main_B1.c"
 15551 ;; Parameters:    Size  Location     Type
 15552 ;;  number          1    wreg     unsigned char 
 15553 ;; Auto vars:     Size  Location     Type
 15554 ;;  number          1    1[BANK0 ] unsigned char 
 15555 ;;  cmd             1    2[BANK0 ] unsigned char 
 15556 ;; Return value:  Size  Location     Type
 15557 ;;                  1    wreg      unsigned char 
 15558 ;; Registers used:
 15559 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15560 ;; Tracked objects:
 15561 ;;		On entry : 0/0
 15562 ;;		On exit  : 0/0
 15563 ;;		Unchanged: 0/0
 15564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15566 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15567 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15568 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15569 ;;Total ram usage:        2 bytes
 15570 ;; Hardware stack levels used:    1
 15571 ;; Hardware stack levels required when called:    5
 15572 ;; This function calls:
 15573 ;;		Nothing
 15574 ;; This function is called by:
 15575 ;;		_setDimmerLights_OnOff
 15576 ;; This function uses a non-reentrant model
 15577 ;;
 15578                           
 15579                           
 15580                           ;psect for function _getCmd_Status
 15581  1AC8                     _getCmd_Status:	
 15582                           
 15583                           ;incstack = 0
 15584                           ; Regs used in _getCmd_Status: [wreg-fsr0h+status,2+status,0]
 15585                           ;getCmd_Status@number stored from wreg
 15586  1AC8  0020               	movlb	0	; select bank0
 15587  1AC9  00A1               	movwf	getCmd_Status@number
 15588                           
 15589                           ;main_B1.c: 660: char cmd = 0;
 15590  1ACA  01A2               	clrf	getCmd_Status@cmd
 15591                           
 15592                           ;main_B1.c: 661: switch (number) {
 15593  1ACB  2AD3               	goto	l7173
 15594  1ACC                     l7169:	
 15595                           ;main_B1.c: 662: case 1:
 15596                           
 15597                           
 15598                           ;main_B1.c: 663: cmd = Cmd.all_off == 1 ? 1 : 0;
 15599  1ACC  3000               	movlw	0
 15600  1ACD  0021               	movlb	1	; select bank1
 15601  1ACE  184C               	btfsc	_Cmd^(0+128),0
 15602  1ACF  3001               	movlw	1
 15603  1AD0  0020               	movlb	0	; select bank0
 15604  1AD1  00A2               	movwf	getCmd_Status@cmd
 15605                           
 15606                           ;main_B1.c: 665: }
 15607                           
 15608                           ;main_B1.c: 664: break;
 15609  1AD2  2AD8               	goto	l7175
 15610  1AD3                     l7173:	
 15611  1AD3  0821               	movf	getCmd_Status@number,w
 15612                           
 15613                           ; Switch size 1, requested type "space"
 15614                           ; Number of cases is 1, Range of values is 1 to 1
 15615                           ; switch strategies available:
 15616                           ; Name         Instructions Cycles
 15617                           ; simple_byte            4     3 (average)
 15618                           ; direct_byte           11     9 (fixed)
 15619                           ; jumptable            263     9 (fixed)
 15620                           ;	Chosen strategy is simple_byte
 15621  1AD4  3A01               	xorlw	1	; case 1
 15622  1AD5  1903               	skipnz
 15623  1AD6  2ACC               	goto	l7169
 15624  1AD7  2AD8               	goto	l7175
 15625  1AD8                     l7175:	
 15626                           
 15627                           ;main_B1.c: 666: return cmd;
 15628  1AD8  0822               	movf	getCmd_Status@cmd,w
 15629  1AD9  0008               	return
 15630  1ADA                     __end_of_getCmd_Status:	
 15631                           
 15632                           	psect	text102
 15633  13AE                     __ptext102:	
 15634 ;; *************** function _setDimmerLights_Dimming *****************
 15635 ;; Defined at:
 15636 ;;		line 883 in file "../src/Dimmer_B1.c"
 15637 ;; Parameters:    Size  Location     Type
 15638 ;;  lights          1    wreg     unsigned char 
 15639 ;;  status          1   75[BANK0 ] unsigned char 
 15640 ;; Auto vars:     Size  Location     Type
 15641 ;;  lights          1   77[BANK0 ] unsigned char 
 15642 ;; Return value:  Size  Location     Type
 15643 ;;		None               void
 15644 ;; Registers used:
 15645 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15646 ;; Tracked objects:
 15647 ;;		On entry : 0/0
 15648 ;;		On exit  : 0/0
 15649 ;;		Unchanged: 0/0
 15650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15651 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15652 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15653 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15654 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15655 ;;Total ram usage:        3 bytes
 15656 ;; Hardware stack levels used:    1
 15657 ;; Hardware stack levels required when called:    8
 15658 ;; This function calls:
 15659 ;;		_getDimmerIntr_DimmingValue
 15660 ;;		_getDimmerLights_ValueToPercent
 15661 ;;		_setBuz
 15662 ;;		_setDimmerIntr_Dimming_Sw
 15663 ;;		_setDimmerIntr_MaxmumValue
 15664 ;;		_setDimmerLights_Line
 15665 ;;		_setProductData
 15666 ;;		_setRF_DimmerLights
 15667 ;;		_setRF_TransceiveGO
 15668 ;;		_setTxData
 15669 ;; This function is called by:
 15670 ;;		_setDimmerLights_Main
 15671 ;; This function uses a non-reentrant model
 15672 ;;
 15673                           
 15674                           
 15675                           ;psect for function _setDimmerLights_Dimming
 15676  13AE                     _setDimmerLights_Dimming:	
 15677                           
 15678                           ;incstack = 0
 15679                           ; Regs used in _setDimmerLights_Dimming: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15680                           ;setDimmerLights_Dimming@lights stored from wreg
 15681  13AE  0020               	movlb	0	; select bank0
 15682  13AF  00ED               	movwf	setDimmerLights_Dimming@lights
 15683                           
 15684                           ;Dimmer_B1.c: 884: if (status == 1) {
 15685  13B0  086B               	movf	setDimmerLights_Dimming@status,w
 15686  13B1  3A01               	xorlw	1
 15687  13B2  1D03               	skipz
 15688  13B3  2BC7               	goto	l9385
 15689                           
 15690                           ;Dimmer_B1.c: 885: setDimmerIntr_Dimming_Sw(lights, 1);
 15691  13B4  01A1               	clrf	setDimmerIntr_Dimming_Sw@command
 15692  13B5  0AA1               	incf	setDimmerIntr_Dimming_Sw@command,f
 15693  13B6  086D               	movf	setDimmerLights_Dimming@lights,w
 15694  13B7  319F  27D5  3193   	fcall	_setDimmerIntr_Dimming_Sw
 15695                           
 15696                           ;Dimmer_B1.c: 888: setRF_TransceiveGO(0);
 15697  13BA  3000               	movlw	0
 15698  13BB  319B  2334  3193   	fcall	_setRF_TransceiveGO
 15699                           
 15700                           ;Dimmer_B1.c: 890: setBuz(1, 100);
 15701  13BE  3064               	movlw	100
 15702  13BF  0020               	movlb	0	; select bank0
 15703  13C0  00AA               	movwf	setBuz@time
 15704  13C1  3000               	movlw	0
 15705  13C2  00AB               	movwf	setBuz@time+1
 15706  13C3  3001               	movlw	1
 15707  13C4  3194  24F8         	fcall	_setBuz
 15708                           
 15709                           ;Dimmer_B1.c: 891: } else if (status == 0) {
 15710  13C6  0008               	return
 15711  13C7                     l9385:	
 15712  13C7  0020               	movlb	0	; select bank0
 15713  13C8  08EB               	movf	setDimmerLights_Dimming@status,f
 15714  13C9  1D03               	skipz
 15715  13CA  0008               	return
 15716                           
 15717                           ;Dimmer_B1.c: 892: setDimmerIntr_Dimming_Sw(lights, 0);
 15718  13CB  01A1               	clrf	setDimmerIntr_Dimming_Sw@command
 15719  13CC  086D               	movf	setDimmerLights_Dimming@lights,w
 15720  13CD  319F  27D5  3193   	fcall	_setDimmerIntr_Dimming_Sw
 15721                           
 15722                           ;Dimmer_B1.c: 895: Dimmer.Load_Status = 0;
 15723  13D0  0022               	movlb	2	; select bank2
 15724  13D1  1139               	bcf	_Dimmer^(0+256),2
 15725                           
 15726                           ;Dimmer_B1.c: 896: setDimmerLights_Line(lights);
 15727  13D2  0020               	movlb	0	; select bank0
 15728  13D3  086D               	movf	setDimmerLights_Dimming@lights,w
 15729  13D4  319D  2525  3193   	fcall	_setDimmerLights_Line
 15730                           
 15731                           ;Dimmer_B1.c: 899: setDimmerIntr_MaxmumValue(lights, getDimmerIntr_DimmingValue(lights))
      +                          ;
 15732  13D7  0020               	movlb	0	; select bank0
 15733  13D8  086D               	movf	setDimmerLights_Dimming@lights,w
 15734  13D9  3190  2000  3193   	fcall	_getDimmerIntr_DimmingValue
 15735  13DC  0020               	movlb	0	; select bank0
 15736  13DD  00EC               	movwf	??_setDimmerLights_Dimming
 15737  13DE  086C               	movf	??_setDimmerLights_Dimming,w
 15738  13DF  00E3               	movwf	setDimmerIntr_MaxmumValue@value
 15739  13E0  086D               	movf	setDimmerLights_Dimming@lights,w
 15740  13E1  319C  2428  3193   	fcall	_setDimmerIntr_MaxmumValue
 15741                           
 15742                           ;Dimmer_B1.c: 900: setProductData((20 + lights), getDimmerLights_ValueToPercent(getDimme
      +                          rIntr_DimmingValue(lights)));
 15743  13E4  0020               	movlb	0	; select bank0
 15744  13E5  086D               	movf	setDimmerLights_Dimming@lights,w
 15745  13E6  3190  2000  3193   	fcall	_getDimmerIntr_DimmingValue
 15746  13E9  3196  2669  3193   	fcall	_getDimmerLights_ValueToPercent
 15747  13EC  0020               	movlb	0	; select bank0
 15748  13ED  00EC               	movwf	??_setDimmerLights_Dimming
 15749  13EE  086C               	movf	??_setDimmerLights_Dimming,w
 15750  13EF  00E3               	movwf	setProductData@value
 15751  13F0  086D               	movf	setDimmerLights_Dimming@lights,w
 15752  13F1  3E14               	addlw	20
 15753  13F2  319A  2223  3193   	fcall	_setProductData
 15754                           
 15755                           ;Dimmer_B1.c: 910: setRF_DimmerLights(lights, 1);
 15756  13F5  0020               	movlb	0	; select bank0
 15757  13F6  01E6               	clrf	setRF_DimmerLights@on
 15758  13F7  0AE6               	incf	setRF_DimmerLights@on,f
 15759  13F8  086D               	movf	setDimmerLights_Dimming@lights,w
 15760  13F9  3196  26CE  3193   	fcall	_setRF_DimmerLights
 15761                           
 15762                           ;Dimmer_B1.c: 911: setTxData();
 15763  13FC  318F  2745         	fcall	_setTxData
 15764  13FE  0008               	return
 15765  13FF                     __end_of_setDimmerLights_Dimming:	
 15766                           
 15767                           	psect	text103
 15768  0F45                     __ptext103:	
 15769 ;; *************** function _setTxData *****************
 15770 ;; Defined at:
 15771 ;;		line 183 in file "../src/RF_Control_B1.c"
 15772 ;; Parameters:    Size  Location     Type
 15773 ;;		None
 15774 ;; Auto vars:     Size  Location     Type
 15775 ;;  i               1    0        unsigned char 
 15776 ;; Return value:  Size  Location     Type
 15777 ;;		None               void
 15778 ;; Registers used:
 15779 ;;		wreg, fsr1l, fsr1h, status,2
 15780 ;; Tracked objects:
 15781 ;;		On entry : 0/0
 15782 ;;		On exit  : 0/0
 15783 ;;		Unchanged: 0/0
 15784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15786 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15787 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15788 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15789 ;;Total ram usage:        1 bytes
 15790 ;; Hardware stack levels used:    1
 15791 ;; Hardware stack levels required when called:    5
 15792 ;; This function calls:
 15793 ;;		Nothing
 15794 ;; This function is called by:
 15795 ;;		_setDimmerLights_OnOff
 15796 ;;		_setDimmerLights_Dimming
 15797 ;;		_getRxData
 15798 ;;		_setControl_Lights_Table
 15799 ;;		_setRFSW_Control
 15800 ;;		_setRFSW_AdjControl
 15801 ;; This function uses a non-reentrant model
 15802 ;;
 15803                           
 15804                           
 15805                           ;psect for function _setTxData
 15806  0F45                     _setTxData:	
 15807                           
 15808                           ;RF_Control_B1.c: 184: char i;
 15809                           ;RF_Control_B1.c: 185: if (RF1.Enable == 1) {
 15810                           
 15811                           ;incstack = 0
 15812                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2]
 15813  0F45  0021               	movlb	1	; select bank1
 15814  0F46  1C20               	btfss	_RF1^(0+128),0
 15815  0F47  0008               	return
 15816                           
 15817                           ;RF_Control_B1.c: 187: RF1.TransceiveGO = 1;
 15818  0F48  1520               	bsf	_RF1^(0+128),2
 15819                           
 15820                           ;RF_Control_B1.c: 188: RF1.Count = 0;
 15821  0F49  01A2               	clrf	(_RF1^(0+128)+2)
 15822  0F4A  01A3               	clrf	((_RF1+1)^(0+128)+2)
 15823                           
 15824                           ;RF_Control_B1.c: 200: RF_Data[0] = 0x63;
 15825  0F4B  3063               	movlw	99
 15826  0F4C  0020               	movlb	0	; select bank0
 15827  0F4D  00A1               	movwf	??_setTxData
 15828  0F4E  0821               	movf	??_setTxData,w
 15829  0F4F  0023               	movlb	3	; select bank3
 15830  0F50  00A0               	movwf	_RF_Data^(0+384)
 15831                           
 15832                           ;RF_Control_B1.c: 201: RF_Data[1] = 0x02;
 15833  0F51  3002               	movlw	2
 15834  0F52  0020               	movlb	0	; select bank0
 15835  0F53  00A1               	movwf	??_setTxData
 15836  0F54  0821               	movf	??_setTxData,w
 15837  0F55  0023               	movlb	3	; select bank3
 15838  0F56  00A1               	movwf	(_RF_Data^(0+384)+1)
 15839                           
 15840                           ;RF_Control_B1.c: 203: RF_Data[2] = product->Data[2];
 15841  0F57  0021               	movlb	1	; select bank1
 15842  0F58  086D               	movf	_product^(0+128),w
 15843  0F59  0086               	movwf	6
 15844  0F5A  3002               	movlw	2	; select bank4/5
 15845  0F5B  0087               	movwf	7
 15846  0F5C  3002               	movlw	2	; select bank4/5
 15847  0F5D  3F42               	moviw [2]fsr1
 15848  0F5E  0023               	movlb	3	; select bank3
 15849  0F5F  00A2               	movwf	(_RF_Data^(0+384)+2)
 15850                           
 15851                           ;RF_Control_B1.c: 204: RF_Data[3] = product->Data[3];
 15852  0F60  0021               	movlb	1	; select bank1
 15853  0F61  086D               	movf	_product^(0+128),w
 15854  0F62  0086               	movwf	6
 15855  0F63  3002               	movlw	2	; select bank4/5
 15856  0F64  0087               	movwf	7
 15857  0F65  3002               	movlw	2	; select bank4/5
 15858  0F66  3F43               	moviw [3]fsr1
 15859  0F67  0023               	movlb	3	; select bank3
 15860  0F68  00A3               	movwf	(_RF_Data^(0+384)+3)
 15861                           
 15862                           ;RF_Control_B1.c: 205: RF_Data[4] = product->Data[4];
 15863  0F69  0021               	movlb	1	; select bank1
 15864  0F6A  086D               	movf	_product^(0+128),w
 15865  0F6B  0086               	movwf	6
 15866  0F6C  3002               	movlw	2	; select bank4/5
 15867  0F6D  0087               	movwf	7
 15868  0F6E  3002               	movlw	2	; select bank4/5
 15869  0F6F  3F44               	moviw [4]fsr1
 15870  0F70  0023               	movlb	3	; select bank3
 15871  0F71  00A4               	movwf	(_RF_Data^(0+384)+4)
 15872                           
 15873                           ;RF_Control_B1.c: 206: RF_Data[5] = product->Data[5];
 15874  0F72  0021               	movlb	1	; select bank1
 15875  0F73  086D               	movf	_product^(0+128),w
 15876  0F74  0086               	movwf	6
 15877  0F75  3002               	movlw	2	; select bank4/5
 15878  0F76  0087               	movwf	7
 15879  0F77  3002               	movlw	2	; select bank4/5
 15880  0F78  3F45               	moviw [5]fsr1
 15881  0F79  0023               	movlb	3	; select bank3
 15882  0F7A  00A5               	movwf	(_RF_Data^(0+384)+5)
 15883                           
 15884                           ;RF_Control_B1.c: 207: RF_Data[6] = product->Data[6];
 15885  0F7B  0021               	movlb	1	; select bank1
 15886  0F7C  086D               	movf	_product^(0+128),w
 15887  0F7D  0086               	movwf	6
 15888  0F7E  3002               	movlw	2	; select bank4/5
 15889  0F7F  0087               	movwf	7
 15890  0F80  3002               	movlw	2	; select bank4/5
 15891  0F81  3F46               	moviw [6]fsr1
 15892  0F82  0023               	movlb	3	; select bank3
 15893  0F83  00A6               	movwf	(_RF_Data^(0+384)+6)
 15894                           
 15895                           ;RF_Control_B1.c: 208: RF_Data[7] = product->Data[7];
 15896  0F84  0021               	movlb	1	; select bank1
 15897  0F85  086D               	movf	_product^(0+128),w
 15898  0F86  0086               	movwf	6
 15899  0F87  3002               	movlw	2	; select bank4/5
 15900  0F88  0087               	movwf	7
 15901  0F89  3002               	movlw	2	; select bank4/5
 15902  0F8A  3F47               	moviw [7]fsr1
 15903  0F8B  0023               	movlb	3	; select bank3
 15904  0F8C  00A7               	movwf	(_RF_Data^(0+384)+7)
 15905                           
 15906                           ;RF_Control_B1.c: 209: RF_Data[8] = product->Data[8];
 15907  0F8D  0021               	movlb	1	; select bank1
 15908  0F8E  086D               	movf	_product^(0+128),w
 15909  0F8F  0086               	movwf	6
 15910  0F90  3002               	movlw	2	; select bank4/5
 15911  0F91  0087               	movwf	7
 15912  0F92  3002               	movlw	2	; select bank4/5
 15913  0F93  3F48               	moviw [8]fsr1
 15914  0F94  0023               	movlb	3	; select bank3
 15915  0F95  00A8               	movwf	(_RF_Data^(0+384)+8)
 15916                           
 15917                           ;RF_Control_B1.c: 210: RF_Data[9] = product->Data[9];
 15918  0F96  0021               	movlb	1	; select bank1
 15919  0F97  086D               	movf	_product^(0+128),w
 15920  0F98  0086               	movwf	6
 15921  0F99  3002               	movlw	2	; select bank4/5
 15922  0F9A  0087               	movwf	7
 15923  0F9B  3002               	movlw	2	; select bank4/5
 15924  0F9C  3F49               	moviw [9]fsr1
 15925  0F9D  0023               	movlb	3	; select bank3
 15926  0F9E  00A9               	movwf	(_RF_Data^(0+384)+9)
 15927                           
 15928                           ;RF_Control_B1.c: 211: RF_Data[10] = product->Data[10];
 15929  0F9F  0021               	movlb	1	; select bank1
 15930  0FA0  086D               	movf	_product^(0+128),w
 15931  0FA1  0086               	movwf	6
 15932  0FA2  3002               	movlw	2	; select bank4/5
 15933  0FA3  0087               	movwf	7
 15934  0FA4  3002               	movlw	2	; select bank4/5
 15935  0FA5  3F4A               	moviw [10]fsr1
 15936  0FA6  0023               	movlb	3	; select bank3
 15937  0FA7  00AA               	movwf	(_RF_Data^(0+384)+10)
 15938                           
 15939                           ;RF_Control_B1.c: 212: RF_Data[11] = product->Data[11];
 15940  0FA8  0021               	movlb	1	; select bank1
 15941  0FA9  086D               	movf	_product^(0+128),w
 15942  0FAA  0086               	movwf	6
 15943  0FAB  3002               	movlw	2	; select bank4/5
 15944  0FAC  0087               	movwf	7
 15945  0FAD  3002               	movlw	2	; select bank4/5
 15946  0FAE  3F4B               	moviw [11]fsr1
 15947  0FAF  0023               	movlb	3	; select bank3
 15948  0FB0  00AB               	movwf	(_RF_Data^(0+384)+11)
 15949                           
 15950                           ;RF_Control_B1.c: 213: RF_Data[12] = product->Data[12];
 15951  0FB1  0021               	movlb	1	; select bank1
 15952  0FB2  086D               	movf	_product^(0+128),w
 15953  0FB3  0086               	movwf	6
 15954  0FB4  3002               	movlw	2	; select bank4/5
 15955  0FB5  0087               	movwf	7
 15956  0FB6  3002               	movlw	2	; select bank4/5
 15957  0FB7  3F4C               	moviw [12]fsr1
 15958  0FB8  0023               	movlb	3	; select bank3
 15959  0FB9  00AC               	movwf	(_RF_Data^(0+384)+12)
 15960                           
 15961                           ;RF_Control_B1.c: 214: RF_Data[13] = product->Data[13];
 15962  0FBA  0021               	movlb	1	; select bank1
 15963  0FBB  086D               	movf	_product^(0+128),w
 15964  0FBC  0086               	movwf	6
 15965  0FBD  3002               	movlw	2	; select bank4/5
 15966  0FBE  0087               	movwf	7
 15967  0FBF  3002               	movlw	2	; select bank4/5
 15968  0FC0  3F4D               	moviw [13]fsr1
 15969  0FC1  0023               	movlb	3	; select bank3
 15970  0FC2  00AD               	movwf	(_RF_Data^(0+384)+13)
 15971                           
 15972                           ;RF_Control_B1.c: 215: RF_Data[14] = product->Data[14];
 15973  0FC3  0021               	movlb	1	; select bank1
 15974  0FC4  086D               	movf	_product^(0+128),w
 15975  0FC5  0086               	movwf	6
 15976  0FC6  3002               	movlw	2	; select bank4/5
 15977  0FC7  0087               	movwf	7
 15978  0FC8  3002               	movlw	2	; select bank4/5
 15979  0FC9  3F4E               	moviw [14]fsr1
 15980  0FCA  0023               	movlb	3	; select bank3
 15981  0FCB  00AE               	movwf	(_RF_Data^(0+384)+14)
 15982                           
 15983                           ;RF_Control_B1.c: 216: RF_Data[15] = product->Data[15];
 15984  0FCC  0021               	movlb	1	; select bank1
 15985  0FCD  086D               	movf	_product^(0+128),w
 15986  0FCE  0086               	movwf	6
 15987  0FCF  3002               	movlw	2	; select bank4/5
 15988  0FD0  0087               	movwf	7
 15989  0FD1  3002               	movlw	2	; select bank4/5
 15990  0FD2  3F4F               	moviw [15]fsr1
 15991  0FD3  0023               	movlb	3	; select bank3
 15992  0FD4  00AF               	movwf	(_RF_Data^(0+384)+15)
 15993                           
 15994                           ;RF_Control_B1.c: 217: RF_Data[16] = product->Data[16];
 15995  0FD5  0021               	movlb	1	; select bank1
 15996  0FD6  086D               	movf	_product^(0+128),w
 15997  0FD7  0086               	movwf	6
 15998  0FD8  3002               	movlw	2	; select bank4/5
 15999  0FD9  0087               	movwf	7
 16000  0FDA  3002               	movlw	2	; select bank4/5
 16001  0FDB  3F50               	moviw [16]fsr1
 16002  0FDC  0023               	movlb	3	; select bank3
 16003  0FDD  00B0               	movwf	(_RF_Data^(0+384)+16)
 16004                           
 16005                           ;RF_Control_B1.c: 218: RF_Data[17] = product->Data[17];
 16006  0FDE  0021               	movlb	1	; select bank1
 16007  0FDF  086D               	movf	_product^(0+128),w
 16008  0FE0  0086               	movwf	6
 16009  0FE1  3002               	movlw	2	; select bank4/5
 16010  0FE2  0087               	movwf	7
 16011  0FE3  3002               	movlw	2	; select bank4/5
 16012  0FE4  3F51               	moviw [17]fsr1
 16013  0FE5  0023               	movlb	3	; select bank3
 16014  0FE6  00B1               	movwf	(_RF_Data^(0+384)+17)
 16015                           
 16016                           ;RF_Control_B1.c: 219: RF_Data[18] = product->Data[18];
 16017  0FE7  0021               	movlb	1	; select bank1
 16018  0FE8  086D               	movf	_product^(0+128),w
 16019  0FE9  0086               	movwf	6
 16020  0FEA  3002               	movlw	2	; select bank4/5
 16021  0FEB  0087               	movwf	7
 16022  0FEC  3002               	movlw	2	; select bank4/5
 16023  0FED  3F52               	moviw [18]fsr1
 16024  0FEE  0023               	movlb	3	; select bank3
 16025  0FEF  00B2               	movwf	(_RF_Data^(0+384)+18)
 16026                           
 16027                           ;RF_Control_B1.c: 220: RF_Data[19] = product->Data[19];
 16028  0FF0  0021               	movlb	1	; select bank1
 16029  0FF1  086D               	movf	_product^(0+128),w
 16030  0FF2  0086               	movwf	6
 16031  0FF3  3002               	movlw	2	; select bank4/5
 16032  0FF4  0087               	movwf	7
 16033  0FF5  3002               	movlw	2	; select bank4/5
 16034  0FF6  3F53               	moviw [19]fsr1
 16035  0FF7  0023               	movlb	3	; select bank3
 16036  0FF8  00B3               	movwf	(_RF_Data^(0+384)+19)
 16037                           
 16038                           ;RF_Control_B1.c: 221: RF_Data[20] = 210;
 16039  0FF9  30D2               	movlw	210
 16040  0FFA  0020               	movlb	0	; select bank0
 16041  0FFB  00A1               	movwf	??_setTxData
 16042  0FFC  0821               	movf	??_setTxData,w
 16043  0FFD  0023               	movlb	3	; select bank3
 16044  0FFE  00B4               	movwf	(_RF_Data^(0+384)+20)
 16045  0FFF  0008               	return
 16046  1000                     __end_of_setTxData:	
 16047                           
 16048                           	psect	text104
 16049  1B34                     __ptext104:	
 16050 ;; *************** function _setRF_TransceiveGO *****************
 16051 ;; Defined at:
 16052 ;;		line 461 in file "../src/RF_Control_B1.c"
 16053 ;; Parameters:    Size  Location     Type
 16054 ;;  command         1    wreg     unsigned char 
 16055 ;; Auto vars:     Size  Location     Type
 16056 ;;  command         1    2[BANK0 ] unsigned char 
 16057 ;; Return value:  Size  Location     Type
 16058 ;;		None               void
 16059 ;; Registers used:
 16060 ;;		wreg, status,2, status,0
 16061 ;; Tracked objects:
 16062 ;;		On entry : 0/0
 16063 ;;		On exit  : 0/0
 16064 ;;		Unchanged: 0/0
 16065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16067 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16068 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16069 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16070 ;;Total ram usage:        2 bytes
 16071 ;; Hardware stack levels used:    1
 16072 ;; Hardware stack levels required when called:    5
 16073 ;; This function calls:
 16074 ;;		Nothing
 16075 ;; This function is called by:
 16076 ;;		_setDimmerLights_Dimming
 16077 ;; This function uses a non-reentrant model
 16078 ;;
 16079                           
 16080                           
 16081                           ;psect for function _setRF_TransceiveGO
 16082  1B34                     _setRF_TransceiveGO:	
 16083                           
 16084                           ;incstack = 0
 16085                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 16086                           ;setRF_TransceiveGO@command stored from wreg
 16087  1B34  0020               	movlb	0	; select bank0
 16088  1B35  00A2               	movwf	setRF_TransceiveGO@command
 16089                           
 16090                           ;RF_Control_B1.c: 462: RF1.TransceiveGO = command == 1 ? 1 : 0;
 16091  1B36  0822               	movf	setRF_TransceiveGO@command,w
 16092  1B37  3A01               	xorlw	1
 16093  1B38  3000               	movlw	0
 16094  1B39  1903               	skipnz
 16095  1B3A  3001               	movlw	1
 16096  1B3B  00A1               	movwf	??_setRF_TransceiveGO
 16097  1B3C  0DA1               	rlf	??_setRF_TransceiveGO,f
 16098  1B3D  0DA1               	rlf	??_setRF_TransceiveGO,f
 16099  1B3E  0021               	movlb	1	; select bank1
 16100  1B3F  0820               	movf	_RF1^(0+128),w
 16101  1B40  0020               	movlb	0	; select bank0
 16102  1B41  0621               	xorwf	??_setRF_TransceiveGO,w
 16103  1B42  39FB               	andlw	-5
 16104  1B43  0621               	xorwf	??_setRF_TransceiveGO,w
 16105  1B44  0021               	movlb	1	; select bank1
 16106  1B45  00A0               	movwf	_RF1^(0+128)
 16107  1B46  0008               	return
 16108  1B47                     __end_of_setRF_TransceiveGO:	
 16109                           
 16110                           	psect	text105
 16111  16CE                     __ptext105:	
 16112 ;; *************** function _setRF_DimmerLights *****************
 16113 ;; Defined at:
 16114 ;;		line 446 in file "../src/RF_Control_B1.c"
 16115 ;; Parameters:    Size  Location     Type
 16116 ;;  lights          1    wreg     unsigned char 
 16117 ;;  on              1   70[BANK0 ] unsigned char 
 16118 ;; Auto vars:     Size  Location     Type
 16119 ;;  lights          1   74[BANK0 ] unsigned char 
 16120 ;;  status          1   73[BANK0 ] unsigned char 
 16121 ;; Return value:  Size  Location     Type
 16122 ;;		None               void
 16123 ;; Registers used:
 16124 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16125 ;; Tracked objects:
 16126 ;;		On entry : 0/0
 16127 ;;		On exit  : 0/0
 16128 ;;		Unchanged: 0/0
 16129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16130 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16131 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16132 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16133 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16134 ;;Total ram usage:        5 bytes
 16135 ;; Hardware stack levels used:    1
 16136 ;; Hardware stack levels required when called:    6
 16137 ;; This function calls:
 16138 ;;		_setProductData
 16139 ;; This function is called by:
 16140 ;;		_setDimmerLights_OnOff
 16141 ;;		_setDimmerLights_Dimming
 16142 ;;		_setRFSW_Control
 16143 ;; This function uses a non-reentrant model
 16144 ;;
 16145                           
 16146                           
 16147                           ;psect for function _setRF_DimmerLights
 16148  16CE                     _setRF_DimmerLights:	
 16149                           
 16150                           ;incstack = 0
 16151                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16152                           ;setRF_DimmerLights@lights stored from wreg
 16153  16CE  0020               	movlb	0	; select bank0
 16154  16CF  00EA               	movwf	setRF_DimmerLights@lights
 16155                           
 16156                           ;RF_Control_B1.c: 447: char status = 1;
 16157  16D0  01E9               	clrf	setRF_DimmerLights@status
 16158  16D1  0AE9               	incf	setRF_DimmerLights@status,f
 16159                           
 16160                           ;RF_Control_B1.c: 448: status <<= (lights - 1);
 16161  16D2  086A               	movf	setRF_DimmerLights@lights,w
 16162  16D3  3EFF               	addlw	-1
 16163  16D4  0A89               	incf	9,f
 16164  16D5  2ED8               	goto	u10120
 16165  16D6                     u10125:	
 16166  16D6  1003               	clrc
 16167  16D7  0DE9               	rlf	setRF_DimmerLights@status,f
 16168  16D8                     u10120:	
 16169  16D8  3EFF               	addlw	-1
 16170  16D9  1D03               	skipz
 16171  16DA  2ED6               	goto	u10125
 16172                           
 16173                           ;RF_Control_B1.c: 449: setProductData(11, lights);
 16174  16DB  086A               	movf	setRF_DimmerLights@lights,w
 16175  16DC  00E7               	movwf	??_setRF_DimmerLights
 16176  16DD  0867               	movf	??_setRF_DimmerLights,w
 16177  16DE  00E3               	movwf	setProductData@value
 16178  16DF  300B               	movlw	11
 16179  16E0  319A  2223  3196   	fcall	_setProductData
 16180                           
 16181                           ;RF_Control_B1.c: 450: setProductData(17, product->Data[26 + lights]);
 16182  16E3  0020               	movlb	0	; select bank0
 16183  16E4  086A               	movf	setRF_DimmerLights@lights,w
 16184  16E5  3E1A               	addlw	26
 16185  16E6  0021               	movlb	1	; select bank1
 16186  16E7  076D               	addwf	_product^(0+128),w
 16187  16E8  0020               	movlb	0	; select bank0
 16188  16E9  00E7               	movwf	??_setRF_DimmerLights
 16189  16EA  0867               	movf	??_setRF_DimmerLights,w
 16190  16EB  0086               	movwf	6
 16191  16EC  3002               	movlw	2	; select bank4/5
 16192  16ED  0087               	movwf	7
 16193  16EE  0801               	movf	1,w
 16194  16EF  00E8               	movwf	??_setRF_DimmerLights+1
 16195  16F0  0868               	movf	??_setRF_DimmerLights+1,w
 16196  16F1  00E3               	movwf	setProductData@value
 16197  16F2  3011               	movlw	17
 16198  16F3  319A  2223  3196   	fcall	_setProductData
 16199                           
 16200                           ;RF_Control_B1.c: 451: if (on == 1) {
 16201  16F6  0020               	movlb	0	; select bank0
 16202  16F7  0866               	movf	setRF_DimmerLights@on,w
 16203  16F8  3A01               	xorlw	1
 16204  16F9  1D03               	skipz
 16205  16FA  2F1D               	goto	l9205
 16206                           
 16207                           ;RF_Control_B1.c: 452: setProductData(9, product->Data[20 + lights]);
 16208  16FB  086A               	movf	setRF_DimmerLights@lights,w
 16209  16FC  3E14               	addlw	20
 16210  16FD  0021               	movlb	1	; select bank1
 16211  16FE  076D               	addwf	_product^(0+128),w
 16212  16FF  0020               	movlb	0	; select bank0
 16213  1700  00E7               	movwf	??_setRF_DimmerLights
 16214  1701  0867               	movf	??_setRF_DimmerLights,w
 16215  1702  0086               	movwf	6
 16216  1703  3002               	movlw	2	; select bank4/5
 16217  1704  0087               	movwf	7
 16218  1705  0801               	movf	1,w
 16219  1706  00E8               	movwf	??_setRF_DimmerLights+1
 16220  1707  0868               	movf	??_setRF_DimmerLights+1,w
 16221  1708  00E3               	movwf	setProductData@value
 16222  1709  3009               	movlw	9
 16223  170A  319A  2223  3196   	fcall	_setProductData
 16224                           
 16225                           ;RF_Control_B1.c: 453: setProductData(15, (product->Data[15] | status));
 16226  170D  0021               	movlb	1	; select bank1
 16227  170E  086D               	movf	_product^(0+128),w
 16228  170F  3E0F               	addlw	15
 16229  1710  0086               	movwf	6
 16230  1711  3002               	movlw	2	; select bank4/5
 16231  1712  0087               	movwf	7
 16232  1713  0801               	movf	1,w
 16233  1714  0020               	movlb	0	; select bank0
 16234  1715  0469               	iorwf	setRF_DimmerLights@status,w
 16235  1716  00E7               	movwf	??_setRF_DimmerLights
 16236  1717  0867               	movf	??_setRF_DimmerLights,w
 16237  1718  00E3               	movwf	setProductData@value
 16238  1719  300F               	movlw	15
 16239  171A  319A  2223         	fcall	_setProductData
 16240                           
 16241                           ;RF_Control_B1.c: 454: } else {
 16242  171C  0008               	return
 16243  171D                     l9205:	
 16244                           
 16245                           ;RF_Control_B1.c: 455: setProductData(9, 0x00);
 16246  171D  0020               	movlb	0	; select bank0
 16247  171E  01E3               	clrf	setProductData@value
 16248  171F  3009               	movlw	9
 16249  1720  319A  2223  3196   	fcall	_setProductData
 16250                           
 16251                           ;RF_Control_B1.c: 456: setProductData(15, (product->Data[15]&(~status)));
 16252  1723  0021               	movlb	1	; select bank1
 16253  1724  086D               	movf	_product^(0+128),w
 16254  1725  3E0F               	addlw	15
 16255  1726  0086               	movwf	6
 16256  1727  3002               	movlw	2	; select bank4/5
 16257  1728  0087               	movwf	7
 16258  1729  0020               	movlb	0	; select bank0
 16259  172A  0969               	comf	setRF_DimmerLights@status,w
 16260  172B  0501               	andwf	1,w
 16261  172C  00E7               	movwf	??_setRF_DimmerLights
 16262  172D  0867               	movf	??_setRF_DimmerLights,w
 16263  172E  00E3               	movwf	setProductData@value
 16264  172F  300F               	movlw	15
 16265  1730  319A  2223         	fcall	_setProductData
 16266  1732  0008               	return
 16267  1733                     __end_of_setRF_DimmerLights:	
 16268                           
 16269                           	psect	text106
 16270  1D25                     __ptext106:	
 16271 ;; *************** function _setDimmerLights_Line *****************
 16272 ;; Defined at:
 16273 ;;		line 955 in file "../src/Dimmer_B1.c"
 16274 ;; Parameters:    Size  Location     Type
 16275 ;;  lights          1    wreg     unsigned char 
 16276 ;; Auto vars:     Size  Location     Type
 16277 ;;  lights          1    1[BANK0 ] unsigned char 
 16278 ;; Return value:  Size  Location     Type
 16279 ;;		None               void
 16280 ;; Registers used:
 16281 ;;		wreg
 16282 ;; Tracked objects:
 16283 ;;		On entry : 0/0
 16284 ;;		On exit  : 0/0
 16285 ;;		Unchanged: 0/0
 16286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16288 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16290 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16291 ;;Total ram usage:        1 bytes
 16292 ;; Hardware stack levels used:    1
 16293 ;; Hardware stack levels required when called:    5
 16294 ;; This function calls:
 16295 ;;		Nothing
 16296 ;; This function is called by:
 16297 ;;		_setDimmerLights_OnOff
 16298 ;;		_setDimmerLights_Dimming
 16299 ;; This function uses a non-reentrant model
 16300 ;;
 16301                           
 16302                           
 16303                           ;psect for function _setDimmerLights_Line
 16304  1D25                     _setDimmerLights_Line:	
 16305                           
 16306                           ;incstack = 0
 16307                           ; Regs used in _setDimmerLights_Line: [wreg]
 16308                           ;setDimmerLights_Line@lights stored from wreg
 16309  1D25  0020               	movlb	0	; select bank0
 16310  1D26  00A1               	movwf	setDimmerLights_Line@lights
 16311                           
 16312                           ;Dimmer_B1.c: 956: Dimmer.LoadGO = 1;
 16313  1D27  0022               	movlb	2	; select bank2
 16314  1D28  14B9               	bsf	_Dimmer^(0+256),1
 16315                           
 16316                           ;Dimmer_B1.c: 958: DimmerLights1.Line = 0;
 16317  1D29  10E9               	bcf	(_DimmerLights1^(0+256)+1),1
 16318                           
 16319                           ;Dimmer_B1.c: 959: if (lights == 1 && lights != 0) {
 16320  1D2A  0020               	movlb	0	; select bank0
 16321  1D2B  0821               	movf	setDimmerLights_Line@lights,w
 16322  1D2C  3A01               	xorlw	1
 16323  1D2D  1D03               	skipz
 16324  1D2E  2D34               	goto	l903
 16325  1D2F  0821               	movf	setDimmerLights_Line@lights,w
 16326  1D30  1903               	btfsc	3,2
 16327  1D31  2D34               	goto	l903
 16328                           
 16329                           ;Dimmer_B1.c: 960: DimmerLights1.Line = 1;
 16330  1D32  0022               	movlb	2	; select bank2
 16331  1D33  14E9               	bsf	(_DimmerLights1^(0+256)+1),1
 16332  1D34                     l903:	
 16333                           
 16334                           ;Dimmer_B1.c: 961: }
 16335                           ;Dimmer_B1.c: 964: DimmerLights2.Line = 0;
 16336  1D34  0023               	movlb	3	; select bank3
 16337  1D35  10D1               	bcf	(_DimmerLights2^(0+384)+1),1
 16338                           
 16339                           ;Dimmer_B1.c: 965: if (lights == 2 && lights != 0) {
 16340  1D36  0020               	movlb	0	; select bank0
 16341  1D37  0821               	movf	setDimmerLights_Line@lights,w
 16342  1D38  3A02               	xorlw	2
 16343  1D39  1D03               	skipz
 16344  1D3A  0008               	return
 16345  1D3B  0821               	movf	setDimmerLights_Line@lights,w
 16346  1D3C  1903               	btfsc	3,2
 16347  1D3D  0008               	return
 16348                           
 16349                           ;Dimmer_B1.c: 966: DimmerLights2.Line = 1;
 16350  1D3E  0023               	movlb	3	; select bank3
 16351  1D3F  14D1               	bsf	(_DimmerLights2^(0+384)+1),1
 16352  1D40  0020               	movlb	0	; select bank0
 16353  1D41  0008               	return
 16354  1D42                     __end_of_setDimmerLights_Line:	
 16355                           
 16356                           	psect	text107
 16357  1C28                     __ptext107:	
 16358 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 16359 ;; Defined at:
 16360 ;;		line 89 in file "../src/Dimmer_B1.c"
 16361 ;; Parameters:    Size  Location     Type
 16362 ;;  lights          1    wreg     unsigned char 
 16363 ;;  value           1   67[BANK0 ] unsigned char 
 16364 ;; Auto vars:     Size  Location     Type
 16365 ;;  lights          1   69[BANK0 ] unsigned char 
 16366 ;; Return value:  Size  Location     Type
 16367 ;;		None               void
 16368 ;; Registers used:
 16369 ;;		wreg
 16370 ;; Tracked objects:
 16371 ;;		On entry : 0/0
 16372 ;;		On exit  : 0/0
 16373 ;;		Unchanged: 0/0
 16374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16375 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16376 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16377 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16378 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16379 ;;Total ram usage:        3 bytes
 16380 ;; Hardware stack levels used:    1
 16381 ;; Hardware stack levels required when called:    5
 16382 ;; This function calls:
 16383 ;;		Nothing
 16384 ;; This function is called by:
 16385 ;;		_setDimmerLights_OnOff
 16386 ;;		_setDimmerLights_Dimming
 16387 ;;		_setRFSW_AdjControl
 16388 ;; This function uses a non-reentrant model
 16389 ;;
 16390                           
 16391                           
 16392                           ;psect for function _setDimmerIntr_MaxmumValue
 16393  1C28                     _setDimmerIntr_MaxmumValue:	
 16394                           
 16395                           ;incstack = 0
 16396                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 16397                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 16398  1C28  0020               	movlb	0	; select bank0
 16399  1C29  00E5               	movwf	setDimmerIntr_MaxmumValue@lights
 16400                           
 16401                           ;Dimmer_B1.c: 91: if (lights == 1) {
 16402  1C2A  0865               	movf	setDimmerIntr_MaxmumValue@lights,w
 16403  1C2B  3A01               	xorlw	1
 16404  1C2C  1D03               	skipz
 16405  1C2D  2C34               	goto	l6701
 16406                           
 16407                           ;Dimmer_B1.c: 92: DimmerIntr1.MaxmumValue = value;
 16408  1C2E  0863               	movf	setDimmerIntr_MaxmumValue@value,w
 16409  1C2F  00E4               	movwf	??_setDimmerIntr_MaxmumValue
 16410  1C30  0864               	movf	??_setDimmerIntr_MaxmumValue,w
 16411  1C31  0021               	movlb	1	; select bank1
 16412  1C32  00B4               	movwf	(_DimmerIntr1^(0+128)+6)
 16413                           
 16414                           ;Dimmer_B1.c: 93: }
 16415  1C33  0008               	return
 16416  1C34                     l6701:	
 16417                           
 16418                           ;Dimmer_B1.c: 96: else if (lights == 2) {
 16419  1C34  0020               	movlb	0	; select bank0
 16420  1C35  0865               	movf	setDimmerIntr_MaxmumValue@lights,w
 16421  1C36  3A02               	xorlw	2
 16422  1C37  1D03               	skipz
 16423  1C38  0008               	return
 16424                           
 16425                           ;Dimmer_B1.c: 97: DimmerIntr2.MaxmumValue = value;
 16426  1C39  0863               	movf	setDimmerIntr_MaxmumValue@value,w
 16427  1C3A  00E4               	movwf	??_setDimmerIntr_MaxmumValue
 16428  1C3B  0864               	movf	??_setDimmerIntr_MaxmumValue,w
 16429  1C3C  0021               	movlb	1	; select bank1
 16430  1C3D  00C0               	movwf	(_DimmerIntr2^(0+128)+6)
 16431  1C3E  0008               	return
 16432  1C3F                     __end_of_setDimmerIntr_MaxmumValue:	
 16433                           
 16434                           	psect	text108
 16435  1FD5                     __ptext108:	
 16436 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 16437 ;; Defined at:
 16438 ;;		line 166 in file "../src/Dimmer_B1.c"
 16439 ;; Parameters:    Size  Location     Type
 16440 ;;  lights          1    wreg     unsigned char 
 16441 ;;  command         1    1[BANK0 ] unsigned char 
 16442 ;; Auto vars:     Size  Location     Type
 16443 ;;  lights          1    3[BANK0 ] unsigned char 
 16444 ;; Return value:  Size  Location     Type
 16445 ;;		None               void
 16446 ;; Registers used:
 16447 ;;		wreg, status,2, status,0
 16448 ;; Tracked objects:
 16449 ;;		On entry : 0/0
 16450 ;;		On exit  : 0/0
 16451 ;;		Unchanged: 0/0
 16452 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16453 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16454 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16455 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16456 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16457 ;;Total ram usage:        3 bytes
 16458 ;; Hardware stack levels used:    1
 16459 ;; Hardware stack levels required when called:    5
 16460 ;; This function calls:
 16461 ;;		Nothing
 16462 ;; This function is called by:
 16463 ;;		_setDimmerLights_Dimming
 16464 ;; This function uses a non-reentrant model
 16465 ;;
 16466                           
 16467                           
 16468                           ;psect for function _setDimmerIntr_Dimming_Sw
 16469  1FD5                     _setDimmerIntr_Dimming_Sw:	
 16470                           
 16471                           ;incstack = 0
 16472                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 16473                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 16474  1FD5  0020               	movlb	0	; select bank0
 16475  1FD6  00A3               	movwf	setDimmerIntr_Dimming_Sw@lights
 16476                           
 16477                           ;Dimmer_B1.c: 168: if (lights == 1) {
 16478  1FD7  0823               	movf	setDimmerIntr_Dimming_Sw@lights,w
 16479  1FD8  3A01               	xorlw	1
 16480  1FD9  1D03               	skipz
 16481  1FDA  2FEB               	goto	l7061
 16482                           
 16483                           ;Dimmer_B1.c: 169: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 16484  1FDB  0821               	movf	setDimmerIntr_Dimming_Sw@command,w
 16485  1FDC  3A01               	xorlw	1
 16486  1FDD  3000               	movlw	0
 16487  1FDE  1903               	skipnz
 16488  1FDF  3001               	movlw	1
 16489  1FE0  00A2               	movwf	??_setDimmerIntr_Dimming_Sw
 16490  1FE1  0EA2               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16491  1FE2  0021               	movlb	1	; select bank1
 16492  1FE3  082E               	movf	_DimmerIntr1^(0+128),w
 16493  1FE4  0020               	movlb	0	; select bank0
 16494  1FE5  0622               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16495  1FE6  39EF               	andlw	-17
 16496  1FE7  0622               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16497  1FE8  0021               	movlb	1	; select bank1
 16498  1FE9  00AE               	movwf	_DimmerIntr1^(0+128)
 16499                           
 16500                           ;Dimmer_B1.c: 170: }
 16501  1FEA  0008               	return
 16502  1FEB                     l7061:	
 16503                           
 16504                           ;Dimmer_B1.c: 173: else if (lights == 2) {
 16505  1FEB  0020               	movlb	0	; select bank0
 16506  1FEC  0823               	movf	setDimmerIntr_Dimming_Sw@lights,w
 16507  1FED  3A02               	xorlw	2
 16508  1FEE  1D03               	skipz
 16509  1FEF  0008               	return
 16510                           
 16511                           ;Dimmer_B1.c: 174: DimmerIntr2.Dimming_Sw = command == 1 ? 1 : 0;
 16512  1FF0  0821               	movf	setDimmerIntr_Dimming_Sw@command,w
 16513  1FF1  3A01               	xorlw	1
 16514  1FF2  3000               	movlw	0
 16515  1FF3  1903               	skipnz
 16516  1FF4  3001               	movlw	1
 16517  1FF5  00A2               	movwf	??_setDimmerIntr_Dimming_Sw
 16518  1FF6  0EA2               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16519  1FF7  0021               	movlb	1	; select bank1
 16520  1FF8  083A               	movf	_DimmerIntr2^(0+128),w
 16521  1FF9  0020               	movlb	0	; select bank0
 16522  1FFA  0622               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16523  1FFB  39EF               	andlw	-17
 16524  1FFC  0622               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16525  1FFD  0021               	movlb	1	; select bank1
 16526  1FFE  00BA               	movwf	_DimmerIntr2^(0+128)
 16527  1FFF  0008               	return
 16528  2000                     __end_of_setDimmerIntr_Dimming_Sw:	
 16529                           
 16530                           	psect	text109
 16531  1669                     __ptext109:	
 16532 ;; *************** function _getDimmerLights_ValueToPercent *****************
 16533 ;; Defined at:
 16534 ;;		line 1055 in file "../src/Dimmer_B1.c"
 16535 ;; Parameters:    Size  Location     Type
 16536 ;;  value           1    wreg     unsigned char 
 16537 ;; Auto vars:     Size  Location     Type
 16538 ;;  value           1   63[BANK0 ] unsigned char 
 16539 ;;  i               3   64[BANK0 ] float 
 16540 ;; Return value:  Size  Location     Type
 16541 ;;                  1    wreg      unsigned char 
 16542 ;; Registers used:
 16543 ;;		wreg, status,2, status,0, pclath, cstack
 16544 ;; Tracked objects:
 16545 ;;		On entry : 0/0
 16546 ;;		On exit  : 0/0
 16547 ;;		Unchanged: 0/0
 16548 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16549 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16550 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16551 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16552 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16553 ;;Total ram usage:        6 bytes
 16554 ;; Hardware stack levels used:    1
 16555 ;; Hardware stack levels required when called:    7
 16556 ;; This function calls:
 16557 ;;		___awtoft
 16558 ;;		___ftadd
 16559 ;;		___ftdiv
 16560 ;;		___ftneg
 16561 ;;		___fttol
 16562 ;; This function is called by:
 16563 ;;		_setDimmerLights_OnOff
 16564 ;;		_setDimmerLights_Dimming
 16565 ;;		_Flash_Memory_Initialization
 16566 ;; This function uses a non-reentrant model
 16567 ;;
 16568                           
 16569                           
 16570                           ;psect for function _getDimmerLights_ValueToPercent
 16571  1669                     _getDimmerLights_ValueToPercent:	
 16572                           
 16573                           ;incstack = 0
 16574                           ; Regs used in _getDimmerLights_ValueToPercent: [wreg+status,2+status,0+pclath+cstack]
 16575                           ;getDimmerLights_ValueToPercent@value stored from wreg
 16576  1669  0020               	movlb	0	; select bank0
 16577  166A  00DF               	movwf	getDimmerLights_ValueToPercent@value
 16578                           
 16579                           ;Dimmer_B1.c: 1063: float i = ((char)(65*0.65)) - ((char)(20*0.65));
 16580  166B  3000               	movlw	0
 16581  166C  00E0               	movwf	getDimmerLights_ValueToPercent@i
 16582  166D  30E8               	movlw	232
 16583  166E  00E1               	movwf	getDimmerLights_ValueToPercent@i+1
 16584  166F  3041               	movlw	65
 16585  1670  00E2               	movwf	getDimmerLights_ValueToPercent@i+2
 16586                           
 16587                           ;Dimmer_B1.c: 1064: i /= 100;
 16588  1671  3000               	movlw	0
 16589  1672  00AF               	movwf	___ftdiv@f2
 16590  1673  30C8               	movlw	200
 16591  1674  00B0               	movwf	___ftdiv@f2+1
 16592  1675  3042               	movlw	66
 16593  1676  00B1               	movwf	___ftdiv@f2+2
 16594  1677  0860               	movf	getDimmerLights_ValueToPercent@i,w
 16595  1678  00B2               	movwf	___ftdiv@f1
 16596  1679  0861               	movf	getDimmerLights_ValueToPercent@i+1,w
 16597  167A  00B3               	movwf	___ftdiv@f1+1
 16598  167B  0862               	movf	getDimmerLights_ValueToPercent@i+2,w
 16599  167C  00B4               	movwf	___ftdiv@f1+2
 16600  167D  318D  2538  3196   	fcall	___ftdiv
 16601  1680  0020               	movlb	0	; select bank0
 16602  1681  082F               	movf	?___ftdiv,w
 16603  1682  00E0               	movwf	getDimmerLights_ValueToPercent@i
 16604  1683  0830               	movf	?___ftdiv+1,w
 16605  1684  00E1               	movwf	getDimmerLights_ValueToPercent@i+1
 16606  1685  0831               	movf	?___ftdiv+2,w
 16607  1686  00E2               	movwf	getDimmerLights_ValueToPercent@i+2
 16608                           
 16609                           ;Dimmer_B1.c: 1066: return (char) (100 - ((((char)(65*0.65)) - value) / i));
 16610  1687  085F               	movf	getDimmerLights_ValueToPercent@value,w
 16611  1688  00DD               	movwf	??_getDimmerLights_ValueToPercent
 16612  1689  01DE               	clrf	??_getDimmerLights_ValueToPercent+1
 16613  168A  09DD               	comf	??_getDimmerLights_ValueToPercent,f
 16614  168B  09DE               	comf	??_getDimmerLights_ValueToPercent+1,f
 16615  168C  0ADD               	incf	??_getDimmerLights_ValueToPercent,f
 16616  168D  1903               	skipnz
 16617  168E  0ADE               	incf	??_getDimmerLights_ValueToPercent+1,f
 16618  168F  085D               	movf	??_getDimmerLights_ValueToPercent,w
 16619  1690  3E2A               	addlw	42
 16620  1691  00A9               	movwf	___awtoft@c
 16621  1692  3000               	movlw	0
 16622  1693  3D5E               	addwfc	??_getDimmerLights_ValueToPercent+1,w
 16623  1694  00AA               	movwf	___awtoft@c+1
 16624  1695  319E  269F  3196   	fcall	___awtoft
 16625  1698  0020               	movlb	0	; select bank0
 16626  1699  0829               	movf	?___awtoft,w
 16627  169A  00B2               	movwf	___ftdiv@f1
 16628  169B  082A               	movf	?___awtoft+1,w
 16629  169C  00B3               	movwf	___ftdiv@f1+1
 16630  169D  082B               	movf	?___awtoft+2,w
 16631  169E  00B4               	movwf	___ftdiv@f1+2
 16632  169F  0860               	movf	getDimmerLights_ValueToPercent@i,w
 16633  16A0  00AF               	movwf	___ftdiv@f2
 16634  16A1  0861               	movf	getDimmerLights_ValueToPercent@i+1,w
 16635  16A2  00B0               	movwf	___ftdiv@f2+1
 16636  16A3  0862               	movf	getDimmerLights_ValueToPercent@i+2,w
 16637  16A4  00B1               	movwf	___ftdiv@f2+2
 16638  16A5  318D  2538  3196   	fcall	___ftdiv
 16639  16A8  0020               	movlb	0	; select bank0
 16640  16A9  082F               	movf	?___ftdiv,w
 16641  16AA  00BF               	movwf	___ftneg@f1
 16642  16AB  0830               	movf	?___ftdiv+1,w
 16643  16AC  00C0               	movwf	___ftneg@f1+1
 16644  16AD  0831               	movf	?___ftdiv+2,w
 16645  16AE  00C1               	movwf	___ftneg@f1+2
 16646  16AF  3199  21CF  3196   	fcall	___ftneg
 16647  16B2  0020               	movlb	0	; select bank0
 16648  16B3  083F               	movf	?___ftneg,w
 16649  16B4  00C5               	movwf	___ftadd@f2
 16650  16B5  0840               	movf	?___ftneg+1,w
 16651  16B6  00C6               	movwf	___ftadd@f2+1
 16652  16B7  0841               	movf	?___ftneg+2,w
 16653  16B8  00C7               	movwf	___ftadd@f2+2
 16654  16B9  3000               	movlw	0
 16655  16BA  00C2               	movwf	___ftadd@f1
 16656  16BB  30C8               	movlw	200
 16657  16BC  00C3               	movwf	___ftadd@f1+1
 16658  16BD  3042               	movlw	66
 16659  16BE  00C4               	movwf	___ftadd@f1+2
 16660  16BF  3183  2388  3196   	fcall	___ftadd
 16661  16C2  0020               	movlb	0	; select bank0
 16662  16C3  0842               	movf	?___ftadd,w
 16663  16C4  00CF               	movwf	___fttol@f1
 16664  16C5  0843               	movf	?___ftadd+1,w
 16665  16C6  00D0               	movwf	___fttol@f1+1
 16666  16C7  0844               	movf	?___ftadd+2,w
 16667  16C8  00D1               	movwf	___fttol@f1+2
 16668  16C9  318B  2396         	fcall	___fttol
 16669  16CB  0020               	movlb	0	; select bank0
 16670  16CC  084F               	movf	?___fttol,w
 16671  16CD  0008               	return
 16672  16CE                     __end_of_getDimmerLights_ValueToPercent:	
 16673                           
 16674                           	psect	text110
 16675  0B96                     __ptext110:	
 16676 ;; *************** function ___fttol *****************
 16677 ;; Defined at:
 16678 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 16679 ;; Parameters:    Size  Location     Type
 16680 ;;  f1              3   47[BANK0 ] float 
 16681 ;; Auto vars:     Size  Location     Type
 16682 ;;  lval            4   56[BANK0 ] unsigned long 
 16683 ;;  exp1            1   60[BANK0 ] unsigned char 
 16684 ;;  sign1           1   55[BANK0 ] unsigned char 
 16685 ;; Return value:  Size  Location     Type
 16686 ;;                  4   47[BANK0 ] long 
 16687 ;; Registers used:
 16688 ;;		wreg, status,2, status,0
 16689 ;; Tracked objects:
 16690 ;;		On entry : 0/0
 16691 ;;		On exit  : 0/0
 16692 ;;		Unchanged: 0/0
 16693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16694 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16695 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16696 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16697 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16698 ;;Total ram usage:       14 bytes
 16699 ;; Hardware stack levels used:    1
 16700 ;; Hardware stack levels required when called:    5
 16701 ;; This function calls:
 16702 ;;		Nothing
 16703 ;; This function is called by:
 16704 ;;		_getDimmerLights_PercentToValue
 16705 ;;		_getDimmerLights_ValueToPercent
 16706 ;; This function uses a non-reentrant model
 16707 ;;
 16708                           
 16709                           
 16710                           ;psect for function ___fttol
 16711  0B96                     ___fttol:	
 16712                           
 16713                           ;incstack = 0
 16714                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 16715  0B96  0020               	movlb	0	; select bank0
 16716  0B97  084F               	movf	___fttol@f1,w
 16717  0B98  00D3               	movwf	??___fttol
 16718  0B99  0850               	movf	___fttol@f1+1,w
 16719  0B9A  00D4               	movwf	??___fttol+1
 16720  0B9B  0851               	movf	___fttol@f1+2,w
 16721  0B9C  00D5               	movwf	??___fttol+2
 16722  0B9D  1003               	clrc
 16723  0B9E  0D54               	rlf	??___fttol+1,w
 16724  0B9F  0D55               	rlf	??___fttol+2,w
 16725  0BA0  00D6               	movwf	??___fttol+3
 16726  0BA1  0856               	movf	??___fttol+3,w
 16727  0BA2  00DC               	movwf	___fttol@exp1
 16728  0BA3  08DC               	movf	___fttol@exp1,f
 16729  0BA4  1D03               	skipz
 16730  0BA5  2BAF               	goto	l6539
 16731  0BA6  3000               	movlw	0
 16732  0BA7  00D2               	movwf	?___fttol+3
 16733  0BA8  3000               	movlw	0
 16734  0BA9  00D1               	movwf	?___fttol+2
 16735  0BAA  3000               	movlw	0
 16736  0BAB  00D0               	movwf	?___fttol+1
 16737  0BAC  3000               	movlw	0
 16738  0BAD  00CF               	movwf	?___fttol
 16739  0BAE  0008               	return
 16740  0BAF                     l6539:	
 16741  0BAF  084F               	movf	___fttol@f1,w
 16742  0BB0  00D3               	movwf	??___fttol
 16743  0BB1  0850               	movf	___fttol@f1+1,w
 16744  0BB2  00D4               	movwf	??___fttol+1
 16745  0BB3  0851               	movf	___fttol@f1+2,w
 16746  0BB4  00D5               	movwf	??___fttol+2
 16747  0BB5  3017               	movlw	23
 16748  0BB6                     u5695:	
 16749  0BB6  36D5               	lsrf	??___fttol+2,f
 16750  0BB7  0CD4               	rrf	??___fttol+1,f
 16751  0BB8  0CD3               	rrf	??___fttol,f
 16752  0BB9  0B89               	decfsz	9,f
 16753  0BBA  2BB6               	goto	u5695
 16754  0BBB  0853               	movf	??___fttol,w
 16755  0BBC  00D6               	movwf	??___fttol+3
 16756  0BBD  0856               	movf	??___fttol+3,w
 16757  0BBE  00D7               	movwf	___fttol@sign1
 16758  0BBF  17D0               	bsf	___fttol@f1+1,7
 16759  0BC0  30FF               	movlw	255
 16760  0BC1  05CF               	andwf	___fttol@f1,f
 16761  0BC2  30FF               	movlw	255
 16762  0BC3  05D0               	andwf	___fttol@f1+1,f
 16763  0BC4  3000               	movlw	0
 16764  0BC5  05D1               	andwf	___fttol@f1+2,f
 16765  0BC6  084F               	movf	___fttol@f1,w
 16766  0BC7  00D8               	movwf	___fttol@lval
 16767  0BC8  0850               	movf	___fttol@f1+1,w
 16768  0BC9  00D9               	movwf	___fttol@lval+1
 16769  0BCA  0851               	movf	___fttol@f1+2,w
 16770  0BCB  00DA               	movwf	___fttol@lval+2
 16771  0BCC  01DB               	clrf	___fttol@lval+3
 16772  0BCD  308E               	movlw	142
 16773  0BCE  02DC               	subwf	___fttol@exp1,f
 16774  0BCF  1FDC               	btfss	___fttol@exp1,7
 16775  0BD0  2BED               	goto	l6559
 16776  0BD1  085C               	movf	___fttol@exp1,w
 16777  0BD2  3A80               	xorlw	128
 16778  0BD3  3E8F               	addlw	143
 16779  0BD4  1803               	skipnc
 16780  0BD5  2BDF               	goto	l6557
 16781  0BD6  3000               	movlw	0
 16782  0BD7  00D2               	movwf	?___fttol+3
 16783  0BD8  3000               	movlw	0
 16784  0BD9  00D1               	movwf	?___fttol+2
 16785  0BDA  3000               	movlw	0
 16786  0BDB  00D0               	movwf	?___fttol+1
 16787  0BDC  3000               	movlw	0
 16788  0BDD  00CF               	movwf	?___fttol
 16789  0BDE  0008               	return
 16790  0BDF                     l6557:	
 16791  0BDF  3001               	movlw	1
 16792  0BE0                     u5725:	
 16793  0BE0  36DB               	lsrf	___fttol@lval+3,f
 16794  0BE1  0CDA               	rrf	___fttol@lval+2,f
 16795  0BE2  0CD9               	rrf	___fttol@lval+1,f
 16796  0BE3  0CD8               	rrf	___fttol@lval,f
 16797  0BE4  0B89               	decfsz	9,f
 16798  0BE5  2BE0               	goto	u5725
 16799  0BE6  3001               	movlw	1
 16800  0BE7  00D3               	movwf	??___fttol
 16801  0BE8  0853               	movf	??___fttol,w
 16802  0BE9  07DC               	addwf	___fttol@exp1,f
 16803  0BEA  1903               	btfsc	3,2
 16804  0BEB  2C06               	goto	l6569
 16805  0BEC  2BDF               	goto	l6557
 16806  0BED                     l6559:	
 16807  0BED  3018               	movlw	24
 16808  0BEE  025C               	subwf	___fttol@exp1,w
 16809  0BEF  1C03               	skipc
 16810  0BF0  2C03               	goto	l6567
 16811  0BF1  3000               	movlw	0
 16812  0BF2  00D2               	movwf	?___fttol+3
 16813  0BF3  3000               	movlw	0
 16814  0BF4  00D1               	movwf	?___fttol+2
 16815  0BF5  3000               	movlw	0
 16816  0BF6  00D0               	movwf	?___fttol+1
 16817  0BF7  3000               	movlw	0
 16818  0BF8  00CF               	movwf	?___fttol
 16819  0BF9  0008               	return
 16820  0BFA                     l6565:	
 16821  0BFA  3001               	movlw	1
 16822  0BFB                     u5755:	
 16823  0BFB  35D8               	lslf	___fttol@lval,f
 16824  0BFC  0DD9               	rlf	___fttol@lval+1,f
 16825  0BFD  0DDA               	rlf	___fttol@lval+2,f
 16826  0BFE  0DDB               	rlf	___fttol@lval+3,f
 16827  0BFF  0B89               	decfsz	9,f
 16828  0C00  2BFB               	goto	u5755
 16829  0C01  3001               	movlw	1
 16830  0C02  02DC               	subwf	___fttol@exp1,f
 16831  0C03                     l6567:	
 16832  0C03  08DC               	movf	___fttol@exp1,f
 16833  0C04  1D03               	skipz
 16834  0C05  2BFA               	goto	l6565
 16835  0C06                     l6569:	
 16836  0C06  0857               	movf	___fttol@sign1,w
 16837  0C07  1903               	btfsc	3,2
 16838  0C08  2C14               	goto	l6573
 16839  0C09  09D8               	comf	___fttol@lval,f
 16840  0C0A  09D9               	comf	___fttol@lval+1,f
 16841  0C0B  09DA               	comf	___fttol@lval+2,f
 16842  0C0C  09DB               	comf	___fttol@lval+3,f
 16843  0C0D  0AD8               	incf	___fttol@lval,f
 16844  0C0E  1903               	skipnz
 16845  0C0F  0AD9               	incf	___fttol@lval+1,f
 16846  0C10  1903               	skipnz
 16847  0C11  0ADA               	incf	___fttol@lval+2,f
 16848  0C12  1903               	skipnz
 16849  0C13  0ADB               	incf	___fttol@lval+3,f
 16850  0C14                     l6573:	
 16851  0C14  085B               	movf	___fttol@lval+3,w
 16852  0C15  00D2               	movwf	?___fttol+3
 16853  0C16  085A               	movf	___fttol@lval+2,w
 16854  0C17  00D1               	movwf	?___fttol+2
 16855  0C18  0859               	movf	___fttol@lval+1,w
 16856  0C19  00D0               	movwf	?___fttol+1
 16857  0C1A  0858               	movf	___fttol@lval,w
 16858  0C1B  00CF               	movwf	?___fttol
 16859  0C1C  0008               	return
 16860  0C1D                     __end_of___fttol:	
 16861                           
 16862                           	psect	text111
 16863  19CF                     __ptext111:	
 16864 ;; *************** function ___ftneg *****************
 16865 ;; Defined at:
 16866 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 16867 ;; Parameters:    Size  Location     Type
 16868 ;;  f1              3   31[BANK0 ] float 
 16869 ;; Auto vars:     Size  Location     Type
 16870 ;;		None
 16871 ;; Return value:  Size  Location     Type
 16872 ;;                  3   31[BANK0 ] float 
 16873 ;; Registers used:
 16874 ;;		wreg
 16875 ;; Tracked objects:
 16876 ;;		On entry : 0/0
 16877 ;;		On exit  : 0/0
 16878 ;;		Unchanged: 0/0
 16879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16880 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16882 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16883 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16884 ;;Total ram usage:        3 bytes
 16885 ;; Hardware stack levels used:    1
 16886 ;; Hardware stack levels required when called:    5
 16887 ;; This function calls:
 16888 ;;		Nothing
 16889 ;; This function is called by:
 16890 ;;		_getDimmerLights_PercentToValue
 16891 ;;		_getDimmerLights_ValueToPercent
 16892 ;; This function uses a non-reentrant model
 16893 ;;
 16894                           
 16895                           
 16896                           ;psect for function ___ftneg
 16897  19CF                     ___ftneg:	
 16898                           
 16899                           ;incstack = 0
 16900                           ; Regs used in ___ftneg: [wreg]
 16901  19CF  0020               	movlb	0	; select bank0
 16902  19D0  0841               	movf	___ftneg@f1+2,w
 16903  19D1  0440               	iorwf	___ftneg@f1+1,w
 16904  19D2  043F               	iorwf	___ftneg@f1,w
 16905  19D3  1903               	skipnz
 16906  19D4  0008               	return
 16907  19D5  3080               	movlw	128
 16908  19D6  06C1               	xorwf	___ftneg@f1+2,f
 16909  19D7  0008               	return
 16910  19D8                     __end_of___ftneg:	
 16911                           
 16912                           	psect	text112
 16913  0D38                     __ptext112:	
 16914 ;; *************** function ___ftdiv *****************
 16915 ;; Defined at:
 16916 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 16917 ;; Parameters:    Size  Location     Type
 16918 ;;  f2              3   15[BANK0 ] float 
 16919 ;;  f1              3   18[BANK0 ] float 
 16920 ;; Auto vars:     Size  Location     Type
 16921 ;;  f3              3   26[BANK0 ] float 
 16922 ;;  sign            1   30[BANK0 ] unsigned char 
 16923 ;;  exp             1   29[BANK0 ] unsigned char 
 16924 ;;  cntr            1   25[BANK0 ] unsigned char 
 16925 ;; Return value:  Size  Location     Type
 16926 ;;                  3   15[BANK0 ] float 
 16927 ;; Registers used:
 16928 ;;		wreg, status,2, status,0, pclath, cstack
 16929 ;; Tracked objects:
 16930 ;;		On entry : 0/0
 16931 ;;		On exit  : 0/0
 16932 ;;		Unchanged: 0/0
 16933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16934 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16935 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16936 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16937 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16938 ;;Total ram usage:       16 bytes
 16939 ;; Hardware stack levels used:    1
 16940 ;; Hardware stack levels required when called:    6
 16941 ;; This function calls:
 16942 ;;		___ftpack
 16943 ;; This function is called by:
 16944 ;;		_getDimmerLights_PercentToValue
 16945 ;;		_getDimmerLights_ValueToPercent
 16946 ;; This function uses a non-reentrant model
 16947 ;;
 16948                           
 16949                           
 16950                           ;psect for function ___ftdiv
 16951  0D38                     ___ftdiv:	
 16952                           
 16953                           ;incstack = 0
 16954                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 16955  0D38  0020               	movlb	0	; select bank0
 16956  0D39  0832               	movf	___ftdiv@f1,w
 16957  0D3A  00B5               	movwf	??___ftdiv
 16958  0D3B  0833               	movf	___ftdiv@f1+1,w
 16959  0D3C  00B6               	movwf	??___ftdiv+1
 16960  0D3D  0834               	movf	___ftdiv@f1+2,w
 16961  0D3E  00B7               	movwf	??___ftdiv+2
 16962  0D3F  1003               	clrc
 16963  0D40  0D36               	rlf	??___ftdiv+1,w
 16964  0D41  0D37               	rlf	??___ftdiv+2,w
 16965  0D42  00B8               	movwf	??___ftdiv+3
 16966  0D43  0838               	movf	??___ftdiv+3,w
 16967  0D44  00BD               	movwf	___ftdiv@exp
 16968  0D45  08BD               	movf	___ftdiv@exp,f
 16969  0D46  1D03               	skipz
 16970  0D47  2D4F               	goto	l6439
 16971  0D48  3000               	movlw	0
 16972  0D49  00AF               	movwf	?___ftdiv
 16973  0D4A  3000               	movlw	0
 16974  0D4B  00B0               	movwf	?___ftdiv+1
 16975  0D4C  3000               	movlw	0
 16976  0D4D  00B1               	movwf	?___ftdiv+2
 16977  0D4E  0008               	return
 16978  0D4F                     l6439:	
 16979  0D4F  082F               	movf	___ftdiv@f2,w
 16980  0D50  00B5               	movwf	??___ftdiv
 16981  0D51  0830               	movf	___ftdiv@f2+1,w
 16982  0D52  00B6               	movwf	??___ftdiv+1
 16983  0D53  0831               	movf	___ftdiv@f2+2,w
 16984  0D54  00B7               	movwf	??___ftdiv+2
 16985  0D55  1003               	clrc
 16986  0D56  0D36               	rlf	??___ftdiv+1,w
 16987  0D57  0D37               	rlf	??___ftdiv+2,w
 16988  0D58  00B8               	movwf	??___ftdiv+3
 16989  0D59  0838               	movf	??___ftdiv+3,w
 16990  0D5A  00BE               	movwf	___ftdiv@sign
 16991  0D5B  08BE               	movf	___ftdiv@sign,f
 16992  0D5C  1D03               	skipz
 16993  0D5D  2D65               	goto	l6445
 16994  0D5E  3000               	movlw	0
 16995  0D5F  00AF               	movwf	?___ftdiv
 16996  0D60  3000               	movlw	0
 16997  0D61  00B0               	movwf	?___ftdiv+1
 16998  0D62  3000               	movlw	0
 16999  0D63  00B1               	movwf	?___ftdiv+2
 17000  0D64  0008               	return
 17001  0D65                     l6445:	
 17002  0D65  3000               	movlw	0
 17003  0D66  00BA               	movwf	___ftdiv@f3
 17004  0D67  3000               	movlw	0
 17005  0D68  00BB               	movwf	___ftdiv@f3+1
 17006  0D69  3000               	movlw	0
 17007  0D6A  00BC               	movwf	___ftdiv@f3+2
 17008  0D6B  3089               	movlw	137
 17009  0D6C  073E               	addwf	___ftdiv@sign,w
 17010  0D6D  00B5               	movwf	??___ftdiv
 17011  0D6E  0835               	movf	??___ftdiv,w
 17012  0D6F  02BD               	subwf	___ftdiv@exp,f
 17013  0D70  0832               	movf	___ftdiv@f1,w
 17014  0D71  00B5               	movwf	??___ftdiv
 17015  0D72  0833               	movf	___ftdiv@f1+1,w
 17016  0D73  00B6               	movwf	??___ftdiv+1
 17017  0D74  0834               	movf	___ftdiv@f1+2,w
 17018  0D75  00B7               	movwf	??___ftdiv+2
 17019  0D76  3010               	movlw	16
 17020  0D77                     u5495:	
 17021  0D77  36B7               	lsrf	??___ftdiv+2,f
 17022  0D78  0CB6               	rrf	??___ftdiv+1,f
 17023  0D79  0CB5               	rrf	??___ftdiv,f
 17024  0D7A  0B89               	decfsz	9,f
 17025  0D7B  2D77               	goto	u5495
 17026  0D7C  0835               	movf	??___ftdiv,w
 17027  0D7D  00B8               	movwf	??___ftdiv+3
 17028  0D7E  0838               	movf	??___ftdiv+3,w
 17029  0D7F  00BE               	movwf	___ftdiv@sign
 17030  0D80  082F               	movf	___ftdiv@f2,w
 17031  0D81  00B5               	movwf	??___ftdiv
 17032  0D82  0830               	movf	___ftdiv@f2+1,w
 17033  0D83  00B6               	movwf	??___ftdiv+1
 17034  0D84  0831               	movf	___ftdiv@f2+2,w
 17035  0D85  00B7               	movwf	??___ftdiv+2
 17036  0D86  3010               	movlw	16
 17037  0D87                     u5505:	
 17038  0D87  36B7               	lsrf	??___ftdiv+2,f
 17039  0D88  0CB6               	rrf	??___ftdiv+1,f
 17040  0D89  0CB5               	rrf	??___ftdiv,f
 17041  0D8A  0B89               	decfsz	9,f
 17042  0D8B  2D87               	goto	u5505
 17043  0D8C  0835               	movf	??___ftdiv,w
 17044  0D8D  00B8               	movwf	??___ftdiv+3
 17045  0D8E  0838               	movf	??___ftdiv+3,w
 17046  0D8F  06BE               	xorwf	___ftdiv@sign,f
 17047  0D90  3080               	movlw	128
 17048  0D91  00B5               	movwf	??___ftdiv
 17049  0D92  0835               	movf	??___ftdiv,w
 17050  0D93  05BE               	andwf	___ftdiv@sign,f
 17051  0D94  17B3               	bsf	___ftdiv@f1+1,7
 17052  0D95  30FF               	movlw	255
 17053  0D96  05B2               	andwf	___ftdiv@f1,f
 17054  0D97  30FF               	movlw	255
 17055  0D98  05B3               	andwf	___ftdiv@f1+1,f
 17056  0D99  3000               	movlw	0
 17057  0D9A  05B4               	andwf	___ftdiv@f1+2,f
 17058  0D9B  17B0               	bsf	___ftdiv@f2+1,7
 17059  0D9C  30FF               	movlw	255
 17060  0D9D  05AF               	andwf	___ftdiv@f2,f
 17061  0D9E  30FF               	movlw	255
 17062  0D9F  05B0               	andwf	___ftdiv@f2+1,f
 17063  0DA0  3000               	movlw	0
 17064  0DA1  05B1               	andwf	___ftdiv@f2+2,f
 17065  0DA2  3018               	movlw	24
 17066  0DA3  00B5               	movwf	??___ftdiv
 17067  0DA4  0835               	movf	??___ftdiv,w
 17068  0DA5  00B9               	movwf	___ftdiv@cntr
 17069  0DA6                     l6459:	
 17070  0DA6  3001               	movlw	1
 17071  0DA7                     u5515:	
 17072  0DA7  35BA               	lslf	___ftdiv@f3,f
 17073  0DA8  0DBB               	rlf	___ftdiv@f3+1,f
 17074  0DA9  0DBC               	rlf	___ftdiv@f3+2,f
 17075  0DAA  0B89               	decfsz	9,f
 17076  0DAB  2DA7               	goto	u5515
 17077  0DAC  0831               	movf	___ftdiv@f2+2,w
 17078  0DAD  0234               	subwf	___ftdiv@f1+2,w
 17079  0DAE  1D03               	skipz
 17080  0DAF  2DB6               	goto	u5525
 17081  0DB0  0830               	movf	___ftdiv@f2+1,w
 17082  0DB1  0233               	subwf	___ftdiv@f1+1,w
 17083  0DB2  1D03               	skipz
 17084  0DB3  2DB6               	goto	u5525
 17085  0DB4  082F               	movf	___ftdiv@f2,w
 17086  0DB5  0232               	subwf	___ftdiv@f1,w
 17087  0DB6                     u5525:	
 17088  0DB6  1C03               	skipc
 17089  0DB7  2DBF               	goto	l6467
 17090  0DB8  082F               	movf	___ftdiv@f2,w
 17091  0DB9  02B2               	subwf	___ftdiv@f1,f
 17092  0DBA  0830               	movf	___ftdiv@f2+1,w
 17093  0DBB  3BB3               	subwfb	___ftdiv@f1+1,f
 17094  0DBC  0831               	movf	___ftdiv@f2+2,w
 17095  0DBD  3BB4               	subwfb	___ftdiv@f1+2,f
 17096  0DBE  143A               	bsf	___ftdiv@f3,0
 17097  0DBF                     l6467:	
 17098  0DBF  3001               	movlw	1
 17099  0DC0                     u5535:	
 17100  0DC0  35B2               	lslf	___ftdiv@f1,f
 17101  0DC1  0DB3               	rlf	___ftdiv@f1+1,f
 17102  0DC2  0DB4               	rlf	___ftdiv@f1+2,f
 17103  0DC3  0B89               	decfsz	9,f
 17104  0DC4  2DC0               	goto	u5535
 17105  0DC5  3001               	movlw	1
 17106  0DC6  02B9               	subwf	___ftdiv@cntr,f
 17107  0DC7  1D03               	btfss	3,2
 17108  0DC8  2DA6               	goto	l6459
 17109  0DC9  083A               	movf	___ftdiv@f3,w
 17110  0DCA  00A1               	movwf	___ftpack@arg
 17111  0DCB  083B               	movf	___ftdiv@f3+1,w
 17112  0DCC  00A2               	movwf	___ftpack@arg+1
 17113  0DCD  083C               	movf	___ftdiv@f3+2,w
 17114  0DCE  00A3               	movwf	___ftpack@arg+2
 17115  0DCF  083D               	movf	___ftdiv@exp,w
 17116  0DD0  00B5               	movwf	??___ftdiv
 17117  0DD1  0835               	movf	??___ftdiv,w
 17118  0DD2  00A4               	movwf	___ftpack@exp
 17119  0DD3  083E               	movf	___ftdiv@sign,w
 17120  0DD4  00B6               	movwf	??___ftdiv+1
 17121  0DD5  0836               	movf	??___ftdiv+1,w
 17122  0DD6  00A5               	movwf	___ftpack@sign
 17123  0DD7  3196  2608         	fcall	___ftpack
 17124  0DD9  0020               	movlb	0	; select bank0
 17125  0DDA  0821               	movf	?___ftpack,w
 17126  0DDB  00AF               	movwf	?___ftdiv
 17127  0DDC  0822               	movf	?___ftpack+1,w
 17128  0DDD  00B0               	movwf	?___ftdiv+1
 17129  0DDE  0823               	movf	?___ftpack+2,w
 17130  0DDF  00B1               	movwf	?___ftdiv+2
 17131  0DE0  0008               	return
 17132  0DE1                     __end_of___ftdiv:	
 17133                           
 17134                           	psect	text113
 17135  0388                     __ptext113:	
 17136 ;; *************** function ___ftadd *****************
 17137 ;; Defined at:
 17138 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 17139 ;; Parameters:    Size  Location     Type
 17140 ;;  f1              3   34[BANK0 ] float 
 17141 ;;  f2              3   37[BANK0 ] float 
 17142 ;; Auto vars:     Size  Location     Type
 17143 ;;  exp1            1   46[BANK0 ] unsigned char 
 17144 ;;  exp2            1   45[BANK0 ] unsigned char 
 17145 ;;  sign            1   44[BANK0 ] unsigned char 
 17146 ;; Return value:  Size  Location     Type
 17147 ;;                  3   34[BANK0 ] float 
 17148 ;; Registers used:
 17149 ;;		wreg, status,2, status,0, pclath, cstack
 17150 ;; Tracked objects:
 17151 ;;		On entry : 0/0
 17152 ;;		On exit  : 0/0
 17153 ;;		Unchanged: 0/0
 17154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17155 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17156 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17157 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17158 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17159 ;;Total ram usage:       13 bytes
 17160 ;; Hardware stack levels used:    1
 17161 ;; Hardware stack levels required when called:    6
 17162 ;; This function calls:
 17163 ;;		___ftpack
 17164 ;; This function is called by:
 17165 ;;		_getDimmerLights_PercentToValue
 17166 ;;		_getDimmerLights_ValueToPercent
 17167 ;; This function uses a non-reentrant model
 17168 ;;
 17169                           
 17170                           
 17171                           ;psect for function ___ftadd
 17172  0388                     ___ftadd:	
 17173                           
 17174                           ;incstack = 0
 17175                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 17176  0388  0020               	movlb	0	; select bank0
 17177  0389  0842               	movf	___ftadd@f1,w
 17178  038A  00C8               	movwf	??___ftadd
 17179  038B  0843               	movf	___ftadd@f1+1,w
 17180  038C  00C9               	movwf	??___ftadd+1
 17181  038D  0844               	movf	___ftadd@f1+2,w
 17182  038E  00CA               	movwf	??___ftadd+2
 17183  038F  1003               	clrc
 17184  0390  0D49               	rlf	??___ftadd+1,w
 17185  0391  0D4A               	rlf	??___ftadd+2,w
 17186  0392  00CB               	movwf	??___ftadd+3
 17187  0393  084B               	movf	??___ftadd+3,w
 17188  0394  00CE               	movwf	___ftadd@exp1
 17189  0395  0845               	movf	___ftadd@f2,w
 17190  0396  00C8               	movwf	??___ftadd
 17191  0397  0846               	movf	___ftadd@f2+1,w
 17192  0398  00C9               	movwf	??___ftadd+1
 17193  0399  0847               	movf	___ftadd@f2+2,w
 17194  039A  00CA               	movwf	??___ftadd+2
 17195  039B  1003               	clrc
 17196  039C  0D49               	rlf	??___ftadd+1,w
 17197  039D  0D4A               	rlf	??___ftadd+2,w
 17198  039E  00CB               	movwf	??___ftadd+3
 17199  039F  084B               	movf	??___ftadd+3,w
 17200  03A0  00CD               	movwf	___ftadd@exp2
 17201  03A1  084E               	movf	___ftadd@exp1,w
 17202  03A2  1903               	btfsc	3,2
 17203  03A3  2BB0               	goto	l6369
 17204  03A4  084D               	movf	___ftadd@exp2,w
 17205  03A5  024E               	subwf	___ftadd@exp1,w
 17206  03A6  1803               	skipnc
 17207  03A7  2BB7               	goto	l6373
 17208  03A8  034E               	decf	___ftadd@exp1,w
 17209  03A9  3AFF               	xorlw	255
 17210  03AA  074D               	addwf	___ftadd@exp2,w
 17211  03AB  00C8               	movwf	??___ftadd
 17212  03AC  3019               	movlw	25
 17213  03AD  0248               	subwf	??___ftadd,w
 17214  03AE  1C03               	skipc
 17215  03AF  2BB7               	goto	l6373
 17216  03B0                     l6369:	
 17217  03B0  0845               	movf	___ftadd@f2,w
 17218  03B1  00C2               	movwf	?___ftadd
 17219  03B2  0846               	movf	___ftadd@f2+1,w
 17220  03B3  00C3               	movwf	?___ftadd+1
 17221  03B4  0847               	movf	___ftadd@f2+2,w
 17222  03B5  00C4               	movwf	?___ftadd+2
 17223  03B6  0008               	return
 17224  03B7                     l6373:	
 17225  03B7  084D               	movf	___ftadd@exp2,w
 17226  03B8  1903               	btfsc	3,2
 17227  03B9  0008               	return
 17228  03BA  084E               	movf	___ftadd@exp1,w
 17229  03BB  024D               	subwf	___ftadd@exp2,w
 17230  03BC  1803               	skipnc
 17231  03BD  2BC6               	goto	l6379
 17232  03BE  034D               	decf	___ftadd@exp2,w
 17233  03BF  3AFF               	xorlw	255
 17234  03C0  074E               	addwf	___ftadd@exp1,w
 17235  03C1  00C8               	movwf	??___ftadd
 17236  03C2  3019               	movlw	25
 17237  03C3  0248               	subwf	??___ftadd,w
 17238  03C4  1803               	btfsc	3,0
 17239  03C5  0008               	return
 17240  03C6                     l6379:	
 17241  03C6  3006               	movlw	6
 17242  03C7  00C8               	movwf	??___ftadd
 17243  03C8  0848               	movf	??___ftadd,w
 17244  03C9  00CC               	movwf	___ftadd@sign
 17245  03CA  1BC4               	btfsc	___ftadd@f1+2,7
 17246  03CB  17CC               	bsf	___ftadd@sign,7
 17247  03CC  1BC7               	btfsc	___ftadd@f2+2,7
 17248  03CD  174C               	bsf	___ftadd@sign,6
 17249  03CE  17C3               	bsf	___ftadd@f1+1,7
 17250  03CF  30FF               	movlw	255
 17251  03D0  05C2               	andwf	___ftadd@f1,f
 17252  03D1  30FF               	movlw	255
 17253  03D2  05C3               	andwf	___ftadd@f1+1,f
 17254  03D3  3000               	movlw	0
 17255  03D4  05C4               	andwf	___ftadd@f1+2,f
 17256  03D5  17C6               	bsf	___ftadd@f2+1,7
 17257  03D6  30FF               	movlw	255
 17258  03D7  05C5               	andwf	___ftadd@f2,f
 17259  03D8  30FF               	movlw	255
 17260  03D9  05C6               	andwf	___ftadd@f2+1,f
 17261  03DA  3000               	movlw	0
 17262  03DB  05C7               	andwf	___ftadd@f2+2,f
 17263  03DC  084D               	movf	___ftadd@exp2,w
 17264  03DD  024E               	subwf	___ftadd@exp1,w
 17265  03DE  1803               	skipnc
 17266  03DF  2C02               	goto	l6401
 17267  03E0                     l6391:	
 17268  03E0  3001               	movlw	1
 17269  03E1                     u5335:	
 17270  03E1  35C5               	lslf	___ftadd@f2,f
 17271  03E2  0DC6               	rlf	___ftadd@f2+1,f
 17272  03E3  0DC7               	rlf	___ftadd@f2+2,f
 17273  03E4  0B89               	decfsz	9,f
 17274  03E5  2BE1               	goto	u5335
 17275  03E6  3001               	movlw	1
 17276  03E7  02CD               	subwf	___ftadd@exp2,f
 17277  03E8  084D               	movf	___ftadd@exp2,w
 17278  03E9  064E               	xorwf	___ftadd@exp1,w
 17279  03EA  1903               	skipnz
 17280  03EB  2BFD               	goto	l6399
 17281  03EC  3001               	movlw	1
 17282  03ED  02CC               	subwf	___ftadd@sign,f
 17283  03EE  084C               	movf	___ftadd@sign,w
 17284  03EF  3907               	andlw	7
 17285  03F0  1903               	btfsc	3,2
 17286  03F1  2BFD               	goto	l6399
 17287  03F2  2BE0               	goto	l6391
 17288  03F3                     l6397:	
 17289  03F3  3001               	movlw	1
 17290  03F4                     u5365:	
 17291  03F4  36C4               	lsrf	___ftadd@f1+2,f
 17292  03F5  0CC3               	rrf	___ftadd@f1+1,f
 17293  03F6  0CC2               	rrf	___ftadd@f1,f
 17294  03F7  0B89               	decfsz	9,f
 17295  03F8  2BF4               	goto	u5365
 17296  03F9  3001               	movlw	1
 17297  03FA  00C8               	movwf	??___ftadd
 17298  03FB  0848               	movf	??___ftadd,w
 17299  03FC  07CE               	addwf	___ftadd@exp1,f
 17300  03FD                     l6399:	
 17301  03FD  084E               	movf	___ftadd@exp1,w
 17302  03FE  064D               	xorwf	___ftadd@exp2,w
 17303  03FF  1903               	btfsc	3,2
 17304  0400  2C27               	goto	l3182
 17305  0401  2BF3               	goto	l6397
 17306  0402                     l6401:	
 17307  0402  084E               	movf	___ftadd@exp1,w
 17308  0403  024D               	subwf	___ftadd@exp2,w
 17309  0404  1803               	skipnc
 17310  0405  2C27               	goto	l3182
 17311  0406                     l6403:	
 17312  0406  3001               	movlw	1
 17313  0407                     u5395:	
 17314  0407  35C2               	lslf	___ftadd@f1,f
 17315  0408  0DC3               	rlf	___ftadd@f1+1,f
 17316  0409  0DC4               	rlf	___ftadd@f1+2,f
 17317  040A  0B89               	decfsz	9,f
 17318  040B  2C07               	goto	u5395
 17319  040C  3001               	movlw	1
 17320  040D  02CE               	subwf	___ftadd@exp1,f
 17321  040E  084D               	movf	___ftadd@exp2,w
 17322  040F  064E               	xorwf	___ftadd@exp1,w
 17323  0410  1903               	skipnz
 17324  0411  2C23               	goto	l6411
 17325  0412  3001               	movlw	1
 17326  0413  02CC               	subwf	___ftadd@sign,f
 17327  0414  084C               	movf	___ftadd@sign,w
 17328  0415  3907               	andlw	7
 17329  0416  1903               	btfsc	3,2
 17330  0417  2C23               	goto	l6411
 17331  0418  2C06               	goto	l6403
 17332  0419                     l6409:	
 17333  0419  3001               	movlw	1
 17334  041A                     u5425:	
 17335  041A  36C7               	lsrf	___ftadd@f2+2,f
 17336  041B  0CC6               	rrf	___ftadd@f2+1,f
 17337  041C  0CC5               	rrf	___ftadd@f2,f
 17338  041D  0B89               	decfsz	9,f
 17339  041E  2C1A               	goto	u5425
 17340  041F  3001               	movlw	1
 17341  0420  00C8               	movwf	??___ftadd
 17342  0421  0848               	movf	??___ftadd,w
 17343  0422  07CD               	addwf	___ftadd@exp2,f
 17344  0423                     l6411:	
 17345  0423  084E               	movf	___ftadd@exp1,w
 17346  0424  064D               	xorwf	___ftadd@exp2,w
 17347  0425  1D03               	skipz
 17348  0426  2C19               	goto	l6409
 17349  0427                     l3182:	
 17350  0427  1FCC               	btfss	___ftadd@sign,7
 17351  0428  2C39               	goto	l6415
 17352  0429  30FF               	movlw	255
 17353  042A  06C2               	xorwf	___ftadd@f1,f
 17354  042B  30FF               	movlw	255
 17355  042C  06C3               	xorwf	___ftadd@f1+1,f
 17356  042D  30FF               	movlw	255
 17357  042E  06C4               	xorwf	___ftadd@f1+2,f
 17358  042F  3001               	movlw	1
 17359  0430  07C2               	addwf	___ftadd@f1,f
 17360  0431  3000               	movlw	0
 17361  0432  1803               	skipnc
 17362  0433  3001               	movlw	1
 17363  0434  07C3               	addwf	___ftadd@f1+1,f
 17364  0435  3000               	movlw	0
 17365  0436  1803               	skipnc
 17366  0437  3001               	movlw	1
 17367  0438  07C4               	addwf	___ftadd@f1+2,f
 17368  0439                     l6415:	
 17369  0439  1F4C               	btfss	___ftadd@sign,6
 17370  043A  2C4B               	goto	l6419
 17371  043B  30FF               	movlw	255
 17372  043C  06C5               	xorwf	___ftadd@f2,f
 17373  043D  30FF               	movlw	255
 17374  043E  06C6               	xorwf	___ftadd@f2+1,f
 17375  043F  30FF               	movlw	255
 17376  0440  06C7               	xorwf	___ftadd@f2+2,f
 17377  0441  3001               	movlw	1
 17378  0442  07C5               	addwf	___ftadd@f2,f
 17379  0443  3000               	movlw	0
 17380  0444  1803               	skipnc
 17381  0445  3001               	movlw	1
 17382  0446  07C6               	addwf	___ftadd@f2+1,f
 17383  0447  3000               	movlw	0
 17384  0448  1803               	skipnc
 17385  0449  3001               	movlw	1
 17386  044A  07C7               	addwf	___ftadd@f2+2,f
 17387  044B                     l6419:	
 17388  044B  01CC               	clrf	___ftadd@sign
 17389  044C  0842               	movf	___ftadd@f1,w
 17390  044D  07C5               	addwf	___ftadd@f2,f
 17391  044E  0843               	movf	___ftadd@f1+1,w
 17392  044F  3DC6               	addwfc	___ftadd@f2+1,f
 17393  0450  0844               	movf	___ftadd@f1+2,w
 17394  0451  3DC7               	addwfc	___ftadd@f2+2,f
 17395  0452  1FC7               	btfss	___ftadd@f2+2,7
 17396  0453  2C66               	goto	l6429
 17397  0454  30FF               	movlw	255
 17398  0455  06C5               	xorwf	___ftadd@f2,f
 17399  0456  30FF               	movlw	255
 17400  0457  06C6               	xorwf	___ftadd@f2+1,f
 17401  0458  30FF               	movlw	255
 17402  0459  06C7               	xorwf	___ftadd@f2+2,f
 17403  045A  3001               	movlw	1
 17404  045B  07C5               	addwf	___ftadd@f2,f
 17405  045C  3000               	movlw	0
 17406  045D  1803               	skipnc
 17407  045E  3001               	movlw	1
 17408  045F  07C6               	addwf	___ftadd@f2+1,f
 17409  0460  3000               	movlw	0
 17410  0461  1803               	skipnc
 17411  0462  3001               	movlw	1
 17412  0463  07C7               	addwf	___ftadd@f2+2,f
 17413  0464  01CC               	clrf	___ftadd@sign
 17414  0465  0ACC               	incf	___ftadd@sign,f
 17415  0466                     l6429:	
 17416  0466  0845               	movf	___ftadd@f2,w
 17417  0467  00A1               	movwf	___ftpack@arg
 17418  0468  0846               	movf	___ftadd@f2+1,w
 17419  0469  00A2               	movwf	___ftpack@arg+1
 17420  046A  0847               	movf	___ftadd@f2+2,w
 17421  046B  00A3               	movwf	___ftpack@arg+2
 17422  046C  084E               	movf	___ftadd@exp1,w
 17423  046D  00C8               	movwf	??___ftadd
 17424  046E  0848               	movf	??___ftadd,w
 17425  046F  00A4               	movwf	___ftpack@exp
 17426  0470  084C               	movf	___ftadd@sign,w
 17427  0471  00C9               	movwf	??___ftadd+1
 17428  0472  0849               	movf	??___ftadd+1,w
 17429  0473  00A5               	movwf	___ftpack@sign
 17430  0474  3196  2608         	fcall	___ftpack
 17431  0476  0020               	movlb	0	; select bank0
 17432  0477  0821               	movf	?___ftpack,w
 17433  0478  00C2               	movwf	?___ftadd
 17434  0479  0822               	movf	?___ftpack+1,w
 17435  047A  00C3               	movwf	?___ftadd+1
 17436  047B  0823               	movf	?___ftpack+2,w
 17437  047C  00C4               	movwf	?___ftadd+2
 17438  047D  0008               	return
 17439  047E                     __end_of___ftadd:	
 17440                           
 17441                           	psect	text114
 17442  1E9F                     __ptext114:	
 17443 ;; *************** function ___awtoft *****************
 17444 ;; Defined at:
 17445 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 17446 ;; Parameters:    Size  Location     Type
 17447 ;;  c               2    9[BANK0 ] int 
 17448 ;; Auto vars:     Size  Location     Type
 17449 ;;  sign            1   14[BANK0 ] unsigned char 
 17450 ;; Return value:  Size  Location     Type
 17451 ;;                  3    9[BANK0 ] float 
 17452 ;; Registers used:
 17453 ;;		wreg, status,2, status,0, pclath, cstack
 17454 ;; Tracked objects:
 17455 ;;		On entry : 0/0
 17456 ;;		On exit  : 0/0
 17457 ;;		Unchanged: 0/0
 17458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17459 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17460 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17461 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17462 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17463 ;;Total ram usage:        6 bytes
 17464 ;; Hardware stack levels used:    1
 17465 ;; Hardware stack levels required when called:    6
 17466 ;; This function calls:
 17467 ;;		___ftpack
 17468 ;; This function is called by:
 17469 ;;		_getDimmerLights_PercentToValue
 17470 ;;		_getDimmerLights_ValueToPercent
 17471 ;; This function uses a non-reentrant model
 17472 ;;
 17473                           
 17474                           
 17475                           ;psect for function ___awtoft
 17476  1E9F                     ___awtoft:	
 17477                           
 17478                           ;incstack = 0
 17479                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 17480  1E9F  0020               	movlb	0	; select bank0
 17481  1EA0  01AE               	clrf	___awtoft@sign
 17482  1EA1  1FAA               	btfss	___awtoft@c+1,7
 17483  1EA2  2EAA               	goto	l6357
 17484  1EA3  09A9               	comf	___awtoft@c,f
 17485  1EA4  09AA               	comf	___awtoft@c+1,f
 17486  1EA5  0AA9               	incf	___awtoft@c,f
 17487  1EA6  1903               	skipnz
 17488  1EA7  0AAA               	incf	___awtoft@c+1,f
 17489  1EA8  01AE               	clrf	___awtoft@sign
 17490  1EA9  0AAE               	incf	___awtoft@sign,f
 17491  1EAA                     l6357:	
 17492  1EAA  0829               	movf	___awtoft@c,w
 17493  1EAB  00A1               	movwf	___ftpack@arg
 17494  1EAC  082A               	movf	___awtoft@c+1,w
 17495  1EAD  00A2               	movwf	___ftpack@arg+1
 17496  1EAE  01A3               	clrf	___ftpack@arg+2
 17497  1EAF  308E               	movlw	142
 17498  1EB0  00AC               	movwf	??___awtoft
 17499  1EB1  082C               	movf	??___awtoft,w
 17500  1EB2  00A4               	movwf	___ftpack@exp
 17501  1EB3  082E               	movf	___awtoft@sign,w
 17502  1EB4  00AD               	movwf	??___awtoft+1
 17503  1EB5  082D               	movf	??___awtoft+1,w
 17504  1EB6  00A5               	movwf	___ftpack@sign
 17505  1EB7  3196  2608         	fcall	___ftpack
 17506  1EB9  0020               	movlb	0	; select bank0
 17507  1EBA  0821               	movf	?___ftpack,w
 17508  1EBB  00A9               	movwf	?___awtoft
 17509  1EBC  0822               	movf	?___ftpack+1,w
 17510  1EBD  00AA               	movwf	?___awtoft+1
 17511  1EBE  0823               	movf	?___ftpack+2,w
 17512  1EBF  00AB               	movwf	?___awtoft+2
 17513  1EC0  0008               	return
 17514  1EC1                     __end_of___awtoft:	
 17515                           
 17516                           	psect	text115
 17517  1608                     __ptext115:	
 17518 ;; *************** function ___ftpack *****************
 17519 ;; Defined at:
 17520 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 17521 ;; Parameters:    Size  Location     Type
 17522 ;;  arg             3    1[BANK0 ] unsigned um
 17523 ;;  exp             1    4[BANK0 ] unsigned char 
 17524 ;;  sign            1    5[BANK0 ] unsigned char 
 17525 ;; Auto vars:     Size  Location     Type
 17526 ;;		None
 17527 ;; Return value:  Size  Location     Type
 17528 ;;                  3    1[BANK0 ] float 
 17529 ;; Registers used:
 17530 ;;		wreg, status,2, status,0
 17531 ;; Tracked objects:
 17532 ;;		On entry : 0/0
 17533 ;;		On exit  : 0/0
 17534 ;;		Unchanged: 0/0
 17535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17536 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17537 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17538 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17539 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17540 ;;Total ram usage:        8 bytes
 17541 ;; Hardware stack levels used:    1
 17542 ;; Hardware stack levels required when called:    5
 17543 ;; This function calls:
 17544 ;;		Nothing
 17545 ;; This function is called by:
 17546 ;;		___awtoft
 17547 ;;		___ftadd
 17548 ;;		___ftdiv
 17549 ;;		___ftmul
 17550 ;; This function uses a non-reentrant model
 17551 ;;
 17552                           
 17553                           
 17554                           ;psect for function ___ftpack
 17555  1608                     ___ftpack:	
 17556                           
 17557                           ;incstack = 0
 17558                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 17559  1608  0020               	movlb	0	; select bank0
 17560  1609  0824               	movf	___ftpack@exp,w
 17561  160A  1903               	btfsc	3,2
 17562  160B  2E11               	goto	l6217
 17563  160C  0823               	movf	___ftpack@arg+2,w
 17564  160D  0422               	iorwf	___ftpack@arg+1,w
 17565  160E  0421               	iorwf	___ftpack@arg,w
 17566  160F  1D03               	skipz
 17567  1610  2E22               	goto	l6223
 17568  1611                     l6217:	
 17569  1611  3000               	movlw	0
 17570  1612  00A1               	movwf	?___ftpack
 17571  1613  3000               	movlw	0
 17572  1614  00A2               	movwf	?___ftpack+1
 17573  1615  3000               	movlw	0
 17574  1616  00A3               	movwf	?___ftpack+2
 17575  1617  0008               	return
 17576  1618                     l6221:	
 17577  1618  3001               	movlw	1
 17578  1619  00A6               	movwf	??___ftpack
 17579  161A  0826               	movf	??___ftpack,w
 17580  161B  07A4               	addwf	___ftpack@exp,f
 17581  161C  3001               	movlw	1
 17582  161D                     u4945:	
 17583  161D  36A3               	lsrf	___ftpack@arg+2,f
 17584  161E  0CA2               	rrf	___ftpack@arg+1,f
 17585  161F  0CA1               	rrf	___ftpack@arg,f
 17586  1620  0B89               	decfsz	9,f
 17587  1621  2E1D               	goto	u4945
 17588  1622                     l6223:	
 17589  1622  30FE               	movlw	254
 17590  1623  0523               	andwf	___ftpack@arg+2,w
 17591  1624  1903               	btfsc	3,2
 17592  1625  2E3B               	goto	l3153
 17593  1626  2E18               	goto	l6221
 17594  1627                     l6225:	
 17595  1627  3001               	movlw	1
 17596  1628  00A6               	movwf	??___ftpack
 17597  1629  0826               	movf	??___ftpack,w
 17598  162A  07A4               	addwf	___ftpack@exp,f
 17599  162B  3001               	movlw	1
 17600  162C  07A1               	addwf	___ftpack@arg,f
 17601  162D  3000               	movlw	0
 17602  162E  1803               	skipnc
 17603  162F  3001               	movlw	1
 17604  1630  07A2               	addwf	___ftpack@arg+1,f
 17605  1631  3000               	movlw	0
 17606  1632  1803               	skipnc
 17607  1633  3001               	movlw	1
 17608  1634  07A3               	addwf	___ftpack@arg+2,f
 17609  1635  3001               	movlw	1
 17610  1636                     u4965:	
 17611  1636  36A3               	lsrf	___ftpack@arg+2,f
 17612  1637  0CA2               	rrf	___ftpack@arg+1,f
 17613  1638  0CA1               	rrf	___ftpack@arg,f
 17614  1639  0B89               	decfsz	9,f
 17615  163A  2E36               	goto	u4965
 17616  163B                     l3153:	
 17617  163B  30FF               	movlw	255
 17618  163C  0523               	andwf	___ftpack@arg+2,w
 17619  163D  1903               	btfsc	3,2
 17620  163E  2E48               	goto	l6233
 17621  163F  2E27               	goto	l6225
 17622  1640                     l6231:	
 17623  1640  3001               	movlw	1
 17624  1641  02A4               	subwf	___ftpack@exp,f
 17625  1642  3001               	movlw	1
 17626  1643                     u4985:	
 17627  1643  35A1               	lslf	___ftpack@arg,f
 17628  1644  0DA2               	rlf	___ftpack@arg+1,f
 17629  1645  0DA3               	rlf	___ftpack@arg+2,f
 17630  1646  0B89               	decfsz	9,f
 17631  1647  2E43               	goto	u4985
 17632  1648                     l6233:	
 17633  1648  1FA2               	btfss	___ftpack@arg+1,7
 17634  1649  2E40               	goto	l6231
 17635  164A  1824               	btfsc	___ftpack@exp,0
 17636  164B  2E52               	goto	l3159
 17637  164C  30FF               	movlw	255
 17638  164D  05A1               	andwf	___ftpack@arg,f
 17639  164E  307F               	movlw	127
 17640  164F  05A2               	andwf	___ftpack@arg+1,f
 17641  1650  30FF               	movlw	255
 17642  1651  05A3               	andwf	___ftpack@arg+2,f
 17643  1652                     l3159:	
 17644  1652  1003               	clrc
 17645  1653  0CA4               	rrf	___ftpack@exp,f
 17646  1654  0824               	movf	___ftpack@exp,w
 17647  1655  00A6               	movwf	??___ftpack
 17648  1656  01A7               	clrf	??___ftpack+1
 17649  1657  01A8               	clrf	??___ftpack+2
 17650  1658  3010               	movlw	16
 17651  1659                     u5015:	
 17652  1659  35A6               	lslf	??___ftpack,f
 17653  165A  0DA7               	rlf	??___ftpack+1,f
 17654  165B  0DA8               	rlf	??___ftpack+2,f
 17655  165C  0B89               	decfsz	9,f
 17656  165D  2E59               	goto	u5015
 17657  165E  0826               	movf	??___ftpack,w
 17658  165F  04A1               	iorwf	___ftpack@arg,f
 17659  1660  0827               	movf	??___ftpack+1,w
 17660  1661  04A2               	iorwf	___ftpack@arg+1,f
 17661  1662  0828               	movf	??___ftpack+2,w
 17662  1663  04A3               	iorwf	___ftpack@arg+2,f
 17663  1664  0825               	movf	___ftpack@sign,w
 17664  1665  1903               	btfsc	3,2
 17665  1666  0008               	return
 17666  1667  17A3               	bsf	___ftpack@arg+2,7
 17667  1668  0008               	return
 17668  1669                     __end_of___ftpack:	
 17669                           
 17670                           	psect	text116
 17671  1000                     __ptext116:	
 17672 ;; *************** function _getDimmerIntr_DimmingValue *****************
 17673 ;; Defined at:
 17674 ;;		line 67 in file "../src/Dimmer_B1.c"
 17675 ;; Parameters:    Size  Location     Type
 17676 ;;  lights          1    wreg     unsigned char 
 17677 ;; Auto vars:     Size  Location     Type
 17678 ;;  lights          1    3[BANK0 ] unsigned char 
 17679 ;;  value           1    2[BANK0 ] unsigned char 
 17680 ;; Return value:  Size  Location     Type
 17681 ;;                  1    wreg      unsigned char 
 17682 ;; Registers used:
 17683 ;;		wreg, status,2
 17684 ;; Tracked objects:
 17685 ;;		On entry : 0/0
 17686 ;;		On exit  : 0/0
 17687 ;;		Unchanged: 0/0
 17688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17690 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17691 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17692 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17693 ;;Total ram usage:        3 bytes
 17694 ;; Hardware stack levels used:    1
 17695 ;; Hardware stack levels required when called:    5
 17696 ;; This function calls:
 17697 ;;		Nothing
 17698 ;; This function is called by:
 17699 ;;		_setDimmerLights_Dimming
 17700 ;; This function uses a non-reentrant model
 17701 ;;
 17702                           
 17703                           
 17704                           ;psect for function _getDimmerIntr_DimmingValue
 17705  1000                     _getDimmerIntr_DimmingValue:	
 17706                           
 17707                           ;incstack = 0
 17708                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 17709                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 17710  1000  0020               	movlb	0	; select bank0
 17711  1001  00A3               	movwf	getDimmerIntr_DimmingValue@lights
 17712                           
 17713                           ;Dimmer_B1.c: 68: char value = 0;
 17714  1002  01A2               	clrf	getDimmerIntr_DimmingValue@value
 17715                           
 17716                           ;Dimmer_B1.c: 70: if (lights == 1) {
 17717  1003  0823               	movf	getDimmerIntr_DimmingValue@lights,w
 17718  1004  3A01               	xorlw	1
 17719  1005  1D03               	skipz
 17720  1006  280A               	goto	l7051
 17721                           
 17722                           ;Dimmer_B1.c: 71: value = DimmerIntr1.DimmingValue;
 17723  1007  0021               	movlb	1	; select bank1
 17724  1008  0833               	movf	(_DimmerIntr1^(0+128)+5),w
 17725  1009  2810               	goto	L10
 17726  100A                     l7051:	
 17727                           ;Dimmer_B1.c: 72: }
 17728                           
 17729                           
 17730                           ;Dimmer_B1.c: 75: else if (lights == 2) {
 17731  100A  0823               	movf	getDimmerIntr_DimmingValue@lights,w
 17732  100B  3A02               	xorlw	2
 17733  100C  1D03               	skipz
 17734  100D  2814               	goto	l750
 17735                           
 17736                           ;Dimmer_B1.c: 76: value = DimmerIntr2.DimmingValue;
 17737  100E  0021               	movlb	1	; select bank1
 17738  100F  083F               	movf	(_DimmerIntr2^(0+128)+5),w
 17739  1010                     L10:	
 17740  1010  0020               	movlb	0	; select bank0
 17741  1011  00A1               	movwf	??_getDimmerIntr_DimmingValue
 17742  1012  0821               	movf	??_getDimmerIntr_DimmingValue,w
 17743  1013  00A2               	movwf	getDimmerIntr_DimmingValue@value
 17744  1014                     l750:	
 17745                           
 17746                           ;Dimmer_B1.c: 77: }
 17747                           ;Dimmer_B1.c: 84: return value;
 17748  1014  0822               	movf	getDimmerIntr_DimmingValue@value,w
 17749  1015  0008               	return
 17750  1016                     __end_of_getDimmerIntr_DimmingValue:	
 17751                           
 17752                           	psect	text117
 17753  121E                     __ptext117:	
 17754 ;; *************** function _getDimmerLights_Allow_Condition *****************
 17755 ;; Defined at:
 17756 ;;		line 916 in file "../src/Dimmer_B1.c"
 17757 ;; Parameters:    Size  Location     Type
 17758 ;;  lights          1    wreg     unsigned char 
 17759 ;; Auto vars:     Size  Location     Type
 17760 ;;  lights          1    6[BANK0 ] unsigned char 
 17761 ;;  allow           1    7[BANK0 ] unsigned char 
 17762 ;; Return value:  Size  Location     Type
 17763 ;;                  1    wreg      unsigned char 
 17764 ;; Registers used:
 17765 ;;		wreg, status,2, status,0, pclath, cstack
 17766 ;; Tracked objects:
 17767 ;;		On entry : 0/0
 17768 ;;		On exit  : 0/0
 17769 ;;		Unchanged: 0/0
 17770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17772 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17773 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17774 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17775 ;;Total ram usage:        6 bytes
 17776 ;; Hardware stack levels used:    1
 17777 ;; Hardware stack levels required when called:    6
 17778 ;; This function calls:
 17779 ;;		_getLoad_OK
 17780 ;; This function is called by:
 17781 ;;		_setDimmerLights_Main
 17782 ;; This function uses a non-reentrant model
 17783 ;;
 17784                           
 17785                           
 17786                           ;psect for function _getDimmerLights_Allow_Condition
 17787  121E                     _getDimmerLights_Allow_Condition:	
 17788                           
 17789                           ;incstack = 0
 17790                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+status,0+pclath+cstack]
 17791                           ;getDimmerLights_Allow_Condition@lights stored from wreg
 17792  121E  0020               	movlb	0	; select bank0
 17793  121F  00A6               	movwf	getDimmerLights_Allow_Condition@lights
 17794                           
 17795                           ;Dimmer_B1.c: 917: char allow = 0;
 17796  1220  01A7               	clrf	getDimmerLights_Allow_Condition@allow
 17797                           
 17798                           ;Dimmer_B1.c: 923: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 17799  1221  01A3               	clrf	_getDimmerLights_Allow_Condition$2367
 17800  1222  0AA3               	incf	_getDimmerLights_Allow_Condition$2367,f
 17801  1223  3199  21A7  3192   	fcall	_getLoad_OK
 17802  1226  3800               	iorlw	0
 17803  1227  1D03               	skipz
 17804  1228  2A2E               	goto	l7381
 17805  1229  0022               	movlb	2	; select bank2
 17806  122A  18B9               	btfsc	_Dimmer^(0+256),1
 17807  122B  2A2E               	goto	l7381
 17808  122C  0020               	movlb	0	; select bank0
 17809  122D  01A3               	clrf	_getDimmerLights_Allow_Condition$2367
 17810  122E                     l7381:	
 17811  122E  0020               	movlb	0	; select bank0
 17812  122F  0823               	movf	_getDimmerLights_Allow_Condition$2367,w
 17813  1230  00A2               	movwf	??_getDimmerLights_Allow_Condition
 17814  1231  0822               	movf	??_getDimmerLights_Allow_Condition,w
 17815  1232  00A7               	movwf	getDimmerLights_Allow_Condition@allow
 17816                           
 17817                           ;Dimmer_B1.c: 927: if (allow == 0) {
 17818  1233  08A7               	movf	getDimmerLights_Allow_Condition@allow,f
 17819  1234  1D03               	skipz
 17820  1235  2A5A               	goto	l7405
 17821                           
 17822                           ;Dimmer_B1.c: 928: if (lights == 1) {
 17823  1236  0826               	movf	getDimmerLights_Allow_Condition@lights,w
 17824  1237  3A01               	xorlw	1
 17825  1238  1D03               	skipz
 17826  1239  2A47               	goto	l7395
 17827                           
 17828                           ;Dimmer_B1.c: 929: allow = DimmerLights2.DimmingTrigger == 1 || DimmerIntr2.Dimming_Sw =
      +                          = 1 ? 1 : 0;
 17829  123A  01A4               	clrf	_getDimmerLights_Allow_Condition$2368
 17830  123B  0AA4               	incf	_getDimmerLights_Allow_Condition$2368,f
 17831  123C  0023               	movlb	3	; select bank3
 17832  123D  1A50               	btfsc	_DimmerLights2^(0+384),4
 17833  123E  2A44               	goto	l7393
 17834  123F  0021               	movlb	1	; select bank1
 17835  1240  1A3A               	btfsc	_DimmerIntr2^(0+128),4
 17836  1241  2A44               	goto	l7393
 17837  1242  0020               	movlb	0	; select bank0
 17838  1243  01A4               	clrf	_getDimmerLights_Allow_Condition$2368
 17839  1244                     l7393:	
 17840  1244  0020               	movlb	0	; select bank0
 17841  1245  0824               	movf	_getDimmerLights_Allow_Condition$2368,w
 17842  1246  2A57               	goto	L11
 17843  1247                     l7395:	
 17844                           ;Dimmer_B1.c: 930: } else if (lights == 2) {
 17845                           
 17846  1247  0826               	movf	getDimmerLights_Allow_Condition@lights,w
 17847  1248  3A02               	xorlw	2
 17848  1249  1D03               	skipz
 17849  124A  2A5A               	goto	l7405
 17850                           
 17851                           ;Dimmer_B1.c: 931: allow = DimmerLights1.DimmingTrigger == 1 || DimmerIntr1.Dimming_Sw =
      +                          = 1 ? 1 : 0;
 17852  124B  01A5               	clrf	_getDimmerLights_Allow_Condition$2369
 17853  124C  0AA5               	incf	_getDimmerLights_Allow_Condition$2369,f
 17854  124D  0022               	movlb	2	; select bank2
 17855  124E  1A68               	btfsc	_DimmerLights1^(0+256),4
 17856  124F  2A55               	goto	l7403
 17857  1250  0021               	movlb	1	; select bank1
 17858  1251  1A2E               	btfsc	_DimmerIntr1^(0+128),4
 17859  1252  2A55               	goto	l7403
 17860  1253  0020               	movlb	0	; select bank0
 17861  1254  01A5               	clrf	_getDimmerLights_Allow_Condition$2369
 17862  1255                     l7403:	
 17863  1255  0020               	movlb	0	; select bank0
 17864  1256  0825               	movf	_getDimmerLights_Allow_Condition$2369,w
 17865  1257                     L11:	
 17866  1257  00A2               	movwf	??_getDimmerLights_Allow_Condition
 17867  1258  0822               	movf	??_getDimmerLights_Allow_Condition,w
 17868  1259  00A7               	movwf	getDimmerLights_Allow_Condition@allow
 17869  125A                     l7405:	
 17870                           
 17871                           ;Dimmer_B1.c: 932: }
 17872                           ;Dimmer_B1.c: 933: }
 17873                           ;Dimmer_B1.c: 950: return allow;
 17874  125A  0827               	movf	getDimmerLights_Allow_Condition@allow,w
 17875  125B  0008               	return
 17876  125C                     __end_of_getDimmerLights_Allow_Condition:	
 17877                           
 17878                           	psect	text118
 17879  19A7                     __ptext118:	
 17880 ;; *************** function _getLoad_OK *****************
 17881 ;; Defined at:
 17882 ;;		line 272 in file "../src/OverLoad_B1.c"
 17883 ;; Parameters:    Size  Location     Type
 17884 ;;		None
 17885 ;; Auto vars:     Size  Location     Type
 17886 ;;  ok              1    1[BANK0 ] unsigned char 
 17887 ;; Return value:  Size  Location     Type
 17888 ;;                  1    wreg      unsigned char 
 17889 ;; Registers used:
 17890 ;;		wreg, status,2
 17891 ;; Tracked objects:
 17892 ;;		On entry : 0/0
 17893 ;;		On exit  : 0/0
 17894 ;;		Unchanged: 0/0
 17895 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17896 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17897 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17899 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17900 ;;Total ram usage:        1 bytes
 17901 ;; Hardware stack levels used:    1
 17902 ;; Hardware stack levels required when called:    5
 17903 ;; This function calls:
 17904 ;;		Nothing
 17905 ;; This function is called by:
 17906 ;;		_DimmerLights_Main
 17907 ;;		_getDimmerLights_Allow_Condition
 17908 ;; This function uses a non-reentrant model
 17909 ;;
 17910                           
 17911                           
 17912                           ;psect for function _getLoad_OK
 17913  19A7                     _getLoad_OK:	
 17914                           
 17915                           ;OverLoad_B1.c: 273: char ok = Load.OK == 1 ? 1 : 0;
 17916                           
 17917                           ;incstack = 0
 17918                           ; Regs used in _getLoad_OK: [wreg+status,2]
 17919  19A7  3000               	movlw	0
 17920  19A8  0022               	movlb	2	; select bank2
 17921  19A9  1BC0               	btfsc	_Load^(0+256),7
 17922  19AA  3001               	movlw	1
 17923  19AB  0020               	movlb	0	; select bank0
 17924  19AC  00A1               	movwf	getLoad_OK@ok
 17925                           
 17926                           ;OverLoad_B1.c: 274: return ok;
 17927  19AD  0821               	movf	getLoad_OK@ok,w
 17928  19AE  0008               	return
 17929  19AF                     __end_of_getLoad_OK:	
 17930                           
 17931                           	psect	text119
 17932  10D4                     __ptext119:	
 17933 ;; *************** function _getMain_All_Error_Status *****************
 17934 ;; Defined at:
 17935 ;;		line 424 in file "../src/main_B1.c"
 17936 ;; Parameters:    Size  Location     Type
 17937 ;;  command         1    wreg     unsigned char 
 17938 ;; Auto vars:     Size  Location     Type
 17939 ;;  command         1    6[BANK0 ] unsigned char 
 17940 ;;  status          1    7[BANK0 ] unsigned char 
 17941 ;; Return value:  Size  Location     Type
 17942 ;;                  1    wreg      unsigned char 
 17943 ;; Registers used:
 17944 ;;		wreg, status,2, status,0
 17945 ;; Tracked objects:
 17946 ;;		On entry : 0/0
 17947 ;;		On exit  : 0/0
 17948 ;;		Unchanged: 0/0
 17949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17951 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17952 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17953 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17954 ;;Total ram usage:        7 bytes
 17955 ;; Hardware stack levels used:    1
 17956 ;; Hardware stack levels required when called:    5
 17957 ;; This function calls:
 17958 ;;		Nothing
 17959 ;; This function is called by:
 17960 ;;		_DimmerLights_Main
 17961 ;;		_Load_Main
 17962 ;;		_setTemp_Main
 17963 ;;		_getRxData
 17964 ;;		_setSw_Main
 17965 ;;		_Exception_Main
 17966 ;; This function uses a non-reentrant model
 17967 ;;
 17968                           
 17969                           
 17970                           ;psect for function _getMain_All_Error_Status
 17971  10D4                     _getMain_All_Error_Status:	
 17972                           
 17973                           ;incstack = 0
 17974                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 17975                           ;getMain_All_Error_Status@command stored from wreg
 17976  10D4  0020               	movlb	0	; select bank0
 17977  10D5  00A6               	movwf	getMain_All_Error_Status@command
 17978                           
 17979                           ;main_B1.c: 425: char status = 0;
 17980  10D6  01A7               	clrf	getMain_All_Error_Status@status
 17981                           
 17982                           ;main_B1.c: 436: if (status == 0 && command != 2) {
 17983  10D7  08A7               	movf	getMain_All_Error_Status@status,f
 17984  10D8  1D03               	skipz
 17985  10D9  28EE               	goto	l9275
 17986  10DA  0826               	movf	getMain_All_Error_Status@command,w
 17987  10DB  3A02               	xorlw	2
 17988  10DC  1903               	skipnz
 17989  10DD  28EE               	goto	l9275
 17990                           
 17991                           ;main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
 17992  10DE  0021               	movlb	1	; select bank1
 17993  10DF  18DB               	btfsc	_Temp^(0+128),1
 17994  10E0  28E5               	goto	l9273
 17995  10E1  0020               	movlb	0	; select bank0
 17996  10E2  01A2               	clrf	_getMain_All_Error_Status$6812
 17997  10E3  01A3               	clrf	_getMain_All_Error_Status$6812+1
 17998  10E4  28EA               	goto	l2855
 17999  10E5                     l9273:	
 18000  10E5  3002               	movlw	2
 18001  10E6  0020               	movlb	0	; select bank0
 18002  10E7  00A2               	movwf	_getMain_All_Error_Status$6812
 18003  10E8  3000               	movlw	0
 18004  10E9  00A3               	movwf	_getMain_All_Error_Status$6812+1
 18005  10EA                     l2855:	
 18006  10EA  0822               	movf	_getMain_All_Error_Status$6812,w
 18007  10EB  00A1               	movwf	??_getMain_All_Error_Status
 18008  10EC  0821               	movf	??_getMain_All_Error_Status,w
 18009  10ED  00A7               	movwf	getMain_All_Error_Status@status
 18010  10EE                     l9275:	
 18011                           
 18012                           ;main_B1.c: 438: }
 18013                           ;main_B1.c: 443: if (status == 0 && command != 3) {
 18014  10EE  08A7               	movf	getMain_All_Error_Status@status,f
 18015  10EF  1D03               	skipz
 18016  10F0  2905               	goto	l2856
 18017  10F1  0826               	movf	getMain_All_Error_Status@command,w
 18018  10F2  3A03               	xorlw	3
 18019  10F3  1903               	skipnz
 18020  10F4  2905               	goto	l2856
 18021                           
 18022                           ;main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
 18023  10F5  0022               	movlb	2	; select bank2
 18024  10F6  1AC0               	btfsc	_Load^(0+256),5
 18025  10F7  28FC               	goto	l9283
 18026  10F8  0020               	movlb	0	; select bank0
 18027  10F9  01A4               	clrf	_getMain_All_Error_Status$6813
 18028  10FA  01A5               	clrf	_getMain_All_Error_Status$6813+1
 18029  10FB  2901               	goto	l2860
 18030  10FC                     l9283:	
 18031  10FC  3003               	movlw	3
 18032  10FD  0020               	movlb	0	; select bank0
 18033  10FE  00A4               	movwf	_getMain_All_Error_Status$6813
 18034  10FF  3000               	movlw	0
 18035  1100  00A5               	movwf	_getMain_All_Error_Status$6813+1
 18036  1101                     l2860:	
 18037  1101  0824               	movf	_getMain_All_Error_Status$6813,w
 18038  1102  00A1               	movwf	??_getMain_All_Error_Status
 18039  1103  0821               	movf	??_getMain_All_Error_Status,w
 18040  1104  00A7               	movwf	getMain_All_Error_Status@status
 18041  1105                     l2856:	
 18042                           
 18043                           ;main_B1.c: 445: }
 18044                           ;main_B1.c: 455: return status;
 18045  1105  0827               	movf	getMain_All_Error_Status@status,w
 18046  1106  0008               	return
 18047  1107                     __end_of_getMain_All_Error_Status:	
 18048                           
 18049                           	psect	text120
 18050  19EB                     __ptext120:	
 18051 ;; *************** function _DimmerLights_Initialization *****************
 18052 ;; Defined at:
 18053 ;;		line 597 in file "../src/Dimmer_B1.c"
 18054 ;; Parameters:    Size  Location     Type
 18055 ;;		None
 18056 ;; Auto vars:     Size  Location     Type
 18057 ;;		None
 18058 ;; Return value:  Size  Location     Type
 18059 ;;		None               void
 18060 ;; Registers used:
 18061 ;;		wreg, status,2, status,0, pclath, cstack
 18062 ;; Tracked objects:
 18063 ;;		On entry : 0/0
 18064 ;;		On exit  : 0/0
 18065 ;;		Unchanged: 0/0
 18066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18070 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18071 ;;Total ram usage:        0 bytes
 18072 ;; Hardware stack levels used:    1
 18073 ;; Hardware stack levels required when called:    6
 18074 ;; This function calls:
 18075 ;;		_DimmerIntr_Initialization
 18076 ;;		_setDimmerLights_Initialization
 18077 ;; This function is called by:
 18078 ;;		_main
 18079 ;; This function uses a non-reentrant model
 18080 ;;
 18081                           
 18082                           
 18083                           ;psect for function _DimmerLights_Initialization
 18084  19EB                     _DimmerLights_Initialization:	
 18085                           
 18086                           ;Dimmer_B1.c: 599: setDimmerLights_Initialization(1);
 18087                           
 18088                           ;incstack = 0
 18089                           ; Regs used in _DimmerLights_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18090  19EB  3001               	movlw	1
 18091  19EC  3199  2152  3199   	fcall	_setDimmerLights_Initialization
 18092                           
 18093                           ;Dimmer_B1.c: 603: setDimmerLights_Initialization(2);
 18094  19EF  3002               	movlw	2
 18095  19F0  3199  2152  3199   	fcall	_setDimmerLights_Initialization
 18096                           
 18097                           ;Dimmer_B1.c: 609: DimmerIntr_Initialization();
 18098  19F3  3190  20A3         	fcall	_DimmerIntr_Initialization
 18099  19F5  0008               	return
 18100  19F6                     __end_of_DimmerLights_Initialization:	
 18101                           
 18102                           	psect	text121
 18103  1952                     __ptext121:	
 18104 ;; *************** function _setDimmerLights_Initialization *****************
 18105 ;; Defined at:
 18106 ;;		line 613 in file "../src/Dimmer_B1.c"
 18107 ;; Parameters:    Size  Location     Type
 18108 ;;  lights          1    wreg     unsigned char 
 18109 ;; Auto vars:     Size  Location     Type
 18110 ;;  lights          1    0[COMMON] unsigned char 
 18111 ;; Return value:  Size  Location     Type
 18112 ;;		None               void
 18113 ;; Registers used:
 18114 ;;		wreg
 18115 ;; Tracked objects:
 18116 ;;		On entry : 0/0
 18117 ;;		On exit  : 0/0
 18118 ;;		Unchanged: 0/0
 18119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18123 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18124 ;;Total ram usage:        0 bytes
 18125 ;; Hardware stack levels used:    1
 18126 ;; Hardware stack levels required when called:    5
 18127 ;; This function calls:
 18128 ;;		Nothing
 18129 ;; This function is called by:
 18130 ;;		_DimmerLights_Initialization
 18131 ;; This function uses a non-reentrant model
 18132 ;;
 18133                           
 18134                           
 18135                           ;psect for function _setDimmerLights_Initialization
 18136  1952                     _setDimmerLights_Initialization:	
 18137                           
 18138                           ;incstack = 0
 18139                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 18140  1952  0008               	return
 18141  1953                     __end_of_setDimmerLights_Initialization:	
 18142                           
 18143                           	psect	text122
 18144  10A3                     __ptext122:	
 18145 ;; *************** function _DimmerIntr_Initialization *****************
 18146 ;; Defined at:
 18147 ;;		line 7 in file "../src/Dimmer_B1.c"
 18148 ;; Parameters:    Size  Location     Type
 18149 ;;		None
 18150 ;; Auto vars:     Size  Location     Type
 18151 ;;		None
 18152 ;; Return value:  Size  Location     Type
 18153 ;;		None               void
 18154 ;; Registers used:
 18155 ;;		wreg
 18156 ;; Tracked objects:
 18157 ;;		On entry : 0/0
 18158 ;;		On exit  : 0/0
 18159 ;;		Unchanged: 0/0
 18160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18163 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18164 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18165 ;;Total ram usage:        1 bytes
 18166 ;; Hardware stack levels used:    1
 18167 ;; Hardware stack levels required when called:    5
 18168 ;; This function calls:
 18169 ;;		Nothing
 18170 ;; This function is called by:
 18171 ;;		_DimmerLights_Initialization
 18172 ;; This function uses a non-reentrant model
 18173 ;;
 18174                           
 18175                           
 18176                           ;psect for function _DimmerIntr_Initialization
 18177  10A3                     _DimmerIntr_Initialization:	
 18178                           
 18179                           ;Dimmer_B1.c: 10: DimmerIntr1.TuneTimeValue = 7;
 18180                           
 18181                           ;incstack = 0
 18182                           ; Regs used in _DimmerIntr_Initialization: [wreg]
 18183  10A3  3007               	movlw	7
 18184  10A4  0020               	movlb	0	; select bank0
 18185  10A5  00A1               	movwf	??_DimmerIntr_Initialization
 18186  10A6  0821               	movf	??_DimmerIntr_Initialization,w
 18187  10A7  0021               	movlb	1	; select bank1
 18188  10A8  00B2               	movwf	(_DimmerIntr1^(0+128)+4)
 18189                           
 18190                           ;Dimmer_B1.c: 11: DimmerIntr1.MaxmumValue = ((char)(65*0.65));
 18191  10A9  302A               	movlw	42
 18192  10AA  0020               	movlb	0	; select bank0
 18193  10AB  00A1               	movwf	??_DimmerIntr_Initialization
 18194  10AC  0821               	movf	??_DimmerIntr_Initialization,w
 18195  10AD  0021               	movlb	1	; select bank1
 18196  10AE  00B4               	movwf	(_DimmerIntr1^(0+128)+6)
 18197                           
 18198                           ;Dimmer_B1.c: 12: DimmerIntr1.MinimumValue = ((char)(20*0.65));
 18199  10AF  300D               	movlw	13
 18200  10B0  0020               	movlb	0	; select bank0
 18201  10B1  00A1               	movwf	??_DimmerIntr_Initialization
 18202  10B2  0821               	movf	??_DimmerIntr_Initialization,w
 18203  10B3  0021               	movlb	1	; select bank1
 18204  10B4  00B5               	movwf	(_DimmerIntr1^(0+128)+7)
 18205                           
 18206                           ;Dimmer_B1.c: 13: DimmerIntr1.DimmingValue = ((char)(65*0.65));
 18207  10B5  302A               	movlw	42
 18208  10B6  0020               	movlb	0	; select bank0
 18209  10B7  00A1               	movwf	??_DimmerIntr_Initialization
 18210  10B8  0821               	movf	??_DimmerIntr_Initialization,w
 18211  10B9  0021               	movlb	1	; select bank1
 18212  10BA  00B3               	movwf	(_DimmerIntr1^(0+128)+5)
 18213                           
 18214                           ;Dimmer_B1.c: 16: DimmerIntr2.TuneTimeValue = 7;
 18215  10BB  3007               	movlw	7
 18216  10BC  0020               	movlb	0	; select bank0
 18217  10BD  00A1               	movwf	??_DimmerIntr_Initialization
 18218  10BE  0821               	movf	??_DimmerIntr_Initialization,w
 18219  10BF  0021               	movlb	1	; select bank1
 18220  10C0  00BE               	movwf	(_DimmerIntr2^(0+128)+4)
 18221                           
 18222                           ;Dimmer_B1.c: 17: DimmerIntr2.MaxmumValue = ((char)(65*0.65));
 18223  10C1  302A               	movlw	42
 18224  10C2  0020               	movlb	0	; select bank0
 18225  10C3  00A1               	movwf	??_DimmerIntr_Initialization
 18226  10C4  0821               	movf	??_DimmerIntr_Initialization,w
 18227  10C5  0021               	movlb	1	; select bank1
 18228  10C6  00C0               	movwf	(_DimmerIntr2^(0+128)+6)
 18229                           
 18230                           ;Dimmer_B1.c: 18: DimmerIntr2.MinimumValue = ((char)(20*0.65));
 18231  10C7  300D               	movlw	13
 18232  10C8  0020               	movlb	0	; select bank0
 18233  10C9  00A1               	movwf	??_DimmerIntr_Initialization
 18234  10CA  0821               	movf	??_DimmerIntr_Initialization,w
 18235  10CB  0021               	movlb	1	; select bank1
 18236  10CC  00C1               	movwf	(_DimmerIntr2^(0+128)+7)
 18237                           
 18238                           ;Dimmer_B1.c: 19: DimmerIntr2.DimmingValue = ((char)(65*0.65));
 18239  10CD  302A               	movlw	42
 18240  10CE  0020               	movlb	0	; select bank0
 18241  10CF  00A1               	movwf	??_DimmerIntr_Initialization
 18242  10D0  0821               	movf	??_DimmerIntr_Initialization,w
 18243  10D1  0021               	movlb	1	; select bank1
 18244  10D2  00BF               	movwf	(_DimmerIntr2^(0+128)+5)
 18245  10D3  0008               	return
 18246  10D4                     __end_of_DimmerIntr_Initialization:	
 18247                           
 18248                           	psect	text123
 18249  199F                     __ptext123:	
 18250 ;; *************** function _DelayOff_Main *****************
 18251 ;; Defined at:
 18252 ;;		line 41 in file "../src/DelayOff_B1.c"
 18253 ;; Parameters:    Size  Location     Type
 18254 ;;		None
 18255 ;; Auto vars:     Size  Location     Type
 18256 ;;		None
 18257 ;; Return value:  Size  Location     Type
 18258 ;;		None               void
 18259 ;; Registers used:
 18260 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18261 ;; Tracked objects:
 18262 ;;		On entry : 0/0
 18263 ;;		On exit  : 0/0
 18264 ;;		Unchanged: 0/0
 18265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18269 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18270 ;;Total ram usage:        0 bytes
 18271 ;; Hardware stack levels used:    1
 18272 ;; Hardware stack levels required when called:    9
 18273 ;; This function calls:
 18274 ;;		_DlyOff_Main
 18275 ;; This function is called by:
 18276 ;;		_main
 18277 ;; This function uses a non-reentrant model
 18278 ;;
 18279                           
 18280                           
 18281                           ;psect for function _DelayOff_Main
 18282  199F                     _DelayOff_Main:	
 18283                           
 18284                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 18285                           
 18286                           ;incstack = 0
 18287                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18288  199F  3001               	movlw	1
 18289  19A0  3189  21C3  3199   	fcall	_DlyOff_Main
 18290                           
 18291                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 18292  19A3  3002               	movlw	2
 18293  19A4  3189  21C3         	fcall	_DlyOff_Main
 18294  19A6  0008               	return
 18295  19A7                     __end_of_DelayOff_Main:	
 18296                           
 18297                           	psect	text124
 18298  09C3                     __ptext124:	
 18299 ;; *************** function _DlyOff_Main *****************
 18300 ;; Defined at:
 18301 ;;		line 61 in file "../src/DelayOff_B1.c"
 18302 ;; Parameters:    Size  Location     Type
 18303 ;;  sw              1    wreg     unsigned char 
 18304 ;; Auto vars:     Size  Location     Type
 18305 ;;  sw              1   72[BANK0 ] unsigned char 
 18306 ;; Return value:  Size  Location     Type
 18307 ;;		None               void
 18308 ;; Registers used:
 18309 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18310 ;; Tracked objects:
 18311 ;;		On entry : 0/0
 18312 ;;		On exit  : 0/0
 18313 ;;		Unchanged: 0/0
 18314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18316 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18317 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18318 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18319 ;;Total ram usage:        3 bytes
 18320 ;; Hardware stack levels used:    1
 18321 ;; Hardware stack levels required when called:    8
 18322 ;; This function calls:
 18323 ;;		_DelayOffPointSelect
 18324 ;;		_getDimmerLights_Status
 18325 ;;		_setDimmerLights_SwOff
 18326 ;;		_setDimmerLights_SwOn
 18327 ;;		_setProductData
 18328 ;; This function is called by:
 18329 ;;		_DelayOff_Main
 18330 ;; This function uses a non-reentrant model
 18331 ;;
 18332                           
 18333                           
 18334                           ;psect for function _DlyOff_Main
 18335  09C3                     _DlyOff_Main:	
 18336                           
 18337                           ;incstack = 0
 18338                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18339                           ;DlyOff_Main@sw stored from wreg
 18340  09C3  0020               	movlb	0	; select bank0
 18341  09C4  00E8               	movwf	DlyOff_Main@sw
 18342                           
 18343                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 18344  09C5  0868               	movf	DlyOff_Main@sw,w
 18345  09C6  319B  23FA  3189   	fcall	_DelayOffPointSelect
 18346                           
 18347                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 18348  09C9  0021               	movlb	1	; select bank1
 18349  09CA  084D               	movf	_DelayOff^(0+128),w
 18350  09CB  0086               	movwf	6
 18351  09CC  3001               	movlw	1	; select bank2/3
 18352  09CD  0087               	movwf	7
 18353  09CE  1C81               	btfss	1,1
 18354  09CF  0008               	return
 18355                           
 18356                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 18357  09D0  084D               	movf	_DelayOff^(0+128),w
 18358  09D1  3E02               	addlw	2
 18359  09D2  0086               	movwf	6
 18360  09D3  3001               	movlw	1	; select bank2/3
 18361  09D4  0087               	movwf	7
 18362  09D5  3001               	movlw	1
 18363  09D6  0781               	addwf	1,f
 18364  09D7  3141               	addfsr 1,1
 18365  09D8  1803               	skipnc
 18366  09D9  0A81               	incf	1,f
 18367                           
 18368                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 60000/20) {
 18369  09DA  084D               	movf	_DelayOff^(0+128),w
 18370  09DB  3E02               	addlw	2
 18371  09DC  0086               	movwf	6
 18372  09DD  3001               	movlw	1	; select bank2/3
 18373  09DE  0087               	movwf	7
 18374  09DF  3F40               	moviw [0]fsr1
 18375  09E0  0020               	movlb	0	; select bank0
 18376  09E1  00E6               	movwf	??_DlyOff_Main
 18377  09E2  3F41               	moviw [1]fsr1
 18378  09E3  00E7               	movwf	??_DlyOff_Main+1
 18379  09E4  300B               	movlw	11
 18380  09E5  0267               	subwf	??_DlyOff_Main+1,w
 18381  09E6  30B8               	movlw	184
 18382  09E7  1903               	skipnz
 18383  09E8  0266               	subwf	??_DlyOff_Main,w
 18384  09E9  1C03               	skipc
 18385  09EA  0008               	return
 18386                           
 18387                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 18388  09EB  0021               	movlb	1	; select bank1
 18389  09EC  084D               	movf	_DelayOff^(0+128),w
 18390  09ED  3E02               	addlw	2
 18391  09EE  0086               	movwf	6
 18392  09EF  3001               	movlw	1	; select bank2/3
 18393  09F0  0087               	movwf	7
 18394  09F1  3000               	movlw	0
 18395  09F2  3FC0               	movwi [0]fsr1
 18396  09F3  3FC1               	movwi [1]fsr1
 18397                           
 18398                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 18399  09F4  3001               	movlw	1
 18400  09F5  0020               	movlb	0	; select bank0
 18401  09F6  00E6               	movwf	??_DlyOff_Main
 18402  09F7  0021               	movlb	1	; select bank1
 18403  09F8  084D               	movf	_DelayOff^(0+128),w
 18404  09F9  3E04               	addlw	4
 18405  09FA  0086               	movwf	6
 18406  09FB  3001               	movlw	1	; select bank2/3
 18407  09FC  0087               	movwf	7
 18408  09FD  0020               	movlb	0	; select bank0
 18409  09FE  0866               	movf	??_DlyOff_Main,w
 18410  09FF  0781               	addwf	1,f
 18411                           
 18412                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 18413  0A00  0021               	movlb	1	; select bank1
 18414  0A01  084D               	movf	_DelayOff^(0+128),w
 18415  0A02  3E04               	addlw	4
 18416  0A03  0086               	movwf	6
 18417  0A04  3001               	movlw	1	; select bank2/3
 18418  0A05  0087               	movwf	7
 18419  0A06  0A4D               	incf	_DelayOff^(0+128),w
 18420  0A07  0084               	movwf	4
 18421  0A08  3001               	movlw	1	; select bank2/3
 18422  0A09  0085               	movwf	5
 18423  0A0A  0800               	movf	0,w
 18424  0A0B  0201               	subwf	1,w
 18425  0A0C  1C03               	skipc
 18426  0A0D  0008               	return
 18427                           
 18428                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 18429  0A0E  084D               	movf	_DelayOff^(0+128),w
 18430  0A0F  3E04               	addlw	4
 18431  0A10  0086               	movwf	6
 18432  0A11  3001               	movlw	1	; select bank2/3
 18433  0A12  0087               	movwf	7
 18434  0A13  0181               	clrf	1
 18435                           
 18436                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 18437  0A14  084D               	movf	_DelayOff^(0+128),w
 18438  0A15  0086               	movwf	6
 18439  0A16  3001               	movlw	1	; select bank2/3
 18440  0A17  0087               	movwf	7
 18441  0A18  1081               	bcf	1,1
 18442                           
 18443                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 18444  0A19  0020               	movlb	0	; select bank0
 18445  0A1A  0868               	movf	DlyOff_Main@sw,w
 18446  0A1B  319A  2284  3189   	fcall	_getDimmerLights_Status
 18447  0A1E  3A01               	xorlw	1
 18448  0A1F  1D03               	skipz
 18449  0A20  2A2B               	goto	l581
 18450                           
 18451                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 18452  0A21  0020               	movlb	0	; select bank0
 18453  0A22  0868               	movf	DlyOff_Main@sw,w
 18454  0A23  3195  25AC  3189   	fcall	_setDimmerLights_SwOn
 18455                           
 18456                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 18457  0A26  0020               	movlb	0	; select bank0
 18458  0A27  0868               	movf	DlyOff_Main@sw,w
 18459  0A28  3191  21A8  3189   	fcall	_setDimmerLights_SwOff
 18460  0A2B                     l581:	
 18461                           
 18462                           ;DelayOff_B1.c: 78: }
 18463                           ;DelayOff_B1.c: 80: setProductData(26 + sw, 0);
 18464  0A2B  0020               	movlb	0	; select bank0
 18465  0A2C  01E3               	clrf	setProductData@value
 18466  0A2D  0868               	movf	DlyOff_Main@sw,w
 18467  0A2E  3E1A               	addlw	26
 18468  0A2F  319A  2223         	fcall	_setProductData
 18469  0A31  0008               	return
 18470  0A32                     __end_of_DlyOff_Main:	
 18471                           
 18472                           	psect	text125
 18473  1A23                     __ptext125:	
 18474 ;; *************** function _setProductData *****************
 18475 ;; Defined at:
 18476 ;;		line 645 in file "../src/main_B1.c"
 18477 ;; Parameters:    Size  Location     Type
 18478 ;;  address         1    wreg     unsigned char 
 18479 ;;  value           1   67[BANK0 ] unsigned char 
 18480 ;; Auto vars:     Size  Location     Type
 18481 ;;  address         1   69[BANK0 ] unsigned char 
 18482 ;; Return value:  Size  Location     Type
 18483 ;;		None               void
 18484 ;; Registers used:
 18485 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18486 ;; Tracked objects:
 18487 ;;		On entry : 0/0
 18488 ;;		On exit  : 0/0
 18489 ;;		Unchanged: 0/0
 18490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18491 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18492 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18493 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18494 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18495 ;;Total ram usage:        3 bytes
 18496 ;; Hardware stack levels used:    1
 18497 ;; Hardware stack levels required when called:    5
 18498 ;; This function calls:
 18499 ;;		Nothing
 18500 ;; This function is called by:
 18501 ;;		_DlyOff_Main
 18502 ;;		_setDelayOff_GO
 18503 ;;		_setDimmerLights_OnOff
 18504 ;;		_setDimmerLights_Dimming
 18505 ;;		_setTemp_Main
 18506 ;;		_setLog_Code
 18507 ;;		_setControl_Lights_Table
 18508 ;;		_setRFSW_AdjControl
 18509 ;;		_setRF_DimmerLights
 18510 ;; This function uses a non-reentrant model
 18511 ;;
 18512                           
 18513                           
 18514                           ;psect for function _setProductData
 18515  1A23                     _setProductData:	
 18516                           
 18517                           ;incstack = 0
 18518                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 18519                           ;setProductData@address stored from wreg
 18520  1A23  0020               	movlb	0	; select bank0
 18521  1A24  00E5               	movwf	setProductData@address
 18522                           
 18523                           ;main_B1.c: 646: _product.Data[address] = value;
 18524  1A25  0863               	movf	setProductData@value,w
 18525  1A26  00E4               	movwf	??_setProductData
 18526  1A27  0865               	movf	setProductData@address,w
 18527  1A28  3E45               	addlw	__product& (0+255)
 18528  1A29  0086               	movwf	6
 18529  1A2A  3002               	movlw	2	; select bank4/5
 18530  1A2B  0087               	movwf	7
 18531  1A2C  0864               	movf	??_setProductData,w
 18532  1A2D  0081               	movwf	1
 18533  1A2E  0008               	return
 18534  1A2F                     __end_of_setProductData:	
 18535                           
 18536                           	psect	text126
 18537  15AC                     __ptext126:	
 18538 ;; *************** function _setDimmerLights_SwOn *****************
 18539 ;; Defined at:
 18540 ;;		line 653 in file "../src/Dimmer_B1.c"
 18541 ;; Parameters:    Size  Location     Type
 18542 ;;  sw              1    wreg     unsigned char 
 18543 ;; Auto vars:     Size  Location     Type
 18544 ;;  sw              1   18[BANK0 ] unsigned char 
 18545 ;;  idle            1   17[BANK0 ] unsigned char 
 18546 ;; Return value:  Size  Location     Type
 18547 ;;		None               void
 18548 ;; Registers used:
 18549 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18550 ;; Tracked objects:
 18551 ;;		On entry : 0/0
 18552 ;;		On exit  : 0/0
 18553 ;;		Unchanged: 0/0
 18554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18556 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18557 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18558 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18559 ;;Total ram usage:        5 bytes
 18560 ;; Hardware stack levels used:    1
 18561 ;; Hardware stack levels required when called:    7
 18562 ;; This function calls:
 18563 ;;		_DimmerLights_SelectPointer
 18564 ;;		_setBuz
 18565 ;; This function is called by:
 18566 ;;		_DlyOff_Main
 18567 ;;		_setControl_Lights_Table
 18568 ;;		_setRFSW_Control
 18569 ;;		_setRFSW_AdjControl
 18570 ;;		_setSw_Main
 18571 ;; This function uses a non-reentrant model
 18572 ;;
 18573                           
 18574                           
 18575                           ;psect for function _setDimmerLights_SwOn
 18576  15AC                     _setDimmerLights_SwOn:	
 18577                           
 18578                           ;incstack = 0
 18579                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18580                           ;setDimmerLights_SwOn@sw stored from wreg
 18581  15AC  0020               	movlb	0	; select bank0
 18582  15AD  00B2               	movwf	setDimmerLights_SwOn@sw
 18583                           
 18584                           ;Dimmer_B1.c: 654: char idle = 0;
 18585  15AE  01B1               	clrf	setDimmerLights_SwOn@idle
 18586                           
 18587                           ;Dimmer_B1.c: 656: if (idle == 0) {
 18588  15AF  08B1               	movf	setDimmerLights_SwOn@idle,f
 18589  15B0  1D03               	skipz
 18590  15B1  2DD6               	goto	l9143
 18591                           
 18592                           ;Dimmer_B1.c: 657: if (sw == 1) {
 18593  15B2  0832               	movf	setDimmerLights_SwOn@sw,w
 18594  15B3  3A01               	xorlw	1
 18595  15B4  1D03               	skipz
 18596  15B5  2DC3               	goto	l9133
 18597                           
 18598                           ;Dimmer_B1.c: 658: idle = DimmerLights2.DimmingTrigger == 1 || DimmerIntr2.Dimming_Sw ==
      +                           1 ? 1 : 0;
 18599  15B6  01AF               	clrf	_setDimmerLights_SwOn$2306
 18600  15B7  0AAF               	incf	_setDimmerLights_SwOn$2306,f
 18601  15B8  0023               	movlb	3	; select bank3
 18602  15B9  1A50               	btfsc	_DimmerLights2^(0+384),4
 18603  15BA  2DC0               	goto	l9131
 18604  15BB  0021               	movlb	1	; select bank1
 18605  15BC  1A3A               	btfsc	_DimmerIntr2^(0+128),4
 18606  15BD  2DC0               	goto	l9131
 18607  15BE  0020               	movlb	0	; select bank0
 18608  15BF  01AF               	clrf	_setDimmerLights_SwOn$2306
 18609  15C0                     l9131:	
 18610  15C0  0020               	movlb	0	; select bank0
 18611  15C1  082F               	movf	_setDimmerLights_SwOn$2306,w
 18612  15C2  2DD3               	goto	L12
 18613  15C3                     l9133:	
 18614                           ;Dimmer_B1.c: 659: } else if (sw == 2) {
 18615                           
 18616  15C3  0832               	movf	setDimmerLights_SwOn@sw,w
 18617  15C4  3A02               	xorlw	2
 18618  15C5  1D03               	skipz
 18619  15C6  2DD6               	goto	l9143
 18620                           
 18621                           ;Dimmer_B1.c: 660: idle = DimmerLights1.DimmingTrigger == 1 || DimmerIntr1.Dimming_Sw ==
      +                           1 ? 1 : 0;
 18622  15C7  01B0               	clrf	_setDimmerLights_SwOn$2315
 18623  15C8  0AB0               	incf	_setDimmerLights_SwOn$2315,f
 18624  15C9  0022               	movlb	2	; select bank2
 18625  15CA  1A68               	btfsc	_DimmerLights1^(0+256),4
 18626  15CB  2DD1               	goto	l9141
 18627  15CC  0021               	movlb	1	; select bank1
 18628  15CD  1A2E               	btfsc	_DimmerIntr1^(0+128),4
 18629  15CE  2DD1               	goto	l9141
 18630  15CF  0020               	movlb	0	; select bank0
 18631  15D0  01B0               	clrf	_setDimmerLights_SwOn$2315
 18632  15D1                     l9141:	
 18633  15D1  0020               	movlb	0	; select bank0
 18634  15D2  0830               	movf	_setDimmerLights_SwOn$2315,w
 18635  15D3                     L12:	
 18636  15D3  00AE               	movwf	??_setDimmerLights_SwOn
 18637  15D4  082E               	movf	??_setDimmerLights_SwOn,w
 18638  15D5  00B1               	movwf	setDimmerLights_SwOn@idle
 18639  15D6                     l9143:	
 18640                           
 18641                           ;Dimmer_B1.c: 661: }
 18642                           ;Dimmer_B1.c: 662: }
 18643                           ;Dimmer_B1.c: 679: DimmerLights_SelectPointer(sw);
 18644  15D6  0832               	movf	setDimmerLights_SwOn@sw,w
 18645  15D7  319C  2411  3195   	fcall	_DimmerLights_SelectPointer
 18646                           
 18647                           ;Dimmer_B1.c: 680: if (idle == 0) {
 18648  15DA  0020               	movlb	0	; select bank0
 18649  15DB  08B1               	movf	setDimmerLights_SwOn@idle,f
 18650  15DC  1D03               	skipz
 18651  15DD  0008               	return
 18652                           
 18653                           ;Dimmer_B1.c: 681: DimmerLights->SwFlag = 1;
 18654  15DE  0021               	movlb	1	; select bank1
 18655  15DF  084F               	movf	_DimmerLights^(0+128),w
 18656  15E0  0086               	movwf	6
 18657  15E1  3001               	movlw	1	; select bank2/3
 18658  15E2  0087               	movwf	7
 18659  15E3  1401               	bsf	1,0
 18660                           
 18661                           ;Dimmer_B1.c: 682: if (DimmerLights->Status == 0) {
 18662  15E4  0A4F               	incf	_DimmerLights^(0+128),w
 18663  15E5  0086               	movwf	6
 18664  15E6  3001               	movlw	1	; select bank2/3
 18665  15E7  0087               	movwf	7
 18666  15E8  1801               	btfsc	1,0
 18667  15E9  2DFA               	goto	l9151
 18668                           
 18669                           ;Dimmer_B1.c: 683: DimmerLights->Status = 1;
 18670  15EA  0A4F               	incf	_DimmerLights^(0+128),w
 18671  15EB  0086               	movwf	6
 18672  15EC  3001               	movlw	1	; select bank2/3
 18673  15ED  0087               	movwf	7
 18674  15EE  1401               	bsf	1,0
 18675                           
 18676                           ;Dimmer_B1.c: 684: DimmerLights->Trigger = 1;
 18677  15EF  084F               	movf	_DimmerLights^(0+128),w
 18678  15F0  0086               	movwf	6
 18679  15F1  3001               	movlw	1	; select bank2/3
 18680  15F2  0087               	movwf	7
 18681  15F3  1481               	bsf	1,1
 18682                           
 18683                           ;Dimmer_B1.c: 685: DimmerLights->Switch = 1;
 18684  15F4  084F               	movf	_DimmerLights^(0+128),w
 18685  15F5  0086               	movwf	6
 18686  15F6  3001               	movlw	1	; select bank2/3
 18687  15F7  0087               	movwf	7
 18688  15F8  1501               	bsf	1,2
 18689                           
 18690                           ;Dimmer_B1.c: 686: } else {
 18691  15F9  2DFF               	goto	l9153
 18692  15FA                     l9151:	
 18693                           
 18694                           ;Dimmer_B1.c: 687: DimmerLights->Status = 0;
 18695  15FA  0A4F               	incf	_DimmerLights^(0+128),w
 18696  15FB  0086               	movwf	6
 18697  15FC  3001               	movlw	1	; select bank2/3
 18698  15FD  0087               	movwf	7
 18699  15FE  1001               	bcf	1,0
 18700  15FF                     l9153:	
 18701                           
 18702                           ;Dimmer_B1.c: 688: }
 18703                           ;Dimmer_B1.c: 689: setBuz(1, 100);
 18704  15FF  3064               	movlw	100
 18705  1600  0020               	movlb	0	; select bank0
 18706  1601  00AA               	movwf	setBuz@time
 18707  1602  3000               	movlw	0
 18708  1603  00AB               	movwf	setBuz@time+1
 18709  1604  3001               	movlw	1
 18710  1605  3194  24F8         	fcall	_setBuz
 18711  1607  0008               	return
 18712  1608                     __end_of_setDimmerLights_SwOn:	
 18713                           
 18714                           	psect	text127
 18715  14F8                     __ptext127:	
 18716 ;; *************** function _setBuz *****************
 18717 ;; Defined at:
 18718 ;;		line 22 in file "../src/Buzzer_B1.c"
 18719 ;; Parameters:    Size  Location     Type
 18720 ;;  count           1    wreg     unsigned char 
 18721 ;;  time            2   10[BANK0 ] int 
 18722 ;; Auto vars:     Size  Location     Type
 18723 ;;  count           1   13[BANK0 ] unsigned char 
 18724 ;; Return value:  Size  Location     Type
 18725 ;;		None               void
 18726 ;; Registers used:
 18727 ;;		wreg, status,2, status,0, pclath, cstack
 18728 ;; Tracked objects:
 18729 ;;		On entry : 0/0
 18730 ;;		On exit  : 0/0
 18731 ;;		Unchanged: 0/0
 18732 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18733 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18734 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18735 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18736 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18737 ;;Total ram usage:        4 bytes
 18738 ;; Hardware stack levels used:    1
 18739 ;; Hardware stack levels required when called:    6
 18740 ;; This function calls:
 18741 ;;		___awdiv
 18742 ;; This function is called by:
 18743 ;;		_setDimmerLights_SwOn
 18744 ;;		_setDimmerLights_Dimming
 18745 ;;		_setTemp_Main
 18746 ;;		_setLog_Code
 18747 ;;		_setRFSW_Control
 18748 ;;		_setSw_Main
 18749 ;;		_my_MainTimer
 18750 ;;		_Exception_Main
 18751 ;; This function uses a non-reentrant model
 18752 ;;
 18753                           
 18754                           
 18755                           ;psect for function _setBuz
 18756  14F8                     _setBuz:	
 18757                           
 18758                           ;incstack = 0
 18759                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 18760                           ;setBuz@count stored from wreg
 18761  14F8  0020               	movlb	0	; select bank0
 18762  14F9  00AD               	movwf	setBuz@count
 18763                           
 18764                           ;Buzzer_B1.c: 23: time /= 20;
 18765  14FA  3014               	movlw	20
 18766  14FB  00A1               	movwf	___awdiv@divisor
 18767  14FC  3000               	movlw	0
 18768  14FD  00A2               	movwf	___awdiv@divisor+1
 18769  14FE  082B               	movf	setBuz@time+1,w
 18770  14FF  01A4               	clrf	___awdiv@dividend+1
 18771  1500  07A4               	addwf	___awdiv@dividend+1,f
 18772  1501  082A               	movf	setBuz@time,w
 18773  1502  01A3               	clrf	___awdiv@dividend
 18774  1503  07A3               	addwf	___awdiv@dividend,f
 18775  1504  3194  24A4  3194   	fcall	___awdiv
 18776  1507  0020               	movlb	0	; select bank0
 18777  1508  0822               	movf	?___awdiv+1,w
 18778  1509  01AB               	clrf	setBuz@time+1
 18779  150A  07AB               	addwf	setBuz@time+1,f
 18780  150B  0821               	movf	?___awdiv,w
 18781  150C  01AA               	clrf	setBuz@time
 18782  150D  07AA               	addwf	setBuz@time,f
 18783                           
 18784                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 18785  150E  0022               	movlb	2	; select bank2
 18786  150F  1C2D               	btfss	_Buz1^(0+256),0
 18787  1510  0008               	return
 18788                           
 18789                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 18790  1511  18AD               	btfsc	_Buz1^(0+256),1
 18791  1512  2D29               	goto	l98
 18792                           
 18793                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 18794  1513  14AD               	bsf	_Buz1^(0+256),1
 18795                           
 18796                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 18797  1514  01AE               	clrf	(_Buz1^(0+256)+1)
 18798  1515  01AF               	clrf	((_Buz1+1)^(0+256)+1)
 18799                           
 18800                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 18801  1516  0020               	movlb	0	; select bank0
 18802  1517  082D               	movf	setBuz@count,w
 18803  1518  00AC               	movwf	??_setBuz
 18804  1519  082C               	movf	??_setBuz,w
 18805  151A  0022               	movlb	2	; select bank2
 18806  151B  00B0               	movwf	(_Buz1^(0+256)+3)
 18807                           
 18808                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 18809  151C  0020               	movlb	0	; select bank0
 18810  151D  082B               	movf	setBuz@time+1,w
 18811  151E  0022               	movlb	2	; select bank2
 18812  151F  01B4               	clrf	((_Buz1+1)^(0+256)+6)
 18813  1520  07B4               	addwf	((_Buz1+1)^(0+256)+6),f
 18814  1521  0020               	movlb	0	; select bank0
 18815  1522  082A               	movf	setBuz@time,w
 18816  1523  0022               	movlb	2	; select bank2
 18817  1524  01B3               	clrf	(_Buz1^(0+256)+6)
 18818  1525  07B3               	addwf	(_Buz1^(0+256)+6),f
 18819                           
 18820                           ;Buzzer_B1.c: 30: RB3 = 1;
 18821  1526  0020               	movlb	0	; select bank0
 18822  1527  158D               	bsf	13,3	;volatile
 18823                           
 18824                           ;Buzzer_B1.c: 31: } else {
 18825  1528  0008               	return
 18826  1529                     l98:	
 18827                           
 18828                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 18829  1529  19AD               	btfsc	_Buz1^(0+256),3
 18830  152A  2D3D               	goto	l100
 18831                           
 18832                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 18833  152B  15AD               	bsf	_Buz1^(0+256),3
 18834                           
 18835                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 18836  152C  0020               	movlb	0	; select bank0
 18837  152D  082D               	movf	setBuz@count,w
 18838  152E  00AC               	movwf	??_setBuz
 18839  152F  082C               	movf	??_setBuz,w
 18840  1530  0022               	movlb	2	; select bank2
 18841  1531  00B1               	movwf	(_Buz1^(0+256)+4)
 18842                           
 18843                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 18844  1532  0020               	movlb	0	; select bank0
 18845  1533  082B               	movf	setBuz@time+1,w
 18846  1534  0022               	movlb	2	; select bank2
 18847  1535  01B6               	clrf	((_Buz1+1)^(0+256)+8)
 18848  1536  07B6               	addwf	((_Buz1+1)^(0+256)+8),f
 18849  1537  0020               	movlb	0	; select bank0
 18850  1538  082A               	movf	setBuz@time,w
 18851  1539  0022               	movlb	2	; select bank2
 18852  153A  01B5               	clrf	(_Buz1^(0+256)+8)
 18853  153B  07B5               	addwf	(_Buz1^(0+256)+8),f
 18854                           
 18855                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 18856  153C  0008               	return
 18857  153D                     l100:	
 18858  153D  1A2D               	btfsc	_Buz1^(0+256),4
 18859  153E  0008               	return
 18860                           
 18861                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 18862  153F  162D               	bsf	_Buz1^(0+256),4
 18863                           
 18864                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 18865  1540  0020               	movlb	0	; select bank0
 18866  1541  082D               	movf	setBuz@count,w
 18867  1542  00AC               	movwf	??_setBuz
 18868  1543  082C               	movf	??_setBuz,w
 18869  1544  0022               	movlb	2	; select bank2
 18870  1545  00B2               	movwf	(_Buz1^(0+256)+5)
 18871                           
 18872                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 18873  1546  0020               	movlb	0	; select bank0
 18874  1547  082B               	movf	setBuz@time+1,w
 18875  1548  0022               	movlb	2	; select bank2
 18876  1549  01B8               	clrf	((_Buz1+1)^(0+256)+10)
 18877  154A  07B8               	addwf	((_Buz1+1)^(0+256)+10),f
 18878  154B  0020               	movlb	0	; select bank0
 18879  154C  082A               	movf	setBuz@time,w
 18880  154D  0022               	movlb	2	; select bank2
 18881  154E  01B7               	clrf	(_Buz1^(0+256)+10)
 18882  154F  07B7               	addwf	(_Buz1^(0+256)+10),f
 18883  1550  0008               	return
 18884  1551                     __end_of_setBuz:	
 18885                           
 18886                           	psect	text128
 18887  14A4                     __ptext128:	
 18888 ;; *************** function ___awdiv *****************
 18889 ;; Defined at:
 18890 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 18891 ;; Parameters:    Size  Location     Type
 18892 ;;  divisor         2    1[BANK0 ] int 
 18893 ;;  dividend        2    3[BANK0 ] int 
 18894 ;; Auto vars:     Size  Location     Type
 18895 ;;  quotient        2    8[BANK0 ] int 
 18896 ;;  sign            1    7[BANK0 ] unsigned char 
 18897 ;;  counter         1    6[BANK0 ] unsigned char 
 18898 ;; Return value:  Size  Location     Type
 18899 ;;                  2    1[BANK0 ] int 
 18900 ;; Registers used:
 18901 ;;		wreg, status,2, status,0
 18902 ;; Tracked objects:
 18903 ;;		On entry : 0/0
 18904 ;;		On exit  : 0/0
 18905 ;;		Unchanged: 0/0
 18906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18907 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18908 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18909 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18910 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18911 ;;Total ram usage:        9 bytes
 18912 ;; Hardware stack levels used:    1
 18913 ;; Hardware stack levels required when called:    5
 18914 ;; This function calls:
 18915 ;;		Nothing
 18916 ;; This function is called by:
 18917 ;;		_setBuz
 18918 ;; This function uses a non-reentrant model
 18919 ;;
 18920                           
 18921                           
 18922                           ;psect for function ___awdiv
 18923  14A4                     ___awdiv:	
 18924                           
 18925                           ;incstack = 0
 18926                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 18927  14A4  0020               	movlb	0	; select bank0
 18928  14A5  01A7               	clrf	___awdiv@sign
 18929  14A6  1FA2               	btfss	___awdiv@divisor+1,7
 18930  14A7  2CAF               	goto	l9053
 18931  14A8  09A1               	comf	___awdiv@divisor,f
 18932  14A9  09A2               	comf	___awdiv@divisor+1,f
 18933  14AA  0AA1               	incf	___awdiv@divisor,f
 18934  14AB  1903               	skipnz
 18935  14AC  0AA2               	incf	___awdiv@divisor+1,f
 18936  14AD  01A7               	clrf	___awdiv@sign
 18937  14AE  0AA7               	incf	___awdiv@sign,f
 18938  14AF                     l9053:	
 18939  14AF  1FA4               	btfss	___awdiv@dividend+1,7
 18940  14B0  2CBA               	goto	l9059
 18941  14B1  09A3               	comf	___awdiv@dividend,f
 18942  14B2  09A4               	comf	___awdiv@dividend+1,f
 18943  14B3  0AA3               	incf	___awdiv@dividend,f
 18944  14B4  1903               	skipnz
 18945  14B5  0AA4               	incf	___awdiv@dividend+1,f
 18946  14B6  3001               	movlw	1
 18947  14B7  00A5               	movwf	??___awdiv
 18948  14B8  0825               	movf	??___awdiv,w
 18949  14B9  06A7               	xorwf	___awdiv@sign,f
 18950  14BA                     l9059:	
 18951  14BA  01A8               	clrf	___awdiv@quotient
 18952  14BB  01A9               	clrf	___awdiv@quotient+1
 18953  14BC  0822               	movf	___awdiv@divisor+1,w
 18954  14BD  0421               	iorwf	___awdiv@divisor,w
 18955  14BE  1903               	skipnz
 18956  14BF  2CE9               	goto	l9081
 18957  14C0  01A6               	clrf	___awdiv@counter
 18958  14C1  0AA6               	incf	___awdiv@counter,f
 18959  14C2                     l9069:	
 18960  14C2  1BA2               	btfsc	___awdiv@divisor+1,7
 18961  14C3  2CCE               	goto	l9071
 18962  14C4  3001               	movlw	1
 18963  14C5                     u9865:	
 18964  14C5  35A1               	lslf	___awdiv@divisor,f
 18965  14C6  0DA2               	rlf	___awdiv@divisor+1,f
 18966  14C7  0B89               	decfsz	9,f
 18967  14C8  2CC5               	goto	u9865
 18968  14C9  3001               	movlw	1
 18969  14CA  00A5               	movwf	??___awdiv
 18970  14CB  0825               	movf	??___awdiv,w
 18971  14CC  07A6               	addwf	___awdiv@counter,f
 18972  14CD  2CC2               	goto	l9069
 18973  14CE                     l9071:	
 18974  14CE  3001               	movlw	1
 18975  14CF                     u9885:	
 18976  14CF  35A8               	lslf	___awdiv@quotient,f
 18977  14D0  0DA9               	rlf	___awdiv@quotient+1,f
 18978  14D1  0B89               	decfsz	9,f
 18979  14D2  2CCF               	goto	u9885
 18980  14D3  0822               	movf	___awdiv@divisor+1,w
 18981  14D4  0224               	subwf	___awdiv@dividend+1,w
 18982  14D5  1D03               	skipz
 18983  14D6  2CD9               	goto	u9895
 18984  14D7  0821               	movf	___awdiv@divisor,w
 18985  14D8  0223               	subwf	___awdiv@dividend,w
 18986  14D9                     u9895:	
 18987  14D9  1C03               	skipc
 18988  14DA  2CE0               	goto	l9077
 18989  14DB  0821               	movf	___awdiv@divisor,w
 18990  14DC  02A3               	subwf	___awdiv@dividend,f
 18991  14DD  0822               	movf	___awdiv@divisor+1,w
 18992  14DE  3BA4               	subwfb	___awdiv@dividend+1,f
 18993  14DF  1428               	bsf	___awdiv@quotient,0
 18994  14E0                     l9077:	
 18995  14E0  3001               	movlw	1
 18996  14E1                     u9905:	
 18997  14E1  36A2               	lsrf	___awdiv@divisor+1,f
 18998  14E2  0CA1               	rrf	___awdiv@divisor,f
 18999  14E3  0B89               	decfsz	9,f
 19000  14E4  2CE1               	goto	u9905
 19001  14E5  3001               	movlw	1
 19002  14E6  02A6               	subwf	___awdiv@counter,f
 19003  14E7  1D03               	btfss	3,2
 19004  14E8  2CCE               	goto	l9071
 19005  14E9                     l9081:	
 19006  14E9  0827               	movf	___awdiv@sign,w
 19007  14EA  1903               	btfsc	3,2
 19008  14EB  2CF1               	goto	l9085
 19009  14EC  09A8               	comf	___awdiv@quotient,f
 19010  14ED  09A9               	comf	___awdiv@quotient+1,f
 19011  14EE  0AA8               	incf	___awdiv@quotient,f
 19012  14EF  1903               	skipnz
 19013  14F0  0AA9               	incf	___awdiv@quotient+1,f
 19014  14F1                     l9085:	
 19015  14F1  0829               	movf	___awdiv@quotient+1,w
 19016  14F2  01A2               	clrf	?___awdiv+1
 19017  14F3  07A2               	addwf	?___awdiv+1,f
 19018  14F4  0828               	movf	___awdiv@quotient,w
 19019  14F5  01A1               	clrf	?___awdiv
 19020  14F6  07A1               	addwf	?___awdiv,f
 19021  14F7  0008               	return
 19022  14F8                     __end_of___awdiv:	
 19023                           
 19024                           	psect	text129
 19025  11A8                     __ptext129:	
 19026 ;; *************** function _setDimmerLights_SwOff *****************
 19027 ;; Defined at:
 19028 ;;		line 694 in file "../src/Dimmer_B1.c"
 19029 ;; Parameters:    Size  Location     Type
 19030 ;;  sw              1    wreg     unsigned char 
 19031 ;; Auto vars:     Size  Location     Type
 19032 ;;  sw              1    3[BANK0 ] unsigned char 
 19033 ;; Return value:  Size  Location     Type
 19034 ;;		None               void
 19035 ;; Registers used:
 19036 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19037 ;; Tracked objects:
 19038 ;;		On entry : 0/0
 19039 ;;		On exit  : 0/0
 19040 ;;		Unchanged: 0/0
 19041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19043 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19045 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19046 ;;Total ram usage:        1 bytes
 19047 ;; Hardware stack levels used:    1
 19048 ;; Hardware stack levels required when called:    6
 19049 ;; This function calls:
 19050 ;;		_DimmerLights_SelectPointer
 19051 ;; This function is called by:
 19052 ;;		_DlyOff_Main
 19053 ;;		_setControl_Lights_Table
 19054 ;;		_setRFSW_Control
 19055 ;;		_setRFSW_AdjControl
 19056 ;;		_setSw_Main
 19057 ;;		_Exception_Main
 19058 ;; This function uses a non-reentrant model
 19059 ;;
 19060                           
 19061                           
 19062                           ;psect for function _setDimmerLights_SwOff
 19063  11A8                     _setDimmerLights_SwOff:	
 19064                           
 19065                           ;incstack = 0
 19066                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 19067                           ;setDimmerLights_SwOff@sw stored from wreg
 19068  11A8  0020               	movlb	0	; select bank0
 19069  11A9  00A3               	movwf	setDimmerLights_SwOff@sw
 19070                           
 19071                           ;Dimmer_B1.c: 695: DimmerLights_SelectPointer(sw);
 19072  11AA  0823               	movf	setDimmerLights_SwOff@sw,w
 19073  11AB  319C  2411  3191   	fcall	_DimmerLights_SelectPointer
 19074                           
 19075                           ;Dimmer_B1.c: 697: if (DimmerLights->SwFlag == 1) {
 19076  11AE  0021               	movlb	1	; select bank1
 19077  11AF  084F               	movf	_DimmerLights^(0+128),w
 19078  11B0  0086               	movwf	6
 19079  11B1  3001               	movlw	1	; select bank2/3
 19080  11B2  0087               	movwf	7
 19081  11B3  1C01               	btfss	1,0
 19082  11B4  0008               	return
 19083                           
 19084                           ;Dimmer_B1.c: 698: DimmerLights->SwFlag = 0;
 19085  11B5  084F               	movf	_DimmerLights^(0+128),w
 19086  11B6  0086               	movwf	6
 19087  11B7  3001               	movlw	1	; select bank2/3
 19088  11B8  0087               	movwf	7
 19089  11B9  1001               	bcf	1,0
 19090                           
 19091                           ;Dimmer_B1.c: 699: if (DimmerLights->Status == 1) {
 19092  11BA  0A4F               	incf	_DimmerLights^(0+128),w
 19093  11BB  0086               	movwf	6
 19094  11BC  3001               	movlw	1	; select bank2/3
 19095  11BD  0087               	movwf	7
 19096  11BE  1C01               	btfss	1,0
 19097  11BF  29D6               	goto	l6657
 19098                           
 19099                           ;Dimmer_B1.c: 700: if (DimmerLights->DimmingSwFlag == 1) {
 19100  11C0  084F               	movf	_DimmerLights^(0+128),w
 19101  11C1  0086               	movwf	6
 19102  11C2  3001               	movlw	1	; select bank2/3
 19103  11C3  0087               	movwf	7
 19104  11C4  1D81               	btfss	1,3
 19105  11C5  0008               	return
 19106                           
 19107                           ;Dimmer_B1.c: 701: DimmerLights->DimmingSwFlag = 0;
 19108  11C6  084F               	movf	_DimmerLights^(0+128),w
 19109  11C7  0086               	movwf	6
 19110  11C8  3001               	movlw	1	; select bank2/3
 19111  11C9  0087               	movwf	7
 19112  11CA  1181               	bcf	1,3
 19113                           
 19114                           ;Dimmer_B1.c: 703: DimmerLights->DimmingTrigger = 1;
 19115  11CB  084F               	movf	_DimmerLights^(0+128),w
 19116  11CC  0086               	movwf	6
 19117  11CD  3001               	movlw	1	; select bank2/3
 19118  11CE  0087               	movwf	7
 19119  11CF  1601               	bsf	1,4
 19120                           
 19121                           ;Dimmer_B1.c: 704: DimmerLights->DimmingSwitch = 0;
 19122  11D0  084F               	movf	_DimmerLights^(0+128),w
 19123  11D1  0086               	movwf	6
 19124  11D2  3001               	movlw	1	; select bank2/3
 19125  11D3  0087               	movwf	7
 19126  11D4  1281               	bcf	1,5
 19127                           
 19128                           ;Dimmer_B1.c: 705: }
 19129                           ;Dimmer_B1.c: 706: } else {
 19130  11D5  0008               	return
 19131  11D6                     l6657:	
 19132                           
 19133                           ;Dimmer_B1.c: 708: DimmerLights->Trigger = 1;
 19134  11D6  084F               	movf	_DimmerLights^(0+128),w
 19135  11D7  0086               	movwf	6
 19136  11D8  3001               	movlw	1	; select bank2/3
 19137  11D9  0087               	movwf	7
 19138  11DA  1481               	bsf	1,1
 19139                           
 19140                           ;Dimmer_B1.c: 709: DimmerLights->Switch = 0;
 19141  11DB  084F               	movf	_DimmerLights^(0+128),w
 19142  11DC  0086               	movwf	6
 19143  11DD  3001               	movlw	1	; select bank2/3
 19144  11DE  0087               	movwf	7
 19145  11DF  1101               	bcf	1,2
 19146  11E0  0008               	return
 19147  11E1                     __end_of_setDimmerLights_SwOff:	
 19148                           
 19149                           	psect	text130
 19150  1A84                     __ptext130:	
 19151 ;; *************** function _getDimmerLights_Status *****************
 19152 ;; Defined at:
 19153 ;;		line 1006 in file "../src/Dimmer_B1.c"
 19154 ;; Parameters:    Size  Location     Type
 19155 ;;  lights          1    wreg     unsigned char 
 19156 ;; Auto vars:     Size  Location     Type
 19157 ;;  lights          1    3[BANK0 ] unsigned char 
 19158 ;;  status          1    4[BANK0 ] unsigned char 
 19159 ;; Return value:  Size  Location     Type
 19160 ;;                  1    wreg      unsigned char 
 19161 ;; Registers used:
 19162 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19163 ;; Tracked objects:
 19164 ;;		On entry : 0/0
 19165 ;;		On exit  : 0/0
 19166 ;;		Unchanged: 0/0
 19167 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19169 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19171 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19172 ;;Total ram usage:        2 bytes
 19173 ;; Hardware stack levels used:    1
 19174 ;; Hardware stack levels required when called:    6
 19175 ;; This function calls:
 19176 ;;		_DimmerLights_SelectPointer
 19177 ;; This function is called by:
 19178 ;;		_DlyOff_Main
 19179 ;;		_setControl_Lights_Table
 19180 ;;		_setRFSW_Control
 19181 ;;		_setRFSW_AdjControl
 19182 ;;		_Exception_Main
 19183 ;; This function uses a non-reentrant model
 19184 ;;
 19185                           
 19186                           
 19187                           ;psect for function _getDimmerLights_Status
 19188  1A84                     _getDimmerLights_Status:	
 19189                           
 19190                           ;incstack = 0
 19191                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 19192                           ;getDimmerLights_Status@lights stored from wreg
 19193  1A84  0020               	movlb	0	; select bank0
 19194  1A85  00A3               	movwf	getDimmerLights_Status@lights
 19195                           
 19196                           ;Dimmer_B1.c: 1007: DimmerLights_SelectPointer(lights);
 19197  1A86  0823               	movf	getDimmerLights_Status@lights,w
 19198  1A87  319C  2411         	fcall	_DimmerLights_SelectPointer
 19199                           
 19200                           ;Dimmer_B1.c: 1008: char status = DimmerLights->Status == 1 ? 1 : 0;
 19201  1A89  0021               	movlb	1	; select bank1
 19202  1A8A  0A4F               	incf	_DimmerLights^(0+128),w
 19203  1A8B  0086               	movwf	6
 19204  1A8C  3001               	movlw	1	; select bank2/3
 19205  1A8D  0087               	movwf	7
 19206  1A8E  3000               	movlw	0
 19207  1A8F  1801               	btfsc	1,0
 19208  1A90  3001               	movlw	1
 19209  1A91  0020               	movlb	0	; select bank0
 19210  1A92  00A4               	movwf	getDimmerLights_Status@status
 19211                           
 19212                           ;Dimmer_B1.c: 1009: return status;
 19213  1A93  0824               	movf	getDimmerLights_Status@status,w
 19214  1A94  0008               	return
 19215  1A95                     __end_of_getDimmerLights_Status:	
 19216                           
 19217                           	psect	text131
 19218  1C11                     __ptext131:	
 19219 ;; *************** function _DimmerLights_SelectPointer *****************
 19220 ;; Defined at:
 19221 ;;		line 576 in file "../src/Dimmer_B1.c"
 19222 ;; Parameters:    Size  Location     Type
 19223 ;;  lights          1    wreg     unsigned char 
 19224 ;; Auto vars:     Size  Location     Type
 19225 ;;  lights          1    2[BANK0 ] unsigned char 
 19226 ;; Return value:  Size  Location     Type
 19227 ;;		None               void
 19228 ;; Registers used:
 19229 ;;		wreg
 19230 ;; Tracked objects:
 19231 ;;		On entry : 0/0
 19232 ;;		On exit  : 0/0
 19233 ;;		Unchanged: 0/0
 19234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19235 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19236 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19237 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19238 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19239 ;;Total ram usage:        2 bytes
 19240 ;; Hardware stack levels used:    1
 19241 ;; Hardware stack levels required when called:    5
 19242 ;; This function calls:
 19243 ;;		Nothing
 19244 ;; This function is called by:
 19245 ;;		_setDimmerLights_SwOn
 19246 ;;		_setDimmerLights_SwOff
 19247 ;;		_setDimmerLights_DimmingOn
 19248 ;;		_setDimmerLights_Main
 19249 ;;		_getDimmerLights_Status
 19250 ;;		_setDimmerLights_DimmingRun
 19251 ;;		_setDimmerLights_Status
 19252 ;; This function uses a non-reentrant model
 19253 ;;
 19254                           
 19255                           
 19256                           ;psect for function _DimmerLights_SelectPointer
 19257  1C11                     _DimmerLights_SelectPointer:	
 19258                           
 19259                           ;incstack = 0
 19260                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 19261                           ;DimmerLights_SelectPointer@lights stored from wreg
 19262  1C11  0020               	movlb	0	; select bank0
 19263  1C12  00A2               	movwf	DimmerLights_SelectPointer@lights
 19264                           
 19265                           ;Dimmer_B1.c: 578: if (lights == 1) {
 19266  1C13  0822               	movf	DimmerLights_SelectPointer@lights,w
 19267  1C14  3A01               	xorlw	1
 19268  1C15  1D03               	skipz
 19269  1C16  2C1D               	goto	l6329
 19270                           
 19271                           ;Dimmer_B1.c: 579: DimmerLights = &DimmerLights1;
 19272  1C17  3068               	movlw	_DimmerLights1& (0+255)
 19273  1C18  00A1               	movwf	??_DimmerLights_SelectPointer
 19274  1C19  0821               	movf	??_DimmerLights_SelectPointer,w
 19275  1C1A  0021               	movlb	1	; select bank1
 19276  1C1B  00CF               	movwf	_DimmerLights^(0+128)
 19277                           
 19278                           ;Dimmer_B1.c: 580: }
 19279  1C1C  0008               	return
 19280  1C1D                     l6329:	
 19281                           
 19282                           ;Dimmer_B1.c: 583: else if (lights == 2) {
 19283  1C1D  0020               	movlb	0	; select bank0
 19284  1C1E  0822               	movf	DimmerLights_SelectPointer@lights,w
 19285  1C1F  3A02               	xorlw	2
 19286  1C20  1D03               	skipz
 19287  1C21  0008               	return
 19288                           
 19289                           ;Dimmer_B1.c: 584: DimmerLights = &DimmerLights2;
 19290  1C22  30D0               	movlw	_DimmerLights2& (0+255)
 19291  1C23  00A1               	movwf	??_DimmerLights_SelectPointer
 19292  1C24  0821               	movf	??_DimmerLights_SelectPointer,w
 19293  1C25  0021               	movlb	1	; select bank1
 19294  1C26  00CF               	movwf	_DimmerLights^(0+128)
 19295  1C27  0008               	return
 19296  1C28                     __end_of_DimmerLights_SelectPointer:	
 19297                           
 19298                           	psect	text132
 19299  1997                     __ptext132:	
 19300 ;; *************** function _DelayOff_Initialization *****************
 19301 ;; Defined at:
 19302 ;;		line 26 in file "../src/DelayOff_B1.c"
 19303 ;; Parameters:    Size  Location     Type
 19304 ;;		None
 19305 ;; Auto vars:     Size  Location     Type
 19306 ;;		None
 19307 ;; Return value:  Size  Location     Type
 19308 ;;		None               void
 19309 ;; Registers used:
 19310 ;;		wreg, status,2, status,0, pclath, cstack
 19311 ;; Tracked objects:
 19312 ;;		On entry : 0/0
 19313 ;;		On exit  : 0/0
 19314 ;;		Unchanged: 0/0
 19315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19319 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19320 ;;Total ram usage:        0 bytes
 19321 ;; Hardware stack levels used:    1
 19322 ;; Hardware stack levels required when called:    7
 19323 ;; This function calls:
 19324 ;;		_DlyOff_Initialization
 19325 ;; This function is called by:
 19326 ;;		_main
 19327 ;; This function uses a non-reentrant model
 19328 ;;
 19329                           
 19330                           
 19331                           ;psect for function _DelayOff_Initialization
 19332  1997                     _DelayOff_Initialization:	
 19333                           
 19334                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 19335                           
 19336                           ;incstack = 0
 19337                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 19338  1997  3001               	movlw	1
 19339  1998  3199  217E  3199   	fcall	_DlyOff_Initialization
 19340                           
 19341                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 19342  199B  3002               	movlw	2
 19343  199C  3199  217E         	fcall	_DlyOff_Initialization
 19344  199E  0008               	return
 19345  199F                     __end_of_DelayOff_Initialization:	
 19346                           
 19347                           	psect	text133
 19348  197E                     __ptext133:	
 19349 ;; *************** function _DlyOff_Initialization *****************
 19350 ;; Defined at:
 19351 ;;		line 56 in file "../src/DelayOff_B1.c"
 19352 ;; Parameters:    Size  Location     Type
 19353 ;;  sw              1    wreg     unsigned char 
 19354 ;; Auto vars:     Size  Location     Type
 19355 ;;  sw              1    3[BANK0 ] unsigned char 
 19356 ;; Return value:  Size  Location     Type
 19357 ;;		None               void
 19358 ;; Registers used:
 19359 ;;		wreg, status,2, status,0, pclath, cstack
 19360 ;; Tracked objects:
 19361 ;;		On entry : 0/0
 19362 ;;		On exit  : 0/0
 19363 ;;		Unchanged: 0/0
 19364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19366 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19368 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19369 ;;Total ram usage:        1 bytes
 19370 ;; Hardware stack levels used:    1
 19371 ;; Hardware stack levels required when called:    6
 19372 ;; This function calls:
 19373 ;;		_DelayOffPointSelect
 19374 ;; This function is called by:
 19375 ;;		_DelayOff_Initialization
 19376 ;; This function uses a non-reentrant model
 19377 ;;
 19378                           
 19379                           
 19380                           ;psect for function _DlyOff_Initialization
 19381  197E                     _DlyOff_Initialization:	
 19382                           
 19383                           ;incstack = 0
 19384                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 19385                           ;DlyOff_Initialization@sw stored from wreg
 19386  197E  0020               	movlb	0	; select bank0
 19387  197F  00A3               	movwf	DlyOff_Initialization@sw
 19388                           
 19389                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 19390  1980  0823               	movf	DlyOff_Initialization@sw,w
 19391  1981  319B  23FA         	fcall	_DelayOffPointSelect
 19392  1983  0008               	return
 19393  1984                     __end_of_DlyOff_Initialization:	
 19394                           
 19395                           	psect	text134
 19396  1BFA                     __ptext134:	
 19397 ;; *************** function _DelayOffPointSelect *****************
 19398 ;; Defined at:
 19399 ;;		line 7 in file "../src/DelayOff_B1.c"
 19400 ;; Parameters:    Size  Location     Type
 19401 ;;  sw              1    wreg     unsigned char 
 19402 ;; Auto vars:     Size  Location     Type
 19403 ;;  sw              1    2[BANK0 ] unsigned char 
 19404 ;; Return value:  Size  Location     Type
 19405 ;;		None               void
 19406 ;; Registers used:
 19407 ;;		wreg
 19408 ;; Tracked objects:
 19409 ;;		On entry : 0/0
 19410 ;;		On exit  : 0/0
 19411 ;;		Unchanged: 0/0
 19412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19414 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19415 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19416 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19417 ;;Total ram usage:        2 bytes
 19418 ;; Hardware stack levels used:    1
 19419 ;; Hardware stack levels required when called:    5
 19420 ;; This function calls:
 19421 ;;		Nothing
 19422 ;; This function is called by:
 19423 ;;		_DlyOff_Initialization
 19424 ;;		_DlyOff_Main
 19425 ;;		_setDelayOff_GO
 19426 ;;		_getDelayOff_GO
 19427 ;; This function uses a non-reentrant model
 19428 ;;
 19429                           
 19430                           
 19431                           ;psect for function _DelayOffPointSelect
 19432  1BFA                     _DelayOffPointSelect:	
 19433                           
 19434                           ;incstack = 0
 19435                           ; Regs used in _DelayOffPointSelect: [wreg]
 19436                           ;DelayOffPointSelect@sw stored from wreg
 19437  1BFA  0020               	movlb	0	; select bank0
 19438  1BFB  00A2               	movwf	DelayOffPointSelect@sw
 19439                           
 19440                           ;DelayOff_B1.c: 9: if (sw == 1) {
 19441  1BFC  0822               	movf	DelayOffPointSelect@sw,w
 19442  1BFD  3A01               	xorlw	1
 19443  1BFE  1D03               	skipz
 19444  1BFF  2C06               	goto	l6319
 19445                           
 19446                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 19447  1C00  30D8               	movlw	_DlySw1& (0+255)
 19448  1C01  00A1               	movwf	??_DelayOffPointSelect
 19449  1C02  0821               	movf	??_DelayOffPointSelect,w
 19450  1C03  0021               	movlb	1	; select bank1
 19451  1C04  00CD               	movwf	_DelayOff^(0+128)
 19452                           
 19453                           ;DelayOff_B1.c: 11: }
 19454  1C05  0008               	return
 19455  1C06                     l6319:	
 19456                           
 19457                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 19458  1C06  0020               	movlb	0	; select bank0
 19459  1C07  0822               	movf	DelayOffPointSelect@sw,w
 19460  1C08  3A02               	xorlw	2
 19461  1C09  1D03               	skipz
 19462  1C0A  0008               	return
 19463                           
 19464                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 19465  1C0B  30DD               	movlw	_DlySw2& (0+255)
 19466  1C0C  00A1               	movwf	??_DelayOffPointSelect
 19467  1C0D  0821               	movf	??_DelayOffPointSelect,w
 19468  1C0E  0021               	movlb	1	; select bank1
 19469  1C0F  00CD               	movwf	_DelayOff^(0+128)
 19470  1C10  0008               	return
 19471  1C11                     __end_of_DelayOffPointSelect:	
 19472                           
 19473                           	psect	text135
 19474  1364                     __ptext135:	
 19475 ;; *************** function _Buzzer_Main *****************
 19476 ;; Defined at:
 19477 ;;		line 46 in file "../src/Buzzer_B1.c"
 19478 ;; Parameters:    Size  Location     Type
 19479 ;;		None
 19480 ;; Auto vars:     Size  Location     Type
 19481 ;;		None
 19482 ;; Return value:  Size  Location     Type
 19483 ;;		None               void
 19484 ;; Registers used:
 19485 ;;		wreg, status,2, status,0
 19486 ;; Tracked objects:
 19487 ;;		On entry : 0/0
 19488 ;;		On exit  : 0/0
 19489 ;;		Unchanged: 0/0
 19490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19491 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19492 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19493 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19494 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19495 ;;Total ram usage:        1 bytes
 19496 ;; Hardware stack levels used:    1
 19497 ;; Hardware stack levels required when called:    5
 19498 ;; This function calls:
 19499 ;;		Nothing
 19500 ;; This function is called by:
 19501 ;;		_main
 19502 ;; This function uses a non-reentrant model
 19503 ;;
 19504                           
 19505                           
 19506                           ;psect for function _Buzzer_Main
 19507  1364                     _Buzzer_Main:	
 19508                           
 19509                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 19510                           
 19511                           ;incstack = 0
 19512                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 19513  1364  0022               	movlb	2	; select bank2
 19514  1365  1CAD               	btfss	_Buz1^(0+256),1
 19515  1366  0008               	return
 19516                           
 19517                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 19518  1367  3001               	movlw	1
 19519  1368  07AE               	addwf	(_Buz1^(0+256)+1),f
 19520  1369  3000               	movlw	0
 19521  136A  3DAF               	addwfc	((_Buz1+1)^(0+256)+1),f
 19522                           
 19523                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 19524  136B  0834               	movf	((_Buz1+1)^(0+256)+6),w
 19525  136C  022F               	subwf	((_Buz1+1)^(0+256)+1),w
 19526  136D  1D03               	skipz
 19527  136E  2B71               	goto	u8785
 19528  136F  0833               	movf	(_Buz1^(0+256)+6),w
 19529  1370  022E               	subwf	(_Buz1^(0+256)+1),w
 19530  1371                     u8785:	
 19531  1371  1C03               	skipc
 19532  1372  0008               	return
 19533                           
 19534                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 19535  1373  01AE               	clrf	(_Buz1^(0+256)+1)
 19536  1374  01AF               	clrf	((_Buz1+1)^(0+256)+1)
 19537                           
 19538                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 19539  1375  12AD               	bcf	_Buz1^(0+256),5
 19540  1376  0020               	movlb	0	; select bank0
 19541  1377  1D8D               	btfss	13,3	;volatile
 19542  1378  2B7B               	goto	l8381
 19543  1379  0022               	movlb	2	; select bank2
 19544  137A  16AD               	bsf	_Buz1^(0+256),5
 19545  137B                     l8381:	
 19546                           
 19547                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 19548  137B  0022               	movlb	2	; select bank2
 19549  137C  1AAD               	btfsc	_Buz1^(0+256),5
 19550  137D  2BA7               	goto	l108
 19551                           
 19552                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 19553  137E  08B0               	movf	(_Buz1^(0+256)+3),f
 19554  137F  1D03               	skipz
 19555  1380  2BA3               	goto	l109
 19556                           
 19557                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 19558  1381  1DAD               	btfss	_Buz1^(0+256),3
 19559  1382  2B91               	goto	l110
 19560                           
 19561                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 19562  1383  11AD               	bcf	_Buz1^(0+256),3
 19563                           
 19564                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 19565  1384  0831               	movf	(_Buz1^(0+256)+4),w
 19566  1385  0020               	movlb	0	; select bank0
 19567  1386  00A1               	movwf	??_Buzzer_Main
 19568  1387  0821               	movf	??_Buzzer_Main,w
 19569  1388  0022               	movlb	2	; select bank2
 19570  1389  00B0               	movwf	(_Buz1^(0+256)+3)
 19571                           
 19572                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 19573  138A  0836               	movf	((_Buz1+1)^(0+256)+8),w
 19574  138B  01B4               	clrf	((_Buz1+1)^(0+256)+6)
 19575  138C  07B4               	addwf	((_Buz1+1)^(0+256)+6),f
 19576  138D  0835               	movf	(_Buz1^(0+256)+8),w
 19577  138E  01B3               	clrf	(_Buz1^(0+256)+6)
 19578  138F  07B3               	addwf	(_Buz1^(0+256)+6),f
 19579                           
 19580                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 19581  1390  0008               	return
 19582  1391                     l110:	
 19583  1391  1E2D               	btfss	_Buz1^(0+256),4
 19584  1392  2BA1               	goto	l112
 19585                           
 19586                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 19587  1393  122D               	bcf	_Buz1^(0+256),4
 19588                           
 19589                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 19590  1394  0832               	movf	(_Buz1^(0+256)+5),w
 19591  1395  0020               	movlb	0	; select bank0
 19592  1396  00A1               	movwf	??_Buzzer_Main
 19593  1397  0821               	movf	??_Buzzer_Main,w
 19594  1398  0022               	movlb	2	; select bank2
 19595  1399  00B0               	movwf	(_Buz1^(0+256)+3)
 19596                           
 19597                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 19598  139A  0838               	movf	((_Buz1+1)^(0+256)+10),w
 19599  139B  01B4               	clrf	((_Buz1+1)^(0+256)+6)
 19600  139C  07B4               	addwf	((_Buz1+1)^(0+256)+6),f
 19601  139D  0837               	movf	(_Buz1^(0+256)+10),w
 19602  139E  01B3               	clrf	(_Buz1^(0+256)+6)
 19603  139F  07B3               	addwf	(_Buz1^(0+256)+6),f
 19604                           
 19605                           ;Buzzer_B1.c: 62: } else {
 19606  13A0  0008               	return
 19607  13A1                     l112:	
 19608                           
 19609                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 19610  13A1  10AD               	bcf	_Buz1^(0+256),1
 19611                           
 19612                           ;Buzzer_B1.c: 64: }
 19613                           ;Buzzer_B1.c: 65: } else {
 19614  13A2  0008               	return
 19615  13A3                     l109:	
 19616                           
 19617                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 19618  13A3  16AD               	bsf	_Buz1^(0+256),5
 19619                           
 19620                           ;Buzzer_B1.c: 68: RB3 = 1;
 19621  13A4  0020               	movlb	0	; select bank0
 19622  13A5  158D               	bsf	13,3	;volatile
 19623                           
 19624                           ;Buzzer_B1.c: 69: }
 19625                           ;Buzzer_B1.c: 70: } else {
 19626  13A6  0008               	return
 19627  13A7                     l108:	
 19628                           
 19629                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 19630  13A7  12AD               	bcf	_Buz1^(0+256),5
 19631                           
 19632                           ;Buzzer_B1.c: 73: RB3 = 0;
 19633  13A8  0020               	movlb	0	; select bank0
 19634  13A9  118D               	bcf	13,3	;volatile
 19635                           
 19636                           ;Buzzer_B1.c: 75: Buz1.Count--;
 19637  13AA  3001               	movlw	1
 19638  13AB  0022               	movlb	2	; select bank2
 19639  13AC  02B0               	subwf	(_Buz1^(0+256)+3),f
 19640  13AD  0008               	return
 19641  13AE                     __end_of_Buzzer_Main:	
 19642                           
 19643                           	psect	text136
 19644  1953                     __ptext136:	
 19645 ;; *************** function _Buzzer_Initialization *****************
 19646 ;; Defined at:
 19647 ;;		line 11 in file "../src/Buzzer_B1.c"
 19648 ;; Parameters:    Size  Location     Type
 19649 ;;		None
 19650 ;; Auto vars:     Size  Location     Type
 19651 ;;		None
 19652 ;; Return value:  Size  Location     Type
 19653 ;;		None               void
 19654 ;; Registers used:
 19655 ;;		None
 19656 ;; Tracked objects:
 19657 ;;		On entry : 0/0
 19658 ;;		On exit  : 0/0
 19659 ;;		Unchanged: 0/0
 19660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19662 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19663 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19664 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19665 ;;Total ram usage:        0 bytes
 19666 ;; Hardware stack levels used:    1
 19667 ;; Hardware stack levels required when called:    5
 19668 ;; This function calls:
 19669 ;;		Nothing
 19670 ;; This function is called by:
 19671 ;;		_main
 19672 ;; This function uses a non-reentrant model
 19673 ;;
 19674                           
 19675                           
 19676                           ;psect for function _Buzzer_Initialization
 19677  1953                     _Buzzer_Initialization:	
 19678                           
 19679                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 19680                           
 19681                           ;incstack = 0
 19682                           ; Regs used in _Buzzer_Initialization: []
 19683  1953  0022               	movlb	2	; select bank2
 19684  1954  142D               	bsf	_Buz1^(0+256),0
 19685  1955  0008               	return
 19686  1956                     __end_of_Buzzer_Initialization:	
 19687                           
 19688                           	psect	intentry
 19689  0004                     __pintentry:	
 19690 ;; *************** function _ISR *****************
 19691 ;; Defined at:
 19692 ;;		line 116 in file "../src/MCU_B1.c"
 19693 ;; Parameters:    Size  Location     Type
 19694 ;;		None
 19695 ;; Auto vars:     Size  Location     Type
 19696 ;;		None
 19697 ;; Return value:  Size  Location     Type
 19698 ;;		None               void
 19699 ;; Registers used:
 19700 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19701 ;; Tracked objects:
 19702 ;;		On entry : 0/0
 19703 ;;		On exit  : 0/0
 19704 ;;		Unchanged: 0/0
 19705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19708 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19709 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19710 ;;Total ram usage:        1 bytes
 19711 ;; Hardware stack levels used:    1
 19712 ;; Hardware stack levels required when called:    4
 19713 ;; This function calls:
 19714 ;;		_IOC_ISR
 19715 ;;		_TMR1_ISR
 19716 ;; This function is called by:
 19717 ;;		Interrupt level 1
 19718 ;; This function uses a non-reentrant model
 19719 ;;
 19720                           
 19721  0004                     _ISR:	
 19722                           
 19723                           ;incstack = 0
 19724                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19725  0004  147E               	bsf	126,0	;set compiler interrupt flag
 19726  0005  3180               	pagesel	$
 19727  0006  0020               	movlb	0	; select bank0
 19728  0007  087F               	movf	127,w
 19729  0008  00A0               	movwf	??_ISR
 19730                           
 19731                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
 19732  0009  0021               	movlb	1	; select bank1
 19733  000A  1C11               	btfss	17,0	;volatile
 19734  000B  2813               	goto	i1l1383
 19735  000C  0020               	movlb	0	; select bank0
 19736  000D  1C11               	btfss	17,0	;volatile
 19737  000E  2813               	goto	i1l1383
 19738                           
 19739                           ;MCU_B1.c: 126: TMR1_ISR();
 19740  000F  319E  263C  3180   	fcall	_TMR1_ISR
 19741                           
 19742                           ;MCU_B1.c: 127: }
 19743  0012  281B               	goto	i1l1386
 19744  0013                     i1l1383:	
 19745                           
 19746                           ;MCU_B1.c: 138: else if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 19747  0013  198B               	btfsc	11,3	;volatile
 19748  0014  1C0B               	btfss	11,0	;volatile
 19749  0015  281B               	goto	i1l1386
 19750  0016  0027               	movlb	7	; select bank7
 19751  0017  1D16               	btfss	22,2	;volatile
 19752  0018  281B               	goto	i1l1386
 19753                           
 19754                           ;MCU_B1.c: 139: IOC_ISR();
 19755  0019  319A  2217         	fcall	_IOC_ISR
 19756  001B                     i1l1386:	
 19757                           ;MCU_B1.c: 140: }
 19758                           ;MCU_B1.c: 148: return;
 19759                           
 19760  001B  0020               	movlb	0	; select bank0
 19761  001C  0820               	movf	??_ISR,w
 19762  001D  00FF               	movwf	127
 19763  001E  107E               	bcf	126,0	;clear compiler interrupt flag
 19764  001F  0009               	retfie
 19765  0020                     __end_of_ISR:	
 19766                           
 19767                           	psect	text138
 19768  1E3C                     __ptext138:	
 19769 ;; *************** function _TMR1_ISR *****************
 19770 ;; Defined at:
 19771 ;;		line 236 in file "../src/MCU_B1.c"
 19772 ;; Parameters:    Size  Location     Type
 19773 ;;		None
 19774 ;; Auto vars:     Size  Location     Type
 19775 ;;		None
 19776 ;; Return value:  Size  Location     Type
 19777 ;;		None               void
 19778 ;; Registers used:
 19779 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19780 ;; Tracked objects:
 19781 ;;		On entry : 0/0
 19782 ;;		On exit  : 0/0
 19783 ;;		Unchanged: 0/0
 19784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19785 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19786 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19787 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19788 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19789 ;;Total ram usage:        0 bytes
 19790 ;; Hardware stack levels used:    1
 19791 ;; Hardware stack levels required when called:    1
 19792 ;; This function calls:
 19793 ;;		_DimmerLights_TMR_1
 19794 ;;		_DimmerLights_TMR_2
 19795 ;; This function is called by:
 19796 ;;		_ISR
 19797 ;; This function uses a non-reentrant model
 19798 ;;
 19799                           
 19800                           
 19801                           ;psect for function _TMR1_ISR
 19802  1E3C                     _TMR1_ISR:	
 19803                           
 19804                           ;MCU_B1.c: 238: TMR1H = (int)((65536-1480)/256);
 19805                           
 19806                           ;incstack = 0
 19807                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19808  1E3C  30FA               	movlw	250
 19809  1E3D  0020               	movlb	0	; select bank0
 19810  1E3E  0097               	movwf	23	;volatile
 19811                           
 19812                           ;MCU_B1.c: 239: TMR1L = (int)((65536-1480)%256);
 19813  1E3F  3038               	movlw	56
 19814  1E40  0096               	movwf	22	;volatile
 19815                           
 19816                           ;MCU_B1.c: 240: TMR1IF = 0;
 19817  1E41  1011               	bcf	17,0	;volatile
 19818                           
 19819                           ;MCU_B1.c: 257: DimmerLights_TMR_1();
 19820  1E42  3188  2016  319E   	fcall	_DimmerLights_TMR_1
 19821                           
 19822                           ;MCU_B1.c: 262: DimmerLights_TMR_2();
 19823  1E45  3188  207F  319E   	fcall	_DimmerLights_TMR_2
 19824                           
 19825                           ;MCU_B1.c: 271: Timer1.Count++;
 19826  1E48  3001               	movlw	1
 19827  1E49  0021               	movlb	1	; select bank1
 19828  1E4A  07C7               	addwf	(_Timer1^(0+128)+1),f
 19829  1E4B  3000               	movlw	0
 19830  1E4C  3DC8               	addwfc	((_Timer1+1)^(0+128)+1),f
 19831                           
 19832                           ;MCU_B1.c: 272: if (Timer1.Count == (int)(20*10)) {
 19833  1E4D  3001               	movlw	1
 19834  1E4E  3EC6               	addlw	_Timer1& (0+255)
 19835  1E4F  0086               	movwf	6
 19836  1E50  0187               	clrf	7
 19837  1E51  3F40               	moviw [0]fsr1
 19838  1E52  3AC8               	xorlw	200
 19839  1E53  1D03               	skipz
 19840  1E54  2E57               	goto	u888_25
 19841  1E55  3F41               	moviw [1]fsr1
 19842  1E56  3A00               	xorlw	0
 19843  1E57                     u888_25:	
 19844  1E57  1D03               	skipz
 19845  1E58  0008               	return
 19846                           
 19847                           ;MCU_B1.c: 273: Timer1.Count = 0;
 19848  1E59  01C7               	clrf	(_Timer1^(0+128)+1)
 19849  1E5A  01C8               	clrf	((_Timer1+1)^(0+128)+1)
 19850                           
 19851                           ;MCU_B1.c: 274: Timer1.Timeout = 1;
 19852  1E5B  1446               	bsf	_Timer1^(0+128),0
 19853  1E5C  0008               	return
 19854  1E5D                     __end_of_TMR1_ISR:	
 19855                           
 19856                           	psect	text139
 19857  087F                     __ptext139:	
 19858 ;; *************** function _DimmerLights_TMR_2 *****************
 19859 ;; Defined at:
 19860 ;;		line 1481 in file "../src/Dimmer_B1.c"
 19861 ;; Parameters:    Size  Location     Type
 19862 ;;		None
 19863 ;; Auto vars:     Size  Location     Type
 19864 ;;  count           1    1[COMMON] unsigned char 
 19865 ;; Return value:  Size  Location     Type
 19866 ;;		None               void
 19867 ;; Registers used:
 19868 ;;		wreg, status,2, status,0
 19869 ;; Tracked objects:
 19870 ;;		On entry : 0/0
 19871 ;;		On exit  : 0/0
 19872 ;;		Unchanged: 0/0
 19873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19875 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19876 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19877 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19878 ;;Total ram usage:        2 bytes
 19879 ;; Hardware stack levels used:    1
 19880 ;; This function calls:
 19881 ;;		Nothing
 19882 ;; This function is called by:
 19883 ;;		_TMR1_ISR
 19884 ;; This function uses a non-reentrant model
 19885 ;;
 19886                           
 19887                           
 19888                           ;psect for function _DimmerLights_TMR_2
 19889  087F                     _DimmerLights_TMR_2:	
 19890                           
 19891                           ;Dimmer_B1.c: 1482: char count = 65;
 19892                           
 19893                           ;incstack = 0
 19894                           ; Regs used in _DimmerLights_TMR_2: [wreg+status,2+status,0]
 19895  087F  3041               	movlw	65
 19896  0880  00F0               	movwf	??_DimmerLights_TMR_2
 19897  0881  0870               	movf	??_DimmerLights_TMR_2,w
 19898  0882  00F1               	movwf	DimmerLights_TMR_2@count
 19899                           
 19900                           ;Dimmer_B1.c: 1494: if (DimmerIntr2.Start == 1) {
 19901  0883  0021               	movlb	1	; select bank1
 19902  0884  1D3A               	btfss	_DimmerIntr2^(0+128),2
 19903  0885  2890               	goto	i1l7897
 19904                           
 19905                           ;Dimmer_B1.c: 1495: DimmerIntr2.Count++;
 19906  0886  3001               	movlw	1
 19907  0887  00F0               	movwf	??_DimmerLights_TMR_2
 19908  0888  0870               	movf	??_DimmerLights_TMR_2,w
 19909  0889  07BC               	addwf	(_DimmerIntr2^(0+128)+2),f
 19910                           
 19911                           ;Dimmer_B1.c: 1496: if (DimmerIntr2.Count >= count) {
 19912  088A  0871               	movf	DimmerLights_TMR_2@count,w
 19913  088B  023C               	subwf	(_DimmerIntr2^(0+128)+2),w
 19914  088C  1C03               	skipc
 19915  088D  2890               	goto	i1l7897
 19916                           
 19917                           ;Dimmer_B1.c: 1497: DimmerIntr2.Count = 0;
 19918  088E  01BC               	clrf	(_DimmerIntr2^(0+128)+2)
 19919                           
 19920                           ;Dimmer_B1.c: 1498: DimmerIntr2.Start = 0;
 19921  088F  113A               	bcf	_DimmerIntr2^(0+128),2
 19922  0890                     i1l7897:	
 19923                           
 19924                           ;Dimmer_B1.c: 1499: }
 19925                           ;Dimmer_B1.c: 1500: }
 19926                           ;Dimmer_B1.c: 1504: if (DimmerIntr2.Count == 5) {
 19927  0890  083C               	movf	(_DimmerIntr2^(0+128)+2),w
 19928  0891  3A05               	xorlw	5
 19929  0892  1903               	btfsc	3,2
 19930                           
 19931                           ;Dimmer_B1.c: 1507: if (DimmerIntr2.ControlStatus == 1) {
 19932  0893  1DBA               	btfss	_DimmerIntr2^(0+128),3
 19933  0894  2897               	goto	i1l7903
 19934                           
 19935                           ;Dimmer_B1.c: 1508: RB4 = 1;
 19936  0895  0020               	movlb	0	; select bank0
 19937  0896  160D               	bsf	13,4	;volatile
 19938  0897                     i1l7903:	
 19939                           
 19940                           ;Dimmer_B1.c: 1510: }
 19941                           ;Dimmer_B1.c: 1511: }
 19942                           ;Dimmer_B1.c: 1515: if (DimmerIntr2.Count == DimmerIntr2.TuneValue2) {
 19943  0897  0021               	movlb	1	; select bank1
 19944  0898  083C               	movf	(_DimmerIntr2^(0+128)+2),w
 19945  0899  0643               	xorwf	(_DimmerIntr2^(0+128)+9),w
 19946  089A  1903               	btfsc	3,2
 19947                           
 19948                           ;Dimmer_B1.c: 1518: if (DimmerIntr2.ControlStatus == 1) {
 19949  089B  1DBA               	btfss	_DimmerIntr2^(0+128),3
 19950  089C  289F               	goto	i1l7909
 19951                           
 19952                           ;Dimmer_B1.c: 1519: RB4 = 0;
 19953  089D  0020               	movlb	0	; select bank0
 19954  089E  120D               	bcf	13,4	;volatile
 19955  089F                     i1l7909:	
 19956                           
 19957                           ;Dimmer_B1.c: 1520: }
 19958                           ;Dimmer_B1.c: 1521: }
 19959                           ;Dimmer_B1.c: 1525: if (DimmerIntr2.Count == DimmerIntr2.TuneValue3) {
 19960  089F  0021               	movlb	1	; select bank1
 19961  08A0  083C               	movf	(_DimmerIntr2^(0+128)+2),w
 19962  08A1  0644               	xorwf	(_DimmerIntr2^(0+128)+10),w
 19963  08A2  1903               	btfsc	3,2
 19964                           
 19965                           ;Dimmer_B1.c: 1528: if (DimmerIntr2.ControlStatus == 1) {
 19966  08A3  1DBA               	btfss	_DimmerIntr2^(0+128),3
 19967  08A4  28A7               	goto	i1l7915
 19968                           
 19969                           ;Dimmer_B1.c: 1529: RB4 = 1;
 19970  08A5  0020               	movlb	0	; select bank0
 19971  08A6  160D               	bsf	13,4	;volatile
 19972  08A7                     i1l7915:	
 19973                           
 19974                           ;Dimmer_B1.c: 1530: }
 19975                           ;Dimmer_B1.c: 1531: }
 19976                           ;Dimmer_B1.c: 1548: if (DimmerIntr2.Count == DimmerIntr2.TuneValue4) {
 19977  08A7  0021               	movlb	1	; select bank1
 19978  08A8  083C               	movf	(_DimmerIntr2^(0+128)+2),w
 19979  08A9  0645               	xorwf	(_DimmerIntr2^(0+128)+11),w
 19980  08AA  1903               	btfsc	3,2
 19981                           
 19982                           ;Dimmer_B1.c: 1550: if (DimmerIntr2.ControlStatus == 1) {
 19983  08AB  1DBA               	btfss	_DimmerIntr2^(0+128),3
 19984  08AC  28AF               	goto	i1l989
 19985                           
 19986                           ;Dimmer_B1.c: 1551: RB4 = 0;
 19987  08AD  0020               	movlb	0	; select bank0
 19988  08AE  120D               	bcf	13,4	;volatile
 19989  08AF                     i1l989:	
 19990                           
 19991                           ;Dimmer_B1.c: 1552: }
 19992                           ;Dimmer_B1.c: 1553: }
 19993                           ;Dimmer_B1.c: 1566: if (DimmerIntr2.Tune == 1) {
 19994  08AF  0021               	movlb	1	; select bank1
 19995  08B0  1CBA               	btfss	_DimmerIntr2^(0+128),1
 19996  08B1  0008               	return
 19997                           
 19998                           ;Dimmer_B1.c: 1567: DimmerIntr2.Tune = 0;
 19999  08B2  10BA               	bcf	_DimmerIntr2^(0+128),1
 20000                           
 20001                           ;Dimmer_B1.c: 1568: DimmerIntr2.TuneTime++;
 20002  08B3  3001               	movlw	1
 20003  08B4  00F0               	movwf	??_DimmerLights_TMR_2
 20004  08B5  0870               	movf	??_DimmerLights_TMR_2,w
 20005  08B6  07BD               	addwf	(_DimmerIntr2^(0+128)+3),f
 20006                           
 20007                           ;Dimmer_B1.c: 1569: if (DimmerIntr2.TuneTime >= DimmerIntr2.TuneTimeValue) {
 20008  08B7  083E               	movf	(_DimmerIntr2^(0+128)+4),w
 20009  08B8  023D               	subwf	(_DimmerIntr2^(0+128)+3),w
 20010  08B9  1C03               	skipc
 20011  08BA  0008               	return
 20012                           
 20013                           ;Dimmer_B1.c: 1570: DimmerIntr2.TuneTime = 0;
 20014  08BB  01BD               	clrf	(_DimmerIntr2^(0+128)+3)
 20015                           
 20016                           ;Dimmer_B1.c: 1571: if (DimmerIntr2.Dimming_Sw == 1) {
 20017  08BC  1E3A               	btfss	_DimmerIntr2^(0+128),4
 20018  08BD  28D4               	goto	i1l993
 20019                           
 20020                           ;Dimmer_B1.c: 1572: if (DimmerIntr2.Dimming_Status == 0) {
 20021  08BE  1ABA               	btfsc	_DimmerIntr2^(0+128),5
 20022  08BF  28CB               	goto	i1l7937
 20023                           
 20024                           ;Dimmer_B1.c: 1573: if (DimmerIntr2.DimmingValue < ((char)(65*0.65))) {
 20025  08C0  302A               	movlw	42
 20026  08C1  023F               	subwf	(_DimmerIntr2^(0+128)+5),w
 20027  08C2  1803               	skipnc
 20028  08C3  28C9               	goto	i1l995
 20029                           
 20030                           ;Dimmer_B1.c: 1574: DimmerIntr2.DimmingValue++;
 20031  08C4  3001               	movlw	1
 20032  08C5  00F0               	movwf	??_DimmerLights_TMR_2
 20033  08C6  0870               	movf	??_DimmerLights_TMR_2,w
 20034  08C7  07BF               	addwf	(_DimmerIntr2^(0+128)+5),f
 20035                           
 20036                           ;Dimmer_B1.c: 1575: } else {
 20037  08C8  0008               	return
 20038  08C9                     i1l995:	
 20039                           
 20040                           ;Dimmer_B1.c: 1576: DimmerIntr2.Dimming_Status = 1;
 20041  08C9  16BA               	bsf	_DimmerIntr2^(0+128),5
 20042                           
 20043                           ;Dimmer_B1.c: 1577: }
 20044                           ;Dimmer_B1.c: 1578: } else {
 20045  08CA  0008               	return
 20046  08CB                     i1l7937:	
 20047                           
 20048                           ;Dimmer_B1.c: 1579: if (DimmerIntr2.DimmingValue > ((char)(20*0.65))) {
 20049  08CB  300E               	movlw	14
 20050  08CC  023F               	subwf	(_DimmerIntr2^(0+128)+5),w
 20051  08CD  1C03               	skipc
 20052  08CE  28D2               	goto	i1l998
 20053                           
 20054                           ;Dimmer_B1.c: 1580: DimmerIntr2.DimmingValue--;
 20055  08CF  3001               	movlw	1
 20056  08D0  02BF               	subwf	(_DimmerIntr2^(0+128)+5),f
 20057                           
 20058                           ;Dimmer_B1.c: 1581: } else {
 20059  08D1  0008               	return
 20060  08D2                     i1l998:	
 20061                           
 20062                           ;Dimmer_B1.c: 1582: DimmerIntr2.Dimming_Status = 0;
 20063  08D2  12BA               	bcf	_DimmerIntr2^(0+128),5
 20064                           
 20065                           ;Dimmer_B1.c: 1583: }
 20066                           ;Dimmer_B1.c: 1584: }
 20067                           ;Dimmer_B1.c: 1585: } else if (DimmerIntr2.Dimming_RF == 1) {
 20068  08D3  0008               	return
 20069  08D4                     i1l993:	
 20070  08D4  1F3A               	btfss	_DimmerIntr2^(0+128),6
 20071  08D5  0008               	return
 20072                           
 20073                           ;Dimmer_B1.c: 1586: if (DimmerIntr2.DimmingValue < DimmerIntr2.MaxmumValue) {
 20074  08D6  0840               	movf	(_DimmerIntr2^(0+128)+6),w
 20075  08D7  023F               	subwf	(_DimmerIntr2^(0+128)+5),w
 20076  08D8  1803               	skipnc
 20077  08D9  28DF               	goto	i1l7945
 20078                           
 20079                           ;Dimmer_B1.c: 1587: DimmerIntr2.DimmingValue++;
 20080  08DA  3001               	movlw	1
 20081  08DB  00F0               	movwf	??_DimmerLights_TMR_2
 20082  08DC  0870               	movf	??_DimmerLights_TMR_2,w
 20083  08DD  07BF               	addwf	(_DimmerIntr2^(0+128)+5),f
 20084                           
 20085                           ;Dimmer_B1.c: 1588: } else if (DimmerIntr2.DimmingValue > DimmerIntr2.MaxmumValue) {
 20086  08DE  0008               	return
 20087  08DF                     i1l7945:	
 20088  08DF  083F               	movf	(_DimmerIntr2^(0+128)+5),w
 20089  08E0  0240               	subwf	(_DimmerIntr2^(0+128)+6),w
 20090  08E1  1803               	skipnc
 20091  08E2  28E6               	goto	i1l1004
 20092                           
 20093                           ;Dimmer_B1.c: 1589: DimmerIntr2.DimmingValue--;
 20094  08E3  3001               	movlw	1
 20095  08E4  02BF               	subwf	(_DimmerIntr2^(0+128)+5),f
 20096                           
 20097                           ;Dimmer_B1.c: 1590: } else {
 20098  08E5  0008               	return
 20099  08E6                     i1l1004:	
 20100                           
 20101                           ;Dimmer_B1.c: 1591: DimmerIntr2.Dimming_RF = 0;
 20102  08E6  133A               	bcf	_DimmerIntr2^(0+128),6
 20103  08E7  0008               	return
 20104  08E8                     __end_of_DimmerLights_TMR_2:	
 20105                           
 20106                           	psect	text140
 20107  0816                     __ptext140:	
 20108 ;; *************** function _DimmerLights_TMR_1 *****************
 20109 ;; Defined at:
 20110 ;;		line 1313 in file "../src/Dimmer_B1.c"
 20111 ;; Parameters:    Size  Location     Type
 20112 ;;		None
 20113 ;; Auto vars:     Size  Location     Type
 20114 ;;  count           1    1[COMMON] unsigned char 
 20115 ;; Return value:  Size  Location     Type
 20116 ;;		None               void
 20117 ;; Registers used:
 20118 ;;		wreg, status,2, status,0
 20119 ;; Tracked objects:
 20120 ;;		On entry : 0/0
 20121 ;;		On exit  : 0/0
 20122 ;;		Unchanged: 0/0
 20123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20125 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20126 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20127 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20128 ;;Total ram usage:        2 bytes
 20129 ;; Hardware stack levels used:    1
 20130 ;; This function calls:
 20131 ;;		Nothing
 20132 ;; This function is called by:
 20133 ;;		_TMR1_ISR
 20134 ;; This function uses a non-reentrant model
 20135 ;;
 20136                           
 20137                           
 20138                           ;psect for function _DimmerLights_TMR_1
 20139  0816                     _DimmerLights_TMR_1:	
 20140                           
 20141                           ;Dimmer_B1.c: 1314: char count = 65;
 20142                           
 20143                           ;incstack = 0
 20144                           ; Regs used in _DimmerLights_TMR_1: [wreg+status,2+status,0]
 20145  0816  3041               	movlw	65
 20146  0817  00F0               	movwf	??_DimmerLights_TMR_1
 20147  0818  0870               	movf	??_DimmerLights_TMR_1,w
 20148  0819  00F1               	movwf	DimmerLights_TMR_1@count
 20149                           
 20150                           ;Dimmer_B1.c: 1327: if (DimmerIntr1.Start == 1) {
 20151  081A  0021               	movlb	1	; select bank1
 20152  081B  1D2E               	btfss	_DimmerIntr1^(0+128),2
 20153  081C  2827               	goto	i1l7813
 20154                           
 20155                           ;Dimmer_B1.c: 1328: DimmerIntr1.Count++;
 20156  081D  3001               	movlw	1
 20157  081E  00F0               	movwf	??_DimmerLights_TMR_1
 20158  081F  0870               	movf	??_DimmerLights_TMR_1,w
 20159  0820  07B0               	addwf	(_DimmerIntr1^(0+128)+2),f
 20160                           
 20161                           ;Dimmer_B1.c: 1329: if (DimmerIntr1.Count >= count) {
 20162  0821  0871               	movf	DimmerLights_TMR_1@count,w
 20163  0822  0230               	subwf	(_DimmerIntr1^(0+128)+2),w
 20164  0823  1C03               	skipc
 20165  0824  2827               	goto	i1l7813
 20166                           
 20167                           ;Dimmer_B1.c: 1330: DimmerIntr1.Count = 0;
 20168  0825  01B0               	clrf	(_DimmerIntr1^(0+128)+2)
 20169                           
 20170                           ;Dimmer_B1.c: 1331: DimmerIntr1.Start = 0;
 20171  0826  112E               	bcf	_DimmerIntr1^(0+128),2
 20172  0827                     i1l7813:	
 20173                           
 20174                           ;Dimmer_B1.c: 1333: }
 20175                           ;Dimmer_B1.c: 1334: }
 20176                           ;Dimmer_B1.c: 1338: if (DimmerIntr1.Count == 5) {
 20177  0827  0830               	movf	(_DimmerIntr1^(0+128)+2),w
 20178  0828  3A05               	xorlw	5
 20179  0829  1903               	btfsc	3,2
 20180                           
 20181                           ;Dimmer_B1.c: 1341: if (DimmerIntr1.ControlStatus == 1) {
 20182  082A  1DAE               	btfss	_DimmerIntr1^(0+128),3
 20183  082B  282E               	goto	i1l7819
 20184                           
 20185                           ;Dimmer_B1.c: 1342: RA7 = 1;
 20186  082C  0020               	movlb	0	; select bank0
 20187  082D  178C               	bsf	12,7	;volatile
 20188  082E                     i1l7819:	
 20189                           
 20190                           ;Dimmer_B1.c: 1344: }
 20191                           ;Dimmer_B1.c: 1345: }
 20192                           ;Dimmer_B1.c: 1349: if (DimmerIntr1.Count == DimmerIntr1.TuneValue2) {
 20193  082E  0021               	movlb	1	; select bank1
 20194  082F  0830               	movf	(_DimmerIntr1^(0+128)+2),w
 20195  0830  0637               	xorwf	(_DimmerIntr1^(0+128)+9),w
 20196  0831  1903               	btfsc	3,2
 20197                           
 20198                           ;Dimmer_B1.c: 1352: if (DimmerIntr1.ControlStatus == 1) {
 20199  0832  1DAE               	btfss	_DimmerIntr1^(0+128),3
 20200  0833  2836               	goto	i1l7825
 20201                           
 20202                           ;Dimmer_B1.c: 1353: RA7 = 0;
 20203  0834  0020               	movlb	0	; select bank0
 20204  0835  138C               	bcf	12,7	;volatile
 20205  0836                     i1l7825:	
 20206                           
 20207                           ;Dimmer_B1.c: 1355: }
 20208                           ;Dimmer_B1.c: 1356: }
 20209                           ;Dimmer_B1.c: 1360: if (DimmerIntr1.Count == DimmerIntr1.TuneValue3) {
 20210  0836  0021               	movlb	1	; select bank1
 20211  0837  0830               	movf	(_DimmerIntr1^(0+128)+2),w
 20212  0838  0638               	xorwf	(_DimmerIntr1^(0+128)+10),w
 20213  0839  1903               	btfsc	3,2
 20214                           
 20215                           ;Dimmer_B1.c: 1363: if (DimmerIntr1.ControlStatus == 1) {
 20216  083A  1DAE               	btfss	_DimmerIntr1^(0+128),3
 20217  083B  283E               	goto	i1l7831
 20218                           
 20219                           ;Dimmer_B1.c: 1364: RA7 = 1;
 20220  083C  0020               	movlb	0	; select bank0
 20221  083D  178C               	bsf	12,7	;volatile
 20222  083E                     i1l7831:	
 20223                           
 20224                           ;Dimmer_B1.c: 1366: }
 20225                           ;Dimmer_B1.c: 1367: }
 20226                           ;Dimmer_B1.c: 1384: if (DimmerIntr1.Count == DimmerIntr1.TuneValue4) {
 20227  083E  0021               	movlb	1	; select bank1
 20228  083F  0830               	movf	(_DimmerIntr1^(0+128)+2),w
 20229  0840  0639               	xorwf	(_DimmerIntr1^(0+128)+11),w
 20230  0841  1903               	btfsc	3,2
 20231                           
 20232                           ;Dimmer_B1.c: 1386: if (DimmerIntr1.ControlStatus == 1) {
 20233  0842  1DAE               	btfss	_DimmerIntr1^(0+128),3
 20234  0843  2846               	goto	i1l954
 20235                           
 20236                           ;Dimmer_B1.c: 1387: RA7 = 0;
 20237  0844  0020               	movlb	0	; select bank0
 20238  0845  138C               	bcf	12,7	;volatile
 20239  0846                     i1l954:	
 20240                           
 20241                           ;Dimmer_B1.c: 1389: }
 20242                           ;Dimmer_B1.c: 1390: }
 20243                           ;Dimmer_B1.c: 1393: if (DimmerIntr1.Tune == 1) {
 20244  0846  0021               	movlb	1	; select bank1
 20245  0847  1CAE               	btfss	_DimmerIntr1^(0+128),1
 20246  0848  0008               	return
 20247                           
 20248                           ;Dimmer_B1.c: 1394: DimmerIntr1.Tune = 0;
 20249  0849  10AE               	bcf	_DimmerIntr1^(0+128),1
 20250                           
 20251                           ;Dimmer_B1.c: 1395: DimmerIntr1.TuneTime++;
 20252  084A  3001               	movlw	1
 20253  084B  00F0               	movwf	??_DimmerLights_TMR_1
 20254  084C  0870               	movf	??_DimmerLights_TMR_1,w
 20255  084D  07B1               	addwf	(_DimmerIntr1^(0+128)+3),f
 20256                           
 20257                           ;Dimmer_B1.c: 1396: if (DimmerIntr1.TuneTime >= DimmerIntr1.TuneTimeValue) {
 20258  084E  0832               	movf	(_DimmerIntr1^(0+128)+4),w
 20259  084F  0231               	subwf	(_DimmerIntr1^(0+128)+3),w
 20260  0850  1C03               	skipc
 20261  0851  0008               	return
 20262                           
 20263                           ;Dimmer_B1.c: 1397: DimmerIntr1.TuneTime = 0;
 20264  0852  01B1               	clrf	(_DimmerIntr1^(0+128)+3)
 20265                           
 20266                           ;Dimmer_B1.c: 1398: if (DimmerIntr1.Dimming_Sw == 1) {
 20267  0853  1E2E               	btfss	_DimmerIntr1^(0+128),4
 20268  0854  286B               	goto	i1l958
 20269                           
 20270                           ;Dimmer_B1.c: 1399: if (DimmerIntr1.Dimming_Status == 0) {
 20271  0855  1AAE               	btfsc	_DimmerIntr1^(0+128),5
 20272  0856  2862               	goto	i1l7853
 20273                           
 20274                           ;Dimmer_B1.c: 1400: if (DimmerIntr1.DimmingValue < ((char)(65*0.65))) {
 20275  0857  302A               	movlw	42
 20276  0858  0233               	subwf	(_DimmerIntr1^(0+128)+5),w
 20277  0859  1803               	skipnc
 20278  085A  2860               	goto	i1l960
 20279                           
 20280                           ;Dimmer_B1.c: 1401: DimmerIntr1.DimmingValue++;
 20281  085B  3001               	movlw	1
 20282  085C  00F0               	movwf	??_DimmerLights_TMR_1
 20283  085D  0870               	movf	??_DimmerLights_TMR_1,w
 20284  085E  07B3               	addwf	(_DimmerIntr1^(0+128)+5),f
 20285                           
 20286                           ;Dimmer_B1.c: 1402: } else {
 20287  085F  0008               	return
 20288  0860                     i1l960:	
 20289                           
 20290                           ;Dimmer_B1.c: 1403: DimmerIntr1.Dimming_Status = 1;
 20291  0860  16AE               	bsf	_DimmerIntr1^(0+128),5
 20292                           
 20293                           ;Dimmer_B1.c: 1404: }
 20294                           ;Dimmer_B1.c: 1405: } else {
 20295  0861  0008               	return
 20296  0862                     i1l7853:	
 20297                           
 20298                           ;Dimmer_B1.c: 1406: if (DimmerIntr1.DimmingValue > ((char)(20*0.65))) {
 20299  0862  300E               	movlw	14
 20300  0863  0233               	subwf	(_DimmerIntr1^(0+128)+5),w
 20301  0864  1C03               	skipc
 20302  0865  2869               	goto	i1l963
 20303                           
 20304                           ;Dimmer_B1.c: 1407: DimmerIntr1.DimmingValue--;
 20305  0866  3001               	movlw	1
 20306  0867  02B3               	subwf	(_DimmerIntr1^(0+128)+5),f
 20307                           
 20308                           ;Dimmer_B1.c: 1408: } else {
 20309  0868  0008               	return
 20310  0869                     i1l963:	
 20311                           
 20312                           ;Dimmer_B1.c: 1409: DimmerIntr1.Dimming_Status = 0;
 20313  0869  12AE               	bcf	_DimmerIntr1^(0+128),5
 20314                           
 20315                           ;Dimmer_B1.c: 1410: }
 20316                           ;Dimmer_B1.c: 1411: }
 20317                           ;Dimmer_B1.c: 1412: } else if (DimmerIntr1.Dimming_RF == 1) {
 20318  086A  0008               	return
 20319  086B                     i1l958:	
 20320  086B  1F2E               	btfss	_DimmerIntr1^(0+128),6
 20321  086C  0008               	return
 20322                           
 20323                           ;Dimmer_B1.c: 1413: if (DimmerIntr1.DimmingValue < DimmerIntr1.MaxmumValue) {
 20324  086D  0834               	movf	(_DimmerIntr1^(0+128)+6),w
 20325  086E  0233               	subwf	(_DimmerIntr1^(0+128)+5),w
 20326  086F  1803               	skipnc
 20327  0870  2876               	goto	i1l7861
 20328                           
 20329                           ;Dimmer_B1.c: 1414: DimmerIntr1.DimmingValue++;
 20330  0871  3001               	movlw	1
 20331  0872  00F0               	movwf	??_DimmerLights_TMR_1
 20332  0873  0870               	movf	??_DimmerLights_TMR_1,w
 20333  0874  07B3               	addwf	(_DimmerIntr1^(0+128)+5),f
 20334                           
 20335                           ;Dimmer_B1.c: 1415: } else if (DimmerIntr1.DimmingValue > DimmerIntr1.MaxmumValue) {
 20336  0875  0008               	return
 20337  0876                     i1l7861:	
 20338  0876  0833               	movf	(_DimmerIntr1^(0+128)+5),w
 20339  0877  0234               	subwf	(_DimmerIntr1^(0+128)+6),w
 20340  0878  1803               	skipnc
 20341  0879  287D               	goto	i1l969
 20342                           
 20343                           ;Dimmer_B1.c: 1416: DimmerIntr1.DimmingValue--;
 20344  087A  3001               	movlw	1
 20345  087B  02B3               	subwf	(_DimmerIntr1^(0+128)+5),f
 20346                           
 20347                           ;Dimmer_B1.c: 1417: } else {
 20348  087C  0008               	return
 20349  087D                     i1l969:	
 20350                           
 20351                           ;Dimmer_B1.c: 1418: DimmerIntr1.Dimming_RF = 0;
 20352  087D  132E               	bcf	_DimmerIntr1^(0+128),6
 20353  087E  0008               	return
 20354  087F                     __end_of_DimmerLights_TMR_1:	
 20355                           
 20356                           	psect	text141
 20357  1A17                     __ptext141:	
 20358 ;; *************** function _IOC_ISR *****************
 20359 ;; Defined at:
 20360 ;;		line 394 in file "../src/MCU_B1.c"
 20361 ;; Parameters:    Size  Location     Type
 20362 ;;		None
 20363 ;; Auto vars:     Size  Location     Type
 20364 ;;		None
 20365 ;; Return value:  Size  Location     Type
 20366 ;;		None               void
 20367 ;; Registers used:
 20368 ;;		wreg, status,2, status,0, pclath, cstack
 20369 ;; Tracked objects:
 20370 ;;		On entry : 0/0
 20371 ;;		On exit  : 0/0
 20372 ;;		Unchanged: 0/0
 20373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20375 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20377 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20378 ;;Total ram usage:        0 bytes
 20379 ;; Hardware stack levels used:    1
 20380 ;; Hardware stack levels required when called:    3
 20381 ;; This function calls:
 20382 ;;		_DimmerLights_IOC_1
 20383 ;;		_DimmerLights_IOC_2
 20384 ;; This function is called by:
 20385 ;;		_ISR
 20386 ;; This function uses a non-reentrant model
 20387 ;;
 20388                           
 20389                           
 20390                           ;psect for function _IOC_ISR
 20391  1A17                     _IOC_ISR:	
 20392                           
 20393                           ;MCU_B1.c: 395: IOCBF2 = 0;
 20394                           
 20395                           ;incstack = 0
 20396                           ; Regs used in _IOC_ISR: [wreg+status,2+status,0+pclath+cstack]
 20397  1A17  0027               	movlb	7	; select bank7
 20398  1A18  1116               	bcf	22,2	;volatile
 20399                           
 20400                           ;MCU_B1.c: 396: IOCIF = 0;
 20401  1A19  100B               	bcf	11,0	;volatile
 20402                           
 20403                           ;MCU_B1.c: 398: if (myMain.PowerON == 1) {
 20404  1A1A  0022               	movlb	2	; select bank2
 20405  1A1B  1C20               	btfss	_myMain^(0+256),0
 20406  1A1C  0008               	return
 20407                           
 20408                           ;MCU_B1.c: 404: DimmerLights_IOC_1();
 20409  1A1D  319F  2757  319A   	fcall	_DimmerLights_IOC_1
 20410                           
 20411                           ;MCU_B1.c: 409: DimmerLights_IOC_2();
 20412  1A20  319F  2781         	fcall	_DimmerLights_IOC_2
 20413  1A22  0008               	return
 20414  1A23                     __end_of_IOC_ISR:	
 20415                           
 20416                           	psect	text142
 20417  1F81                     __ptext142:	
 20418 ;; *************** function _DimmerLights_IOC_2 *****************
 20419 ;; Defined at:
 20420 ;;		line 1598 in file "../src/Dimmer_B1.c"
 20421 ;; Parameters:    Size  Location     Type
 20422 ;;		None
 20423 ;; Auto vars:     Size  Location     Type
 20424 ;;  dimming         1   13[COMMON] unsigned char 
 20425 ;;  count           1   12[COMMON] unsigned char 
 20426 ;; Return value:  Size  Location     Type
 20427 ;;		None               void
 20428 ;; Registers used:
 20429 ;;		wreg, status,2, status,0, pclath, cstack
 20430 ;; Tracked objects:
 20431 ;;		On entry : 0/0
 20432 ;;		On exit  : 0/0
 20433 ;;		Unchanged: 0/0
 20434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20436 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20437 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20438 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20439 ;;Total ram usage:        4 bytes
 20440 ;; Hardware stack levels used:    1
 20441 ;; Hardware stack levels required when called:    2
 20442 ;; This function calls:
 20443 ;;		_Division
 20444 ;; This function is called by:
 20445 ;;		_IOC_ISR
 20446 ;; This function uses a non-reentrant model
 20447 ;;
 20448                           
 20449                           
 20450                           ;psect for function _DimmerLights_IOC_2
 20451  1F81                     _DimmerLights_IOC_2:	
 20452                           
 20453                           ;Dimmer_B1.c: 1614: if (DimmerIntr2.Start == 0) {
 20454                           
 20455                           ;incstack = 0
 20456                           ; Regs used in _DimmerLights_IOC_2: [wreg+status,2+status,0+pclath+cstack]
 20457  1F81  0021               	movlb	1	; select bank1
 20458  1F82  193A               	btfsc	_DimmerIntr2^(0+128),2
 20459  1F83  0008               	return
 20460                           
 20461                           ;Dimmer_B1.c: 1615: DimmerIntr2.Start = 1;
 20462  1F84  153A               	bsf	_DimmerIntr2^(0+128),2
 20463                           
 20464                           ;Dimmer_B1.c: 1616: DimmerIntr2.Count = 0;
 20465  1F85  01BC               	clrf	(_DimmerIntr2^(0+128)+2)
 20466                           
 20467                           ;Dimmer_B1.c: 1617: if (DimmerIntr2.Dimming_Sw == 1 || DimmerIntr2.Dimming_RF == 1) {
 20468  1F86  1E3A               	btfss	_DimmerIntr2^(0+128),4
 20469  1F87  1B3A               	btfsc	_DimmerIntr2^(0+128),6
 20470                           
 20471                           ;Dimmer_B1.c: 1618: DimmerIntr2.Tune = 1;
 20472  1F88  14BA               	bsf	_DimmerIntr2^(0+128),1
 20473                           
 20474                           ;Dimmer_B1.c: 1619: }
 20475                           ;Dimmer_B1.c: 1620: char count = 65;
 20476  1F89  3041               	movlw	65
 20477  1F8A  00FA               	movwf	??_DimmerLights_IOC_2
 20478  1F8B  087A               	movf	??_DimmerLights_IOC_2,w
 20479  1F8C  00FC               	movwf	DimmerLights_IOC_2@count
 20480                           
 20481                           ;Dimmer_B1.c: 1621: char dimming = Division(DimmerIntr2.DimmingValue, 2);
 20482  1F8D  3002               	movlw	2
 20483  1F8E  00FA               	movwf	??_DimmerLights_IOC_2
 20484  1F8F  087A               	movf	??_DimmerLights_IOC_2,w
 20485  1F90  00F5               	movwf	Division@num
 20486  1F91  083F               	movf	(_DimmerIntr2^(0+128)+5),w
 20487  1F92  319A  2277         	fcall	_Division
 20488  1F94  00FB               	movwf	??_DimmerLights_IOC_2+1
 20489  1F95  087B               	movf	??_DimmerLights_IOC_2+1,w
 20490  1F96  00FD               	movwf	DimmerLights_IOC_2@dimming
 20491                           
 20492                           ;Dimmer_B1.c: 1622: DimmerIntr2.TuneValue2 = 5 + dimming;
 20493  1F97  087D               	movf	DimmerLights_IOC_2@dimming,w
 20494  1F98  3E05               	addlw	5
 20495  1F99  00FA               	movwf	??_DimmerLights_IOC_2
 20496  1F9A  087A               	movf	??_DimmerLights_IOC_2,w
 20497  1F9B  0021               	movlb	1	; select bank1
 20498  1F9C  00C3               	movwf	(_DimmerIntr2^(0+128)+9)
 20499                           
 20500                           ;Dimmer_B1.c: 1623: DimmerIntr2.TuneValue3 = DimmerIntr2.TuneValue2 + ((count - (5 + 5))
      +                           - DimmerIntr2.DimmingValue);
 20501  1F9D  033F               	decf	(_DimmerIntr2^(0+128)+5),w
 20502  1F9E  3AFF               	xorlw	255
 20503  1F9F  0743               	addwf	(_DimmerIntr2^(0+128)+9),w
 20504  1FA0  077C               	addwf	DimmerLights_IOC_2@count,w
 20505  1FA1  3EF6               	addlw	246
 20506  1FA2  00FA               	movwf	??_DimmerLights_IOC_2
 20507  1FA3  087A               	movf	??_DimmerLights_IOC_2,w
 20508  1FA4  00C4               	movwf	(_DimmerIntr2^(0+128)+10)
 20509                           
 20510                           ;Dimmer_B1.c: 1624: DimmerIntr2.TuneValue4 = DimmerIntr2.TuneValue3 + dimming;
 20511  1FA5  0844               	movf	(_DimmerIntr2^(0+128)+10),w
 20512  1FA6  077D               	addwf	DimmerLights_IOC_2@dimming,w
 20513  1FA7  00FA               	movwf	??_DimmerLights_IOC_2
 20514  1FA8  087A               	movf	??_DimmerLights_IOC_2,w
 20515  1FA9  00C5               	movwf	(_DimmerIntr2^(0+128)+11)
 20516  1FAA  0008               	return
 20517  1FAB                     __end_of_DimmerLights_IOC_2:	
 20518                           
 20519                           	psect	text143
 20520  1F57                     __ptext143:	
 20521 ;; *************** function _DimmerLights_IOC_1 *****************
 20522 ;; Defined at:
 20523 ;;		line 1425 in file "../src/Dimmer_B1.c"
 20524 ;; Parameters:    Size  Location     Type
 20525 ;;		None
 20526 ;; Auto vars:     Size  Location     Type
 20527 ;;  dimming         1   13[COMMON] unsigned char 
 20528 ;;  count           1   12[COMMON] unsigned char 
 20529 ;; Return value:  Size  Location     Type
 20530 ;;		None               void
 20531 ;; Registers used:
 20532 ;;		wreg, status,2, status,0, pclath, cstack
 20533 ;; Tracked objects:
 20534 ;;		On entry : 0/0
 20535 ;;		On exit  : 0/0
 20536 ;;		Unchanged: 0/0
 20537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20539 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20540 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20541 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20542 ;;Total ram usage:        4 bytes
 20543 ;; Hardware stack levels used:    1
 20544 ;; Hardware stack levels required when called:    2
 20545 ;; This function calls:
 20546 ;;		_Division
 20547 ;; This function is called by:
 20548 ;;		_IOC_ISR
 20549 ;; This function uses a non-reentrant model
 20550 ;;
 20551                           
 20552                           
 20553                           ;psect for function _DimmerLights_IOC_1
 20554  1F57                     _DimmerLights_IOC_1:	
 20555                           
 20556                           ;Dimmer_B1.c: 1439: if (DimmerIntr1.Start == 0) {
 20557                           
 20558                           ;incstack = 0
 20559                           ; Regs used in _DimmerLights_IOC_1: [wreg+status,2+status,0+pclath+cstack]
 20560  1F57  0021               	movlb	1	; select bank1
 20561  1F58  192E               	btfsc	_DimmerIntr1^(0+128),2
 20562  1F59  0008               	return
 20563                           
 20564                           ;Dimmer_B1.c: 1440: DimmerIntr1.Start = 1;
 20565  1F5A  152E               	bsf	_DimmerIntr1^(0+128),2
 20566                           
 20567                           ;Dimmer_B1.c: 1441: DimmerIntr1.Count = 0;
 20568  1F5B  01B0               	clrf	(_DimmerIntr1^(0+128)+2)
 20569                           
 20570                           ;Dimmer_B1.c: 1442: if (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr1.Dimming_RF == 1) {
 20571  1F5C  1E2E               	btfss	_DimmerIntr1^(0+128),4
 20572  1F5D  1B2E               	btfsc	_DimmerIntr1^(0+128),6
 20573                           
 20574                           ;Dimmer_B1.c: 1443: DimmerIntr1.Tune = 1;
 20575  1F5E  14AE               	bsf	_DimmerIntr1^(0+128),1
 20576                           
 20577                           ;Dimmer_B1.c: 1444: }
 20578                           ;Dimmer_B1.c: 1445: char count = 65;
 20579  1F5F  3041               	movlw	65
 20580  1F60  00FA               	movwf	??_DimmerLights_IOC_1
 20581  1F61  087A               	movf	??_DimmerLights_IOC_1,w
 20582  1F62  00FC               	movwf	DimmerLights_IOC_1@count
 20583                           
 20584                           ;Dimmer_B1.c: 1446: char dimming = Division(DimmerIntr1.DimmingValue, 2);
 20585  1F63  3002               	movlw	2
 20586  1F64  00FA               	movwf	??_DimmerLights_IOC_1
 20587  1F65  087A               	movf	??_DimmerLights_IOC_1,w
 20588  1F66  00F5               	movwf	Division@num
 20589  1F67  0833               	movf	(_DimmerIntr1^(0+128)+5),w
 20590  1F68  319A  2277         	fcall	_Division
 20591  1F6A  00FB               	movwf	??_DimmerLights_IOC_1+1
 20592  1F6B  087B               	movf	??_DimmerLights_IOC_1+1,w
 20593  1F6C  00FD               	movwf	DimmerLights_IOC_1@dimming
 20594                           
 20595                           ;Dimmer_B1.c: 1447: DimmerIntr1.TuneValue2 = 5 + dimming;
 20596  1F6D  087D               	movf	DimmerLights_IOC_1@dimming,w
 20597  1F6E  3E05               	addlw	5
 20598  1F6F  00FA               	movwf	??_DimmerLights_IOC_1
 20599  1F70  087A               	movf	??_DimmerLights_IOC_1,w
 20600  1F71  0021               	movlb	1	; select bank1
 20601  1F72  00B7               	movwf	(_DimmerIntr1^(0+128)+9)
 20602                           
 20603                           ;Dimmer_B1.c: 1448: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + ((count - (5 + 5))
      +                           - DimmerIntr1.DimmingValue);
 20604  1F73  0333               	decf	(_DimmerIntr1^(0+128)+5),w
 20605  1F74  3AFF               	xorlw	255
 20606  1F75  0737               	addwf	(_DimmerIntr1^(0+128)+9),w
 20607  1F76  077C               	addwf	DimmerLights_IOC_1@count,w
 20608  1F77  3EF6               	addlw	246
 20609  1F78  00FA               	movwf	??_DimmerLights_IOC_1
 20610  1F79  087A               	movf	??_DimmerLights_IOC_1,w
 20611  1F7A  00B8               	movwf	(_DimmerIntr1^(0+128)+10)
 20612                           
 20613                           ;Dimmer_B1.c: 1449: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + dimming;
 20614  1F7B  0838               	movf	(_DimmerIntr1^(0+128)+10),w
 20615  1F7C  077D               	addwf	DimmerLights_IOC_1@dimming,w
 20616  1F7D  00FA               	movwf	??_DimmerLights_IOC_1
 20617  1F7E  087A               	movf	??_DimmerLights_IOC_1,w
 20618  1F7F  00B9               	movwf	(_DimmerIntr1^(0+128)+11)
 20619  1F80  0008               	return
 20620  1F81                     __end_of_DimmerLights_IOC_1:	
 20621                           
 20622                           	psect	text144
 20623  1A77                     __ptext144:	
 20624 ;; *************** function _Division *****************
 20625 ;; Defined at:
 20626 ;;		line 1308 in file "../src/Dimmer_B1.c"
 20627 ;; Parameters:    Size  Location     Type
 20628 ;;  value           1    wreg     unsigned char 
 20629 ;;  num             1    5[COMMON] unsigned char 
 20630 ;; Auto vars:     Size  Location     Type
 20631 ;;  value           1    8[COMMON] unsigned char 
 20632 ;;  result          1    9[COMMON] unsigned char 
 20633 ;; Return value:  Size  Location     Type
 20634 ;;                  1    wreg      unsigned char 
 20635 ;; Registers used:
 20636 ;;		wreg, status,2, status,0, pclath, cstack
 20637 ;; Tracked objects:
 20638 ;;		On entry : 0/0
 20639 ;;		On exit  : 0/0
 20640 ;;		Unchanged: 0/0
 20641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20642 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20643 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20644 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20645 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20646 ;;Total ram usage:        5 bytes
 20647 ;; Hardware stack levels used:    1
 20648 ;; Hardware stack levels required when called:    1
 20649 ;; This function calls:
 20650 ;;		___lbdiv
 20651 ;; This function is called by:
 20652 ;;		_DimmerLights_IOC_1
 20653 ;;		_DimmerLights_IOC_2
 20654 ;; This function uses a non-reentrant model
 20655 ;;
 20656                           
 20657                           
 20658                           ;psect for function _Division
 20659  1A77                     _Division:	
 20660                           
 20661                           ;incstack = 0
 20662                           ; Regs used in _Division: [wreg+status,2+status,0+pclath+cstack]
 20663                           ;Division@value stored from wreg
 20664  1A77  00F8               	movwf	Division@value
 20665                           
 20666                           ;Dimmer_B1.c: 1309: char result = (char) (value / num);
 20667  1A78  0875               	movf	Division@num,w
 20668  1A79  00F6               	movwf	??_Division
 20669  1A7A  0876               	movf	??_Division,w
 20670  1A7B  00F0               	movwf	___lbdiv@divisor
 20671  1A7C  0878               	movf	Division@value,w
 20672  1A7D  319E  261B         	fcall	___lbdiv
 20673  1A7F  00F7               	movwf	??_Division+1
 20674  1A80  0877               	movf	??_Division+1,w
 20675  1A81  00F9               	movwf	Division@result
 20676                           
 20677                           ;Dimmer_B1.c: 1310: return result;
 20678  1A82  0879               	movf	Division@result,w
 20679  1A83  0008               	return
 20680  1A84                     __end_of_Division:	
 20681                           
 20682                           	psect	text145
 20683  1E1B                     __ptext145:	
 20684 ;; *************** function ___lbdiv *****************
 20685 ;; Defined at:
 20686 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 20687 ;; Parameters:    Size  Location     Type
 20688 ;;  dividend        1    wreg     unsigned char 
 20689 ;;  divisor         1    0[COMMON] unsigned char 
 20690 ;; Auto vars:     Size  Location     Type
 20691 ;;  dividend        1    2[COMMON] unsigned char 
 20692 ;;  quotient        1    4[COMMON] unsigned char 
 20693 ;;  counter         1    3[COMMON] unsigned char 
 20694 ;; Return value:  Size  Location     Type
 20695 ;;                  1    wreg      unsigned char 
 20696 ;; Registers used:
 20697 ;;		wreg, status,2, status,0
 20698 ;; Tracked objects:
 20699 ;;		On entry : 0/0
 20700 ;;		On exit  : 0/0
 20701 ;;		Unchanged: 0/0
 20702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20703 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20704 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20705 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20706 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20707 ;;Total ram usage:        5 bytes
 20708 ;; Hardware stack levels used:    1
 20709 ;; This function calls:
 20710 ;;		Nothing
 20711 ;; This function is called by:
 20712 ;;		_Division
 20713 ;; This function uses a non-reentrant model
 20714 ;;
 20715                           
 20716                           
 20717                           ;psect for function ___lbdiv
 20718  1E1B                     ___lbdiv:	
 20719                           
 20720                           ;incstack = 0
 20721                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
 20722                           ;___lbdiv@dividend stored from wreg
 20723  1E1B  00F2               	movwf	___lbdiv@dividend
 20724  1E1C  01F4               	clrf	___lbdiv@quotient
 20725  1E1D  0870               	movf	___lbdiv@divisor,w
 20726  1E1E  1903               	btfsc	3,2
 20727  1E1F  2E3A               	goto	i1l7249
 20728  1E20  01F3               	clrf	___lbdiv@counter
 20729  1E21  0AF3               	incf	___lbdiv@counter,f
 20730  1E22                     i1l7237:	
 20731  1E22  1BF0               	btfsc	___lbdiv@divisor,7
 20732  1E23  2E2B               	goto	i1l7239
 20733  1E24  1003               	clrc
 20734  1E25  0DF0               	rlf	___lbdiv@divisor,f
 20735  1E26  3001               	movlw	1
 20736  1E27  00F1               	movwf	??___lbdiv
 20737  1E28  0871               	movf	??___lbdiv,w
 20738  1E29  07F3               	addwf	___lbdiv@counter,f
 20739  1E2A  2E22               	goto	i1l7237
 20740  1E2B                     i1l7239:	
 20741  1E2B  1003               	clrc
 20742  1E2C  0DF4               	rlf	___lbdiv@quotient,f
 20743  1E2D  0870               	movf	___lbdiv@divisor,w
 20744  1E2E  0272               	subwf	___lbdiv@dividend,w
 20745  1E2F  1C03               	skipc
 20746  1E30  2E35               	goto	L13
 20747  1E31  0870               	movf	___lbdiv@divisor,w
 20748  1E32  02F2               	subwf	___lbdiv@dividend,f
 20749  1E33  1474               	bsf	___lbdiv@quotient,0
 20750  1E34  1003               	clrc
 20751  1E35                     L13:	
 20752  1E35  0CF0               	rrf	___lbdiv@divisor,f
 20753  1E36  3001               	movlw	1
 20754  1E37  02F3               	subwf	___lbdiv@counter,f
 20755  1E38  1D03               	btfss	3,2
 20756  1E39  2E2B               	goto	i1l7239
 20757  1E3A                     i1l7249:	
 20758  1E3A  0874               	movf	___lbdiv@quotient,w
 20759  1E3B  0008               	return
 20760  1E3C                     __end_of___lbdiv:	
 20761  007E                     btemp	set	126	;btemp
 20762  007E                     pic14e$flags	set	126
 20763  007E                     wtemp	set	126
 20764  007E                     wtemp0	set	126
 20765  0080                     wtemp1	set	128
 20766  0082                     wtemp2	set	130
 20767  0084                     wtemp3	set	132
 20768  0086                     wtemp4	set	134
 20769  0088                     wtemp5	set	136
 20770  007F                     wtemp6	set	127
 20771  007E                     ttemp	set	126
 20772  007E                     ttemp0	set	126
 20773  0081                     ttemp1	set	129
 20774  0084                     ttemp2	set	132
 20775  0087                     ttemp3	set	135
 20776  007F                     ttemp4	set	127
 20777  007E                     ltemp	set	126
 20778  007E                     ltemp0	set	126
 20779  0082                     ltemp1	set	130
 20780  0086                     ltemp2	set	134
 20781  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         264
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     78      79
    BANK1            80      8      78
    BANK2            80      0      80
    BANK3            80      0      78
    BANK4            80      4      73
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerIntr	PTR struct Dimmer_Interrupt size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK3[4]), VarLED2(BANK3[4]), VarLED1(BANK3[4]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 8
		 -> NULL(NULL[0]), DimmerLights2(BANK3[8]), DimmerLights1(BANK2[8]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK3[5]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_TMR_1
    _TMR1_ISR->_DimmerLights_TMR_2
    _IOC_ISR->_DimmerLights_IOC_1
    _IOC_ISR->_DimmerLights_IOC_2
    _DimmerLights_IOC_2->_Division
    _DimmerLights_IOC_1->_Division
    _Division->___lbdiv

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOn
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setLog_Code->_setProductData
    _setRFSW_Control->_setDelayOff_GO
    _setRFSW_AdjControl->_setDimmerIntr_MaxmumValue
    _setRFSW_AdjControl->_setProductData
    _setDimmerLights_DimmingRun->_DimmerLights_SelectPointer
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_getDimmerLights_ValueToPercent
    _Exception_Main->_setBuz
    _setDimmerLights_Main->_setDimmerLights_Dimming
    _setDimmerLights_OnOff->_setDelayOff_GO
    _setLED->_LedPointSelect
    _setDelayOff_GO->_setProductData
    _getDimmerLights_PercentToValue->___fttol
    ___ftmul->___awtoft
    _getDelayOff_GO->_DelayOffPointSelect
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setDimmerIntr_MaxmumValue->_getDimmerLights_PercentToValue
    _getDimmerLights_ValueToPercent->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setProductData
    _setProductData->_getDimmerLights_ValueToPercent
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_DimmerLights_SelectPointer
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _Temp_Main->_setTemp_Main
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setControl_Lights_Table->_setRFSW_Control
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_OnOff

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  157677
                                              0 BANK4      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1809
                                             14 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     424
                                              5 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     674
                                              5 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     311
                                              1 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              1 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    5642
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         9     9      0    5642
                                             70 BANK0      1     1      0
                                              0 BANK1      8     8      0
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    4608
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    4608
                                             19 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      66
                                              3 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     117
                                              1 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     930
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     930
                                              5 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   49455
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   49455
                                              5 BANK1      2     2      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   45736
                                              3 BANK1      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    5139
                                             70 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   40325
             _getDimmerLights_Status
           _getMain_All_LightsStatus
                      _setCmd_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   12564
                                              0 BANK1      3     3      0
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   21936
                                             70 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
         _setDimmerLights_DimmingRun
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                   _setMemory_Modify
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerLights_DimmingRun                           3     2      1     177
                                              3 BANK0      3     2      1
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              1 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              1 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              5 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     320
                                              5 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              3 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    1977
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     494
                                              7 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     404
                                              6 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     359
                                              6 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     268
                                              3 BANK0      3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     516
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     448
                                              1 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              3 BANK0      2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    2315
                                              9 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
    _getAll_DimmerIntr_Dimming_Sw_RF
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 3     3      0      48
                                              1 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      23
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      23
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerIntr_Dimming_Sw_RF                      4     4      0      95
                                              1 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     270
                                              1 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4    1052
                                              1 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              3 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1018
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1018
                                              5 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1235
                                              7 BANK0      1     1      0
                _Flash_Memory_Modify
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1164
                                              5 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   12979
                                             67 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
     _getDimmerLights_ValueToPercent
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     934
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              1 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              1 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    3729
                                             14 BANK0      9     9      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 2     2      0      25
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   64841
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   64509
                                              4 BANK1      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
           _getMain_All_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                4     3      1   41896
                                              0 BANK1      4     3      1
                      _getCmd_Status
                     _getDelayOff_GO
     _getDimmerLights_PercentToValue
     _getDimmerLights_ValueToPercent
           _getMain_All_LightsStatus
                      _setCmd_Status
                     _setDelayOff_GO
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     908
                                              3 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      66
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_Dimming_RF                             3     2      1     266
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     177
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     266
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (6) _setDelayOff_GO                                       8     6      2    4496
                                             70 BANK0      8     6      2
                _DelayOffPointSelect
                             ___bmul
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) ___bmul                                               4     3      1     270
                                              1 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setCmd_Status                                        3     2      1     222
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      71
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_PercentToValue                       6     6      0   15148
                                             61 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    3377
                                             15 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      89
                                              3 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getCmd_Status                                        2     2      0      46
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              3     2      1   22094
                                             75 BANK0      3     2      1
         _getDimmerIntr_DimmingValue
     _getDimmerLights_ValueToPercent
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      22
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    3821
                                             70 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      88
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_MaxmumValue                            3     2      1     444
                                             67 BANK0      3     2      1
         _getDimmerIntr_DimmingValue (ARG)
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_Dimming_Sw                             3     2      1     266
                                              1 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_ValueToPercent                       6     6      0   11771
                                             61 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     430
                                             47 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     223
                                             31 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    3687
                                             15 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    4221
                                             34 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    3142
                                              9 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2873
                                              1 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      69
                                              1 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      6     6      0     187
                                              2 BANK0      6     6      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      23
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     238
                                              1 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0       0
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    5731
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    5731
                                             70 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       3     2      1    3286
                                             67 BANK0      3     2      1
         _getDimmerIntr_DimmingValue (ARG)
     _getDimmerLights_ValueToPercent (ARG)
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 5     5      0    2091
                                             14 BANK0      5     5      0
         _DimmerLights_SelectPointer
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1809
                                             10 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              1 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0      66
                                              3 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      89
                                              3 BANK0      2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      44
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      66
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      66
                                              3 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (7) _DelayOffPointSelect                                  2     2      0      44
                                              1 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              1 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  1     1      0    1174
                                              0 BANK0      1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0      46
                 _DimmerLights_TMR_1
                 _DimmerLights_TMR_2
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_2                                  2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_1                                  2     2      0      23
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (10) _IOC_ISR                                             0     0      0    1128
                 _DimmerLights_IOC_1
                 _DimmerLights_IOC_2
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_2                                  4     4      0     564
                                             10 COMMON     4     4      0
                           _Division
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_1                                  4     4      0     564
                                             10 COMMON     4     4      0
                           _Division
 ---------------------------------------------------------------------------------
 (12) _Division                                            5     4      1     496
                                              5 COMMON     5     4      1
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (13) ___lbdiv                                             5     4      1     251
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setProductData
         _getDimmerIntr_DimmingValue (ARG)
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_All_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setProductData
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _getCmd_Status
         _getDelayOff_GO
           _DelayOffPointSelect
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getMain_All_LightsStatus
         _setCmd_Status
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLights_SelectPointer
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLights_SelectPointer
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _getDimmerLights_ValueToPercent
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_All_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerIntr_Dimming_Sw_RF
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _getMain_All_LightsStatus
           _setCmd_Status
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_PercentToValue
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setDimmerIntr_Dimming_RF
             _setDimmerIntr_MaxmumValue
               _getDimmerIntr_DimmingValue (ARG)
               _getDimmerLights_PercentToValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_DimmingRun
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setMemory_Modify
             _setProductData
               _getDimmerIntr_DimmingValue (ARG)
               _getDimmerLights_ValueToPercent (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerIntr_DimmingValue (ARG)
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerIntr_DimmingValue (ARG)
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
       _setBuz
         ___awdiv
       _setProductData
         _getDimmerIntr_DimmingValue (ARG)
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_IOC_1
       _Division
         ___lbdiv
     _DimmerLights_IOC_2
       _Division
         ___lbdiv
   _TMR1_ISR
     _DimmerLights_TMR_1
     _DimmerLights_TMR_2

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       1       4        1.3%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4E      4F       5       98.8%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      8      4E       7       97.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      50       9      100.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4E      11       97.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      4      49      13       91.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     192      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     192      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Tue Jan 27 16:29:24 2015

                    __size_of_Switch_Main 000B                     ?_Flash_Memory_Erasing 0070  
                            _WDT_Clearing 0002                     __end_of_setCmd_Status 1C86  
                          ___bmul@product 0023                 getMain_Lights_Count@count 0021  
                                      l98 1529                                        _RD 0CA8  
                 __end_of_CC2500_WriteREG 1EE4                                        _WR 0CA9  
                            ___awdiv@sign 0027                                        _Sw 00D5  
                          setTemp_Main@AD 00EB                       ___wmul@multiplicand 0023  
                    _getDimmerLights_Line 1B93                    __end_of_setDelayOff_GO 0CA9  
                            ___ftadd@exp1 004E                              ___ftadd@exp2 004D  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 1798  
                    _setDimmerLights_Line 1D25                              ___ftadd@sign 004C  
                                     l100 153D                                       l110 1391  
                                     l112 13A1                                       l108 13A7  
                                     l109 13A3                      _setDimmerLights_SwOn 15AC  
                                     l327 1C92                                       l328 1C94  
                                     l371 1F0E                                       l283 09B7  
                                     l259 092C                                       l581 0A2B  
                                     l750 1014                                       l903 1D34  
                                     l850 1DF1                                       l908 1B9C  
                                     l909 1BA4                                       l874 07A9  
                                     _GIE 005F                                       _CRC 00CB  
                                     _RA0 0060                                       _RB0 0068  
    __size_of_DimmerLights_Initialization 000B                                       _RB1 0069  
                                     _RA3 0063                                       _RC0 0070  
                                     _RA4 0064                                       _LED 00D0  
                                     _RC1 0071                                       _RB3 006B  
                                     _RC2 0072                                       _RB4 006C  
                                     _RA6 0066                                       _RB5 006D  
                                     _RA7 0067                                       _RC4 0074  
                                     _RC5 0075                                       _RC7 0077  
                                     _RF1 00A0                                       _ISR 0004  
                                     _WDT 00C9                                       _Cmd 00CC  
            getDimmerLights_Status@lights 0023                                       _Sw1 01BE  
                                     _Sw2 01C7                ??_setDimmerIntr_Dimming_RF 0022  
              ??_setDimmerIntr_Dimming_Sw 0022           setDimmerIntr_Dimming_RF@command 0021  
                __end_of_CC2500_WriteByte 1C9F                     _Buzzer_Initialization 1953  
                         __end_of_ADC_Set 1997                                       wreg 0009  
    setDimmerLights_Initialization@lights 0070              getDimmerLights_Status@status 0024  
     __end_of_setDimmerIntr_ControlStatus 1045               _setDimmerIntr_ControlStatus 1016  
                       ??_getSw_KeyStatus 0021                                      ?_ISR 0070  
                            ___ftdiv@cntr 0039                           __end_of_IOC_ISR 1A23  
                   _setDimmerLights_OnOff 071B          setDimmerLights_DimmingRun@lights 0025  
                              Load_Main@i 0031                              ___ftdiv@sign 003E  
                                    l1114 1DC6                                      l1115 1DD0  
                                    l2202 0D37                                      l2130 058D  
                                    l2131 05DE                                      l1421 116B  
                                    l1149 12D6                                      l2126 063E  
                                    l1435 109C                                      l2171 0AA2  
                                    l1444 1449                                      l2156 07F5  
                                    l3153 163B                                      l2193 0CBF  
                                    l2186 1137                                      l2523 1BEC  
                         __end_of_IOC_Set 19EB                                      l3182 0427  
                                    l3159 1652                                      l1584 01FE  
                                    l2545 037E                            _Load_Main$3627 002C  
                                    l1594 01DA                                      l1586 008A  
                                    l1595 01D8                                      l1587 0086  
                                    l2547 024A                                      l1588 0081  
                                    l1764 0E00                                      l1758 0E8B  
                                    l2831 121C                                      l1769 0E83  
                                    l2860 1101                                      l6221 1618  
                                    l2855 10EA                                      l6231 1640  
                                    l6223 1622                                      l2856 1105  
                                    l6233 1648                                      l6225 1627  
                                    l6217 1611                                      l6401 0402  
                                    l7033 102E                                      l7041 1C4B  
                                    l7051 100A                                      l6411 0423  
                                    l6403 0406                                      l7131 1471  
                                    l7061 1FEB                                      l7117 1460  
                                    l7125 1468                                      l7301 0948  
                                    l6319 1C06                                      l6415 0439  
                                    l6511 0F15                                      l6503 0F01  
                                    l6335 1ADD                                      l7151 1495  
                                    l2887 071A                                      l2896 1C85  
                                    l2992 1D68                                      l6329 1C1D  
                                    l6409 0419                                      l7321 096B  
                                    l7403 1255                                      l6419 044B  
                                    l6515 0F1D                                      l6339 1AE3  
                                    l7147 1491                                      l7155 1499  
                                    l7139 1479                                      l8051 1E92  
                   _setDimmerLights_SwOff 11A8                                      l7405 125A  
                                    l6357 1EAA                                      l6429 0466  
                                    l6373 03B7                                      l6445 0D65  
                                    l6701 1C34                                      l7173 1AD3  
                                    l7341 0983                                      l7325 0971  
                                    l8045 1E89                                      l6391 03E0  
                                    l6439 0D4F                                      l7175 1AD8  
                                    l8063 1406                                      l7343 099C  
                                    l7319 0968                                      l7263 08F8  
                                    l8047 1E8C                                      l6369 03B0  
                                    l7169 1ACC                                      l6481 0EA8  
                                    l6801 1CCB                                      l7265 08FB  
                                    l9131 15C0                                      l6379 03C6  
                                    l6467 0DBF                                      l6459 0DA6  
                                    l6539 0BAF                                      l7283 0913  
                                    l9053 14AF                                      l9141 15D1  
                                    l9133 15C3                                      l7381 122E  
                                    l6397 03F3                                      l6573 0C14  
                                    l6565 0BFA                                      l6557 0BDF  
                                    l9205 171D                                      l6709 105D  
                                    l8069 141B                                      l6821 1D58  
                                    l7293 093B                                      l7269 0901  
                                    l9071 14CE                                      l9151 15FA  
                                    l9143 15D6                                      l6399 03FD  
                                    l6567 0C03                                      l6559 0BED  
                                    l6487 0EBE                                      l9215 1B58  
                                    l7295 093F                                      l7287 0932  
                                    l9311 0CF0                                      l8263 1BF1  
                                    l6657 11D6                                      l9081 14E9  
                                    l9153 15FF                                      l7393 1244  
                                    l6569 0C06                                      l8361 1D62  
                                    l6833 1F1F                                      l6841 1ECA  
                                    l7297 0942                                      l7289 0935  
                                    l9233 1313                                      l9313 0D12  
                                    l9059 14BA                                      l7395 1247  
                                    l6499 0EF9                                      l7539 1084  
                                    l6835 1F2A                                      l6843 1ECD  
                                    l6819 1D52                                      l9315 0D16  
                                    l9307 0CCE                                      l9323 0D22  
                                    l8267 1BF7                                      l7643 1C62  
                                    l8381 137B                                      l9085 14F1  
                                    l9077 14E0                                      l9069 14C2  
                                    l6933 1EEE                                      l9245 0B2D  
                                    l9317 0D1A                                      l9309 0CD5  
                                    l9421 0A69                                      l9405 0A48  
                                    l8541 0AC3                                      l9175 0C5B  
                                    l9343 076D                                      l8463 04FD  
                                    l7735 1E67                                      l6847 1ED3  
                                    l6935 1EF1                                      l7583 1AC2  
                                    l9319 0D1E                                      l9511 0E11  
                                    l9273 10E5                                      l6873 1C7F  
                                    l9185 0C8B                                      l9361 07B9  
                                    l7745 1E77                                      l6961 1345  
                                    l9249 0B32                                      l9433 0A7E  
                                    l9417 0A60                                      l7657 1DA9  
                                    l9505 0E02                                      l9513 0E14  
                                    l8553 0AEA                                      l9283 10FC  
                                    l9275 10EE                                      l9347 0788  
                                    l7691 1198                                      l7683 117A  
                                    l7747 1E7C                                      l6795 1CC2  
                                    l6971 1355                                      l6963 1348  
                                    l6939 1EF7                                      l9259 0B82  
                                    l9603 05ED                                      l7667 1DB5  
                                    l7659 1DAB                                      l6869 1C70  
                                    l9189 0C9F                                      l9365 07C0  
                                    l7685 1186                                      l6797 1CC5  
                                    l6973 1358                                      l7669 1DB9  
                                    l9541 0E58                                      l8549 0AE2  
                   _myMain_Initialization 1B80                                      l7695 11A1  
                                    l6967 134E                                      l9631 0637  
                                    l9543 0E5A                                      l8743 128C  
                                    l9385 13C7                                      l9473 17BE  
                                    l6977 135E                                      l9617 061F  
                                    l9553 0E6F                                      l8569 0B11  
                                    l9379 07ED                                      l9475 17C4  
                                    l9811 00AD                                      l9299 0CAA  
                                    l9555 0E70                                      l9485 17EC  
                                    l9487 17F3                                      l9737 1DF3  
                                    l9817 00DF                                      l9665 027D  
                                    l9649 0234                                      _CFGS 0CAE  
                                    l9843 0162                                      l9675 02B2  
                                    l9909 01ED                                      l9853 018E  
                                    l9589 05D9                                      l9863 01AA  
                            __CFG_WDTE$ON 0000                                      l9873 01C0  
                                    l9849 0171                                      l9857 019A  
                                    l9777 0068                                      l9689 02F2  
                                    l9971 0664                                      l9795 0089  
                                    l9699 0326                                      l9939 11FB  
                                    l9981 0683                                      l9991 0686  
                                    l9993 06B3                                      l9977 0674  
                                    l9989 06AB                                      _FREE 0CAC  
                                    _LATA 010C                                      _LATB 010D  
                                    _LATC 010E                                      u5015 1659  
                                    _PEIE 005E                                      u5335 03E1  
                                    u5425 041A                                      u5505 0D87  
                                    u6145 1F14                                      u5515 0DA7  
                                    u7115 0810                                      u5365 03F4  
                                    u5525 0DB6                                      u5605 0F02  
                                    u5535 0DC0                                      u5615 0F08  
                                    u5395 0407                                      u5725 0BE0  
                                    u5645 0F1E                                      u5495 0D77  
                                    u5655 0F24                                      u5575 0ECA  
                                    u4945 161D                                      u5585 0EDA  
                                    u9025 0AD2                                      u5755 0BFB  
                                    u4965 1636                                      u5695 0BB6  
                                    u7455 117D                                      u4985 1643  
                                    u5785 1BCA                                      u7475 1187  
                                    u9075 0B01                                      u7485 1191  
                                    u7495 1199                                      u9435 1280  
                                    u8745 1D69                                      u8755 1D6E  
                                    u8785 1371                                      u9905 14E1  
                                    _LWLO 0CAD                                      u9865 14C5  
                                    u9885 14CF                                      u9895 14D9  
                                    _RSSI 00D2                                      _WREN 0CAA  
                                    _WPUB 020D        __end_of_setDimmerLights_DimmingRun 1D09  
              _setDimmerLights_DimmingRun 1CEE                                      _Buz1 012D  
                                    _Load 0140                                      _Temp 00DB  
                                    _main 1551                              ___ftpack@arg 0021  
                     __end_of_DlyOff_Main 0A32                           __end_of_RF_Main 195F  
                            ___ftpack@exp 0024                                      fsr0h 0005  
                                    fsr1h 0007                                      fsr0l 0004  
                                    indf0 0000                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                         __end_of_WDT_Set 1A01                                      ltemp 007E  
           __size_of_setRF_Initialization 000B                                      start 0020  
                                    ttemp 007E                                      wtemp 007E  
              __end_of_setRFSW_AdjControl 0B96                         ___bmul@multiplier 0024  
                            ___ftmul@cntr 003D                              ___ftmul@sign 003E  
            __size_of_Temp_Initialization 0003      _getDimmerLights_Allow_Condition$2367 0023  
    _getDimmerLights_Allow_Condition$2368 0024      _getDimmerLights_Allow_Condition$2369 0025  
                       ?_getDimmer_LoadGO 0070                                     ??_ISR 0020  
                            ___fttol@exp1 005C                              ___fttol@lval 0058  
       setDimmerLights_DimmingRun@command 0023   __end_of_getDimmerLights_Allow_Condition 125C  
__size_of_getDimmerLights_Allow_Condition 003E         ??_getDimmerLights_Allow_Condition 0022  
        ?_getDimmerLights_Allow_Condition 0070           _getDimmerLights_Allow_Condition 121E  
                  _getDimmerLights_Status 1A84                        ??_getDimmer_LoadGO 0021  
                        __end_of_LED_Main 1A5F                     ?_getDimmerLights_Line 0070  
                              _DimmerIntr 00CE                                     l10011 06F5  
                                   l10013 06FF                                     l10007 06ED  
                                   l10009 06C8                                     l10041 1575  
                                   l10019 0710                                     l10045 1580  
                   ?_setDimmerLights_Main 0070                     ?_setDimmerLights_Line 0070  
                         ?_setDelayOff_GO 0066                     ?_setDimmerLights_SwOn 0070  
                                   ?_main 0265                           __end_of___awdiv 14F8  
                         __end_of___lbdiv 1E3C                           __end_of___ftadd 047E  
                         __end_of___ftdiv 0DE1                           __end_of___ftneg 19D8  
                                   u10120 16D8                                     u10105 0C67  
                                   u10125 16D6                           __end_of___ftmul 0F45  
                         ___awdiv@divisor 0021                                     u11335 00AB  
                                   _T1CON 0018                                     u11345 00DD  
                                   u11195 1162                                     u11435 01A1  
                                   u11355 0121                                     u11620 06B1  
                         __end_of___fttol 0C1D                                     u10815 0E60  
                                   u11625 068F                                     u10905 05B1  
                                   u11650 06F3                                     u11555 1214  
                                   u11655 06D1                                     u10935 060E  
                                   u10795 0E40                                     _IOCBF 0396  
                                   _IOCBN 0395                                     _IOCBP 0394  
                                   _IOCIE 005B                                     _IOCIF 0058  
                         __end_of___lwdiv 11A8                                     i1l960 0860  
                                   i1l954 0846                                     i1l963 0869  
                                   i1l958 086B                                     i1l969 087D  
                                   i1l993 08D4                                     i1l995 08C9  
                                   i1l989 08AF                                     i1l998 08D2  
                         ___awdiv@counter 0026             __size_of_CC2500_FrequencyCabr 000C  
                                   _TMR1H 0017                                     _TMR1L 0016  
                                   _PORTA 000C                                     _PORTB 000D  
                                   _PORTC 000E                              ?_setLED_Main 0070  
                      setRF_Learn@command 0022                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
                 __end_of_Timeout_Counter 0816                             __CFG_WRT$HALF 0000  
  __end_of_getDimmerLights_ValueToPercent 16CE   __size_of_getDimmerLights_ValueToPercent 0065  
          _getDimmerLights_ValueToPercent 1669                                     _Light 00D1  
                        __end_of_TMR1_ISR 1E5D                   __size_of_setProductData 000C  
            __size_of_CC2500_WriteCommand 001A                          __end_of_TMR1_Set 1A6B  
                                   _getAD 1E7E                             ___awtoft@sign 002E  
                           ___ftpack@sign 0025               __size_of_CC2500_ClearRXFIFO 0004  
                           ??_Buzzer_Main 0021                          __end_of_WDT_Main 1B34  
             __size_of_CC2500_ClearTXFIFO 0004                       CC2500_RxData@loop_f 0026  
                          __CFG_BOREN$OFF 0000              __end_of_getMain_Lights_Count 1B10  
                      Flash_Memory_Read@i 0022                          ?_CC2500_ReadByte 0070  
                                   ltemp0 007E                                     ltemp1 0082  
                                   ltemp2 0086                                     ltemp3 0080  
          __size_of_setLED_Initialization 0012             __end_of_setLED_Initialization 1AFE  
                                   ttemp0 007E                                     ttemp1 0081  
                                   ttemp2 0084                                     ttemp3 0087  
                                   ttemp4 007F                              ?_setRF_Learn 0070  
                                   status 0003                                     wtemp0 007E  
                                   wtemp1 0080                                     wtemp2 0082  
                                   wtemp3 0084                                     wtemp4 0086  
                                   wtemp5 0088                                     wtemp6 007F  
                      _setRF_DimmerLights 16CE                           ___lbdiv@divisor 0070  
             __size_of_Flash_Memory_Write 002F                         ?_CC2500_SIDLEMode 0070  
                         ___lbdiv@counter 0073                __size_of_RF_Initialization 0003  
        __size_of_DelayOff_Initialization 0008                    ?_setLoad_AH_AL_Restore 0070  
                       setTemp_Main@error 00E5               __size_of_setRF_TransceiveGO 0013  
                  ??_Flash_Memory_Erasing 0021               ??_setDimmerLights_DimmingOn 0023  
                      ??_CC2500_SIDLEMode 0025                           __initialization 0022  
                        ?_CC2500_PowerRST 0070                         ?_setMemory_Modify 0070  
                        __end_of_Division 1A84                   __size_of_getDelayOff_GO 0011  
                            __end_of_main 15AC                       ?_setRF_DimmerLights 0066  
                        __end_of_Fosc_Set 1969            getMain_All_LightsStatus@status 0021  
                      ??_setMemory_Modify 0021              setDimmerLights_OnOff@command 00E5  
                          _Exception_Main 0644                          ?_CC2500_WriteREG 0023  
                               ??_ADC_Set 0021                      _setSw_Initialization 19BF  
                                  ??_main 006E                             ___fttol@sign1 0057  
                            ?_setLog_Code 0070               ?_setDimmerIntr_DimmingValue 0021  
            ??_DimmerLights_SelectPointer 0021                   _setControl_Lights_Table 0CA9  
                          _setMemory_Data 1A2F                    ?_Buzzer_Initialization 0070  
                 ??_DlyOff_Initialization 0023                                _Receive_OK 0370  
      setDimmerIntr_ControlStatus@command 0021                   _setDimmerLights_Dimming 13AE  
                               ??_IOC_ISR 007E                                 ??_IOC_Set 0021  
                             _DimmerIntr1 00AE                               _DimmerIntr2 00BA  
                _getMain_All_LightsStatus 1B47                  __size_of_setRFSW_Control 0043  
                      _RF_Timeout_Counter 1BBB                   ??_Switch_Initialization 0026  
                  ?_setDimmerLights_OnOff 00E5                      ??_setRF_DimmerLights 0067  
                                  ?_getAD 0021                         ??_getRF_KeyStatus 0021  
                  ?_setDimmerLights_SwOff 0070                               _DlyOff_Main 09C3  
                  ?_myMain_Initialization 0070                                    _ADCON0 009D  
                                  _ADCON1 009E                                 ??_RF_Main 006E  
                                  _ADRESH 009C                                    _ADRESL 009B  
                        ___awdiv@dividend 0023                     _getDimmer_Load_Status 19B7  
                               ??_WDT_Set 0021                          __end_of___awtoft 1EC1  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  _ANSELC 018E                          __end_of___ftpack 1669  
                _getMain_All_Error_Status 10D4                                    _IOCBF2 1CB2  
                                  i1l1004 08E6                                    i1l1383 0013  
                                  i1l1386 001B                                    i1l7237 1E22  
                                  i1l7239 1E2B                                    i1l7249 1E3A  
                                  i1l7813 0827                                    i1l7831 083E  
                                  i1l7903 0897                                    i1l7825 0836  
                                  i1l7819 082E                                    i1l7915 08A7  
                                  i1l7861 0876                                    i1l7853 0862  
                                  i1l7909 089F                                    i1l7945 08DF  
                                  i1l7937 08CB                                    i1l7897 0890  
                                  _FVRCON 0117      getDimmerLights_Allow_Condition@allow 0027  
                                  _PMADRH 0192                                    _PMADRL 0191  
                                  _PMDATH 0194                                    _PMDATL 0193  
                     ?_RF_Timeout_Counter 0070                                    _PMCON2 0196  
                                  _OSCCON 0099                        __size_of_Load_Main 01B0  
                                  _TMR1IE 0488                                    _TMR1IF 0088  
                                  _IO_Set 1CD3                                    _WDTCON 0097  
                                  u888_25 1E57                        DelayTime_1us@count 0021  
                    Exception_Main@i_6825 0033            __size_of_CC2500_PowerOnInitial 0015  
             ??_setDimmerIntr_MaxmumValue 0064             __end_of_CC2500_PowerOnInitial 1BE5  
                                  _Dimmer 0139                                    _DlySw1 01D8  
                                  _DlySw2 01DD             __size_of_setRF_TimeoutCleared 0004  
                   __end_of_getCmd_Status 1ADA                __end_of_Mcu_Initialization 1B22  
                     __end_of_Buzzer_Main 13AE                                    _Memory 0220  
                                  _Timer1 00C6                                    ___bmul 1ADA  
                  __end_of_Exception_Main 071B                      Exception_Main@lights 0035  
                                  ___wmul 1D5F                                 ??___awdiv 0025  
                               ??___lbdiv 0071                                 ??___ftadd 0048  
            __size_of_DelayOffPointSelect 0017                                 ??___ftdiv 0035  
                               ??___ftneg 0042                                 ??___ftmul 0035  
                               ??___fttol 0053              ?_Flash_Memory_Initialization 0070  
                  ??_getDimmerLights_Line 0021                                 ??___lwdiv 0025  
                  ??_setDimmerLights_Main 006E                    ??_setDimmerLights_Line 0021  
                                  _r_data 00D9                      Exception_Main@status 002F  
 __end_of_getAll_DimmerIntr_Dimming_Sw_RF 1E7E  __size_of_getAll_DimmerIntr_Dimming_Sw_RF 0021  
       ??_getAll_DimmerIntr_Dimming_Sw_RF 0021          ?_getAll_DimmerIntr_Dimming_Sw_RF 0070  
         _getAll_DimmerIntr_Dimming_Sw_RF 1E5D                                    _s_data 00DA  
                  ??_setDimmerLights_SwOn 002E                                    _setLED 1451  
                                  _myMain 0120                      ??_RF_Timeout_Counter 0021  
                  __end_of_setMemory_Data 1A3B                     ?_setSw_Initialization 0070  
                        ___awdiv@quotient 0028                                    _setBuz 14F8  
                      __size_of_Temp_Main 0003                      Load_Main@LightsCount 0030  
             __end_of_Load_Initialization 1959          ??_setDimmerLights_Initialization 0021  
         ?_setDimmerLights_Initialization 0070          __end_of_setDimmerIntr_Dimming_RF 1074  
                 DimmerLights_TMR_1@count 0071          __end_of_setDimmerIntr_Dimming_Sw 2000  
                 DimmerLights_TMR_2@count 0071                     ___ftmul@f3_as_product 003A  
               _setDimmerLights_DimmingOn 1F2F                  Flash_Memory_Read@address 0023  
                        ?_Timeout_Counter 0070                __end_of_setMemory_LoopSave 1B80  
             getMain_Lights_Count@status1 0022               getMain_Lights_Count@status2 0023  
             __size_of_DimmerLights_IOC_1 002A               __size_of_DimmerLights_IOC_2 002A  
                   __end_of_SwPointSelect 1C6D               __size_of_DimmerLights_TMR_1 0069  
             __size_of_DimmerLights_TMR_2 0069              __size_of_Flash_Memory_Modify 0052  
                 __size_of_LedPointSelect 0020           setDimmerIntr_Dimming_Sw@command 0021  
                      setTemp_Main@TempGO 00E6                          ___lbdiv@dividend 0072  
                     Flash_Memory_Write@i 0022              __size_of_Flash_Memory_Unlock 0009  
                              _TouchPower 1BE5               __size_of_CC2500_InitPATable 001F  
                     CC2500_TxData@loop_e 0026          __end_of_CC2500_registers_address 182F  
                 __end_of__initialization 004E           getDimmerIntr_DimmingValue@value 0022  
         setDimmerIntr_DimmingValue@value 0021                                 ?_LED_Main 0070  
                              ___ftadd@f1 0042                                ___ftadd@f2 0045  
                    _getRF_KeyStatus$5034 0023                             ?_my_MainTimer 0070  
               _setDimmerLights_SwOn$2306 002F                 _setDimmerLights_SwOn$2315 0030  
                              ___ftdiv@f1 0032                                ___ftdiv@f2 002F  
                              ___ftdiv@f3 003A                                ___ftneg@f1 003F  
                              ___awtoft@c 0029                       ___bmul@multiplicand 0021  
            ?_DimmerLights_Initialization 0070                                ___ftmul@f1 002F  
                              ___ftmul@f2 0032                ?_DimmerIntr_Initialization 0070  
                              ___fttol@f1 004F                            __pcstackCOMMON 0070  
                         ?_Exception_Main 0070                              __pidataBANK4 1DFB  
                           __end_of_getAD 1E9F                                 ?_TMR1_ISR 0070  
                               ?_TMR1_Set 0070                    setLoad_AH_AL_Restore@i 0022  
               setMemory_LoopSave@command 0022                        _LED_Initialization 1A47  
                         _getSw_KeyStatus 1D9C                 ??_setControl_Lights_Table 006E  
                      getRF_KeyStatus@key 0022                           ?_setMemory_Data 0021  
        ??_getDimmerLights_PercentToValue 005D           ?_getDimmerLights_PercentToValue 0070  
               ??_setDimmerLights_Dimming 006C             ??_Flash_Memory_Initialization 0063  
                        ___lbdiv@quotient 0074                      _getMain_Lights_Count 1AFE  
                               ?_WDT_Main 0070                         __end_of_Load_Main 0202  
       setDimmerIntr_ControlStatus@lights 0023                        __size_of_getBuz_GO 0011  
               _setDimmerIntr_MaxmumValue 1C28                __end_of_set_TimeoutCleared 197E  
         setDimmerIntr_MaxmumValue@lights 0065                        __size_of_getRxData 0072  
                     ?_LED_Initialization 0070                         ?_CC2500_WriteByte 0070  
                          _setProductData 1A23                      __size_of_setLED_Main 0041  
                  ?_getDimmer_Load_Status 0070                                   ??_getAD 0024  
                     _Temp_Initialization 195F                        ??_CC2500_WriteByte 0021  
                               ?_Division 0075                                __pbssBANK1 00A0  
                              __pbssBANK2 0120                                __pbssBANK3 01A0  
                              __pbssBANK4 0220                                 ?_Fosc_Set 0070  
                             _Buzzer_Main 1364                         ??_setRFSW_Control 00E5  
             ?_setDimmerLights_DimmingRun 0023                         __end_of_Temp_Main 1965  
                                 ?_IO_Set 0070                            ??_my_MainTimer 002E  
                              ??_LED_Main 0026                           __CFG_VCAPEN$OFF 0000  
                 _DelayOff_Initialization 1997                             ??_Switch_Main 0036  
                          DelayTime_1us@i 0023                            DelayTime_1us@j 0025  
                    ??_LED_Initialization 0026                              _DimmerLights 00CF  
                       LedPointSelect@led 0022     getAll_DimmerIntr_Dimming_Sw_RF@status 0024  
                  __size_of_DelayOff_Main 0008                      __size_of_setRF_Learn 0014  
                             setBuz@count 002D                   ?_getDimmerLights_Status 0070  
                              __pmaintext 1551                            _getDelayOff_GO 1A95  
                     _CC2500_WriteCommand 1CB9                      ?_Temp_Initialization 0070  
                                 ?___bmul 0021                          ??_setDelayOff_GO 0068  
       __end_of_DimmerIntr_Initialization 10D4             ??_DimmerLights_Initialization 0022  
                                 ?___wmul 0021                                ??_TMR1_ISR 0072  
                           ?_setTemp_Main 0070                                _getLoad_AD 0AA4  
                              ??_TMR1_Set 0021                                __pintentry 0004  
                  ??_setSw_Initialization 0025                                _getLoad_OK 19A7  
                      __size_of_setTxData 00BB                                   ?_setLED 0023  
                  __size_of_DelayTime_1us 0026                     ?_getMain_Lights_Count 0070  
                                 _ADC_Set 1990                                   ?_setBuz 002A  
                               ?___awtoft 0029                                 ?___ftpack 0021  
                              _getTemp_AD 125C        __end_of_DimmerLights_SelectPointer 1C28  
              _DimmerLights_SelectPointer 1C11                                ??_WDT_Main 0021  
            __end_of_setRF_Initialization 1A0C                        _setRFSW_AdjControl 0B16  
                  __end_of_setProductData 1A2F             setDimmerLights_Dimming@lights 006D  
                                 _IOC_ISR 1A17                                   _IOC_Set 19E1  
                    __size_of_setLog_Code 0034             setDimmerLights_Dimming@status 006B  
   getDimmerLights_Allow_Condition@lights 0026                      ?_CC2500_WriteCommand 0070  
                       _Flash_Memory_Main 113B                 __size_of_getDimmer_LoadGO 0008  
                       _Flash_Memory_Read 1C9F                    __size_of_CC2500_RxData 006E  
                  __size_of_CC2500_TxData 006D                       ?_setRFSW_AdjControl 0070  
                                 _RF_Data 01A0                                   _RF_Main 195C  
                      ?_Flash_Memory_Main 0070                        ?_Flash_Memory_Read 0070  
                              ??_Division 0076                                   _WDT_Set 19F6  
         __end_of_setControl_Lights_Table 0D38                           setRF_Main@error 00EB  
                  __size_of_setCmd_Status 0019                                ??_Fosc_Set 0021  
                             ?_TouchPower 0070           __end_of_setDimmerLights_Dimming 13FF  
                 ??_setLoad_AH_AL_Restore 0021                       getCmd_Status@number 0021  
            __end_of_CC2500_FrequencyCabr 1A77                           __size_of_IO_Set 001B  
                     setCmd_Status@number 0023         __size_of_setDimmerIntr_Dimming_RF 002F  
       __size_of_setDimmerIntr_Dimming_Sw 002B                         __end_of_getBuz_GO 1AB7  
               ?_setDimmerIntr_Dimming_RF 0021                       ??_Flash_Memory_Main 0027  
               ?_setDimmerIntr_Dimming_Sw 0021                       ??_Flash_Memory_Read 0021  
                  __end_of_getDelayOff_GO 1AA6                                   _VarLED1 01E6  
                                 _VarLED2 01EA            __end_of_getDimmerLights_Status 1A95  
                       __end_of_getRxData 0AA4                   __end_of_getSw_KeyStatus 1DBB  
                _CC2500_registers_address 1800                     ??_Temp_Initialization 0021  
                    ??_setRFSW_AdjControl 0066                            ??_setTemp_Main 0066  
                         __size_of___bmul 0012                       setProductData@value 0063  
                                 ___awdiv 14A4                                   ___lbdiv 1E1B  
                                 ___ftadd 0388                                   ___ftdiv 0D38  
                                 ___ftneg 19CF                           __size_of___wmul 001E  
                                 ___ftmul 0E91                                   ___fttol 0B96  
                     __end_of_Switch_Main 1A17                                   ___lwdiv 1171  
              ??_getMain_All_LightsStatus 0021                   ??_Buzzer_Initialization 0021  
                         _getRF_KeyStatus 1AB7                                ??___awtoft 002C  
                              ??___ftpack 0026                           __size_of_setLED 0053  
                    setRFSW_AdjControl@sw 0069                           __size_of_setBuz 0059  
                                 __ptext1 11E1                                   __ptext2 1B80  
                                 __ptext3 125C                                   __ptext4 0AA4  
                                 __ptext5 1E7E                                   __ptext6 1B22  
                                 __ptext7 0002                                   __ptext8 1962  
                                 __ptext9 0DE1                 __size_of_CC2500_SIDLEMode 0004  
                            __size_of_ISR 001C                ??_getMain_All_Error_Status 0021  
                 ??_setDimmerLights_OnOff 00E6                           ?_setProductData 0063  
               __end_of_Flash_Memory_Main 1171                 __end_of_Flash_Memory_Read 1CB9  
                 ??_setDimmerLights_SwOff 0023                                _setRF_Main 056D  
                 ??_myMain_Initialization 0021                             _DelayOff_Main 199F  
                       _DimmerLights_Main 1DDB            __size_of_DlyOff_Initialization 0006  
                   ??_CC2500_WriteCommand 0023                 __size_of_setMemory_Modify 0013  
           __end_of_DlyOff_Initialization 1984                __end_of_CC2500_ClearRXFIFO 1971  
                ??_setTemp_Initialization 0021                __end_of_CC2500_ClearTXFIFO 1975  
                            ?_DlyOff_Main 0070                        ?_DimmerLights_Main 0070  
                                 _product 00ED                            _LedPointSelect 1DBB  
                         getTemp_AD@ADRES 0027                       _DelayOffPointSelect 1BFA  
                                 clrloop0 198B            __size_of_Switch_Initialization 0008  
           __end_of_Switch_Initialization 19CF                      end_of_initialization 004E  
               ??_DelayOff_Initialization 0024                         _CC2500_InitSetREG 1FAB  
                           _DelayTime_1us 1F09                         __end_of_setTxData 1000  
              __end_of_Flash_Memory_Write 10A3        __size_of_setDimmerLights_DimmingOn 0028  
                                 init_ram 1984                __end_of_setRF_TransceiveGO 1B47  
                      ?_CC2500_InitSetREG 0070                       ??_DimmerLights_Main 006E  
                    Flash_Memory_Read@ret 0024                                   initloop 1985  
                              _setSw_Main 0202                     CC2500_ReadByte@loop_b 0022  
                  setDimmerLights_SwOn@sw 0032                         _CC2500_ReadStatus 1EE4  
                    Flash_Memory_Modify@i 0026                     _setLED_Initialization 1AEC  
                         ?_getDelayOff_GO 0070                                getBuz_GO@i 0025  
                      ?_CC2500_ReadStatus 0070                  __size_of_CC2500_ReadByte 001D  
                           _CC2500_RxData 0955                             _CC2500_TxData 08E8  
                     ??_CC2500_InitSetREG 0026             __size_of_Flash_Memory_Erasing 000C  
                    ?_DelayOffPointSelect 0070                       _Flash_Memory_Modify 13FF  
                             ?_getLoad_AD 0070                               ?_getLoad_OK 0070  
                  ??_getMain_Lights_Count 0021                              __pstringtext 1800  
                           _setCmd_Status 1C6D                       _Flash_Memory_Unlock 19D8  
                     ??_CC2500_ReadStatus 0023                   CC2500_InitSetREG@loop_c 0029  
                             ?_getTemp_AD 0070                       __size_of_TouchPower 0015  
                setLED_Initialization@led 0025                   setTemp_Main@DangerValue 00E9  
                  setSw_Initialization@sw 0025                 __end_of_DimmerLights_Main 1DFB  
                      _Mcu_Initialization 1B10                  __size_of_CC2500_PowerRST 0044  
            __end_of_setRF_TimeoutCleared 196D                      __end_of_my_MainTimer 121E  
                          ?_DelayOff_Main 0070                          __CFG_FOSC$INTOSC 0000  
                  __end_of_LedPointSelect 1DDB                  __size_of_CC2500_WriteREG 0023  
                Load_Main@ErrorCountValue 002E          getDimmerIntr_DimmingValue@lights 0023  
        setDimmerIntr_DimmingValue@lights 0023                 __end_of_CC2500_InitSetREG 1FD5  
                     ?_Mcu_Initialization 0070                      ?_Flash_Memory_Modify 0070  
             __size_of_setRF_DimmerLights 0065                            ?_DelayTime_1us 0021  
                    ?_Flash_Memory_Unlock 0070        __size_of_setDimmerIntr_MaxmumValue 0017  
               __end_of_CC2500_ReadStatus 1F09                             ?_RF_RxDisable 0070  
          setDimmerIntr_Dimming_RF@lights 0023           getMain_All_Error_Status@command 0026  
                             ___ftdiv@exp 003D         __end_of_setDimmerLights_DimmingOn 1F57  
                        ??_Exception_Main 002E                            __end_of_IO_Set 1CEE  
                    _setRF_Initialization 1A01                        _setMemory_LoopSave 1B6D  
                             _Switch_Main 1A0C                         __size_of_LED_Main 000C  
                        ?_getSw_KeyStatus 0070                            ?_CC2500_RxData 0070  
                          ?_CC2500_TxData 0070                   __end_of_getRF_KeyStatus 1AC8  
                        ??_setMemory_Data 0022                               ___ftmul@exp 0039  
                   _CC2500_PowerOnInitial 1BD0               ??_DimmerIntr_Initialization 0021  
                    ??_Mcu_Initialization 0022                     ??_DelayOffPointSelect 0021  
                           ?_WDT_Clearing 0070                            ?_setCmd_Status 0021  
               DimmerLights_IOC_1@dimming 007D                       ?_setMemory_LoopSave 0070  
                          __end_of___bmul 1AEC       __size_of_getDimmerIntr_DimmingValue 0016  
               DimmerLights_IOC_2@dimming 007D                      setRF_DimmerLights@on 0066  
                          __end_of___wmul 1D7D                         getSw_KeyStatus@sw 0025  
             __size_of_RF_Timeout_Counter 0015                         __size_of_TMR1_ISR 0021  
           __size_of_getDimmerLights_Line 0014          DimmerLights_SelectPointer@lights 0022  
                       __size_of_TMR1_Set 000C             __size_of_setDimmerLights_Main 0068  
                          __end_of_setLED 14A4                             __pbitbssBANK0 0370  
           __size_of_setDimmerLights_Line 001D             __size_of_setDimmerLights_SwOn 005C  
                          __end_of_setBuz 1551                __end_of_DimmerLights_IOC_1 1F81  
              __end_of_DimmerLights_IOC_2 1FAB                      _CC2500_FrequencyCabr 1A6B  
                 ??_getDimmer_Load_Status 0021                __size_of_Flash_Memory_Main 0036  
              __size_of_Flash_Memory_Read 001A                               ?_setRF_Main 0070  
                         _setRFSW_Control 12DD                         __size_of_WDT_Main 0012  
              __end_of_DimmerLights_TMR_1 087F                __end_of_DimmerLights_TMR_2 08E8  
                     start_initialization 0022                           ?_LedPointSelect 0070  
                               _Load_Main 0052                               __end_of_ISR 0020  
                  __size_of_getCmd_Status 0012                          _getDimmer_LoadGO 19AF  
                   ??_Flash_Memory_Modify 0025              __size_of_Load_Initialization 0003  
            ?_setDimmerIntr_ControlStatus 0021                __end_of_CC2500_InitPATable 1D9C  
         __size_of_setTemp_Initialization 0001                      ??_setMemory_LoopSave 0021  
                   ??_Flash_Memory_Unlock 0021                      __end_of_setTemp_Main 0E91  
                          ??_RF_RxDisable 0025    __end_of_getDimmerLights_PercentToValue 1798  
 __size_of_getDimmerLights_PercentToValue 0065            _getDimmerLights_PercentToValue 1733  
                     __size_of_getLoad_AD 0072                              ?_Buzzer_Main 0070  
     getDimmerLights_PercentToValue@value 005F                       __size_of_getLoad_OK 0008  
                      _set_TimeoutCleared 1979         __end_of_setDimmerIntr_MaxmumValue 1C3F  
                                ??_IO_Set 0021                  __size_of_Timeout_Counter 0016  
                               _VarErrLED 01E2                         __size_of_Division 000D  
                             ?_setSw_Main 0070                       __size_of_getTemp_AD 0040  
                  ?_setLED_Initialization 0070                     ?_setRF_Initialization 0070  
                       __size_of_Fosc_Set 0004                 __size_of_CC2500_WriteByte 0019  
                               _Temp_Main 1962                       ?_set_TimeoutCleared 0070  
                          ??_WDT_Clearing 0021                                 _Rx_Length 00D3  
                   setProductData@address 0065                       Exception_Main@count 0030  
                     Exception_Main@error 0036                                  ??___bmul 0022  
                                ??___wmul 0025                    __size_of_SwPointSelect 0017  
        __end_of_getMain_All_LightsStatus 1B5A                                 _Tx_Length 00D7  
                             __pdataBANK4 0245                                  ??_setLED 0024  
                                ?_ADC_Set 0070                                  ??_setBuz 002C  
                         ??_DelayOff_Main 0069                         ??_CC2500_ReadByte 0021  
             ?_DimmerLights_SelectPointer 0070          __end_of_getMain_All_Error_Status 1107  
                        _CC2500_SIDLEMode 1975                __size_of_DimmerLights_Main 0020  
                      setMemory_Data@data 0021                     ?_CC2500_FrequencyCabr 0070  
          setDimmerIntr_Dimming_Sw@lights 0023                             ??_setLED_Main 0023  
                       __size_of___awtoft 0022                         __size_of___ftpack 0061  
                                ?_IOC_ISR 0070                                  ?_IOC_Set 0070  
                 Load_Main@Load_RunStatus 002F                                 ___latbits 0003  
                        _setMemory_Modify 1B5A                                ?_Load_Main 0070  
                           __pcstackBANK0 0020                             __pcstackBANK1 00E5  
               setRF_TransceiveGO@command 0022                             __pcstackBANK4 0265  
                    ??_set_TimeoutCleared 0021                 _DimmerIntr_Initialization 10A3  
                         ??_DelayTime_1us 0023                __size_of_CC2500_InitSetREG 002A  
                           DlyOff_Main@sw 0068                         ??_CC2500_PowerRST 0027  
                                ?_RF_Main 0070                                  ?_WDT_Set 0070  
           ??_setDimmerIntr_ControlStatus 0022                              ??_TouchPower 0021  
                    __size_of_DlyOff_Main 006F                __size_of_CC2500_ReadStatus 0025  
          setDimmerIntr_MaxmumValue@value 0063               setDimmerLights_DimmingOn@sw 0023  
                       ??_CC2500_WriteREG 0024                             ??_setRF_Learn 0021  
                           _DimmerLights1 0168                             _DimmerLights2 01D0  
                   CC2500_WriteREG@w_addr 0025                     setDelayOff_GO@command 0066  
          __size_of_setLoad_AH_AL_Restore 001C                           ??_CC2500_RxData 0025  
           __end_of_setLoad_AH_AL_Restore 1D25                  setRFSW_AdjControl@status 0068  
                         ??_CC2500_TxData 0025                                 __pnvBANK1 00ED  
                          getRxData@error 00E9               __size_of_LED_Initialization 000C  
                    _setRF_TimeoutCleared 1969                    ?_CC2500_PowerOnInitial 0070  
                         Exception_Main@i 0031                                ?_Temp_Main 0070  
                     __size_of_setRF_Main 00D7                          ___lwdiv@dividend 0023  
                   DelayOffPointSelect@sw 0022                             _getCmd_Status 1AC8  
                              setBuz@time 002A                           ??_setCmd_Status 0022  
                     setDelayOff_GO@value 0067                  ?_setControl_Lights_Table 0070  
                        ?_getRF_KeyStatus 0070                            Load_Main@error 002B  
                  _setTemp_Initialization 07FF                                 _getBuz_GO 1AA6  
                ?_setDimmerLights_Dimming 006B       __end_of_Flash_Memory_Initialization 056D  
             _Flash_Memory_Initialization 047E                                  ?___awdiv 0021  
                               __ptext100 1A95                                 __ptext101 1AC8  
                                ?___lbdiv 0070                                 __ptext110 0B96  
                               __ptext102 13AE                                 __ptext111 19CF  
                               __ptext103 0F45                                 __ptext120 19EB  
                               __ptext112 0D38                                 __ptext104 1B34  
                               __ptext121 1952                                 __ptext113 0388  
                               __ptext105 16CE                                 __ptext130 1A84  
                               __ptext122 10A3                                 __ptext114 1E9F  
                               __ptext106 1D25                                 __ptext131 1C11  
                               __ptext123 199F                                 __ptext115 1608  
                               __ptext107 1C28                                 __ptext140 0816  
                               __ptext132 1997                                 __ptext124 09C3  
                               __ptext116 1000                                 __ptext108 1FD5  
                               __ptext141 1A17                                 __ptext133 197E  
                               __ptext125 1A23                                 __ptext117 121E  
                               __ptext109 1669                                  ?___ftadd 0042  
                               __ptext142 1F81                                 __ptext134 1BFA  
                               __ptext126 15AC                                 __ptext118 19A7  
                               __ptext143 1F57                                 __ptext135 1364  
                               __ptext127 14F8                                 __ptext119 10D4  
                               __ptext144 1A77                                 __ptext136 1953  
                               __ptext128 14A4                                 __ptext145 1E1B  
                               __ptext129 11A8                                 __ptext138 1E3C  
                               __ptext139 087F                                 _getRxData 0A32  
                                ?___ftdiv 002F                                  ?___ftneg 003F  
                                ?___ftmul 002F                                  ?___fttol 004F  
                   __size_of_my_MainTimer 003D                                  ?___lwdiv 0021  
                 __end_of_setRFSW_Control 1320                          ??_setProductData 0064  
           __size_of_setSw_Initialization 0008            __size_of_Buzzer_Initialization 0003  
           __end_of_Buzzer_Initialization 1956                             ??_setLog_Code 0066  
                getDimmerLights_Line@line 0022                        __end_of_TouchPower 1BFA  
                     __size_of_setSw_Main 0186              CC2500_ReadStatus@status_addr 0024  
      __end_of_getDimmerIntr_DimmingValue 1016              ??_setDimmerIntr_DimmingValue 0022  
              _getDimmerIntr_DimmingValue 1000                    CC2500_WriteByte@loop_a 0022  
          __size_of_setDimmerLights_OnOff 00D5                                 _r_address 00D8  
           __end_of_setDimmerLights_OnOff 07F0            __size_of_setDimmerLights_SwOff 0039  
          __size_of_myMain_Initialization 0013             __end_of_setDimmerLights_SwOff 11E1  
            __end_of_CC2500_patable_vaule 1866             __end_of_myMain_Initialization 1B93  
                          __size_of_getAD 0021                          ___lwdiv@quotient 0026  
                           _SwPointSelect 1C56                       __end_of_setLED_Main 12DD  
                        ??_getDelayOff_GO 0023                    ??_setRF_Initialization 0021  
             __end_of_Temp_Initialization 1962                         _CC2500_rfSettings 182F  
                          ___wmul@product 0025                                  _LED_Main 1A53  
                         SwPointSelect@sw 0022                                 clear_ram0 198A  
                CC2500_InitPATable@loop_d 0028                     ?_setRF_TimeoutCleared 0070  
                            _my_MainTimer 11E1                                 _setTxData 0F45  
     __end_of_DimmerLights_Initialization 19F6               _DimmerLights_Initialization 19EB  
                      _CC2500_ClearRXFIFO 196D                            ?_getCmd_Status 0070  
                      _CC2500_ClearTXFIFO 1971                  setRF_DimmerLights@lights 006A  
                                _GO_nDONE 04E9                       __end_of_setRF_Learn 1BBB  
                       ??_Timeout_Counter 0021                                ?_getBuz_GO 0021  
                setRF_DimmerLights@status 0069      __size_of_setDimmerIntr_ControlStatus 002F  
             __size_of_setRFSW_AdjControl 0080       __size_of_setDimmerIntr_DimmingValue 0017  
                      _Flash_Memory_Write 1074                                ?_getRxData 0070  
                            ??_getLoad_AD 0025                                  _TMR1_ISR 1E3C  
                  CC2500_InitSetREG@temp1 0027                    CC2500_InitSetREG@temp2 0028  
                            ??_getLoad_OK 0021                                  _TMR1_Set 1A5F  
                     ?_CC2500_ClearRXFIFO 0070                       ?_CC2500_ClearTXFIFO 0070  
                      _setRF_TransceiveGO 1B34                                  _RF_Count 013E  
                    __end_of_RF_RxDisable 07FF                              ??_getTemp_AD 0025  
             __end_of_CC2500_WriteCommand 1CD3                    ??_CC2500_FrequencyCabr 0027  
                                _WDT_Main 1B22                   DlyOff_Initialization@sw 0023  
                   getSw_KeyStatus@status 0024                          __size_of_ADC_Set 0007  
                       ___wmul@multiplier 0021                       ?_Flash_Memory_Write 0070  
                   __size_of_setTemp_Main 00B0                       ?_setRF_TransceiveGO 0070  
                 __size_of_setDelayOff_GO 008C                                  _DelayOff 00CD  
                            setSw_Main@sw 0035                               ??_Load_Main 0029  
                        __size_of_IOC_ISR 000C            getMain_All_Error_Status@status 0027  
                        __size_of_IOC_Set 000A              __end_of_Flash_Memory_Erasing 1A47  
                          ?_SwPointSelect 0070                               getAD@adcon0 0024  
                             getAD@adcon1 0021                            setLED_Main@led 0025  
                    __end_of_WDT_Clearing 0004                       __end_of_setLog_Code 113B  
                   _DlyOff_Initialization 197E         __size_of_getMain_All_LightsStatus 0013  
                    ??_CC2500_ClearRXFIFO 0025                                  _Division 1A77  
               ?_getMain_All_LightsStatus 0070                      ??_CC2500_ClearTXFIFO 0025  
               __end_of_CC2500_rfSettings 185E                          __size_of_RF_Main 0003  
                _setDimmerIntr_Dimming_RF 1045               setDimmerLights_OnOff@lights 00E8  
                _setDimmerIntr_Dimming_Sw 1FD5                                  _Fosc_Set 1965  
                        __size_of_WDT_Set 000B                     setRFSW_Control@status 00E6  
                      __end_of_getLoad_AD 0B16                        __end_of_getLoad_OK 19AF  
                   _Switch_Initialization 19C7         __size_of_getMain_All_Error_Status 0033  
                    ??_Flash_Memory_Write 0021                 ?_getMain_All_Error_Status 0070  
                    __size_of_Buzzer_Main 004A                        __end_of_getTemp_AD 129C  
                              ?_setTxData 0070                              ?_Switch_Main 0070  
                        _CC2500_WriteByte 1C86                         getLoad_AD@channel 0027  
     __size_of_DimmerLights_SelectPointer 0017                      ??_setRF_TransceiveGO 0021  
            Flash_Memory_Initialization@i 0064                                  _SwDetect 00D6  
                             ??_Temp_Main 0067                          getCmd_Status@cmd 0022  
                        setCmd_Status@cmd 0021                         setRFSW_Control@sw 00E7  
           _getMain_All_Error_Status$6812 0022             _getMain_All_Error_Status$6813 0024  
                __end_of_getDimmer_LoadGO 19B7                       _Load_Initialization 1956  
        ??_getDimmerLights_ValueToPercent 005D           ?_getDimmerLights_ValueToPercent 0070  
                               setLED@led 0024                              _setTemp_Main 0DE1  
                        __size_of___awdiv 0054                          __size_of___lbdiv 0021  
                        __size_of___ftadd 00F6                          ?_setRFSW_Control 0070  
                        __size_of___ftdiv 00A9                          __size_of___ftneg 0009  
                        __size_of___ftmul 00B4                          __size_of___fttol 0087  
                        __size_of___lwdiv 0037                  setDimmerLights_SwOn@idle 0031  
                                ___awtoft 1E9F                          ??_LedPointSelect 0021  
                                ___ftpack 1608             __size_of_getMain_Lights_Count 0012  
                  getDimmer_LoadGO@loadgo 0021                         getTemp_AD@channel 0026  
                            ??_setRF_Main 00EA                      CC2500_WriteREG@value 0023  
                             _setLED_Main 129C                __end_of_setRF_DimmerLights 1733  
          __size_of_getDimmer_Load_Status 0008                  ?_DelayOff_Initialization 0070  
                        getDelayOff_GO@go 0024                          getDelayOff_GO@sw 0023  
           __end_of_getDimmer_Load_Status 19BF                          setDelayOff_GO@sw 006D  
                         ___lwdiv@divisor 0021                      ?_Load_Initialization 0070  
                         ___lwdiv@counter 0028                                  __ptext10 195F  
                                __ptext11 07FF                                  __ptext20 0800  
                                __ptext12 1A0C                                  __ptext21 19C7  
                                __ptext13 0202                                  __ptext30 0B16  
                                __ptext22 19BF                                  __ptext14 1BA7  
                                __ptext31 1B5A                                  __ptext23 195C  
                                __ptext15 1F2F                                  __ptext40 1BD0  
                                __ptext32 1CEE                                  __ptext24 056D  
                                __ptext16 1D9C                                  __ptext41 1975  
                                __ptext33 1AB7                                  __ptext25 0A32  
                                __ptext17 1C56                                  __ptext50 1CB9  
                                __ptext42 1320                                  __ptext34 1AA6  
                                __ptext26 1107                                  __ptext18 1BE5  
                                __ptext51 1969                                  __ptext43 1FAB  
                                __ptext35 07F0                                  __ptext27 1B6D  
                                __ptext19 1979                                  __ptext60 19E1  
                                __ptext52 1BBB                                  __ptext44 1D7D  
                                __ptext36 08E8                                  __ptext28 0CA9  
                                __ptext61 1965                                  __ptext53 1C86  
                                __ptext45 1EC1                                  __ptext37 0955  
                                __ptext29 12DD                                  __ptext70 1956  
                                __ptext62 1990                                  __ptext54 1959  
                                __ptext46 1A6B                                  __ptext38 1EE4  
                                __ptext71 1D09                                  __ptext63 0052  
                                __ptext55 1A01                                  __ptext47 1F09  
                                __ptext39 1D42                                  __ptext80 1A2F  
                                __ptext72 1A53                                  __ptext64 1AFE  
                                __ptext56 1B10                                  __ptext48 1971  
                                __ptext81 1074                                  __ptext73 129C  
                                __ptext65 19B7                                  __ptext57 19F6  
                                __ptext49 196D                                  __ptext90 1DBB  
                                __ptext82 19D8                                  __ptext74 1A47  
                                __ptext66 19AF                                  __ptext58 1A5F  
                                __ptext91 1045                                  __ptext83 1C9F  
                                __ptext75 1AEC                                  __ptext67 1E5D  
                                __ptext59 1CD3                                  __ptext92 1C3F  
                                __ptext84 0644                                  __ptext76 113B  
                                __ptext68 1D5F                                  __ptext93 1016  
                                __ptext85 1B93                                  __ptext77 13FF  
                                __ptext69 1171                                  __ptext94 0C1D  
                                __ptext86 1DDB                                  __ptext78 1A3B  
                                __ptext95 1ADA                                  __ptext87 1798  
                                __ptext79 047E                                  __ptext96 1C6D  
                                __ptext88 071B                                  __ptext97 1B47  
                                __ptext89 1451                                  __ptext98 1733  
                                __ptext99 0E91                                  __product 0245  
                 ??_setLED_Initialization 0025                  ??_getDimmerLights_Status 0023  
            __end_of_getDimmerLights_Line 1BA7              __end_of_setDimmerLights_Main 1800  
            __end_of_setDimmerLights_Line 1D42                        _DimmerLights_IOC_1 1F57  
                      _DimmerLights_IOC_2 1F81              __end_of_setDimmerLights_SwOn 1608  
                            ??_setSw_Main 0033                    ??_setRF_TimeoutCleared 0021  
            ??_setDimmerLights_DimmingRun 0024                             setLED@command 0023  
                           __size_of_main 005B                               _setRF_Learn 1BA7  
      __size_of_DimmerIntr_Initialization 0031                           ??_getCmd_Status 0021  
                      _DimmerLights_TMR_1 0816                        _DimmerLights_TMR_2 087F  
                __end_of_CC2500_SIDLEMode 1979                setDimmerLights_Main@lights 00E9  
             __end_of_DelayOffPointSelect 1C11                CC2500_WriteCommand@command 0024  
                         _CC2500_ReadByte 1D42                ?_setDimmerLights_DimmingOn 0070  
                      _CC2500_InitPATable 1D7D                  __end_of_setMemory_Modify 1B6D  
    _getAll_DimmerIntr_Dimming_Sw_RF$2260 0022      _getAll_DimmerIntr_Dimming_Sw_RF$2261 0023  
                     ?_DimmerLights_IOC_1 0070                       ?_DimmerLights_IOC_2 0070  
                      __end_of_setRF_Main 0644                               ??_getBuz_GO 0023  
                     ?_DimmerLights_TMR_1 0070                       ?_DimmerLights_TMR_2 0070  
             __size_of_Mcu_Initialization 0012                      _CC2500_patable_vaule 185E  
                             ??_getRxData 00E8                              getLoad_OK@ok 0021  
              __end_of_RF_Timeout_Counter 1BD0                                  main@argc 0265  
                                main@argv 0267                       ?_CC2500_InitPATable 0070  
                    _getSw_KeyStatus$6080 0023                      _getSw_KeyStatus$6079 0022  
     getDimmerLights_ValueToPercent@value 005F                           _CC2500_PowerRST 1320  
                __size_of_getSw_KeyStatus 001F        __end_of_setDimmerIntr_DimmingValue 1C56  
              _setDimmerIntr_DimmingValue 1C3F               __end_of_Flash_Memory_Modify 1451  
                             _setLog_Code 1107               __end_of_Flash_Memory_Unlock 19E1  
                         ??_SwPointSelect 0021                           _CC2500_WriteREG 1EC1  
                      __end_of_setSw_Main 0388                     ??_Load_Initialization 0023  
                    ??_DimmerLights_IOC_1 007A                      ??_DimmerLights_IOC_2 007A  
         getDimmerLights_PercentToValue@i 0060       __size_of_setDimmerLights_DimmingRun 001B  
                           _Transceive_OK 0371                    ?_DlyOff_Initialization 0070  
                    ??_DimmerLights_TMR_1 0070                      ??_DimmerLights_TMR_2 0070  
                          Division@result 0079                               pic14e$flags 007E  
            ??_getDimmerIntr_DimmingValue 0021                setDimmerLights_Line@lights 0021  
                 setDimmerLights_SwOff@sw 0023               __size_of_setMemory_LoopSave 0013  
                                intlevel1 0000                      ??_CC2500_InitPATable 0026  
                  ?_Switch_Initialization 0070                           setDelayOff_GO@i 006A  
                         setDelayOff_GO@j 006B                           setDelayOff_GO@k 006C  
                 ??_CC2500_PowerOnInitial 002A                     setTemp_Main@SafeValue 00E7  
  __end_of_setDimmerLights_Initialization 1953   __size_of_setDimmerLights_Initialization 0001  
          _setDimmerLights_Initialization 1952                ?_setDimmerIntr_MaxmumValue 0063  
                 ?_setTemp_Initialization 0070                               ??_setTxData 0021  
                  CC2500_InitPATable@temp 0027                           getLoad_AD@ADRES 002A  
                   __size_of_RF_RxDisable 000F                         _RF_Initialization 1959  
                             getLoad_AD@i 002C                               getLoad_AD@j 0029  
                             getLoad_AD@k 0028                      _Flash_Memory_Erasing 1A3B  
                      ?_RF_Initialization 0070                                _SPI0Buffer 00D4  
                 __size_of_Exception_Main 00D7                             Division@value 0078  
         __end_of_DelayOff_Initialization 199F                     __size_of_WDT_Clearing 0002  
                   __end_of_DelayOff_Main 19A7                       ??_RF_Initialization 0022  
                 __size_of_setMemory_Data 000C                            _setDelayOff_GO 0C1D  
             ?_getDimmerIntr_DimmingValue 0070          __size_of_setControl_Lights_Table 008F  
        __size_of_setDimmerLights_Dimming 0051               getDimmer_Load_Status@status 0021  
    __size_of_Flash_Memory_Initialization 00EF               __size_of_set_TimeoutCleared 0005  
                           ??_DlyOff_Main 0066                     setMemory_Data@address 0023  
                   __end_of_DelayTime_1us 1F2F                   __end_of_CC2500_ReadByte 1D5F  
            __end_of_setSw_Initialization 19C7                           _Timeout_Counter 0800  
         __size_of_getDimmerLights_Status 0011           getDimmerLights_ValueToPercent@i 0060  
                            _RF_RxDisable 07F0                __end_of_LED_Initialization 1A53  
          __end_of_setTemp_Initialization 0800                               Division@num 0075  
                 setMemory_Modify@command 0022                   DimmerLights_IOC_1@count 007C  
                 DimmerLights_IOC_2@count 007C                 __end_of_RF_Initialization 195C  
                   __end_of_CC2500_RxData 09C3                     __end_of_CC2500_TxData 0955  
                   _setLoad_AH_AL_Restore 1D09                   __end_of_CC2500_PowerRST 1364  
