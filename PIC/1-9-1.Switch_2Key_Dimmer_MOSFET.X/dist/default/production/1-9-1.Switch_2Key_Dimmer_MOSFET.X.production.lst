

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Wed Feb 25 11:38:37 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bitbssBANK1,global,bit,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,inline,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,inline,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,inline,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,inline,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,inline,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,delta=2
   146                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,delta=2
   152                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	text134,local,class=CODE,merge=1,delta=2
   155                           	psect	text135,local,class=CODE,merge=1,delta=2
   156                           	psect	text136,local,class=CODE,merge=1,inline,delta=2
   157                           	psect	text137,local,class=CODE,merge=1,inline,delta=2
   158                           	psect	intentry,global,class=CODE,delta=2
   159                           	psect	text139,local,class=CODE,merge=1,inline,delta=2
   160                           	psect	text140,local,class=CODE,merge=1,inline,delta=2
   161                           	psect	text141,local,class=CODE,merge=1,inline,delta=2
   162                           	psect	text142,local,class=CODE,merge=1,inline,delta=2
   163                           	psect	text143,local,class=CODE,merge=1,inline,delta=2
   164                           	psect	text144,local,class=CODE,merge=1,inline,delta=2
   165                           	psect	text145,local,class=CODE,merge=1,inline,delta=2
   166                           	psect	text146,local,class=CODE,merge=1,delta=2
   167                           	dabs	1,0x7E,2
   168  0000                     	;# 
   169  0001                     	;# 
   170  0002                     	;# 
   171  0003                     	;# 
   172  0004                     	;# 
   173  0005                     	;# 
   174  0006                     	;# 
   175  0007                     	;# 
   176  0008                     	;# 
   177  0009                     	;# 
   178  000A                     	;# 
   179  000B                     	;# 
   180  000C                     	;# 
   181  000D                     	;# 
   182  000E                     	;# 
   183  0010                     	;# 
   184  0011                     	;# 
   185  0012                     	;# 
   186  0015                     	;# 
   187  0016                     	;# 
   188  0016                     	;# 
   189  0017                     	;# 
   190  0018                     	;# 
   191  0019                     	;# 
   192  001A                     	;# 
   193  001B                     	;# 
   194  001C                     	;# 
   195  008C                     	;# 
   196  008D                     	;# 
   197  008E                     	;# 
   198  0090                     	;# 
   199  0091                     	;# 
   200  0092                     	;# 
   201  0095                     	;# 
   202  0096                     	;# 
   203  0097                     	;# 
   204  0099                     	;# 
   205  009A                     	;# 
   206  009B                     	;# 
   207  009B                     	;# 
   208  009C                     	;# 
   209  009D                     	;# 
   210  009E                     	;# 
   211  010C                     	;# 
   212  010D                     	;# 
   213  010E                     	;# 
   214  0116                     	;# 
   215  0117                     	;# 
   216  011D                     	;# 
   217  018C                     	;# 
   218  018D                     	;# 
   219  018E                     	;# 
   220  0191                     	;# 
   221  0191                     	;# 
   222  0192                     	;# 
   223  0193                     	;# 
   224  0193                     	;# 
   225  0194                     	;# 
   226  0195                     	;# 
   227  0196                     	;# 
   228  0197                     	;# 
   229  0199                     	;# 
   230  019A                     	;# 
   231  019B                     	;# 
   232  019B                     	;# 
   233  019B                     	;# 
   234  019B                     	;# 
   235  019C                     	;# 
   236  019C                     	;# 
   237  019D                     	;# 
   238  019E                     	;# 
   239  019F                     	;# 
   240  020D                     	;# 
   241  0210                     	;# 
   242  0211                     	;# 
   243  0211                     	;# 
   244  0212                     	;# 
   245  0212                     	;# 
   246  0213                     	;# 
   247  0213                     	;# 
   248  0214                     	;# 
   249  0214                     	;# 
   250  0215                     	;# 
   251  0215                     	;# 
   252  0215                     	;# 
   253  0216                     	;# 
   254  0216                     	;# 
   255  0217                     	;# 
   256  0217                     	;# 
   257  0291                     	;# 
   258  0291                     	;# 
   259  0292                     	;# 
   260  0293                     	;# 
   261  0298                     	;# 
   262  0298                     	;# 
   263  0299                     	;# 
   264  029A                     	;# 
   265  0394                     	;# 
   266  0395                     	;# 
   267  0396                     	;# 
   268  0FE4                     	;# 
   269  0FE5                     	;# 
   270  0FE6                     	;# 
   271  0FE7                     	;# 
   272  0FE8                     	;# 
   273  0FE9                     	;# 
   274  0FEA                     	;# 
   275  0FEB                     	;# 
   276  0FED                     	;# 
   277  0FEE                     	;# 
   278  0FEF                     	;# 
   279  0000                     	;# 
   280  0001                     	;# 
   281  0002                     	;# 
   282  0003                     	;# 
   283  0004                     	;# 
   284  0005                     	;# 
   285  0006                     	;# 
   286  0007                     	;# 
   287  0008                     	;# 
   288  0009                     	;# 
   289  000A                     	;# 
   290  000B                     	;# 
   291  000C                     	;# 
   292  000D                     	;# 
   293  000E                     	;# 
   294  0010                     	;# 
   295  0011                     	;# 
   296  0012                     	;# 
   297  0015                     	;# 
   298  0016                     	;# 
   299  0016                     	;# 
   300  0017                     	;# 
   301  0018                     	;# 
   302  0019                     	;# 
   303  001A                     	;# 
   304  001B                     	;# 
   305  001C                     	;# 
   306  008C                     	;# 
   307  008D                     	;# 
   308  008E                     	;# 
   309  0090                     	;# 
   310  0091                     	;# 
   311  0092                     	;# 
   312  0095                     	;# 
   313  0096                     	;# 
   314  0097                     	;# 
   315  0099                     	;# 
   316  009A                     	;# 
   317  009B                     	;# 
   318  009B                     	;# 
   319  009C                     	;# 
   320  009D                     	;# 
   321  009E                     	;# 
   322  010C                     	;# 
   323  010D                     	;# 
   324  010E                     	;# 
   325  0116                     	;# 
   326  0117                     	;# 
   327  011D                     	;# 
   328  018C                     	;# 
   329  018D                     	;# 
   330  018E                     	;# 
   331  0191                     	;# 
   332  0191                     	;# 
   333  0192                     	;# 
   334  0193                     	;# 
   335  0193                     	;# 
   336  0194                     	;# 
   337  0195                     	;# 
   338  0196                     	;# 
   339  0197                     	;# 
   340  0199                     	;# 
   341  019A                     	;# 
   342  019B                     	;# 
   343  019B                     	;# 
   344  019B                     	;# 
   345  019B                     	;# 
   346  019C                     	;# 
   347  019C                     	;# 
   348  019D                     	;# 
   349  019E                     	;# 
   350  019F                     	;# 
   351  020D                     	;# 
   352  0210                     	;# 
   353  0211                     	;# 
   354  0211                     	;# 
   355  0212                     	;# 
   356  0212                     	;# 
   357  0213                     	;# 
   358  0213                     	;# 
   359  0214                     	;# 
   360  0214                     	;# 
   361  0215                     	;# 
   362  0215                     	;# 
   363  0215                     	;# 
   364  0216                     	;# 
   365  0216                     	;# 
   366  0217                     	;# 
   367  0217                     	;# 
   368  0291                     	;# 
   369  0291                     	;# 
   370  0292                     	;# 
   371  0293                     	;# 
   372  0298                     	;# 
   373  0298                     	;# 
   374  0299                     	;# 
   375  029A                     	;# 
   376  0394                     	;# 
   377  0395                     	;# 
   378  0396                     	;# 
   379  0FE4                     	;# 
   380  0FE5                     	;# 
   381  0FE6                     	;# 
   382  0FE7                     	;# 
   383  0FE8                     	;# 
   384  0FE9                     	;# 
   385  0FEA                     	;# 
   386  0FEB                     	;# 
   387  0FED                     	;# 
   388  0FEE                     	;# 
   389  0FEF                     	;# 
   390  0000                     	;# 
   391  0001                     	;# 
   392  0002                     	;# 
   393  0003                     	;# 
   394  0004                     	;# 
   395  0005                     	;# 
   396  0006                     	;# 
   397  0007                     	;# 
   398  0008                     	;# 
   399  0009                     	;# 
   400  000A                     	;# 
   401  000B                     	;# 
   402  000C                     	;# 
   403  000D                     	;# 
   404  000E                     	;# 
   405  0010                     	;# 
   406  0011                     	;# 
   407  0012                     	;# 
   408  0015                     	;# 
   409  0016                     	;# 
   410  0016                     	;# 
   411  0017                     	;# 
   412  0018                     	;# 
   413  0019                     	;# 
   414  001A                     	;# 
   415  001B                     	;# 
   416  001C                     	;# 
   417  008C                     	;# 
   418  008D                     	;# 
   419  008E                     	;# 
   420  0090                     	;# 
   421  0091                     	;# 
   422  0092                     	;# 
   423  0095                     	;# 
   424  0096                     	;# 
   425  0097                     	;# 
   426  0099                     	;# 
   427  009A                     	;# 
   428  009B                     	;# 
   429  009B                     	;# 
   430  009C                     	;# 
   431  009D                     	;# 
   432  009E                     	;# 
   433  010C                     	;# 
   434  010D                     	;# 
   435  010E                     	;# 
   436  0116                     	;# 
   437  0117                     	;# 
   438  011D                     	;# 
   439  018C                     	;# 
   440  018D                     	;# 
   441  018E                     	;# 
   442  0191                     	;# 
   443  0191                     	;# 
   444  0192                     	;# 
   445  0193                     	;# 
   446  0193                     	;# 
   447  0194                     	;# 
   448  0195                     	;# 
   449  0196                     	;# 
   450  0197                     	;# 
   451  0199                     	;# 
   452  019A                     	;# 
   453  019B                     	;# 
   454  019B                     	;# 
   455  019B                     	;# 
   456  019B                     	;# 
   457  019C                     	;# 
   458  019C                     	;# 
   459  019D                     	;# 
   460  019E                     	;# 
   461  019F                     	;# 
   462  020D                     	;# 
   463  0210                     	;# 
   464  0211                     	;# 
   465  0211                     	;# 
   466  0212                     	;# 
   467  0212                     	;# 
   468  0213                     	;# 
   469  0213                     	;# 
   470  0214                     	;# 
   471  0214                     	;# 
   472  0215                     	;# 
   473  0215                     	;# 
   474  0215                     	;# 
   475  0216                     	;# 
   476  0216                     	;# 
   477  0217                     	;# 
   478  0217                     	;# 
   479  0291                     	;# 
   480  0291                     	;# 
   481  0292                     	;# 
   482  0293                     	;# 
   483  0298                     	;# 
   484  0298                     	;# 
   485  0299                     	;# 
   486  029A                     	;# 
   487  0394                     	;# 
   488  0395                     	;# 
   489  0396                     	;# 
   490  0FE4                     	;# 
   491  0FE5                     	;# 
   492  0FE6                     	;# 
   493  0FE7                     	;# 
   494  0FE8                     	;# 
   495  0FE9                     	;# 
   496  0FEA                     	;# 
   497  0FEB                     	;# 
   498  0FED                     	;# 
   499  0FEE                     	;# 
   500  0FEF                     	;# 
   501  0000                     	;# 
   502  0001                     	;# 
   503  0002                     	;# 
   504  0003                     	;# 
   505  0004                     	;# 
   506  0005                     	;# 
   507  0006                     	;# 
   508  0007                     	;# 
   509  0008                     	;# 
   510  0009                     	;# 
   511  000A                     	;# 
   512  000B                     	;# 
   513  000C                     	;# 
   514  000D                     	;# 
   515  000E                     	;# 
   516  0010                     	;# 
   517  0011                     	;# 
   518  0012                     	;# 
   519  0015                     	;# 
   520  0016                     	;# 
   521  0016                     	;# 
   522  0017                     	;# 
   523  0018                     	;# 
   524  0019                     	;# 
   525  001A                     	;# 
   526  001B                     	;# 
   527  001C                     	;# 
   528  008C                     	;# 
   529  008D                     	;# 
   530  008E                     	;# 
   531  0090                     	;# 
   532  0091                     	;# 
   533  0092                     	;# 
   534  0095                     	;# 
   535  0096                     	;# 
   536  0097                     	;# 
   537  0099                     	;# 
   538  009A                     	;# 
   539  009B                     	;# 
   540  009B                     	;# 
   541  009C                     	;# 
   542  009D                     	;# 
   543  009E                     	;# 
   544  010C                     	;# 
   545  010D                     	;# 
   546  010E                     	;# 
   547  0116                     	;# 
   548  0117                     	;# 
   549  011D                     	;# 
   550  018C                     	;# 
   551  018D                     	;# 
   552  018E                     	;# 
   553  0191                     	;# 
   554  0191                     	;# 
   555  0192                     	;# 
   556  0193                     	;# 
   557  0193                     	;# 
   558  0194                     	;# 
   559  0195                     	;# 
   560  0196                     	;# 
   561  0197                     	;# 
   562  0199                     	;# 
   563  019A                     	;# 
   564  019B                     	;# 
   565  019B                     	;# 
   566  019B                     	;# 
   567  019B                     	;# 
   568  019C                     	;# 
   569  019C                     	;# 
   570  019D                     	;# 
   571  019E                     	;# 
   572  019F                     	;# 
   573  020D                     	;# 
   574  0210                     	;# 
   575  0211                     	;# 
   576  0211                     	;# 
   577  0212                     	;# 
   578  0212                     	;# 
   579  0213                     	;# 
   580  0213                     	;# 
   581  0214                     	;# 
   582  0214                     	;# 
   583  0215                     	;# 
   584  0215                     	;# 
   585  0215                     	;# 
   586  0216                     	;# 
   587  0216                     	;# 
   588  0217                     	;# 
   589  0217                     	;# 
   590  0291                     	;# 
   591  0291                     	;# 
   592  0292                     	;# 
   593  0293                     	;# 
   594  0298                     	;# 
   595  0298                     	;# 
   596  0299                     	;# 
   597  029A                     	;# 
   598  0394                     	;# 
   599  0395                     	;# 
   600  0396                     	;# 
   601  0FE4                     	;# 
   602  0FE5                     	;# 
   603  0FE6                     	;# 
   604  0FE7                     	;# 
   605  0FE8                     	;# 
   606  0FE9                     	;# 
   607  0FEA                     	;# 
   608  0FEB                     	;# 
   609  0FED                     	;# 
   610  0FEE                     	;# 
   611  0FEF                     	;# 
   612  0000                     	;# 
   613  0001                     	;# 
   614  0002                     	;# 
   615  0003                     	;# 
   616  0004                     	;# 
   617  0005                     	;# 
   618  0006                     	;# 
   619  0007                     	;# 
   620  0008                     	;# 
   621  0009                     	;# 
   622  000A                     	;# 
   623  000B                     	;# 
   624  000C                     	;# 
   625  000D                     	;# 
   626  000E                     	;# 
   627  0010                     	;# 
   628  0011                     	;# 
   629  0012                     	;# 
   630  0015                     	;# 
   631  0016                     	;# 
   632  0016                     	;# 
   633  0017                     	;# 
   634  0018                     	;# 
   635  0019                     	;# 
   636  001A                     	;# 
   637  001B                     	;# 
   638  001C                     	;# 
   639  008C                     	;# 
   640  008D                     	;# 
   641  008E                     	;# 
   642  0090                     	;# 
   643  0091                     	;# 
   644  0092                     	;# 
   645  0095                     	;# 
   646  0096                     	;# 
   647  0097                     	;# 
   648  0099                     	;# 
   649  009A                     	;# 
   650  009B                     	;# 
   651  009B                     	;# 
   652  009C                     	;# 
   653  009D                     	;# 
   654  009E                     	;# 
   655  010C                     	;# 
   656  010D                     	;# 
   657  010E                     	;# 
   658  0116                     	;# 
   659  0117                     	;# 
   660  011D                     	;# 
   661  018C                     	;# 
   662  018D                     	;# 
   663  018E                     	;# 
   664  0191                     	;# 
   665  0191                     	;# 
   666  0192                     	;# 
   667  0193                     	;# 
   668  0193                     	;# 
   669  0194                     	;# 
   670  0195                     	;# 
   671  0196                     	;# 
   672  0197                     	;# 
   673  0199                     	;# 
   674  019A                     	;# 
   675  019B                     	;# 
   676  019B                     	;# 
   677  019B                     	;# 
   678  019B                     	;# 
   679  019C                     	;# 
   680  019C                     	;# 
   681  019D                     	;# 
   682  019E                     	;# 
   683  019F                     	;# 
   684  020D                     	;# 
   685  0210                     	;# 
   686  0211                     	;# 
   687  0211                     	;# 
   688  0212                     	;# 
   689  0212                     	;# 
   690  0213                     	;# 
   691  0213                     	;# 
   692  0214                     	;# 
   693  0214                     	;# 
   694  0215                     	;# 
   695  0215                     	;# 
   696  0215                     	;# 
   697  0216                     	;# 
   698  0216                     	;# 
   699  0217                     	;# 
   700  0217                     	;# 
   701  0291                     	;# 
   702  0291                     	;# 
   703  0292                     	;# 
   704  0293                     	;# 
   705  0298                     	;# 
   706  0298                     	;# 
   707  0299                     	;# 
   708  029A                     	;# 
   709  0394                     	;# 
   710  0395                     	;# 
   711  0396                     	;# 
   712  0FE4                     	;# 
   713  0FE5                     	;# 
   714  0FE6                     	;# 
   715  0FE7                     	;# 
   716  0FE8                     	;# 
   717  0FE9                     	;# 
   718  0FEA                     	;# 
   719  0FEB                     	;# 
   720  0FED                     	;# 
   721  0FEE                     	;# 
   722  0FEF                     	;# 
   723  0000                     	;# 
   724  0001                     	;# 
   725  0002                     	;# 
   726  0003                     	;# 
   727  0004                     	;# 
   728  0005                     	;# 
   729  0006                     	;# 
   730  0007                     	;# 
   731  0008                     	;# 
   732  0009                     	;# 
   733  000A                     	;# 
   734  000B                     	;# 
   735  000C                     	;# 
   736  000D                     	;# 
   737  000E                     	;# 
   738  0010                     	;# 
   739  0011                     	;# 
   740  0012                     	;# 
   741  0015                     	;# 
   742  0016                     	;# 
   743  0016                     	;# 
   744  0017                     	;# 
   745  0018                     	;# 
   746  0019                     	;# 
   747  001A                     	;# 
   748  001B                     	;# 
   749  001C                     	;# 
   750  008C                     	;# 
   751  008D                     	;# 
   752  008E                     	;# 
   753  0090                     	;# 
   754  0091                     	;# 
   755  0092                     	;# 
   756  0095                     	;# 
   757  0096                     	;# 
   758  0097                     	;# 
   759  0099                     	;# 
   760  009A                     	;# 
   761  009B                     	;# 
   762  009B                     	;# 
   763  009C                     	;# 
   764  009D                     	;# 
   765  009E                     	;# 
   766  010C                     	;# 
   767  010D                     	;# 
   768  010E                     	;# 
   769  0116                     	;# 
   770  0117                     	;# 
   771  011D                     	;# 
   772  018C                     	;# 
   773  018D                     	;# 
   774  018E                     	;# 
   775  0191                     	;# 
   776  0191                     	;# 
   777  0192                     	;# 
   778  0193                     	;# 
   779  0193                     	;# 
   780  0194                     	;# 
   781  0195                     	;# 
   782  0196                     	;# 
   783  0197                     	;# 
   784  0199                     	;# 
   785  019A                     	;# 
   786  019B                     	;# 
   787  019B                     	;# 
   788  019B                     	;# 
   789  019B                     	;# 
   790  019C                     	;# 
   791  019C                     	;# 
   792  019D                     	;# 
   793  019E                     	;# 
   794  019F                     	;# 
   795  020D                     	;# 
   796  0210                     	;# 
   797  0211                     	;# 
   798  0211                     	;# 
   799  0212                     	;# 
   800  0212                     	;# 
   801  0213                     	;# 
   802  0213                     	;# 
   803  0214                     	;# 
   804  0214                     	;# 
   805  0215                     	;# 
   806  0215                     	;# 
   807  0215                     	;# 
   808  0216                     	;# 
   809  0216                     	;# 
   810  0217                     	;# 
   811  0217                     	;# 
   812  0291                     	;# 
   813  0291                     	;# 
   814  0292                     	;# 
   815  0293                     	;# 
   816  0298                     	;# 
   817  0298                     	;# 
   818  0299                     	;# 
   819  029A                     	;# 
   820  0394                     	;# 
   821  0395                     	;# 
   822  0396                     	;# 
   823  0FE4                     	;# 
   824  0FE5                     	;# 
   825  0FE6                     	;# 
   826  0FE7                     	;# 
   827  0FE8                     	;# 
   828  0FE9                     	;# 
   829  0FEA                     	;# 
   830  0FEB                     	;# 
   831  0FED                     	;# 
   832  0FEE                     	;# 
   833  0FEF                     	;# 
   834  0000                     	;# 
   835  0001                     	;# 
   836  0002                     	;# 
   837  0003                     	;# 
   838  0004                     	;# 
   839  0005                     	;# 
   840  0006                     	;# 
   841  0007                     	;# 
   842  0008                     	;# 
   843  0009                     	;# 
   844  000A                     	;# 
   845  000B                     	;# 
   846  000C                     	;# 
   847  000D                     	;# 
   848  000E                     	;# 
   849  0010                     	;# 
   850  0011                     	;# 
   851  0012                     	;# 
   852  0015                     	;# 
   853  0016                     	;# 
   854  0016                     	;# 
   855  0017                     	;# 
   856  0018                     	;# 
   857  0019                     	;# 
   858  001A                     	;# 
   859  001B                     	;# 
   860  001C                     	;# 
   861  008C                     	;# 
   862  008D                     	;# 
   863  008E                     	;# 
   864  0090                     	;# 
   865  0091                     	;# 
   866  0092                     	;# 
   867  0095                     	;# 
   868  0096                     	;# 
   869  0097                     	;# 
   870  0099                     	;# 
   871  009A                     	;# 
   872  009B                     	;# 
   873  009B                     	;# 
   874  009C                     	;# 
   875  009D                     	;# 
   876  009E                     	;# 
   877  010C                     	;# 
   878  010D                     	;# 
   879  010E                     	;# 
   880  0116                     	;# 
   881  0117                     	;# 
   882  011D                     	;# 
   883  018C                     	;# 
   884  018D                     	;# 
   885  018E                     	;# 
   886  0191                     	;# 
   887  0191                     	;# 
   888  0192                     	;# 
   889  0193                     	;# 
   890  0193                     	;# 
   891  0194                     	;# 
   892  0195                     	;# 
   893  0196                     	;# 
   894  0197                     	;# 
   895  0199                     	;# 
   896  019A                     	;# 
   897  019B                     	;# 
   898  019B                     	;# 
   899  019B                     	;# 
   900  019B                     	;# 
   901  019C                     	;# 
   902  019C                     	;# 
   903  019D                     	;# 
   904  019E                     	;# 
   905  019F                     	;# 
   906  020D                     	;# 
   907  0210                     	;# 
   908  0211                     	;# 
   909  0211                     	;# 
   910  0212                     	;# 
   911  0212                     	;# 
   912  0213                     	;# 
   913  0213                     	;# 
   914  0214                     	;# 
   915  0214                     	;# 
   916  0215                     	;# 
   917  0215                     	;# 
   918  0215                     	;# 
   919  0216                     	;# 
   920  0216                     	;# 
   921  0217                     	;# 
   922  0217                     	;# 
   923  0291                     	;# 
   924  0291                     	;# 
   925  0292                     	;# 
   926  0293                     	;# 
   927  0298                     	;# 
   928  0298                     	;# 
   929  0299                     	;# 
   930  029A                     	;# 
   931  0394                     	;# 
   932  0395                     	;# 
   933  0396                     	;# 
   934  0FE4                     	;# 
   935  0FE5                     	;# 
   936  0FE6                     	;# 
   937  0FE7                     	;# 
   938  0FE8                     	;# 
   939  0FE9                     	;# 
   940  0FEA                     	;# 
   941  0FEB                     	;# 
   942  0FED                     	;# 
   943  0FEE                     	;# 
   944  0FEF                     	;# 
   945  0000                     	;# 
   946  0001                     	;# 
   947  0002                     	;# 
   948  0003                     	;# 
   949  0004                     	;# 
   950  0005                     	;# 
   951  0006                     	;# 
   952  0007                     	;# 
   953  0008                     	;# 
   954  0009                     	;# 
   955  000A                     	;# 
   956  000B                     	;# 
   957  000C                     	;# 
   958  000D                     	;# 
   959  000E                     	;# 
   960  0010                     	;# 
   961  0011                     	;# 
   962  0012                     	;# 
   963  0015                     	;# 
   964  0016                     	;# 
   965  0016                     	;# 
   966  0017                     	;# 
   967  0018                     	;# 
   968  0019                     	;# 
   969  001A                     	;# 
   970  001B                     	;# 
   971  001C                     	;# 
   972  008C                     	;# 
   973  008D                     	;# 
   974  008E                     	;# 
   975  0090                     	;# 
   976  0091                     	;# 
   977  0092                     	;# 
   978  0095                     	;# 
   979  0096                     	;# 
   980  0097                     	;# 
   981  0099                     	;# 
   982  009A                     	;# 
   983  009B                     	;# 
   984  009B                     	;# 
   985  009C                     	;# 
   986  009D                     	;# 
   987  009E                     	;# 
   988  010C                     	;# 
   989  010D                     	;# 
   990  010E                     	;# 
   991  0116                     	;# 
   992  0117                     	;# 
   993  011D                     	;# 
   994  018C                     	;# 
   995  018D                     	;# 
   996  018E                     	;# 
   997  0191                     	;# 
   998  0191                     	;# 
   999  0192                     	;# 
  1000  0193                     	;# 
  1001  0193                     	;# 
  1002  0194                     	;# 
  1003  0195                     	;# 
  1004  0196                     	;# 
  1005  0197                     	;# 
  1006  0199                     	;# 
  1007  019A                     	;# 
  1008  019B                     	;# 
  1009  019B                     	;# 
  1010  019B                     	;# 
  1011  019B                     	;# 
  1012  019C                     	;# 
  1013  019C                     	;# 
  1014  019D                     	;# 
  1015  019E                     	;# 
  1016  019F                     	;# 
  1017  020D                     	;# 
  1018  0210                     	;# 
  1019  0211                     	;# 
  1020  0211                     	;# 
  1021  0212                     	;# 
  1022  0212                     	;# 
  1023  0213                     	;# 
  1024  0213                     	;# 
  1025  0214                     	;# 
  1026  0214                     	;# 
  1027  0215                     	;# 
  1028  0215                     	;# 
  1029  0215                     	;# 
  1030  0216                     	;# 
  1031  0216                     	;# 
  1032  0217                     	;# 
  1033  0217                     	;# 
  1034  0291                     	;# 
  1035  0291                     	;# 
  1036  0292                     	;# 
  1037  0293                     	;# 
  1038  0298                     	;# 
  1039  0298                     	;# 
  1040  0299                     	;# 
  1041  029A                     	;# 
  1042  0394                     	;# 
  1043  0395                     	;# 
  1044  0396                     	;# 
  1045  0FE4                     	;# 
  1046  0FE5                     	;# 
  1047  0FE6                     	;# 
  1048  0FE7                     	;# 
  1049  0FE8                     	;# 
  1050  0FE9                     	;# 
  1051  0FEA                     	;# 
  1052  0FEB                     	;# 
  1053  0FED                     	;# 
  1054  0FEE                     	;# 
  1055  0FEF                     	;# 
  1056  0000                     	;# 
  1057  0001                     	;# 
  1058  0002                     	;# 
  1059  0003                     	;# 
  1060  0004                     	;# 
  1061  0005                     	;# 
  1062  0006                     	;# 
  1063  0007                     	;# 
  1064  0008                     	;# 
  1065  0009                     	;# 
  1066  000A                     	;# 
  1067  000B                     	;# 
  1068  000C                     	;# 
  1069  000D                     	;# 
  1070  000E                     	;# 
  1071  0010                     	;# 
  1072  0011                     	;# 
  1073  0012                     	;# 
  1074  0015                     	;# 
  1075  0016                     	;# 
  1076  0016                     	;# 
  1077  0017                     	;# 
  1078  0018                     	;# 
  1079  0019                     	;# 
  1080  001A                     	;# 
  1081  001B                     	;# 
  1082  001C                     	;# 
  1083  008C                     	;# 
  1084  008D                     	;# 
  1085  008E                     	;# 
  1086  0090                     	;# 
  1087  0091                     	;# 
  1088  0092                     	;# 
  1089  0095                     	;# 
  1090  0096                     	;# 
  1091  0097                     	;# 
  1092  0099                     	;# 
  1093  009A                     	;# 
  1094  009B                     	;# 
  1095  009B                     	;# 
  1096  009C                     	;# 
  1097  009D                     	;# 
  1098  009E                     	;# 
  1099  010C                     	;# 
  1100  010D                     	;# 
  1101  010E                     	;# 
  1102  0116                     	;# 
  1103  0117                     	;# 
  1104  011D                     	;# 
  1105  018C                     	;# 
  1106  018D                     	;# 
  1107  018E                     	;# 
  1108  0191                     	;# 
  1109  0191                     	;# 
  1110  0192                     	;# 
  1111  0193                     	;# 
  1112  0193                     	;# 
  1113  0194                     	;# 
  1114  0195                     	;# 
  1115  0196                     	;# 
  1116  0197                     	;# 
  1117  0199                     	;# 
  1118  019A                     	;# 
  1119  019B                     	;# 
  1120  019B                     	;# 
  1121  019B                     	;# 
  1122  019B                     	;# 
  1123  019C                     	;# 
  1124  019C                     	;# 
  1125  019D                     	;# 
  1126  019E                     	;# 
  1127  019F                     	;# 
  1128  020D                     	;# 
  1129  0210                     	;# 
  1130  0211                     	;# 
  1131  0211                     	;# 
  1132  0212                     	;# 
  1133  0212                     	;# 
  1134  0213                     	;# 
  1135  0213                     	;# 
  1136  0214                     	;# 
  1137  0214                     	;# 
  1138  0215                     	;# 
  1139  0215                     	;# 
  1140  0215                     	;# 
  1141  0216                     	;# 
  1142  0216                     	;# 
  1143  0217                     	;# 
  1144  0217                     	;# 
  1145  0291                     	;# 
  1146  0291                     	;# 
  1147  0292                     	;# 
  1148  0293                     	;# 
  1149  0298                     	;# 
  1150  0298                     	;# 
  1151  0299                     	;# 
  1152  029A                     	;# 
  1153  0394                     	;# 
  1154  0395                     	;# 
  1155  0396                     	;# 
  1156  0FE4                     	;# 
  1157  0FE5                     	;# 
  1158  0FE6                     	;# 
  1159  0FE7                     	;# 
  1160  0FE8                     	;# 
  1161  0FE9                     	;# 
  1162  0FEA                     	;# 
  1163  0FEB                     	;# 
  1164  0FED                     	;# 
  1165  0FEE                     	;# 
  1166  0FEF                     	;# 
  1167  0000                     	;# 
  1168  0001                     	;# 
  1169  0002                     	;# 
  1170  0003                     	;# 
  1171  0004                     	;# 
  1172  0005                     	;# 
  1173  0006                     	;# 
  1174  0007                     	;# 
  1175  0008                     	;# 
  1176  0009                     	;# 
  1177  000A                     	;# 
  1178  000B                     	;# 
  1179  000C                     	;# 
  1180  000D                     	;# 
  1181  000E                     	;# 
  1182  0010                     	;# 
  1183  0011                     	;# 
  1184  0012                     	;# 
  1185  0015                     	;# 
  1186  0016                     	;# 
  1187  0016                     	;# 
  1188  0017                     	;# 
  1189  0018                     	;# 
  1190  0019                     	;# 
  1191  001A                     	;# 
  1192  001B                     	;# 
  1193  001C                     	;# 
  1194  008C                     	;# 
  1195  008D                     	;# 
  1196  008E                     	;# 
  1197  0090                     	;# 
  1198  0091                     	;# 
  1199  0092                     	;# 
  1200  0095                     	;# 
  1201  0096                     	;# 
  1202  0097                     	;# 
  1203  0099                     	;# 
  1204  009A                     	;# 
  1205  009B                     	;# 
  1206  009B                     	;# 
  1207  009C                     	;# 
  1208  009D                     	;# 
  1209  009E                     	;# 
  1210  010C                     	;# 
  1211  010D                     	;# 
  1212  010E                     	;# 
  1213  0116                     	;# 
  1214  0117                     	;# 
  1215  011D                     	;# 
  1216  018C                     	;# 
  1217  018D                     	;# 
  1218  018E                     	;# 
  1219  0191                     	;# 
  1220  0191                     	;# 
  1221  0192                     	;# 
  1222  0193                     	;# 
  1223  0193                     	;# 
  1224  0194                     	;# 
  1225  0195                     	;# 
  1226  0196                     	;# 
  1227  0197                     	;# 
  1228  0199                     	;# 
  1229  019A                     	;# 
  1230  019B                     	;# 
  1231  019B                     	;# 
  1232  019B                     	;# 
  1233  019B                     	;# 
  1234  019C                     	;# 
  1235  019C                     	;# 
  1236  019D                     	;# 
  1237  019E                     	;# 
  1238  019F                     	;# 
  1239  020D                     	;# 
  1240  0210                     	;# 
  1241  0211                     	;# 
  1242  0211                     	;# 
  1243  0212                     	;# 
  1244  0212                     	;# 
  1245  0213                     	;# 
  1246  0213                     	;# 
  1247  0214                     	;# 
  1248  0214                     	;# 
  1249  0215                     	;# 
  1250  0215                     	;# 
  1251  0215                     	;# 
  1252  0216                     	;# 
  1253  0216                     	;# 
  1254  0217                     	;# 
  1255  0217                     	;# 
  1256  0291                     	;# 
  1257  0291                     	;# 
  1258  0292                     	;# 
  1259  0293                     	;# 
  1260  0298                     	;# 
  1261  0298                     	;# 
  1262  0299                     	;# 
  1263  029A                     	;# 
  1264  0394                     	;# 
  1265  0395                     	;# 
  1266  0396                     	;# 
  1267  0FE4                     	;# 
  1268  0FE5                     	;# 
  1269  0FE6                     	;# 
  1270  0FE7                     	;# 
  1271  0FE8                     	;# 
  1272  0FE9                     	;# 
  1273  0FEA                     	;# 
  1274  0FEB                     	;# 
  1275  0FED                     	;# 
  1276  0FEE                     	;# 
  1277  0FEF                     	;# 
  1278  0000                     	;# 
  1279  0001                     	;# 
  1280  0002                     	;# 
  1281  0003                     	;# 
  1282  0004                     	;# 
  1283  0005                     	;# 
  1284  0006                     	;# 
  1285  0007                     	;# 
  1286  0008                     	;# 
  1287  0009                     	;# 
  1288  000A                     	;# 
  1289  000B                     	;# 
  1290  000C                     	;# 
  1291  000D                     	;# 
  1292  000E                     	;# 
  1293  0010                     	;# 
  1294  0011                     	;# 
  1295  0012                     	;# 
  1296  0015                     	;# 
  1297  0016                     	;# 
  1298  0016                     	;# 
  1299  0017                     	;# 
  1300  0018                     	;# 
  1301  0019                     	;# 
  1302  001A                     	;# 
  1303  001B                     	;# 
  1304  001C                     	;# 
  1305  008C                     	;# 
  1306  008D                     	;# 
  1307  008E                     	;# 
  1308  0090                     	;# 
  1309  0091                     	;# 
  1310  0092                     	;# 
  1311  0095                     	;# 
  1312  0096                     	;# 
  1313  0097                     	;# 
  1314  0099                     	;# 
  1315  009A                     	;# 
  1316  009B                     	;# 
  1317  009B                     	;# 
  1318  009C                     	;# 
  1319  009D                     	;# 
  1320  009E                     	;# 
  1321  010C                     	;# 
  1322  010D                     	;# 
  1323  010E                     	;# 
  1324  0116                     	;# 
  1325  0117                     	;# 
  1326  011D                     	;# 
  1327  018C                     	;# 
  1328  018D                     	;# 
  1329  018E                     	;# 
  1330  0191                     	;# 
  1331  0191                     	;# 
  1332  0192                     	;# 
  1333  0193                     	;# 
  1334  0193                     	;# 
  1335  0194                     	;# 
  1336  0195                     	;# 
  1337  0196                     	;# 
  1338  0197                     	;# 
  1339  0199                     	;# 
  1340  019A                     	;# 
  1341  019B                     	;# 
  1342  019B                     	;# 
  1343  019B                     	;# 
  1344  019B                     	;# 
  1345  019C                     	;# 
  1346  019C                     	;# 
  1347  019D                     	;# 
  1348  019E                     	;# 
  1349  019F                     	;# 
  1350  020D                     	;# 
  1351  0210                     	;# 
  1352  0211                     	;# 
  1353  0211                     	;# 
  1354  0212                     	;# 
  1355  0212                     	;# 
  1356  0213                     	;# 
  1357  0213                     	;# 
  1358  0214                     	;# 
  1359  0214                     	;# 
  1360  0215                     	;# 
  1361  0215                     	;# 
  1362  0215                     	;# 
  1363  0216                     	;# 
  1364  0216                     	;# 
  1365  0217                     	;# 
  1366  0217                     	;# 
  1367  0291                     	;# 
  1368  0291                     	;# 
  1369  0292                     	;# 
  1370  0293                     	;# 
  1371  0298                     	;# 
  1372  0298                     	;# 
  1373  0299                     	;# 
  1374  029A                     	;# 
  1375  0394                     	;# 
  1376  0395                     	;# 
  1377  0396                     	;# 
  1378  0FE4                     	;# 
  1379  0FE5                     	;# 
  1380  0FE6                     	;# 
  1381  0FE7                     	;# 
  1382  0FE8                     	;# 
  1383  0FE9                     	;# 
  1384  0FEA                     	;# 
  1385  0FEB                     	;# 
  1386  0FED                     	;# 
  1387  0FEE                     	;# 
  1388  0FEF                     	;# 
  1389  0000                     	;# 
  1390  0001                     	;# 
  1391  0002                     	;# 
  1392  0003                     	;# 
  1393  0004                     	;# 
  1394  0005                     	;# 
  1395  0006                     	;# 
  1396  0007                     	;# 
  1397  0008                     	;# 
  1398  0009                     	;# 
  1399  000A                     	;# 
  1400  000B                     	;# 
  1401  000C                     	;# 
  1402  000D                     	;# 
  1403  000E                     	;# 
  1404  0010                     	;# 
  1405  0011                     	;# 
  1406  0012                     	;# 
  1407  0015                     	;# 
  1408  0016                     	;# 
  1409  0016                     	;# 
  1410  0017                     	;# 
  1411  0018                     	;# 
  1412  0019                     	;# 
  1413  001A                     	;# 
  1414  001B                     	;# 
  1415  001C                     	;# 
  1416  008C                     	;# 
  1417  008D                     	;# 
  1418  008E                     	;# 
  1419  0090                     	;# 
  1420  0091                     	;# 
  1421  0092                     	;# 
  1422  0095                     	;# 
  1423  0096                     	;# 
  1424  0097                     	;# 
  1425  0099                     	;# 
  1426  009A                     	;# 
  1427  009B                     	;# 
  1428  009B                     	;# 
  1429  009C                     	;# 
  1430  009D                     	;# 
  1431  009E                     	;# 
  1432  010C                     	;# 
  1433  010D                     	;# 
  1434  010E                     	;# 
  1435  0116                     	;# 
  1436  0117                     	;# 
  1437  011D                     	;# 
  1438  018C                     	;# 
  1439  018D                     	;# 
  1440  018E                     	;# 
  1441  0191                     	;# 
  1442  0191                     	;# 
  1443  0192                     	;# 
  1444  0193                     	;# 
  1445  0193                     	;# 
  1446  0194                     	;# 
  1447  0195                     	;# 
  1448  0196                     	;# 
  1449  0197                     	;# 
  1450  0199                     	;# 
  1451  019A                     	;# 
  1452  019B                     	;# 
  1453  019B                     	;# 
  1454  019B                     	;# 
  1455  019B                     	;# 
  1456  019C                     	;# 
  1457  019C                     	;# 
  1458  019D                     	;# 
  1459  019E                     	;# 
  1460  019F                     	;# 
  1461  020D                     	;# 
  1462  0210                     	;# 
  1463  0211                     	;# 
  1464  0211                     	;# 
  1465  0212                     	;# 
  1466  0212                     	;# 
  1467  0213                     	;# 
  1468  0213                     	;# 
  1469  0214                     	;# 
  1470  0214                     	;# 
  1471  0215                     	;# 
  1472  0215                     	;# 
  1473  0215                     	;# 
  1474  0216                     	;# 
  1475  0216                     	;# 
  1476  0217                     	;# 
  1477  0217                     	;# 
  1478  0291                     	;# 
  1479  0291                     	;# 
  1480  0292                     	;# 
  1481  0293                     	;# 
  1482  0298                     	;# 
  1483  0298                     	;# 
  1484  0299                     	;# 
  1485  029A                     	;# 
  1486  0394                     	;# 
  1487  0395                     	;# 
  1488  0396                     	;# 
  1489  0FE4                     	;# 
  1490  0FE5                     	;# 
  1491  0FE6                     	;# 
  1492  0FE7                     	;# 
  1493  0FE8                     	;# 
  1494  0FE9                     	;# 
  1495  0FEA                     	;# 
  1496  0FEB                     	;# 
  1497  0FED                     	;# 
  1498  0FEE                     	;# 
  1499  0FEF                     	;# 
  1500  0000                     	;# 
  1501  0001                     	;# 
  1502  0002                     	;# 
  1503  0003                     	;# 
  1504  0004                     	;# 
  1505  0005                     	;# 
  1506  0006                     	;# 
  1507  0007                     	;# 
  1508  0008                     	;# 
  1509  0009                     	;# 
  1510  000A                     	;# 
  1511  000B                     	;# 
  1512  000C                     	;# 
  1513  000D                     	;# 
  1514  000E                     	;# 
  1515  0010                     	;# 
  1516  0011                     	;# 
  1517  0012                     	;# 
  1518  0015                     	;# 
  1519  0016                     	;# 
  1520  0016                     	;# 
  1521  0017                     	;# 
  1522  0018                     	;# 
  1523  0019                     	;# 
  1524  001A                     	;# 
  1525  001B                     	;# 
  1526  001C                     	;# 
  1527  008C                     	;# 
  1528  008D                     	;# 
  1529  008E                     	;# 
  1530  0090                     	;# 
  1531  0091                     	;# 
  1532  0092                     	;# 
  1533  0095                     	;# 
  1534  0096                     	;# 
  1535  0097                     	;# 
  1536  0099                     	;# 
  1537  009A                     	;# 
  1538  009B                     	;# 
  1539  009B                     	;# 
  1540  009C                     	;# 
  1541  009D                     	;# 
  1542  009E                     	;# 
  1543  010C                     	;# 
  1544  010D                     	;# 
  1545  010E                     	;# 
  1546  0116                     	;# 
  1547  0117                     	;# 
  1548  011D                     	;# 
  1549  018C                     	;# 
  1550  018D                     	;# 
  1551  018E                     	;# 
  1552  0191                     	;# 
  1553  0191                     	;# 
  1554  0192                     	;# 
  1555  0193                     	;# 
  1556  0193                     	;# 
  1557  0194                     	;# 
  1558  0195                     	;# 
  1559  0196                     	;# 
  1560  0197                     	;# 
  1561  0199                     	;# 
  1562  019A                     	;# 
  1563  019B                     	;# 
  1564  019B                     	;# 
  1565  019B                     	;# 
  1566  019B                     	;# 
  1567  019C                     	;# 
  1568  019C                     	;# 
  1569  019D                     	;# 
  1570  019E                     	;# 
  1571  019F                     	;# 
  1572  020D                     	;# 
  1573  0210                     	;# 
  1574  0211                     	;# 
  1575  0211                     	;# 
  1576  0212                     	;# 
  1577  0212                     	;# 
  1578  0213                     	;# 
  1579  0213                     	;# 
  1580  0214                     	;# 
  1581  0214                     	;# 
  1582  0215                     	;# 
  1583  0215                     	;# 
  1584  0215                     	;# 
  1585  0216                     	;# 
  1586  0216                     	;# 
  1587  0217                     	;# 
  1588  0217                     	;# 
  1589  0291                     	;# 
  1590  0291                     	;# 
  1591  0292                     	;# 
  1592  0293                     	;# 
  1593  0298                     	;# 
  1594  0298                     	;# 
  1595  0299                     	;# 
  1596  029A                     	;# 
  1597  0394                     	;# 
  1598  0395                     	;# 
  1599  0396                     	;# 
  1600  0FE4                     	;# 
  1601  0FE5                     	;# 
  1602  0FE6                     	;# 
  1603  0FE7                     	;# 
  1604  0FE8                     	;# 
  1605  0FE9                     	;# 
  1606  0FEA                     	;# 
  1607  0FEB                     	;# 
  1608  0FED                     	;# 
  1609  0FEE                     	;# 
  1610  0FEF                     	;# 
  1611  0000                     	;# 
  1612  0001                     	;# 
  1613  0002                     	;# 
  1614  0003                     	;# 
  1615  0004                     	;# 
  1616  0005                     	;# 
  1617  0006                     	;# 
  1618  0007                     	;# 
  1619  0008                     	;# 
  1620  0009                     	;# 
  1621  000A                     	;# 
  1622  000B                     	;# 
  1623  000C                     	;# 
  1624  000D                     	;# 
  1625  000E                     	;# 
  1626  0010                     	;# 
  1627  0011                     	;# 
  1628  0012                     	;# 
  1629  0015                     	;# 
  1630  0016                     	;# 
  1631  0016                     	;# 
  1632  0017                     	;# 
  1633  0018                     	;# 
  1634  0019                     	;# 
  1635  001A                     	;# 
  1636  001B                     	;# 
  1637  001C                     	;# 
  1638  008C                     	;# 
  1639  008D                     	;# 
  1640  008E                     	;# 
  1641  0090                     	;# 
  1642  0091                     	;# 
  1643  0092                     	;# 
  1644  0095                     	;# 
  1645  0096                     	;# 
  1646  0097                     	;# 
  1647  0099                     	;# 
  1648  009A                     	;# 
  1649  009B                     	;# 
  1650  009B                     	;# 
  1651  009C                     	;# 
  1652  009D                     	;# 
  1653  009E                     	;# 
  1654  010C                     	;# 
  1655  010D                     	;# 
  1656  010E                     	;# 
  1657  0116                     	;# 
  1658  0117                     	;# 
  1659  011D                     	;# 
  1660  018C                     	;# 
  1661  018D                     	;# 
  1662  018E                     	;# 
  1663  0191                     	;# 
  1664  0191                     	;# 
  1665  0192                     	;# 
  1666  0193                     	;# 
  1667  0193                     	;# 
  1668  0194                     	;# 
  1669  0195                     	;# 
  1670  0196                     	;# 
  1671  0197                     	;# 
  1672  0199                     	;# 
  1673  019A                     	;# 
  1674  019B                     	;# 
  1675  019B                     	;# 
  1676  019B                     	;# 
  1677  019B                     	;# 
  1678  019C                     	;# 
  1679  019C                     	;# 
  1680  019D                     	;# 
  1681  019E                     	;# 
  1682  019F                     	;# 
  1683  020D                     	;# 
  1684  0210                     	;# 
  1685  0211                     	;# 
  1686  0211                     	;# 
  1687  0212                     	;# 
  1688  0212                     	;# 
  1689  0213                     	;# 
  1690  0213                     	;# 
  1691  0214                     	;# 
  1692  0214                     	;# 
  1693  0215                     	;# 
  1694  0215                     	;# 
  1695  0215                     	;# 
  1696  0216                     	;# 
  1697  0216                     	;# 
  1698  0217                     	;# 
  1699  0217                     	;# 
  1700  0291                     	;# 
  1701  0291                     	;# 
  1702  0292                     	;# 
  1703  0293                     	;# 
  1704  0298                     	;# 
  1705  0298                     	;# 
  1706  0299                     	;# 
  1707  029A                     	;# 
  1708  0394                     	;# 
  1709  0395                     	;# 
  1710  0396                     	;# 
  1711  0FE4                     	;# 
  1712  0FE5                     	;# 
  1713  0FE6                     	;# 
  1714  0FE7                     	;# 
  1715  0FE8                     	;# 
  1716  0FE9                     	;# 
  1717  0FEA                     	;# 
  1718  0FEB                     	;# 
  1719  0FED                     	;# 
  1720  0FEE                     	;# 
  1721  0FEF                     	;# 
  1722  0000                     	;# 
  1723  0001                     	;# 
  1724  0002                     	;# 
  1725  0003                     	;# 
  1726  0004                     	;# 
  1727  0005                     	;# 
  1728  0006                     	;# 
  1729  0007                     	;# 
  1730  0008                     	;# 
  1731  0009                     	;# 
  1732  000A                     	;# 
  1733  000B                     	;# 
  1734  000C                     	;# 
  1735  000D                     	;# 
  1736  000E                     	;# 
  1737  0010                     	;# 
  1738  0011                     	;# 
  1739  0012                     	;# 
  1740  0015                     	;# 
  1741  0016                     	;# 
  1742  0016                     	;# 
  1743  0017                     	;# 
  1744  0018                     	;# 
  1745  0019                     	;# 
  1746  001A                     	;# 
  1747  001B                     	;# 
  1748  001C                     	;# 
  1749  008C                     	;# 
  1750  008D                     	;# 
  1751  008E                     	;# 
  1752  0090                     	;# 
  1753  0091                     	;# 
  1754  0092                     	;# 
  1755  0095                     	;# 
  1756  0096                     	;# 
  1757  0097                     	;# 
  1758  0099                     	;# 
  1759  009A                     	;# 
  1760  009B                     	;# 
  1761  009B                     	;# 
  1762  009C                     	;# 
  1763  009D                     	;# 
  1764  009E                     	;# 
  1765  010C                     	;# 
  1766  010D                     	;# 
  1767  010E                     	;# 
  1768  0116                     	;# 
  1769  0117                     	;# 
  1770  011D                     	;# 
  1771  018C                     	;# 
  1772  018D                     	;# 
  1773  018E                     	;# 
  1774  0191                     	;# 
  1775  0191                     	;# 
  1776  0192                     	;# 
  1777  0193                     	;# 
  1778  0193                     	;# 
  1779  0194                     	;# 
  1780  0195                     	;# 
  1781  0196                     	;# 
  1782  0197                     	;# 
  1783  0199                     	;# 
  1784  019A                     	;# 
  1785  019B                     	;# 
  1786  019B                     	;# 
  1787  019B                     	;# 
  1788  019B                     	;# 
  1789  019C                     	;# 
  1790  019C                     	;# 
  1791  019D                     	;# 
  1792  019E                     	;# 
  1793  019F                     	;# 
  1794  020D                     	;# 
  1795  0210                     	;# 
  1796  0211                     	;# 
  1797  0211                     	;# 
  1798  0212                     	;# 
  1799  0212                     	;# 
  1800  0213                     	;# 
  1801  0213                     	;# 
  1802  0214                     	;# 
  1803  0214                     	;# 
  1804  0215                     	;# 
  1805  0215                     	;# 
  1806  0215                     	;# 
  1807  0216                     	;# 
  1808  0216                     	;# 
  1809  0217                     	;# 
  1810  0217                     	;# 
  1811  0291                     	;# 
  1812  0291                     	;# 
  1813  0292                     	;# 
  1814  0293                     	;# 
  1815  0298                     	;# 
  1816  0298                     	;# 
  1817  0299                     	;# 
  1818  029A                     	;# 
  1819  0394                     	;# 
  1820  0395                     	;# 
  1821  0396                     	;# 
  1822  0FE4                     	;# 
  1823  0FE5                     	;# 
  1824  0FE6                     	;# 
  1825  0FE7                     	;# 
  1826  0FE8                     	;# 
  1827  0FE9                     	;# 
  1828  0FEA                     	;# 
  1829  0FEB                     	;# 
  1830  0FED                     	;# 
  1831  0FEE                     	;# 
  1832  0FEF                     	;# 
  1833  0000                     	;# 
  1834  0001                     	;# 
  1835  0002                     	;# 
  1836  0003                     	;# 
  1837  0004                     	;# 
  1838  0005                     	;# 
  1839  0006                     	;# 
  1840  0007                     	;# 
  1841  0008                     	;# 
  1842  0009                     	;# 
  1843  000A                     	;# 
  1844  000B                     	;# 
  1845  000C                     	;# 
  1846  000D                     	;# 
  1847  000E                     	;# 
  1848  0010                     	;# 
  1849  0011                     	;# 
  1850  0012                     	;# 
  1851  0015                     	;# 
  1852  0016                     	;# 
  1853  0016                     	;# 
  1854  0017                     	;# 
  1855  0018                     	;# 
  1856  0019                     	;# 
  1857  001A                     	;# 
  1858  001B                     	;# 
  1859  001C                     	;# 
  1860  008C                     	;# 
  1861  008D                     	;# 
  1862  008E                     	;# 
  1863  0090                     	;# 
  1864  0091                     	;# 
  1865  0092                     	;# 
  1866  0095                     	;# 
  1867  0096                     	;# 
  1868  0097                     	;# 
  1869  0099                     	;# 
  1870  009A                     	;# 
  1871  009B                     	;# 
  1872  009B                     	;# 
  1873  009C                     	;# 
  1874  009D                     	;# 
  1875  009E                     	;# 
  1876  010C                     	;# 
  1877  010D                     	;# 
  1878  010E                     	;# 
  1879  0116                     	;# 
  1880  0117                     	;# 
  1881  011D                     	;# 
  1882  018C                     	;# 
  1883  018D                     	;# 
  1884  018E                     	;# 
  1885  0191                     	;# 
  1886  0191                     	;# 
  1887  0192                     	;# 
  1888  0193                     	;# 
  1889  0193                     	;# 
  1890  0194                     	;# 
  1891  0195                     	;# 
  1892  0196                     	;# 
  1893  0197                     	;# 
  1894  0199                     	;# 
  1895  019A                     	;# 
  1896  019B                     	;# 
  1897  019B                     	;# 
  1898  019B                     	;# 
  1899  019B                     	;# 
  1900  019C                     	;# 
  1901  019C                     	;# 
  1902  019D                     	;# 
  1903  019E                     	;# 
  1904  019F                     	;# 
  1905  020D                     	;# 
  1906  0210                     	;# 
  1907  0211                     	;# 
  1908  0211                     	;# 
  1909  0212                     	;# 
  1910  0212                     	;# 
  1911  0213                     	;# 
  1912  0213                     	;# 
  1913  0214                     	;# 
  1914  0214                     	;# 
  1915  0215                     	;# 
  1916  0215                     	;# 
  1917  0215                     	;# 
  1918  0216                     	;# 
  1919  0216                     	;# 
  1920  0217                     	;# 
  1921  0217                     	;# 
  1922  0291                     	;# 
  1923  0291                     	;# 
  1924  0292                     	;# 
  1925  0293                     	;# 
  1926  0298                     	;# 
  1927  0298                     	;# 
  1928  0299                     	;# 
  1929  029A                     	;# 
  1930  0394                     	;# 
  1931  0395                     	;# 
  1932  0396                     	;# 
  1933  0FE4                     	;# 
  1934  0FE5                     	;# 
  1935  0FE6                     	;# 
  1936  0FE7                     	;# 
  1937  0FE8                     	;# 
  1938  0FE9                     	;# 
  1939  0FEA                     	;# 
  1940  0FEB                     	;# 
  1941  0FED                     	;# 
  1942  0FEE                     	;# 
  1943  0FEF                     	;# 
  1944  0000                     	;# 
  1945  0001                     	;# 
  1946  0002                     	;# 
  1947  0003                     	;# 
  1948  0004                     	;# 
  1949  0005                     	;# 
  1950  0006                     	;# 
  1951  0007                     	;# 
  1952  0008                     	;# 
  1953  0009                     	;# 
  1954  000A                     	;# 
  1955  000B                     	;# 
  1956  000C                     	;# 
  1957  000D                     	;# 
  1958  000E                     	;# 
  1959  0010                     	;# 
  1960  0011                     	;# 
  1961  0012                     	;# 
  1962  0015                     	;# 
  1963  0016                     	;# 
  1964  0016                     	;# 
  1965  0017                     	;# 
  1966  0018                     	;# 
  1967  0019                     	;# 
  1968  001A                     	;# 
  1969  001B                     	;# 
  1970  001C                     	;# 
  1971  008C                     	;# 
  1972  008D                     	;# 
  1973  008E                     	;# 
  1974  0090                     	;# 
  1975  0091                     	;# 
  1976  0092                     	;# 
  1977  0095                     	;# 
  1978  0096                     	;# 
  1979  0097                     	;# 
  1980  0099                     	;# 
  1981  009A                     	;# 
  1982  009B                     	;# 
  1983  009B                     	;# 
  1984  009C                     	;# 
  1985  009D                     	;# 
  1986  009E                     	;# 
  1987  010C                     	;# 
  1988  010D                     	;# 
  1989  010E                     	;# 
  1990  0116                     	;# 
  1991  0117                     	;# 
  1992  011D                     	;# 
  1993  018C                     	;# 
  1994  018D                     	;# 
  1995  018E                     	;# 
  1996  0191                     	;# 
  1997  0191                     	;# 
  1998  0192                     	;# 
  1999  0193                     	;# 
  2000  0193                     	;# 
  2001  0194                     	;# 
  2002  0195                     	;# 
  2003  0196                     	;# 
  2004  0197                     	;# 
  2005  0199                     	;# 
  2006  019A                     	;# 
  2007  019B                     	;# 
  2008  019B                     	;# 
  2009  019B                     	;# 
  2010  019B                     	;# 
  2011  019C                     	;# 
  2012  019C                     	;# 
  2013  019D                     	;# 
  2014  019E                     	;# 
  2015  019F                     	;# 
  2016  020D                     	;# 
  2017  0210                     	;# 
  2018  0211                     	;# 
  2019  0211                     	;# 
  2020  0212                     	;# 
  2021  0212                     	;# 
  2022  0213                     	;# 
  2023  0213                     	;# 
  2024  0214                     	;# 
  2025  0214                     	;# 
  2026  0215                     	;# 
  2027  0215                     	;# 
  2028  0215                     	;# 
  2029  0216                     	;# 
  2030  0216                     	;# 
  2031  0217                     	;# 
  2032  0217                     	;# 
  2033  0291                     	;# 
  2034  0291                     	;# 
  2035  0292                     	;# 
  2036  0293                     	;# 
  2037  0298                     	;# 
  2038  0298                     	;# 
  2039  0299                     	;# 
  2040  029A                     	;# 
  2041  0394                     	;# 
  2042  0395                     	;# 
  2043  0396                     	;# 
  2044  0FE4                     	;# 
  2045  0FE5                     	;# 
  2046  0FE6                     	;# 
  2047  0FE7                     	;# 
  2048  0FE8                     	;# 
  2049  0FE9                     	;# 
  2050  0FEA                     	;# 
  2051  0FEB                     	;# 
  2052  0FED                     	;# 
  2053  0FEE                     	;# 
  2054  0FEF                     	;# 
  2055  0000                     	;# 
  2056  0001                     	;# 
  2057  0002                     	;# 
  2058  0003                     	;# 
  2059  0004                     	;# 
  2060  0005                     	;# 
  2061  0006                     	;# 
  2062  0007                     	;# 
  2063  0008                     	;# 
  2064  0009                     	;# 
  2065  000A                     	;# 
  2066  000B                     	;# 
  2067  000C                     	;# 
  2068  000D                     	;# 
  2069  000E                     	;# 
  2070  0010                     	;# 
  2071  0011                     	;# 
  2072  0012                     	;# 
  2073  0015                     	;# 
  2074  0016                     	;# 
  2075  0016                     	;# 
  2076  0017                     	;# 
  2077  0018                     	;# 
  2078  0019                     	;# 
  2079  001A                     	;# 
  2080  001B                     	;# 
  2081  001C                     	;# 
  2082  008C                     	;# 
  2083  008D                     	;# 
  2084  008E                     	;# 
  2085  0090                     	;# 
  2086  0091                     	;# 
  2087  0092                     	;# 
  2088  0095                     	;# 
  2089  0096                     	;# 
  2090  0097                     	;# 
  2091  0099                     	;# 
  2092  009A                     	;# 
  2093  009B                     	;# 
  2094  009B                     	;# 
  2095  009C                     	;# 
  2096  009D                     	;# 
  2097  009E                     	;# 
  2098  010C                     	;# 
  2099  010D                     	;# 
  2100  010E                     	;# 
  2101  0116                     	;# 
  2102  0117                     	;# 
  2103  011D                     	;# 
  2104  018C                     	;# 
  2105  018D                     	;# 
  2106  018E                     	;# 
  2107  0191                     	;# 
  2108  0191                     	;# 
  2109  0192                     	;# 
  2110  0193                     	;# 
  2111  0193                     	;# 
  2112  0194                     	;# 
  2113  0195                     	;# 
  2114  0196                     	;# 
  2115  0197                     	;# 
  2116  0199                     	;# 
  2117  019A                     	;# 
  2118  019B                     	;# 
  2119  019B                     	;# 
  2120  019B                     	;# 
  2121  019B                     	;# 
  2122  019C                     	;# 
  2123  019C                     	;# 
  2124  019D                     	;# 
  2125  019E                     	;# 
  2126  019F                     	;# 
  2127  020D                     	;# 
  2128  0210                     	;# 
  2129  0211                     	;# 
  2130  0211                     	;# 
  2131  0212                     	;# 
  2132  0212                     	;# 
  2133  0213                     	;# 
  2134  0213                     	;# 
  2135  0214                     	;# 
  2136  0214                     	;# 
  2137  0215                     	;# 
  2138  0215                     	;# 
  2139  0215                     	;# 
  2140  0216                     	;# 
  2141  0216                     	;# 
  2142  0217                     	;# 
  2143  0217                     	;# 
  2144  0291                     	;# 
  2145  0291                     	;# 
  2146  0292                     	;# 
  2147  0293                     	;# 
  2148  0298                     	;# 
  2149  0298                     	;# 
  2150  0299                     	;# 
  2151  029A                     	;# 
  2152  0394                     	;# 
  2153  0395                     	;# 
  2154  0396                     	;# 
  2155  0FE4                     	;# 
  2156  0FE5                     	;# 
  2157  0FE6                     	;# 
  2158  0FE7                     	;# 
  2159  0FE8                     	;# 
  2160  0FE9                     	;# 
  2161  0FEA                     	;# 
  2162  0FEB                     	;# 
  2163  0FED                     	;# 
  2164  0FEE                     	;# 
  2165  0FEF                     	;# 
  2166                           
  2167                           	psect	idataBANK4
  2168  1DDC                     __pidataBANK4:	
  2169                           
  2170                           ;initializer for __product
  2171  1DDC  3463               	retlw	99
  2172  1DDD  3402               	retlw	2
  2173  1DDE  3400               	retlw	0
  2174  1DDF  3400               	retlw	0
  2175  1DE0  3400               	retlw	0
  2176  1DE1  3400               	retlw	0
  2177  1DE2  3400               	retlw	0
  2178  1DE3  3400               	retlw	0
  2179  1DE4  3400               	retlw	0
  2180  1DE5  3400               	retlw	0
  2181  1DE6  3400               	retlw	0
  2182  1DE7  3400               	retlw	0
  2183  1DE8  34FF               	retlw	255
  2184  1DE9  34FF               	retlw	255
  2185  1DEA  34FF               	retlw	255
  2186  1DEB  3400               	retlw	0
  2187  1DEC  3400               	retlw	0
  2188  1DED  3400               	retlw	0
  2189  1DEE  3400               	retlw	0
  2190  1DEF  3400               	retlw	0
  2191  1DF0  3400               	retlw	0
  2192  1DF1  3400               	retlw	0
  2193  1DF2  3400               	retlw	0
  2194  1DF3  3400               	retlw	0
  2195  1DF4  3400               	retlw	0
  2196  1DF5  3400               	retlw	0
  2197  1DF6  3400               	retlw	0
  2198  1DF7  3400               	retlw	0
  2199  1DF8  3400               	retlw	0
  2200  1DF9  3400               	retlw	0
  2201  1DFA  3400               	retlw	0
  2202  1DFB  3400               	retlw	0
  2203                           
  2204                           	psect	stringtext
  2205  1800                     __pstringtext:	
  2206  1800                     _CC2500_registers_address:	
  2207  1800  3403               	retlw	3
  2208  1801  3416               	retlw	22
  2209  1802  3417               	retlw	23
  2210  1803  341E               	retlw	30
  2211  1804  341F               	retlw	31
  2212  1805  3420               	retlw	32
  2213  1806  342A               	retlw	42
  2214  1807  342B               	retlw	43
  2215  1808  340B               	retlw	11
  2216  1809  340C               	retlw	12
  2217  180A  340D               	retlw	13
  2218  180B  340E               	retlw	14
  2219  180C  340F               	retlw	15
  2220  180D  3410               	retlw	16
  2221  180E  3411               	retlw	17
  2222  180F  3412               	retlw	18
  2223  1810  3413               	retlw	19
  2224  1811  3414               	retlw	20
  2225  1812  340A               	retlw	10
  2226  1813  3415               	retlw	21
  2227  1814  3421               	retlw	33
  2228  1815  3422               	retlw	34
  2229  1816  3418               	retlw	24
  2230  1817  3419               	retlw	25
  2231  1818  341A               	retlw	26
  2232  1819  341B               	retlw	27
  2233  181A  341C               	retlw	28
  2234  181B  341D               	retlw	29
  2235  181C  3423               	retlw	35
  2236  181D  3424               	retlw	36
  2237  181E  3425               	retlw	37
  2238  181F  3426               	retlw	38
  2239  1820  3429               	retlw	41
  2240  1821  342C               	retlw	44
  2241  1822  342D               	retlw	45
  2242  1823  342E               	retlw	46
  2243  1824  3400               	retlw	0
  2244  1825  3401               	retlw	1
  2245  1826  3402               	retlw	2
  2246  1827  3407               	retlw	7
  2247  1828  3408               	retlw	8
  2248  1829  3409               	retlw	9
  2249  182A  3406               	retlw	6
  2250  182B  3404               	retlw	4
  2251  182C  3405               	retlw	5
  2252  182D  3427               	retlw	39
  2253  182E  3428               	retlw	40
  2254  182F                     __end_of_CC2500_registers_address:	
  2255  182F                     _CC2500_rfSettings:	
  2256  182F  3407               	retlw	7
  2257  1830  3407               	retlw	7
  2258  1831  3430               	retlw	48
  2259  1832  3487               	retlw	135
  2260  1833  346B               	retlw	107
  2261  1834  34F8               	retlw	248
  2262  1835  347F               	retlw	127
  2263  1836  343F               	retlw	63
  2264  1837  3409               	retlw	9
  2265  1838  3400               	retlw	0
  2266  1839  345C               	retlw	92
  2267  183A  34A7               	retlw	167
  2268  183B  3462               	retlw	98
  2269  183C  3486               	retlw	134
  2270  183D  3483               	retlw	131
  2271  183E  3403               	retlw	3
  2272  183F  3422               	retlw	34
  2273  1840  34F8               	retlw	248
  2274  1841  3400               	retlw	0
  2275  1842  3444               	retlw	68
  2276  1843  34B6               	retlw	182
  2277  1844  3410               	retlw	16
  2278  1845  3418               	retlw	24
  2279  1846  341D               	retlw	29
  2280  1847  341C               	retlw	28
  2281  1848  34C7               	retlw	199
  2282  1849  3400               	retlw	0
  2283  184A  34B2               	retlw	178
  2284  184B  34EA               	retlw	234
  2285  184C  340A               	retlw	10
  2286  184D  3400               	retlw	0
  2287  184E  3411               	retlw	17
  2288  184F  3459               	retlw	89
  2289  1850  3488               	retlw	136
  2290  1851  3431               	retlw	49
  2291  1852  340B               	retlw	11
  2292  1853  342F               	retlw	47
  2293  1854  342E               	retlw	46
  2294  1855  3406               	retlw	6
  2295  1856  3404               	retlw	4
  2296  1857  3405               	retlw	5
  2297  1858  3400               	retlw	0
  2298  1859  3430               	retlw	48
  2299  185A  34D3               	retlw	211
  2300  185B  3491               	retlw	145
  2301  185C  3441               	retlw	65
  2302  185D  3400               	retlw	0
  2303  185E                     __end_of_CC2500_rfSettings:	
  2304  185E                     _CC2500_patable_vaule:	
  2305  185E  34FE               	retlw	254
  2306  185F  34FE               	retlw	254
  2307  1860  34FE               	retlw	254
  2308  1861  34FE               	retlw	254
  2309  1862  34FE               	retlw	254
  2310  1863  34FE               	retlw	254
  2311  1864  34FE               	retlw	254
  2312  1865  34FE               	retlw	254
  2313  1866                     __end_of_CC2500_patable_vaule:	
  2314                           
  2315                           	psect	nvBANK1
  2316  00EE                     __pnvBANK1:	
  2317  00EE                     _product:	
  2318  00EE                     	ds	1
  2319  000C                     _PORTA	set	12
  2320  000D                     _PORTB	set	13
  2321  000E                     _PORTC	set	14
  2322  0018                     _T1CON	set	24
  2323  0017                     _TMR1H	set	23
  2324  0016                     _TMR1L	set	22
  2325  005F                     _GIE	set	95
  2326  005B                     _IOCIE	set	91
  2327  0058                     _IOCIF	set	88
  2328  005E                     _PEIE	set	94
  2329  0060                     _RA0	set	96
  2330  0063                     _RA3	set	99
  2331  0064                     _RA4	set	100
  2332  0066                     _RA6	set	102
  2333  0067                     _RA7	set	103
  2334  0068                     _RB0	set	104
  2335  0069                     _RB1	set	105
  2336  006A                     _RB2	set	106
  2337  006B                     _RB3	set	107
  2338  006C                     _RB4	set	108
  2339  006D                     _RB5	set	109
  2340  0070                     _RC0	set	112
  2341  0071                     _RC1	set	113
  2342  0072                     _RC2	set	114
  2343  0074                     _RC4	set	116
  2344  0075                     _RC5	set	117
  2345  0077                     _RC7	set	119
  2346  0088                     _TMR1IF	set	136
  2347  009D                     _ADCON0	set	157
  2348  009E                     _ADCON1	set	158
  2349  009C                     _ADRESH	set	156
  2350  009B                     _ADRESL	set	155
  2351  0099                     _OSCCON	set	153
  2352  008C                     _TRISA	set	140
  2353  008D                     _TRISB	set	141
  2354  008E                     _TRISC	set	142
  2355  0097                     _WDTCON	set	151
  2356  04E9                     _GO_nDONE	set	1257
  2357  0488                     _TMR1IE	set	1160
  2358  0117                     _FVRCON	set	279
  2359  010C                     _LATA	set	268
  2360  010D                     _LATB	set	269
  2361  010E                     _LATC	set	270
  2362  018C                     _ANSELA	set	396
  2363  018D                     _ANSELB	set	397
  2364  018E                     _ANSELC	set	398
  2365  0192                     _PMADRH	set	402
  2366  0191                     _PMADRL	set	401
  2367  0196                     _PMCON2	set	406
  2368  0194                     _PMDATH	set	404
  2369  0193                     _PMDATL	set	403
  2370  0CAE                     _CFGS	set	3246
  2371  0CAC                     _FREE	set	3244
  2372  0CAD                     _LWLO	set	3245
  2373  0CA8                     _RD	set	3240
  2374  0CA9                     _WR	set	3241
  2375  0CAA                     _WREN	set	3242
  2376  020D                     _WPUB	set	525
  2377  0396                     _IOCBF	set	918
  2378  0395                     _IOCBN	set	917
  2379  0394                     _IOCBP	set	916
  2380  1CB2                     _IOCBF2	set	7346
  2381                           
  2382                           ; #config settings
  2383  0000                     
  2384                           	psect	cinit
  2385  0021                     start_initialization:	
  2386  0021                     __initialization:	
  2387                           
  2388                           ; Clear objects allocated to BITCOMMON
  2389  0021  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2390                           
  2391                           ; Clear objects allocated to BITBANK1
  2392  0022  0021               	movlb	1	; select bank1
  2393  0023  01EF               	clrf	(__pbitbssBANK1/(0+8))& (0+127)
  2394                           
  2395                           ; Clear objects allocated to BANK1
  2396  0024  30A0               	movlw	low __pbssBANK1
  2397  0025  0084               	movwf	4
  2398  0026  3000               	movlw	high __pbssBANK1
  2399  0027  0085               	movwf	5
  2400  0028  3046               	movlw	70
  2401  0029  3198  20FE  3180   	fcall	clear_ram0
  2402                           
  2403                           ; Clear objects allocated to BANK2
  2404  002C  3020               	movlw	low __pbssBANK2
  2405  002D  0084               	movwf	4
  2406  002E  3001               	movlw	high __pbssBANK2
  2407  002F  0085               	movwf	5
  2408  0030  304F               	movlw	79
  2409  0031  3198  20FE  3180   	fcall	clear_ram0
  2410                           
  2411                           ; Clear objects allocated to BANK3
  2412  0034  30A0               	movlw	low __pbssBANK3
  2413  0035  0084               	movwf	4
  2414  0036  3001               	movlw	high __pbssBANK3
  2415  0037  0085               	movwf	5
  2416  0038  304E               	movlw	78
  2417  0039  3198  20FE  3180   	fcall	clear_ram0
  2418                           
  2419                           ; Clear objects allocated to BANK4
  2420  003C  3020               	movlw	low __pbssBANK4
  2421  003D  0084               	movwf	4
  2422  003E  3002               	movlw	high __pbssBANK4
  2423  003F  0085               	movwf	5
  2424  0040  3025               	movlw	37
  2425  0041  3198  20FE  3180   	fcall	clear_ram0
  2426                           
  2427                           ; Initialize objects allocated to BANK4
  2428  0044  30DC               	movlw	low __pidataBANK4
  2429  0045  0084               	movwf	4
  2430  0046  309D               	movlw	(high __pidataBANK4)| (0+128)
  2431  0047  0085               	movwf	5
  2432  0048  3045               	movlw	low __pdataBANK4
  2433  0049  0086               	movwf	6
  2434  004A  3002               	movlw	high __pdataBANK4
  2435  004B  0087               	movwf	7
  2436  004C  3020               	movlw	32
  2437  004D  3198  20F8         	fcall	init_ram
  2438  004F                     end_of_initialization:	
  2439                           ;End of C runtime variable initialization code
  2440                           
  2441  004F                     __end_of__initialization:	
  2442  004F  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2443  0050  0020               	movlb	0
  2444  0051  3194  2C64         	ljmp	_main	;jump to C main() function
  2445                           
  2446                           	psect	bitbssCOMMON
  2447  03E8                     __pbitbssCOMMON:	
  2448  03E8                     _Transceive_OK:	
  2449  03E8                     	ds	1
  2450                           
  2451                           	psect	bitbssBANK1
  2452  0778                     __pbitbssBANK1:	
  2453  0778                     _Receive_OK:	
  2454  0778                     	ds	1
  2455                           
  2456                           	psect	bssBANK1
  2457  00A0                     __pbssBANK1:	
  2458  00A0                     _RF1:	
  2459  00A0                     	ds	14
  2460  00AE                     _myMain:	
  2461  00AE                     	ds	13
  2462  00BB                     _DimmerIntr1:	
  2463  00BB                     	ds	12
  2464  00C7                     _DimmerIntr2:	
  2465  00C7                     	ds	12
  2466  00D3                     _CRC:	
  2467  00D3                     	ds	1
  2468  00D4                     _Cmd:	
  2469  00D4                     	ds	1
  2470  00D5                     _DelayOff:	
  2471  00D5                     	ds	1
  2472  00D6                     _DimmerLights:	
  2473  00D6                     	ds	1
  2474  00D7                     _LED:	
  2475  00D7                     	ds	1
  2476  00D8                     _SPI0Buffer:	
  2477  00D8                     	ds	1
  2478  00D9                     _Sw:	
  2479  00D9                     	ds	1
  2480  00DA                     _Tx_Length:	
  2481  00DA                     	ds	1
  2482  00DB                     _s_data:	
  2483  00DB                     	ds	1
  2484  00DC                     _Temp:	
  2485  00DC                     	ds	10
  2486                           
  2487                           	psect	bssBANK2
  2488  0120                     __pbssBANK2:	
  2489  0120                     _Buz1:	
  2490  0120                     	ds	12
  2491  012C                     _Dimmer:	
  2492  012C                     	ds	5
  2493  0131                     _Timer1:	
  2494  0131                     	ds	3
  2495  0134                     _RF_Count:	
  2496  0134                     	ds	2
  2497  0136                     _WDT:	
  2498  0136                     	ds	2
  2499  0138                     _DimmerIntr:	
  2500  0138                     	ds	1
  2501  0139                     _Light:	
  2502  0139                     	ds	1
  2503  013A                     _RSSI:	
  2504  013A                     	ds	1
  2505  013B                     _Rx_Length:	
  2506  013B                     	ds	1
  2507  013C                     _SwDetect:	
  2508  013C                     	ds	1
  2509  013D                     _r_address:	
  2510  013D                     	ds	1
  2511  013E                     _r_data:	
  2512  013E                     	ds	1
  2513  013F                     _Load:	
  2514  013F                     	ds	40
  2515  0167                     _DimmerLights1:	
  2516  0167                     	ds	8
  2517                           
  2518                           	psect	bssBANK3
  2519  01A0                     __pbssBANK3:	
  2520  01A0                     _RF_Data:	
  2521  01A0                     	ds	30
  2522  01BE                     _Sw1:	
  2523  01BE                     	ds	9
  2524  01C7                     _Sw2:	
  2525  01C7                     	ds	9
  2526  01D0                     _DimmerLights2:	
  2527  01D0                     	ds	8
  2528  01D8                     _DlySw1:	
  2529  01D8                     	ds	5
  2530  01DD                     _DlySw2:	
  2531  01DD                     	ds	5
  2532  01E2                     _VarErrLED:	
  2533  01E2                     	ds	4
  2534  01E6                     _VarLED1:	
  2535  01E6                     	ds	4
  2536  01EA                     _VarLED2:	
  2537  01EA                     	ds	4
  2538                           
  2539                           	psect	bssBANK4
  2540  0220                     __pbssBANK4:	
  2541  0220                     _Memory:	
  2542  0220                     	ds	37
  2543                           
  2544                           	psect	dataBANK4
  2545  0245                     __pdataBANK4:	
  2546  0245                     __product:	
  2547  0245                     	ds	32
  2548                           
  2549                           	psect	clrtext
  2550  18FE                     clear_ram0:	
  2551                           ;	Called with FSR0 containing the base address, and
  2552                           ;	WREG with the size to clear
  2553                           
  2554  18FE  0064               	clrwdt	;clear the watchdog before getting into this loop
  2555  18FF                     clrloop0:	
  2556  18FF  0180               	clrf	0	;clear RAM location pointed to by FSR
  2557  1900  3101               	addfsr 0,1
  2558  1901  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2559  1902  28FF               	goto	clrloop0	;have we reached the end yet?
  2560  1903  3400               	retlw	0	;all done for this memory range, return
  2561                           
  2562                           	psect	inittext
  2563  18F8                     init_ram:	
  2564  18F8  00FE               	movwf	126
  2565  18F9                     initloop:	
  2566  18F9  0012               	moviw fsr0++
  2567  18FA  001E               	movwi fsr1++
  2568  18FB  0BFE               	decfsz	126,f
  2569  18FC  28F9               	goto	initloop
  2570  18FD  3400               	retlw	0
  2571                           
  2572                           	psect	cstackBANK1
  2573  00E6                     __pcstackBANK1:	
  2574  00E6                     ??_getRxData:	
  2575  00E6                     setDimmerLights_OnOff@lights:	
  2576                           ; 0 bytes @ 0x0
  2577                           
  2578                           
  2579                           ; 1 bytes @ 0x0
  2580  00E6                     	ds	1
  2581  00E7                     setDimmerLights_Main@lights:	
  2582  00E7                     getRxData@error:	
  2583                           ; 1 bytes @ 0x1
  2584                           
  2585                           
  2586                           ; 1 bytes @ 0x1
  2587  00E7                     	ds	1
  2588  00E8                     ??_setRF_Main:	
  2589                           
  2590                           ; 0 bytes @ 0x2
  2591  00E8                     	ds	1
  2592  00E9                     setRF_Main@error:	
  2593                           
  2594                           ; 1 bytes @ 0x3
  2595  00E9                     	ds	1
  2596  00EA                     ?_main:	
  2597  00EA                     main@argc:	
  2598                           ; 2 bytes @ 0x4
  2599                           
  2600                           
  2601                           ; 2 bytes @ 0x4
  2602  00EA                     	ds	2
  2603  00EC                     main@argv:	
  2604                           
  2605                           ; 2 bytes @ 0x6
  2606  00EC                     	ds	2
  2607                           
  2608                           	psect	cstackCOMMON
  2609  0070                     __pcstackCOMMON:	
  2610  0070                     ?_CC2500_WriteCommand:	
  2611  0070                     ?_RF_Timeout_Counter:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0070                     ?_setRF_TimeoutCleared:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0070                     ?_CC2500_WriteByte:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0070                     ?_CC2500_ReadStatus:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ?_CC2500_ReadByte:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ?_CC2500_PowerRST:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_CC2500_InitSetREG:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_CC2500_InitPATable:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_CC2500_ClearTXFIFO:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_CC2500_ClearRXFIFO:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_CC2500_FrequencyCabr:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_CC2500_SIDLEMode:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_DlyOff_Initialization:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_DlyOff_Main:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_setDimmerLights_SwOn:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_setDimmerLights_SwOff:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_setMemory_Modify:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_setDimmerLights_Initialization:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_setDimmerLights_Main:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_setDimmerLights_Line:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_setTxData:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_setRF_TransceiveGO:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_setLED_Initialization:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_setLED_Main:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_Fosc_Set:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_IO_Set:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_TMR1_Set:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_ADC_Set:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_IOC_Set:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_WDT_Set:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_TMR1_ISR:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_IOC_ISR:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_Timeout_Counter:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_set_TimeoutCleared:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_Flash_Memory_Write:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_Flash_Memory_Modify:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ?_WDT_Clearing:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_setLoad_AH_AL_Restore:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ?_setTemp_Initialization:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ?_setTemp_Main:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_setRF_Initialization:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_setRF_Main:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_RF_RxDisable:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_getRxData:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?_setLog_Code:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ?_setControl_Lights_Table:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0070                     ?_setRFSW_Control:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0070                     ?_setRFSW_AdjControl:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0070                     ?_setSw_Initialization:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0070                     ?_setSw_Main:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0070                     ?_myMain_Initialization:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0070                     ?_my_MainTimer:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0070                     ?_Exception_Main:	
  2768                           ; 0 bytes @ 0x0
  2769                           
  2770  0070                     ?_Buzzer_Initialization:	
  2771                           ; 0 bytes @ 0x0
  2772                           
  2773  0070                     ?_Buzzer_Main:	
  2774                           ; 0 bytes @ 0x0
  2775                           
  2776  0070                     ?_CC2500_TxData:	
  2777                           ; 0 bytes @ 0x0
  2778                           
  2779  0070                     ?_CC2500_RxData:	
  2780                           ; 0 bytes @ 0x0
  2781                           
  2782  0070                     ?_CC2500_PowerOnInitial:	
  2783                           ; 0 bytes @ 0x0
  2784                           
  2785  0070                     ?_DelayOffPointSelect:	
  2786                           ; 0 bytes @ 0x0
  2787                           
  2788  0070                     ?_DelayOff_Initialization:	
  2789                           ; 0 bytes @ 0x0
  2790                           
  2791  0070                     ?_DelayOff_Main:	
  2792                           ; 0 bytes @ 0x0
  2793                           
  2794  0070                     ?_DimmerIntr_Initialization:	
  2795                           ; 0 bytes @ 0x0
  2796                           
  2797  0070                     ?_DimmerLights_SelectPointer:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0070                     ?_DimmerLights_Initialization:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0070                     ?_setDimmerLights_DimmingOn:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0070                     ?_DimmerLights_Main:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0070                     ?_DimmerLights_TMR_1:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0070                     ??_DimmerLights_TMR_1:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0070                     ?_DimmerLights_IOC_1:	
  2816                           ; 0 bytes @ 0x0
  2817                           
  2818  0070                     ?_DimmerLights_TMR_2:	
  2819                           ; 0 bytes @ 0x0
  2820                           
  2821  0070                     ??_DimmerLights_TMR_2:	
  2822                           ; 0 bytes @ 0x0
  2823                           
  2824  0070                     ?_DimmerLights_IOC_2:	
  2825                           ; 0 bytes @ 0x0
  2826                           
  2827  0070                     ?_LedPointSelect:	
  2828                           ; 0 bytes @ 0x0
  2829                           
  2830  0070                     ?_LED_Initialization:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0070                     ?_LED_Main:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0070                     ?_Mcu_Initialization:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0070                     ?_ISR:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0070                     ?_Flash_Memory_Initialization:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0070                     ?_Flash_Memory_Main:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0070                     ?_Flash_Memory_Unlock:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0070                     ?_Flash_Memory_Erasing:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0070                     ?_setMemory_LoopSave:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0070                     ?_WDT_Main:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0070                     ?_Load_Initialization:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0070                     ?_getLoad_AD:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0070                     ?_Load_Main:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0070                     ?_Temp_Initialization:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0070                     ?_getTemp_AD:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0070                     ?_Temp_Main:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0070                     ?_RF_Initialization:	
  2879                           ; 0 bytes @ 0x0
  2880                           
  2881  0070                     ?_RF_Main:	
  2882                           ; 0 bytes @ 0x0
  2883                           
  2884  0070                     ?_setRF_Learn:	
  2885                           ; 0 bytes @ 0x0
  2886                           
  2887  0070                     ?_TouchPower:	
  2888                           ; 0 bytes @ 0x0
  2889                           
  2890  0070                     ?_SwPointSelect:	
  2891                           ; 0 bytes @ 0x0
  2892                           
  2893  0070                     ?_Switch_Initialization:	
  2894                           ; 0 bytes @ 0x0
  2895                           
  2896  0070                     ?_Switch_Main:	
  2897                           ; 0 bytes @ 0x0
  2898                           
  2899  0070                     ?_getDimmerLights_Status:	
  2900                           ; 0 bytes @ 0x0
  2901                           
  2902  0070                     ?_getDimmerLights_ValueToPercent:	
  2903                           ; 1 bytes @ 0x0
  2904                           
  2905  0070                     ?_getDimmerLights_PercentToValue:	
  2906                           ; 1 bytes @ 0x0
  2907                           
  2908  0070                     ?_getLoad_OK:	
  2909                           ; 1 bytes @ 0x0
  2910                           
  2911  0070                     ?_getMain_All_Error_Status:	
  2912                           ; 1 bytes @ 0x0
  2913                           
  2914  0070                     ?_getMain_All_LightsStatus:	
  2915                           ; 1 bytes @ 0x0
  2916                           
  2917  0070                     ?_getDimmerLights_Allow_Condition:	
  2918                           ; 1 bytes @ 0x0
  2919                           
  2920  0070                     ?_getCmd_Status:	
  2921                           ; 1 bytes @ 0x0
  2922                           
  2923  0070                     ?_Flash_Memory_Read:	
  2924                           ; 1 bytes @ 0x0
  2925                           
  2926  0070                     ?_getAll_Sw_KeyStatus:	
  2927                           ; 1 bytes @ 0x0
  2928                           
  2929  0070                     ?_getMain_Lights_Count:	
  2930                           ; 1 bytes @ 0x0
  2931                           
  2932  0070                     ?_getRF_KeyStatus:	
  2933                           ; 1 bytes @ 0x0
  2934                           
  2935  0070                     ?_getSw_KeyStatus:	
  2936                           ; 1 bytes @ 0x0
  2937                           
  2938  0070                     ?_getDelayOff_GO:	
  2939                           ; 1 bytes @ 0x0
  2940                           
  2941  0070                     ?_getDimmerIntr_DimmingValue:	
  2942                           ; 1 bytes @ 0x0
  2943                           
  2944  0070                     ?_getAll_DimmerIntr_Dimming_Sw_RF:	
  2945                           ; 1 bytes @ 0x0
  2946                           
  2947  0070                     ?_getDimmerLights_Line:	
  2948                           ; 1 bytes @ 0x0
  2949                           
  2950  0070                     ?_getDimmer_LoadGO:	
  2951                           ; 1 bytes @ 0x0
  2952                           
  2953  0070                     ?_getDimmer_Load_Status:	
  2954                           ; 1 bytes @ 0x0
  2955                           
  2956  0070                     ?___lbdiv:	
  2957                           ; 1 bytes @ 0x0
  2958                           
  2959  0070                     setDimmerLights_Initialization@lights:	
  2960                           ; 1 bytes @ 0x0
  2961                           
  2962  0070                     ___lbdiv@divisor:	
  2963                           ; 1 bytes @ 0x0
  2964                           
  2965                           
  2966                           ; 1 bytes @ 0x0
  2967  0070                     	ds	1
  2968  0071                     ??_TMR1_ISR:	
  2969  0071                     ??___lbdiv:	
  2970                           ; 0 bytes @ 0x1
  2971                           
  2972                           
  2973                           ; 0 bytes @ 0x1
  2974  0071                     	ds	1
  2975  0072                     ___lbdiv@dividend:	
  2976                           
  2977                           ; 1 bytes @ 0x2
  2978  0072                     	ds	1
  2979  0073                     ___lbdiv@counter:	
  2980                           
  2981                           ; 1 bytes @ 0x3
  2982  0073                     	ds	1
  2983  0074                     ___lbdiv@quotient:	
  2984                           
  2985                           ; 1 bytes @ 0x4
  2986  0074                     	ds	1
  2987  0075                     ?_Division:	
  2988  0075                     Division@num:	
  2989                           ; 1 bytes @ 0x5
  2990                           
  2991                           
  2992                           ; 1 bytes @ 0x5
  2993  0075                     	ds	1
  2994  0076                     ??_Division:	
  2995                           
  2996                           ; 0 bytes @ 0x6
  2997  0076                     	ds	2
  2998  0078                     Division@value:	
  2999                           
  3000                           ; 1 bytes @ 0x8
  3001  0078                     	ds	1
  3002  0079                     Division@result:	
  3003                           
  3004                           ; 1 bytes @ 0x9
  3005  0079                     	ds	1
  3006  007A                     ??_DimmerLights_IOC_1:	
  3007  007A                     ??_DimmerLights_IOC_2:	
  3008                           ; 0 bytes @ 0xA
  3009                           
  3010                           
  3011                           ; 0 bytes @ 0xA
  3012  007A                     	ds	2
  3013  007C                     ??_IOC_ISR:	
  3014  007C                     ??_ISR:	
  3015                           ; 0 bytes @ 0xC
  3016                           
  3017                           
  3018                           ; 0 bytes @ 0xC
  3019  007C                     	ds	1
  3020                           
  3021                           	psect	cstackBANK0
  3022  0020                     __pcstackBANK0:	
  3023  0020                     ??_RF_Timeout_Counter:	
  3024  0020                     ??_setRF_TimeoutCleared:	
  3025                           ; 0 bytes @ 0x0
  3026                           
  3027  0020                     ??_CC2500_WriteByte:	
  3028                           ; 0 bytes @ 0x0
  3029                           
  3030  0020                     ??_CC2500_ReadByte:	
  3031                           ; 0 bytes @ 0x0
  3032                           
  3033  0020                     ?_DelayTime_1us:	
  3034                           ; 0 bytes @ 0x0
  3035                           
  3036  0020                     ??_setMemory_Modify:	
  3037                           ; 0 bytes @ 0x0
  3038                           
  3039  0020                     ??_setDimmerLights_Initialization:	
  3040                           ; 0 bytes @ 0x0
  3041                           
  3042  0020                     ??_getLoad_OK:	
  3043                           ; 0 bytes @ 0x0
  3044                           
  3045  0020                     ??_getMain_All_Error_Status:	
  3046                           ; 0 bytes @ 0x0
  3047                           
  3048  0020                     ??_getMain_All_LightsStatus:	
  3049                           ; 0 bytes @ 0x0
  3050                           
  3051  0020                     ??_setDimmerLights_Line:	
  3052                           ; 0 bytes @ 0x0
  3053                           
  3054  0020                     ??_getCmd_Status:	
  3055                           ; 0 bytes @ 0x0
  3056                           
  3057  0020                     ?_setCmd_Status:	
  3058                           ; 0 bytes @ 0x0
  3059                           
  3060  0020                     ??_setTxData:	
  3061                           ; 0 bytes @ 0x0
  3062                           
  3063  0020                     ??_setRF_TransceiveGO:	
  3064                           ; 0 bytes @ 0x0
  3065                           
  3066  0020                     ??_Fosc_Set:	
  3067                           ; 0 bytes @ 0x0
  3068                           
  3069  0020                     ??_IO_Set:	
  3070                           ; 0 bytes @ 0x0
  3071                           
  3072  0020                     ??_TMR1_Set:	
  3073                           ; 0 bytes @ 0x0
  3074                           
  3075  0020                     ??_ADC_Set:	
  3076                           ; 0 bytes @ 0x0
  3077                           
  3078  0020                     ??_IOC_Set:	
  3079                           ; 0 bytes @ 0x0
  3080                           
  3081  0020                     ??_WDT_Set:	
  3082                           ; 0 bytes @ 0x0
  3083                           
  3084  0020                     ??_Timeout_Counter:	
  3085                           ; 0 bytes @ 0x0
  3086                           
  3087  0020                     ??_set_TimeoutCleared:	
  3088                           ; 0 bytes @ 0x0
  3089                           
  3090  0020                     ??_Flash_Memory_Read:	
  3091                           ; 0 bytes @ 0x0
  3092                           
  3093  0020                     ?_setMemory_Data:	
  3094                           ; 0 bytes @ 0x0
  3095                           
  3096  0020                     ??_Flash_Memory_Write:	
  3097                           ; 0 bytes @ 0x0
  3098                           
  3099  0020                     ??_getAll_Sw_KeyStatus:	
  3100                           ; 0 bytes @ 0x0
  3101                           
  3102  0020                     ??_WDT_Clearing:	
  3103                           ; 0 bytes @ 0x0
  3104                           
  3105  0020                     ??_setLoad_AH_AL_Restore:	
  3106                           ; 0 bytes @ 0x0
  3107                           
  3108  0020                     ??_getMain_Lights_Count:	
  3109                           ; 0 bytes @ 0x0
  3110                           
  3111  0020                     ??_setTemp_Initialization:	
  3112                           ; 0 bytes @ 0x0
  3113                           
  3114  0020                     ??_setRF_Initialization:	
  3115                           ; 0 bytes @ 0x0
  3116                           
  3117  0020                     ??_getRF_KeyStatus:	
  3118                           ; 0 bytes @ 0x0
  3119                           
  3120  0020                     ??_getSw_KeyStatus:	
  3121                           ; 0 bytes @ 0x0
  3122                           
  3123  0020                     ??_myMain_Initialization:	
  3124                           ; 0 bytes @ 0x0
  3125                           
  3126  0020                     ??_Buzzer_Initialization:	
  3127                           ; 0 bytes @ 0x0
  3128                           
  3129  0020                     ??_Buzzer_Main:	
  3130                           ; 0 bytes @ 0x0
  3131                           
  3132  0020                     ??_DelayOffPointSelect:	
  3133                           ; 0 bytes @ 0x0
  3134                           
  3135  0020                     ?_setDimmerIntr_ControlStatus:	
  3136                           ; 0 bytes @ 0x0
  3137                           
  3138  0020                     ??_getDimmerIntr_DimmingValue:	
  3139                           ; 0 bytes @ 0x0
  3140                           
  3141  0020                     ?_setDimmerIntr_Dimming_Sw:	
  3142                           ; 0 bytes @ 0x0
  3143                           
  3144  0020                     ?_setDimmerIntr_Dimming_RF:	
  3145                           ; 0 bytes @ 0x0
  3146                           
  3147  0020                     ??_getAll_DimmerIntr_Dimming_Sw_RF:	
  3148                           ; 0 bytes @ 0x0
  3149                           
  3150  0020                     ??_DimmerLights_SelectPointer:	
  3151                           ; 0 bytes @ 0x0
  3152                           
  3153  0020                     ??_getDimmerLights_Line:	
  3154                           ; 0 bytes @ 0x0
  3155                           
  3156  0020                     ??_getDimmer_LoadGO:	
  3157                           ; 0 bytes @ 0x0
  3158                           
  3159  0020                     ??_getDimmer_Load_Status:	
  3160                           ; 0 bytes @ 0x0
  3161                           
  3162  0020                     ??_LedPointSelect:	
  3163                           ; 0 bytes @ 0x0
  3164                           
  3165  0020                     ??_Flash_Memory_Unlock:	
  3166                           ; 0 bytes @ 0x0
  3167                           
  3168  0020                     ??_Flash_Memory_Erasing:	
  3169                           ; 0 bytes @ 0x0
  3170                           
  3171  0020                     ??_setMemory_LoopSave:	
  3172                           ; 0 bytes @ 0x0
  3173                           
  3174  0020                     ??_WDT_Main:	
  3175                           ; 0 bytes @ 0x0
  3176                           
  3177  0020                     ??_Temp_Initialization:	
  3178                           ; 0 bytes @ 0x0
  3179                           
  3180  0020                     ??_setRF_Learn:	
  3181                           ; 0 bytes @ 0x0
  3182                           
  3183  0020                     ??_TouchPower:	
  3184                           ; 0 bytes @ 0x0
  3185                           
  3186  0020                     ??_SwPointSelect:	
  3187                           ; 0 bytes @ 0x0
  3188                           
  3189  0020                     ?___bmul:	
  3190                           ; 0 bytes @ 0x0
  3191                           
  3192  0020                     ?_getBuz_GO:	
  3193                           ; 1 bytes @ 0x0
  3194                           
  3195  0020                     ?_getAD:	
  3196                           ; 2 bytes @ 0x0
  3197                           
  3198  0020                     ?___wmul:	
  3199                           ; 2 bytes @ 0x0
  3200                           
  3201  0020                     ?___awdiv:	
  3202                           ; 2 bytes @ 0x0
  3203                           
  3204  0020                     ?___lwdiv:	
  3205                           ; 2 bytes @ 0x0
  3206                           
  3207  0020                     ?___ftpack:	
  3208                           ; 2 bytes @ 0x0
  3209                           
  3210  0020                     setDimmerIntr_ControlStatus@command:	
  3211                           ; 3 bytes @ 0x0
  3212                           
  3213  0020                     setDimmerIntr_Dimming_Sw@command:	
  3214                           ; 1 bytes @ 0x0
  3215                           
  3216  0020                     setDimmerIntr_Dimming_RF@command:	
  3217                           ; 1 bytes @ 0x0
  3218                           
  3219  0020                     setDimmerLights_Line@lights:	
  3220                           ; 1 bytes @ 0x0
  3221                           
  3222  0020                     getDimmer_LoadGO@loadgo:	
  3223                           ; 1 bytes @ 0x0
  3224                           
  3225  0020                     getDimmer_Load_Status@status:	
  3226                           ; 1 bytes @ 0x0
  3227                           
  3228  0020                     getAD@adcon1:	
  3229                           ; 1 bytes @ 0x0
  3230                           
  3231  0020                     setMemory_Data@data:	
  3232                           ; 1 bytes @ 0x0
  3233                           
  3234  0020                     getLoad_OK@ok:	
  3235                           ; 1 bytes @ 0x0
  3236                           
  3237  0020                     getMain_All_LightsStatus@status:	
  3238                           ; 1 bytes @ 0x0
  3239                           
  3240  0020                     getMain_Lights_Count@count:	
  3241                           ; 1 bytes @ 0x0
  3242                           
  3243  0020                     setCmd_Status@cmd:	
  3244                           ; 1 bytes @ 0x0
  3245                           
  3246  0020                     getCmd_Status@number:	
  3247                           ; 1 bytes @ 0x0
  3248                           
  3249  0020                     ___bmul@multiplicand:	
  3250                           ; 1 bytes @ 0x0
  3251                           
  3252  0020                     DelayTime_1us@count:	
  3253                           ; 1 bytes @ 0x0
  3254                           
  3255  0020                     ___wmul@multiplier:	
  3256                           ; 2 bytes @ 0x0
  3257                           
  3258  0020                     ___awdiv@divisor:	
  3259                           ; 2 bytes @ 0x0
  3260                           
  3261  0020                     ___lwdiv@divisor:	
  3262                           ; 2 bytes @ 0x0
  3263                           
  3264  0020                     ___ftpack@arg:	
  3265                           ; 2 bytes @ 0x0
  3266                           
  3267                           
  3268                           ; 3 bytes @ 0x0
  3269  0020                     	ds	1
  3270  0021                     ??_getDimmerLights_Allow_Condition:	
  3271  0021                     ??_setCmd_Status:	
  3272                           ; 0 bytes @ 0x1
  3273                           
  3274  0021                     ??_setMemory_Data:	
  3275                           ; 0 bytes @ 0x1
  3276                           
  3277  0021                     ??_setDimmerIntr_ControlStatus:	
  3278                           ; 0 bytes @ 0x1
  3279                           
  3280  0021                     ??_setDimmerIntr_Dimming_Sw:	
  3281                           ; 0 bytes @ 0x1
  3282                           
  3283  0021                     ??_setDimmerIntr_Dimming_RF:	
  3284                           ; 0 bytes @ 0x1
  3285                           
  3286  0021                     ??_Mcu_Initialization:	
  3287                           ; 0 bytes @ 0x1
  3288                           
  3289  0021                     ??_RF_Initialization:	
  3290                           ; 0 bytes @ 0x1
  3291                           
  3292  0021                     ??___bmul:	
  3293                           ; 0 bytes @ 0x1
  3294                           
  3295  0021                     CC2500_WriteByte@loop_a:	
  3296                           ; 0 bytes @ 0x1
  3297                           
  3298  0021                     CC2500_ReadByte@loop_b:	
  3299                           ; 1 bytes @ 0x1
  3300                           
  3301  0021                     DelayOffPointSelect@sw:	
  3302                           ; 1 bytes @ 0x1
  3303                           
  3304  0021                     getDimmerIntr_DimmingValue@value:	
  3305                           ; 1 bytes @ 0x1
  3306                           
  3307  0021                     _getAll_DimmerIntr_Dimming_Sw_RF$2293:	
  3308                           ; 1 bytes @ 0x1
  3309                           
  3310  0021                     DimmerLights_SelectPointer@lights:	
  3311                           ; 1 bytes @ 0x1
  3312                           
  3313  0021                     getDimmerLights_Line@line:	
  3314                           ; 1 bytes @ 0x1
  3315                           
  3316  0021                     LedPointSelect@led:	
  3317                           ; 1 bytes @ 0x1
  3318                           
  3319  0021                     Flash_Memory_Read@i:	
  3320                           ; 1 bytes @ 0x1
  3321                           
  3322  0021                     Flash_Memory_Write@i:	
  3323                           ; 1 bytes @ 0x1
  3324                           
  3325  0021                     setMemory_Modify@command:	
  3326                           ; 1 bytes @ 0x1
  3327                           
  3328  0021                     setMemory_LoopSave@command:	
  3329                           ; 1 bytes @ 0x1
  3330                           
  3331  0021                     setLoad_AH_AL_Restore@i:	
  3332                           ; 1 bytes @ 0x1
  3333                           
  3334  0021                     setRF_Learn@command:	
  3335                           ; 1 bytes @ 0x1
  3336                           
  3337  0021                     getRF_KeyStatus@key:	
  3338                           ; 1 bytes @ 0x1
  3339                           
  3340  0021                     setRF_TransceiveGO@command:	
  3341                           ; 1 bytes @ 0x1
  3342                           
  3343  0021                     SwPointSelect@sw:	
  3344                           ; 1 bytes @ 0x1
  3345                           
  3346  0021                     _getSw_KeyStatus$6166:	
  3347                           ; 1 bytes @ 0x1
  3348                           
  3349  0021                     getAll_Sw_KeyStatus@status:	
  3350                           ; 1 bytes @ 0x1
  3351                           
  3352  0021                     getMain_Lights_Count@status1:	
  3353                           ; 1 bytes @ 0x1
  3354                           
  3355  0021                     getCmd_Status@cmd:	
  3356                           ; 1 bytes @ 0x1
  3357                           
  3358  0021                     _getMain_All_Error_Status$6910:	
  3359                           ; 1 bytes @ 0x1
  3360                           
  3361                           
  3362                           ; 2 bytes @ 0x1
  3363  0021                     	ds	1
  3364  0022                     ??_CC2500_WriteCommand:	
  3365  0022                     ??_CC2500_ReadStatus:	
  3366                           ; 0 bytes @ 0x2
  3367                           
  3368  0022                     ??_DelayTime_1us:	
  3369                           ; 0 bytes @ 0x2
  3370                           
  3371  0022                     ?_CC2500_WriteREG:	
  3372                           ; 0 bytes @ 0x2
  3373                           
  3374  0022                     ??_DlyOff_Initialization:	
  3375                           ; 0 bytes @ 0x2
  3376                           
  3377  0022                     ??_getDimmerLights_Status:	
  3378                           ; 0 bytes @ 0x2
  3379                           
  3380  0022                     ??_setDimmerLights_SwOff:	
  3381                           ; 0 bytes @ 0x2
  3382                           
  3383  0022                     ?_setLED:	
  3384                           ; 0 bytes @ 0x2
  3385                           
  3386  0022                     ??_setLED_Main:	
  3387                           ; 0 bytes @ 0x2
  3388                           
  3389  0022                     ??_getBuz_GO:	
  3390                           ; 0 bytes @ 0x2
  3391                           
  3392  0022                     ??_getDelayOff_GO:	
  3393                           ; 0 bytes @ 0x2
  3394                           
  3395  0022                     ??_setDimmerLights_DimmingOn:	
  3396                           ; 0 bytes @ 0x2
  3397                           
  3398  0022                     ?_setDimmerLights_DimmingRun:	
  3399                           ; 0 bytes @ 0x2
  3400                           
  3401  0022                     ??_Load_Initialization:	
  3402                           ; 0 bytes @ 0x2
  3403                           
  3404  0022                     CC2500_WriteREG@value:	
  3405                           ; 0 bytes @ 0x2
  3406                           
  3407  0022                     DlyOff_Initialization@sw:	
  3408                           ; 1 bytes @ 0x2
  3409                           
  3410  0022                     getDelayOff_GO@sw:	
  3411                           ; 1 bytes @ 0x2
  3412                           
  3413  0022                     setDimmerIntr_ControlStatus@lights:	
  3414                           ; 1 bytes @ 0x2
  3415                           
  3416  0022                     getDimmerIntr_DimmingValue@lights:	
  3417                           ; 1 bytes @ 0x2
  3418                           
  3419  0022                     setDimmerIntr_Dimming_Sw@lights:	
  3420                           ; 1 bytes @ 0x2
  3421                           
  3422  0022                     setDimmerIntr_Dimming_RF@lights:	
  3423                           ; 1 bytes @ 0x2
  3424                           
  3425  0022                     _getAll_DimmerIntr_Dimming_Sw_RF$2294:	
  3426                           ; 1 bytes @ 0x2
  3427                           
  3428  0022                     setDimmerLights_SwOff@sw:	
  3429                           ; 1 bytes @ 0x2
  3430                           
  3431  0022                     setDimmerLights_DimmingOn@sw:	
  3432                           ; 1 bytes @ 0x2
  3433                           
  3434  0022                     _getDimmerLights_Allow_Condition$2416:	
  3435                           ; 1 bytes @ 0x2
  3436                           
  3437  0022                     getDimmerLights_Status@lights:	
  3438                           ; 1 bytes @ 0x2
  3439                           
  3440  0022                     setDimmerLights_DimmingRun@command:	
  3441                           ; 1 bytes @ 0x2
  3442                           
  3443  0022                     setLED@command:	
  3444                           ; 1 bytes @ 0x2
  3445                           
  3446  0022                     Flash_Memory_Read@address:	
  3447                           ; 1 bytes @ 0x2
  3448                           
  3449  0022                     setMemory_Data@address:	
  3450                           ; 1 bytes @ 0x2
  3451                           
  3452  0022                     _getRF_KeyStatus$5110:	
  3453                           ; 1 bytes @ 0x2
  3454                           
  3455  0022                     _getSw_KeyStatus$6167:	
  3456                           ; 1 bytes @ 0x2
  3457                           
  3458  0022                     _getAll_Sw_KeyStatus$6170:	
  3459                           ; 1 bytes @ 0x2
  3460                           
  3461  0022                     getMain_Lights_Count@status2:	
  3462                           ; 1 bytes @ 0x2
  3463                           
  3464  0022                     setCmd_Status@number:	
  3465                           ; 1 bytes @ 0x2
  3466                           
  3467  0022                     ___bmul@product:	
  3468                           ; 1 bytes @ 0x2
  3469                           
  3470  0022                     DelayTime_1us@i:	
  3471                           ; 1 bytes @ 0x2
  3472                           
  3473  0022                     ___wmul@multiplicand:	
  3474                           ; 2 bytes @ 0x2
  3475                           
  3476  0022                     ___awdiv@dividend:	
  3477                           ; 2 bytes @ 0x2
  3478                           
  3479  0022                     ___lwdiv@dividend:	
  3480                           ; 2 bytes @ 0x2
  3481                           
  3482                           
  3483                           ; 2 bytes @ 0x2
  3484  0022                     	ds	1
  3485  0023                     ??_CC2500_WriteREG:	
  3486  0023                     ??_setLED:	
  3487                           ; 0 bytes @ 0x3
  3488                           
  3489  0023                     ??_DelayOff_Initialization:	
  3490                           ; 0 bytes @ 0x3
  3491                           
  3492  0023                     ??_setDimmerLights_DimmingRun:	
  3493                           ; 0 bytes @ 0x3
  3494                           
  3495  0023                     ??_getAD:	
  3496                           ; 0 bytes @ 0x3
  3497                           
  3498  0023                     CC2500_WriteCommand@command:	
  3499                           ; 0 bytes @ 0x3
  3500                           
  3501  0023                     CC2500_ReadStatus@status_addr:	
  3502                           ; 1 bytes @ 0x3
  3503                           
  3504  0023                     getDelayOff_GO@go:	
  3505                           ; 1 bytes @ 0x3
  3506                           
  3507  0023                     getAll_DimmerIntr_Dimming_Sw_RF@status:	
  3508                           ; 1 bytes @ 0x3
  3509                           
  3510  0023                     _getDimmerLights_Allow_Condition$2417:	
  3511                           ; 1 bytes @ 0x3
  3512                           
  3513  0023                     getDimmerLights_Status@status:	
  3514                           ; 1 bytes @ 0x3
  3515                           
  3516  0023                     setLED@led:	
  3517                           ; 1 bytes @ 0x3
  3518                           
  3519  0023                     getAD@adcon0:	
  3520                           ; 1 bytes @ 0x3
  3521                           
  3522  0023                     Flash_Memory_Read@ret:	
  3523                           ; 1 bytes @ 0x3
  3524                           
  3525  0023                     getSw_KeyStatus@status:	
  3526                           ; 1 bytes @ 0x3
  3527                           
  3528  0023                     ___bmul@multiplier:	
  3529                           ; 1 bytes @ 0x3
  3530                           
  3531  0023                     ___ftpack@exp:	
  3532                           ; 1 bytes @ 0x3
  3533                           
  3534  0023                     _getMain_All_Error_Status$6911:	
  3535                           ; 1 bytes @ 0x3
  3536                           
  3537                           
  3538                           ; 2 bytes @ 0x3
  3539  0023                     	ds	1
  3540  0024                     ??_CC2500_ClearTXFIFO:	
  3541  0024                     ??_CC2500_ClearRXFIFO:	
  3542                           ; 0 bytes @ 0x4
  3543                           
  3544  0024                     ??_CC2500_SIDLEMode:	
  3545                           ; 0 bytes @ 0x4
  3546                           
  3547  0024                     ??_setLED_Initialization:	
  3548                           ; 0 bytes @ 0x4
  3549                           
  3550  0024                     ??_Flash_Memory_Modify:	
  3551                           ; 0 bytes @ 0x4
  3552                           
  3553  0024                     ??_RF_RxDisable:	
  3554                           ; 0 bytes @ 0x4
  3555                           
  3556  0024                     ??_setSw_Initialization:	
  3557                           ; 0 bytes @ 0x4
  3558                           
  3559  0024                     ??_CC2500_TxData:	
  3560                           ; 0 bytes @ 0x4
  3561                           
  3562  0024                     ??_CC2500_RxData:	
  3563                           ; 0 bytes @ 0x4
  3564                           
  3565  0024                     ??_Flash_Memory_Initialization:	
  3566                           ; 0 bytes @ 0x4
  3567                           
  3568  0024                     ??_getLoad_AD:	
  3569                           ; 0 bytes @ 0x4
  3570                           
  3571  0024                     ??_getTemp_AD:	
  3572                           ; 0 bytes @ 0x4
  3573                           
  3574  0024                     ??___wmul:	
  3575                           ; 0 bytes @ 0x4
  3576                           
  3577  0024                     ??___awdiv:	
  3578                           ; 0 bytes @ 0x4
  3579                           
  3580  0024                     ??___lwdiv:	
  3581                           ; 0 bytes @ 0x4
  3582                           
  3583  0024                     CC2500_WriteREG@w_addr:	
  3584                           ; 0 bytes @ 0x4
  3585                           
  3586  0024                     _getDimmerLights_Allow_Condition$2418:	
  3587                           ; 1 bytes @ 0x4
  3588                           
  3589  0024                     setDimmerLights_DimmingRun@lights:	
  3590                           ; 1 bytes @ 0x4
  3591                           
  3592  0024                     setLED_Initialization@led:	
  3593                           ; 1 bytes @ 0x4
  3594                           
  3595  0024                     setLED_Main@led:	
  3596                           ; 1 bytes @ 0x4
  3597                           
  3598  0024                     setSw_Initialization@sw:	
  3599                           ; 1 bytes @ 0x4
  3600                           
  3601  0024                     getSw_KeyStatus@sw:	
  3602                           ; 1 bytes @ 0x4
  3603                           
  3604  0024                     ___ftpack@sign:	
  3605                           ; 1 bytes @ 0x4
  3606                           
  3607  0024                     getBuz_GO@i:	
  3608                           ; 1 bytes @ 0x4
  3609                           
  3610  0024                     DelayTime_1us@j:	
  3611                           ; 2 bytes @ 0x4
  3612                           
  3613  0024                     ___wmul@product:	
  3614                           ; 2 bytes @ 0x4
  3615                           
  3616                           
  3617                           ; 2 bytes @ 0x4
  3618  0024                     	ds	1
  3619  0025                     ??_CC2500_InitSetREG:	
  3620  0025                     ??_CC2500_InitPATable:	
  3621                           ; 0 bytes @ 0x5
  3622                           
  3623  0025                     ??___ftpack:	
  3624                           ; 0 bytes @ 0x5
  3625                           
  3626  0025                     ??_LED_Initialization:	
  3627                           ; 0 bytes @ 0x5
  3628                           
  3629  0025                     ??_LED_Main:	
  3630                           ; 0 bytes @ 0x5
  3631                           
  3632  0025                     ??_Switch_Initialization:	
  3633                           ; 0 bytes @ 0x5
  3634                           
  3635  0025                     CC2500_TxData@loop_e:	
  3636                           ; 0 bytes @ 0x5
  3637                           
  3638  0025                     CC2500_RxData@loop_f:	
  3639                           ; 1 bytes @ 0x5
  3640                           
  3641  0025                     getDimmerLights_Allow_Condition@lights:	
  3642                           ; 1 bytes @ 0x5
  3643                           
  3644  0025                     Flash_Memory_Initialization@value:	
  3645                           ; 1 bytes @ 0x5
  3646                           
  3647  0025                     Flash_Memory_Modify@i:	
  3648                           ; 1 bytes @ 0x5
  3649                           
  3650  0025                     getTemp_AD@channel:	
  3651                           ; 1 bytes @ 0x5
  3652                           
  3653  0025                     getMain_All_Error_Status@command:	
  3654                           ; 1 bytes @ 0x5
  3655                           
  3656  0025                     ___awdiv@counter:	
  3657                           ; 1 bytes @ 0x5
  3658                           
  3659  0025                     ___lwdiv@quotient:	
  3660                           ; 1 bytes @ 0x5
  3661                           
  3662                           
  3663                           ; 2 bytes @ 0x5
  3664  0025                     	ds	1
  3665  0026                     ??_CC2500_PowerRST:	
  3666  0026                     ??_CC2500_FrequencyCabr:	
  3667                           ; 0 bytes @ 0x6
  3668                           
  3669  0026                     ??_Flash_Memory_Main:	
  3670                           ; 0 bytes @ 0x6
  3671                           
  3672  0026                     CC2500_InitSetREG@temp1:	
  3673                           ; 0 bytes @ 0x6
  3674                           
  3675  0026                     CC2500_InitPATable@temp:	
  3676                           ; 1 bytes @ 0x6
  3677                           
  3678  0026                     getDimmerLights_Allow_Condition@allow:	
  3679                           ; 1 bytes @ 0x6
  3680                           
  3681  0026                     getLoad_AD@channel:	
  3682                           ; 1 bytes @ 0x6
  3683                           
  3684  0026                     getMain_All_Error_Status@status:	
  3685                           ; 1 bytes @ 0x6
  3686                           
  3687  0026                     ___awdiv@sign:	
  3688                           ; 1 bytes @ 0x6
  3689                           
  3690  0026                     getTemp_AD@ADRES:	
  3691                           ; 1 bytes @ 0x6
  3692                           
  3693                           
  3694                           ; 2 bytes @ 0x6
  3695  0026                     	ds	1
  3696  0027                     CC2500_InitSetREG@temp2:	
  3697  0027                     CC2500_InitPATable@loop_d:	
  3698                           ; 1 bytes @ 0x7
  3699                           
  3700  0027                     Flash_Memory_Main@key_Status:	
  3701                           ; 1 bytes @ 0x7
  3702                           
  3703  0027                     getLoad_AD@k:	
  3704                           ; 1 bytes @ 0x7
  3705                           
  3706  0027                     ___lwdiv@counter:	
  3707                           ; 1 bytes @ 0x7
  3708                           
  3709  0027                     ___awdiv@quotient:	
  3710                           ; 1 bytes @ 0x7
  3711                           
  3712                           
  3713                           ; 2 bytes @ 0x7
  3714  0027                     	ds	1
  3715  0028                     ??_Load_Main:	
  3716  0028                     ?___awtoft:	
  3717                           ; 0 bytes @ 0x8
  3718                           
  3719  0028                     CC2500_InitSetREG@loop_c:	
  3720                           ; 3 bytes @ 0x8
  3721                           
  3722  0028                     _Flash_Memory_Main$3307:	
  3723                           ; 1 bytes @ 0x8
  3724                           
  3725  0028                     getLoad_AD@j:	
  3726                           ; 1 bytes @ 0x8
  3727                           
  3728  0028                     ___awtoft@c:	
  3729                           ; 1 bytes @ 0x8
  3730                           
  3731                           
  3732                           ; 2 bytes @ 0x8
  3733  0028                     	ds	1
  3734  0029                     ?_setBuz:	
  3735  0029                     ??_CC2500_PowerOnInitial:	
  3736                           ; 0 bytes @ 0x9
  3737                           
  3738  0029                     setBuz@time:	
  3739                           ; 0 bytes @ 0x9
  3740                           
  3741  0029                     getLoad_AD@ADRES:	
  3742                           ; 2 bytes @ 0x9
  3743                           
  3744                           
  3745                           ; 2 bytes @ 0x9
  3746  0029                     	ds	1
  3747  002A                     _Load_Main$3687:	
  3748                           
  3749                           ; 2 bytes @ 0xA
  3750  002A                     	ds	1
  3751  002B                     ??_setBuz:	
  3752  002B                     ??___awtoft:	
  3753                           ; 0 bytes @ 0xB
  3754                           
  3755  002B                     getLoad_AD@i:	
  3756                           ; 0 bytes @ 0xB
  3757                           
  3758                           
  3759                           ; 1 bytes @ 0xB
  3760  002B                     	ds	1
  3761  002C                     setBuz@count:	
  3762  002C                     Load_Main@error:	
  3763                           ; 1 bytes @ 0xC
  3764                           
  3765                           
  3766                           ; 1 bytes @ 0xC
  3767  002C                     	ds	1
  3768  002D                     ??_setDimmerLights_SwOn:	
  3769  002D                     ??_my_MainTimer:	
  3770                           ; 0 bytes @ 0xD
  3771                           
  3772  002D                     ??_Exception_Main:	
  3773                           ; 0 bytes @ 0xD
  3774                           
  3775  002D                     Load_Main@ErrorCountValue:	
  3776                           ; 0 bytes @ 0xD
  3777                           
  3778  002D                     ___awtoft@sign:	
  3779                           ; 1 bytes @ 0xD
  3780                           
  3781                           
  3782                           ; 1 bytes @ 0xD
  3783  002D                     	ds	1
  3784  002E                     ?___ftdiv:	
  3785  002E                     ?___ftmul:	
  3786                           ; 3 bytes @ 0xE
  3787                           
  3788  002E                     _setDimmerLights_SwOn$2339:	
  3789                           ; 3 bytes @ 0xE
  3790                           
  3791  002E                     Load_Main@Load_RunStatus:	
  3792                           ; 1 bytes @ 0xE
  3793                           
  3794  002E                     Exception_Main@status:	
  3795                           ; 1 bytes @ 0xE
  3796                           
  3797  002E                     ___ftdiv@f2:	
  3798                           ; 1 bytes @ 0xE
  3799                           
  3800  002E                     ___ftmul@f1:	
  3801                           ; 3 bytes @ 0xE
  3802                           
  3803                           
  3804                           ; 3 bytes @ 0xE
  3805  002E                     	ds	1
  3806  002F                     _setDimmerLights_SwOn$2348:	
  3807  002F                     Load_Main@LightsCount:	
  3808                           ; 1 bytes @ 0xF
  3809                           
  3810  002F                     Exception_Main@count:	
  3811                           ; 1 bytes @ 0xF
  3812                           
  3813                           
  3814                           ; 1 bytes @ 0xF
  3815  002F                     	ds	1
  3816  0030                     setDimmerLights_SwOn@idle:	
  3817  0030                     Load_Main@i:	
  3818                           ; 1 bytes @ 0x10
  3819                           
  3820  0030                     Exception_Main@i:	
  3821                           ; 2 bytes @ 0x10
  3822                           
  3823                           
  3824                           ; 2 bytes @ 0x10
  3825  0030                     	ds	1
  3826  0031                     setDimmerLights_SwOn@sw:	
  3827  0031                     ___ftdiv@f1:	
  3828                           ; 1 bytes @ 0x11
  3829                           
  3830  0031                     ___ftmul@f2:	
  3831                           ; 3 bytes @ 0x11
  3832                           
  3833                           
  3834                           ; 3 bytes @ 0x11
  3835  0031                     	ds	1
  3836  0032                     ??_setSw_Main:	
  3837  0032                     Exception_Main@i_6923:	
  3838                           ; 0 bytes @ 0x12
  3839                           
  3840                           
  3841                           ; 2 bytes @ 0x12
  3842  0032                     	ds	2
  3843  0034                     ??___ftdiv:	
  3844  0034                     ??___ftmul:	
  3845                           ; 0 bytes @ 0x14
  3846                           
  3847  0034                     setSw_Main@sw:	
  3848                           ; 0 bytes @ 0x14
  3849                           
  3850  0034                     Exception_Main@error:	
  3851                           ; 1 bytes @ 0x14
  3852                           
  3853                           
  3854                           ; 1 bytes @ 0x14
  3855  0034                     	ds	1
  3856  0035                     ??_Switch_Main:	
  3857  0035                     Exception_Main@lights:	
  3858                           ; 0 bytes @ 0x15
  3859                           
  3860                           
  3861                           ; 1 bytes @ 0x15
  3862  0035                     	ds	3
  3863  0038                     ___ftdiv@cntr:	
  3864  0038                     ___ftmul@exp:	
  3865                           ; 1 bytes @ 0x18
  3866                           
  3867                           
  3868                           ; 1 bytes @ 0x18
  3869  0038                     	ds	1
  3870  0039                     ___ftdiv@f3:	
  3871  0039                     ___ftmul@f3_as_product:	
  3872                           ; 3 bytes @ 0x19
  3873                           
  3874                           
  3875                           ; 3 bytes @ 0x19
  3876  0039                     	ds	3
  3877  003C                     ___ftdiv@exp:	
  3878  003C                     ___ftmul@cntr:	
  3879                           ; 1 bytes @ 0x1C
  3880                           
  3881                           
  3882                           ; 1 bytes @ 0x1C
  3883  003C                     	ds	1
  3884  003D                     ___ftdiv@sign:	
  3885  003D                     ___ftmul@sign:	
  3886                           ; 1 bytes @ 0x1D
  3887                           
  3888                           
  3889                           ; 1 bytes @ 0x1D
  3890  003D                     	ds	1
  3891  003E                     ?___ftneg:	
  3892  003E                     ___ftneg@f1:	
  3893                           ; 3 bytes @ 0x1E
  3894                           
  3895                           
  3896                           ; 3 bytes @ 0x1E
  3897  003E                     	ds	3
  3898  0041                     ??___ftneg:	
  3899  0041                     ?___ftadd:	
  3900                           ; 0 bytes @ 0x21
  3901                           
  3902  0041                     ___ftadd@f1:	
  3903                           ; 3 bytes @ 0x21
  3904                           
  3905                           
  3906                           ; 3 bytes @ 0x21
  3907  0041                     	ds	3
  3908  0044                     ___ftadd@f2:	
  3909                           
  3910                           ; 3 bytes @ 0x24
  3911  0044                     	ds	3
  3912  0047                     ??___ftadd:	
  3913                           
  3914                           ; 0 bytes @ 0x27
  3915  0047                     	ds	4
  3916  004B                     ___ftadd@sign:	
  3917                           
  3918                           ; 1 bytes @ 0x2B
  3919  004B                     	ds	1
  3920  004C                     ___ftadd@exp2:	
  3921                           
  3922                           ; 1 bytes @ 0x2C
  3923  004C                     	ds	1
  3924  004D                     ___ftadd@exp1:	
  3925                           
  3926                           ; 1 bytes @ 0x2D
  3927  004D                     	ds	1
  3928  004E                     ?___fttol:	
  3929  004E                     ___fttol@f1:	
  3930                           ; 4 bytes @ 0x2E
  3931                           
  3932                           
  3933                           ; 3 bytes @ 0x2E
  3934  004E                     	ds	4
  3935  0052                     ??___fttol:	
  3936                           
  3937                           ; 0 bytes @ 0x32
  3938  0052                     	ds	4
  3939  0056                     ___fttol@sign1:	
  3940                           
  3941                           ; 1 bytes @ 0x36
  3942  0056                     	ds	1
  3943  0057                     ___fttol@lval:	
  3944                           
  3945                           ; 4 bytes @ 0x37
  3946  0057                     	ds	4
  3947  005B                     ___fttol@exp1:	
  3948                           
  3949                           ; 1 bytes @ 0x3B
  3950  005B                     	ds	1
  3951  005C                     ??_getDimmerLights_ValueToPercent:	
  3952  005C                     ??_getDimmerLights_PercentToValue:	
  3953                           ; 0 bytes @ 0x3C
  3954                           
  3955                           
  3956                           ; 0 bytes @ 0x3C
  3957  005C                     	ds	2
  3958  005E                     getDimmerLights_PercentToValue@value:	
  3959  005E                     getDimmerLights_ValueToPercent@value:	
  3960                           ; 1 bytes @ 0x3E
  3961                           
  3962                           
  3963                           ; 1 bytes @ 0x3E
  3964  005E                     	ds	1
  3965  005F                     getDimmerLights_PercentToValue@i:	
  3966  005F                     getDimmerLights_ValueToPercent@i:	
  3967                           ; 3 bytes @ 0x3F
  3968                           
  3969                           
  3970                           ; 3 bytes @ 0x3F
  3971  005F                     	ds	3
  3972  0062                     ?_setProductData:	
  3973  0062                     ??_DimmerIntr_Initialization:	
  3974                           ; 0 bytes @ 0x42
  3975                           
  3976  0062                     ?_setDimmerIntr_DimmingValue:	
  3977                           ; 0 bytes @ 0x42
  3978                           
  3979  0062                     ?_setDimmerIntr_MaxmumValue:	
  3980                           ; 0 bytes @ 0x42
  3981                           
  3982  0062                     setDimmerIntr_DimmingValue@value:	
  3983                           ; 0 bytes @ 0x42
  3984                           
  3985  0062                     setDimmerIntr_MaxmumValue@value:	
  3986                           ; 1 bytes @ 0x42
  3987                           
  3988  0062                     setProductData@value:	
  3989                           ; 1 bytes @ 0x42
  3990                           
  3991                           
  3992                           ; 1 bytes @ 0x42
  3993  0062                     	ds	1
  3994  0063                     ??_setProductData:	
  3995  0063                     ??_setDimmerIntr_DimmingValue:	
  3996                           ; 0 bytes @ 0x43
  3997                           
  3998  0063                     ??_setDimmerIntr_MaxmumValue:	
  3999                           ; 0 bytes @ 0x43
  4000                           
  4001  0063                     ??_DimmerLights_Initialization:	
  4002                           ; 0 bytes @ 0x43
  4003                           
  4004                           
  4005                           ; 0 bytes @ 0x43
  4006  0063                     	ds	1
  4007  0064                     setDimmerIntr_DimmingValue@lights:	
  4008  0064                     setDimmerIntr_MaxmumValue@lights:	
  4009                           ; 1 bytes @ 0x44
  4010                           
  4011  0064                     setProductData@address:	
  4012                           ; 1 bytes @ 0x44
  4013                           
  4014                           
  4015                           ; 1 bytes @ 0x44
  4016  0064                     	ds	1
  4017  0065                     ??_DlyOff_Main:	
  4018  0065                     ?_setRF_DimmerLights:	
  4019                           ; 0 bytes @ 0x45
  4020                           
  4021  0065                     ??_setTemp_Main:	
  4022                           ; 0 bytes @ 0x45
  4023                           
  4024  0065                     ??_setLog_Code:	
  4025                           ; 0 bytes @ 0x45
  4026                           
  4027  0065                     ??_setRFSW_AdjControl:	
  4028                           ; 0 bytes @ 0x45
  4029                           
  4030  0065                     ?_setDelayOff_GO:	
  4031                           ; 0 bytes @ 0x45
  4032                           
  4033  0065                     setDelayOff_GO@command:	
  4034                           ; 0 bytes @ 0x45
  4035                           
  4036  0065                     setRF_DimmerLights@on:	
  4037                           ; 1 bytes @ 0x45
  4038                           
  4039                           
  4040                           ; 1 bytes @ 0x45
  4041  0065                     	ds	1
  4042  0066                     ??_setRF_DimmerLights:	
  4043  0066                     setDelayOff_GO@value:	
  4044                           ; 0 bytes @ 0x46
  4045                           
  4046  0066                     setTemp_Main@error:	
  4047                           ; 1 bytes @ 0x46
  4048                           
  4049                           
  4050                           ; 1 bytes @ 0x46
  4051  0066                     	ds	1
  4052  0067                     ??_setDelayOff_GO:	
  4053  0067                     DlyOff_Main@sw:	
  4054                           ; 0 bytes @ 0x47
  4055                           
  4056  0067                     setRFSW_AdjControl@status:	
  4057                           ; 1 bytes @ 0x47
  4058                           
  4059  0067                     setTemp_Main@SafeValue:	
  4060                           ; 1 bytes @ 0x47
  4061                           
  4062                           
  4063                           ; 2 bytes @ 0x47
  4064  0067                     	ds	1
  4065  0068                     ??_DelayOff_Main:	
  4066  0068                     setRFSW_AdjControl@sw:	
  4067                           ; 0 bytes @ 0x48
  4068                           
  4069  0068                     setRF_DimmerLights@status:	
  4070                           ; 1 bytes @ 0x48
  4071                           
  4072                           
  4073                           ; 1 bytes @ 0x48
  4074  0068                     	ds	1
  4075  0069                     setDelayOff_GO@i:	
  4076  0069                     setRF_DimmerLights@lights:	
  4077                           ; 1 bytes @ 0x49
  4078                           
  4079  0069                     setTemp_Main@DangerValue:	
  4080                           ; 1 bytes @ 0x49
  4081                           
  4082                           
  4083                           ; 2 bytes @ 0x49
  4084  0069                     	ds	1
  4085  006A                     ?_setDimmerLights_Dimming:	
  4086  006A                     setDelayOff_GO@j:	
  4087                           ; 0 bytes @ 0x4A
  4088                           
  4089  006A                     setDimmerLights_Dimming@status:	
  4090                           ; 1 bytes @ 0x4A
  4091                           
  4092                           
  4093                           ; 1 bytes @ 0x4A
  4094  006A                     	ds	1
  4095  006B                     ??_setDimmerLights_Dimming:	
  4096  006B                     setDelayOff_GO@k:	
  4097                           ; 0 bytes @ 0x4B
  4098                           
  4099  006B                     setTemp_Main@TempGO:	
  4100                           ; 1 bytes @ 0x4B
  4101                           
  4102                           
  4103                           ; 1 bytes @ 0x4B
  4104  006B                     	ds	1
  4105  006C                     setDelayOff_GO@sw:	
  4106  006C                     setDimmerLights_Dimming@value:	
  4107                           ; 1 bytes @ 0x4C
  4108                           
  4109  006C                     setTemp_Main@AD:	
  4110                           ; 1 bytes @ 0x4C
  4111                           
  4112                           
  4113                           ; 2 bytes @ 0x4C
  4114  006C                     	ds	1
  4115  006D                     ?_setDimmerLights_OnOff:	
  4116  006D                     ??_setRFSW_Control:	
  4117                           ; 0 bytes @ 0x4D
  4118                           
  4119  006D                     setDimmerLights_OnOff@command:	
  4120                           ; 0 bytes @ 0x4D
  4121                           
  4122  006D                     setDimmerLights_Dimming@lights:	
  4123                           ; 1 bytes @ 0x4D
  4124                           
  4125                           
  4126                           ; 1 bytes @ 0x4D
  4127  006D                     	ds	1
  4128  006E                     ??_setDimmerLights_OnOff:	
  4129  006E                     ??_Temp_Main:	
  4130                           ; 0 bytes @ 0x4E
  4131                           
  4132  006E                     setRFSW_Control@status:	
  4133                           ; 0 bytes @ 0x4E
  4134                           
  4135                           
  4136                           ; 1 bytes @ 0x4E
  4137  006E                     	ds	1
  4138  006F                     setRFSW_Control@sw:	
  4139                           
  4140                           ; 1 bytes @ 0x4F
  4141  006F                     	ds	1
  4142  0070                     ??_setDimmerLights_Main:	
  4143  0070                     ??_setControl_Lights_Table:	
  4144                           ; 0 bytes @ 0x50
  4145                           
  4146  0070                     ??_DimmerLights_Main:	
  4147                           ; 0 bytes @ 0x50
  4148                           
  4149  0070                     ??_RF_Main:	
  4150                           ; 0 bytes @ 0x50
  4151                           
  4152  0070                     ??_main:	
  4153                           ; 0 bytes @ 0x50
  4154                           
  4155                           
  4156                           	psect	maintext
  4157  1464                     __pmaintext:	
  4158                           ; 0 bytes @ 0x50
  4159 ;;
  4160 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4161 ;;
  4162 ;; *************** function _main *****************
  4163 ;; Defined at:
  4164 ;;		line 7 in file "../src/main_B1.c"
  4165 ;; Parameters:    Size  Location     Type
  4166 ;;  argc            2    4[BANK1 ] int 
  4167 ;;  argv            2    6[BANK1 ] PTR PTR unsigned char 
  4168 ;; Auto vars:     Size  Location     Type
  4169 ;;		None
  4170 ;; Return value:  Size  Location     Type
  4171 ;;                  2    4[BANK1 ] int 
  4172 ;; Registers used:
  4173 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4174 ;; Tracked objects:
  4175 ;;		On entry : 17F/0
  4176 ;;		On exit  : 0/0
  4177 ;;		Unchanged: 0/0
  4178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4179 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4182 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4183 ;;Total ram usage:        4 bytes
  4184 ;; Hardware stack levels required when called:   13
  4185 ;; This function calls:
  4186 ;;		_Buzzer_Initialization
  4187 ;;		_Buzzer_Main
  4188 ;;		_CC2500_PowerOnInitial
  4189 ;;		_DelayOff_Initialization
  4190 ;;		_DelayOff_Main
  4191 ;;		_DimmerLights_Initialization
  4192 ;;		_DimmerLights_Main
  4193 ;;		_Exception_Main
  4194 ;;		_Flash_Memory_Initialization
  4195 ;;		_Flash_Memory_Main
  4196 ;;		_LED_Initialization
  4197 ;;		_LED_Main
  4198 ;;		_Load_Initialization
  4199 ;;		_Load_Main
  4200 ;;		_Mcu_Initialization
  4201 ;;		_RF_Initialization
  4202 ;;		_RF_Main
  4203 ;;		_Switch_Initialization
  4204 ;;		_Switch_Main
  4205 ;;		_Temp_Initialization
  4206 ;;		_Temp_Main
  4207 ;;		_WDT_Main
  4208 ;;		_getLoad_AD
  4209 ;;		_getTemp_AD
  4210 ;;		_myMain_Initialization
  4211 ;;		_my_MainTimer
  4212 ;; This function is called by:
  4213 ;;		Startup code after reset
  4214 ;; This function uses a non-reentrant model
  4215 ;;
  4216                           
  4217                           
  4218                           ;psect for function _main
  4219  1464                     _main:	
  4220                           
  4221                           ;main_B1.c: 8: myMain_Initialization();
  4222                           
  4223                           ;incstack = 0
  4224                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4225  1464  319B  2316  3194   	fcall	_myMain_Initialization
  4226                           
  4227                           ;main_B1.c: 9: Mcu_Initialization();
  4228  1467  319A  22A6  3194   	fcall	_Mcu_Initialization
  4229                           
  4230                           ;main_B1.c: 10: Flash_Memory_Initialization();
  4231  146A  3186  26FC  3194   	fcall	_Flash_Memory_Initialization
  4232                           
  4233                           ;main_B1.c: 11: LED_Initialization();
  4234  146D  3199  21B1  3194   	fcall	_LED_Initialization
  4235                           
  4236                           ;main_B1.c: 12: Buzzer_Initialization();
  4237  1470  3198  20CA  3194   	fcall	_Buzzer_Initialization
  4238                           
  4239                           ;main_B1.c: 14: ;;
  4240                           ;main_B1.c: 15: Temp_Initialization();
  4241  1473  3198  20D6  3194   	fcall	_Temp_Initialization
  4242                           
  4243                           ;main_B1.c: 16: Load_Initialization();
  4244  1476  3198  20CD  3194   	fcall	_Load_Initialization
  4245                           
  4246                           ;main_B1.c: 17: ;;
  4247                           ;main_B1.c: 18: DelayOff_Initialization();
  4248  1479  3199  210B  3194   	fcall	_DelayOff_Initialization
  4249                           
  4250                           ;main_B1.c: 20: DimmerLights_Initialization();
  4251  147C  3199  2155  3194   	fcall	_DimmerLights_Initialization
  4252                           
  4253                           ;main_B1.c: 21: ;;
  4254                           ;main_B1.c: 22: ;;
  4255                           ;main_B1.c: 23: ;;
  4256                           ;main_B1.c: 24: Switch_Initialization();
  4257  147F  3199  213B  3194   	fcall	_Switch_Initialization
  4258                           
  4259                           ;main_B1.c: 25: RF_Initialization();
  4260  1482  3198  20D0  3194   	fcall	_RF_Initialization
  4261                           
  4262                           ;main_B1.c: 26: CC2500_PowerOnInitial();
  4263  1485  319B  2366  3194   	fcall	_CC2500_PowerOnInitial
  4264  1488                     l9626:	
  4265                           ;main_B1.c: 27: ;;
  4266                           ;main_B1.c: 28: ;;
  4267                           ;main_B1.c: 30: while (1) {
  4268                           
  4269                           
  4270                           ;main_B1.c: 32: if (myMain.PowerON == 1) {
  4271  1488  0021               	movlb	1	; select bank1
  4272  1489  1C2E               	btfss	_myMain^(0+128),0
  4273  148A  2C93               	goto	l9630
  4274                           
  4275                           ;main_B1.c: 38: getLoad_AD(0x05);
  4276  148B  3005               	movlw	5
  4277  148C  318A  221D  3194   	fcall	_getLoad_AD
  4278                           
  4279                           ;main_B1.c: 42: getTemp_AD(0x09);
  4280  148F  3009               	movlw	9
  4281  1490  319F  27CF  3194   	fcall	_getTemp_AD
  4282  1493                     l9630:	
  4283                           
  4284                           ;main_B1.c: 57: }
  4285                           ;main_B1.c: 93: if (Timer1.Timeout == 1) {
  4286  1493  0022               	movlb	2	; select bank2
  4287  1494  1C31               	btfss	_Timer1^(0+256),0
  4288  1495  2C88               	goto	l9626
  4289                           
  4290                           ;main_B1.c: 94: Timer1.Timeout = 0;
  4291  1496  1031               	bcf	_Timer1^(0+256),0
  4292                           
  4293                           ;main_B1.c: 96: my_MainTimer();
  4294  1497  3191  2107  3194   	fcall	_my_MainTimer
  4295                           
  4296                           ;main_B1.c: 97: WDT_Main();
  4297  149A  319A  22B8  3194   	fcall	_WDT_Main
  4298                           
  4299                           ;main_B1.c: 98: ;;
  4300                           ;main_B1.c: 99: ;;
  4301                           ;main_B1.c: 100: if (myMain.PowerON == 1) {
  4302  149D  0021               	movlb	1	; select bank1
  4303  149E  1C2E               	btfss	_myMain^(0+128),0
  4304  149F  2C88               	goto	l9626
  4305                           
  4306                           ;main_B1.c: 101: Flash_Memory_Main();
  4307  14A0  3191  21FE  3194   	fcall	_Flash_Memory_Main
  4308                           
  4309                           ;main_B1.c: 103: LED_Main();
  4310  14A3  3199  21BD  3194   	fcall	_LED_Main
  4311                           
  4312                           ;main_B1.c: 104: Buzzer_Main();
  4313  14A6  3192  22C4  3194   	fcall	_Buzzer_Main
  4314                           
  4315                           ;main_B1.c: 106: ;;
  4316                           ;main_B1.c: 107: Temp_Main();
  4317  14A9  3190  2000  3194   	fcall	_Temp_Main
  4318                           
  4319                           ;main_B1.c: 108: Load_Main();
  4320  14AC  3180  2053  3194   	fcall	_Load_Main
  4321                           
  4322                           ;main_B1.c: 109: ;;
  4323                           ;main_B1.c: 111: ;;
  4324                           ;main_B1.c: 112: DimmerLights_Main();
  4325  14AF  319D  259C  3194   	fcall	_DimmerLights_Main
  4326                           
  4327                           ;main_B1.c: 113: Switch_Main();
  4328  14B2  3199  2176  3194   	fcall	_Switch_Main
  4329                           
  4330                           ;main_B1.c: 114: ;;
  4331                           ;main_B1.c: 115: ;;
  4332                           ;main_B1.c: 117: RF_Main();
  4333  14B5  3198  20D3  3194   	fcall	_RF_Main
  4334                           
  4335                           ;main_B1.c: 118: DelayOff_Main();
  4336  14B8  3199  2113  3194   	fcall	_DelayOff_Main
  4337                           
  4338                           ;main_B1.c: 119: ;;
  4339                           ;main_B1.c: 120: ;;
  4340                           ;main_B1.c: 121: Exception_Main();
  4341  14BB  3184  247F  3194   	fcall	_Exception_Main
  4342  14BE  2C88               	goto	l9626
  4343  14BF                     __end_of_main:	
  4344                           ;main_B1.c: 128: }
  4345                           ;main_B1.c: 129: }
  4346                           ;main_B1.c: 163: }
  4347                           ;main_B1.c: 164: return (0);
  4348                           ;	Return value of _main is never used
  4349                           
  4350                           
  4351                           	psect	text1
  4352  1107                     __ptext1:	
  4353 ;; *************** function _my_MainTimer *****************
  4354 ;; Defined at:
  4355 ;;		line 185 in file "../src/main_B1.c"
  4356 ;; Parameters:    Size  Location     Type
  4357 ;;		None
  4358 ;; Auto vars:     Size  Location     Type
  4359 ;;		None
  4360 ;; Return value:  Size  Location     Type
  4361 ;;		None               void
  4362 ;; Registers used:
  4363 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4364 ;; Tracked objects:
  4365 ;;		On entry : 0/0
  4366 ;;		On exit  : 0/0
  4367 ;;		Unchanged: 0/0
  4368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4371 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4372 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4373 ;;Total ram usage:        1 bytes
  4374 ;; Hardware stack levels used:    1
  4375 ;; Hardware stack levels required when called:    7
  4376 ;; This function calls:
  4377 ;;		_setBuz
  4378 ;; This function is called by:
  4379 ;;		_main
  4380 ;; This function uses a non-reentrant model
  4381 ;;
  4382                           
  4383                           
  4384                           ;psect for function _my_MainTimer
  4385  1107                     _my_MainTimer:	
  4386                           
  4387                           ;main_B1.c: 187: if (myMain.PowerON == 0) {
  4388                           
  4389                           ;incstack = 0
  4390                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4391  1107  0021               	movlb	1	; select bank1
  4392  1108  182E               	btfsc	_myMain^(0+128),0
  4393  1109  2921               	goto	l8950
  4394                           
  4395                           ;main_B1.c: 188: myMain.PowerCount++;
  4396  110A  3001               	movlw	1
  4397  110B  0020               	movlb	0	; select bank0
  4398  110C  00AD               	movwf	??_my_MainTimer
  4399  110D  082D               	movf	??_my_MainTimer,w
  4400  110E  0021               	movlb	1	; select bank1
  4401  110F  07AF               	addwf	(_myMain^(0+128)+1),f
  4402                           
  4403                           ;main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  4404  1110  082F               	movf	(_myMain^(0+128)+1),w
  4405  1111  3A4B               	xorlw	75
  4406  1112  1D03               	skipz
  4407  1113  0008               	return
  4408                           
  4409                           ;main_B1.c: 190: myMain.PowerCount = 0;
  4410  1114  01AF               	clrf	(_myMain^(0+128)+1)
  4411                           
  4412                           ;main_B1.c: 191: myMain.PowerON = 1;
  4413  1115  142E               	bsf	_myMain^(0+128),0
  4414                           
  4415                           ;main_B1.c: 196: setBuz(3, 50);
  4416  1116  3032               	movlw	50
  4417  1117  0020               	movlb	0	; select bank0
  4418  1118  00A9               	movwf	setBuz@time
  4419  1119  3000               	movlw	0
  4420  111A  00AA               	movwf	setBuz@time+1
  4421  111B  3003               	movlw	3
  4422  111C  3194  240B         	fcall	_setBuz
  4423                           
  4424                           ;main_B1.c: 197: myMain.SelfTest = 1;
  4425  111E  0021               	movlb	1	; select bank1
  4426  111F  162E               	bsf	_myMain^(0+128),4
  4427                           
  4428                           ;main_B1.c: 206: }
  4429                           ;main_B1.c: 207: } else {
  4430  1120  0008               	return
  4431  1121                     l8950:	
  4432                           
  4433                           ;main_B1.c: 208: myMain.PowerCount++;
  4434  1121  3001               	movlw	1
  4435  1122  0020               	movlb	0	; select bank0
  4436  1123  00AD               	movwf	??_my_MainTimer
  4437  1124  082D               	movf	??_my_MainTimer,w
  4438  1125  0021               	movlb	1	; select bank1
  4439  1126  07AF               	addwf	(_myMain^(0+128)+1),f
  4440                           
  4441                           ;main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  4442  1127  082F               	movf	(_myMain^(0+128)+1),w
  4443  1128  3A32               	xorlw	50
  4444  1129  1903               	btfsc	3,2
  4445                           
  4446                           ;main_B1.c: 210: myMain.PowerCount = 0;
  4447  112A  01AF               	clrf	(_myMain^(0+128)+1)
  4448                           
  4449                           ;main_B1.c: 226: }
  4450                           ;main_B1.c: 228: myMain.Count1++;
  4451  112B  3001               	movlw	1
  4452  112C  07B2               	addwf	(_myMain^(0+128)+4),f
  4453  112D  3000               	movlw	0
  4454  112E  3DB3               	addwfc	((_myMain+1)^(0+128)+4),f
  4455                           
  4456                           ;main_B1.c: 229: if (myMain.Count1 == (1000 / 20)) {
  4457  112F  3004               	movlw	4
  4458  1130  3EAE               	addlw	_myMain& (0+255)
  4459  1131  0086               	movwf	6
  4460  1132  0187               	clrf	7
  4461  1133  3F40               	moviw [0]fsr1
  4462  1134  3A32               	xorlw	50
  4463  1135  1D03               	skipz
  4464  1136  2939               	goto	u9895
  4465  1137  3F41               	moviw [1]fsr1
  4466  1138  3A00               	xorlw	0
  4467  1139                     u9895:	
  4468  1139  1D03               	skipz
  4469  113A  0008               	return
  4470                           
  4471                           ;main_B1.c: 230: myMain.Count1 = 0;
  4472  113B  01B2               	clrf	(_myMain^(0+128)+4)
  4473  113C  01B3               	clrf	((_myMain+1)^(0+128)+4)
  4474                           
  4475                           ;main_B1.c: 242: if (myMain.Flag) {
  4476  113D  1CAE               	btfss	_myMain^(0+128),1
  4477  113E  2941               	goto	l2858
  4478                           
  4479                           ;main_B1.c: 243: myMain.Flag = 0;
  4480  113F  10AE               	bcf	_myMain^(0+128),1
  4481                           
  4482                           ;main_B1.c: 252: } else {
  4483  1140  0008               	return
  4484  1141                     l2858:	
  4485                           
  4486                           ;main_B1.c: 253: myMain.Flag = 1;
  4487  1141  14AE               	bsf	_myMain^(0+128),1
  4488  1142  0008               	return
  4489  1143                     __end_of_my_MainTimer:	
  4490                           
  4491                           	psect	text2
  4492  1B16                     __ptext2:	
  4493 ;; *************** function _myMain_Initialization *****************
  4494 ;; Defined at:
  4495 ;;		line 170 in file "../src/main_B1.c"
  4496 ;; Parameters:    Size  Location     Type
  4497 ;;		None
  4498 ;; Auto vars:     Size  Location     Type
  4499 ;;		None
  4500 ;; Return value:  Size  Location     Type
  4501 ;;		None               void
  4502 ;; Registers used:
  4503 ;;		wreg, fsr1l, fsr1h
  4504 ;; Tracked objects:
  4505 ;;		On entry : 0/0
  4506 ;;		On exit  : 0/0
  4507 ;;		Unchanged: 0/0
  4508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4510 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4511 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4512 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4513 ;;Total ram usage:        1 bytes
  4514 ;; Hardware stack levels used:    1
  4515 ;; Hardware stack levels required when called:    5
  4516 ;; This function calls:
  4517 ;;		Nothing
  4518 ;; This function is called by:
  4519 ;;		_main
  4520 ;; This function uses a non-reentrant model
  4521 ;;
  4522                           
  4523                           
  4524                           ;psect for function _myMain_Initialization
  4525  1B16                     _myMain_Initialization:	
  4526                           
  4527                           ;main_B1.c: 173: product = &_product;
  4528                           
  4529                           ;incstack = 0
  4530                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4531  1B16  3045               	movlw	__product& (0+255)
  4532  1B17  0020               	movlb	0	; select bank0
  4533  1B18  00A0               	movwf	??_myMain_Initialization
  4534  1B19  0820               	movf	??_myMain_Initialization,w
  4535  1B1A  0021               	movlb	1	; select bank1
  4536  1B1B  00EE               	movwf	_product^(0+128)
  4537                           
  4538                           ;main_B1.c: 174: product->Data[20] = 210;
  4539  1B1C  30D2               	movlw	210
  4540  1B1D  0020               	movlb	0	; select bank0
  4541  1B1E  00A0               	movwf	??_myMain_Initialization
  4542  1B1F  0021               	movlb	1	; select bank1
  4543  1B20  086E               	movf	_product^(0+128),w
  4544  1B21  3E14               	addlw	20
  4545  1B22  0086               	movwf	6
  4546  1B23  3002               	movlw	2	; select bank4/5
  4547  1B24  0087               	movwf	7
  4548  1B25  0020               	movlb	0	; select bank0
  4549  1B26  0820               	movf	??_myMain_Initialization,w
  4550  1B27  0081               	movwf	1
  4551  1B28  0008               	return
  4552  1B29                     __end_of_myMain_Initialization:	
  4553                           
  4554                           	psect	text3
  4555  1FCF                     __ptext3:	
  4556 ;; *************** function _getTemp_AD *****************
  4557 ;; Defined at:
  4558 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4559 ;; Parameters:    Size  Location     Type
  4560 ;;  channel         1    wreg     unsigned char 
  4561 ;; Auto vars:     Size  Location     Type
  4562 ;;  channel         1    5[BANK0 ] unsigned char 
  4563 ;;  ADRES           2    6[BANK0 ] unsigned int 
  4564 ;; Return value:  Size  Location     Type
  4565 ;;		None               void
  4566 ;; Registers used:
  4567 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4568 ;; Tracked objects:
  4569 ;;		On entry : 0/0
  4570 ;;		On exit  : 0/0
  4571 ;;		Unchanged: 0/0
  4572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4574 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4575 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4576 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4577 ;;Total ram usage:        4 bytes
  4578 ;; Hardware stack levels used:    1
  4579 ;; Hardware stack levels required when called:    7
  4580 ;; This function calls:
  4581 ;;		_getAD
  4582 ;; This function is called by:
  4583 ;;		_main
  4584 ;; This function uses a non-reentrant model
  4585 ;;
  4586                           
  4587                           
  4588                           ;psect for function _getTemp_AD
  4589  1FCF                     _getTemp_AD:	
  4590                           
  4591                           ;incstack = 0
  4592                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4593                           ;getTemp_AD@channel stored from wreg
  4594  1FCF  0020               	movlb	0	; select bank0
  4595  1FD0  00A5               	movwf	getTemp_AD@channel
  4596                           
  4597                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  4598  1FD1  01A6               	clrf	getTemp_AD@ADRES
  4599  1FD2  01A7               	clrf	getTemp_AD@ADRES+1
  4600                           
  4601                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  4602  1FD3  0021               	movlb	1	; select bank1
  4603  1FD4  1D5C               	btfss	_Temp^(0+128),2
  4604  1FD5  0008               	return
  4605                           
  4606                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0xf0);
  4607  1FD6  30F0               	movlw	240
  4608  1FD7  0020               	movlb	0	; select bank0
  4609  1FD8  00A4               	movwf	??_getTemp_AD
  4610  1FD9  0824               	movf	??_getTemp_AD,w
  4611  1FDA  00A0               	movwf	getAD@adcon1
  4612  1FDB  0825               	movf	getTemp_AD@channel,w
  4613  1FDC  319D  25BC  319F   	fcall	_getAD
  4614  1FDF  0020               	movlb	0	; select bank0
  4615  1FE0  0821               	movf	?_getAD+1,w
  4616  1FE1  01A7               	clrf	getTemp_AD@ADRES+1
  4617  1FE2  07A7               	addwf	getTemp_AD@ADRES+1,f
  4618  1FE3  0820               	movf	?_getAD,w
  4619  1FE4  01A6               	clrf	getTemp_AD@ADRES
  4620  1FE5  07A6               	addwf	getTemp_AD@ADRES,f
  4621                           
  4622                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  4623  1FE6  0827               	movf	getTemp_AD@ADRES+1,w
  4624  1FE7  0426               	iorwf	getTemp_AD@ADRES,w
  4625  1FE8  1903               	skipnz
  4626  1FE9  0008               	return
  4627                           
  4628                           ;OverTemperature_B1.c: 30: if (Temp.ADV < ADRES) {
  4629  1FEA  0827               	movf	getTemp_AD@ADRES+1,w
  4630  1FEB  0021               	movlb	1	; select bank1
  4631  1FEC  0265               	subwf	((_Temp+1)^(0+128)+8),w
  4632  1FED  1D03               	skipz
  4633  1FEE  2FF3               	goto	u9855
  4634  1FEF  0020               	movlb	0	; select bank0
  4635  1FF0  0826               	movf	getTemp_AD@ADRES,w
  4636  1FF1  0021               	movlb	1	; select bank1
  4637  1FF2  0264               	subwf	(_Temp^(0+128)+8),w
  4638  1FF3                     u9855:	
  4639  1FF3  1803               	skipnc
  4640  1FF4  0008               	return
  4641                           
  4642                           ;OverTemperature_B1.c: 31: Temp.ADV = ADRES;
  4643  1FF5  0020               	movlb	0	; select bank0
  4644  1FF6  0827               	movf	getTemp_AD@ADRES+1,w
  4645  1FF7  0021               	movlb	1	; select bank1
  4646  1FF8  01E5               	clrf	((_Temp+1)^(0+128)+8)
  4647  1FF9  07E5               	addwf	((_Temp+1)^(0+128)+8),f
  4648  1FFA  0020               	movlb	0	; select bank0
  4649  1FFB  0826               	movf	getTemp_AD@ADRES,w
  4650  1FFC  0021               	movlb	1	; select bank1
  4651  1FFD  01E4               	clrf	(_Temp^(0+128)+8)
  4652  1FFE  07E4               	addwf	(_Temp^(0+128)+8),f
  4653  1FFF  0008               	return
  4654  2000                     __end_of_getTemp_AD:	
  4655                           
  4656                           	psect	text4
  4657  0A1D                     __ptext4:	
  4658 ;; *************** function _getLoad_AD *****************
  4659 ;; Defined at:
  4660 ;;		line 15 in file "../src/OverLoad_B1.c"
  4661 ;; Parameters:    Size  Location     Type
  4662 ;;  channel         1    wreg     unsigned char 
  4663 ;; Auto vars:     Size  Location     Type
  4664 ;;  channel         1    6[BANK0 ] unsigned char 
  4665 ;;  ADRES           2    9[BANK0 ] unsigned int 
  4666 ;;  i               1   11[BANK0 ] unsigned char 
  4667 ;;  j               1    8[BANK0 ] unsigned char 
  4668 ;;  k               1    7[BANK0 ] unsigned char 
  4669 ;; Return value:  Size  Location     Type
  4670 ;;		None               void
  4671 ;; Registers used:
  4672 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4673 ;; Tracked objects:
  4674 ;;		On entry : 0/0
  4675 ;;		On exit  : 0/0
  4676 ;;		Unchanged: 0/0
  4677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4679 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4680 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4681 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4682 ;;Total ram usage:        8 bytes
  4683 ;; Hardware stack levels used:    1
  4684 ;; Hardware stack levels required when called:    7
  4685 ;; This function calls:
  4686 ;;		_getAD
  4687 ;; This function is called by:
  4688 ;;		_main
  4689 ;; This function uses a non-reentrant model
  4690 ;;
  4691                           
  4692                           
  4693                           ;psect for function _getLoad_AD
  4694  0A1D                     _getLoad_AD:	
  4695                           
  4696                           ;incstack = 0
  4697                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4698                           ;getLoad_AD@channel stored from wreg
  4699  0A1D  0020               	movlb	0	; select bank0
  4700  0A1E  00A6               	movwf	getLoad_AD@channel
  4701                           
  4702                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4703  0A1F  01AB               	clrf	getLoad_AD@i
  4704  0A20  01A8               	clrf	getLoad_AD@j
  4705  0A21  01A7               	clrf	getLoad_AD@k
  4706                           
  4707                           ;OverLoad_B1.c: 17: ADtype ADRES = 0;
  4708  0A22  01A9               	clrf	getLoad_AD@ADRES
  4709  0A23  01AA               	clrf	getLoad_AD@ADRES+1
  4710                           
  4711                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4712  0A24  0022               	movlb	2	; select bank2
  4713  0A25  1E3F               	btfss	_Load^(0+256),4
  4714  0A26  0008               	return
  4715                           
  4716                           ;OverLoad_B1.c: 20: ADRES = getAD(channel, 0xf3);
  4717  0A27  30F3               	movlw	243
  4718  0A28  0020               	movlb	0	; select bank0
  4719  0A29  00A4               	movwf	??_getLoad_AD
  4720  0A2A  0824               	movf	??_getLoad_AD,w
  4721  0A2B  00A0               	movwf	getAD@adcon1
  4722  0A2C  0826               	movf	getLoad_AD@channel,w
  4723  0A2D  319D  25BC  318A   	fcall	_getAD
  4724  0A30  0020               	movlb	0	; select bank0
  4725  0A31  0821               	movf	?_getAD+1,w
  4726  0A32  01AA               	clrf	getLoad_AD@ADRES+1
  4727  0A33  07AA               	addwf	getLoad_AD@ADRES+1,f
  4728  0A34  0820               	movf	?_getAD,w
  4729  0A35  01A9               	clrf	getLoad_AD@ADRES
  4730  0A36  07A9               	addwf	getLoad_AD@ADRES,f
  4731                           
  4732                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4733  0A37  01AB               	clrf	getLoad_AD@i
  4734  0A38  3004               	movlw	4
  4735  0A39  022B               	subwf	getLoad_AD@i,w
  4736  0A3A  1803               	btfsc	3,0
  4737  0A3B  2A63               	goto	l8732
  4738  0A3C                     l8720:	
  4739                           
  4740                           ;OverLoad_B1.c: 22: if (Load.AH[i] < ADRES && j == 0) {
  4741  0A3C  352B               	lslf	getLoad_AD@i,w
  4742  0A3D  3E4A               	addlw	(_Load+11)& (0+255)
  4743  0A3E  0086               	movwf	6
  4744  0A3F  3001               	movlw	1	; select bank2/3
  4745  0A40  0087               	movwf	7
  4746  0A41  3F40               	moviw [0]fsr1
  4747  0A42  00A4               	movwf	??_getLoad_AD
  4748  0A43  3F41               	moviw [1]fsr1
  4749  0A44  00A5               	movwf	??_getLoad_AD+1
  4750  0A45  082A               	movf	getLoad_AD@ADRES+1,w
  4751  0A46  0225               	subwf	??_getLoad_AD+1,w
  4752  0A47  1D03               	skipz
  4753  0A48  2A4B               	goto	u9445
  4754  0A49  0829               	movf	getLoad_AD@ADRES,w
  4755  0A4A  0224               	subwf	??_getLoad_AD,w
  4756  0A4B                     u9445:	
  4757  0A4B  1803               	skipnc
  4758  0A4C  2A5B               	goto	l8728
  4759  0A4D  08A8               	movf	getLoad_AD@j,f
  4760  0A4E  1D03               	skipz
  4761  0A4F  2A5B               	goto	l8728
  4762                           
  4763                           ;OverLoad_B1.c: 23: Load.AH[i] = ADRES;
  4764  0A50  352B               	lslf	getLoad_AD@i,w
  4765  0A51  3E4A               	addlw	(_Load+11)& (0+255)
  4766  0A52  0086               	movwf	6
  4767  0A53  3001               	movlw	1	; select bank2/3
  4768  0A54  0087               	movwf	7
  4769  0A55  0829               	movf	getLoad_AD@ADRES,w
  4770  0A56  3FC0               	movwi [0]fsr1
  4771  0A57  082A               	movf	getLoad_AD@ADRES+1,w
  4772  0A58  3FC1               	movwi [1]fsr1
  4773                           
  4774                           ;OverLoad_B1.c: 24: j = 1;
  4775  0A59  01A8               	clrf	getLoad_AD@j
  4776  0A5A  0AA8               	incf	getLoad_AD@j,f
  4777  0A5B                     l8728:	
  4778  0A5B  3001               	movlw	1
  4779  0A5C  00A4               	movwf	??_getLoad_AD
  4780  0A5D  0824               	movf	??_getLoad_AD,w
  4781  0A5E  07AB               	addwf	getLoad_AD@i,f
  4782  0A5F  3004               	movlw	4
  4783  0A60  022B               	subwf	getLoad_AD@i,w
  4784  0A61  1C03               	skipc
  4785  0A62  2A3C               	goto	l8720
  4786  0A63                     l8732:	
  4787                           
  4788                           ;OverLoad_B1.c: 25: }
  4789                           ;OverLoad_B1.c: 26: }
  4790                           ;OverLoad_B1.c: 27: if (j == 0) {
  4791  0A63  08A8               	movf	getLoad_AD@j,f
  4792  0A64  1D03               	skipz
  4793  0A65  0008               	return
  4794                           
  4795                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4796  0A66  01AB               	clrf	getLoad_AD@i
  4797  0A67                     L1:	
  4798  0A67  3004               	movlw	4
  4799  0A68  022B               	subwf	getLoad_AD@i,w
  4800  0A69  1803               	btfsc	3,0
  4801  0A6A  0008               	return
  4802                           
  4803                           ;OverLoad_B1.c: 29: if (Load.AL[i] > ADRES && k == 0) {
  4804  0A6B  352B               	lslf	getLoad_AD@i,w
  4805  0A6C  3E54               	addlw	(_Load+21)& (0+255)
  4806  0A6D  0086               	movwf	6
  4807  0A6E  3001               	movlw	1	; select bank2/3
  4808  0A6F  0087               	movwf	7
  4809  0A70  3F40               	moviw [0]fsr1
  4810  0A71  00A4               	movwf	??_getLoad_AD
  4811  0A72  3F41               	moviw [1]fsr1
  4812  0A73  00A5               	movwf	??_getLoad_AD+1
  4813  0A74  0825               	movf	??_getLoad_AD+1,w
  4814  0A75  022A               	subwf	getLoad_AD@ADRES+1,w
  4815  0A76  1D03               	skipz
  4816  0A77  2A7A               	goto	u9495
  4817  0A78  0824               	movf	??_getLoad_AD,w
  4818  0A79  0229               	subwf	getLoad_AD@ADRES,w
  4819  0A7A                     u9495:	
  4820  0A7A  1803               	skipnc
  4821  0A7B  2A8A               	goto	l8748
  4822  0A7C  08A7               	movf	getLoad_AD@k,f
  4823  0A7D  1D03               	skipz
  4824  0A7E  2A8A               	goto	l8748
  4825                           
  4826                           ;OverLoad_B1.c: 30: Load.AL[i] = ADRES;
  4827  0A7F  352B               	lslf	getLoad_AD@i,w
  4828  0A80  3E54               	addlw	(_Load+21)& (0+255)
  4829  0A81  0086               	movwf	6
  4830  0A82  3001               	movlw	1	; select bank2/3
  4831  0A83  0087               	movwf	7
  4832  0A84  0829               	movf	getLoad_AD@ADRES,w
  4833  0A85  3FC0               	movwi [0]fsr1
  4834  0A86  082A               	movf	getLoad_AD@ADRES+1,w
  4835  0A87  3FC1               	movwi [1]fsr1
  4836                           
  4837                           ;OverLoad_B1.c: 31: k = 1;
  4838  0A88  01A7               	clrf	getLoad_AD@k
  4839  0A89  0AA7               	incf	getLoad_AD@k,f
  4840  0A8A                     l8748:	
  4841  0A8A  3001               	movlw	1
  4842  0A8B  00A4               	movwf	??_getLoad_AD
  4843  0A8C  0824               	movf	??_getLoad_AD,w
  4844  0A8D  07AB               	addwf	getLoad_AD@i,f
  4845  0A8E  2A67               	goto	L1
  4846  0A8F                     __end_of_getLoad_AD:	
  4847                           
  4848                           	psect	text5
  4849  1DBC                     __ptext5:	
  4850 ;; *************** function _getAD *****************
  4851 ;; Defined at:
  4852 ;;		line 461 in file "../src/MCU_B1.c"
  4853 ;; Parameters:    Size  Location     Type
  4854 ;;  adcon0          1    wreg     unsigned char 
  4855 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4856 ;; Auto vars:     Size  Location     Type
  4857 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4858 ;; Return value:  Size  Location     Type
  4859 ;;                  2    0[BANK0 ] int 
  4860 ;; Registers used:
  4861 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4862 ;; Tracked objects:
  4863 ;;		On entry : 0/0
  4864 ;;		On exit  : 0/0
  4865 ;;		Unchanged: 0/0
  4866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4867 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4868 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4870 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4871 ;;Total ram usage:        4 bytes
  4872 ;; Hardware stack levels used:    1
  4873 ;; Hardware stack levels required when called:    6
  4874 ;; This function calls:
  4875 ;;		_Timeout_Counter
  4876 ;;		_set_TimeoutCleared
  4877 ;; This function is called by:
  4878 ;;		_getLoad_AD
  4879 ;;		_getTemp_AD
  4880 ;; This function uses a non-reentrant model
  4881 ;;
  4882                           
  4883                           
  4884                           ;psect for function _getAD
  4885  1DBC                     _getAD:	
  4886                           
  4887                           ;incstack = 0
  4888                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4889                           ;getAD@adcon0 stored from wreg
  4890  1DBC  0020               	movlb	0	; select bank0
  4891  1DBD  00A3               	movwf	getAD@adcon0
  4892                           
  4893                           ;MCU_B1.c: 462: ADCON0 = adcon0;
  4894  1DBE  0823               	movf	getAD@adcon0,w
  4895  1DBF  0021               	movlb	1	; select bank1
  4896  1DC0  009D               	movwf	29	;volatile
  4897                           
  4898                           ;MCU_B1.c: 463: ADCON1 = adcon1;
  4899  1DC1  0020               	movlb	0	; select bank0
  4900  1DC2  0820               	movf	getAD@adcon1,w
  4901  1DC3  0021               	movlb	1	; select bank1
  4902  1DC4  009E               	movwf	30	;volatile
  4903                           
  4904                           ;MCU_B1.c: 464: GO_nDONE = 1;
  4905  1DC5  149D               	bsf	29,1	;volatile
  4906                           
  4907                           ;MCU_B1.c: 465: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4908  1DC6  2DCA               	goto	l8208
  4909  1DC7                     l8206:	
  4910                           
  4911                           ;MCU_B1.c: 466: Timeout_Counter();
  4912  1DC7  319B  237B  319D   	fcall	_Timeout_Counter
  4913  1DCA                     l8208:	
  4914  1DCA  0021               	movlb	1	; select bank1
  4915  1DCB  1C9D               	btfss	29,1	;volatile
  4916  1DCC  2DCF               	goto	l8212
  4917  1DCD  1D38               	btfss	(_myMain^(0+128)+10),2
  4918  1DCE  2DC7               	goto	l8206
  4919  1DCF                     l8212:	
  4920                           
  4921                           ;MCU_B1.c: 467: };
  4922                           ;MCU_B1.c: 468: set_TimeoutCleared();
  4923  1DCF  3198  20ED         	fcall	_set_TimeoutCleared
  4924                           
  4925                           ;MCU_B1.c: 469: return ((ADRESH*256)+ADRESL);
  4926  1DD1  0021               	movlb	1	; select bank1
  4927  1DD2  081C               	movf	28,w	;volatile
  4928  1DD3  0020               	movlb	0	; select bank0
  4929  1DD4  01A1               	clrf	?_getAD+1
  4930  1DD5  07A1               	addwf	?_getAD+1,f
  4931  1DD6  0021               	movlb	1	; select bank1
  4932  1DD7  081B               	movf	27,w	;volatile
  4933  1DD8  0020               	movlb	0	; select bank0
  4934  1DD9  01A0               	clrf	?_getAD
  4935  1DDA  07A0               	addwf	?_getAD,f
  4936  1DDB  0008               	return
  4937  1DDC                     __end_of_getAD:	
  4938                           
  4939                           	psect	text6
  4940  1AB8                     __ptext6:	
  4941 ;; *************** function _WDT_Main *****************
  4942 ;; Defined at:
  4943 ;;		line 1116 in file "../src/MCU_B1.c"
  4944 ;; Parameters:    Size  Location     Type
  4945 ;;		None
  4946 ;; Auto vars:     Size  Location     Type
  4947 ;;		None
  4948 ;; Return value:  Size  Location     Type
  4949 ;;		None               void
  4950 ;; Registers used:
  4951 ;;		wreg, status,2, status,0, pclath, cstack
  4952 ;; Tracked objects:
  4953 ;;		On entry : 0/0
  4954 ;;		On exit  : 0/0
  4955 ;;		Unchanged: 0/0
  4956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4959 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4960 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4961 ;;Total ram usage:        1 bytes
  4962 ;; Hardware stack levels used:    1
  4963 ;; Hardware stack levels required when called:    6
  4964 ;; This function calls:
  4965 ;;		_WDT_Clearing
  4966 ;; This function is called by:
  4967 ;;		_main
  4968 ;; This function uses a non-reentrant model
  4969 ;;
  4970                           
  4971                           
  4972                           ;psect for function _WDT_Main
  4973  1AB8                     _WDT_Main:	
  4974                           
  4975                           ;MCU_B1.c: 1117: if (WDT.Enable == 1) {
  4976                           
  4977                           ;incstack = 0
  4978                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4979  1AB8  0022               	movlb	2	; select bank2
  4980  1AB9  1C36               	btfss	_WDT^(0+256),0
  4981  1ABA  0008               	return
  4982                           
  4983                           ;MCU_B1.c: 1118: if (WDT.Timer-- > 0) {
  4984  1ABB  3001               	movlw	1
  4985  1ABC  02B7               	subwf	(_WDT^(0+256)+1),f
  4986  1ABD  0837               	movf	(_WDT^(0+256)+1),w
  4987  1ABE  3AFF               	xorlw	255
  4988  1ABF  1903               	skipnz
  4989  1AC0  0008               	return
  4990                           
  4991                           ;MCU_B1.c: 1119: WDT.Timer = 100;
  4992  1AC1  3064               	movlw	100
  4993  1AC2  0020               	movlb	0	; select bank0
  4994  1AC3  00A0               	movwf	??_WDT_Main
  4995  1AC4  0820               	movf	??_WDT_Main,w
  4996  1AC5  0022               	movlb	2	; select bank2
  4997  1AC6  00B7               	movwf	(_WDT^(0+256)+1)
  4998                           
  4999                           ;MCU_B1.c: 1120: WDT_Clearing();
  5000  1AC7  3180  2002         	fcall	_WDT_Clearing
  5001  1AC9  0008               	return
  5002  1ACA                     __end_of_WDT_Main:	
  5003                           
  5004                           	psect	text7
  5005  0002                     __ptext7:	
  5006 ;; *************** function _WDT_Clearing *****************
  5007 ;; Defined at:
  5008 ;;		line 1126 in file "../src/MCU_B1.c"
  5009 ;; Parameters:    Size  Location     Type
  5010 ;;		None
  5011 ;; Auto vars:     Size  Location     Type
  5012 ;;		None
  5013 ;; Return value:  Size  Location     Type
  5014 ;;		None               void
  5015 ;; Registers used:
  5016 ;;		None
  5017 ;; Tracked objects:
  5018 ;;		On entry : 0/0
  5019 ;;		On exit  : 0/0
  5020 ;;		Unchanged: 0/0
  5021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5023 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5025 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5026 ;;Total ram usage:        0 bytes
  5027 ;; Hardware stack levels used:    1
  5028 ;; Hardware stack levels required when called:    5
  5029 ;; This function calls:
  5030 ;;		Nothing
  5031 ;; This function is called by:
  5032 ;;		_WDT_Main
  5033 ;; This function uses a non-reentrant model
  5034 ;;
  5035                           
  5036                           
  5037                           ;psect for function _WDT_Clearing
  5038  0002                     _WDT_Clearing:	
  5039                           
  5040                           ;incstack = 0
  5041                           ; Regs used in _WDT_Clearing: []
  5042  0002  0064               	clrwdt	;# 
  5043  0003  0008               	return
  5044  0004                     __end_of_WDT_Clearing:	
  5045                           
  5046                           	psect	text8
  5047  1000                     __ptext8:	
  5048 ;; *************** function _Temp_Main *****************
  5049 ;; Defined at:
  5050 ;;		line 57 in file "../src/OverTemperature_B1.c"
  5051 ;; Parameters:    Size  Location     Type
  5052 ;;		None
  5053 ;; Auto vars:     Size  Location     Type
  5054 ;;		None
  5055 ;; Return value:  Size  Location     Type
  5056 ;;		None               void
  5057 ;; Registers used:
  5058 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5059 ;; Tracked objects:
  5060 ;;		On entry : 0/0
  5061 ;;		On exit  : 0/0
  5062 ;;		Unchanged: 0/0
  5063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5067 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5068 ;;Total ram usage:        0 bytes
  5069 ;; Hardware stack levels used:    1
  5070 ;; Hardware stack levels required when called:    8
  5071 ;; This function calls:
  5072 ;;		_setTemp_Main
  5073 ;; This function is called by:
  5074 ;;		_main
  5075 ;; This function uses a non-reentrant model
  5076 ;;
  5077                           
  5078                           
  5079                           ;psect for function _Temp_Main
  5080  1000                     _Temp_Main:	
  5081                           
  5082                           ;OverTemperature_B1.c: 59: setTemp_Main();
  5083                           
  5084                           ;incstack = 0
  5085                           ; Regs used in _Temp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5086  1000  318D  25E0         	fcall	_setTemp_Main
  5087  1002  0008               	return
  5088  1003                     __end_of_Temp_Main:	
  5089                           
  5090                           	psect	text9
  5091  0DE0                     __ptext9:	
  5092 ;; *************** function _setTemp_Main *****************
  5093 ;; Defined at:
  5094 ;;		line 64 in file "../src/OverTemperature_B1.c"
  5095 ;; Parameters:    Size  Location     Type
  5096 ;;		None
  5097 ;; Auto vars:     Size  Location     Type
  5098 ;;  AD              2   76[BANK0 ] unsigned int 
  5099 ;;  DangerValue     2   73[BANK0 ] unsigned int 
  5100 ;;  SafeValue       2   71[BANK0 ] unsigned int 
  5101 ;;  TempGO          1   75[BANK0 ] unsigned char 
  5102 ;;  error           1   70[BANK0 ] unsigned char 
  5103 ;; Return value:  Size  Location     Type
  5104 ;;		None               void
  5105 ;; Registers used:
  5106 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5107 ;; Tracked objects:
  5108 ;;		On entry : 0/0
  5109 ;;		On exit  : 0/0
  5110 ;;		Unchanged: 0/0
  5111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5113 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5114 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5115 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5116 ;;Total ram usage:        9 bytes
  5117 ;; Hardware stack levels used:    1
  5118 ;; Hardware stack levels required when called:    7
  5119 ;; This function calls:
  5120 ;;		_getMain_All_Error_Status
  5121 ;;		_getMain_All_LightsStatus
  5122 ;;		_setBuz
  5123 ;;		_setProductData
  5124 ;; This function is called by:
  5125 ;;		_Temp_Main
  5126 ;; This function uses a non-reentrant model
  5127 ;;
  5128                           
  5129                           
  5130                           ;psect for function _setTemp_Main
  5131  0DE0                     _setTemp_Main:	
  5132                           
  5133                           ;OverTemperature_B1.c: 65: char error = getMain_All_Error_Status(0);
  5134                           
  5135                           ;incstack = 0
  5136                           ; Regs used in _setTemp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5137  0DE0  3000               	movlw	0
  5138  0DE1  3190  202E  318D   	fcall	_getMain_All_Error_Status
  5139  0DE4  0020               	movlb	0	; select bank0
  5140  0DE5  00E5               	movwf	??_setTemp_Main
  5141  0DE6  0865               	movf	??_setTemp_Main,w
  5142  0DE7  00E6               	movwf	setTemp_Main@error
  5143                           
  5144                           ;OverTemperature_B1.c: 66: ADtype SafeValue = 0, DangerValue = 0, AD;
  5145  0DE8  01E7               	clrf	setTemp_Main@SafeValue
  5146  0DE9  01E8               	clrf	setTemp_Main@SafeValue+1
  5147  0DEA  01E9               	clrf	setTemp_Main@DangerValue
  5148  0DEB  01EA               	clrf	setTemp_Main@DangerValue+1
  5149                           
  5150                           ;OverTemperature_B1.c: 67: char TempGO = getMain_All_LightsStatus();
  5151  0DEC  319A  22F0  318D   	fcall	_getMain_All_LightsStatus
  5152  0DEF  0020               	movlb	0	; select bank0
  5153  0DF0  00E5               	movwf	??_setTemp_Main
  5154  0DF1  0865               	movf	??_setTemp_Main,w
  5155  0DF2  00EB               	movwf	setTemp_Main@TempGO
  5156                           
  5157                           ;OverTemperature_B1.c: 69: if (Temp.Enable == 1) {
  5158  0DF3  0021               	movlb	1	; select bank1
  5159  0DF4  1C5C               	btfss	_Temp^(0+128),0
  5160  0DF5  2E8D               	goto	l1780
  5161                           
  5162                           ;OverTemperature_B1.c: 77: if (Temp.ADtoGO == 0) {
  5163  0DF6  195C               	btfsc	_Temp^(0+128),2
  5164  0DF7  2E15               	goto	l8314
  5165                           
  5166                           ;OverTemperature_B1.c: 78: if ((TempGO == 1 && Temp.ERROR == 0) || Temp.ERROR == 1) {
  5167  0DF8  0020               	movlb	0	; select bank0
  5168  0DF9  086B               	movf	setTemp_Main@TempGO,w
  5169  0DFA  3A01               	xorlw	1
  5170  0DFB  1D03               	skipz
  5171  0DFC  2E00               	goto	l1786
  5172  0DFD  0021               	movlb	1	; select bank1
  5173  0DFE  1CDC               	btfss	_Temp^(0+128),1
  5174  0DFF  2E03               	goto	l8306
  5175  0E00                     l1786:	
  5176  0E00  0021               	movlb	1	; select bank1
  5177  0E01  1CDC               	btfss	_Temp^(0+128),1
  5178  0E02  2E12               	goto	l8312
  5179  0E03                     l8306:	
  5180                           
  5181                           ;OverTemperature_B1.c: 79: Temp.Time++;
  5182  0E03  3001               	movlw	1
  5183  0E04  07DD               	addwf	(_Temp^(0+128)+1),f
  5184  0E05  3000               	movlw	0
  5185  0E06  3DDE               	addwfc	((_Temp+1)^(0+128)+1),f
  5186                           
  5187                           ;OverTemperature_B1.c: 80: if (Temp.Time >= (5000 / 20)) {
  5188  0E07  3000               	movlw	0
  5189  0E08  025E               	subwf	((_Temp+1)^(0+128)+1),w
  5190  0E09  30FA               	movlw	250
  5191  0E0A  1903               	skipnz
  5192  0E0B  025D               	subwf	(_Temp^(0+128)+1),w
  5193  0E0C  1C03               	skipc
  5194  0E0D  0008               	return
  5195                           
  5196                           ;OverTemperature_B1.c: 81: Temp.Time = 0;
  5197  0E0E  01DD               	clrf	(_Temp^(0+128)+1)
  5198  0E0F  01DE               	clrf	((_Temp+1)^(0+128)+1)
  5199                           
  5200                           ;OverTemperature_B1.c: 82: Temp.ADtoGO = 1;
  5201  0E10  155C               	bsf	_Temp^(0+128),2
  5202                           
  5203                           ;OverTemperature_B1.c: 83: }
  5204                           ;OverTemperature_B1.c: 84: } else {
  5205  0E11  0008               	return
  5206  0E12                     l8312:	
  5207                           
  5208                           ;OverTemperature_B1.c: 85: Temp.Time = 0;
  5209  0E12  01DD               	clrf	(_Temp^(0+128)+1)
  5210  0E13  01DE               	clrf	((_Temp+1)^(0+128)+1)
  5211                           
  5212                           ;OverTemperature_B1.c: 86: }
  5213                           ;OverTemperature_B1.c: 87: } else {
  5214  0E14  0008               	return
  5215  0E15                     l8314:	
  5216                           
  5217                           ;OverTemperature_B1.c: 88: Temp.Time++;
  5218  0E15  3001               	movlw	1
  5219  0E16  07DD               	addwf	(_Temp^(0+128)+1),f
  5220  0E17  3000               	movlw	0
  5221  0E18  3DDE               	addwfc	((_Temp+1)^(0+128)+1),f
  5222                           
  5223                           ;OverTemperature_B1.c: 89: if (Temp.Time >= (100 / 20)) {
  5224  0E19  3000               	movlw	0
  5225  0E1A  025E               	subwf	((_Temp+1)^(0+128)+1),w
  5226  0E1B  3005               	movlw	5
  5227  0E1C  1903               	skipnz
  5228  0E1D  025D               	subwf	(_Temp^(0+128)+1),w
  5229  0E1E  1C03               	skipc
  5230  0E1F  0008               	return
  5231                           
  5232                           ;OverTemperature_B1.c: 90: Temp.Time = 0;
  5233  0E20  01DD               	clrf	(_Temp^(0+128)+1)
  5234  0E21  01DE               	clrf	((_Temp+1)^(0+128)+1)
  5235                           
  5236                           ;OverTemperature_B1.c: 95: if (Temp.ADV > 0) {
  5237  0E22  3008               	movlw	8
  5238  0E23  3EDC               	addlw	_Temp& (0+255)
  5239  0E24  0086               	movwf	6
  5240  0E25  0187               	clrf	7
  5241  0E26  0016               	moviw fsr1++
  5242  0E27  0401               	iorwf	1,w
  5243  0E28  1903               	skipnz
  5244  0E29  2E85               	goto	l1791
  5245                           
  5246                           ;OverTemperature_B1.c: 96: Temp.ADtoGO = 0;
  5247  0E2A  115C               	bcf	_Temp^(0+128),2
  5248                           
  5249                           ;OverTemperature_B1.c: 97: AD = Temp.ADV;
  5250  0E2B  0865               	movf	((_Temp+1)^(0+128)+8),w
  5251  0E2C  0020               	movlb	0	; select bank0
  5252  0E2D  01ED               	clrf	setTemp_Main@AD+1
  5253  0E2E  07ED               	addwf	setTemp_Main@AD+1,f
  5254  0E2F  0021               	movlb	1	; select bank1
  5255  0E30  0864               	movf	(_Temp^(0+128)+8),w
  5256  0E31  0020               	movlb	0	; select bank0
  5257  0E32  01EC               	clrf	setTemp_Main@AD
  5258  0E33  07EC               	addwf	setTemp_Main@AD,f
  5259                           
  5260                           ;OverTemperature_B1.c: 112: SafeValue = 420;
  5261  0E34  30A4               	movlw	164
  5262  0E35  00E7               	movwf	setTemp_Main@SafeValue
  5263  0E36  3001               	movlw	1
  5264  0E37  00E8               	movwf	setTemp_Main@SafeValue+1
  5265                           
  5266                           ;OverTemperature_B1.c: 113: DangerValue = 365;
  5267  0E38  306D               	movlw	109
  5268  0E39  00E9               	movwf	setTemp_Main@DangerValue
  5269  0E3A  3001               	movlw	1
  5270  0E3B  00EA               	movwf	setTemp_Main@DangerValue+1
  5271                           
  5272                           ;OverTemperature_B1.c: 119: if (Temp.ERROR == 1) {
  5273  0E3C  0021               	movlb	1	; select bank1
  5274  0E3D  1CDC               	btfss	_Temp^(0+128),1
  5275  0E3E  2E5D               	goto	l8344
  5276                           
  5277                           ;OverTemperature_B1.c: 120: if (AD >= SafeValue) {
  5278  0E3F  0020               	movlb	0	; select bank0
  5279  0E40  0868               	movf	setTemp_Main@SafeValue+1,w
  5280  0E41  026D               	subwf	setTemp_Main@AD+1,w
  5281  0E42  1D03               	skipz
  5282  0E43  2E46               	goto	u8755
  5283  0E44  0867               	movf	setTemp_Main@SafeValue,w
  5284  0E45  026C               	subwf	setTemp_Main@AD,w
  5285  0E46                     u8755:	
  5286  0E46  1C03               	skipc
  5287  0E47  2E72               	goto	l8354
  5288                           
  5289                           ;OverTemperature_B1.c: 121: Temp.Count++;
  5290  0E48  3001               	movlw	1
  5291  0E49  00E5               	movwf	??_setTemp_Main
  5292  0E4A  0865               	movf	??_setTemp_Main,w
  5293  0E4B  0021               	movlb	1	; select bank1
  5294  0E4C  07DF               	addwf	(_Temp^(0+128)+3),f
  5295                           
  5296                           ;OverTemperature_B1.c: 122: if (Temp.Count >= 3) {
  5297  0E4D  3003               	movlw	3
  5298  0E4E  025F               	subwf	(_Temp^(0+128)+3),w
  5299  0E4F  1C03               	skipc
  5300  0E50  2E74               	goto	l8356
  5301                           
  5302                           ;OverTemperature_B1.c: 123: Temp.Count = 0;
  5303  0E51  01DF               	clrf	(_Temp^(0+128)+3)
  5304                           
  5305                           ;OverTemperature_B1.c: 124: Temp.ERROR = 0;
  5306  0E52  10DC               	bcf	_Temp^(0+128),1
  5307                           
  5308                           ;OverTemperature_B1.c: 125: setBuz(2, 100);
  5309  0E53  3064               	movlw	100
  5310  0E54  0020               	movlb	0	; select bank0
  5311  0E55  00A9               	movwf	setBuz@time
  5312  0E56  3000               	movlw	0
  5313  0E57  00AA               	movwf	setBuz@time+1
  5314  0E58  3002               	movlw	2
  5315  0E59  3194  240B  318D   	fcall	_setBuz
  5316                           
  5317                           ;OverTemperature_B1.c: 126: }
  5318                           ;OverTemperature_B1.c: 127: } else {
  5319  0E5C  2E74               	goto	l8356
  5320  0E5D                     l8344:	
  5321                           ;OverTemperature_B1.c: 129: }
  5322                           ;OverTemperature_B1.c: 130: } else {
  5323                           
  5324                           ;OverTemperature_B1.c: 128: Temp.Count = 0;
  5325                           
  5326                           
  5327                           ;OverTemperature_B1.c: 131: if (AD <= DangerValue) {
  5328  0E5D  0020               	movlb	0	; select bank0
  5329  0E5E  086D               	movf	setTemp_Main@AD+1,w
  5330  0E5F  026A               	subwf	setTemp_Main@DangerValue+1,w
  5331  0E60  1D03               	skipz
  5332  0E61  2E64               	goto	u8775
  5333  0E62  086C               	movf	setTemp_Main@AD,w
  5334  0E63  0269               	subwf	setTemp_Main@DangerValue,w
  5335  0E64                     u8775:	
  5336  0E64  1C03               	skipc
  5337  0E65  2E72               	goto	l8354
  5338                           
  5339                           ;OverTemperature_B1.c: 132: Temp.Count++;
  5340  0E66  3001               	movlw	1
  5341  0E67  00E5               	movwf	??_setTemp_Main
  5342  0E68  0865               	movf	??_setTemp_Main,w
  5343  0E69  0021               	movlb	1	; select bank1
  5344  0E6A  07DF               	addwf	(_Temp^(0+128)+3),f
  5345                           
  5346                           ;OverTemperature_B1.c: 133: if (Temp.Count >= 3) {
  5347  0E6B  3003               	movlw	3
  5348  0E6C  025F               	subwf	(_Temp^(0+128)+3),w
  5349  0E6D  1C03               	skipc
  5350  0E6E  2E74               	goto	l8356
  5351                           
  5352                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  5353  0E6F  01DF               	clrf	(_Temp^(0+128)+3)
  5354                           
  5355                           ;OverTemperature_B1.c: 135: Temp.ERROR = 1;
  5356  0E70  14DC               	bsf	_Temp^(0+128),1
  5357                           
  5358                           ;OverTemperature_B1.c: 136: }
  5359                           ;OverTemperature_B1.c: 137: } else {
  5360  0E71  2E74               	goto	l8356
  5361  0E72                     l8354:	
  5362                           
  5363                           ;OverTemperature_B1.c: 138: Temp.Count = 0;
  5364  0E72  0021               	movlb	1	; select bank1
  5365  0E73  01DF               	clrf	(_Temp^(0+128)+3)
  5366  0E74                     l8356:	
  5367                           
  5368                           ;OverTemperature_B1.c: 139: }
  5369                           ;OverTemperature_B1.c: 140: }
  5370                           ;OverTemperature_B1.c: 141: setProductData(24, AD >> 8);
  5371  0E74  0020               	movlb	0	; select bank0
  5372  0E75  086D               	movf	setTemp_Main@AD+1,w
  5373  0E76  00E5               	movwf	??_setTemp_Main
  5374  0E77  0865               	movf	??_setTemp_Main,w
  5375  0E78  00E2               	movwf	setProductData@value
  5376  0E79  3018               	movlw	24
  5377  0E7A  3199  218D  318D   	fcall	_setProductData
  5378                           
  5379                           ;OverTemperature_B1.c: 142: setProductData(25, AD);
  5380  0E7D  0020               	movlb	0	; select bank0
  5381  0E7E  086C               	movf	setTemp_Main@AD,w
  5382  0E7F  00E5               	movwf	??_setTemp_Main
  5383  0E80  0865               	movf	??_setTemp_Main,w
  5384  0E81  00E2               	movwf	setProductData@value
  5385  0E82  3019               	movlw	25
  5386  0E83  3199  218D         	fcall	_setProductData
  5387  0E85                     l1791:	
  5388                           
  5389                           ;OverTemperature_B1.c: 158: }
  5390                           ;OverTemperature_B1.c: 159: Temp.ADH[0] = 0;
  5391  0E85  0021               	movlb	1	; select bank1
  5392  0E86  01E0               	clrf	(_Temp^(0+128)+4)
  5393  0E87  01E1               	clrf	((_Temp+1)^(0+128)+4)
  5394                           
  5395                           ;OverTemperature_B1.c: 160: Temp.ADH[1] = 0;
  5396  0E88  01E2               	clrf	(_Temp^(0+128)+6)
  5397  0E89  01E3               	clrf	((_Temp+1)^(0+128)+6)
  5398                           
  5399                           ;OverTemperature_B1.c: 161: Temp.ADV = 0;
  5400  0E8A  01E4               	clrf	(_Temp^(0+128)+8)
  5401  0E8B  01E5               	clrf	((_Temp+1)^(0+128)+8)
  5402                           
  5403                           ;OverTemperature_B1.c: 162: }
  5404                           ;OverTemperature_B1.c: 163: }
  5405                           ;OverTemperature_B1.c: 166: } else {
  5406  0E8C  0008               	return
  5407  0E8D                     l1780:	
  5408                           
  5409                           ;OverTemperature_B1.c: 167: if (myMain.PowerON == 1) {
  5410  0E8D  1C2E               	btfss	_myMain^(0+128),0
  5411  0E8E  0008               	return
  5412                           
  5413                           ;OverTemperature_B1.c: 168: Temp.Enable = 1;
  5414  0E8F  145C               	bsf	_Temp^(0+128),0
  5415  0E90  0008               	return
  5416  0E91                     __end_of_setTemp_Main:	
  5417                           
  5418                           	psect	text10
  5419  18D6                     __ptext10:	
  5420 ;; *************** function _Temp_Initialization *****************
  5421 ;; Defined at:
  5422 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5423 ;; Parameters:    Size  Location     Type
  5424 ;;		None
  5425 ;; Auto vars:     Size  Location     Type
  5426 ;;		None
  5427 ;; Return value:  Size  Location     Type
  5428 ;;		None               void
  5429 ;; Registers used:
  5430 ;;		status,2, status,0, pclath, cstack
  5431 ;; Tracked objects:
  5432 ;;		On entry : 0/0
  5433 ;;		On exit  : 0/0
  5434 ;;		Unchanged: 0/0
  5435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5437 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5439 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5440 ;;Total ram usage:        0 bytes
  5441 ;; Hardware stack levels used:    1
  5442 ;; Hardware stack levels required when called:    6
  5443 ;; This function calls:
  5444 ;;		_setTemp_Initialization
  5445 ;; This function is called by:
  5446 ;;		_main
  5447 ;; This function uses a non-reentrant model
  5448 ;;
  5449                           
  5450                           
  5451                           ;psect for function _Temp_Initialization
  5452  18D6                     _Temp_Initialization:	
  5453                           
  5454                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5455                           
  5456                           ;incstack = 0
  5457                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5458  18D6  3187  27FF         	fcall	_setTemp_Initialization
  5459  18D8  0008               	return
  5460  18D9                     __end_of_Temp_Initialization:	
  5461                           
  5462                           	psect	text11
  5463  07FF                     __ptext11:	
  5464 ;; *************** function _setTemp_Initialization *****************
  5465 ;; Defined at:
  5466 ;;		line 52 in file "../src/OverTemperature_B1.c"
  5467 ;; Parameters:    Size  Location     Type
  5468 ;;		None
  5469 ;; Auto vars:     Size  Location     Type
  5470 ;;		None
  5471 ;; Return value:  Size  Location     Type
  5472 ;;		None               void
  5473 ;; Registers used:
  5474 ;;		None
  5475 ;; Tracked objects:
  5476 ;;		On entry : 0/0
  5477 ;;		On exit  : 0/0
  5478 ;;		Unchanged: 0/0
  5479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5483 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5484 ;;Total ram usage:        0 bytes
  5485 ;; Hardware stack levels used:    1
  5486 ;; Hardware stack levels required when called:    5
  5487 ;; This function calls:
  5488 ;;		Nothing
  5489 ;; This function is called by:
  5490 ;;		_Temp_Initialization
  5491 ;; This function uses a non-reentrant model
  5492 ;;
  5493                           
  5494                           
  5495                           ;psect for function _setTemp_Initialization
  5496  07FF                     _setTemp_Initialization:	
  5497                           
  5498                           ;incstack = 0
  5499                           ; Regs used in _setTemp_Initialization: []
  5500  07FF  0008               	return
  5501  0800                     __end_of_setTemp_Initialization:	
  5502                           
  5503                           	psect	text12
  5504  1976                     __ptext12:	
  5505 ;; *************** function _Switch_Main *****************
  5506 ;; Defined at:
  5507 ;;		line 76 in file "../src/Switch_B1.c"
  5508 ;; Parameters:    Size  Location     Type
  5509 ;;		None
  5510 ;; Auto vars:     Size  Location     Type
  5511 ;;		None
  5512 ;; Return value:  Size  Location     Type
  5513 ;;		None               void
  5514 ;; Registers used:
  5515 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5516 ;; Tracked objects:
  5517 ;;		On entry : 0/0
  5518 ;;		On exit  : 0/0
  5519 ;;		Unchanged: 0/0
  5520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5524 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5525 ;;Total ram usage:        0 bytes
  5526 ;; Hardware stack levels used:    1
  5527 ;; Hardware stack levels required when called:    9
  5528 ;; This function calls:
  5529 ;;		_TouchPower
  5530 ;;		_setSw_Main
  5531 ;; This function is called by:
  5532 ;;		_main
  5533 ;; This function uses a non-reentrant model
  5534 ;;
  5535                           
  5536                           
  5537                           ;psect for function _Switch_Main
  5538  1976                     _Switch_Main:	
  5539                           
  5540                           ;Switch_B1.c: 79: setSw_Main(1);
  5541                           
  5542                           ;incstack = 0
  5543                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5544  1976  3001               	movlw	1
  5545  1977  3182  2205  3199   	fcall	_setSw_Main
  5546                           
  5547                           ;Switch_B1.c: 83: setSw_Main(2);
  5548  197A  3002               	movlw	2
  5549  197B  3182  2205  3199   	fcall	_setSw_Main
  5550                           
  5551                           ;Switch_B1.c: 91: TouchPower();
  5552  197E  319B  2390         	fcall	_TouchPower
  5553  1980  0008               	return
  5554  1981                     __end_of_Switch_Main:	
  5555                           
  5556                           	psect	text13
  5557  0205                     __ptext13:	
  5558 ;; *************** function _setSw_Main *****************
  5559 ;; Defined at:
  5560 ;;		line 117 in file "../src/Switch_B1.c"
  5561 ;; Parameters:    Size  Location     Type
  5562 ;;  sw              1    wreg     unsigned char 
  5563 ;; Auto vars:     Size  Location     Type
  5564 ;;  sw              1   20[BANK0 ] unsigned char 
  5565 ;; Return value:  Size  Location     Type
  5566 ;;		None               void
  5567 ;; Registers used:
  5568 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5569 ;; Tracked objects:
  5570 ;;		On entry : 0/0
  5571 ;;		On exit  : 0/0
  5572 ;;		Unchanged: 0/0
  5573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5575 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5576 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5577 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5578 ;;Total ram usage:        3 bytes
  5579 ;; Hardware stack levels used:    1
  5580 ;; Hardware stack levels required when called:    8
  5581 ;; This function calls:
  5582 ;;		_SwPointSelect
  5583 ;;		_getMain_All_Error_Status
  5584 ;;		_getSw_KeyStatus
  5585 ;;		_setBuz
  5586 ;;		_setDimmerLights_DimmingOn
  5587 ;;		_setDimmerLights_SwOff
  5588 ;;		_setDimmerLights_SwOn
  5589 ;;		_setRF_Learn
  5590 ;; This function is called by:
  5591 ;;		_Switch_Main
  5592 ;; This function uses a non-reentrant model
  5593 ;;
  5594                           
  5595                           
  5596                           ;psect for function _setSw_Main
  5597  0205                     _setSw_Main:	
  5598                           
  5599                           ;incstack = 0
  5600                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5601                           ;setSw_Main@sw stored from wreg
  5602  0205  0020               	movlb	0	; select bank0
  5603  0206  00B4               	movwf	setSw_Main@sw
  5604                           
  5605                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5606  0207  0834               	movf	setSw_Main@sw,w
  5607  0208  319C  2417  3182   	fcall	_SwPointSelect
  5608                           
  5609                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5610  020B  0021               	movlb	1	; select bank1
  5611  020C  0859               	movf	_Sw^(0+128),w
  5612  020D  0086               	movwf	6
  5613  020E  3001               	movlw	1	; select bank2/3
  5614  020F  0087               	movwf	7
  5615  0210  1C01               	btfss	1,0
  5616  0211  2B81               	goto	l2567
  5617                           
  5618                           ;Switch_B1.c: 121: if (getMain_All_Error_Status(0) == 0) {
  5619  0212  3000               	movlw	0
  5620  0213  3190  202E  3182   	fcall	_getMain_All_Error_Status
  5621  0216  3800               	iorlw	0
  5622  0217  1D03               	skipz
  5623  0218  2A37               	goto	l8468
  5624                           
  5625                           ;Switch_B1.c: 122: Sw->Detect = 0;
  5626  0219  0021               	movlb	1	; select bank1
  5627  021A  0A59               	incf	_Sw^(0+128),w
  5628  021B  0086               	movwf	6
  5629  021C  3001               	movlw	1	; select bank2/3
  5630  021D  0087               	movwf	7
  5631  021E  1081               	bcf	1,1
  5632                           
  5633                           ;Switch_B1.c: 123: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5634  021F  0020               	movlb	0	; select bank0
  5635  0220  0834               	movf	setSw_Main@sw,w
  5636  0221  319D  255D  3182   	fcall	_getSw_KeyStatus
  5637  0224  3A01               	xorlw	1
  5638  0225  3000               	movlw	0
  5639  0226  1903               	skipnz
  5640  0227  3001               	movlw	1
  5641  0228  0020               	movlb	0	; select bank0
  5642  0229  00B2               	movwf	??_setSw_Main
  5643  022A  0021               	movlb	1	; select bank1
  5644  022B  0859               	movf	_Sw^(0+128),w
  5645  022C  0086               	movwf	6
  5646  022D  3001               	movlw	1	; select bank2/3
  5647  022E  0087               	movwf	7
  5648  022F  0020               	movlb	0	; select bank0
  5649  0230  0DB2               	rlf	??_setSw_Main,f
  5650  0231  0801               	movf	1,w
  5651  0232  0632               	xorwf	??_setSw_Main,w
  5652  0233  39FD               	andlw	-3
  5653  0234  0632               	xorwf	??_setSw_Main,w
  5654  0235  0081               	movwf	1
  5655                           
  5656                           ;Switch_B1.c: 124: } else {
  5657  0236  2A4D               	goto	l2569
  5658  0237                     l8468:	
  5659                           
  5660                           ;Switch_B1.c: 125: if (Sw->Detect == 0) {
  5661  0237  0021               	movlb	1	; select bank1
  5662  0238  0A59               	incf	_Sw^(0+128),w
  5663  0239  0086               	movwf	6
  5664  023A  3001               	movlw	1	; select bank2/3
  5665  023B  0087               	movwf	7
  5666  023C  1881               	btfsc	1,1
  5667  023D  2A4D               	goto	l2569
  5668                           
  5669                           ;Switch_B1.c: 126: Sw->Detect = 1;
  5670  023E  0A59               	incf	_Sw^(0+128),w
  5671  023F  0086               	movwf	6
  5672  0240  3001               	movlw	1	; select bank2/3
  5673  0241  0087               	movwf	7
  5674  0242  1481               	bsf	1,1
  5675                           
  5676                           ;Switch_B1.c: 128: Sw->Touch = 0;
  5677  0243  0859               	movf	_Sw^(0+128),w
  5678  0244  0086               	movwf	6
  5679  0245  3001               	movlw	1	; select bank2/3
  5680  0246  0087               	movwf	7
  5681  0247  1081               	bcf	1,1
  5682                           
  5683                           ;Switch_B1.c: 129: Sw->Debounce = 1;
  5684  0248  0859               	movf	_Sw^(0+128),w
  5685  0249  0086               	movwf	6
  5686  024A  3001               	movlw	1	; select bank2/3
  5687  024B  0087               	movwf	7
  5688  024C  1501               	bsf	1,2
  5689  024D                     l2569:	
  5690                           
  5691                           ;Switch_B1.c: 130: }
  5692                           ;Switch_B1.c: 131: }
  5693                           ;Switch_B1.c: 133: if (Sw->Touch == 1) {
  5694  024D  0021               	movlb	1	; select bank1
  5695  024E  0859               	movf	_Sw^(0+128),w
  5696  024F  0086               	movwf	6
  5697  0250  3001               	movlw	1	; select bank2/3
  5698  0251  0087               	movwf	7
  5699  0252  1C81               	btfss	1,1
  5700  0253  2B29               	goto	l8518
  5701                           
  5702                           ;Switch_B1.c: 134: if (Sw->Debounce == 0) {
  5703  0254  0859               	movf	_Sw^(0+128),w
  5704  0255  0086               	movwf	6
  5705  0256  3001               	movlw	1	; select bank2/3
  5706  0257  0087               	movwf	7
  5707  0258  1901               	btfsc	1,2
  5708  0259  2A80               	goto	l8484
  5709                           
  5710                           ;Switch_B1.c: 135: Sw->DebounceTime++;
  5711  025A  3001               	movlw	1
  5712  025B  0020               	movlb	0	; select bank0
  5713  025C  00B2               	movwf	??_setSw_Main
  5714  025D  0021               	movlb	1	; select bank1
  5715  025E  0859               	movf	_Sw^(0+128),w
  5716  025F  3E02               	addlw	2
  5717  0260  0086               	movwf	6
  5718  0261  3001               	movlw	1	; select bank2/3
  5719  0262  0087               	movwf	7
  5720  0263  0020               	movlb	0	; select bank0
  5721  0264  0832               	movf	??_setSw_Main,w
  5722  0265  0781               	addwf	1,f
  5723                           
  5724                           ;Switch_B1.c: 136: if (Sw->DebounceTime >= (60 / 20)) {
  5725  0266  0021               	movlb	1	; select bank1
  5726  0267  0859               	movf	_Sw^(0+128),w
  5727  0268  3E02               	addlw	2
  5728  0269  0086               	movwf	6
  5729  026A  3001               	movlw	1	; select bank2/3
  5730  026B  0087               	movwf	7
  5731  026C  3003               	movlw	3
  5732  026D  0201               	subwf	1,w
  5733  026E  1C03               	skipc
  5734  026F  0008               	return
  5735                           
  5736                           ;Switch_B1.c: 137: Sw->DebounceTime = 0;
  5737  0270  0859               	movf	_Sw^(0+128),w
  5738  0271  3E02               	addlw	2
  5739  0272  0086               	movwf	6
  5740  0273  3001               	movlw	1	; select bank2/3
  5741  0274  0087               	movwf	7
  5742  0275  0181               	clrf	1
  5743                           
  5744                           ;Switch_B1.c: 138: Sw->Debounce = 1;
  5745  0276  0859               	movf	_Sw^(0+128),w
  5746  0277  0086               	movwf	6
  5747  0278  3001               	movlw	1	; select bank2/3
  5748  0279  0087               	movwf	7
  5749  027A  1501               	bsf	1,2
  5750                           
  5751                           ;Switch_B1.c: 143: setDimmerLights_SwOn(sw);
  5752  027B  0020               	movlb	0	; select bank0
  5753  027C  0834               	movf	setSw_Main@sw,w
  5754  027D  3188  2000         	fcall	_setDimmerLights_SwOn
  5755                           
  5756                           ;Switch_B1.c: 146: }
  5757                           ;Switch_B1.c: 147: } else {
  5758  027F  0008               	return
  5759  0280                     l8484:	
  5760                           
  5761                           ;Switch_B1.c: 148: if (Sw->Hold1 == 0) {
  5762  0280  0021               	movlb	1	; select bank1
  5763  0281  0859               	movf	_Sw^(0+128),w
  5764  0282  0086               	movwf	6
  5765  0283  3001               	movlw	1	; select bank2/3
  5766  0284  0087               	movwf	7
  5767  0285  1981               	btfsc	1,3
  5768  0286  2AB5               	goto	l8494
  5769                           
  5770                           ;Switch_B1.c: 149: Sw->Hold1Time++;
  5771  0287  0859               	movf	_Sw^(0+128),w
  5772  0288  3E03               	addlw	3
  5773  0289  0086               	movwf	6
  5774  028A  3001               	movlw	1	; select bank2/3
  5775  028B  0087               	movwf	7
  5776  028C  3001               	movlw	1
  5777  028D  0781               	addwf	1,f
  5778  028E  3141               	addfsr 1,1
  5779  028F  1803               	skipnc
  5780  0290  0A81               	incf	1,f
  5781                           
  5782                           ;Switch_B1.c: 150: if (Sw->Hold1Time >= (1500 / 20)) {
  5783  0291  0859               	movf	_Sw^(0+128),w
  5784  0292  3E03               	addlw	3
  5785  0293  0086               	movwf	6
  5786  0294  3001               	movlw	1	; select bank2/3
  5787  0295  0087               	movwf	7
  5788  0296  3F40               	moviw [0]fsr1
  5789  0297  0020               	movlb	0	; select bank0
  5790  0298  00B2               	movwf	??_setSw_Main
  5791  0299  3F41               	moviw [1]fsr1
  5792  029A  00B3               	movwf	??_setSw_Main+1
  5793  029B  3000               	movlw	0
  5794  029C  0233               	subwf	??_setSw_Main+1,w
  5795  029D  304B               	movlw	75
  5796  029E  1903               	skipnz
  5797  029F  0232               	subwf	??_setSw_Main,w
  5798  02A0  1C03               	skipc
  5799  02A1  0008               	return
  5800                           
  5801                           ;Switch_B1.c: 151: Sw->Hold1Time = 0;
  5802  02A2  0021               	movlb	1	; select bank1
  5803  02A3  0859               	movf	_Sw^(0+128),w
  5804  02A4  3E03               	addlw	3
  5805  02A5  0086               	movwf	6
  5806  02A6  3001               	movlw	1	; select bank2/3
  5807  02A7  0087               	movwf	7
  5808  02A8  3000               	movlw	0
  5809  02A9  3FC0               	movwi [0]fsr1
  5810  02AA  3FC1               	movwi [1]fsr1
  5811                           
  5812                           ;Switch_B1.c: 152: Sw->Hold1 = 1;
  5813  02AB  0859               	movf	_Sw^(0+128),w
  5814  02AC  0086               	movwf	6
  5815  02AD  3001               	movlw	1	; select bank2/3
  5816  02AE  0087               	movwf	7
  5817  02AF  1581               	bsf	1,3
  5818                           
  5819                           ;Switch_B1.c: 158: setDimmerLights_DimmingOn(sw);
  5820  02B0  0020               	movlb	0	; select bank0
  5821  02B1  0834               	movf	setSw_Main@sw,w
  5822  02B2  319E  26F0         	fcall	_setDimmerLights_DimmingOn
  5823                           
  5824                           ;Switch_B1.c: 161: }
  5825                           ;Switch_B1.c: 162: } else {
  5826  02B4  0008               	return
  5827  02B5                     l8494:	
  5828                           
  5829                           ;Switch_B1.c: 164: if (Sw->Hold2 == 0) {
  5830  02B5  0021               	movlb	1	; select bank1
  5831  02B6  0859               	movf	_Sw^(0+128),w
  5832  02B7  0086               	movwf	6
  5833  02B8  3001               	movlw	1	; select bank2/3
  5834  02B9  0087               	movwf	7
  5835  02BA  1A01               	btfsc	1,4
  5836  02BB  2AF5               	goto	l8508
  5837                           
  5838                           ;Switch_B1.c: 165: Sw->Hold2Time++;
  5839  02BC  0859               	movf	_Sw^(0+128),w
  5840  02BD  3E05               	addlw	5
  5841  02BE  0086               	movwf	6
  5842  02BF  3001               	movlw	1	; select bank2/3
  5843  02C0  0087               	movwf	7
  5844  02C1  3001               	movlw	1
  5845  02C2  0781               	addwf	1,f
  5846  02C3  3141               	addfsr 1,1
  5847  02C4  1803               	skipnc
  5848  02C5  0A81               	incf	1,f
  5849                           
  5850                           ;Switch_B1.c: 166: if (Sw->Hold2Time >= (1500 / 20)) {
  5851  02C6  0859               	movf	_Sw^(0+128),w
  5852  02C7  3E05               	addlw	5
  5853  02C8  0086               	movwf	6
  5854  02C9  3001               	movlw	1	; select bank2/3
  5855  02CA  0087               	movwf	7
  5856  02CB  3F40               	moviw [0]fsr1
  5857  02CC  0020               	movlb	0	; select bank0
  5858  02CD  00B2               	movwf	??_setSw_Main
  5859  02CE  3F41               	moviw [1]fsr1
  5860  02CF  00B3               	movwf	??_setSw_Main+1
  5861  02D0  3000               	movlw	0
  5862  02D1  0233               	subwf	??_setSw_Main+1,w
  5863  02D2  304B               	movlw	75
  5864  02D3  1903               	skipnz
  5865  02D4  0232               	subwf	??_setSw_Main,w
  5866  02D5  1C03               	skipc
  5867  02D6  0008               	return
  5868                           
  5869                           ;Switch_B1.c: 167: Sw->Hold2Time = 0;
  5870  02D7  0021               	movlb	1	; select bank1
  5871  02D8  0859               	movf	_Sw^(0+128),w
  5872  02D9  3E05               	addlw	5
  5873  02DA  0086               	movwf	6
  5874  02DB  3001               	movlw	1	; select bank2/3
  5875  02DC  0087               	movwf	7
  5876  02DD  3000               	movlw	0
  5877  02DE  3FC0               	movwi [0]fsr1
  5878  02DF  3FC1               	movwi [1]fsr1
  5879                           
  5880                           ;Switch_B1.c: 168: Sw->Hold2 = 1;
  5881  02E0  0859               	movf	_Sw^(0+128),w
  5882  02E1  0086               	movwf	6
  5883  02E2  3001               	movlw	1	; select bank2/3
  5884  02E3  0087               	movwf	7
  5885  02E4  1601               	bsf	1,4
  5886                           
  5887                           ;Switch_B1.c: 171: setRF_Learn(1);
  5888  02E5  3001               	movlw	1
  5889  02E6  319B  233D  3182   	fcall	_setRF_Learn
  5890                           
  5891                           ;Switch_B1.c: 172: if (myMain.First == 1) {
  5892  02E9  0021               	movlb	1	; select bank1
  5893  02EA  1EAE               	btfss	_myMain^(0+128),5
  5894  02EB  0008               	return
  5895                           
  5896                           ;Switch_B1.c: 173: setBuz(2, 100);
  5897  02EC  3064               	movlw	100
  5898  02ED  0020               	movlb	0	; select bank0
  5899  02EE  00A9               	movwf	setBuz@time
  5900  02EF  3000               	movlw	0
  5901  02F0  00AA               	movwf	setBuz@time+1
  5902  02F1  3002               	movlw	2
  5903  02F2  3194  240B         	fcall	_setBuz
  5904                           
  5905                           ;Switch_B1.c: 174: }
  5906                           ;Switch_B1.c: 178: }
  5907                           ;Switch_B1.c: 179: } else {
  5908  02F4  0008               	return
  5909  02F5                     l8508:	
  5910                           
  5911                           ;Switch_B1.c: 180: if (Sw->Hold3 == 0) {
  5912  02F5  0021               	movlb	1	; select bank1
  5913  02F6  0859               	movf	_Sw^(0+128),w
  5914  02F7  0086               	movwf	6
  5915  02F8  3001               	movlw	1	; select bank2/3
  5916  02F9  0087               	movwf	7
  5917  02FA  1A81               	btfsc	1,5
  5918  02FB  0008               	return
  5919                           
  5920                           ;Switch_B1.c: 181: Sw->Hold3Time++;
  5921  02FC  0859               	movf	_Sw^(0+128),w
  5922  02FD  3E07               	addlw	7
  5923  02FE  0086               	movwf	6
  5924  02FF  3001               	movlw	1	; select bank2/3
  5925  0300  0087               	movwf	7
  5926  0301  3001               	movlw	1
  5927  0302  0781               	addwf	1,f
  5928  0303  3141               	addfsr 1,1
  5929  0304  1803               	skipnc
  5930  0305  0A81               	incf	1,f
  5931                           
  5932                           ;Switch_B1.c: 182: if (Sw->Hold3Time >= (3000 / 20)) {
  5933  0306  0859               	movf	_Sw^(0+128),w
  5934  0307  3E07               	addlw	7
  5935  0308  0086               	movwf	6
  5936  0309  3001               	movlw	1	; select bank2/3
  5937  030A  0087               	movwf	7
  5938  030B  3F40               	moviw [0]fsr1
  5939  030C  0020               	movlb	0	; select bank0
  5940  030D  00B2               	movwf	??_setSw_Main
  5941  030E  3F41               	moviw [1]fsr1
  5942  030F  00B3               	movwf	??_setSw_Main+1
  5943  0310  3000               	movlw	0
  5944  0311  0233               	subwf	??_setSw_Main+1,w
  5945  0312  3096               	movlw	150
  5946  0313  1903               	skipnz
  5947  0314  0232               	subwf	??_setSw_Main,w
  5948  0315  1C03               	skipc
  5949  0316  0008               	return
  5950                           
  5951                           ;Switch_B1.c: 183: Sw->Hold3Time = 0;
  5952  0317  0021               	movlb	1	; select bank1
  5953  0318  0859               	movf	_Sw^(0+128),w
  5954  0319  3E07               	addlw	7
  5955  031A  0086               	movwf	6
  5956  031B  3001               	movlw	1	; select bank2/3
  5957  031C  0087               	movwf	7
  5958  031D  3000               	movlw	0
  5959  031E  3FC0               	movwi [0]fsr1
  5960  031F  3FC1               	movwi [1]fsr1
  5961                           
  5962                           ;Switch_B1.c: 184: Sw->Hold3 = 1;
  5963  0320  0859               	movf	_Sw^(0+128),w
  5964  0321  0086               	movwf	6
  5965  0322  3001               	movlw	1	; select bank2/3
  5966  0323  0087               	movwf	7
  5967  0324  1681               	bsf	1,5
  5968                           
  5969                           ;Switch_B1.c: 187: setRF_Learn(0);
  5970  0325  3000               	movlw	0
  5971  0326  319B  233D         	fcall	_setRF_Learn
  5972                           
  5973                           ;Switch_B1.c: 190: }
  5974                           ;Switch_B1.c: 191: }
  5975                           ;Switch_B1.c: 192: }
  5976                           ;Switch_B1.c: 194: }
  5977                           ;Switch_B1.c: 195: }
  5978                           ;Switch_B1.c: 196: } else {
  5979  0328  0008               	return
  5980  0329                     l8518:	
  5981                           
  5982                           ;Switch_B1.c: 197: if (Sw->Debounce == 1) {
  5983  0329  0021               	movlb	1	; select bank1
  5984  032A  0859               	movf	_Sw^(0+128),w
  5985  032B  0086               	movwf	6
  5986  032C  3001               	movlw	1	; select bank2/3
  5987  032D  0087               	movwf	7
  5988  032E  1D01               	btfss	1,2
  5989  032F  0008               	return
  5990                           
  5991                           ;Switch_B1.c: 198: Sw->DebounceTime++;
  5992  0330  3001               	movlw	1
  5993  0331  0020               	movlb	0	; select bank0
  5994  0332  00B2               	movwf	??_setSw_Main
  5995  0333  0021               	movlb	1	; select bank1
  5996  0334  0859               	movf	_Sw^(0+128),w
  5997  0335  3E02               	addlw	2
  5998  0336  0086               	movwf	6
  5999  0337  3001               	movlw	1	; select bank2/3
  6000  0338  0087               	movwf	7
  6001  0339  0020               	movlb	0	; select bank0
  6002  033A  0832               	movf	??_setSw_Main,w
  6003  033B  0781               	addwf	1,f
  6004                           
  6005                           ;Switch_B1.c: 199: if (Sw->DebounceTime >= (60 / 20)) {
  6006  033C  0021               	movlb	1	; select bank1
  6007  033D  0859               	movf	_Sw^(0+128),w
  6008  033E  3E02               	addlw	2
  6009  033F  0086               	movwf	6
  6010  0340  3001               	movlw	1	; select bank2/3
  6011  0341  0087               	movwf	7
  6012  0342  3003               	movlw	3
  6013  0343  0201               	subwf	1,w
  6014  0344  1C03               	skipc
  6015  0345  0008               	return
  6016                           
  6017                           ;Switch_B1.c: 200: Sw->DebounceTime = 0;
  6018  0346  0859               	movf	_Sw^(0+128),w
  6019  0347  3E02               	addlw	2
  6020  0348  0086               	movwf	6
  6021  0349  3001               	movlw	1	; select bank2/3
  6022  034A  0087               	movwf	7
  6023  034B  0181               	clrf	1
  6024                           
  6025                           ;Switch_B1.c: 201: Sw->Debounce = 0;
  6026  034C  0859               	movf	_Sw^(0+128),w
  6027  034D  0086               	movwf	6
  6028  034E  3001               	movlw	1	; select bank2/3
  6029  034F  0087               	movwf	7
  6030  0350  1101               	bcf	1,2
  6031                           
  6032                           ;Switch_B1.c: 202: Sw->Hold1Time = 0;
  6033  0351  0859               	movf	_Sw^(0+128),w
  6034  0352  3E03               	addlw	3
  6035  0353  0086               	movwf	6
  6036  0354  3001               	movlw	1	; select bank2/3
  6037  0355  0087               	movwf	7
  6038  0356  3000               	movlw	0
  6039  0357  3FC0               	movwi [0]fsr1
  6040  0358  3FC1               	movwi [1]fsr1
  6041                           
  6042                           ;Switch_B1.c: 203: Sw->Hold1 = 0;
  6043  0359  0859               	movf	_Sw^(0+128),w
  6044  035A  0086               	movwf	6
  6045  035B  3001               	movlw	1	; select bank2/3
  6046  035C  0087               	movwf	7
  6047  035D  1181               	bcf	1,3
  6048                           
  6049                           ;Switch_B1.c: 205: Sw->Hold2 = 0;
  6050  035E  0859               	movf	_Sw^(0+128),w
  6051  035F  0086               	movwf	6
  6052  0360  3001               	movlw	1	; select bank2/3
  6053  0361  0087               	movwf	7
  6054  0362  1201               	bcf	1,4
  6055                           
  6056                           ;Switch_B1.c: 206: Sw->Hold3 = 0;
  6057  0363  0859               	movf	_Sw^(0+128),w
  6058  0364  0086               	movwf	6
  6059  0365  3001               	movlw	1	; select bank2/3
  6060  0366  0087               	movwf	7
  6061  0367  1281               	bcf	1,5
  6062                           
  6063                           ;Switch_B1.c: 207: Sw->Hold2Time = 0;
  6064  0368  0859               	movf	_Sw^(0+128),w
  6065  0369  3E05               	addlw	5
  6066  036A  0086               	movwf	6
  6067  036B  3001               	movlw	1	; select bank2/3
  6068  036C  0087               	movwf	7
  6069  036D  3000               	movlw	0
  6070  036E  3FC0               	movwi [0]fsr1
  6071  036F  3FC1               	movwi [1]fsr1
  6072                           
  6073                           ;Switch_B1.c: 208: Sw->Hold3Time = 0;
  6074  0370  0859               	movf	_Sw^(0+128),w
  6075  0371  3E07               	addlw	7
  6076  0372  0086               	movwf	6
  6077  0373  3001               	movlw	1	; select bank2/3
  6078  0374  0087               	movwf	7
  6079  0375  3000               	movlw	0
  6080  0376  3FC0               	movwi [0]fsr1
  6081  0377  3FC1               	movwi [1]fsr1
  6082                           
  6083                           ;Switch_B1.c: 215: setDimmerLights_SwOff(sw);
  6084  0378  0020               	movlb	0	; select bank0
  6085  0379  0834               	movf	setSw_Main@sw,w
  6086  037A  3187  27C6  3182   	fcall	_setDimmerLights_SwOff
  6087                           
  6088                           ;Switch_B1.c: 219: setRF_Learn(0);
  6089  037D  3000               	movlw	0
  6090  037E  319B  233D         	fcall	_setRF_Learn
  6091                           
  6092                           ;Switch_B1.c: 221: }
  6093                           ;Switch_B1.c: 222: }
  6094                           ;Switch_B1.c: 223: }
  6095                           ;Switch_B1.c: 224: } else {
  6096  0380  0008               	return
  6097  0381                     l2567:	
  6098                           
  6099                           ;Switch_B1.c: 225: if (myMain.PowerON == 1) {
  6100  0381  1C2E               	btfss	_myMain^(0+128),0
  6101  0382  0008               	return
  6102                           
  6103                           ;Switch_B1.c: 226: Sw->Enable = 1;
  6104  0383  0859               	movf	_Sw^(0+128),w
  6105  0384  0086               	movwf	6
  6106  0385  3001               	movlw	1	; select bank2/3
  6107  0386  0087               	movwf	7
  6108  0387  1401               	bsf	1,0
  6109  0388  0008               	return
  6110  0389                     __end_of_setSw_Main:	
  6111                           
  6112                           	psect	text14
  6113  1B3D                     __ptext14:	
  6114 ;; *************** function _setRF_Learn *****************
  6115 ;; Defined at:
  6116 ;;		line 33 in file "../src/RF_Control_B1.c"
  6117 ;; Parameters:    Size  Location     Type
  6118 ;;  command         1    wreg     unsigned char 
  6119 ;; Auto vars:     Size  Location     Type
  6120 ;;  command         1    1[BANK0 ] unsigned char 
  6121 ;; Return value:  Size  Location     Type
  6122 ;;		None               void
  6123 ;; Registers used:
  6124 ;;		wreg, status,2, status,0
  6125 ;; Tracked objects:
  6126 ;;		On entry : 0/0
  6127 ;;		On exit  : 0/0
  6128 ;;		Unchanged: 0/0
  6129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6131 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6132 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6133 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6134 ;;Total ram usage:        2 bytes
  6135 ;; Hardware stack levels used:    1
  6136 ;; Hardware stack levels required when called:    5
  6137 ;; This function calls:
  6138 ;;		Nothing
  6139 ;; This function is called by:
  6140 ;;		_setSw_Main
  6141 ;; This function uses a non-reentrant model
  6142 ;;
  6143                           
  6144                           
  6145                           ;psect for function _setRF_Learn
  6146  1B3D                     _setRF_Learn:	
  6147                           
  6148                           ;incstack = 0
  6149                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6150                           ;setRF_Learn@command stored from wreg
  6151  1B3D  0020               	movlb	0	; select bank0
  6152  1B3E  00A1               	movwf	setRF_Learn@command
  6153                           
  6154                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  6155  1B3F  0821               	movf	setRF_Learn@command,w
  6156  1B40  3A01               	xorlw	1
  6157  1B41  3000               	movlw	0
  6158  1B42  1903               	skipnz
  6159  1B43  3001               	movlw	1
  6160  1B44  00A0               	movwf	??_setRF_Learn
  6161  1B45  0EA0               	swapf	??_setRF_Learn,f
  6162  1B46  0DA0               	rlf	??_setRF_Learn,f
  6163  1B47  0DA0               	rlf	??_setRF_Learn,f
  6164  1B48  0021               	movlb	1	; select bank1
  6165  1B49  0820               	movf	_RF1^(0+128),w
  6166  1B4A  0020               	movlb	0	; select bank0
  6167  1B4B  0620               	xorwf	??_setRF_Learn,w
  6168  1B4C  39BF               	andlw	-65
  6169  1B4D  0620               	xorwf	??_setRF_Learn,w
  6170  1B4E  0021               	movlb	1	; select bank1
  6171  1B4F  00A0               	movwf	_RF1^(0+128)
  6172  1B50  0008               	return
  6173  1B51                     __end_of_setRF_Learn:	
  6174                           
  6175                           	psect	text15
  6176  1EF0                     __ptext15:	
  6177 ;; *************** function _setDimmerLights_DimmingOn *****************
  6178 ;; Defined at:
  6179 ;;		line 753 in file "../src/Dimmer_B1.c"
  6180 ;; Parameters:    Size  Location     Type
  6181 ;;  sw              1    wreg     unsigned char 
  6182 ;; Auto vars:     Size  Location     Type
  6183 ;;  sw              1    2[BANK0 ] unsigned char 
  6184 ;; Return value:  Size  Location     Type
  6185 ;;		None               void
  6186 ;; Registers used:
  6187 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6188 ;; Tracked objects:
  6189 ;;		On entry : 0/0
  6190 ;;		On exit  : 0/0
  6191 ;;		Unchanged: 0/0
  6192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6194 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6196 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6197 ;;Total ram usage:        1 bytes
  6198 ;; Hardware stack levels used:    1
  6199 ;; Hardware stack levels required when called:    6
  6200 ;; This function calls:
  6201 ;;		_DimmerLights_SelectPointer
  6202 ;; This function is called by:
  6203 ;;		_setSw_Main
  6204 ;; This function uses a non-reentrant model
  6205 ;;
  6206                           
  6207                           
  6208                           ;psect for function _setDimmerLights_DimmingOn
  6209  1EF0                     _setDimmerLights_DimmingOn:	
  6210                           
  6211                           ;incstack = 0
  6212                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6213                           ;setDimmerLights_DimmingOn@sw stored from wreg
  6214  1EF0  0020               	movlb	0	; select bank0
  6215  1EF1  00A2               	movwf	setDimmerLights_DimmingOn@sw
  6216                           
  6217                           ;Dimmer_B1.c: 759: DimmerLights_SelectPointer(sw);
  6218  1EF2  0822               	movf	setDimmerLights_DimmingOn@sw,w
  6219  1EF3  319B  23D2  319E   	fcall	_DimmerLights_SelectPointer
  6220                           
  6221                           ;Dimmer_B1.c: 760: if (DimmerLights->Trigger == 0) {
  6222  1EF6  0021               	movlb	1	; select bank1
  6223  1EF7  0856               	movf	_DimmerLights^(0+128),w
  6224  1EF8  0086               	movwf	6
  6225  1EF9  3001               	movlw	1	; select bank2/3
  6226  1EFA  0087               	movwf	7
  6227  1EFB  1881               	btfsc	1,1
  6228  1EFC  0008               	return
  6229                           
  6230                           ;Dimmer_B1.c: 761: if (DimmerLights->SwFlag == 1) {
  6231  1EFD  0856               	movf	_DimmerLights^(0+128),w
  6232  1EFE  0086               	movwf	6
  6233  1EFF  3001               	movlw	1	; select bank2/3
  6234  1F00  0087               	movwf	7
  6235  1F01  1C01               	btfss	1,0
  6236  1F02  0008               	return
  6237                           
  6238                           ;Dimmer_B1.c: 762: DimmerLights->Status = 1;
  6239  1F03  0A56               	incf	_DimmerLights^(0+128),w
  6240  1F04  0086               	movwf	6
  6241  1F05  3001               	movlw	1	; select bank2/3
  6242  1F06  0087               	movwf	7
  6243  1F07  1401               	bsf	1,0
  6244                           
  6245                           ;Dimmer_B1.c: 764: DimmerLights->DimmingSwFlag = 1;
  6246  1F08  0856               	movf	_DimmerLights^(0+128),w
  6247  1F09  0086               	movwf	6
  6248  1F0A  3001               	movlw	1	; select bank2/3
  6249  1F0B  0087               	movwf	7
  6250  1F0C  1581               	bsf	1,3
  6251                           
  6252                           ;Dimmer_B1.c: 765: DimmerLights->DimmingTrigger = 1;
  6253  1F0D  0856               	movf	_DimmerLights^(0+128),w
  6254  1F0E  0086               	movwf	6
  6255  1F0F  3001               	movlw	1	; select bank2/3
  6256  1F10  0087               	movwf	7
  6257  1F11  1601               	bsf	1,4
  6258                           
  6259                           ;Dimmer_B1.c: 766: DimmerLights->DimmingSwitch = 1;
  6260  1F12  0856               	movf	_DimmerLights^(0+128),w
  6261  1F13  0086               	movwf	6
  6262  1F14  3001               	movlw	1	; select bank2/3
  6263  1F15  0087               	movwf	7
  6264  1F16  1681               	bsf	1,5
  6265  1F17  0008               	return
  6266  1F18                     __end_of_setDimmerLights_DimmingOn:	
  6267                           
  6268                           	psect	text16
  6269  1D5D                     __ptext16:	
  6270 ;; *************** function _getSw_KeyStatus *****************
  6271 ;; Defined at:
  6272 ;;		line 237 in file "../src/Switch_B1.c"
  6273 ;; Parameters:    Size  Location     Type
  6274 ;;  sw              1    wreg     unsigned char 
  6275 ;; Auto vars:     Size  Location     Type
  6276 ;;  sw              1    4[BANK0 ] unsigned char 
  6277 ;;  status          1    3[BANK0 ] unsigned char 
  6278 ;; Return value:  Size  Location     Type
  6279 ;;                  1    wreg      unsigned char 
  6280 ;; Registers used:
  6281 ;;		wreg, status,2
  6282 ;; Tracked objects:
  6283 ;;		On entry : 0/0
  6284 ;;		On exit  : 0/0
  6285 ;;		Unchanged: 0/0
  6286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6288 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6289 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6290 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6291 ;;Total ram usage:        5 bytes
  6292 ;; Hardware stack levels used:    1
  6293 ;; Hardware stack levels required when called:    5
  6294 ;; This function calls:
  6295 ;;		Nothing
  6296 ;; This function is called by:
  6297 ;;		_setSw_Main
  6298 ;; This function uses a non-reentrant model
  6299 ;;
  6300                           
  6301                           
  6302                           ;psect for function _getSw_KeyStatus
  6303  1D5D                     _getSw_KeyStatus:	
  6304                           
  6305                           ;incstack = 0
  6306                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6307                           ;getSw_KeyStatus@sw stored from wreg
  6308  1D5D  0020               	movlb	0	; select bank0
  6309  1D5E  00A4               	movwf	getSw_KeyStatus@sw
  6310                           
  6311                           ;Switch_B1.c: 238: char status = 0;
  6312  1D5F  01A3               	clrf	getSw_KeyStatus@status
  6313                           
  6314                           ;Switch_B1.c: 258: if (sw == 1) {
  6315  1D60  0824               	movf	getSw_KeyStatus@sw,w
  6316  1D61  3A01               	xorlw	1
  6317  1D62  1D03               	skipz
  6318  1D63  2D6C               	goto	l7772
  6319                           
  6320                           ;Switch_B1.c: 259: status = RA0 == 1 || RB1 == 1 ? 1 : 0;
  6321  1D64  01A1               	clrf	_getSw_KeyStatus$6166
  6322  1D65  0AA1               	incf	_getSw_KeyStatus$6166,f
  6323  1D66  1C0C               	btfss	12,0	;volatile
  6324  1D67  188D               	btfsc	13,1	;volatile
  6325  1D68  2D6A               	goto	l7770
  6326  1D69  01A1               	clrf	_getSw_KeyStatus$6166
  6327  1D6A                     l7770:	
  6328  1D6A  0821               	movf	_getSw_KeyStatus$6166,w
  6329  1D6B  2D77               	goto	L2
  6330  1D6C                     l7772:	
  6331                           ;Switch_B1.c: 260: } else if (sw == 2) {
  6332                           
  6333  1D6C  0824               	movf	getSw_KeyStatus@sw,w
  6334  1D6D  3A02               	xorlw	2
  6335  1D6E  1D03               	skipz
  6336  1D6F  2D7A               	goto	l7782
  6337                           
  6338                           ;Switch_B1.c: 261: status = RA6 == 1 || RA4 == 1 ? 1 : 0;
  6339  1D70  01A2               	clrf	_getSw_KeyStatus$6167
  6340  1D71  0AA2               	incf	_getSw_KeyStatus$6167,f
  6341  1D72  1F0C               	btfss	12,6	;volatile
  6342  1D73  1A0C               	btfsc	12,4	;volatile
  6343  1D74  2D76               	goto	l7780
  6344  1D75  01A2               	clrf	_getSw_KeyStatus$6167
  6345  1D76                     l7780:	
  6346  1D76  0822               	movf	_getSw_KeyStatus$6167,w
  6347  1D77                     L2:	
  6348  1D77  00A0               	movwf	??_getSw_KeyStatus
  6349  1D78  0820               	movf	??_getSw_KeyStatus,w
  6350  1D79  00A3               	movwf	getSw_KeyStatus@status
  6351  1D7A                     l7782:	
  6352                           
  6353                           ;Switch_B1.c: 262: }
  6354                           ;Switch_B1.c: 275: return status;
  6355  1D7A  0823               	movf	getSw_KeyStatus@status,w
  6356  1D7B  0008               	return
  6357  1D7C                     __end_of_getSw_KeyStatus:	
  6358                           
  6359                           	psect	text17
  6360  1C17                     __ptext17:	
  6361 ;; *************** function _SwPointSelect *****************
  6362 ;; Defined at:
  6363 ;;		line 25 in file "../src/Switch_B1.c"
  6364 ;; Parameters:    Size  Location     Type
  6365 ;;  sw              1    wreg     unsigned char 
  6366 ;; Auto vars:     Size  Location     Type
  6367 ;;  sw              1    1[BANK0 ] unsigned char 
  6368 ;; Return value:  Size  Location     Type
  6369 ;;		None               void
  6370 ;; Registers used:
  6371 ;;		wreg
  6372 ;; Tracked objects:
  6373 ;;		On entry : 0/0
  6374 ;;		On exit  : 0/0
  6375 ;;		Unchanged: 0/0
  6376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6378 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6379 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6380 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6381 ;;Total ram usage:        2 bytes
  6382 ;; Hardware stack levels used:    1
  6383 ;; Hardware stack levels required when called:    5
  6384 ;; This function calls:
  6385 ;;		Nothing
  6386 ;; This function is called by:
  6387 ;;		_setSw_Main
  6388 ;; This function uses a non-reentrant model
  6389 ;;
  6390                           
  6391                           
  6392                           ;psect for function _SwPointSelect
  6393  1C17                     _SwPointSelect:	
  6394                           
  6395                           ;incstack = 0
  6396                           ; Regs used in _SwPointSelect: [wreg]
  6397                           ;SwPointSelect@sw stored from wreg
  6398  1C17  0020               	movlb	0	; select bank0
  6399  1C18  00A1               	movwf	SwPointSelect@sw
  6400                           
  6401                           ;Switch_B1.c: 28: if (sw == 1) {
  6402  1C19  0821               	movf	SwPointSelect@sw,w
  6403  1C1A  3A01               	xorlw	1
  6404  1C1B  1D03               	skipz
  6405  1C1C  2C23               	goto	l7756
  6406                           
  6407                           ;Switch_B1.c: 29: Sw = &Sw1;
  6408  1C1D  30BE               	movlw	_Sw1& (0+255)
  6409  1C1E  00A0               	movwf	??_SwPointSelect
  6410  1C1F  0820               	movf	??_SwPointSelect,w
  6411  1C20  0021               	movlb	1	; select bank1
  6412  1C21  00D9               	movwf	_Sw^(0+128)
  6413                           
  6414                           ;Switch_B1.c: 30: }
  6415  1C22  0008               	return
  6416  1C23                     l7756:	
  6417                           
  6418                           ;Switch_B1.c: 33: else if (sw == 2) {
  6419  1C23  0020               	movlb	0	; select bank0
  6420  1C24  0821               	movf	SwPointSelect@sw,w
  6421  1C25  3A02               	xorlw	2
  6422  1C26  1D03               	skipz
  6423  1C27  0008               	return
  6424                           
  6425                           ;Switch_B1.c: 34: Sw = &Sw2;
  6426  1C28  30C7               	movlw	_Sw2& (0+255)
  6427  1C29  00A0               	movwf	??_SwPointSelect
  6428  1C2A  0820               	movf	??_SwPointSelect,w
  6429  1C2B  0021               	movlb	1	; select bank1
  6430  1C2C  00D9               	movwf	_Sw^(0+128)
  6431  1C2D  0008               	return
  6432  1C2E                     __end_of_SwPointSelect:	
  6433                           
  6434                           	psect	text18
  6435  1B90                     __ptext18:	
  6436 ;; *************** function _TouchPower *****************
  6437 ;; Defined at:
  6438 ;;		line 10 in file "../src/Switch_B1.c"
  6439 ;; Parameters:    Size  Location     Type
  6440 ;;		None
  6441 ;; Auto vars:     Size  Location     Type
  6442 ;;		None
  6443 ;; Return value:  Size  Location     Type
  6444 ;;		None               void
  6445 ;; Registers used:
  6446 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6447 ;; Tracked objects:
  6448 ;;		On entry : 0/0
  6449 ;;		On exit  : 0/0
  6450 ;;		Unchanged: 0/0
  6451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6453 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6455 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6456 ;;Total ram usage:        0 bytes
  6457 ;; Hardware stack levels used:    1
  6458 ;; Hardware stack levels required when called:    6
  6459 ;; This function calls:
  6460 ;;		_Timeout_Counter
  6461 ;;		_set_TimeoutCleared
  6462 ;; This function is called by:
  6463 ;;		_Switch_Main
  6464 ;; This function uses a non-reentrant model
  6465 ;;
  6466                           
  6467                           
  6468                           ;psect for function _TouchPower
  6469  1B90                     _TouchPower:	
  6470                           
  6471                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6472                           
  6473                           ;incstack = 0
  6474                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6475  1B90  0021               	movlb	1	; select bank1
  6476  1B91  1C2E               	btfss	_myMain^(0+128),0
  6477  1B92  0008               	return
  6478                           
  6479                           ;Switch_B1.c: 12: if (RC5 == 0) {
  6480  1B93  0020               	movlb	0	; select bank0
  6481  1B94  1A8E               	btfsc	14,5	;volatile
  6482  1B95  0008               	return
  6483  1B96  2B9C               	goto	l8450
  6484  1B97                     l2545:	
  6485                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6486                           
  6487                           
  6488                           ;Switch_B1.c: 14: RC5 = 1;
  6489  1B97  0020               	movlb	0	; select bank0
  6490  1B98  168E               	bsf	14,5	;volatile
  6491                           
  6492                           ;Switch_B1.c: 15: Timeout_Counter();
  6493  1B99  319B  237B  319B   	fcall	_Timeout_Counter
  6494  1B9C                     l8450:	
  6495  1B9C  0020               	movlb	0	; select bank0
  6496  1B9D  1A8E               	btfsc	14,5	;volatile
  6497  1B9E  2BA2               	goto	l8454
  6498  1B9F  0021               	movlb	1	; select bank1
  6499  1BA0  1D38               	btfss	(_myMain^(0+128)+10),2
  6500  1BA1  2B97               	goto	l2545
  6501  1BA2                     l8454:	
  6502                           
  6503                           ;Switch_B1.c: 16: }
  6504                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6505  1BA2  3198  20ED         	fcall	_set_TimeoutCleared
  6506  1BA4  0008               	return
  6507  1BA5                     __end_of_TouchPower:	
  6508                           
  6509                           	psect	text19
  6510  18ED                     __ptext19:	
  6511 ;; *************** function _set_TimeoutCleared *****************
  6512 ;; Defined at:
  6513 ;;		line 281 in file "../src/main_B1.c"
  6514 ;; Parameters:    Size  Location     Type
  6515 ;;		None
  6516 ;; Auto vars:     Size  Location     Type
  6517 ;;		None
  6518 ;; Return value:  Size  Location     Type
  6519 ;;		None               void
  6520 ;; Registers used:
  6521 ;;		status,2
  6522 ;; Tracked objects:
  6523 ;;		On entry : 0/0
  6524 ;;		On exit  : 0/0
  6525 ;;		Unchanged: 0/0
  6526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6530 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6531 ;;Total ram usage:        0 bytes
  6532 ;; Hardware stack levels used:    1
  6533 ;; Hardware stack levels required when called:    5
  6534 ;; This function calls:
  6535 ;;		Nothing
  6536 ;; This function is called by:
  6537 ;;		_getAD
  6538 ;;		_TouchPower
  6539 ;; This function uses a non-reentrant model
  6540 ;;
  6541                           
  6542                           
  6543                           ;psect for function _set_TimeoutCleared
  6544  18ED                     _set_TimeoutCleared:	
  6545                           
  6546                           ;main_B1.c: 282: myMain.Timeout = 0;
  6547                           
  6548                           ;incstack = 0
  6549                           ; Regs used in _set_TimeoutCleared: [status,2]
  6550  18ED  0021               	movlb	1	; select bank1
  6551  18EE  1138               	bcf	(_myMain^(0+128)+10),2
  6552                           
  6553                           ;main_B1.c: 283: myMain.Timeout_Counter = 0;
  6554  18EF  01B9               	clrf	(_myMain^(0+128)+11)
  6555  18F0  01BA               	clrf	((_myMain+1)^(0+128)+11)
  6556  18F1  0008               	return
  6557  18F2                     __end_of_set_TimeoutCleared:	
  6558                           
  6559                           	psect	text20
  6560  1B7B                     __ptext20:	
  6561 ;; *************** function _Timeout_Counter *****************
  6562 ;; Defined at:
  6563 ;;		line 272 in file "../src/main_B1.c"
  6564 ;; Parameters:    Size  Location     Type
  6565 ;;		None
  6566 ;; Auto vars:     Size  Location     Type
  6567 ;;		None
  6568 ;; Return value:  Size  Location     Type
  6569 ;;		None               void
  6570 ;; Registers used:
  6571 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6572 ;; Tracked objects:
  6573 ;;		On entry : 0/0
  6574 ;;		On exit  : 0/0
  6575 ;;		Unchanged: 0/0
  6576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6577 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6578 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6580 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6581 ;;Total ram usage:        0 bytes
  6582 ;; Hardware stack levels used:    1
  6583 ;; Hardware stack levels required when called:    5
  6584 ;; This function calls:
  6585 ;;		Nothing
  6586 ;; This function is called by:
  6587 ;;		_getAD
  6588 ;;		_TouchPower
  6589 ;; This function uses a non-reentrant model
  6590 ;;
  6591                           
  6592                           
  6593                           ;psect for function _Timeout_Counter
  6594  1B7B                     _Timeout_Counter:	
  6595                           
  6596                           ;main_B1.c: 273: myMain.Timeout_Counter++;
  6597                           
  6598                           ;incstack = 0
  6599                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6600  1B7B  3001               	movlw	1
  6601  1B7C  0021               	movlb	1	; select bank1
  6602  1B7D  07B9               	addwf	(_myMain^(0+128)+11),f
  6603  1B7E  3000               	movlw	0
  6604  1B7F  3DBA               	addwfc	((_myMain+1)^(0+128)+11),f
  6605                           
  6606                           ;main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  6607  1B80  300B               	movlw	11
  6608  1B81  3EAE               	addlw	_myMain& (0+255)
  6609  1B82  0086               	movwf	6
  6610  1B83  0187               	clrf	7
  6611  1B84  3F40               	moviw [0]fsr1
  6612  1B85  3AA8               	xorlw	168
  6613  1B86  1D03               	skipz
  6614  1B87  2B8A               	goto	u7345
  6615  1B88  3F41               	moviw [1]fsr1
  6616  1B89  3A61               	xorlw	97
  6617  1B8A                     u7345:	
  6618  1B8A  1D03               	skipz
  6619  1B8B  0008               	return
  6620                           
  6621                           ;main_B1.c: 275: myMain.Timeout_Counter = 0;
  6622  1B8C  01B9               	clrf	(_myMain^(0+128)+11)
  6623  1B8D  01BA               	clrf	((_myMain+1)^(0+128)+11)
  6624                           
  6625                           ;main_B1.c: 276: myMain.Timeout = 1;
  6626  1B8E  1538               	bsf	(_myMain^(0+128)+10),2
  6627  1B8F  0008               	return
  6628  1B90                     __end_of_Timeout_Counter:	
  6629                           
  6630                           	psect	text21
  6631  193B                     __ptext21:	
  6632 ;; *************** function _Switch_Initialization *****************
  6633 ;; Defined at:
  6634 ;;		line 46 in file "../src/Switch_B1.c"
  6635 ;; Parameters:    Size  Location     Type
  6636 ;;		None
  6637 ;; Auto vars:     Size  Location     Type
  6638 ;;		None
  6639 ;; Return value:  Size  Location     Type
  6640 ;;		None               void
  6641 ;; Registers used:
  6642 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6643 ;; Tracked objects:
  6644 ;;		On entry : 0/0
  6645 ;;		On exit  : 0/0
  6646 ;;		Unchanged: 0/0
  6647 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6649 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6650 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6651 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6652 ;;Total ram usage:        0 bytes
  6653 ;; Hardware stack levels used:    1
  6654 ;; Hardware stack levels required when called:    8
  6655 ;; This function calls:
  6656 ;;		_setSw_Initialization
  6657 ;; This function is called by:
  6658 ;;		_main
  6659 ;; This function uses a non-reentrant model
  6660 ;;
  6661                           
  6662                           
  6663                           ;psect for function _Switch_Initialization
  6664  193B                     _Switch_Initialization:	
  6665                           
  6666                           ;Switch_B1.c: 52: setSw_Initialization(1);
  6667                           
  6668                           ;incstack = 0
  6669                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6670  193B  3001               	movlw	1
  6671  193C  3199  2133  3199   	fcall	_setSw_Initialization
  6672                           
  6673                           ;Switch_B1.c: 56: setSw_Initialization(2);
  6674  193F  3002               	movlw	2
  6675  1940  3199  2133         	fcall	_setSw_Initialization
  6676  1942  0008               	return
  6677  1943                     __end_of_Switch_Initialization:	
  6678                           
  6679                           	psect	text22
  6680  1933                     __ptext22:	
  6681 ;; *************** function _setSw_Initialization *****************
  6682 ;; Defined at:
  6683 ;;		line 66 in file "../src/Switch_B1.c"
  6684 ;; Parameters:    Size  Location     Type
  6685 ;;  sw              1    wreg     unsigned char 
  6686 ;; Auto vars:     Size  Location     Type
  6687 ;;  sw              1    4[BANK0 ] unsigned char 
  6688 ;; Return value:  Size  Location     Type
  6689 ;;		None               void
  6690 ;; Registers used:
  6691 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6692 ;; Tracked objects:
  6693 ;;		On entry : 0/0
  6694 ;;		On exit  : 0/0
  6695 ;;		Unchanged: 0/0
  6696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6698 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6700 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6701 ;;Total ram usage:        1 bytes
  6702 ;; Hardware stack levels used:    1
  6703 ;; Hardware stack levels required when called:    7
  6704 ;; This function calls:
  6705 ;;		_setLED
  6706 ;; This function is called by:
  6707 ;;		_Switch_Initialization
  6708 ;; This function uses a non-reentrant model
  6709 ;;
  6710                           
  6711                           
  6712                           ;psect for function _setSw_Initialization
  6713  1933                     _setSw_Initialization:	
  6714                           
  6715                           ;incstack = 0
  6716                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6717                           ;setSw_Initialization@sw stored from wreg
  6718  1933  0020               	movlb	0	; select bank0
  6719  1934  00A4               	movwf	setSw_Initialization@sw
  6720                           
  6721                           ;Switch_B1.c: 68: setLED(sw, 1);
  6722  1935  01A2               	clrf	setLED@command
  6723  1936  0AA2               	incf	setLED@command,f
  6724  1937  0824               	movf	setSw_Initialization@sw,w
  6725  1938  3193  230E         	fcall	_setLED
  6726  193A  0008               	return
  6727  193B                     __end_of_setSw_Initialization:	
  6728                           
  6729                           	psect	text23
  6730  18D3                     __ptext23:	
  6731 ;; *************** function _RF_Main *****************
  6732 ;; Defined at:
  6733 ;;		line 26 in file "../src/RF_Control_B1.c"
  6734 ;; Parameters:    Size  Location     Type
  6735 ;;		None
  6736 ;; Auto vars:     Size  Location     Type
  6737 ;;		None
  6738 ;; Return value:  Size  Location     Type
  6739 ;;		None               void
  6740 ;; Registers used:
  6741 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6742 ;; Tracked objects:
  6743 ;;		On entry : 0/0
  6744 ;;		On exit  : 0/0
  6745 ;;		Unchanged: 0/0
  6746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6750 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6751 ;;Total ram usage:        0 bytes
  6752 ;; Hardware stack levels used:    1
  6753 ;; Hardware stack levels required when called:   12
  6754 ;; This function calls:
  6755 ;;		_setRF_Main
  6756 ;; This function is called by:
  6757 ;;		_main
  6758 ;; This function uses a non-reentrant model
  6759 ;;
  6760                           
  6761                           
  6762                           ;psect for function _RF_Main
  6763  18D3                     _RF_Main:	
  6764                           
  6765                           ;RF_Control_B1.c: 28: setRF_Main();
  6766                           
  6767                           ;incstack = 0
  6768                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6769  18D3  3185  2556         	fcall	_setRF_Main
  6770  18D5  0008               	return
  6771  18D6                     __end_of_RF_Main:	
  6772                           
  6773                           	psect	text24
  6774  0556                     __ptext24:	
  6775 ;; *************** function _setRF_Main *****************
  6776 ;; Defined at:
  6777 ;;		line 53 in file "../src/RF_Control_B1.c"
  6778 ;; Parameters:    Size  Location     Type
  6779 ;;		None
  6780 ;; Auto vars:     Size  Location     Type
  6781 ;;  error           1    3[BANK1 ] unsigned char 
  6782 ;; Return value:  Size  Location     Type
  6783 ;;		None               void
  6784 ;; Registers used:
  6785 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6786 ;; Tracked objects:
  6787 ;;		On entry : 0/0
  6788 ;;		On exit  : 0/0
  6789 ;;		Unchanged: 0/0
  6790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6792 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6793 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6794 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6795 ;;Total ram usage:        2 bytes
  6796 ;; Hardware stack levels used:    1
  6797 ;; Hardware stack levels required when called:   11
  6798 ;; This function calls:
  6799 ;;		_CC2500_PowerOnInitial
  6800 ;;		_CC2500_RxData
  6801 ;;		_CC2500_TxData
  6802 ;;		_CC2500_WriteCommand
  6803 ;;		_RF_RxDisable
  6804 ;;		___lwdiv
  6805 ;;		_getBuz_GO
  6806 ;;		_getRF_KeyStatus
  6807 ;;		_getRxData
  6808 ;; This function is called by:
  6809 ;;		_RF_Main
  6810 ;; This function uses a non-reentrant model
  6811 ;;
  6812                           
  6813                           
  6814                           ;psect for function _setRF_Main
  6815  0556                     _setRF_Main:	
  6816                           
  6817                           ;RF_Control_B1.c: 54: char error = 0;
  6818                           
  6819                           ;incstack = 0
  6820                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6821  0556  0021               	movlb	1	; select bank1
  6822  0557  01E9               	clrf	setRF_Main@error^(0+128)
  6823                           
  6824                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  6825  0558  1C20               	btfss	_RF1^(0+128),0
  6826  0559  2E27               	goto	l2148
  6827                           
  6828                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  6829  055A  319A  223C  3185   	fcall	_getBuz_GO
  6830  055D  0020               	movlb	0	; select bank0
  6831  055E  0821               	movf	?_getBuz_GO+1,w
  6832  055F  0420               	iorwf	?_getBuz_GO,w
  6833  0560  1D03               	skipz
  6834  0561  2E08               	goto	l9562
  6835                           
  6836                           ;RF_Control_B1.c: 59: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6837  0562  319A  224D  3185   	fcall	_getRF_KeyStatus
  6838  0565  3A01               	xorlw	1
  6839  0566  3000               	movlw	0
  6840  0567  1903               	skipnz
  6841  0568  3001               	movlw	1
  6842  0569  0021               	movlb	1	; select bank1
  6843  056A  00E8               	movwf	??_setRF_Main^(0+128)
  6844  056B  0CE8               	rrf	??_setRF_Main^(0+128),f
  6845  056C  0CE8               	rrf	??_setRF_Main^(0+128),f
  6846  056D  0820               	movf	_RF1^(0+128),w
  6847  056E  0668               	xorwf	??_setRF_Main^(0+128),w
  6848  056F  397F               	andlw	-129
  6849  0570  0668               	xorwf	??_setRF_Main^(0+128),w
  6850  0571  00A0               	movwf	_RF1^(0+128)
  6851                           
  6852                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  6853  0572  1FA0               	btfss	_RF1^(0+128),7
  6854  0573  2D76               	goto	l2152
  6855  0574  1F20               	btfss	_RF1^(0+128),6
  6856  0575  2E08               	goto	l9562
  6857  0576                     l2152:	
  6858                           
  6859                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  6860  0576  1D20               	btfss	_RF1^(0+128),2
  6861  0577  2DC7               	goto	l2153
  6862                           
  6863                           ;RF_Control_B1.c: 67: if (RF1.Learn == 0) {
  6864  0578  1B20               	btfsc	_RF1^(0+128),6
  6865  0579  2DC2               	goto	l9534
  6866                           
  6867                           ;RF_Control_B1.c: 68: RF1.Count++;
  6868  057A  3001               	movlw	1
  6869  057B  07A2               	addwf	(_RF1^(0+128)+2),f
  6870  057C  3000               	movlw	0
  6871  057D  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6872                           
  6873                           ;RF_Control_B1.c: 69: if (RF1.Count >= (RF1.RunTime / 20)) {
  6874  057E  3014               	movlw	20
  6875  057F  0020               	movlb	0	; select bank0
  6876  0580  00A0               	movwf	___lwdiv@divisor
  6877  0581  3000               	movlw	0
  6878  0582  00A1               	movwf	___lwdiv@divisor+1
  6879  0583  0021               	movlb	1	; select bank1
  6880  0584  0828               	movf	((_RF1+1)^(0+128)+7),w
  6881  0585  0020               	movlb	0	; select bank0
  6882  0586  01A3               	clrf	___lwdiv@dividend+1
  6883  0587  07A3               	addwf	___lwdiv@dividend+1,f
  6884  0588  0021               	movlb	1	; select bank1
  6885  0589  0827               	movf	(_RF1^(0+128)+7),w
  6886  058A  0020               	movlb	0	; select bank0
  6887  058B  01A2               	clrf	___lwdiv@dividend
  6888  058C  07A2               	addwf	___lwdiv@dividend,f
  6889  058D  3190  2095  3185   	fcall	___lwdiv
  6890  0590  0020               	movlb	0	; select bank0
  6891  0591  0821               	movf	?___lwdiv+1,w
  6892  0592  0021               	movlb	1	; select bank1
  6893  0593  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6894  0594  1D03               	skipz
  6895  0595  2D9A               	goto	u10675
  6896  0596  0020               	movlb	0	; select bank0
  6897  0597  0820               	movf	?___lwdiv,w
  6898  0598  0021               	movlb	1	; select bank1
  6899  0599  0222               	subwf	(_RF1^(0+128)+2),w
  6900  059A                     u10675:	
  6901  059A  1C03               	skipc
  6902  059B  2E08               	goto	l9562
  6903                           
  6904                           ;RF_Control_B1.c: 70: RF1.Count = (RF1.RunTime / 20);
  6905  059C  3014               	movlw	20
  6906  059D  0020               	movlb	0	; select bank0
  6907  059E  00A0               	movwf	___lwdiv@divisor
  6908  059F  3000               	movlw	0
  6909  05A0  00A1               	movwf	___lwdiv@divisor+1
  6910  05A1  0021               	movlb	1	; select bank1
  6911  05A2  0828               	movf	((_RF1+1)^(0+128)+7),w
  6912  05A3  0020               	movlb	0	; select bank0
  6913  05A4  01A3               	clrf	___lwdiv@dividend+1
  6914  05A5  07A3               	addwf	___lwdiv@dividend+1,f
  6915  05A6  0021               	movlb	1	; select bank1
  6916  05A7  0827               	movf	(_RF1^(0+128)+7),w
  6917  05A8  0020               	movlb	0	; select bank0
  6918  05A9  01A2               	clrf	___lwdiv@dividend
  6919  05AA  07A2               	addwf	___lwdiv@dividend,f
  6920  05AB  3190  2095  3185   	fcall	___lwdiv
  6921  05AE  0020               	movlb	0	; select bank0
  6922  05AF  0821               	movf	?___lwdiv+1,w
  6923  05B0  0021               	movlb	1	; select bank1
  6924  05B1  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6925  05B2  07A3               	addwf	((_RF1+1)^(0+128)+2),f
  6926  05B3  0020               	movlb	0	; select bank0
  6927  05B4  0820               	movf	?___lwdiv,w
  6928  05B5  0021               	movlb	1	; select bank1
  6929  05B6  01A2               	clrf	(_RF1^(0+128)+2)
  6930  05B7  07A2               	addwf	(_RF1^(0+128)+2),f
  6931                           
  6932                           ;RF_Control_B1.c: 72: RF1.TransceiveGO = 0;
  6933  05B8  1120               	bcf	_RF1^(0+128),2
  6934                           
  6935                           ;RF_Control_B1.c: 73: RF1.CorrectionCounter = 0;
  6936  05B9  01AA               	clrf	(_RF1^(0+128)+10)
  6937  05BA  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6938                           
  6939                           ;RF_Control_B1.c: 74: RF_RxDisable();
  6940  05BB  3199  21FA  3185   	fcall	_RF_RxDisable
  6941                           
  6942                           ;RF_Control_B1.c: 75: CC2500_TxData();
  6943  05BE  3197  2725  3185   	fcall	_CC2500_TxData
  6944                           
  6945                           ;RF_Control_B1.c: 77: }
  6946                           ;RF_Control_B1.c: 78: } else {
  6947  05C1  2E08               	goto	l9562
  6948  05C2                     l9534:	
  6949                           
  6950                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  6951  05C2  0021               	movlb	1	; select bank1
  6952  05C3  01A2               	clrf	(_RF1^(0+128)+2)
  6953  05C4  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6954                           
  6955                           ;RF_Control_B1.c: 80: RF1.TransceiveGO = 0;
  6956  05C5  1120               	bcf	_RF1^(0+128),2
  6957                           
  6958                           ;RF_Control_B1.c: 81: }
  6959                           ;RF_Control_B1.c: 82: } else {
  6960  05C6  2E08               	goto	l9562
  6961  05C7                     l2153:	
  6962                           
  6963                           ;RF_Control_B1.c: 83: if (RF1.RxStatus == 1) {
  6964  05C7  1DA0               	btfss	_RF1^(0+128),3
  6965  05C8  2DD6               	goto	l9548
  6966                           
  6967                           ;RF_Control_B1.c: 85: CC2500_RxData();
  6968  05C9  3196  26BA  3185   	fcall	_CC2500_RxData
  6969                           
  6970                           ;RF_Control_B1.c: 87: if (RF1.ReceiveGO == 1) {
  6971  05CC  0021               	movlb	1	; select bank1
  6972  05CD  1CA0               	btfss	_RF1^(0+128),1
  6973  05CE  2E08               	goto	l9562
  6974                           
  6975                           ;RF_Control_B1.c: 88: RF1.ReceiveGO = 0;
  6976  05CF  10A0               	bcf	_RF1^(0+128),1
  6977                           
  6978                           ;RF_Control_B1.c: 89: RF1.CorrectionCounter = 0;
  6979  05D0  01AA               	clrf	(_RF1^(0+128)+10)
  6980  05D1  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6981                           
  6982                           ;RF_Control_B1.c: 97: getRxData();
  6983  05D2  3189  21AB  3185   	fcall	_getRxData
  6984                           
  6985                           ;RF_Control_B1.c: 100: }
  6986                           ;RF_Control_B1.c: 101: } else {
  6987  05D5  2E08               	goto	l9562
  6988  05D6                     l9548:	
  6989                           
  6990                           ;RF_Control_B1.c: 102: RF1.Count++;
  6991  05D6  3001               	movlw	1
  6992  05D7  0021               	movlb	1	; select bank1
  6993  05D8  07A2               	addwf	(_RF1^(0+128)+2),f
  6994  05D9  3000               	movlw	0
  6995  05DA  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6996                           
  6997                           ;RF_Control_B1.c: 103: if (RF1.Count >= (RF1.RunTime / 20)) {
  6998  05DB  3014               	movlw	20
  6999  05DC  0020               	movlb	0	; select bank0
  7000  05DD  00A0               	movwf	___lwdiv@divisor
  7001  05DE  3000               	movlw	0
  7002  05DF  00A1               	movwf	___lwdiv@divisor+1
  7003  05E0  0021               	movlb	1	; select bank1
  7004  05E1  0828               	movf	((_RF1+1)^(0+128)+7),w
  7005  05E2  0020               	movlb	0	; select bank0
  7006  05E3  01A3               	clrf	___lwdiv@dividend+1
  7007  05E4  07A3               	addwf	___lwdiv@dividend+1,f
  7008  05E5  0021               	movlb	1	; select bank1
  7009  05E6  0827               	movf	(_RF1^(0+128)+7),w
  7010  05E7  0020               	movlb	0	; select bank0
  7011  05E8  01A2               	clrf	___lwdiv@dividend
  7012  05E9  07A2               	addwf	___lwdiv@dividend,f
  7013  05EA  3190  2095  3185   	fcall	___lwdiv
  7014  05ED  0020               	movlb	0	; select bank0
  7015  05EE  0821               	movf	?___lwdiv+1,w
  7016  05EF  0021               	movlb	1	; select bank1
  7017  05F0  0223               	subwf	((_RF1+1)^(0+128)+2),w
  7018  05F1  1D03               	skipz
  7019  05F2  2DF7               	goto	u10705
  7020  05F3  0020               	movlb	0	; select bank0
  7021  05F4  0820               	movf	?___lwdiv,w
  7022  05F5  0021               	movlb	1	; select bank1
  7023  05F6  0222               	subwf	(_RF1^(0+128)+2),w
  7024  05F7                     u10705:	
  7025  05F7  1C03               	skipc
  7026  05F8  2E08               	goto	l9562
  7027                           
  7028                           ;RF_Control_B1.c: 104: RF1.Count = 0;
  7029  05F9  01A2               	clrf	(_RF1^(0+128)+2)
  7030  05FA  01A3               	clrf	((_RF1+1)^(0+128)+2)
  7031                           
  7032                           ;RF_Control_B1.c: 106: RF1.RxStatus = 1;
  7033  05FB  15A0               	bsf	_RF1^(0+128),3
  7034                           
  7035                           ;RF_Control_B1.c: 107: CC2500_WriteCommand(0x36);
  7036  05FC  3036               	movlw	54
  7037  05FD  319C  247A  3185   	fcall	_CC2500_WriteCommand
  7038                           
  7039                           ;RF_Control_B1.c: 108: CC2500_WriteCommand(0x3A);
  7040  0600  303A               	movlw	58
  7041  0601  319C  247A  3185   	fcall	_CC2500_WriteCommand
  7042                           
  7043                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x34);
  7044  0604  3034               	movlw	52
  7045  0605  319C  247A  3185   	fcall	_CC2500_WriteCommand
  7046  0608                     l9562:	
  7047                           
  7048                           ;RF_Control_B1.c: 111: }
  7049                           ;RF_Control_B1.c: 112: }
  7050                           ;RF_Control_B1.c: 113: }
  7051                           ;RF_Control_B1.c: 114: }
  7052                           ;RF_Control_B1.c: 115: }
  7053                           ;RF_Control_B1.c: 117: RF1.CorrectionCounter++;
  7054  0608  3001               	movlw	1
  7055  0609  0021               	movlb	1	; select bank1
  7056  060A  07AA               	addwf	(_RF1^(0+128)+10),f
  7057  060B  3000               	movlw	0
  7058  060C  3DAB               	addwfc	((_RF1+1)^(0+128)+10),f
  7059                           
  7060                           ;RF_Control_B1.c: 118: if (RF1.CorrectionCounter > (60000 / 20)) {
  7061  060D  300B               	movlw	11
  7062  060E  022B               	subwf	((_RF1+1)^(0+128)+10),w
  7063  060F  30B9               	movlw	185
  7064  0610  1903               	skipnz
  7065  0611  022A               	subwf	(_RF1^(0+128)+10),w
  7066  0612  1C03               	skipc
  7067  0613  2E20               	goto	l9576
  7068                           
  7069                           ;RF_Control_B1.c: 119: RF1.CorrectionCounter = 0;
  7070  0614  01AA               	clrf	(_RF1^(0+128)+10)
  7071  0615  01AB               	clrf	((_RF1+1)^(0+128)+10)
  7072                           
  7073                           ;RF_Control_B1.c: 121: RF1.RxStatus = 0;
  7074  0616  11A0               	bcf	_RF1^(0+128),3
  7075                           
  7076                           ;RF_Control_B1.c: 122: RF1.ReceiveGO = 0;
  7077  0617  10A0               	bcf	_RF1^(0+128),1
  7078                           
  7079                           ;RF_Control_B1.c: 123: CC2500_WriteCommand(0x36);
  7080  0618  3036               	movlw	54
  7081  0619  319C  247A  3185   	fcall	_CC2500_WriteCommand
  7082                           
  7083                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x3A);
  7084  061C  303A               	movlw	58
  7085  061D  319C  247A  3185   	fcall	_CC2500_WriteCommand
  7086  0620                     l9576:	
  7087                           
  7088                           ;RF_Control_B1.c: 125: }
  7089                           ;RF_Control_B1.c: 127: if (RF1.Timeout == 1) {
  7090  0620  0021               	movlb	1	; select bank1
  7091  0621  1F21               	btfss	(_RF1^(0+128)+1),6
  7092  0622  0008               	return
  7093                           
  7094                           ;RF_Control_B1.c: 128: RF1.Timeout = 0;
  7095  0623  1321               	bcf	(_RF1^(0+128)+1),6
  7096                           
  7097                           ;RF_Control_B1.c: 129: CC2500_PowerOnInitial();
  7098  0624  319B  2366         	fcall	_CC2500_PowerOnInitial
  7099                           
  7100                           ;RF_Control_B1.c: 130: }
  7101                           ;RF_Control_B1.c: 132: } else {
  7102  0626  0008               	return
  7103  0627                     l2148:	
  7104                           
  7105                           ;RF_Control_B1.c: 133: if (myMain.PowerON == 1) {
  7106  0627  1C2E               	btfss	_myMain^(0+128),0
  7107  0628  0008               	return
  7108                           
  7109                           ;RF_Control_B1.c: 134: RF1.Enable = 1;
  7110  0629  1420               	bsf	_RF1^(0+128),0
  7111  062A  0008               	return
  7112  062B                     __end_of_setRF_Main:	
  7113                           
  7114                           	psect	text25
  7115  09AB                     __ptext25:	
  7116 ;; *************** function _getRxData *****************
  7117 ;; Defined at:
  7118 ;;		line 227 in file "../src/RF_Control_B1.c"
  7119 ;; Parameters:    Size  Location     Type
  7120 ;;		None
  7121 ;; Auto vars:     Size  Location     Type
  7122 ;;  error           1    1[BANK1 ] unsigned char 
  7123 ;; Return value:  Size  Location     Type
  7124 ;;		None               void
  7125 ;; Registers used:
  7126 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7127 ;; Tracked objects:
  7128 ;;		On entry : 0/0
  7129 ;;		On exit  : 0/0
  7130 ;;		Unchanged: 0/0
  7131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7133 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7134 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7135 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7136 ;;Total ram usage:        2 bytes
  7137 ;; Hardware stack levels used:    1
  7138 ;; Hardware stack levels required when called:   10
  7139 ;; This function calls:
  7140 ;;		_getMain_All_Error_Status
  7141 ;;		_setControl_Lights_Table
  7142 ;;		_setLog_Code
  7143 ;;		_setTxData
  7144 ;; This function is called by:
  7145 ;;		_setRF_Main
  7146 ;; This function uses a non-reentrant model
  7147 ;;
  7148                           
  7149                           
  7150                           ;psect for function _getRxData
  7151  09AB                     _getRxData:	
  7152                           
  7153                           ;RF_Control_B1.c: 229: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7154                           
  7155                           ;incstack = 0
  7156                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7157  09AB  0023               	movlb	3	; select bank3
  7158  09AC  0820               	movf	_RF_Data^(0+384),w
  7159  09AD  3AAA               	xorlw	170
  7160  09AE  1D03               	skipz
  7161  09AF  29C1               	goto	l7716
  7162  09B0  0821               	movf	(_RF_Data^(0+384)+1),w
  7163  09B1  3A01               	xorlw	1
  7164  09B2  1D03               	skipz
  7165  09B3  29C1               	goto	l7716
  7166                           
  7167                           ;RF_Control_B1.c: 230: product->Data[2] = 0x55;
  7168  09B4  3055               	movlw	85
  7169  09B5  0021               	movlb	1	; select bank1
  7170  09B6  00E6               	movwf	??_getRxData^(0+128)
  7171  09B7  086E               	movf	_product^(0+128),w
  7172  09B8  3E02               	addlw	2
  7173  09B9  0086               	movwf	6
  7174  09BA  3002               	movlw	2	; select bank4/5
  7175  09BB  0087               	movwf	7
  7176  09BC  0866               	movf	??_getRxData^(0+128),w
  7177  09BD  0081               	movwf	1
  7178                           
  7179                           ;RF_Control_B1.c: 231: setTxData();
  7180  09BE  318F  2745         	fcall	_setTxData
  7181                           
  7182                           ;RF_Control_B1.c: 235: } else {
  7183  09C0  0008               	return
  7184  09C1                     l7716:	
  7185                           
  7186                           ;RF_Control_B1.c: 236: char error = getMain_All_Error_Status(0);
  7187  09C1  3000               	movlw	0
  7188  09C2  3190  202E  3189   	fcall	_getMain_All_Error_Status
  7189  09C5  0021               	movlb	1	; select bank1
  7190  09C6  00E6               	movwf	??_getRxData^(0+128)
  7191  09C7  0866               	movf	??_getRxData^(0+128),w
  7192  09C8  00E7               	movwf	getRxData@error^(0+128)
  7193                           
  7194                           ;RF_Control_B1.c: 237: if (error == 0) {
  7195  09C9  08E7               	movf	getRxData@error^(0+128),f
  7196  09CA  1D03               	skipz
  7197  09CB  2A1B               	goto	l2193
  7198                           
  7199                           ;RF_Control_B1.c: 238: if (RF1.Learn == 1) {
  7200  09CC  1F20               	btfss	_RF1^(0+128),6
  7201  09CD  29D9               	goto	l7728
  7202                           
  7203                           ;RF_Control_B1.c: 240: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  7204  09CE  0023               	movlb	3	; select bank3
  7205  09CF  08A0               	movf	_RF_Data^(0+384),f
  7206  09D0  1D03               	skipz
  7207  09D1  0008               	return
  7208  09D2  0821               	movf	(_RF_Data^(0+384)+1),w
  7209  09D3  3A64               	xorlw	100
  7210  09D4  1D03               	skipz
  7211  09D5  0008               	return
  7212                           
  7213                           ;RF_Control_B1.c: 241: setLog_Code();
  7214  09D6  3190  2061         	fcall	_setLog_Code
  7215                           
  7216                           ;RF_Control_B1.c: 242: }
  7217                           ;RF_Control_B1.c: 243: } else {
  7218  09D8  0008               	return
  7219  09D9                     l7728:	
  7220                           
  7221                           ;RF_Control_B1.c: 244: if (RF_Data[20] == 210 || RF_Data[20] == 0x0a) {
  7222  09D9  0023               	movlb	3	; select bank3
  7223  09DA  0834               	movf	(_RF_Data^(0+384)+20),w
  7224  09DB  3AD2               	xorlw	210
  7225  09DC  1903               	skipnz
  7226  09DD  29E2               	goto	l7732
  7227  09DE  0834               	movf	(_RF_Data^(0+384)+20),w
  7228  09DF  3A0A               	xorlw	10
  7229  09E0  1D03               	skipz
  7230  09E1  0008               	return
  7231  09E2                     l7732:	
  7232                           
  7233                           ;RF_Control_B1.c: 246: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7234  09E2  08A0               	movf	_RF_Data^(0+384),f
  7235  09E3  1D03               	skipz
  7236  09E4  0008               	return
  7237  09E5  0821               	movf	(_RF_Data^(0+384)+1),w
  7238  09E6  3A02               	xorlw	2
  7239  09E7  1D03               	skipz
  7240  09E8  0008               	return
  7241                           
  7242                           ;RF_Control_B1.c: 248: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7243  09E9  082C               	movf	(_RF_Data^(0+384)+12),w
  7244  09EA  3AFF               	xorlw	255
  7245  09EB  1D03               	skipz
  7246  09EC  29F7               	goto	l7744
  7247  09ED  082D               	movf	(_RF_Data^(0+384)+13),w
  7248  09EE  3AFF               	xorlw	255
  7249  09EF  1D03               	skipz
  7250  09F0  29F7               	goto	l7744
  7251  09F1  082E               	movf	(_RF_Data^(0+384)+14),w
  7252  09F2  3AFF               	xorlw	255
  7253  09F3  1D03               	skipz
  7254  09F4  29F7               	goto	l7744
  7255                           
  7256                           ;RF_Control_B1.c: 249: __nop();
  7257  09F5  0000               	nop
  7258                           
  7259                           ;RF_Control_B1.c: 250: } else {
  7260  09F6  0008               	return
  7261  09F7                     l7744:	
  7262                           
  7263                           ;RF_Control_B1.c: 251: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7264  09F7  0021               	movlb	1	; select bank1
  7265  09F8  086E               	movf	_product^(0+128),w
  7266  09F9  3E0C               	addlw	12
  7267  09FA  0086               	movwf	6
  7268  09FB  3002               	movlw	2	; select bank4/5
  7269  09FC  0087               	movwf	7
  7270  09FD  0023               	movlb	3	; select bank3
  7271  09FE  082C               	movf	(_RF_Data^(0+384)+12),w
  7272  09FF  0601               	xorwf	1,w
  7273  0A00  1D03               	skipz
  7274  0A01  0008               	return
  7275  0A02  0021               	movlb	1	; select bank1
  7276  0A03  086E               	movf	_product^(0+128),w
  7277  0A04  3E0D               	addlw	13
  7278  0A05  0086               	movwf	6
  7279  0A06  3002               	movlw	2	; select bank4/5
  7280  0A07  0087               	movwf	7
  7281  0A08  0023               	movlb	3	; select bank3
  7282  0A09  082D               	movf	(_RF_Data^(0+384)+13),w
  7283  0A0A  0601               	xorwf	1,w
  7284  0A0B  1D03               	skipz
  7285  0A0C  0008               	return
  7286  0A0D  0021               	movlb	1	; select bank1
  7287  0A0E  086E               	movf	_product^(0+128),w
  7288  0A0F  3E0E               	addlw	14
  7289  0A10  0086               	movwf	6
  7290  0A11  3002               	movlw	2	; select bank4/5
  7291  0A12  0087               	movwf	7
  7292  0A13  0023               	movlb	3	; select bank3
  7293  0A14  082E               	movf	(_RF_Data^(0+384)+14),w
  7294  0A15  0601               	xorwf	1,w
  7295  0A16  1D03               	skipz
  7296  0A17  0008               	return
  7297                           
  7298                           ;RF_Control_B1.c: 252: setControl_Lights_Table();
  7299  0A18  318C  24A8         	fcall	_setControl_Lights_Table
  7300                           
  7301                           ;RF_Control_B1.c: 253: }
  7302                           ;RF_Control_B1.c: 254: }
  7303                           ;RF_Control_B1.c: 256: }
  7304                           ;RF_Control_B1.c: 267: }
  7305                           ;RF_Control_B1.c: 268: }
  7306                           ;RF_Control_B1.c: 269: } else {
  7307  0A1A  0008               	return
  7308  0A1B                     l2193:	
  7309                           
  7310                           ;RF_Control_B1.c: 270: __nop();
  7311  0A1B  0000               	nop
  7312  0A1C  0008               	return
  7313  0A1D                     __end_of_getRxData:	
  7314                           
  7315                           	psect	text26
  7316  1061                     __ptext26:	
  7317 ;; *************** function _setLog_Code *****************
  7318 ;; Defined at:
  7319 ;;		line 276 in file "../src/RF_Control_B1.c"
  7320 ;; Parameters:    Size  Location     Type
  7321 ;;		None
  7322 ;; Auto vars:     Size  Location     Type
  7323 ;;		None
  7324 ;; Return value:  Size  Location     Type
  7325 ;;		None               void
  7326 ;; Registers used:
  7327 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7328 ;; Tracked objects:
  7329 ;;		On entry : 0/0
  7330 ;;		On exit  : 0/0
  7331 ;;		Unchanged: 0/0
  7332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7335 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7336 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7337 ;;Total ram usage:        1 bytes
  7338 ;; Hardware stack levels used:    1
  7339 ;; Hardware stack levels required when called:    7
  7340 ;; This function calls:
  7341 ;;		_setBuz
  7342 ;;		_setMemory_LoopSave
  7343 ;;		_setMemory_Modify
  7344 ;;		_setProductData
  7345 ;; This function is called by:
  7346 ;;		_getRxData
  7347 ;; This function uses a non-reentrant model
  7348 ;;
  7349                           
  7350                           
  7351                           ;psect for function _setLog_Code
  7352  1061                     _setLog_Code:	
  7353                           
  7354                           ;RF_Control_B1.c: 277: RF1.Learn = 0;
  7355                           
  7356                           ;incstack = 0
  7357                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7358  1061  0021               	movlb	1	; select bank1
  7359  1062  1320               	bcf	_RF1^(0+128),6
  7360                           
  7361                           ;RF_Control_B1.c: 278: setProductData(12, RF_Data[12]);
  7362  1063  0023               	movlb	3	; select bank3
  7363  1064  082C               	movf	(_RF_Data^(0+384)+12),w
  7364  1065  0020               	movlb	0	; select bank0
  7365  1066  00E5               	movwf	??_setLog_Code
  7366  1067  0865               	movf	??_setLog_Code,w
  7367  1068  00E2               	movwf	setProductData@value
  7368  1069  300C               	movlw	12
  7369  106A  3199  218D  3190   	fcall	_setProductData
  7370                           
  7371                           ;RF_Control_B1.c: 279: setProductData(13, RF_Data[13]);
  7372  106D  0023               	movlb	3	; select bank3
  7373  106E  082D               	movf	(_RF_Data^(0+384)+13),w
  7374  106F  0020               	movlb	0	; select bank0
  7375  1070  00E5               	movwf	??_setLog_Code
  7376  1071  0865               	movf	??_setLog_Code,w
  7377  1072  00E2               	movwf	setProductData@value
  7378  1073  300D               	movlw	13
  7379  1074  3199  218D  3190   	fcall	_setProductData
  7380                           
  7381                           ;RF_Control_B1.c: 280: setProductData(14, RF_Data[14]);
  7382  1077  0023               	movlb	3	; select bank3
  7383  1078  082E               	movf	(_RF_Data^(0+384)+14),w
  7384  1079  0020               	movlb	0	; select bank0
  7385  107A  00E5               	movwf	??_setLog_Code
  7386  107B  0865               	movf	??_setLog_Code,w
  7387  107C  00E2               	movwf	setProductData@value
  7388  107D  300E               	movlw	14
  7389  107E  3199  218D  3190   	fcall	_setProductData
  7390                           
  7391                           ;RF_Control_B1.c: 281: setBuz(1, 100);
  7392  1081  3064               	movlw	100
  7393  1082  0020               	movlb	0	; select bank0
  7394  1083  00A9               	movwf	setBuz@time
  7395  1084  3000               	movlw	0
  7396  1085  00AA               	movwf	setBuz@time+1
  7397  1086  3001               	movlw	1
  7398  1087  3194  240B  3190   	fcall	_setBuz
  7399                           
  7400                           ;RF_Control_B1.c: 282: if (myMain.First == 1) {
  7401  108A  0021               	movlb	1	; select bank1
  7402  108B  1EAE               	btfss	_myMain^(0+128),5
  7403  108C  2891               	goto	l2208
  7404                           
  7405                           ;RF_Control_B1.c: 283: setMemory_LoopSave(1);
  7406  108D  3001               	movlw	1
  7407  108E  319B  2303  3190   	fcall	_setMemory_LoopSave
  7408  1091                     l2208:	
  7409                           
  7410                           ;RF_Control_B1.c: 284: }
  7411                           ;RF_Control_B1.c: 285: setMemory_Modify(1);
  7412  1091  3001               	movlw	1
  7413  1092  319A  22CA         	fcall	_setMemory_Modify
  7414  1094  0008               	return
  7415  1095                     __end_of_setLog_Code:	
  7416                           
  7417                           	psect	text27
  7418  1B03                     __ptext27:	
  7419 ;; *************** function _setMemory_LoopSave *****************
  7420 ;; Defined at:
  7421 ;;		line 1089 in file "../src/MCU_B1.c"
  7422 ;; Parameters:    Size  Location     Type
  7423 ;;  command         1    wreg     unsigned char 
  7424 ;; Auto vars:     Size  Location     Type
  7425 ;;  command         1    1[BANK0 ] unsigned char 
  7426 ;; Return value:  Size  Location     Type
  7427 ;;		None               void
  7428 ;; Registers used:
  7429 ;;		wreg, status,2, status,0
  7430 ;; Tracked objects:
  7431 ;;		On entry : 0/0
  7432 ;;		On exit  : 0/0
  7433 ;;		Unchanged: 0/0
  7434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7436 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7437 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7438 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7439 ;;Total ram usage:        2 bytes
  7440 ;; Hardware stack levels used:    1
  7441 ;; Hardware stack levels required when called:    5
  7442 ;; This function calls:
  7443 ;;		Nothing
  7444 ;; This function is called by:
  7445 ;;		_setLog_Code
  7446 ;; This function uses a non-reentrant model
  7447 ;;
  7448                           
  7449                           
  7450                           ;psect for function _setMemory_LoopSave
  7451  1B03                     _setMemory_LoopSave:	
  7452                           
  7453                           ;incstack = 0
  7454                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7455                           ;setMemory_LoopSave@command stored from wreg
  7456  1B03  0020               	movlb	0	; select bank0
  7457  1B04  00A1               	movwf	setMemory_LoopSave@command
  7458                           
  7459                           ;MCU_B1.c: 1090: Memory.LoopSave = command == 1 ? 1 : 0;
  7460  1B05  0821               	movf	setMemory_LoopSave@command,w
  7461  1B06  3A01               	xorlw	1
  7462  1B07  3000               	movlw	0
  7463  1B08  1903               	skipnz
  7464  1B09  3001               	movlw	1
  7465  1B0A  00A0               	movwf	??_setMemory_LoopSave
  7466  1B0B  0DA0               	rlf	??_setMemory_LoopSave,f
  7467  1B0C  0DA0               	rlf	??_setMemory_LoopSave,f
  7468  1B0D  0024               	movlb	4	; select bank4
  7469  1B0E  0844               	movf	(_Memory^(0+512)+36),w
  7470  1B0F  0020               	movlb	0	; select bank0
  7471  1B10  0620               	xorwf	??_setMemory_LoopSave,w
  7472  1B11  39FB               	andlw	-5
  7473  1B12  0620               	xorwf	??_setMemory_LoopSave,w
  7474  1B13  0024               	movlb	4	; select bank4
  7475  1B14  00C4               	movwf	(_Memory^(0+512)+36)
  7476  1B15  0008               	return
  7477  1B16                     __end_of_setMemory_LoopSave:	
  7478                           
  7479                           	psect	text28
  7480  0CA8                     __ptext28:	
  7481 ;; *************** function _setControl_Lights_Table *****************
  7482 ;; Defined at:
  7483 ;;		line 289 in file "../src/RF_Control_B1.c"
  7484 ;; Parameters:    Size  Location     Type
  7485 ;;		None
  7486 ;; Auto vars:     Size  Location     Type
  7487 ;;		None
  7488 ;; Return value:  Size  Location     Type
  7489 ;;		None               void
  7490 ;; Registers used:
  7491 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7492 ;; Tracked objects:
  7493 ;;		On entry : 0/0
  7494 ;;		On exit  : 0/0
  7495 ;;		Unchanged: 0/0
  7496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7498 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7500 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7501 ;;Total ram usage:        0 bytes
  7502 ;; Hardware stack levels used:    1
  7503 ;; Hardware stack levels required when called:    9
  7504 ;; This function calls:
  7505 ;;		_getDimmerLights_Status
  7506 ;;		_getMain_All_LightsStatus
  7507 ;;		_setCmd_Status
  7508 ;;		_setDimmerLights_SwOff
  7509 ;;		_setDimmerLights_SwOn
  7510 ;;		_setProductData
  7511 ;;		_setRFSW_AdjControl
  7512 ;;		_setRFSW_Control
  7513 ;;		_setTxData
  7514 ;; This function is called by:
  7515 ;;		_getRxData
  7516 ;; This function uses a non-reentrant model
  7517 ;;
  7518                           
  7519                           
  7520                           ;psect for function _setControl_Lights_Table
  7521  0CA8                     _setControl_Lights_Table:	
  7522                           
  7523                           ;RF_Control_B1.c: 290: switch (RF_Data[15]) {
  7524                           
  7525                           ;incstack = 0
  7526                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7527  0CA8  2D21               	goto	l7328
  7528  0CA9                     l7304:	
  7529                           ;RF_Control_B1.c: 292: case 0x00:
  7530                           
  7531                           
  7532                           ;RF_Control_B1.c: 293: if (getMain_All_LightsStatus() == 1) {
  7533  0CA9  319A  22F0  318C   	fcall	_getMain_All_LightsStatus
  7534  0CAC  3A01               	xorlw	1
  7535  0CAD  1D03               	skipz
  7536  0CAE  2CD4               	goto	l7314
  7537                           
  7538                           ;RF_Control_B1.c: 296: if (getDimmerLights_Status(1) == 1) {
  7539  0CAF  3001               	movlw	1
  7540  0CB0  319A  2209  318C   	fcall	_getDimmerLights_Status
  7541  0CB3  3A01               	xorlw	1
  7542  0CB4  1D03               	skipz
  7543  0CB5  2CBE               	goto	l2215
  7544                           
  7545                           ;RF_Control_B1.c: 297: setDimmerLights_SwOn(1);
  7546  0CB6  3001               	movlw	1
  7547  0CB7  3188  2000  318C   	fcall	_setDimmerLights_SwOn
  7548                           
  7549                           ;RF_Control_B1.c: 298: setDimmerLights_SwOff(1);
  7550  0CBA  3001               	movlw	1
  7551  0CBB  3187  27C6  318C   	fcall	_setDimmerLights_SwOff
  7552  0CBE                     l2215:	
  7553                           
  7554                           ;RF_Control_B1.c: 299: }
  7555                           ;RF_Control_B1.c: 302: if (getDimmerLights_Status(2) == 1) {
  7556  0CBE  3002               	movlw	2
  7557  0CBF  319A  2209  318C   	fcall	_getDimmerLights_Status
  7558  0CC2  3A01               	xorlw	1
  7559  0CC3  1D03               	skipz
  7560  0CC4  2CCD               	goto	l7312
  7561                           
  7562                           ;RF_Control_B1.c: 303: setDimmerLights_SwOn(2);
  7563  0CC5  3002               	movlw	2
  7564  0CC6  3188  2000  318C   	fcall	_setDimmerLights_SwOn
  7565                           
  7566                           ;RF_Control_B1.c: 304: setDimmerLights_SwOff(2);
  7567  0CC9  3002               	movlw	2
  7568  0CCA  3187  27C6  318C   	fcall	_setDimmerLights_SwOff
  7569  0CCD                     l7312:	
  7570                           
  7571                           ;RF_Control_B1.c: 305: }
  7572                           ;RF_Control_B1.c: 314: setCmd_Status(1, 1);
  7573  0CCD  0020               	movlb	0	; select bank0
  7574  0CCE  01A0               	clrf	setCmd_Status@cmd
  7575  0CCF  0AA0               	incf	setCmd_Status@cmd,f
  7576  0CD0  3001               	movlw	1
  7577  0CD1  319C  242E         	fcall	_setCmd_Status
  7578                           
  7579                           ;RF_Control_B1.c: 315: } else {
  7580  0CD3  0008               	return
  7581  0CD4                     l7314:	
  7582                           
  7583                           ;RF_Control_B1.c: 316: setProductData(9, 0);
  7584  0CD4  0020               	movlb	0	; select bank0
  7585  0CD5  01E2               	clrf	setProductData@value
  7586  0CD6  3009               	movlw	9
  7587  0CD7  3199  218D  318C   	fcall	_setProductData
  7588                           
  7589                           ;RF_Control_B1.c: 317: setProductData(11, 0);
  7590  0CDA  0020               	movlb	0	; select bank0
  7591  0CDB  01E2               	clrf	setProductData@value
  7592  0CDC  300B               	movlw	11
  7593  0CDD  3199  218D  318C   	fcall	_setProductData
  7594                           
  7595                           ;RF_Control_B1.c: 318: setProductData(15, 0);
  7596  0CE0  0020               	movlb	0	; select bank0
  7597  0CE1  01E2               	clrf	setProductData@value
  7598  0CE2  300F               	movlw	15
  7599  0CE3  3199  218D  318C   	fcall	_setProductData
  7600                           
  7601                           ;RF_Control_B1.c: 319: setProductData(17, 0);
  7602  0CE6  0020               	movlb	0	; select bank0
  7603  0CE7  01E2               	clrf	setProductData@value
  7604  0CE8  3011               	movlw	17
  7605  0CE9  3199  218D  318C   	fcall	_setProductData
  7606                           
  7607                           ;RF_Control_B1.c: 320: setTxData();
  7608  0CEC  318F  2745         	fcall	_setTxData
  7609                           
  7610                           ;RF_Control_B1.c: 321: }
  7611                           ;RF_Control_B1.c: 322: break;
  7612  0CEE  0008               	return
  7613  0CEF                     l7316:	
  7614                           ;RF_Control_B1.c: 324: case 0x20:
  7615                           
  7616                           
  7617                           ;RF_Control_B1.c: 325: setProductData(9, 0);
  7618  0CEF  0020               	movlb	0	; select bank0
  7619  0CF0  01E2               	clrf	setProductData@value
  7620  0CF1  3009               	movlw	9
  7621  0CF2  3199  218D  318C   	fcall	_setProductData
  7622                           
  7623                           ;RF_Control_B1.c: 326: setProductData(11, 0);
  7624  0CF5  0020               	movlb	0	; select bank0
  7625  0CF6  01E2               	clrf	setProductData@value
  7626  0CF7  300B               	movlw	11
  7627  0CF8  3199  218D  318C   	fcall	_setProductData
  7628                           
  7629                           ;RF_Control_B1.c: 327: setProductData(15, product->Data[15]);
  7630  0CFB  0021               	movlb	1	; select bank1
  7631  0CFC  086E               	movf	_product^(0+128),w
  7632  0CFD  0086               	movwf	6
  7633  0CFE  3002               	movlw	2	; select bank4/5
  7634  0CFF  0087               	movwf	7
  7635  0D00  3002               	movlw	2	; select bank4/5
  7636  0D01  3F4F               	moviw [15]fsr1
  7637  0D02  0020               	movlb	0	; select bank0
  7638  0D03  00E2               	movwf	setProductData@value
  7639  0D04  300F               	movlw	15
  7640  0D05  3199  218D  318C   	fcall	_setProductData
  7641                           
  7642                           ;RF_Control_B1.c: 328: setProductData(17, 0);
  7643  0D08  0020               	movlb	0	; select bank0
  7644  0D09  01E2               	clrf	setProductData@value
  7645  0D0A  3011               	movlw	17
  7646  0D0B  3199  218D  318C   	fcall	_setProductData
  7647                           
  7648                           ;RF_Control_B1.c: 329: setTxData();
  7649  0D0E  318F  2745         	fcall	_setTxData
  7650                           
  7651                           ;RF_Control_B1.c: 330: break;
  7652  0D10  0008               	return
  7653  0D11                     l7318:	
  7654                           ;RF_Control_B1.c: 333: case 0x01:
  7655                           
  7656                           
  7657                           ;RF_Control_B1.c: 334: setRFSW_Control(1);
  7658  0D11  3001               	movlw	1
  7659  0D12  3191  21BE         	fcall	_setRFSW_Control
  7660                           
  7661                           ;RF_Control_B1.c: 335: break;
  7662  0D14  0008               	return
  7663  0D15                     l7320:	
  7664                           ;RF_Control_B1.c: 339: case 0x11:
  7665                           
  7666                           
  7667                           ;RF_Control_B1.c: 340: setRFSW_AdjControl(1);
  7668  0D15  3001               	movlw	1
  7669  0D16  318A  228F         	fcall	_setRFSW_AdjControl
  7670                           
  7671                           ;RF_Control_B1.c: 341: break;
  7672  0D18  0008               	return
  7673  0D19                     l7322:	
  7674                           ;RF_Control_B1.c: 346: case 0x02:
  7675                           
  7676                           
  7677                           ;RF_Control_B1.c: 347: setRFSW_Control(2);
  7678  0D19  3002               	movlw	2
  7679  0D1A  3191  21BE         	fcall	_setRFSW_Control
  7680                           
  7681                           ;RF_Control_B1.c: 348: break;
  7682  0D1C  0008               	return
  7683  0D1D                     l7324:	
  7684                           ;RF_Control_B1.c: 351: case 0x21:
  7685                           
  7686                           
  7687                           ;RF_Control_B1.c: 352: setRFSW_AdjControl(2);
  7688  0D1D  3002               	movlw	2
  7689  0D1E  318A  228F         	fcall	_setRFSW_AdjControl
  7690                           
  7691                           ;RF_Control_B1.c: 370: }
  7692                           
  7693                           ;RF_Control_B1.c: 353: break;
  7694  0D20  0008               	return
  7695  0D21                     l7328:	
  7696  0D21  0023               	movlb	3	; select bank3
  7697  0D22  082F               	movf	(_RF_Data^(0+384)+15),w
  7698                           
  7699                           ; Switch size 1, requested type "space"
  7700                           ; Number of cases is 6, Range of values is 0 to 33
  7701                           ; switch strategies available:
  7702                           ; Name         Instructions Cycles
  7703                           ; simple_byte           19    10 (average)
  7704                           ; direct_byte           74     6 (fixed)
  7705                           ; jumptable            260     6 (fixed)
  7706                           ;	Chosen strategy is simple_byte
  7707  0D23  3A00               	xorlw	0	; case 0
  7708  0D24  1903               	skipnz
  7709  0D25  2CA9               	goto	l7304
  7710  0D26  3A01               	xorlw	1	; case 1
  7711  0D27  1903               	skipnz
  7712  0D28  2D11               	goto	l7318
  7713  0D29  3A03               	xorlw	3	; case 2
  7714  0D2A  1903               	skipnz
  7715  0D2B  2D19               	goto	l7322
  7716  0D2C  3A13               	xorlw	19	; case 17
  7717  0D2D  1903               	skipnz
  7718  0D2E  2D15               	goto	l7320
  7719  0D2F  3A31               	xorlw	49	; case 32
  7720  0D30  1903               	skipnz
  7721  0D31  2CEF               	goto	l7316
  7722  0D32  3A01               	xorlw	1	; case 33
  7723  0D33  1903               	skipnz
  7724  0D34  2D1D               	goto	l7324
  7725  0D35  2D36               	goto	l2224
  7726  0D36                     l2224:	
  7727  0D36  0008               	return
  7728  0D37                     __end_of_setControl_Lights_Table:	
  7729                           
  7730                           	psect	text29
  7731  11BE                     __ptext29:	
  7732 ;; *************** function _setRFSW_Control *****************
  7733 ;; Defined at:
  7734 ;;		line 378 in file "../src/RF_Control_B1.c"
  7735 ;; Parameters:    Size  Location     Type
  7736 ;;  sw              1    wreg     unsigned char 
  7737 ;; Auto vars:     Size  Location     Type
  7738 ;;  sw              1   79[BANK0 ] unsigned char 
  7739 ;;  status          1   78[BANK0 ] unsigned char 
  7740 ;; Return value:  Size  Location     Type
  7741 ;;		None               void
  7742 ;; Registers used:
  7743 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7744 ;; Tracked objects:
  7745 ;;		On entry : 0/0
  7746 ;;		On exit  : 0/0
  7747 ;;		Unchanged: 0/0
  7748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7750 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7751 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7752 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7753 ;;Total ram usage:        3 bytes
  7754 ;; Hardware stack levels used:    1
  7755 ;; Hardware stack levels required when called:    8
  7756 ;; This function calls:
  7757 ;;		_getDimmerLights_Status
  7758 ;;		_setBuz
  7759 ;;		_setDelayOff_GO
  7760 ;;		_setDimmerLights_SwOff
  7761 ;;		_setDimmerLights_SwOn
  7762 ;;		_setRF_DimmerLights
  7763 ;;		_setTxData
  7764 ;; This function is called by:
  7765 ;;		_setControl_Lights_Table
  7766 ;; This function uses a non-reentrant model
  7767 ;;
  7768                           
  7769                           
  7770                           ;psect for function _setRFSW_Control
  7771  11BE                     _setRFSW_Control:	
  7772                           
  7773                           ;incstack = 0
  7774                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7775                           ;setRFSW_Control@sw stored from wreg
  7776  11BE  0020               	movlb	0	; select bank0
  7777  11BF  00EF               	movwf	setRFSW_Control@sw
  7778                           
  7779                           ;RF_Control_B1.c: 379: char status = 0;
  7780  11C0  01EE               	clrf	setRFSW_Control@status
  7781                           
  7782                           ;RF_Control_B1.c: 381: if (RF_Data[16] == 0x80) {
  7783  11C1  0023               	movlb	3	; select bank3
  7784  11C2  0830               	movf	(_RF_Data^(0+384)+16),w
  7785  11C3  3A80               	xorlw	128
  7786  11C4  1D03               	skipz
  7787  11C5  29F1               	goto	l7002
  7788                           
  7789                           ;RF_Control_B1.c: 382: setDelayOff_GO(sw, 1, RF_Data[17]);
  7790  11C6  0020               	movlb	0	; select bank0
  7791  11C7  01E5               	clrf	setDelayOff_GO@command
  7792  11C8  0AE5               	incf	setDelayOff_GO@command,f
  7793  11C9  0023               	movlb	3	; select bank3
  7794  11CA  0831               	movf	(_RF_Data^(0+384)+17),w
  7795  11CB  0020               	movlb	0	; select bank0
  7796  11CC  00ED               	movwf	??_setRFSW_Control
  7797  11CD  086D               	movf	??_setRFSW_Control,w
  7798  11CE  00E6               	movwf	setDelayOff_GO@value
  7799  11CF  086F               	movf	setRFSW_Control@sw,w
  7800  11D0  318C  241C  3191   	fcall	_setDelayOff_GO
  7801                           
  7802                           ;RF_Control_B1.c: 383: if (getDimmerLights_Status(sw) == 1) {
  7803  11D3  0020               	movlb	0	; select bank0
  7804  11D4  086F               	movf	setRFSW_Control@sw,w
  7805  11D5  319A  2209  3191   	fcall	_getDimmerLights_Status
  7806  11D8  3A01               	xorlw	1
  7807  11D9  1D03               	skipz
  7808  11DA  29F1               	goto	l7002
  7809                           
  7810                           ;RF_Control_B1.c: 384: setBuz(1, 100);
  7811  11DB  3064               	movlw	100
  7812  11DC  0020               	movlb	0	; select bank0
  7813  11DD  00A9               	movwf	setBuz@time
  7814  11DE  3000               	movlw	0
  7815  11DF  00AA               	movwf	setBuz@time+1
  7816  11E0  3001               	movlw	1
  7817  11E1  3194  240B  3191   	fcall	_setBuz
  7818                           
  7819                           ;RF_Control_B1.c: 385: setRF_DimmerLights(sw, 1);
  7820  11E4  0020               	movlb	0	; select bank0
  7821  11E5  01E5               	clrf	setRF_DimmerLights@on
  7822  11E6  0AE5               	incf	setRF_DimmerLights@on,f
  7823  11E7  086F               	movf	setRFSW_Control@sw,w
  7824  11E8  3195  25EA  3191   	fcall	_setRF_DimmerLights
  7825                           
  7826                           ;RF_Control_B1.c: 386: setTxData();
  7827  11EB  318F  2745  3191   	fcall	_setTxData
  7828                           
  7829                           ;RF_Control_B1.c: 387: status = 1;
  7830  11EE  0020               	movlb	0	; select bank0
  7831  11EF  01EE               	clrf	setRFSW_Control@status
  7832  11F0  0AEE               	incf	setRFSW_Control@status,f
  7833  11F1                     l7002:	
  7834                           
  7835                           ;RF_Control_B1.c: 388: }
  7836                           ;RF_Control_B1.c: 389: }
  7837                           ;RF_Control_B1.c: 391: if (status == 0) {
  7838  11F1  0020               	movlb	0	; select bank0
  7839  11F2  08EE               	movf	setRFSW_Control@status,f
  7840  11F3  1D03               	skipz
  7841  11F4  0008               	return
  7842                           
  7843                           ;RF_Control_B1.c: 393: setDimmerLights_SwOn(sw);
  7844  11F5  086F               	movf	setRFSW_Control@sw,w
  7845  11F6  3188  2000  3191   	fcall	_setDimmerLights_SwOn
  7846                           
  7847                           ;RF_Control_B1.c: 394: setDimmerLights_SwOff(sw);
  7848  11F9  0020               	movlb	0	; select bank0
  7849  11FA  086F               	movf	setRFSW_Control@sw,w
  7850  11FB  3187  27C6         	fcall	_setDimmerLights_SwOff
  7851  11FD  0008               	return
  7852  11FE                     __end_of_setRFSW_Control:	
  7853                           
  7854                           	psect	text30
  7855  0A8F                     __ptext30:	
  7856 ;; *************** function _setRFSW_AdjControl *****************
  7857 ;; Defined at:
  7858 ;;		line 400 in file "../src/RF_Control_B1.c"
  7859 ;; Parameters:    Size  Location     Type
  7860 ;;  sw              1    wreg     unsigned char 
  7861 ;; Auto vars:     Size  Location     Type
  7862 ;;  sw              1   72[BANK0 ] unsigned char 
  7863 ;;  status          1   71[BANK0 ] unsigned char 
  7864 ;; Return value:  Size  Location     Type
  7865 ;;		None               void
  7866 ;; Registers used:
  7867 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7868 ;; Tracked objects:
  7869 ;;		On entry : 0/0
  7870 ;;		On exit  : 0/0
  7871 ;;		Unchanged: 0/0
  7872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7874 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7875 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7876 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7877 ;;Total ram usage:        4 bytes
  7878 ;; Hardware stack levels used:    1
  7879 ;; Hardware stack levels required when called:    8
  7880 ;; This function calls:
  7881 ;;		_getDimmerLights_PercentToValue
  7882 ;;		_getDimmerLights_Status
  7883 ;;		_setDimmerIntr_Dimming_RF
  7884 ;;		_setDimmerIntr_MaxmumValue
  7885 ;;		_setDimmerLights_DimmingRun
  7886 ;;		_setDimmerLights_SwOff
  7887 ;;		_setDimmerLights_SwOn
  7888 ;;		_setMemory_Modify
  7889 ;;		_setProductData
  7890 ;;		_setTxData
  7891 ;; This function is called by:
  7892 ;;		_setControl_Lights_Table
  7893 ;; This function uses a non-reentrant model
  7894 ;;
  7895                           
  7896                           
  7897                           ;psect for function _setRFSW_AdjControl
  7898  0A8F                     _setRFSW_AdjControl:	
  7899                           
  7900                           ;incstack = 0
  7901                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7902                           ;setRFSW_AdjControl@sw stored from wreg
  7903  0A8F  0020               	movlb	0	; select bank0
  7904  0A90  00E8               	movwf	setRFSW_AdjControl@sw
  7905                           
  7906                           ;RF_Control_B1.c: 401: char status = 0;
  7907  0A91  01E7               	clrf	setRFSW_AdjControl@status
  7908                           
  7909                           ;RF_Control_B1.c: 403: status = getDimmerLights_Status(sw);
  7910  0A92  0868               	movf	setRFSW_AdjControl@sw,w
  7911  0A93  319A  2209  318A   	fcall	_getDimmerLights_Status
  7912  0A96  0020               	movlb	0	; select bank0
  7913  0A97  00E5               	movwf	??_setRFSW_AdjControl
  7914  0A98  0865               	movf	??_setRFSW_AdjControl,w
  7915  0A99  00E7               	movwf	setRFSW_AdjControl@status
  7916                           
  7917                           ;RF_Control_B1.c: 405: if (RF_Data[9] > 0x64) {
  7918  0A9A  3065               	movlw	101
  7919  0A9B  0023               	movlb	3	; select bank3
  7920  0A9C  0229               	subwf	(_RF_Data^(0+384)+9),w
  7921  0A9D  1C03               	skipc
  7922  0A9E  2AA6               	goto	l7014
  7923                           
  7924                           ;RF_Control_B1.c: 406: RF_Data[9] = 0x64;
  7925  0A9F  3064               	movlw	100
  7926  0AA0  0020               	movlb	0	; select bank0
  7927  0AA1  00E5               	movwf	??_setRFSW_AdjControl
  7928  0AA2  0865               	movf	??_setRFSW_AdjControl,w
  7929  0AA3  0023               	movlb	3	; select bank3
  7930  0AA4  00A9               	movwf	(_RF_Data^(0+384)+9)
  7931                           
  7932                           ;RF_Control_B1.c: 407: } else if (RF_Data[9] < 0x01) {
  7933  0AA5  2AAB               	goto	l7018
  7934  0AA6                     l7014:	
  7935  0AA6  08A9               	movf	(_RF_Data^(0+384)+9),f
  7936  0AA7  1D03               	skipz
  7937  0AA8  2AAB               	goto	l7018
  7938                           
  7939                           ;RF_Control_B1.c: 408: RF_Data[9] = 0x01;
  7940  0AA9  01A9               	clrf	(_RF_Data^(0+384)+9)
  7941  0AAA  0AA9               	incf	(_RF_Data^(0+384)+9),f
  7942  0AAB                     l7018:	
  7943                           
  7944                           ;RF_Control_B1.c: 409: }
  7945                           ;RF_Control_B1.c: 410: setProductData(9, RF_Data[9]);
  7946  0AAB  0829               	movf	(_RF_Data^(0+384)+9),w
  7947  0AAC  0020               	movlb	0	; select bank0
  7948  0AAD  00E5               	movwf	??_setRFSW_AdjControl
  7949  0AAE  0865               	movf	??_setRFSW_AdjControl,w
  7950  0AAF  00E2               	movwf	setProductData@value
  7951  0AB0  3009               	movlw	9
  7952  0AB1  3199  218D  318A   	fcall	_setProductData
  7953                           
  7954                           ;RF_Control_B1.c: 411: setProductData(11, sw);
  7955  0AB4  0020               	movlb	0	; select bank0
  7956  0AB5  0868               	movf	setRFSW_AdjControl@sw,w
  7957  0AB6  00E5               	movwf	??_setRFSW_AdjControl
  7958  0AB7  0865               	movf	??_setRFSW_AdjControl,w
  7959  0AB8  00E2               	movwf	setProductData@value
  7960  0AB9  300B               	movlw	11
  7961  0ABA  3199  218D  318A   	fcall	_setProductData
  7962                           
  7963                           ;RF_Control_B1.c: 412: setProductData(17, product->Data[26 + sw]);
  7964  0ABD  0020               	movlb	0	; select bank0
  7965  0ABE  0868               	movf	setRFSW_AdjControl@sw,w
  7966  0ABF  3E1A               	addlw	26
  7967  0AC0  0021               	movlb	1	; select bank1
  7968  0AC1  076E               	addwf	_product^(0+128),w
  7969  0AC2  0020               	movlb	0	; select bank0
  7970  0AC3  00E5               	movwf	??_setRFSW_AdjControl
  7971  0AC4  0865               	movf	??_setRFSW_AdjControl,w
  7972  0AC5  0086               	movwf	6
  7973  0AC6  3002               	movlw	2	; select bank4/5
  7974  0AC7  0087               	movwf	7
  7975  0AC8  0801               	movf	1,w
  7976  0AC9  00E6               	movwf	??_setRFSW_AdjControl+1
  7977  0ACA  0866               	movf	??_setRFSW_AdjControl+1,w
  7978  0ACB  00E2               	movwf	setProductData@value
  7979  0ACC  3011               	movlw	17
  7980  0ACD  3199  218D  318A   	fcall	_setProductData
  7981                           
  7982                           ;RF_Control_B1.c: 413: setProductData((20 + sw), RF_Data[9]);
  7983  0AD0  0023               	movlb	3	; select bank3
  7984  0AD1  0829               	movf	(_RF_Data^(0+384)+9),w
  7985  0AD2  0020               	movlb	0	; select bank0
  7986  0AD3  00E5               	movwf	??_setRFSW_AdjControl
  7987  0AD4  0865               	movf	??_setRFSW_AdjControl,w
  7988  0AD5  00E2               	movwf	setProductData@value
  7989  0AD6  0868               	movf	setRFSW_AdjControl@sw,w
  7990  0AD7  3E14               	addlw	20
  7991  0AD8  3199  218D  318A   	fcall	_setProductData
  7992                           
  7993                           ;RF_Control_B1.c: 421: setMemory_Modify(1);
  7994  0ADB  3001               	movlw	1
  7995  0ADC  319A  22CA  318A   	fcall	_setMemory_Modify
  7996                           
  7997                           ;RF_Control_B1.c: 425: if (status == 1) {
  7998  0ADF  0020               	movlb	0	; select bank0
  7999  0AE0  0867               	movf	setRFSW_AdjControl@status,w
  8000  0AE1  3A01               	xorlw	1
  8001  0AE2  1D03               	skipz
  8002  0AE3  2AFB               	goto	l7028
  8003                           
  8004                           ;RF_Control_B1.c: 426: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(RF_D
      +                          ata[9]));
  8005  0AE4  0023               	movlb	3	; select bank3
  8006  0AE5  0829               	movf	(_RF_Data^(0+384)+9),w
  8007  0AE6  3195  2520  318A   	fcall	_getDimmerLights_PercentToValue
  8008  0AE9  0020               	movlb	0	; select bank0
  8009  0AEA  00E5               	movwf	??_setRFSW_AdjControl
  8010  0AEB  0865               	movf	??_setRFSW_AdjControl,w
  8011  0AEC  00E2               	movwf	setDimmerIntr_MaxmumValue@value
  8012  0AED  0868               	movf	setRFSW_AdjControl@sw,w
  8013  0AEE  319B  23E9  318A   	fcall	_setDimmerIntr_MaxmumValue
  8014                           
  8015                           ;RF_Control_B1.c: 427: setDimmerIntr_Dimming_RF(sw, 1);
  8016  0AF1  0020               	movlb	0	; select bank0
  8017  0AF2  01A0               	clrf	setDimmerIntr_Dimming_RF@command
  8018  0AF3  0AA0               	incf	setDimmerIntr_Dimming_RF@command,f
  8019  0AF4  0868               	movf	setRFSW_AdjControl@sw,w
  8020  0AF5  319F  2771  318A   	fcall	_setDimmerIntr_Dimming_RF
  8021                           
  8022                           ;RF_Control_B1.c: 428: setTxData();
  8023  0AF8  318F  2745         	fcall	_setTxData
  8024                           
  8025                           ;RF_Control_B1.c: 430: } else if (status == 0) {
  8026  0AFA  0008               	return
  8027  0AFB                     l7028:	
  8028  0AFB  0020               	movlb	0	; select bank0
  8029  0AFC  08E7               	movf	setRFSW_AdjControl@status,f
  8030  0AFD  1D03               	skipz
  8031  0AFE  0008               	return
  8032                           
  8033                           ;RF_Control_B1.c: 434: setDimmerLights_DimmingRun(sw, 1);
  8034  0AFF  01A2               	clrf	setDimmerLights_DimmingRun@command
  8035  0B00  0AA2               	incf	setDimmerLights_DimmingRun@command,f
  8036  0B01  0868               	movf	setRFSW_AdjControl@sw,w
  8037  0B02  319C  24AF  318A   	fcall	_setDimmerLights_DimmingRun
  8038                           
  8039                           ;RF_Control_B1.c: 435: setDimmerLights_SwOn(sw);
  8040  0B05  0020               	movlb	0	; select bank0
  8041  0B06  0868               	movf	setRFSW_AdjControl@sw,w
  8042  0B07  3188  2000  318A   	fcall	_setDimmerLights_SwOn
  8043                           
  8044                           ;RF_Control_B1.c: 436: setDimmerLights_SwOff(sw);
  8045  0B0A  0020               	movlb	0	; select bank0
  8046  0B0B  0868               	movf	setRFSW_AdjControl@sw,w
  8047  0B0C  3187  27C6         	fcall	_setDimmerLights_SwOff
  8048  0B0E  0008               	return
  8049  0B0F                     __end_of_setRFSW_AdjControl:	
  8050                           
  8051                           	psect	text31
  8052  1CAF                     __ptext31:	
  8053 ;; *************** function _setDimmerLights_DimmingRun *****************
  8054 ;; Defined at:
  8055 ;;		line 1079 in file "../src/Dimmer_B1.c"
  8056 ;; Parameters:    Size  Location     Type
  8057 ;;  lights          1    wreg     unsigned char 
  8058 ;;  command         1    2[BANK0 ] unsigned char 
  8059 ;; Auto vars:     Size  Location     Type
  8060 ;;  lights          1    4[BANK0 ] unsigned char 
  8061 ;; Return value:  Size  Location     Type
  8062 ;;		None               void
  8063 ;; Registers used:
  8064 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8065 ;; Tracked objects:
  8066 ;;		On entry : 0/0
  8067 ;;		On exit  : 0/0
  8068 ;;		Unchanged: 0/0
  8069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8070 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8071 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8072 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8073 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8074 ;;Total ram usage:        3 bytes
  8075 ;; Hardware stack levels used:    1
  8076 ;; Hardware stack levels required when called:    6
  8077 ;; This function calls:
  8078 ;;		_DimmerLights_SelectPointer
  8079 ;; This function is called by:
  8080 ;;		_setRFSW_AdjControl
  8081 ;; This function uses a non-reentrant model
  8082 ;;
  8083                           
  8084                           
  8085                           ;psect for function _setDimmerLights_DimmingRun
  8086  1CAF                     _setDimmerLights_DimmingRun:	
  8087                           
  8088                           ;incstack = 0
  8089                           ; Regs used in _setDimmerLights_DimmingRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  8090                           ;setDimmerLights_DimmingRun@lights stored from wreg
  8091  1CAF  0020               	movlb	0	; select bank0
  8092  1CB0  00A4               	movwf	setDimmerLights_DimmingRun@lights
  8093                           
  8094                           ;Dimmer_B1.c: 1080: DimmerLights_SelectPointer(lights);
  8095  1CB1  0824               	movf	setDimmerLights_DimmingRun@lights,w
  8096  1CB2  319B  23D2         	fcall	_DimmerLights_SelectPointer
  8097                           
  8098                           ;Dimmer_B1.c: 1081: DimmerLights->DimmingRun = command == 1 ? 1 : 0;
  8099  1CB4  0020               	movlb	0	; select bank0
  8100  1CB5  0822               	movf	setDimmerLights_DimmingRun@command,w
  8101  1CB6  3A01               	xorlw	1
  8102  1CB7  3000               	movlw	0
  8103  1CB8  1903               	skipnz
  8104  1CB9  3001               	movlw	1
  8105  1CBA  00A3               	movwf	??_setDimmerLights_DimmingRun
  8106  1CBB  0021               	movlb	1	; select bank1
  8107  1CBC  0A56               	incf	_DimmerLights^(0+128),w
  8108  1CBD  0086               	movwf	6
  8109  1CBE  3001               	movlw	1	; select bank2/3
  8110  1CBF  0087               	movwf	7
  8111  1CC0  0020               	movlb	0	; select bank0
  8112  1CC1  0EA3               	swapf	??_setDimmerLights_DimmingRun,f
  8113  1CC2  0DA3               	rlf	??_setDimmerLights_DimmingRun,f
  8114  1CC3  0DA3               	rlf	??_setDimmerLights_DimmingRun,f
  8115  1CC4  0801               	movf	1,w
  8116  1CC5  0623               	xorwf	??_setDimmerLights_DimmingRun,w
  8117  1CC6  39BF               	andlw	-65
  8118  1CC7  0623               	xorwf	??_setDimmerLights_DimmingRun,w
  8119  1CC8  0081               	movwf	1
  8120  1CC9  0008               	return
  8121  1CCA                     __end_of_setDimmerLights_DimmingRun:	
  8122                           
  8123                           	psect	text32
  8124  1A4D                     __ptext32:	
  8125 ;; *************** function _getRF_KeyStatus *****************
  8126 ;; Defined at:
  8127 ;;		line 166 in file "../src/RF_Control_B1.c"
  8128 ;; Parameters:    Size  Location     Type
  8129 ;;		None
  8130 ;; Auto vars:     Size  Location     Type
  8131 ;;  key             1    1[BANK0 ] unsigned char 
  8132 ;; Return value:  Size  Location     Type
  8133 ;;                  1    wreg      unsigned char 
  8134 ;; Registers used:
  8135 ;;		wreg, status,2
  8136 ;; Tracked objects:
  8137 ;;		On entry : 0/0
  8138 ;;		On exit  : 0/0
  8139 ;;		Unchanged: 0/0
  8140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8142 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8143 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8144 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8145 ;;Total ram usage:        3 bytes
  8146 ;; Hardware stack levels used:    1
  8147 ;; Hardware stack levels required when called:    5
  8148 ;; This function calls:
  8149 ;;		Nothing
  8150 ;; This function is called by:
  8151 ;;		_setRF_Main
  8152 ;; This function uses a non-reentrant model
  8153 ;;
  8154                           
  8155                           
  8156                           ;psect for function _getRF_KeyStatus
  8157  1A4D                     _getRF_KeyStatus:	
  8158                           
  8159                           ;RF_Control_B1.c: 167: char key = 0;
  8160                           
  8161                           ;incstack = 0
  8162                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8163  1A4D  0020               	movlb	0	; select bank0
  8164  1A4E  01A1               	clrf	getRF_KeyStatus@key
  8165                           
  8166                           ;RF_Control_B1.c: 173: key = (RA0 == 1 || RB1 == 1 || RA6 == 1 || RA4 == 1) ? 1 : 0;
  8167  1A4F  01A2               	clrf	_getRF_KeyStatus$5110
  8168  1A50  0AA2               	incf	_getRF_KeyStatus$5110,f
  8169  1A51  1C0C               	btfss	12,0	;volatile
  8170  1A52  188D               	btfsc	13,1	;volatile
  8171  1A53  2A58               	goto	l7696
  8172  1A54  1F0C               	btfss	12,6	;volatile
  8173  1A55  1A0C               	btfsc	12,4	;volatile
  8174  1A56  2A58               	goto	l7696
  8175  1A57  01A2               	clrf	_getRF_KeyStatus$5110
  8176  1A58                     l7696:	
  8177  1A58  0822               	movf	_getRF_KeyStatus$5110,w
  8178  1A59  00A0               	movwf	??_getRF_KeyStatus
  8179  1A5A  0820               	movf	??_getRF_KeyStatus,w
  8180  1A5B  00A1               	movwf	getRF_KeyStatus@key
  8181                           
  8182                           ;RF_Control_B1.c: 179: return key;
  8183  1A5C  0821               	movf	getRF_KeyStatus@key,w
  8184  1A5D  0008               	return
  8185  1A5E                     __end_of_getRF_KeyStatus:	
  8186                           
  8187                           	psect	text33
  8188  1A3C                     __ptext33:	
  8189 ;; *************** function _getBuz_GO *****************
  8190 ;; Defined at:
  8191 ;;		line 82 in file "../src/Buzzer_B1.c"
  8192 ;; Parameters:    Size  Location     Type
  8193 ;;		None
  8194 ;; Auto vars:     Size  Location     Type
  8195 ;;  i               2    4[BANK0 ] int 
  8196 ;; Return value:  Size  Location     Type
  8197 ;;                  2    0[BANK0 ] int 
  8198 ;; Registers used:
  8199 ;;		wreg, status,2, status,0
  8200 ;; Tracked objects:
  8201 ;;		On entry : 0/0
  8202 ;;		On exit  : 0/0
  8203 ;;		Unchanged: 0/0
  8204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8205 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8206 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8207 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8208 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8209 ;;Total ram usage:        6 bytes
  8210 ;; Hardware stack levels used:    1
  8211 ;; Hardware stack levels required when called:    5
  8212 ;; This function calls:
  8213 ;;		Nothing
  8214 ;; This function is called by:
  8215 ;;		_setRF_Main
  8216 ;; This function uses a non-reentrant model
  8217 ;;
  8218                           
  8219                           
  8220                           ;psect for function _getBuz_GO
  8221  1A3C                     _getBuz_GO:	
  8222                           
  8223                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8224                           
  8225                           ;incstack = 0
  8226                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8227  1A3C  0022               	movlb	2	; select bank2
  8228  1A3D  0C20               	rrf	_Buz1^(0+256),w
  8229  1A3E  3901               	andlw	1
  8230  1A3F  0020               	movlb	0	; select bank0
  8231  1A40  00A2               	movwf	??_getBuz_GO
  8232  1A41  01A3               	clrf	??_getBuz_GO+1
  8233  1A42  0822               	movf	??_getBuz_GO,w
  8234  1A43  00A4               	movwf	getBuz_GO@i
  8235  1A44  0823               	movf	??_getBuz_GO+1,w
  8236  1A45  00A5               	movwf	getBuz_GO@i+1
  8237                           
  8238                           ;Buzzer_B1.c: 84: return i;
  8239  1A46  0825               	movf	getBuz_GO@i+1,w
  8240  1A47  01A1               	clrf	?_getBuz_GO+1
  8241  1A48  07A1               	addwf	?_getBuz_GO+1,f
  8242  1A49  0824               	movf	getBuz_GO@i,w
  8243  1A4A  01A0               	clrf	?_getBuz_GO
  8244  1A4B  07A0               	addwf	?_getBuz_GO,f
  8245  1A4C  0008               	return
  8246  1A4D                     __end_of_getBuz_GO:	
  8247                           
  8248                           	psect	text34
  8249  19FA                     __ptext34:	
  8250 ;; *************** function _RF_RxDisable *****************
  8251 ;; Defined at:
  8252 ;;		line 154 in file "../src/RF_Control_B1.c"
  8253 ;; Parameters:    Size  Location     Type
  8254 ;;		None
  8255 ;; Auto vars:     Size  Location     Type
  8256 ;;		None
  8257 ;; Return value:  Size  Location     Type
  8258 ;;		None               void
  8259 ;; Registers used:
  8260 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8261 ;; Tracked objects:
  8262 ;;		On entry : 0/0
  8263 ;;		On exit  : 0/0
  8264 ;;		Unchanged: 0/0
  8265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8267 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8268 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8269 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8270 ;;Total ram usage:        0 bytes
  8271 ;; Hardware stack levels used:    1
  8272 ;; Hardware stack levels required when called:    7
  8273 ;; This function calls:
  8274 ;;		_CC2500_WriteCommand
  8275 ;; This function is called by:
  8276 ;;		_setRF_Main
  8277 ;; This function uses a non-reentrant model
  8278 ;;
  8279                           
  8280                           
  8281                           ;psect for function _RF_RxDisable
  8282  19FA                     _RF_RxDisable:	
  8283                           
  8284                           ;RF_Control_B1.c: 155: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8285                           
  8286                           ;incstack = 0
  8287                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8288  19FA  0021               	movlb	1	; select bank1
  8289  19FB  18A0               	btfsc	_RF1^(0+128),1
  8290  19FC  29FF               	goto	l2178
  8291  19FD  1DA0               	btfss	_RF1^(0+128),3
  8292  19FE  0008               	return
  8293  19FF                     l2178:	
  8294                           
  8295                           ;RF_Control_B1.c: 156: RF1.RxStatus = 0;
  8296  19FF  11A0               	bcf	_RF1^(0+128),3
  8297                           
  8298                           ;RF_Control_B1.c: 157: RF1.ReceiveGO = 0;
  8299  1A00  10A0               	bcf	_RF1^(0+128),1
  8300                           
  8301                           ;RF_Control_B1.c: 158: CC2500_WriteCommand(0x36);
  8302  1A01  3036               	movlw	54
  8303  1A02  319C  247A  3199   	fcall	_CC2500_WriteCommand
  8304                           
  8305                           ;RF_Control_B1.c: 159: CC2500_WriteCommand(0x3A);
  8306  1A05  303A               	movlw	58
  8307  1A06  319C  247A         	fcall	_CC2500_WriteCommand
  8308  1A08  0008               	return
  8309  1A09                     __end_of_RF_RxDisable:	
  8310                           
  8311                           	psect	text35
  8312  1725                     __ptext35:	
  8313 ;; *************** function _CC2500_TxData *****************
  8314 ;; Defined at:
  8315 ;;		line 32 in file "../src/CC2500_B1.c"
  8316 ;; Parameters:    Size  Location     Type
  8317 ;;		None
  8318 ;; Auto vars:     Size  Location     Type
  8319 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8320 ;; Return value:  Size  Location     Type
  8321 ;;		None               void
  8322 ;; Registers used:
  8323 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8324 ;; Tracked objects:
  8325 ;;		On entry : 0/0
  8326 ;;		On exit  : 0/0
  8327 ;;		Unchanged: 0/0
  8328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8330 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8331 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8332 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8333 ;;Total ram usage:        2 bytes
  8334 ;; Hardware stack levels used:    1
  8335 ;; Hardware stack levels required when called:    7
  8336 ;; This function calls:
  8337 ;;		_CC2500_WriteByte
  8338 ;;		_CC2500_WriteCommand
  8339 ;;		_RF_Timeout_Counter
  8340 ;;		_setRF_TimeoutCleared
  8341 ;; This function is called by:
  8342 ;;		_setRF_Main
  8343 ;; This function uses a non-reentrant model
  8344 ;;
  8345                           
  8346                           
  8347                           ;psect for function _CC2500_TxData
  8348  1725                     _CC2500_TxData:	
  8349                           
  8350                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8351                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8352                           
  8353                           ;incstack = 0
  8354                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8355  1725  3036               	movlw	54
  8356  1726  319C  247A  3197   	fcall	_CC2500_WriteCommand
  8357                           
  8358                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8359  1729  303B               	movlw	59
  8360  172A  319C  247A  3197   	fcall	_CC2500_WriteCommand
  8361                           
  8362                           ;CC2500_B1.c: 38: RC4 = 0;
  8363  172D  0020               	movlb	0	; select bank0
  8364  172E  120E               	bcf	14,4	;volatile
  8365                           
  8366                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8367  172F  307F               	movlw	127
  8368  1730  00A4               	movwf	??_CC2500_TxData
  8369  1731  0824               	movf	??_CC2500_TxData,w
  8370  1732  0021               	movlb	1	; select bank1
  8371  1733  00D8               	movwf	_SPI0Buffer^(0+128)
  8372                           
  8373                           ;CC2500_B1.c: 40: while (RC2 == 1 && RF1.Timeout == 0) {
  8374  1734  2F38               	goto	l9402
  8375  1735                     l9400:	
  8376                           
  8377                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8378  1735  319B  2351  3197   	fcall	_RF_Timeout_Counter
  8379  1738                     l9402:	
  8380  1738  0020               	movlb	0	; select bank0
  8381  1739  1D0E               	btfss	14,2	;volatile
  8382  173A  2F3E               	goto	l9406
  8383  173B  0021               	movlb	1	; select bank1
  8384  173C  1F21               	btfss	(_RF1^(0+128)+1),6
  8385  173D  2F35               	goto	l9400
  8386  173E                     l9406:	
  8387                           
  8388                           ;CC2500_B1.c: 42: };
  8389                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8390  173E  3198  20DD  3197   	fcall	_setRF_TimeoutCleared
  8391                           
  8392                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8393  1741  319C  2447  3197   	fcall	_CC2500_WriteByte
  8394                           
  8395                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8396  1744  0021               	movlb	1	; select bank1
  8397  1745  085A               	movf	_Tx_Length^(0+128),w
  8398  1746  0020               	movlb	0	; select bank0
  8399  1747  00A4               	movwf	??_CC2500_TxData
  8400  1748  0824               	movf	??_CC2500_TxData,w
  8401  1749  0021               	movlb	1	; select bank1
  8402  174A  00D8               	movwf	_SPI0Buffer^(0+128)
  8403                           
  8404                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8405  174B  319C  2447  3197   	fcall	_CC2500_WriteByte
  8406                           
  8407                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8408  174E  0020               	movlb	0	; select bank0
  8409  174F  01A5               	clrf	CC2500_TxData@loop_e
  8410  1750                     l9420:	
  8411  1750  0021               	movlb	1	; select bank1
  8412  1751  085A               	movf	_Tx_Length^(0+128),w
  8413  1752  0020               	movlb	0	; select bank0
  8414  1753  0225               	subwf	CC2500_TxData@loop_e,w
  8415  1754  1803               	btfsc	3,0
  8416  1755  2F69               	goto	l259
  8417                           
  8418                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8419  1756  0825               	movf	CC2500_TxData@loop_e,w
  8420  1757  3EA0               	addlw	_RF_Data& (0+255)
  8421  1758  0086               	movwf	6
  8422  1759  3001               	movlw	1	; select bank3/4
  8423  175A  0087               	movwf	7
  8424  175B  0801               	movf	1,w
  8425  175C  00A4               	movwf	??_CC2500_TxData
  8426  175D  0824               	movf	??_CC2500_TxData,w
  8427  175E  0021               	movlb	1	; select bank1
  8428  175F  00D8               	movwf	_SPI0Buffer^(0+128)
  8429                           
  8430                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8431  1760  319C  2447  3197   	fcall	_CC2500_WriteByte
  8432  1763  3001               	movlw	1
  8433  1764  0020               	movlb	0	; select bank0
  8434  1765  00A4               	movwf	??_CC2500_TxData
  8435  1766  0824               	movf	??_CC2500_TxData,w
  8436  1767  07A5               	addwf	CC2500_TxData@loop_e,f
  8437  1768  2F50               	goto	l9420
  8438  1769                     l259:	
  8439                           
  8440                           ;CC2500_B1.c: 51: }
  8441                           ;CC2500_B1.c: 52: RC4 = 1;
  8442  1769  160E               	bsf	14,4	;volatile
  8443                           
  8444                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8445  176A  3035               	movlw	53
  8446  176B  319C  247A  3197   	fcall	_CC2500_WriteCommand
  8447                           
  8448                           ;CC2500_B1.c: 54: while (RB0 == 0 && RF1.Timeout == 0) {
  8449  176E  2F72               	goto	l9426
  8450  176F                     l9424:	
  8451                           
  8452                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8453  176F  319B  2351  3197   	fcall	_RF_Timeout_Counter
  8454  1772                     l9426:	
  8455  1772  0020               	movlb	0	; select bank0
  8456  1773  180D               	btfsc	13,0	;volatile
  8457  1774  2F78               	goto	l9430
  8458  1775  0021               	movlb	1	; select bank1
  8459  1776  1F21               	btfss	(_RF1^(0+128)+1),6
  8460  1777  2F6F               	goto	l9424
  8461  1778                     l9430:	
  8462                           
  8463                           ;CC2500_B1.c: 56: };
  8464                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8465  1778  3198  20DD  3197   	fcall	_setRF_TimeoutCleared
  8466                           
  8467                           ;CC2500_B1.c: 59: while (RB0 == 1 && RF1.Timeout == 0) {
  8468  177B  2F7F               	goto	l9434
  8469  177C                     l9432:	
  8470                           
  8471                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8472  177C  319B  2351  3197   	fcall	_RF_Timeout_Counter
  8473  177F                     l9434:	
  8474  177F  0020               	movlb	0	; select bank0
  8475  1780  1C0D               	btfss	13,0	;volatile
  8476  1781  2F85               	goto	l9438
  8477  1782  0021               	movlb	1	; select bank1
  8478  1783  1F21               	btfss	(_RF1^(0+128)+1),6
  8479  1784  2F7C               	goto	l9432
  8480  1785                     l9438:	
  8481                           
  8482                           ;CC2500_B1.c: 61: };
  8483                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8484  1785  3198  20DD  3197   	fcall	_setRF_TimeoutCleared
  8485                           
  8486                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8487  1788  3036               	movlw	54
  8488  1789  319C  247A  3197   	fcall	_CC2500_WriteCommand
  8489                           
  8490                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8491  178C  303B               	movlw	59
  8492  178D  319C  247A         	fcall	_CC2500_WriteCommand
  8493                           
  8494                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8495  178F  147D               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8496  1790  0008               	return
  8497  1791                     __end_of_CC2500_TxData:	
  8498                           
  8499                           	psect	text36
  8500  16BA                     __ptext36:	
  8501 ;; *************** function _CC2500_RxData *****************
  8502 ;; Defined at:
  8503 ;;		line 73 in file "../src/CC2500_B1.c"
  8504 ;; Parameters:    Size  Location     Type
  8505 ;;		None
  8506 ;; Auto vars:     Size  Location     Type
  8507 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8508 ;; Return value:  Size  Location     Type
  8509 ;;		None               void
  8510 ;; Registers used:
  8511 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8512 ;; Tracked objects:
  8513 ;;		On entry : 0/0
  8514 ;;		On exit  : 0/0
  8515 ;;		Unchanged: 0/0
  8516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8518 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8519 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8520 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8521 ;;Total ram usage:        2 bytes
  8522 ;; Hardware stack levels used:    1
  8523 ;; Hardware stack levels required when called:    7
  8524 ;; This function calls:
  8525 ;;		_CC2500_ReadByte
  8526 ;;		_CC2500_ReadStatus
  8527 ;;		_CC2500_WriteByte
  8528 ;;		_CC2500_WriteCommand
  8529 ;;		_RF_Timeout_Counter
  8530 ;;		_setRF_TimeoutCleared
  8531 ;; This function is called by:
  8532 ;;		_setRF_Main
  8533 ;; This function uses a non-reentrant model
  8534 ;;
  8535                           
  8536                           
  8537                           ;psect for function _CC2500_RxData
  8538  16BA                     _CC2500_RxData:	
  8539                           
  8540                           ;CC2500_B1.c: 74: unsigned char loop_f;
  8541                           ;CC2500_B1.c: 78: if (RB0 == 0) {
  8542                           
  8543                           ;incstack = 0
  8544                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8545  16BA  0020               	movlb	0	; select bank0
  8546  16BB  180D               	btfsc	13,0	;volatile
  8547  16BC  0008               	return
  8548                           
  8549                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  8550  16BD  303B               	movlw	59
  8551  16BE  319E  26A5  3196   	fcall	_CC2500_ReadStatus
  8552                           
  8553                           ;CC2500_B1.c: 89: if (s_data != 0) {
  8554  16C1  0021               	movlb	1	; select bank1
  8555  16C2  085B               	movf	_s_data^(0+128),w
  8556  16C3  1903               	btfsc	3,2
  8557  16C4  0008               	return
  8558                           
  8559                           ;CC2500_B1.c: 90: RC4 = 0;
  8560  16C5  0020               	movlb	0	; select bank0
  8561  16C6  120E               	bcf	14,4	;volatile
  8562                           
  8563                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  8564  16C7  30FF               	movlw	255
  8565  16C8  00A4               	movwf	??_CC2500_RxData
  8566  16C9  0824               	movf	??_CC2500_RxData,w
  8567  16CA  0021               	movlb	1	; select bank1
  8568  16CB  00D8               	movwf	_SPI0Buffer^(0+128)
  8569                           
  8570                           ;CC2500_B1.c: 93: while (RC2 == 1 && RF1.Timeout == 0) {
  8571  16CC  2ED0               	goto	l9458
  8572  16CD                     l9456:	
  8573                           
  8574                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  8575  16CD  319B  2351  3196   	fcall	_RF_Timeout_Counter
  8576  16D0                     l9458:	
  8577  16D0  0020               	movlb	0	; select bank0
  8578  16D1  1D0E               	btfss	14,2	;volatile
  8579  16D2  2ED6               	goto	l9462
  8580  16D3  0021               	movlb	1	; select bank1
  8581  16D4  1F21               	btfss	(_RF1^(0+128)+1),6
  8582  16D5  2ECD               	goto	l9456
  8583  16D6                     l9462:	
  8584                           
  8585                           ;CC2500_B1.c: 95: };
  8586                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  8587  16D6  3198  20DD  3196   	fcall	_setRF_TimeoutCleared
  8588                           
  8589                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  8590  16D9  319C  2447  3196   	fcall	_CC2500_WriteByte
  8591                           
  8592                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  8593  16DC  319D  2503  3196   	fcall	_CC2500_ReadByte
  8594                           
  8595                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  8596  16DF  0021               	movlb	1	; select bank1
  8597  16E0  0858               	movf	_SPI0Buffer^(0+128),w
  8598  16E1  0020               	movlb	0	; select bank0
  8599  16E2  00A4               	movwf	??_CC2500_RxData
  8600  16E3  0824               	movf	??_CC2500_RxData,w
  8601  16E4  0022               	movlb	2	; select bank2
  8602  16E5  00BB               	movwf	_Rx_Length^(0+256)
  8603                           
  8604                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8605  16E6  0020               	movlb	0	; select bank0
  8606  16E7  01A5               	clrf	CC2500_RxData@loop_f
  8607  16E8                     l9478:	
  8608  16E8  0022               	movlb	2	; select bank2
  8609  16E9  083B               	movf	_Rx_Length^(0+256),w
  8610  16EA  0020               	movlb	0	; select bank0
  8611  16EB  0225               	subwf	CC2500_RxData@loop_f,w
  8612  16EC  1803               	btfsc	3,0
  8613  16ED  2F01               	goto	l9480
  8614                           
  8615                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8616  16EE  319D  2503  3196   	fcall	_CC2500_ReadByte
  8617                           
  8618                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  8619  16F1  0021               	movlb	1	; select bank1
  8620  16F2  0858               	movf	_SPI0Buffer^(0+128),w
  8621  16F3  0020               	movlb	0	; select bank0
  8622  16F4  00A4               	movwf	??_CC2500_RxData
  8623  16F5  0825               	movf	CC2500_RxData@loop_f,w
  8624  16F6  3EA0               	addlw	_RF_Data& (0+255)
  8625  16F7  0086               	movwf	6
  8626  16F8  3001               	movlw	1	; select bank3/4
  8627  16F9  0087               	movwf	7
  8628  16FA  0824               	movf	??_CC2500_RxData,w
  8629  16FB  0081               	movwf	1
  8630  16FC  3001               	movlw	1
  8631  16FD  00A4               	movwf	??_CC2500_RxData
  8632  16FE  0824               	movf	??_CC2500_RxData,w
  8633  16FF  07A5               	addwf	CC2500_RxData@loop_f,f
  8634  1700  2EE8               	goto	l9478
  8635  1701                     l9480:	
  8636                           
  8637                           ;CC2500_B1.c: 104: }
  8638                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  8639  1701  319D  2503  3196   	fcall	_CC2500_ReadByte
  8640                           
  8641                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  8642  1704  0021               	movlb	1	; select bank1
  8643  1705  0858               	movf	_SPI0Buffer^(0+128),w
  8644  1706  0020               	movlb	0	; select bank0
  8645  1707  00A4               	movwf	??_CC2500_RxData
  8646  1708  0824               	movf	??_CC2500_RxData,w
  8647  1709  0022               	movlb	2	; select bank2
  8648  170A  00BA               	movwf	_RSSI^(0+256)
  8649                           
  8650                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  8651  170B  319D  2503  3196   	fcall	_CC2500_ReadByte
  8652                           
  8653                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  8654  170E  0021               	movlb	1	; select bank1
  8655  170F  0858               	movf	_SPI0Buffer^(0+128),w
  8656  1710  0020               	movlb	0	; select bank0
  8657  1711  00A4               	movwf	??_CC2500_RxData
  8658  1712  0824               	movf	??_CC2500_RxData,w
  8659  1713  0021               	movlb	1	; select bank1
  8660  1714  00D3               	movwf	_CRC^(0+128)
  8661                           
  8662                           ;CC2500_B1.c: 109: RC4 = 1;
  8663  1715  0020               	movlb	0	; select bank0
  8664  1716  160E               	bsf	14,4	;volatile
  8665                           
  8666                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  8667  1717  0021               	movlb	1	; select bank1
  8668  1718  1BD3               	btfsc	_CRC^(0+128),7
  8669                           
  8670                           ;CC2500_B1.c: 111: Receive_OK = 1;
  8671  1719  146F               	bsf	(_Receive_OK/(0+8))^(0+128),_Receive_OK& (0+7)
  8672                           
  8673                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  8674  171A  11A0               	bcf	_RF1^(0+128),3
  8675                           
  8676                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  8677  171B  14A0               	bsf	_RF1^(0+128),1
  8678                           
  8679                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  8680  171C  3036               	movlw	54
  8681  171D  319C  247A  3196   	fcall	_CC2500_WriteCommand
  8682                           
  8683                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  8684  1720  303A               	movlw	58
  8685  1721  319C  247A         	fcall	_CC2500_WriteCommand
  8686  1723  0021               	movlb	1	; select bank1
  8687  1724  0008               	return
  8688  1725                     __end_of_CC2500_RxData:	
  8689                           
  8690                           	psect	text37
  8691  1EA5                     __ptext37:	
  8692 ;; *************** function _CC2500_ReadStatus *****************
  8693 ;; Defined at:
  8694 ;;		line 308 in file "../src/CC2500_B1.c"
  8695 ;; Parameters:    Size  Location     Type
  8696 ;;  status_addr     1    wreg     unsigned char 
  8697 ;; Auto vars:     Size  Location     Type
  8698 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8699 ;; Return value:  Size  Location     Type
  8700 ;;		None               void
  8701 ;; Registers used:
  8702 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8703 ;; Tracked objects:
  8704 ;;		On entry : 0/0
  8705 ;;		On exit  : 0/0
  8706 ;;		Unchanged: 0/0
  8707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8709 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8710 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8711 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8712 ;;Total ram usage:        2 bytes
  8713 ;; Hardware stack levels used:    1
  8714 ;; Hardware stack levels required when called:    6
  8715 ;; This function calls:
  8716 ;;		_CC2500_ReadByte
  8717 ;;		_CC2500_WriteByte
  8718 ;;		_RF_Timeout_Counter
  8719 ;;		_setRF_TimeoutCleared
  8720 ;; This function is called by:
  8721 ;;		_CC2500_RxData
  8722 ;; This function uses a non-reentrant model
  8723 ;;
  8724                           
  8725                           
  8726                           ;psect for function _CC2500_ReadStatus
  8727  1EA5                     _CC2500_ReadStatus:	
  8728                           
  8729                           ;incstack = 0
  8730                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8731                           ;CC2500_ReadStatus@status_addr stored from wreg
  8732  1EA5  0020               	movlb	0	; select bank0
  8733  1EA6  00A3               	movwf	CC2500_ReadStatus@status_addr
  8734                           
  8735                           ;CC2500_B1.c: 309: RC4 = 0;
  8736  1EA7  120E               	bcf	14,4	;volatile
  8737                           
  8738                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  8739  1EA8  0823               	movf	CC2500_ReadStatus@status_addr,w
  8740  1EA9  3EC0               	addlw	192
  8741  1EAA  00A2               	movwf	??_CC2500_ReadStatus
  8742  1EAB  0822               	movf	??_CC2500_ReadStatus,w
  8743  1EAC  0021               	movlb	1	; select bank1
  8744  1EAD  00D8               	movwf	_SPI0Buffer^(0+128)
  8745                           
  8746                           ;CC2500_B1.c: 312: while (RC2 == 1 && RF1.Timeout == 0) {
  8747  1EAE  2EB2               	goto	l9308
  8748  1EAF                     l9306:	
  8749                           
  8750                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  8751  1EAF  319B  2351  319E   	fcall	_RF_Timeout_Counter
  8752  1EB2                     l9308:	
  8753  1EB2  0020               	movlb	0	; select bank0
  8754  1EB3  1D0E               	btfss	14,2	;volatile
  8755  1EB4  2EB8               	goto	l9312
  8756  1EB5  0021               	movlb	1	; select bank1
  8757  1EB6  1F21               	btfss	(_RF1^(0+128)+1),6
  8758  1EB7  2EAF               	goto	l9306
  8759  1EB8                     l9312:	
  8760                           
  8761                           ;CC2500_B1.c: 314: };
  8762                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  8763  1EB8  3198  20DD  319E   	fcall	_setRF_TimeoutCleared
  8764                           
  8765                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  8766  1EBB  319C  2447  319E   	fcall	_CC2500_WriteByte
  8767                           
  8768                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  8769  1EBE  319D  2503         	fcall	_CC2500_ReadByte
  8770                           
  8771                           ;CC2500_B1.c: 319: RC4 = 1;
  8772  1EC0  0020               	movlb	0	; select bank0
  8773  1EC1  160E               	bsf	14,4	;volatile
  8774                           
  8775                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  8776  1EC2  0021               	movlb	1	; select bank1
  8777  1EC3  0858               	movf	_SPI0Buffer^(0+128),w
  8778  1EC4  0020               	movlb	0	; select bank0
  8779  1EC5  00A2               	movwf	??_CC2500_ReadStatus
  8780  1EC6  0822               	movf	??_CC2500_ReadStatus,w
  8781  1EC7  0021               	movlb	1	; select bank1
  8782  1EC8  00DB               	movwf	_s_data^(0+128)
  8783  1EC9  0008               	return
  8784  1ECA                     __end_of_CC2500_ReadStatus:	
  8785                           
  8786                           	psect	text38
  8787  1D03                     __ptext38:	
  8788 ;; *************** function _CC2500_ReadByte *****************
  8789 ;; Defined at:
  8790 ;;		line 242 in file "../src/CC2500_B1.c"
  8791 ;; Parameters:    Size  Location     Type
  8792 ;;		None
  8793 ;; Auto vars:     Size  Location     Type
  8794 ;;  loop_b          1    1[BANK0 ] unsigned char 
  8795 ;; Return value:  Size  Location     Type
  8796 ;;		None               void
  8797 ;; Registers used:
  8798 ;;		wreg, status,2, status,0
  8799 ;; Tracked objects:
  8800 ;;		On entry : 0/0
  8801 ;;		On exit  : 0/0
  8802 ;;		Unchanged: 0/0
  8803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8805 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8806 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8807 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8808 ;;Total ram usage:        2 bytes
  8809 ;; Hardware stack levels used:    1
  8810 ;; Hardware stack levels required when called:    5
  8811 ;; This function calls:
  8812 ;;		Nothing
  8813 ;; This function is called by:
  8814 ;;		_CC2500_RxData
  8815 ;;		_CC2500_ReadStatus
  8816 ;;		_CC2500_ReadREG
  8817 ;; This function uses a non-reentrant model
  8818 ;;
  8819                           
  8820                           
  8821                           ;psect for function _CC2500_ReadByte
  8822  1D03                     _CC2500_ReadByte:	
  8823                           
  8824                           ;CC2500_B1.c: 243: unsigned char loop_b;
  8825                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  8826                           
  8827                           ;incstack = 0
  8828                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8829  1D03  0020               	movlb	0	; select bank0
  8830  1D04  01A1               	clrf	CC2500_ReadByte@loop_b
  8831  1D05                     L3:	
  8832  1D05  3008               	movlw	8
  8833  1D06  0221               	subwf	CC2500_ReadByte@loop_b,w
  8834  1D07  1803               	btfsc	3,0
  8835  1D08  0008               	return
  8836                           
  8837                           ;CC2500_B1.c: 245: RC1 = 1;
  8838  1D09  148E               	bsf	14,1	;volatile
  8839                           
  8840                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  8841  1D0A  1003               	clrc
  8842  1D0B  0021               	movlb	1	; select bank1
  8843  1D0C  0DD8               	rlf	_SPI0Buffer^(0+128),f
  8844                           
  8845                           ;CC2500_B1.c: 247: if (RC2 == 1)
  8846  1D0D  0020               	movlb	0	; select bank0
  8847  1D0E  1D0E               	btfss	14,2	;volatile
  8848  1D0F  2D13               	goto	l9278
  8849                           
  8850                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  8851  1D10  0021               	movlb	1	; select bank1
  8852  1D11  1458               	bsf	_SPI0Buffer^(0+128),0
  8853  1D12  2D19               	goto	l9280
  8854  1D13                     l9278:	
  8855                           
  8856                           ;CC2500_B1.c: 249: else
  8857                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  8858  1D13  30FE               	movlw	254
  8859  1D14  0020               	movlb	0	; select bank0
  8860  1D15  00A0               	movwf	??_CC2500_ReadByte
  8861  1D16  0820               	movf	??_CC2500_ReadByte,w
  8862  1D17  0021               	movlb	1	; select bank1
  8863  1D18  05D8               	andwf	_SPI0Buffer^(0+128),f
  8864  1D19                     l9280:	
  8865                           
  8866                           ;CC2500_B1.c: 251: RC1 = 0;
  8867  1D19  0020               	movlb	0	; select bank0
  8868  1D1A  108E               	bcf	14,1	;volatile
  8869  1D1B  3001               	movlw	1
  8870  1D1C  00A0               	movwf	??_CC2500_ReadByte
  8871  1D1D  0820               	movf	??_CC2500_ReadByte,w
  8872  1D1E  07A1               	addwf	CC2500_ReadByte@loop_b,f
  8873  1D1F  2D05               	goto	L3
  8874  1D20                     __end_of_CC2500_ReadByte:	
  8875                           
  8876                           	psect	text39
  8877  1B66                     __ptext39:	
  8878 ;; *************** function _CC2500_PowerOnInitial *****************
  8879 ;; Defined at:
  8880 ;;		line 126 in file "../src/CC2500_B1.c"
  8881 ;; Parameters:    Size  Location     Type
  8882 ;;		None
  8883 ;; Auto vars:     Size  Location     Type
  8884 ;;		None
  8885 ;; Return value:  Size  Location     Type
  8886 ;;		None               void
  8887 ;; Registers used:
  8888 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8889 ;; Tracked objects:
  8890 ;;		On entry : 0/0
  8891 ;;		On exit  : 0/0
  8892 ;;		Unchanged: 0/0
  8893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8896 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8897 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8898 ;;Total ram usage:        0 bytes
  8899 ;; Hardware stack levels used:    1
  8900 ;; Hardware stack levels required when called:    8
  8901 ;; This function calls:
  8902 ;;		_CC2500_ClearRXFIFO
  8903 ;;		_CC2500_ClearTXFIFO
  8904 ;;		_CC2500_FrequencyCabr
  8905 ;;		_CC2500_InitPATable
  8906 ;;		_CC2500_InitSetREG
  8907 ;;		_CC2500_PowerRST
  8908 ;;		_CC2500_SIDLEMode
  8909 ;; This function is called by:
  8910 ;;		_setRF_Main
  8911 ;;		_main
  8912 ;; This function uses a non-reentrant model
  8913 ;;
  8914                           
  8915                           
  8916                           ;psect for function _CC2500_PowerOnInitial
  8917  1B66                     _CC2500_PowerOnInitial:	
  8918                           
  8919                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  8920                           
  8921                           ;incstack = 0
  8922                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8923  1B66  3192  2280  319B   	fcall	_CC2500_PowerRST
  8924                           
  8925                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  8926  1B69  319F  2718  319B   	fcall	_CC2500_InitSetREG
  8927                           
  8928                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  8929  1B6C  319D  253E  319B   	fcall	_CC2500_InitPATable
  8930                           
  8931                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  8932  1B6F  3198  20E5  319B   	fcall	_CC2500_ClearTXFIFO
  8933                           
  8934                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  8935  1B72  3198  20E1  319B   	fcall	_CC2500_ClearRXFIFO
  8936                           
  8937                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  8938  1B75  3199  21E1  319B   	fcall	_CC2500_FrequencyCabr
  8939                           
  8940                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  8941  1B78  3198  20E9         	fcall	_CC2500_SIDLEMode
  8942  1B7A  0008               	return
  8943  1B7B                     __end_of_CC2500_PowerOnInitial:	
  8944                           
  8945                           	psect	text40
  8946  18E9                     __ptext40:	
  8947 ;; *************** function _CC2500_SIDLEMode *****************
  8948 ;; Defined at:
  8949 ;;		line 216 in file "../src/CC2500_B1.c"
  8950 ;; Parameters:    Size  Location     Type
  8951 ;;		None
  8952 ;; Auto vars:     Size  Location     Type
  8953 ;;		None
  8954 ;; Return value:  Size  Location     Type
  8955 ;;		None               void
  8956 ;; Registers used:
  8957 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8958 ;; Tracked objects:
  8959 ;;		On entry : 0/0
  8960 ;;		On exit  : 0/0
  8961 ;;		Unchanged: 0/0
  8962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8966 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8967 ;;Total ram usage:        0 bytes
  8968 ;; Hardware stack levels used:    1
  8969 ;; Hardware stack levels required when called:    7
  8970 ;; This function calls:
  8971 ;;		_CC2500_WriteCommand
  8972 ;; This function is called by:
  8973 ;;		_CC2500_PowerOnInitial
  8974 ;; This function uses a non-reentrant model
  8975 ;;
  8976                           
  8977                           
  8978                           ;psect for function _CC2500_SIDLEMode
  8979  18E9                     _CC2500_SIDLEMode:	
  8980                           
  8981                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  8982                           
  8983                           ;incstack = 0
  8984                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8985  18E9  3036               	movlw	54
  8986  18EA  319C  247A         	fcall	_CC2500_WriteCommand
  8987  18EC  0008               	return
  8988  18ED                     __end_of_CC2500_SIDLEMode:	
  8989                           
  8990                           	psect	text41
  8991  1280                     __ptext41:	
  8992 ;; *************** function _CC2500_PowerRST *****************
  8993 ;; Defined at:
  8994 ;;		line 139 in file "../src/CC2500_B1.c"
  8995 ;; Parameters:    Size  Location     Type
  8996 ;;		None
  8997 ;; Auto vars:     Size  Location     Type
  8998 ;;		None
  8999 ;; Return value:  Size  Location     Type
  9000 ;;		None               void
  9001 ;; Registers used:
  9002 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9003 ;; Tracked objects:
  9004 ;;		On entry : 0/0
  9005 ;;		On exit  : 0/0
  9006 ;;		Unchanged: 0/0
  9007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9010 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9011 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9012 ;;Total ram usage:        1 bytes
  9013 ;; Hardware stack levels used:    1
  9014 ;; Hardware stack levels required when called:    6
  9015 ;; This function calls:
  9016 ;;		_CC2500_WriteByte
  9017 ;;		_DelayTime_1us
  9018 ;;		_RF_Timeout_Counter
  9019 ;;		_setRF_TimeoutCleared
  9020 ;; This function is called by:
  9021 ;;		_CC2500_PowerOnInitial
  9022 ;; This function uses a non-reentrant model
  9023 ;;
  9024                           
  9025                           
  9026                           ;psect for function _CC2500_PowerRST
  9027  1280                     _CC2500_PowerRST:	
  9028                           
  9029                           ;CC2500_B1.c: 140: RC1 = 0;
  9030                           
  9031                           ;incstack = 0
  9032                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9033  1280  0020               	movlb	0	; select bank0
  9034  1281  108E               	bcf	14,1	;volatile
  9035                           
  9036                           ;CC2500_B1.c: 141: RC0 = 0;
  9037  1282  100E               	bcf	14,0	;volatile
  9038                           
  9039                           ;CC2500_B1.c: 142: RC4 = 1;
  9040  1283  160E               	bsf	14,4	;volatile
  9041                           
  9042                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  9043  1284  300A               	movlw	10
  9044  1285  00A0               	movwf	DelayTime_1us@count
  9045  1286  3000               	movlw	0
  9046  1287  00A1               	movwf	DelayTime_1us@count+1
  9047  1288  319E  26CA  3192   	fcall	_DelayTime_1us
  9048                           
  9049                           ;CC2500_B1.c: 144: RC4 = 0;
  9050  128B  0020               	movlb	0	; select bank0
  9051  128C  120E               	bcf	14,4	;volatile
  9052                           
  9053                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  9054  128D  300A               	movlw	10
  9055  128E  00A0               	movwf	DelayTime_1us@count
  9056  128F  3000               	movlw	0
  9057  1290  00A1               	movwf	DelayTime_1us@count+1
  9058  1291  319E  26CA  3192   	fcall	_DelayTime_1us
  9059                           
  9060                           ;CC2500_B1.c: 146: RC4 = 1;
  9061  1294  0020               	movlb	0	; select bank0
  9062  1295  160E               	bsf	14,4	;volatile
  9063                           
  9064                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  9065  1296  3028               	movlw	40
  9066  1297  00A0               	movwf	DelayTime_1us@count
  9067  1298  3000               	movlw	0
  9068  1299  00A1               	movwf	DelayTime_1us@count+1
  9069  129A  319E  26CA  3192   	fcall	_DelayTime_1us
  9070                           
  9071                           ;CC2500_B1.c: 148: RC4 = 0;
  9072  129D  0020               	movlb	0	; select bank0
  9073  129E  120E               	bcf	14,4	;volatile
  9074                           
  9075                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  9076  129F  3030               	movlw	48
  9077  12A0  00A6               	movwf	??_CC2500_PowerRST
  9078  12A1  0826               	movf	??_CC2500_PowerRST,w
  9079  12A2  0021               	movlb	1	; select bank1
  9080  12A3  00D8               	movwf	_SPI0Buffer^(0+128)
  9081                           
  9082                           ;CC2500_B1.c: 150: while (RC2 == 1 && RF1.Timeout == 0) {
  9083  12A4  2AA8               	goto	l9336
  9084  12A5                     l9334:	
  9085                           
  9086                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  9087  12A5  319B  2351  3192   	fcall	_RF_Timeout_Counter
  9088  12A8                     l9336:	
  9089  12A8  0020               	movlb	0	; select bank0
  9090  12A9  1D0E               	btfss	14,2	;volatile
  9091  12AA  2AAE               	goto	l9340
  9092  12AB  0021               	movlb	1	; select bank1
  9093  12AC  1F21               	btfss	(_RF1^(0+128)+1),6
  9094  12AD  2AA5               	goto	l9334
  9095  12AE                     l9340:	
  9096                           
  9097                           ;CC2500_B1.c: 152: };
  9098                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  9099  12AE  3198  20DD  3192   	fcall	_setRF_TimeoutCleared
  9100                           
  9101                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  9102  12B1  319C  2447  3192   	fcall	_CC2500_WriteByte
  9103                           
  9104                           ;CC2500_B1.c: 155: while (RC2 == 1 && RF1.Timeout == 0) {
  9105  12B4  2AB8               	goto	l9346
  9106  12B5                     l9344:	
  9107                           
  9108                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  9109  12B5  319B  2351  3192   	fcall	_RF_Timeout_Counter
  9110  12B8                     l9346:	
  9111  12B8  0020               	movlb	0	; select bank0
  9112  12B9  1D0E               	btfss	14,2	;volatile
  9113  12BA  2ABE               	goto	l9350
  9114  12BB  0021               	movlb	1	; select bank1
  9115  12BC  1F21               	btfss	(_RF1^(0+128)+1),6
  9116  12BD  2AB5               	goto	l9344
  9117  12BE                     l9350:	
  9118                           
  9119                           ;CC2500_B1.c: 157: };
  9120                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  9121  12BE  3198  20DD         	fcall	_setRF_TimeoutCleared
  9122                           
  9123                           ;CC2500_B1.c: 159: RC0 = 0;
  9124  12C0  0020               	movlb	0	; select bank0
  9125  12C1  100E               	bcf	14,0	;volatile
  9126                           
  9127                           ;CC2500_B1.c: 160: RC4 = 1;
  9128  12C2  160E               	bsf	14,4	;volatile
  9129  12C3  0008               	return
  9130  12C4                     __end_of_CC2500_PowerRST:	
  9131                           
  9132                           	psect	text42
  9133  1F18                     __ptext42:	
  9134 ;; *************** function _CC2500_InitSetREG *****************
  9135 ;; Defined at:
  9136 ;;		line 166 in file "../src/CC2500_B1.c"
  9137 ;; Parameters:    Size  Location     Type
  9138 ;;		None
  9139 ;; Auto vars:     Size  Location     Type
  9140 ;;  loop_c          1    8[BANK0 ] unsigned char 
  9141 ;;  temp2           1    7[BANK0 ] unsigned char 
  9142 ;;  temp1           1    6[BANK0 ] unsigned char 
  9143 ;; Return value:  Size  Location     Type
  9144 ;;		None               void
  9145 ;; Registers used:
  9146 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9147 ;; Tracked objects:
  9148 ;;		On entry : 0/0
  9149 ;;		On exit  : 0/0
  9150 ;;		Unchanged: 0/0
  9151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9153 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9154 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9155 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9156 ;;Total ram usage:        4 bytes
  9157 ;; Hardware stack levels used:    1
  9158 ;; Hardware stack levels required when called:    7
  9159 ;; This function calls:
  9160 ;;		_CC2500_WriteREG
  9161 ;; This function is called by:
  9162 ;;		_CC2500_PowerOnInitial
  9163 ;; This function uses a non-reentrant model
  9164 ;;
  9165                           
  9166                           
  9167                           ;psect for function _CC2500_InitSetREG
  9168  1F18                     _CC2500_InitSetREG:	
  9169                           
  9170                           ;CC2500_B1.c: 167: unsigned char loop_c;
  9171                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  9172                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  9173                           
  9174                           ;incstack = 0
  9175                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9176  1F18  0020               	movlb	0	; select bank0
  9177  1F19  01A8               	clrf	CC2500_InitSetREG@loop_c
  9178  1F1A                     L4:	
  9179  1F1A  302F               	movlw	47
  9180  1F1B  0228               	subwf	CC2500_InitSetREG@loop_c,w
  9181  1F1C  1803               	btfsc	3,0
  9182  1F1D  0008               	return
  9183                           
  9184                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  9185  1F1E  0828               	movf	CC2500_InitSetREG@loop_c,w
  9186  1F1F  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  9187  1F20  0084               	movwf	4
  9188  1F21  3098               	movlw	high (_CC2500_registers_address| (0+32768))
  9189  1F22  1803               	skipnc
  9190  1F23  3E01               	addlw	1
  9191  1F24  0085               	movwf	5
  9192  1F25  0800               	movf	0,w	;code access
  9193  1F26  00A5               	movwf	??_CC2500_InitSetREG
  9194  1F27  0825               	movf	??_CC2500_InitSetREG,w
  9195  1F28  00A6               	movwf	CC2500_InitSetREG@temp1
  9196                           
  9197                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9198  1F29  0828               	movf	CC2500_InitSetREG@loop_c,w
  9199  1F2A  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9200  1F2B  0084               	movwf	4
  9201  1F2C  3098               	movlw	high (_CC2500_rfSettings| (0+32768))
  9202  1F2D  1803               	skipnc
  9203  1F2E  3E01               	addlw	1
  9204  1F2F  0085               	movwf	5
  9205  1F30  0800               	movf	0,w	;code access
  9206  1F31  00A5               	movwf	??_CC2500_InitSetREG
  9207  1F32  0825               	movf	??_CC2500_InitSetREG,w
  9208  1F33  00A7               	movwf	CC2500_InitSetREG@temp2
  9209                           
  9210                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9211  1F34  0827               	movf	CC2500_InitSetREG@temp2,w
  9212  1F35  00A5               	movwf	??_CC2500_InitSetREG
  9213  1F36  0825               	movf	??_CC2500_InitSetREG,w
  9214  1F37  00A2               	movwf	CC2500_WriteREG@value
  9215  1F38  0826               	movf	CC2500_InitSetREG@temp1,w
  9216  1F39  319E  2682  319F   	fcall	_CC2500_WriteREG
  9217  1F3C  3001               	movlw	1
  9218  1F3D  0020               	movlb	0	; select bank0
  9219  1F3E  00A5               	movwf	??_CC2500_InitSetREG
  9220  1F3F  0825               	movf	??_CC2500_InitSetREG,w
  9221  1F40  07A8               	addwf	CC2500_InitSetREG@loop_c,f
  9222  1F41  2F1A               	goto	L4
  9223  1F42                     __end_of_CC2500_InitSetREG:	
  9224                           
  9225                           	psect	text43
  9226  1D3E                     __ptext43:	
  9227 ;; *************** function _CC2500_InitPATable *****************
  9228 ;; Defined at:
  9229 ;;		line 181 in file "../src/CC2500_B1.c"
  9230 ;; Parameters:    Size  Location     Type
  9231 ;;		None
  9232 ;; Auto vars:     Size  Location     Type
  9233 ;;  loop_d          1    7[BANK0 ] unsigned char 
  9234 ;;  temp            1    6[BANK0 ] unsigned char 
  9235 ;; Return value:  Size  Location     Type
  9236 ;;		None               void
  9237 ;; Registers used:
  9238 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9239 ;; Tracked objects:
  9240 ;;		On entry : 0/0
  9241 ;;		On exit  : 0/0
  9242 ;;		Unchanged: 0/0
  9243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9244 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9245 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9246 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9247 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9248 ;;Total ram usage:        3 bytes
  9249 ;; Hardware stack levels used:    1
  9250 ;; Hardware stack levels required when called:    7
  9251 ;; This function calls:
  9252 ;;		_CC2500_WriteREG
  9253 ;; This function is called by:
  9254 ;;		_CC2500_PowerOnInitial
  9255 ;; This function uses a non-reentrant model
  9256 ;;
  9257                           
  9258                           
  9259                           ;psect for function _CC2500_InitPATable
  9260  1D3E                     _CC2500_InitPATable:	
  9261                           
  9262                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9263                           ;CC2500_B1.c: 183: unsigned char temp;
  9264                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9265                           
  9266                           ;incstack = 0
  9267                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9268  1D3E  0020               	movlb	0	; select bank0
  9269  1D3F  01A7               	clrf	CC2500_InitPATable@loop_d
  9270  1D40                     L5:	
  9271  1D40  3008               	movlw	8
  9272  1D41  0227               	subwf	CC2500_InitPATable@loop_d,w
  9273  1D42  1803               	btfsc	3,0
  9274  1D43  0008               	return
  9275                           
  9276                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9277  1D44  0827               	movf	CC2500_InitPATable@loop_d,w
  9278  1D45  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9279  1D46  0084               	movwf	4
  9280  1D47  3098               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9281  1D48  1803               	skipnc
  9282  1D49  3E01               	addlw	1
  9283  1D4A  0085               	movwf	5
  9284  1D4B  0800               	movf	0,w	;code access
  9285  1D4C  00A5               	movwf	??_CC2500_InitPATable
  9286  1D4D  0825               	movf	??_CC2500_InitPATable,w
  9287  1D4E  00A6               	movwf	CC2500_InitPATable@temp
  9288                           
  9289                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9290  1D4F  0826               	movf	CC2500_InitPATable@temp,w
  9291  1D50  00A5               	movwf	??_CC2500_InitPATable
  9292  1D51  0825               	movf	??_CC2500_InitPATable,w
  9293  1D52  00A2               	movwf	CC2500_WriteREG@value
  9294  1D53  303E               	movlw	62
  9295  1D54  319E  2682  319D   	fcall	_CC2500_WriteREG
  9296  1D57  3001               	movlw	1
  9297  1D58  0020               	movlb	0	; select bank0
  9298  1D59  00A5               	movwf	??_CC2500_InitPATable
  9299  1D5A  0825               	movf	??_CC2500_InitPATable,w
  9300  1D5B  07A7               	addwf	CC2500_InitPATable@loop_d,f
  9301  1D5C  2D40               	goto	L5
  9302  1D5D                     __end_of_CC2500_InitPATable:	
  9303                           
  9304                           	psect	text44
  9305  1E82                     __ptext44:	
  9306 ;; *************** function _CC2500_WriteREG *****************
  9307 ;; Defined at:
  9308 ;;		line 258 in file "../src/CC2500_B1.c"
  9309 ;; Parameters:    Size  Location     Type
  9310 ;;  w_addr          1    wreg     unsigned char 
  9311 ;;  value           1    2[BANK0 ] unsigned char 
  9312 ;; Auto vars:     Size  Location     Type
  9313 ;;  w_addr          1    4[BANK0 ] unsigned char 
  9314 ;; Return value:  Size  Location     Type
  9315 ;;		None               void
  9316 ;; Registers used:
  9317 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9318 ;; Tracked objects:
  9319 ;;		On entry : 0/0
  9320 ;;		On exit  : 0/0
  9321 ;;		Unchanged: 0/0
  9322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9323 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9324 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9325 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9326 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9327 ;;Total ram usage:        3 bytes
  9328 ;; Hardware stack levels used:    1
  9329 ;; Hardware stack levels required when called:    6
  9330 ;; This function calls:
  9331 ;;		_CC2500_WriteByte
  9332 ;;		_RF_Timeout_Counter
  9333 ;;		_setRF_TimeoutCleared
  9334 ;; This function is called by:
  9335 ;;		_CC2500_InitSetREG
  9336 ;;		_CC2500_InitPATable
  9337 ;; This function uses a non-reentrant model
  9338 ;;
  9339                           
  9340                           
  9341                           ;psect for function _CC2500_WriteREG
  9342  1E82                     _CC2500_WriteREG:	
  9343                           
  9344                           ;incstack = 0
  9345                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9346                           ;CC2500_WriteREG@w_addr stored from wreg
  9347  1E82  0020               	movlb	0	; select bank0
  9348  1E83  00A4               	movwf	CC2500_WriteREG@w_addr
  9349                           
  9350                           ;CC2500_B1.c: 259: RC4 = 0;
  9351  1E84  120E               	bcf	14,4	;volatile
  9352                           
  9353                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9354  1E85  0824               	movf	CC2500_WriteREG@w_addr,w
  9355  1E86  00A3               	movwf	??_CC2500_WriteREG
  9356  1E87  0823               	movf	??_CC2500_WriteREG,w
  9357  1E88  0021               	movlb	1	; select bank1
  9358  1E89  00D8               	movwf	_SPI0Buffer^(0+128)
  9359                           
  9360                           ;CC2500_B1.c: 261: while (RC2 == 1 && RF1.Timeout == 0) {
  9361  1E8A  2E8E               	goto	l9290
  9362  1E8B                     l9288:	
  9363                           
  9364                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9365  1E8B  319B  2351  319E   	fcall	_RF_Timeout_Counter
  9366  1E8E                     l9290:	
  9367  1E8E  0020               	movlb	0	; select bank0
  9368  1E8F  1D0E               	btfss	14,2	;volatile
  9369  1E90  2E94               	goto	l9294
  9370  1E91  0021               	movlb	1	; select bank1
  9371  1E92  1F21               	btfss	(_RF1^(0+128)+1),6
  9372  1E93  2E8B               	goto	l9288
  9373  1E94                     l9294:	
  9374                           
  9375                           ;CC2500_B1.c: 263: };
  9376                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9377  1E94  3198  20DD  319E   	fcall	_setRF_TimeoutCleared
  9378                           
  9379                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9380  1E97  319C  2447  319E   	fcall	_CC2500_WriteByte
  9381                           
  9382                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9383  1E9A  0020               	movlb	0	; select bank0
  9384  1E9B  0822               	movf	CC2500_WriteREG@value,w
  9385  1E9C  00A3               	movwf	??_CC2500_WriteREG
  9386  1E9D  0823               	movf	??_CC2500_WriteREG,w
  9387  1E9E  0021               	movlb	1	; select bank1
  9388  1E9F  00D8               	movwf	_SPI0Buffer^(0+128)
  9389                           
  9390                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9391  1EA0  319C  2447         	fcall	_CC2500_WriteByte
  9392                           
  9393                           ;CC2500_B1.c: 269: RC4 = 1;
  9394  1EA2  0020               	movlb	0	; select bank0
  9395  1EA3  160E               	bsf	14,4	;volatile
  9396  1EA4  0008               	return
  9397  1EA5                     __end_of_CC2500_WriteREG:	
  9398                           
  9399                           	psect	text45
  9400  19E1                     __ptext45:	
  9401 ;; *************** function _CC2500_FrequencyCabr *****************
  9402 ;; Defined at:
  9403 ;;		line 208 in file "../src/CC2500_B1.c"
  9404 ;; Parameters:    Size  Location     Type
  9405 ;;		None
  9406 ;; Auto vars:     Size  Location     Type
  9407 ;;		None
  9408 ;; Return value:  Size  Location     Type
  9409 ;;		None               void
  9410 ;; Registers used:
  9411 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9412 ;; Tracked objects:
  9413 ;;		On entry : 0/0
  9414 ;;		On exit  : 0/0
  9415 ;;		Unchanged: 0/0
  9416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9420 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9421 ;;Total ram usage:        0 bytes
  9422 ;; Hardware stack levels used:    1
  9423 ;; Hardware stack levels required when called:    7
  9424 ;; This function calls:
  9425 ;;		_CC2500_WriteCommand
  9426 ;;		_DelayTime_1us
  9427 ;; This function is called by:
  9428 ;;		_CC2500_PowerOnInitial
  9429 ;; This function uses a non-reentrant model
  9430 ;;
  9431                           
  9432                           
  9433                           ;psect for function _CC2500_FrequencyCabr
  9434  19E1                     _CC2500_FrequencyCabr:	
  9435                           
  9436                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9437                           
  9438                           ;incstack = 0
  9439                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9440  19E1  3033               	movlw	51
  9441  19E2  319C  247A  3199   	fcall	_CC2500_WriteCommand
  9442                           
  9443                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9444  19E5  30E8               	movlw	232
  9445  19E6  0020               	movlb	0	; select bank0
  9446  19E7  00A0               	movwf	DelayTime_1us@count
  9447  19E8  3003               	movlw	3
  9448  19E9  00A1               	movwf	DelayTime_1us@count+1
  9449  19EA  319E  26CA         	fcall	_DelayTime_1us
  9450  19EC  0008               	return
  9451  19ED                     __end_of_CC2500_FrequencyCabr:	
  9452                           
  9453                           	psect	text46
  9454  1ECA                     __ptext46:	
  9455 ;; *************** function _DelayTime_1us *****************
  9456 ;; Defined at:
  9457 ;;		line 327 in file "../src/CC2500_B1.c"
  9458 ;; Parameters:    Size  Location     Type
  9459 ;;  count           2    0[BANK0 ] int 
  9460 ;; Auto vars:     Size  Location     Type
  9461 ;;  j               2    4[BANK0 ] unsigned int 
  9462 ;;  i               2    2[BANK0 ] unsigned int 
  9463 ;; Return value:  Size  Location     Type
  9464 ;;		None               void
  9465 ;; Registers used:
  9466 ;;		wreg, status,2
  9467 ;; Tracked objects:
  9468 ;;		On entry : 0/0
  9469 ;;		On exit  : 0/0
  9470 ;;		Unchanged: 0/0
  9471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9472 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9473 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9475 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9476 ;;Total ram usage:        6 bytes
  9477 ;; Hardware stack levels used:    1
  9478 ;; Hardware stack levels required when called:    5
  9479 ;; This function calls:
  9480 ;;		Nothing
  9481 ;; This function is called by:
  9482 ;;		_CC2500_PowerRST
  9483 ;;		_CC2500_FrequencyCabr
  9484 ;; This function uses a non-reentrant model
  9485 ;;
  9486                           
  9487                           
  9488                           ;psect for function _DelayTime_1us
  9489  1ECA                     _DelayTime_1us:	
  9490                           
  9491                           ;CC2500_B1.c: 328: unsigned int i, j;
  9492                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9493                           
  9494                           ;incstack = 0
  9495                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9496  1ECA  3001               	movlw	1
  9497  1ECB  0020               	movlb	0	; select bank0
  9498  1ECC  00A2               	movwf	DelayTime_1us@i
  9499  1ECD  3000               	movlw	0
  9500  1ECE  00A3               	movwf	DelayTime_1us@i+1
  9501  1ECF                     l371:	
  9502  1ECF  0821               	movf	DelayTime_1us@count+1,w
  9503  1ED0  0223               	subwf	DelayTime_1us@i+1,w
  9504  1ED1  1D03               	skipz
  9505  1ED2  2ED5               	goto	u6355
  9506  1ED3  0820               	movf	DelayTime_1us@count,w
  9507  1ED4  0222               	subwf	DelayTime_1us@i,w
  9508  1ED5                     u6355:	
  9509  1ED5  1803               	btfsc	3,0
  9510  1ED6  0008               	return
  9511                           
  9512                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9513  1ED7  01A4               	clrf	DelayTime_1us@j
  9514  1ED8  01A5               	clrf	DelayTime_1us@j+1
  9515  1ED9  3000               	movlw	0
  9516  1EDA  0225               	subwf	DelayTime_1us@j+1,w
  9517  1EDB  3002               	movlw	2
  9518  1EDC  1903               	skipnz
  9519  1EDD  0224               	subwf	DelayTime_1us@j,w
  9520  1EDE  1803               	btfsc	3,0
  9521  1EDF  2EEB               	goto	l6938
  9522  1EE0                     l6936:	
  9523  1EE0  3001               	movlw	1
  9524  1EE1  07A4               	addwf	DelayTime_1us@j,f
  9525  1EE2  3000               	movlw	0
  9526  1EE3  3DA5               	addwfc	DelayTime_1us@j+1,f
  9527  1EE4  3000               	movlw	0
  9528  1EE5  0225               	subwf	DelayTime_1us@j+1,w
  9529  1EE6  3002               	movlw	2
  9530  1EE7  1903               	skipnz
  9531  1EE8  0224               	subwf	DelayTime_1us@j,w
  9532  1EE9  1C03               	skipc
  9533  1EEA  2EE0               	goto	l6936
  9534  1EEB                     l6938:	
  9535  1EEB  3001               	movlw	1
  9536  1EEC  07A2               	addwf	DelayTime_1us@i,f
  9537  1EED  3000               	movlw	0
  9538  1EEE  3DA3               	addwfc	DelayTime_1us@i+1,f
  9539  1EEF  2ECF               	goto	l371
  9540  1EF0                     __end_of_DelayTime_1us:	
  9541                           
  9542                           	psect	text47
  9543  18E5                     __ptext47:	
  9544 ;; *************** function _CC2500_ClearTXFIFO *****************
  9545 ;; Defined at:
  9546 ;;		line 194 in file "../src/CC2500_B1.c"
  9547 ;; Parameters:    Size  Location     Type
  9548 ;;		None
  9549 ;; Auto vars:     Size  Location     Type
  9550 ;;		None
  9551 ;; Return value:  Size  Location     Type
  9552 ;;		None               void
  9553 ;; Registers used:
  9554 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9555 ;; Tracked objects:
  9556 ;;		On entry : 0/0
  9557 ;;		On exit  : 0/0
  9558 ;;		Unchanged: 0/0
  9559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9561 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9563 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9564 ;;Total ram usage:        0 bytes
  9565 ;; Hardware stack levels used:    1
  9566 ;; Hardware stack levels required when called:    7
  9567 ;; This function calls:
  9568 ;;		_CC2500_WriteCommand
  9569 ;; This function is called by:
  9570 ;;		_CC2500_PowerOnInitial
  9571 ;; This function uses a non-reentrant model
  9572 ;;
  9573                           
  9574                           
  9575                           ;psect for function _CC2500_ClearTXFIFO
  9576  18E5                     _CC2500_ClearTXFIFO:	
  9577                           
  9578                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
  9579                           
  9580                           ;incstack = 0
  9581                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9582  18E5  303B               	movlw	59
  9583  18E6  319C  247A         	fcall	_CC2500_WriteCommand
  9584  18E8  0008               	return
  9585  18E9                     __end_of_CC2500_ClearTXFIFO:	
  9586                           
  9587                           	psect	text48
  9588  18E1                     __ptext48:	
  9589 ;; *************** function _CC2500_ClearRXFIFO *****************
  9590 ;; Defined at:
  9591 ;;		line 201 in file "../src/CC2500_B1.c"
  9592 ;; Parameters:    Size  Location     Type
  9593 ;;		None
  9594 ;; Auto vars:     Size  Location     Type
  9595 ;;		None
  9596 ;; Return value:  Size  Location     Type
  9597 ;;		None               void
  9598 ;; Registers used:
  9599 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9600 ;; Tracked objects:
  9601 ;;		On entry : 0/0
  9602 ;;		On exit  : 0/0
  9603 ;;		Unchanged: 0/0
  9604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9605 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9606 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9608 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9609 ;;Total ram usage:        0 bytes
  9610 ;; Hardware stack levels used:    1
  9611 ;; Hardware stack levels required when called:    7
  9612 ;; This function calls:
  9613 ;;		_CC2500_WriteCommand
  9614 ;; This function is called by:
  9615 ;;		_CC2500_PowerOnInitial
  9616 ;; This function uses a non-reentrant model
  9617 ;;
  9618                           
  9619                           
  9620                           ;psect for function _CC2500_ClearRXFIFO
  9621  18E1                     _CC2500_ClearRXFIFO:	
  9622                           
  9623                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
  9624                           
  9625                           ;incstack = 0
  9626                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9627  18E1  303A               	movlw	58
  9628  18E2  319C  247A         	fcall	_CC2500_WriteCommand
  9629  18E4  0008               	return
  9630  18E5                     __end_of_CC2500_ClearRXFIFO:	
  9631                           
  9632                           	psect	text49
  9633  1C7A                     __ptext49:	
  9634 ;; *************** function _CC2500_WriteCommand *****************
  9635 ;; Defined at:
  9636 ;;		line 292 in file "../src/CC2500_B1.c"
  9637 ;; Parameters:    Size  Location     Type
  9638 ;;  command         1    wreg     unsigned char 
  9639 ;; Auto vars:     Size  Location     Type
  9640 ;;  command         1    3[BANK0 ] unsigned char 
  9641 ;; Return value:  Size  Location     Type
  9642 ;;		None               void
  9643 ;; Registers used:
  9644 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9645 ;; Tracked objects:
  9646 ;;		On entry : 0/0
  9647 ;;		On exit  : 0/0
  9648 ;;		Unchanged: 0/0
  9649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9651 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9652 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9653 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9654 ;;Total ram usage:        2 bytes
  9655 ;; Hardware stack levels used:    1
  9656 ;; Hardware stack levels required when called:    6
  9657 ;; This function calls:
  9658 ;;		_CC2500_WriteByte
  9659 ;;		_RF_Timeout_Counter
  9660 ;;		_setRF_TimeoutCleared
  9661 ;; This function is called by:
  9662 ;;		_CC2500_TxData
  9663 ;;		_CC2500_RxData
  9664 ;;		_CC2500_ClearTXFIFO
  9665 ;;		_CC2500_ClearRXFIFO
  9666 ;;		_CC2500_FrequencyCabr
  9667 ;;		_CC2500_SIDLEMode
  9668 ;;		_setRF_Main
  9669 ;;		_RF_RxDisable
  9670 ;; This function uses a non-reentrant model
  9671 ;;
  9672                           
  9673                           
  9674                           ;psect for function _CC2500_WriteCommand
  9675  1C7A                     _CC2500_WriteCommand:	
  9676                           
  9677                           ;incstack = 0
  9678                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9679                           ;CC2500_WriteCommand@command stored from wreg
  9680  1C7A  0020               	movlb	0	; select bank0
  9681  1C7B  00A3               	movwf	CC2500_WriteCommand@command
  9682                           
  9683                           ;CC2500_B1.c: 293: RC4 = 0;
  9684  1C7C  120E               	bcf	14,4	;volatile
  9685                           
  9686                           ;CC2500_B1.c: 294: SPI0Buffer = command;
  9687  1C7D  0823               	movf	CC2500_WriteCommand@command,w
  9688  1C7E  00A2               	movwf	??_CC2500_WriteCommand
  9689  1C7F  0822               	movf	??_CC2500_WriteCommand,w
  9690  1C80  0021               	movlb	1	; select bank1
  9691  1C81  00D8               	movwf	_SPI0Buffer^(0+128)
  9692                           
  9693                           ;CC2500_B1.c: 296: while (RC2 == 1 && RF1.Timeout == 0) {
  9694  1C82  2C86               	goto	l9256
  9695  1C83                     l9254:	
  9696                           
  9697                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
  9698  1C83  319B  2351  319C   	fcall	_RF_Timeout_Counter
  9699  1C86                     l9256:	
  9700  1C86  0020               	movlb	0	; select bank0
  9701  1C87  1D0E               	btfss	14,2	;volatile
  9702  1C88  2C8C               	goto	l9260
  9703  1C89  0021               	movlb	1	; select bank1
  9704  1C8A  1F21               	btfss	(_RF1^(0+128)+1),6
  9705  1C8B  2C83               	goto	l9254
  9706  1C8C                     l9260:	
  9707                           
  9708                           ;CC2500_B1.c: 298: };
  9709                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
  9710  1C8C  3198  20DD  319C   	fcall	_setRF_TimeoutCleared
  9711                           
  9712                           ;CC2500_B1.c: 301: CC2500_WriteByte();
  9713  1C8F  319C  2447         	fcall	_CC2500_WriteByte
  9714                           
  9715                           ;CC2500_B1.c: 302: RC4 = 1;
  9716  1C91  0020               	movlb	0	; select bank0
  9717  1C92  160E               	bsf	14,4	;volatile
  9718  1C93  0008               	return
  9719  1C94                     __end_of_CC2500_WriteCommand:	
  9720                           
  9721                           	psect	text50
  9722  18DD                     __ptext50:	
  9723 ;; *************** function _setRF_TimeoutCleared *****************
  9724 ;; Defined at:
  9725 ;;		line 149 in file "../src/RF_Control_B1.c"
  9726 ;; Parameters:    Size  Location     Type
  9727 ;;		None
  9728 ;; Auto vars:     Size  Location     Type
  9729 ;;		None
  9730 ;; Return value:  Size  Location     Type
  9731 ;;		None               void
  9732 ;; Registers used:
  9733 ;;		status,2
  9734 ;; Tracked objects:
  9735 ;;		On entry : 0/0
  9736 ;;		On exit  : 0/0
  9737 ;;		Unchanged: 0/0
  9738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9742 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9743 ;;Total ram usage:        0 bytes
  9744 ;; Hardware stack levels used:    1
  9745 ;; Hardware stack levels required when called:    5
  9746 ;; This function calls:
  9747 ;;		Nothing
  9748 ;; This function is called by:
  9749 ;;		_CC2500_TxData
  9750 ;;		_CC2500_RxData
  9751 ;;		_CC2500_PowerRST
  9752 ;;		_CC2500_WriteREG
  9753 ;;		_CC2500_WriteCommand
  9754 ;;		_CC2500_ReadStatus
  9755 ;;		_CC2500_ReadREG
  9756 ;; This function uses a non-reentrant model
  9757 ;;
  9758                           
  9759                           
  9760                           ;psect for function _setRF_TimeoutCleared
  9761  18DD                     _setRF_TimeoutCleared:	
  9762                           
  9763                           ;RF_Control_B1.c: 150: RF1.TimeoutCount = 0;
  9764                           
  9765                           ;incstack = 0
  9766                           ; Regs used in _setRF_TimeoutCleared: [status,2]
  9767  18DD  0021               	movlb	1	; select bank1
  9768  18DE  01AC               	clrf	(_RF1^(0+128)+12)
  9769  18DF  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9770  18E0  0008               	return
  9771  18E1                     __end_of_setRF_TimeoutCleared:	
  9772                           
  9773                           	psect	text51
  9774  1B51                     __ptext51:	
  9775 ;; *************** function _RF_Timeout_Counter *****************
  9776 ;; Defined at:
  9777 ;;		line 141 in file "../src/RF_Control_B1.c"
  9778 ;; Parameters:    Size  Location     Type
  9779 ;;		None
  9780 ;; Auto vars:     Size  Location     Type
  9781 ;;		None
  9782 ;; Return value:  Size  Location     Type
  9783 ;;		None               void
  9784 ;; Registers used:
  9785 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9786 ;; Tracked objects:
  9787 ;;		On entry : 0/0
  9788 ;;		On exit  : 0/0
  9789 ;;		Unchanged: 0/0
  9790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9793 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9794 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9795 ;;Total ram usage:        0 bytes
  9796 ;; Hardware stack levels used:    1
  9797 ;; Hardware stack levels required when called:    5
  9798 ;; This function calls:
  9799 ;;		Nothing
  9800 ;; This function is called by:
  9801 ;;		_CC2500_TxData
  9802 ;;		_CC2500_RxData
  9803 ;;		_CC2500_PowerRST
  9804 ;;		_CC2500_WriteREG
  9805 ;;		_CC2500_WriteCommand
  9806 ;;		_CC2500_ReadStatus
  9807 ;;		_CC2500_ReadREG
  9808 ;; This function uses a non-reentrant model
  9809 ;;
  9810                           
  9811                           
  9812                           ;psect for function _RF_Timeout_Counter
  9813  1B51                     _RF_Timeout_Counter:	
  9814                           
  9815                           ;RF_Control_B1.c: 142: RF1.TimeoutCount++;
  9816                           
  9817                           ;incstack = 0
  9818                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  9819  1B51  3001               	movlw	1
  9820  1B52  0021               	movlb	1	; select bank1
  9821  1B53  07AC               	addwf	(_RF1^(0+128)+12),f
  9822  1B54  3000               	movlw	0
  9823  1B55  3DAD               	addwfc	((_RF1+1)^(0+128)+12),f
  9824                           
  9825                           ;RF_Control_B1.c: 143: if (RF1.TimeoutCount == 25000) {
  9826  1B56  300C               	movlw	12
  9827  1B57  3EA0               	addlw	_RF1& (0+255)
  9828  1B58  0086               	movwf	6
  9829  1B59  0187               	clrf	7
  9830  1B5A  3F40               	moviw [0]fsr1
  9831  1B5B  3AA8               	xorlw	168
  9832  1B5C  1D03               	skipz
  9833  1B5D  2B60               	goto	u10255
  9834  1B5E  3F41               	moviw [1]fsr1
  9835  1B5F  3A61               	xorlw	97
  9836  1B60                     u10255:	
  9837  1B60  1D03               	skipz
  9838  1B61  0008               	return
  9839                           
  9840                           ;RF_Control_B1.c: 144: RF1.TimeoutCount = 0;
  9841  1B62  01AC               	clrf	(_RF1^(0+128)+12)
  9842  1B63  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9843                           
  9844                           ;RF_Control_B1.c: 145: RF1.Timeout = 1;
  9845  1B64  1721               	bsf	(_RF1^(0+128)+1),6
  9846  1B65  0008               	return
  9847  1B66                     __end_of_RF_Timeout_Counter:	
  9848                           
  9849                           	psect	text52
  9850  1C47                     __ptext52:	
  9851 ;; *************** function _CC2500_WriteByte *****************
  9852 ;; Defined at:
  9853 ;;		line 226 in file "../src/CC2500_B1.c"
  9854 ;; Parameters:    Size  Location     Type
  9855 ;;		None
  9856 ;; Auto vars:     Size  Location     Type
  9857 ;;  loop_a          1    1[BANK0 ] unsigned char 
  9858 ;; Return value:  Size  Location     Type
  9859 ;;		None               void
  9860 ;; Registers used:
  9861 ;;		wreg, status,2, status,0
  9862 ;; Tracked objects:
  9863 ;;		On entry : 0/0
  9864 ;;		On exit  : 0/0
  9865 ;;		Unchanged: 0/0
  9866 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9868 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9869 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9870 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9871 ;;Total ram usage:        2 bytes
  9872 ;; Hardware stack levels used:    1
  9873 ;; Hardware stack levels required when called:    5
  9874 ;; This function calls:
  9875 ;;		Nothing
  9876 ;; This function is called by:
  9877 ;;		_CC2500_TxData
  9878 ;;		_CC2500_RxData
  9879 ;;		_CC2500_PowerRST
  9880 ;;		_CC2500_WriteREG
  9881 ;;		_CC2500_WriteCommand
  9882 ;;		_CC2500_ReadStatus
  9883 ;;		_CC2500_ReadREG
  9884 ;; This function uses a non-reentrant model
  9885 ;;
  9886                           
  9887                           
  9888                           ;psect for function _CC2500_WriteByte
  9889  1C47                     _CC2500_WriteByte:	
  9890                           
  9891                           ;CC2500_B1.c: 227: unsigned char loop_a;
  9892                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
  9893                           
  9894                           ;incstack = 0
  9895                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
  9896  1C47  0020               	movlb	0	; select bank0
  9897  1C48  01A1               	clrf	CC2500_WriteByte@loop_a
  9898  1C49                     L6:	
  9899  1C49  3008               	movlw	8
  9900  1C4A  0221               	subwf	CC2500_WriteByte@loop_a,w
  9901  1C4B  1803               	btfsc	3,0
  9902  1C4C  0008               	return
  9903                           
  9904                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
  9905  1C4D  0021               	movlb	1	; select bank1
  9906  1C4E  1FD8               	btfss	_SPI0Buffer^(0+128),7
  9907  1C4F  2C53               	goto	l327
  9908                           
  9909                           ;CC2500_B1.c: 230: RC0 = 1;
  9910  1C50  0020               	movlb	0	; select bank0
  9911  1C51  140E               	bsf	14,0	;volatile
  9912  1C52  2C55               	goto	l328
  9913  1C53                     l327:	
  9914                           
  9915                           ;CC2500_B1.c: 231: else
  9916                           ;CC2500_B1.c: 232: RC0 = 0;
  9917  1C53  0020               	movlb	0	; select bank0
  9918  1C54  100E               	bcf	14,0	;volatile
  9919  1C55                     l328:	
  9920                           
  9921                           ;CC2500_B1.c: 233: RC1 = 1;
  9922  1C55  148E               	bsf	14,1	;volatile
  9923                           
  9924                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
  9925  1C56  1003               	clrc
  9926  1C57  0021               	movlb	1	; select bank1
  9927  1C58  0DD8               	rlf	_SPI0Buffer^(0+128),f
  9928                           
  9929                           ;CC2500_B1.c: 235: RC1 = 0;
  9930  1C59  0020               	movlb	0	; select bank0
  9931  1C5A  108E               	bcf	14,1	;volatile
  9932  1C5B  3001               	movlw	1
  9933  1C5C  00A0               	movwf	??_CC2500_WriteByte
  9934  1C5D  0820               	movf	??_CC2500_WriteByte,w
  9935  1C5E  07A1               	addwf	CC2500_WriteByte@loop_a,f
  9936  1C5F  2C49               	goto	L6
  9937  1C60                     __end_of_CC2500_WriteByte:	
  9938                           
  9939                           	psect	text53
  9940  18D0                     __ptext53:	
  9941 ;; *************** function _RF_Initialization *****************
  9942 ;; Defined at:
  9943 ;;		line 9 in file "../src/RF_Control_B1.c"
  9944 ;; Parameters:    Size  Location     Type
  9945 ;;		None
  9946 ;; Auto vars:     Size  Location     Type
  9947 ;;		None
  9948 ;; Return value:  Size  Location     Type
  9949 ;;		None               void
  9950 ;; Registers used:
  9951 ;;		wreg, status,2, status,0, pclath, cstack
  9952 ;; Tracked objects:
  9953 ;;		On entry : 0/0
  9954 ;;		On exit  : 0/0
  9955 ;;		Unchanged: 0/0
  9956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9960 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9961 ;;Total ram usage:        0 bytes
  9962 ;; Hardware stack levels used:    1
  9963 ;; Hardware stack levels required when called:    6
  9964 ;; This function calls:
  9965 ;;		_setRF_Initialization
  9966 ;; This function is called by:
  9967 ;;		_main
  9968 ;; This function uses a non-reentrant model
  9969 ;;
  9970                           
  9971                           
  9972                           ;psect for function _RF_Initialization
  9973  18D0                     _RF_Initialization:	
  9974                           
  9975                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9976                           
  9977                           ;incstack = 0
  9978                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9979  18D0  3199  216B         	fcall	_setRF_Initialization
  9980  18D2  0008               	return
  9981  18D3                     __end_of_RF_Initialization:	
  9982                           
  9983                           	psect	text54
  9984  196B                     __ptext54:	
  9985 ;; *************** function _setRF_Initialization *****************
  9986 ;; Defined at:
  9987 ;;		line 17 in file "../src/RF_Control_B1.c"
  9988 ;; Parameters:    Size  Location     Type
  9989 ;;		None
  9990 ;; Auto vars:     Size  Location     Type
  9991 ;;		None
  9992 ;; Return value:  Size  Location     Type
  9993 ;;		None               void
  9994 ;; Registers used:
  9995 ;;		wreg
  9996 ;; Tracked objects:
  9997 ;;		On entry : 0/0
  9998 ;;		On exit  : 0/0
  9999 ;;		Unchanged: 0/0
 10000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10003 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10004 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10005 ;;Total ram usage:        1 bytes
 10006 ;; Hardware stack levels used:    1
 10007 ;; Hardware stack levels required when called:    5
 10008 ;; This function calls:
 10009 ;;		Nothing
 10010 ;; This function is called by:
 10011 ;;		_RF_Initialization
 10012 ;; This function uses a non-reentrant model
 10013 ;;
 10014                           
 10015                           
 10016                           ;psect for function _setRF_Initialization
 10017  196B                     _setRF_Initialization:	
 10018                           
 10019                           ;RF_Control_B1.c: 19: Tx_Length = 21;
 10020                           
 10021                           ;incstack = 0
 10022                           ; Regs used in _setRF_Initialization: [wreg]
 10023  196B  3015               	movlw	21
 10024  196C  0020               	movlb	0	; select bank0
 10025  196D  00A0               	movwf	??_setRF_Initialization
 10026  196E  0820               	movf	??_setRF_Initialization,w
 10027  196F  0021               	movlb	1	; select bank1
 10028  1970  00DA               	movwf	_Tx_Length^(0+128)
 10029                           
 10030                           ;RF_Control_B1.c: 20: RF1.RunTime = 200;
 10031  1971  30C8               	movlw	200
 10032  1972  00A7               	movwf	(_RF1^(0+128)+7)
 10033  1973  3000               	movlw	0
 10034  1974  00A8               	movwf	(_RF1^(0+128)+8)
 10035  1975  0008               	return
 10036  1976                     __end_of_setRF_Initialization:	
 10037                           
 10038                           	psect	text55
 10039  1AA6                     __ptext55:	
 10040 ;; *************** function _Mcu_Initialization *****************
 10041 ;; Defined at:
 10042 ;;		line 30 in file "../src/MCU_B1.c"
 10043 ;; Parameters:    Size  Location     Type
 10044 ;;		None
 10045 ;; Auto vars:     Size  Location     Type
 10046 ;;		None
 10047 ;; Return value:  Size  Location     Type
 10048 ;;		None               void
 10049 ;; Registers used:
 10050 ;;		wreg, status,2, status,0, pclath, cstack
 10051 ;; Tracked objects:
 10052 ;;		On entry : 0/0
 10053 ;;		On exit  : 0/0
 10054 ;;		Unchanged: 0/0
 10055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10059 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10060 ;;Total ram usage:        0 bytes
 10061 ;; Hardware stack levels used:    1
 10062 ;; Hardware stack levels required when called:    6
 10063 ;; This function calls:
 10064 ;;		_ADC_Set
 10065 ;;		_Fosc_Set
 10066 ;;		_IOC_Set
 10067 ;;		_IO_Set
 10068 ;;		_TMR1_Set
 10069 ;;		_WDT_Set
 10070 ;; This function is called by:
 10071 ;;		_main
 10072 ;; This function uses a non-reentrant model
 10073 ;;
 10074                           
 10075                           
 10076                           ;psect for function _Mcu_Initialization
 10077  1AA6                     _Mcu_Initialization:	
 10078                           
 10079                           ;MCU_B1.c: 32: Fosc_Set();
 10080                           
 10081                           ;incstack = 0
 10082                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10083  1AA6  3198  20D9  319A   	fcall	_Fosc_Set
 10084                           
 10085                           ;MCU_B1.c: 34: IO_Set();
 10086  1AA9  319C  2494  319A   	fcall	_IO_Set
 10087                           
 10088                           ;MCU_B1.c: 36: ;;
 10089                           ;MCU_B1.c: 38: TMR1_Set();
 10090  1AAC  3199  21C9  319A   	fcall	_TMR1_Set
 10091                           
 10092                           ;MCU_B1.c: 40: ADC_Set();
 10093  1AAF  3199  2104  319A   	fcall	_ADC_Set
 10094                           
 10095                           ;MCU_B1.c: 42: ;;
 10096                           ;MCU_B1.c: 44: ;;
 10097                           ;MCU_B1.c: 46: IOC_Set();
 10098  1AB2  3199  2160  319A   	fcall	_IOC_Set
 10099                           
 10100                           ;MCU_B1.c: 48: ;;
 10101                           ;MCU_B1.c: 50: ;;
 10102                           ;MCU_B1.c: 52: WDT_Set();
 10103  1AB5  3199  21D5         	fcall	_WDT_Set
 10104  1AB7  0008               	return
 10105  1AB8                     __end_of_Mcu_Initialization:	
 10106                           
 10107                           	psect	text56
 10108  19D5                     __ptext56:	
 10109 ;; *************** function _WDT_Set *****************
 10110 ;; Defined at:
 10111 ;;		line 1102 in file "../src/MCU_B1.c"
 10112 ;; Parameters:    Size  Location     Type
 10113 ;;		None
 10114 ;; Auto vars:     Size  Location     Type
 10115 ;;		None
 10116 ;; Return value:  Size  Location     Type
 10117 ;;		None               void
 10118 ;; Registers used:
 10119 ;;		wreg
 10120 ;; Tracked objects:
 10121 ;;		On entry : 0/0
 10122 ;;		On exit  : 0/0
 10123 ;;		Unchanged: 0/0
 10124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10125 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10126 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10127 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10128 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10129 ;;Total ram usage:        1 bytes
 10130 ;; Hardware stack levels used:    1
 10131 ;; Hardware stack levels required when called:    5
 10132 ;; This function calls:
 10133 ;;		Nothing
 10134 ;; This function is called by:
 10135 ;;		_Mcu_Initialization
 10136 ;; This function uses a non-reentrant model
 10137 ;;
 10138                           
 10139                           
 10140                           ;psect for function _WDT_Set
 10141  19D5                     _WDT_Set:	
 10142                           
 10143                           ;MCU_B1.c: 1109: WDTCON = 0b00010111;;
 10144                           
 10145                           ;incstack = 0
 10146                           ; Regs used in _WDT_Set: [wreg]
 10147  19D5  3017               	movlw	23
 10148  19D6  0021               	movlb	1	; select bank1
 10149  19D7  0097               	movwf	23	;volatile
 10150                           
 10151                           ;MCU_B1.c: 1111: WDT.Enable = 1;
 10152  19D8  0022               	movlb	2	; select bank2
 10153  19D9  1436               	bsf	_WDT^(0+256),0
 10154                           
 10155                           ;MCU_B1.c: 1112: WDT.Timer = 10;
 10156  19DA  300A               	movlw	10
 10157  19DB  0020               	movlb	0	; select bank0
 10158  19DC  00A0               	movwf	??_WDT_Set
 10159  19DD  0820               	movf	??_WDT_Set,w
 10160  19DE  0022               	movlb	2	; select bank2
 10161  19DF  00B7               	movwf	(_WDT^(0+256)+1)
 10162  19E0  0008               	return
 10163  19E1                     __end_of_WDT_Set:	
 10164                           
 10165                           	psect	text57
 10166  19C9                     __ptext57:	
 10167 ;; *************** function _TMR1_Set *****************
 10168 ;; Defined at:
 10169 ;;		line 226 in file "../src/MCU_B1.c"
 10170 ;; Parameters:    Size  Location     Type
 10171 ;;		None
 10172 ;; Auto vars:     Size  Location     Type
 10173 ;;		None
 10174 ;; Return value:  Size  Location     Type
 10175 ;;		None               void
 10176 ;; Registers used:
 10177 ;;		wreg
 10178 ;; Tracked objects:
 10179 ;;		On entry : 0/0
 10180 ;;		On exit  : 0/0
 10181 ;;		Unchanged: 0/0
 10182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10184 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10186 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10187 ;;Total ram usage:        0 bytes
 10188 ;; Hardware stack levels used:    1
 10189 ;; Hardware stack levels required when called:    5
 10190 ;; This function calls:
 10191 ;;		Nothing
 10192 ;; This function is called by:
 10193 ;;		_Mcu_Initialization
 10194 ;; This function uses a non-reentrant model
 10195 ;;
 10196                           
 10197                           
 10198                           ;psect for function _TMR1_Set
 10199  19C9                     _TMR1_Set:	
 10200                           
 10201                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
 10202                           
 10203                           ;incstack = 0
 10204                           ; Regs used in _TMR1_Set: [wreg]
 10205  19C9  3041               	movlw	65
 10206  19CA  0020               	movlb	0	; select bank0
 10207  19CB  0098               	movwf	24	;volatile
 10208                           
 10209                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
 10210  19CC  30FA               	movlw	250
 10211  19CD  0097               	movwf	23	;volatile
 10212                           
 10213                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
 10214  19CE  3038               	movlw	56
 10215  19CF  0096               	movwf	22	;volatile
 10216                           
 10217                           ;MCU_B1.c: 230: TMR1IE = 1;
 10218  19D0  0021               	movlb	1	; select bank1
 10219  19D1  1411               	bsf	17,0	;volatile
 10220                           
 10221                           ;MCU_B1.c: 231: PEIE = 1;
 10222  19D2  170B               	bsf	11,6	;volatile
 10223                           
 10224                           ;MCU_B1.c: 232: GIE = 1;
 10225  19D3  178B               	bsf	11,7	;volatile
 10226  19D4  0008               	return
 10227  19D5                     __end_of_TMR1_Set:	
 10228                           
 10229                           	psect	text58
 10230  1C94                     __ptext58:	
 10231 ;; *************** function _IO_Set *****************
 10232 ;; Defined at:
 10233 ;;		line 60 in file "../src/MCU_B1.c"
 10234 ;; Parameters:    Size  Location     Type
 10235 ;;		None
 10236 ;; Auto vars:     Size  Location     Type
 10237 ;;		None
 10238 ;; Return value:  Size  Location     Type
 10239 ;;		None               void
 10240 ;; Registers used:
 10241 ;;		wreg, status,2
 10242 ;; Tracked objects:
 10243 ;;		On entry : 0/0
 10244 ;;		On exit  : 0/0
 10245 ;;		Unchanged: 0/0
 10246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10248 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10250 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10251 ;;Total ram usage:        0 bytes
 10252 ;; Hardware stack levels used:    1
 10253 ;; Hardware stack levels required when called:    5
 10254 ;; This function calls:
 10255 ;;		Nothing
 10256 ;; This function is called by:
 10257 ;;		_Mcu_Initialization
 10258 ;; This function uses a non-reentrant model
 10259 ;;
 10260                           
 10261                           
 10262                           ;psect for function _IO_Set
 10263  1C94                     _IO_Set:	
 10264                           
 10265                           ;MCU_B1.c: 92: TRISA = 0b01110111;;
 10266                           
 10267                           ;incstack = 0
 10268                           ; Regs used in _IO_Set: [wreg+status,2]
 10269  1C94  3077               	movlw	119
 10270  1C95  0021               	movlb	1	; select bank1
 10271  1C96  008C               	movwf	12	;volatile
 10272                           
 10273                           ;MCU_B1.c: 93: TRISB = 0b00000111;;
 10274  1C97  3007               	movlw	7
 10275  1C98  008D               	movwf	13	;volatile
 10276                           
 10277                           ;MCU_B1.c: 94: TRISC = 0b00001100;;
 10278  1C99  300C               	movlw	12
 10279  1C9A  008E               	movwf	14	;volatile
 10280                           
 10281                           ;MCU_B1.c: 96: LATA = 0b00000000;;
 10282  1C9B  0022               	movlb	2	; select bank2
 10283  1C9C  018C               	clrf	12	;volatile
 10284                           
 10285                           ;MCU_B1.c: 97: LATB = 0b00000010;;
 10286  1C9D  3002               	movlw	2
 10287  1C9E  008D               	movwf	13	;volatile
 10288                           
 10289                           ;MCU_B1.c: 98: LATC = 0b00000000;;
 10290  1C9F  018E               	clrf	14	;volatile
 10291                           
 10292                           ;MCU_B1.c: 100: ANSELA = 0b00100010;;
 10293  1CA0  3022               	movlw	34
 10294  1CA1  0023               	movlb	3	; select bank3
 10295  1CA2  008C               	movwf	12	;volatile
 10296                           
 10297                           ;MCU_B1.c: 101: ANSELB = 0b00000000;;
 10298  1CA3  018D               	clrf	13	;volatile
 10299                           
 10300                           ;MCU_B1.c: 102: ANSELC = 0b00000000;;
 10301  1CA4  018E               	clrf	14	;volatile
 10302                           
 10303                           ;MCU_B1.c: 104: PORTA = 0b01110111;;
 10304  1CA5  3077               	movlw	119
 10305  1CA6  0020               	movlb	0	; select bank0
 10306  1CA7  008C               	movwf	12	;volatile
 10307                           
 10308                           ;MCU_B1.c: 105: PORTB = 0b00000111;;
 10309  1CA8  3007               	movlw	7
 10310  1CA9  008D               	movwf	13	;volatile
 10311                           
 10312                           ;MCU_B1.c: 106: PORTC = 0b00001100;;
 10313  1CAA  300C               	movlw	12
 10314  1CAB  008E               	movwf	14	;volatile
 10315                           
 10316                           ;MCU_B1.c: 108: WPUB = 0b00000000;;
 10317  1CAC  0024               	movlb	4	; select bank4
 10318  1CAD  018D               	clrf	13	;volatile
 10319  1CAE  0008               	return
 10320  1CAF                     __end_of_IO_Set:	
 10321                           
 10322                           	psect	text59
 10323  1960                     __ptext59:	
 10324 ;; *************** function _IOC_Set *****************
 10325 ;; Defined at:
 10326 ;;		line 380 in file "../src/MCU_B1.c"
 10327 ;; Parameters:    Size  Location     Type
 10328 ;;		None
 10329 ;; Auto vars:     Size  Location     Type
 10330 ;;		None
 10331 ;; Return value:  Size  Location     Type
 10332 ;;		None               void
 10333 ;; Registers used:
 10334 ;;		wreg, status,2
 10335 ;; Tracked objects:
 10336 ;;		On entry : 0/0
 10337 ;;		On exit  : 0/0
 10338 ;;		Unchanged: 0/0
 10339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10340 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10341 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10343 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10344 ;;Total ram usage:        0 bytes
 10345 ;; Hardware stack levels used:    1
 10346 ;; Hardware stack levels required when called:    5
 10347 ;; This function calls:
 10348 ;;		Nothing
 10349 ;; This function is called by:
 10350 ;;		_Mcu_Initialization
 10351 ;; This function uses a non-reentrant model
 10352 ;;
 10353                           
 10354                           
 10355                           ;psect for function _IOC_Set
 10356  1960                     _IOC_Set:	
 10357                           
 10358                           ;MCU_B1.c: 382: IOCBP = 0b00000100;;
 10359                           
 10360                           ;incstack = 0
 10361                           ; Regs used in _IOC_Set: [wreg+status,2]
 10362  1960  3004               	movlw	4
 10363  1961  0027               	movlb	7	; select bank7
 10364  1962  0094               	movwf	20	;volatile
 10365                           
 10366                           ;MCU_B1.c: 383: IOCBN = 0b00000100;;
 10367  1963  3004               	movlw	4
 10368  1964  0095               	movwf	21	;volatile
 10369                           
 10370                           ;MCU_B1.c: 385: IOCBF = 0b00000000;
 10371  1965  0196               	clrf	22	;volatile
 10372                           
 10373                           ;MCU_B1.c: 387: IOCIE = 1;
 10374  1966  158B               	bsf	11,3	;volatile
 10375                           
 10376                           ;MCU_B1.c: 388: IOCIF = 0;
 10377  1967  100B               	bcf	11,0	;volatile
 10378                           
 10379                           ;MCU_B1.c: 389: PEIE = 1;
 10380  1968  170B               	bsf	11,6	;volatile
 10381                           
 10382                           ;MCU_B1.c: 390: GIE = 1;
 10383  1969  178B               	bsf	11,7	;volatile
 10384  196A  0008               	return
 10385  196B                     __end_of_IOC_Set:	
 10386                           
 10387                           	psect	text60
 10388  18D9                     __ptext60:	
 10389 ;; *************** function _Fosc_Set *****************
 10390 ;; Defined at:
 10391 ;;		line 56 in file "../src/MCU_B1.c"
 10392 ;; Parameters:    Size  Location     Type
 10393 ;;		None
 10394 ;; Auto vars:     Size  Location     Type
 10395 ;;		None
 10396 ;; Return value:  Size  Location     Type
 10397 ;;		None               void
 10398 ;; Registers used:
 10399 ;;		wreg
 10400 ;; Tracked objects:
 10401 ;;		On entry : 0/0
 10402 ;;		On exit  : 0/0
 10403 ;;		Unchanged: 0/0
 10404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10406 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10407 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10408 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10409 ;;Total ram usage:        0 bytes
 10410 ;; Hardware stack levels used:    1
 10411 ;; Hardware stack levels required when called:    5
 10412 ;; This function calls:
 10413 ;;		Nothing
 10414 ;; This function is called by:
 10415 ;;		_Mcu_Initialization
 10416 ;; This function uses a non-reentrant model
 10417 ;;
 10418                           
 10419                           
 10420                           ;psect for function _Fosc_Set
 10421  18D9                     _Fosc_Set:	
 10422                           
 10423                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10424                           
 10425                           ;incstack = 0
 10426                           ; Regs used in _Fosc_Set: [wreg]
 10427  18D9  3078               	movlw	120
 10428  18DA  0021               	movlb	1	; select bank1
 10429  18DB  0099               	movwf	25	;volatile
 10430  18DC  0008               	return
 10431  18DD                     __end_of_Fosc_Set:	
 10432                           
 10433                           	psect	text61
 10434  1904                     __ptext61:	
 10435 ;; *************** function _ADC_Set *****************
 10436 ;; Defined at:
 10437 ;;		line 427 in file "../src/MCU_B1.c"
 10438 ;; Parameters:    Size  Location     Type
 10439 ;;		None
 10440 ;; Auto vars:     Size  Location     Type
 10441 ;;		None
 10442 ;; Return value:  Size  Location     Type
 10443 ;;		None               void
 10444 ;; Registers used:
 10445 ;;		wreg
 10446 ;; Tracked objects:
 10447 ;;		On entry : 0/0
 10448 ;;		On exit  : 0/0
 10449 ;;		Unchanged: 0/0
 10450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10454 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10455 ;;Total ram usage:        0 bytes
 10456 ;; Hardware stack levels used:    1
 10457 ;; Hardware stack levels required when called:    5
 10458 ;; This function calls:
 10459 ;;		Nothing
 10460 ;; This function is called by:
 10461 ;;		_Mcu_Initialization
 10462 ;; This function uses a non-reentrant model
 10463 ;;
 10464                           
 10465                           
 10466                           ;psect for function _ADC_Set
 10467  1904                     _ADC_Set:	
 10468                           
 10469                           ;MCU_B1.c: 428: ADCON1 = 0xf3;
 10470                           
 10471                           ;incstack = 0
 10472                           ; Regs used in _ADC_Set: [wreg]
 10473  1904  30F3               	movlw	243
 10474  1905  0021               	movlb	1	; select bank1
 10475  1906  009E               	movwf	30	;volatile
 10476                           
 10477                           ;MCU_B1.c: 429: FVRCON = 0xc1;
 10478  1907  30C1               	movlw	193
 10479  1908  0022               	movlb	2	; select bank2
 10480  1909  0097               	movwf	23	;volatile
 10481  190A  0008               	return
 10482  190B                     __end_of_ADC_Set:	
 10483                           
 10484                           	psect	text62
 10485  0053                     __ptext62:	
 10486 ;; *************** function _Load_Main *****************
 10487 ;; Defined at:
 10488 ;;		line 39 in file "../src/OverLoad_B1.c"
 10489 ;; Parameters:    Size  Location     Type
 10490 ;;		None
 10491 ;; Auto vars:     Size  Location     Type
 10492 ;;  i               2   16[BANK0 ] int 
 10493 ;;  LightsCount     1   15[BANK0 ] unsigned char 
 10494 ;;  Load_RunStat    1   14[BANK0 ] unsigned char 
 10495 ;;  ErrorCountVa    1   13[BANK0 ] unsigned char 
 10496 ;;  error           1   12[BANK0 ] unsigned char 
 10497 ;; Return value:  Size  Location     Type
 10498 ;;		None               void
 10499 ;; Registers used:
 10500 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10501 ;; Tracked objects:
 10502 ;;		On entry : 0/0
 10503 ;;		On exit  : 0/0
 10504 ;;		Unchanged: 0/0
 10505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10506 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10507 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10508 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10509 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10510 ;;Total ram usage:       10 bytes
 10511 ;; Hardware stack levels used:    1
 10512 ;; Hardware stack levels required when called:    6
 10513 ;; This function calls:
 10514 ;;		___lwdiv
 10515 ;;		___wmul
 10516 ;;		_getAll_DimmerIntr_Dimming_Sw_RF
 10517 ;;		_getDimmer_LoadGO
 10518 ;;		_getDimmer_Load_Status
 10519 ;;		_getMain_All_Error_Status
 10520 ;;		_getMain_All_LightsStatus
 10521 ;;		_getMain_Lights_Count
 10522 ;;		_setLoad_AH_AL_Restore
 10523 ;; This function is called by:
 10524 ;;		_main
 10525 ;; This function uses a non-reentrant model
 10526 ;;
 10527                           
 10528                           
 10529                           ;psect for function _Load_Main
 10530  0053                     _Load_Main:	
 10531                           
 10532                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
 10533                           
 10534                           ;incstack = 0
 10535                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10536  0053  3000               	movlw	0
 10537  0054  3190  202E  3180   	fcall	_getMain_All_Error_Status
 10538  0057  0020               	movlb	0	; select bank0
 10539  0058  00A8               	movwf	??_Load_Main
 10540  0059  0828               	movf	??_Load_Main,w
 10541  005A  00AC               	movwf	Load_Main@error
 10542                           
 10543                           ;OverLoad_B1.c: 41: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount=0;
 10544  005B  01AE               	clrf	Load_Main@Load_RunStatus
 10545  005C  01AD               	clrf	Load_Main@ErrorCountValue
 10546  005D  01AF               	clrf	Load_Main@LightsCount
 10547                           
 10548                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
 10549  005E  0022               	movlb	2	; select bank2
 10550  005F  1C3F               	btfss	_Load^(0+256),0
 10551  0060  29FF               	goto	l1606
 10552                           
 10553                           ;OverLoad_B1.c: 44: if (getMain_All_LightsStatus() == 0) {
 10554  0061  319A  22F0  3180   	fcall	_getMain_All_LightsStatus
 10555  0064  3800               	iorlw	0
 10556  0065  1D03               	skipz
 10557  0066  2869               	goto	l8766
 10558                           
 10559                           ;OverLoad_B1.c: 45: Load.GO = 0;
 10560  0067  0022               	movlb	2	; select bank2
 10561  0068  288A               	goto	l8784
 10562  0069                     l8766:	
 10563                           ;OverLoad_B1.c: 46: } else {
 10564                           
 10565                           
 10566                           ;OverLoad_B1.c: 49: if (error == 0 && getAll_DimmerIntr_Dimming_Sw_RF() == 0) {
 10567  0069  0020               	movlb	0	; select bank0
 10568  006A  08AC               	movf	Load_Main@error,f
 10569  006B  1D03               	skipz
 10570  006C  2887               	goto	l1609
 10571  006D  319E  261D  3180   	fcall	_getAll_DimmerIntr_Dimming_Sw_RF
 10572  0070  3800               	iorlw	0
 10573  0071  1D03               	skipz
 10574  0072  2887               	goto	l1609
 10575                           
 10576                           ;OverLoad_B1.c: 50: Load.GO = 1;
 10577  0073  0022               	movlb	2	; select bank2
 10578  0074  14BF               	bsf	_Load^(0+256),1
 10579                           
 10580                           ;OverLoad_B1.c: 52: if (getDimmer_LoadGO() == 1) {
 10581  0075  3199  2123  3180   	fcall	_getDimmer_LoadGO
 10582  0078  3A01               	xorlw	1
 10583  0079  1D03               	skipz
 10584  007A  2882               	goto	l1610
 10585                           
 10586                           ;OverLoad_B1.c: 53: if (Load.Run == 0 && Load.OK == 0) {
 10587  007B  0022               	movlb	2	; select bank2
 10588  007C  1DBF               	btfss	_Load^(0+256),3
 10589  007D  1BBF               	btfsc	_Load^(0+256),7
 10590  007E  288B               	goto	l1608
 10591                           
 10592                           ;OverLoad_B1.c: 54: Load.Run = 1;
 10593  007F  15BF               	bsf	_Load^(0+256),3
 10594                           
 10595                           ;OverLoad_B1.c: 55: Load.Count = 0;
 10596  0080  01E4               	clrf	(_Load^(0+256)+37)
 10597                           
 10598                           ;OverLoad_B1.c: 56: }
 10599                           ;OverLoad_B1.c: 57: } else {
 10600  0081  288B               	goto	l1608
 10601  0082                     l1610:	
 10602                           
 10603                           ;OverLoad_B1.c: 58: if (Load.OK == 1) {
 10604  0082  0022               	movlb	2	; select bank2
 10605  0083  1FBF               	btfss	_Load^(0+256),7
 10606  0084  288B               	goto	l1608
 10607                           
 10608                           ;OverLoad_B1.c: 59: Load.OK = 0;
 10609  0085  13BF               	bcf	_Load^(0+256),7
 10610                           
 10611                           ;OverLoad_B1.c: 60: }
 10612                           ;OverLoad_B1.c: 61: }
 10613                           ;OverLoad_B1.c: 62: } else {
 10614  0086  288B               	goto	l1608
 10615  0087                     l1609:	
 10616                           
 10617                           ;OverLoad_B1.c: 63: if (Load.GO == 1) {
 10618  0087  0022               	movlb	2	; select bank2
 10619  0088  1CBF               	btfss	_Load^(0+256),1
 10620  0089  288B               	goto	l1608
 10621  008A                     l8784:	
 10622                           
 10623                           ;OverLoad_B1.c: 64: Load.GO = 0;
 10624  008A  10BF               	bcf	_Load^(0+256),1
 10625  008B                     l1608:	
 10626                           
 10627                           ;OverLoad_B1.c: 65: }
 10628                           ;OverLoad_B1.c: 66: }
 10629                           ;OverLoad_B1.c: 88: }
 10630                           ;OverLoad_B1.c: 91: if (Load.GO == 1) {
 10631  008B  1CBF               	btfss	_Load^(0+256),1
 10632  008C  29DB               	goto	l1616
 10633                           
 10634                           ;OverLoad_B1.c: 92: Load.LightsON = 1;
 10635  008D  153F               	bsf	_Load^(0+256),2
 10636                           
 10637                           ;OverLoad_B1.c: 94: if (Load.ADtoGO == 1) {
 10638  008E  1E3F               	btfss	_Load^(0+256),4
 10639  008F  29D9               	goto	l1617
 10640                           
 10641                           ;OverLoad_B1.c: 95: Load.Time++;
 10642  0090  3001               	movlw	1
 10643  0091  07C0               	addwf	(_Load^(0+256)+1),f
 10644  0092  3000               	movlw	0
 10645  0093  3DC1               	addwfc	((_Load+1)^(0+256)+1),f
 10646                           
 10647                           ;OverLoad_B1.c: 96: if (Load.Time >= (40 / 20)) {
 10648  0094  3000               	movlw	0
 10649  0095  0241               	subwf	((_Load+1)^(0+256)+1),w
 10650  0096  3002               	movlw	2
 10651  0097  1903               	skipnz
 10652  0098  0240               	subwf	(_Load^(0+256)+1),w
 10653  0099  1C03               	skipc
 10654  009A  0008               	return
 10655                           
 10656                           ;OverLoad_B1.c: 97: Load.Time = 0;
 10657  009B  01C0               	clrf	(_Load^(0+256)+1)
 10658  009C  01C1               	clrf	((_Load+1)^(0+256)+1)
 10659                           
 10660                           ;OverLoad_B1.c: 98: Load.ADtoGO = 0;
 10661  009D  123F               	bcf	_Load^(0+256),4
 10662                           
 10663                           ;OverLoad_B1.c: 100: for (int i = 1; i < 4; i++) {
 10664  009E  3001               	movlw	1
 10665  009F  0020               	movlb	0	; select bank0
 10666  00A0  00B0               	movwf	Load_Main@i
 10667  00A1  3000               	movlw	0
 10668  00A2  00B1               	movwf	Load_Main@i+1
 10669  00A3  0831               	movf	Load_Main@i+1,w
 10670  00A4  3A80               	xorlw	128
 10671  00A5  00A8               	movwf	??_Load_Main
 10672  00A6  3080               	movlw	128
 10673  00A7  0228               	subwf	??_Load_Main,w
 10674  00A8  1D03               	skipz
 10675  00A9  28AC               	goto	u9645
 10676  00AA  3004               	movlw	4
 10677  00AB  0230               	subwf	Load_Main@i,w
 10678  00AC                     u9645:	
 10679  00AC  1803               	btfsc	3,0
 10680  00AD  28E0               	goto	l8806
 10681  00AE                     l8800:	
 10682                           
 10683                           ;OverLoad_B1.c: 101: Load.ADH += Load.AH[i];
 10684  00AE  0020               	movlb	0	; select bank0
 10685  00AF  3530               	lslf	Load_Main@i,w
 10686  00B0  3E4A               	addlw	(_Load+11)& (0+255)
 10687  00B1  0086               	movwf	6
 10688  00B2  3001               	movlw	1	; select bank2/3
 10689  00B3  0087               	movwf	7
 10690  00B4  3F40               	moviw [0]fsr1
 10691  00B5  00A8               	movwf	??_Load_Main
 10692  00B6  3F41               	moviw [1]fsr1
 10693  00B7  00A9               	movwf	??_Load_Main+1
 10694  00B8  0828               	movf	??_Load_Main,w
 10695  00B9  0022               	movlb	2	; select bank2
 10696  00BA  07C4               	addwf	(_Load^(0+256)+5),f
 10697  00BB  0020               	movlb	0	; select bank0
 10698  00BC  0829               	movf	??_Load_Main+1,w
 10699  00BD  0022               	movlb	2	; select bank2
 10700  00BE  3DC5               	addwfc	((_Load+1)^(0+256)+5),f
 10701                           
 10702                           ;OverLoad_B1.c: 102: Load.ADL += Load.AL[i];
 10703  00BF  0020               	movlb	0	; select bank0
 10704  00C0  3530               	lslf	Load_Main@i,w
 10705  00C1  3E54               	addlw	(_Load+21)& (0+255)
 10706  00C2  0086               	movwf	6
 10707  00C3  3001               	movlw	1	; select bank2/3
 10708  00C4  0087               	movwf	7
 10709  00C5  3F40               	moviw [0]fsr1
 10710  00C6  00A8               	movwf	??_Load_Main
 10711  00C7  3F41               	moviw [1]fsr1
 10712  00C8  00A9               	movwf	??_Load_Main+1
 10713  00C9  0828               	movf	??_Load_Main,w
 10714  00CA  0022               	movlb	2	; select bank2
 10715  00CB  07C6               	addwf	(_Load^(0+256)+7),f
 10716  00CC  0020               	movlb	0	; select bank0
 10717  00CD  0829               	movf	??_Load_Main+1,w
 10718  00CE  0022               	movlb	2	; select bank2
 10719  00CF  3DC7               	addwfc	((_Load+1)^(0+256)+7),f
 10720  00D0  3001               	movlw	1
 10721  00D1  0020               	movlb	0	; select bank0
 10722  00D2  07B0               	addwf	Load_Main@i,f
 10723  00D3  3000               	movlw	0
 10724  00D4  3DB1               	addwfc	Load_Main@i+1,f
 10725  00D5  0831               	movf	Load_Main@i+1,w
 10726  00D6  3A80               	xorlw	128
 10727  00D7  00A8               	movwf	??_Load_Main
 10728  00D8  3080               	movlw	128
 10729  00D9  0228               	subwf	??_Load_Main,w
 10730  00DA  1D03               	skipz
 10731  00DB  28DE               	goto	u9655
 10732  00DC  3004               	movlw	4
 10733  00DD  0230               	subwf	Load_Main@i,w
 10734  00DE                     u9655:	
 10735  00DE  1C03               	skipc
 10736  00DF  28AE               	goto	l8800
 10737  00E0                     l8806:	
 10738                           
 10739                           ;OverLoad_B1.c: 103: }
 10740                           ;OverLoad_B1.c: 104: Load.ADH /= 3;
 10741  00E0  3003               	movlw	3
 10742  00E1  0020               	movlb	0	; select bank0
 10743  00E2  00A0               	movwf	___lwdiv@divisor
 10744  00E3  3000               	movlw	0
 10745  00E4  00A1               	movwf	___lwdiv@divisor+1
 10746  00E5  0022               	movlb	2	; select bank2
 10747  00E6  0845               	movf	((_Load+1)^(0+256)+5),w
 10748  00E7  0020               	movlb	0	; select bank0
 10749  00E8  01A3               	clrf	___lwdiv@dividend+1
 10750  00E9  07A3               	addwf	___lwdiv@dividend+1,f
 10751  00EA  0022               	movlb	2	; select bank2
 10752  00EB  0844               	movf	(_Load^(0+256)+5),w
 10753  00EC  0020               	movlb	0	; select bank0
 10754  00ED  01A2               	clrf	___lwdiv@dividend
 10755  00EE  07A2               	addwf	___lwdiv@dividend,f
 10756  00EF  3190  2095  3180   	fcall	___lwdiv
 10757  00F2  0020               	movlb	0	; select bank0
 10758  00F3  0821               	movf	?___lwdiv+1,w
 10759  00F4  0022               	movlb	2	; select bank2
 10760  00F5  01C5               	clrf	((_Load+1)^(0+256)+5)
 10761  00F6  07C5               	addwf	((_Load+1)^(0+256)+5),f
 10762  00F7  0020               	movlb	0	; select bank0
 10763  00F8  0820               	movf	?___lwdiv,w
 10764  00F9  0022               	movlb	2	; select bank2
 10765  00FA  01C4               	clrf	(_Load^(0+256)+5)
 10766  00FB  07C4               	addwf	(_Load^(0+256)+5),f
 10767                           
 10768                           ;OverLoad_B1.c: 105: Load.ADL /= 3;
 10769  00FC  3003               	movlw	3
 10770  00FD  0020               	movlb	0	; select bank0
 10771  00FE  00A0               	movwf	___lwdiv@divisor
 10772  00FF  3000               	movlw	0
 10773  0100  00A1               	movwf	___lwdiv@divisor+1
 10774  0101  0022               	movlb	2	; select bank2
 10775  0102  0847               	movf	((_Load+1)^(0+256)+7),w
 10776  0103  0020               	movlb	0	; select bank0
 10777  0104  01A3               	clrf	___lwdiv@dividend+1
 10778  0105  07A3               	addwf	___lwdiv@dividend+1,f
 10779  0106  0022               	movlb	2	; select bank2
 10780  0107  0846               	movf	(_Load^(0+256)+7),w
 10781  0108  0020               	movlb	0	; select bank0
 10782  0109  01A2               	clrf	___lwdiv@dividend
 10783  010A  07A2               	addwf	___lwdiv@dividend,f
 10784  010B  3190  2095  3180   	fcall	___lwdiv
 10785  010E  0020               	movlb	0	; select bank0
 10786  010F  0821               	movf	?___lwdiv+1,w
 10787  0110  0022               	movlb	2	; select bank2
 10788  0111  01C7               	clrf	((_Load+1)^(0+256)+7)
 10789  0112  07C7               	addwf	((_Load+1)^(0+256)+7),f
 10790  0113  0020               	movlb	0	; select bank0
 10791  0114  0820               	movf	?___lwdiv,w
 10792  0115  0022               	movlb	2	; select bank2
 10793  0116  01C6               	clrf	(_Load^(0+256)+7)
 10794  0117  07C6               	addwf	(_Load^(0+256)+7),f
 10795                           
 10796                           ;OverLoad_B1.c: 106: setLoad_AH_AL_Restore();
 10797  0118  319C  24CA  3180   	fcall	_setLoad_AH_AL_Restore
 10798                           
 10799                           ;OverLoad_B1.c: 108: if (Load.ADH >= Load.ADL) {
 10800  011B  0022               	movlb	2	; select bank2
 10801  011C  0847               	movf	((_Load+1)^(0+256)+7),w
 10802  011D  0245               	subwf	((_Load+1)^(0+256)+5),w
 10803  011E  1D03               	skipz
 10804  011F  2922               	goto	u9665
 10805  0120  0846               	movf	(_Load^(0+256)+7),w
 10806  0121  0244               	subwf	(_Load^(0+256)+5),w
 10807  0122                     u9665:	
 10808  0122  1C03               	skipc
 10809  0123  0008               	return
 10810                           
 10811                           ;OverLoad_B1.c: 109: Load.AD = Load.ADH - Load.ADL;
 10812  0124  3005               	movlw	5
 10813  0125  3E3F               	addlw	_Load& (0+255)
 10814  0126  0086               	movwf	6
 10815  0127  3001               	movlw	1	; select bank2/3
 10816  0128  0087               	movwf	7
 10817  0129  0946               	comf	(_Load^(0+256)+7),w
 10818  012A  0020               	movlb	0	; select bank0
 10819  012B  00A8               	movwf	??_Load_Main
 10820  012C  0022               	movlb	2	; select bank2
 10821  012D  0947               	comf	((_Load+1)^(0+256)+7),w
 10822  012E  0020               	movlb	0	; select bank0
 10823  012F  00A9               	movwf	??_Load_Main+1
 10824  0130  0AA8               	incf	??_Load_Main,f
 10825  0131  1903               	skipnz
 10826  0132  0AA9               	incf	??_Load_Main+1,f
 10827  0133  3F40               	moviw [0]fsr1
 10828  0134  0728               	addwf	??_Load_Main,w
 10829  0135  0022               	movlb	2	; select bank2
 10830  0136  00DE               	movwf	(_Load^(0+256)+31)
 10831  0137  3F41               	moviw [1]fsr1
 10832  0138  0020               	movlb	0	; select bank0
 10833  0139  3D29               	addwfc	??_Load_Main+1,w
 10834  013A  0022               	movlb	2	; select bank2
 10835  013B  00DF               	movwf	(_Load^(0+256)+32)
 10836                           
 10837                           ;OverLoad_B1.c: 110: Load.ADH = 0;
 10838  013C  01C4               	clrf	(_Load^(0+256)+5)
 10839  013D  01C5               	clrf	((_Load+1)^(0+256)+5)
 10840                           
 10841                           ;OverLoad_B1.c: 111: Load.ADL = 0;
 10842  013E  01C6               	clrf	(_Load^(0+256)+7)
 10843  013F  01C7               	clrf	((_Load+1)^(0+256)+7)
 10844                           
 10845                           ;OverLoad_B1.c: 113: if (Load.Run == 1) {
 10846  0140  1DBF               	btfss	_Load^(0+256),3
 10847  0141  299B               	goto	l8846
 10848                           
 10849                           ;OverLoad_B1.c: 114: if (Load.Count < 2) {
 10850  0142  3002               	movlw	2
 10851  0143  0264               	subwf	(_Load^(0+256)+37),w
 10852  0144  1803               	skipnc
 10853  0145  299B               	goto	l8846
 10854                           
 10855                           ;OverLoad_B1.c: 115: Load.Count++;
 10856  0146  3001               	movlw	1
 10857  0147  0020               	movlb	0	; select bank0
 10858  0148  00A8               	movwf	??_Load_Main
 10859  0149  0828               	movf	??_Load_Main,w
 10860  014A  0022               	movlb	2	; select bank2
 10861  014B  07E4               	addwf	(_Load^(0+256)+37),f
 10862                           
 10863                           ;OverLoad_B1.c: 117: Load_RunStatus = getDimmer_Load_Status();
 10864  014C  3199  212B  3180   	fcall	_getDimmer_Load_Status
 10865  014F  0020               	movlb	0	; select bank0
 10866  0150  00A8               	movwf	??_Load_Main
 10867  0151  0828               	movf	??_Load_Main,w
 10868  0152  00AE               	movwf	Load_Main@Load_RunStatus
 10869                           
 10870                           ;OverLoad_B1.c: 122: LightsCount = getMain_Lights_Count();
 10871  0153  319A  2294  3180   	fcall	_getMain_Lights_Count
 10872  0156  0020               	movlb	0	; select bank0
 10873  0157  00A8               	movwf	??_Load_Main
 10874  0158  0828               	movf	??_Load_Main,w
 10875  0159  00AF               	movwf	Load_Main@LightsCount
 10876                           
 10877                           ;OverLoad_B1.c: 124: if (Load.Count == 1) {
 10878  015A  0022               	movlb	2	; select bank2
 10879  015B  0864               	movf	(_Load^(0+256)+37),w
 10880  015C  3A01               	xorlw	1
 10881  015D  1D03               	skipz
 10882  015E  2963               	goto	l8832
 10883                           
 10884                           ;OverLoad_B1.c: 126: Load.JudgeValue = (20*85);
 10885  015F  30A4               	movlw	164
 10886  0160  00E2               	movwf	(_Load^(0+256)+35)
 10887  0161  3006               	movlw	6
 10888  0162  2970               	goto	L7
 10889  0163                     l8832:	
 10890                           ;OverLoad_B1.c: 127: } else if (Load.Count == 2) {
 10891                           
 10892  0163  0864               	movf	(_Load^(0+256)+37),w
 10893  0164  3A02               	xorlw	2
 10894  0165  1D03               	skipz
 10895  0166  299B               	goto	l8846
 10896                           
 10897                           ;OverLoad_B1.c: 128: if (LightsCount == 1) {
 10898  0167  0020               	movlb	0	; select bank0
 10899  0168  082F               	movf	Load_Main@LightsCount,w
 10900  0169  3A01               	xorlw	1
 10901  016A  1D03               	skipz
 10902  016B  2972               	goto	l8838
 10903                           
 10904                           ;OverLoad_B1.c: 129: Load.JudgeValue = (int)(1.1*85);
 10905  016C  305D               	movlw	93
 10906  016D  0022               	movlb	2	; select bank2
 10907  016E  00E2               	movwf	(_Load^(0+256)+35)
 10908  016F  3000               	movlw	0
 10909  0170                     L7:	
 10910  0170  00E3               	movwf	(_Load^(0+256)+36)
 10911                           
 10912                           ;OverLoad_B1.c: 130: } else {
 10913  0171  299B               	goto	l8846
 10914  0172                     l8838:	
 10915                           
 10916                           ;OverLoad_B1.c: 131: if (Load_RunStatus == 0) {
 10917  0172  0020               	movlb	0	; select bank0
 10918  0173  08AE               	movf	Load_Main@Load_RunStatus,f
 10919  0174  1D03               	skipz
 10920  0175  298F               	goto	l8842
 10921                           
 10922                           ;OverLoad_B1.c: 132: Load.JudgeValue = (int)(1.1*85) * LightsCount;
 10923  0176  082F               	movf	Load_Main@LightsCount,w
 10924  0177  00A8               	movwf	??_Load_Main
 10925  0178  01A9               	clrf	??_Load_Main+1
 10926  0179  0828               	movf	??_Load_Main,w
 10927  017A  00A0               	movwf	___wmul@multiplier
 10928  017B  0829               	movf	??_Load_Main+1,w
 10929  017C  00A1               	movwf	___wmul@multiplier+1
 10930  017D  305D               	movlw	93
 10931  017E  00A2               	movwf	___wmul@multiplicand
 10932  017F  3000               	movlw	0
 10933  0180  00A3               	movwf	___wmul@multiplicand+1
 10934  0181  319D  2520  3180   	fcall	___wmul
 10935  0184  0020               	movlb	0	; select bank0
 10936  0185  0821               	movf	?___wmul+1,w
 10937  0186  0022               	movlb	2	; select bank2
 10938  0187  01E3               	clrf	((_Load+1)^(0+256)+35)
 10939  0188  07E3               	addwf	((_Load+1)^(0+256)+35),f
 10940  0189  0020               	movlb	0	; select bank0
 10941  018A  0820               	movf	?___wmul,w
 10942  018B  0022               	movlb	2	; select bank2
 10943  018C  01E2               	clrf	(_Load^(0+256)+35)
 10944  018D  07E2               	addwf	(_Load^(0+256)+35),f
 10945                           
 10946                           ;OverLoad_B1.c: 133: } else if (Load_RunStatus == 1) {
 10947  018E  299B               	goto	l8846
 10948  018F                     l8842:	
 10949  018F  0020               	movlb	0	; select bank0
 10950  0190  082E               	movf	Load_Main@Load_RunStatus,w
 10951  0191  3A01               	xorlw	1
 10952  0192  1D03               	skipz
 10953  0193  299B               	goto	l8846
 10954                           
 10955                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(1.1*85) + Load.TotalLoad;
 10956  0194  0022               	movlb	2	; select bank2
 10957  0195  0848               	movf	(_Load^(0+256)+9),w
 10958  0196  3E5D               	addlw	93
 10959  0197  00E2               	movwf	(_Load^(0+256)+35)
 10960  0198  3000               	movlw	0
 10961  0199  3D49               	addwfc	((_Load+1)^(0+256)+9),w
 10962  019A  00E3               	movwf	((_Load+1)^(0+256)+35)
 10963  019B                     l8846:	
 10964                           
 10965                           ;OverLoad_B1.c: 135: }
 10966                           ;OverLoad_B1.c: 136: }
 10967                           ;OverLoad_B1.c: 137: }
 10968                           ;OverLoad_B1.c: 138: }
 10969                           ;OverLoad_B1.c: 139: }
 10970                           ;OverLoad_B1.c: 141: if (Load.AD >= Load.JudgeValue) {
 10971  019B  0022               	movlb	2	; select bank2
 10972  019C  0863               	movf	((_Load+1)^(0+256)+35),w
 10973  019D  025F               	subwf	((_Load+1)^(0+256)+31),w
 10974  019E  1D03               	skipz
 10975  019F  29A2               	goto	u9745
 10976  01A0  0862               	movf	(_Load^(0+256)+35),w
 10977  01A1  025E               	subwf	(_Load^(0+256)+31),w
 10978  01A2                     u9745:	
 10979  01A2  1C03               	skipc
 10980  01A3  29C1               	goto	l8862
 10981                           
 10982                           ;OverLoad_B1.c: 142: ErrorCountValue = LightsCount == 1 ? 2 : 3;
 10983  01A4  0020               	movlb	0	; select bank0
 10984  01A5  082F               	movf	Load_Main@LightsCount,w
 10985  01A6  3A01               	xorlw	1
 10986  01A7  1903               	skipnz
 10987  01A8  29AB               	goto	l8852
 10988  01A9  3003               	movlw	3
 10989  01AA  29AC               	goto	L8
 10990  01AB                     l8852:	
 10991  01AB  3002               	movlw	2
 10992  01AC                     L8:	
 10993  01AC  00AA               	movwf	_Load_Main$3687
 10994  01AD  3000               	movlw	0
 10995  01AE  00AB               	movwf	_Load_Main$3687+1
 10996  01AF  082A               	movf	_Load_Main$3687,w
 10997  01B0  00A8               	movwf	??_Load_Main
 10998  01B1  0828               	movf	??_Load_Main,w
 10999  01B2  00AD               	movwf	Load_Main@ErrorCountValue
 11000                           
 11001                           ;OverLoad_B1.c: 143: Load.ErrorCount++;
 11002  01B3  3001               	movlw	1
 11003  01B4  00A8               	movwf	??_Load_Main
 11004  01B5  0828               	movf	??_Load_Main,w
 11005  01B6  0022               	movlb	2	; select bank2
 11006  01B7  07E5               	addwf	(_Load^(0+256)+38),f
 11007                           
 11008                           ;OverLoad_B1.c: 144: if (Load.ErrorCount > ErrorCountValue) {
 11009  01B8  0865               	movf	(_Load^(0+256)+38),w
 11010  01B9  0020               	movlb	0	; select bank0
 11011  01BA  022D               	subwf	Load_Main@ErrorCountValue,w
 11012  01BB  1803               	skipnc
 11013  01BC  0008               	return
 11014                           
 11015                           ;OverLoad_B1.c: 145: Load.ErrorCount = 0;
 11016  01BD  0022               	movlb	2	; select bank2
 11017  01BE  01E5               	clrf	(_Load^(0+256)+38)
 11018                           
 11019                           ;OverLoad_B1.c: 146: Load.ERROR = 1;
 11020  01BF  16BF               	bsf	_Load^(0+256),5
 11021                           
 11022                           ;OverLoad_B1.c: 168: }
 11023                           ;OverLoad_B1.c: 169: } else {
 11024  01C0  0008               	return
 11025  01C1                     l8862:	
 11026                           
 11027                           ;OverLoad_B1.c: 170: Load.ErrorCount = 0;
 11028  01C1  01E5               	clrf	(_Load^(0+256)+38)
 11029                           
 11030                           ;OverLoad_B1.c: 171: if (Load.Run == 1) {
 11031  01C2  1DBF               	btfss	_Load^(0+256),3
 11032  01C3  0008               	return
 11033                           
 11034                           ;OverLoad_B1.c: 172: Load.SafeCount++;
 11035  01C4  3001               	movlw	1
 11036  01C5  0020               	movlb	0	; select bank0
 11037  01C6  00A8               	movwf	??_Load_Main
 11038  01C7  0828               	movf	??_Load_Main,w
 11039  01C8  0022               	movlb	2	; select bank2
 11040  01C9  07E6               	addwf	(_Load^(0+256)+39),f
 11041                           
 11042                           ;OverLoad_B1.c: 173: if (Load.SafeCount >= 3) {
 11043  01CA  3003               	movlw	3
 11044  01CB  0266               	subwf	(_Load^(0+256)+39),w
 11045  01CC  1C03               	skipc
 11046  01CD  0008               	return
 11047                           
 11048                           ;OverLoad_B1.c: 174: Load.SafeCount = 0;
 11049  01CE  01E6               	clrf	(_Load^(0+256)+39)
 11050                           
 11051                           ;OverLoad_B1.c: 175: Load.OK = 1;
 11052  01CF  17BF               	bsf	_Load^(0+256),7
 11053                           
 11054                           ;OverLoad_B1.c: 176: Load.Run = 0;
 11055  01D0  11BF               	bcf	_Load^(0+256),3
 11056                           
 11057                           ;OverLoad_B1.c: 177: Load.Count = 0;
 11058  01D1  01E4               	clrf	(_Load^(0+256)+37)
 11059                           
 11060                           ;OverLoad_B1.c: 178: Load.TotalLoad = Load.AD;
 11061  01D2  085F               	movf	((_Load+1)^(0+256)+31),w
 11062  01D3  01C9               	clrf	((_Load+1)^(0+256)+9)
 11063  01D4  07C9               	addwf	((_Load+1)^(0+256)+9),f
 11064  01D5  085E               	movf	(_Load^(0+256)+31),w
 11065  01D6  01C8               	clrf	(_Load^(0+256)+9)
 11066  01D7  07C8               	addwf	(_Load^(0+256)+9),f
 11067                           
 11068                           ;OverLoad_B1.c: 182: }
 11069                           ;OverLoad_B1.c: 183: }
 11070                           ;OverLoad_B1.c: 206: }
 11071                           ;OverLoad_B1.c: 207: }
 11072                           ;OverLoad_B1.c: 208: }
 11073                           ;OverLoad_B1.c: 209: } else {
 11074  01D8  0008               	return
 11075  01D9                     l1617:	
 11076                           
 11077                           ;OverLoad_B1.c: 210: Load.ADtoGO = 1;
 11078  01D9  163F               	bsf	_Load^(0+256),4
 11079                           
 11080                           ;OverLoad_B1.c: 211: }
 11081                           ;OverLoad_B1.c: 212: } else {
 11082  01DA  0008               	return
 11083  01DB                     l1616:	
 11084                           
 11085                           ;OverLoad_B1.c: 214: if (Load.LightsON == 1) {
 11086  01DB  1D3F               	btfss	_Load^(0+256),2
 11087  01DC  29EE               	goto	l8898
 11088                           
 11089                           ;OverLoad_B1.c: 215: Load.LightsON = 0;
 11090  01DD  113F               	bcf	_Load^(0+256),2
 11091                           
 11092                           ;OverLoad_B1.c: 217: Load.ADtoGO = 0;
 11093  01DE  123F               	bcf	_Load^(0+256),4
 11094                           
 11095                           ;OverLoad_B1.c: 218: Load.Time = 0;
 11096  01DF  01C0               	clrf	(_Load^(0+256)+1)
 11097  01E0  01C1               	clrf	((_Load+1)^(0+256)+1)
 11098                           
 11099                           ;OverLoad_B1.c: 219: setLoad_AH_AL_Restore();
 11100  01E1  319C  24CA  3180   	fcall	_setLoad_AH_AL_Restore
 11101                           
 11102                           ;OverLoad_B1.c: 221: Load.ErrorCount = 0;
 11103  01E4  0022               	movlb	2	; select bank2
 11104  01E5  01E5               	clrf	(_Load^(0+256)+38)
 11105                           
 11106                           ;OverLoad_B1.c: 222: Load.SafeCount = 0;
 11107  01E6  01E6               	clrf	(_Load^(0+256)+39)
 11108                           
 11109                           ;OverLoad_B1.c: 224: Load.ADH = 0;
 11110  01E7  01C4               	clrf	(_Load^(0+256)+5)
 11111  01E8  01C5               	clrf	((_Load+1)^(0+256)+5)
 11112                           
 11113                           ;OverLoad_B1.c: 225: Load.ADL = 0;
 11114  01E9  01C6               	clrf	(_Load^(0+256)+7)
 11115  01EA  01C7               	clrf	((_Load+1)^(0+256)+7)
 11116                           
 11117                           ;OverLoad_B1.c: 231: Load.Run = 0;
 11118  01EB  11BF               	bcf	_Load^(0+256),3
 11119                           
 11120                           ;OverLoad_B1.c: 232: Load.Count = 0;
 11121  01EC  01E4               	clrf	(_Load^(0+256)+37)
 11122                           
 11123                           ;OverLoad_B1.c: 233: Load.OK = 0;
 11124  01ED  13BF               	bcf	_Load^(0+256),7
 11125  01EE                     l8898:	
 11126                           
 11127                           ;OverLoad_B1.c: 255: }
 11128                           ;OverLoad_B1.c: 256: if (Load.ERROR == 1) {
 11129  01EE  1EBF               	btfss	_Load^(0+256),5
 11130  01EF  0008               	return
 11131                           
 11132                           ;OverLoad_B1.c: 257: Load.ErrorTime++;
 11133  01F0  3001               	movlw	1
 11134  01F1  07C2               	addwf	(_Load^(0+256)+3),f
 11135  01F2  3000               	movlw	0
 11136  01F3  3DC3               	addwfc	((_Load+1)^(0+256)+3),f
 11137                           
 11138                           ;OverLoad_B1.c: 258: if (Load.ErrorTime >= (10000 / 20)) {
 11139  01F4  3001               	movlw	1
 11140  01F5  0243               	subwf	((_Load+1)^(0+256)+3),w
 11141  01F6  30F4               	movlw	244
 11142  01F7  1903               	skipnz
 11143  01F8  0242               	subwf	(_Load^(0+256)+3),w
 11144  01F9  1C03               	skipc
 11145  01FA  0008               	return
 11146                           
 11147                           ;OverLoad_B1.c: 259: Load.ErrorTime = 0;
 11148  01FB  01C2               	clrf	(_Load^(0+256)+3)
 11149  01FC  01C3               	clrf	((_Load+1)^(0+256)+3)
 11150                           
 11151                           ;OverLoad_B1.c: 260: Load.ERROR = 0;
 11152  01FD  12BF               	bcf	_Load^(0+256),5
 11153                           
 11154                           ;OverLoad_B1.c: 261: }
 11155                           ;OverLoad_B1.c: 262: }
 11156                           ;OverLoad_B1.c: 263: }
 11157                           ;OverLoad_B1.c: 264: } else {
 11158  01FE  0008               	return
 11159  01FF                     l1606:	
 11160                           
 11161                           ;OverLoad_B1.c: 265: if (myMain.PowerON == 1) {
 11162  01FF  0021               	movlb	1	; select bank1
 11163  0200  1C2E               	btfss	_myMain^(0+128),0
 11164  0201  0008               	return
 11165                           
 11166                           ;OverLoad_B1.c: 266: Load.Enable = 1;
 11167  0202  0022               	movlb	2	; select bank2
 11168  0203  143F               	bsf	_Load^(0+256),0
 11169  0204  0008               	return
 11170  0205                     __end_of_Load_Main:	
 11171                           
 11172                           	psect	text63
 11173  1A94                     __ptext63:	
 11174 ;; *************** function _getMain_Lights_Count *****************
 11175 ;; Defined at:
 11176 ;;		line 459 in file "../src/main_B1.c"
 11177 ;; Parameters:    Size  Location     Type
 11178 ;;		None
 11179 ;; Auto vars:     Size  Location     Type
 11180 ;;  status2         1    2[BANK0 ] unsigned char 
 11181 ;;  status1         1    1[BANK0 ] unsigned char 
 11182 ;;  count           1    0[BANK0 ] unsigned char 
 11183 ;; Return value:  Size  Location     Type
 11184 ;;                  1    wreg      unsigned char 
 11185 ;; Registers used:
 11186 ;;		wreg, status,2, status,0
 11187 ;; Tracked objects:
 11188 ;;		On entry : 0/0
 11189 ;;		On exit  : 0/0
 11190 ;;		Unchanged: 0/0
 11191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11193 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11195 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11196 ;;Total ram usage:        3 bytes
 11197 ;; Hardware stack levels used:    1
 11198 ;; Hardware stack levels required when called:    5
 11199 ;; This function calls:
 11200 ;;		Nothing
 11201 ;; This function is called by:
 11202 ;;		_Load_Main
 11203 ;; This function uses a non-reentrant model
 11204 ;;
 11205                           
 11206                           
 11207                           ;psect for function _getMain_Lights_Count
 11208  1A94                     _getMain_Lights_Count:	
 11209                           
 11210                           ;main_B1.c: 460: char count = 0;
 11211                           
 11212                           ;incstack = 0
 11213                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 11214  1A94  0020               	movlb	0	; select bank0
 11215  1A95  01A0               	clrf	getMain_Lights_Count@count
 11216                           
 11217                           ;main_B1.c: 464: char status1 = DimmerIntr1.ControlStatus == 1 ? 1 : 0;
 11218  1A96  3000               	movlw	0
 11219  1A97  0021               	movlb	1	; select bank1
 11220  1A98  19BB               	btfsc	_DimmerIntr1^(0+128),3
 11221  1A99  3001               	movlw	1
 11222  1A9A  0020               	movlb	0	; select bank0
 11223  1A9B  00A1               	movwf	getMain_Lights_Count@status1
 11224                           
 11225                           ;main_B1.c: 467: char status2 = DimmerIntr2.ControlStatus == 1 ? 1 : 0;
 11226  1A9C  3000               	movlw	0
 11227  1A9D  0021               	movlb	1	; select bank1
 11228  1A9E  19C7               	btfsc	_DimmerIntr2^(0+128),3
 11229  1A9F  3001               	movlw	1
 11230  1AA0  0020               	movlb	0	; select bank0
 11231  1AA1  00A2               	movwf	getMain_Lights_Count@status2
 11232                           
 11233                           ;main_B1.c: 490: return count = (status1 + status2);
 11234  1AA2  0821               	movf	getMain_Lights_Count@status1,w
 11235  1AA3  0722               	addwf	getMain_Lights_Count@status2,w
 11236  1AA4  00A0               	movwf	getMain_Lights_Count@count
 11237  1AA5  0008               	return
 11238  1AA6                     __end_of_getMain_Lights_Count:	
 11239                           
 11240                           	psect	text64
 11241  192B                     __ptext64:	
 11242 ;; *************** function _getDimmer_Load_Status *****************
 11243 ;; Defined at:
 11244 ;;		line 1151 in file "../src/Dimmer_B1.c"
 11245 ;; Parameters:    Size  Location     Type
 11246 ;;		None
 11247 ;; Auto vars:     Size  Location     Type
 11248 ;;  status          1    0[BANK0 ] unsigned char 
 11249 ;; Return value:  Size  Location     Type
 11250 ;;                  1    wreg      unsigned char 
 11251 ;; Registers used:
 11252 ;;		wreg, status,2
 11253 ;; Tracked objects:
 11254 ;;		On entry : 0/0
 11255 ;;		On exit  : 0/0
 11256 ;;		Unchanged: 0/0
 11257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11259 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11261 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11262 ;;Total ram usage:        1 bytes
 11263 ;; Hardware stack levels used:    1
 11264 ;; Hardware stack levels required when called:    5
 11265 ;; This function calls:
 11266 ;;		Nothing
 11267 ;; This function is called by:
 11268 ;;		_Load_Main
 11269 ;; This function uses a non-reentrant model
 11270 ;;
 11271                           
 11272                           
 11273                           ;psect for function _getDimmer_Load_Status
 11274  192B                     _getDimmer_Load_Status:	
 11275                           
 11276                           ;Dimmer_B1.c: 1152: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11277                           
 11278                           ;incstack = 0
 11279                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11280  192B  3000               	movlw	0
 11281  192C  0022               	movlb	2	; select bank2
 11282  192D  192C               	btfsc	_Dimmer^(0+256),2
 11283  192E  3001               	movlw	1
 11284  192F  0020               	movlb	0	; select bank0
 11285  1930  00A0               	movwf	getDimmer_Load_Status@status
 11286                           
 11287                           ;Dimmer_B1.c: 1153: return status;
 11288  1931  0820               	movf	getDimmer_Load_Status@status,w
 11289  1932  0008               	return
 11290  1933                     __end_of_getDimmer_Load_Status:	
 11291                           
 11292                           	psect	text65
 11293  1923                     __ptext65:	
 11294 ;; *************** function _getDimmer_LoadGO *****************
 11295 ;; Defined at:
 11296 ;;		line 1145 in file "../src/Dimmer_B1.c"
 11297 ;; Parameters:    Size  Location     Type
 11298 ;;		None
 11299 ;; Auto vars:     Size  Location     Type
 11300 ;;  loadgo          1    0[BANK0 ] unsigned char 
 11301 ;; Return value:  Size  Location     Type
 11302 ;;                  1    wreg      unsigned char 
 11303 ;; Registers used:
 11304 ;;		wreg, status,2
 11305 ;; Tracked objects:
 11306 ;;		On entry : 0/0
 11307 ;;		On exit  : 0/0
 11308 ;;		Unchanged: 0/0
 11309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11311 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11312 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11313 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11314 ;;Total ram usage:        1 bytes
 11315 ;; Hardware stack levels used:    1
 11316 ;; Hardware stack levels required when called:    5
 11317 ;; This function calls:
 11318 ;;		Nothing
 11319 ;; This function is called by:
 11320 ;;		_Load_Main
 11321 ;; This function uses a non-reentrant model
 11322 ;;
 11323                           
 11324                           
 11325                           ;psect for function _getDimmer_LoadGO
 11326  1923                     _getDimmer_LoadGO:	
 11327                           
 11328                           ;Dimmer_B1.c: 1146: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11329                           
 11330                           ;incstack = 0
 11331                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11332  1923  3000               	movlw	0
 11333  1924  0022               	movlb	2	; select bank2
 11334  1925  18AC               	btfsc	_Dimmer^(0+256),1
 11335  1926  3001               	movlw	1
 11336  1927  0020               	movlb	0	; select bank0
 11337  1928  00A0               	movwf	getDimmer_LoadGO@loadgo
 11338                           
 11339                           ;Dimmer_B1.c: 1147: return loadgo;
 11340  1929  0820               	movf	getDimmer_LoadGO@loadgo,w
 11341  192A  0008               	return
 11342  192B                     __end_of_getDimmer_LoadGO:	
 11343                           
 11344                           	psect	text66
 11345  1E1D                     __ptext66:	
 11346 ;; *************** function _getAll_DimmerIntr_Dimming_Sw_RF *****************
 11347 ;; Defined at:
 11348 ;;		line 280 in file "../src/Dimmer_B1.c"
 11349 ;; Parameters:    Size  Location     Type
 11350 ;;		None
 11351 ;; Auto vars:     Size  Location     Type
 11352 ;;  status          1    3[BANK0 ] unsigned char 
 11353 ;; Return value:  Size  Location     Type
 11354 ;;                  1    wreg      unsigned char 
 11355 ;; Registers used:
 11356 ;;		wreg, status,2, status,0
 11357 ;; Tracked objects:
 11358 ;;		On entry : 0/0
 11359 ;;		On exit  : 0/0
 11360 ;;		Unchanged: 0/0
 11361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11362 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11363 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11364 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11365 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11366 ;;Total ram usage:        4 bytes
 11367 ;; Hardware stack levels used:    1
 11368 ;; Hardware stack levels required when called:    5
 11369 ;; This function calls:
 11370 ;;		Nothing
 11371 ;; This function is called by:
 11372 ;;		_Load_Main
 11373 ;; This function uses a non-reentrant model
 11374 ;;
 11375                           
 11376                           
 11377                           ;psect for function _getAll_DimmerIntr_Dimming_Sw_RF
 11378  1E1D                     _getAll_DimmerIntr_Dimming_Sw_RF:	
 11379                           
 11380                           ;Dimmer_B1.c: 281: char status = 0;
 11381                           
 11382                           ;incstack = 0
 11383                           ; Regs used in _getAll_DimmerIntr_Dimming_Sw_RF: [wreg+status,2+status,0]
 11384  1E1D  0020               	movlb	0	; select bank0
 11385  1E1E  01A3               	clrf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11386                           
 11387                           ;Dimmer_B1.c: 288: status = (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr2.Dimming_Sw == 1)
      +                           ? 1 : 0;
 11388  1E1F  01A1               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2293
 11389  1E20  0AA1               	incf	_getAll_DimmerIntr_Dimming_Sw_RF$2293,f
 11390  1E21  0021               	movlb	1	; select bank1
 11391  1E22  1E3B               	btfss	_DimmerIntr1^(0+128),4
 11392  1E23  1A47               	btfsc	_DimmerIntr2^(0+128),4
 11393  1E24  2E27               	goto	l7872
 11394  1E25  0020               	movlb	0	; select bank0
 11395  1E26  01A1               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2293
 11396  1E27                     l7872:	
 11397  1E27  0020               	movlb	0	; select bank0
 11398  1E28  0821               	movf	_getAll_DimmerIntr_Dimming_Sw_RF$2293,w
 11399  1E29  00A0               	movwf	??_getAll_DimmerIntr_Dimming_Sw_RF
 11400  1E2A  0820               	movf	??_getAll_DimmerIntr_Dimming_Sw_RF,w
 11401  1E2B  00A3               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11402                           
 11403                           ;Dimmer_B1.c: 296: if (status == 0) {
 11404  1E2C  08A3               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,f
 11405  1E2D  1D03               	skipz
 11406  1E2E  2E3C               	goto	l7884
 11407                           
 11408                           ;Dimmer_B1.c: 302: status = (DimmerIntr1.Dimming_RF == 1 || DimmerIntr2.Dimming_RF == 1)
      +                           ? 1 : 0;
 11409  1E2F  01A2               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2294
 11410  1E30  0AA2               	incf	_getAll_DimmerIntr_Dimming_Sw_RF$2294,f
 11411  1E31  0021               	movlb	1	; select bank1
 11412  1E32  1F3B               	btfss	_DimmerIntr1^(0+128),6
 11413  1E33  1B47               	btfsc	_DimmerIntr2^(0+128),6
 11414  1E34  2E37               	goto	l7882
 11415  1E35  0020               	movlb	0	; select bank0
 11416  1E36  01A2               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2294
 11417  1E37                     l7882:	
 11418  1E37  0020               	movlb	0	; select bank0
 11419  1E38  0822               	movf	_getAll_DimmerIntr_Dimming_Sw_RF$2294,w
 11420  1E39  00A0               	movwf	??_getAll_DimmerIntr_Dimming_Sw_RF
 11421  1E3A  0820               	movf	??_getAll_DimmerIntr_Dimming_Sw_RF,w
 11422  1E3B  00A3               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11423  1E3C                     l7884:	
 11424                           
 11425                           ;Dimmer_B1.c: 308: }
 11426                           ;Dimmer_B1.c: 310: return status;
 11427  1E3C  0823               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,w
 11428  1E3D  0008               	return
 11429  1E3E                     __end_of_getAll_DimmerIntr_Dimming_Sw_RF:	
 11430                           
 11431                           	psect	text67
 11432  1D20                     __ptext67:	
 11433 ;; *************** function ___wmul *****************
 11434 ;; Defined at:
 11435 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11436 ;; Parameters:    Size  Location     Type
 11437 ;;  multiplier      2    0[BANK0 ] unsigned int 
 11438 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 11439 ;; Auto vars:     Size  Location     Type
 11440 ;;  product         2    4[BANK0 ] unsigned int 
 11441 ;; Return value:  Size  Location     Type
 11442 ;;                  2    0[BANK0 ] unsigned int 
 11443 ;; Registers used:
 11444 ;;		wreg, status,2, status,0
 11445 ;; Tracked objects:
 11446 ;;		On entry : 0/0
 11447 ;;		On exit  : 0/0
 11448 ;;		Unchanged: 0/0
 11449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11450 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11451 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11453 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11454 ;;Total ram usage:        6 bytes
 11455 ;; Hardware stack levels used:    1
 11456 ;; Hardware stack levels required when called:    5
 11457 ;; This function calls:
 11458 ;;		Nothing
 11459 ;; This function is called by:
 11460 ;;		_Load_Main
 11461 ;; This function uses a non-reentrant model
 11462 ;;
 11463                           
 11464                           
 11465                           ;psect for function ___wmul
 11466  1D20                     ___wmul:	
 11467                           
 11468                           ;incstack = 0
 11469                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11470  1D20  0020               	movlb	0	; select bank0
 11471  1D21  01A4               	clrf	___wmul@product
 11472  1D22  01A5               	clrf	___wmul@product+1
 11473  1D23                     l8548:	
 11474  1D23  1C20               	btfss	___wmul@multiplier,0
 11475  1D24  2D29               	goto	l3019
 11476  1D25  0822               	movf	___wmul@multiplicand,w
 11477  1D26  07A4               	addwf	___wmul@product,f
 11478  1D27  0823               	movf	___wmul@multiplicand+1,w
 11479  1D28  3DA5               	addwfc	___wmul@product+1,f
 11480  1D29                     l3019:	
 11481  1D29  3001               	movlw	1
 11482  1D2A                     u9145:	
 11483  1D2A  35A2               	lslf	___wmul@multiplicand,f
 11484  1D2B  0DA3               	rlf	___wmul@multiplicand+1,f
 11485  1D2C  0B89               	decfsz	9,f
 11486  1D2D  2D2A               	goto	u9145
 11487  1D2E  3001               	movlw	1
 11488  1D2F                     u9155:	
 11489  1D2F  36A1               	lsrf	___wmul@multiplier+1,f
 11490  1D30  0CA0               	rrf	___wmul@multiplier,f
 11491  1D31  0B89               	decfsz	9,f
 11492  1D32  2D2F               	goto	u9155
 11493  1D33  0821               	movf	___wmul@multiplier+1,w
 11494  1D34  0420               	iorwf	___wmul@multiplier,w
 11495  1D35  1D03               	skipz
 11496  1D36  2D23               	goto	l8548
 11497  1D37  0825               	movf	___wmul@product+1,w
 11498  1D38  01A1               	clrf	?___wmul+1
 11499  1D39  07A1               	addwf	?___wmul+1,f
 11500  1D3A  0824               	movf	___wmul@product,w
 11501  1D3B  01A0               	clrf	?___wmul
 11502  1D3C  07A0               	addwf	?___wmul,f
 11503  1D3D  0008               	return
 11504  1D3E                     __end_of___wmul:	
 11505                           
 11506                           	psect	text68
 11507  1095                     __ptext68:	
 11508 ;; *************** function ___lwdiv *****************
 11509 ;; Defined at:
 11510 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11511 ;; Parameters:    Size  Location     Type
 11512 ;;  divisor         2    0[BANK0 ] unsigned int 
 11513 ;;  dividend        2    2[BANK0 ] unsigned int 
 11514 ;; Auto vars:     Size  Location     Type
 11515 ;;  quotient        2    5[BANK0 ] unsigned int 
 11516 ;;  counter         1    7[BANK0 ] unsigned char 
 11517 ;; Return value:  Size  Location     Type
 11518 ;;                  2    0[BANK0 ] unsigned int 
 11519 ;; Registers used:
 11520 ;;		wreg, status,2, status,0
 11521 ;; Tracked objects:
 11522 ;;		On entry : 0/0
 11523 ;;		On exit  : 0/0
 11524 ;;		Unchanged: 0/0
 11525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11526 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11527 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11528 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11529 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11530 ;;Total ram usage:        8 bytes
 11531 ;; Hardware stack levels used:    1
 11532 ;; Hardware stack levels required when called:    5
 11533 ;; This function calls:
 11534 ;;		Nothing
 11535 ;; This function is called by:
 11536 ;;		_Load_Main
 11537 ;;		_setRF_Main
 11538 ;; This function uses a non-reentrant model
 11539 ;;
 11540                           
 11541                           
 11542                           ;psect for function ___lwdiv
 11543  1095                     ___lwdiv:	
 11544                           
 11545                           ;incstack = 0
 11546                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11547  1095  0020               	movlb	0	; select bank0
 11548  1096  01A5               	clrf	___lwdiv@quotient
 11549  1097  01A6               	clrf	___lwdiv@quotient+1
 11550  1098  0821               	movf	___lwdiv@divisor+1,w
 11551  1099  0420               	iorwf	___lwdiv@divisor,w
 11552  109A  1903               	skipnz
 11553  109B  28C5               	goto	l7808
 11554  109C  01A7               	clrf	___lwdiv@counter
 11555  109D  0AA7               	incf	___lwdiv@counter,f
 11556  109E                     l7796:	
 11557  109E  1BA1               	btfsc	___lwdiv@divisor+1,7
 11558  109F  28AA               	goto	l7798
 11559  10A0  3001               	movlw	1
 11560  10A1                     u7685:	
 11561  10A1  35A0               	lslf	___lwdiv@divisor,f
 11562  10A2  0DA1               	rlf	___lwdiv@divisor+1,f
 11563  10A3  0B89               	decfsz	9,f
 11564  10A4  28A1               	goto	u7685
 11565  10A5  3001               	movlw	1
 11566  10A6  00A4               	movwf	??___lwdiv
 11567  10A7  0824               	movf	??___lwdiv,w
 11568  10A8  07A7               	addwf	___lwdiv@counter,f
 11569  10A9  289E               	goto	l7796
 11570  10AA                     l7798:	
 11571  10AA  3001               	movlw	1
 11572  10AB                     u7705:	
 11573  10AB  35A5               	lslf	___lwdiv@quotient,f
 11574  10AC  0DA6               	rlf	___lwdiv@quotient+1,f
 11575  10AD  0B89               	decfsz	9,f
 11576  10AE  28AB               	goto	u7705
 11577  10AF  0821               	movf	___lwdiv@divisor+1,w
 11578  10B0  0223               	subwf	___lwdiv@dividend+1,w
 11579  10B1  1D03               	skipz
 11580  10B2  28B5               	goto	u7715
 11581  10B3  0820               	movf	___lwdiv@divisor,w
 11582  10B4  0222               	subwf	___lwdiv@dividend,w
 11583  10B5                     u7715:	
 11584  10B5  1C03               	skipc
 11585  10B6  28BC               	goto	l7804
 11586  10B7  0820               	movf	___lwdiv@divisor,w
 11587  10B8  02A2               	subwf	___lwdiv@dividend,f
 11588  10B9  0821               	movf	___lwdiv@divisor+1,w
 11589  10BA  3BA3               	subwfb	___lwdiv@dividend+1,f
 11590  10BB  1425               	bsf	___lwdiv@quotient,0
 11591  10BC                     l7804:	
 11592  10BC  3001               	movlw	1
 11593  10BD                     u7725:	
 11594  10BD  36A1               	lsrf	___lwdiv@divisor+1,f
 11595  10BE  0CA0               	rrf	___lwdiv@divisor,f
 11596  10BF  0B89               	decfsz	9,f
 11597  10C0  28BD               	goto	u7725
 11598  10C1  3001               	movlw	1
 11599  10C2  02A7               	subwf	___lwdiv@counter,f
 11600  10C3  1D03               	btfss	3,2
 11601  10C4  28AA               	goto	l7798
 11602  10C5                     l7808:	
 11603  10C5  0826               	movf	___lwdiv@quotient+1,w
 11604  10C6  01A1               	clrf	?___lwdiv+1
 11605  10C7  07A1               	addwf	?___lwdiv+1,f
 11606  10C8  0825               	movf	___lwdiv@quotient,w
 11607  10C9  01A0               	clrf	?___lwdiv
 11608  10CA  07A0               	addwf	?___lwdiv,f
 11609  10CB  0008               	return
 11610  10CC                     __end_of___lwdiv:	
 11611                           
 11612                           	psect	text69
 11613  18CD                     __ptext69:	
 11614 ;; *************** function _Load_Initialization *****************
 11615 ;; Defined at:
 11616 ;;		line 9 in file "../src/OverLoad_B1.c"
 11617 ;; Parameters:    Size  Location     Type
 11618 ;;		None
 11619 ;; Auto vars:     Size  Location     Type
 11620 ;;		None
 11621 ;; Return value:  Size  Location     Type
 11622 ;;		None               void
 11623 ;; Registers used:
 11624 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11625 ;; Tracked objects:
 11626 ;;		On entry : 0/0
 11627 ;;		On exit  : 0/0
 11628 ;;		Unchanged: 0/0
 11629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11633 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11634 ;;Total ram usage:        0 bytes
 11635 ;; Hardware stack levels used:    1
 11636 ;; Hardware stack levels required when called:    6
 11637 ;; This function calls:
 11638 ;;		_setLoad_AH_AL_Restore
 11639 ;; This function is called by:
 11640 ;;		_main
 11641 ;; This function uses a non-reentrant model
 11642 ;;
 11643                           
 11644                           
 11645                           ;psect for function _Load_Initialization
 11646  18CD                     _Load_Initialization:	
 11647                           
 11648                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11649                           
 11650                           ;incstack = 0
 11651                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11652  18CD  319C  24CA         	fcall	_setLoad_AH_AL_Restore
 11653  18CF  0008               	return
 11654  18D0                     __end_of_Load_Initialization:	
 11655                           
 11656                           	psect	text70
 11657  1CCA                     __ptext70:	
 11658 ;; *************** function _setLoad_AH_AL_Restore *****************
 11659 ;; Defined at:
 11660 ;;		line 292 in file "../src/OverLoad_B1.c"
 11661 ;; Parameters:    Size  Location     Type
 11662 ;;		None
 11663 ;; Auto vars:     Size  Location     Type
 11664 ;;  i               1    1[BANK0 ] unsigned char 
 11665 ;; Return value:  Size  Location     Type
 11666 ;;		None               void
 11667 ;; Registers used:
 11668 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11669 ;; Tracked objects:
 11670 ;;		On entry : 0/0
 11671 ;;		On exit  : 0/0
 11672 ;;		Unchanged: 0/0
 11673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11675 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11676 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11677 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11678 ;;Total ram usage:        2 bytes
 11679 ;; Hardware stack levels used:    1
 11680 ;; Hardware stack levels required when called:    5
 11681 ;; This function calls:
 11682 ;;		Nothing
 11683 ;; This function is called by:
 11684 ;;		_Load_Initialization
 11685 ;;		_Load_Main
 11686 ;; This function uses a non-reentrant model
 11687 ;;
 11688                           
 11689                           
 11690                           ;psect for function _setLoad_AH_AL_Restore
 11691  1CCA                     _setLoad_AH_AL_Restore:	
 11692                           
 11693                           ;OverLoad_B1.c: 293: char i;
 11694                           ;OverLoad_B1.c: 294: for (i = 0; i < 5; i++) {
 11695                           
 11696                           ;incstack = 0
 11697                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11698  1CCA  0020               	movlb	0	; select bank0
 11699  1CCB  01A1               	clrf	setLoad_AH_AL_Restore@i
 11700  1CCC                     L9:	
 11701  1CCC  3005               	movlw	5
 11702  1CCD  0221               	subwf	setLoad_AH_AL_Restore@i,w
 11703  1CCE  1803               	btfsc	3,0
 11704  1CCF  0008               	return
 11705                           
 11706                           ;OverLoad_B1.c: 295: Load.AH[i] = 0;
 11707  1CD0  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11708  1CD1  3E4A               	addlw	(_Load+11)& (0+255)
 11709  1CD2  0086               	movwf	6
 11710  1CD3  3001               	movlw	1	; select bank2/3
 11711  1CD4  0087               	movwf	7
 11712  1CD5  3000               	movlw	0
 11713  1CD6  3FC0               	movwi [0]fsr1
 11714  1CD7  3FC1               	movwi [1]fsr1
 11715                           
 11716                           ;OverLoad_B1.c: 296: Load.AL[i] = 0xffff;
 11717  1CD8  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11718  1CD9  3E54               	addlw	(_Load+21)& (0+255)
 11719  1CDA  0086               	movwf	6
 11720  1CDB  3001               	movlw	1	; select bank2/3
 11721  1CDC  0087               	movwf	7
 11722  1CDD  30FF               	movlw	255
 11723  1CDE  3FC0               	movwi [0]fsr1
 11724  1CDF  30FF               	movlw	255
 11725  1CE0  3FC1               	movwi [1]fsr1
 11726  1CE1  3001               	movlw	1
 11727  1CE2  00A0               	movwf	??_setLoad_AH_AL_Restore
 11728  1CE3  0820               	movf	??_setLoad_AH_AL_Restore,w
 11729  1CE4  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 11730  1CE5  2CCC               	goto	L9
 11731  1CE6                     __end_of_setLoad_AH_AL_Restore:	
 11732                           
 11733                           	psect	text71
 11734  19BD                     __ptext71:	
 11735 ;; *************** function _LED_Main *****************
 11736 ;; Defined at:
 11737 ;;		line 47 in file "../src/LED_B1.c"
 11738 ;; Parameters:    Size  Location     Type
 11739 ;;		None
 11740 ;; Auto vars:     Size  Location     Type
 11741 ;;		None
 11742 ;; Return value:  Size  Location     Type
 11743 ;;		None               void
 11744 ;; Registers used:
 11745 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11746 ;; Tracked objects:
 11747 ;;		On entry : 0/0
 11748 ;;		On exit  : 0/0
 11749 ;;		Unchanged: 0/0
 11750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11754 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11755 ;;Total ram usage:        0 bytes
 11756 ;; Hardware stack levels used:    1
 11757 ;; Hardware stack levels required when called:    7
 11758 ;; This function calls:
 11759 ;;		_setLED_Main
 11760 ;; This function is called by:
 11761 ;;		_main
 11762 ;; This function uses a non-reentrant model
 11763 ;;
 11764                           
 11765                           
 11766                           ;psect for function _LED_Main
 11767  19BD                     _LED_Main:	
 11768                           
 11769                           ;LED_B1.c: 58: setLED_Main(1);
 11770                           
 11771                           ;incstack = 0
 11772                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11773  19BD  3001               	movlw	1
 11774  19BE  3192  223F  3199   	fcall	_setLED_Main
 11775                           
 11776                           ;LED_B1.c: 61: setLED_Main(2);
 11777  19C1  3002               	movlw	2
 11778  19C2  3192  223F  3199   	fcall	_setLED_Main
 11779                           
 11780                           ;LED_B1.c: 67: setLED_Main(99);
 11781  19C5  3063               	movlw	99
 11782  19C6  3192  223F         	fcall	_setLED_Main
 11783  19C8  0008               	return
 11784  19C9                     __end_of_LED_Main:	
 11785                           
 11786                           	psect	text72
 11787  123F                     __ptext72:	
 11788 ;; *************** function _setLED_Main *****************
 11789 ;; Defined at:
 11790 ;;		line 229 in file "../src/LED_B1.c"
 11791 ;; Parameters:    Size  Location     Type
 11792 ;;  led             1    wreg     unsigned char 
 11793 ;; Auto vars:     Size  Location     Type
 11794 ;;  led             1    4[BANK0 ] unsigned char 
 11795 ;; Return value:  Size  Location     Type
 11796 ;;		None               void
 11797 ;; Registers used:
 11798 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11799 ;; Tracked objects:
 11800 ;;		On entry : 0/0
 11801 ;;		On exit  : 0/0
 11802 ;;		Unchanged: 0/0
 11803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11805 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11806 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11807 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11808 ;;Total ram usage:        3 bytes
 11809 ;; Hardware stack levels used:    1
 11810 ;; Hardware stack levels required when called:    6
 11811 ;; This function calls:
 11812 ;;		_LedPointSelect
 11813 ;; This function is called by:
 11814 ;;		_LED_Main
 11815 ;; This function uses a non-reentrant model
 11816 ;;
 11817                           
 11818                           
 11819                           ;psect for function _setLED_Main
 11820  123F                     _setLED_Main:	
 11821                           
 11822                           ;incstack = 0
 11823                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11824                           ;setLED_Main@led stored from wreg
 11825  123F  0020               	movlb	0	; select bank0
 11826  1240  00A4               	movwf	setLED_Main@led
 11827                           
 11828                           ;LED_B1.c: 230: LedPointSelect(led);
 11829  1241  0824               	movf	setLED_Main@led,w
 11830  1242  319D  257C  3192   	fcall	_LedPointSelect
 11831                           
 11832                           ;LED_B1.c: 231: if (LED->GO == 1) {
 11833  1245  0021               	movlb	1	; select bank1
 11834  1246  0857               	movf	_LED^(0+128),w
 11835  1247  0086               	movwf	6
 11836  1248  3001               	movlw	1	; select bank2/3
 11837  1249  0087               	movwf	7
 11838  124A  1C81               	btfss	1,1
 11839  124B  0008               	return
 11840                           
 11841                           ;LED_B1.c: 232: LED->Time++;
 11842  124C  0A57               	incf	_LED^(0+128),w
 11843  124D  0086               	movwf	6
 11844  124E  3001               	movlw	1	; select bank2/3
 11845  124F  0087               	movwf	7
 11846  1250  3001               	movlw	1
 11847  1251  0781               	addwf	1,f
 11848  1252  3141               	addfsr 1,1
 11849  1253  1803               	skipnc
 11850  1254  0A81               	incf	1,f
 11851                           
 11852                           ;LED_B1.c: 233: if (LED->Time >= (500 / 20)) {
 11853  1255  0A57               	incf	_LED^(0+128),w
 11854  1256  0086               	movwf	6
 11855  1257  3001               	movlw	1	; select bank2/3
 11856  1258  0087               	movwf	7
 11857  1259  3F40               	moviw [0]fsr1
 11858  125A  0020               	movlb	0	; select bank0
 11859  125B  00A2               	movwf	??_setLED_Main
 11860  125C  3F41               	moviw [1]fsr1
 11861  125D  00A3               	movwf	??_setLED_Main+1
 11862  125E  3000               	movlw	0
 11863  125F  0223               	subwf	??_setLED_Main+1,w
 11864  1260  3019               	movlw	25
 11865  1261  1903               	skipnz
 11866  1262  0222               	subwf	??_setLED_Main,w
 11867  1263  1C03               	skipc
 11868  1264  0008               	return
 11869                           
 11870                           ;LED_B1.c: 234: LED->Time = 0;
 11871  1265  0021               	movlb	1	; select bank1
 11872  1266  0A57               	incf	_LED^(0+128),w
 11873  1267  0086               	movwf	6
 11874  1268  3001               	movlw	1	; select bank2/3
 11875  1269  0087               	movwf	7
 11876  126A  3000               	movlw	0
 11877  126B  3FC0               	movwi [0]fsr1
 11878  126C  3FC1               	movwi [1]fsr1
 11879                           
 11880                           ;LED_B1.c: 237: if (led == 1) {
 11881  126D  0020               	movlb	0	; select bank0
 11882  126E  0824               	movf	setLED_Main@led,w
 11883  126F  3A01               	xorlw	1
 11884  1270  1D03               	skipz
 11885  1271  2A74               	goto	l1168
 11886                           
 11887                           ;LED_B1.c: 238: RC7 = RC7 == 1 ? 0 : 1;
 11888  1272  3080               	movlw	128
 11889  1273  068E               	xorwf	14,f
 11890  1274                     l1168:	
 11891                           
 11892                           ;LED_B1.c: 239: }
 11893                           ;LED_B1.c: 242: if (led == 2) {
 11894  1274  0824               	movf	setLED_Main@led,w
 11895  1275  3A02               	xorlw	2
 11896                           
 11897                           ;LED_B1.c: 243: RA3 = RA3 == 1 ? 0 : 1;
 11898  1276  3008               	movlw	8
 11899  1277  1903               	btfsc	3,2
 11900  1278  068C               	xorwf	12,f
 11901                           
 11902                           ;LED_B1.c: 244: }
 11903                           ;LED_B1.c: 252: if (led == 99) {
 11904  1279  0824               	movf	setLED_Main@led,w
 11905  127A  3A63               	xorlw	99
 11906  127B  1D03               	skipz
 11907  127C  0008               	return
 11908                           
 11909                           ;LED_B1.c: 253: RB5 = RB5 == 1 ? 0 : 1;
 11910  127D  3020               	movlw	32
 11911  127E  068D               	xorwf	13,f
 11912  127F  0008               	return
 11913  1280                     __end_of_setLED_Main:	
 11914                           
 11915                           	psect	text73
 11916  19B1                     __ptext73:	
 11917 ;; *************** function _LED_Initialization *****************
 11918 ;; Defined at:
 11919 ;;		line 31 in file "../src/LED_B1.c"
 11920 ;; Parameters:    Size  Location     Type
 11921 ;;		None
 11922 ;; Auto vars:     Size  Location     Type
 11923 ;;		None
 11924 ;; Return value:  Size  Location     Type
 11925 ;;		None               void
 11926 ;; Registers used:
 11927 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11928 ;; Tracked objects:
 11929 ;;		On entry : 0/0
 11930 ;;		On exit  : 0/0
 11931 ;;		Unchanged: 0/0
 11932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11936 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11937 ;;Total ram usage:        0 bytes
 11938 ;; Hardware stack levels used:    1
 11939 ;; Hardware stack levels required when called:    8
 11940 ;; This function calls:
 11941 ;;		_setLED_Initialization
 11942 ;; This function is called by:
 11943 ;;		_main
 11944 ;; This function uses a non-reentrant model
 11945 ;;
 11946                           
 11947                           
 11948                           ;psect for function _LED_Initialization
 11949  19B1                     _LED_Initialization:	
 11950                           
 11951                           ;LED_B1.c: 33: setLED_Initialization(1);
 11952                           
 11953                           ;incstack = 0
 11954                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11955  19B1  3001               	movlw	1
 11956  19B2  319A  2282  3199   	fcall	_setLED_Initialization
 11957                           
 11958                           ;LED_B1.c: 36: setLED_Initialization(2);
 11959  19B5  3002               	movlw	2
 11960  19B6  319A  2282  3199   	fcall	_setLED_Initialization
 11961                           
 11962                           ;LED_B1.c: 42: setLED_Initialization(99);
 11963  19B9  3063               	movlw	99
 11964  19BA  319A  2282         	fcall	_setLED_Initialization
 11965  19BC  0008               	return
 11966  19BD                     __end_of_LED_Initialization:	
 11967                           
 11968                           	psect	text74
 11969  1A82                     __ptext74:	
 11970 ;; *************** function _setLED_Initialization *****************
 11971 ;; Defined at:
 11972 ;;		line 74 in file "../src/LED_B1.c"
 11973 ;; Parameters:    Size  Location     Type
 11974 ;;  led             1    wreg     unsigned char 
 11975 ;; Auto vars:     Size  Location     Type
 11976 ;;  led             1    4[BANK0 ] unsigned char 
 11977 ;; Return value:  Size  Location     Type
 11978 ;;		None               void
 11979 ;; Registers used:
 11980 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11981 ;; Tracked objects:
 11982 ;;		On entry : 0/0
 11983 ;;		On exit  : 0/0
 11984 ;;		Unchanged: 0/0
 11985 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11987 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11989 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11990 ;;Total ram usage:        1 bytes
 11991 ;; Hardware stack levels used:    1
 11992 ;; Hardware stack levels required when called:    7
 11993 ;; This function calls:
 11994 ;;		_LedPointSelect
 11995 ;;		_setLED
 11996 ;; This function is called by:
 11997 ;;		_LED_Initialization
 11998 ;; This function uses a non-reentrant model
 11999 ;;
 12000                           
 12001                           
 12002                           ;psect for function _setLED_Initialization
 12003  1A82                     _setLED_Initialization:	
 12004                           
 12005                           ;incstack = 0
 12006                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12007                           ;setLED_Initialization@led stored from wreg
 12008  1A82  0020               	movlb	0	; select bank0
 12009  1A83  00A4               	movwf	setLED_Initialization@led
 12010                           
 12011                           ;LED_B1.c: 75: LedPointSelect(led);
 12012  1A84  0824               	movf	setLED_Initialization@led,w
 12013  1A85  319D  257C  319A   	fcall	_LedPointSelect
 12014                           
 12015                           ;LED_B1.c: 76: LED->Enable = 1;
 12016  1A88  0021               	movlb	1	; select bank1
 12017  1A89  0857               	movf	_LED^(0+128),w
 12018  1A8A  0086               	movwf	6
 12019  1A8B  3001               	movlw	1	; select bank2/3
 12020  1A8C  0087               	movwf	7
 12021  1A8D  1401               	bsf	1,0
 12022                           
 12023                           ;LED_B1.c: 77: setLED(led, 0);
 12024  1A8E  0020               	movlb	0	; select bank0
 12025  1A8F  01A2               	clrf	setLED@command
 12026  1A90  0824               	movf	setLED_Initialization@led,w
 12027  1A91  3193  230E         	fcall	_setLED
 12028  1A93  0008               	return
 12029  1A94                     __end_of_setLED_Initialization:	
 12030                           
 12031                           	psect	text75
 12032  11FE                     __ptext75:	
 12033 ;; *************** function _Flash_Memory_Main *****************
 12034 ;; Defined at:
 12035 ;;		line 976 in file "../src/MCU_B1.c"
 12036 ;; Parameters:    Size  Location     Type
 12037 ;;		None
 12038 ;; Auto vars:     Size  Location     Type
 12039 ;;  key_Status      1    7[BANK0 ] unsigned char 
 12040 ;; Return value:  Size  Location     Type
 12041 ;;		None               void
 12042 ;; Registers used:
 12043 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12044 ;; Tracked objects:
 12045 ;;		On entry : 0/0
 12046 ;;		On exit  : 0/0
 12047 ;;		Unchanged: 0/0
 12048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12049 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12050 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12051 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12052 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12053 ;;Total ram usage:        3 bytes
 12054 ;; Hardware stack levels used:    1
 12055 ;; Hardware stack levels required when called:    8
 12056 ;; This function calls:
 12057 ;;		_Flash_Memory_Modify
 12058 ;;		_getAll_Sw_KeyStatus
 12059 ;;		_getMain_All_LightsStatus
 12060 ;; This function is called by:
 12061 ;;		_main
 12062 ;; This function uses a non-reentrant model
 12063 ;;
 12064                           
 12065                           
 12066                           ;psect for function _Flash_Memory_Main
 12067  11FE                     _Flash_Memory_Main:	
 12068                           
 12069                           ;MCU_B1.c: 977: char key_Status = 0;
 12070                           
 12071                           ;incstack = 0
 12072                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12073  11FE  0020               	movlb	0	; select bank0
 12074  11FF  01A7               	clrf	Flash_Memory_Main@key_Status
 12075                           
 12076                           ;MCU_B1.c: 979: key_Status = getAll_Sw_KeyStatus();
 12077  1200  319A  222B  3191   	fcall	_getAll_Sw_KeyStatus
 12078  1203  0020               	movlb	0	; select bank0
 12079  1204  00A6               	movwf	??_Flash_Memory_Main
 12080  1205  0826               	movf	??_Flash_Memory_Main,w
 12081  1206  00A7               	movwf	Flash_Memory_Main@key_Status
 12082                           
 12083                           ;MCU_B1.c: 981: if (Memory.Modify == 1) {
 12084  1207  0024               	movlb	4	; select bank4
 12085  1208  1C44               	btfss	(_Memory^(0+512)+36),0
 12086  1209  0008               	return
 12087                           
 12088                           ;MCU_B1.c: 982: Memory.GO = getMain_All_LightsStatus() == 0 && key_Status == 0 ? 1 : 0;
 12089  120A  0020               	movlb	0	; select bank0
 12090  120B  01A8               	clrf	_Flash_Memory_Main$3307
 12091  120C  319A  22F0  3191   	fcall	_getMain_All_LightsStatus
 12092  120F  3800               	iorlw	0
 12093  1210  1D03               	skipz
 12094  1211  2A18               	goto	l8676
 12095  1212  0020               	movlb	0	; select bank0
 12096  1213  08A7               	movf	Flash_Memory_Main@key_Status,f
 12097  1214  1D03               	skipz
 12098  1215  2A18               	goto	l8676
 12099  1216  01A8               	clrf	_Flash_Memory_Main$3307
 12100  1217  0AA8               	incf	_Flash_Memory_Main$3307,f
 12101  1218                     l8676:	
 12102  1218  0020               	movlb	0	; select bank0
 12103  1219  0828               	movf	_Flash_Memory_Main$3307,w
 12104  121A  0024               	movlb	4	; select bank4
 12105  121B  10C4               	bcf	(_Memory^(0+512)+36),1
 12106  121C  1D03               	skipz
 12107  121D  14C4               	bsf	(_Memory^(0+512)+36),1
 12108                           
 12109                           ;MCU_B1.c: 983: if (Memory.GO == 1) {
 12110  121E  1CC4               	btfss	(_Memory^(0+512)+36),1
 12111  121F  2A39               	goto	l1442
 12112                           
 12113                           ;MCU_B1.c: 984: Memory.Runtime = 1;
 12114  1220  15C4               	bsf	(_Memory^(0+512)+36),3
 12115                           
 12116                           ;MCU_B1.c: 985: Memory.Time++;
 12117  1221  3001               	movlw	1
 12118  1222  07C2               	addwf	(_Memory^(0+512)+34),f
 12119  1223  3000               	movlw	0
 12120  1224  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 12121                           
 12122                           ;MCU_B1.c: 986: if (Memory.Time == (200 / 20)) {
 12123  1225  3022               	movlw	34
 12124  1226  3E20               	addlw	_Memory& (0+255)
 12125  1227  0086               	movwf	6
 12126  1228  3002               	movlw	2	; select bank4/5
 12127  1229  0087               	movwf	7
 12128  122A  3F40               	moviw [0]fsr1
 12129  122B  3A0A               	xorlw	10
 12130  122C  1D03               	skipz
 12131  122D  2A30               	goto	u9385
 12132  122E  3F41               	moviw [1]fsr1
 12133  122F  3A00               	xorlw	0
 12134  1230                     u9385:	
 12135  1230  1D03               	skipz
 12136  1231  0008               	return
 12137                           
 12138                           ;MCU_B1.c: 987: Memory.Time = 0;
 12139  1232  01C2               	clrf	(_Memory^(0+512)+34)
 12140  1233  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12141                           
 12142                           ;MCU_B1.c: 988: Memory.Modify = 0;
 12143  1234  1044               	bcf	(_Memory^(0+512)+36),0
 12144                           
 12145                           ;MCU_B1.c: 989: Memory.GO = 0;
 12146  1235  10C4               	bcf	(_Memory^(0+512)+36),1
 12147                           
 12148                           ;MCU_B1.c: 990: Flash_Memory_Modify();
 12149  1236  318B  230F         	fcall	_Flash_Memory_Modify
 12150                           
 12151                           ;MCU_B1.c: 991: }
 12152                           ;MCU_B1.c: 992: } else {
 12153  1238  0008               	return
 12154  1239                     l1442:	
 12155                           
 12156                           ;MCU_B1.c: 993: if (Memory.Runtime == 1) {
 12157  1239  1DC4               	btfss	(_Memory^(0+512)+36),3
 12158  123A  0008               	return
 12159                           
 12160                           ;MCU_B1.c: 994: Memory.Runtime = 0;
 12161  123B  11C4               	bcf	(_Memory^(0+512)+36),3
 12162                           
 12163                           ;MCU_B1.c: 995: Memory.Time = 0;
 12164  123C  01C2               	clrf	(_Memory^(0+512)+34)
 12165  123D  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12166  123E  0008               	return
 12167  123F                     __end_of_Flash_Memory_Main:	
 12168                           
 12169                           	psect	text76
 12170  1A2B                     __ptext76:	
 12171 ;; *************** function _getAll_Sw_KeyStatus *****************
 12172 ;; Defined at:
 12173 ;;		line 278 in file "../src/Switch_B1.c"
 12174 ;; Parameters:    Size  Location     Type
 12175 ;;		None
 12176 ;; Auto vars:     Size  Location     Type
 12177 ;;  status          1    1[BANK0 ] unsigned char 
 12178 ;; Return value:  Size  Location     Type
 12179 ;;                  1    wreg      unsigned char 
 12180 ;; Registers used:
 12181 ;;		wreg, status,2
 12182 ;; Tracked objects:
 12183 ;;		On entry : 0/0
 12184 ;;		On exit  : 0/0
 12185 ;;		Unchanged: 0/0
 12186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12187 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12188 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12189 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12190 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12191 ;;Total ram usage:        3 bytes
 12192 ;; Hardware stack levels used:    1
 12193 ;; Hardware stack levels required when called:    5
 12194 ;; This function calls:
 12195 ;;		Nothing
 12196 ;; This function is called by:
 12197 ;;		_Flash_Memory_Main
 12198 ;; This function uses a non-reentrant model
 12199 ;;
 12200                           
 12201                           
 12202                           ;psect for function _getAll_Sw_KeyStatus
 12203  1A2B                     _getAll_Sw_KeyStatus:	
 12204                           
 12205                           ;Switch_B1.c: 279: char status = 0;
 12206                           
 12207                           ;incstack = 0
 12208                           ; Regs used in _getAll_Sw_KeyStatus: [wreg+status,2]
 12209  1A2B  0020               	movlb	0	; select bank0
 12210  1A2C  01A1               	clrf	getAll_Sw_KeyStatus@status
 12211                           
 12212                           ;Switch_B1.c: 289: status = RA0 == 1 || RB1 == 1 || RA6 == 1 || RA4 == 1 ? 1 : 0;
 12213  1A2D  01A2               	clrf	_getAll_Sw_KeyStatus$6170
 12214  1A2E  0AA2               	incf	_getAll_Sw_KeyStatus$6170,f
 12215  1A2F  1C0C               	btfss	12,0	;volatile
 12216  1A30  188D               	btfsc	13,1	;volatile
 12217  1A31  2A36               	goto	l8232
 12218  1A32  1F0C               	btfss	12,6	;volatile
 12219  1A33  1A0C               	btfsc	12,4	;volatile
 12220  1A34  2A36               	goto	l8232
 12221  1A35  01A2               	clrf	_getAll_Sw_KeyStatus$6170
 12222  1A36                     l8232:	
 12223  1A36  0822               	movf	_getAll_Sw_KeyStatus$6170,w
 12224  1A37  00A0               	movwf	??_getAll_Sw_KeyStatus
 12225  1A38  0820               	movf	??_getAll_Sw_KeyStatus,w
 12226  1A39  00A1               	movwf	getAll_Sw_KeyStatus@status
 12227                           
 12228                           ;Switch_B1.c: 302: return status;
 12229  1A3A  0821               	movf	getAll_Sw_KeyStatus@status,w
 12230  1A3B  0008               	return
 12231  1A3C                     __end_of_getAll_Sw_KeyStatus:	
 12232                           
 12233                           	psect	text77
 12234  0B0F                     __ptext77:	
 12235 ;; *************** function _Flash_Memory_Modify *****************
 12236 ;; Defined at:
 12237 ;;		line 1053 in file "../src/MCU_B1.c"
 12238 ;; Parameters:    Size  Location     Type
 12239 ;;		None
 12240 ;; Auto vars:     Size  Location     Type
 12241 ;;  i               1    5[BANK0 ] unsigned char 
 12242 ;; Return value:  Size  Location     Type
 12243 ;;		None               void
 12244 ;; Registers used:
 12245 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12246 ;; Tracked objects:
 12247 ;;		On entry : 0/0
 12248 ;;		On exit  : 0/0
 12249 ;;		Unchanged: 0/0
 12250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12252 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12253 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12254 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12255 ;;Total ram usage:        2 bytes
 12256 ;; Hardware stack levels used:    1
 12257 ;; Hardware stack levels required when called:    7
 12258 ;; This function calls:
 12259 ;;		_Flash_Memory_Erasing
 12260 ;;		_Flash_Memory_Read
 12261 ;;		_Flash_Memory_Write
 12262 ;;		_setMemory_Data
 12263 ;; This function is called by:
 12264 ;;		_Flash_Memory_Main
 12265 ;; This function uses a non-reentrant model
 12266 ;;
 12267                           
 12268                           
 12269                           ;psect for function _Flash_Memory_Modify
 12270  0B0F                     _Flash_Memory_Modify:	
 12271                           
 12272                           ;MCU_B1.c: 1054: char i = 0;
 12273                           
 12274                           ;incstack = 0
 12275                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12276  0B0F  0020               	movlb	0	; select bank0
 12277  0B10  01A5               	clrf	Flash_Memory_Modify@i
 12278                           
 12279                           ;MCU_B1.c: 1055: for (i = 0; i < 32; i++) {
 12280  0B11  01A5               	clrf	Flash_Memory_Modify@i
 12281  0B12  3020               	movlw	32
 12282  0B13  0225               	subwf	Flash_Memory_Modify@i,w
 12283  0B14  1803               	btfsc	3,0
 12284  0B15  2B2B               	goto	l8250
 12285  0B16                     l8244:	
 12286                           
 12287                           ;MCU_B1.c: 1056: Memory.Data[i] = Flash_Memory_Read(i);
 12288  0B16  0825               	movf	Flash_Memory_Modify@i,w
 12289  0B17  319C  2460  318B   	fcall	_Flash_Memory_Read
 12290  0B1A  0020               	movlb	0	; select bank0
 12291  0B1B  00A4               	movwf	??_Flash_Memory_Modify
 12292  0B1C  0825               	movf	Flash_Memory_Modify@i,w
 12293  0B1D  3E20               	addlw	_Memory& (0+255)
 12294  0B1E  0086               	movwf	6
 12295  0B1F  3002               	movlw	2	; select bank4/5
 12296  0B20  0087               	movwf	7
 12297  0B21  0824               	movf	??_Flash_Memory_Modify,w
 12298  0B22  0081               	movwf	1
 12299  0B23  3001               	movlw	1
 12300  0B24  00A4               	movwf	??_Flash_Memory_Modify
 12301  0B25  0824               	movf	??_Flash_Memory_Modify,w
 12302  0B26  07A5               	addwf	Flash_Memory_Modify@i,f
 12303  0B27  3020               	movlw	32
 12304  0B28  0225               	subwf	Flash_Memory_Modify@i,w
 12305  0B29  1C03               	skipc
 12306  0B2A  2B16               	goto	l8244
 12307  0B2B                     l8250:	
 12308                           
 12309                           ;MCU_B1.c: 1057: }
 12310                           ;MCU_B1.c: 1058: setMemory_Data(0, product->Data[12]);
 12311  0B2B  0021               	movlb	1	; select bank1
 12312  0B2C  086E               	movf	_product^(0+128),w
 12313  0B2D  0086               	movwf	6
 12314  0B2E  3002               	movlw	2	; select bank4/5
 12315  0B2F  0087               	movwf	7
 12316  0B30  3002               	movlw	2	; select bank4/5
 12317  0B31  3F4C               	moviw [12]fsr1
 12318  0B32  0020               	movlb	0	; select bank0
 12319  0B33  00A0               	movwf	setMemory_Data@data
 12320  0B34  3000               	movlw	0
 12321  0B35  3199  2199  318B   	fcall	_setMemory_Data
 12322                           
 12323                           ;MCU_B1.c: 1059: setMemory_Data(1, product->Data[13]);
 12324  0B38  0021               	movlb	1	; select bank1
 12325  0B39  086E               	movf	_product^(0+128),w
 12326  0B3A  0086               	movwf	6
 12327  0B3B  3002               	movlw	2	; select bank4/5
 12328  0B3C  0087               	movwf	7
 12329  0B3D  3002               	movlw	2	; select bank4/5
 12330  0B3E  3F4D               	moviw [13]fsr1
 12331  0B3F  0020               	movlb	0	; select bank0
 12332  0B40  00A0               	movwf	setMemory_Data@data
 12333  0B41  3001               	movlw	1
 12334  0B42  3199  2199  318B   	fcall	_setMemory_Data
 12335                           
 12336                           ;MCU_B1.c: 1060: setMemory_Data(2, product->Data[14]);
 12337  0B45  0021               	movlb	1	; select bank1
 12338  0B46  086E               	movf	_product^(0+128),w
 12339  0B47  0086               	movwf	6
 12340  0B48  3002               	movlw	2	; select bank4/5
 12341  0B49  0087               	movwf	7
 12342  0B4A  3002               	movlw	2	; select bank4/5
 12343  0B4B  3F4E               	moviw [14]fsr1
 12344  0B4C  0020               	movlb	0	; select bank0
 12345  0B4D  00A0               	movwf	setMemory_Data@data
 12346  0B4E  3002               	movlw	2
 12347  0B4F  3199  2199  318B   	fcall	_setMemory_Data
 12348                           
 12349                           ;MCU_B1.c: 1062: setMemory_Data(3, product->Data[21]);
 12350  0B52  0021               	movlb	1	; select bank1
 12351  0B53  086E               	movf	_product^(0+128),w
 12352  0B54  0086               	movwf	6
 12353  0B55  3002               	movlw	2	; select bank4/5
 12354  0B56  0087               	movwf	7
 12355  0B57  3002               	movlw	2	; select bank4/5
 12356  0B58  3F55               	moviw [21]fsr1
 12357  0B59  0020               	movlb	0	; select bank0
 12358  0B5A  00A0               	movwf	setMemory_Data@data
 12359  0B5B  3003               	movlw	3
 12360  0B5C  3199  2199  318B   	fcall	_setMemory_Data
 12361                           
 12362                           ;MCU_B1.c: 1063: setMemory_Data(4, product->Data[22]);
 12363  0B5F  0021               	movlb	1	; select bank1
 12364  0B60  086E               	movf	_product^(0+128),w
 12365  0B61  0086               	movwf	6
 12366  0B62  3002               	movlw	2	; select bank4/5
 12367  0B63  0087               	movwf	7
 12368  0B64  3002               	movlw	2	; select bank4/5
 12369  0B65  3F56               	moviw [22]fsr1
 12370  0B66  0020               	movlb	0	; select bank0
 12371  0B67  00A0               	movwf	setMemory_Data@data
 12372  0B68  3004               	movlw	4
 12373  0B69  3199  2199  318B   	fcall	_setMemory_Data
 12374                           
 12375                           ;MCU_B1.c: 1064: setMemory_Data(5, product->Data[23]);
 12376  0B6C  0021               	movlb	1	; select bank1
 12377  0B6D  086E               	movf	_product^(0+128),w
 12378  0B6E  0086               	movwf	6
 12379  0B6F  3002               	movlw	2	; select bank4/5
 12380  0B70  0087               	movwf	7
 12381  0B71  3002               	movlw	2	; select bank4/5
 12382  0B72  3F57               	moviw [23]fsr1
 12383  0B73  0020               	movlb	0	; select bank0
 12384  0B74  00A0               	movwf	setMemory_Data@data
 12385  0B75  3005               	movlw	5
 12386  0B76  3199  2199  318B   	fcall	_setMemory_Data
 12387                           
 12388                           ;MCU_B1.c: 1065: if (myMain.SaveDimmer == 1) {
 12389  0B79  0021               	movlb	1	; select bank1
 12390  0B7A  1EB8               	btfss	(_myMain^(0+128)+10),5
 12391  0B7B  2B86               	goto	l8258
 12392                           
 12393                           ;MCU_B1.c: 1066: myMain.SaveDimmer = 0;
 12394  0B7C  12B8               	bcf	(_myMain^(0+128)+10),5
 12395                           
 12396                           ;MCU_B1.c: 1067: setMemory_Data(30, 0xaa);
 12397  0B7D  30AA               	movlw	170
 12398  0B7E  0020               	movlb	0	; select bank0
 12399  0B7F  00A4               	movwf	??_Flash_Memory_Modify
 12400  0B80  0824               	movf	??_Flash_Memory_Modify,w
 12401  0B81  00A0               	movwf	setMemory_Data@data
 12402  0B82  301E               	movlw	30
 12403  0B83  3199  2199  318B   	fcall	_setMemory_Data
 12404  0B86                     l8258:	
 12405                           
 12406                           ;MCU_B1.c: 1068: }
 12407                           ;MCU_B1.c: 1070: if (Memory.LoopSave == 1) {
 12408  0B86  0024               	movlb	4	; select bank4
 12409  0B87  1D44               	btfss	(_Memory^(0+512)+36),2
 12410  0B88  2B8D               	goto	l1466
 12411                           
 12412                           ;MCU_B1.c: 1071: Memory.LoopSave = 0;
 12413  0B89  1144               	bcf	(_Memory^(0+512)+36),2
 12414                           
 12415                           ;MCU_B1.c: 1072: myMain.FirstOpen = 0;
 12416  0B8A  0021               	movlb	1	; select bank1
 12417  0B8B  11AE               	bcf	_myMain^(0+128),3
 12418                           
 12419                           ;MCU_B1.c: 1073: myMain.First = 0;
 12420  0B8C  12AE               	bcf	_myMain^(0+128),5
 12421  0B8D                     l1466:	
 12422                           
 12423                           ;MCU_B1.c: 1075: }
 12424                           ;MCU_B1.c: 1076: GIE = 0;
 12425  0B8D  138B               	bcf	11,7	;volatile
 12426                           
 12427                           ;MCU_B1.c: 1077: Flash_Memory_Erasing();
 12428  0B8E  3199  21A5  318B   	fcall	_Flash_Memory_Erasing
 12429                           
 12430                           ;MCU_B1.c: 1078: Flash_Memory_Write();
 12431  0B91  319F  27A0         	fcall	_Flash_Memory_Write
 12432                           
 12433                           ;MCU_B1.c: 1079: GIE = 1;
 12434  0B93  178B               	bsf	11,7	;volatile
 12435  0B94  0008               	return
 12436  0B95                     __end_of_Flash_Memory_Modify:	
 12437                           
 12438                           	psect	text78
 12439  19A5                     __ptext78:	
 12440 ;; *************** function _Flash_Memory_Erasing *****************
 12441 ;; Defined at:
 12442 ;;		line 1042 in file "../src/MCU_B1.c"
 12443 ;; Parameters:    Size  Location     Type
 12444 ;;		None
 12445 ;; Auto vars:     Size  Location     Type
 12446 ;;		None
 12447 ;; Return value:  Size  Location     Type
 12448 ;;		None               void
 12449 ;; Registers used:
 12450 ;;		wreg, status,2, status,0, pclath, cstack
 12451 ;; Tracked objects:
 12452 ;;		On entry : 0/0
 12453 ;;		On exit  : 0/0
 12454 ;;		Unchanged: 0/0
 12455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12459 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12460 ;;Total ram usage:        0 bytes
 12461 ;; Hardware stack levels used:    1
 12462 ;; Hardware stack levels required when called:    6
 12463 ;; This function calls:
 12464 ;;		_Flash_Memory_Unlock
 12465 ;; This function is called by:
 12466 ;;		_Flash_Memory_Modify
 12467 ;; This function uses a non-reentrant model
 12468 ;;
 12469                           
 12470                           
 12471                           ;psect for function _Flash_Memory_Erasing
 12472  19A5                     _Flash_Memory_Erasing:	
 12473                           
 12474                           ;MCU_B1.c: 1043: CFGS = 0;
 12475                           
 12476                           ;incstack = 0
 12477                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12478  19A5  0023               	movlb	3	; select bank3
 12479  19A6  1315               	bcf	21,6	;volatile
 12480                           
 12481                           ;MCU_B1.c: 1044: PMADRH = 0x30;
 12482  19A7  3030               	movlw	48
 12483  19A8  0092               	movwf	18	;volatile
 12484                           
 12485                           ;MCU_B1.c: 1045: PMADRL = 0x00;
 12486  19A9  0191               	clrf	17	;volatile
 12487                           
 12488                           ;MCU_B1.c: 1046: FREE = 1;
 12489  19AA  1615               	bsf	21,4	;volatile
 12490                           
 12491                           ;MCU_B1.c: 1047: WREN = 1;
 12492  19AB  1515               	bsf	21,2	;volatile
 12493                           
 12494                           ;MCU_B1.c: 1048: Flash_Memory_Unlock();
 12495  19AC  3199  214C         	fcall	_Flash_Memory_Unlock
 12496                           
 12497                           ;MCU_B1.c: 1049: WREN = 0;
 12498  19AE  0023               	movlb	3	; select bank3
 12499  19AF  1115               	bcf	21,2	;volatile
 12500  19B0  0008               	return
 12501  19B1                     __end_of_Flash_Memory_Erasing:	
 12502                           
 12503                           	psect	text79
 12504  06FC                     __ptext79:	
 12505 ;; *************** function _Flash_Memory_Initialization *****************
 12506 ;; Defined at:
 12507 ;;		line 932 in file "../src/MCU_B1.c"
 12508 ;; Parameters:    Size  Location     Type
 12509 ;;		None
 12510 ;; Auto vars:     Size  Location     Type
 12511 ;;  value           1    5[BANK0 ] unsigned char 
 12512 ;; Return value:  Size  Location     Type
 12513 ;;		None               void
 12514 ;; Registers used:
 12515 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12516 ;; Tracked objects:
 12517 ;;		On entry : 0/0
 12518 ;;		On exit  : 0/0
 12519 ;;		Unchanged: 0/0
 12520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12522 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12523 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12524 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12525 ;;Total ram usage:        2 bytes
 12526 ;; Hardware stack levels used:    1
 12527 ;; Hardware stack levels required when called:    7
 12528 ;; This function calls:
 12529 ;;		_Flash_Memory_Read
 12530 ;;		_Flash_Memory_Write
 12531 ;;		_setMemory_Data
 12532 ;; This function is called by:
 12533 ;;		_main
 12534 ;; This function uses a non-reentrant model
 12535 ;;
 12536                           
 12537                           
 12538                           ;psect for function _Flash_Memory_Initialization
 12539  06FC                     _Flash_Memory_Initialization:	
 12540                           
 12541                           ;MCU_B1.c: 933: char value = 0;
 12542                           
 12543                           ;incstack = 0
 12544                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12545  06FC  0020               	movlb	0	; select bank0
 12546  06FD  01A5               	clrf	Flash_Memory_Initialization@value
 12547                           
 12548                           ;MCU_B1.c: 934: if (Flash_Memory_Read(31) == 0xaa) {
 12549  06FE  301F               	movlw	31
 12550  06FF  319C  2460  3186   	fcall	_Flash_Memory_Read
 12551  0702  3AAA               	xorlw	170
 12552  0703  1D03               	skipz
 12553  0704  2F7E               	goto	l8650
 12554                           
 12555                           ;MCU_B1.c: 935: product->Data[12] = Flash_Memory_Read(0);
 12556  0705  3000               	movlw	0
 12557  0706  319C  2460  3186   	fcall	_Flash_Memory_Read
 12558  0709  0020               	movlb	0	; select bank0
 12559  070A  00A4               	movwf	??_Flash_Memory_Initialization
 12560  070B  0021               	movlb	1	; select bank1
 12561  070C  086E               	movf	_product^(0+128),w
 12562  070D  3E0C               	addlw	12
 12563  070E  0086               	movwf	6
 12564  070F  3002               	movlw	2	; select bank4/5
 12565  0710  0087               	movwf	7
 12566  0711  0020               	movlb	0	; select bank0
 12567  0712  0824               	movf	??_Flash_Memory_Initialization,w
 12568  0713  0081               	movwf	1
 12569                           
 12570                           ;MCU_B1.c: 936: product->Data[13] = Flash_Memory_Read(1);
 12571  0714  3001               	movlw	1
 12572  0715  319C  2460  3186   	fcall	_Flash_Memory_Read
 12573  0718  0020               	movlb	0	; select bank0
 12574  0719  00A4               	movwf	??_Flash_Memory_Initialization
 12575  071A  0021               	movlb	1	; select bank1
 12576  071B  086E               	movf	_product^(0+128),w
 12577  071C  3E0D               	addlw	13
 12578  071D  0086               	movwf	6
 12579  071E  3002               	movlw	2	; select bank4/5
 12580  071F  0087               	movwf	7
 12581  0720  0020               	movlb	0	; select bank0
 12582  0721  0824               	movf	??_Flash_Memory_Initialization,w
 12583  0722  0081               	movwf	1
 12584                           
 12585                           ;MCU_B1.c: 937: product->Data[14] = Flash_Memory_Read(2);
 12586  0723  3002               	movlw	2
 12587  0724  319C  2460  3186   	fcall	_Flash_Memory_Read
 12588  0727  0020               	movlb	0	; select bank0
 12589  0728  00A4               	movwf	??_Flash_Memory_Initialization
 12590  0729  0021               	movlb	1	; select bank1
 12591  072A  086E               	movf	_product^(0+128),w
 12592  072B  3E0E               	addlw	14
 12593  072C  0086               	movwf	6
 12594  072D  3002               	movlw	2	; select bank4/5
 12595  072E  0087               	movwf	7
 12596  072F  0020               	movlb	0	; select bank0
 12597  0730  0824               	movf	??_Flash_Memory_Initialization,w
 12598  0731  0081               	movwf	1
 12599                           
 12600                           ;MCU_B1.c: 940: product->Data[21] = Flash_Memory_Read(3);
 12601  0732  3003               	movlw	3
 12602  0733  319C  2460  3186   	fcall	_Flash_Memory_Read
 12603  0736  0020               	movlb	0	; select bank0
 12604  0737  00A4               	movwf	??_Flash_Memory_Initialization
 12605  0738  0021               	movlb	1	; select bank1
 12606  0739  086E               	movf	_product^(0+128),w
 12607  073A  3E15               	addlw	21
 12608  073B  0086               	movwf	6
 12609  073C  3002               	movlw	2	; select bank4/5
 12610  073D  0087               	movwf	7
 12611  073E  0020               	movlb	0	; select bank0
 12612  073F  0824               	movf	??_Flash_Memory_Initialization,w
 12613  0740  0081               	movwf	1
 12614                           
 12615                           ;MCU_B1.c: 941: product->Data[22] = Flash_Memory_Read(4);
 12616  0741  3004               	movlw	4
 12617  0742  319C  2460  3186   	fcall	_Flash_Memory_Read
 12618  0745  0020               	movlb	0	; select bank0
 12619  0746  00A4               	movwf	??_Flash_Memory_Initialization
 12620  0747  0021               	movlb	1	; select bank1
 12621  0748  086E               	movf	_product^(0+128),w
 12622  0749  3E16               	addlw	22
 12623  074A  0086               	movwf	6
 12624  074B  3002               	movlw	2	; select bank4/5
 12625  074C  0087               	movwf	7
 12626  074D  0020               	movlb	0	; select bank0
 12627  074E  0824               	movf	??_Flash_Memory_Initialization,w
 12628  074F  0081               	movwf	1
 12629                           
 12630                           ;MCU_B1.c: 942: product->Data[23] = Flash_Memory_Read(5);
 12631  0750  3005               	movlw	5
 12632  0751  319C  2460  3186   	fcall	_Flash_Memory_Read
 12633  0754  0020               	movlb	0	; select bank0
 12634  0755  00A4               	movwf	??_Flash_Memory_Initialization
 12635  0756  0021               	movlb	1	; select bank1
 12636  0757  086E               	movf	_product^(0+128),w
 12637  0758  3E17               	addlw	23
 12638  0759  0086               	movwf	6
 12639  075A  3002               	movlw	2	; select bank4/5
 12640  075B  0087               	movwf	7
 12641  075C  0020               	movlb	0	; select bank0
 12642  075D  0824               	movf	??_Flash_Memory_Initialization,w
 12643  075E  0081               	movwf	1
 12644                           
 12645                           ;MCU_B1.c: 949: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12646  075F  0021               	movlb	1	; select bank1
 12647  0760  086E               	movf	_product^(0+128),w
 12648  0761  3E0C               	addlw	12
 12649  0762  0086               	movwf	6
 12650  0763  3002               	movlw	2	; select bank4/5
 12651  0764  0087               	movwf	7
 12652  0765  0801               	movf	1,w
 12653  0766  3AFF               	xorlw	255
 12654  0767  1D03               	skipz
 12655  0768  0008               	return
 12656  0769  086E               	movf	_product^(0+128),w
 12657  076A  3E0D               	addlw	13
 12658  076B  0086               	movwf	6
 12659  076C  3002               	movlw	2	; select bank4/5
 12660  076D  0087               	movwf	7
 12661  076E  0801               	movf	1,w
 12662  076F  3AFF               	xorlw	255
 12663  0770  1D03               	skipz
 12664  0771  0008               	return
 12665  0772  086E               	movf	_product^(0+128),w
 12666  0773  3E0E               	addlw	14
 12667  0774  0086               	movwf	6
 12668  0775  3002               	movlw	2	; select bank4/5
 12669  0776  0087               	movwf	7
 12670  0777  0801               	movf	1,w
 12671  0778  3AFF               	xorlw	255
 12672  0779  1D03               	skipz
 12673  077A  0008               	return
 12674                           
 12675                           ;MCU_B1.c: 950: myMain.FirstOpen = 1;
 12676  077B  15AE               	bsf	_myMain^(0+128),3
 12677                           
 12678                           ;MCU_B1.c: 951: myMain.First = 1;
 12679  077C  16AE               	bsf	_myMain^(0+128),5
 12680                           
 12681                           ;MCU_B1.c: 952: }
 12682                           ;MCU_B1.c: 953: } else {
 12683  077D  0008               	return
 12684  077E                     l8650:	
 12685                           
 12686                           ;MCU_B1.c: 955: setMemory_Data(0, 0xff);
 12687  077E  30FF               	movlw	255
 12688  077F  0020               	movlb	0	; select bank0
 12689  0780  00A4               	movwf	??_Flash_Memory_Initialization
 12690  0781  0824               	movf	??_Flash_Memory_Initialization,w
 12691  0782  00A0               	movwf	setMemory_Data@data
 12692  0783  3000               	movlw	0
 12693  0784  3199  2199  3186   	fcall	_setMemory_Data
 12694                           
 12695                           ;MCU_B1.c: 956: setMemory_Data(1, 0xff);
 12696  0787  30FF               	movlw	255
 12697  0788  0020               	movlb	0	; select bank0
 12698  0789  00A4               	movwf	??_Flash_Memory_Initialization
 12699  078A  0824               	movf	??_Flash_Memory_Initialization,w
 12700  078B  00A0               	movwf	setMemory_Data@data
 12701  078C  3001               	movlw	1
 12702  078D  3199  2199  3186   	fcall	_setMemory_Data
 12703                           
 12704                           ;MCU_B1.c: 957: setMemory_Data(2, 0xff);
 12705  0790  30FF               	movlw	255
 12706  0791  0020               	movlb	0	; select bank0
 12707  0792  00A4               	movwf	??_Flash_Memory_Initialization
 12708  0793  0824               	movf	??_Flash_Memory_Initialization,w
 12709  0794  00A0               	movwf	setMemory_Data@data
 12710  0795  3002               	movlw	2
 12711  0796  3199  2199  3186   	fcall	_setMemory_Data
 12712                           
 12713                           ;MCU_B1.c: 958: setMemory_Data(3, 0xff);
 12714  0799  30FF               	movlw	255
 12715  079A  0020               	movlb	0	; select bank0
 12716  079B  00A4               	movwf	??_Flash_Memory_Initialization
 12717  079C  0824               	movf	??_Flash_Memory_Initialization,w
 12718  079D  00A0               	movwf	setMemory_Data@data
 12719  079E  3003               	movlw	3
 12720  079F  3199  2199  3186   	fcall	_setMemory_Data
 12721                           
 12722                           ;MCU_B1.c: 959: setMemory_Data(4, 0xff);
 12723  07A2  30FF               	movlw	255
 12724  07A3  0020               	movlb	0	; select bank0
 12725  07A4  00A4               	movwf	??_Flash_Memory_Initialization
 12726  07A5  0824               	movf	??_Flash_Memory_Initialization,w
 12727  07A6  00A0               	movwf	setMemory_Data@data
 12728  07A7  3004               	movlw	4
 12729  07A8  3199  2199  3186   	fcall	_setMemory_Data
 12730                           
 12731                           ;MCU_B1.c: 960: setMemory_Data(5, 0xff);
 12732  07AB  30FF               	movlw	255
 12733  07AC  0020               	movlb	0	; select bank0
 12734  07AD  00A4               	movwf	??_Flash_Memory_Initialization
 12735  07AE  0824               	movf	??_Flash_Memory_Initialization,w
 12736  07AF  00A0               	movwf	setMemory_Data@data
 12737  07B0  3005               	movlw	5
 12738  07B1  3199  2199  3186   	fcall	_setMemory_Data
 12739                           
 12740                           ;MCU_B1.c: 961: setMemory_Data(31, 0xaa);
 12741  07B4  30AA               	movlw	170
 12742  07B5  0020               	movlb	0	; select bank0
 12743  07B6  00A4               	movwf	??_Flash_Memory_Initialization
 12744  07B7  0824               	movf	??_Flash_Memory_Initialization,w
 12745  07B8  00A0               	movwf	setMemory_Data@data
 12746  07B9  301F               	movlw	31
 12747  07BA  3199  2199  3186   	fcall	_setMemory_Data
 12748                           
 12749                           ;MCU_B1.c: 966: GIE = 0;
 12750  07BD  138B               	bcf	11,7	;volatile
 12751                           
 12752                           ;MCU_B1.c: 967: Flash_Memory_Write();
 12753  07BE  319F  27A0         	fcall	_Flash_Memory_Write
 12754                           
 12755                           ;MCU_B1.c: 968: GIE = 1;
 12756  07C0  178B               	bsf	11,7	;volatile
 12757                           
 12758                           ;MCU_B1.c: 969: myMain.FirstOpen = 1;
 12759  07C1  0021               	movlb	1	; select bank1
 12760  07C2  15AE               	bsf	_myMain^(0+128),3
 12761                           
 12762                           ;MCU_B1.c: 970: myMain.First = 1;
 12763  07C3  16AE               	bsf	_myMain^(0+128),5
 12764                           
 12765                           ;MCU_B1.c: 971: myMain.InitDimmer = 1;
 12766  07C4  1638               	bsf	(_myMain^(0+128)+10),4
 12767  07C5  0008               	return
 12768  07C6                     __end_of_Flash_Memory_Initialization:	
 12769                           
 12770                           	psect	text80
 12771  1999                     __ptext80:	
 12772 ;; *************** function _setMemory_Data *****************
 12773 ;; Defined at:
 12774 ;;		line 1094 in file "../src/MCU_B1.c"
 12775 ;; Parameters:    Size  Location     Type
 12776 ;;  address         1    wreg     unsigned char 
 12777 ;;  data            1    0[BANK0 ] unsigned char 
 12778 ;; Auto vars:     Size  Location     Type
 12779 ;;  address         1    2[BANK0 ] unsigned char 
 12780 ;; Return value:  Size  Location     Type
 12781 ;;		None               void
 12782 ;; Registers used:
 12783 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12784 ;; Tracked objects:
 12785 ;;		On entry : 0/0
 12786 ;;		On exit  : 0/0
 12787 ;;		Unchanged: 0/0
 12788 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12789 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12790 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12791 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12792 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12793 ;;Total ram usage:        3 bytes
 12794 ;; Hardware stack levels used:    1
 12795 ;; Hardware stack levels required when called:    5
 12796 ;; This function calls:
 12797 ;;		Nothing
 12798 ;; This function is called by:
 12799 ;;		_Flash_Memory_Initialization
 12800 ;;		_Flash_Memory_Modify
 12801 ;; This function uses a non-reentrant model
 12802 ;;
 12803                           
 12804                           
 12805                           ;psect for function _setMemory_Data
 12806  1999                     _setMemory_Data:	
 12807                           
 12808                           ;incstack = 0
 12809                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12810                           ;setMemory_Data@address stored from wreg
 12811  1999  0020               	movlb	0	; select bank0
 12812  199A  00A2               	movwf	setMemory_Data@address
 12813                           
 12814                           ;MCU_B1.c: 1095: Memory.Data[address] = data;
 12815  199B  0820               	movf	setMemory_Data@data,w
 12816  199C  00A1               	movwf	??_setMemory_Data
 12817  199D  0822               	movf	setMemory_Data@address,w
 12818  199E  3E20               	addlw	_Memory& (0+255)
 12819  199F  0086               	movwf	6
 12820  19A0  3002               	movlw	2	; select bank4/5
 12821  19A1  0087               	movwf	7
 12822  19A2  0821               	movf	??_setMemory_Data,w
 12823  19A3  0081               	movwf	1
 12824  19A4  0008               	return
 12825  19A5                     __end_of_setMemory_Data:	
 12826                           
 12827                           	psect	text81
 12828  1FA0                     __ptext81:	
 12829 ;; *************** function _Flash_Memory_Write *****************
 12830 ;; Defined at:
 12831 ;;		line 1023 in file "../src/MCU_B1.c"
 12832 ;; Parameters:    Size  Location     Type
 12833 ;;		None
 12834 ;; Auto vars:     Size  Location     Type
 12835 ;;  i               1    1[BANK0 ] unsigned char 
 12836 ;; Return value:  Size  Location     Type
 12837 ;;		None               void
 12838 ;; Registers used:
 12839 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12840 ;; Tracked objects:
 12841 ;;		On entry : 0/0
 12842 ;;		On exit  : 0/0
 12843 ;;		Unchanged: 0/0
 12844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12846 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12847 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12848 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12849 ;;Total ram usage:        2 bytes
 12850 ;; Hardware stack levels used:    1
 12851 ;; Hardware stack levels required when called:    6
 12852 ;; This function calls:
 12853 ;;		_Flash_Memory_Unlock
 12854 ;; This function is called by:
 12855 ;;		_Flash_Memory_Initialization
 12856 ;;		_Flash_Memory_Modify
 12857 ;; This function uses a non-reentrant model
 12858 ;;
 12859                           
 12860                           
 12861                           ;psect for function _Flash_Memory_Write
 12862  1FA0                     _Flash_Memory_Write:	
 12863                           
 12864                           ;MCU_B1.c: 1024: char i = 0;
 12865                           
 12866                           ;incstack = 0
 12867                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12868  1FA0  0020               	movlb	0	; select bank0
 12869  1FA1  01A1               	clrf	Flash_Memory_Write@i
 12870                           
 12871                           ;MCU_B1.c: 1025: CFGS = 0;
 12872  1FA2  0023               	movlb	3	; select bank3
 12873  1FA3  1315               	bcf	21,6	;volatile
 12874                           
 12875                           ;MCU_B1.c: 1026: PMADRH = 0x30;
 12876  1FA4  3030               	movlw	48
 12877  1FA5  0092               	movwf	18	;volatile
 12878                           
 12879                           ;MCU_B1.c: 1027: PMDATH = 0;
 12880  1FA6  0194               	clrf	20	;volatile
 12881                           
 12882                           ;MCU_B1.c: 1028: FREE = 0;
 12883  1FA7  1215               	bcf	21,4	;volatile
 12884                           
 12885                           ;MCU_B1.c: 1029: LWLO = 1;
 12886  1FA8  1695               	bsf	21,5	;volatile
 12887                           
 12888                           ;MCU_B1.c: 1030: WREN = 1;
 12889  1FA9  1515               	bsf	21,2	;volatile
 12890                           
 12891                           ;MCU_B1.c: 1031: for (i = 0; i < 32; i++) {
 12892  1FAA  0020               	movlb	0	; select bank0
 12893  1FAB  01A1               	clrf	Flash_Memory_Write@i
 12894  1FAC  3020               	movlw	32
 12895  1FAD  0221               	subwf	Flash_Memory_Write@i,w
 12896  1FAE  1803               	btfsc	3,0
 12897  1FAF  2FC8               	goto	l1456
 12898  1FB0                     l7652:	
 12899                           
 12900                           ;MCU_B1.c: 1032: PMADRL = i;
 12901  1FB0  0821               	movf	Flash_Memory_Write@i,w
 12902  1FB1  0023               	movlb	3	; select bank3
 12903  1FB2  0091               	movwf	17	;volatile
 12904                           
 12905                           ;MCU_B1.c: 1033: PMDATL = Memory.Data[i];
 12906  1FB3  0020               	movlb	0	; select bank0
 12907  1FB4  0821               	movf	Flash_Memory_Write@i,w
 12908  1FB5  3E20               	addlw	_Memory& (0+255)
 12909  1FB6  0086               	movwf	6
 12910  1FB7  3002               	movlw	2	; select bank4/5
 12911  1FB8  0087               	movwf	7
 12912  1FB9  0801               	movf	1,w
 12913  1FBA  0023               	movlb	3	; select bank3
 12914  1FBB  0093               	movwf	19	;volatile
 12915                           
 12916                           ;MCU_B1.c: 1034: Flash_Memory_Unlock();
 12917  1FBC  3199  214C  319F   	fcall	_Flash_Memory_Unlock
 12918  1FBF  3001               	movlw	1
 12919  1FC0  0020               	movlb	0	; select bank0
 12920  1FC1  00A0               	movwf	??_Flash_Memory_Write
 12921  1FC2  0820               	movf	??_Flash_Memory_Write,w
 12922  1FC3  07A1               	addwf	Flash_Memory_Write@i,f
 12923  1FC4  3020               	movlw	32
 12924  1FC5  0221               	subwf	Flash_Memory_Write@i,w
 12925  1FC6  1C03               	skipc
 12926  1FC7  2FB0               	goto	l7652
 12927  1FC8                     l1456:	
 12928                           
 12929                           ;MCU_B1.c: 1035: }
 12930                           ;MCU_B1.c: 1036: LWLO = 0;
 12931  1FC8  0023               	movlb	3	; select bank3
 12932  1FC9  1295               	bcf	21,5	;volatile
 12933                           
 12934                           ;MCU_B1.c: 1037: Flash_Memory_Unlock();
 12935  1FCA  3199  214C         	fcall	_Flash_Memory_Unlock
 12936                           
 12937                           ;MCU_B1.c: 1038: WREN = 0;
 12938  1FCC  0023               	movlb	3	; select bank3
 12939  1FCD  1115               	bcf	21,2	;volatile
 12940  1FCE  0008               	return
 12941  1FCF                     __end_of_Flash_Memory_Write:	
 12942                           
 12943                           	psect	text82
 12944  194C                     __ptext82:	
 12945 ;; *************** function _Flash_Memory_Unlock *****************
 12946 ;; Defined at:
 12947 ;;		line 1002 in file "../src/MCU_B1.c"
 12948 ;; Parameters:    Size  Location     Type
 12949 ;;		None
 12950 ;; Auto vars:     Size  Location     Type
 12951 ;;		None
 12952 ;; Return value:  Size  Location     Type
 12953 ;;		None               void
 12954 ;; Registers used:
 12955 ;;		wreg
 12956 ;; Tracked objects:
 12957 ;;		On entry : 0/0
 12958 ;;		On exit  : 0/0
 12959 ;;		Unchanged: 0/0
 12960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12964 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12965 ;;Total ram usage:        0 bytes
 12966 ;; Hardware stack levels used:    1
 12967 ;; Hardware stack levels required when called:    5
 12968 ;; This function calls:
 12969 ;;		Nothing
 12970 ;; This function is called by:
 12971 ;;		_Flash_Memory_Write
 12972 ;;		_Flash_Memory_Erasing
 12973 ;; This function uses a non-reentrant model
 12974 ;;
 12975                           
 12976                           
 12977                           ;psect for function _Flash_Memory_Unlock
 12978  194C                     _Flash_Memory_Unlock:	
 12979                           
 12980                           ;MCU_B1.c: 1003: PMCON2 = 0x55;
 12981                           
 12982                           ;incstack = 0
 12983                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12984  194C  3055               	movlw	85
 12985  194D  0023               	movlb	3	; select bank3
 12986  194E  0096               	movwf	22	;volatile
 12987                           
 12988                           ;MCU_B1.c: 1004: PMCON2 = 0xaa;
 12989  194F  30AA               	movlw	170
 12990  1950  0096               	movwf	22	;volatile
 12991                           
 12992                           ;MCU_B1.c: 1005: WR = 1;
 12993  1951  1495               	bsf	21,1	;volatile
 12994                           
 12995                           ;MCU_B1.c: 1006: __nop();
 12996  1952  0000               	nop
 12997                           
 12998                           ;MCU_B1.c: 1007: __nop();
 12999  1953  0000               	nop
 13000  1954  0008               	return
 13001  1955                     __end_of_Flash_Memory_Unlock:	
 13002                           
 13003                           	psect	text83
 13004  1C60                     __ptext83:	
 13005 ;; *************** function _Flash_Memory_Read *****************
 13006 ;; Defined at:
 13007 ;;		line 1011 in file "../src/MCU_B1.c"
 13008 ;; Parameters:    Size  Location     Type
 13009 ;;  address         1    wreg     unsigned char 
 13010 ;; Auto vars:     Size  Location     Type
 13011 ;;  address         1    2[BANK0 ] unsigned char 
 13012 ;;  ret             1    3[BANK0 ] unsigned char 
 13013 ;;  i               1    1[BANK0 ] unsigned char 
 13014 ;; Return value:  Size  Location     Type
 13015 ;;                  1    wreg      unsigned char 
 13016 ;; Registers used:
 13017 ;;		wreg, status,2
 13018 ;; Tracked objects:
 13019 ;;		On entry : 0/0
 13020 ;;		On exit  : 0/0
 13021 ;;		Unchanged: 0/0
 13022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13024 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13025 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13026 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13027 ;;Total ram usage:        4 bytes
 13028 ;; Hardware stack levels used:    1
 13029 ;; Hardware stack levels required when called:    5
 13030 ;; This function calls:
 13031 ;;		Nothing
 13032 ;; This function is called by:
 13033 ;;		_Flash_Memory_Initialization
 13034 ;;		_Flash_Memory_Modify
 13035 ;; This function uses a non-reentrant model
 13036 ;;
 13037                           
 13038                           
 13039                           ;psect for function _Flash_Memory_Read
 13040  1C60                     _Flash_Memory_Read:	
 13041                           
 13042                           ;incstack = 0
 13043                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 13044                           ;Flash_Memory_Read@address stored from wreg
 13045  1C60  0020               	movlb	0	; select bank0
 13046  1C61  00A2               	movwf	Flash_Memory_Read@address
 13047                           
 13048                           ;MCU_B1.c: 1012: char i = 0, ret = 0;
 13049  1C62  01A1               	clrf	Flash_Memory_Read@i
 13050  1C63  01A3               	clrf	Flash_Memory_Read@ret
 13051                           
 13052                           ;MCU_B1.c: 1013: PMADRH = 0x30;
 13053  1C64  3030               	movlw	48
 13054  1C65  0023               	movlb	3	; select bank3
 13055  1C66  0092               	movwf	18	;volatile
 13056                           
 13057                           ;MCU_B1.c: 1014: PMADRL = address;
 13058  1C67  0020               	movlb	0	; select bank0
 13059  1C68  0822               	movf	Flash_Memory_Read@address,w
 13060  1C69  0023               	movlb	3	; select bank3
 13061  1C6A  0091               	movwf	17	;volatile
 13062                           
 13063                           ;MCU_B1.c: 1015: CFGS = 0;
 13064  1C6B  1315               	bcf	21,6	;volatile
 13065                           
 13066                           ;MCU_B1.c: 1016: RD = 1;
 13067  1C6C  1415               	bsf	21,0	;volatile
 13068                           
 13069                           ;MCU_B1.c: 1017: i = PMDATH;
 13070  1C6D  0814               	movf	20,w	;volatile
 13071  1C6E  0020               	movlb	0	; select bank0
 13072  1C6F  00A0               	movwf	??_Flash_Memory_Read
 13073  1C70  0820               	movf	??_Flash_Memory_Read,w
 13074  1C71  00A1               	movwf	Flash_Memory_Read@i
 13075                           
 13076                           ;MCU_B1.c: 1018: ret = PMDATL;
 13077  1C72  0023               	movlb	3	; select bank3
 13078  1C73  0813               	movf	19,w	;volatile
 13079  1C74  0020               	movlb	0	; select bank0
 13080  1C75  00A0               	movwf	??_Flash_Memory_Read
 13081  1C76  0820               	movf	??_Flash_Memory_Read,w
 13082  1C77  00A3               	movwf	Flash_Memory_Read@ret
 13083                           
 13084                           ;MCU_B1.c: 1019: return ret;
 13085  1C78  0823               	movf	Flash_Memory_Read@ret,w
 13086  1C79  0008               	return
 13087  1C7A                     __end_of_Flash_Memory_Read:	
 13088                           
 13089                           	psect	text84
 13090  047F                     __ptext84:	
 13091 ;; *************** function _Exception_Main *****************
 13092 ;; Defined at:
 13093 ;;		line 499 in file "../src/main_B1.c"
 13094 ;; Parameters:    Size  Location     Type
 13095 ;;		None
 13096 ;; Auto vars:     Size  Location     Type
 13097 ;;  i               2   18[BANK0 ] int 
 13098 ;;  i               2   16[BANK0 ] int 
 13099 ;;  lights          1   21[BANK0 ] unsigned char 
 13100 ;;  error           1   20[BANK0 ] unsigned char 
 13101 ;;  count           1   15[BANK0 ] unsigned char 
 13102 ;;  status          1   14[BANK0 ] unsigned char 
 13103 ;; Return value:  Size  Location     Type
 13104 ;;		None               void
 13105 ;; Registers used:
 13106 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13107 ;; Tracked objects:
 13108 ;;		On entry : 0/0
 13109 ;;		On exit  : 0/0
 13110 ;;		Unchanged: 0/0
 13111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13112 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13113 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13114 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13115 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13116 ;;Total ram usage:        9 bytes
 13117 ;; Hardware stack levels used:    1
 13118 ;; Hardware stack levels required when called:    7
 13119 ;; This function calls:
 13120 ;;		_getDimmerLights_Line
 13121 ;;		_getDimmerLights_Status
 13122 ;;		_getMain_All_Error_Status
 13123 ;;		_getMain_All_LightsStatus
 13124 ;;		_setBuz
 13125 ;;		_setDimmerLights_SwOff
 13126 ;;		_setLED
 13127 ;; This function is called by:
 13128 ;;		_main
 13129 ;; This function uses a non-reentrant model
 13130 ;;
 13131                           
 13132                           
 13133                           ;psect for function _Exception_Main
 13134  047F                     _Exception_Main:	
 13135                           
 13136                           ;main_B1.c: 500: char error = getMain_All_Error_Status(0);
 13137                           
 13138                           ;incstack = 0
 13139                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13140  047F  3000               	movlw	0
 13141  0480  3190  202E  3184   	fcall	_getMain_All_Error_Status
 13142  0483  0020               	movlb	0	; select bank0
 13143  0484  00AD               	movwf	??_Exception_Main
 13144  0485  082D               	movf	??_Exception_Main,w
 13145  0486  00B4               	movwf	Exception_Main@error
 13146                           
 13147                           ;main_B1.c: 501: char lights = 0, count = 2;
 13148  0487  01B5               	clrf	Exception_Main@lights
 13149  0488  3002               	movlw	2
 13150  0489  00AD               	movwf	??_Exception_Main
 13151  048A  082D               	movf	??_Exception_Main,w
 13152  048B  00AF               	movwf	Exception_Main@count
 13153                           
 13154                           ;main_B1.c: 502: char status = 0;
 13155  048C  01AE               	clrf	Exception_Main@status
 13156                           
 13157                           ;main_B1.c: 504: if (myMain.Error_Run == 1) {
 13158  048D  0021               	movlb	1	; select bank1
 13159  048E  1DB8               	btfss	(_myMain^(0+128)+10),3
 13160  048F  2C9F               	goto	l8982
 13161                           
 13162                           ;main_B1.c: 505: if (error == 0) {
 13163  0490  0020               	movlb	0	; select bank0
 13164  0491  08B4               	movf	Exception_Main@error,f
 13165  0492  1D03               	skipz
 13166  0493  0008               	return
 13167                           
 13168                           ;main_B1.c: 506: myMain.Error_Run = 0;
 13169  0494  0021               	movlb	1	; select bank1
 13170  0495  11B8               	bcf	(_myMain^(0+128)+10),3
 13171                           
 13172                           ;main_B1.c: 509: setLED(99, 10);
 13173  0496  300A               	movlw	10
 13174  0497  0020               	movlb	0	; select bank0
 13175  0498  00AD               	movwf	??_Exception_Main
 13176  0499  082D               	movf	??_Exception_Main,w
 13177  049A  00A2               	movwf	setLED@command
 13178  049B  3063               	movlw	99
 13179  049C  3193  230E         	fcall	_setLED
 13180                           
 13181                           ;main_B1.c: 522: }
 13182                           ;main_B1.c: 523: } else {
 13183  049E  0008               	return
 13184  049F                     l8982:	
 13185                           
 13186                           ;main_B1.c: 524: if (error != 0) {
 13187  049F  0020               	movlb	0	; select bank0
 13188  04A0  0834               	movf	Exception_Main@error,w
 13189  04A1  1903               	btfsc	3,2
 13190  04A2  0008               	return
 13191                           
 13192                           ;main_B1.c: 525: myMain.Error_Run = 1;
 13193  04A3  0021               	movlb	1	; select bank1
 13194  04A4  15B8               	bsf	(_myMain^(0+128)+10),3
 13195                           
 13196                           ;main_B1.c: 527: setLED(99, 11);
 13197  04A5  300B               	movlw	11
 13198  04A6  0020               	movlb	0	; select bank0
 13199  04A7  00AD               	movwf	??_Exception_Main
 13200  04A8  082D               	movf	??_Exception_Main,w
 13201  04A9  00A2               	movwf	setLED@command
 13202  04AA  3063               	movlw	99
 13203  04AB  3193  230E  3184   	fcall	_setLED
 13204                           
 13205                           ;main_B1.c: 538: switch (error) {
 13206  04AE  2D4B               	goto	l9030
 13207  04AF                     l8988:	
 13208                           ;main_B1.c: 539: case 2:
 13209                           
 13210                           
 13211                           ;main_B1.c: 546: if (getMain_All_LightsStatus() == 1) {
 13212  04AF  319A  22F0  3184   	fcall	_getMain_All_LightsStatus
 13213  04B2  3A01               	xorlw	1
 13214  04B3  1D03               	skipz
 13215  04B4  2CBE               	goto	l8992
 13216                           
 13217                           ;main_B1.c: 547: setBuz(10, 300);
 13218  04B5  302C               	movlw	44
 13219  04B6  0020               	movlb	0	; select bank0
 13220  04B7  00A9               	movwf	setBuz@time
 13221  04B8  3001               	movlw	1
 13222  04B9  00AA               	movwf	setBuz@time+1
 13223  04BA  300A               	movlw	10
 13224  04BB  3194  240B  3184   	fcall	_setBuz
 13225  04BE                     l8992:	
 13226                           
 13227                           ;main_B1.c: 548: }
 13228                           ;main_B1.c: 550: for (int i = 0; i < count; i++) {
 13229  04BE  0020               	movlb	0	; select bank0
 13230  04BF  01B0               	clrf	Exception_Main@i
 13231  04C0  01B1               	clrf	Exception_Main@i+1
 13232  04C1                     l9002:	
 13233  04C1  0831               	movf	Exception_Main@i+1,w
 13234  04C2  3A80               	xorlw	128
 13235  04C3  00AD               	movwf	??_Exception_Main
 13236  04C4  3080               	movlw	128
 13237  04C5  022D               	subwf	??_Exception_Main,w
 13238  04C6  1D03               	skipz
 13239  04C7  2CCA               	goto	u9965
 13240  04C8  082F               	movf	Exception_Main@count,w
 13241  04C9  0230               	subwf	Exception_Main@i,w
 13242  04CA                     u9965:	
 13243  04CA  1803               	btfsc	3,0
 13244  04CB  2CEC               	goto	u9960
 13245                           
 13246                           ;main_B1.c: 552: if (getDimmerLights_Status(i + 1) == 1) {
 13247  04CC  0020               	movlb	0	; select bank0
 13248  04CD  0830               	movf	Exception_Main@i,w
 13249  04CE  3E01               	addlw	1
 13250  04CF  319A  2209  3184   	fcall	_getDimmerLights_Status
 13251  04D2  3A01               	xorlw	1
 13252  04D3  1D03               	skipz
 13253  04D4  2CE6               	goto	l9000
 13254                           
 13255                           ;main_B1.c: 553: DimmerLights->SwFlag = 1;
 13256  04D5  0021               	movlb	1	; select bank1
 13257  04D6  0856               	movf	_DimmerLights^(0+128),w
 13258  04D7  0086               	movwf	6
 13259  04D8  3001               	movlw	1	; select bank2/3
 13260  04D9  0087               	movwf	7
 13261  04DA  1401               	bsf	1,0
 13262                           
 13263                           ;main_B1.c: 554: DimmerLights->Status = 0;
 13264  04DB  0A56               	incf	_DimmerLights^(0+128),w
 13265  04DC  0086               	movwf	6
 13266  04DD  3001               	movlw	1	; select bank2/3
 13267  04DE  0087               	movwf	7
 13268  04DF  1001               	bcf	1,0
 13269                           
 13270                           ;main_B1.c: 555: setDimmerLights_SwOff(i + 1);
 13271  04E0  0020               	movlb	0	; select bank0
 13272  04E1  0830               	movf	Exception_Main@i,w
 13273  04E2  3E01               	addlw	1
 13274  04E3  3187  27C6  3184   	fcall	_setDimmerLights_SwOff
 13275  04E6                     l9000:	
 13276  04E6  3001               	movlw	1
 13277  04E7  0020               	movlb	0	; select bank0
 13278  04E8  07B0               	addwf	Exception_Main@i,f
 13279  04E9  3000               	movlw	0
 13280  04EA  3DB1               	addwfc	Exception_Main@i+1,f
 13281  04EB  2CC1               	goto	l9002
 13282  04EC                     u9960:	
 13283  04EC  0020               	movlb	0	; select bank0
 13284  04ED  0008               	return
 13285  04EE                     l9004:	
 13286                           ;main_B1.c: 561: case 3:
 13287                           
 13288                           ;main_B1.c: 556: }
 13289                           ;main_B1.c: 557: }
 13290                           ;main_B1.c: 560: break;
 13291                           
 13292                           
 13293                           ;main_B1.c: 563: setBuz(5, 300);
 13294  04EE  302C               	movlw	44
 13295  04EF  0020               	movlb	0	; select bank0
 13296  04F0  00A9               	movwf	setBuz@time
 13297  04F1  3001               	movlw	1
 13298  04F2  00AA               	movwf	setBuz@time+1
 13299  04F3  3005               	movlw	5
 13300  04F4  3194  240B  3184   	fcall	_setBuz
 13301                           
 13302                           ;main_B1.c: 564: lights = getDimmerLights_Line();
 13303  04F7  319B  2329  3184   	fcall	_getDimmerLights_Line
 13304  04FA  0020               	movlb	0	; select bank0
 13305  04FB  00AD               	movwf	??_Exception_Main
 13306  04FC  082D               	movf	??_Exception_Main,w
 13307  04FD  00B5               	movwf	Exception_Main@lights
 13308                           
 13309                           ;main_B1.c: 565: if (lights == 0) {
 13310  04FE  08B5               	movf	Exception_Main@lights,f
 13311  04FF  1D03               	skipz
 13312  0500  2D30               	goto	l9022
 13313                           
 13314                           ;main_B1.c: 567: for (int i = 0; i < count; i++) {
 13315  0501  01B2               	clrf	Exception_Main@i_6923
 13316  0502  01B3               	clrf	Exception_Main@i_6923+1
 13317  0503                     l9020:	
 13318  0503  0833               	movf	Exception_Main@i_6923+1,w
 13319  0504  3A80               	xorlw	128
 13320  0505  00AD               	movwf	??_Exception_Main
 13321  0506  3080               	movlw	128
 13322  0507  022D               	subwf	??_Exception_Main,w
 13323  0508  1D03               	skipz
 13324  0509  2D0C               	goto	u9995
 13325  050A  082F               	movf	Exception_Main@count,w
 13326  050B  0232               	subwf	Exception_Main@i_6923,w
 13327  050C                     u9995:	
 13328  050C  1803               	btfsc	3,0
 13329  050D  2D2E               	goto	u9990
 13330                           
 13331                           ;main_B1.c: 569: if (getDimmerLights_Status(i + 1) == 1) {
 13332  050E  0020               	movlb	0	; select bank0
 13333  050F  0832               	movf	Exception_Main@i_6923,w
 13334  0510  3E01               	addlw	1
 13335  0511  319A  2209  3184   	fcall	_getDimmerLights_Status
 13336  0514  3A01               	xorlw	1
 13337  0515  1D03               	skipz
 13338  0516  2D28               	goto	l9018
 13339                           
 13340                           ;main_B1.c: 570: DimmerLights->SwFlag = 1;
 13341  0517  0021               	movlb	1	; select bank1
 13342  0518  0856               	movf	_DimmerLights^(0+128),w
 13343  0519  0086               	movwf	6
 13344  051A  3001               	movlw	1	; select bank2/3
 13345  051B  0087               	movwf	7
 13346  051C  1401               	bsf	1,0
 13347                           
 13348                           ;main_B1.c: 571: DimmerLights->Status = 0;
 13349  051D  0A56               	incf	_DimmerLights^(0+128),w
 13350  051E  0086               	movwf	6
 13351  051F  3001               	movlw	1	; select bank2/3
 13352  0520  0087               	movwf	7
 13353  0521  1001               	bcf	1,0
 13354                           
 13355                           ;main_B1.c: 572: setDimmerLights_SwOff(i + 1);
 13356  0522  0020               	movlb	0	; select bank0
 13357  0523  0832               	movf	Exception_Main@i_6923,w
 13358  0524  3E01               	addlw	1
 13359  0525  3187  27C6  3184   	fcall	_setDimmerLights_SwOff
 13360  0528                     l9018:	
 13361  0528  3001               	movlw	1
 13362  0529  0020               	movlb	0	; select bank0
 13363  052A  07B2               	addwf	Exception_Main@i_6923,f
 13364  052B  3000               	movlw	0
 13365  052C  3DB3               	addwfc	Exception_Main@i_6923+1,f
 13366  052D  2D03               	goto	l9020
 13367  052E                     u9990:	
 13368  052E  0020               	movlb	0	; select bank0
 13369  052F  0008               	return
 13370  0530                     l9022:	
 13371                           ;main_B1.c: 573: }
 13372                           ;main_B1.c: 574: }
 13373                           ;main_B1.c: 575: } else {
 13374                           
 13375                           
 13376                           ;main_B1.c: 577: if (getDimmerLights_Status(lights) == 1) {
 13377  0530  0020               	movlb	0	; select bank0
 13378  0531  0835               	movf	Exception_Main@lights,w
 13379  0532  319A  2209  3184   	fcall	_getDimmerLights_Status
 13380  0535  3A01               	xorlw	1
 13381  0536  1903               	btfsc	3,2
 13382  0537  2D3A               	goto	l9024
 13383  0538  0020               	movlb	0	; select bank0
 13384  0539  0008               	return
 13385  053A                     l9024:	
 13386                           
 13387                           ;main_B1.c: 579: DimmerLights->SwFlag = 1;
 13388  053A  0021               	movlb	1	; select bank1
 13389  053B  0856               	movf	_DimmerLights^(0+128),w
 13390  053C  0086               	movwf	6
 13391  053D  3001               	movlw	1	; select bank2/3
 13392  053E  0087               	movwf	7
 13393  053F  1401               	bsf	1,0
 13394                           
 13395                           ;main_B1.c: 580: DimmerLights->Status = 0;
 13396  0540  0A56               	incf	_DimmerLights^(0+128),w
 13397  0541  0086               	movwf	6
 13398  0542  3001               	movlw	1	; select bank2/3
 13399  0543  0087               	movwf	7
 13400  0544  1001               	bcf	1,0
 13401                           
 13402                           ;main_B1.c: 581: setDimmerLights_SwOff(lights);
 13403  0545  0020               	movlb	0	; select bank0
 13404  0546  0835               	movf	Exception_Main@lights,w
 13405  0547  3187  27C6         	fcall	_setDimmerLights_SwOff
 13406  0549  0020               	movlb	0	; select bank0
 13407  054A  0008               	return
 13408  054B                     l9030:	
 13409                           ;main_B1.c: 586: }
 13410                           
 13411                           ;main_B1.c: 582: }
 13412                           ;main_B1.c: 583: }
 13413                           ;main_B1.c: 585: break;
 13414                           
 13415  054B  0020               	movlb	0	; select bank0
 13416  054C  0834               	movf	Exception_Main@error,w
 13417                           
 13418                           ; Switch size 1, requested type "space"
 13419                           ; Number of cases is 2, Range of values is 2 to 3
 13420                           ; switch strategies available:
 13421                           ; Name         Instructions Cycles
 13422                           ; simple_byte            7     4 (average)
 13423                           ; direct_byte           13     9 (fixed)
 13424                           ; jumptable            263     9 (fixed)
 13425                           ;	Chosen strategy is simple_byte
 13426  054D  3A02               	xorlw	2	; case 2
 13427  054E  1903               	skipnz
 13428  054F  2CAF               	goto	l8988
 13429  0550  3A01               	xorlw	1	; case 3
 13430  0551  1903               	skipnz
 13431  0552  2CEE               	goto	l9004
 13432  0553  2D55               	goto	l2914
 13433  0554  0008               	return
 13434  0555                     l2914:	
 13435  0555  0008               	return
 13436  0556                     __end_of_Exception_Main:	
 13437                           
 13438                           	psect	text85
 13439  1B29                     __ptext85:	
 13440 ;; *************** function _getDimmerLights_Line *****************
 13441 ;; Defined at:
 13442 ;;		line 1045 in file "../src/Dimmer_B1.c"
 13443 ;; Parameters:    Size  Location     Type
 13444 ;;		None
 13445 ;; Auto vars:     Size  Location     Type
 13446 ;;  line            1    1[BANK0 ] unsigned char 
 13447 ;; Return value:  Size  Location     Type
 13448 ;;                  1    wreg      unsigned char 
 13449 ;; Registers used:
 13450 ;;		wreg, status,2
 13451 ;; Tracked objects:
 13452 ;;		On entry : 0/0
 13453 ;;		On exit  : 0/0
 13454 ;;		Unchanged: 0/0
 13455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13457 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13458 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13459 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13460 ;;Total ram usage:        2 bytes
 13461 ;; Hardware stack levels used:    1
 13462 ;; Hardware stack levels required when called:    5
 13463 ;; This function calls:
 13464 ;;		Nothing
 13465 ;; This function is called by:
 13466 ;;		_Exception_Main
 13467 ;; This function uses a non-reentrant model
 13468 ;;
 13469                           
 13470                           
 13471                           ;psect for function _getDimmerLights_Line
 13472  1B29                     _getDimmerLights_Line:	
 13473                           
 13474                           ;Dimmer_B1.c: 1046: char line = 0;
 13475                           
 13476                           ;incstack = 0
 13477                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 13478  1B29  0020               	movlb	0	; select bank0
 13479  1B2A  01A1               	clrf	getDimmerLights_Line@line
 13480                           
 13481                           ;Dimmer_B1.c: 1048: if (DimmerLights1.Line == 1) {
 13482  1B2B  0022               	movlb	2	; select bank2
 13483  1B2C  1CE8               	btfss	(_DimmerLights1^(0+256)+1),1
 13484  1B2D  2B32               	goto	l920
 13485                           
 13486                           ;Dimmer_B1.c: 1049: line = 1;
 13487  1B2E  0020               	movlb	0	; select bank0
 13488  1B2F  01A1               	clrf	getDimmerLights_Line@line
 13489  1B30  0AA1               	incf	getDimmerLights_Line@line,f
 13490                           
 13491                           ;Dimmer_B1.c: 1050: }
 13492  1B31  2B3A               	goto	l921
 13493  1B32                     l920:	
 13494                           
 13495                           ;Dimmer_B1.c: 1053: else if (DimmerLights2.Line == 1) {
 13496  1B32  0023               	movlb	3	; select bank3
 13497  1B33  1CD1               	btfss	(_DimmerLights2^(0+384)+1),1
 13498  1B34  2B3A               	goto	l921
 13499                           
 13500                           ;Dimmer_B1.c: 1054: line = 2;
 13501  1B35  3002               	movlw	2
 13502  1B36  0020               	movlb	0	; select bank0
 13503  1B37  00A0               	movwf	??_getDimmerLights_Line
 13504  1B38  0820               	movf	??_getDimmerLights_Line,w
 13505  1B39  00A1               	movwf	getDimmerLights_Line@line
 13506  1B3A                     l921:	
 13507                           
 13508                           ;Dimmer_B1.c: 1055: }
 13509                           ;Dimmer_B1.c: 1062: return line;
 13510  1B3A  0020               	movlb	0	; select bank0
 13511  1B3B  0821               	movf	getDimmerLights_Line@line,w
 13512  1B3C  0008               	return
 13513  1B3D                     __end_of_getDimmerLights_Line:	
 13514                           
 13515                           	psect	text86
 13516  1D9C                     __ptext86:	
 13517 ;; *************** function _DimmerLights_Main *****************
 13518 ;; Defined at:
 13519 ;;		line 774 in file "../src/Dimmer_B1.c"
 13520 ;; Parameters:    Size  Location     Type
 13521 ;;		None
 13522 ;; Auto vars:     Size  Location     Type
 13523 ;;		None
 13524 ;; Return value:  Size  Location     Type
 13525 ;;		None               void
 13526 ;; Registers used:
 13527 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13528 ;; Tracked objects:
 13529 ;;		On entry : 0/0
 13530 ;;		On exit  : 0/0
 13531 ;;		Unchanged: 0/0
 13532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13534 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13536 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13537 ;;Total ram usage:        0 bytes
 13538 ;; Hardware stack levels used:    1
 13539 ;; Hardware stack levels required when called:   10
 13540 ;; This function calls:
 13541 ;;		_getLoad_OK
 13542 ;;		_getMain_All_Error_Status
 13543 ;;		_getMain_All_LightsStatus
 13544 ;;		_setDimmerLights_Main
 13545 ;; This function is called by:
 13546 ;;		_main
 13547 ;; This function uses a non-reentrant model
 13548 ;;
 13549                           
 13550                           
 13551                           ;psect for function _DimmerLights_Main
 13552  1D9C                     _DimmerLights_Main:	
 13553                           
 13554                           ;Dimmer_B1.c: 777: if (Dimmer.LoadGO == 1) {
 13555                           
 13556                           ;incstack = 0
 13557                           ; Regs used in _DimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13558  1D9C  0022               	movlb	2	; select bank2
 13559  1D9D  1CAC               	btfss	_Dimmer^(0+256),1
 13560  1D9E  2DB4               	goto	l8604
 13561                           
 13562                           ;Dimmer_B1.c: 778: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          All_LightsStatus() == 0) {
 13563  1D9F  3199  211B  319D   	fcall	_getLoad_OK
 13564  1DA2  3A01               	xorlw	1
 13565  1DA3  1903               	skipnz
 13566  1DA4  2DB2               	goto	l859
 13567  1DA5  3000               	movlw	0
 13568  1DA6  3190  202E  319D   	fcall	_getMain_All_Error_Status
 13569  1DA9  3800               	iorlw	0
 13570  1DAA  1D03               	skipz
 13571  1DAB  2DB2               	goto	l859
 13572  1DAC  319A  22F0  319D   	fcall	_getMain_All_LightsStatus
 13573  1DAF  3800               	iorlw	0
 13574  1DB0  1D03               	skipz
 13575  1DB1  2DB4               	goto	l8604
 13576  1DB2                     l859:	
 13577                           
 13578                           ;Dimmer_B1.c: 779: Dimmer.LoadGO = 0;
 13579  1DB2  0022               	movlb	2	; select bank2
 13580  1DB3  10AC               	bcf	_Dimmer^(0+256),1
 13581  1DB4                     l8604:	
 13582                           
 13583                           ;Dimmer_B1.c: 780: }
 13584                           ;Dimmer_B1.c: 781: }
 13585                           ;Dimmer_B1.c: 785: setDimmerLights_Main(1);
 13586  1DB4  3001               	movlw	1
 13587  1DB5  3196  264F  319D   	fcall	_setDimmerLights_Main
 13588                           
 13589                           ;Dimmer_B1.c: 789: setDimmerLights_Main(2);
 13590  1DB8  3002               	movlw	2
 13591  1DB9  3196  264F         	fcall	_setDimmerLights_Main
 13592  1DBB  0008               	return
 13593  1DBC                     __end_of_DimmerLights_Main:	
 13594                           
 13595                           	psect	text87
 13596  164F                     __ptext87:	
 13597 ;; *************** function _setDimmerLights_Main *****************
 13598 ;; Defined at:
 13599 ;;		line 803 in file "../src/Dimmer_B1.c"
 13600 ;; Parameters:    Size  Location     Type
 13601 ;;  lights          1    wreg     unsigned char 
 13602 ;; Auto vars:     Size  Location     Type
 13603 ;;  lights          1    1[BANK1 ] unsigned char 
 13604 ;; Return value:  Size  Location     Type
 13605 ;;		None               void
 13606 ;; Registers used:
 13607 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13608 ;; Tracked objects:
 13609 ;;		On entry : 0/0
 13610 ;;		On exit  : 0/0
 13611 ;;		Unchanged: 0/0
 13612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13614 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13616 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13617 ;;Total ram usage:        1 bytes
 13618 ;; Hardware stack levels used:    1
 13619 ;; Hardware stack levels required when called:    9
 13620 ;; This function calls:
 13621 ;;		_DimmerLights_SelectPointer
 13622 ;;		_getDimmerLights_Allow_Condition
 13623 ;;		_getMain_All_LightsStatus
 13624 ;;		_setDimmerLights_Dimming
 13625 ;;		_setDimmerLights_OnOff
 13626 ;; This function is called by:
 13627 ;;		_DimmerLights_Main
 13628 ;; This function uses a non-reentrant model
 13629 ;;
 13630                           
 13631                           
 13632                           ;psect for function _setDimmerLights_Main
 13633  164F                     _setDimmerLights_Main:	
 13634                           
 13635                           ;incstack = 0
 13636                           ; Regs used in _setDimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13637                           ;setDimmerLights_Main@lights stored from wreg
 13638  164F  0021               	movlb	1	; select bank1
 13639  1650  00E7               	movwf	setDimmerLights_Main@lights^(0+128)
 13640                           
 13641                           ;Dimmer_B1.c: 805: DimmerLights_SelectPointer(lights);
 13642  1651  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13643  1652  319B  23D2  3196   	fcall	_DimmerLights_SelectPointer
 13644                           
 13645                           ;Dimmer_B1.c: 806: if (DimmerLights->Trigger == 1) {
 13646  1655  0021               	movlb	1	; select bank1
 13647  1656  0856               	movf	_DimmerLights^(0+128),w
 13648  1657  0086               	movwf	6
 13649  1658  3001               	movlw	1	; select bank2/3
 13650  1659  0087               	movwf	7
 13651  165A  1C81               	btfss	1,1
 13652  165B  2E7E               	goto	l7900
 13653                           
 13654                           ;Dimmer_B1.c: 807: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13655  165C  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13656  165D  3191  2180  3196   	fcall	_getDimmerLights_Allow_Condition
 13657  1660  3800               	iorlw	0
 13658  1661  1D03               	skipz
 13659  1662  0008               	return
 13660                           
 13661                           ;Dimmer_B1.c: 808: DimmerLights->Trigger = 0;
 13662  1663  0021               	movlb	1	; select bank1
 13663  1664  0856               	movf	_DimmerLights^(0+128),w
 13664  1665  0086               	movwf	6
 13665  1666  3001               	movlw	1	; select bank2/3
 13666  1667  0087               	movwf	7
 13667  1668  1081               	bcf	1,1
 13668                           
 13669                           ;Dimmer_B1.c: 809: if (DimmerLights->Switch == 1) {
 13670  1669  0856               	movf	_DimmerLights^(0+128),w
 13671  166A  0086               	movwf	6
 13672  166B  3001               	movlw	1	; select bank2/3
 13673  166C  0087               	movwf	7
 13674  166D  1D01               	btfss	1,2
 13675  166E  2E77               	goto	l7898
 13676                           
 13677                           ;Dimmer_B1.c: 810: setDimmerLights_OnOff(lights, 1);
 13678  166F  0020               	movlb	0	; select bank0
 13679  1670  01ED               	clrf	setDimmerLights_OnOff@command
 13680  1671  0AED               	incf	setDimmerLights_OnOff@command,f
 13681  1672  0021               	movlb	1	; select bank1
 13682  1673  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13683  1674  3186  262B         	fcall	_setDimmerLights_OnOff
 13684                           
 13685                           ;Dimmer_B1.c: 811: } else {
 13686  1676  0008               	return
 13687  1677                     l7898:	
 13688                           
 13689                           ;Dimmer_B1.c: 812: setDimmerLights_OnOff(lights, 0);
 13690  1677  0020               	movlb	0	; select bank0
 13691  1678  01ED               	clrf	setDimmerLights_OnOff@command
 13692  1679  0021               	movlb	1	; select bank1
 13693  167A  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13694  167B  3186  262B         	fcall	_setDimmerLights_OnOff
 13695                           
 13696                           ;Dimmer_B1.c: 813: }
 13697                           ;Dimmer_B1.c: 814: }
 13698                           ;Dimmer_B1.c: 815: } else {
 13699  167D  0008               	return
 13700  167E                     l7900:	
 13701                           
 13702                           ;Dimmer_B1.c: 816: if (getMain_All_LightsStatus() == 1) {
 13703  167E  319A  22F0  3196   	fcall	_getMain_All_LightsStatus
 13704  1681  3A01               	xorlw	1
 13705  1682  1D03               	skipz
 13706  1683  2EAD               	goto	l7912
 13707                           
 13708                           ;Dimmer_B1.c: 817: if (DimmerLights->DimmingTrigger == 1) {
 13709  1684  0021               	movlb	1	; select bank1
 13710  1685  0856               	movf	_DimmerLights^(0+128),w
 13711  1686  0086               	movwf	6
 13712  1687  3001               	movlw	1	; select bank2/3
 13713  1688  0087               	movwf	7
 13714  1689  1E01               	btfss	1,4
 13715  168A  0008               	return
 13716                           
 13717                           ;Dimmer_B1.c: 818: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13718  168B  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13719  168C  3191  2180  3196   	fcall	_getDimmerLights_Allow_Condition
 13720  168F  3800               	iorlw	0
 13721  1690  1D03               	skipz
 13722  1691  0008               	return
 13723                           
 13724                           ;Dimmer_B1.c: 819: DimmerLights->DimmingTrigger = 0;
 13725  1692  0021               	movlb	1	; select bank1
 13726  1693  0856               	movf	_DimmerLights^(0+128),w
 13727  1694  0086               	movwf	6
 13728  1695  3001               	movlw	1	; select bank2/3
 13729  1696  0087               	movwf	7
 13730  1697  1201               	bcf	1,4
 13731                           
 13732                           ;Dimmer_B1.c: 820: if (DimmerLights->DimmingSwitch == 1) {
 13733  1698  0856               	movf	_DimmerLights^(0+128),w
 13734  1699  0086               	movwf	6
 13735  169A  3001               	movlw	1	; select bank2/3
 13736  169B  0087               	movwf	7
 13737  169C  1E81               	btfss	1,5
 13738  169D  2EA6               	goto	l7910
 13739                           
 13740                           ;Dimmer_B1.c: 821: setDimmerLights_Dimming(lights, 1);
 13741  169E  0020               	movlb	0	; select bank0
 13742  169F  01EA               	clrf	setDimmerLights_Dimming@status
 13743  16A0  0AEA               	incf	setDimmerLights_Dimming@status,f
 13744  16A1  0021               	movlb	1	; select bank1
 13745  16A2  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13746  16A3  3193  23B5         	fcall	_setDimmerLights_Dimming
 13747                           
 13748                           ;Dimmer_B1.c: 822: } else {
 13749  16A5  0008               	return
 13750  16A6                     l7910:	
 13751                           
 13752                           ;Dimmer_B1.c: 823: setDimmerLights_Dimming(lights, 0);
 13753  16A6  0020               	movlb	0	; select bank0
 13754  16A7  01EA               	clrf	setDimmerLights_Dimming@status
 13755  16A8  0021               	movlb	1	; select bank1
 13756  16A9  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13757  16AA  3193  23B5         	fcall	_setDimmerLights_Dimming
 13758                           
 13759                           ;Dimmer_B1.c: 824: }
 13760                           ;Dimmer_B1.c: 825: }
 13761                           ;Dimmer_B1.c: 826: }
 13762                           ;Dimmer_B1.c: 827: } else {
 13763  16AC  0008               	return
 13764  16AD                     l7912:	
 13765                           
 13766                           ;Dimmer_B1.c: 828: if (DimmerLights->DimmingTrigger == 1) {
 13767  16AD  0021               	movlb	1	; select bank1
 13768  16AE  0856               	movf	_DimmerLights^(0+128),w
 13769  16AF  0086               	movwf	6
 13770  16B0  3001               	movlw	1	; select bank2/3
 13771  16B1  0087               	movwf	7
 13772  16B2  1E01               	btfss	1,4
 13773  16B3  0008               	return
 13774                           
 13775                           ;Dimmer_B1.c: 829: DimmerLights->DimmingTrigger = 0;
 13776  16B4  0856               	movf	_DimmerLights^(0+128),w
 13777  16B5  0086               	movwf	6
 13778  16B6  3001               	movlw	1	; select bank2/3
 13779  16B7  0087               	movwf	7
 13780  16B8  1201               	bcf	1,4
 13781  16B9  0008               	return
 13782  16BA                     __end_of_setDimmerLights_Main:	
 13783                           
 13784                           	psect	text88
 13785  062B                     __ptext88:	
 13786 ;; *************** function _setDimmerLights_OnOff *****************
 13787 ;; Defined at:
 13788 ;;		line 837 in file "../src/Dimmer_B1.c"
 13789 ;; Parameters:    Size  Location     Type
 13790 ;;  lights          1    wreg     unsigned char 
 13791 ;;  command         1   77[BANK0 ] unsigned char 
 13792 ;; Auto vars:     Size  Location     Type
 13793 ;;  lights          1    0[BANK1 ] unsigned char 
 13794 ;; Return value:  Size  Location     Type
 13795 ;;		None               void
 13796 ;; Registers used:
 13797 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13798 ;; Tracked objects:
 13799 ;;		On entry : 0/0
 13800 ;;		On exit  : 0/0
 13801 ;;		Unchanged: 0/0
 13802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13803 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13804 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13805 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13806 ;;      Totals:         0       3       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13807 ;;Total ram usage:        4 bytes
 13808 ;; Hardware stack levels used:    1
 13809 ;; Hardware stack levels required when called:    8
 13810 ;; This function calls:
 13811 ;;		_getCmd_Status
 13812 ;;		_getDelayOff_GO
 13813 ;;		_getDimmerLights_PercentToValue
 13814 ;;		_getMain_All_LightsStatus
 13815 ;;		_setCmd_Status
 13816 ;;		_setDelayOff_GO
 13817 ;;		_setDimmerIntr_ControlStatus
 13818 ;;		_setDimmerIntr_DimmingValue
 13819 ;;		_setDimmerIntr_Dimming_RF
 13820 ;;		_setDimmerIntr_MaxmumValue
 13821 ;;		_setDimmerLights_Line
 13822 ;;		_setLED
 13823 ;;		_setProductData
 13824 ;;		_setRF_DimmerLights
 13825 ;;		_setTxData
 13826 ;; This function is called by:
 13827 ;;		_setDimmerLights_Main
 13828 ;; This function uses a non-reentrant model
 13829 ;;
 13830                           
 13831                           
 13832                           ;psect for function _setDimmerLights_OnOff
 13833  062B                     _setDimmerLights_OnOff:	
 13834                           
 13835                           ;incstack = 0
 13836                           ; Regs used in _setDimmerLights_OnOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13837                           ;setDimmerLights_OnOff@lights stored from wreg
 13838  062B  0021               	movlb	1	; select bank1
 13839  062C  00E6               	movwf	setDimmerLights_OnOff@lights^(0+128)
 13840                           
 13841                           ;Dimmer_B1.c: 839: if (command == 1) {
 13842  062D  0020               	movlb	0	; select bank0
 13843  062E  086D               	movf	setDimmerLights_OnOff@command,w
 13844  062F  3A01               	xorlw	1
 13845  0630  1D03               	skipz
 13846  0631  2E96               	goto	l7538
 13847                           
 13848                           ;Dimmer_B1.c: 840: setDimmerIntr_ControlStatus(lights, 1);
 13849  0632  01A0               	clrf	setDimmerIntr_ControlStatus@command
 13850  0633  0AA0               	incf	setDimmerIntr_ControlStatus@command,f
 13851  0634  0021               	movlb	1	; select bank1
 13852  0635  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13853  0636  319F  2742  3186   	fcall	_setDimmerIntr_ControlStatus
 13854                           
 13855                           ;Dimmer_B1.c: 843: Dimmer.Load_Status = 1;
 13856  0639  0022               	movlb	2	; select bank2
 13857  063A  152C               	bsf	_Dimmer^(0+256),2
 13858                           
 13859                           ;Dimmer_B1.c: 844: setDimmerLights_Line(lights);
 13860  063B  0021               	movlb	1	; select bank1
 13861  063C  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13862  063D  319C  24E6  3186   	fcall	_setDimmerLights_Line
 13863                           
 13864                           ;Dimmer_B1.c: 850: setLED(lights, 0);
 13865  0640  0020               	movlb	0	; select bank0
 13866  0641  01A2               	clrf	setLED@command
 13867  0642  0021               	movlb	1	; select bank1
 13868  0643  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13869  0644  3193  230E  3186   	fcall	_setLED
 13870                           
 13871                           ;Dimmer_B1.c: 871: if (DimmerLights->DimmingRun == 1) {
 13872  0647  0021               	movlb	1	; select bank1
 13873  0648  0A56               	incf	_DimmerLights^(0+128),w
 13874  0649  0086               	movwf	6
 13875  064A  3001               	movlw	1	; select bank2/3
 13876  064B  0087               	movwf	7
 13877  064C  1F01               	btfss	1,6
 13878  064D  2E72               	goto	l7528
 13879                           
 13880                           ;Dimmer_B1.c: 872: DimmerLights->DimmingRun = 0;
 13881  064E  0A56               	incf	_DimmerLights^(0+128),w
 13882  064F  0086               	movwf	6
 13883  0650  3001               	movlw	1	; select bank2/3
 13884  0651  0087               	movwf	7
 13885  0652  1301               	bcf	1,6
 13886                           
 13887                           ;Dimmer_B1.c: 873: setDimmerIntr_MaxmumValue(lights, getDimmerLights_PercentToValue(prod
      +                          uct->Data[20 + lights]));
 13888  0653  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13889  0654  3E14               	addlw	20
 13890  0655  076E               	addwf	_product^(0+128),w
 13891  0656  0020               	movlb	0	; select bank0
 13892  0657  00EE               	movwf	??_setDimmerLights_OnOff
 13893  0658  086E               	movf	??_setDimmerLights_OnOff,w
 13894  0659  0086               	movwf	6
 13895  065A  3002               	movlw	2	; select bank4/5
 13896  065B  0087               	movwf	7
 13897  065C  0801               	movf	1,w
 13898  065D  3195  2520  3186   	fcall	_getDimmerLights_PercentToValue
 13899  0660  0020               	movlb	0	; select bank0
 13900  0661  00EF               	movwf	??_setDimmerLights_OnOff+1
 13901  0662  086F               	movf	??_setDimmerLights_OnOff+1,w
 13902  0663  00E2               	movwf	setDimmerIntr_MaxmumValue@value
 13903  0664  0021               	movlb	1	; select bank1
 13904  0665  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13905  0666  319B  23E9  3186   	fcall	_setDimmerIntr_MaxmumValue
 13906                           
 13907                           ;Dimmer_B1.c: 874: setDimmerIntr_Dimming_RF(lights, 1);
 13908  0669  0020               	movlb	0	; select bank0
 13909  066A  01A0               	clrf	setDimmerIntr_Dimming_RF@command
 13910  066B  0AA0               	incf	setDimmerIntr_Dimming_RF@command,f
 13911  066C  0021               	movlb	1	; select bank1
 13912  066D  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13913  066E  319F  2771  3186   	fcall	_setDimmerIntr_Dimming_RF
 13914                           
 13915                           ;Dimmer_B1.c: 875: } else {
 13916  0671  2E89               	goto	l7530
 13917  0672                     l7528:	
 13918                           
 13919                           ;Dimmer_B1.c: 876: setDimmerIntr_DimmingValue(lights, getDimmerLights_PercentToValue(pro
      +                          duct->Data[20 + lights]));
 13920  0672  0021               	movlb	1	; select bank1
 13921  0673  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13922  0674  3E14               	addlw	20
 13923  0675  076E               	addwf	_product^(0+128),w
 13924  0676  0020               	movlb	0	; select bank0
 13925  0677  00EE               	movwf	??_setDimmerLights_OnOff
 13926  0678  086E               	movf	??_setDimmerLights_OnOff,w
 13927  0679  0086               	movwf	6
 13928  067A  3002               	movlw	2	; select bank4/5
 13929  067B  0087               	movwf	7
 13930  067C  0801               	movf	1,w
 13931  067D  3195  2520  3186   	fcall	_getDimmerLights_PercentToValue
 13932  0680  0020               	movlb	0	; select bank0
 13933  0681  00EF               	movwf	??_setDimmerLights_OnOff+1
 13934  0682  086F               	movf	??_setDimmerLights_OnOff+1,w
 13935  0683  00E2               	movwf	setDimmerIntr_DimmingValue@value
 13936  0684  0021               	movlb	1	; select bank1
 13937  0685  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13938  0686  319C  2400  3186   	fcall	_setDimmerIntr_DimmingValue
 13939  0689                     l7530:	
 13940                           
 13941                           ;Dimmer_B1.c: 879: }
 13942                           ;Dimmer_B1.c: 881: if (lights == 1) {
 13943  0689  0021               	movlb	1	; select bank1
 13944  068A  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13945  068B  3A01               	xorlw	1
 13946  068C  1D03               	skipz
 13947  068D  2E90               	goto	l7534
 13948                           
 13949                           ;Dimmer_B1.c: 883: DimmerIntr1.TuneGO = 1;
 13950  068E  173C               	bsf	(_DimmerIntr1^(0+128)+1),6
 13951                           
 13952                           ;Dimmer_B1.c: 885: } else if (lights == 2) {
 13953  068F  2ECD               	goto	l7556
 13954  0690                     l7534:	
 13955  0690  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13956  0691  3A02               	xorlw	2
 13957  0692  1D03               	skipz
 13958  0693  2ECD               	goto	l7556
 13959                           
 13960                           ;Dimmer_B1.c: 887: DimmerIntr2.TuneGO = 1;
 13961  0694  1748               	bsf	(_DimmerIntr2^(0+128)+1),6
 13962                           
 13963                           ;Dimmer_B1.c: 889: }
 13964                           ;Dimmer_B1.c: 895: } else if (command == 0) {
 13965  0695  2ECD               	goto	l7556
 13966  0696                     l7538:	
 13967  0696  0020               	movlb	0	; select bank0
 13968  0697  08ED               	movf	setDimmerLights_OnOff@command,f
 13969  0698  1D03               	skipz
 13970  0699  2ECD               	goto	l7556
 13971                           
 13972                           ;Dimmer_B1.c: 896: setDimmerIntr_ControlStatus(lights, 0);
 13973  069A  01A0               	clrf	setDimmerIntr_ControlStatus@command
 13974  069B  0021               	movlb	1	; select bank1
 13975  069C  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13976  069D  319F  2742  3186   	fcall	_setDimmerIntr_ControlStatus
 13977                           
 13978                           ;Dimmer_B1.c: 898: Dimmer.Load_Status = 0;
 13979  06A0  0022               	movlb	2	; select bank2
 13980  06A1  112C               	bcf	_Dimmer^(0+256),2
 13981                           
 13982                           ;Dimmer_B1.c: 899: setDimmerLights_Line(0);
 13983  06A2  3000               	movlw	0
 13984  06A3  319C  24E6  3186   	fcall	_setDimmerLights_Line
 13985                           
 13986                           ;Dimmer_B1.c: 903: if (getDelayOff_GO(lights) == 1) {
 13987  06A6  0021               	movlb	1	; select bank1
 13988  06A7  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13989  06A8  319A  221A  3186   	fcall	_getDelayOff_GO
 13990  06AB  3A01               	xorlw	1
 13991  06AC  1D03               	skipz
 13992  06AD  2EB6               	goto	l886
 13993                           
 13994                           ;Dimmer_B1.c: 904: setDelayOff_GO(lights, 0, 0);
 13995  06AE  0020               	movlb	0	; select bank0
 13996  06AF  01E5               	clrf	setDelayOff_GO@command
 13997  06B0  01E6               	clrf	setDelayOff_GO@value
 13998  06B1  0021               	movlb	1	; select bank1
 13999  06B2  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14000  06B3  318C  241C  3186   	fcall	_setDelayOff_GO
 14001  06B6                     l886:	
 14002                           
 14003                           ;Dimmer_B1.c: 905: }
 14004                           ;Dimmer_B1.c: 910: setLED(lights, 1);
 14005  06B6  0020               	movlb	0	; select bank0
 14006  06B7  01A2               	clrf	setLED@command
 14007  06B8  0AA2               	incf	setLED@command,f
 14008  06B9  0021               	movlb	1	; select bank1
 14009  06BA  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14010  06BB  3193  230E  3186   	fcall	_setLED
 14011                           
 14012                           ;Dimmer_B1.c: 915: if (lights == 1) {
 14013  06BE  0021               	movlb	1	; select bank1
 14014  06BF  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14015  06C0  3A01               	xorlw	1
 14016  06C1  1D03               	skipz
 14017  06C2  2EC6               	goto	l7552
 14018                           
 14019                           ;Dimmer_B1.c: 916: RB4 = 0;
 14020  06C3  0020               	movlb	0	; select bank0
 14021  06C4  120D               	bcf	13,4	;volatile
 14022                           
 14023                           ;Dimmer_B1.c: 918: }
 14024  06C5  2ECD               	goto	l7556
 14025  06C6                     l7552:	
 14026                           
 14027                           ;Dimmer_B1.c: 921: else if (lights == 2) {
 14028  06C6  0021               	movlb	1	; select bank1
 14029  06C7  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14030  06C8  3A02               	xorlw	2
 14031  06C9  1D03               	skipz
 14032  06CA  2ECD               	goto	l7556
 14033                           
 14034                           ;Dimmer_B1.c: 922: RA7 = 0;
 14035  06CB  0020               	movlb	0	; select bank0
 14036  06CC  138C               	bcf	12,7	;volatile
 14037  06CD                     l7556:	
 14038                           
 14039                           ;Dimmer_B1.c: 923: }
 14040                           ;Dimmer_B1.c: 929: }
 14041                           ;Dimmer_B1.c: 932: setRF_DimmerLights(lights, command);
 14042  06CD  0020               	movlb	0	; select bank0
 14043  06CE  086D               	movf	setDimmerLights_OnOff@command,w
 14044  06CF  00EE               	movwf	??_setDimmerLights_OnOff
 14045  06D0  086E               	movf	??_setDimmerLights_OnOff,w
 14046  06D1  00E5               	movwf	setRF_DimmerLights@on
 14047  06D2  0021               	movlb	1	; select bank1
 14048  06D3  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14049  06D4  3195  25EA  3186   	fcall	_setRF_DimmerLights
 14050                           
 14051                           ;Dimmer_B1.c: 934: if (getCmd_Status(1) == 1) {
 14052  06D7  3001               	movlw	1
 14053  06D8  319A  225E  3186   	fcall	_getCmd_Status
 14054  06DB  3A01               	xorlw	1
 14055  06DC  1D03               	skipz
 14056  06DD  2EF9               	goto	l7570
 14057                           
 14058                           ;Dimmer_B1.c: 935: if (getMain_All_LightsStatus() == 0) {
 14059  06DE  319A  22F0  3186   	fcall	_getMain_All_LightsStatus
 14060  06E1  3800               	iorlw	0
 14061  06E2  1D03               	skipz
 14062  06E3  0008               	return
 14063                           
 14064                           ;Dimmer_B1.c: 936: setCmd_Status(1, 0);
 14065  06E4  0020               	movlb	0	; select bank0
 14066  06E5  01A0               	clrf	setCmd_Status@cmd
 14067  06E6  3001               	movlw	1
 14068  06E7  319C  242E  3186   	fcall	_setCmd_Status
 14069                           
 14070                           ;Dimmer_B1.c: 937: setProductData(11, 0);
 14071  06EA  0020               	movlb	0	; select bank0
 14072  06EB  01E2               	clrf	setProductData@value
 14073  06EC  300B               	movlw	11
 14074  06ED  3199  218D  3186   	fcall	_setProductData
 14075                           
 14076                           ;Dimmer_B1.c: 938: setProductData(17, 0);
 14077  06F0  0020               	movlb	0	; select bank0
 14078  06F1  01E2               	clrf	setProductData@value
 14079  06F2  3011               	movlw	17
 14080  06F3  3199  218D  3186   	fcall	_setProductData
 14081                           
 14082                           ;Dimmer_B1.c: 939: setTxData();
 14083  06F6  318F  2745         	fcall	_setTxData
 14084                           
 14085                           ;Dimmer_B1.c: 940: }
 14086                           ;Dimmer_B1.c: 941: } else {
 14087  06F8  0008               	return
 14088  06F9                     l7570:	
 14089                           
 14090                           ;Dimmer_B1.c: 942: setTxData();
 14091  06F9  318F  2745         	fcall	_setTxData
 14092  06FB  0008               	return
 14093  06FC                     __end_of_setDimmerLights_OnOff:	
 14094                           
 14095                           	psect	text89
 14096  130E                     __ptext89:	
 14097 ;; *************** function _setLED *****************
 14098 ;; Defined at:
 14099 ;;		line 81 in file "../src/LED_B1.c"
 14100 ;; Parameters:    Size  Location     Type
 14101 ;;  led             1    wreg     unsigned char 
 14102 ;;  command         1    2[BANK0 ] unsigned char 
 14103 ;; Auto vars:     Size  Location     Type
 14104 ;;  led             1    3[BANK0 ] unsigned char 
 14105 ;; Return value:  Size  Location     Type
 14106 ;;		None               void
 14107 ;; Registers used:
 14108 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14109 ;; Tracked objects:
 14110 ;;		On entry : 0/0
 14111 ;;		On exit  : 0/0
 14112 ;;		Unchanged: 0/0
 14113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14114 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14115 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14117 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14118 ;;Total ram usage:        2 bytes
 14119 ;; Hardware stack levels used:    1
 14120 ;; Hardware stack levels required when called:    6
 14121 ;; This function calls:
 14122 ;;		_LedPointSelect
 14123 ;; This function is called by:
 14124 ;;		_setDimmerLights_OnOff
 14125 ;;		_setLED_Initialization
 14126 ;;		_setSw_Initialization
 14127 ;;		_Exception_Main
 14128 ;; This function uses a non-reentrant model
 14129 ;;
 14130                           
 14131                           
 14132                           ;psect for function _setLED
 14133  130E                     _setLED:	
 14134                           
 14135                           ;incstack = 0
 14136                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14137                           ;setLED@led stored from wreg
 14138  130E  0020               	movlb	0	; select bank0
 14139  130F  00A3               	movwf	setLED@led
 14140                           
 14141                           ;LED_B1.c: 82: LedPointSelect(led);
 14142  1310  0823               	movf	setLED@led,w
 14143  1311  319D  257C  3193   	fcall	_LedPointSelect
 14144                           
 14145                           ;LED_B1.c: 83: if (command == 0) {
 14146  1314  0020               	movlb	0	; select bank0
 14147  1315  08A2               	movf	setLED@command,f
 14148  1316  1D03               	skipz
 14149  1317  2B25               	goto	l7236
 14150                           
 14151                           ;LED_B1.c: 85: if (led == 1) {
 14152  1318  0823               	movf	setLED@led,w
 14153  1319  3A01               	xorlw	1
 14154  131A  1D03               	skipz
 14155  131B  2B1D               	goto	l7228
 14156                           
 14157                           ;LED_B1.c: 89: RC7 = 1;
 14158  131C  178E               	bsf	14,7	;volatile
 14159  131D                     l7228:	
 14160                           
 14161                           ;LED_B1.c: 91: }
 14162                           ;LED_B1.c: 94: if (led == 2) {
 14163  131D  0823               	movf	setLED@led,w
 14164  131E  3A02               	xorlw	2
 14165  131F  1903               	btfsc	3,2
 14166                           
 14167                           ;LED_B1.c: 98: RA3 = 1;
 14168  1320  158C               	bsf	12,3	;volatile
 14169                           
 14170                           ;LED_B1.c: 100: }
 14171                           ;LED_B1.c: 112: if (led == 99) {
 14172  1321  0823               	movf	setLED@led,w
 14173  1322  3A63               	xorlw	99
 14174  1323  1903               	btfsc	3,2
 14175                           
 14176                           ;LED_B1.c: 116: RB5 = 1;
 14177  1324  168D               	bsf	13,5	;volatile
 14178  1325                     l7236:	
 14179                           
 14180                           ;LED_B1.c: 118: }
 14181                           ;LED_B1.c: 120: }
 14182                           ;LED_B1.c: 121: if (command == 1) {
 14183  1325  0822               	movf	setLED@command,w
 14184  1326  3A01               	xorlw	1
 14185  1327  1D03               	skipz
 14186  1328  2B36               	goto	l7250
 14187                           
 14188                           ;LED_B1.c: 123: if (led == 1) {
 14189  1329  0823               	movf	setLED@led,w
 14190  132A  3A01               	xorlw	1
 14191  132B  1D03               	skipz
 14192  132C  2B2E               	goto	l7242
 14193                           
 14194                           ;LED_B1.c: 127: RC7 = 0;
 14195  132D  138E               	bcf	14,7	;volatile
 14196  132E                     l7242:	
 14197                           
 14198                           ;LED_B1.c: 129: }
 14199                           ;LED_B1.c: 132: if (led == 2) {
 14200  132E  0823               	movf	setLED@led,w
 14201  132F  3A02               	xorlw	2
 14202  1330  1903               	btfsc	3,2
 14203                           
 14204                           ;LED_B1.c: 136: RA3 = 0;
 14205  1331  118C               	bcf	12,3	;volatile
 14206                           
 14207                           ;LED_B1.c: 138: }
 14208                           ;LED_B1.c: 150: if (led == 99) {
 14209  1332  0823               	movf	setLED@led,w
 14210  1333  3A63               	xorlw	99
 14211  1334  1903               	btfsc	3,2
 14212                           
 14213                           ;LED_B1.c: 154: RB5 = 0;
 14214  1335  128D               	bcf	13,5	;volatile
 14215  1336                     l7250:	
 14216                           
 14217                           ;LED_B1.c: 156: }
 14218                           ;LED_B1.c: 158: }
 14219                           ;LED_B1.c: 159: if (command == 10) {
 14220  1336  0822               	movf	setLED@command,w
 14221  1337  3A0A               	xorlw	10
 14222  1338  1D03               	skipz
 14223  1339  2B56               	goto	l7266
 14224                           
 14225                           ;LED_B1.c: 160: LED->GO = 0;
 14226  133A  0021               	movlb	1	; select bank1
 14227  133B  0857               	movf	_LED^(0+128),w
 14228  133C  0086               	movwf	6
 14229  133D  3001               	movlw	1	; select bank2/3
 14230  133E  0087               	movwf	7
 14231  133F  1081               	bcf	1,1
 14232                           
 14233                           ;LED_B1.c: 161: LED->Time = 0;
 14234  1340  0A57               	incf	_LED^(0+128),w
 14235  1341  0086               	movwf	6
 14236  1342  3001               	movlw	1	; select bank2/3
 14237  1343  0087               	movwf	7
 14238  1344  3000               	movlw	0
 14239  1345  3FC0               	movwi [0]fsr1
 14240  1346  3FC1               	movwi [1]fsr1
 14241                           
 14242                           ;LED_B1.c: 163: if (led == 1) {
 14243  1347  0020               	movlb	0	; select bank0
 14244  1348  0823               	movf	setLED@led,w
 14245  1349  3A01               	xorlw	1
 14246  134A  1D03               	skipz
 14247  134B  2B4E               	goto	l7258
 14248                           
 14249                           ;LED_B1.c: 167: RC7 = 1;
 14250  134C  178E               	bsf	14,7	;volatile
 14251                           
 14252                           ;LED_B1.c: 169: }
 14253  134D  2B52               	goto	l7262
 14254  134E                     l7258:	
 14255                           
 14256                           ;LED_B1.c: 172: else if (led == 2) {
 14257  134E  0823               	movf	setLED@led,w
 14258  134F  3A02               	xorlw	2
 14259  1350  1903               	btfsc	3,2
 14260                           
 14261                           ;LED_B1.c: 176: RA3 = 1;
 14262  1351  158C               	bsf	12,3	;volatile
 14263  1352                     l7262:	
 14264                           
 14265                           ;LED_B1.c: 178: }
 14266                           ;LED_B1.c: 190: if (led == 99) {
 14267  1352  0823               	movf	setLED@led,w
 14268  1353  3A63               	xorlw	99
 14269  1354  1903               	btfsc	3,2
 14270                           
 14271                           ;LED_B1.c: 194: RB5 = 1;
 14272  1355  168D               	bsf	13,5	;volatile
 14273  1356                     l7266:	
 14274                           
 14275                           ;LED_B1.c: 196: }
 14276                           ;LED_B1.c: 198: }
 14277                           ;LED_B1.c: 199: if (command == 11) {
 14278  1356  0822               	movf	setLED@command,w
 14279  1357  3A0B               	xorlw	11
 14280  1358  1D03               	skipz
 14281  1359  0008               	return
 14282                           
 14283                           ;LED_B1.c: 200: LED->GO = 1;
 14284  135A  0021               	movlb	1	; select bank1
 14285  135B  0857               	movf	_LED^(0+128),w
 14286  135C  0086               	movwf	6
 14287  135D  3001               	movlw	1	; select bank2/3
 14288  135E  0087               	movwf	7
 14289  135F  1481               	bsf	1,1
 14290  1360  0008               	return
 14291  1361                     __end_of_setLED:	
 14292                           
 14293                           	psect	text90
 14294  1D7C                     __ptext90:	
 14295 ;; *************** function _LedPointSelect *****************
 14296 ;; Defined at:
 14297 ;;		line 7 in file "../src/LED_B1.c"
 14298 ;; Parameters:    Size  Location     Type
 14299 ;;  led             1    wreg     unsigned char 
 14300 ;; Auto vars:     Size  Location     Type
 14301 ;;  led             1    1[BANK0 ] unsigned char 
 14302 ;; Return value:  Size  Location     Type
 14303 ;;		None               void
 14304 ;; Registers used:
 14305 ;;		wreg
 14306 ;; Tracked objects:
 14307 ;;		On entry : 0/0
 14308 ;;		On exit  : 0/0
 14309 ;;		Unchanged: 0/0
 14310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14312 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14313 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14314 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14315 ;;Total ram usage:        2 bytes
 14316 ;; Hardware stack levels used:    1
 14317 ;; Hardware stack levels required when called:    5
 14318 ;; This function calls:
 14319 ;;		Nothing
 14320 ;; This function is called by:
 14321 ;;		_setLED_Initialization
 14322 ;;		_setLED
 14323 ;;		_setLED_Main
 14324 ;; This function uses a non-reentrant model
 14325 ;;
 14326                           
 14327                           
 14328                           ;psect for function _LedPointSelect
 14329  1D7C                     _LedPointSelect:	
 14330                           
 14331                           ;incstack = 0
 14332                           ; Regs used in _LedPointSelect: [wreg]
 14333                           ;LedPointSelect@led stored from wreg
 14334  1D7C  0020               	movlb	0	; select bank0
 14335  1D7D  00A1               	movwf	LedPointSelect@led
 14336                           
 14337                           ;LED_B1.c: 9: if (led == 1) {
 14338  1D7E  0821               	movf	LedPointSelect@led,w
 14339  1D7F  3A01               	xorlw	1
 14340  1D80  1D03               	skipz
 14341  1D81  2D87               	goto	l1134
 14342                           
 14343                           ;LED_B1.c: 10: LED = &VarLED1;
 14344  1D82  30E6               	movlw	_VarLED1& (0+255)
 14345  1D83  00A0               	movwf	??_LedPointSelect
 14346  1D84  0820               	movf	??_LedPointSelect,w
 14347  1D85  0021               	movlb	1	; select bank1
 14348  1D86  00D7               	movwf	_LED^(0+128)
 14349  1D87                     l1134:	
 14350                           
 14351                           ;LED_B1.c: 11: }
 14352                           ;LED_B1.c: 14: if (led == 2) {
 14353  1D87  0020               	movlb	0	; select bank0
 14354  1D88  0821               	movf	LedPointSelect@led,w
 14355  1D89  3A02               	xorlw	2
 14356  1D8A  1D03               	skipz
 14357  1D8B  2D91               	goto	l1135
 14358                           
 14359                           ;LED_B1.c: 15: LED = &VarLED2;
 14360  1D8C  30EA               	movlw	_VarLED2& (0+255)
 14361  1D8D  00A0               	movwf	??_LedPointSelect
 14362  1D8E  0820               	movf	??_LedPointSelect,w
 14363  1D8F  0021               	movlb	1	; select bank1
 14364  1D90  00D7               	movwf	_LED^(0+128)
 14365  1D91                     l1135:	
 14366                           
 14367                           ;LED_B1.c: 16: }
 14368                           ;LED_B1.c: 24: if (led == 99) {
 14369  1D91  0020               	movlb	0	; select bank0
 14370  1D92  0821               	movf	LedPointSelect@led,w
 14371  1D93  3A63               	xorlw	99
 14372  1D94  1D03               	skipz
 14373  1D95  0008               	return
 14374                           
 14375                           ;LED_B1.c: 25: LED = &VarErrLED;
 14376  1D96  30E2               	movlw	_VarErrLED& (0+255)
 14377  1D97  00A0               	movwf	??_LedPointSelect
 14378  1D98  0820               	movf	??_LedPointSelect,w
 14379  1D99  0021               	movlb	1	; select bank1
 14380  1D9A  00D7               	movwf	_LED^(0+128)
 14381  1D9B  0008               	return
 14382  1D9C                     __end_of_LedPointSelect:	
 14383                           
 14384                           	psect	text91
 14385  1F71                     __ptext91:	
 14386 ;; *************** function _setDimmerIntr_Dimming_RF *****************
 14387 ;; Defined at:
 14388 ;;		line 222 in file "../src/Dimmer_B1.c"
 14389 ;; Parameters:    Size  Location     Type
 14390 ;;  lights          1    wreg     unsigned char 
 14391 ;;  command         1    0[BANK0 ] unsigned char 
 14392 ;; Auto vars:     Size  Location     Type
 14393 ;;  lights          1    2[BANK0 ] unsigned char 
 14394 ;; Return value:  Size  Location     Type
 14395 ;;		None               void
 14396 ;; Registers used:
 14397 ;;		wreg, status,2, status,0
 14398 ;; Tracked objects:
 14399 ;;		On entry : 0/0
 14400 ;;		On exit  : 0/0
 14401 ;;		Unchanged: 0/0
 14402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14403 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14404 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14405 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14406 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14407 ;;Total ram usage:        3 bytes
 14408 ;; Hardware stack levels used:    1
 14409 ;; Hardware stack levels required when called:    5
 14410 ;; This function calls:
 14411 ;;		Nothing
 14412 ;; This function is called by:
 14413 ;;		_setDimmerLights_OnOff
 14414 ;;		_setRFSW_AdjControl
 14415 ;; This function uses a non-reentrant model
 14416 ;;
 14417                           
 14418                           
 14419                           ;psect for function _setDimmerIntr_Dimming_RF
 14420  1F71                     _setDimmerIntr_Dimming_RF:	
 14421                           
 14422                           ;incstack = 0
 14423                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
 14424                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
 14425  1F71  0020               	movlb	0	; select bank0
 14426  1F72  00A2               	movwf	setDimmerIntr_Dimming_RF@lights
 14427                           
 14428                           ;Dimmer_B1.c: 224: if (lights == 1) {
 14429  1F73  0822               	movf	setDimmerIntr_Dimming_RF@lights,w
 14430  1F74  3A01               	xorlw	1
 14431  1F75  1D03               	skipz
 14432  1F76  2F89               	goto	l6824
 14433                           
 14434                           ;Dimmer_B1.c: 225: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
 14435  1F77  0820               	movf	setDimmerIntr_Dimming_RF@command,w
 14436  1F78  3A01               	xorlw	1
 14437  1F79  3000               	movlw	0
 14438  1F7A  1903               	skipnz
 14439  1F7B  3001               	movlw	1
 14440  1F7C  00A1               	movwf	??_setDimmerIntr_Dimming_RF
 14441  1F7D  0EA1               	swapf	??_setDimmerIntr_Dimming_RF,f
 14442  1F7E  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 14443  1F7F  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 14444  1F80  0021               	movlb	1	; select bank1
 14445  1F81  083B               	movf	_DimmerIntr1^(0+128),w
 14446  1F82  0020               	movlb	0	; select bank0
 14447  1F83  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14448  1F84  39BF               	andlw	-65
 14449  1F85  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14450  1F86  0021               	movlb	1	; select bank1
 14451  1F87  00BB               	movwf	_DimmerIntr1^(0+128)
 14452                           
 14453                           ;Dimmer_B1.c: 226: }
 14454  1F88  0008               	return
 14455  1F89                     l6824:	
 14456                           
 14457                           ;Dimmer_B1.c: 229: else if (lights == 2) {
 14458  1F89  0020               	movlb	0	; select bank0
 14459  1F8A  0822               	movf	setDimmerIntr_Dimming_RF@lights,w
 14460  1F8B  3A02               	xorlw	2
 14461  1F8C  1D03               	skipz
 14462  1F8D  0008               	return
 14463                           
 14464                           ;Dimmer_B1.c: 230: DimmerIntr2.Dimming_RF = command == 1 ? 1 : 0;
 14465  1F8E  0820               	movf	setDimmerIntr_Dimming_RF@command,w
 14466  1F8F  3A01               	xorlw	1
 14467  1F90  3000               	movlw	0
 14468  1F91  1903               	skipnz
 14469  1F92  3001               	movlw	1
 14470  1F93  00A1               	movwf	??_setDimmerIntr_Dimming_RF
 14471  1F94  0EA1               	swapf	??_setDimmerIntr_Dimming_RF,f
 14472  1F95  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 14473  1F96  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 14474  1F97  0021               	movlb	1	; select bank1
 14475  1F98  0847               	movf	_DimmerIntr2^(0+128),w
 14476  1F99  0020               	movlb	0	; select bank0
 14477  1F9A  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14478  1F9B  39BF               	andlw	-65
 14479  1F9C  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14480  1F9D  0021               	movlb	1	; select bank1
 14481  1F9E  00C7               	movwf	_DimmerIntr2^(0+128)
 14482  1F9F  0008               	return
 14483  1FA0                     __end_of_setDimmerIntr_Dimming_RF:	
 14484                           
 14485                           	psect	text92
 14486  1C00                     __ptext92:	
 14487 ;; *************** function _setDimmerIntr_DimmingValue *****************
 14488 ;; Defined at:
 14489 ;;		line 87 in file "../src/Dimmer_B1.c"
 14490 ;; Parameters:    Size  Location     Type
 14491 ;;  lights          1    wreg     unsigned char 
 14492 ;;  value           1   66[BANK0 ] unsigned char 
 14493 ;; Auto vars:     Size  Location     Type
 14494 ;;  lights          1   68[BANK0 ] unsigned char 
 14495 ;; Return value:  Size  Location     Type
 14496 ;;		None               void
 14497 ;; Registers used:
 14498 ;;		wreg
 14499 ;; Tracked objects:
 14500 ;;		On entry : 0/0
 14501 ;;		On exit  : 0/0
 14502 ;;		Unchanged: 0/0
 14503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14504 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14505 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14506 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14507 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14508 ;;Total ram usage:        3 bytes
 14509 ;; Hardware stack levels used:    1
 14510 ;; Hardware stack levels required when called:    5
 14511 ;; This function calls:
 14512 ;;		Nothing
 14513 ;; This function is called by:
 14514 ;;		_setDimmerLights_OnOff
 14515 ;; This function uses a non-reentrant model
 14516 ;;
 14517                           
 14518                           
 14519                           ;psect for function _setDimmerIntr_DimmingValue
 14520  1C00                     _setDimmerIntr_DimmingValue:	
 14521                           
 14522                           ;incstack = 0
 14523                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 14524                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 14525  1C00  0020               	movlb	0	; select bank0
 14526  1C01  00E4               	movwf	setDimmerIntr_DimmingValue@lights
 14527                           
 14528                           ;Dimmer_B1.c: 89: if (lights == 1) {
 14529  1C02  0864               	movf	setDimmerIntr_DimmingValue@lights,w
 14530  1C03  3A01               	xorlw	1
 14531  1C04  1D03               	skipz
 14532  1C05  2C0C               	goto	l7152
 14533                           
 14534                           ;Dimmer_B1.c: 90: DimmerIntr1.DimmingValue = value;
 14535  1C06  0862               	movf	setDimmerIntr_DimmingValue@value,w
 14536  1C07  00E3               	movwf	??_setDimmerIntr_DimmingValue
 14537  1C08  0863               	movf	??_setDimmerIntr_DimmingValue,w
 14538  1C09  0021               	movlb	1	; select bank1
 14539  1C0A  00C0               	movwf	(_DimmerIntr1^(0+128)+5)
 14540                           
 14541                           ;Dimmer_B1.c: 91: }
 14542  1C0B  0008               	return
 14543  1C0C                     l7152:	
 14544                           
 14545                           ;Dimmer_B1.c: 94: else if (lights == 2) {
 14546  1C0C  0020               	movlb	0	; select bank0
 14547  1C0D  0864               	movf	setDimmerIntr_DimmingValue@lights,w
 14548  1C0E  3A02               	xorlw	2
 14549  1C0F  1D03               	skipz
 14550  1C10  0008               	return
 14551                           
 14552                           ;Dimmer_B1.c: 95: DimmerIntr2.DimmingValue = value;
 14553  1C11  0862               	movf	setDimmerIntr_DimmingValue@value,w
 14554  1C12  00E3               	movwf	??_setDimmerIntr_DimmingValue
 14555  1C13  0863               	movf	??_setDimmerIntr_DimmingValue,w
 14556  1C14  0021               	movlb	1	; select bank1
 14557  1C15  00CC               	movwf	(_DimmerIntr2^(0+128)+5)
 14558  1C16  0008               	return
 14559  1C17                     __end_of_setDimmerIntr_DimmingValue:	
 14560                           
 14561                           	psect	text93
 14562  1F42                     __ptext93:	
 14563 ;; *************** function _setDimmerIntr_ControlStatus *****************
 14564 ;; Defined at:
 14565 ;;		line 69 in file "../src/Dimmer_B1.c"
 14566 ;; Parameters:    Size  Location     Type
 14567 ;;  lights          1    wreg     unsigned char 
 14568 ;;  command         1    0[BANK0 ] unsigned char 
 14569 ;; Auto vars:     Size  Location     Type
 14570 ;;  lights          1    2[BANK0 ] unsigned char 
 14571 ;; Return value:  Size  Location     Type
 14572 ;;		None               void
 14573 ;; Registers used:
 14574 ;;		wreg, status,2, status,0
 14575 ;; Tracked objects:
 14576 ;;		On entry : 0/0
 14577 ;;		On exit  : 0/0
 14578 ;;		Unchanged: 0/0
 14579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14580 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14581 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14582 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14583 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14584 ;;Total ram usage:        3 bytes
 14585 ;; Hardware stack levels used:    1
 14586 ;; Hardware stack levels required when called:    5
 14587 ;; This function calls:
 14588 ;;		Nothing
 14589 ;; This function is called by:
 14590 ;;		_setDimmerLights_OnOff
 14591 ;; This function uses a non-reentrant model
 14592 ;;
 14593                           
 14594                           
 14595                           ;psect for function _setDimmerIntr_ControlStatus
 14596  1F42                     _setDimmerIntr_ControlStatus:	
 14597                           
 14598                           ;incstack = 0
 14599                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 14600                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 14601  1F42  0020               	movlb	0	; select bank0
 14602  1F43  00A2               	movwf	setDimmerIntr_ControlStatus@lights
 14603                           
 14604                           ;Dimmer_B1.c: 71: if (lights == 1) {
 14605  1F44  0822               	movf	setDimmerIntr_ControlStatus@lights,w
 14606  1F45  3A01               	xorlw	1
 14607  1F46  1D03               	skipz
 14608  1F47  2F5A               	goto	l7144
 14609                           
 14610                           ;Dimmer_B1.c: 72: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 14611  1F48  0820               	movf	setDimmerIntr_ControlStatus@command,w
 14612  1F49  3A01               	xorlw	1
 14613  1F4A  3000               	movlw	0
 14614  1F4B  1903               	skipnz
 14615  1F4C  3001               	movlw	1
 14616  1F4D  00A1               	movwf	??_setDimmerIntr_ControlStatus
 14617  1F4E  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14618  1F4F  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14619  1F50  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14620  1F51  0021               	movlb	1	; select bank1
 14621  1F52  083B               	movf	_DimmerIntr1^(0+128),w
 14622  1F53  0020               	movlb	0	; select bank0
 14623  1F54  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 14624  1F55  39F7               	andlw	-9
 14625  1F56  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 14626  1F57  0021               	movlb	1	; select bank1
 14627  1F58  00BB               	movwf	_DimmerIntr1^(0+128)
 14628                           
 14629                           ;Dimmer_B1.c: 73: }
 14630  1F59  0008               	return
 14631  1F5A                     l7144:	
 14632                           
 14633                           ;Dimmer_B1.c: 76: else if (lights == 2) {
 14634  1F5A  0020               	movlb	0	; select bank0
 14635  1F5B  0822               	movf	setDimmerIntr_ControlStatus@lights,w
 14636  1F5C  3A02               	xorlw	2
 14637  1F5D  1D03               	skipz
 14638  1F5E  0008               	return
 14639                           
 14640                           ;Dimmer_B1.c: 77: DimmerIntr2.ControlStatus = command == 1 ? 1 : 0;
 14641  1F5F  0820               	movf	setDimmerIntr_ControlStatus@command,w
 14642  1F60  3A01               	xorlw	1
 14643  1F61  3000               	movlw	0
 14644  1F62  1903               	skipnz
 14645  1F63  3001               	movlw	1
 14646  1F64  00A1               	movwf	??_setDimmerIntr_ControlStatus
 14647  1F65  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14648  1F66  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14649  1F67  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14650  1F68  0021               	movlb	1	; select bank1
 14651  1F69  0847               	movf	_DimmerIntr2^(0+128),w
 14652  1F6A  0020               	movlb	0	; select bank0
 14653  1F6B  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 14654  1F6C  39F7               	andlw	-9
 14655  1F6D  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 14656  1F6E  0021               	movlb	1	; select bank1
 14657  1F6F  00C7               	movwf	_DimmerIntr2^(0+128)
 14658  1F70  0008               	return
 14659  1F71                     __end_of_setDimmerIntr_ControlStatus:	
 14660                           
 14661                           	psect	text94
 14662  0C1C                     __ptext94:	
 14663 ;; *************** function _setDelayOff_GO *****************
 14664 ;; Defined at:
 14665 ;;		line 87 in file "../src/DelayOff_B1.c"
 14666 ;; Parameters:    Size  Location     Type
 14667 ;;  sw              1    wreg     unsigned char 
 14668 ;;  command         1   69[BANK0 ] unsigned char 
 14669 ;;  value           1   70[BANK0 ] unsigned char 
 14670 ;; Auto vars:     Size  Location     Type
 14671 ;;  sw              1   76[BANK0 ] unsigned char 
 14672 ;;  k               1   75[BANK0 ] unsigned char 
 14673 ;;  j               1   74[BANK0 ] unsigned char 
 14674 ;;  i               1   73[BANK0 ] unsigned char 
 14675 ;; Return value:  Size  Location     Type
 14676 ;;		None               void
 14677 ;; Registers used:
 14678 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14679 ;; Tracked objects:
 14680 ;;		On entry : 0/0
 14681 ;;		On exit  : 0/0
 14682 ;;		Unchanged: 0/0
 14683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14684 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14685 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14686 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14687 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14688 ;;Total ram usage:        8 bytes
 14689 ;; Hardware stack levels used:    1
 14690 ;; Hardware stack levels required when called:    6
 14691 ;; This function calls:
 14692 ;;		_DelayOffPointSelect
 14693 ;;		___bmul
 14694 ;;		_setProductData
 14695 ;; This function is called by:
 14696 ;;		_setDimmerLights_OnOff
 14697 ;;		_setRFSW_Control
 14698 ;; This function uses a non-reentrant model
 14699 ;;
 14700                           
 14701                           
 14702                           ;psect for function _setDelayOff_GO
 14703  0C1C                     _setDelayOff_GO:	
 14704                           
 14705                           ;incstack = 0
 14706                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14707                           ;setDelayOff_GO@sw stored from wreg
 14708  0C1C  0020               	movlb	0	; select bank0
 14709  0C1D  00EC               	movwf	setDelayOff_GO@sw
 14710                           
 14711                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 14712  0C1E  086C               	movf	setDelayOff_GO@sw,w
 14713  0C1F  319B  23BB  318C   	fcall	_DelayOffPointSelect
 14714                           
 14715                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 14716  0C22  0020               	movlb	0	; select bank0
 14717  0C23  0865               	movf	setDelayOff_GO@command,w
 14718  0C24  3A01               	xorlw	1
 14719  0C25  3000               	movlw	0
 14720  0C26  1903               	skipnz
 14721  0C27  3001               	movlw	1
 14722  0C28  00E7               	movwf	??_setDelayOff_GO
 14723  0C29  0021               	movlb	1	; select bank1
 14724  0C2A  0855               	movf	_DelayOff^(0+128),w
 14725  0C2B  0086               	movwf	6
 14726  0C2C  3001               	movlw	1	; select bank2/3
 14727  0C2D  0087               	movwf	7
 14728  0C2E  0020               	movlb	0	; select bank0
 14729  0C2F  0DE7               	rlf	??_setDelayOff_GO,f
 14730  0C30  0801               	movf	1,w
 14731  0C31  0667               	xorwf	??_setDelayOff_GO,w
 14732  0C32  39FD               	andlw	-3
 14733  0C33  0667               	xorwf	??_setDelayOff_GO,w
 14734  0C34  0081               	movwf	1
 14735                           
 14736                           ;DelayOff_B1.c: 91: DelayOff->SecondTime = 0;
 14737  0C35  0021               	movlb	1	; select bank1
 14738  0C36  0855               	movf	_DelayOff^(0+128),w
 14739  0C37  3E02               	addlw	2
 14740  0C38  0086               	movwf	6
 14741  0C39  3001               	movlw	1	; select bank2/3
 14742  0C3A  0087               	movwf	7
 14743  0C3B  3000               	movlw	0
 14744  0C3C  3FC0               	movwi [0]fsr1
 14745  0C3D  3FC1               	movwi [1]fsr1
 14746                           
 14747                           ;DelayOff_B1.c: 92: DelayOff->MinuteTime = 0;
 14748  0C3E  0855               	movf	_DelayOff^(0+128),w
 14749  0C3F  3E04               	addlw	4
 14750  0C40  0086               	movwf	6
 14751  0C41  3001               	movlw	1	; select bank2/3
 14752  0C42  0087               	movwf	7
 14753  0C43  0181               	clrf	1
 14754                           
 14755                           ;DelayOff_B1.c: 94: if (command == 1) {
 14756  0C44  0020               	movlb	0	; select bank0
 14757  0C45  0865               	movf	setDelayOff_GO@command,w
 14758  0C46  3A01               	xorlw	1
 14759  0C47  1D03               	skipz
 14760  0C48  2C9E               	goto	l6796
 14761                           
 14762                           ;DelayOff_B1.c: 96: char i = 5, j = 0, k = 0;
 14763  0C49  3005               	movlw	5
 14764  0C4A  00E7               	movwf	??_setDelayOff_GO
 14765  0C4B  0867               	movf	??_setDelayOff_GO,w
 14766  0C4C  00E9               	movwf	setDelayOff_GO@i
 14767  0C4D  01EA               	clrf	setDelayOff_GO@j
 14768  0C4E  01EB               	clrf	setDelayOff_GO@k
 14769                           
 14770                           ;DelayOff_B1.c: 97: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x30) {
 14771  0C4F  300F               	movlw	15
 14772  0C50  0566               	andwf	setDelayOff_GO@value,w
 14773  0C51  00E7               	movwf	??_setDelayOff_GO
 14774  0C52  0867               	movf	??_setDelayOff_GO,w
 14775  0C53  3A05               	xorlw	5
 14776  0C54  1903               	skipnz
 14777  0C55  2C5A               	goto	l6782
 14778  0C56  0866               	movf	setDelayOff_GO@value,w
 14779  0C57  390F               	andlw	15
 14780  0C58  1D03               	btfss	3,2
 14781  0C59  2C8A               	goto	l6792
 14782  0C5A                     l6782:	
 14783  0C5A  3031               	movlw	49
 14784  0C5B  0266               	subwf	setDelayOff_GO@value,w
 14785  0C5C  1803               	skipnc
 14786  0C5D  2C8A               	goto	l6792
 14787                           
 14788                           ;DelayOff_B1.c: 98: j = value & 0x0f;
 14789  0C5E  0866               	movf	setDelayOff_GO@value,w
 14790  0C5F  390F               	andlw	15
 14791  0C60  00E7               	movwf	??_setDelayOff_GO
 14792  0C61  0867               	movf	??_setDelayOff_GO,w
 14793  0C62  00EA               	movwf	setDelayOff_GO@j
 14794                           
 14795                           ;DelayOff_B1.c: 99: k = (value >> 4) & 0x0f;
 14796  0C63  0866               	movf	setDelayOff_GO@value,w
 14797  0C64  00E7               	movwf	??_setDelayOff_GO
 14798  0C65  3004               	movlw	4
 14799  0C66                     u6195:	
 14800  0C66  36E7               	lsrf	??_setDelayOff_GO,f
 14801  0C67  0B89               	decfsz	9,f
 14802  0C68  2C66               	goto	u6195
 14803  0C69  0867               	movf	??_setDelayOff_GO,w
 14804  0C6A  390F               	andlw	15
 14805  0C6B  00E8               	movwf	??_setDelayOff_GO+1
 14806  0C6C  0868               	movf	??_setDelayOff_GO+1,w
 14807  0C6D  00EB               	movwf	setDelayOff_GO@k
 14808                           
 14809                           ;DelayOff_B1.c: 100: DelayOff->Value = j + (k * 10);
 14810  0C6E  300A               	movlw	10
 14811  0C6F  00E7               	movwf	??_setDelayOff_GO
 14812  0C70  0867               	movf	??_setDelayOff_GO,w
 14813  0C71  00A0               	movwf	___bmul@multiplicand
 14814  0C72  086B               	movf	setDelayOff_GO@k,w
 14815  0C73  319A  2270  318C   	fcall	___bmul
 14816  0C76  0020               	movlb	0	; select bank0
 14817  0C77  076A               	addwf	setDelayOff_GO@j,w
 14818  0C78  00E8               	movwf	??_setDelayOff_GO+1
 14819  0C79  0021               	movlb	1	; select bank1
 14820  0C7A  0A55               	incf	_DelayOff^(0+128),w
 14821  0C7B  0086               	movwf	6
 14822  0C7C  3001               	movlw	1	; select bank2/3
 14823  0C7D  0087               	movwf	7
 14824  0C7E  0020               	movlb	0	; select bank0
 14825  0C7F  0868               	movf	??_setDelayOff_GO+1,w
 14826  0C80  0081               	movwf	1
 14827                           
 14828                           ;DelayOff_B1.c: 102: setProductData(26 + sw, value);
 14829  0C81  0866               	movf	setDelayOff_GO@value,w
 14830  0C82  00E7               	movwf	??_setDelayOff_GO
 14831  0C83  0867               	movf	??_setDelayOff_GO,w
 14832  0C84  00E2               	movwf	setProductData@value
 14833  0C85  086C               	movf	setDelayOff_GO@sw,w
 14834  0C86  3E1A               	addlw	26
 14835  0C87  3199  218D         	fcall	_setProductData
 14836                           
 14837                           ;DelayOff_B1.c: 103: } else {
 14838  0C89  0008               	return
 14839  0C8A                     l6792:	
 14840                           
 14841                           ;DelayOff_B1.c: 104: DelayOff->Value = 0x05;
 14842  0C8A  3005               	movlw	5
 14843  0C8B  0020               	movlb	0	; select bank0
 14844  0C8C  00E7               	movwf	??_setDelayOff_GO
 14845  0C8D  0021               	movlb	1	; select bank1
 14846  0C8E  0A55               	incf	_DelayOff^(0+128),w
 14847  0C8F  0086               	movwf	6
 14848  0C90  3001               	movlw	1	; select bank2/3
 14849  0C91  0087               	movwf	7
 14850  0C92  0020               	movlb	0	; select bank0
 14851  0C93  0867               	movf	??_setDelayOff_GO,w
 14852  0C94  0081               	movwf	1
 14853                           
 14854                           ;DelayOff_B1.c: 105: setProductData(26 + sw, 0x05);
 14855  0C95  3005               	movlw	5
 14856  0C96  00E7               	movwf	??_setDelayOff_GO
 14857  0C97  0867               	movf	??_setDelayOff_GO,w
 14858  0C98  00E2               	movwf	setProductData@value
 14859  0C99  086C               	movf	setDelayOff_GO@sw,w
 14860  0C9A  3E1A               	addlw	26
 14861  0C9B  3199  218D         	fcall	_setProductData
 14862                           
 14863                           ;DelayOff_B1.c: 106: }
 14864                           ;DelayOff_B1.c: 108: } else if (command == 0) {
 14865  0C9D  0008               	return
 14866  0C9E                     l6796:	
 14867  0C9E  0020               	movlb	0	; select bank0
 14868  0C9F  08E5               	movf	setDelayOff_GO@command,f
 14869  0CA0  1D03               	skipz
 14870  0CA1  0008               	return
 14871                           
 14872                           ;DelayOff_B1.c: 109: setProductData(26 + sw, 0);
 14873  0CA2  01E2               	clrf	setProductData@value
 14874  0CA3  086C               	movf	setDelayOff_GO@sw,w
 14875  0CA4  3E1A               	addlw	26
 14876  0CA5  3199  218D         	fcall	_setProductData
 14877  0CA7  0008               	return
 14878  0CA8                     __end_of_setDelayOff_GO:	
 14879                           
 14880                           	psect	text95
 14881  1A70                     __ptext95:	
 14882 ;; *************** function ___bmul *****************
 14883 ;; Defined at:
 14884 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 14885 ;; Parameters:    Size  Location     Type
 14886 ;;  multiplier      1    wreg     unsigned char 
 14887 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 14888 ;; Auto vars:     Size  Location     Type
 14889 ;;  multiplier      1    3[BANK0 ] unsigned char 
 14890 ;;  product         1    2[BANK0 ] unsigned char 
 14891 ;; Return value:  Size  Location     Type
 14892 ;;                  1    wreg      unsigned char 
 14893 ;; Registers used:
 14894 ;;		wreg, status,2, status,0
 14895 ;; Tracked objects:
 14896 ;;		On entry : 0/0
 14897 ;;		On exit  : 0/0
 14898 ;;		Unchanged: 0/0
 14899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14900 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14901 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14902 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14903 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14904 ;;Total ram usage:        4 bytes
 14905 ;; Hardware stack levels used:    1
 14906 ;; Hardware stack levels required when called:    5
 14907 ;; This function calls:
 14908 ;;		Nothing
 14909 ;; This function is called by:
 14910 ;;		_setDelayOff_GO
 14911 ;;		_DelayTimejudge
 14912 ;; This function uses a non-reentrant model
 14913 ;;
 14914                           
 14915                           
 14916                           ;psect for function ___bmul
 14917  1A70                     ___bmul:	
 14918                           
 14919                           ;incstack = 0
 14920                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 14921                           ;___bmul@multiplier stored from wreg
 14922  1A70  0020               	movlb	0	; select bank0
 14923  1A71  00A3               	movwf	___bmul@multiplier
 14924  1A72  01A2               	clrf	___bmul@product
 14925  1A73                     l6438:	
 14926  1A73  1C23               	btfss	___bmul@multiplier,0
 14927  1A74  2A79               	goto	l6442
 14928  1A75  0820               	movf	___bmul@multiplicand,w
 14929  1A76  00A1               	movwf	??___bmul
 14930  1A77  0821               	movf	??___bmul,w
 14931  1A78  07A2               	addwf	___bmul@product,f
 14932  1A79                     l6442:	
 14933  1A79  1003               	clrc
 14934  1A7A  0DA0               	rlf	___bmul@multiplicand,f
 14935  1A7B  1003               	clrc
 14936  1A7C  0CA3               	rrf	___bmul@multiplier,f
 14937  1A7D  08A3               	movf	___bmul@multiplier,f
 14938  1A7E  1D03               	skipz
 14939  1A7F  2A73               	goto	l6438
 14940  1A80  0822               	movf	___bmul@product,w
 14941  1A81  0008               	return
 14942  1A82                     __end_of___bmul:	
 14943                           
 14944                           	psect	text96
 14945  1C2E                     __ptext96:	
 14946 ;; *************** function _setCmd_Status *****************
 14947 ;; Defined at:
 14948 ;;		line 651 in file "../src/main_B1.c"
 14949 ;; Parameters:    Size  Location     Type
 14950 ;;  number          1    wreg     unsigned char 
 14951 ;;  cmd             1    0[BANK0 ] unsigned char 
 14952 ;; Auto vars:     Size  Location     Type
 14953 ;;  number          1    2[BANK0 ] unsigned char 
 14954 ;; Return value:  Size  Location     Type
 14955 ;;		None               void
 14956 ;; Registers used:
 14957 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14958 ;; Tracked objects:
 14959 ;;		On entry : 0/0
 14960 ;;		On exit  : 0/0
 14961 ;;		Unchanged: 0/0
 14962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14963 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14964 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14965 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14966 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14967 ;;Total ram usage:        3 bytes
 14968 ;; Hardware stack levels used:    1
 14969 ;; Hardware stack levels required when called:    5
 14970 ;; This function calls:
 14971 ;;		Nothing
 14972 ;; This function is called by:
 14973 ;;		_setDimmerLights_OnOff
 14974 ;;		_setControl_Lights_Table
 14975 ;; This function uses a non-reentrant model
 14976 ;;
 14977                           
 14978                           
 14979                           ;psect for function _setCmd_Status
 14980  1C2E                     _setCmd_Status:	
 14981                           
 14982                           ;incstack = 0
 14983                           ; Regs used in _setCmd_Status: [wreg-fsr0h+status,2+status,0]
 14984                           ;setCmd_Status@number stored from wreg
 14985  1C2E  0020               	movlb	0	; select bank0
 14986  1C2F  00A2               	movwf	setCmd_Status@number
 14987                           
 14988                           ;main_B1.c: 652: switch (number) {
 14989  1C30  2C40               	goto	l6976
 14990  1C31                     l6972:	
 14991                           ;main_B1.c: 653: case 1:
 14992                           
 14993                           
 14994                           ;main_B1.c: 654: Cmd.all_off = cmd == 1 ? 1 : 0;
 14995  1C31  0820               	movf	setCmd_Status@cmd,w
 14996  1C32  3A01               	xorlw	1
 14997  1C33  3000               	movlw	0
 14998  1C34  1903               	skipnz
 14999  1C35  3001               	movlw	1
 15000  1C36  00A1               	movwf	??_setCmd_Status
 15001  1C37  0021               	movlb	1	; select bank1
 15002  1C38  0854               	movf	_Cmd^(0+128),w
 15003  1C39  0020               	movlb	0	; select bank0
 15004  1C3A  0621               	xorwf	??_setCmd_Status,w
 15005  1C3B  39FE               	andlw	-2
 15006  1C3C  0621               	xorwf	??_setCmd_Status,w
 15007  1C3D  0021               	movlb	1	; select bank1
 15008  1C3E  00D4               	movwf	_Cmd^(0+128)
 15009                           
 15010                           ;main_B1.c: 656: }
 15011                           
 15012                           ;main_B1.c: 655: break;
 15013  1C3F  0008               	return
 15014  1C40                     l6976:	
 15015  1C40  0020               	movlb	0	; select bank0
 15016  1C41  0822               	movf	setCmd_Status@number,w
 15017                           
 15018                           ; Switch size 1, requested type "space"
 15019                           ; Number of cases is 1, Range of values is 1 to 1
 15020                           ; switch strategies available:
 15021                           ; Name         Instructions Cycles
 15022                           ; simple_byte            4     3 (average)
 15023                           ; direct_byte           11     9 (fixed)
 15024                           ; jumptable            263     9 (fixed)
 15025                           ;	Chosen strategy is simple_byte
 15026  1C42  3A01               	xorlw	1	; case 1
 15027  1C43  1903               	skipnz
 15028  1C44  2C31               	goto	l6972
 15029  1C45  2C46               	goto	l2923
 15030  1C46                     l2923:	
 15031  1C46  0008               	return
 15032  1C47                     __end_of_setCmd_Status:	
 15033                           
 15034                           	psect	text97
 15035  1AF0                     __ptext97:	
 15036 ;; *************** function _getMain_All_LightsStatus *****************
 15037 ;; Defined at:
 15038 ;;		line 373 in file "../src/main_B1.c"
 15039 ;; Parameters:    Size  Location     Type
 15040 ;;		None
 15041 ;; Auto vars:     Size  Location     Type
 15042 ;;  status          1    0[BANK0 ] unsigned char 
 15043 ;; Return value:  Size  Location     Type
 15044 ;;                  1    wreg      unsigned char 
 15045 ;; Registers used:
 15046 ;;		wreg, status,2, status,0
 15047 ;; Tracked objects:
 15048 ;;		On entry : 0/0
 15049 ;;		On exit  : 0/0
 15050 ;;		Unchanged: 0/0
 15051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15053 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15055 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15056 ;;Total ram usage:        1 bytes
 15057 ;; Hardware stack levels used:    1
 15058 ;; Hardware stack levels required when called:    5
 15059 ;; This function calls:
 15060 ;;		Nothing
 15061 ;; This function is called by:
 15062 ;;		_DimmerLights_Main
 15063 ;;		_setDimmerLights_Main
 15064 ;;		_setDimmerLights_OnOff
 15065 ;;		_Flash_Memory_Main
 15066 ;;		_Load_Main
 15067 ;;		_setTemp_Main
 15068 ;;		_setControl_Lights_Table
 15069 ;;		_Exception_Main
 15070 ;; This function uses a non-reentrant model
 15071 ;;
 15072                           
 15073                           
 15074                           ;psect for function _getMain_All_LightsStatus
 15075  1AF0                     _getMain_All_LightsStatus:	
 15076                           
 15077                           ;main_B1.c: 374: char status = 0;
 15078                           
 15079                           ;incstack = 0
 15080                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2+status,0]
 15081  1AF0  0020               	movlb	0	; select bank0
 15082  1AF1  01A0               	clrf	getMain_All_LightsStatus@status
 15083                           
 15084                           ;main_B1.c: 393: status = DimmerLights1.Status == 1 ? 1 : 0;
 15085  1AF2  3000               	movlw	0
 15086  1AF3  0022               	movlb	2	; select bank2
 15087  1AF4  1868               	btfsc	(_DimmerLights1^(0+256)+1),0
 15088  1AF5  3001               	movlw	1
 15089  1AF6  0020               	movlb	0	; select bank0
 15090  1AF7  00A0               	movwf	getMain_All_LightsStatus@status
 15091                           
 15092                           ;main_B1.c: 394: if (status == 0) {
 15093  1AF8  08A0               	movf	getMain_All_LightsStatus@status,f
 15094  1AF9  1D03               	skipz
 15095  1AFA  2B01               	goto	l6966
 15096                           
 15097                           ;main_B1.c: 395: status = DimmerLights2.Status == 1 ? 1 : 0;
 15098  1AFB  3000               	movlw	0
 15099  1AFC  0023               	movlb	3	; select bank3
 15100  1AFD  1851               	btfsc	(_DimmerLights2^(0+384)+1),0
 15101  1AFE  3001               	movlw	1
 15102  1AFF  0020               	movlb	0	; select bank0
 15103  1B00  00A0               	movwf	getMain_All_LightsStatus@status
 15104  1B01                     l6966:	
 15105                           
 15106                           ;main_B1.c: 396: }
 15107                           ;main_B1.c: 420: return status;
 15108  1B01  0820               	movf	getMain_All_LightsStatus@status,w
 15109  1B02  0008               	return
 15110  1B03                     __end_of_getMain_All_LightsStatus:	
 15111                           
 15112                           	psect	text98
 15113  1A1A                     __ptext98:	
 15114 ;; *************** function _getDelayOff_GO *****************
 15115 ;; Defined at:
 15116 ;;		line 114 in file "../src/DelayOff_B1.c"
 15117 ;; Parameters:    Size  Location     Type
 15118 ;;  sw              1    wreg     unsigned char 
 15119 ;; Auto vars:     Size  Location     Type
 15120 ;;  sw              1    2[BANK0 ] unsigned char 
 15121 ;;  go              1    3[BANK0 ] unsigned char 
 15122 ;; Return value:  Size  Location     Type
 15123 ;;                  1    wreg      unsigned char 
 15124 ;; Registers used:
 15125 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15126 ;; Tracked objects:
 15127 ;;		On entry : 0/0
 15128 ;;		On exit  : 0/0
 15129 ;;		Unchanged: 0/0
 15130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15132 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15134 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15135 ;;Total ram usage:        2 bytes
 15136 ;; Hardware stack levels used:    1
 15137 ;; Hardware stack levels required when called:    6
 15138 ;; This function calls:
 15139 ;;		_DelayOffPointSelect
 15140 ;; This function is called by:
 15141 ;;		_setDimmerLights_OnOff
 15142 ;; This function uses a non-reentrant model
 15143 ;;
 15144                           
 15145                           
 15146                           ;psect for function _getDelayOff_GO
 15147  1A1A                     _getDelayOff_GO:	
 15148                           
 15149                           ;incstack = 0
 15150                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15151                           ;getDelayOff_GO@sw stored from wreg
 15152  1A1A  0020               	movlb	0	; select bank0
 15153  1A1B  00A2               	movwf	getDelayOff_GO@sw
 15154                           
 15155                           ;DelayOff_B1.c: 115: DelayOffPointSelect(sw);
 15156  1A1C  0822               	movf	getDelayOff_GO@sw,w
 15157  1A1D  319B  23BB         	fcall	_DelayOffPointSelect
 15158                           
 15159                           ;DelayOff_B1.c: 116: char go = DelayOff->GO == 1 ? 1 : 0;
 15160  1A1F  0021               	movlb	1	; select bank1
 15161  1A20  0855               	movf	_DelayOff^(0+128),w
 15162  1A21  0086               	movwf	6
 15163  1A22  3001               	movlw	1	; select bank2/3
 15164  1A23  0087               	movwf	7
 15165  1A24  3000               	movlw	0
 15166  1A25  1881               	btfsc	1,1
 15167  1A26  3001               	movlw	1
 15168  1A27  0020               	movlb	0	; select bank0
 15169  1A28  00A3               	movwf	getDelayOff_GO@go
 15170                           
 15171                           ;DelayOff_B1.c: 117: return go;
 15172  1A29  0823               	movf	getDelayOff_GO@go,w
 15173  1A2A  0008               	return
 15174  1A2B                     __end_of_getDelayOff_GO:	
 15175                           
 15176                           	psect	text99
 15177  1A5E                     __ptext99:	
 15178 ;; *************** function _getCmd_Status *****************
 15179 ;; Defined at:
 15180 ;;		line 659 in file "../src/main_B1.c"
 15181 ;; Parameters:    Size  Location     Type
 15182 ;;  number          1    wreg     unsigned char 
 15183 ;; Auto vars:     Size  Location     Type
 15184 ;;  number          1    0[BANK0 ] unsigned char 
 15185 ;;  cmd             1    1[BANK0 ] unsigned char 
 15186 ;; Return value:  Size  Location     Type
 15187 ;;                  1    wreg      unsigned char 
 15188 ;; Registers used:
 15189 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15190 ;; Tracked objects:
 15191 ;;		On entry : 0/0
 15192 ;;		On exit  : 0/0
 15193 ;;		Unchanged: 0/0
 15194 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15196 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15198 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15199 ;;Total ram usage:        2 bytes
 15200 ;; Hardware stack levels used:    1
 15201 ;; Hardware stack levels required when called:    5
 15202 ;; This function calls:
 15203 ;;		Nothing
 15204 ;; This function is called by:
 15205 ;;		_setDimmerLights_OnOff
 15206 ;; This function uses a non-reentrant model
 15207 ;;
 15208                           
 15209                           
 15210                           ;psect for function _getCmd_Status
 15211  1A5E                     _getCmd_Status:	
 15212                           
 15213                           ;incstack = 0
 15214                           ; Regs used in _getCmd_Status: [wreg-fsr0h+status,2+status,0]
 15215                           ;getCmd_Status@number stored from wreg
 15216  1A5E  0020               	movlb	0	; select bank0
 15217  1A5F  00A0               	movwf	getCmd_Status@number
 15218                           
 15219                           ;main_B1.c: 660: char cmd = 0;
 15220  1A60  01A1               	clrf	getCmd_Status@cmd
 15221                           
 15222                           ;main_B1.c: 661: switch (number) {
 15223  1A61  2A69               	goto	l7276
 15224  1A62                     l7272:	
 15225                           ;main_B1.c: 662: case 1:
 15226                           
 15227                           
 15228                           ;main_B1.c: 663: cmd = Cmd.all_off == 1 ? 1 : 0;
 15229  1A62  3000               	movlw	0
 15230  1A63  0021               	movlb	1	; select bank1
 15231  1A64  1854               	btfsc	_Cmd^(0+128),0
 15232  1A65  3001               	movlw	1
 15233  1A66  0020               	movlb	0	; select bank0
 15234  1A67  00A1               	movwf	getCmd_Status@cmd
 15235                           
 15236                           ;main_B1.c: 665: }
 15237                           
 15238                           ;main_B1.c: 664: break;
 15239  1A68  2A6E               	goto	l7278
 15240  1A69                     l7276:	
 15241  1A69  0820               	movf	getCmd_Status@number,w
 15242                           
 15243                           ; Switch size 1, requested type "space"
 15244                           ; Number of cases is 1, Range of values is 1 to 1
 15245                           ; switch strategies available:
 15246                           ; Name         Instructions Cycles
 15247                           ; simple_byte            4     3 (average)
 15248                           ; direct_byte           11     9 (fixed)
 15249                           ; jumptable            263     9 (fixed)
 15250                           ;	Chosen strategy is simple_byte
 15251  1A6A  3A01               	xorlw	1	; case 1
 15252  1A6B  1903               	skipnz
 15253  1A6C  2A62               	goto	l7272
 15254  1A6D  2A6E               	goto	l7278
 15255  1A6E                     l7278:	
 15256                           
 15257                           ;main_B1.c: 666: return cmd;
 15258  1A6E  0821               	movf	getCmd_Status@cmd,w
 15259  1A6F  0008               	return
 15260  1A70                     __end_of_getCmd_Status:	
 15261                           
 15262                           	psect	text100
 15263  13B5                     __ptext100:	
 15264 ;; *************** function _setDimmerLights_Dimming *****************
 15265 ;; Defined at:
 15266 ;;		line 948 in file "../src/Dimmer_B1.c"
 15267 ;; Parameters:    Size  Location     Type
 15268 ;;  lights          1    wreg     unsigned char 
 15269 ;;  status          1   74[BANK0 ] unsigned char 
 15270 ;; Auto vars:     Size  Location     Type
 15271 ;;  lights          1   77[BANK0 ] unsigned char 
 15272 ;;  value           1   76[BANK0 ] unsigned char 
 15273 ;; Return value:  Size  Location     Type
 15274 ;;		None               void
 15275 ;; Registers used:
 15276 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15277 ;; Tracked objects:
 15278 ;;		On entry : 0/0
 15279 ;;		On exit  : 0/0
 15280 ;;		Unchanged: 0/0
 15281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15282 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15283 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15284 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15285 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15286 ;;Total ram usage:        4 bytes
 15287 ;; Hardware stack levels used:    1
 15288 ;; Hardware stack levels required when called:    8
 15289 ;; This function calls:
 15290 ;;		_getDimmerIntr_DimmingValue
 15291 ;;		_getDimmerLights_ValueToPercent
 15292 ;;		_setBuz
 15293 ;;		_setDimmerIntr_Dimming_Sw
 15294 ;;		_setDimmerIntr_MaxmumValue
 15295 ;;		_setDimmerLights_Line
 15296 ;;		_setMemory_Modify
 15297 ;;		_setProductData
 15298 ;;		_setRF_DimmerLights
 15299 ;;		_setRF_TransceiveGO
 15300 ;;		_setTxData
 15301 ;; This function is called by:
 15302 ;;		_setDimmerLights_Main
 15303 ;; This function uses a non-reentrant model
 15304 ;;
 15305                           
 15306                           
 15307                           ;psect for function _setDimmerLights_Dimming
 15308  13B5                     _setDimmerLights_Dimming:	
 15309                           
 15310                           ;incstack = 0
 15311                           ; Regs used in _setDimmerLights_Dimming: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15312                           ;setDimmerLights_Dimming@lights stored from wreg
 15313  13B5  0020               	movlb	0	; select bank0
 15314  13B6  00ED               	movwf	setDimmerLights_Dimming@lights
 15315                           
 15316                           ;Dimmer_B1.c: 949: if (status == 1) {
 15317  13B7  086A               	movf	setDimmerLights_Dimming@status,w
 15318  13B8  3A01               	xorlw	1
 15319  13B9  1D03               	skipz
 15320  13BA  2BCE               	goto	l7576
 15321                           
 15322                           ;Dimmer_B1.c: 950: setDimmerIntr_Dimming_Sw(lights, 1);
 15323  13BB  01A0               	clrf	setDimmerIntr_Dimming_Sw@command
 15324  13BC  0AA0               	incf	setDimmerIntr_Dimming_Sw@command,f
 15325  13BD  086D               	movf	setDimmerLights_Dimming@lights,w
 15326  13BE  3190  2003  3193   	fcall	_setDimmerIntr_Dimming_Sw
 15327                           
 15328                           ;Dimmer_B1.c: 953: setRF_TransceiveGO(0);
 15329  13C1  3000               	movlw	0
 15330  13C2  319A  22DD  3193   	fcall	_setRF_TransceiveGO
 15331                           
 15332                           ;Dimmer_B1.c: 955: setBuz(1, 100);
 15333  13C5  3064               	movlw	100
 15334  13C6  0020               	movlb	0	; select bank0
 15335  13C7  00A9               	movwf	setBuz@time
 15336  13C8  3000               	movlw	0
 15337  13C9  00AA               	movwf	setBuz@time+1
 15338  13CA  3001               	movlw	1
 15339  13CB  3194  240B         	fcall	_setBuz
 15340                           
 15341                           ;Dimmer_B1.c: 956: } else if (status == 0) {
 15342  13CD  0008               	return
 15343  13CE                     l7576:	
 15344  13CE  0020               	movlb	0	; select bank0
 15345  13CF  08EA               	movf	setDimmerLights_Dimming@status,f
 15346  13D0  1D03               	skipz
 15347  13D1  0008               	return
 15348                           
 15349                           ;Dimmer_B1.c: 957: setDimmerIntr_Dimming_Sw(lights, 0);
 15350  13D2  01A0               	clrf	setDimmerIntr_Dimming_Sw@command
 15351  13D3  086D               	movf	setDimmerLights_Dimming@lights,w
 15352  13D4  3190  2003  3193   	fcall	_setDimmerIntr_Dimming_Sw
 15353                           
 15354                           ;Dimmer_B1.c: 960: Dimmer.Load_Status = 0;
 15355  13D7  0022               	movlb	2	; select bank2
 15356  13D8  112C               	bcf	_Dimmer^(0+256),2
 15357                           
 15358                           ;Dimmer_B1.c: 961: setDimmerLights_Line(lights);
 15359  13D9  0020               	movlb	0	; select bank0
 15360  13DA  086D               	movf	setDimmerLights_Dimming@lights,w
 15361  13DB  319C  24E6  3193   	fcall	_setDimmerLights_Line
 15362                           
 15363                           ;Dimmer_B1.c: 963: char value = getDimmerIntr_DimmingValue(lights);
 15364  13DE  0020               	movlb	0	; select bank0
 15365  13DF  086D               	movf	setDimmerLights_Dimming@lights,w
 15366  13E0  319B  23A5  3193   	fcall	_getDimmerIntr_DimmingValue
 15367  13E3  0020               	movlb	0	; select bank0
 15368  13E4  00EB               	movwf	??_setDimmerLights_Dimming
 15369  13E5  086B               	movf	??_setDimmerLights_Dimming,w
 15370  13E6  00EC               	movwf	setDimmerLights_Dimming@value
 15371                           
 15372                           ;Dimmer_B1.c: 964: setDimmerIntr_MaxmumValue(lights, value);
 15373  13E7  086C               	movf	setDimmerLights_Dimming@value,w
 15374  13E8  00EB               	movwf	??_setDimmerLights_Dimming
 15375  13E9  086B               	movf	??_setDimmerLights_Dimming,w
 15376  13EA  00E2               	movwf	setDimmerIntr_MaxmumValue@value
 15377  13EB  086D               	movf	setDimmerLights_Dimming@lights,w
 15378  13EC  319B  23E9  3193   	fcall	_setDimmerIntr_MaxmumValue
 15379                           
 15380                           ;Dimmer_B1.c: 965: setProductData((20 + lights), getDimmerLights_ValueToPercent(value));
 15381  13EF  0020               	movlb	0	; select bank0
 15382  13F0  086C               	movf	setDimmerLights_Dimming@value,w
 15383  13F1  3195  2585  3193   	fcall	_getDimmerLights_ValueToPercent
 15384  13F4  0020               	movlb	0	; select bank0
 15385  13F5  00EB               	movwf	??_setDimmerLights_Dimming
 15386  13F6  086B               	movf	??_setDimmerLights_Dimming,w
 15387  13F7  00E2               	movwf	setProductData@value
 15388  13F8  086D               	movf	setDimmerLights_Dimming@lights,w
 15389  13F9  3E14               	addlw	20
 15390  13FA  3199  218D  3193   	fcall	_setProductData
 15391                           
 15392                           ;Dimmer_B1.c: 972: setMemory_Modify(1);
 15393  13FD  3001               	movlw	1
 15394  13FE  319A  22CA  3193   	fcall	_setMemory_Modify
 15395                           
 15396                           ;Dimmer_B1.c: 976: setRF_DimmerLights(lights, 1);
 15397  1401  0020               	movlb	0	; select bank0
 15398  1402  01E5               	clrf	setRF_DimmerLights@on
 15399  1403  0AE5               	incf	setRF_DimmerLights@on,f
 15400  1404  086D               	movf	setDimmerLights_Dimming@lights,w
 15401  1405  3195  25EA  3193   	fcall	_setRF_DimmerLights
 15402                           
 15403                           ;Dimmer_B1.c: 977: setTxData();
 15404  1408  318F  2745         	fcall	_setTxData
 15405  140A  0008               	return
 15406  140B                     __end_of_setDimmerLights_Dimming:	
 15407                           
 15408                           	psect	text101
 15409  0F45                     __ptext101:	
 15410 ;; *************** function _setTxData *****************
 15411 ;; Defined at:
 15412 ;;		line 183 in file "../src/RF_Control_B1.c"
 15413 ;; Parameters:    Size  Location     Type
 15414 ;;		None
 15415 ;; Auto vars:     Size  Location     Type
 15416 ;;  i               1    0        unsigned char 
 15417 ;; Return value:  Size  Location     Type
 15418 ;;		None               void
 15419 ;; Registers used:
 15420 ;;		wreg, fsr1l, fsr1h, status,2
 15421 ;; Tracked objects:
 15422 ;;		On entry : 0/0
 15423 ;;		On exit  : 0/0
 15424 ;;		Unchanged: 0/0
 15425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15428 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15429 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15430 ;;Total ram usage:        1 bytes
 15431 ;; Hardware stack levels used:    1
 15432 ;; Hardware stack levels required when called:    5
 15433 ;; This function calls:
 15434 ;;		Nothing
 15435 ;; This function is called by:
 15436 ;;		_setDimmerLights_OnOff
 15437 ;;		_setDimmerLights_Dimming
 15438 ;;		_getRxData
 15439 ;;		_setControl_Lights_Table
 15440 ;;		_setRFSW_Control
 15441 ;;		_setRFSW_AdjControl
 15442 ;; This function uses a non-reentrant model
 15443 ;;
 15444                           
 15445                           
 15446                           ;psect for function _setTxData
 15447  0F45                     _setTxData:	
 15448                           
 15449                           ;RF_Control_B1.c: 184: char i;
 15450                           ;RF_Control_B1.c: 185: if (RF1.Enable == 1) {
 15451                           
 15452                           ;incstack = 0
 15453                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2]
 15454  0F45  0021               	movlb	1	; select bank1
 15455  0F46  1C20               	btfss	_RF1^(0+128),0
 15456  0F47  0008               	return
 15457                           
 15458                           ;RF_Control_B1.c: 187: RF1.TransceiveGO = 1;
 15459  0F48  1520               	bsf	_RF1^(0+128),2
 15460                           
 15461                           ;RF_Control_B1.c: 188: RF1.Count = 0;
 15462  0F49  01A2               	clrf	(_RF1^(0+128)+2)
 15463  0F4A  01A3               	clrf	((_RF1+1)^(0+128)+2)
 15464                           
 15465                           ;RF_Control_B1.c: 200: RF_Data[0] = 0x63;
 15466  0F4B  3063               	movlw	99
 15467  0F4C  0020               	movlb	0	; select bank0
 15468  0F4D  00A0               	movwf	??_setTxData
 15469  0F4E  0820               	movf	??_setTxData,w
 15470  0F4F  0023               	movlb	3	; select bank3
 15471  0F50  00A0               	movwf	_RF_Data^(0+384)
 15472                           
 15473                           ;RF_Control_B1.c: 201: RF_Data[1] = 0x02;
 15474  0F51  3002               	movlw	2
 15475  0F52  0020               	movlb	0	; select bank0
 15476  0F53  00A0               	movwf	??_setTxData
 15477  0F54  0820               	movf	??_setTxData,w
 15478  0F55  0023               	movlb	3	; select bank3
 15479  0F56  00A1               	movwf	(_RF_Data^(0+384)+1)
 15480                           
 15481                           ;RF_Control_B1.c: 203: RF_Data[2] = product->Data[2];
 15482  0F57  0021               	movlb	1	; select bank1
 15483  0F58  086E               	movf	_product^(0+128),w
 15484  0F59  0086               	movwf	6
 15485  0F5A  3002               	movlw	2	; select bank4/5
 15486  0F5B  0087               	movwf	7
 15487  0F5C  3002               	movlw	2	; select bank4/5
 15488  0F5D  3F42               	moviw [2]fsr1
 15489  0F5E  0023               	movlb	3	; select bank3
 15490  0F5F  00A2               	movwf	(_RF_Data^(0+384)+2)
 15491                           
 15492                           ;RF_Control_B1.c: 204: RF_Data[3] = product->Data[3];
 15493  0F60  0021               	movlb	1	; select bank1
 15494  0F61  086E               	movf	_product^(0+128),w
 15495  0F62  0086               	movwf	6
 15496  0F63  3002               	movlw	2	; select bank4/5
 15497  0F64  0087               	movwf	7
 15498  0F65  3002               	movlw	2	; select bank4/5
 15499  0F66  3F43               	moviw [3]fsr1
 15500  0F67  0023               	movlb	3	; select bank3
 15501  0F68  00A3               	movwf	(_RF_Data^(0+384)+3)
 15502                           
 15503                           ;RF_Control_B1.c: 205: RF_Data[4] = product->Data[4];
 15504  0F69  0021               	movlb	1	; select bank1
 15505  0F6A  086E               	movf	_product^(0+128),w
 15506  0F6B  0086               	movwf	6
 15507  0F6C  3002               	movlw	2	; select bank4/5
 15508  0F6D  0087               	movwf	7
 15509  0F6E  3002               	movlw	2	; select bank4/5
 15510  0F6F  3F44               	moviw [4]fsr1
 15511  0F70  0023               	movlb	3	; select bank3
 15512  0F71  00A4               	movwf	(_RF_Data^(0+384)+4)
 15513                           
 15514                           ;RF_Control_B1.c: 206: RF_Data[5] = product->Data[5];
 15515  0F72  0021               	movlb	1	; select bank1
 15516  0F73  086E               	movf	_product^(0+128),w
 15517  0F74  0086               	movwf	6
 15518  0F75  3002               	movlw	2	; select bank4/5
 15519  0F76  0087               	movwf	7
 15520  0F77  3002               	movlw	2	; select bank4/5
 15521  0F78  3F45               	moviw [5]fsr1
 15522  0F79  0023               	movlb	3	; select bank3
 15523  0F7A  00A5               	movwf	(_RF_Data^(0+384)+5)
 15524                           
 15525                           ;RF_Control_B1.c: 207: RF_Data[6] = product->Data[6];
 15526  0F7B  0021               	movlb	1	; select bank1
 15527  0F7C  086E               	movf	_product^(0+128),w
 15528  0F7D  0086               	movwf	6
 15529  0F7E  3002               	movlw	2	; select bank4/5
 15530  0F7F  0087               	movwf	7
 15531  0F80  3002               	movlw	2	; select bank4/5
 15532  0F81  3F46               	moviw [6]fsr1
 15533  0F82  0023               	movlb	3	; select bank3
 15534  0F83  00A6               	movwf	(_RF_Data^(0+384)+6)
 15535                           
 15536                           ;RF_Control_B1.c: 208: RF_Data[7] = product->Data[7];
 15537  0F84  0021               	movlb	1	; select bank1
 15538  0F85  086E               	movf	_product^(0+128),w
 15539  0F86  0086               	movwf	6
 15540  0F87  3002               	movlw	2	; select bank4/5
 15541  0F88  0087               	movwf	7
 15542  0F89  3002               	movlw	2	; select bank4/5
 15543  0F8A  3F47               	moviw [7]fsr1
 15544  0F8B  0023               	movlb	3	; select bank3
 15545  0F8C  00A7               	movwf	(_RF_Data^(0+384)+7)
 15546                           
 15547                           ;RF_Control_B1.c: 209: RF_Data[8] = product->Data[8];
 15548  0F8D  0021               	movlb	1	; select bank1
 15549  0F8E  086E               	movf	_product^(0+128),w
 15550  0F8F  0086               	movwf	6
 15551  0F90  3002               	movlw	2	; select bank4/5
 15552  0F91  0087               	movwf	7
 15553  0F92  3002               	movlw	2	; select bank4/5
 15554  0F93  3F48               	moviw [8]fsr1
 15555  0F94  0023               	movlb	3	; select bank3
 15556  0F95  00A8               	movwf	(_RF_Data^(0+384)+8)
 15557                           
 15558                           ;RF_Control_B1.c: 210: RF_Data[9] = product->Data[9];
 15559  0F96  0021               	movlb	1	; select bank1
 15560  0F97  086E               	movf	_product^(0+128),w
 15561  0F98  0086               	movwf	6
 15562  0F99  3002               	movlw	2	; select bank4/5
 15563  0F9A  0087               	movwf	7
 15564  0F9B  3002               	movlw	2	; select bank4/5
 15565  0F9C  3F49               	moviw [9]fsr1
 15566  0F9D  0023               	movlb	3	; select bank3
 15567  0F9E  00A9               	movwf	(_RF_Data^(0+384)+9)
 15568                           
 15569                           ;RF_Control_B1.c: 211: RF_Data[10] = product->Data[10];
 15570  0F9F  0021               	movlb	1	; select bank1
 15571  0FA0  086E               	movf	_product^(0+128),w
 15572  0FA1  0086               	movwf	6
 15573  0FA2  3002               	movlw	2	; select bank4/5
 15574  0FA3  0087               	movwf	7
 15575  0FA4  3002               	movlw	2	; select bank4/5
 15576  0FA5  3F4A               	moviw [10]fsr1
 15577  0FA6  0023               	movlb	3	; select bank3
 15578  0FA7  00AA               	movwf	(_RF_Data^(0+384)+10)
 15579                           
 15580                           ;RF_Control_B1.c: 212: RF_Data[11] = product->Data[11];
 15581  0FA8  0021               	movlb	1	; select bank1
 15582  0FA9  086E               	movf	_product^(0+128),w
 15583  0FAA  0086               	movwf	6
 15584  0FAB  3002               	movlw	2	; select bank4/5
 15585  0FAC  0087               	movwf	7
 15586  0FAD  3002               	movlw	2	; select bank4/5
 15587  0FAE  3F4B               	moviw [11]fsr1
 15588  0FAF  0023               	movlb	3	; select bank3
 15589  0FB0  00AB               	movwf	(_RF_Data^(0+384)+11)
 15590                           
 15591                           ;RF_Control_B1.c: 213: RF_Data[12] = product->Data[12];
 15592  0FB1  0021               	movlb	1	; select bank1
 15593  0FB2  086E               	movf	_product^(0+128),w
 15594  0FB3  0086               	movwf	6
 15595  0FB4  3002               	movlw	2	; select bank4/5
 15596  0FB5  0087               	movwf	7
 15597  0FB6  3002               	movlw	2	; select bank4/5
 15598  0FB7  3F4C               	moviw [12]fsr1
 15599  0FB8  0023               	movlb	3	; select bank3
 15600  0FB9  00AC               	movwf	(_RF_Data^(0+384)+12)
 15601                           
 15602                           ;RF_Control_B1.c: 214: RF_Data[13] = product->Data[13];
 15603  0FBA  0021               	movlb	1	; select bank1
 15604  0FBB  086E               	movf	_product^(0+128),w
 15605  0FBC  0086               	movwf	6
 15606  0FBD  3002               	movlw	2	; select bank4/5
 15607  0FBE  0087               	movwf	7
 15608  0FBF  3002               	movlw	2	; select bank4/5
 15609  0FC0  3F4D               	moviw [13]fsr1
 15610  0FC1  0023               	movlb	3	; select bank3
 15611  0FC2  00AD               	movwf	(_RF_Data^(0+384)+13)
 15612                           
 15613                           ;RF_Control_B1.c: 215: RF_Data[14] = product->Data[14];
 15614  0FC3  0021               	movlb	1	; select bank1
 15615  0FC4  086E               	movf	_product^(0+128),w
 15616  0FC5  0086               	movwf	6
 15617  0FC6  3002               	movlw	2	; select bank4/5
 15618  0FC7  0087               	movwf	7
 15619  0FC8  3002               	movlw	2	; select bank4/5
 15620  0FC9  3F4E               	moviw [14]fsr1
 15621  0FCA  0023               	movlb	3	; select bank3
 15622  0FCB  00AE               	movwf	(_RF_Data^(0+384)+14)
 15623                           
 15624                           ;RF_Control_B1.c: 216: RF_Data[15] = product->Data[15];
 15625  0FCC  0021               	movlb	1	; select bank1
 15626  0FCD  086E               	movf	_product^(0+128),w
 15627  0FCE  0086               	movwf	6
 15628  0FCF  3002               	movlw	2	; select bank4/5
 15629  0FD0  0087               	movwf	7
 15630  0FD1  3002               	movlw	2	; select bank4/5
 15631  0FD2  3F4F               	moviw [15]fsr1
 15632  0FD3  0023               	movlb	3	; select bank3
 15633  0FD4  00AF               	movwf	(_RF_Data^(0+384)+15)
 15634                           
 15635                           ;RF_Control_B1.c: 217: RF_Data[16] = product->Data[16];
 15636  0FD5  0021               	movlb	1	; select bank1
 15637  0FD6  086E               	movf	_product^(0+128),w
 15638  0FD7  0086               	movwf	6
 15639  0FD8  3002               	movlw	2	; select bank4/5
 15640  0FD9  0087               	movwf	7
 15641  0FDA  3002               	movlw	2	; select bank4/5
 15642  0FDB  3F50               	moviw [16]fsr1
 15643  0FDC  0023               	movlb	3	; select bank3
 15644  0FDD  00B0               	movwf	(_RF_Data^(0+384)+16)
 15645                           
 15646                           ;RF_Control_B1.c: 218: RF_Data[17] = product->Data[17];
 15647  0FDE  0021               	movlb	1	; select bank1
 15648  0FDF  086E               	movf	_product^(0+128),w
 15649  0FE0  0086               	movwf	6
 15650  0FE1  3002               	movlw	2	; select bank4/5
 15651  0FE2  0087               	movwf	7
 15652  0FE3  3002               	movlw	2	; select bank4/5
 15653  0FE4  3F51               	moviw [17]fsr1
 15654  0FE5  0023               	movlb	3	; select bank3
 15655  0FE6  00B1               	movwf	(_RF_Data^(0+384)+17)
 15656                           
 15657                           ;RF_Control_B1.c: 219: RF_Data[18] = product->Data[18];
 15658  0FE7  0021               	movlb	1	; select bank1
 15659  0FE8  086E               	movf	_product^(0+128),w
 15660  0FE9  0086               	movwf	6
 15661  0FEA  3002               	movlw	2	; select bank4/5
 15662  0FEB  0087               	movwf	7
 15663  0FEC  3002               	movlw	2	; select bank4/5
 15664  0FED  3F52               	moviw [18]fsr1
 15665  0FEE  0023               	movlb	3	; select bank3
 15666  0FEF  00B2               	movwf	(_RF_Data^(0+384)+18)
 15667                           
 15668                           ;RF_Control_B1.c: 220: RF_Data[19] = product->Data[19];
 15669  0FF0  0021               	movlb	1	; select bank1
 15670  0FF1  086E               	movf	_product^(0+128),w
 15671  0FF2  0086               	movwf	6
 15672  0FF3  3002               	movlw	2	; select bank4/5
 15673  0FF4  0087               	movwf	7
 15674  0FF5  3002               	movlw	2	; select bank4/5
 15675  0FF6  3F53               	moviw [19]fsr1
 15676  0FF7  0023               	movlb	3	; select bank3
 15677  0FF8  00B3               	movwf	(_RF_Data^(0+384)+19)
 15678                           
 15679                           ;RF_Control_B1.c: 221: RF_Data[20] = 210;
 15680  0FF9  30D2               	movlw	210
 15681  0FFA  0020               	movlb	0	; select bank0
 15682  0FFB  00A0               	movwf	??_setTxData
 15683  0FFC  0820               	movf	??_setTxData,w
 15684  0FFD  0023               	movlb	3	; select bank3
 15685  0FFE  00B4               	movwf	(_RF_Data^(0+384)+20)
 15686  0FFF  0008               	return
 15687  1000                     __end_of_setTxData:	
 15688                           
 15689                           	psect	text102
 15690  1ADD                     __ptext102:	
 15691 ;; *************** function _setRF_TransceiveGO *****************
 15692 ;; Defined at:
 15693 ;;		line 470 in file "../src/RF_Control_B1.c"
 15694 ;; Parameters:    Size  Location     Type
 15695 ;;  command         1    wreg     unsigned char 
 15696 ;; Auto vars:     Size  Location     Type
 15697 ;;  command         1    1[BANK0 ] unsigned char 
 15698 ;; Return value:  Size  Location     Type
 15699 ;;		None               void
 15700 ;; Registers used:
 15701 ;;		wreg, status,2, status,0
 15702 ;; Tracked objects:
 15703 ;;		On entry : 0/0
 15704 ;;		On exit  : 0/0
 15705 ;;		Unchanged: 0/0
 15706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15708 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15709 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15710 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15711 ;;Total ram usage:        2 bytes
 15712 ;; Hardware stack levels used:    1
 15713 ;; Hardware stack levels required when called:    5
 15714 ;; This function calls:
 15715 ;;		Nothing
 15716 ;; This function is called by:
 15717 ;;		_setDimmerLights_Dimming
 15718 ;; This function uses a non-reentrant model
 15719 ;;
 15720                           
 15721                           
 15722                           ;psect for function _setRF_TransceiveGO
 15723  1ADD                     _setRF_TransceiveGO:	
 15724                           
 15725                           ;incstack = 0
 15726                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 15727                           ;setRF_TransceiveGO@command stored from wreg
 15728  1ADD  0020               	movlb	0	; select bank0
 15729  1ADE  00A1               	movwf	setRF_TransceiveGO@command
 15730                           
 15731                           ;RF_Control_B1.c: 471: RF1.TransceiveGO = command == 1 ? 1 : 0;
 15732  1ADF  0821               	movf	setRF_TransceiveGO@command,w
 15733  1AE0  3A01               	xorlw	1
 15734  1AE1  3000               	movlw	0
 15735  1AE2  1903               	skipnz
 15736  1AE3  3001               	movlw	1
 15737  1AE4  00A0               	movwf	??_setRF_TransceiveGO
 15738  1AE5  0DA0               	rlf	??_setRF_TransceiveGO,f
 15739  1AE6  0DA0               	rlf	??_setRF_TransceiveGO,f
 15740  1AE7  0021               	movlb	1	; select bank1
 15741  1AE8  0820               	movf	_RF1^(0+128),w
 15742  1AE9  0020               	movlb	0	; select bank0
 15743  1AEA  0620               	xorwf	??_setRF_TransceiveGO,w
 15744  1AEB  39FB               	andlw	-5
 15745  1AEC  0620               	xorwf	??_setRF_TransceiveGO,w
 15746  1AED  0021               	movlb	1	; select bank1
 15747  1AEE  00A0               	movwf	_RF1^(0+128)
 15748  1AEF  0008               	return
 15749  1AF0                     __end_of_setRF_TransceiveGO:	
 15750                           
 15751                           	psect	text103
 15752  15EA                     __ptext103:	
 15753 ;; *************** function _setRF_DimmerLights *****************
 15754 ;; Defined at:
 15755 ;;		line 455 in file "../src/RF_Control_B1.c"
 15756 ;; Parameters:    Size  Location     Type
 15757 ;;  lights          1    wreg     unsigned char 
 15758 ;;  on              1   69[BANK0 ] unsigned char 
 15759 ;; Auto vars:     Size  Location     Type
 15760 ;;  lights          1   73[BANK0 ] unsigned char 
 15761 ;;  status          1   72[BANK0 ] unsigned char 
 15762 ;; Return value:  Size  Location     Type
 15763 ;;		None               void
 15764 ;; Registers used:
 15765 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15766 ;; Tracked objects:
 15767 ;;		On entry : 0/0
 15768 ;;		On exit  : 0/0
 15769 ;;		Unchanged: 0/0
 15770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15771 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15772 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15773 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15774 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15775 ;;Total ram usage:        5 bytes
 15776 ;; Hardware stack levels used:    1
 15777 ;; Hardware stack levels required when called:    6
 15778 ;; This function calls:
 15779 ;;		_setProductData
 15780 ;; This function is called by:
 15781 ;;		_setDimmerLights_OnOff
 15782 ;;		_setDimmerLights_Dimming
 15783 ;;		_setRFSW_Control
 15784 ;; This function uses a non-reentrant model
 15785 ;;
 15786                           
 15787                           
 15788                           ;psect for function _setRF_DimmerLights
 15789  15EA                     _setRF_DimmerLights:	
 15790                           
 15791                           ;incstack = 0
 15792                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15793                           ;setRF_DimmerLights@lights stored from wreg
 15794  15EA  0020               	movlb	0	; select bank0
 15795  15EB  00E9               	movwf	setRF_DimmerLights@lights
 15796                           
 15797                           ;RF_Control_B1.c: 456: char status = 1;
 15798  15EC  01E8               	clrf	setRF_DimmerLights@status
 15799  15ED  0AE8               	incf	setRF_DimmerLights@status,f
 15800                           
 15801                           ;RF_Control_B1.c: 457: status <<= (lights - 1);
 15802  15EE  0869               	movf	setRF_DimmerLights@lights,w
 15803  15EF  3EFF               	addlw	-1
 15804  15F0  0A89               	incf	9,f
 15805  15F1  2DF4               	goto	u6250
 15806  15F2                     u6255:	
 15807  15F2  1003               	clrc
 15808  15F3  0DE8               	rlf	setRF_DimmerLights@status,f
 15809  15F4                     u6250:	
 15810  15F4  3EFF               	addlw	-1
 15811  15F5  1D03               	skipz
 15812  15F6  2DF2               	goto	u6255
 15813                           
 15814                           ;RF_Control_B1.c: 458: setProductData(11, lights);
 15815  15F7  0869               	movf	setRF_DimmerLights@lights,w
 15816  15F8  00E6               	movwf	??_setRF_DimmerLights
 15817  15F9  0866               	movf	??_setRF_DimmerLights,w
 15818  15FA  00E2               	movwf	setProductData@value
 15819  15FB  300B               	movlw	11
 15820  15FC  3199  218D  3195   	fcall	_setProductData
 15821                           
 15822                           ;RF_Control_B1.c: 459: setProductData(17, product->Data[26 + lights]);
 15823  15FF  0020               	movlb	0	; select bank0
 15824  1600  0869               	movf	setRF_DimmerLights@lights,w
 15825  1601  3E1A               	addlw	26
 15826  1602  0021               	movlb	1	; select bank1
 15827  1603  076E               	addwf	_product^(0+128),w
 15828  1604  0020               	movlb	0	; select bank0
 15829  1605  00E6               	movwf	??_setRF_DimmerLights
 15830  1606  0866               	movf	??_setRF_DimmerLights,w
 15831  1607  0086               	movwf	6
 15832  1608  3002               	movlw	2	; select bank4/5
 15833  1609  0087               	movwf	7
 15834  160A  0801               	movf	1,w
 15835  160B  00E7               	movwf	??_setRF_DimmerLights+1
 15836  160C  0867               	movf	??_setRF_DimmerLights+1,w
 15837  160D  00E2               	movwf	setProductData@value
 15838  160E  3011               	movlw	17
 15839  160F  3199  218D  3195   	fcall	_setProductData
 15840                           
 15841                           ;RF_Control_B1.c: 460: if (on == 1) {
 15842  1612  0020               	movlb	0	; select bank0
 15843  1613  0865               	movf	setRF_DimmerLights@on,w
 15844  1614  3A01               	xorlw	1
 15845  1615  1D03               	skipz
 15846  1616  2E39               	goto	l6840
 15847                           
 15848                           ;RF_Control_B1.c: 461: setProductData(9, product->Data[20 + lights]);
 15849  1617  0869               	movf	setRF_DimmerLights@lights,w
 15850  1618  3E14               	addlw	20
 15851  1619  0021               	movlb	1	; select bank1
 15852  161A  076E               	addwf	_product^(0+128),w
 15853  161B  0020               	movlb	0	; select bank0
 15854  161C  00E6               	movwf	??_setRF_DimmerLights
 15855  161D  0866               	movf	??_setRF_DimmerLights,w
 15856  161E  0086               	movwf	6
 15857  161F  3002               	movlw	2	; select bank4/5
 15858  1620  0087               	movwf	7
 15859  1621  0801               	movf	1,w
 15860  1622  00E7               	movwf	??_setRF_DimmerLights+1
 15861  1623  0867               	movf	??_setRF_DimmerLights+1,w
 15862  1624  00E2               	movwf	setProductData@value
 15863  1625  3009               	movlw	9
 15864  1626  3199  218D  3195   	fcall	_setProductData
 15865                           
 15866                           ;RF_Control_B1.c: 462: setProductData(15, (product->Data[15] | status));
 15867  1629  0021               	movlb	1	; select bank1
 15868  162A  086E               	movf	_product^(0+128),w
 15869  162B  3E0F               	addlw	15
 15870  162C  0086               	movwf	6
 15871  162D  3002               	movlw	2	; select bank4/5
 15872  162E  0087               	movwf	7
 15873  162F  0801               	movf	1,w
 15874  1630  0020               	movlb	0	; select bank0
 15875  1631  0468               	iorwf	setRF_DimmerLights@status,w
 15876  1632  00E6               	movwf	??_setRF_DimmerLights
 15877  1633  0866               	movf	??_setRF_DimmerLights,w
 15878  1634  00E2               	movwf	setProductData@value
 15879  1635  300F               	movlw	15
 15880  1636  3199  218D         	fcall	_setProductData
 15881                           
 15882                           ;RF_Control_B1.c: 463: } else {
 15883  1638  0008               	return
 15884  1639                     l6840:	
 15885                           
 15886                           ;RF_Control_B1.c: 464: setProductData(9, 0x00);
 15887  1639  0020               	movlb	0	; select bank0
 15888  163A  01E2               	clrf	setProductData@value
 15889  163B  3009               	movlw	9
 15890  163C  3199  218D  3195   	fcall	_setProductData
 15891                           
 15892                           ;RF_Control_B1.c: 465: setProductData(15, (product->Data[15]&(~status)));
 15893  163F  0021               	movlb	1	; select bank1
 15894  1640  086E               	movf	_product^(0+128),w
 15895  1641  3E0F               	addlw	15
 15896  1642  0086               	movwf	6
 15897  1643  3002               	movlw	2	; select bank4/5
 15898  1644  0087               	movwf	7
 15899  1645  0020               	movlb	0	; select bank0
 15900  1646  0968               	comf	setRF_DimmerLights@status,w
 15901  1647  0501               	andwf	1,w
 15902  1648  00E6               	movwf	??_setRF_DimmerLights
 15903  1649  0866               	movf	??_setRF_DimmerLights,w
 15904  164A  00E2               	movwf	setProductData@value
 15905  164B  300F               	movlw	15
 15906  164C  3199  218D         	fcall	_setProductData
 15907  164E  0008               	return
 15908  164F                     __end_of_setRF_DimmerLights:	
 15909                           
 15910                           	psect	text104
 15911  1CE6                     __ptext104:	
 15912 ;; *************** function _setDimmerLights_Line *****************
 15913 ;; Defined at:
 15914 ;;		line 1022 in file "../src/Dimmer_B1.c"
 15915 ;; Parameters:    Size  Location     Type
 15916 ;;  lights          1    wreg     unsigned char 
 15917 ;; Auto vars:     Size  Location     Type
 15918 ;;  lights          1    0[BANK0 ] unsigned char 
 15919 ;; Return value:  Size  Location     Type
 15920 ;;		None               void
 15921 ;; Registers used:
 15922 ;;		wreg
 15923 ;; Tracked objects:
 15924 ;;		On entry : 0/0
 15925 ;;		On exit  : 0/0
 15926 ;;		Unchanged: 0/0
 15927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15929 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15931 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15932 ;;Total ram usage:        1 bytes
 15933 ;; Hardware stack levels used:    1
 15934 ;; Hardware stack levels required when called:    5
 15935 ;; This function calls:
 15936 ;;		Nothing
 15937 ;; This function is called by:
 15938 ;;		_setDimmerLights_OnOff
 15939 ;;		_setDimmerLights_Dimming
 15940 ;; This function uses a non-reentrant model
 15941 ;;
 15942                           
 15943                           
 15944                           ;psect for function _setDimmerLights_Line
 15945  1CE6                     _setDimmerLights_Line:	
 15946                           
 15947                           ;incstack = 0
 15948                           ; Regs used in _setDimmerLights_Line: [wreg]
 15949                           ;setDimmerLights_Line@lights stored from wreg
 15950  1CE6  0020               	movlb	0	; select bank0
 15951  1CE7  00A0               	movwf	setDimmerLights_Line@lights
 15952                           
 15953                           ;Dimmer_B1.c: 1023: Dimmer.LoadGO = 1;
 15954  1CE8  0022               	movlb	2	; select bank2
 15955  1CE9  14AC               	bsf	_Dimmer^(0+256),1
 15956                           
 15957                           ;Dimmer_B1.c: 1025: DimmerLights1.Line = 0;
 15958  1CEA  10E8               	bcf	(_DimmerLights1^(0+256)+1),1
 15959                           
 15960                           ;Dimmer_B1.c: 1026: if (lights == 1 && lights != 0) {
 15961  1CEB  0020               	movlb	0	; select bank0
 15962  1CEC  0820               	movf	setDimmerLights_Line@lights,w
 15963  1CED  3A01               	xorlw	1
 15964  1CEE  1D03               	skipz
 15965  1CEF  2CF5               	goto	l915
 15966  1CF0  0820               	movf	setDimmerLights_Line@lights,w
 15967  1CF1  1903               	btfsc	3,2
 15968  1CF2  2CF5               	goto	l915
 15969                           
 15970                           ;Dimmer_B1.c: 1027: DimmerLights1.Line = 1;
 15971  1CF3  0022               	movlb	2	; select bank2
 15972  1CF4  14E8               	bsf	(_DimmerLights1^(0+256)+1),1
 15973  1CF5                     l915:	
 15974                           
 15975                           ;Dimmer_B1.c: 1028: }
 15976                           ;Dimmer_B1.c: 1031: DimmerLights2.Line = 0;
 15977  1CF5  0023               	movlb	3	; select bank3
 15978  1CF6  10D1               	bcf	(_DimmerLights2^(0+384)+1),1
 15979                           
 15980                           ;Dimmer_B1.c: 1032: if (lights == 2 && lights != 0) {
 15981  1CF7  0020               	movlb	0	; select bank0
 15982  1CF8  0820               	movf	setDimmerLights_Line@lights,w
 15983  1CF9  3A02               	xorlw	2
 15984  1CFA  1D03               	skipz
 15985  1CFB  0008               	return
 15986  1CFC  0820               	movf	setDimmerLights_Line@lights,w
 15987  1CFD  1903               	btfsc	3,2
 15988  1CFE  0008               	return
 15989                           
 15990                           ;Dimmer_B1.c: 1033: DimmerLights2.Line = 1;
 15991  1CFF  0023               	movlb	3	; select bank3
 15992  1D00  14D1               	bsf	(_DimmerLights2^(0+384)+1),1
 15993  1D01  0020               	movlb	0	; select bank0
 15994  1D02  0008               	return
 15995  1D03                     __end_of_setDimmerLights_Line:	
 15996                           
 15997                           	psect	text105
 15998  1BE9                     __ptext105:	
 15999 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 16000 ;; Defined at:
 16001 ;;		line 127 in file "../src/Dimmer_B1.c"
 16002 ;; Parameters:    Size  Location     Type
 16003 ;;  lights          1    wreg     unsigned char 
 16004 ;;  value           1   66[BANK0 ] unsigned char 
 16005 ;; Auto vars:     Size  Location     Type
 16006 ;;  lights          1   68[BANK0 ] unsigned char 
 16007 ;; Return value:  Size  Location     Type
 16008 ;;		None               void
 16009 ;; Registers used:
 16010 ;;		wreg
 16011 ;; Tracked objects:
 16012 ;;		On entry : 0/0
 16013 ;;		On exit  : 0/0
 16014 ;;		Unchanged: 0/0
 16015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16016 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16017 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16018 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16019 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16020 ;;Total ram usage:        3 bytes
 16021 ;; Hardware stack levels used:    1
 16022 ;; Hardware stack levels required when called:    5
 16023 ;; This function calls:
 16024 ;;		Nothing
 16025 ;; This function is called by:
 16026 ;;		_setDimmerLights_OnOff
 16027 ;;		_setDimmerLights_Dimming
 16028 ;;		_setRFSW_AdjControl
 16029 ;; This function uses a non-reentrant model
 16030 ;;
 16031                           
 16032                           
 16033                           ;psect for function _setDimmerIntr_MaxmumValue
 16034  1BE9                     _setDimmerIntr_MaxmumValue:	
 16035                           
 16036                           ;incstack = 0
 16037                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 16038                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 16039  1BE9  0020               	movlb	0	; select bank0
 16040  1BEA  00E4               	movwf	setDimmerIntr_MaxmumValue@lights
 16041                           
 16042                           ;Dimmer_B1.c: 129: if (lights == 1) {
 16043  1BEB  0864               	movf	setDimmerIntr_MaxmumValue@lights,w
 16044  1BEC  3A01               	xorlw	1
 16045  1BED  1D03               	skipz
 16046  1BEE  2BF5               	goto	l6816
 16047                           
 16048                           ;Dimmer_B1.c: 130: DimmerIntr1.MaxmumValue = value;
 16049  1BEF  0862               	movf	setDimmerIntr_MaxmumValue@value,w
 16050  1BF0  00E3               	movwf	??_setDimmerIntr_MaxmumValue
 16051  1BF1  0863               	movf	??_setDimmerIntr_MaxmumValue,w
 16052  1BF2  0021               	movlb	1	; select bank1
 16053  1BF3  00C1               	movwf	(_DimmerIntr1^(0+128)+6)
 16054                           
 16055                           ;Dimmer_B1.c: 131: }
 16056  1BF4  0008               	return
 16057  1BF5                     l6816:	
 16058                           
 16059                           ;Dimmer_B1.c: 134: else if (lights == 2) {
 16060  1BF5  0020               	movlb	0	; select bank0
 16061  1BF6  0864               	movf	setDimmerIntr_MaxmumValue@lights,w
 16062  1BF7  3A02               	xorlw	2
 16063  1BF8  1D03               	skipz
 16064  1BF9  0008               	return
 16065                           
 16066                           ;Dimmer_B1.c: 135: DimmerIntr2.MaxmumValue = value;
 16067  1BFA  0862               	movf	setDimmerIntr_MaxmumValue@value,w
 16068  1BFB  00E3               	movwf	??_setDimmerIntr_MaxmumValue
 16069  1BFC  0863               	movf	??_setDimmerIntr_MaxmumValue,w
 16070  1BFD  0021               	movlb	1	; select bank1
 16071  1BFE  00CD               	movwf	(_DimmerIntr2^(0+128)+6)
 16072  1BFF  0008               	return
 16073  1C00                     __end_of_setDimmerIntr_MaxmumValue:	
 16074                           
 16075                           	psect	text106
 16076  1003                     __ptext106:	
 16077 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 16078 ;; Defined at:
 16079 ;;		line 204 in file "../src/Dimmer_B1.c"
 16080 ;; Parameters:    Size  Location     Type
 16081 ;;  lights          1    wreg     unsigned char 
 16082 ;;  command         1    0[BANK0 ] unsigned char 
 16083 ;; Auto vars:     Size  Location     Type
 16084 ;;  lights          1    2[BANK0 ] unsigned char 
 16085 ;; Return value:  Size  Location     Type
 16086 ;;		None               void
 16087 ;; Registers used:
 16088 ;;		wreg, status,2, status,0
 16089 ;; Tracked objects:
 16090 ;;		On entry : 0/0
 16091 ;;		On exit  : 0/0
 16092 ;;		Unchanged: 0/0
 16093 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16094 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16095 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16096 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16097 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16098 ;;Total ram usage:        3 bytes
 16099 ;; Hardware stack levels used:    1
 16100 ;; Hardware stack levels required when called:    5
 16101 ;; This function calls:
 16102 ;;		Nothing
 16103 ;; This function is called by:
 16104 ;;		_setDimmerLights_Dimming
 16105 ;; This function uses a non-reentrant model
 16106 ;;
 16107                           
 16108                           
 16109                           ;psect for function _setDimmerIntr_Dimming_Sw
 16110  1003                     _setDimmerIntr_Dimming_Sw:	
 16111                           
 16112                           ;incstack = 0
 16113                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 16114                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 16115  1003  0020               	movlb	0	; select bank0
 16116  1004  00A2               	movwf	setDimmerIntr_Dimming_Sw@lights
 16117                           
 16118                           ;Dimmer_B1.c: 206: if (lights == 1) {
 16119  1005  0822               	movf	setDimmerIntr_Dimming_Sw@lights,w
 16120  1006  3A01               	xorlw	1
 16121  1007  1D03               	skipz
 16122  1008  2819               	goto	l7172
 16123                           
 16124                           ;Dimmer_B1.c: 207: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 16125  1009  0820               	movf	setDimmerIntr_Dimming_Sw@command,w
 16126  100A  3A01               	xorlw	1
 16127  100B  3000               	movlw	0
 16128  100C  1903               	skipnz
 16129  100D  3001               	movlw	1
 16130  100E  00A1               	movwf	??_setDimmerIntr_Dimming_Sw
 16131  100F  0EA1               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16132  1010  0021               	movlb	1	; select bank1
 16133  1011  083B               	movf	_DimmerIntr1^(0+128),w
 16134  1012  0020               	movlb	0	; select bank0
 16135  1013  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16136  1014  39EF               	andlw	-17
 16137  1015  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16138  1016  0021               	movlb	1	; select bank1
 16139  1017  00BB               	movwf	_DimmerIntr1^(0+128)
 16140                           
 16141                           ;Dimmer_B1.c: 208: }
 16142  1018  0008               	return
 16143  1019                     l7172:	
 16144                           
 16145                           ;Dimmer_B1.c: 211: else if (lights == 2) {
 16146  1019  0020               	movlb	0	; select bank0
 16147  101A  0822               	movf	setDimmerIntr_Dimming_Sw@lights,w
 16148  101B  3A02               	xorlw	2
 16149  101C  1D03               	skipz
 16150  101D  0008               	return
 16151                           
 16152                           ;Dimmer_B1.c: 212: DimmerIntr2.Dimming_Sw = command == 1 ? 1 : 0;
 16153  101E  0820               	movf	setDimmerIntr_Dimming_Sw@command,w
 16154  101F  3A01               	xorlw	1
 16155  1020  3000               	movlw	0
 16156  1021  1903               	skipnz
 16157  1022  3001               	movlw	1
 16158  1023  00A1               	movwf	??_setDimmerIntr_Dimming_Sw
 16159  1024  0EA1               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16160  1025  0021               	movlb	1	; select bank1
 16161  1026  0847               	movf	_DimmerIntr2^(0+128),w
 16162  1027  0020               	movlb	0	; select bank0
 16163  1028  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16164  1029  39EF               	andlw	-17
 16165  102A  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16166  102B  0021               	movlb	1	; select bank1
 16167  102C  00C7               	movwf	_DimmerIntr2^(0+128)
 16168  102D  0008               	return
 16169  102E                     __end_of_setDimmerIntr_Dimming_Sw:	
 16170                           
 16171                           	psect	text107
 16172  1BA5                     __ptext107:	
 16173 ;; *************** function _getDimmerIntr_DimmingValue *****************
 16174 ;; Defined at:
 16175 ;;		line 105 in file "../src/Dimmer_B1.c"
 16176 ;; Parameters:    Size  Location     Type
 16177 ;;  lights          1    wreg     unsigned char 
 16178 ;; Auto vars:     Size  Location     Type
 16179 ;;  lights          1    2[BANK0 ] unsigned char 
 16180 ;;  value           1    1[BANK0 ] unsigned char 
 16181 ;; Return value:  Size  Location     Type
 16182 ;;                  1    wreg      unsigned char 
 16183 ;; Registers used:
 16184 ;;		wreg, status,2
 16185 ;; Tracked objects:
 16186 ;;		On entry : 0/0
 16187 ;;		On exit  : 0/0
 16188 ;;		Unchanged: 0/0
 16189 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16191 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16192 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16193 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16194 ;;Total ram usage:        3 bytes
 16195 ;; Hardware stack levels used:    1
 16196 ;; Hardware stack levels required when called:    5
 16197 ;; This function calls:
 16198 ;;		Nothing
 16199 ;; This function is called by:
 16200 ;;		_setDimmerLights_Dimming
 16201 ;; This function uses a non-reentrant model
 16202 ;;
 16203                           
 16204                           
 16205                           ;psect for function _getDimmerIntr_DimmingValue
 16206  1BA5                     _getDimmerIntr_DimmingValue:	
 16207                           
 16208                           ;incstack = 0
 16209                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 16210                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 16211  1BA5  0020               	movlb	0	; select bank0
 16212  1BA6  00A2               	movwf	getDimmerIntr_DimmingValue@lights
 16213                           
 16214                           ;Dimmer_B1.c: 106: char value = 0;
 16215  1BA7  01A1               	clrf	getDimmerIntr_DimmingValue@value
 16216                           
 16217                           ;Dimmer_B1.c: 108: if (lights == 1) {
 16218  1BA8  0822               	movf	getDimmerIntr_DimmingValue@lights,w
 16219  1BA9  3A01               	xorlw	1
 16220  1BAA  1D03               	skipz
 16221  1BAB  2BAF               	goto	l7162
 16222                           
 16223                           ;Dimmer_B1.c: 109: value = DimmerIntr1.DimmingValue;
 16224  1BAC  0021               	movlb	1	; select bank1
 16225  1BAD  0840               	movf	(_DimmerIntr1^(0+128)+5),w
 16226  1BAE  2BB5               	goto	L10
 16227  1BAF                     l7162:	
 16228                           ;Dimmer_B1.c: 110: }
 16229                           
 16230                           
 16231                           ;Dimmer_B1.c: 113: else if (lights == 2) {
 16232  1BAF  0822               	movf	getDimmerIntr_DimmingValue@lights,w
 16233  1BB0  3A02               	xorlw	2
 16234  1BB1  1D03               	skipz
 16235  1BB2  2BB9               	goto	l759
 16236                           
 16237                           ;Dimmer_B1.c: 114: value = DimmerIntr2.DimmingValue;
 16238  1BB3  0021               	movlb	1	; select bank1
 16239  1BB4  084C               	movf	(_DimmerIntr2^(0+128)+5),w
 16240  1BB5                     L10:	
 16241  1BB5  0020               	movlb	0	; select bank0
 16242  1BB6  00A0               	movwf	??_getDimmerIntr_DimmingValue
 16243  1BB7  0820               	movf	??_getDimmerIntr_DimmingValue,w
 16244  1BB8  00A1               	movwf	getDimmerIntr_DimmingValue@value
 16245  1BB9                     l759:	
 16246                           
 16247                           ;Dimmer_B1.c: 115: }
 16248                           ;Dimmer_B1.c: 122: return value;
 16249  1BB9  0821               	movf	getDimmerIntr_DimmingValue@value,w
 16250  1BBA  0008               	return
 16251  1BBB                     __end_of_getDimmerIntr_DimmingValue:	
 16252                           
 16253                           	psect	text108
 16254  1180                     __ptext108:	
 16255 ;; *************** function _getDimmerLights_Allow_Condition *****************
 16256 ;; Defined at:
 16257 ;;		line 983 in file "../src/Dimmer_B1.c"
 16258 ;; Parameters:    Size  Location     Type
 16259 ;;  lights          1    wreg     unsigned char 
 16260 ;; Auto vars:     Size  Location     Type
 16261 ;;  lights          1    5[BANK0 ] unsigned char 
 16262 ;;  allow           1    6[BANK0 ] unsigned char 
 16263 ;; Return value:  Size  Location     Type
 16264 ;;                  1    wreg      unsigned char 
 16265 ;; Registers used:
 16266 ;;		wreg, status,2, status,0, pclath, cstack
 16267 ;; Tracked objects:
 16268 ;;		On entry : 0/0
 16269 ;;		On exit  : 0/0
 16270 ;;		Unchanged: 0/0
 16271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16273 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16274 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16275 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16276 ;;Total ram usage:        6 bytes
 16277 ;; Hardware stack levels used:    1
 16278 ;; Hardware stack levels required when called:    6
 16279 ;; This function calls:
 16280 ;;		_getLoad_OK
 16281 ;; This function is called by:
 16282 ;;		_setDimmerLights_Main
 16283 ;; This function uses a non-reentrant model
 16284 ;;
 16285                           
 16286                           
 16287                           ;psect for function _getDimmerLights_Allow_Condition
 16288  1180                     _getDimmerLights_Allow_Condition:	
 16289                           
 16290                           ;incstack = 0
 16291                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+status,0+pclath+cstack]
 16292                           ;getDimmerLights_Allow_Condition@lights stored from wreg
 16293  1180  0020               	movlb	0	; select bank0
 16294  1181  00A5               	movwf	getDimmerLights_Allow_Condition@lights
 16295                           
 16296                           ;Dimmer_B1.c: 984: char allow = 0;
 16297  1182  01A6               	clrf	getDimmerLights_Allow_Condition@allow
 16298                           
 16299                           ;Dimmer_B1.c: 990: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 16300  1183  01A2               	clrf	_getDimmerLights_Allow_Condition$2416
 16301  1184  0AA2               	incf	_getDimmerLights_Allow_Condition$2416,f
 16302  1185  3199  211B  3191   	fcall	_getLoad_OK
 16303  1188  3800               	iorlw	0
 16304  1189  1D03               	skipz
 16305  118A  2990               	goto	l7484
 16306  118B  0022               	movlb	2	; select bank2
 16307  118C  18AC               	btfsc	_Dimmer^(0+256),1
 16308  118D  2990               	goto	l7484
 16309  118E  0020               	movlb	0	; select bank0
 16310  118F  01A2               	clrf	_getDimmerLights_Allow_Condition$2416
 16311  1190                     l7484:	
 16312  1190  0020               	movlb	0	; select bank0
 16313  1191  0822               	movf	_getDimmerLights_Allow_Condition$2416,w
 16314  1192  00A1               	movwf	??_getDimmerLights_Allow_Condition
 16315  1193  0821               	movf	??_getDimmerLights_Allow_Condition,w
 16316  1194  00A6               	movwf	getDimmerLights_Allow_Condition@allow
 16317                           
 16318                           ;Dimmer_B1.c: 994: if (allow == 0) {
 16319  1195  08A6               	movf	getDimmerLights_Allow_Condition@allow,f
 16320  1196  1D03               	skipz
 16321  1197  29BC               	goto	l7508
 16322                           
 16323                           ;Dimmer_B1.c: 995: if (lights == 1) {
 16324  1198  0825               	movf	getDimmerLights_Allow_Condition@lights,w
 16325  1199  3A01               	xorlw	1
 16326  119A  1D03               	skipz
 16327  119B  29A9               	goto	l7498
 16328                           
 16329                           ;Dimmer_B1.c: 996: allow = DimmerLights2.DimmingTrigger == 1 || DimmerIntr2.Dimming_Sw =
      +                          = 1 ? 1 : 0;
 16330  119C  01A3               	clrf	_getDimmerLights_Allow_Condition$2417
 16331  119D  0AA3               	incf	_getDimmerLights_Allow_Condition$2417,f
 16332  119E  0023               	movlb	3	; select bank3
 16333  119F  1A50               	btfsc	_DimmerLights2^(0+384),4
 16334  11A0  29A6               	goto	l7496
 16335  11A1  0021               	movlb	1	; select bank1
 16336  11A2  1A47               	btfsc	_DimmerIntr2^(0+128),4
 16337  11A3  29A6               	goto	l7496
 16338  11A4  0020               	movlb	0	; select bank0
 16339  11A5  01A3               	clrf	_getDimmerLights_Allow_Condition$2417
 16340  11A6                     l7496:	
 16341  11A6  0020               	movlb	0	; select bank0
 16342  11A7  0823               	movf	_getDimmerLights_Allow_Condition$2417,w
 16343  11A8  29B9               	goto	L11
 16344  11A9                     l7498:	
 16345                           ;Dimmer_B1.c: 997: } else if (lights == 2) {
 16346                           
 16347  11A9  0825               	movf	getDimmerLights_Allow_Condition@lights,w
 16348  11AA  3A02               	xorlw	2
 16349  11AB  1D03               	skipz
 16350  11AC  29BC               	goto	l7508
 16351                           
 16352                           ;Dimmer_B1.c: 998: allow = DimmerLights1.DimmingTrigger == 1 || DimmerIntr1.Dimming_Sw =
      +                          = 1 ? 1 : 0;
 16353  11AD  01A4               	clrf	_getDimmerLights_Allow_Condition$2418
 16354  11AE  0AA4               	incf	_getDimmerLights_Allow_Condition$2418,f
 16355  11AF  0022               	movlb	2	; select bank2
 16356  11B0  1A67               	btfsc	_DimmerLights1^(0+256),4
 16357  11B1  29B7               	goto	l7506
 16358  11B2  0021               	movlb	1	; select bank1
 16359  11B3  1A3B               	btfsc	_DimmerIntr1^(0+128),4
 16360  11B4  29B7               	goto	l7506
 16361  11B5  0020               	movlb	0	; select bank0
 16362  11B6  01A4               	clrf	_getDimmerLights_Allow_Condition$2418
 16363  11B7                     l7506:	
 16364  11B7  0020               	movlb	0	; select bank0
 16365  11B8  0824               	movf	_getDimmerLights_Allow_Condition$2418,w
 16366  11B9                     L11:	
 16367  11B9  00A1               	movwf	??_getDimmerLights_Allow_Condition
 16368  11BA  0821               	movf	??_getDimmerLights_Allow_Condition,w
 16369  11BB  00A6               	movwf	getDimmerLights_Allow_Condition@allow
 16370  11BC                     l7508:	
 16371                           
 16372                           ;Dimmer_B1.c: 999: }
 16373                           ;Dimmer_B1.c: 1000: }
 16374                           ;Dimmer_B1.c: 1017: return allow;
 16375  11BC  0826               	movf	getDimmerLights_Allow_Condition@allow,w
 16376  11BD  0008               	return
 16377  11BE                     __end_of_getDimmerLights_Allow_Condition:	
 16378                           
 16379                           	psect	text109
 16380  191B                     __ptext109:	
 16381 ;; *************** function _getLoad_OK *****************
 16382 ;; Defined at:
 16383 ;;		line 272 in file "../src/OverLoad_B1.c"
 16384 ;; Parameters:    Size  Location     Type
 16385 ;;		None
 16386 ;; Auto vars:     Size  Location     Type
 16387 ;;  ok              1    0[BANK0 ] unsigned char 
 16388 ;; Return value:  Size  Location     Type
 16389 ;;                  1    wreg      unsigned char 
 16390 ;; Registers used:
 16391 ;;		wreg, status,2
 16392 ;; Tracked objects:
 16393 ;;		On entry : 0/0
 16394 ;;		On exit  : 0/0
 16395 ;;		Unchanged: 0/0
 16396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16398 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16400 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16401 ;;Total ram usage:        1 bytes
 16402 ;; Hardware stack levels used:    1
 16403 ;; Hardware stack levels required when called:    5
 16404 ;; This function calls:
 16405 ;;		Nothing
 16406 ;; This function is called by:
 16407 ;;		_DimmerLights_Main
 16408 ;;		_getDimmerLights_Allow_Condition
 16409 ;; This function uses a non-reentrant model
 16410 ;;
 16411                           
 16412                           
 16413                           ;psect for function _getLoad_OK
 16414  191B                     _getLoad_OK:	
 16415                           
 16416                           ;OverLoad_B1.c: 273: char ok = Load.OK == 1 ? 1 : 0;
 16417                           
 16418                           ;incstack = 0
 16419                           ; Regs used in _getLoad_OK: [wreg+status,2]
 16420  191B  3000               	movlw	0
 16421  191C  0022               	movlb	2	; select bank2
 16422  191D  1BBF               	btfsc	_Load^(0+256),7
 16423  191E  3001               	movlw	1
 16424  191F  0020               	movlb	0	; select bank0
 16425  1920  00A0               	movwf	getLoad_OK@ok
 16426                           
 16427                           ;OverLoad_B1.c: 274: return ok;
 16428  1921  0820               	movf	getLoad_OK@ok,w
 16429  1922  0008               	return
 16430  1923                     __end_of_getLoad_OK:	
 16431                           
 16432                           	psect	text110
 16433  102E                     __ptext110:	
 16434 ;; *************** function _getMain_All_Error_Status *****************
 16435 ;; Defined at:
 16436 ;;		line 424 in file "../src/main_B1.c"
 16437 ;; Parameters:    Size  Location     Type
 16438 ;;  command         1    wreg     unsigned char 
 16439 ;; Auto vars:     Size  Location     Type
 16440 ;;  command         1    5[BANK0 ] unsigned char 
 16441 ;;  status          1    6[BANK0 ] unsigned char 
 16442 ;; Return value:  Size  Location     Type
 16443 ;;                  1    wreg      unsigned char 
 16444 ;; Registers used:
 16445 ;;		wreg, status,2, status,0
 16446 ;; Tracked objects:
 16447 ;;		On entry : 0/0
 16448 ;;		On exit  : 0/0
 16449 ;;		Unchanged: 0/0
 16450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16452 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16453 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16454 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16455 ;;Total ram usage:        7 bytes
 16456 ;; Hardware stack levels used:    1
 16457 ;; Hardware stack levels required when called:    5
 16458 ;; This function calls:
 16459 ;;		Nothing
 16460 ;; This function is called by:
 16461 ;;		_DimmerLights_Main
 16462 ;;		_Load_Main
 16463 ;;		_setTemp_Main
 16464 ;;		_getRxData
 16465 ;;		_setSw_Main
 16466 ;;		_Exception_Main
 16467 ;; This function uses a non-reentrant model
 16468 ;;
 16469                           
 16470                           
 16471                           ;psect for function _getMain_All_Error_Status
 16472  102E                     _getMain_All_Error_Status:	
 16473                           
 16474                           ;incstack = 0
 16475                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 16476                           ;getMain_All_Error_Status@command stored from wreg
 16477  102E  0020               	movlb	0	; select bank0
 16478  102F  00A5               	movwf	getMain_All_Error_Status@command
 16479                           
 16480                           ;main_B1.c: 425: char status = 0;
 16481  1030  01A6               	clrf	getMain_All_Error_Status@status
 16482                           
 16483                           ;main_B1.c: 436: if (status == 0 && command != 2) {
 16484  1031  08A6               	movf	getMain_All_Error_Status@status,f
 16485  1032  1D03               	skipz
 16486  1033  2848               	goto	l7194
 16487  1034  0825               	movf	getMain_All_Error_Status@command,w
 16488  1035  3A02               	xorlw	2
 16489  1036  1903               	skipnz
 16490  1037  2848               	goto	l7194
 16491                           
 16492                           ;main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
 16493  1038  0021               	movlb	1	; select bank1
 16494  1039  18DC               	btfsc	_Temp^(0+128),1
 16495  103A  283F               	goto	l7192
 16496  103B  0020               	movlb	0	; select bank0
 16497  103C  01A1               	clrf	_getMain_All_Error_Status$6910
 16498  103D  01A2               	clrf	_getMain_All_Error_Status$6910+1
 16499  103E  2844               	goto	l2882
 16500  103F                     l7192:	
 16501  103F  3002               	movlw	2
 16502  1040  0020               	movlb	0	; select bank0
 16503  1041  00A1               	movwf	_getMain_All_Error_Status$6910
 16504  1042  3000               	movlw	0
 16505  1043  00A2               	movwf	_getMain_All_Error_Status$6910+1
 16506  1044                     l2882:	
 16507  1044  0821               	movf	_getMain_All_Error_Status$6910,w
 16508  1045  00A0               	movwf	??_getMain_All_Error_Status
 16509  1046  0820               	movf	??_getMain_All_Error_Status,w
 16510  1047  00A6               	movwf	getMain_All_Error_Status@status
 16511  1048                     l7194:	
 16512                           
 16513                           ;main_B1.c: 438: }
 16514                           ;main_B1.c: 443: if (status == 0 && command != 3) {
 16515  1048  08A6               	movf	getMain_All_Error_Status@status,f
 16516  1049  1D03               	skipz
 16517  104A  285F               	goto	l2883
 16518  104B  0825               	movf	getMain_All_Error_Status@command,w
 16519  104C  3A03               	xorlw	3
 16520  104D  1903               	skipnz
 16521  104E  285F               	goto	l2883
 16522                           
 16523                           ;main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
 16524  104F  0022               	movlb	2	; select bank2
 16525  1050  1ABF               	btfsc	_Load^(0+256),5
 16526  1051  2856               	goto	l7202
 16527  1052  0020               	movlb	0	; select bank0
 16528  1053  01A3               	clrf	_getMain_All_Error_Status$6911
 16529  1054  01A4               	clrf	_getMain_All_Error_Status$6911+1
 16530  1055  285B               	goto	l2887
 16531  1056                     l7202:	
 16532  1056  3003               	movlw	3
 16533  1057  0020               	movlb	0	; select bank0
 16534  1058  00A3               	movwf	_getMain_All_Error_Status$6911
 16535  1059  3000               	movlw	0
 16536  105A  00A4               	movwf	_getMain_All_Error_Status$6911+1
 16537  105B                     l2887:	
 16538  105B  0823               	movf	_getMain_All_Error_Status$6911,w
 16539  105C  00A0               	movwf	??_getMain_All_Error_Status
 16540  105D  0820               	movf	??_getMain_All_Error_Status,w
 16541  105E  00A6               	movwf	getMain_All_Error_Status@status
 16542  105F                     l2883:	
 16543                           
 16544                           ;main_B1.c: 445: }
 16545                           ;main_B1.c: 455: return status;
 16546  105F  0826               	movf	getMain_All_Error_Status@status,w
 16547  1060  0008               	return
 16548  1061                     __end_of_getMain_All_Error_Status:	
 16549                           
 16550                           	psect	text111
 16551  1955                     __ptext111:	
 16552 ;; *************** function _DimmerLights_Initialization *****************
 16553 ;; Defined at:
 16554 ;;		line 635 in file "../src/Dimmer_B1.c"
 16555 ;; Parameters:    Size  Location     Type
 16556 ;;		None
 16557 ;; Auto vars:     Size  Location     Type
 16558 ;;		None
 16559 ;; Return value:  Size  Location     Type
 16560 ;;		None               void
 16561 ;; Registers used:
 16562 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16563 ;; Tracked objects:
 16564 ;;		On entry : 0/0
 16565 ;;		On exit  : 0/0
 16566 ;;		Unchanged: 0/0
 16567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16570 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16571 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16572 ;;Total ram usage:        0 bytes
 16573 ;; Hardware stack levels used:    1
 16574 ;; Hardware stack levels required when called:    9
 16575 ;; This function calls:
 16576 ;;		_DimmerIntr_Initialization
 16577 ;;		_setDimmerLights_Initialization
 16578 ;; This function is called by:
 16579 ;;		_main
 16580 ;; This function uses a non-reentrant model
 16581 ;;
 16582                           
 16583                           
 16584                           ;psect for function _DimmerLights_Initialization
 16585  1955                     _DimmerLights_Initialization:	
 16586                           
 16587                           ;Dimmer_B1.c: 637: setDimmerLights_Initialization(1);
 16588                           
 16589                           ;incstack = 0
 16590                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 16591  1955  3001               	movlw	1
 16592  1956  3198  20C9  3199   	fcall	_setDimmerLights_Initialization
 16593                           
 16594                           ;Dimmer_B1.c: 641: setDimmerLights_Initialization(2);
 16595  1959  3002               	movlw	2
 16596  195A  3198  20C9  3199   	fcall	_setDimmerLights_Initialization
 16597                           
 16598                           ;Dimmer_B1.c: 647: DimmerIntr_Initialization();
 16599  195D  3188  205C         	fcall	_DimmerIntr_Initialization
 16600  195F  0008               	return
 16601  1960                     __end_of_DimmerLights_Initialization:	
 16602                           
 16603                           	psect	text112
 16604  18C9                     __ptext112:	
 16605 ;; *************** function _setDimmerLights_Initialization *****************
 16606 ;; Defined at:
 16607 ;;		line 651 in file "../src/Dimmer_B1.c"
 16608 ;; Parameters:    Size  Location     Type
 16609 ;;  lights          1    wreg     unsigned char 
 16610 ;; Auto vars:     Size  Location     Type
 16611 ;;  lights          1    0[COMMON] unsigned char 
 16612 ;; Return value:  Size  Location     Type
 16613 ;;		None               void
 16614 ;; Registers used:
 16615 ;;		wreg
 16616 ;; Tracked objects:
 16617 ;;		On entry : 0/0
 16618 ;;		On exit  : 0/0
 16619 ;;		Unchanged: 0/0
 16620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16624 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16625 ;;Total ram usage:        0 bytes
 16626 ;; Hardware stack levels used:    1
 16627 ;; Hardware stack levels required when called:    5
 16628 ;; This function calls:
 16629 ;;		Nothing
 16630 ;; This function is called by:
 16631 ;;		_DimmerLights_Initialization
 16632 ;; This function uses a non-reentrant model
 16633 ;;
 16634                           
 16635                           
 16636                           ;psect for function _setDimmerLights_Initialization
 16637  18C9                     _setDimmerLights_Initialization:	
 16638                           
 16639                           ;incstack = 0
 16640                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 16641  18C9  0008               	return
 16642  18CA                     __end_of_setDimmerLights_Initialization:	
 16643                           
 16644                           	psect	text113
 16645  085C                     __ptext113:	
 16646 ;; *************** function _DimmerIntr_Initialization *****************
 16647 ;; Defined at:
 16648 ;;		line 7 in file "../src/Dimmer_B1.c"
 16649 ;; Parameters:    Size  Location     Type
 16650 ;;		None
 16651 ;; Auto vars:     Size  Location     Type
 16652 ;;		None
 16653 ;; Return value:  Size  Location     Type
 16654 ;;		None               void
 16655 ;; Registers used:
 16656 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16657 ;; Tracked objects:
 16658 ;;		On entry : 0/0
 16659 ;;		On exit  : 0/0
 16660 ;;		Unchanged: 0/0
 16661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16664 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16665 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16666 ;;Total ram usage:        1 bytes
 16667 ;; Hardware stack levels used:    1
 16668 ;; Hardware stack levels required when called:    8
 16669 ;; This function calls:
 16670 ;;		_getDimmerLights_PercentToValue
 16671 ;;		_getDimmerLights_ValueToPercent
 16672 ;;		_setMemory_Modify
 16673 ;; This function is called by:
 16674 ;;		_DimmerLights_Initialization
 16675 ;; This function uses a non-reentrant model
 16676 ;;
 16677                           
 16678                           
 16679                           ;psect for function _DimmerIntr_Initialization
 16680  085C                     _DimmerIntr_Initialization:	
 16681                           
 16682                           ;Dimmer_B1.c: 10: DimmerIntr1.TuneTimeValue = 7;
 16683                           
 16684                           ;incstack = 0
 16685                           ; Regs used in _DimmerIntr_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 16686  085C  3007               	movlw	7
 16687  085D  0020               	movlb	0	; select bank0
 16688  085E  00E2               	movwf	??_DimmerIntr_Initialization
 16689  085F  0862               	movf	??_DimmerIntr_Initialization,w
 16690  0860  0021               	movlb	1	; select bank1
 16691  0861  00BF               	movwf	(_DimmerIntr1^(0+128)+4)
 16692                           
 16693                           ;Dimmer_B1.c: 11: DimmerIntr1.MaxmumValue = ((char)(75*0.55));
 16694  0862  3029               	movlw	41
 16695  0863  0020               	movlb	0	; select bank0
 16696  0864  00E2               	movwf	??_DimmerIntr_Initialization
 16697  0865  0862               	movf	??_DimmerIntr_Initialization,w
 16698  0866  0021               	movlb	1	; select bank1
 16699  0867  00C1               	movwf	(_DimmerIntr1^(0+128)+6)
 16700                           
 16701                           ;Dimmer_B1.c: 12: DimmerIntr1.MinimumValue = ((char)(5*0.55));
 16702  0868  3002               	movlw	2
 16703  0869  0020               	movlb	0	; select bank0
 16704  086A  00E2               	movwf	??_DimmerIntr_Initialization
 16705  086B  0862               	movf	??_DimmerIntr_Initialization,w
 16706  086C  0021               	movlb	1	; select bank1
 16707  086D  00C2               	movwf	(_DimmerIntr1^(0+128)+7)
 16708                           
 16709                           ;Dimmer_B1.c: 16: if (myMain.InitDimmer == 1) {
 16710  086E  1E38               	btfss	(_myMain^(0+128)+10),4
 16711  086F  2880               	goto	l7842
 16712                           
 16713                           ;Dimmer_B1.c: 17: product->Data[21] = getDimmerLights_ValueToPercent(((char)(75*0.55)));
 16714  0870  3029               	movlw	41
 16715  0871  3195  2585  3188   	fcall	_getDimmerLights_ValueToPercent
 16716  0874  0020               	movlb	0	; select bank0
 16717  0875  00E2               	movwf	??_DimmerIntr_Initialization
 16718  0876  0021               	movlb	1	; select bank1
 16719  0877  086E               	movf	_product^(0+128),w
 16720  0878  3E15               	addlw	21
 16721  0879  0086               	movwf	6
 16722  087A  3002               	movlw	2	; select bank4/5
 16723  087B  0087               	movwf	7
 16724  087C  0020               	movlb	0	; select bank0
 16725  087D  0862               	movf	??_DimmerIntr_Initialization,w
 16726  087E  0081               	movwf	1
 16727                           
 16728                           ;Dimmer_B1.c: 18: } else {
 16729  087F  288F               	goto	l7844
 16730  0880                     l7842:	
 16731                           
 16732                           ;Dimmer_B1.c: 19: DimmerIntr1.DimmingValue = getDimmerLights_PercentToValue(product->Dat
      +                          a[21]);
 16733  0880  0021               	movlb	1	; select bank1
 16734  0881  086E               	movf	_product^(0+128),w
 16735  0882  3E15               	addlw	21
 16736  0883  0086               	movwf	6
 16737  0884  3002               	movlw	2	; select bank4/5
 16738  0885  0087               	movwf	7
 16739  0886  0801               	movf	1,w
 16740  0887  3195  2520  3188   	fcall	_getDimmerLights_PercentToValue
 16741  088A  0020               	movlb	0	; select bank0
 16742  088B  00E2               	movwf	??_DimmerIntr_Initialization
 16743  088C  0862               	movf	??_DimmerIntr_Initialization,w
 16744  088D  0021               	movlb	1	; select bank1
 16745  088E  00C0               	movwf	(_DimmerIntr1^(0+128)+5)
 16746  088F                     l7844:	
 16747                           
 16748                           ;Dimmer_B1.c: 20: }
 16749                           ;Dimmer_B1.c: 32: DimmerIntr2.TuneTimeValue = 7;
 16750  088F  3007               	movlw	7
 16751  0890  0020               	movlb	0	; select bank0
 16752  0891  00E2               	movwf	??_DimmerIntr_Initialization
 16753  0892  0862               	movf	??_DimmerIntr_Initialization,w
 16754  0893  0021               	movlb	1	; select bank1
 16755  0894  00CB               	movwf	(_DimmerIntr2^(0+128)+4)
 16756                           
 16757                           ;Dimmer_B1.c: 33: DimmerIntr2.MaxmumValue = ((char)(75*0.55));
 16758  0895  3029               	movlw	41
 16759  0896  0020               	movlb	0	; select bank0
 16760  0897  00E2               	movwf	??_DimmerIntr_Initialization
 16761  0898  0862               	movf	??_DimmerIntr_Initialization,w
 16762  0899  0021               	movlb	1	; select bank1
 16763  089A  00CD               	movwf	(_DimmerIntr2^(0+128)+6)
 16764                           
 16765                           ;Dimmer_B1.c: 34: DimmerIntr2.MinimumValue = ((char)(5*0.55));
 16766  089B  3002               	movlw	2
 16767  089C  0020               	movlb	0	; select bank0
 16768  089D  00E2               	movwf	??_DimmerIntr_Initialization
 16769  089E  0862               	movf	??_DimmerIntr_Initialization,w
 16770  089F  0021               	movlb	1	; select bank1
 16771  08A0  00CE               	movwf	(_DimmerIntr2^(0+128)+7)
 16772                           
 16773                           ;Dimmer_B1.c: 36: if (myMain.InitDimmer == 1) {
 16774  08A1  1E38               	btfss	(_myMain^(0+128)+10),4
 16775  08A2  28B3               	goto	l7854
 16776                           
 16777                           ;Dimmer_B1.c: 37: product->Data[22] = getDimmerLights_ValueToPercent(((char)(75*0.55)));
 16778  08A3  3029               	movlw	41
 16779  08A4  3195  2585  3188   	fcall	_getDimmerLights_ValueToPercent
 16780  08A7  0020               	movlb	0	; select bank0
 16781  08A8  00E2               	movwf	??_DimmerIntr_Initialization
 16782  08A9  0021               	movlb	1	; select bank1
 16783  08AA  086E               	movf	_product^(0+128),w
 16784  08AB  3E16               	addlw	22
 16785  08AC  0086               	movwf	6
 16786  08AD  3002               	movlw	2	; select bank4/5
 16787  08AE  0087               	movwf	7
 16788  08AF  0020               	movlb	0	; select bank0
 16789  08B0  0862               	movf	??_DimmerIntr_Initialization,w
 16790  08B1  0081               	movwf	1
 16791                           
 16792                           ;Dimmer_B1.c: 38: } else {
 16793  08B2  28C2               	goto	l7856
 16794  08B3                     l7854:	
 16795                           
 16796                           ;Dimmer_B1.c: 39: DimmerIntr2.DimmingValue = getDimmerLights_PercentToValue(product->Dat
      +                          a[22]);
 16797  08B3  0021               	movlb	1	; select bank1
 16798  08B4  086E               	movf	_product^(0+128),w
 16799  08B5  3E16               	addlw	22
 16800  08B6  0086               	movwf	6
 16801  08B7  3002               	movlw	2	; select bank4/5
 16802  08B8  0087               	movwf	7
 16803  08B9  0801               	movf	1,w
 16804  08BA  3195  2520  3188   	fcall	_getDimmerLights_PercentToValue
 16805  08BD  0020               	movlb	0	; select bank0
 16806  08BE  00E2               	movwf	??_DimmerIntr_Initialization
 16807  08BF  0862               	movf	??_DimmerIntr_Initialization,w
 16808  08C0  0021               	movlb	1	; select bank1
 16809  08C1  00CC               	movwf	(_DimmerIntr2^(0+128)+5)
 16810  08C2                     l7856:	
 16811                           
 16812                           ;Dimmer_B1.c: 40: }
 16813                           ;Dimmer_B1.c: 61: if (myMain.InitDimmer == 1) {
 16814  08C2  0021               	movlb	1	; select bank1
 16815  08C3  1E38               	btfss	(_myMain^(0+128)+10),4
 16816  08C4  0008               	return
 16817                           
 16818                           ;Dimmer_B1.c: 62: myMain.InitDimmer = 0;
 16819  08C5  1238               	bcf	(_myMain^(0+128)+10),4
 16820                           
 16821                           ;Dimmer_B1.c: 63: myMain.SaveDimmer = 1;
 16822  08C6  16B8               	bsf	(_myMain^(0+128)+10),5
 16823                           
 16824                           ;Dimmer_B1.c: 64: setMemory_Modify(1);
 16825  08C7  3001               	movlw	1
 16826  08C8  319A  22CA         	fcall	_setMemory_Modify
 16827  08CA  0008               	return
 16828  08CB                     __end_of_DimmerIntr_Initialization:	
 16829                           
 16830                           	psect	text114
 16831  1ACA                     __ptext114:	
 16832 ;; *************** function _setMemory_Modify *****************
 16833 ;; Defined at:
 16834 ;;		line 1083 in file "../src/MCU_B1.c"
 16835 ;; Parameters:    Size  Location     Type
 16836 ;;  command         1    wreg     unsigned char 
 16837 ;; Auto vars:     Size  Location     Type
 16838 ;;  command         1    1[BANK0 ] unsigned char 
 16839 ;; Return value:  Size  Location     Type
 16840 ;;		None               void
 16841 ;; Registers used:
 16842 ;;		wreg, status,2, status,0
 16843 ;; Tracked objects:
 16844 ;;		On entry : 0/0
 16845 ;;		On exit  : 0/0
 16846 ;;		Unchanged: 0/0
 16847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16849 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16850 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16851 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16852 ;;Total ram usage:        2 bytes
 16853 ;; Hardware stack levels used:    1
 16854 ;; Hardware stack levels required when called:    5
 16855 ;; This function calls:
 16856 ;;		Nothing
 16857 ;; This function is called by:
 16858 ;;		_DimmerIntr_Initialization
 16859 ;;		_setDimmerLights_Dimming
 16860 ;;		_setLog_Code
 16861 ;;		_setRFSW_AdjControl
 16862 ;; This function uses a non-reentrant model
 16863 ;;
 16864                           
 16865                           
 16866                           ;psect for function _setMemory_Modify
 16867  1ACA                     _setMemory_Modify:	
 16868                           
 16869                           ;incstack = 0
 16870                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
 16871                           ;setMemory_Modify@command stored from wreg
 16872  1ACA  0020               	movlb	0	; select bank0
 16873  1ACB  00A1               	movwf	setMemory_Modify@command
 16874                           
 16875                           ;MCU_B1.c: 1084: Memory.Modify = command == 1 ? 1 : 0;
 16876  1ACC  0821               	movf	setMemory_Modify@command,w
 16877  1ACD  3A01               	xorlw	1
 16878  1ACE  3000               	movlw	0
 16879  1ACF  1903               	skipnz
 16880  1AD0  3001               	movlw	1
 16881  1AD1  00A0               	movwf	??_setMemory_Modify
 16882  1AD2  0024               	movlb	4	; select bank4
 16883  1AD3  0844               	movf	(_Memory^(0+512)+36),w
 16884  1AD4  0020               	movlb	0	; select bank0
 16885  1AD5  0620               	xorwf	??_setMemory_Modify,w
 16886  1AD6  39FE               	andlw	-2
 16887  1AD7  0620               	xorwf	??_setMemory_Modify,w
 16888  1AD8  0024               	movlb	4	; select bank4
 16889  1AD9  00C4               	movwf	(_Memory^(0+512)+36)
 16890                           
 16891                           ;MCU_B1.c: 1085: Memory.Time = 0;
 16892  1ADA  01C2               	clrf	(_Memory^(0+512)+34)
 16893  1ADB  01C3               	clrf	((_Memory+1)^(0+512)+34)
 16894  1ADC  0008               	return
 16895  1ADD                     __end_of_setMemory_Modify:	
 16896                           
 16897                           	psect	text115
 16898  1585                     __ptext115:	
 16899 ;; *************** function _getDimmerLights_ValueToPercent *****************
 16900 ;; Defined at:
 16901 ;;		line 1122 in file "../src/Dimmer_B1.c"
 16902 ;; Parameters:    Size  Location     Type
 16903 ;;  value           1    wreg     unsigned char 
 16904 ;; Auto vars:     Size  Location     Type
 16905 ;;  value           1   62[BANK0 ] unsigned char 
 16906 ;;  i               3   63[BANK0 ] float 
 16907 ;; Return value:  Size  Location     Type
 16908 ;;                  1    wreg      unsigned char 
 16909 ;; Registers used:
 16910 ;;		wreg, status,2, status,0, pclath, cstack
 16911 ;; Tracked objects:
 16912 ;;		On entry : 0/0
 16913 ;;		On exit  : 0/0
 16914 ;;		Unchanged: 0/0
 16915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16917 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16918 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16919 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16920 ;;Total ram usage:        6 bytes
 16921 ;; Hardware stack levels used:    1
 16922 ;; Hardware stack levels required when called:    7
 16923 ;; This function calls:
 16924 ;;		___awtoft
 16925 ;;		___ftadd
 16926 ;;		___ftdiv
 16927 ;;		___ftneg
 16928 ;;		___fttol
 16929 ;; This function is called by:
 16930 ;;		_DimmerIntr_Initialization
 16931 ;;		_setDimmerLights_Dimming
 16932 ;; This function uses a non-reentrant model
 16933 ;;
 16934                           
 16935                           
 16936                           ;psect for function _getDimmerLights_ValueToPercent
 16937  1585                     _getDimmerLights_ValueToPercent:	
 16938                           
 16939                           ;incstack = 0
 16940                           ; Regs used in _getDimmerLights_ValueToPercent: [wreg+status,2+status,0+pclath+cstack]
 16941                           ;getDimmerLights_ValueToPercent@value stored from wreg
 16942  1585  0020               	movlb	0	; select bank0
 16943  1586  00DE               	movwf	getDimmerLights_ValueToPercent@value
 16944                           
 16945                           ;Dimmer_B1.c: 1130: float i = ((char)(75*0.55)) - ((char)(5*0.55));
 16946  1587  3000               	movlw	0
 16947  1588  00DF               	movwf	getDimmerLights_ValueToPercent@i
 16948  1589  301C               	movlw	28
 16949  158A  00E0               	movwf	getDimmerLights_ValueToPercent@i+1
 16950  158B  3042               	movlw	66
 16951  158C  00E1               	movwf	getDimmerLights_ValueToPercent@i+2
 16952                           
 16953                           ;Dimmer_B1.c: 1131: i /= 100;
 16954  158D  3000               	movlw	0
 16955  158E  00AE               	movwf	___ftdiv@f2
 16956  158F  30C8               	movlw	200
 16957  1590  00AF               	movwf	___ftdiv@f2+1
 16958  1591  3042               	movlw	66
 16959  1592  00B0               	movwf	___ftdiv@f2+2
 16960  1593  085F               	movf	getDimmerLights_ValueToPercent@i,w
 16961  1594  00B1               	movwf	___ftdiv@f1
 16962  1595  0860               	movf	getDimmerLights_ValueToPercent@i+1,w
 16963  1596  00B2               	movwf	___ftdiv@f1+1
 16964  1597  0861               	movf	getDimmerLights_ValueToPercent@i+2,w
 16965  1598  00B3               	movwf	___ftdiv@f1+2
 16966  1599  318D  2537  3195   	fcall	___ftdiv
 16967  159C  0020               	movlb	0	; select bank0
 16968  159D  082E               	movf	?___ftdiv,w
 16969  159E  00DF               	movwf	getDimmerLights_ValueToPercent@i
 16970  159F  082F               	movf	?___ftdiv+1,w
 16971  15A0  00E0               	movwf	getDimmerLights_ValueToPercent@i+1
 16972  15A1  0830               	movf	?___ftdiv+2,w
 16973  15A2  00E1               	movwf	getDimmerLights_ValueToPercent@i+2
 16974                           
 16975                           ;Dimmer_B1.c: 1133: return (char) (100 - ((((char)(75*0.55)) - value) / i));
 16976  15A3  085E               	movf	getDimmerLights_ValueToPercent@value,w
 16977  15A4  00DC               	movwf	??_getDimmerLights_ValueToPercent
 16978  15A5  01DD               	clrf	??_getDimmerLights_ValueToPercent+1
 16979  15A6  09DC               	comf	??_getDimmerLights_ValueToPercent,f
 16980  15A7  09DD               	comf	??_getDimmerLights_ValueToPercent+1,f
 16981  15A8  0ADC               	incf	??_getDimmerLights_ValueToPercent,f
 16982  15A9  1903               	skipnz
 16983  15AA  0ADD               	incf	??_getDimmerLights_ValueToPercent+1,f
 16984  15AB  085C               	movf	??_getDimmerLights_ValueToPercent,w
 16985  15AC  3E29               	addlw	41
 16986  15AD  00A8               	movwf	___awtoft@c
 16987  15AE  3000               	movlw	0
 16988  15AF  3D5D               	addwfc	??_getDimmerLights_ValueToPercent+1,w
 16989  15B0  00A9               	movwf	___awtoft@c+1
 16990  15B1  319E  2660  3195   	fcall	___awtoft
 16991  15B4  0020               	movlb	0	; select bank0
 16992  15B5  0828               	movf	?___awtoft,w
 16993  15B6  00B1               	movwf	___ftdiv@f1
 16994  15B7  0829               	movf	?___awtoft+1,w
 16995  15B8  00B2               	movwf	___ftdiv@f1+1
 16996  15B9  082A               	movf	?___awtoft+2,w
 16997  15BA  00B3               	movwf	___ftdiv@f1+2
 16998  15BB  085F               	movf	getDimmerLights_ValueToPercent@i,w
 16999  15BC  00AE               	movwf	___ftdiv@f2
 17000  15BD  0860               	movf	getDimmerLights_ValueToPercent@i+1,w
 17001  15BE  00AF               	movwf	___ftdiv@f2+1
 17002  15BF  0861               	movf	getDimmerLights_ValueToPercent@i+2,w
 17003  15C0  00B0               	movwf	___ftdiv@f2+2
 17004  15C1  318D  2537  3195   	fcall	___ftdiv
 17005  15C4  0020               	movlb	0	; select bank0
 17006  15C5  082E               	movf	?___ftdiv,w
 17007  15C6  00BE               	movwf	___ftneg@f1
 17008  15C7  082F               	movf	?___ftdiv+1,w
 17009  15C8  00BF               	movwf	___ftneg@f1+1
 17010  15C9  0830               	movf	?___ftdiv+2,w
 17011  15CA  00C0               	movwf	___ftneg@f1+2
 17012  15CB  3199  2143  3195   	fcall	___ftneg
 17013  15CE  0020               	movlb	0	; select bank0
 17014  15CF  083E               	movf	?___ftneg,w
 17015  15D0  00C4               	movwf	___ftadd@f2
 17016  15D1  083F               	movf	?___ftneg+1,w
 17017  15D2  00C5               	movwf	___ftadd@f2+1
 17018  15D3  0840               	movf	?___ftneg+2,w
 17019  15D4  00C6               	movwf	___ftadd@f2+2
 17020  15D5  3000               	movlw	0
 17021  15D6  00C1               	movwf	___ftadd@f1
 17022  15D7  30C8               	movlw	200
 17023  15D8  00C2               	movwf	___ftadd@f1+1
 17024  15D9  3042               	movlw	66
 17025  15DA  00C3               	movwf	___ftadd@f1+2
 17026  15DB  3183  2389  3195   	fcall	___ftadd
 17027  15DE  0020               	movlb	0	; select bank0
 17028  15DF  0841               	movf	?___ftadd,w
 17029  15E0  00CE               	movwf	___fttol@f1
 17030  15E1  0842               	movf	?___ftadd+1,w
 17031  15E2  00CF               	movwf	___fttol@f1+1
 17032  15E3  0843               	movf	?___ftadd+2,w
 17033  15E4  00D0               	movwf	___fttol@f1+2
 17034  15E5  318B  2395         	fcall	___fttol
 17035  15E7  0020               	movlb	0	; select bank0
 17036  15E8  084E               	movf	?___fttol,w
 17037  15E9  0008               	return
 17038  15EA                     __end_of_getDimmerLights_ValueToPercent:	
 17039                           
 17040                           	psect	text116
 17041  1520                     __ptext116:	
 17042 ;; *************** function _getDimmerLights_PercentToValue *****************
 17043 ;; Defined at:
 17044 ;;		line 1106 in file "../src/Dimmer_B1.c"
 17045 ;; Parameters:    Size  Location     Type
 17046 ;;  value           1    wreg     unsigned char 
 17047 ;; Auto vars:     Size  Location     Type
 17048 ;;  value           1   62[BANK0 ] unsigned char 
 17049 ;;  i               3   63[BANK0 ] float 
 17050 ;; Return value:  Size  Location     Type
 17051 ;;                  1    wreg      unsigned char 
 17052 ;; Registers used:
 17053 ;;		wreg, status,2, status,0, pclath, cstack
 17054 ;; Tracked objects:
 17055 ;;		On entry : 0/0
 17056 ;;		On exit  : 0/0
 17057 ;;		Unchanged: 0/0
 17058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17060 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17061 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17062 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17063 ;;Total ram usage:        6 bytes
 17064 ;; Hardware stack levels used:    1
 17065 ;; Hardware stack levels required when called:    7
 17066 ;; This function calls:
 17067 ;;		___awtoft
 17068 ;;		___ftadd
 17069 ;;		___ftdiv
 17070 ;;		___ftmul
 17071 ;;		___ftneg
 17072 ;;		___fttol
 17073 ;; This function is called by:
 17074 ;;		_DimmerIntr_Initialization
 17075 ;;		_setDimmerLights_OnOff
 17076 ;;		_setRFSW_AdjControl
 17077 ;; This function uses a non-reentrant model
 17078 ;;
 17079                           
 17080                           
 17081                           ;psect for function _getDimmerLights_PercentToValue
 17082  1520                     _getDimmerLights_PercentToValue:	
 17083                           
 17084                           ;incstack = 0
 17085                           ; Regs used in _getDimmerLights_PercentToValue: [wreg+status,2+status,0+pclath+cstack]
 17086                           ;getDimmerLights_PercentToValue@value stored from wreg
 17087  1520  0020               	movlb	0	; select bank0
 17088  1521  00DE               	movwf	getDimmerLights_PercentToValue@value
 17089                           
 17090                           ;Dimmer_B1.c: 1114: float i = ((char)(75*0.55)) - ((char)(5*0.55));
 17091  1522  3000               	movlw	0
 17092  1523  00DF               	movwf	getDimmerLights_PercentToValue@i
 17093  1524  301C               	movlw	28
 17094  1525  00E0               	movwf	getDimmerLights_PercentToValue@i+1
 17095  1526  3042               	movlw	66
 17096  1527  00E1               	movwf	getDimmerLights_PercentToValue@i+2
 17097                           
 17098                           ;Dimmer_B1.c: 1115: i /= 100;
 17099  1528  3000               	movlw	0
 17100  1529  00AE               	movwf	___ftdiv@f2
 17101  152A  30C8               	movlw	200
 17102  152B  00AF               	movwf	___ftdiv@f2+1
 17103  152C  3042               	movlw	66
 17104  152D  00B0               	movwf	___ftdiv@f2+2
 17105  152E  085F               	movf	getDimmerLights_PercentToValue@i,w
 17106  152F  00B1               	movwf	___ftdiv@f1
 17107  1530  0860               	movf	getDimmerLights_PercentToValue@i+1,w
 17108  1531  00B2               	movwf	___ftdiv@f1+1
 17109  1532  0861               	movf	getDimmerLights_PercentToValue@i+2,w
 17110  1533  00B3               	movwf	___ftdiv@f1+2
 17111  1534  318D  2537  3195   	fcall	___ftdiv
 17112  1537  0020               	movlb	0	; select bank0
 17113  1538  082E               	movf	?___ftdiv,w
 17114  1539  00DF               	movwf	getDimmerLights_PercentToValue@i
 17115  153A  082F               	movf	?___ftdiv+1,w
 17116  153B  00E0               	movwf	getDimmerLights_PercentToValue@i+1
 17117  153C  0830               	movf	?___ftdiv+2,w
 17118  153D  00E1               	movwf	getDimmerLights_PercentToValue@i+2
 17119                           
 17120                           ;Dimmer_B1.c: 1117: return (char) (((char)(75*0.55)) - ((100 - value) * i));
 17121  153E  085E               	movf	getDimmerLights_PercentToValue@value,w
 17122  153F  00DC               	movwf	??_getDimmerLights_PercentToValue
 17123  1540  01DD               	clrf	??_getDimmerLights_PercentToValue+1
 17124  1541  09DC               	comf	??_getDimmerLights_PercentToValue,f
 17125  1542  09DD               	comf	??_getDimmerLights_PercentToValue+1,f
 17126  1543  0ADC               	incf	??_getDimmerLights_PercentToValue,f
 17127  1544  1903               	skipnz
 17128  1545  0ADD               	incf	??_getDimmerLights_PercentToValue+1,f
 17129  1546  085C               	movf	??_getDimmerLights_PercentToValue,w
 17130  1547  3E64               	addlw	100
 17131  1548  00A8               	movwf	___awtoft@c
 17132  1549  3000               	movlw	0
 17133  154A  3D5D               	addwfc	??_getDimmerLights_PercentToValue+1,w
 17134  154B  00A9               	movwf	___awtoft@c+1
 17135  154C  319E  2660  3195   	fcall	___awtoft
 17136  154F  0020               	movlb	0	; select bank0
 17137  1550  0828               	movf	?___awtoft,w
 17138  1551  00B1               	movwf	___ftmul@f2
 17139  1552  0829               	movf	?___awtoft+1,w
 17140  1553  00B2               	movwf	___ftmul@f2+1
 17141  1554  082A               	movf	?___awtoft+2,w
 17142  1555  00B3               	movwf	___ftmul@f2+2
 17143  1556  085F               	movf	getDimmerLights_PercentToValue@i,w
 17144  1557  00AE               	movwf	___ftmul@f1
 17145  1558  0860               	movf	getDimmerLights_PercentToValue@i+1,w
 17146  1559  00AF               	movwf	___ftmul@f1+1
 17147  155A  0861               	movf	getDimmerLights_PercentToValue@i+2,w
 17148  155B  00B0               	movwf	___ftmul@f1+2
 17149  155C  318E  2691  3195   	fcall	___ftmul
 17150  155F  0020               	movlb	0	; select bank0
 17151  1560  082E               	movf	?___ftmul,w
 17152  1561  00BE               	movwf	___ftneg@f1
 17153  1562  082F               	movf	?___ftmul+1,w
 17154  1563  00BF               	movwf	___ftneg@f1+1
 17155  1564  0830               	movf	?___ftmul+2,w
 17156  1565  00C0               	movwf	___ftneg@f1+2
 17157  1566  3199  2143  3195   	fcall	___ftneg
 17158  1569  0020               	movlb	0	; select bank0
 17159  156A  083E               	movf	?___ftneg,w
 17160  156B  00C4               	movwf	___ftadd@f2
 17161  156C  083F               	movf	?___ftneg+1,w
 17162  156D  00C5               	movwf	___ftadd@f2+1
 17163  156E  0840               	movf	?___ftneg+2,w
 17164  156F  00C6               	movwf	___ftadd@f2+2
 17165  1570  3000               	movlw	0
 17166  1571  00C1               	movwf	___ftadd@f1
 17167  1572  3024               	movlw	36
 17168  1573  00C2               	movwf	___ftadd@f1+1
 17169  1574  3042               	movlw	66
 17170  1575  00C3               	movwf	___ftadd@f1+2
 17171  1576  3183  2389  3195   	fcall	___ftadd
 17172  1579  0020               	movlb	0	; select bank0
 17173  157A  0841               	movf	?___ftadd,w
 17174  157B  00CE               	movwf	___fttol@f1
 17175  157C  0842               	movf	?___ftadd+1,w
 17176  157D  00CF               	movwf	___fttol@f1+1
 17177  157E  0843               	movf	?___ftadd+2,w
 17178  157F  00D0               	movwf	___fttol@f1+2
 17179  1580  318B  2395         	fcall	___fttol
 17180  1582  0020               	movlb	0	; select bank0
 17181  1583  084E               	movf	?___fttol,w
 17182  1584  0008               	return
 17183  1585                     __end_of_getDimmerLights_PercentToValue:	
 17184                           
 17185                           	psect	text117
 17186  0B95                     __ptext117:	
 17187 ;; *************** function ___fttol *****************
 17188 ;; Defined at:
 17189 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 17190 ;; Parameters:    Size  Location     Type
 17191 ;;  f1              3   46[BANK0 ] float 
 17192 ;; Auto vars:     Size  Location     Type
 17193 ;;  lval            4   55[BANK0 ] unsigned long 
 17194 ;;  exp1            1   59[BANK0 ] unsigned char 
 17195 ;;  sign1           1   54[BANK0 ] unsigned char 
 17196 ;; Return value:  Size  Location     Type
 17197 ;;                  4   46[BANK0 ] long 
 17198 ;; Registers used:
 17199 ;;		wreg, status,2, status,0
 17200 ;; Tracked objects:
 17201 ;;		On entry : 0/0
 17202 ;;		On exit  : 0/0
 17203 ;;		Unchanged: 0/0
 17204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17205 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17206 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17207 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17208 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17209 ;;Total ram usage:       14 bytes
 17210 ;; Hardware stack levels used:    1
 17211 ;; Hardware stack levels required when called:    5
 17212 ;; This function calls:
 17213 ;;		Nothing
 17214 ;; This function is called by:
 17215 ;;		_getDimmerLights_PercentToValue
 17216 ;;		_getDimmerLights_ValueToPercent
 17217 ;; This function uses a non-reentrant model
 17218 ;;
 17219                           
 17220                           
 17221                           ;psect for function ___fttol
 17222  0B95                     ___fttol:	
 17223                           
 17224                           ;incstack = 0
 17225                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 17226  0B95  0020               	movlb	0	; select bank0
 17227  0B96  084E               	movf	___fttol@f1,w
 17228  0B97  00D2               	movwf	??___fttol
 17229  0B98  084F               	movf	___fttol@f1+1,w
 17230  0B99  00D3               	movwf	??___fttol+1
 17231  0B9A  0850               	movf	___fttol@f1+2,w
 17232  0B9B  00D4               	movwf	??___fttol+2
 17233  0B9C  1003               	clrc
 17234  0B9D  0D53               	rlf	??___fttol+1,w
 17235  0B9E  0D54               	rlf	??___fttol+2,w
 17236  0B9F  00D5               	movwf	??___fttol+3
 17237  0BA0  0855               	movf	??___fttol+3,w
 17238  0BA1  00DB               	movwf	___fttol@exp1
 17239  0BA2  08DB               	movf	___fttol@exp1,f
 17240  0BA3  1D03               	skipz
 17241  0BA4  2BAE               	goto	l6642
 17242  0BA5  3000               	movlw	0
 17243  0BA6  00D1               	movwf	?___fttol+3
 17244  0BA7  3000               	movlw	0
 17245  0BA8  00D0               	movwf	?___fttol+2
 17246  0BA9  3000               	movlw	0
 17247  0BAA  00CF               	movwf	?___fttol+1
 17248  0BAB  3000               	movlw	0
 17249  0BAC  00CE               	movwf	?___fttol
 17250  0BAD  0008               	return
 17251  0BAE                     l6642:	
 17252  0BAE  084E               	movf	___fttol@f1,w
 17253  0BAF  00D2               	movwf	??___fttol
 17254  0BB0  084F               	movf	___fttol@f1+1,w
 17255  0BB1  00D3               	movwf	??___fttol+1
 17256  0BB2  0850               	movf	___fttol@f1+2,w
 17257  0BB3  00D4               	movwf	??___fttol+2
 17258  0BB4  3017               	movlw	23
 17259  0BB5                     u5905:	
 17260  0BB5  36D4               	lsrf	??___fttol+2,f
 17261  0BB6  0CD3               	rrf	??___fttol+1,f
 17262  0BB7  0CD2               	rrf	??___fttol,f
 17263  0BB8  0B89               	decfsz	9,f
 17264  0BB9  2BB5               	goto	u5905
 17265  0BBA  0852               	movf	??___fttol,w
 17266  0BBB  00D5               	movwf	??___fttol+3
 17267  0BBC  0855               	movf	??___fttol+3,w
 17268  0BBD  00D6               	movwf	___fttol@sign1
 17269  0BBE  17CF               	bsf	___fttol@f1+1,7
 17270  0BBF  30FF               	movlw	255
 17271  0BC0  05CE               	andwf	___fttol@f1,f
 17272  0BC1  30FF               	movlw	255
 17273  0BC2  05CF               	andwf	___fttol@f1+1,f
 17274  0BC3  3000               	movlw	0
 17275  0BC4  05D0               	andwf	___fttol@f1+2,f
 17276  0BC5  084E               	movf	___fttol@f1,w
 17277  0BC6  00D7               	movwf	___fttol@lval
 17278  0BC7  084F               	movf	___fttol@f1+1,w
 17279  0BC8  00D8               	movwf	___fttol@lval+1
 17280  0BC9  0850               	movf	___fttol@f1+2,w
 17281  0BCA  00D9               	movwf	___fttol@lval+2
 17282  0BCB  01DA               	clrf	___fttol@lval+3
 17283  0BCC  308E               	movlw	142
 17284  0BCD  02DB               	subwf	___fttol@exp1,f
 17285  0BCE  1FDB               	btfss	___fttol@exp1,7
 17286  0BCF  2BEC               	goto	l6662
 17287  0BD0  085B               	movf	___fttol@exp1,w
 17288  0BD1  3A80               	xorlw	128
 17289  0BD2  3E8F               	addlw	143
 17290  0BD3  1803               	skipnc
 17291  0BD4  2BDE               	goto	l6660
 17292  0BD5  3000               	movlw	0
 17293  0BD6  00D1               	movwf	?___fttol+3
 17294  0BD7  3000               	movlw	0
 17295  0BD8  00D0               	movwf	?___fttol+2
 17296  0BD9  3000               	movlw	0
 17297  0BDA  00CF               	movwf	?___fttol+1
 17298  0BDB  3000               	movlw	0
 17299  0BDC  00CE               	movwf	?___fttol
 17300  0BDD  0008               	return
 17301  0BDE                     l6660:	
 17302  0BDE  3001               	movlw	1
 17303  0BDF                     u5935:	
 17304  0BDF  36DA               	lsrf	___fttol@lval+3,f
 17305  0BE0  0CD9               	rrf	___fttol@lval+2,f
 17306  0BE1  0CD8               	rrf	___fttol@lval+1,f
 17307  0BE2  0CD7               	rrf	___fttol@lval,f
 17308  0BE3  0B89               	decfsz	9,f
 17309  0BE4  2BDF               	goto	u5935
 17310  0BE5  3001               	movlw	1
 17311  0BE6  00D2               	movwf	??___fttol
 17312  0BE7  0852               	movf	??___fttol,w
 17313  0BE8  07DB               	addwf	___fttol@exp1,f
 17314  0BE9  1903               	btfsc	3,2
 17315  0BEA  2C05               	goto	l6672
 17316  0BEB  2BDE               	goto	l6660
 17317  0BEC                     l6662:	
 17318  0BEC  3018               	movlw	24
 17319  0BED  025B               	subwf	___fttol@exp1,w
 17320  0BEE  1C03               	skipc
 17321  0BEF  2C02               	goto	l6670
 17322  0BF0  3000               	movlw	0
 17323  0BF1  00D1               	movwf	?___fttol+3
 17324  0BF2  3000               	movlw	0
 17325  0BF3  00D0               	movwf	?___fttol+2
 17326  0BF4  3000               	movlw	0
 17327  0BF5  00CF               	movwf	?___fttol+1
 17328  0BF6  3000               	movlw	0
 17329  0BF7  00CE               	movwf	?___fttol
 17330  0BF8  0008               	return
 17331  0BF9                     l6668:	
 17332  0BF9  3001               	movlw	1
 17333  0BFA                     u5965:	
 17334  0BFA  35D7               	lslf	___fttol@lval,f
 17335  0BFB  0DD8               	rlf	___fttol@lval+1,f
 17336  0BFC  0DD9               	rlf	___fttol@lval+2,f
 17337  0BFD  0DDA               	rlf	___fttol@lval+3,f
 17338  0BFE  0B89               	decfsz	9,f
 17339  0BFF  2BFA               	goto	u5965
 17340  0C00  3001               	movlw	1
 17341  0C01  02DB               	subwf	___fttol@exp1,f
 17342  0C02                     l6670:	
 17343  0C02  08DB               	movf	___fttol@exp1,f
 17344  0C03  1D03               	skipz
 17345  0C04  2BF9               	goto	l6668
 17346  0C05                     l6672:	
 17347  0C05  0856               	movf	___fttol@sign1,w
 17348  0C06  1903               	btfsc	3,2
 17349  0C07  2C13               	goto	l6676
 17350  0C08  09D7               	comf	___fttol@lval,f
 17351  0C09  09D8               	comf	___fttol@lval+1,f
 17352  0C0A  09D9               	comf	___fttol@lval+2,f
 17353  0C0B  09DA               	comf	___fttol@lval+3,f
 17354  0C0C  0AD7               	incf	___fttol@lval,f
 17355  0C0D  1903               	skipnz
 17356  0C0E  0AD8               	incf	___fttol@lval+1,f
 17357  0C0F  1903               	skipnz
 17358  0C10  0AD9               	incf	___fttol@lval+2,f
 17359  0C11  1903               	skipnz
 17360  0C12  0ADA               	incf	___fttol@lval+3,f
 17361  0C13                     l6676:	
 17362  0C13  085A               	movf	___fttol@lval+3,w
 17363  0C14  00D1               	movwf	?___fttol+3
 17364  0C15  0859               	movf	___fttol@lval+2,w
 17365  0C16  00D0               	movwf	?___fttol+2
 17366  0C17  0858               	movf	___fttol@lval+1,w
 17367  0C18  00CF               	movwf	?___fttol+1
 17368  0C19  0857               	movf	___fttol@lval,w
 17369  0C1A  00CE               	movwf	?___fttol
 17370  0C1B  0008               	return
 17371  0C1C                     __end_of___fttol:	
 17372                           
 17373                           	psect	text118
 17374  1943                     __ptext118:	
 17375 ;; *************** function ___ftneg *****************
 17376 ;; Defined at:
 17377 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 17378 ;; Parameters:    Size  Location     Type
 17379 ;;  f1              3   30[BANK0 ] float 
 17380 ;; Auto vars:     Size  Location     Type
 17381 ;;		None
 17382 ;; Return value:  Size  Location     Type
 17383 ;;                  3   30[BANK0 ] float 
 17384 ;; Registers used:
 17385 ;;		wreg
 17386 ;; Tracked objects:
 17387 ;;		On entry : 0/0
 17388 ;;		On exit  : 0/0
 17389 ;;		Unchanged: 0/0
 17390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17391 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17392 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17393 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17394 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17395 ;;Total ram usage:        3 bytes
 17396 ;; Hardware stack levels used:    1
 17397 ;; Hardware stack levels required when called:    5
 17398 ;; This function calls:
 17399 ;;		Nothing
 17400 ;; This function is called by:
 17401 ;;		_getDimmerLights_PercentToValue
 17402 ;;		_getDimmerLights_ValueToPercent
 17403 ;; This function uses a non-reentrant model
 17404 ;;
 17405                           
 17406                           
 17407                           ;psect for function ___ftneg
 17408  1943                     ___ftneg:	
 17409                           
 17410                           ;incstack = 0
 17411                           ; Regs used in ___ftneg: [wreg]
 17412  1943  0020               	movlb	0	; select bank0
 17413  1944  0840               	movf	___ftneg@f1+2,w
 17414  1945  043F               	iorwf	___ftneg@f1+1,w
 17415  1946  043E               	iorwf	___ftneg@f1,w
 17416  1947  1903               	skipnz
 17417  1948  0008               	return
 17418  1949  3080               	movlw	128
 17419  194A  06C0               	xorwf	___ftneg@f1+2,f
 17420  194B  0008               	return
 17421  194C                     __end_of___ftneg:	
 17422                           
 17423                           	psect	text119
 17424  0E91                     __ptext119:	
 17425 ;; *************** function ___ftmul *****************
 17426 ;; Defined at:
 17427 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 17428 ;; Parameters:    Size  Location     Type
 17429 ;;  f1              3   14[BANK0 ] float 
 17430 ;;  f2              3   17[BANK0 ] float 
 17431 ;; Auto vars:     Size  Location     Type
 17432 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
 17433 ;;  sign            1   29[BANK0 ] unsigned char 
 17434 ;;  cntr            1   28[BANK0 ] unsigned char 
 17435 ;;  exp             1   24[BANK0 ] unsigned char 
 17436 ;; Return value:  Size  Location     Type
 17437 ;;                  3   14[BANK0 ] float 
 17438 ;; Registers used:
 17439 ;;		wreg, status,2, status,0, pclath, cstack
 17440 ;; Tracked objects:
 17441 ;;		On entry : 0/0
 17442 ;;		On exit  : 0/0
 17443 ;;		Unchanged: 0/0
 17444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17445 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17446 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17447 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17448 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17449 ;;Total ram usage:       16 bytes
 17450 ;; Hardware stack levels used:    1
 17451 ;; Hardware stack levels required when called:    6
 17452 ;; This function calls:
 17453 ;;		___ftpack
 17454 ;; This function is called by:
 17455 ;;		_getDimmerLights_PercentToValue
 17456 ;; This function uses a non-reentrant model
 17457 ;;
 17458                           
 17459                           
 17460                           ;psect for function ___ftmul
 17461  0E91                     ___ftmul:	
 17462                           
 17463                           ;incstack = 0
 17464                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 17465  0E91  0020               	movlb	0	; select bank0
 17466  0E92  082E               	movf	___ftmul@f1,w
 17467  0E93  00B4               	movwf	??___ftmul
 17468  0E94  082F               	movf	___ftmul@f1+1,w
 17469  0E95  00B5               	movwf	??___ftmul+1
 17470  0E96  0830               	movf	___ftmul@f1+2,w
 17471  0E97  00B6               	movwf	??___ftmul+2
 17472  0E98  1003               	clrc
 17473  0E99  0D35               	rlf	??___ftmul+1,w
 17474  0E9A  0D36               	rlf	??___ftmul+2,w
 17475  0E9B  00B7               	movwf	??___ftmul+3
 17476  0E9C  0837               	movf	??___ftmul+3,w
 17477  0E9D  00B8               	movwf	___ftmul@exp
 17478  0E9E  08B8               	movf	___ftmul@exp,f
 17479  0E9F  1D03               	skipz
 17480  0EA0  2EA8               	goto	l6584
 17481  0EA1  3000               	movlw	0
 17482  0EA2  00AE               	movwf	?___ftmul
 17483  0EA3  3000               	movlw	0
 17484  0EA4  00AF               	movwf	?___ftmul+1
 17485  0EA5  3000               	movlw	0
 17486  0EA6  00B0               	movwf	?___ftmul+2
 17487  0EA7  0008               	return
 17488  0EA8                     l6584:	
 17489  0EA8  0831               	movf	___ftmul@f2,w
 17490  0EA9  00B4               	movwf	??___ftmul
 17491  0EAA  0832               	movf	___ftmul@f2+1,w
 17492  0EAB  00B5               	movwf	??___ftmul+1
 17493  0EAC  0833               	movf	___ftmul@f2+2,w
 17494  0EAD  00B6               	movwf	??___ftmul+2
 17495  0EAE  1003               	clrc
 17496  0EAF  0D35               	rlf	??___ftmul+1,w
 17497  0EB0  0D36               	rlf	??___ftmul+2,w
 17498  0EB1  00B7               	movwf	??___ftmul+3
 17499  0EB2  0837               	movf	??___ftmul+3,w
 17500  0EB3  00BD               	movwf	___ftmul@sign
 17501  0EB4  08BD               	movf	___ftmul@sign,f
 17502  0EB5  1D03               	skipz
 17503  0EB6  2EBE               	goto	l6590
 17504  0EB7  3000               	movlw	0
 17505  0EB8  00AE               	movwf	?___ftmul
 17506  0EB9  3000               	movlw	0
 17507  0EBA  00AF               	movwf	?___ftmul+1
 17508  0EBB  3000               	movlw	0
 17509  0EBC  00B0               	movwf	?___ftmul+2
 17510  0EBD  0008               	return
 17511  0EBE                     l6590:	
 17512  0EBE  083D               	movf	___ftmul@sign,w
 17513  0EBF  3E7B               	addlw	123
 17514  0EC0  00B4               	movwf	??___ftmul
 17515  0EC1  0834               	movf	??___ftmul,w
 17516  0EC2  07B8               	addwf	___ftmul@exp,f
 17517  0EC3  082E               	movf	___ftmul@f1,w
 17518  0EC4  00B4               	movwf	??___ftmul
 17519  0EC5  082F               	movf	___ftmul@f1+1,w
 17520  0EC6  00B5               	movwf	??___ftmul+1
 17521  0EC7  0830               	movf	___ftmul@f1+2,w
 17522  0EC8  00B6               	movwf	??___ftmul+2
 17523  0EC9  3010               	movlw	16
 17524  0ECA                     u5785:	
 17525  0ECA  36B6               	lsrf	??___ftmul+2,f
 17526  0ECB  0CB5               	rrf	??___ftmul+1,f
 17527  0ECC  0CB4               	rrf	??___ftmul,f
 17528  0ECD  0B89               	decfsz	9,f
 17529  0ECE  2ECA               	goto	u5785
 17530  0ECF  0834               	movf	??___ftmul,w
 17531  0ED0  00B7               	movwf	??___ftmul+3
 17532  0ED1  0837               	movf	??___ftmul+3,w
 17533  0ED2  00BD               	movwf	___ftmul@sign
 17534  0ED3  0831               	movf	___ftmul@f2,w
 17535  0ED4  00B4               	movwf	??___ftmul
 17536  0ED5  0832               	movf	___ftmul@f2+1,w
 17537  0ED6  00B5               	movwf	??___ftmul+1
 17538  0ED7  0833               	movf	___ftmul@f2+2,w
 17539  0ED8  00B6               	movwf	??___ftmul+2
 17540  0ED9  3010               	movlw	16
 17541  0EDA                     u5795:	
 17542  0EDA  36B6               	lsrf	??___ftmul+2,f
 17543  0EDB  0CB5               	rrf	??___ftmul+1,f
 17544  0EDC  0CB4               	rrf	??___ftmul,f
 17545  0EDD  0B89               	decfsz	9,f
 17546  0EDE  2EDA               	goto	u5795
 17547  0EDF  0834               	movf	??___ftmul,w
 17548  0EE0  00B7               	movwf	??___ftmul+3
 17549  0EE1  0837               	movf	??___ftmul+3,w
 17550  0EE2  06BD               	xorwf	___ftmul@sign,f
 17551  0EE3  3080               	movlw	128
 17552  0EE4  00B4               	movwf	??___ftmul
 17553  0EE5  0834               	movf	??___ftmul,w
 17554  0EE6  05BD               	andwf	___ftmul@sign,f
 17555  0EE7  17AF               	bsf	___ftmul@f1+1,7
 17556  0EE8  17B2               	bsf	___ftmul@f2+1,7
 17557  0EE9  30FF               	movlw	255
 17558  0EEA  05B1               	andwf	___ftmul@f2,f
 17559  0EEB  30FF               	movlw	255
 17560  0EEC  05B2               	andwf	___ftmul@f2+1,f
 17561  0EED  3000               	movlw	0
 17562  0EEE  05B3               	andwf	___ftmul@f2+2,f
 17563  0EEF  3000               	movlw	0
 17564  0EF0  00B9               	movwf	___ftmul@f3_as_product
 17565  0EF1  3000               	movlw	0
 17566  0EF2  00BA               	movwf	___ftmul@f3_as_product+1
 17567  0EF3  3000               	movlw	0
 17568  0EF4  00BB               	movwf	___ftmul@f3_as_product+2
 17569  0EF5  3007               	movlw	7
 17570  0EF6  00B4               	movwf	??___ftmul
 17571  0EF7  0834               	movf	??___ftmul,w
 17572  0EF8  00BC               	movwf	___ftmul@cntr
 17573  0EF9                     l6602:	
 17574  0EF9  1C2E               	btfss	___ftmul@f1,0
 17575  0EFA  2F01               	goto	l6606
 17576  0EFB  0831               	movf	___ftmul@f2,w
 17577  0EFC  07B9               	addwf	___ftmul@f3_as_product,f
 17578  0EFD  0832               	movf	___ftmul@f2+1,w
 17579  0EFE  3DBA               	addwfc	___ftmul@f3_as_product+1,f
 17580  0EFF  0833               	movf	___ftmul@f2+2,w
 17581  0F00  3DBB               	addwfc	___ftmul@f3_as_product+2,f
 17582  0F01                     l6606:	
 17583  0F01  3001               	movlw	1
 17584  0F02                     u5815:	
 17585  0F02  36B0               	lsrf	___ftmul@f1+2,f
 17586  0F03  0CAF               	rrf	___ftmul@f1+1,f
 17587  0F04  0CAE               	rrf	___ftmul@f1,f
 17588  0F05  0B89               	decfsz	9,f
 17589  0F06  2F02               	goto	u5815
 17590  0F07  3001               	movlw	1
 17591  0F08                     u5825:	
 17592  0F08  35B1               	lslf	___ftmul@f2,f
 17593  0F09  0DB2               	rlf	___ftmul@f2+1,f
 17594  0F0A  0DB3               	rlf	___ftmul@f2+2,f
 17595  0F0B  0B89               	decfsz	9,f
 17596  0F0C  2F08               	goto	u5825
 17597  0F0D  3001               	movlw	1
 17598  0F0E  02BC               	subwf	___ftmul@cntr,f
 17599  0F0F  1D03               	btfss	3,2
 17600  0F10  2EF9               	goto	l6602
 17601  0F11  3009               	movlw	9
 17602  0F12  00B4               	movwf	??___ftmul
 17603  0F13  0834               	movf	??___ftmul,w
 17604  0F14  00BC               	movwf	___ftmul@cntr
 17605  0F15                     l6614:	
 17606  0F15  1C2E               	btfss	___ftmul@f1,0
 17607  0F16  2F1D               	goto	l6618
 17608  0F17  0831               	movf	___ftmul@f2,w
 17609  0F18  07B9               	addwf	___ftmul@f3_as_product,f
 17610  0F19  0832               	movf	___ftmul@f2+1,w
 17611  0F1A  3DBA               	addwfc	___ftmul@f3_as_product+1,f
 17612  0F1B  0833               	movf	___ftmul@f2+2,w
 17613  0F1C  3DBB               	addwfc	___ftmul@f3_as_product+2,f
 17614  0F1D                     l6618:	
 17615  0F1D  3001               	movlw	1
 17616  0F1E                     u5855:	
 17617  0F1E  36B0               	lsrf	___ftmul@f1+2,f
 17618  0F1F  0CAF               	rrf	___ftmul@f1+1,f
 17619  0F20  0CAE               	rrf	___ftmul@f1,f
 17620  0F21  0B89               	decfsz	9,f
 17621  0F22  2F1E               	goto	u5855
 17622  0F23  3001               	movlw	1
 17623  0F24                     u5865:	
 17624  0F24  36BB               	lsrf	___ftmul@f3_as_product+2,f
 17625  0F25  0CBA               	rrf	___ftmul@f3_as_product+1,f
 17626  0F26  0CB9               	rrf	___ftmul@f3_as_product,f
 17627  0F27  0B89               	decfsz	9,f
 17628  0F28  2F24               	goto	u5865
 17629  0F29  3001               	movlw	1
 17630  0F2A  02BC               	subwf	___ftmul@cntr,f
 17631  0F2B  1D03               	btfss	3,2
 17632  0F2C  2F15               	goto	l6614
 17633  0F2D  0839               	movf	___ftmul@f3_as_product,w
 17634  0F2E  00A0               	movwf	___ftpack@arg
 17635  0F2F  083A               	movf	___ftmul@f3_as_product+1,w
 17636  0F30  00A1               	movwf	___ftpack@arg+1
 17637  0F31  083B               	movf	___ftmul@f3_as_product+2,w
 17638  0F32  00A2               	movwf	___ftpack@arg+2
 17639  0F33  0838               	movf	___ftmul@exp,w
 17640  0F34  00B4               	movwf	??___ftmul
 17641  0F35  0834               	movf	??___ftmul,w
 17642  0F36  00A3               	movwf	___ftpack@exp
 17643  0F37  083D               	movf	___ftmul@sign,w
 17644  0F38  00B5               	movwf	??___ftmul+1
 17645  0F39  0835               	movf	??___ftmul+1,w
 17646  0F3A  00A4               	movwf	___ftpack@sign
 17647  0F3B  3194  24BF         	fcall	___ftpack
 17648  0F3D  0020               	movlb	0	; select bank0
 17649  0F3E  0820               	movf	?___ftpack,w
 17650  0F3F  00AE               	movwf	?___ftmul
 17651  0F40  0821               	movf	?___ftpack+1,w
 17652  0F41  00AF               	movwf	?___ftmul+1
 17653  0F42  0822               	movf	?___ftpack+2,w
 17654  0F43  00B0               	movwf	?___ftmul+2
 17655  0F44  0008               	return
 17656  0F45                     __end_of___ftmul:	
 17657                           
 17658                           	psect	text120
 17659  0D37                     __ptext120:	
 17660 ;; *************** function ___ftdiv *****************
 17661 ;; Defined at:
 17662 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 17663 ;; Parameters:    Size  Location     Type
 17664 ;;  f2              3   14[BANK0 ] float 
 17665 ;;  f1              3   17[BANK0 ] float 
 17666 ;; Auto vars:     Size  Location     Type
 17667 ;;  f3              3   25[BANK0 ] float 
 17668 ;;  sign            1   29[BANK0 ] unsigned char 
 17669 ;;  exp             1   28[BANK0 ] unsigned char 
 17670 ;;  cntr            1   24[BANK0 ] unsigned char 
 17671 ;; Return value:  Size  Location     Type
 17672 ;;                  3   14[BANK0 ] float 
 17673 ;; Registers used:
 17674 ;;		wreg, status,2, status,0, pclath, cstack
 17675 ;; Tracked objects:
 17676 ;;		On entry : 0/0
 17677 ;;		On exit  : 0/0
 17678 ;;		Unchanged: 0/0
 17679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17680 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17681 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17682 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17683 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17684 ;;Total ram usage:       16 bytes
 17685 ;; Hardware stack levels used:    1
 17686 ;; Hardware stack levels required when called:    6
 17687 ;; This function calls:
 17688 ;;		___ftpack
 17689 ;; This function is called by:
 17690 ;;		_getDimmerLights_PercentToValue
 17691 ;;		_getDimmerLights_ValueToPercent
 17692 ;; This function uses a non-reentrant model
 17693 ;;
 17694                           
 17695                           
 17696                           ;psect for function ___ftdiv
 17697  0D37                     ___ftdiv:	
 17698                           
 17699                           ;incstack = 0
 17700                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 17701  0D37  0020               	movlb	0	; select bank0
 17702  0D38  0831               	movf	___ftdiv@f1,w
 17703  0D39  00B4               	movwf	??___ftdiv
 17704  0D3A  0832               	movf	___ftdiv@f1+1,w
 17705  0D3B  00B5               	movwf	??___ftdiv+1
 17706  0D3C  0833               	movf	___ftdiv@f1+2,w
 17707  0D3D  00B6               	movwf	??___ftdiv+2
 17708  0D3E  1003               	clrc
 17709  0D3F  0D35               	rlf	??___ftdiv+1,w
 17710  0D40  0D36               	rlf	??___ftdiv+2,w
 17711  0D41  00B7               	movwf	??___ftdiv+3
 17712  0D42  0837               	movf	??___ftdiv+3,w
 17713  0D43  00BC               	movwf	___ftdiv@exp
 17714  0D44  08BC               	movf	___ftdiv@exp,f
 17715  0D45  1D03               	skipz
 17716  0D46  2D4E               	goto	l6542
 17717  0D47  3000               	movlw	0
 17718  0D48  00AE               	movwf	?___ftdiv
 17719  0D49  3000               	movlw	0
 17720  0D4A  00AF               	movwf	?___ftdiv+1
 17721  0D4B  3000               	movlw	0
 17722  0D4C  00B0               	movwf	?___ftdiv+2
 17723  0D4D  0008               	return
 17724  0D4E                     l6542:	
 17725  0D4E  082E               	movf	___ftdiv@f2,w
 17726  0D4F  00B4               	movwf	??___ftdiv
 17727  0D50  082F               	movf	___ftdiv@f2+1,w
 17728  0D51  00B5               	movwf	??___ftdiv+1
 17729  0D52  0830               	movf	___ftdiv@f2+2,w
 17730  0D53  00B6               	movwf	??___ftdiv+2
 17731  0D54  1003               	clrc
 17732  0D55  0D35               	rlf	??___ftdiv+1,w
 17733  0D56  0D36               	rlf	??___ftdiv+2,w
 17734  0D57  00B7               	movwf	??___ftdiv+3
 17735  0D58  0837               	movf	??___ftdiv+3,w
 17736  0D59  00BD               	movwf	___ftdiv@sign
 17737  0D5A  08BD               	movf	___ftdiv@sign,f
 17738  0D5B  1D03               	skipz
 17739  0D5C  2D64               	goto	l6548
 17740  0D5D  3000               	movlw	0
 17741  0D5E  00AE               	movwf	?___ftdiv
 17742  0D5F  3000               	movlw	0
 17743  0D60  00AF               	movwf	?___ftdiv+1
 17744  0D61  3000               	movlw	0
 17745  0D62  00B0               	movwf	?___ftdiv+2
 17746  0D63  0008               	return
 17747  0D64                     l6548:	
 17748  0D64  3000               	movlw	0
 17749  0D65  00B9               	movwf	___ftdiv@f3
 17750  0D66  3000               	movlw	0
 17751  0D67  00BA               	movwf	___ftdiv@f3+1
 17752  0D68  3000               	movlw	0
 17753  0D69  00BB               	movwf	___ftdiv@f3+2
 17754  0D6A  3089               	movlw	137
 17755  0D6B  073D               	addwf	___ftdiv@sign,w
 17756  0D6C  00B4               	movwf	??___ftdiv
 17757  0D6D  0834               	movf	??___ftdiv,w
 17758  0D6E  02BC               	subwf	___ftdiv@exp,f
 17759  0D6F  0831               	movf	___ftdiv@f1,w
 17760  0D70  00B4               	movwf	??___ftdiv
 17761  0D71  0832               	movf	___ftdiv@f1+1,w
 17762  0D72  00B5               	movwf	??___ftdiv+1
 17763  0D73  0833               	movf	___ftdiv@f1+2,w
 17764  0D74  00B6               	movwf	??___ftdiv+2
 17765  0D75  3010               	movlw	16
 17766  0D76                     u5705:	
 17767  0D76  36B6               	lsrf	??___ftdiv+2,f
 17768  0D77  0CB5               	rrf	??___ftdiv+1,f
 17769  0D78  0CB4               	rrf	??___ftdiv,f
 17770  0D79  0B89               	decfsz	9,f
 17771  0D7A  2D76               	goto	u5705
 17772  0D7B  0834               	movf	??___ftdiv,w
 17773  0D7C  00B7               	movwf	??___ftdiv+3
 17774  0D7D  0837               	movf	??___ftdiv+3,w
 17775  0D7E  00BD               	movwf	___ftdiv@sign
 17776  0D7F  082E               	movf	___ftdiv@f2,w
 17777  0D80  00B4               	movwf	??___ftdiv
 17778  0D81  082F               	movf	___ftdiv@f2+1,w
 17779  0D82  00B5               	movwf	??___ftdiv+1
 17780  0D83  0830               	movf	___ftdiv@f2+2,w
 17781  0D84  00B6               	movwf	??___ftdiv+2
 17782  0D85  3010               	movlw	16
 17783  0D86                     u5715:	
 17784  0D86  36B6               	lsrf	??___ftdiv+2,f
 17785  0D87  0CB5               	rrf	??___ftdiv+1,f
 17786  0D88  0CB4               	rrf	??___ftdiv,f
 17787  0D89  0B89               	decfsz	9,f
 17788  0D8A  2D86               	goto	u5715
 17789  0D8B  0834               	movf	??___ftdiv,w
 17790  0D8C  00B7               	movwf	??___ftdiv+3
 17791  0D8D  0837               	movf	??___ftdiv+3,w
 17792  0D8E  06BD               	xorwf	___ftdiv@sign,f
 17793  0D8F  3080               	movlw	128
 17794  0D90  00B4               	movwf	??___ftdiv
 17795  0D91  0834               	movf	??___ftdiv,w
 17796  0D92  05BD               	andwf	___ftdiv@sign,f
 17797  0D93  17B2               	bsf	___ftdiv@f1+1,7
 17798  0D94  30FF               	movlw	255
 17799  0D95  05B1               	andwf	___ftdiv@f1,f
 17800  0D96  30FF               	movlw	255
 17801  0D97  05B2               	andwf	___ftdiv@f1+1,f
 17802  0D98  3000               	movlw	0
 17803  0D99  05B3               	andwf	___ftdiv@f1+2,f
 17804  0D9A  17AF               	bsf	___ftdiv@f2+1,7
 17805  0D9B  30FF               	movlw	255
 17806  0D9C  05AE               	andwf	___ftdiv@f2,f
 17807  0D9D  30FF               	movlw	255
 17808  0D9E  05AF               	andwf	___ftdiv@f2+1,f
 17809  0D9F  3000               	movlw	0
 17810  0DA0  05B0               	andwf	___ftdiv@f2+2,f
 17811  0DA1  3018               	movlw	24
 17812  0DA2  00B4               	movwf	??___ftdiv
 17813  0DA3  0834               	movf	??___ftdiv,w
 17814  0DA4  00B8               	movwf	___ftdiv@cntr
 17815  0DA5                     l6562:	
 17816  0DA5  3001               	movlw	1
 17817  0DA6                     u5725:	
 17818  0DA6  35B9               	lslf	___ftdiv@f3,f
 17819  0DA7  0DBA               	rlf	___ftdiv@f3+1,f
 17820  0DA8  0DBB               	rlf	___ftdiv@f3+2,f
 17821  0DA9  0B89               	decfsz	9,f
 17822  0DAA  2DA6               	goto	u5725
 17823  0DAB  0830               	movf	___ftdiv@f2+2,w
 17824  0DAC  0233               	subwf	___ftdiv@f1+2,w
 17825  0DAD  1D03               	skipz
 17826  0DAE  2DB5               	goto	u5735
 17827  0DAF  082F               	movf	___ftdiv@f2+1,w
 17828  0DB0  0232               	subwf	___ftdiv@f1+1,w
 17829  0DB1  1D03               	skipz
 17830  0DB2  2DB5               	goto	u5735
 17831  0DB3  082E               	movf	___ftdiv@f2,w
 17832  0DB4  0231               	subwf	___ftdiv@f1,w
 17833  0DB5                     u5735:	
 17834  0DB5  1C03               	skipc
 17835  0DB6  2DBE               	goto	l6570
 17836  0DB7  082E               	movf	___ftdiv@f2,w
 17837  0DB8  02B1               	subwf	___ftdiv@f1,f
 17838  0DB9  082F               	movf	___ftdiv@f2+1,w
 17839  0DBA  3BB2               	subwfb	___ftdiv@f1+1,f
 17840  0DBB  0830               	movf	___ftdiv@f2+2,w
 17841  0DBC  3BB3               	subwfb	___ftdiv@f1+2,f
 17842  0DBD  1439               	bsf	___ftdiv@f3,0
 17843  0DBE                     l6570:	
 17844  0DBE  3001               	movlw	1
 17845  0DBF                     u5745:	
 17846  0DBF  35B1               	lslf	___ftdiv@f1,f
 17847  0DC0  0DB2               	rlf	___ftdiv@f1+1,f
 17848  0DC1  0DB3               	rlf	___ftdiv@f1+2,f
 17849  0DC2  0B89               	decfsz	9,f
 17850  0DC3  2DBF               	goto	u5745
 17851  0DC4  3001               	movlw	1
 17852  0DC5  02B8               	subwf	___ftdiv@cntr,f
 17853  0DC6  1D03               	btfss	3,2
 17854  0DC7  2DA5               	goto	l6562
 17855  0DC8  0839               	movf	___ftdiv@f3,w
 17856  0DC9  00A0               	movwf	___ftpack@arg
 17857  0DCA  083A               	movf	___ftdiv@f3+1,w
 17858  0DCB  00A1               	movwf	___ftpack@arg+1
 17859  0DCC  083B               	movf	___ftdiv@f3+2,w
 17860  0DCD  00A2               	movwf	___ftpack@arg+2
 17861  0DCE  083C               	movf	___ftdiv@exp,w
 17862  0DCF  00B4               	movwf	??___ftdiv
 17863  0DD0  0834               	movf	??___ftdiv,w
 17864  0DD1  00A3               	movwf	___ftpack@exp
 17865  0DD2  083D               	movf	___ftdiv@sign,w
 17866  0DD3  00B5               	movwf	??___ftdiv+1
 17867  0DD4  0835               	movf	??___ftdiv+1,w
 17868  0DD5  00A4               	movwf	___ftpack@sign
 17869  0DD6  3194  24BF         	fcall	___ftpack
 17870  0DD8  0020               	movlb	0	; select bank0
 17871  0DD9  0820               	movf	?___ftpack,w
 17872  0DDA  00AE               	movwf	?___ftdiv
 17873  0DDB  0821               	movf	?___ftpack+1,w
 17874  0DDC  00AF               	movwf	?___ftdiv+1
 17875  0DDD  0822               	movf	?___ftpack+2,w
 17876  0DDE  00B0               	movwf	?___ftdiv+2
 17877  0DDF  0008               	return
 17878  0DE0                     __end_of___ftdiv:	
 17879                           
 17880                           	psect	text121
 17881  0389                     __ptext121:	
 17882 ;; *************** function ___ftadd *****************
 17883 ;; Defined at:
 17884 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 17885 ;; Parameters:    Size  Location     Type
 17886 ;;  f1              3   33[BANK0 ] float 
 17887 ;;  f2              3   36[BANK0 ] float 
 17888 ;; Auto vars:     Size  Location     Type
 17889 ;;  exp1            1   45[BANK0 ] unsigned char 
 17890 ;;  exp2            1   44[BANK0 ] unsigned char 
 17891 ;;  sign            1   43[BANK0 ] unsigned char 
 17892 ;; Return value:  Size  Location     Type
 17893 ;;                  3   33[BANK0 ] float 
 17894 ;; Registers used:
 17895 ;;		wreg, status,2, status,0, pclath, cstack
 17896 ;; Tracked objects:
 17897 ;;		On entry : 0/0
 17898 ;;		On exit  : 0/0
 17899 ;;		Unchanged: 0/0
 17900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17901 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17902 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17903 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17904 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17905 ;;Total ram usage:       13 bytes
 17906 ;; Hardware stack levels used:    1
 17907 ;; Hardware stack levels required when called:    6
 17908 ;; This function calls:
 17909 ;;		___ftpack
 17910 ;; This function is called by:
 17911 ;;		_getDimmerLights_PercentToValue
 17912 ;;		_getDimmerLights_ValueToPercent
 17913 ;; This function uses a non-reentrant model
 17914 ;;
 17915                           
 17916                           
 17917                           ;psect for function ___ftadd
 17918  0389                     ___ftadd:	
 17919                           
 17920                           ;incstack = 0
 17921                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 17922  0389  0020               	movlb	0	; select bank0
 17923  038A  0841               	movf	___ftadd@f1,w
 17924  038B  00C7               	movwf	??___ftadd
 17925  038C  0842               	movf	___ftadd@f1+1,w
 17926  038D  00C8               	movwf	??___ftadd+1
 17927  038E  0843               	movf	___ftadd@f1+2,w
 17928  038F  00C9               	movwf	??___ftadd+2
 17929  0390  1003               	clrc
 17930  0391  0D48               	rlf	??___ftadd+1,w
 17931  0392  0D49               	rlf	??___ftadd+2,w
 17932  0393  00CA               	movwf	??___ftadd+3
 17933  0394  084A               	movf	??___ftadd+3,w
 17934  0395  00CD               	movwf	___ftadd@exp1
 17935  0396  0844               	movf	___ftadd@f2,w
 17936  0397  00C7               	movwf	??___ftadd
 17937  0398  0845               	movf	___ftadd@f2+1,w
 17938  0399  00C8               	movwf	??___ftadd+1
 17939  039A  0846               	movf	___ftadd@f2+2,w
 17940  039B  00C9               	movwf	??___ftadd+2
 17941  039C  1003               	clrc
 17942  039D  0D48               	rlf	??___ftadd+1,w
 17943  039E  0D49               	rlf	??___ftadd+2,w
 17944  039F  00CA               	movwf	??___ftadd+3
 17945  03A0  084A               	movf	??___ftadd+3,w
 17946  03A1  00CC               	movwf	___ftadd@exp2
 17947  03A2  084D               	movf	___ftadd@exp1,w
 17948  03A3  1903               	btfsc	3,2
 17949  03A4  2BB1               	goto	l6472
 17950  03A5  084C               	movf	___ftadd@exp2,w
 17951  03A6  024D               	subwf	___ftadd@exp1,w
 17952  03A7  1803               	skipnc
 17953  03A8  2BB8               	goto	l6476
 17954  03A9  034D               	decf	___ftadd@exp1,w
 17955  03AA  3AFF               	xorlw	255
 17956  03AB  074C               	addwf	___ftadd@exp2,w
 17957  03AC  00C7               	movwf	??___ftadd
 17958  03AD  3019               	movlw	25
 17959  03AE  0247               	subwf	??___ftadd,w
 17960  03AF  1C03               	skipc
 17961  03B0  2BB8               	goto	l6476
 17962  03B1                     l6472:	
 17963  03B1  0844               	movf	___ftadd@f2,w
 17964  03B2  00C1               	movwf	?___ftadd
 17965  03B3  0845               	movf	___ftadd@f2+1,w
 17966  03B4  00C2               	movwf	?___ftadd+1
 17967  03B5  0846               	movf	___ftadd@f2+2,w
 17968  03B6  00C3               	movwf	?___ftadd+2
 17969  03B7  0008               	return
 17970  03B8                     l6476:	
 17971  03B8  084C               	movf	___ftadd@exp2,w
 17972  03B9  1903               	btfsc	3,2
 17973  03BA  0008               	return
 17974  03BB  084D               	movf	___ftadd@exp1,w
 17975  03BC  024C               	subwf	___ftadd@exp2,w
 17976  03BD  1803               	skipnc
 17977  03BE  2BC7               	goto	l6482
 17978  03BF  034C               	decf	___ftadd@exp2,w
 17979  03C0  3AFF               	xorlw	255
 17980  03C1  074D               	addwf	___ftadd@exp1,w
 17981  03C2  00C7               	movwf	??___ftadd
 17982  03C3  3019               	movlw	25
 17983  03C4  0247               	subwf	??___ftadd,w
 17984  03C5  1803               	btfsc	3,0
 17985  03C6  0008               	return
 17986  03C7                     l6482:	
 17987  03C7  3006               	movlw	6
 17988  03C8  00C7               	movwf	??___ftadd
 17989  03C9  0847               	movf	??___ftadd,w
 17990  03CA  00CB               	movwf	___ftadd@sign
 17991  03CB  1BC3               	btfsc	___ftadd@f1+2,7
 17992  03CC  17CB               	bsf	___ftadd@sign,7
 17993  03CD  1BC6               	btfsc	___ftadd@f2+2,7
 17994  03CE  174B               	bsf	___ftadd@sign,6
 17995  03CF  17C2               	bsf	___ftadd@f1+1,7
 17996  03D0  30FF               	movlw	255
 17997  03D1  05C1               	andwf	___ftadd@f1,f
 17998  03D2  30FF               	movlw	255
 17999  03D3  05C2               	andwf	___ftadd@f1+1,f
 18000  03D4  3000               	movlw	0
 18001  03D5  05C3               	andwf	___ftadd@f1+2,f
 18002  03D6  17C5               	bsf	___ftadd@f2+1,7
 18003  03D7  30FF               	movlw	255
 18004  03D8  05C4               	andwf	___ftadd@f2,f
 18005  03D9  30FF               	movlw	255
 18006  03DA  05C5               	andwf	___ftadd@f2+1,f
 18007  03DB  3000               	movlw	0
 18008  03DC  05C6               	andwf	___ftadd@f2+2,f
 18009  03DD  084C               	movf	___ftadd@exp2,w
 18010  03DE  024D               	subwf	___ftadd@exp1,w
 18011  03DF  1803               	skipnc
 18012  03E0  2C03               	goto	l6504
 18013  03E1                     l6494:	
 18014  03E1  3001               	movlw	1
 18015  03E2                     u5545:	
 18016  03E2  35C4               	lslf	___ftadd@f2,f
 18017  03E3  0DC5               	rlf	___ftadd@f2+1,f
 18018  03E4  0DC6               	rlf	___ftadd@f2+2,f
 18019  03E5  0B89               	decfsz	9,f
 18020  03E6  2BE2               	goto	u5545
 18021  03E7  3001               	movlw	1
 18022  03E8  02CC               	subwf	___ftadd@exp2,f
 18023  03E9  084C               	movf	___ftadd@exp2,w
 18024  03EA  064D               	xorwf	___ftadd@exp1,w
 18025  03EB  1903               	skipnz
 18026  03EC  2BFE               	goto	l6502
 18027  03ED  3001               	movlw	1
 18028  03EE  02CB               	subwf	___ftadd@sign,f
 18029  03EF  084B               	movf	___ftadd@sign,w
 18030  03F0  3907               	andlw	7
 18031  03F1  1903               	btfsc	3,2
 18032  03F2  2BFE               	goto	l6502
 18033  03F3  2BE1               	goto	l6494
 18034  03F4                     l6500:	
 18035  03F4  3001               	movlw	1
 18036  03F5                     u5575:	
 18037  03F5  36C3               	lsrf	___ftadd@f1+2,f
 18038  03F6  0CC2               	rrf	___ftadd@f1+1,f
 18039  03F7  0CC1               	rrf	___ftadd@f1,f
 18040  03F8  0B89               	decfsz	9,f
 18041  03F9  2BF5               	goto	u5575
 18042  03FA  3001               	movlw	1
 18043  03FB  00C7               	movwf	??___ftadd
 18044  03FC  0847               	movf	??___ftadd,w
 18045  03FD  07CD               	addwf	___ftadd@exp1,f
 18046  03FE                     l6502:	
 18047  03FE  084D               	movf	___ftadd@exp1,w
 18048  03FF  064C               	xorwf	___ftadd@exp2,w
 18049  0400  1903               	btfsc	3,2
 18050  0401  2C28               	goto	l3209
 18051  0402  2BF4               	goto	l6500
 18052  0403                     l6504:	
 18053  0403  084D               	movf	___ftadd@exp1,w
 18054  0404  024C               	subwf	___ftadd@exp2,w
 18055  0405  1803               	skipnc
 18056  0406  2C28               	goto	l3209
 18057  0407                     l6506:	
 18058  0407  3001               	movlw	1
 18059  0408                     u5605:	
 18060  0408  35C1               	lslf	___ftadd@f1,f
 18061  0409  0DC2               	rlf	___ftadd@f1+1,f
 18062  040A  0DC3               	rlf	___ftadd@f1+2,f
 18063  040B  0B89               	decfsz	9,f
 18064  040C  2C08               	goto	u5605
 18065  040D  3001               	movlw	1
 18066  040E  02CD               	subwf	___ftadd@exp1,f
 18067  040F  084C               	movf	___ftadd@exp2,w
 18068  0410  064D               	xorwf	___ftadd@exp1,w
 18069  0411  1903               	skipnz
 18070  0412  2C24               	goto	l6514
 18071  0413  3001               	movlw	1
 18072  0414  02CB               	subwf	___ftadd@sign,f
 18073  0415  084B               	movf	___ftadd@sign,w
 18074  0416  3907               	andlw	7
 18075  0417  1903               	btfsc	3,2
 18076  0418  2C24               	goto	l6514
 18077  0419  2C07               	goto	l6506
 18078  041A                     l6512:	
 18079  041A  3001               	movlw	1
 18080  041B                     u5635:	
 18081  041B  36C6               	lsrf	___ftadd@f2+2,f
 18082  041C  0CC5               	rrf	___ftadd@f2+1,f
 18083  041D  0CC4               	rrf	___ftadd@f2,f
 18084  041E  0B89               	decfsz	9,f
 18085  041F  2C1B               	goto	u5635
 18086  0420  3001               	movlw	1
 18087  0421  00C7               	movwf	??___ftadd
 18088  0422  0847               	movf	??___ftadd,w
 18089  0423  07CC               	addwf	___ftadd@exp2,f
 18090  0424                     l6514:	
 18091  0424  084D               	movf	___ftadd@exp1,w
 18092  0425  064C               	xorwf	___ftadd@exp2,w
 18093  0426  1D03               	skipz
 18094  0427  2C1A               	goto	l6512
 18095  0428                     l3209:	
 18096  0428  1FCB               	btfss	___ftadd@sign,7
 18097  0429  2C3A               	goto	l6518
 18098  042A  30FF               	movlw	255
 18099  042B  06C1               	xorwf	___ftadd@f1,f
 18100  042C  30FF               	movlw	255
 18101  042D  06C2               	xorwf	___ftadd@f1+1,f
 18102  042E  30FF               	movlw	255
 18103  042F  06C3               	xorwf	___ftadd@f1+2,f
 18104  0430  3001               	movlw	1
 18105  0431  07C1               	addwf	___ftadd@f1,f
 18106  0432  3000               	movlw	0
 18107  0433  1803               	skipnc
 18108  0434  3001               	movlw	1
 18109  0435  07C2               	addwf	___ftadd@f1+1,f
 18110  0436  3000               	movlw	0
 18111  0437  1803               	skipnc
 18112  0438  3001               	movlw	1
 18113  0439  07C3               	addwf	___ftadd@f1+2,f
 18114  043A                     l6518:	
 18115  043A  1F4B               	btfss	___ftadd@sign,6
 18116  043B  2C4C               	goto	l6522
 18117  043C  30FF               	movlw	255
 18118  043D  06C4               	xorwf	___ftadd@f2,f
 18119  043E  30FF               	movlw	255
 18120  043F  06C5               	xorwf	___ftadd@f2+1,f
 18121  0440  30FF               	movlw	255
 18122  0441  06C6               	xorwf	___ftadd@f2+2,f
 18123  0442  3001               	movlw	1
 18124  0443  07C4               	addwf	___ftadd@f2,f
 18125  0444  3000               	movlw	0
 18126  0445  1803               	skipnc
 18127  0446  3001               	movlw	1
 18128  0447  07C5               	addwf	___ftadd@f2+1,f
 18129  0448  3000               	movlw	0
 18130  0449  1803               	skipnc
 18131  044A  3001               	movlw	1
 18132  044B  07C6               	addwf	___ftadd@f2+2,f
 18133  044C                     l6522:	
 18134  044C  01CB               	clrf	___ftadd@sign
 18135  044D  0841               	movf	___ftadd@f1,w
 18136  044E  07C4               	addwf	___ftadd@f2,f
 18137  044F  0842               	movf	___ftadd@f1+1,w
 18138  0450  3DC5               	addwfc	___ftadd@f2+1,f
 18139  0451  0843               	movf	___ftadd@f1+2,w
 18140  0452  3DC6               	addwfc	___ftadd@f2+2,f
 18141  0453  1FC6               	btfss	___ftadd@f2+2,7
 18142  0454  2C67               	goto	l6532
 18143  0455  30FF               	movlw	255
 18144  0456  06C4               	xorwf	___ftadd@f2,f
 18145  0457  30FF               	movlw	255
 18146  0458  06C5               	xorwf	___ftadd@f2+1,f
 18147  0459  30FF               	movlw	255
 18148  045A  06C6               	xorwf	___ftadd@f2+2,f
 18149  045B  3001               	movlw	1
 18150  045C  07C4               	addwf	___ftadd@f2,f
 18151  045D  3000               	movlw	0
 18152  045E  1803               	skipnc
 18153  045F  3001               	movlw	1
 18154  0460  07C5               	addwf	___ftadd@f2+1,f
 18155  0461  3000               	movlw	0
 18156  0462  1803               	skipnc
 18157  0463  3001               	movlw	1
 18158  0464  07C6               	addwf	___ftadd@f2+2,f
 18159  0465  01CB               	clrf	___ftadd@sign
 18160  0466  0ACB               	incf	___ftadd@sign,f
 18161  0467                     l6532:	
 18162  0467  0844               	movf	___ftadd@f2,w
 18163  0468  00A0               	movwf	___ftpack@arg
 18164  0469  0845               	movf	___ftadd@f2+1,w
 18165  046A  00A1               	movwf	___ftpack@arg+1
 18166  046B  0846               	movf	___ftadd@f2+2,w
 18167  046C  00A2               	movwf	___ftpack@arg+2
 18168  046D  084D               	movf	___ftadd@exp1,w
 18169  046E  00C7               	movwf	??___ftadd
 18170  046F  0847               	movf	??___ftadd,w
 18171  0470  00A3               	movwf	___ftpack@exp
 18172  0471  084B               	movf	___ftadd@sign,w
 18173  0472  00C8               	movwf	??___ftadd+1
 18174  0473  0848               	movf	??___ftadd+1,w
 18175  0474  00A4               	movwf	___ftpack@sign
 18176  0475  3194  24BF         	fcall	___ftpack
 18177  0477  0020               	movlb	0	; select bank0
 18178  0478  0820               	movf	?___ftpack,w
 18179  0479  00C1               	movwf	?___ftadd
 18180  047A  0821               	movf	?___ftpack+1,w
 18181  047B  00C2               	movwf	?___ftadd+1
 18182  047C  0822               	movf	?___ftpack+2,w
 18183  047D  00C3               	movwf	?___ftadd+2
 18184  047E  0008               	return
 18185  047F                     __end_of___ftadd:	
 18186                           
 18187                           	psect	text122
 18188  1E60                     __ptext122:	
 18189 ;; *************** function ___awtoft *****************
 18190 ;; Defined at:
 18191 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 18192 ;; Parameters:    Size  Location     Type
 18193 ;;  c               2    8[BANK0 ] int 
 18194 ;; Auto vars:     Size  Location     Type
 18195 ;;  sign            1   13[BANK0 ] unsigned char 
 18196 ;; Return value:  Size  Location     Type
 18197 ;;                  3    8[BANK0 ] float 
 18198 ;; Registers used:
 18199 ;;		wreg, status,2, status,0, pclath, cstack
 18200 ;; Tracked objects:
 18201 ;;		On entry : 0/0
 18202 ;;		On exit  : 0/0
 18203 ;;		Unchanged: 0/0
 18204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18205 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18206 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18207 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18208 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18209 ;;Total ram usage:        6 bytes
 18210 ;; Hardware stack levels used:    1
 18211 ;; Hardware stack levels required when called:    6
 18212 ;; This function calls:
 18213 ;;		___ftpack
 18214 ;; This function is called by:
 18215 ;;		_getDimmerLights_PercentToValue
 18216 ;;		_getDimmerLights_ValueToPercent
 18217 ;; This function uses a non-reentrant model
 18218 ;;
 18219                           
 18220                           
 18221                           ;psect for function ___awtoft
 18222  1E60                     ___awtoft:	
 18223                           
 18224                           ;incstack = 0
 18225                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 18226  1E60  0020               	movlb	0	; select bank0
 18227  1E61  01AD               	clrf	___awtoft@sign
 18228  1E62  1FA9               	btfss	___awtoft@c+1,7
 18229  1E63  2E6B               	goto	l6460
 18230  1E64  09A8               	comf	___awtoft@c,f
 18231  1E65  09A9               	comf	___awtoft@c+1,f
 18232  1E66  0AA8               	incf	___awtoft@c,f
 18233  1E67  1903               	skipnz
 18234  1E68  0AA9               	incf	___awtoft@c+1,f
 18235  1E69  01AD               	clrf	___awtoft@sign
 18236  1E6A  0AAD               	incf	___awtoft@sign,f
 18237  1E6B                     l6460:	
 18238  1E6B  0828               	movf	___awtoft@c,w
 18239  1E6C  00A0               	movwf	___ftpack@arg
 18240  1E6D  0829               	movf	___awtoft@c+1,w
 18241  1E6E  00A1               	movwf	___ftpack@arg+1
 18242  1E6F  01A2               	clrf	___ftpack@arg+2
 18243  1E70  308E               	movlw	142
 18244  1E71  00AB               	movwf	??___awtoft
 18245  1E72  082B               	movf	??___awtoft,w
 18246  1E73  00A3               	movwf	___ftpack@exp
 18247  1E74  082D               	movf	___awtoft@sign,w
 18248  1E75  00AC               	movwf	??___awtoft+1
 18249  1E76  082C               	movf	??___awtoft+1,w
 18250  1E77  00A4               	movwf	___ftpack@sign
 18251  1E78  3194  24BF         	fcall	___ftpack
 18252  1E7A  0020               	movlb	0	; select bank0
 18253  1E7B  0820               	movf	?___ftpack,w
 18254  1E7C  00A8               	movwf	?___awtoft
 18255  1E7D  0821               	movf	?___ftpack+1,w
 18256  1E7E  00A9               	movwf	?___awtoft+1
 18257  1E7F  0822               	movf	?___ftpack+2,w
 18258  1E80  00AA               	movwf	?___awtoft+2
 18259  1E81  0008               	return
 18260  1E82                     __end_of___awtoft:	
 18261                           
 18262                           	psect	text123
 18263  14BF                     __ptext123:	
 18264 ;; *************** function ___ftpack *****************
 18265 ;; Defined at:
 18266 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 18267 ;; Parameters:    Size  Location     Type
 18268 ;;  arg             3    0[BANK0 ] unsigned um
 18269 ;;  exp             1    3[BANK0 ] unsigned char 
 18270 ;;  sign            1    4[BANK0 ] unsigned char 
 18271 ;; Auto vars:     Size  Location     Type
 18272 ;;		None
 18273 ;; Return value:  Size  Location     Type
 18274 ;;                  3    0[BANK0 ] float 
 18275 ;; Registers used:
 18276 ;;		wreg, status,2, status,0
 18277 ;; Tracked objects:
 18278 ;;		On entry : 0/0
 18279 ;;		On exit  : 0/0
 18280 ;;		Unchanged: 0/0
 18281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18282 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18284 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18285 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18286 ;;Total ram usage:        8 bytes
 18287 ;; Hardware stack levels used:    1
 18288 ;; Hardware stack levels required when called:    5
 18289 ;; This function calls:
 18290 ;;		Nothing
 18291 ;; This function is called by:
 18292 ;;		___awtoft
 18293 ;;		___ftadd
 18294 ;;		___ftdiv
 18295 ;;		___ftmul
 18296 ;; This function uses a non-reentrant model
 18297 ;;
 18298                           
 18299                           
 18300                           ;psect for function ___ftpack
 18301  14BF                     ___ftpack:	
 18302                           
 18303                           ;incstack = 0
 18304                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 18305  14BF  0020               	movlb	0	; select bank0
 18306  14C0  0823               	movf	___ftpack@exp,w
 18307  14C1  1903               	btfsc	3,2
 18308  14C2  2CC8               	goto	l6320
 18309  14C3  0822               	movf	___ftpack@arg+2,w
 18310  14C4  0421               	iorwf	___ftpack@arg+1,w
 18311  14C5  0420               	iorwf	___ftpack@arg,w
 18312  14C6  1D03               	skipz
 18313  14C7  2CD9               	goto	l6326
 18314  14C8                     l6320:	
 18315  14C8  3000               	movlw	0
 18316  14C9  00A0               	movwf	?___ftpack
 18317  14CA  3000               	movlw	0
 18318  14CB  00A1               	movwf	?___ftpack+1
 18319  14CC  3000               	movlw	0
 18320  14CD  00A2               	movwf	?___ftpack+2
 18321  14CE  0008               	return
 18322  14CF                     l6324:	
 18323  14CF  3001               	movlw	1
 18324  14D0  00A5               	movwf	??___ftpack
 18325  14D1  0825               	movf	??___ftpack,w
 18326  14D2  07A3               	addwf	___ftpack@exp,f
 18327  14D3  3001               	movlw	1
 18328  14D4                     u5155:	
 18329  14D4  36A2               	lsrf	___ftpack@arg+2,f
 18330  14D5  0CA1               	rrf	___ftpack@arg+1,f
 18331  14D6  0CA0               	rrf	___ftpack@arg,f
 18332  14D7  0B89               	decfsz	9,f
 18333  14D8  2CD4               	goto	u5155
 18334  14D9                     l6326:	
 18335  14D9  30FE               	movlw	254
 18336  14DA  0522               	andwf	___ftpack@arg+2,w
 18337  14DB  1903               	btfsc	3,2
 18338  14DC  2CF2               	goto	l3180
 18339  14DD  2CCF               	goto	l6324
 18340  14DE                     l6328:	
 18341  14DE  3001               	movlw	1
 18342  14DF  00A5               	movwf	??___ftpack
 18343  14E0  0825               	movf	??___ftpack,w
 18344  14E1  07A3               	addwf	___ftpack@exp,f
 18345  14E2  3001               	movlw	1
 18346  14E3  07A0               	addwf	___ftpack@arg,f
 18347  14E4  3000               	movlw	0
 18348  14E5  1803               	skipnc
 18349  14E6  3001               	movlw	1
 18350  14E7  07A1               	addwf	___ftpack@arg+1,f
 18351  14E8  3000               	movlw	0
 18352  14E9  1803               	skipnc
 18353  14EA  3001               	movlw	1
 18354  14EB  07A2               	addwf	___ftpack@arg+2,f
 18355  14EC  3001               	movlw	1
 18356  14ED                     u5175:	
 18357  14ED  36A2               	lsrf	___ftpack@arg+2,f
 18358  14EE  0CA1               	rrf	___ftpack@arg+1,f
 18359  14EF  0CA0               	rrf	___ftpack@arg,f
 18360  14F0  0B89               	decfsz	9,f
 18361  14F1  2CED               	goto	u5175
 18362  14F2                     l3180:	
 18363  14F2  30FF               	movlw	255
 18364  14F3  0522               	andwf	___ftpack@arg+2,w
 18365  14F4  1903               	btfsc	3,2
 18366  14F5  2CFF               	goto	l6336
 18367  14F6  2CDE               	goto	l6328
 18368  14F7                     l6334:	
 18369  14F7  3001               	movlw	1
 18370  14F8  02A3               	subwf	___ftpack@exp,f
 18371  14F9  3001               	movlw	1
 18372  14FA                     u5195:	
 18373  14FA  35A0               	lslf	___ftpack@arg,f
 18374  14FB  0DA1               	rlf	___ftpack@arg+1,f
 18375  14FC  0DA2               	rlf	___ftpack@arg+2,f
 18376  14FD  0B89               	decfsz	9,f
 18377  14FE  2CFA               	goto	u5195
 18378  14FF                     l6336:	
 18379  14FF  1FA1               	btfss	___ftpack@arg+1,7
 18380  1500  2CF7               	goto	l6334
 18381  1501  1823               	btfsc	___ftpack@exp,0
 18382  1502  2D09               	goto	l3186
 18383  1503  30FF               	movlw	255
 18384  1504  05A0               	andwf	___ftpack@arg,f
 18385  1505  307F               	movlw	127
 18386  1506  05A1               	andwf	___ftpack@arg+1,f
 18387  1507  30FF               	movlw	255
 18388  1508  05A2               	andwf	___ftpack@arg+2,f
 18389  1509                     l3186:	
 18390  1509  1003               	clrc
 18391  150A  0CA3               	rrf	___ftpack@exp,f
 18392  150B  0823               	movf	___ftpack@exp,w
 18393  150C  00A5               	movwf	??___ftpack
 18394  150D  01A6               	clrf	??___ftpack+1
 18395  150E  01A7               	clrf	??___ftpack+2
 18396  150F  3010               	movlw	16
 18397  1510                     u5225:	
 18398  1510  35A5               	lslf	??___ftpack,f
 18399  1511  0DA6               	rlf	??___ftpack+1,f
 18400  1512  0DA7               	rlf	??___ftpack+2,f
 18401  1513  0B89               	decfsz	9,f
 18402  1514  2D10               	goto	u5225
 18403  1515  0825               	movf	??___ftpack,w
 18404  1516  04A0               	iorwf	___ftpack@arg,f
 18405  1517  0826               	movf	??___ftpack+1,w
 18406  1518  04A1               	iorwf	___ftpack@arg+1,f
 18407  1519  0827               	movf	??___ftpack+2,w
 18408  151A  04A2               	iorwf	___ftpack@arg+2,f
 18409  151B  0824               	movf	___ftpack@sign,w
 18410  151C  1903               	btfsc	3,2
 18411  151D  0008               	return
 18412  151E  17A2               	bsf	___ftpack@arg+2,7
 18413  151F  0008               	return
 18414  1520                     __end_of___ftpack:	
 18415                           
 18416                           	psect	text124
 18417  1913                     __ptext124:	
 18418 ;; *************** function _DelayOff_Main *****************
 18419 ;; Defined at:
 18420 ;;		line 41 in file "../src/DelayOff_B1.c"
 18421 ;; Parameters:    Size  Location     Type
 18422 ;;		None
 18423 ;; Auto vars:     Size  Location     Type
 18424 ;;		None
 18425 ;; Return value:  Size  Location     Type
 18426 ;;		None               void
 18427 ;; Registers used:
 18428 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18429 ;; Tracked objects:
 18430 ;;		On entry : 0/0
 18431 ;;		On exit  : 0/0
 18432 ;;		Unchanged: 0/0
 18433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18434 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18435 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18437 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18438 ;;Total ram usage:        0 bytes
 18439 ;; Hardware stack levels used:    1
 18440 ;; Hardware stack levels required when called:    9
 18441 ;; This function calls:
 18442 ;;		_DlyOff_Main
 18443 ;; This function is called by:
 18444 ;;		_main
 18445 ;; This function uses a non-reentrant model
 18446 ;;
 18447                           
 18448                           
 18449                           ;psect for function _DelayOff_Main
 18450  1913                     _DelayOff_Main:	
 18451                           
 18452                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 18453                           
 18454                           ;incstack = 0
 18455                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18456  1913  3001               	movlw	1
 18457  1914  3197  2791  3199   	fcall	_DlyOff_Main
 18458                           
 18459                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 18460  1917  3002               	movlw	2
 18461  1918  3197  2791         	fcall	_DlyOff_Main
 18462  191A  0008               	return
 18463  191B                     __end_of_DelayOff_Main:	
 18464                           
 18465                           	psect	text125
 18466  1791                     __ptext125:	
 18467 ;; *************** function _DlyOff_Main *****************
 18468 ;; Defined at:
 18469 ;;		line 61 in file "../src/DelayOff_B1.c"
 18470 ;; Parameters:    Size  Location     Type
 18471 ;;  sw              1    wreg     unsigned char 
 18472 ;; Auto vars:     Size  Location     Type
 18473 ;;  sw              1   71[BANK0 ] unsigned char 
 18474 ;; Return value:  Size  Location     Type
 18475 ;;		None               void
 18476 ;; Registers used:
 18477 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18478 ;; Tracked objects:
 18479 ;;		On entry : 0/0
 18480 ;;		On exit  : 0/0
 18481 ;;		Unchanged: 0/0
 18482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18484 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18485 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18486 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18487 ;;Total ram usage:        3 bytes
 18488 ;; Hardware stack levels used:    1
 18489 ;; Hardware stack levels required when called:    8
 18490 ;; This function calls:
 18491 ;;		_DelayOffPointSelect
 18492 ;;		_getDimmerLights_Status
 18493 ;;		_setDimmerLights_SwOff
 18494 ;;		_setDimmerLights_SwOn
 18495 ;;		_setProductData
 18496 ;; This function is called by:
 18497 ;;		_DelayOff_Main
 18498 ;; This function uses a non-reentrant model
 18499 ;;
 18500                           
 18501                           
 18502                           ;psect for function _DlyOff_Main
 18503  1791                     _DlyOff_Main:	
 18504                           
 18505                           ;incstack = 0
 18506                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18507                           ;DlyOff_Main@sw stored from wreg
 18508  1791  0020               	movlb	0	; select bank0
 18509  1792  00E7               	movwf	DlyOff_Main@sw
 18510                           
 18511                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 18512  1793  0867               	movf	DlyOff_Main@sw,w
 18513  1794  319B  23BB  3197   	fcall	_DelayOffPointSelect
 18514                           
 18515                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 18516  1797  0021               	movlb	1	; select bank1
 18517  1798  0855               	movf	_DelayOff^(0+128),w
 18518  1799  0086               	movwf	6
 18519  179A  3001               	movlw	1	; select bank2/3
 18520  179B  0087               	movwf	7
 18521  179C  1C81               	btfss	1,1
 18522  179D  0008               	return
 18523                           
 18524                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 18525  179E  0855               	movf	_DelayOff^(0+128),w
 18526  179F  3E02               	addlw	2
 18527  17A0  0086               	movwf	6
 18528  17A1  3001               	movlw	1	; select bank2/3
 18529  17A2  0087               	movwf	7
 18530  17A3  3001               	movlw	1
 18531  17A4  0781               	addwf	1,f
 18532  17A5  3141               	addfsr 1,1
 18533  17A6  1803               	skipnc
 18534  17A7  0A81               	incf	1,f
 18535                           
 18536                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 60000/20) {
 18537  17A8  0855               	movf	_DelayOff^(0+128),w
 18538  17A9  3E02               	addlw	2
 18539  17AA  0086               	movwf	6
 18540  17AB  3001               	movlw	1	; select bank2/3
 18541  17AC  0087               	movwf	7
 18542  17AD  3F40               	moviw [0]fsr1
 18543  17AE  0020               	movlb	0	; select bank0
 18544  17AF  00E5               	movwf	??_DlyOff_Main
 18545  17B0  3F41               	moviw [1]fsr1
 18546  17B1  00E6               	movwf	??_DlyOff_Main+1
 18547  17B2  300B               	movlw	11
 18548  17B3  0266               	subwf	??_DlyOff_Main+1,w
 18549  17B4  30B8               	movlw	184
 18550  17B5  1903               	skipnz
 18551  17B6  0265               	subwf	??_DlyOff_Main,w
 18552  17B7  1C03               	skipc
 18553  17B8  0008               	return
 18554                           
 18555                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 18556  17B9  0021               	movlb	1	; select bank1
 18557  17BA  0855               	movf	_DelayOff^(0+128),w
 18558  17BB  3E02               	addlw	2
 18559  17BC  0086               	movwf	6
 18560  17BD  3001               	movlw	1	; select bank2/3
 18561  17BE  0087               	movwf	7
 18562  17BF  3000               	movlw	0
 18563  17C0  3FC0               	movwi [0]fsr1
 18564  17C1  3FC1               	movwi [1]fsr1
 18565                           
 18566                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 18567  17C2  3001               	movlw	1
 18568  17C3  0020               	movlb	0	; select bank0
 18569  17C4  00E5               	movwf	??_DlyOff_Main
 18570  17C5  0021               	movlb	1	; select bank1
 18571  17C6  0855               	movf	_DelayOff^(0+128),w
 18572  17C7  3E04               	addlw	4
 18573  17C8  0086               	movwf	6
 18574  17C9  3001               	movlw	1	; select bank2/3
 18575  17CA  0087               	movwf	7
 18576  17CB  0020               	movlb	0	; select bank0
 18577  17CC  0865               	movf	??_DlyOff_Main,w
 18578  17CD  0781               	addwf	1,f
 18579                           
 18580                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 18581  17CE  0021               	movlb	1	; select bank1
 18582  17CF  0855               	movf	_DelayOff^(0+128),w
 18583  17D0  3E04               	addlw	4
 18584  17D1  0086               	movwf	6
 18585  17D2  3001               	movlw	1	; select bank2/3
 18586  17D3  0087               	movwf	7
 18587  17D4  0A55               	incf	_DelayOff^(0+128),w
 18588  17D5  0084               	movwf	4
 18589  17D6  3001               	movlw	1	; select bank2/3
 18590  17D7  0085               	movwf	5
 18591  17D8  0800               	movf	0,w
 18592  17D9  0201               	subwf	1,w
 18593  17DA  1C03               	skipc
 18594  17DB  0008               	return
 18595                           
 18596                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 18597  17DC  0855               	movf	_DelayOff^(0+128),w
 18598  17DD  3E04               	addlw	4
 18599  17DE  0086               	movwf	6
 18600  17DF  3001               	movlw	1	; select bank2/3
 18601  17E0  0087               	movwf	7
 18602  17E1  0181               	clrf	1
 18603                           
 18604                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 18605  17E2  0855               	movf	_DelayOff^(0+128),w
 18606  17E3  0086               	movwf	6
 18607  17E4  3001               	movlw	1	; select bank2/3
 18608  17E5  0087               	movwf	7
 18609  17E6  1081               	bcf	1,1
 18610                           
 18611                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 18612  17E7  0020               	movlb	0	; select bank0
 18613  17E8  0867               	movf	DlyOff_Main@sw,w
 18614  17E9  319A  2209  3197   	fcall	_getDimmerLights_Status
 18615  17EC  3A01               	xorlw	1
 18616  17ED  1D03               	skipz
 18617  17EE  2FF9               	goto	l581
 18618                           
 18619                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 18620  17EF  0020               	movlb	0	; select bank0
 18621  17F0  0867               	movf	DlyOff_Main@sw,w
 18622  17F1  3188  2000  3197   	fcall	_setDimmerLights_SwOn
 18623                           
 18624                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 18625  17F4  0020               	movlb	0	; select bank0
 18626  17F5  0867               	movf	DlyOff_Main@sw,w
 18627  17F6  3187  27C6  3197   	fcall	_setDimmerLights_SwOff
 18628  17F9                     l581:	
 18629                           
 18630                           ;DelayOff_B1.c: 78: }
 18631                           ;DelayOff_B1.c: 80: setProductData(26 + sw, 0);
 18632  17F9  0020               	movlb	0	; select bank0
 18633  17FA  01E2               	clrf	setProductData@value
 18634  17FB  0867               	movf	DlyOff_Main@sw,w
 18635  17FC  3E1A               	addlw	26
 18636  17FD  3199  218D         	fcall	_setProductData
 18637  17FF  0008               	return
 18638  1800                     __end_of_DlyOff_Main:	
 18639                           
 18640                           	psect	text126
 18641  198D                     __ptext126:	
 18642 ;; *************** function _setProductData *****************
 18643 ;; Defined at:
 18644 ;;		line 645 in file "../src/main_B1.c"
 18645 ;; Parameters:    Size  Location     Type
 18646 ;;  address         1    wreg     unsigned char 
 18647 ;;  value           1   66[BANK0 ] unsigned char 
 18648 ;; Auto vars:     Size  Location     Type
 18649 ;;  address         1   68[BANK0 ] unsigned char 
 18650 ;; Return value:  Size  Location     Type
 18651 ;;		None               void
 18652 ;; Registers used:
 18653 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18654 ;; Tracked objects:
 18655 ;;		On entry : 0/0
 18656 ;;		On exit  : 0/0
 18657 ;;		Unchanged: 0/0
 18658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18659 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18660 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18661 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18662 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18663 ;;Total ram usage:        3 bytes
 18664 ;; Hardware stack levels used:    1
 18665 ;; Hardware stack levels required when called:    5
 18666 ;; This function calls:
 18667 ;;		Nothing
 18668 ;; This function is called by:
 18669 ;;		_DlyOff_Main
 18670 ;;		_setDelayOff_GO
 18671 ;;		_setDimmerLights_OnOff
 18672 ;;		_setDimmerLights_Dimming
 18673 ;;		_setTemp_Main
 18674 ;;		_setLog_Code
 18675 ;;		_setControl_Lights_Table
 18676 ;;		_setRFSW_AdjControl
 18677 ;;		_setRF_DimmerLights
 18678 ;; This function uses a non-reentrant model
 18679 ;;
 18680                           
 18681                           
 18682                           ;psect for function _setProductData
 18683  198D                     _setProductData:	
 18684                           
 18685                           ;incstack = 0
 18686                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 18687                           ;setProductData@address stored from wreg
 18688  198D  0020               	movlb	0	; select bank0
 18689  198E  00E4               	movwf	setProductData@address
 18690                           
 18691                           ;main_B1.c: 646: _product.Data[address] = value;
 18692  198F  0862               	movf	setProductData@value,w
 18693  1990  00E3               	movwf	??_setProductData
 18694  1991  0864               	movf	setProductData@address,w
 18695  1992  3E45               	addlw	__product& (0+255)
 18696  1993  0086               	movwf	6
 18697  1994  3002               	movlw	2	; select bank4/5
 18698  1995  0087               	movwf	7
 18699  1996  0863               	movf	??_setProductData,w
 18700  1997  0081               	movwf	1
 18701  1998  0008               	return
 18702  1999                     __end_of_setProductData:	
 18703                           
 18704                           	psect	text127
 18705  0800                     __ptext127:	
 18706 ;; *************** function _setDimmerLights_SwOn *****************
 18707 ;; Defined at:
 18708 ;;		line 691 in file "../src/Dimmer_B1.c"
 18709 ;; Parameters:    Size  Location     Type
 18710 ;;  sw              1    wreg     unsigned char 
 18711 ;; Auto vars:     Size  Location     Type
 18712 ;;  sw              1   17[BANK0 ] unsigned char 
 18713 ;;  idle            1   16[BANK0 ] unsigned char 
 18714 ;; Return value:  Size  Location     Type
 18715 ;;		None               void
 18716 ;; Registers used:
 18717 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18718 ;; Tracked objects:
 18719 ;;		On entry : 0/0
 18720 ;;		On exit  : 0/0
 18721 ;;		Unchanged: 0/0
 18722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18724 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18725 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18726 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18727 ;;Total ram usage:        5 bytes
 18728 ;; Hardware stack levels used:    1
 18729 ;; Hardware stack levels required when called:    7
 18730 ;; This function calls:
 18731 ;;		_DimmerLights_SelectPointer
 18732 ;;		_setBuz
 18733 ;; This function is called by:
 18734 ;;		_DlyOff_Main
 18735 ;;		_setControl_Lights_Table
 18736 ;;		_setRFSW_Control
 18737 ;;		_setRFSW_AdjControl
 18738 ;;		_setSw_Main
 18739 ;; This function uses a non-reentrant model
 18740 ;;
 18741                           
 18742                           
 18743                           ;psect for function _setDimmerLights_SwOn
 18744  0800                     _setDimmerLights_SwOn:	
 18745                           
 18746                           ;incstack = 0
 18747                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18748                           ;setDimmerLights_SwOn@sw stored from wreg
 18749  0800  0020               	movlb	0	; select bank0
 18750  0801  00B1               	movwf	setDimmerLights_SwOn@sw
 18751                           
 18752                           ;Dimmer_B1.c: 692: char idle = 0;
 18753  0802  01B0               	clrf	setDimmerLights_SwOn@idle
 18754                           
 18755                           ;Dimmer_B1.c: 694: if (idle == 0) {
 18756  0803  08B0               	movf	setDimmerLights_SwOn@idle,f
 18757  0804  1D03               	skipz
 18758  0805  282A               	goto	l6738
 18759                           
 18760                           ;Dimmer_B1.c: 695: if (sw == 1) {
 18761  0806  0831               	movf	setDimmerLights_SwOn@sw,w
 18762  0807  3A01               	xorlw	1
 18763  0808  1D03               	skipz
 18764  0809  2817               	goto	l6728
 18765                           
 18766                           ;Dimmer_B1.c: 696: idle = DimmerLights2.DimmingTrigger == 1 || DimmerIntr2.Dimming_Sw ==
      +                           1 ? 1 : 0;
 18767  080A  01AE               	clrf	_setDimmerLights_SwOn$2339
 18768  080B  0AAE               	incf	_setDimmerLights_SwOn$2339,f
 18769  080C  0023               	movlb	3	; select bank3
 18770  080D  1A50               	btfsc	_DimmerLights2^(0+384),4
 18771  080E  2814               	goto	l6726
 18772  080F  0021               	movlb	1	; select bank1
 18773  0810  1A47               	btfsc	_DimmerIntr2^(0+128),4
 18774  0811  2814               	goto	l6726
 18775  0812  0020               	movlb	0	; select bank0
 18776  0813  01AE               	clrf	_setDimmerLights_SwOn$2339
 18777  0814                     l6726:	
 18778  0814  0020               	movlb	0	; select bank0
 18779  0815  082E               	movf	_setDimmerLights_SwOn$2339,w
 18780  0816  2827               	goto	L12
 18781  0817                     l6728:	
 18782                           ;Dimmer_B1.c: 697: } else if (sw == 2) {
 18783                           
 18784  0817  0831               	movf	setDimmerLights_SwOn@sw,w
 18785  0818  3A02               	xorlw	2
 18786  0819  1D03               	skipz
 18787  081A  282A               	goto	l6738
 18788                           
 18789                           ;Dimmer_B1.c: 698: idle = DimmerLights1.DimmingTrigger == 1 || DimmerIntr1.Dimming_Sw ==
      +                           1 ? 1 : 0;
 18790  081B  01AF               	clrf	_setDimmerLights_SwOn$2348
 18791  081C  0AAF               	incf	_setDimmerLights_SwOn$2348,f
 18792  081D  0022               	movlb	2	; select bank2
 18793  081E  1A67               	btfsc	_DimmerLights1^(0+256),4
 18794  081F  2825               	goto	l6736
 18795  0820  0021               	movlb	1	; select bank1
 18796  0821  1A3B               	btfsc	_DimmerIntr1^(0+128),4
 18797  0822  2825               	goto	l6736
 18798  0823  0020               	movlb	0	; select bank0
 18799  0824  01AF               	clrf	_setDimmerLights_SwOn$2348
 18800  0825                     l6736:	
 18801  0825  0020               	movlb	0	; select bank0
 18802  0826  082F               	movf	_setDimmerLights_SwOn$2348,w
 18803  0827                     L12:	
 18804  0827  00AD               	movwf	??_setDimmerLights_SwOn
 18805  0828  082D               	movf	??_setDimmerLights_SwOn,w
 18806  0829  00B0               	movwf	setDimmerLights_SwOn@idle
 18807  082A                     l6738:	
 18808                           
 18809                           ;Dimmer_B1.c: 699: }
 18810                           ;Dimmer_B1.c: 700: }
 18811                           ;Dimmer_B1.c: 717: DimmerLights_SelectPointer(sw);
 18812  082A  0831               	movf	setDimmerLights_SwOn@sw,w
 18813  082B  319B  23D2  3188   	fcall	_DimmerLights_SelectPointer
 18814                           
 18815                           ;Dimmer_B1.c: 718: if (idle == 0) {
 18816  082E  0020               	movlb	0	; select bank0
 18817  082F  08B0               	movf	setDimmerLights_SwOn@idle,f
 18818  0830  1D03               	skipz
 18819  0831  0008               	return
 18820                           
 18821                           ;Dimmer_B1.c: 719: DimmerLights->SwFlag = 1;
 18822  0832  0021               	movlb	1	; select bank1
 18823  0833  0856               	movf	_DimmerLights^(0+128),w
 18824  0834  0086               	movwf	6
 18825  0835  3001               	movlw	1	; select bank2/3
 18826  0836  0087               	movwf	7
 18827  0837  1401               	bsf	1,0
 18828                           
 18829                           ;Dimmer_B1.c: 720: if (DimmerLights->Status == 0) {
 18830  0838  0A56               	incf	_DimmerLights^(0+128),w
 18831  0839  0086               	movwf	6
 18832  083A  3001               	movlw	1	; select bank2/3
 18833  083B  0087               	movwf	7
 18834  083C  1801               	btfsc	1,0
 18835  083D  284E               	goto	l6746
 18836                           
 18837                           ;Dimmer_B1.c: 721: DimmerLights->Status = 1;
 18838  083E  0A56               	incf	_DimmerLights^(0+128),w
 18839  083F  0086               	movwf	6
 18840  0840  3001               	movlw	1	; select bank2/3
 18841  0841  0087               	movwf	7
 18842  0842  1401               	bsf	1,0
 18843                           
 18844                           ;Dimmer_B1.c: 722: DimmerLights->Trigger = 1;
 18845  0843  0856               	movf	_DimmerLights^(0+128),w
 18846  0844  0086               	movwf	6
 18847  0845  3001               	movlw	1	; select bank2/3
 18848  0846  0087               	movwf	7
 18849  0847  1481               	bsf	1,1
 18850                           
 18851                           ;Dimmer_B1.c: 723: DimmerLights->Switch = 1;
 18852  0848  0856               	movf	_DimmerLights^(0+128),w
 18853  0849  0086               	movwf	6
 18854  084A  3001               	movlw	1	; select bank2/3
 18855  084B  0087               	movwf	7
 18856  084C  1501               	bsf	1,2
 18857                           
 18858                           ;Dimmer_B1.c: 724: } else {
 18859  084D  2853               	goto	l6748
 18860  084E                     l6746:	
 18861                           
 18862                           ;Dimmer_B1.c: 725: DimmerLights->Status = 0;
 18863  084E  0A56               	incf	_DimmerLights^(0+128),w
 18864  084F  0086               	movwf	6
 18865  0850  3001               	movlw	1	; select bank2/3
 18866  0851  0087               	movwf	7
 18867  0852  1001               	bcf	1,0
 18868  0853                     l6748:	
 18869                           
 18870                           ;Dimmer_B1.c: 726: }
 18871                           ;Dimmer_B1.c: 727: setBuz(1, 100);
 18872  0853  3064               	movlw	100
 18873  0854  0020               	movlb	0	; select bank0
 18874  0855  00A9               	movwf	setBuz@time
 18875  0856  3000               	movlw	0
 18876  0857  00AA               	movwf	setBuz@time+1
 18877  0858  3001               	movlw	1
 18878  0859  3194  240B         	fcall	_setBuz
 18879  085B  0008               	return
 18880  085C                     __end_of_setDimmerLights_SwOn:	
 18881                           
 18882                           	psect	text128
 18883  140B                     __ptext128:	
 18884 ;; *************** function _setBuz *****************
 18885 ;; Defined at:
 18886 ;;		line 22 in file "../src/Buzzer_B1.c"
 18887 ;; Parameters:    Size  Location     Type
 18888 ;;  count           1    wreg     unsigned char 
 18889 ;;  time            2    9[BANK0 ] int 
 18890 ;; Auto vars:     Size  Location     Type
 18891 ;;  count           1   12[BANK0 ] unsigned char 
 18892 ;; Return value:  Size  Location     Type
 18893 ;;		None               void
 18894 ;; Registers used:
 18895 ;;		wreg, status,2, status,0, pclath, cstack
 18896 ;; Tracked objects:
 18897 ;;		On entry : 0/0
 18898 ;;		On exit  : 0/0
 18899 ;;		Unchanged: 0/0
 18900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18901 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18902 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18903 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18904 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18905 ;;Total ram usage:        4 bytes
 18906 ;; Hardware stack levels used:    1
 18907 ;; Hardware stack levels required when called:    6
 18908 ;; This function calls:
 18909 ;;		___awdiv
 18910 ;; This function is called by:
 18911 ;;		_setDimmerLights_SwOn
 18912 ;;		_setDimmerLights_Dimming
 18913 ;;		_setTemp_Main
 18914 ;;		_setLog_Code
 18915 ;;		_setRFSW_Control
 18916 ;;		_setSw_Main
 18917 ;;		_my_MainTimer
 18918 ;;		_Exception_Main
 18919 ;; This function uses a non-reentrant model
 18920 ;;
 18921                           
 18922                           
 18923                           ;psect for function _setBuz
 18924  140B                     _setBuz:	
 18925                           
 18926                           ;incstack = 0
 18927                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 18928                           ;setBuz@count stored from wreg
 18929  140B  0020               	movlb	0	; select bank0
 18930  140C  00AC               	movwf	setBuz@count
 18931                           
 18932                           ;Buzzer_B1.c: 23: time /= 20;
 18933  140D  3014               	movlw	20
 18934  140E  00A0               	movwf	___awdiv@divisor
 18935  140F  3000               	movlw	0
 18936  1410  00A1               	movwf	___awdiv@divisor+1
 18937  1411  082A               	movf	setBuz@time+1,w
 18938  1412  01A3               	clrf	___awdiv@dividend+1
 18939  1413  07A3               	addwf	___awdiv@dividend+1,f
 18940  1414  0829               	movf	setBuz@time,w
 18941  1415  01A2               	clrf	___awdiv@dividend
 18942  1416  07A2               	addwf	___awdiv@dividend,f
 18943  1417  3193  2361  3194   	fcall	___awdiv
 18944  141A  0020               	movlb	0	; select bank0
 18945  141B  0821               	movf	?___awdiv+1,w
 18946  141C  01AA               	clrf	setBuz@time+1
 18947  141D  07AA               	addwf	setBuz@time+1,f
 18948  141E  0820               	movf	?___awdiv,w
 18949  141F  01A9               	clrf	setBuz@time
 18950  1420  07A9               	addwf	setBuz@time,f
 18951                           
 18952                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 18953  1421  0022               	movlb	2	; select bank2
 18954  1422  1C20               	btfss	_Buz1^(0+256),0
 18955  1423  0008               	return
 18956                           
 18957                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 18958  1424  18A0               	btfsc	_Buz1^(0+256),1
 18959  1425  2C3C               	goto	l98
 18960                           
 18961                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 18962  1426  14A0               	bsf	_Buz1^(0+256),1
 18963                           
 18964                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 18965  1427  01A1               	clrf	(_Buz1^(0+256)+1)
 18966  1428  01A2               	clrf	((_Buz1+1)^(0+256)+1)
 18967                           
 18968                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 18969  1429  0020               	movlb	0	; select bank0
 18970  142A  082C               	movf	setBuz@count,w
 18971  142B  00AB               	movwf	??_setBuz
 18972  142C  082B               	movf	??_setBuz,w
 18973  142D  0022               	movlb	2	; select bank2
 18974  142E  00A3               	movwf	(_Buz1^(0+256)+3)
 18975                           
 18976                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 18977  142F  0020               	movlb	0	; select bank0
 18978  1430  082A               	movf	setBuz@time+1,w
 18979  1431  0022               	movlb	2	; select bank2
 18980  1432  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 18981  1433  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 18982  1434  0020               	movlb	0	; select bank0
 18983  1435  0829               	movf	setBuz@time,w
 18984  1436  0022               	movlb	2	; select bank2
 18985  1437  01A6               	clrf	(_Buz1^(0+256)+6)
 18986  1438  07A6               	addwf	(_Buz1^(0+256)+6),f
 18987                           
 18988                           ;Buzzer_B1.c: 30: RB3 = 1;
 18989  1439  0020               	movlb	0	; select bank0
 18990  143A  158D               	bsf	13,3	;volatile
 18991                           
 18992                           ;Buzzer_B1.c: 31: } else {
 18993  143B  0008               	return
 18994  143C                     l98:	
 18995                           
 18996                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 18997  143C  19A0               	btfsc	_Buz1^(0+256),3
 18998  143D  2C50               	goto	l100
 18999                           
 19000                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 19001  143E  15A0               	bsf	_Buz1^(0+256),3
 19002                           
 19003                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 19004  143F  0020               	movlb	0	; select bank0
 19005  1440  082C               	movf	setBuz@count,w
 19006  1441  00AB               	movwf	??_setBuz
 19007  1442  082B               	movf	??_setBuz,w
 19008  1443  0022               	movlb	2	; select bank2
 19009  1444  00A4               	movwf	(_Buz1^(0+256)+4)
 19010                           
 19011                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 19012  1445  0020               	movlb	0	; select bank0
 19013  1446  082A               	movf	setBuz@time+1,w
 19014  1447  0022               	movlb	2	; select bank2
 19015  1448  01A9               	clrf	((_Buz1+1)^(0+256)+8)
 19016  1449  07A9               	addwf	((_Buz1+1)^(0+256)+8),f
 19017  144A  0020               	movlb	0	; select bank0
 19018  144B  0829               	movf	setBuz@time,w
 19019  144C  0022               	movlb	2	; select bank2
 19020  144D  01A8               	clrf	(_Buz1^(0+256)+8)
 19021  144E  07A8               	addwf	(_Buz1^(0+256)+8),f
 19022                           
 19023                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 19024  144F  0008               	return
 19025  1450                     l100:	
 19026  1450  1A20               	btfsc	_Buz1^(0+256),4
 19027  1451  0008               	return
 19028                           
 19029                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 19030  1452  1620               	bsf	_Buz1^(0+256),4
 19031                           
 19032                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 19033  1453  0020               	movlb	0	; select bank0
 19034  1454  082C               	movf	setBuz@count,w
 19035  1455  00AB               	movwf	??_setBuz
 19036  1456  082B               	movf	??_setBuz,w
 19037  1457  0022               	movlb	2	; select bank2
 19038  1458  00A5               	movwf	(_Buz1^(0+256)+5)
 19039                           
 19040                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 19041  1459  0020               	movlb	0	; select bank0
 19042  145A  082A               	movf	setBuz@time+1,w
 19043  145B  0022               	movlb	2	; select bank2
 19044  145C  01AB               	clrf	((_Buz1+1)^(0+256)+10)
 19045  145D  07AB               	addwf	((_Buz1+1)^(0+256)+10),f
 19046  145E  0020               	movlb	0	; select bank0
 19047  145F  0829               	movf	setBuz@time,w
 19048  1460  0022               	movlb	2	; select bank2
 19049  1461  01AA               	clrf	(_Buz1^(0+256)+10)
 19050  1462  07AA               	addwf	(_Buz1^(0+256)+10),f
 19051  1463  0008               	return
 19052  1464                     __end_of_setBuz:	
 19053                           
 19054                           	psect	text129
 19055  1361                     __ptext129:	
 19056 ;; *************** function ___awdiv *****************
 19057 ;; Defined at:
 19058 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 19059 ;; Parameters:    Size  Location     Type
 19060 ;;  divisor         2    0[BANK0 ] int 
 19061 ;;  dividend        2    2[BANK0 ] int 
 19062 ;; Auto vars:     Size  Location     Type
 19063 ;;  quotient        2    7[BANK0 ] int 
 19064 ;;  sign            1    6[BANK0 ] unsigned char 
 19065 ;;  counter         1    5[BANK0 ] unsigned char 
 19066 ;; Return value:  Size  Location     Type
 19067 ;;                  2    0[BANK0 ] int 
 19068 ;; Registers used:
 19069 ;;		wreg, status,2, status,0
 19070 ;; Tracked objects:
 19071 ;;		On entry : 0/0
 19072 ;;		On exit  : 0/0
 19073 ;;		Unchanged: 0/0
 19074 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19075 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19076 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19077 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19078 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19079 ;;Total ram usage:        9 bytes
 19080 ;; Hardware stack levels used:    1
 19081 ;; Hardware stack levels required when called:    5
 19082 ;; This function calls:
 19083 ;;		Nothing
 19084 ;; This function is called by:
 19085 ;;		_setBuz
 19086 ;; This function uses a non-reentrant model
 19087 ;;
 19088                           
 19089                           
 19090                           ;psect for function ___awdiv
 19091  1361                     ___awdiv:	
 19092                           
 19093                           ;incstack = 0
 19094                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 19095  1361  0020               	movlb	0	; select bank0
 19096  1362  01A6               	clrf	___awdiv@sign
 19097  1363  1FA1               	btfss	___awdiv@divisor+1,7
 19098  1364  2B6C               	goto	l6354
 19099  1365  09A0               	comf	___awdiv@divisor,f
 19100  1366  09A1               	comf	___awdiv@divisor+1,f
 19101  1367  0AA0               	incf	___awdiv@divisor,f
 19102  1368  1903               	skipnz
 19103  1369  0AA1               	incf	___awdiv@divisor+1,f
 19104  136A  01A6               	clrf	___awdiv@sign
 19105  136B  0AA6               	incf	___awdiv@sign,f
 19106  136C                     l6354:	
 19107  136C  1FA3               	btfss	___awdiv@dividend+1,7
 19108  136D  2B77               	goto	l6360
 19109  136E  09A2               	comf	___awdiv@dividend,f
 19110  136F  09A3               	comf	___awdiv@dividend+1,f
 19111  1370  0AA2               	incf	___awdiv@dividend,f
 19112  1371  1903               	skipnz
 19113  1372  0AA3               	incf	___awdiv@dividend+1,f
 19114  1373  3001               	movlw	1
 19115  1374  00A4               	movwf	??___awdiv
 19116  1375  0824               	movf	??___awdiv,w
 19117  1376  06A6               	xorwf	___awdiv@sign,f
 19118  1377                     l6360:	
 19119  1377  01A7               	clrf	___awdiv@quotient
 19120  1378  01A8               	clrf	___awdiv@quotient+1
 19121  1379  0821               	movf	___awdiv@divisor+1,w
 19122  137A  0420               	iorwf	___awdiv@divisor,w
 19123  137B  1903               	skipnz
 19124  137C  2BA6               	goto	l6382
 19125  137D  01A5               	clrf	___awdiv@counter
 19126  137E  0AA5               	incf	___awdiv@counter,f
 19127  137F                     l6370:	
 19128  137F  1BA1               	btfsc	___awdiv@divisor+1,7
 19129  1380  2B8B               	goto	l6372
 19130  1381  3001               	movlw	1
 19131  1382                     u5275:	
 19132  1382  35A0               	lslf	___awdiv@divisor,f
 19133  1383  0DA1               	rlf	___awdiv@divisor+1,f
 19134  1384  0B89               	decfsz	9,f
 19135  1385  2B82               	goto	u5275
 19136  1386  3001               	movlw	1
 19137  1387  00A4               	movwf	??___awdiv
 19138  1388  0824               	movf	??___awdiv,w
 19139  1389  07A5               	addwf	___awdiv@counter,f
 19140  138A  2B7F               	goto	l6370
 19141  138B                     l6372:	
 19142  138B  3001               	movlw	1
 19143  138C                     u5295:	
 19144  138C  35A7               	lslf	___awdiv@quotient,f
 19145  138D  0DA8               	rlf	___awdiv@quotient+1,f
 19146  138E  0B89               	decfsz	9,f
 19147  138F  2B8C               	goto	u5295
 19148  1390  0821               	movf	___awdiv@divisor+1,w
 19149  1391  0223               	subwf	___awdiv@dividend+1,w
 19150  1392  1D03               	skipz
 19151  1393  2B96               	goto	u5305
 19152  1394  0820               	movf	___awdiv@divisor,w
 19153  1395  0222               	subwf	___awdiv@dividend,w
 19154  1396                     u5305:	
 19155  1396  1C03               	skipc
 19156  1397  2B9D               	goto	l6378
 19157  1398  0820               	movf	___awdiv@divisor,w
 19158  1399  02A2               	subwf	___awdiv@dividend,f
 19159  139A  0821               	movf	___awdiv@divisor+1,w
 19160  139B  3BA3               	subwfb	___awdiv@dividend+1,f
 19161  139C  1427               	bsf	___awdiv@quotient,0
 19162  139D                     l6378:	
 19163  139D  3001               	movlw	1
 19164  139E                     u5315:	
 19165  139E  36A1               	lsrf	___awdiv@divisor+1,f
 19166  139F  0CA0               	rrf	___awdiv@divisor,f
 19167  13A0  0B89               	decfsz	9,f
 19168  13A1  2B9E               	goto	u5315
 19169  13A2  3001               	movlw	1
 19170  13A3  02A5               	subwf	___awdiv@counter,f
 19171  13A4  1D03               	btfss	3,2
 19172  13A5  2B8B               	goto	l6372
 19173  13A6                     l6382:	
 19174  13A6  0826               	movf	___awdiv@sign,w
 19175  13A7  1903               	btfsc	3,2
 19176  13A8  2BAE               	goto	l6386
 19177  13A9  09A7               	comf	___awdiv@quotient,f
 19178  13AA  09A8               	comf	___awdiv@quotient+1,f
 19179  13AB  0AA7               	incf	___awdiv@quotient,f
 19180  13AC  1903               	skipnz
 19181  13AD  0AA8               	incf	___awdiv@quotient+1,f
 19182  13AE                     l6386:	
 19183  13AE  0828               	movf	___awdiv@quotient+1,w
 19184  13AF  01A1               	clrf	?___awdiv+1
 19185  13B0  07A1               	addwf	?___awdiv+1,f
 19186  13B1  0827               	movf	___awdiv@quotient,w
 19187  13B2  01A0               	clrf	?___awdiv
 19188  13B3  07A0               	addwf	?___awdiv,f
 19189  13B4  0008               	return
 19190  13B5                     __end_of___awdiv:	
 19191                           
 19192                           	psect	text130
 19193  07C6                     __ptext130:	
 19194 ;; *************** function _setDimmerLights_SwOff *****************
 19195 ;; Defined at:
 19196 ;;		line 732 in file "../src/Dimmer_B1.c"
 19197 ;; Parameters:    Size  Location     Type
 19198 ;;  sw              1    wreg     unsigned char 
 19199 ;; Auto vars:     Size  Location     Type
 19200 ;;  sw              1    2[BANK0 ] unsigned char 
 19201 ;; Return value:  Size  Location     Type
 19202 ;;		None               void
 19203 ;; Registers used:
 19204 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19205 ;; Tracked objects:
 19206 ;;		On entry : 0/0
 19207 ;;		On exit  : 0/0
 19208 ;;		Unchanged: 0/0
 19209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19211 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19213 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19214 ;;Total ram usage:        1 bytes
 19215 ;; Hardware stack levels used:    1
 19216 ;; Hardware stack levels required when called:    6
 19217 ;; This function calls:
 19218 ;;		_DimmerLights_SelectPointer
 19219 ;; This function is called by:
 19220 ;;		_DlyOff_Main
 19221 ;;		_setControl_Lights_Table
 19222 ;;		_setRFSW_Control
 19223 ;;		_setRFSW_AdjControl
 19224 ;;		_setSw_Main
 19225 ;;		_Exception_Main
 19226 ;; This function uses a non-reentrant model
 19227 ;;
 19228                           
 19229                           
 19230                           ;psect for function _setDimmerLights_SwOff
 19231  07C6                     _setDimmerLights_SwOff:	
 19232                           
 19233                           ;incstack = 0
 19234                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 19235                           ;setDimmerLights_SwOff@sw stored from wreg
 19236  07C6  0020               	movlb	0	; select bank0
 19237  07C7  00A2               	movwf	setDimmerLights_SwOff@sw
 19238                           
 19239                           ;Dimmer_B1.c: 733: DimmerLights_SelectPointer(sw);
 19240  07C8  0822               	movf	setDimmerLights_SwOff@sw,w
 19241  07C9  319B  23D2  3187   	fcall	_DimmerLights_SelectPointer
 19242                           
 19243                           ;Dimmer_B1.c: 735: if (DimmerLights->SwFlag == 1) {
 19244  07CC  0021               	movlb	1	; select bank1
 19245  07CD  0856               	movf	_DimmerLights^(0+128),w
 19246  07CE  0086               	movwf	6
 19247  07CF  3001               	movlw	1	; select bank2/3
 19248  07D0  0087               	movwf	7
 19249  07D1  1C01               	btfss	1,0
 19250  07D2  0008               	return
 19251                           
 19252                           ;Dimmer_B1.c: 736: DimmerLights->SwFlag = 0;
 19253  07D3  0856               	movf	_DimmerLights^(0+128),w
 19254  07D4  0086               	movwf	6
 19255  07D5  3001               	movlw	1	; select bank2/3
 19256  07D6  0087               	movwf	7
 19257  07D7  1001               	bcf	1,0
 19258                           
 19259                           ;Dimmer_B1.c: 737: if (DimmerLights->Status == 1) {
 19260  07D8  0A56               	incf	_DimmerLights^(0+128),w
 19261  07D9  0086               	movwf	6
 19262  07DA  3001               	movlw	1	; select bank2/3
 19263  07DB  0087               	movwf	7
 19264  07DC  1C01               	btfss	1,0
 19265  07DD  2FF4               	goto	l6760
 19266                           
 19267                           ;Dimmer_B1.c: 738: if (DimmerLights->DimmingSwFlag == 1) {
 19268  07DE  0856               	movf	_DimmerLights^(0+128),w
 19269  07DF  0086               	movwf	6
 19270  07E0  3001               	movlw	1	; select bank2/3
 19271  07E1  0087               	movwf	7
 19272  07E2  1D81               	btfss	1,3
 19273  07E3  0008               	return
 19274                           
 19275                           ;Dimmer_B1.c: 739: DimmerLights->DimmingSwFlag = 0;
 19276  07E4  0856               	movf	_DimmerLights^(0+128),w
 19277  07E5  0086               	movwf	6
 19278  07E6  3001               	movlw	1	; select bank2/3
 19279  07E7  0087               	movwf	7
 19280  07E8  1181               	bcf	1,3
 19281                           
 19282                           ;Dimmer_B1.c: 741: DimmerLights->DimmingTrigger = 1;
 19283  07E9  0856               	movf	_DimmerLights^(0+128),w
 19284  07EA  0086               	movwf	6
 19285  07EB  3001               	movlw	1	; select bank2/3
 19286  07EC  0087               	movwf	7
 19287  07ED  1601               	bsf	1,4
 19288                           
 19289                           ;Dimmer_B1.c: 742: DimmerLights->DimmingSwitch = 0;
 19290  07EE  0856               	movf	_DimmerLights^(0+128),w
 19291  07EF  0086               	movwf	6
 19292  07F0  3001               	movlw	1	; select bank2/3
 19293  07F1  0087               	movwf	7
 19294  07F2  1281               	bcf	1,5
 19295                           
 19296                           ;Dimmer_B1.c: 743: }
 19297                           ;Dimmer_B1.c: 744: } else {
 19298  07F3  0008               	return
 19299  07F4                     l6760:	
 19300                           
 19301                           ;Dimmer_B1.c: 746: DimmerLights->Trigger = 1;
 19302  07F4  0856               	movf	_DimmerLights^(0+128),w
 19303  07F5  0086               	movwf	6
 19304  07F6  3001               	movlw	1	; select bank2/3
 19305  07F7  0087               	movwf	7
 19306  07F8  1481               	bsf	1,1
 19307                           
 19308                           ;Dimmer_B1.c: 747: DimmerLights->Switch = 0;
 19309  07F9  0856               	movf	_DimmerLights^(0+128),w
 19310  07FA  0086               	movwf	6
 19311  07FB  3001               	movlw	1	; select bank2/3
 19312  07FC  0087               	movwf	7
 19313  07FD  1101               	bcf	1,2
 19314  07FE  0008               	return
 19315  07FF                     __end_of_setDimmerLights_SwOff:	
 19316                           
 19317                           	psect	text131
 19318  1A09                     __ptext131:	
 19319 ;; *************** function _getDimmerLights_Status *****************
 19320 ;; Defined at:
 19321 ;;		line 1073 in file "../src/Dimmer_B1.c"
 19322 ;; Parameters:    Size  Location     Type
 19323 ;;  lights          1    wreg     unsigned char 
 19324 ;; Auto vars:     Size  Location     Type
 19325 ;;  lights          1    2[BANK0 ] unsigned char 
 19326 ;;  status          1    3[BANK0 ] unsigned char 
 19327 ;; Return value:  Size  Location     Type
 19328 ;;                  1    wreg      unsigned char 
 19329 ;; Registers used:
 19330 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19331 ;; Tracked objects:
 19332 ;;		On entry : 0/0
 19333 ;;		On exit  : 0/0
 19334 ;;		Unchanged: 0/0
 19335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19337 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19339 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19340 ;;Total ram usage:        2 bytes
 19341 ;; Hardware stack levels used:    1
 19342 ;; Hardware stack levels required when called:    6
 19343 ;; This function calls:
 19344 ;;		_DimmerLights_SelectPointer
 19345 ;; This function is called by:
 19346 ;;		_DlyOff_Main
 19347 ;;		_setControl_Lights_Table
 19348 ;;		_setRFSW_Control
 19349 ;;		_setRFSW_AdjControl
 19350 ;;		_Exception_Main
 19351 ;; This function uses a non-reentrant model
 19352 ;;
 19353                           
 19354                           
 19355                           ;psect for function _getDimmerLights_Status
 19356  1A09                     _getDimmerLights_Status:	
 19357                           
 19358                           ;incstack = 0
 19359                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 19360                           ;getDimmerLights_Status@lights stored from wreg
 19361  1A09  0020               	movlb	0	; select bank0
 19362  1A0A  00A2               	movwf	getDimmerLights_Status@lights
 19363                           
 19364                           ;Dimmer_B1.c: 1074: DimmerLights_SelectPointer(lights);
 19365  1A0B  0822               	movf	getDimmerLights_Status@lights,w
 19366  1A0C  319B  23D2         	fcall	_DimmerLights_SelectPointer
 19367                           
 19368                           ;Dimmer_B1.c: 1075: char status = DimmerLights->Status == 1 ? 1 : 0;
 19369  1A0E  0021               	movlb	1	; select bank1
 19370  1A0F  0A56               	incf	_DimmerLights^(0+128),w
 19371  1A10  0086               	movwf	6
 19372  1A11  3001               	movlw	1	; select bank2/3
 19373  1A12  0087               	movwf	7
 19374  1A13  3000               	movlw	0
 19375  1A14  1801               	btfsc	1,0
 19376  1A15  3001               	movlw	1
 19377  1A16  0020               	movlb	0	; select bank0
 19378  1A17  00A3               	movwf	getDimmerLights_Status@status
 19379                           
 19380                           ;Dimmer_B1.c: 1076: return status;
 19381  1A18  0823               	movf	getDimmerLights_Status@status,w
 19382  1A19  0008               	return
 19383  1A1A                     __end_of_getDimmerLights_Status:	
 19384                           
 19385                           	psect	text132
 19386  1BD2                     __ptext132:	
 19387 ;; *************** function _DimmerLights_SelectPointer *****************
 19388 ;; Defined at:
 19389 ;;		line 614 in file "../src/Dimmer_B1.c"
 19390 ;; Parameters:    Size  Location     Type
 19391 ;;  lights          1    wreg     unsigned char 
 19392 ;; Auto vars:     Size  Location     Type
 19393 ;;  lights          1    1[BANK0 ] unsigned char 
 19394 ;; Return value:  Size  Location     Type
 19395 ;;		None               void
 19396 ;; Registers used:
 19397 ;;		wreg
 19398 ;; Tracked objects:
 19399 ;;		On entry : 0/0
 19400 ;;		On exit  : 0/0
 19401 ;;		Unchanged: 0/0
 19402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19403 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19404 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19405 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19406 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19407 ;;Total ram usage:        2 bytes
 19408 ;; Hardware stack levels used:    1
 19409 ;; Hardware stack levels required when called:    5
 19410 ;; This function calls:
 19411 ;;		Nothing
 19412 ;; This function is called by:
 19413 ;;		_setDimmerLights_SwOn
 19414 ;;		_setDimmerLights_SwOff
 19415 ;;		_setDimmerLights_DimmingOn
 19416 ;;		_setDimmerLights_Main
 19417 ;;		_getDimmerLights_Status
 19418 ;;		_setDimmerLights_DimmingRun
 19419 ;;		_setDimmerLights_Status
 19420 ;; This function uses a non-reentrant model
 19421 ;;
 19422                           
 19423                           
 19424                           ;psect for function _DimmerLights_SelectPointer
 19425  1BD2                     _DimmerLights_SelectPointer:	
 19426                           
 19427                           ;incstack = 0
 19428                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 19429                           ;DimmerLights_SelectPointer@lights stored from wreg
 19430  1BD2  0020               	movlb	0	; select bank0
 19431  1BD3  00A1               	movwf	DimmerLights_SelectPointer@lights
 19432                           
 19433                           ;Dimmer_B1.c: 616: if (lights == 1) {
 19434  1BD4  0821               	movf	DimmerLights_SelectPointer@lights,w
 19435  1BD5  3A01               	xorlw	1
 19436  1BD6  1D03               	skipz
 19437  1BD7  2BDE               	goto	l6432
 19438                           
 19439                           ;Dimmer_B1.c: 617: DimmerLights = &DimmerLights1;
 19440  1BD8  3067               	movlw	_DimmerLights1& (0+255)
 19441  1BD9  00A0               	movwf	??_DimmerLights_SelectPointer
 19442  1BDA  0820               	movf	??_DimmerLights_SelectPointer,w
 19443  1BDB  0021               	movlb	1	; select bank1
 19444  1BDC  00D6               	movwf	_DimmerLights^(0+128)
 19445                           
 19446                           ;Dimmer_B1.c: 618: }
 19447  1BDD  0008               	return
 19448  1BDE                     l6432:	
 19449                           
 19450                           ;Dimmer_B1.c: 621: else if (lights == 2) {
 19451  1BDE  0020               	movlb	0	; select bank0
 19452  1BDF  0821               	movf	DimmerLights_SelectPointer@lights,w
 19453  1BE0  3A02               	xorlw	2
 19454  1BE1  1D03               	skipz
 19455  1BE2  0008               	return
 19456                           
 19457                           ;Dimmer_B1.c: 622: DimmerLights = &DimmerLights2;
 19458  1BE3  30D0               	movlw	_DimmerLights2& (0+255)
 19459  1BE4  00A0               	movwf	??_DimmerLights_SelectPointer
 19460  1BE5  0820               	movf	??_DimmerLights_SelectPointer,w
 19461  1BE6  0021               	movlb	1	; select bank1
 19462  1BE7  00D6               	movwf	_DimmerLights^(0+128)
 19463  1BE8  0008               	return
 19464  1BE9                     __end_of_DimmerLights_SelectPointer:	
 19465                           
 19466                           	psect	text133
 19467  190B                     __ptext133:	
 19468 ;; *************** function _DelayOff_Initialization *****************
 19469 ;; Defined at:
 19470 ;;		line 26 in file "../src/DelayOff_B1.c"
 19471 ;; Parameters:    Size  Location     Type
 19472 ;;		None
 19473 ;; Auto vars:     Size  Location     Type
 19474 ;;		None
 19475 ;; Return value:  Size  Location     Type
 19476 ;;		None               void
 19477 ;; Registers used:
 19478 ;;		wreg, status,2, status,0, pclath, cstack
 19479 ;; Tracked objects:
 19480 ;;		On entry : 0/0
 19481 ;;		On exit  : 0/0
 19482 ;;		Unchanged: 0/0
 19483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19487 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19488 ;;Total ram usage:        0 bytes
 19489 ;; Hardware stack levels used:    1
 19490 ;; Hardware stack levels required when called:    7
 19491 ;; This function calls:
 19492 ;;		_DlyOff_Initialization
 19493 ;; This function is called by:
 19494 ;;		_main
 19495 ;; This function uses a non-reentrant model
 19496 ;;
 19497                           
 19498                           
 19499                           ;psect for function _DelayOff_Initialization
 19500  190B                     _DelayOff_Initialization:	
 19501                           
 19502                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 19503                           
 19504                           ;incstack = 0
 19505                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 19506  190B  3001               	movlw	1
 19507  190C  3198  20F2  3199   	fcall	_DlyOff_Initialization
 19508                           
 19509                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 19510  190F  3002               	movlw	2
 19511  1910  3198  20F2         	fcall	_DlyOff_Initialization
 19512  1912  0008               	return
 19513  1913                     __end_of_DelayOff_Initialization:	
 19514                           
 19515                           	psect	text134
 19516  18F2                     __ptext134:	
 19517 ;; *************** function _DlyOff_Initialization *****************
 19518 ;; Defined at:
 19519 ;;		line 56 in file "../src/DelayOff_B1.c"
 19520 ;; Parameters:    Size  Location     Type
 19521 ;;  sw              1    wreg     unsigned char 
 19522 ;; Auto vars:     Size  Location     Type
 19523 ;;  sw              1    2[BANK0 ] unsigned char 
 19524 ;; Return value:  Size  Location     Type
 19525 ;;		None               void
 19526 ;; Registers used:
 19527 ;;		wreg, status,2, status,0, pclath, cstack
 19528 ;; Tracked objects:
 19529 ;;		On entry : 0/0
 19530 ;;		On exit  : 0/0
 19531 ;;		Unchanged: 0/0
 19532 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19534 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19536 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19537 ;;Total ram usage:        1 bytes
 19538 ;; Hardware stack levels used:    1
 19539 ;; Hardware stack levels required when called:    6
 19540 ;; This function calls:
 19541 ;;		_DelayOffPointSelect
 19542 ;; This function is called by:
 19543 ;;		_DelayOff_Initialization
 19544 ;; This function uses a non-reentrant model
 19545 ;;
 19546                           
 19547                           
 19548                           ;psect for function _DlyOff_Initialization
 19549  18F2                     _DlyOff_Initialization:	
 19550                           
 19551                           ;incstack = 0
 19552                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 19553                           ;DlyOff_Initialization@sw stored from wreg
 19554  18F2  0020               	movlb	0	; select bank0
 19555  18F3  00A2               	movwf	DlyOff_Initialization@sw
 19556                           
 19557                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 19558  18F4  0822               	movf	DlyOff_Initialization@sw,w
 19559  18F5  319B  23BB         	fcall	_DelayOffPointSelect
 19560  18F7  0008               	return
 19561  18F8                     __end_of_DlyOff_Initialization:	
 19562                           
 19563                           	psect	text135
 19564  1BBB                     __ptext135:	
 19565 ;; *************** function _DelayOffPointSelect *****************
 19566 ;; Defined at:
 19567 ;;		line 7 in file "../src/DelayOff_B1.c"
 19568 ;; Parameters:    Size  Location     Type
 19569 ;;  sw              1    wreg     unsigned char 
 19570 ;; Auto vars:     Size  Location     Type
 19571 ;;  sw              1    1[BANK0 ] unsigned char 
 19572 ;; Return value:  Size  Location     Type
 19573 ;;		None               void
 19574 ;; Registers used:
 19575 ;;		wreg
 19576 ;; Tracked objects:
 19577 ;;		On entry : 0/0
 19578 ;;		On exit  : 0/0
 19579 ;;		Unchanged: 0/0
 19580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19582 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19583 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19584 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19585 ;;Total ram usage:        2 bytes
 19586 ;; Hardware stack levels used:    1
 19587 ;; Hardware stack levels required when called:    5
 19588 ;; This function calls:
 19589 ;;		Nothing
 19590 ;; This function is called by:
 19591 ;;		_DlyOff_Initialization
 19592 ;;		_DlyOff_Main
 19593 ;;		_setDelayOff_GO
 19594 ;;		_getDelayOff_GO
 19595 ;; This function uses a non-reentrant model
 19596 ;;
 19597                           
 19598                           
 19599                           ;psect for function _DelayOffPointSelect
 19600  1BBB                     _DelayOffPointSelect:	
 19601                           
 19602                           ;incstack = 0
 19603                           ; Regs used in _DelayOffPointSelect: [wreg]
 19604                           ;DelayOffPointSelect@sw stored from wreg
 19605  1BBB  0020               	movlb	0	; select bank0
 19606  1BBC  00A1               	movwf	DelayOffPointSelect@sw
 19607                           
 19608                           ;DelayOff_B1.c: 9: if (sw == 1) {
 19609  1BBD  0821               	movf	DelayOffPointSelect@sw,w
 19610  1BBE  3A01               	xorlw	1
 19611  1BBF  1D03               	skipz
 19612  1BC0  2BC7               	goto	l6422
 19613                           
 19614                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 19615  1BC1  30D8               	movlw	_DlySw1& (0+255)
 19616  1BC2  00A0               	movwf	??_DelayOffPointSelect
 19617  1BC3  0820               	movf	??_DelayOffPointSelect,w
 19618  1BC4  0021               	movlb	1	; select bank1
 19619  1BC5  00D5               	movwf	_DelayOff^(0+128)
 19620                           
 19621                           ;DelayOff_B1.c: 11: }
 19622  1BC6  0008               	return
 19623  1BC7                     l6422:	
 19624                           
 19625                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 19626  1BC7  0020               	movlb	0	; select bank0
 19627  1BC8  0821               	movf	DelayOffPointSelect@sw,w
 19628  1BC9  3A02               	xorlw	2
 19629  1BCA  1D03               	skipz
 19630  1BCB  0008               	return
 19631                           
 19632                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 19633  1BCC  30DD               	movlw	_DlySw2& (0+255)
 19634  1BCD  00A0               	movwf	??_DelayOffPointSelect
 19635  1BCE  0820               	movf	??_DelayOffPointSelect,w
 19636  1BCF  0021               	movlb	1	; select bank1
 19637  1BD0  00D5               	movwf	_DelayOff^(0+128)
 19638  1BD1  0008               	return
 19639  1BD2                     __end_of_DelayOffPointSelect:	
 19640                           
 19641                           	psect	text136
 19642  12C4                     __ptext136:	
 19643 ;; *************** function _Buzzer_Main *****************
 19644 ;; Defined at:
 19645 ;;		line 46 in file "../src/Buzzer_B1.c"
 19646 ;; Parameters:    Size  Location     Type
 19647 ;;		None
 19648 ;; Auto vars:     Size  Location     Type
 19649 ;;		None
 19650 ;; Return value:  Size  Location     Type
 19651 ;;		None               void
 19652 ;; Registers used:
 19653 ;;		wreg, status,2, status,0
 19654 ;; Tracked objects:
 19655 ;;		On entry : 0/0
 19656 ;;		On exit  : 0/0
 19657 ;;		Unchanged: 0/0
 19658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19659 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19660 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19661 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19662 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19663 ;;Total ram usage:        1 bytes
 19664 ;; Hardware stack levels used:    1
 19665 ;; Hardware stack levels required when called:    5
 19666 ;; This function calls:
 19667 ;;		Nothing
 19668 ;; This function is called by:
 19669 ;;		_main
 19670 ;; This function uses a non-reentrant model
 19671 ;;
 19672                           
 19673                           
 19674                           ;psect for function _Buzzer_Main
 19675  12C4                     _Buzzer_Main:	
 19676                           
 19677                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 19678                           
 19679                           ;incstack = 0
 19680                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 19681  12C4  0022               	movlb	2	; select bank2
 19682  12C5  1CA0               	btfss	_Buz1^(0+256),1
 19683  12C6  0008               	return
 19684                           
 19685                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 19686  12C7  3001               	movlw	1
 19687  12C8  07A1               	addwf	(_Buz1^(0+256)+1),f
 19688  12C9  3000               	movlw	0
 19689  12CA  3DA2               	addwfc	((_Buz1+1)^(0+256)+1),f
 19690                           
 19691                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 19692  12CB  0827               	movf	((_Buz1+1)^(0+256)+6),w
 19693  12CC  0222               	subwf	((_Buz1+1)^(0+256)+1),w
 19694  12CD  1D03               	skipz
 19695  12CE  2AD1               	goto	u9185
 19696  12CF  0826               	movf	(_Buz1^(0+256)+6),w
 19697  12D0  0221               	subwf	(_Buz1^(0+256)+1),w
 19698  12D1                     u9185:	
 19699  12D1  1C03               	skipc
 19700  12D2  0008               	return
 19701                           
 19702                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 19703  12D3  01A1               	clrf	(_Buz1^(0+256)+1)
 19704  12D4  01A2               	clrf	((_Buz1+1)^(0+256)+1)
 19705                           
 19706                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 19707  12D5  12A0               	bcf	_Buz1^(0+256),5
 19708  12D6  0020               	movlb	0	; select bank0
 19709  12D7  1D8D               	btfss	13,3	;volatile
 19710  12D8  2ADB               	goto	l8568
 19711  12D9  0022               	movlb	2	; select bank2
 19712  12DA  16A0               	bsf	_Buz1^(0+256),5
 19713  12DB                     l8568:	
 19714                           
 19715                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 19716  12DB  0022               	movlb	2	; select bank2
 19717  12DC  1AA0               	btfsc	_Buz1^(0+256),5
 19718  12DD  2B07               	goto	l108
 19719                           
 19720                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 19721  12DE  08A3               	movf	(_Buz1^(0+256)+3),f
 19722  12DF  1D03               	skipz
 19723  12E0  2B03               	goto	l109
 19724                           
 19725                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 19726  12E1  1DA0               	btfss	_Buz1^(0+256),3
 19727  12E2  2AF1               	goto	l110
 19728                           
 19729                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 19730  12E3  11A0               	bcf	_Buz1^(0+256),3
 19731                           
 19732                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 19733  12E4  0824               	movf	(_Buz1^(0+256)+4),w
 19734  12E5  0020               	movlb	0	; select bank0
 19735  12E6  00A0               	movwf	??_Buzzer_Main
 19736  12E7  0820               	movf	??_Buzzer_Main,w
 19737  12E8  0022               	movlb	2	; select bank2
 19738  12E9  00A3               	movwf	(_Buz1^(0+256)+3)
 19739                           
 19740                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 19741  12EA  0829               	movf	((_Buz1+1)^(0+256)+8),w
 19742  12EB  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 19743  12EC  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 19744  12ED  0828               	movf	(_Buz1^(0+256)+8),w
 19745  12EE  01A6               	clrf	(_Buz1^(0+256)+6)
 19746  12EF  07A6               	addwf	(_Buz1^(0+256)+6),f
 19747                           
 19748                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 19749  12F0  0008               	return
 19750  12F1                     l110:	
 19751  12F1  1E20               	btfss	_Buz1^(0+256),4
 19752  12F2  2B01               	goto	l112
 19753                           
 19754                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 19755  12F3  1220               	bcf	_Buz1^(0+256),4
 19756                           
 19757                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 19758  12F4  0825               	movf	(_Buz1^(0+256)+5),w
 19759  12F5  0020               	movlb	0	; select bank0
 19760  12F6  00A0               	movwf	??_Buzzer_Main
 19761  12F7  0820               	movf	??_Buzzer_Main,w
 19762  12F8  0022               	movlb	2	; select bank2
 19763  12F9  00A3               	movwf	(_Buz1^(0+256)+3)
 19764                           
 19765                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 19766  12FA  082B               	movf	((_Buz1+1)^(0+256)+10),w
 19767  12FB  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 19768  12FC  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 19769  12FD  082A               	movf	(_Buz1^(0+256)+10),w
 19770  12FE  01A6               	clrf	(_Buz1^(0+256)+6)
 19771  12FF  07A6               	addwf	(_Buz1^(0+256)+6),f
 19772                           
 19773                           ;Buzzer_B1.c: 62: } else {
 19774  1300  0008               	return
 19775  1301                     l112:	
 19776                           
 19777                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 19778  1301  10A0               	bcf	_Buz1^(0+256),1
 19779                           
 19780                           ;Buzzer_B1.c: 64: }
 19781                           ;Buzzer_B1.c: 65: } else {
 19782  1302  0008               	return
 19783  1303                     l109:	
 19784                           
 19785                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 19786  1303  16A0               	bsf	_Buz1^(0+256),5
 19787                           
 19788                           ;Buzzer_B1.c: 68: RB3 = 1;
 19789  1304  0020               	movlb	0	; select bank0
 19790  1305  158D               	bsf	13,3	;volatile
 19791                           
 19792                           ;Buzzer_B1.c: 69: }
 19793                           ;Buzzer_B1.c: 70: } else {
 19794  1306  0008               	return
 19795  1307                     l108:	
 19796                           
 19797                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 19798  1307  12A0               	bcf	_Buz1^(0+256),5
 19799                           
 19800                           ;Buzzer_B1.c: 73: RB3 = 0;
 19801  1308  0020               	movlb	0	; select bank0
 19802  1309  118D               	bcf	13,3	;volatile
 19803                           
 19804                           ;Buzzer_B1.c: 75: Buz1.Count--;
 19805  130A  3001               	movlw	1
 19806  130B  0022               	movlb	2	; select bank2
 19807  130C  02A3               	subwf	(_Buz1^(0+256)+3),f
 19808  130D  0008               	return
 19809  130E                     __end_of_Buzzer_Main:	
 19810                           
 19811                           	psect	text137
 19812  18CA                     __ptext137:	
 19813 ;; *************** function _Buzzer_Initialization *****************
 19814 ;; Defined at:
 19815 ;;		line 11 in file "../src/Buzzer_B1.c"
 19816 ;; Parameters:    Size  Location     Type
 19817 ;;		None
 19818 ;; Auto vars:     Size  Location     Type
 19819 ;;		None
 19820 ;; Return value:  Size  Location     Type
 19821 ;;		None               void
 19822 ;; Registers used:
 19823 ;;		None
 19824 ;; Tracked objects:
 19825 ;;		On entry : 0/0
 19826 ;;		On exit  : 0/0
 19827 ;;		Unchanged: 0/0
 19828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19830 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19832 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19833 ;;Total ram usage:        0 bytes
 19834 ;; Hardware stack levels used:    1
 19835 ;; Hardware stack levels required when called:    5
 19836 ;; This function calls:
 19837 ;;		Nothing
 19838 ;; This function is called by:
 19839 ;;		_main
 19840 ;; This function uses a non-reentrant model
 19841 ;;
 19842                           
 19843                           
 19844                           ;psect for function _Buzzer_Initialization
 19845  18CA                     _Buzzer_Initialization:	
 19846                           
 19847                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 19848                           
 19849                           ;incstack = 0
 19850                           ; Regs used in _Buzzer_Initialization: []
 19851  18CA  0022               	movlb	2	; select bank2
 19852  18CB  1420               	bsf	_Buz1^(0+256),0
 19853  18CC  0008               	return
 19854  18CD                     __end_of_Buzzer_Initialization:	
 19855                           
 19856                           	psect	intentry
 19857  0004                     __pintentry:	
 19858 ;; *************** function _ISR *****************
 19859 ;; Defined at:
 19860 ;;		line 116 in file "../src/MCU_B1.c"
 19861 ;; Parameters:    Size  Location     Type
 19862 ;;		None
 19863 ;; Auto vars:     Size  Location     Type
 19864 ;;		None
 19865 ;; Return value:  Size  Location     Type
 19866 ;;		None               void
 19867 ;; Registers used:
 19868 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19869 ;; Tracked objects:
 19870 ;;		On entry : 0/0
 19871 ;;		On exit  : 0/0
 19872 ;;		Unchanged: 0/0
 19873 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19874 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19876 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19877 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19878 ;;Total ram usage:        1 bytes
 19879 ;; Hardware stack levels used:    1
 19880 ;; Hardware stack levels required when called:    4
 19881 ;; This function calls:
 19882 ;;		_IOC_ISR
 19883 ;;		_TMR1_ISR
 19884 ;; This function is called by:
 19885 ;;		Interrupt level 1
 19886 ;; This function uses a non-reentrant model
 19887 ;;
 19888                           
 19889  0004                     _ISR:	
 19890                           
 19891                           ;incstack = 0
 19892                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19893  0004  147E               	bsf	126,0	;set compiler interrupt flag
 19894  0005  3180               	pagesel	$
 19895  0006  0020               	movlb	0	; select bank0
 19896  0007  087F               	movf	127,w
 19897  0008  00FC               	movwf	??_ISR
 19898                           
 19899                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
 19900  0009  0021               	movlb	1	; select bank1
 19901  000A  1C11               	btfss	17,0	;volatile
 19902  000B  2812               	goto	i1l9152
 19903  000C  0020               	movlb	0	; select bank0
 19904  000D  1C11               	btfss	17,0	;volatile
 19905  000E  2812               	goto	i1l9152
 19906                           
 19907                           ;MCU_B1.c: 126: TMR1_ISR();
 19908  000F  319E  263E  3180   	fcall	_TMR1_ISR
 19909  0012                     i1l9152:	
 19910                           
 19911                           ;MCU_B1.c: 127: }
 19912                           ;MCU_B1.c: 138: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 19913  0012  198B               	btfsc	11,3	;volatile
 19914  0013  1C0B               	btfss	11,0	;volatile
 19915  0014  281A               	goto	i1l1405
 19916  0015  0027               	movlb	7	; select bank7
 19917  0016  1D16               	btfss	22,2	;volatile
 19918  0017  281A               	goto	i1l1405
 19919                           
 19920                           ;MCU_B1.c: 139: IOC_ISR();
 19921  0018  3199  2181         	fcall	_IOC_ISR
 19922  001A                     i1l1405:	
 19923                           ;MCU_B1.c: 140: }
 19924                           ;MCU_B1.c: 148: return;
 19925                           
 19926  001A  087C               	movf	??_ISR,w
 19927  001B  0020               	movlb	0	; select bank0
 19928  001C  00FF               	movwf	127
 19929  001D  107E               	bcf	126,0	;clear compiler interrupt flag
 19930  001E  0009               	retfie
 19931  001F                     __end_of_ISR:	
 19932                           
 19933                           	psect	text139
 19934  1E3E                     __ptext139:	
 19935 ;; *************** function _TMR1_ISR *****************
 19936 ;; Defined at:
 19937 ;;		line 236 in file "../src/MCU_B1.c"
 19938 ;; Parameters:    Size  Location     Type
 19939 ;;		None
 19940 ;; Auto vars:     Size  Location     Type
 19941 ;;		None
 19942 ;; Return value:  Size  Location     Type
 19943 ;;		None               void
 19944 ;; Registers used:
 19945 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19946 ;; Tracked objects:
 19947 ;;		On entry : 0/0
 19948 ;;		On exit  : 0/0
 19949 ;;		Unchanged: 0/0
 19950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19951 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19954 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19955 ;;Total ram usage:        0 bytes
 19956 ;; Hardware stack levels used:    1
 19957 ;; Hardware stack levels required when called:    1
 19958 ;; This function calls:
 19959 ;;		_DimmerLights_TMR_1
 19960 ;;		_DimmerLights_TMR_2
 19961 ;; This function is called by:
 19962 ;;		_ISR
 19963 ;; This function uses a non-reentrant model
 19964 ;;
 19965                           
 19966                           
 19967                           ;psect for function _TMR1_ISR
 19968  1E3E                     _TMR1_ISR:	
 19969                           
 19970                           ;MCU_B1.c: 254: DimmerLights_TMR_1();
 19971                           
 19972                           ;incstack = 0
 19973                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19974  1E3E  3188  20CB  319E   	fcall	_DimmerLights_TMR_1
 19975                           
 19976                           ;MCU_B1.c: 259: DimmerLights_TMR_2();
 19977  1E41  3189  213B  319E   	fcall	_DimmerLights_TMR_2
 19978                           
 19979                           ;MCU_B1.c: 268: Timer1.Count++;
 19980  1E44  3001               	movlw	1
 19981  1E45  0022               	movlb	2	; select bank2
 19982  1E46  07B2               	addwf	(_Timer1^(0+256)+1),f
 19983  1E47  3000               	movlw	0
 19984  1E48  3DB3               	addwfc	((_Timer1+1)^(0+256)+1),f
 19985                           
 19986                           ;MCU_B1.c: 269: if (Timer1.Count == (int)(20*10)) {
 19987  1E49  3001               	movlw	1
 19988  1E4A  3E31               	addlw	_Timer1& (0+255)
 19989  1E4B  0086               	movwf	6
 19990  1E4C  3001               	movlw	1	; select bank2/3
 19991  1E4D  0087               	movwf	7
 19992  1E4E  3F40               	moviw [0]fsr1
 19993  1E4F  3AC8               	xorlw	200
 19994  1E50  1D03               	skipz
 19995  1E51  2E54               	goto	u928_25
 19996  1E52  3F41               	moviw [1]fsr1
 19997  1E53  3A00               	xorlw	0
 19998  1E54                     u928_25:	
 19999  1E54  1D03               	skipz
 20000  1E55  2E59               	goto	i1l8622
 20001                           
 20002                           ;MCU_B1.c: 270: Timer1.Count = 0;
 20003  1E56  01B2               	clrf	(_Timer1^(0+256)+1)
 20004  1E57  01B3               	clrf	((_Timer1+1)^(0+256)+1)
 20005                           
 20006                           ;MCU_B1.c: 271: Timer1.Timeout = 1;
 20007  1E58  1431               	bsf	_Timer1^(0+256),0
 20008  1E59                     i1l8622:	
 20009                           
 20010                           ;MCU_B1.c: 272: }
 20011                           ;MCU_B1.c: 274: TMR1H = (int)((65536-1480)/256);
 20012  1E59  30FA               	movlw	250
 20013  1E5A  0020               	movlb	0	; select bank0
 20014  1E5B  0097               	movwf	23	;volatile
 20015                           
 20016                           ;MCU_B1.c: 275: TMR1L = (int)((65536-1480)%256);
 20017  1E5C  3038               	movlw	56
 20018  1E5D  0096               	movwf	22	;volatile
 20019                           
 20020                           ;MCU_B1.c: 276: TMR1IF = 0;
 20021  1E5E  1011               	bcf	17,0	;volatile
 20022  1E5F  0008               	return
 20023  1E60                     __end_of_TMR1_ISR:	
 20024                           
 20025                           	psect	text140
 20026  093B                     __ptext140:	
 20027 ;; *************** function _DimmerLights_TMR_2 *****************
 20028 ;; Defined at:
 20029 ;;		line 1545 in file "../src/Dimmer_B1.c"
 20030 ;; Parameters:    Size  Location     Type
 20031 ;;		None
 20032 ;; Auto vars:     Size  Location     Type
 20033 ;;		None
 20034 ;; Return value:  Size  Location     Type
 20035 ;;		None               void
 20036 ;; Registers used:
 20037 ;;		wreg, status,2, status,0
 20038 ;; Tracked objects:
 20039 ;;		On entry : 0/0
 20040 ;;		On exit  : 0/0
 20041 ;;		Unchanged: 0/0
 20042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20044 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20045 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20046 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20047 ;;Total ram usage:        1 bytes
 20048 ;; Hardware stack levels used:    1
 20049 ;; This function calls:
 20050 ;;		Nothing
 20051 ;; This function is called by:
 20052 ;;		_TMR1_ISR
 20053 ;; This function uses a non-reentrant model
 20054 ;;
 20055                           
 20056                           
 20057                           ;psect for function _DimmerLights_TMR_2
 20058  093B                     _DimmerLights_TMR_2:	
 20059                           
 20060                           ;Dimmer_B1.c: 1547: if (DimmerIntr2.Start == 1) {
 20061                           
 20062                           ;incstack = 0
 20063                           ; Regs used in _DimmerLights_TMR_2: [wreg+status,2+status,0]
 20064  093B  0021               	movlb	1	; select bank1
 20065  093C  1D47               	btfss	_DimmerIntr2^(0+128),2
 20066  093D  2960               	goto	i1l997
 20067                           
 20068                           ;Dimmer_B1.c: 1548: DimmerIntr2.Count++;
 20069  093E  3001               	movlw	1
 20070  093F  00F0               	movwf	??_DimmerLights_TMR_2
 20071  0940  0870               	movf	??_DimmerLights_TMR_2,w
 20072  0941  07C9               	addwf	(_DimmerIntr2^(0+128)+2),f
 20073                           
 20074                           ;Dimmer_B1.c: 1550: if (DimmerIntr2.Count == DimmerIntr2.TuneEnd) {
 20075  0942  0849               	movf	(_DimmerIntr2^(0+128)+2),w
 20076  0943  0652               	xorwf	(_DimmerIntr2^(0+128)+11),w
 20077  0944  1D03               	skipz
 20078  0945  2948               	goto	i1l8046
 20079                           
 20080                           ;Dimmer_B1.c: 1551: DimmerIntr2.Count = 0;
 20081  0946  01C9               	clrf	(_DimmerIntr2^(0+128)+2)
 20082                           
 20083                           ;Dimmer_B1.c: 1552: DimmerIntr2.Start = 0;
 20084  0947  1147               	bcf	_DimmerIntr2^(0+128),2
 20085  0948                     i1l8046:	
 20086                           
 20087                           ;Dimmer_B1.c: 1553: }
 20088                           ;Dimmer_B1.c: 1568: if (DimmerIntr2.Count == DimmerIntr2.TuneValue2) {
 20089  0948  0849               	movf	(_DimmerIntr2^(0+128)+2),w
 20090  0949  064F               	xorwf	(_DimmerIntr2^(0+128)+8),w
 20091  094A  1903               	btfsc	3,2
 20092                           
 20093                           ;Dimmer_B1.c: 1571: if (DimmerIntr2.ControlStatus == 1) {
 20094  094B  1DC7               	btfss	_DimmerIntr2^(0+128),3
 20095  094C  294F               	goto	i1l8052
 20096                           
 20097                           ;Dimmer_B1.c: 1572: RA7 = 0;
 20098  094D  0020               	movlb	0	; select bank0
 20099  094E  138C               	bcf	12,7	;volatile
 20100  094F                     i1l8052:	
 20101                           
 20102                           ;Dimmer_B1.c: 1573: }
 20103                           ;Dimmer_B1.c: 1574: }
 20104                           ;Dimmer_B1.c: 1578: if (DimmerIntr2.Count == DimmerIntr2.TuneValue3) {
 20105  094F  0021               	movlb	1	; select bank1
 20106  0950  0849               	movf	(_DimmerIntr2^(0+128)+2),w
 20107  0951  0650               	xorwf	(_DimmerIntr2^(0+128)+9),w
 20108  0952  1903               	btfsc	3,2
 20109                           
 20110                           ;Dimmer_B1.c: 1581: if (DimmerIntr2.ControlStatus == 1) {
 20111  0953  1DC7               	btfss	_DimmerIntr2^(0+128),3
 20112  0954  2957               	goto	i1l8058
 20113                           
 20114                           ;Dimmer_B1.c: 1582: RA7 = 1;
 20115  0955  0020               	movlb	0	; select bank0
 20116  0956  178C               	bsf	12,7	;volatile
 20117  0957                     i1l8058:	
 20118                           
 20119                           ;Dimmer_B1.c: 1583: }
 20120                           ;Dimmer_B1.c: 1584: }
 20121                           ;Dimmer_B1.c: 1601: if (DimmerIntr2.Count == DimmerIntr2.TuneValue4) {
 20122  0957  0021               	movlb	1	; select bank1
 20123  0958  0849               	movf	(_DimmerIntr2^(0+128)+2),w
 20124  0959  0651               	xorwf	(_DimmerIntr2^(0+128)+10),w
 20125  095A  1903               	btfsc	3,2
 20126                           
 20127                           ;Dimmer_B1.c: 1603: if (DimmerIntr2.ControlStatus == 1) {
 20128  095B  1DC7               	btfss	_DimmerIntr2^(0+128),3
 20129  095C  2971               	goto	i1l1005
 20130                           
 20131                           ;Dimmer_B1.c: 1604: RA7 = 0;
 20132  095D  0020               	movlb	0	; select bank0
 20133  095E  138C               	bcf	12,7	;volatile
 20134                           
 20135                           ;Dimmer_B1.c: 1605: }
 20136                           ;Dimmer_B1.c: 1608: }
 20137                           ;Dimmer_B1.c: 1621: } else {
 20138  095F  2971               	goto	i1l1005
 20139  0960                     i1l997:	
 20140                           
 20141                           ;Dimmer_B1.c: 1622: if (DimmerIntr2.GO == 1) {
 20142  0960  1C47               	btfss	_DimmerIntr2^(0+128),0
 20143  0961  2971               	goto	i1l1005
 20144                           
 20145                           ;Dimmer_B1.c: 1623: DimmerIntr2.Count++;
 20146  0962  3001               	movlw	1
 20147  0963  00F0               	movwf	??_DimmerLights_TMR_2
 20148  0964  0870               	movf	??_DimmerLights_TMR_2,w
 20149  0965  07C9               	addwf	(_DimmerIntr2^(0+128)+2),f
 20150                           
 20151                           ;Dimmer_B1.c: 1624: if (DimmerIntr2.Count == 4) {
 20152  0966  0849               	movf	(_DimmerIntr2^(0+128)+2),w
 20153  0967  3A04               	xorlw	4
 20154  0968  1D03               	skipz
 20155  0969  2971               	goto	i1l1005
 20156                           
 20157                           ;Dimmer_B1.c: 1625: DimmerIntr2.Count = 0;
 20158  096A  01C9               	clrf	(_DimmerIntr2^(0+128)+2)
 20159                           
 20160                           ;Dimmer_B1.c: 1626: DimmerIntr2.Start = 1;
 20161  096B  1547               	bsf	_DimmerIntr2^(0+128),2
 20162                           
 20163                           ;Dimmer_B1.c: 1627: DimmerIntr2.GO = 0;
 20164  096C  1047               	bcf	_DimmerIntr2^(0+128),0
 20165                           
 20166                           ;Dimmer_B1.c: 1628: if (DimmerIntr2.ControlStatus == 1) {
 20167  096D  1DC7               	btfss	_DimmerIntr2^(0+128),3
 20168  096E  2971               	goto	i1l1005
 20169                           
 20170                           ;Dimmer_B1.c: 1629: RA7 = 1;
 20171  096F  0020               	movlb	0	; select bank0
 20172  0970  178C               	bsf	12,7	;volatile
 20173  0971                     i1l1005:	
 20174                           
 20175                           ;Dimmer_B1.c: 1630: }
 20176                           ;Dimmer_B1.c: 1631: }
 20177                           ;Dimmer_B1.c: 1632: }
 20178                           ;Dimmer_B1.c: 1633: }
 20179                           ;Dimmer_B1.c: 1636: if (DimmerIntr2.Tune == 1) {
 20180  0971  0021               	movlb	1	; select bank1
 20181  0972  1CC7               	btfss	_DimmerIntr2^(0+128),1
 20182  0973  0008               	return
 20183                           
 20184                           ;Dimmer_B1.c: 1637: DimmerIntr2.Tune = 0;
 20185  0974  10C7               	bcf	_DimmerIntr2^(0+128),1
 20186                           
 20187                           ;Dimmer_B1.c: 1638: DimmerIntr2.TuneTime++;
 20188  0975  3001               	movlw	1
 20189  0976  00F0               	movwf	??_DimmerLights_TMR_2
 20190  0977  0870               	movf	??_DimmerLights_TMR_2,w
 20191  0978  07CA               	addwf	(_DimmerIntr2^(0+128)+3),f
 20192                           
 20193                           ;Dimmer_B1.c: 1639: if (DimmerIntr2.TuneTime >= DimmerIntr2.TuneTimeValue) {
 20194  0979  084B               	movf	(_DimmerIntr2^(0+128)+4),w
 20195  097A  024A               	subwf	(_DimmerIntr2^(0+128)+3),w
 20196  097B  1C03               	skipc
 20197  097C  0008               	return
 20198                           
 20199                           ;Dimmer_B1.c: 1640: DimmerIntr2.TuneTime = 0;
 20200  097D  01CA               	clrf	(_DimmerIntr2^(0+128)+3)
 20201                           
 20202                           ;Dimmer_B1.c: 1641: DimmerIntr2.TuneGO = 1;
 20203  097E  1748               	bsf	(_DimmerIntr2^(0+128)+1),6
 20204                           
 20205                           ;Dimmer_B1.c: 1642: if (DimmerIntr2.Dimming_Sw == 1) {
 20206  097F  1E47               	btfss	_DimmerIntr2^(0+128),4
 20207  0980  2997               	goto	i1l1011
 20208                           
 20209                           ;Dimmer_B1.c: 1643: if (DimmerIntr2.Dimming_Status == 0) {
 20210  0981  1AC7               	btfsc	_DimmerIntr2^(0+128),5
 20211  0982  298E               	goto	i1l8096
 20212                           
 20213                           ;Dimmer_B1.c: 1644: if (DimmerIntr2.DimmingValue < ((char)(75*0.55))) {
 20214  0983  3029               	movlw	41
 20215  0984  024C               	subwf	(_DimmerIntr2^(0+128)+5),w
 20216  0985  1803               	skipnc
 20217  0986  298C               	goto	i1l1013
 20218                           
 20219                           ;Dimmer_B1.c: 1645: DimmerIntr2.DimmingValue++;
 20220  0987  3001               	movlw	1
 20221  0988  00F0               	movwf	??_DimmerLights_TMR_2
 20222  0989  0870               	movf	??_DimmerLights_TMR_2,w
 20223  098A  07CC               	addwf	(_DimmerIntr2^(0+128)+5),f
 20224                           
 20225                           ;Dimmer_B1.c: 1646: } else {
 20226  098B  0008               	return
 20227  098C                     i1l1013:	
 20228                           
 20229                           ;Dimmer_B1.c: 1647: DimmerIntr2.Dimming_Status = 1;
 20230  098C  16C7               	bsf	_DimmerIntr2^(0+128),5
 20231                           
 20232                           ;Dimmer_B1.c: 1648: }
 20233                           ;Dimmer_B1.c: 1649: } else {
 20234  098D  0008               	return
 20235  098E                     i1l8096:	
 20236                           
 20237                           ;Dimmer_B1.c: 1650: if (DimmerIntr2.DimmingValue > ((char)(5*0.55))) {
 20238  098E  3003               	movlw	3
 20239  098F  024C               	subwf	(_DimmerIntr2^(0+128)+5),w
 20240  0990  1C03               	skipc
 20241  0991  2995               	goto	i1l1016
 20242                           
 20243                           ;Dimmer_B1.c: 1651: DimmerIntr2.DimmingValue--;
 20244  0992  3001               	movlw	1
 20245  0993  02CC               	subwf	(_DimmerIntr2^(0+128)+5),f
 20246                           
 20247                           ;Dimmer_B1.c: 1652: } else {
 20248  0994  0008               	return
 20249  0995                     i1l1016:	
 20250                           
 20251                           ;Dimmer_B1.c: 1653: DimmerIntr2.Dimming_Status = 0;
 20252  0995  12C7               	bcf	_DimmerIntr2^(0+128),5
 20253                           
 20254                           ;Dimmer_B1.c: 1654: }
 20255                           ;Dimmer_B1.c: 1655: }
 20256                           ;Dimmer_B1.c: 1656: } else if (DimmerIntr2.Dimming_RF == 1) {
 20257  0996  0008               	return
 20258  0997                     i1l1011:	
 20259  0997  1F47               	btfss	_DimmerIntr2^(0+128),6
 20260  0998  0008               	return
 20261                           
 20262                           ;Dimmer_B1.c: 1657: if (DimmerIntr2.DimmingValue < DimmerIntr2.MaxmumValue) {
 20263  0999  084D               	movf	(_DimmerIntr2^(0+128)+6),w
 20264  099A  024C               	subwf	(_DimmerIntr2^(0+128)+5),w
 20265  099B  1803               	skipnc
 20266  099C  29A2               	goto	i1l8104
 20267                           
 20268                           ;Dimmer_B1.c: 1658: DimmerIntr2.DimmingValue++;
 20269  099D  3001               	movlw	1
 20270  099E  00F0               	movwf	??_DimmerLights_TMR_2
 20271  099F  0870               	movf	??_DimmerLights_TMR_2,w
 20272  09A0  07CC               	addwf	(_DimmerIntr2^(0+128)+5),f
 20273                           
 20274                           ;Dimmer_B1.c: 1659: } else if (DimmerIntr2.DimmingValue > DimmerIntr2.MaxmumValue) {
 20275  09A1  0008               	return
 20276  09A2                     i1l8104:	
 20277  09A2  084C               	movf	(_DimmerIntr2^(0+128)+5),w
 20278  09A3  024D               	subwf	(_DimmerIntr2^(0+128)+6),w
 20279  09A4  1803               	skipnc
 20280  09A5  29A9               	goto	i1l1022
 20281                           
 20282                           ;Dimmer_B1.c: 1660: DimmerIntr2.DimmingValue--;
 20283  09A6  3001               	movlw	1
 20284  09A7  02CC               	subwf	(_DimmerIntr2^(0+128)+5),f
 20285                           
 20286                           ;Dimmer_B1.c: 1661: } else {
 20287  09A8  0008               	return
 20288  09A9                     i1l1022:	
 20289                           
 20290                           ;Dimmer_B1.c: 1662: DimmerIntr2.Dimming_RF = 0;
 20291  09A9  1347               	bcf	_DimmerIntr2^(0+128),6
 20292  09AA  0008               	return
 20293  09AB                     __end_of_DimmerLights_TMR_2:	
 20294                           
 20295                           	psect	text141
 20296  08CB                     __ptext141:	
 20297 ;; *************** function _DimmerLights_TMR_1 *****************
 20298 ;; Defined at:
 20299 ;;		line 1380 in file "../src/Dimmer_B1.c"
 20300 ;; Parameters:    Size  Location     Type
 20301 ;;		None
 20302 ;; Auto vars:     Size  Location     Type
 20303 ;;		None
 20304 ;; Return value:  Size  Location     Type
 20305 ;;		None               void
 20306 ;; Registers used:
 20307 ;;		wreg, status,2, status,0
 20308 ;; Tracked objects:
 20309 ;;		On entry : 0/0
 20310 ;;		On exit  : 0/0
 20311 ;;		Unchanged: 0/0
 20312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20315 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20316 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20317 ;;Total ram usage:        1 bytes
 20318 ;; Hardware stack levels used:    1
 20319 ;; This function calls:
 20320 ;;		Nothing
 20321 ;; This function is called by:
 20322 ;;		_TMR1_ISR
 20323 ;; This function uses a non-reentrant model
 20324 ;;
 20325                           
 20326                           
 20327                           ;psect for function _DimmerLights_TMR_1
 20328  08CB                     _DimmerLights_TMR_1:	
 20329                           
 20330                           ;Dimmer_B1.c: 1382: if (DimmerIntr1.Start == 1) {
 20331                           
 20332                           ;incstack = 0
 20333                           ; Regs used in _DimmerLights_TMR_1: [wreg+status,2+status,0]
 20334  08CB  0021               	movlb	1	; select bank1
 20335  08CC  1D3B               	btfss	_DimmerIntr1^(0+128),2
 20336  08CD  28F0               	goto	i1l958
 20337                           
 20338                           ;Dimmer_B1.c: 1383: DimmerIntr1.Count++;
 20339  08CE  3001               	movlw	1
 20340  08CF  00F0               	movwf	??_DimmerLights_TMR_1
 20341  08D0  0870               	movf	??_DimmerLights_TMR_1,w
 20342  08D1  07BD               	addwf	(_DimmerIntr1^(0+128)+2),f
 20343                           
 20344                           ;Dimmer_B1.c: 1385: if (DimmerIntr1.Count == DimmerIntr1.TuneEnd) {
 20345  08D2  083D               	movf	(_DimmerIntr1^(0+128)+2),w
 20346  08D3  0646               	xorwf	(_DimmerIntr1^(0+128)+11),w
 20347  08D4  1D03               	skipz
 20348  08D5  28D8               	goto	i1l7948
 20349                           
 20350                           ;Dimmer_B1.c: 1386: DimmerIntr1.Count = 0;
 20351  08D6  01BD               	clrf	(_DimmerIntr1^(0+128)+2)
 20352                           
 20353                           ;Dimmer_B1.c: 1387: DimmerIntr1.Start = 0;
 20354  08D7  113B               	bcf	_DimmerIntr1^(0+128),2
 20355  08D8                     i1l7948:	
 20356                           
 20357                           ;Dimmer_B1.c: 1388: }
 20358                           ;Dimmer_B1.c: 1402: if (DimmerIntr1.Count == DimmerIntr1.TuneValue2) {
 20359  08D8  083D               	movf	(_DimmerIntr1^(0+128)+2),w
 20360  08D9  0643               	xorwf	(_DimmerIntr1^(0+128)+8),w
 20361  08DA  1903               	btfsc	3,2
 20362                           
 20363                           ;Dimmer_B1.c: 1403: if (DimmerIntr1.ControlStatus == 1) {
 20364  08DB  1DBB               	btfss	_DimmerIntr1^(0+128),3
 20365  08DC  28DF               	goto	i1l7954
 20366                           
 20367                           ;Dimmer_B1.c: 1404: RB4 = 0;
 20368  08DD  0020               	movlb	0	; select bank0
 20369  08DE  120D               	bcf	13,4	;volatile
 20370  08DF                     i1l7954:	
 20371                           
 20372                           ;Dimmer_B1.c: 1405: }
 20373                           ;Dimmer_B1.c: 1406: }
 20374                           ;Dimmer_B1.c: 1409: if (DimmerIntr1.Count == DimmerIntr1.TuneValue3) {
 20375  08DF  0021               	movlb	1	; select bank1
 20376  08E0  083D               	movf	(_DimmerIntr1^(0+128)+2),w
 20377  08E1  0644               	xorwf	(_DimmerIntr1^(0+128)+9),w
 20378  08E2  1903               	btfsc	3,2
 20379                           
 20380                           ;Dimmer_B1.c: 1410: if (DimmerIntr1.ControlStatus == 1) {
 20381  08E3  1DBB               	btfss	_DimmerIntr1^(0+128),3
 20382  08E4  28E7               	goto	i1l7960
 20383                           
 20384                           ;Dimmer_B1.c: 1411: RB4 = 1;
 20385  08E5  0020               	movlb	0	; select bank0
 20386  08E6  160D               	bsf	13,4	;volatile
 20387  08E7                     i1l7960:	
 20388                           
 20389                           ;Dimmer_B1.c: 1412: }
 20390                           ;Dimmer_B1.c: 1413: }
 20391                           ;Dimmer_B1.c: 1416: if (DimmerIntr1.Count == DimmerIntr1.TuneValue4) {
 20392  08E7  0021               	movlb	1	; select bank1
 20393  08E8  083D               	movf	(_DimmerIntr1^(0+128)+2),w
 20394  08E9  0645               	xorwf	(_DimmerIntr1^(0+128)+10),w
 20395  08EA  1903               	btfsc	3,2
 20396                           
 20397                           ;Dimmer_B1.c: 1417: if (DimmerIntr1.ControlStatus == 1) {
 20398  08EB  1DBB               	btfss	_DimmerIntr1^(0+128),3
 20399  08EC  2901               	goto	i1l966
 20400                           
 20401                           ;Dimmer_B1.c: 1418: RB4 = 0;
 20402  08ED  0020               	movlb	0	; select bank0
 20403  08EE  120D               	bcf	13,4	;volatile
 20404                           
 20405                           ;Dimmer_B1.c: 1419: }
 20406                           ;Dimmer_B1.c: 1422: }
 20407                           ;Dimmer_B1.c: 1424: } else {
 20408  08EF  2901               	goto	i1l966
 20409  08F0                     i1l958:	
 20410                           
 20411                           ;Dimmer_B1.c: 1425: if (DimmerIntr1.GO == 1) {
 20412  08F0  1C3B               	btfss	_DimmerIntr1^(0+128),0
 20413  08F1  2901               	goto	i1l966
 20414                           
 20415                           ;Dimmer_B1.c: 1426: DimmerIntr1.Count++;
 20416  08F2  3001               	movlw	1
 20417  08F3  00F0               	movwf	??_DimmerLights_TMR_1
 20418  08F4  0870               	movf	??_DimmerLights_TMR_1,w
 20419  08F5  07BD               	addwf	(_DimmerIntr1^(0+128)+2),f
 20420                           
 20421                           ;Dimmer_B1.c: 1427: if (DimmerIntr1.Count == 4) {
 20422  08F6  083D               	movf	(_DimmerIntr1^(0+128)+2),w
 20423  08F7  3A04               	xorlw	4
 20424  08F8  1D03               	skipz
 20425  08F9  2901               	goto	i1l966
 20426                           
 20427                           ;Dimmer_B1.c: 1428: DimmerIntr1.Count = 0;
 20428  08FA  01BD               	clrf	(_DimmerIntr1^(0+128)+2)
 20429                           
 20430                           ;Dimmer_B1.c: 1429: DimmerIntr1.GO = 0;
 20431  08FB  103B               	bcf	_DimmerIntr1^(0+128),0
 20432                           
 20433                           ;Dimmer_B1.c: 1430: DimmerIntr1.Start = 1;
 20434  08FC  153B               	bsf	_DimmerIntr1^(0+128),2
 20435                           
 20436                           ;Dimmer_B1.c: 1432: if (DimmerIntr1.ControlStatus == 1) {
 20437  08FD  1DBB               	btfss	_DimmerIntr1^(0+128),3
 20438  08FE  2901               	goto	i1l966
 20439                           
 20440                           ;Dimmer_B1.c: 1433: RB4 = 1;
 20441  08FF  0020               	movlb	0	; select bank0
 20442  0900  160D               	bsf	13,4	;volatile
 20443  0901                     i1l966:	
 20444                           
 20445                           ;Dimmer_B1.c: 1434: }
 20446                           ;Dimmer_B1.c: 1435: }
 20447                           ;Dimmer_B1.c: 1436: }
 20448                           ;Dimmer_B1.c: 1437: }
 20449                           ;Dimmer_B1.c: 1439: if (DimmerIntr1.Tune == 1) {
 20450  0901  0021               	movlb	1	; select bank1
 20451  0902  1CBB               	btfss	_DimmerIntr1^(0+128),1
 20452  0903  0008               	return
 20453                           
 20454                           ;Dimmer_B1.c: 1440: DimmerIntr1.Tune = 0;
 20455  0904  10BB               	bcf	_DimmerIntr1^(0+128),1
 20456                           
 20457                           ;Dimmer_B1.c: 1441: DimmerIntr1.TuneTime++;
 20458  0905  3001               	movlw	1
 20459  0906  00F0               	movwf	??_DimmerLights_TMR_1
 20460  0907  0870               	movf	??_DimmerLights_TMR_1,w
 20461  0908  07BE               	addwf	(_DimmerIntr1^(0+128)+3),f
 20462                           
 20463                           ;Dimmer_B1.c: 1442: if (DimmerIntr1.TuneTime >= DimmerIntr1.TuneTimeValue) {
 20464  0909  083F               	movf	(_DimmerIntr1^(0+128)+4),w
 20465  090A  023E               	subwf	(_DimmerIntr1^(0+128)+3),w
 20466  090B  1C03               	skipc
 20467  090C  0008               	return
 20468                           
 20469                           ;Dimmer_B1.c: 1443: DimmerIntr1.TuneTime = 0;
 20470  090D  01BE               	clrf	(_DimmerIntr1^(0+128)+3)
 20471                           
 20472                           ;Dimmer_B1.c: 1444: DimmerIntr1.TuneGO = 1;
 20473  090E  173C               	bsf	(_DimmerIntr1^(0+128)+1),6
 20474                           
 20475                           ;Dimmer_B1.c: 1445: if (DimmerIntr1.Dimming_Sw == 1) {
 20476  090F  1E3B               	btfss	_DimmerIntr1^(0+128),4
 20477  0910  2927               	goto	i1l972
 20478                           
 20479                           ;Dimmer_B1.c: 1446: if (DimmerIntr1.Dimming_Status == 0) {
 20480  0911  1ABB               	btfsc	_DimmerIntr1^(0+128),5
 20481  0912  291E               	goto	i1l7998
 20482                           
 20483                           ;Dimmer_B1.c: 1447: if (DimmerIntr1.DimmingValue < ((char)(75*0.55))) {
 20484  0913  3029               	movlw	41
 20485  0914  0240               	subwf	(_DimmerIntr1^(0+128)+5),w
 20486  0915  1803               	skipnc
 20487  0916  291C               	goto	i1l974
 20488                           
 20489                           ;Dimmer_B1.c: 1448: DimmerIntr1.DimmingValue++;
 20490  0917  3001               	movlw	1
 20491  0918  00F0               	movwf	??_DimmerLights_TMR_1
 20492  0919  0870               	movf	??_DimmerLights_TMR_1,w
 20493  091A  07C0               	addwf	(_DimmerIntr1^(0+128)+5),f
 20494                           
 20495                           ;Dimmer_B1.c: 1449: } else {
 20496  091B  0008               	return
 20497  091C                     i1l974:	
 20498                           
 20499                           ;Dimmer_B1.c: 1450: DimmerIntr1.Dimming_Status = 1;
 20500  091C  16BB               	bsf	_DimmerIntr1^(0+128),5
 20501                           
 20502                           ;Dimmer_B1.c: 1451: }
 20503                           ;Dimmer_B1.c: 1452: } else {
 20504  091D  0008               	return
 20505  091E                     i1l7998:	
 20506                           
 20507                           ;Dimmer_B1.c: 1453: if (DimmerIntr1.DimmingValue > ((char)(5*0.55))) {
 20508  091E  3003               	movlw	3
 20509  091F  0240               	subwf	(_DimmerIntr1^(0+128)+5),w
 20510  0920  1C03               	skipc
 20511  0921  2925               	goto	i1l977
 20512                           
 20513                           ;Dimmer_B1.c: 1454: DimmerIntr1.DimmingValue--;
 20514  0922  3001               	movlw	1
 20515  0923  02C0               	subwf	(_DimmerIntr1^(0+128)+5),f
 20516                           
 20517                           ;Dimmer_B1.c: 1455: } else {
 20518  0924  0008               	return
 20519  0925                     i1l977:	
 20520                           
 20521                           ;Dimmer_B1.c: 1456: DimmerIntr1.Dimming_Status = 0;
 20522  0925  12BB               	bcf	_DimmerIntr1^(0+128),5
 20523                           
 20524                           ;Dimmer_B1.c: 1457: }
 20525                           ;Dimmer_B1.c: 1458: }
 20526                           ;Dimmer_B1.c: 1459: } else if (DimmerIntr1.Dimming_RF == 1) {
 20527  0926  0008               	return
 20528  0927                     i1l972:	
 20529  0927  1F3B               	btfss	_DimmerIntr1^(0+128),6
 20530  0928  0008               	return
 20531                           
 20532                           ;Dimmer_B1.c: 1460: if (DimmerIntr1.DimmingValue < DimmerIntr1.MaxmumValue) {
 20533  0929  0841               	movf	(_DimmerIntr1^(0+128)+6),w
 20534  092A  0240               	subwf	(_DimmerIntr1^(0+128)+5),w
 20535  092B  1803               	skipnc
 20536  092C  2932               	goto	i1l8006
 20537                           
 20538                           ;Dimmer_B1.c: 1461: DimmerIntr1.DimmingValue++;
 20539  092D  3001               	movlw	1
 20540  092E  00F0               	movwf	??_DimmerLights_TMR_1
 20541  092F  0870               	movf	??_DimmerLights_TMR_1,w
 20542  0930  07C0               	addwf	(_DimmerIntr1^(0+128)+5),f
 20543                           
 20544                           ;Dimmer_B1.c: 1462: } else if (DimmerIntr1.DimmingValue > DimmerIntr1.MaxmumValue) {
 20545  0931  0008               	return
 20546  0932                     i1l8006:	
 20547  0932  0840               	movf	(_DimmerIntr1^(0+128)+5),w
 20548  0933  0241               	subwf	(_DimmerIntr1^(0+128)+6),w
 20549  0934  1803               	skipnc
 20550  0935  2939               	goto	i1l983
 20551                           
 20552                           ;Dimmer_B1.c: 1463: DimmerIntr1.DimmingValue--;
 20553  0936  3001               	movlw	1
 20554  0937  02C0               	subwf	(_DimmerIntr1^(0+128)+5),f
 20555                           
 20556                           ;Dimmer_B1.c: 1464: } else {
 20557  0938  0008               	return
 20558  0939                     i1l983:	
 20559                           
 20560                           ;Dimmer_B1.c: 1465: DimmerIntr1.Dimming_RF = 0;
 20561  0939  133B               	bcf	_DimmerIntr1^(0+128),6
 20562  093A  0008               	return
 20563  093B                     __end_of_DimmerLights_TMR_1:	
 20564                           
 20565                           	psect	text142
 20566  1981                     __ptext142:	
 20567 ;; *************** function _IOC_ISR *****************
 20568 ;; Defined at:
 20569 ;;		line 395 in file "../src/MCU_B1.c"
 20570 ;; Parameters:    Size  Location     Type
 20571 ;;		None
 20572 ;; Auto vars:     Size  Location     Type
 20573 ;;		None
 20574 ;; Return value:  Size  Location     Type
 20575 ;;		None               void
 20576 ;; Registers used:
 20577 ;;		wreg, status,2, status,0, pclath, cstack
 20578 ;; Tracked objects:
 20579 ;;		On entry : 0/0
 20580 ;;		On exit  : 0/0
 20581 ;;		Unchanged: 0/0
 20582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20586 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20587 ;;Total ram usage:        0 bytes
 20588 ;; Hardware stack levels used:    1
 20589 ;; Hardware stack levels required when called:    3
 20590 ;; This function calls:
 20591 ;;		_DimmerLights_IOC_1
 20592 ;;		_DimmerLights_IOC_2
 20593 ;; This function is called by:
 20594 ;;		_ISR
 20595 ;; This function uses a non-reentrant model
 20596 ;;
 20597                           
 20598                           
 20599                           ;psect for function _IOC_ISR
 20600  1981                     _IOC_ISR:	
 20601                           
 20602                           ;MCU_B1.c: 397: if (myMain.PowerON == 1) {
 20603                           
 20604                           ;incstack = 0
 20605                           ; Regs used in _IOC_ISR: [wreg+status,2+status,0+pclath+cstack]
 20606  1981  0021               	movlb	1	; select bank1
 20607  1982  1C2E               	btfss	_myMain^(0+128),0
 20608  1983  2989               	goto	i1l8632
 20609                           
 20610                           ;MCU_B1.c: 403: DimmerLights_IOC_1();
 20611  1984  3191  2143  3199   	fcall	_DimmerLights_IOC_1
 20612                           
 20613                           ;MCU_B1.c: 408: DimmerLights_IOC_2();
 20614  1987  3190  20CC         	fcall	_DimmerLights_IOC_2
 20615  1989                     i1l8632:	
 20616                           
 20617                           ;MCU_B1.c: 416: }
 20618                           ;MCU_B1.c: 418: IOCBF2 = 0;
 20619  1989  0027               	movlb	7	; select bank7
 20620  198A  1116               	bcf	22,2	;volatile
 20621                           
 20622                           ;MCU_B1.c: 419: IOCIF = 0;
 20623  198B  100B               	bcf	11,0	;volatile
 20624  198C  0008               	return
 20625  198D                     __end_of_IOC_ISR:	
 20626                           
 20627                           	psect	text143
 20628  10CC                     __ptext143:	
 20629 ;; *************** function _DimmerLights_IOC_2 *****************
 20630 ;; Defined at:
 20631 ;;		line 1669 in file "../src/Dimmer_B1.c"
 20632 ;; Parameters:    Size  Location     Type
 20633 ;;		None
 20634 ;; Auto vars:     Size  Location     Type
 20635 ;;		None
 20636 ;; Return value:  Size  Location     Type
 20637 ;;		None               void
 20638 ;; Registers used:
 20639 ;;		wreg, status,2, status,0, pclath, cstack
 20640 ;; Tracked objects:
 20641 ;;		On entry : 0/0
 20642 ;;		On exit  : 0/0
 20643 ;;		Unchanged: 0/0
 20644 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20646 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20647 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20648 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20649 ;;Total ram usage:        2 bytes
 20650 ;; Hardware stack levels used:    1
 20651 ;; Hardware stack levels required when called:    2
 20652 ;; This function calls:
 20653 ;;		_Division
 20654 ;; This function is called by:
 20655 ;;		_IOC_ISR
 20656 ;; This function uses a non-reentrant model
 20657 ;;
 20658                           
 20659                           
 20660                           ;psect for function _DimmerLights_IOC_2
 20661  10CC                     _DimmerLights_IOC_2:	
 20662                           
 20663                           ;Dimmer_B1.c: 1684: if (DimmerIntr2.Start == 0) {
 20664                           
 20665                           ;incstack = 0
 20666                           ; Regs used in _DimmerLights_IOC_2: [wreg+status,2+status,0+pclath+cstack]
 20667  10CC  0021               	movlb	1	; select bank1
 20668  10CD  1947               	btfsc	_DimmerIntr2^(0+128),2
 20669  10CE  0008               	return
 20670                           
 20671                           ;Dimmer_B1.c: 1685: if (RB2 != DimmerIntr2.Status) {
 20672  10CF  0E48               	swapf	(_DimmerIntr2^(0+128)+1),w
 20673  10D0  0C89               	rrf	9,f
 20674  10D1  3901               	andlw	1
 20675  10D2  00FA               	movwf	??_DimmerLights_IOC_2
 20676  10D3  3000               	movlw	0
 20677  10D4  0020               	movlb	0	; select bank0
 20678  10D5  190D               	btfsc	13,2	;volatile
 20679  10D6  3001               	movlw	1
 20680  10D7  067A               	xorwf	??_DimmerLights_IOC_2,w
 20681  10D8  1903               	skipnz
 20682  10D9  0008               	return
 20683                           
 20684                           ;Dimmer_B1.c: 1687: DimmerIntr2.Count = 0;
 20685  10DA  0021               	movlb	1	; select bank1
 20686  10DB  01C9               	clrf	(_DimmerIntr2^(0+128)+2)
 20687                           
 20688                           ;Dimmer_B1.c: 1688: DimmerIntr2.GO = 1;
 20689  10DC  1447               	bsf	_DimmerIntr2^(0+128),0
 20690                           
 20691                           ;Dimmer_B1.c: 1690: if (DimmerIntr2.Dimming_Sw == 1 || DimmerIntr2.Dimming_RF == 1) {
 20692  10DD  1E47               	btfss	_DimmerIntr2^(0+128),4
 20693  10DE  1B47               	btfsc	_DimmerIntr2^(0+128),6
 20694                           
 20695                           ;Dimmer_B1.c: 1691: DimmerIntr2.Tune = 1;
 20696  10DF  14C7               	bsf	_DimmerIntr2^(0+128),1
 20697                           
 20698                           ;Dimmer_B1.c: 1692: }
 20699                           ;Dimmer_B1.c: 1694: if (DimmerIntr2.TuneGO == 1) {
 20700  10E0  1F48               	btfss	(_DimmerIntr2^(0+128)+1),6
 20701  10E1  2900               	goto	i1l8130
 20702                           
 20703                           ;Dimmer_B1.c: 1695: DimmerIntr2.TuneGO = 0;
 20704  10E2  1348               	bcf	(_DimmerIntr2^(0+128)+1),6
 20705                           
 20706                           ;Dimmer_B1.c: 1698: DimmerIntr2.TuneValue2 = Division(DimmerIntr2.DimmingValue, 2);
 20707  10E3  3002               	movlw	2
 20708  10E4  00FA               	movwf	??_DimmerLights_IOC_2
 20709  10E5  087A               	movf	??_DimmerLights_IOC_2,w
 20710  10E6  00F5               	movwf	Division@num
 20711  10E7  084C               	movf	(_DimmerIntr2^(0+128)+5),w
 20712  10E8  3199  21ED  3190   	fcall	_Division
 20713  10EB  00FB               	movwf	??_DimmerLights_IOC_2+1
 20714  10EC  087B               	movf	??_DimmerLights_IOC_2+1,w
 20715  10ED  0021               	movlb	1	; select bank1
 20716  10EE  00CF               	movwf	(_DimmerIntr2^(0+128)+8)
 20717                           
 20718                           ;Dimmer_B1.c: 1699: DimmerIntr2.TuneValue3 = DimmerIntr2.TuneValue2 + (55 - DimmerIntr2.
      +                          DimmingValue);
 20719  10EF  034C               	decf	(_DimmerIntr2^(0+128)+5),w
 20720  10F0  3AFF               	xorlw	255
 20721  10F1  074F               	addwf	(_DimmerIntr2^(0+128)+8),w
 20722  10F2  3E37               	addlw	55
 20723  10F3  00FA               	movwf	??_DimmerLights_IOC_2
 20724  10F4  087A               	movf	??_DimmerLights_IOC_2,w
 20725  10F5  00D0               	movwf	(_DimmerIntr2^(0+128)+9)
 20726                           
 20727                           ;Dimmer_B1.c: 1700: DimmerIntr2.TuneValue4 = DimmerIntr2.TuneValue3 + DimmerIntr2.TuneVa
      +                          lue2;
 20728  10F6  0850               	movf	(_DimmerIntr2^(0+128)+9),w
 20729  10F7  074F               	addwf	(_DimmerIntr2^(0+128)+8),w
 20730  10F8  00FA               	movwf	??_DimmerLights_IOC_2
 20731  10F9  087A               	movf	??_DimmerLights_IOC_2,w
 20732  10FA  00D1               	movwf	(_DimmerIntr2^(0+128)+10)
 20733                           
 20734                           ;Dimmer_B1.c: 1701: DimmerIntr2.TuneEnd = DimmerIntr2.TuneValue4 + 3;
 20735  10FB  0851               	movf	(_DimmerIntr2^(0+128)+10),w
 20736  10FC  3E03               	addlw	3
 20737  10FD  00FA               	movwf	??_DimmerLights_IOC_2
 20738  10FE  087A               	movf	??_DimmerLights_IOC_2,w
 20739  10FF  00D2               	movwf	(_DimmerIntr2^(0+128)+11)
 20740  1100                     i1l8130:	
 20741                           
 20742                           ;Dimmer_B1.c: 1702: }
 20743                           ;Dimmer_B1.c: 1712: DimmerIntr2.Status = RB2 == 1 ? 1 : 0;
 20744  1100  12C8               	bcf	(_DimmerIntr2^(0+128)+1),5
 20745  1101  0020               	movlb	0	; select bank0
 20746  1102  1D0D               	btfss	13,2	;volatile
 20747  1103  0008               	return
 20748  1104  0021               	movlb	1	; select bank1
 20749  1105  16C8               	bsf	(_DimmerIntr2^(0+128)+1),5
 20750  1106  0008               	return
 20751  1107                     __end_of_DimmerLights_IOC_2:	
 20752                           
 20753                           	psect	text144
 20754  1143                     __ptext144:	
 20755 ;; *************** function _DimmerLights_IOC_1 *****************
 20756 ;; Defined at:
 20757 ;;		line 1472 in file "../src/Dimmer_B1.c"
 20758 ;; Parameters:    Size  Location     Type
 20759 ;;		None
 20760 ;; Auto vars:     Size  Location     Type
 20761 ;;		None
 20762 ;; Return value:  Size  Location     Type
 20763 ;;		None               void
 20764 ;; Registers used:
 20765 ;;		wreg, status,2, status,0, pclath, cstack
 20766 ;; Tracked objects:
 20767 ;;		On entry : 0/0
 20768 ;;		On exit  : 0/0
 20769 ;;		Unchanged: 0/0
 20770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20773 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20774 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20775 ;;Total ram usage:        2 bytes
 20776 ;; Hardware stack levels used:    1
 20777 ;; Hardware stack levels required when called:    2
 20778 ;; This function calls:
 20779 ;;		_Division
 20780 ;; This function is called by:
 20781 ;;		_IOC_ISR
 20782 ;; This function uses a non-reentrant model
 20783 ;;
 20784                           
 20785                           
 20786                           ;psect for function _DimmerLights_IOC_1
 20787  1143                     _DimmerLights_IOC_1:	
 20788                           
 20789                           ;Dimmer_B1.c: 1486: if (DimmerIntr1.Start == 0 && DimmerIntr1.GO == 0) {
 20790                           
 20791                           ;incstack = 0
 20792                           ; Regs used in _DimmerLights_IOC_1: [wreg+status,2+status,0+pclath+cstack]
 20793  1143  0021               	movlb	1	; select bank1
 20794  1144  193B               	btfsc	_DimmerIntr1^(0+128),2
 20795  1145  0008               	return
 20796  1146  183B               	btfsc	_DimmerIntr1^(0+128),0
 20797  1147  0008               	return
 20798                           
 20799                           ;Dimmer_B1.c: 1487: if (RB2 != DimmerIntr1.Status) {
 20800  1148  0E3C               	swapf	(_DimmerIntr1^(0+128)+1),w
 20801  1149  0C89               	rrf	9,f
 20802  114A  3901               	andlw	1
 20803  114B  00FA               	movwf	??_DimmerLights_IOC_1
 20804  114C  3000               	movlw	0
 20805  114D  0020               	movlb	0	; select bank0
 20806  114E  190D               	btfsc	13,2	;volatile
 20807  114F  3001               	movlw	1
 20808  1150  067A               	xorwf	??_DimmerLights_IOC_1,w
 20809  1151  1903               	skipnz
 20810  1152  0008               	return
 20811                           
 20812                           ;Dimmer_B1.c: 1489: DimmerIntr1.Count = 0;
 20813  1153  0021               	movlb	1	; select bank1
 20814  1154  01BD               	clrf	(_DimmerIntr1^(0+128)+2)
 20815                           
 20816                           ;Dimmer_B1.c: 1490: DimmerIntr1.GO = 1;
 20817  1155  143B               	bsf	_DimmerIntr1^(0+128),0
 20818                           
 20819                           ;Dimmer_B1.c: 1492: if (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr1.Dimming_RF == 1) {
 20820  1156  1E3B               	btfss	_DimmerIntr1^(0+128),4
 20821  1157  1B3B               	btfsc	_DimmerIntr1^(0+128),6
 20822                           
 20823                           ;Dimmer_B1.c: 1493: DimmerIntr1.Tune = 1;
 20824  1158  14BB               	bsf	_DimmerIntr1^(0+128),1
 20825                           
 20826                           ;Dimmer_B1.c: 1494: }
 20827                           ;Dimmer_B1.c: 1496: if (DimmerIntr1.TuneGO == 1) {
 20828  1159  1F3C               	btfss	(_DimmerIntr1^(0+128)+1),6
 20829  115A  2979               	goto	i1l8034
 20830                           
 20831                           ;Dimmer_B1.c: 1497: DimmerIntr1.TuneGO = 0;
 20832  115B  133C               	bcf	(_DimmerIntr1^(0+128)+1),6
 20833                           
 20834                           ;Dimmer_B1.c: 1500: DimmerIntr1.TuneValue2 = Division(DimmerIntr1.DimmingValue, 2);
 20835  115C  3002               	movlw	2
 20836  115D  00FA               	movwf	??_DimmerLights_IOC_1
 20837  115E  087A               	movf	??_DimmerLights_IOC_1,w
 20838  115F  00F5               	movwf	Division@num
 20839  1160  0840               	movf	(_DimmerIntr1^(0+128)+5),w
 20840  1161  3199  21ED  3191   	fcall	_Division
 20841  1164  00FB               	movwf	??_DimmerLights_IOC_1+1
 20842  1165  087B               	movf	??_DimmerLights_IOC_1+1,w
 20843  1166  0021               	movlb	1	; select bank1
 20844  1167  00C3               	movwf	(_DimmerIntr1^(0+128)+8)
 20845                           
 20846                           ;Dimmer_B1.c: 1501: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + (55 - DimmerIntr1.
      +                          DimmingValue);
 20847  1168  0340               	decf	(_DimmerIntr1^(0+128)+5),w
 20848  1169  3AFF               	xorlw	255
 20849  116A  0743               	addwf	(_DimmerIntr1^(0+128)+8),w
 20850  116B  3E37               	addlw	55
 20851  116C  00FA               	movwf	??_DimmerLights_IOC_1
 20852  116D  087A               	movf	??_DimmerLights_IOC_1,w
 20853  116E  00C4               	movwf	(_DimmerIntr1^(0+128)+9)
 20854                           
 20855                           ;Dimmer_B1.c: 1502: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + DimmerIntr1.TuneVa
      +                          lue2;
 20856  116F  0844               	movf	(_DimmerIntr1^(0+128)+9),w
 20857  1170  0743               	addwf	(_DimmerIntr1^(0+128)+8),w
 20858  1171  00FA               	movwf	??_DimmerLights_IOC_1
 20859  1172  087A               	movf	??_DimmerLights_IOC_1,w
 20860  1173  00C5               	movwf	(_DimmerIntr1^(0+128)+10)
 20861                           
 20862                           ;Dimmer_B1.c: 1503: DimmerIntr1.TuneEnd = DimmerIntr1.TuneValue4 + 3;
 20863  1174  0845               	movf	(_DimmerIntr1^(0+128)+10),w
 20864  1175  3E03               	addlw	3
 20865  1176  00FA               	movwf	??_DimmerLights_IOC_1
 20866  1177  087A               	movf	??_DimmerLights_IOC_1,w
 20867  1178  00C6               	movwf	(_DimmerIntr1^(0+128)+11)
 20868  1179                     i1l8034:	
 20869                           
 20870                           ;Dimmer_B1.c: 1504: }
 20871                           ;Dimmer_B1.c: 1512: DimmerIntr1.Status = RB2 == 1 ? 1 : 0;
 20872  1179  12BC               	bcf	(_DimmerIntr1^(0+128)+1),5
 20873  117A  0020               	movlb	0	; select bank0
 20874  117B  1D0D               	btfss	13,2	;volatile
 20875  117C  0008               	return
 20876  117D  0021               	movlb	1	; select bank1
 20877  117E  16BC               	bsf	(_DimmerIntr1^(0+128)+1),5
 20878  117F  0008               	return
 20879  1180                     __end_of_DimmerLights_IOC_1:	
 20880                           
 20881                           	psect	text145
 20882  19ED                     __ptext145:	
 20883 ;; *************** function _Division *****************
 20884 ;; Defined at:
 20885 ;;		line 1375 in file "../src/Dimmer_B1.c"
 20886 ;; Parameters:    Size  Location     Type
 20887 ;;  value           1    wreg     unsigned char 
 20888 ;;  num             1    5[COMMON] unsigned char 
 20889 ;; Auto vars:     Size  Location     Type
 20890 ;;  value           1    8[COMMON] unsigned char 
 20891 ;;  result          1    9[COMMON] unsigned char 
 20892 ;; Return value:  Size  Location     Type
 20893 ;;                  1    wreg      unsigned char 
 20894 ;; Registers used:
 20895 ;;		wreg, status,2, status,0, pclath, cstack
 20896 ;; Tracked objects:
 20897 ;;		On entry : 0/0
 20898 ;;		On exit  : 0/0
 20899 ;;		Unchanged: 0/0
 20900 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20901 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20902 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20903 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20904 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20905 ;;Total ram usage:        5 bytes
 20906 ;; Hardware stack levels used:    1
 20907 ;; Hardware stack levels required when called:    1
 20908 ;; This function calls:
 20909 ;;		___lbdiv
 20910 ;; This function is called by:
 20911 ;;		_DimmerLights_IOC_1
 20912 ;;		_DimmerLights_IOC_2
 20913 ;; This function uses a non-reentrant model
 20914 ;;
 20915                           
 20916                           
 20917                           ;psect for function _Division
 20918  19ED                     _Division:	
 20919                           
 20920                           ;incstack = 0
 20921                           ; Regs used in _Division: [wreg+status,2+status,0+pclath+cstack]
 20922                           ;Division@value stored from wreg
 20923  19ED  00F8               	movwf	Division@value
 20924                           
 20925                           ;Dimmer_B1.c: 1376: char result = (char) (value / num);
 20926  19EE  0875               	movf	Division@num,w
 20927  19EF  00F6               	movwf	??_Division
 20928  19F0  0876               	movf	??_Division,w
 20929  19F1  00F0               	movwf	___lbdiv@divisor
 20930  19F2  0878               	movf	Division@value,w
 20931  19F3  319D  25FC         	fcall	___lbdiv
 20932  19F5  00F7               	movwf	??_Division+1
 20933  19F6  0877               	movf	??_Division+1,w
 20934  19F7  00F9               	movwf	Division@result
 20935                           
 20936                           ;Dimmer_B1.c: 1377: return result;
 20937  19F8  0879               	movf	Division@result,w
 20938  19F9  0008               	return
 20939  19FA                     __end_of_Division:	
 20940                           
 20941                           	psect	text146
 20942  1DFC                     __ptext146:	
 20943 ;; *************** function ___lbdiv *****************
 20944 ;; Defined at:
 20945 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 20946 ;; Parameters:    Size  Location     Type
 20947 ;;  dividend        1    wreg     unsigned char 
 20948 ;;  divisor         1    0[COMMON] unsigned char 
 20949 ;; Auto vars:     Size  Location     Type
 20950 ;;  dividend        1    2[COMMON] unsigned char 
 20951 ;;  quotient        1    4[COMMON] unsigned char 
 20952 ;;  counter         1    3[COMMON] unsigned char 
 20953 ;; Return value:  Size  Location     Type
 20954 ;;                  1    wreg      unsigned char 
 20955 ;; Registers used:
 20956 ;;		wreg, status,2, status,0
 20957 ;; Tracked objects:
 20958 ;;		On entry : 0/0
 20959 ;;		On exit  : 0/0
 20960 ;;		Unchanged: 0/0
 20961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20962 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20963 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20964 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20965 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20966 ;;Total ram usage:        5 bytes
 20967 ;; Hardware stack levels used:    1
 20968 ;; This function calls:
 20969 ;;		Nothing
 20970 ;; This function is called by:
 20971 ;;		_Division
 20972 ;; This function uses a non-reentrant model
 20973 ;;
 20974                           
 20975                           
 20976                           ;psect for function ___lbdiv
 20977  1DFC                     ___lbdiv:	
 20978                           
 20979                           ;incstack = 0
 20980                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
 20981                           ;___lbdiv@dividend stored from wreg
 20982  1DFC  00F2               	movwf	___lbdiv@dividend
 20983  1DFD  01F4               	clrf	___lbdiv@quotient
 20984  1DFE  0870               	movf	___lbdiv@divisor,w
 20985  1DFF  1903               	btfsc	3,2
 20986  1E00  2E1B               	goto	i1l7352
 20987  1E01  01F3               	clrf	___lbdiv@counter
 20988  1E02  0AF3               	incf	___lbdiv@counter,f
 20989  1E03                     i1l7340:	
 20990  1E03  1BF0               	btfsc	___lbdiv@divisor,7
 20991  1E04  2E0C               	goto	i1l7342
 20992  1E05  1003               	clrc
 20993  1E06  0DF0               	rlf	___lbdiv@divisor,f
 20994  1E07  3001               	movlw	1
 20995  1E08  00F1               	movwf	??___lbdiv
 20996  1E09  0871               	movf	??___lbdiv,w
 20997  1E0A  07F3               	addwf	___lbdiv@counter,f
 20998  1E0B  2E03               	goto	i1l7340
 20999  1E0C                     i1l7342:	
 21000  1E0C  1003               	clrc
 21001  1E0D  0DF4               	rlf	___lbdiv@quotient,f
 21002  1E0E  0870               	movf	___lbdiv@divisor,w
 21003  1E0F  0272               	subwf	___lbdiv@dividend,w
 21004  1E10  1C03               	skipc
 21005  1E11  2E16               	goto	L13
 21006  1E12  0870               	movf	___lbdiv@divisor,w
 21007  1E13  02F2               	subwf	___lbdiv@dividend,f
 21008  1E14  1474               	bsf	___lbdiv@quotient,0
 21009  1E15  1003               	clrc
 21010  1E16                     L13:	
 21011  1E16  0CF0               	rrf	___lbdiv@divisor,f
 21012  1E17  3001               	movlw	1
 21013  1E18  02F3               	subwf	___lbdiv@counter,f
 21014  1E19  1D03               	btfss	3,2
 21015  1E1A  2E0C               	goto	i1l7342
 21016  1E1B                     i1l7352:	
 21017  1E1B  0874               	movf	___lbdiv@quotient,w
 21018  1E1C  0008               	return
 21019  1E1D                     __end_of___lbdiv:	
 21020  007E                     btemp	set	126	;btemp
 21021  007E                     pic14e$flags	set	126
 21022  007E                     wtemp	set	126
 21023  007E                     wtemp0	set	126
 21024  0080                     wtemp1	set	128
 21025  0082                     wtemp2	set	130
 21026  0084                     wtemp3	set	132
 21027  0086                     wtemp4	set	134
 21028  0088                     wtemp5	set	136
 21029  007F                     wtemp6	set	127
 21030  007E                     ttemp	set	126
 21031  007E                     ttemp0	set	126
 21032  0081                     ttemp1	set	129
 21033  0084                     ttemp2	set	132
 21034  0087                     ttemp3	set	135
 21035  007F                     ttemp4	set	127
 21036  007E                     ltemp	set	126
 21037  007E                     ltemp0	set	126
 21038  0082                     ltemp1	set	130
 21039  0086                     ltemp2	set	134
 21040  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         264
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     80      80
    BANK1            80      8      80
    BANK2            80      0      79
    BANK3            80      0      78
    BANK4            80      0      69
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerIntr	PTR struct Dimmer_Interrupt size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK3[4]), VarLED2(BANK3[4]), VarLED1(BANK3[4]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 8
		 -> NULL(NULL[0]), DimmerLights2(BANK3[8]), DimmerLights1(BANK2[8]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK3[5]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_TMR_1
    _TMR1_ISR->_DimmerLights_TMR_2
    _IOC_ISR->_DimmerLights_IOC_1
    _IOC_ISR->_DimmerLights_IOC_2
    _DimmerLights_IOC_2->_Division
    _DimmerLights_IOC_1->_Division
    _Division->___lbdiv

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOn
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDelayOff_GO
    _setRFSW_AdjControl->_setDimmerIntr_MaxmumValue
    _setRFSW_AdjControl->_setProductData
    _setDimmerLights_DimmingRun->_DimmerLights_SelectPointer
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_Flash_Memory_Read
    _Exception_Main->_setBuz
    _setDimmerLights_Main->_setDimmerLights_OnOff
    _setDimmerLights_OnOff->_setDelayOff_GO
    _setLED->_LedPointSelect
    _setDimmerIntr_DimmingValue->_getDimmerLights_PercentToValue
    _setDelayOff_GO->_setProductData
    _getDelayOff_GO->_DelayOffPointSelect
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setDimmerIntr_MaxmumValue->_getDimmerLights_PercentToValue
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _DimmerIntr_Initialization->_getDimmerLights_PercentToValue
    _DimmerIntr_Initialization->_getDimmerLights_ValueToPercent
    _getDimmerLights_ValueToPercent->___fttol
    _getDimmerLights_PercentToValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftmul->___awtoft
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setProductData
    _setProductData->_getDimmerLights_ValueToPercent
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_DimmerLights_SelectPointer
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_OnOff

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  148208
                                              4 BANK1      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1434
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     312
                                              4 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     585
                                              4 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     222
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    4517
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         9     9      0    4517
                                             69 BANK0      9     9      0
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    3659
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    3659
                                             18 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      66
                                              2 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     117
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     930
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     930
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   44487
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   44487
                                              2 BANK1      2     2      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   40091
                                              0 BANK1      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    4192
                                             69 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   35715
             _getDimmerLights_Status
           _getMain_All_LightsStatus
                      _setCmd_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   10218
                                             77 BANK0      3     3      0
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   20720
                                             69 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
         _setDimmerLights_DimmingRun
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                   _setMemory_Modify
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setDimmerLights_DimmingRun                           3     2      1     177
                                              2 BANK0      3     2      1
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     470
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    2367
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     516
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     536
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     471
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     338
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     547
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     448
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    2084
                                              8 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
    _getAll_DimmerIntr_Dimming_Sw_RF
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerIntr_Dimming_Sw_RF                      4     4      0      95
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     270
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4    1052
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1018
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1018
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    3     3      0    1663
                                              6 BANK0      3     3      0
                _Flash_Memory_Modify
                _getAll_Sw_KeyStatus
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _getAll_Sw_KeyStatus                                  3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1520
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    1430
                                              4 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1    1290
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    3047
                                             13 BANK0      9     9      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 2     2      0      25
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   48762
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   48531
                                              1 BANK1      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
           _getMain_All_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                4     3      1   27800
                                             77 BANK0      3     2      1
                                              0 BANK1      1     1      0
                      _getCmd_Status
                     _getDelayOff_GO
     _getDimmerLights_PercentToValue
           _getMain_All_LightsStatus
                      _setCmd_Status
                     _setDelayOff_GO
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     908
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_Dimming_RF                             3     2      1     266
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     177
                                             66 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     266
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (6) _setDelayOff_GO                                       8     6      2    3719
                                             69 BANK0      8     6      2
                _DelayOffPointSelect
                             ___bmul
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) ___bmul                                               4     3      1     270
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setCmd_Status                                        3     2      1     222
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      47
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      89
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getCmd_Status                                        2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              4     3      1   20299
                                             74 BANK0      4     3      1
         _getDimmerIntr_DimmingValue
     _getDimmerLights_ValueToPercent
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                   _setMemory_Modify
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    3137
                                             69 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_MaxmumValue                            3     2      1     355
                                             66 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_Dimming_Sw                             3     2      1     266
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      69
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      6     6      0     187
                                              1 BANK0      6     6      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     161
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0   26941
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            1     1      0   26941
                                             66 BANK0      1     1      0
     _getDimmerLights_PercentToValue
     _getDimmerLights_ValueToPercent
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_ValueToPercent                       6     6      0   11771
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_PercentToValue                       6     6      0   15148
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     430
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     223
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    3377
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    3687
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    4221
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    3142
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2873
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    4662
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    4662
                                             69 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       3     2      1    2714
                                             66 BANK0      3     2      1
     _getDimmerLights_ValueToPercent (ARG)
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 5     5      0    1639
                                             13 BANK0      5     5      0
         _DimmerLights_SelectPointer
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1434
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     478
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0      66
                                              2 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      89
                                              2 BANK0      2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      66
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      66
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (7) _DelayOffPointSelect                                  2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  1     1      0     992
                                             12 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0       0
                 _DimmerLights_TMR_1
                 _DimmerLights_TMR_2
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_2                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_1                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _IOC_ISR                                             0     0      0     992
                 _DimmerLights_IOC_1
                 _DimmerLights_IOC_2
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_2                                  2     2      0     496
                                             10 COMMON     2     2      0
                           _Division
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_1                                  2     2      0     496
                                             10 COMMON     2     2      0
                           _Division
 ---------------------------------------------------------------------------------
 (12) _Division                                            5     4      1     496
                                              5 COMMON     5     4      1
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (13) ___lbdiv                                             5     4      1     251
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
       _getDimmerLights_PercentToValue
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _getDimmerLights_ValueToPercent
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setMemory_Modify
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_All_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setMemory_Modify
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _getCmd_Status
         _getDelayOff_GO
           _DelayOffPointSelect
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getMain_All_LightsStatus
         _setCmd_Status
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLights_SelectPointer
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLights_SelectPointer
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getAll_Sw_KeyStatus
     _getMain_All_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerIntr_Dimming_Sw_RF
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _getMain_All_LightsStatus
           _setCmd_Status
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_PercentToValue
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setDimmerIntr_Dimming_RF
             _setDimmerIntr_MaxmumValue
               _getDimmerLights_PercentToValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_DimmingRun
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setMemory_Modify
             _setProductData
               _getDimmerLights_ValueToPercent (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
       _setBuz
         ___awdiv
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_IOC_1
       _Division
         ___lbdiv
     _DimmerLights_IOC_2
       _Division
         ___lbdiv
   _TMR1_ISR
     _DimmerLights_TMR_1
     _DimmerLights_TMR_2

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       1       6        1.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      8      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4F       9       98.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4E      11       97.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      45      13       86.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     190      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     190      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Wed Feb 25 11:38:37 2015

                    __size_of_Switch_Main 000B                     ?_Flash_Memory_Erasing 0070  
                              __CFG_CP$ON 0000                              _WDT_Clearing 0002  
                   __end_of_setCmd_Status 1C47                            ___bmul@product 0022  
               getMain_Lights_Count@count 0020                                        l98 143C  
                                      _RD 0CA8                   __end_of_CC2500_WriteREG 1EA5  
                                      _WR 0CA9                              ___awdiv@sign 0026  
                                      _Sw 00D9                            setTemp_Main@AD 006C  
                     ___wmul@multiplicand 0022                      _getDimmerLights_Line 1B29  
                  __end_of_setDelayOff_GO 0CA8                              ___ftadd@exp1 004D  
                            ___ftadd@exp2 004C                  __size_of_getRF_KeyStatus 0011  
                    _setDimmerLights_Main 164F                      _setDimmerLights_Line 1CE6  
                            ___ftadd@sign 004B                                       l100 1450  
                                     l110 12F1                                       l112 1301  
                                     l108 1307                                       l109 1303  
                    _setDimmerLights_SwOn 0800                                       l327 1C53  
                                     l328 1C55                                       l371 1ECF  
                                     l259 1769                                       l581 17F9  
                                     l920 1B32                                       l921 1B3A  
                                     l915 1CF5                                       l759 1BB9  
                                     l859 1DB2                                       l886 06B6  
                                     _GIE 005F                                       _CRC 00D3  
                                     _RA0 0060                                       _RB0 0068  
    __size_of_DimmerLights_Initialization 000B                                       _RB1 0069  
                                     _RA3 0063                                       _RC0 0070  
                                     _RB2 006A                                       _RA4 0064  
                                     _LED 00D7                                       _RC1 0071  
                                     _RB3 006B                                       _RC2 0072  
                                     _RB4 006C                                       _RA6 0066  
                                     _RB5 006D                                       _RA7 0067  
                                     _RC4 0074                                       _RC5 0075  
                                     _RC7 0077                                       _RF1 00A0  
                                     _ISR 0004                                       _WDT 0136  
                                     _Cmd 00D4              getDimmerLights_Status@lights 0022  
                                     _Sw1 01BE                                       _Sw2 01C7  
              ??_setDimmerIntr_Dimming_RF 0021                ??_setDimmerIntr_Dimming_Sw 0021  
         setDimmerIntr_Dimming_RF@command 0020                  __end_of_CC2500_WriteByte 1C60  
                   _Buzzer_Initialization 18CA                           __end_of_ADC_Set 190B  
                                     wreg 0009      setDimmerLights_Initialization@lights 0070  
            getDimmerLights_Status@status 0023       __end_of_setDimmerIntr_ControlStatus 1F71  
             _setDimmerIntr_ControlStatus 1F42                         ??_getSw_KeyStatus 0020  
                                    ?_ISR 0070                              ___ftdiv@cntr 0038  
                         __end_of_IOC_ISR 198D                     _setDimmerLights_OnOff 062B  
        setDimmerLights_DimmingRun@lights 0024                                Load_Main@i 0030  
                            ___ftdiv@sign 003D                                      l1134 1D87  
                                    l1135 1D91                                      l2215 0CBE  
                                    l1168 1274                                      l2224 0D36  
                                    l2208 1091                                      l2152 0576  
                                    l2153 05C7                                      l1442 1239  
                                    l1610 0082                                      l3019 1D29  
                                    l2148 0627                                      l1606 01FF  
                                    l1456 1FC8                                      l1616 01DB  
                                    l1608 008B                                      l3209 0428  
                                    l1617 01D9                                      l1609 0087  
                                    l2193 0A1B                                      l1466 0B8D  
                                    l2178 19FF                                      l3180 14F2  
                         __end_of_IOC_Set 196B                                      l2545 1B97  
                                    l3186 1509                                      l1780 0E8D  
                                    l2567 0381                                      l1791 0E85  
                                    l2569 024D                                      l2914 0555  
                                    l7002 11F1                                      l1786 0E00  
                                    l2923 1C46                            _Load_Main$3687 002A  
                                    l7014 0AA6                                      l6320 14C8  
                                    l7202 1056                                      l2882 1044  
                                    l7018 0AAB                                      l2858 1141  
                                    l2883 105F                                      l6324 14CF  
                                    l6500 03F4                                      l7028 0AFB  
                                    l6422 1BC7                                      l6334 14F7  
                                    l6326 14D9                                      l6502 03FE  
                                    l2887 105B                                      l6432 1BDE  
                                    l6360 1377                                      l6336 14FF  
                                    l6328 14DE                                      l6512 041A  
                                    l6504 0403                                      l7144 1F5A  
                                    l7152 1C0C                                      l9000 04E6  
                                    l7320 0D15                                      l7312 0CCD  
                                    l7304 0CA9                                      l6370 137F  
                                    l6354 136C                                      l6522 044C  
                                    l6514 0424                                      l6506 0407  
                                    l6602 0EF9                                      l7162 1BAF  
                                    l6442 1A79                                      l7242 132E  
                                    l7250 1336                                      l9002 04C1  
                                    l7322 0D19                                      l7314 0CD4  
                                    l6372 138B                                      l6460 1E6B  
                                    l6532 0467                                      l7172 1019  
                                    l7228 131D                                      l7236 1325  
                                    l9020 0503                                      l9004 04EE  
                                    l7324 0D1D                                      l7316 0CEF  
                                    l8212 1DCF                     _setDimmerLights_SwOff 07C6  
                                    l6382 13A6                                      l6518 043A  
                                    l6542 0D4E                                      l6614 0F15  
                                    l6606 0F01                                      l6438 1A73  
                                    l7262 1352                                      l9022 0530  
                                    l9030 054B                                      l7318 0D11  
                                    l8206 1DC7                                      l6472 03B1  
                                    l7192 103F                                      l7272 1A62  
                                    l9024 053A                                      l8232 1A36  
                                    l7328 0D21                                      l8312 0E12  
                                    l8208 1DCA                                      l6386 13AE  
                                    l6378 139D                                      l6482 03C7  
                                    l6570 0DBE                                      l6562 0DA5  
                                    l6618 0F1D                                      l6642 0BAE  
                                    l7194 1048                                      l7506 11B7  
                                    l7258 134E                                      l7266 1356  
                                    l7530 0689                                      l9018 0528  
                                    l8250 0B2B                                      l8306 0E03  
                                    l8314 0E15                                      l6476 03B8  
                                    l6548 0D64                                      l6660 0BDE  
                                    l7508 11BC                                      l7276 1A69  
                                    l8244 0B16                                      l6726 0814  
                                    l6494 03E1                                      l6590 0EBE  
                                    l6670 0C02                                      l6662 0BEC  
                                    l7278 1A6E                                      l7534 0690  
                                    l6760 07F4                                      l6736 0825  
                                    l6728 0817                                      l6584 0EA8  
                                    l6672 0C05                                      l6816 1BF5  
                                    l6840 1639                                      l6824 1F89  
                                    l7552 06C6                                      l7528 0672  
                                    l9312 1EB8                                      l9400 1735  
                                    l8344 0E5D                                      l6746 084E  
                                    l6738 082A                                      l7570 06F9  
                                    l7538 0696                                      l8258 0B86  
                                    l9306 1EAF                                      l9402 1738  
                                    l8450 1B9C                                      l8354 0E72  
                                    l6748 0853                                      l6676 0C13  
                                    l6668 0BF9                                      l7484 1190  
                                    l7556 06CD                                      l7900 167E  
                                    l8604 1DB4                                      l7652 1FB0  
                                    l7804 10BC                                      l9260 1C8C  
                                    l9340 12AE                                      l9308 1EB2  
                                    l9420 1750                                      l7732 09E2  
                                    l7716 09C1                                      l8508 02F5  
                                    l8356 0E74                                      l6782 0C5A  
                                    l7910 16A6                                      l9254 1C83  
                                    l9350 12BE                                      l9334 12A5  
                                    l9430 1778                                      l9406 173E  
                                    l8454 1BA2                                      l8518 0329  
                                    l7496 11A6                                      l7576 13CE  
                                    l6792 0C8A                                      l7912 16AD  
                                    l7808 10C5                                      l8800 00AE  
                                    l9256 1C86                                      l6936 1EE0  
                                    l9344 12B5                                      l9336 12A8  
                                    l9280 1D19                                      l9432 177C  
                                    l9424 176F                                      l7744 09F7  
                                    l7728 09D9                                      l8720 0A3C  
                                    l7842 0880                                      l7498 11A9  
                                    l8650 077E                                      l6938 1EEB  
                                    l9290 1E8E                                      l9346 12B8  
                                    l9434 177F                                      l9426 1772  
                                    l7770 1D6A                                      l7844 088F  
                                    l6972 1C31                                      l6796 0C9E  
                                    l8548 1D23                                      l7756 1C23  
                                    l7780 1D76                                      l7772 1D6C  
                                    l8484 0280                                      l8468 0237  
                                    l8732 0A63                     _myMain_Initialization 1B16  
                                    l7854 08B3                                      l6966 1B01  
                                    l8806 00E0                                      l9294 1E94  
                                    l9278 1D13                                      l9462 16D6  
                                    l9438 1785                                      l9534 05C2  
                                    l7782 1D7A                                      l8494 02B5  
                                    l9630 1493                                      l8568 12DB  
                                    l7856 08C2                                      l6976 1C40  
                                    l7872 1E27                                      l8832 0163  
                                    l9288 1E8B                                      l9480 1701  
                                    l9456 16CD                                      l7696 1A58  
                                    l8728 0A5B                                      l7882 1E37  
                                    l8842 018F                                      l9458 16D0  
                                    l9562 0608                                      l9626 1488  
                                    l8676 1218                                      l7796 109E  
                                    l7884 1E3C                                      l8852 01AB  
                                    l9548 05D6                                      l8748 0A8A  
                                    l7798 10AA                                      l8862 01C1  
                                    l8838 0172                                      l8846 019B  
                                    l8766 0069                                      l9478 16E8  
                                    l8950 1121                                      l8784 008A  
                                    l9576 0620                                      _CFGS 0CAE  
                                    l7898 1677                                      l8982 049F  
                                    l8992 04BE                              __CFG_WDTE$ON 0000  
                                    l8898 01EE                                      l8988 04AF  
                                    _FREE 0CAC                                      _LATA 010C  
                                    _LATB 010D                                      _LATC 010E  
                                    u5305 1396                                      u5225 1510  
                                    u5315 139E                                      u5155 14D4  
                                    _PEIE 005E                                      u5175 14ED  
                                    u6250 15F4                                      u5275 1382  
                                    u5195 14FA                                      u5605 0408  
                                    u5295 138C                                      u6255 15F2  
                                    u5545 03E2                                      u5705 0D76  
                                    u5635 041B                                      u5715 0D86  
                                    u6195 0C66                                      u6355 1ED5  
                                    u5725 0DA6                                      u5575 03F5  
                                    u5735 0DB5                                      u5815 0F02  
                                    u5745 0DBF                                      u5825 0F08  
                                    u5905 0BB5                                      u7345 1B8A  
                                    u5855 0F1E                                      u5935 0BDF  
                                    u5865 0F24                                      u5785 0ECA  
                                    u7705 10AB                                      u9145 1D2A  
                                    u5795 0EDA                                      u7715 10B5  
                                    u9155 1D2F                                      u5965 0BFA  
                                    u7725 10BD                                      u9185 12D1  
                                    u7685 10A1                                      u9445 0A4B  
                                    u9385 1230                                      u8755 0E46  
                                    u9645 00AC                                      u9655 00DE  
                                    u8775 0E64                                      u9495 0A7A  
                                    u9745 01A2                                      u9665 0122  
                                    _LWLO 0CAD                                      u9855 1FF3  
                                    u9960 04EC                                      u9965 04CA  
                                    u9990 052E                                      u9895 1139  
                                    u9995 050C                                      _RSSI 013A  
                                    _WREN 0CAA                                      _WPUB 020D  
      __end_of_setDimmerLights_DimmingRun 1CCA                _setDimmerLights_DimmingRun 1CAF  
                                    _Buz1 0120                                      _Load 013F  
                                    _Temp 00DC                                      _main 1464  
                            ___ftpack@arg 0020                       __end_of_DlyOff_Main 1800  
                         __end_of_RF_Main 18D6                              ___ftpack@exp 0023  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                           __end_of_WDT_Set 19E1  
                                    ltemp 007E             __size_of_setRF_Initialization 000B  
                                    start 001F                                      ttemp 007E  
                                    wtemp 007E                __end_of_setRFSW_AdjControl 0B0F  
                       ___bmul@multiplier 0023                              ___ftmul@cntr 003C  
                            ___ftmul@sign 003D              __size_of_Temp_Initialization 0003  
    _getDimmerLights_Allow_Condition$2416 0022      _getDimmerLights_Allow_Condition$2417 0023  
    _getDimmerLights_Allow_Condition$2418 0024                         ?_getDimmer_LoadGO 0070  
                                   ??_ISR 007C                              ___fttol@exp1 005B  
                            ___fttol@lval 0057         setDimmerLights_DimmingRun@command 0022  
 __end_of_getDimmerLights_Allow_Condition 11BE  __size_of_getDimmerLights_Allow_Condition 003E  
       ??_getDimmerLights_Allow_Condition 0021          ?_getDimmerLights_Allow_Condition 0070  
         _getDimmerLights_Allow_Condition 1180                    _getDimmerLights_Status 1A09  
                      ??_getDimmer_LoadGO 0020                          __end_of_LED_Main 19C9  
                   ?_getDimmerLights_Line 0070                                _DimmerIntr 0138  
                   ?_setDimmerLights_Main 0070                     ?_setDimmerLights_Line 0070  
                         ?_setDelayOff_GO 0065                     ?_setDimmerLights_SwOn 0070  
                                   ?_main 00EA                           __end_of___awdiv 13B5  
                         __end_of___lbdiv 1E1D                           __end_of___ftadd 047F  
                         __end_of___ftdiv 0DE0                           __end_of___ftneg 194C  
                         __end_of___ftmul 0F45                                     u10255 1B60  
                         ___awdiv@divisor 0020                                     _T1CON 0018  
                                   u10705 05F7                           __end_of___fttol 0C1C  
                                   u10675 059A                                     _IOCBF 0396  
                                   _IOCBN 0395                                     _IOCBP 0394  
                                   _IOCIE 005B                                     _IOCIF 0058  
                         __end_of___lwdiv 10CC                                     i1l972 0927  
                                   i1l974 091C                                     i1l966 0901  
                                   i1l958 08F0                                     i1l983 0939  
                                   i1l977 0925                                     i1l997 0960  
                         ___awdiv@counter 0025             __size_of_CC2500_FrequencyCabr 000C  
                                   _TMR1H 0017                                     _TMR1L 0016  
                                   _PORTA 000C                                     _PORTB 000D  
                                   _PORTC 000E                              ?_setLED_Main 0070  
                      setRF_Learn@command 0021                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
                 __end_of_Timeout_Counter 1B90                             __CFG_WRT$HALF 0000  
  __end_of_getDimmerLights_ValueToPercent 15EA   __size_of_getDimmerLights_ValueToPercent 0065  
          _getDimmerLights_ValueToPercent 1585                                     _Light 0139  
                        __end_of_TMR1_ISR 1E60                   __size_of_setProductData 000C  
            __size_of_CC2500_WriteCommand 001A                          __end_of_TMR1_Set 19D5  
                                   _getAD 1DBC                             ___awtoft@sign 002D  
                           ___ftpack@sign 0024               __size_of_CC2500_ClearRXFIFO 0004  
                           ??_Buzzer_Main 0020                          __end_of_WDT_Main 1ACA  
             __size_of_CC2500_ClearTXFIFO 0004                       CC2500_RxData@loop_f 0025  
                          __pbitbssCOMMON 03E8                            __CFG_BOREN$OFF 0000  
            __end_of_getMain_Lights_Count 1AA6                        Flash_Memory_Read@i 0021  
                        ?_CC2500_ReadByte 0070                                     ltemp0 007E  
                                   ltemp1 0082                                     ltemp2 0086  
                                   ltemp3 0080            __size_of_setLED_Initialization 0012  
           __end_of_setLED_Initialization 1A94                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                            ?_setRF_Learn 0070                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F                       _getAll_Sw_KeyStatus 1A2B  
                      _setRF_DimmerLights 15EA                           ___lbdiv@divisor 0070  
             __size_of_Flash_Memory_Write 002F                         ?_CC2500_SIDLEMode 0070  
                         ___lbdiv@counter 0073                __size_of_RF_Initialization 0003  
        __size_of_DelayOff_Initialization 0008                    ?_setLoad_AH_AL_Restore 0070  
                       setTemp_Main@error 0066               __size_of_setRF_TransceiveGO 0013  
                  ??_Flash_Memory_Erasing 0020               ??_setDimmerLights_DimmingOn 0022  
                      ??_CC2500_SIDLEMode 0024                           __initialization 0021  
                        ?_CC2500_PowerRST 0070                         ?_setMemory_Modify 0070  
                        __end_of_Division 19FA                   __size_of_getDelayOff_GO 0011  
                            __end_of_main 14BF                       ?_setRF_DimmerLights 0065  
                        __end_of_Fosc_Set 18DD            getMain_All_LightsStatus@status 0020  
                      ??_setMemory_Modify 0020              setDimmerLights_OnOff@command 006D  
                          _Exception_Main 047F                          ?_CC2500_WriteREG 0022  
                               ??_ADC_Set 0020                      _setSw_Initialization 1933  
                                  ??_main 0070                             ___fttol@sign1 0056  
                    ?_getAll_Sw_KeyStatus 0070                              ?_setLog_Code 0070  
             ?_setDimmerIntr_DimmingValue 0062              ??_DimmerLights_SelectPointer 0020  
                 _setControl_Lights_Table 0CA8                            _setMemory_Data 1999  
                  ?_Buzzer_Initialization 0070                   ??_DlyOff_Initialization 0022  
                              _Receive_OK 0778        setDimmerIntr_ControlStatus@command 0020  
                 _setDimmerLights_Dimming 13B5                                 ??_IOC_ISR 007C  
                               ??_IOC_Set 0020                               _DimmerIntr1 00BB  
                             _DimmerIntr2 00C7                  _getMain_All_LightsStatus 1AF0  
                __size_of_setRFSW_Control 0040                        _RF_Timeout_Counter 1B51  
                 ??_Switch_Initialization 0025                    ?_setDimmerLights_OnOff 006D  
                    ??_setRF_DimmerLights 0066                                    ?_getAD 0020  
                       ??_getRF_KeyStatus 0020                    ?_setDimmerLights_SwOff 0070  
                             _DlyOff_Main 1791                    ?_myMain_Initialization 0070  
                                  _ADCON0 009D                                    _ADCON1 009E  
                               ??_RF_Main 0070                                    _ADRESH 009C  
                                  _ADRESL 009B                          ___awdiv@dividend 0022  
                   _getDimmer_Load_Status 192B                                 ??_WDT_Set 0020  
                        __end_of___awtoft 1E82                                    _ANSELA 018C  
                                  _ANSELB 018D                                    _ANSELC 018E  
                        __end_of___ftpack 1520                  _getMain_All_Error_Status 102E  
                                  _IOCBF2 1CB2                                    i1l1011 0997  
                                  i1l1013 098C                                    i1l1005 0971  
                                  i1l1022 09A9                                    i1l1016 0995  
                                  i1l1405 001A                                    i1l8006 0932  
                                  i1l8104 09A2                                    i1l8034 1179  
                                  i1l8130 1100                                    i1l7340 1E03  
                                  i1l8052 094F                                    i1l7342 1E0C  
                                  i1l8046 0948                                    i1l7352 1E1B  
                                  i1l8058 0957                                    i1l8096 098E  
                                  i1l9152 0012                                    i1l8622 1E59  
                                  i1l8632 1989                                    i1l7960 08E7  
                                  i1l7954 08DF                                    i1l7948 08D8  
                                  i1l7998 091E                                    _FVRCON 0117  
    getDimmerLights_Allow_Condition@allow 0026                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                       ?_RF_Timeout_Counter 0070  
                                  _PMCON2 0196                                    _OSCCON 0099  
                      __size_of_Load_Main 01B2                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    _IO_Set 1C94  
                                  u928_25 1E54                                    _WDTCON 0097  
                      DelayTime_1us@count 0020                      Exception_Main@i_6923 0032  
          __size_of_CC2500_PowerOnInitial 0015               ??_setDimmerIntr_MaxmumValue 0063  
           __end_of_CC2500_PowerOnInitial 1B7B                                    _Dimmer 012C  
                                  _DlySw1 01D8                                    _DlySw2 01DD  
           __size_of_setRF_TimeoutCleared 0004                     __end_of_getCmd_Status 1A70  
              __end_of_Mcu_Initialization 1AB8                       __end_of_Buzzer_Main 130E  
                                  _Memory 0220                                    _Timer1 0131  
                                  ___bmul 1A70                    __end_of_Exception_Main 0556  
                    Exception_Main@lights 0035                                    ___wmul 1D20  
                               ??___awdiv 0024                                 ??___lbdiv 0071  
                               ??___ftadd 0047              __size_of_DelayOffPointSelect 0017  
                               ??___ftdiv 0034                                 ??___ftneg 0041  
                               ??___ftmul 0034                                 ??___fttol 0052  
            ?_Flash_Memory_Initialization 0070                    ??_getDimmerLights_Line 0020  
                               ??___lwdiv 0024                    ??_setDimmerLights_Main 0070  
                  ??_setDimmerLights_Line 0020                                    _r_data 013E  
                    Exception_Main@status 002E   __end_of_getAll_DimmerIntr_Dimming_Sw_RF 1E3E  
__size_of_getAll_DimmerIntr_Dimming_Sw_RF 0021         ??_getAll_DimmerIntr_Dimming_Sw_RF 0020  
        ?_getAll_DimmerIntr_Dimming_Sw_RF 0070           _getAll_DimmerIntr_Dimming_Sw_RF 1E1D  
                                  _s_data 00DB                    ??_setDimmerLights_SwOn 002D  
                                  _setLED 130E                                    _myMain 00AE  
                    ??_RF_Timeout_Counter 0020                    __end_of_setMemory_Data 19A5  
                   ?_setSw_Initialization 0070                          ___awdiv@quotient 0027  
                                  _setBuz 140B                        __size_of_Temp_Main 0003  
                    Load_Main@LightsCount 002F               __end_of_Load_Initialization 18D0  
        ??_setDimmerLights_Initialization 0020           ?_setDimmerLights_Initialization 0070  
                   ??_getAll_Sw_KeyStatus 0020          __end_of_setDimmerIntr_Dimming_RF 1FA0  
        __end_of_setDimmerIntr_Dimming_Sw 102E                     ___ftmul@f3_as_product 0039  
               _setDimmerLights_DimmingOn 1EF0                  Flash_Memory_Read@address 0022  
                        ?_Timeout_Counter 0070                __end_of_setMemory_LoopSave 1B16  
             getMain_Lights_Count@status1 0021               getMain_Lights_Count@status2 0022  
             __size_of_DimmerLights_IOC_1 003D               __size_of_DimmerLights_IOC_2 003B  
                   __end_of_SwPointSelect 1C2E               __size_of_DimmerLights_TMR_1 0070  
             __size_of_DimmerLights_TMR_2 0070              __size_of_Flash_Memory_Modify 0086  
                 __size_of_LedPointSelect 0020           setDimmerIntr_Dimming_Sw@command 0020  
                      setTemp_Main@TempGO 006B                          ___lbdiv@dividend 0072  
                     Flash_Memory_Write@i 0021              __size_of_Flash_Memory_Unlock 0009  
                              _TouchPower 1B90               __size_of_CC2500_InitPATable 001F  
                     CC2500_TxData@loop_e 0025          __end_of_CC2500_registers_address 182F  
                 __end_of__initialization 004F           setDimmerIntr_DimmingValue@value 0062  
         getDimmerIntr_DimmingValue@value 0021                                 ?_LED_Main 0070  
                              ___ftadd@f1 0041                                ___ftadd@f2 0044  
                    _getRF_KeyStatus$5110 0022                             ?_my_MainTimer 0070  
               _setDimmerLights_SwOn$2339 002E                 _setDimmerLights_SwOn$2348 002F  
                              ___ftdiv@f1 0031                                ___ftdiv@f2 002E  
                              ___ftdiv@f3 0039                                ___ftneg@f1 003E  
                              ___awtoft@c 0028                       ___bmul@multiplicand 0020  
            ?_DimmerLights_Initialization 0070                                ___ftmul@f1 002E  
                              ___ftmul@f2 0031                ?_DimmerIntr_Initialization 0070  
                              ___fttol@f1 004E                            __pcstackCOMMON 0070  
                         ?_Exception_Main 0070                              __pidataBANK4 1DDC  
                           __end_of_getAD 1DDC                                 ?_TMR1_ISR 0070  
                               ?_TMR1_Set 0070                    setLoad_AH_AL_Restore@i 0021  
               setMemory_LoopSave@command 0021                        _LED_Initialization 19B1  
                         _getSw_KeyStatus 1D5D                 ??_setControl_Lights_Table 0070  
                      getRF_KeyStatus@key 0021                           ?_setMemory_Data 0020  
        ??_getDimmerLights_PercentToValue 005C           ?_getDimmerLights_PercentToValue 0070  
               ??_setDimmerLights_Dimming 006B             ??_Flash_Memory_Initialization 0024  
                        ___lbdiv@quotient 0074                      _getMain_Lights_Count 1A94  
                               ?_WDT_Main 0070                         __end_of_Load_Main 0205  
       setDimmerIntr_ControlStatus@lights 0022                        __size_of_getBuz_GO 0011  
               _setDimmerIntr_MaxmumValue 1BE9                __end_of_set_TimeoutCleared 18F2  
         setDimmerIntr_MaxmumValue@lights 0064                        __size_of_getRxData 0072  
                     ?_LED_Initialization 0070                         ?_CC2500_WriteByte 0070  
                          _setProductData 198D                      __size_of_setLED_Main 0041  
                  ?_getDimmer_Load_Status 0070                                   ??_getAD 0023  
                     _Temp_Initialization 18D6                        ??_CC2500_WriteByte 0020  
                               ?_Division 0075                                __pbssBANK1 00A0  
                              __pbssBANK2 0120                                __pbssBANK3 01A0  
                              __pbssBANK4 0220                                 ?_Fosc_Set 0070  
                             _Buzzer_Main 12C4                         ??_setRFSW_Control 006D  
             ?_setDimmerLights_DimmingRun 0022                         __end_of_Temp_Main 1003  
                                 ?_IO_Set 0070                            ??_my_MainTimer 002D  
                              ??_LED_Main 0025                           __CFG_VCAPEN$OFF 0000  
                 _DelayOff_Initialization 190B                             ??_Switch_Main 0035  
                          DelayTime_1us@i 0022                            DelayTime_1us@j 0024  
                    ??_LED_Initialization 0025                              _DimmerLights 00D6  
                       LedPointSelect@led 0021     getAll_DimmerIntr_Dimming_Sw_RF@status 0023  
                  __size_of_DelayOff_Main 0008                      __size_of_setRF_Learn 0014  
                             setBuz@count 002C                   ?_getDimmerLights_Status 0070  
                              __pmaintext 1464                            _getDelayOff_GO 1A1A  
                     _CC2500_WriteCommand 1C7A                      ?_Temp_Initialization 0070  
                                 ?___bmul 0020                          ??_setDelayOff_GO 0067  
       __end_of_DimmerIntr_Initialization 08CB             ??_DimmerLights_Initialization 0063  
                                 ?___wmul 0020                                ??_TMR1_ISR 0071  
                           ?_setTemp_Main 0070                                _getLoad_AD 0A1D  
                              ??_TMR1_Set 0020                                __pintentry 0004  
                  ??_setSw_Initialization 0024                                _getLoad_OK 191B  
                      __size_of_setTxData 00BB                                   ?_setLED 0022  
                  __size_of_DelayTime_1us 0026                     ?_getMain_Lights_Count 0070  
                                 _ADC_Set 1904                                   ?_setBuz 0029  
                               ?___awtoft 0028                                 ?___ftpack 0020  
                              _getTemp_AD 1FCF        __end_of_DimmerLights_SelectPointer 1BE9  
              _DimmerLights_SelectPointer 1BD2                                ??_WDT_Main 0020  
            __end_of_setRF_Initialization 1976                        _setRFSW_AdjControl 0A8F  
                  __end_of_setProductData 1999             setDimmerLights_Dimming@lights 006D  
                                 _IOC_ISR 1981                                   _IOC_Set 1960  
                    __size_of_setLog_Code 0034             setDimmerLights_Dimming@status 006A  
   getDimmerLights_Allow_Condition@lights 0025                      ?_CC2500_WriteCommand 0070  
                       _Flash_Memory_Main 11FE                 __size_of_getDimmer_LoadGO 0008  
                       _Flash_Memory_Read 1C60                    __size_of_CC2500_RxData 006B  
                  __size_of_CC2500_TxData 006C                       ?_setRFSW_AdjControl 0070  
                                 _RF_Data 01A0                                   _RF_Main 18D3  
                      ?_Flash_Memory_Main 0070                        ?_Flash_Memory_Read 0070  
                              ??_Division 0076                                   _WDT_Set 19D5  
         __end_of_setControl_Lights_Table 0D37                           setRF_Main@error 00E9  
                  __size_of_setCmd_Status 0019                                ??_Fosc_Set 0020  
                             ?_TouchPower 0070           __end_of_setDimmerLights_Dimming 140B  
                 ??_setLoad_AH_AL_Restore 0020                       getCmd_Status@number 0020  
            __end_of_CC2500_FrequencyCabr 19ED                           __size_of_IO_Set 001B  
                     setCmd_Status@number 0022         __size_of_setDimmerIntr_Dimming_RF 002F  
       __size_of_setDimmerIntr_Dimming_Sw 002B                         __end_of_getBuz_GO 1A4D  
               ?_setDimmerIntr_Dimming_RF 0020                       ??_Flash_Memory_Main 0026  
               ?_setDimmerIntr_Dimming_Sw 0020                       ??_Flash_Memory_Read 0020  
                  __end_of_getDelayOff_GO 1A2B                                   _VarLED1 01E6  
                                 _VarLED2 01EA            __end_of_getDimmerLights_Status 1A1A  
                       __end_of_getRxData 0A1D                   __end_of_getSw_KeyStatus 1D7C  
                _CC2500_registers_address 1800                     ??_Temp_Initialization 0020  
                    ??_setRFSW_AdjControl 0065                            ??_setTemp_Main 0065  
                         __size_of___bmul 0012                       setProductData@value 0062  
                                 ___awdiv 1361                                   ___lbdiv 1DFC  
                                 ___ftadd 0389                                   ___ftdiv 0D37  
                                 ___ftneg 1943                           __size_of___wmul 001E  
                                 ___ftmul 0E91                                   ___fttol 0B95  
                     __end_of_Switch_Main 1981                                   ___lwdiv 1095  
              ??_getMain_All_LightsStatus 0020                   ??_Buzzer_Initialization 0020  
                         _getRF_KeyStatus 1A4D                                ??___awtoft 002B  
                              ??___ftpack 0025                           __size_of_setLED 0053  
                    setRFSW_AdjControl@sw 0068                           __size_of_setBuz 0059  
                                 __ptext1 1107                                   __ptext2 1B16  
                                 __ptext3 1FCF                                   __ptext4 0A1D  
                                 __ptext5 1DBC                                   __ptext6 1AB8  
                                 __ptext7 0002                                   __ptext8 1000  
                                 __ptext9 0DE0                 __size_of_CC2500_SIDLEMode 0004  
                            __size_of_ISR 001B                ??_getMain_All_Error_Status 0020  
                 ??_setDimmerLights_OnOff 006E                           ?_setProductData 0062  
               __end_of_Flash_Memory_Main 123F                 __end_of_Flash_Memory_Read 1C7A  
                 ??_setDimmerLights_SwOff 0022                                _setRF_Main 0556  
                 ??_myMain_Initialization 0020                             _DelayOff_Main 1913  
                       _DimmerLights_Main 1D9C            __size_of_DlyOff_Initialization 0006  
                   ??_CC2500_WriteCommand 0022                 __size_of_setMemory_Modify 0013  
           __end_of_DlyOff_Initialization 18F8                __end_of_CC2500_ClearRXFIFO 18E5  
                ??_setTemp_Initialization 0020                __end_of_CC2500_ClearTXFIFO 18E9  
                            ?_DlyOff_Main 0070                        ?_DimmerLights_Main 0070  
                                 _product 00EE                            _LedPointSelect 1D7C  
               getAll_Sw_KeyStatus@status 0021                           getTemp_AD@ADRES 0026  
                     _DelayOffPointSelect 1BBB                                   clrloop0 18FF  
          __size_of_Switch_Initialization 0008             __end_of_Switch_Initialization 1943  
                    end_of_initialization 004F                 ??_DelayOff_Initialization 0023  
                       _CC2500_InitSetREG 1F18                             _DelayTime_1us 1ECA  
                       __end_of_setTxData 1000                __end_of_Flash_Memory_Write 1FCF  
      __size_of_setDimmerLights_DimmingOn 0028                                   init_ram 18F8  
              __end_of_setRF_TransceiveGO 1AF0                        ?_CC2500_InitSetREG 0070  
                     ??_DimmerLights_Main 0070                      Flash_Memory_Read@ret 0023  
                                 initloop 18F9                                _setSw_Main 0205  
                   CC2500_ReadByte@loop_b 0021                    setDimmerLights_SwOn@sw 0031  
                       _CC2500_ReadStatus 1EA5                      Flash_Memory_Modify@i 0025  
                   _setLED_Initialization 1A82                           ?_getDelayOff_GO 0070  
                              getBuz_GO@i 0024                        ?_CC2500_ReadStatus 0070  
                __size_of_CC2500_ReadByte 001D                             _CC2500_RxData 16BA  
                           _CC2500_TxData 1725                       ??_CC2500_InitSetREG 0025  
           __size_of_Flash_Memory_Erasing 000C                      ?_DelayOffPointSelect 0070  
                     _Flash_Memory_Modify 0B0F                               ?_getLoad_AD 0070  
                             ?_getLoad_OK 0070                    ??_getMain_Lights_Count 0020  
                            __pstringtext 1800                             _setCmd_Status 1C2E  
                     _Flash_Memory_Unlock 194C                       ??_CC2500_ReadStatus 0022  
                 CC2500_InitSetREG@loop_c 0028                               ?_getTemp_AD 0070  
                     __size_of_TouchPower 0015                  setLED_Initialization@led 0024  
                 setTemp_Main@DangerValue 0069                    setSw_Initialization@sw 0024  
               __end_of_DimmerLights_Main 1DBC                        _Mcu_Initialization 1AA6  
                __size_of_CC2500_PowerRST 0044              __end_of_setRF_TimeoutCleared 18E1  
                    __end_of_my_MainTimer 1143                            ?_DelayOff_Main 0070  
                        __CFG_FOSC$INTOSC 0000                    __end_of_LedPointSelect 1D9C  
                __size_of_CC2500_WriteREG 0023                  Load_Main@ErrorCountValue 002D  
        setDimmerIntr_DimmingValue@lights 0064          getDimmerIntr_DimmingValue@lights 0022  
               __end_of_CC2500_InitSetREG 1F42                       ?_Mcu_Initialization 0070  
                    ?_Flash_Memory_Modify 0070               __size_of_setRF_DimmerLights 0065  
                          ?_DelayTime_1us 0020                      ?_Flash_Memory_Unlock 0070  
      __size_of_setDimmerIntr_MaxmumValue 0017                 __end_of_CC2500_ReadStatus 1ECA  
                           ?_RF_RxDisable 0070            setDimmerIntr_Dimming_RF@lights 0022  
         getMain_All_Error_Status@command 0025                               ___ftdiv@exp 003C  
       __end_of_setDimmerLights_DimmingOn 1F18                          ??_Exception_Main 002D  
                          __end_of_IO_Set 1CAF                      _setRF_Initialization 196B  
                      _setMemory_LoopSave 1B03                               _Switch_Main 1976  
                       __size_of_LED_Main 000C                          ?_getSw_KeyStatus 0070  
                          ?_CC2500_RxData 0070                            ?_CC2500_TxData 0070  
                 __end_of_getRF_KeyStatus 1A5E                          ??_setMemory_Data 0021  
                             ___ftmul@exp 0038                     _CC2500_PowerOnInitial 1B66  
             ??_DimmerIntr_Initialization 0062                      ??_Mcu_Initialization 0021  
             __end_of_getAll_Sw_KeyStatus 1A3C                     ??_DelayOffPointSelect 0020  
                           ?_WDT_Clearing 0070                            ?_setCmd_Status 0020  
                     ?_setMemory_LoopSave 0070                            __end_of___bmul 1A82  
     __size_of_getDimmerIntr_DimmingValue 0016                      setRF_DimmerLights@on 0065  
                          __end_of___wmul 1D3E                         getSw_KeyStatus@sw 0024  
             __size_of_RF_Timeout_Counter 0015                         __size_of_TMR1_ISR 0022  
           __size_of_getDimmerLights_Line 0014          DimmerLights_SelectPointer@lights 0021  
                       __size_of_TMR1_Set 000C             __size_of_setDimmerLights_Main 006B  
                          __end_of_setLED 1361                             __pbitbssBANK1 0778  
           __size_of_setDimmerLights_Line 001D             __size_of_setDimmerLights_SwOn 005C  
                          __end_of_setBuz 1464                __end_of_DimmerLights_IOC_1 1180  
              __end_of_DimmerLights_IOC_2 1107                      _CC2500_FrequencyCabr 19E1  
                 ??_getDimmer_Load_Status 0020                __size_of_Flash_Memory_Main 0041  
              __size_of_Flash_Memory_Read 001A                               ?_setRF_Main 0070  
                         _setRFSW_Control 11BE                         __size_of_WDT_Main 0012  
              __end_of_DimmerLights_TMR_1 093B                __end_of_DimmerLights_TMR_2 09AB  
                     start_initialization 0021                           ?_LedPointSelect 0070  
                               _Load_Main 0053                               __end_of_ISR 001F  
                  __size_of_getCmd_Status 0012                          _getDimmer_LoadGO 1923  
                   ??_Flash_Memory_Modify 0024              __size_of_Load_Initialization 0003  
            ?_setDimmerIntr_ControlStatus 0020                __end_of_CC2500_InitPATable 1D5D  
         __size_of_setTemp_Initialization 0001                      ??_setMemory_LoopSave 0020  
                   ??_Flash_Memory_Unlock 0020                      __end_of_setTemp_Main 0E91  
                          ??_RF_RxDisable 0024    __end_of_getDimmerLights_PercentToValue 1585  
 __size_of_getDimmerLights_PercentToValue 0065            _getDimmerLights_PercentToValue 1520  
                     __size_of_getLoad_AD 0072                              ?_Buzzer_Main 0070  
     getDimmerLights_PercentToValue@value 005E                       __size_of_getLoad_OK 0008  
                      _set_TimeoutCleared 18ED         __end_of_setDimmerIntr_MaxmumValue 1C00  
                                ??_IO_Set 0020                  __size_of_Timeout_Counter 0015  
                               _VarErrLED 01E2                         __size_of_Division 000D  
                             ?_setSw_Main 0070                       __size_of_getTemp_AD 0031  
                  ?_setLED_Initialization 0070                     ?_setRF_Initialization 0070  
                       __size_of_Fosc_Set 0004                 __size_of_CC2500_WriteByte 0019  
                               _Temp_Main 1000                       ?_set_TimeoutCleared 0070  
                          ??_WDT_Clearing 0020                                 _Rx_Length 013B  
                   setProductData@address 0064                       Exception_Main@count 002F  
                     Exception_Main@error 0034                                  ??___bmul 0021  
                                ??___wmul 0024                    __size_of_SwPointSelect 0017  
        __end_of_getMain_All_LightsStatus 1B03                                 _Tx_Length 00DA  
                             __pdataBANK4 0245                                  ??_setLED 0023  
                                ?_ADC_Set 0070                                  ??_setBuz 002B  
                         ??_DelayOff_Main 0068                         ??_CC2500_ReadByte 0020  
             ?_DimmerLights_SelectPointer 0070          __end_of_getMain_All_Error_Status 1061  
                        _CC2500_SIDLEMode 18E9                __size_of_DimmerLights_Main 0020  
                      setMemory_Data@data 0020                     ?_CC2500_FrequencyCabr 0070  
          setDimmerIntr_Dimming_Sw@lights 0022                             ??_setLED_Main 0022  
                       __size_of___awtoft 0022                         __size_of___ftpack 0061  
                                ?_IOC_ISR 0070                                  ?_IOC_Set 0070  
                 Load_Main@Load_RunStatus 002E                                 ___latbits 0003  
                        _setMemory_Modify 1ACA                                ?_Load_Main 0070  
                           __pcstackBANK0 0020                             __pcstackBANK1 00E6  
               setRF_TransceiveGO@command 0021                      ??_set_TimeoutCleared 0020  
               _DimmerIntr_Initialization 085C                           ??_DelayTime_1us 0022  
              __size_of_CC2500_InitSetREG 002A                             DlyOff_Main@sw 0067  
                       ??_CC2500_PowerRST 0026                                  ?_RF_Main 0070  
                                ?_WDT_Set 0070             ??_setDimmerIntr_ControlStatus 0021  
                            ??_TouchPower 0020                      __size_of_DlyOff_Main 006F  
              __size_of_CC2500_ReadStatus 0025            setDimmerIntr_MaxmumValue@value 0062  
             setDimmerLights_DimmingOn@sw 0022                         ??_CC2500_WriteREG 0023  
                           ??_setRF_Learn 0020                             _DimmerLights1 0167  
                           _DimmerLights2 01D0                     CC2500_WriteREG@w_addr 0024  
                   setDelayOff_GO@command 0065            __size_of_setLoad_AH_AL_Restore 001C  
                         ??_CC2500_RxData 0024             __end_of_setLoad_AH_AL_Restore 1CE6  
                setRFSW_AdjControl@status 0067                           ??_CC2500_TxData 0024  
                               __pnvBANK1 00EE                            getRxData@error 00E7  
             __size_of_LED_Initialization 000C                      _setRF_TimeoutCleared 18DD  
                  ?_CC2500_PowerOnInitial 0070                           Exception_Main@i 0030  
                              ?_Temp_Main 0070                       __size_of_setRF_Main 00D5  
                        ___lwdiv@dividend 0022                     DelayOffPointSelect@sw 0021  
                           _getCmd_Status 1A5E                                setBuz@time 0029  
                         ??_setCmd_Status 0021                       setDelayOff_GO@value 0066  
                ?_setControl_Lights_Table 0070                          ?_getRF_KeyStatus 0070  
                          Load_Main@error 002C                    _setTemp_Initialization 07FF  
                               _getBuz_GO 1A3C                  ?_setDimmerLights_Dimming 006A  
     __end_of_Flash_Memory_Initialization 07C6               _Flash_Memory_Initialization 06FC  
                                ?___awdiv 0020                                 __ptext100 13B5  
                               __ptext101 0F45                                  ?___lbdiv 0070  
                               __ptext110 102E                                 __ptext102 1ADD  
                               __ptext111 1955                                 __ptext103 15EA  
                               __ptext120 0D37                                 __ptext112 18C9  
                               __ptext104 1CE6                                 __ptext121 0389  
                               __ptext113 085C                                 __ptext105 1BE9  
                               __ptext130 07C6                                 __ptext122 1E60  
                               __ptext114 1ACA                                 __ptext106 1003  
                               __ptext131 1A09                                 __ptext123 14BF  
                               __ptext115 1585                                 __ptext107 1BA5  
                               __ptext140 093B                                 __ptext132 1BD2  
                               __ptext124 1913                                 __ptext116 1520  
                               __ptext108 1180                                 __ptext141 08CB  
                               __ptext133 190B                                 __ptext125 1791  
                               __ptext117 0B95                                 __ptext109 191B  
                                ?___ftadd 0041                                 __ptext142 1981  
                               __ptext134 18F2                                 __ptext126 198D  
                               __ptext118 1943                                 __ptext143 10CC  
                               __ptext135 1BBB                                 __ptext127 0800  
                               __ptext119 0E91                                 __ptext144 1143  
                               __ptext136 12C4                                 __ptext128 140B  
                               __ptext145 19ED                                 __ptext137 18CA  
                               __ptext129 1361                                 __ptext146 1DFC  
                               __ptext139 1E3E                                 _getRxData 09AB  
                                ?___ftdiv 002E                                  ?___ftneg 003E  
                                ?___ftmul 002E                                  ?___fttol 004E  
                   __size_of_my_MainTimer 003C                                  ?___lwdiv 0020  
                 __end_of_setRFSW_Control 11FE                          ??_setProductData 0063  
           __size_of_setSw_Initialization 0008            __size_of_Buzzer_Initialization 0003  
           __end_of_Buzzer_Initialization 18CD                             ??_setLog_Code 0065  
                getDimmerLights_Line@line 0021                        __end_of_TouchPower 1BA5  
                     __size_of_setSw_Main 0184              CC2500_ReadStatus@status_addr 0023  
      __end_of_getDimmerIntr_DimmingValue 1BBB              ??_setDimmerIntr_DimmingValue 0063  
              _getDimmerIntr_DimmingValue 1BA5                    CC2500_WriteByte@loop_a 0021  
          __size_of_setDimmerLights_OnOff 00D1                                 _r_address 013D  
           __end_of_setDimmerLights_OnOff 06FC            __size_of_setDimmerLights_SwOff 0039  
          __size_of_myMain_Initialization 0013             __end_of_setDimmerLights_SwOff 07FF  
            __end_of_CC2500_patable_vaule 1866             __end_of_myMain_Initialization 1B29  
                          __size_of_getAD 0020                          ___lwdiv@quotient 0025  
                           _SwPointSelect 1C17                       __end_of_setLED_Main 1280  
                        ??_getDelayOff_GO 0022                    ??_setRF_Initialization 0020  
             __end_of_Temp_Initialization 18D9                         _CC2500_rfSettings 182F  
                          ___wmul@product 0024                                  _LED_Main 19BD  
                         SwPointSelect@sw 0021                                 clear_ram0 18FE  
                CC2500_InitPATable@loop_d 0027                     ?_setRF_TimeoutCleared 0070  
                            _my_MainTimer 1107                                 _setTxData 0F45  
     __end_of_DimmerLights_Initialization 1960               _DimmerLights_Initialization 1955  
                  _Flash_Memory_Main$3307 0028                        _CC2500_ClearRXFIFO 18E1  
                          ?_getCmd_Status 0070                        _CC2500_ClearTXFIFO 18E5  
                setRF_DimmerLights@lights 0069                                  _GO_nDONE 04E9  
                     __end_of_setRF_Learn 1B51                         ??_Timeout_Counter 0020  
                              ?_getBuz_GO 0020                  setRF_DimmerLights@status 0068  
    __size_of_setDimmerIntr_ControlStatus 002F               __size_of_setRFSW_AdjControl 0080  
     __size_of_setDimmerIntr_DimmingValue 0017                        _Flash_Memory_Write 1FA0  
                              ?_getRxData 0070                              ??_getLoad_AD 0024  
                                _TMR1_ISR 1E3E                    CC2500_InitSetREG@temp1 0026  
                  CC2500_InitSetREG@temp2 0027                              ??_getLoad_OK 0020  
                                _TMR1_Set 19C9                       ?_CC2500_ClearRXFIFO 0070  
                     ?_CC2500_ClearTXFIFO 0070                        _setRF_TransceiveGO 1ADD  
                                _RF_Count 0134                      __end_of_RF_RxDisable 1A09  
                            ??_getTemp_AD 0024               __end_of_CC2500_WriteCommand 1C94  
                  ??_CC2500_FrequencyCabr 0026                                  _WDT_Main 1AB8  
                 DlyOff_Initialization@sw 0022                     getSw_KeyStatus@status 0023  
                        __size_of_ADC_Set 0007                         ___wmul@multiplier 0020  
                     ?_Flash_Memory_Write 0070                     __size_of_setTemp_Main 00B1  
                     ?_setRF_TransceiveGO 0070                   __size_of_setDelayOff_GO 008C  
                                _DelayOff 00D5                              setSw_Main@sw 0034  
                             ??_Load_Main 0028                          __size_of_IOC_ISR 000C  
          getMain_All_Error_Status@status 0026                          __size_of_IOC_Set 000B  
            __end_of_Flash_Memory_Erasing 19B1                            ?_SwPointSelect 0070  
                             getAD@adcon0 0023                               getAD@adcon1 0020  
                          setLED_Main@led 0024                      __end_of_WDT_Clearing 0004  
                     __end_of_setLog_Code 1095                     _DlyOff_Initialization 18F2  
       __size_of_getMain_All_LightsStatus 0013                      ??_CC2500_ClearRXFIFO 0024  
                                _Division 19ED                 ?_getMain_All_LightsStatus 0070  
                    ??_CC2500_ClearTXFIFO 0024                 __end_of_CC2500_rfSettings 185E  
                        __size_of_RF_Main 0003                  _setDimmerIntr_Dimming_RF 1F71  
             setDimmerLights_OnOff@lights 00E6                  _setDimmerIntr_Dimming_Sw 1003  
                                _Fosc_Set 18D9                          __size_of_WDT_Set 000C  
                   setRFSW_Control@status 006E                        __end_of_getLoad_AD 0A8F  
                      __end_of_getLoad_OK 1923                     _Switch_Initialization 193B  
       __size_of_getMain_All_Error_Status 0033                      ??_Flash_Memory_Write 0020  
               ?_getMain_All_Error_Status 0070                      __size_of_Buzzer_Main 004A  
                      __end_of_getTemp_AD 2000                                ?_setTxData 0070  
                            ?_Switch_Main 0070                          _CC2500_WriteByte 1C47  
                       getLoad_AD@channel 0026       __size_of_DimmerLights_SelectPointer 0017  
                    ??_setRF_TransceiveGO 0020                                  _SwDetect 013C  
                             ??_Temp_Main 006E                          getCmd_Status@cmd 0021  
                        setCmd_Status@cmd 0020                         setRFSW_Control@sw 006F  
           _getMain_All_Error_Status$6910 0021             _getMain_All_Error_Status$6911 0023  
                __end_of_getDimmer_LoadGO 192B                       _Load_Initialization 18CD  
        ??_getDimmerLights_ValueToPercent 005C           ?_getDimmerLights_ValueToPercent 0070  
                               setLED@led 0023                              _setTemp_Main 0DE0  
                        __size_of___awdiv 0054                          __size_of___lbdiv 0021  
                        __size_of___ftadd 00F6                          ?_setRFSW_Control 0070  
                        __size_of___ftdiv 00A9                          __size_of___ftneg 0009  
                        __size_of___ftmul 00B4                          __size_of___fttol 0087  
                        __size_of___lwdiv 0037                  setDimmerLights_SwOn@idle 0030  
                                ___awtoft 1E60                          ??_LedPointSelect 0020  
                                ___ftpack 14BF             __size_of_getMain_Lights_Count 0012  
                  getDimmer_LoadGO@loadgo 0020                         getTemp_AD@channel 0025  
                            ??_setRF_Main 00E8                      CC2500_WriteREG@value 0022  
                             _setLED_Main 123F                __end_of_setRF_DimmerLights 164F  
          __size_of_getDimmer_Load_Status 0008                  ?_DelayOff_Initialization 0070  
                        getDelayOff_GO@go 0023                          getDelayOff_GO@sw 0022  
           __end_of_getDimmer_Load_Status 1933                          setDelayOff_GO@sw 006C  
                         ___lwdiv@divisor 0020                      ?_Load_Initialization 0070  
                         ___lwdiv@counter 0027                                  __ptext10 18D6  
                                __ptext11 07FF                                  __ptext20 1B7B  
                                __ptext12 1976                                  __ptext21 193B  
                                __ptext13 0205                                  __ptext30 0A8F  
                                __ptext22 1933                                  __ptext14 1B3D  
                                __ptext31 1CAF                                  __ptext23 18D3  
                                __ptext15 1EF0                                  __ptext40 18E9  
                                __ptext32 1A4D                                  __ptext24 0556  
                                __ptext16 1D5D                                  __ptext41 1280  
                                __ptext33 1A3C                                  __ptext25 09AB  
                                __ptext17 1C17                                  __ptext50 18DD  
                                __ptext42 1F18                                  __ptext34 19FA  
                                __ptext26 1061                                  __ptext18 1B90  
                                __ptext51 1B51                                  __ptext43 1D3E  
                                __ptext35 1725                                  __ptext27 1B03  
                                __ptext19 18ED                                  __ptext60 18D9  
                                __ptext52 1C47                                  __ptext44 1E82  
                                __ptext36 16BA                                  __ptext28 0CA8  
                                __ptext61 1904                                  __ptext53 18D0  
                                __ptext45 19E1                                  __ptext37 1EA5  
                                __ptext29 11BE                                  __ptext70 1CCA  
                                __ptext62 0053                                  __ptext54 196B  
                                __ptext46 1ECA                                  __ptext38 1D03  
                                __ptext71 19BD                                  __ptext63 1A94  
                                __ptext55 1AA6                                  __ptext47 18E5  
                                __ptext39 1B66                                  __ptext80 1999  
                                __ptext72 123F                                  __ptext64 192B  
                                __ptext56 19D5                                  __ptext48 18E1  
                                __ptext81 1FA0                                  __ptext73 19B1  
                                __ptext65 1923                                  __ptext57 19C9  
                                __ptext49 1C7A                                  __ptext90 1D7C  
                                __ptext82 194C                                  __ptext74 1A82  
                                __ptext66 1E1D                                  __ptext58 1C94  
                                __ptext91 1F71                                  __ptext83 1C60  
                                __ptext75 11FE                                  __ptext67 1D20  
                                __ptext59 1960                                  __ptext92 1C00  
                                __ptext84 047F                                  __ptext76 1A2B  
                                __ptext68 1095                                  __ptext93 1F42  
                                __ptext85 1B29                                  __ptext77 0B0F  
                                __ptext69 18CD                                  __ptext94 0C1C  
                                __ptext86 1D9C                                  __ptext78 19A5  
                                __ptext95 1A70                                  __ptext87 164F  
                                __ptext79 06FC                                  __ptext96 1C2E  
                                __ptext88 062B                                  __ptext97 1AF0  
                                __ptext89 130E                                  __ptext98 1A1A  
                                __ptext99 1A5E                                  __product 0245  
                 ??_setLED_Initialization 0024                  ??_getDimmerLights_Status 0022  
            __end_of_getDimmerLights_Line 1B3D              __end_of_setDimmerLights_Main 16BA  
            __end_of_setDimmerLights_Line 1D03                        _DimmerLights_IOC_1 1143  
                      _DimmerLights_IOC_2 10CC              __end_of_setDimmerLights_SwOn 085C  
                            ??_setSw_Main 0032                    ??_setRF_TimeoutCleared 0020  
            ??_setDimmerLights_DimmingRun 0023                             setLED@command 0022  
                           __size_of_main 005B                               _setRF_Learn 1B3D  
      __size_of_DimmerIntr_Initialization 006F                           ??_getCmd_Status 0020  
                      _DimmerLights_TMR_1 08CB                        _DimmerLights_TMR_2 093B  
                __end_of_CC2500_SIDLEMode 18ED                setDimmerLights_Main@lights 00E7  
             __end_of_DelayOffPointSelect 1BD2                CC2500_WriteCommand@command 0023  
                         _CC2500_ReadByte 1D03                ?_setDimmerLights_DimmingOn 0070  
                      _CC2500_InitPATable 1D3E                  __end_of_setMemory_Modify 1ADD  
    _getAll_DimmerIntr_Dimming_Sw_RF$2293 0021      _getAll_DimmerIntr_Dimming_Sw_RF$2294 0022  
                     ?_DimmerLights_IOC_1 0070                       ?_DimmerLights_IOC_2 0070  
                      __end_of_setRF_Main 062B                               ??_getBuz_GO 0022  
                     ?_DimmerLights_TMR_1 0070                       ?_DimmerLights_TMR_2 0070  
             __size_of_Mcu_Initialization 0012                      _CC2500_patable_vaule 185E  
                             ??_getRxData 00E6                              getLoad_OK@ok 0020  
              __end_of_RF_Timeout_Counter 1B66               Flash_Memory_Main@key_Status 0027  
                _getAll_Sw_KeyStatus$6170 0022                                  main@argc 00EA  
                                main@argv 00EC                       ?_CC2500_InitPATable 0070  
                    _getSw_KeyStatus$6166 0021                      _getSw_KeyStatus$6167 0022  
     getDimmerLights_ValueToPercent@value 005E                           _CC2500_PowerRST 1280  
                __size_of_getSw_KeyStatus 001F              setDimmerLights_Dimming@value 006C  
      __end_of_setDimmerIntr_DimmingValue 1C17                _setDimmerIntr_DimmingValue 1C00  
             __end_of_Flash_Memory_Modify 0B95              __size_of_getAll_Sw_KeyStatus 0011  
                             _setLog_Code 1061               __end_of_Flash_Memory_Unlock 1955  
                         ??_SwPointSelect 0020                           _CC2500_WriteREG 1E82  
                      __end_of_setSw_Main 0389                     ??_Load_Initialization 0022  
                    ??_DimmerLights_IOC_1 007A                      ??_DimmerLights_IOC_2 007A  
         getDimmerLights_PercentToValue@i 005F       __size_of_setDimmerLights_DimmingRun 001B  
                           _Transceive_OK 03E8                    ?_DlyOff_Initialization 0070  
                    ??_DimmerLights_TMR_1 0070                      ??_DimmerLights_TMR_2 0070  
                          Division@result 0079                               pic14e$flags 007E  
            ??_getDimmerIntr_DimmingValue 0020                setDimmerLights_Line@lights 0020  
                 setDimmerLights_SwOff@sw 0022               __size_of_setMemory_LoopSave 0013  
                                intlevel1 0000                      ??_CC2500_InitPATable 0025  
                  ?_Switch_Initialization 0070                           setDelayOff_GO@i 0069  
                         setDelayOff_GO@j 006A                           setDelayOff_GO@k 006B  
                 ??_CC2500_PowerOnInitial 0029                     setTemp_Main@SafeValue 0067  
  __end_of_setDimmerLights_Initialization 18CA   __size_of_setDimmerLights_Initialization 0001  
          _setDimmerLights_Initialization 18C9                ?_setDimmerIntr_MaxmumValue 0062  
                 ?_setTemp_Initialization 0070                               ??_setTxData 0020  
                  CC2500_InitPATable@temp 0026                           getLoad_AD@ADRES 0029  
                   __size_of_RF_RxDisable 000F                         _RF_Initialization 18D0  
                             getLoad_AD@i 002B                               getLoad_AD@j 0028  
                             getLoad_AD@k 0027                      _Flash_Memory_Erasing 19A5  
                      ?_RF_Initialization 0070                                _SPI0Buffer 00D8  
                 __size_of_Exception_Main 00D7                             Division@value 0078  
         __end_of_DelayOff_Initialization 1913                     __size_of_WDT_Clearing 0002  
                   __end_of_DelayOff_Main 191B                       ??_RF_Initialization 0021  
                 __size_of_setMemory_Data 000C                            _setDelayOff_GO 0C1C  
             ?_getDimmerIntr_DimmingValue 0070          __size_of_setControl_Lights_Table 008F  
        __size_of_setDimmerLights_Dimming 0056               getDimmer_Load_Status@status 0020  
    __size_of_Flash_Memory_Initialization 00CA               __size_of_set_TimeoutCleared 0005  
                           ??_DlyOff_Main 0065                     setMemory_Data@address 0022  
                   __end_of_DelayTime_1us 1EF0                   __end_of_CC2500_ReadByte 1D20  
            __end_of_setSw_Initialization 193B                           _Timeout_Counter 1B7B  
         __size_of_getDimmerLights_Status 0011           getDimmerLights_ValueToPercent@i 005F  
                            _RF_RxDisable 19FA          Flash_Memory_Initialization@value 0025  
              __end_of_LED_Initialization 19BD            __end_of_setTemp_Initialization 0800  
                             Division@num 0075                   setMemory_Modify@command 0021  
               __end_of_RF_Initialization 18D3                     __end_of_CC2500_RxData 1725  
                   __end_of_CC2500_TxData 1791                     _setLoad_AH_AL_Restore 1CCA  
                 __end_of_CC2500_PowerRST 12C4  
