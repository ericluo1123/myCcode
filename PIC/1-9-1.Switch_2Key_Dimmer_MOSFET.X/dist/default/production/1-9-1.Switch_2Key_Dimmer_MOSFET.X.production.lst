

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Jan 05 13:28:43 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,inline,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,inline,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,inline,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,inline,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,inline,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,inline,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,inline,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,inline,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text126,local,class=CODE,merge=1,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text133,local,class=CODE,merge=1,delta=2
   154                           	psect	text134,local,class=CODE,merge=1,delta=2
   155                           	psect	text135,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	text136,local,class=CODE,merge=1,inline,delta=2
   157                           	psect	intentry,global,class=CODE,delta=2
   158                           	psect	text138,local,class=CODE,merge=1,inline,delta=2
   159                           	psect	text139,local,class=CODE,merge=1,inline,delta=2
   160                           	psect	text140,local,class=CODE,merge=1,inline,delta=2
   161                           	psect	text141,local,class=CODE,merge=1,inline,delta=2
   162                           	psect	text142,local,class=CODE,merge=1,inline,delta=2
   163                           	psect	text143,local,class=CODE,merge=1,inline,delta=2
   164                           	dabs	1,0x7E,2
   165  0000                     	;# 
   166  0001                     	;# 
   167  0002                     	;# 
   168  0003                     	;# 
   169  0004                     	;# 
   170  0005                     	;# 
   171  0006                     	;# 
   172  0007                     	;# 
   173  0008                     	;# 
   174  0009                     	;# 
   175  000A                     	;# 
   176  000B                     	;# 
   177  000C                     	;# 
   178  000D                     	;# 
   179  000E                     	;# 
   180  0010                     	;# 
   181  0011                     	;# 
   182  0012                     	;# 
   183  0015                     	;# 
   184  0016                     	;# 
   185  0016                     	;# 
   186  0017                     	;# 
   187  0018                     	;# 
   188  0019                     	;# 
   189  001A                     	;# 
   190  001B                     	;# 
   191  001C                     	;# 
   192  008C                     	;# 
   193  008D                     	;# 
   194  008E                     	;# 
   195  0090                     	;# 
   196  0091                     	;# 
   197  0092                     	;# 
   198  0095                     	;# 
   199  0096                     	;# 
   200  0097                     	;# 
   201  0099                     	;# 
   202  009A                     	;# 
   203  009B                     	;# 
   204  009B                     	;# 
   205  009C                     	;# 
   206  009D                     	;# 
   207  009E                     	;# 
   208  010C                     	;# 
   209  010D                     	;# 
   210  010E                     	;# 
   211  0116                     	;# 
   212  0117                     	;# 
   213  011D                     	;# 
   214  018C                     	;# 
   215  018D                     	;# 
   216  018E                     	;# 
   217  0191                     	;# 
   218  0191                     	;# 
   219  0192                     	;# 
   220  0193                     	;# 
   221  0193                     	;# 
   222  0194                     	;# 
   223  0195                     	;# 
   224  0196                     	;# 
   225  0197                     	;# 
   226  0199                     	;# 
   227  019A                     	;# 
   228  019B                     	;# 
   229  019B                     	;# 
   230  019B                     	;# 
   231  019B                     	;# 
   232  019C                     	;# 
   233  019C                     	;# 
   234  019D                     	;# 
   235  019E                     	;# 
   236  019F                     	;# 
   237  020D                     	;# 
   238  0210                     	;# 
   239  0211                     	;# 
   240  0211                     	;# 
   241  0212                     	;# 
   242  0212                     	;# 
   243  0213                     	;# 
   244  0213                     	;# 
   245  0214                     	;# 
   246  0214                     	;# 
   247  0215                     	;# 
   248  0215                     	;# 
   249  0215                     	;# 
   250  0216                     	;# 
   251  0216                     	;# 
   252  0217                     	;# 
   253  0217                     	;# 
   254  0291                     	;# 
   255  0291                     	;# 
   256  0292                     	;# 
   257  0293                     	;# 
   258  0298                     	;# 
   259  0298                     	;# 
   260  0299                     	;# 
   261  029A                     	;# 
   262  0394                     	;# 
   263  0395                     	;# 
   264  0396                     	;# 
   265  0FE4                     	;# 
   266  0FE5                     	;# 
   267  0FE6                     	;# 
   268  0FE7                     	;# 
   269  0FE8                     	;# 
   270  0FE9                     	;# 
   271  0FEA                     	;# 
   272  0FEB                     	;# 
   273  0FED                     	;# 
   274  0FEE                     	;# 
   275  0FEF                     	;# 
   276  0000                     	;# 
   277  0001                     	;# 
   278  0002                     	;# 
   279  0003                     	;# 
   280  0004                     	;# 
   281  0005                     	;# 
   282  0006                     	;# 
   283  0007                     	;# 
   284  0008                     	;# 
   285  0009                     	;# 
   286  000A                     	;# 
   287  000B                     	;# 
   288  000C                     	;# 
   289  000D                     	;# 
   290  000E                     	;# 
   291  0010                     	;# 
   292  0011                     	;# 
   293  0012                     	;# 
   294  0015                     	;# 
   295  0016                     	;# 
   296  0016                     	;# 
   297  0017                     	;# 
   298  0018                     	;# 
   299  0019                     	;# 
   300  001A                     	;# 
   301  001B                     	;# 
   302  001C                     	;# 
   303  008C                     	;# 
   304  008D                     	;# 
   305  008E                     	;# 
   306  0090                     	;# 
   307  0091                     	;# 
   308  0092                     	;# 
   309  0095                     	;# 
   310  0096                     	;# 
   311  0097                     	;# 
   312  0099                     	;# 
   313  009A                     	;# 
   314  009B                     	;# 
   315  009B                     	;# 
   316  009C                     	;# 
   317  009D                     	;# 
   318  009E                     	;# 
   319  010C                     	;# 
   320  010D                     	;# 
   321  010E                     	;# 
   322  0116                     	;# 
   323  0117                     	;# 
   324  011D                     	;# 
   325  018C                     	;# 
   326  018D                     	;# 
   327  018E                     	;# 
   328  0191                     	;# 
   329  0191                     	;# 
   330  0192                     	;# 
   331  0193                     	;# 
   332  0193                     	;# 
   333  0194                     	;# 
   334  0195                     	;# 
   335  0196                     	;# 
   336  0197                     	;# 
   337  0199                     	;# 
   338  019A                     	;# 
   339  019B                     	;# 
   340  019B                     	;# 
   341  019B                     	;# 
   342  019B                     	;# 
   343  019C                     	;# 
   344  019C                     	;# 
   345  019D                     	;# 
   346  019E                     	;# 
   347  019F                     	;# 
   348  020D                     	;# 
   349  0210                     	;# 
   350  0211                     	;# 
   351  0211                     	;# 
   352  0212                     	;# 
   353  0212                     	;# 
   354  0213                     	;# 
   355  0213                     	;# 
   356  0214                     	;# 
   357  0214                     	;# 
   358  0215                     	;# 
   359  0215                     	;# 
   360  0215                     	;# 
   361  0216                     	;# 
   362  0216                     	;# 
   363  0217                     	;# 
   364  0217                     	;# 
   365  0291                     	;# 
   366  0291                     	;# 
   367  0292                     	;# 
   368  0293                     	;# 
   369  0298                     	;# 
   370  0298                     	;# 
   371  0299                     	;# 
   372  029A                     	;# 
   373  0394                     	;# 
   374  0395                     	;# 
   375  0396                     	;# 
   376  0FE4                     	;# 
   377  0FE5                     	;# 
   378  0FE6                     	;# 
   379  0FE7                     	;# 
   380  0FE8                     	;# 
   381  0FE9                     	;# 
   382  0FEA                     	;# 
   383  0FEB                     	;# 
   384  0FED                     	;# 
   385  0FEE                     	;# 
   386  0FEF                     	;# 
   387  0000                     	;# 
   388  0001                     	;# 
   389  0002                     	;# 
   390  0003                     	;# 
   391  0004                     	;# 
   392  0005                     	;# 
   393  0006                     	;# 
   394  0007                     	;# 
   395  0008                     	;# 
   396  0009                     	;# 
   397  000A                     	;# 
   398  000B                     	;# 
   399  000C                     	;# 
   400  000D                     	;# 
   401  000E                     	;# 
   402  0010                     	;# 
   403  0011                     	;# 
   404  0012                     	;# 
   405  0015                     	;# 
   406  0016                     	;# 
   407  0016                     	;# 
   408  0017                     	;# 
   409  0018                     	;# 
   410  0019                     	;# 
   411  001A                     	;# 
   412  001B                     	;# 
   413  001C                     	;# 
   414  008C                     	;# 
   415  008D                     	;# 
   416  008E                     	;# 
   417  0090                     	;# 
   418  0091                     	;# 
   419  0092                     	;# 
   420  0095                     	;# 
   421  0096                     	;# 
   422  0097                     	;# 
   423  0099                     	;# 
   424  009A                     	;# 
   425  009B                     	;# 
   426  009B                     	;# 
   427  009C                     	;# 
   428  009D                     	;# 
   429  009E                     	;# 
   430  010C                     	;# 
   431  010D                     	;# 
   432  010E                     	;# 
   433  0116                     	;# 
   434  0117                     	;# 
   435  011D                     	;# 
   436  018C                     	;# 
   437  018D                     	;# 
   438  018E                     	;# 
   439  0191                     	;# 
   440  0191                     	;# 
   441  0192                     	;# 
   442  0193                     	;# 
   443  0193                     	;# 
   444  0194                     	;# 
   445  0195                     	;# 
   446  0196                     	;# 
   447  0197                     	;# 
   448  0199                     	;# 
   449  019A                     	;# 
   450  019B                     	;# 
   451  019B                     	;# 
   452  019B                     	;# 
   453  019B                     	;# 
   454  019C                     	;# 
   455  019C                     	;# 
   456  019D                     	;# 
   457  019E                     	;# 
   458  019F                     	;# 
   459  020D                     	;# 
   460  0210                     	;# 
   461  0211                     	;# 
   462  0211                     	;# 
   463  0212                     	;# 
   464  0212                     	;# 
   465  0213                     	;# 
   466  0213                     	;# 
   467  0214                     	;# 
   468  0214                     	;# 
   469  0215                     	;# 
   470  0215                     	;# 
   471  0215                     	;# 
   472  0216                     	;# 
   473  0216                     	;# 
   474  0217                     	;# 
   475  0217                     	;# 
   476  0291                     	;# 
   477  0291                     	;# 
   478  0292                     	;# 
   479  0293                     	;# 
   480  0298                     	;# 
   481  0298                     	;# 
   482  0299                     	;# 
   483  029A                     	;# 
   484  0394                     	;# 
   485  0395                     	;# 
   486  0396                     	;# 
   487  0FE4                     	;# 
   488  0FE5                     	;# 
   489  0FE6                     	;# 
   490  0FE7                     	;# 
   491  0FE8                     	;# 
   492  0FE9                     	;# 
   493  0FEA                     	;# 
   494  0FEB                     	;# 
   495  0FED                     	;# 
   496  0FEE                     	;# 
   497  0FEF                     	;# 
   498  0000                     	;# 
   499  0001                     	;# 
   500  0002                     	;# 
   501  0003                     	;# 
   502  0004                     	;# 
   503  0005                     	;# 
   504  0006                     	;# 
   505  0007                     	;# 
   506  0008                     	;# 
   507  0009                     	;# 
   508  000A                     	;# 
   509  000B                     	;# 
   510  000C                     	;# 
   511  000D                     	;# 
   512  000E                     	;# 
   513  0010                     	;# 
   514  0011                     	;# 
   515  0012                     	;# 
   516  0015                     	;# 
   517  0016                     	;# 
   518  0016                     	;# 
   519  0017                     	;# 
   520  0018                     	;# 
   521  0019                     	;# 
   522  001A                     	;# 
   523  001B                     	;# 
   524  001C                     	;# 
   525  008C                     	;# 
   526  008D                     	;# 
   527  008E                     	;# 
   528  0090                     	;# 
   529  0091                     	;# 
   530  0092                     	;# 
   531  0095                     	;# 
   532  0096                     	;# 
   533  0097                     	;# 
   534  0099                     	;# 
   535  009A                     	;# 
   536  009B                     	;# 
   537  009B                     	;# 
   538  009C                     	;# 
   539  009D                     	;# 
   540  009E                     	;# 
   541  010C                     	;# 
   542  010D                     	;# 
   543  010E                     	;# 
   544  0116                     	;# 
   545  0117                     	;# 
   546  011D                     	;# 
   547  018C                     	;# 
   548  018D                     	;# 
   549  018E                     	;# 
   550  0191                     	;# 
   551  0191                     	;# 
   552  0192                     	;# 
   553  0193                     	;# 
   554  0193                     	;# 
   555  0194                     	;# 
   556  0195                     	;# 
   557  0196                     	;# 
   558  0197                     	;# 
   559  0199                     	;# 
   560  019A                     	;# 
   561  019B                     	;# 
   562  019B                     	;# 
   563  019B                     	;# 
   564  019B                     	;# 
   565  019C                     	;# 
   566  019C                     	;# 
   567  019D                     	;# 
   568  019E                     	;# 
   569  019F                     	;# 
   570  020D                     	;# 
   571  0210                     	;# 
   572  0211                     	;# 
   573  0211                     	;# 
   574  0212                     	;# 
   575  0212                     	;# 
   576  0213                     	;# 
   577  0213                     	;# 
   578  0214                     	;# 
   579  0214                     	;# 
   580  0215                     	;# 
   581  0215                     	;# 
   582  0215                     	;# 
   583  0216                     	;# 
   584  0216                     	;# 
   585  0217                     	;# 
   586  0217                     	;# 
   587  0291                     	;# 
   588  0291                     	;# 
   589  0292                     	;# 
   590  0293                     	;# 
   591  0298                     	;# 
   592  0298                     	;# 
   593  0299                     	;# 
   594  029A                     	;# 
   595  0394                     	;# 
   596  0395                     	;# 
   597  0396                     	;# 
   598  0FE4                     	;# 
   599  0FE5                     	;# 
   600  0FE6                     	;# 
   601  0FE7                     	;# 
   602  0FE8                     	;# 
   603  0FE9                     	;# 
   604  0FEA                     	;# 
   605  0FEB                     	;# 
   606  0FED                     	;# 
   607  0FEE                     	;# 
   608  0FEF                     	;# 
   609  0000                     	;# 
   610  0001                     	;# 
   611  0002                     	;# 
   612  0003                     	;# 
   613  0004                     	;# 
   614  0005                     	;# 
   615  0006                     	;# 
   616  0007                     	;# 
   617  0008                     	;# 
   618  0009                     	;# 
   619  000A                     	;# 
   620  000B                     	;# 
   621  000C                     	;# 
   622  000D                     	;# 
   623  000E                     	;# 
   624  0010                     	;# 
   625  0011                     	;# 
   626  0012                     	;# 
   627  0015                     	;# 
   628  0016                     	;# 
   629  0016                     	;# 
   630  0017                     	;# 
   631  0018                     	;# 
   632  0019                     	;# 
   633  001A                     	;# 
   634  001B                     	;# 
   635  001C                     	;# 
   636  008C                     	;# 
   637  008D                     	;# 
   638  008E                     	;# 
   639  0090                     	;# 
   640  0091                     	;# 
   641  0092                     	;# 
   642  0095                     	;# 
   643  0096                     	;# 
   644  0097                     	;# 
   645  0099                     	;# 
   646  009A                     	;# 
   647  009B                     	;# 
   648  009B                     	;# 
   649  009C                     	;# 
   650  009D                     	;# 
   651  009E                     	;# 
   652  010C                     	;# 
   653  010D                     	;# 
   654  010E                     	;# 
   655  0116                     	;# 
   656  0117                     	;# 
   657  011D                     	;# 
   658  018C                     	;# 
   659  018D                     	;# 
   660  018E                     	;# 
   661  0191                     	;# 
   662  0191                     	;# 
   663  0192                     	;# 
   664  0193                     	;# 
   665  0193                     	;# 
   666  0194                     	;# 
   667  0195                     	;# 
   668  0196                     	;# 
   669  0197                     	;# 
   670  0199                     	;# 
   671  019A                     	;# 
   672  019B                     	;# 
   673  019B                     	;# 
   674  019B                     	;# 
   675  019B                     	;# 
   676  019C                     	;# 
   677  019C                     	;# 
   678  019D                     	;# 
   679  019E                     	;# 
   680  019F                     	;# 
   681  020D                     	;# 
   682  0210                     	;# 
   683  0211                     	;# 
   684  0211                     	;# 
   685  0212                     	;# 
   686  0212                     	;# 
   687  0213                     	;# 
   688  0213                     	;# 
   689  0214                     	;# 
   690  0214                     	;# 
   691  0215                     	;# 
   692  0215                     	;# 
   693  0215                     	;# 
   694  0216                     	;# 
   695  0216                     	;# 
   696  0217                     	;# 
   697  0217                     	;# 
   698  0291                     	;# 
   699  0291                     	;# 
   700  0292                     	;# 
   701  0293                     	;# 
   702  0298                     	;# 
   703  0298                     	;# 
   704  0299                     	;# 
   705  029A                     	;# 
   706  0394                     	;# 
   707  0395                     	;# 
   708  0396                     	;# 
   709  0FE4                     	;# 
   710  0FE5                     	;# 
   711  0FE6                     	;# 
   712  0FE7                     	;# 
   713  0FE8                     	;# 
   714  0FE9                     	;# 
   715  0FEA                     	;# 
   716  0FEB                     	;# 
   717  0FED                     	;# 
   718  0FEE                     	;# 
   719  0FEF                     	;# 
   720  0000                     	;# 
   721  0001                     	;# 
   722  0002                     	;# 
   723  0003                     	;# 
   724  0004                     	;# 
   725  0005                     	;# 
   726  0006                     	;# 
   727  0007                     	;# 
   728  0008                     	;# 
   729  0009                     	;# 
   730  000A                     	;# 
   731  000B                     	;# 
   732  000C                     	;# 
   733  000D                     	;# 
   734  000E                     	;# 
   735  0010                     	;# 
   736  0011                     	;# 
   737  0012                     	;# 
   738  0015                     	;# 
   739  0016                     	;# 
   740  0016                     	;# 
   741  0017                     	;# 
   742  0018                     	;# 
   743  0019                     	;# 
   744  001A                     	;# 
   745  001B                     	;# 
   746  001C                     	;# 
   747  008C                     	;# 
   748  008D                     	;# 
   749  008E                     	;# 
   750  0090                     	;# 
   751  0091                     	;# 
   752  0092                     	;# 
   753  0095                     	;# 
   754  0096                     	;# 
   755  0097                     	;# 
   756  0099                     	;# 
   757  009A                     	;# 
   758  009B                     	;# 
   759  009B                     	;# 
   760  009C                     	;# 
   761  009D                     	;# 
   762  009E                     	;# 
   763  010C                     	;# 
   764  010D                     	;# 
   765  010E                     	;# 
   766  0116                     	;# 
   767  0117                     	;# 
   768  011D                     	;# 
   769  018C                     	;# 
   770  018D                     	;# 
   771  018E                     	;# 
   772  0191                     	;# 
   773  0191                     	;# 
   774  0192                     	;# 
   775  0193                     	;# 
   776  0193                     	;# 
   777  0194                     	;# 
   778  0195                     	;# 
   779  0196                     	;# 
   780  0197                     	;# 
   781  0199                     	;# 
   782  019A                     	;# 
   783  019B                     	;# 
   784  019B                     	;# 
   785  019B                     	;# 
   786  019B                     	;# 
   787  019C                     	;# 
   788  019C                     	;# 
   789  019D                     	;# 
   790  019E                     	;# 
   791  019F                     	;# 
   792  020D                     	;# 
   793  0210                     	;# 
   794  0211                     	;# 
   795  0211                     	;# 
   796  0212                     	;# 
   797  0212                     	;# 
   798  0213                     	;# 
   799  0213                     	;# 
   800  0214                     	;# 
   801  0214                     	;# 
   802  0215                     	;# 
   803  0215                     	;# 
   804  0215                     	;# 
   805  0216                     	;# 
   806  0216                     	;# 
   807  0217                     	;# 
   808  0217                     	;# 
   809  0291                     	;# 
   810  0291                     	;# 
   811  0292                     	;# 
   812  0293                     	;# 
   813  0298                     	;# 
   814  0298                     	;# 
   815  0299                     	;# 
   816  029A                     	;# 
   817  0394                     	;# 
   818  0395                     	;# 
   819  0396                     	;# 
   820  0FE4                     	;# 
   821  0FE5                     	;# 
   822  0FE6                     	;# 
   823  0FE7                     	;# 
   824  0FE8                     	;# 
   825  0FE9                     	;# 
   826  0FEA                     	;# 
   827  0FEB                     	;# 
   828  0FED                     	;# 
   829  0FEE                     	;# 
   830  0FEF                     	;# 
   831  0000                     	;# 
   832  0001                     	;# 
   833  0002                     	;# 
   834  0003                     	;# 
   835  0004                     	;# 
   836  0005                     	;# 
   837  0006                     	;# 
   838  0007                     	;# 
   839  0008                     	;# 
   840  0009                     	;# 
   841  000A                     	;# 
   842  000B                     	;# 
   843  000C                     	;# 
   844  000D                     	;# 
   845  000E                     	;# 
   846  0010                     	;# 
   847  0011                     	;# 
   848  0012                     	;# 
   849  0015                     	;# 
   850  0016                     	;# 
   851  0016                     	;# 
   852  0017                     	;# 
   853  0018                     	;# 
   854  0019                     	;# 
   855  001A                     	;# 
   856  001B                     	;# 
   857  001C                     	;# 
   858  008C                     	;# 
   859  008D                     	;# 
   860  008E                     	;# 
   861  0090                     	;# 
   862  0091                     	;# 
   863  0092                     	;# 
   864  0095                     	;# 
   865  0096                     	;# 
   866  0097                     	;# 
   867  0099                     	;# 
   868  009A                     	;# 
   869  009B                     	;# 
   870  009B                     	;# 
   871  009C                     	;# 
   872  009D                     	;# 
   873  009E                     	;# 
   874  010C                     	;# 
   875  010D                     	;# 
   876  010E                     	;# 
   877  0116                     	;# 
   878  0117                     	;# 
   879  011D                     	;# 
   880  018C                     	;# 
   881  018D                     	;# 
   882  018E                     	;# 
   883  0191                     	;# 
   884  0191                     	;# 
   885  0192                     	;# 
   886  0193                     	;# 
   887  0193                     	;# 
   888  0194                     	;# 
   889  0195                     	;# 
   890  0196                     	;# 
   891  0197                     	;# 
   892  0199                     	;# 
   893  019A                     	;# 
   894  019B                     	;# 
   895  019B                     	;# 
   896  019B                     	;# 
   897  019B                     	;# 
   898  019C                     	;# 
   899  019C                     	;# 
   900  019D                     	;# 
   901  019E                     	;# 
   902  019F                     	;# 
   903  020D                     	;# 
   904  0210                     	;# 
   905  0211                     	;# 
   906  0211                     	;# 
   907  0212                     	;# 
   908  0212                     	;# 
   909  0213                     	;# 
   910  0213                     	;# 
   911  0214                     	;# 
   912  0214                     	;# 
   913  0215                     	;# 
   914  0215                     	;# 
   915  0215                     	;# 
   916  0216                     	;# 
   917  0216                     	;# 
   918  0217                     	;# 
   919  0217                     	;# 
   920  0291                     	;# 
   921  0291                     	;# 
   922  0292                     	;# 
   923  0293                     	;# 
   924  0298                     	;# 
   925  0298                     	;# 
   926  0299                     	;# 
   927  029A                     	;# 
   928  0394                     	;# 
   929  0395                     	;# 
   930  0396                     	;# 
   931  0FE4                     	;# 
   932  0FE5                     	;# 
   933  0FE6                     	;# 
   934  0FE7                     	;# 
   935  0FE8                     	;# 
   936  0FE9                     	;# 
   937  0FEA                     	;# 
   938  0FEB                     	;# 
   939  0FED                     	;# 
   940  0FEE                     	;# 
   941  0FEF                     	;# 
   942  0000                     	;# 
   943  0001                     	;# 
   944  0002                     	;# 
   945  0003                     	;# 
   946  0004                     	;# 
   947  0005                     	;# 
   948  0006                     	;# 
   949  0007                     	;# 
   950  0008                     	;# 
   951  0009                     	;# 
   952  000A                     	;# 
   953  000B                     	;# 
   954  000C                     	;# 
   955  000D                     	;# 
   956  000E                     	;# 
   957  0010                     	;# 
   958  0011                     	;# 
   959  0012                     	;# 
   960  0015                     	;# 
   961  0016                     	;# 
   962  0016                     	;# 
   963  0017                     	;# 
   964  0018                     	;# 
   965  0019                     	;# 
   966  001A                     	;# 
   967  001B                     	;# 
   968  001C                     	;# 
   969  008C                     	;# 
   970  008D                     	;# 
   971  008E                     	;# 
   972  0090                     	;# 
   973  0091                     	;# 
   974  0092                     	;# 
   975  0095                     	;# 
   976  0096                     	;# 
   977  0097                     	;# 
   978  0099                     	;# 
   979  009A                     	;# 
   980  009B                     	;# 
   981  009B                     	;# 
   982  009C                     	;# 
   983  009D                     	;# 
   984  009E                     	;# 
   985  010C                     	;# 
   986  010D                     	;# 
   987  010E                     	;# 
   988  0116                     	;# 
   989  0117                     	;# 
   990  011D                     	;# 
   991  018C                     	;# 
   992  018D                     	;# 
   993  018E                     	;# 
   994  0191                     	;# 
   995  0191                     	;# 
   996  0192                     	;# 
   997  0193                     	;# 
   998  0193                     	;# 
   999  0194                     	;# 
  1000  0195                     	;# 
  1001  0196                     	;# 
  1002  0197                     	;# 
  1003  0199                     	;# 
  1004  019A                     	;# 
  1005  019B                     	;# 
  1006  019B                     	;# 
  1007  019B                     	;# 
  1008  019B                     	;# 
  1009  019C                     	;# 
  1010  019C                     	;# 
  1011  019D                     	;# 
  1012  019E                     	;# 
  1013  019F                     	;# 
  1014  020D                     	;# 
  1015  0210                     	;# 
  1016  0211                     	;# 
  1017  0211                     	;# 
  1018  0212                     	;# 
  1019  0212                     	;# 
  1020  0213                     	;# 
  1021  0213                     	;# 
  1022  0214                     	;# 
  1023  0214                     	;# 
  1024  0215                     	;# 
  1025  0215                     	;# 
  1026  0215                     	;# 
  1027  0216                     	;# 
  1028  0216                     	;# 
  1029  0217                     	;# 
  1030  0217                     	;# 
  1031  0291                     	;# 
  1032  0291                     	;# 
  1033  0292                     	;# 
  1034  0293                     	;# 
  1035  0298                     	;# 
  1036  0298                     	;# 
  1037  0299                     	;# 
  1038  029A                     	;# 
  1039  0394                     	;# 
  1040  0395                     	;# 
  1041  0396                     	;# 
  1042  0FE4                     	;# 
  1043  0FE5                     	;# 
  1044  0FE6                     	;# 
  1045  0FE7                     	;# 
  1046  0FE8                     	;# 
  1047  0FE9                     	;# 
  1048  0FEA                     	;# 
  1049  0FEB                     	;# 
  1050  0FED                     	;# 
  1051  0FEE                     	;# 
  1052  0FEF                     	;# 
  1053  0000                     	;# 
  1054  0001                     	;# 
  1055  0002                     	;# 
  1056  0003                     	;# 
  1057  0004                     	;# 
  1058  0005                     	;# 
  1059  0006                     	;# 
  1060  0007                     	;# 
  1061  0008                     	;# 
  1062  0009                     	;# 
  1063  000A                     	;# 
  1064  000B                     	;# 
  1065  000C                     	;# 
  1066  000D                     	;# 
  1067  000E                     	;# 
  1068  0010                     	;# 
  1069  0011                     	;# 
  1070  0012                     	;# 
  1071  0015                     	;# 
  1072  0016                     	;# 
  1073  0016                     	;# 
  1074  0017                     	;# 
  1075  0018                     	;# 
  1076  0019                     	;# 
  1077  001A                     	;# 
  1078  001B                     	;# 
  1079  001C                     	;# 
  1080  008C                     	;# 
  1081  008D                     	;# 
  1082  008E                     	;# 
  1083  0090                     	;# 
  1084  0091                     	;# 
  1085  0092                     	;# 
  1086  0095                     	;# 
  1087  0096                     	;# 
  1088  0097                     	;# 
  1089  0099                     	;# 
  1090  009A                     	;# 
  1091  009B                     	;# 
  1092  009B                     	;# 
  1093  009C                     	;# 
  1094  009D                     	;# 
  1095  009E                     	;# 
  1096  010C                     	;# 
  1097  010D                     	;# 
  1098  010E                     	;# 
  1099  0116                     	;# 
  1100  0117                     	;# 
  1101  011D                     	;# 
  1102  018C                     	;# 
  1103  018D                     	;# 
  1104  018E                     	;# 
  1105  0191                     	;# 
  1106  0191                     	;# 
  1107  0192                     	;# 
  1108  0193                     	;# 
  1109  0193                     	;# 
  1110  0194                     	;# 
  1111  0195                     	;# 
  1112  0196                     	;# 
  1113  0197                     	;# 
  1114  0199                     	;# 
  1115  019A                     	;# 
  1116  019B                     	;# 
  1117  019B                     	;# 
  1118  019B                     	;# 
  1119  019B                     	;# 
  1120  019C                     	;# 
  1121  019C                     	;# 
  1122  019D                     	;# 
  1123  019E                     	;# 
  1124  019F                     	;# 
  1125  020D                     	;# 
  1126  0210                     	;# 
  1127  0211                     	;# 
  1128  0211                     	;# 
  1129  0212                     	;# 
  1130  0212                     	;# 
  1131  0213                     	;# 
  1132  0213                     	;# 
  1133  0214                     	;# 
  1134  0214                     	;# 
  1135  0215                     	;# 
  1136  0215                     	;# 
  1137  0215                     	;# 
  1138  0216                     	;# 
  1139  0216                     	;# 
  1140  0217                     	;# 
  1141  0217                     	;# 
  1142  0291                     	;# 
  1143  0291                     	;# 
  1144  0292                     	;# 
  1145  0293                     	;# 
  1146  0298                     	;# 
  1147  0298                     	;# 
  1148  0299                     	;# 
  1149  029A                     	;# 
  1150  0394                     	;# 
  1151  0395                     	;# 
  1152  0396                     	;# 
  1153  0FE4                     	;# 
  1154  0FE5                     	;# 
  1155  0FE6                     	;# 
  1156  0FE7                     	;# 
  1157  0FE8                     	;# 
  1158  0FE9                     	;# 
  1159  0FEA                     	;# 
  1160  0FEB                     	;# 
  1161  0FED                     	;# 
  1162  0FEE                     	;# 
  1163  0FEF                     	;# 
  1164  0000                     	;# 
  1165  0001                     	;# 
  1166  0002                     	;# 
  1167  0003                     	;# 
  1168  0004                     	;# 
  1169  0005                     	;# 
  1170  0006                     	;# 
  1171  0007                     	;# 
  1172  0008                     	;# 
  1173  0009                     	;# 
  1174  000A                     	;# 
  1175  000B                     	;# 
  1176  000C                     	;# 
  1177  000D                     	;# 
  1178  000E                     	;# 
  1179  0010                     	;# 
  1180  0011                     	;# 
  1181  0012                     	;# 
  1182  0015                     	;# 
  1183  0016                     	;# 
  1184  0016                     	;# 
  1185  0017                     	;# 
  1186  0018                     	;# 
  1187  0019                     	;# 
  1188  001A                     	;# 
  1189  001B                     	;# 
  1190  001C                     	;# 
  1191  008C                     	;# 
  1192  008D                     	;# 
  1193  008E                     	;# 
  1194  0090                     	;# 
  1195  0091                     	;# 
  1196  0092                     	;# 
  1197  0095                     	;# 
  1198  0096                     	;# 
  1199  0097                     	;# 
  1200  0099                     	;# 
  1201  009A                     	;# 
  1202  009B                     	;# 
  1203  009B                     	;# 
  1204  009C                     	;# 
  1205  009D                     	;# 
  1206  009E                     	;# 
  1207  010C                     	;# 
  1208  010D                     	;# 
  1209  010E                     	;# 
  1210  0116                     	;# 
  1211  0117                     	;# 
  1212  011D                     	;# 
  1213  018C                     	;# 
  1214  018D                     	;# 
  1215  018E                     	;# 
  1216  0191                     	;# 
  1217  0191                     	;# 
  1218  0192                     	;# 
  1219  0193                     	;# 
  1220  0193                     	;# 
  1221  0194                     	;# 
  1222  0195                     	;# 
  1223  0196                     	;# 
  1224  0197                     	;# 
  1225  0199                     	;# 
  1226  019A                     	;# 
  1227  019B                     	;# 
  1228  019B                     	;# 
  1229  019B                     	;# 
  1230  019B                     	;# 
  1231  019C                     	;# 
  1232  019C                     	;# 
  1233  019D                     	;# 
  1234  019E                     	;# 
  1235  019F                     	;# 
  1236  020D                     	;# 
  1237  0210                     	;# 
  1238  0211                     	;# 
  1239  0211                     	;# 
  1240  0212                     	;# 
  1241  0212                     	;# 
  1242  0213                     	;# 
  1243  0213                     	;# 
  1244  0214                     	;# 
  1245  0214                     	;# 
  1246  0215                     	;# 
  1247  0215                     	;# 
  1248  0215                     	;# 
  1249  0216                     	;# 
  1250  0216                     	;# 
  1251  0217                     	;# 
  1252  0217                     	;# 
  1253  0291                     	;# 
  1254  0291                     	;# 
  1255  0292                     	;# 
  1256  0293                     	;# 
  1257  0298                     	;# 
  1258  0298                     	;# 
  1259  0299                     	;# 
  1260  029A                     	;# 
  1261  0394                     	;# 
  1262  0395                     	;# 
  1263  0396                     	;# 
  1264  0FE4                     	;# 
  1265  0FE5                     	;# 
  1266  0FE6                     	;# 
  1267  0FE7                     	;# 
  1268  0FE8                     	;# 
  1269  0FE9                     	;# 
  1270  0FEA                     	;# 
  1271  0FEB                     	;# 
  1272  0FED                     	;# 
  1273  0FEE                     	;# 
  1274  0FEF                     	;# 
  1275  0000                     	;# 
  1276  0001                     	;# 
  1277  0002                     	;# 
  1278  0003                     	;# 
  1279  0004                     	;# 
  1280  0005                     	;# 
  1281  0006                     	;# 
  1282  0007                     	;# 
  1283  0008                     	;# 
  1284  0009                     	;# 
  1285  000A                     	;# 
  1286  000B                     	;# 
  1287  000C                     	;# 
  1288  000D                     	;# 
  1289  000E                     	;# 
  1290  0010                     	;# 
  1291  0011                     	;# 
  1292  0012                     	;# 
  1293  0015                     	;# 
  1294  0016                     	;# 
  1295  0016                     	;# 
  1296  0017                     	;# 
  1297  0018                     	;# 
  1298  0019                     	;# 
  1299  001A                     	;# 
  1300  001B                     	;# 
  1301  001C                     	;# 
  1302  008C                     	;# 
  1303  008D                     	;# 
  1304  008E                     	;# 
  1305  0090                     	;# 
  1306  0091                     	;# 
  1307  0092                     	;# 
  1308  0095                     	;# 
  1309  0096                     	;# 
  1310  0097                     	;# 
  1311  0099                     	;# 
  1312  009A                     	;# 
  1313  009B                     	;# 
  1314  009B                     	;# 
  1315  009C                     	;# 
  1316  009D                     	;# 
  1317  009E                     	;# 
  1318  010C                     	;# 
  1319  010D                     	;# 
  1320  010E                     	;# 
  1321  0116                     	;# 
  1322  0117                     	;# 
  1323  011D                     	;# 
  1324  018C                     	;# 
  1325  018D                     	;# 
  1326  018E                     	;# 
  1327  0191                     	;# 
  1328  0191                     	;# 
  1329  0192                     	;# 
  1330  0193                     	;# 
  1331  0193                     	;# 
  1332  0194                     	;# 
  1333  0195                     	;# 
  1334  0196                     	;# 
  1335  0197                     	;# 
  1336  0199                     	;# 
  1337  019A                     	;# 
  1338  019B                     	;# 
  1339  019B                     	;# 
  1340  019B                     	;# 
  1341  019B                     	;# 
  1342  019C                     	;# 
  1343  019C                     	;# 
  1344  019D                     	;# 
  1345  019E                     	;# 
  1346  019F                     	;# 
  1347  020D                     	;# 
  1348  0210                     	;# 
  1349  0211                     	;# 
  1350  0211                     	;# 
  1351  0212                     	;# 
  1352  0212                     	;# 
  1353  0213                     	;# 
  1354  0213                     	;# 
  1355  0214                     	;# 
  1356  0214                     	;# 
  1357  0215                     	;# 
  1358  0215                     	;# 
  1359  0215                     	;# 
  1360  0216                     	;# 
  1361  0216                     	;# 
  1362  0217                     	;# 
  1363  0217                     	;# 
  1364  0291                     	;# 
  1365  0291                     	;# 
  1366  0292                     	;# 
  1367  0293                     	;# 
  1368  0298                     	;# 
  1369  0298                     	;# 
  1370  0299                     	;# 
  1371  029A                     	;# 
  1372  0394                     	;# 
  1373  0395                     	;# 
  1374  0396                     	;# 
  1375  0FE4                     	;# 
  1376  0FE5                     	;# 
  1377  0FE6                     	;# 
  1378  0FE7                     	;# 
  1379  0FE8                     	;# 
  1380  0FE9                     	;# 
  1381  0FEA                     	;# 
  1382  0FEB                     	;# 
  1383  0FED                     	;# 
  1384  0FEE                     	;# 
  1385  0FEF                     	;# 
  1386  0000                     	;# 
  1387  0001                     	;# 
  1388  0002                     	;# 
  1389  0003                     	;# 
  1390  0004                     	;# 
  1391  0005                     	;# 
  1392  0006                     	;# 
  1393  0007                     	;# 
  1394  0008                     	;# 
  1395  0009                     	;# 
  1396  000A                     	;# 
  1397  000B                     	;# 
  1398  000C                     	;# 
  1399  000D                     	;# 
  1400  000E                     	;# 
  1401  0010                     	;# 
  1402  0011                     	;# 
  1403  0012                     	;# 
  1404  0015                     	;# 
  1405  0016                     	;# 
  1406  0016                     	;# 
  1407  0017                     	;# 
  1408  0018                     	;# 
  1409  0019                     	;# 
  1410  001A                     	;# 
  1411  001B                     	;# 
  1412  001C                     	;# 
  1413  008C                     	;# 
  1414  008D                     	;# 
  1415  008E                     	;# 
  1416  0090                     	;# 
  1417  0091                     	;# 
  1418  0092                     	;# 
  1419  0095                     	;# 
  1420  0096                     	;# 
  1421  0097                     	;# 
  1422  0099                     	;# 
  1423  009A                     	;# 
  1424  009B                     	;# 
  1425  009B                     	;# 
  1426  009C                     	;# 
  1427  009D                     	;# 
  1428  009E                     	;# 
  1429  010C                     	;# 
  1430  010D                     	;# 
  1431  010E                     	;# 
  1432  0116                     	;# 
  1433  0117                     	;# 
  1434  011D                     	;# 
  1435  018C                     	;# 
  1436  018D                     	;# 
  1437  018E                     	;# 
  1438  0191                     	;# 
  1439  0191                     	;# 
  1440  0192                     	;# 
  1441  0193                     	;# 
  1442  0193                     	;# 
  1443  0194                     	;# 
  1444  0195                     	;# 
  1445  0196                     	;# 
  1446  0197                     	;# 
  1447  0199                     	;# 
  1448  019A                     	;# 
  1449  019B                     	;# 
  1450  019B                     	;# 
  1451  019B                     	;# 
  1452  019B                     	;# 
  1453  019C                     	;# 
  1454  019C                     	;# 
  1455  019D                     	;# 
  1456  019E                     	;# 
  1457  019F                     	;# 
  1458  020D                     	;# 
  1459  0210                     	;# 
  1460  0211                     	;# 
  1461  0211                     	;# 
  1462  0212                     	;# 
  1463  0212                     	;# 
  1464  0213                     	;# 
  1465  0213                     	;# 
  1466  0214                     	;# 
  1467  0214                     	;# 
  1468  0215                     	;# 
  1469  0215                     	;# 
  1470  0215                     	;# 
  1471  0216                     	;# 
  1472  0216                     	;# 
  1473  0217                     	;# 
  1474  0217                     	;# 
  1475  0291                     	;# 
  1476  0291                     	;# 
  1477  0292                     	;# 
  1478  0293                     	;# 
  1479  0298                     	;# 
  1480  0298                     	;# 
  1481  0299                     	;# 
  1482  029A                     	;# 
  1483  0394                     	;# 
  1484  0395                     	;# 
  1485  0396                     	;# 
  1486  0FE4                     	;# 
  1487  0FE5                     	;# 
  1488  0FE6                     	;# 
  1489  0FE7                     	;# 
  1490  0FE8                     	;# 
  1491  0FE9                     	;# 
  1492  0FEA                     	;# 
  1493  0FEB                     	;# 
  1494  0FED                     	;# 
  1495  0FEE                     	;# 
  1496  0FEF                     	;# 
  1497  0000                     	;# 
  1498  0001                     	;# 
  1499  0002                     	;# 
  1500  0003                     	;# 
  1501  0004                     	;# 
  1502  0005                     	;# 
  1503  0006                     	;# 
  1504  0007                     	;# 
  1505  0008                     	;# 
  1506  0009                     	;# 
  1507  000A                     	;# 
  1508  000B                     	;# 
  1509  000C                     	;# 
  1510  000D                     	;# 
  1511  000E                     	;# 
  1512  0010                     	;# 
  1513  0011                     	;# 
  1514  0012                     	;# 
  1515  0015                     	;# 
  1516  0016                     	;# 
  1517  0016                     	;# 
  1518  0017                     	;# 
  1519  0018                     	;# 
  1520  0019                     	;# 
  1521  001A                     	;# 
  1522  001B                     	;# 
  1523  001C                     	;# 
  1524  008C                     	;# 
  1525  008D                     	;# 
  1526  008E                     	;# 
  1527  0090                     	;# 
  1528  0091                     	;# 
  1529  0092                     	;# 
  1530  0095                     	;# 
  1531  0096                     	;# 
  1532  0097                     	;# 
  1533  0099                     	;# 
  1534  009A                     	;# 
  1535  009B                     	;# 
  1536  009B                     	;# 
  1537  009C                     	;# 
  1538  009D                     	;# 
  1539  009E                     	;# 
  1540  010C                     	;# 
  1541  010D                     	;# 
  1542  010E                     	;# 
  1543  0116                     	;# 
  1544  0117                     	;# 
  1545  011D                     	;# 
  1546  018C                     	;# 
  1547  018D                     	;# 
  1548  018E                     	;# 
  1549  0191                     	;# 
  1550  0191                     	;# 
  1551  0192                     	;# 
  1552  0193                     	;# 
  1553  0193                     	;# 
  1554  0194                     	;# 
  1555  0195                     	;# 
  1556  0196                     	;# 
  1557  0197                     	;# 
  1558  0199                     	;# 
  1559  019A                     	;# 
  1560  019B                     	;# 
  1561  019B                     	;# 
  1562  019B                     	;# 
  1563  019B                     	;# 
  1564  019C                     	;# 
  1565  019C                     	;# 
  1566  019D                     	;# 
  1567  019E                     	;# 
  1568  019F                     	;# 
  1569  020D                     	;# 
  1570  0210                     	;# 
  1571  0211                     	;# 
  1572  0211                     	;# 
  1573  0212                     	;# 
  1574  0212                     	;# 
  1575  0213                     	;# 
  1576  0213                     	;# 
  1577  0214                     	;# 
  1578  0214                     	;# 
  1579  0215                     	;# 
  1580  0215                     	;# 
  1581  0215                     	;# 
  1582  0216                     	;# 
  1583  0216                     	;# 
  1584  0217                     	;# 
  1585  0217                     	;# 
  1586  0291                     	;# 
  1587  0291                     	;# 
  1588  0292                     	;# 
  1589  0293                     	;# 
  1590  0298                     	;# 
  1591  0298                     	;# 
  1592  0299                     	;# 
  1593  029A                     	;# 
  1594  0394                     	;# 
  1595  0395                     	;# 
  1596  0396                     	;# 
  1597  0FE4                     	;# 
  1598  0FE5                     	;# 
  1599  0FE6                     	;# 
  1600  0FE7                     	;# 
  1601  0FE8                     	;# 
  1602  0FE9                     	;# 
  1603  0FEA                     	;# 
  1604  0FEB                     	;# 
  1605  0FED                     	;# 
  1606  0FEE                     	;# 
  1607  0FEF                     	;# 
  1608  0000                     	;# 
  1609  0001                     	;# 
  1610  0002                     	;# 
  1611  0003                     	;# 
  1612  0004                     	;# 
  1613  0005                     	;# 
  1614  0006                     	;# 
  1615  0007                     	;# 
  1616  0008                     	;# 
  1617  0009                     	;# 
  1618  000A                     	;# 
  1619  000B                     	;# 
  1620  000C                     	;# 
  1621  000D                     	;# 
  1622  000E                     	;# 
  1623  0010                     	;# 
  1624  0011                     	;# 
  1625  0012                     	;# 
  1626  0015                     	;# 
  1627  0016                     	;# 
  1628  0016                     	;# 
  1629  0017                     	;# 
  1630  0018                     	;# 
  1631  0019                     	;# 
  1632  001A                     	;# 
  1633  001B                     	;# 
  1634  001C                     	;# 
  1635  008C                     	;# 
  1636  008D                     	;# 
  1637  008E                     	;# 
  1638  0090                     	;# 
  1639  0091                     	;# 
  1640  0092                     	;# 
  1641  0095                     	;# 
  1642  0096                     	;# 
  1643  0097                     	;# 
  1644  0099                     	;# 
  1645  009A                     	;# 
  1646  009B                     	;# 
  1647  009B                     	;# 
  1648  009C                     	;# 
  1649  009D                     	;# 
  1650  009E                     	;# 
  1651  010C                     	;# 
  1652  010D                     	;# 
  1653  010E                     	;# 
  1654  0116                     	;# 
  1655  0117                     	;# 
  1656  011D                     	;# 
  1657  018C                     	;# 
  1658  018D                     	;# 
  1659  018E                     	;# 
  1660  0191                     	;# 
  1661  0191                     	;# 
  1662  0192                     	;# 
  1663  0193                     	;# 
  1664  0193                     	;# 
  1665  0194                     	;# 
  1666  0195                     	;# 
  1667  0196                     	;# 
  1668  0197                     	;# 
  1669  0199                     	;# 
  1670  019A                     	;# 
  1671  019B                     	;# 
  1672  019B                     	;# 
  1673  019B                     	;# 
  1674  019B                     	;# 
  1675  019C                     	;# 
  1676  019C                     	;# 
  1677  019D                     	;# 
  1678  019E                     	;# 
  1679  019F                     	;# 
  1680  020D                     	;# 
  1681  0210                     	;# 
  1682  0211                     	;# 
  1683  0211                     	;# 
  1684  0212                     	;# 
  1685  0212                     	;# 
  1686  0213                     	;# 
  1687  0213                     	;# 
  1688  0214                     	;# 
  1689  0214                     	;# 
  1690  0215                     	;# 
  1691  0215                     	;# 
  1692  0215                     	;# 
  1693  0216                     	;# 
  1694  0216                     	;# 
  1695  0217                     	;# 
  1696  0217                     	;# 
  1697  0291                     	;# 
  1698  0291                     	;# 
  1699  0292                     	;# 
  1700  0293                     	;# 
  1701  0298                     	;# 
  1702  0298                     	;# 
  1703  0299                     	;# 
  1704  029A                     	;# 
  1705  0394                     	;# 
  1706  0395                     	;# 
  1707  0396                     	;# 
  1708  0FE4                     	;# 
  1709  0FE5                     	;# 
  1710  0FE6                     	;# 
  1711  0FE7                     	;# 
  1712  0FE8                     	;# 
  1713  0FE9                     	;# 
  1714  0FEA                     	;# 
  1715  0FEB                     	;# 
  1716  0FED                     	;# 
  1717  0FEE                     	;# 
  1718  0FEF                     	;# 
  1719  0000                     	;# 
  1720  0001                     	;# 
  1721  0002                     	;# 
  1722  0003                     	;# 
  1723  0004                     	;# 
  1724  0005                     	;# 
  1725  0006                     	;# 
  1726  0007                     	;# 
  1727  0008                     	;# 
  1728  0009                     	;# 
  1729  000A                     	;# 
  1730  000B                     	;# 
  1731  000C                     	;# 
  1732  000D                     	;# 
  1733  000E                     	;# 
  1734  0010                     	;# 
  1735  0011                     	;# 
  1736  0012                     	;# 
  1737  0015                     	;# 
  1738  0016                     	;# 
  1739  0016                     	;# 
  1740  0017                     	;# 
  1741  0018                     	;# 
  1742  0019                     	;# 
  1743  001A                     	;# 
  1744  001B                     	;# 
  1745  001C                     	;# 
  1746  008C                     	;# 
  1747  008D                     	;# 
  1748  008E                     	;# 
  1749  0090                     	;# 
  1750  0091                     	;# 
  1751  0092                     	;# 
  1752  0095                     	;# 
  1753  0096                     	;# 
  1754  0097                     	;# 
  1755  0099                     	;# 
  1756  009A                     	;# 
  1757  009B                     	;# 
  1758  009B                     	;# 
  1759  009C                     	;# 
  1760  009D                     	;# 
  1761  009E                     	;# 
  1762  010C                     	;# 
  1763  010D                     	;# 
  1764  010E                     	;# 
  1765  0116                     	;# 
  1766  0117                     	;# 
  1767  011D                     	;# 
  1768  018C                     	;# 
  1769  018D                     	;# 
  1770  018E                     	;# 
  1771  0191                     	;# 
  1772  0191                     	;# 
  1773  0192                     	;# 
  1774  0193                     	;# 
  1775  0193                     	;# 
  1776  0194                     	;# 
  1777  0195                     	;# 
  1778  0196                     	;# 
  1779  0197                     	;# 
  1780  0199                     	;# 
  1781  019A                     	;# 
  1782  019B                     	;# 
  1783  019B                     	;# 
  1784  019B                     	;# 
  1785  019B                     	;# 
  1786  019C                     	;# 
  1787  019C                     	;# 
  1788  019D                     	;# 
  1789  019E                     	;# 
  1790  019F                     	;# 
  1791  020D                     	;# 
  1792  0210                     	;# 
  1793  0211                     	;# 
  1794  0211                     	;# 
  1795  0212                     	;# 
  1796  0212                     	;# 
  1797  0213                     	;# 
  1798  0213                     	;# 
  1799  0214                     	;# 
  1800  0214                     	;# 
  1801  0215                     	;# 
  1802  0215                     	;# 
  1803  0215                     	;# 
  1804  0216                     	;# 
  1805  0216                     	;# 
  1806  0217                     	;# 
  1807  0217                     	;# 
  1808  0291                     	;# 
  1809  0291                     	;# 
  1810  0292                     	;# 
  1811  0293                     	;# 
  1812  0298                     	;# 
  1813  0298                     	;# 
  1814  0299                     	;# 
  1815  029A                     	;# 
  1816  0394                     	;# 
  1817  0395                     	;# 
  1818  0396                     	;# 
  1819  0FE4                     	;# 
  1820  0FE5                     	;# 
  1821  0FE6                     	;# 
  1822  0FE7                     	;# 
  1823  0FE8                     	;# 
  1824  0FE9                     	;# 
  1825  0FEA                     	;# 
  1826  0FEB                     	;# 
  1827  0FED                     	;# 
  1828  0FEE                     	;# 
  1829  0FEF                     	;# 
  1830  0000                     	;# 
  1831  0001                     	;# 
  1832  0002                     	;# 
  1833  0003                     	;# 
  1834  0004                     	;# 
  1835  0005                     	;# 
  1836  0006                     	;# 
  1837  0007                     	;# 
  1838  0008                     	;# 
  1839  0009                     	;# 
  1840  000A                     	;# 
  1841  000B                     	;# 
  1842  000C                     	;# 
  1843  000D                     	;# 
  1844  000E                     	;# 
  1845  0010                     	;# 
  1846  0011                     	;# 
  1847  0012                     	;# 
  1848  0015                     	;# 
  1849  0016                     	;# 
  1850  0016                     	;# 
  1851  0017                     	;# 
  1852  0018                     	;# 
  1853  0019                     	;# 
  1854  001A                     	;# 
  1855  001B                     	;# 
  1856  001C                     	;# 
  1857  008C                     	;# 
  1858  008D                     	;# 
  1859  008E                     	;# 
  1860  0090                     	;# 
  1861  0091                     	;# 
  1862  0092                     	;# 
  1863  0095                     	;# 
  1864  0096                     	;# 
  1865  0097                     	;# 
  1866  0099                     	;# 
  1867  009A                     	;# 
  1868  009B                     	;# 
  1869  009B                     	;# 
  1870  009C                     	;# 
  1871  009D                     	;# 
  1872  009E                     	;# 
  1873  010C                     	;# 
  1874  010D                     	;# 
  1875  010E                     	;# 
  1876  0116                     	;# 
  1877  0117                     	;# 
  1878  011D                     	;# 
  1879  018C                     	;# 
  1880  018D                     	;# 
  1881  018E                     	;# 
  1882  0191                     	;# 
  1883  0191                     	;# 
  1884  0192                     	;# 
  1885  0193                     	;# 
  1886  0193                     	;# 
  1887  0194                     	;# 
  1888  0195                     	;# 
  1889  0196                     	;# 
  1890  0197                     	;# 
  1891  0199                     	;# 
  1892  019A                     	;# 
  1893  019B                     	;# 
  1894  019B                     	;# 
  1895  019B                     	;# 
  1896  019B                     	;# 
  1897  019C                     	;# 
  1898  019C                     	;# 
  1899  019D                     	;# 
  1900  019E                     	;# 
  1901  019F                     	;# 
  1902  020D                     	;# 
  1903  0210                     	;# 
  1904  0211                     	;# 
  1905  0211                     	;# 
  1906  0212                     	;# 
  1907  0212                     	;# 
  1908  0213                     	;# 
  1909  0213                     	;# 
  1910  0214                     	;# 
  1911  0214                     	;# 
  1912  0215                     	;# 
  1913  0215                     	;# 
  1914  0215                     	;# 
  1915  0216                     	;# 
  1916  0216                     	;# 
  1917  0217                     	;# 
  1918  0217                     	;# 
  1919  0291                     	;# 
  1920  0291                     	;# 
  1921  0292                     	;# 
  1922  0293                     	;# 
  1923  0298                     	;# 
  1924  0298                     	;# 
  1925  0299                     	;# 
  1926  029A                     	;# 
  1927  0394                     	;# 
  1928  0395                     	;# 
  1929  0396                     	;# 
  1930  0FE4                     	;# 
  1931  0FE5                     	;# 
  1932  0FE6                     	;# 
  1933  0FE7                     	;# 
  1934  0FE8                     	;# 
  1935  0FE9                     	;# 
  1936  0FEA                     	;# 
  1937  0FEB                     	;# 
  1938  0FED                     	;# 
  1939  0FEE                     	;# 
  1940  0FEF                     	;# 
  1941  0000                     	;# 
  1942  0001                     	;# 
  1943  0002                     	;# 
  1944  0003                     	;# 
  1945  0004                     	;# 
  1946  0005                     	;# 
  1947  0006                     	;# 
  1948  0007                     	;# 
  1949  0008                     	;# 
  1950  0009                     	;# 
  1951  000A                     	;# 
  1952  000B                     	;# 
  1953  000C                     	;# 
  1954  000D                     	;# 
  1955  000E                     	;# 
  1956  0010                     	;# 
  1957  0011                     	;# 
  1958  0012                     	;# 
  1959  0015                     	;# 
  1960  0016                     	;# 
  1961  0016                     	;# 
  1962  0017                     	;# 
  1963  0018                     	;# 
  1964  0019                     	;# 
  1965  001A                     	;# 
  1966  001B                     	;# 
  1967  001C                     	;# 
  1968  008C                     	;# 
  1969  008D                     	;# 
  1970  008E                     	;# 
  1971  0090                     	;# 
  1972  0091                     	;# 
  1973  0092                     	;# 
  1974  0095                     	;# 
  1975  0096                     	;# 
  1976  0097                     	;# 
  1977  0099                     	;# 
  1978  009A                     	;# 
  1979  009B                     	;# 
  1980  009B                     	;# 
  1981  009C                     	;# 
  1982  009D                     	;# 
  1983  009E                     	;# 
  1984  010C                     	;# 
  1985  010D                     	;# 
  1986  010E                     	;# 
  1987  0116                     	;# 
  1988  0117                     	;# 
  1989  011D                     	;# 
  1990  018C                     	;# 
  1991  018D                     	;# 
  1992  018E                     	;# 
  1993  0191                     	;# 
  1994  0191                     	;# 
  1995  0192                     	;# 
  1996  0193                     	;# 
  1997  0193                     	;# 
  1998  0194                     	;# 
  1999  0195                     	;# 
  2000  0196                     	;# 
  2001  0197                     	;# 
  2002  0199                     	;# 
  2003  019A                     	;# 
  2004  019B                     	;# 
  2005  019B                     	;# 
  2006  019B                     	;# 
  2007  019B                     	;# 
  2008  019C                     	;# 
  2009  019C                     	;# 
  2010  019D                     	;# 
  2011  019E                     	;# 
  2012  019F                     	;# 
  2013  020D                     	;# 
  2014  0210                     	;# 
  2015  0211                     	;# 
  2016  0211                     	;# 
  2017  0212                     	;# 
  2018  0212                     	;# 
  2019  0213                     	;# 
  2020  0213                     	;# 
  2021  0214                     	;# 
  2022  0214                     	;# 
  2023  0215                     	;# 
  2024  0215                     	;# 
  2025  0215                     	;# 
  2026  0216                     	;# 
  2027  0216                     	;# 
  2028  0217                     	;# 
  2029  0217                     	;# 
  2030  0291                     	;# 
  2031  0291                     	;# 
  2032  0292                     	;# 
  2033  0293                     	;# 
  2034  0298                     	;# 
  2035  0298                     	;# 
  2036  0299                     	;# 
  2037  029A                     	;# 
  2038  0394                     	;# 
  2039  0395                     	;# 
  2040  0396                     	;# 
  2041  0FE4                     	;# 
  2042  0FE5                     	;# 
  2043  0FE6                     	;# 
  2044  0FE7                     	;# 
  2045  0FE8                     	;# 
  2046  0FE9                     	;# 
  2047  0FEA                     	;# 
  2048  0FEB                     	;# 
  2049  0FED                     	;# 
  2050  0FEE                     	;# 
  2051  0FEF                     	;# 
  2052  0000                     	;# 
  2053  0001                     	;# 
  2054  0002                     	;# 
  2055  0003                     	;# 
  2056  0004                     	;# 
  2057  0005                     	;# 
  2058  0006                     	;# 
  2059  0007                     	;# 
  2060  0008                     	;# 
  2061  0009                     	;# 
  2062  000A                     	;# 
  2063  000B                     	;# 
  2064  000C                     	;# 
  2065  000D                     	;# 
  2066  000E                     	;# 
  2067  0010                     	;# 
  2068  0011                     	;# 
  2069  0012                     	;# 
  2070  0015                     	;# 
  2071  0016                     	;# 
  2072  0016                     	;# 
  2073  0017                     	;# 
  2074  0018                     	;# 
  2075  0019                     	;# 
  2076  001A                     	;# 
  2077  001B                     	;# 
  2078  001C                     	;# 
  2079  008C                     	;# 
  2080  008D                     	;# 
  2081  008E                     	;# 
  2082  0090                     	;# 
  2083  0091                     	;# 
  2084  0092                     	;# 
  2085  0095                     	;# 
  2086  0096                     	;# 
  2087  0097                     	;# 
  2088  0099                     	;# 
  2089  009A                     	;# 
  2090  009B                     	;# 
  2091  009B                     	;# 
  2092  009C                     	;# 
  2093  009D                     	;# 
  2094  009E                     	;# 
  2095  010C                     	;# 
  2096  010D                     	;# 
  2097  010E                     	;# 
  2098  0116                     	;# 
  2099  0117                     	;# 
  2100  011D                     	;# 
  2101  018C                     	;# 
  2102  018D                     	;# 
  2103  018E                     	;# 
  2104  0191                     	;# 
  2105  0191                     	;# 
  2106  0192                     	;# 
  2107  0193                     	;# 
  2108  0193                     	;# 
  2109  0194                     	;# 
  2110  0195                     	;# 
  2111  0196                     	;# 
  2112  0197                     	;# 
  2113  0199                     	;# 
  2114  019A                     	;# 
  2115  019B                     	;# 
  2116  019B                     	;# 
  2117  019B                     	;# 
  2118  019B                     	;# 
  2119  019C                     	;# 
  2120  019C                     	;# 
  2121  019D                     	;# 
  2122  019E                     	;# 
  2123  019F                     	;# 
  2124  020D                     	;# 
  2125  0210                     	;# 
  2126  0211                     	;# 
  2127  0211                     	;# 
  2128  0212                     	;# 
  2129  0212                     	;# 
  2130  0213                     	;# 
  2131  0213                     	;# 
  2132  0214                     	;# 
  2133  0214                     	;# 
  2134  0215                     	;# 
  2135  0215                     	;# 
  2136  0215                     	;# 
  2137  0216                     	;# 
  2138  0216                     	;# 
  2139  0217                     	;# 
  2140  0217                     	;# 
  2141  0291                     	;# 
  2142  0291                     	;# 
  2143  0292                     	;# 
  2144  0293                     	;# 
  2145  0298                     	;# 
  2146  0298                     	;# 
  2147  0299                     	;# 
  2148  029A                     	;# 
  2149  0394                     	;# 
  2150  0395                     	;# 
  2151  0396                     	;# 
  2152  0FE4                     	;# 
  2153  0FE5                     	;# 
  2154  0FE6                     	;# 
  2155  0FE7                     	;# 
  2156  0FE8                     	;# 
  2157  0FE9                     	;# 
  2158  0FEA                     	;# 
  2159  0FEB                     	;# 
  2160  0FED                     	;# 
  2161  0FEE                     	;# 
  2162  0FEF                     	;# 
  2163                           
  2164                           	psect	idataBANK4
  2165  1F7B                     __pidataBANK4:	
  2166                           
  2167                           ;initializer for __product
  2168  1F7B  3463               	retlw	99
  2169  1F7C  3402               	retlw	2
  2170  1F7D  3400               	retlw	0
  2171  1F7E  3400               	retlw	0
  2172  1F7F  3400               	retlw	0
  2173  1F80  3400               	retlw	0
  2174  1F81  3400               	retlw	0
  2175  1F82  3400               	retlw	0
  2176  1F83  3400               	retlw	0
  2177  1F84  3400               	retlw	0
  2178  1F85  3400               	retlw	0
  2179  1F86  3400               	retlw	0
  2180  1F87  34FF               	retlw	255
  2181  1F88  34FF               	retlw	255
  2182  1F89  34FF               	retlw	255
  2183  1F8A  3400               	retlw	0
  2184  1F8B  3400               	retlw	0
  2185  1F8C  3400               	retlw	0
  2186  1F8D  3400               	retlw	0
  2187  1F8E  3400               	retlw	0
  2188  1F8F  3400               	retlw	0
  2189  1F90  3400               	retlw	0
  2190  1F91  3400               	retlw	0
  2191  1F92  3400               	retlw	0
  2192  1F93  3400               	retlw	0
  2193  1F94  3400               	retlw	0
  2194  1F95  3400               	retlw	0
  2195  1F96  3400               	retlw	0
  2196  1F97  3400               	retlw	0
  2197  1F98  3400               	retlw	0
  2198  1F99  3400               	retlw	0
  2199  1F9A  3400               	retlw	0
  2200                           
  2201                           	psect	stringtext
  2202  1000                     __pstringtext:	
  2203  1000                     _CC2500_registers_address:	
  2204  1000  3403               	retlw	3
  2205  1001  3416               	retlw	22
  2206  1002  3417               	retlw	23
  2207  1003  341E               	retlw	30
  2208  1004  341F               	retlw	31
  2209  1005  3420               	retlw	32
  2210  1006  342A               	retlw	42
  2211  1007  342B               	retlw	43
  2212  1008  340B               	retlw	11
  2213  1009  340C               	retlw	12
  2214  100A  340D               	retlw	13
  2215  100B  340E               	retlw	14
  2216  100C  340F               	retlw	15
  2217  100D  3410               	retlw	16
  2218  100E  3411               	retlw	17
  2219  100F  3412               	retlw	18
  2220  1010  3413               	retlw	19
  2221  1011  3414               	retlw	20
  2222  1012  340A               	retlw	10
  2223  1013  3415               	retlw	21
  2224  1014  3421               	retlw	33
  2225  1015  3422               	retlw	34
  2226  1016  3418               	retlw	24
  2227  1017  3419               	retlw	25
  2228  1018  341A               	retlw	26
  2229  1019  341B               	retlw	27
  2230  101A  341C               	retlw	28
  2231  101B  341D               	retlw	29
  2232  101C  3423               	retlw	35
  2233  101D  3424               	retlw	36
  2234  101E  3425               	retlw	37
  2235  101F  3426               	retlw	38
  2236  1020  3429               	retlw	41
  2237  1021  342C               	retlw	44
  2238  1022  342D               	retlw	45
  2239  1023  342E               	retlw	46
  2240  1024  3400               	retlw	0
  2241  1025  3401               	retlw	1
  2242  1026  3402               	retlw	2
  2243  1027  3407               	retlw	7
  2244  1028  3408               	retlw	8
  2245  1029  3409               	retlw	9
  2246  102A  3406               	retlw	6
  2247  102B  3404               	retlw	4
  2248  102C  3405               	retlw	5
  2249  102D  3427               	retlw	39
  2250  102E  3428               	retlw	40
  2251  102F                     __end_of_CC2500_registers_address:	
  2252  102F                     _CC2500_rfSettings:	
  2253  102F  3407               	retlw	7
  2254  1030  3407               	retlw	7
  2255  1031  3430               	retlw	48
  2256  1032  3487               	retlw	135
  2257  1033  346B               	retlw	107
  2258  1034  34F8               	retlw	248
  2259  1035  347F               	retlw	127
  2260  1036  343F               	retlw	63
  2261  1037  3409               	retlw	9
  2262  1038  3400               	retlw	0
  2263  1039  345C               	retlw	92
  2264  103A  34A7               	retlw	167
  2265  103B  3462               	retlw	98
  2266  103C  3486               	retlw	134
  2267  103D  3483               	retlw	131
  2268  103E  3403               	retlw	3
  2269  103F  3422               	retlw	34
  2270  1040  34F8               	retlw	248
  2271  1041  3400               	retlw	0
  2272  1042  3444               	retlw	68
  2273  1043  34B6               	retlw	182
  2274  1044  3410               	retlw	16
  2275  1045  3418               	retlw	24
  2276  1046  341D               	retlw	29
  2277  1047  341C               	retlw	28
  2278  1048  34C7               	retlw	199
  2279  1049  3400               	retlw	0
  2280  104A  34B2               	retlw	178
  2281  104B  34EA               	retlw	234
  2282  104C  340A               	retlw	10
  2283  104D  3400               	retlw	0
  2284  104E  3411               	retlw	17
  2285  104F  3459               	retlw	89
  2286  1050  3488               	retlw	136
  2287  1051  3431               	retlw	49
  2288  1052  340B               	retlw	11
  2289  1053  342F               	retlw	47
  2290  1054  342E               	retlw	46
  2291  1055  3406               	retlw	6
  2292  1056  3404               	retlw	4
  2293  1057  3405               	retlw	5
  2294  1058  3400               	retlw	0
  2295  1059  3430               	retlw	48
  2296  105A  34D3               	retlw	211
  2297  105B  3491               	retlw	145
  2298  105C  3441               	retlw	65
  2299  105D  3400               	retlw	0
  2300  105E                     __end_of_CC2500_rfSettings:	
  2301  105E                     _CC2500_patable_vaule:	
  2302  105E  34FE               	retlw	254
  2303  105F  34FE               	retlw	254
  2304  1060  34FE               	retlw	254
  2305  1061  34FE               	retlw	254
  2306  1062  34FE               	retlw	254
  2307  1063  34FE               	retlw	254
  2308  1064  34FE               	retlw	254
  2309  1065  34FE               	retlw	254
  2310  1066                     __end_of_CC2500_patable_vaule:	
  2311                           
  2312                           	psect	nvBANK0
  2313  006D                     __pnvBANK0:	
  2314  006D                     _product:	
  2315  006D                     	ds	1
  2316  000C                     _PORTA	set	12
  2317  000D                     _PORTB	set	13
  2318  000E                     _PORTC	set	14
  2319  0018                     _T1CON	set	24
  2320  0017                     _TMR1H	set	23
  2321  0016                     _TMR1L	set	22
  2322  005F                     _GIE	set	95
  2323  005B                     _IOCIE	set	91
  2324  0058                     _IOCIF	set	88
  2325  005E                     _PEIE	set	94
  2326  0060                     _RA0	set	96
  2327  0063                     _RA3	set	99
  2328  0064                     _RA4	set	100
  2329  0066                     _RA6	set	102
  2330  0067                     _RA7	set	103
  2331  0068                     _RB0	set	104
  2332  0069                     _RB1	set	105
  2333  006A                     _RB2	set	106
  2334  006B                     _RB3	set	107
  2335  006C                     _RB4	set	108
  2336  006D                     _RB5	set	109
  2337  0070                     _RC0	set	112
  2338  0071                     _RC1	set	113
  2339  0072                     _RC2	set	114
  2340  0074                     _RC4	set	116
  2341  0075                     _RC5	set	117
  2342  0077                     _RC7	set	119
  2343  0088                     _TMR1IF	set	136
  2344  009D                     _ADCON0	set	157
  2345  009E                     _ADCON1	set	158
  2346  009C                     _ADRESH	set	156
  2347  009B                     _ADRESL	set	155
  2348  0099                     _OSCCON	set	153
  2349  008C                     _TRISA	set	140
  2350  008D                     _TRISB	set	141
  2351  008E                     _TRISC	set	142
  2352  0097                     _WDTCON	set	151
  2353  04E9                     _GO_nDONE	set	1257
  2354  0488                     _TMR1IE	set	1160
  2355  0117                     _FVRCON	set	279
  2356  010C                     _LATA	set	268
  2357  010D                     _LATB	set	269
  2358  010E                     _LATC	set	270
  2359  018C                     _ANSELA	set	396
  2360  018D                     _ANSELB	set	397
  2361  018E                     _ANSELC	set	398
  2362  0192                     _PMADRH	set	402
  2363  0191                     _PMADRL	set	401
  2364  0196                     _PMCON2	set	406
  2365  0194                     _PMDATH	set	404
  2366  0193                     _PMDATL	set	403
  2367  0CAE                     _CFGS	set	3246
  2368  0CAC                     _FREE	set	3244
  2369  0CAD                     _LWLO	set	3245
  2370  0CA8                     _RD	set	3240
  2371  0CA9                     _WR	set	3241
  2372  0CAA                     _WREN	set	3242
  2373  020D                     _WPUB	set	525
  2374  1069                     _WPUB1	set	4201
  2375  0396                     _IOCBF	set	918
  2376  0395                     _IOCBN	set	917
  2377  0394                     _IOCBP	set	916
  2378  1CB2                     _IOCBF2	set	7346
  2379                           
  2380                           ; #config settings
  2381  0000                     
  2382                           	psect	cinit
  2383  0022                     start_initialization:	
  2384  0022                     __initialization:	
  2385                           
  2386                           ; Clear objects allocated to BITCOMMON
  2387  0022  01FA               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2388                           
  2389                           ; Clear objects allocated to COMMON
  2390  0023  01FB               	clrf	__pbssCOMMON& (0+127)
  2391                           
  2392                           ; Clear objects allocated to BANK1
  2393  0024  30A0               	movlw	low __pbssBANK1
  2394  0025  0084               	movwf	4
  2395  0026  3000               	movlw	high __pbssBANK1
  2396  0027  0085               	movwf	5
  2397  0028  3050               	movlw	80
  2398  0029  319A  22E9  3180   	fcall	clear_ram0
  2399                           
  2400                           ; Clear objects allocated to BANK2
  2401  002C  3020               	movlw	low __pbssBANK2
  2402  002D  0084               	movwf	4
  2403  002E  3001               	movlw	high __pbssBANK2
  2404  002F  0085               	movwf	5
  2405  0030  304E               	movlw	78
  2406  0031  319A  22E9  3180   	fcall	clear_ram0
  2407                           
  2408                           ; Clear objects allocated to BANK3
  2409  0034  30A0               	movlw	low __pbssBANK3
  2410  0035  0084               	movwf	4
  2411  0036  3001               	movlw	high __pbssBANK3
  2412  0037  0085               	movwf	5
  2413  0038  3046               	movlw	70
  2414  0039  319A  22E9  3180   	fcall	clear_ram0
  2415                           
  2416                           ; Clear objects allocated to BANK4
  2417  003C  3020               	movlw	low __pbssBANK4
  2418  003D  0084               	movwf	4
  2419  003E  3002               	movlw	high __pbssBANK4
  2420  003F  0085               	movwf	5
  2421  0040  3025               	movlw	37
  2422  0041  319A  22E9  3180   	fcall	clear_ram0
  2423                           
  2424                           ; Initialize objects allocated to BANK4
  2425  0044  307B               	movlw	low __pidataBANK4
  2426  0045  0084               	movwf	4
  2427  0046  309F               	movlw	(high __pidataBANK4)| (0+128)
  2428  0047  0085               	movwf	5
  2429  0048  3045               	movlw	low __pdataBANK4
  2430  0049  0086               	movwf	6
  2431  004A  3002               	movlw	high __pdataBANK4
  2432  004B  0087               	movwf	7
  2433  004C  3020               	movlw	32
  2434  004D  319A  22E3         	fcall	init_ram
  2435  004F                     end_of_initialization:	
  2436                           ;End of C runtime variable initialization code
  2437                           
  2438  004F                     __end_of__initialization:	
  2439  004F  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2440  0050  0020               	movlb	0
  2441  0051  3196  2E2B         	ljmp	_main	;jump to C main() function
  2442                           
  2443                           	psect	bitbssCOMMON
  2444  03D0                     __pbitbssCOMMON:	
  2445  03D0                     _Receive_OK:	
  2446  03D0                     	ds	1
  2447  03D1                     _Transceive_OK:	
  2448  03D1                     	ds	1
  2449                           
  2450                           	psect	bssCOMMON
  2451  007B                     __pbssCOMMON:	
  2452  007B                     _Sw:	
  2453  007B                     	ds	1
  2454                           
  2455                           	psect	bssBANK1
  2456  00A0                     __pbssBANK1:	
  2457  00A0                     _RF1:	
  2458  00A0                     	ds	14
  2459  00AE                     _Buz1:	
  2460  00AE                     	ds	12
  2461  00BA                     _Dimmer:	
  2462  00BA                     	ds	3
  2463  00BD                     _Timer1:	
  2464  00BD                     	ds	3
  2465  00C0                     _WDT:	
  2466  00C0                     	ds	2
  2467  00C2                     _CRC:	
  2468  00C2                     	ds	1
  2469  00C3                     _Cmd:	
  2470  00C3                     	ds	1
  2471  00C4                     _DelayOff:	
  2472  00C4                     	ds	1
  2473  00C5                     _DimmerIntr:	
  2474  00C5                     	ds	1
  2475  00C6                     _DimmerLights:	
  2476  00C6                     	ds	1
  2477  00C7                     _LED:	
  2478  00C7                     	ds	1
  2479  00C8                     _RSSI:	
  2480  00C8                     	ds	1
  2481  00C9                     _Rx_Length:	
  2482  00C9                     	ds	1
  2483  00CA                     _SPI0Buffer:	
  2484  00CA                     	ds	1
  2485  00CB                     _SwDetect:	
  2486  00CB                     	ds	1
  2487  00CC                     _Tx_Length:	
  2488  00CC                     	ds	1
  2489  00CD                     _r_address:	
  2490  00CD                     	ds	1
  2491  00CE                     _r_data:	
  2492  00CE                     	ds	1
  2493  00CF                     _s_data:	
  2494  00CF                     	ds	1
  2495  00D0                     _Temp:	
  2496  00D0                     	ds	18
  2497  00E2                     _DimmerIntr1:	
  2498  00E2                     	ds	7
  2499  00E9                     _DimmerIntr2:	
  2500  00E9                     	ds	7
  2501                           
  2502                           	psect	bssBANK2
  2503  0120                     __pbssBANK2:	
  2504  0120                     _myMain:	
  2505  0120                     	ds	14
  2506  012E                     _RF_Count:	
  2507  012E                     	ds	2
  2508  0130                     _Load:	
  2509  0130                     	ds	46
  2510  015E                     _DimmerLights1:	
  2511  015E                     	ds	8
  2512  0166                     _DimmerLights2:	
  2513  0166                     	ds	8
  2514                           
  2515                           	psect	bssBANK3
  2516  01A0                     __pbssBANK3:	
  2517  01A0                     _RF_Data:	
  2518  01A0                     	ds	30
  2519  01BE                     _Sw1:	
  2520  01BE                     	ds	9
  2521  01C7                     _Sw2:	
  2522  01C7                     	ds	9
  2523  01D0                     _DlySw1:	
  2524  01D0                     	ds	5
  2525  01D5                     _DlySw2:	
  2526  01D5                     	ds	5
  2527  01DA                     _VarErrLED:	
  2528  01DA                     	ds	4
  2529  01DE                     _VarLED1:	
  2530  01DE                     	ds	4
  2531  01E2                     _VarLED2:	
  2532  01E2                     	ds	4
  2533                           
  2534                           	psect	bssBANK4
  2535  0220                     __pbssBANK4:	
  2536  0220                     _Memory:	
  2537  0220                     	ds	37
  2538                           
  2539                           	psect	dataBANK4
  2540  0245                     __pdataBANK4:	
  2541  0245                     __product:	
  2542  0245                     	ds	32
  2543                           
  2544                           	psect	clrtext
  2545  1AE9                     clear_ram0:	
  2546                           ;	Called with FSR0 containing the base address, and
  2547                           ;	WREG with the size to clear
  2548                           
  2549  1AE9  0064               	clrwdt	;clear the watchdog before getting into this loop
  2550  1AEA                     clrloop0:	
  2551  1AEA  0180               	clrf	0	;clear RAM location pointed to by FSR
  2552  1AEB  3101               	addfsr 0,1
  2553  1AEC  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2554  1AED  2AEA               	goto	clrloop0	;have we reached the end yet?
  2555  1AEE  3400               	retlw	0	;all done for this memory range, return
  2556                           
  2557                           	psect	inittext
  2558  1AE3                     init_ram:	
  2559  1AE3  00FE               	movwf	126
  2560  1AE4                     initloop:	
  2561  1AE4  0012               	moviw fsr0++
  2562  1AE5  001E               	movwi fsr1++
  2563  1AE6  0BFE               	decfsz	126,f
  2564  1AE7  2AE4               	goto	initloop
  2565  1AE8  3400               	retlw	0
  2566                           
  2567                           	psect	cstackBANK3
  2568  01E6                     __pcstackBANK3:	
  2569  01E6                     ?_main:	
  2570  01E6                     main@argc:	
  2571                           ; 2 bytes @ 0x0
  2572                           
  2573                           
  2574                           ; 2 bytes @ 0x0
  2575  01E6                     	ds	2
  2576  01E8                     main@argv:	
  2577                           
  2578                           ; 2 bytes @ 0x2
  2579  01E8                     	ds	2
  2580                           
  2581                           	psect	cstackCOMMON
  2582  0070                     __pcstackCOMMON:	
  2583  0070                     ?_CC2500_WriteCommand:	
  2584  0070                     ?_RF_Timeout_Counter:	
  2585                           ; 0 bytes @ 0x0
  2586                           
  2587  0070                     ?_setRF_TimeoutCleared:	
  2588                           ; 0 bytes @ 0x0
  2589                           
  2590  0070                     ?_CC2500_WriteByte:	
  2591                           ; 0 bytes @ 0x0
  2592                           
  2593  0070                     ?_CC2500_ReadStatus:	
  2594                           ; 0 bytes @ 0x0
  2595                           
  2596  0070                     ?_CC2500_ReadByte:	
  2597                           ; 0 bytes @ 0x0
  2598                           
  2599  0070                     ?_CC2500_PowerRST:	
  2600                           ; 0 bytes @ 0x0
  2601                           
  2602  0070                     ?_CC2500_InitSetREG:	
  2603                           ; 0 bytes @ 0x0
  2604                           
  2605  0070                     ?_CC2500_InitPATable:	
  2606                           ; 0 bytes @ 0x0
  2607                           
  2608  0070                     ?_CC2500_ClearTXFIFO:	
  2609                           ; 0 bytes @ 0x0
  2610                           
  2611  0070                     ?_CC2500_ClearRXFIFO:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0070                     ?_CC2500_FrequencyCabr:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0070                     ?_CC2500_SIDLEMode:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0070                     ?_DlyOff_Initialization:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ?_DlyOff_Main:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ?_setDimmerLights_SwOn:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_setDimmerLights_SwOff:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_setDimmerLights_Initialization:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_setDimmerLights_Main:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_setDimmerLights_Line:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_setTxData:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_setRF_TransceiveGO:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_setLED_Initialization:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_setLED_Main:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_Fosc_Set:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_IO_Set:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_TMR1_Set:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_ADC_Set:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_IOC_Set:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_WDT_Set:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_IOC_ISR:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ??_IOC_ISR:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_TMR1_ISR:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_Timeout_Counter:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_set_TimeoutCleared:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_Flash_Memory_Write:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_Flash_Memory_Modify:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_WDT_Clearing:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_setLoad_AH_AL_Restore:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_setTemp_Initialization:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_setTemp_Main:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_setRF_Initialization:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_setRF_Main:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_RF_RxDisable:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_getRxData:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_setLog_Code:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ?_setControl_Lights_Table:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_setRFSW_Control:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ?_setRFSW_AdjControl:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ?_setSw_Initialization:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_setSw_Main:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_myMain_Initialization:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_my_MainTimer:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_Exception_Main:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?_Buzzer_Initialization:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ?_Buzzer_Main:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0070                     ?_CC2500_TxData:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0070                     ?_CC2500_RxData:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0070                     ?_CC2500_PowerOnInitial:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0070                     ?_DelayOffPointSelect:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0070                     ?_DelayOff_Initialization:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0070                     ?_DelayOff_Main:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0070                     ?_DimmerIntr_Initialization:	
  2768                           ; 0 bytes @ 0x0
  2769                           
  2770  0070                     ?_DimmerLights_SelectPointer:	
  2771                           ; 0 bytes @ 0x0
  2772                           
  2773  0070                     ?_DimmerLights_Initialization:	
  2774                           ; 0 bytes @ 0x0
  2775                           
  2776  0070                     ?_setDimmerLights_DimmingOn:	
  2777                           ; 0 bytes @ 0x0
  2778                           
  2779  0070                     ?_DimmerLights_Main:	
  2780                           ; 0 bytes @ 0x0
  2781                           
  2782  0070                     ?_DimmerLights_MOSFET_TMR_1:	
  2783                           ; 0 bytes @ 0x0
  2784                           
  2785  0070                     ??_DimmerLights_MOSFET_TMR_1:	
  2786                           ; 0 bytes @ 0x0
  2787                           
  2788  0070                     ?_DimmerLights_MOSFET_IOC_1:	
  2789                           ; 0 bytes @ 0x0
  2790                           
  2791  0070                     ??_DimmerLights_MOSFET_IOC_1:	
  2792                           ; 0 bytes @ 0x0
  2793                           
  2794  0070                     ?_DimmerLights_MOSFET_TMR_2:	
  2795                           ; 0 bytes @ 0x0
  2796                           
  2797  0070                     ??_DimmerLights_MOSFET_TMR_2:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0070                     ?_DimmerLights_MOSFET_IOC_2:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0070                     ??_DimmerLights_MOSFET_IOC_2:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0070                     ?_LedPointSelect:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0070                     ?_LED_Initialization:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0070                     ?_LED_Main:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0070                     ?_Mcu_Initialization:	
  2816                           ; 0 bytes @ 0x0
  2817                           
  2818  0070                     ?_ISR:	
  2819                           ; 0 bytes @ 0x0
  2820                           
  2821  0070                     ?_Flash_Memory_Initialization:	
  2822                           ; 0 bytes @ 0x0
  2823                           
  2824  0070                     ?_Flash_Memory_Main:	
  2825                           ; 0 bytes @ 0x0
  2826                           
  2827  0070                     ?_Flash_Memory_Unlock:	
  2828                           ; 0 bytes @ 0x0
  2829                           
  2830  0070                     ?_Flash_Memory_Erasing:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0070                     ?_setMemory_Modify:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0070                     ?_setMemory_LoopSave:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0070                     ?_WDT_Main:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0070                     ?_Load_Initialization:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0070                     ?_getLoad_AD:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0070                     ?_Load_Main:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0070                     ?_Temp_Initialization:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0070                     ?_getTemp_AD:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0070                     ?_Temp_Main:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0070                     ?_RF_Initialization:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0070                     ?_RF_Main:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0070                     ?_setRF_Learn:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0070                     ?_TouchPower:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0070                     ?_SwPointSelect:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0070                     ?_Switch_Initialization:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0070                     ?_Switch_Main:	
  2879                           ; 0 bytes @ 0x0
  2880                           
  2881  0070                     ?_getDimmerLights_Status:	
  2882                           ; 0 bytes @ 0x0
  2883                           
  2884  0070                     ?_getLoad_OK:	
  2885                           ; 1 bytes @ 0x0
  2886                           
  2887  0070                     ?_getMain_All_Error_Status:	
  2888                           ; 1 bytes @ 0x0
  2889                           
  2890  0070                     ?_getMain_All_LightsStatus:	
  2891                           ; 1 bytes @ 0x0
  2892                           
  2893  0070                     ?_getDimmerLights_Allow_Condition:	
  2894                           ; 1 bytes @ 0x0
  2895                           
  2896  0070                     ?_getDimmerLights_PercentToValue:	
  2897                           ; 1 bytes @ 0x0
  2898                           
  2899  0070                     ?_getDimmerLights_ValueToPercent:	
  2900                           ; 1 bytes @ 0x0
  2901                           
  2902  0070                     ?_getCmd_Status:	
  2903                           ; 1 bytes @ 0x0
  2904                           
  2905  0070                     ?_Flash_Memory_Read:	
  2906                           ; 1 bytes @ 0x0
  2907                           
  2908  0070                     ?_getMain_Lights_Count:	
  2909                           ; 1 bytes @ 0x0
  2910                           
  2911  0070                     ?_getRF_KeyStatus:	
  2912                           ; 1 bytes @ 0x0
  2913                           
  2914  0070                     ?_getSw_KeyStatus:	
  2915                           ; 1 bytes @ 0x0
  2916                           
  2917  0070                     ?_getDelayOff_GO:	
  2918                           ; 1 bytes @ 0x0
  2919                           
  2920  0070                     ?_getDimmerIntr_DimmingValue:	
  2921                           ; 1 bytes @ 0x0
  2922                           
  2923  0070                     ?_getAll_DimmerIntr_Dimming_Sw_RF:	
  2924                           ; 1 bytes @ 0x0
  2925                           
  2926  0070                     ?_getDimmerLights_Line:	
  2927                           ; 1 bytes @ 0x0
  2928                           
  2929  0070                     ?_getDimmer_LoadGO:	
  2930                           ; 1 bytes @ 0x0
  2931                           
  2932  0070                     ?_getDimmer_Load_Status:	
  2933                           ; 1 bytes @ 0x0
  2934                           
  2935  0070                     setDimmerLights_Initialization@lights:	
  2936                           ; 1 bytes @ 0x0
  2937                           
  2938                           
  2939                           ; 1 bytes @ 0x0
  2940  0070                     	ds	1
  2941  0071                     ??_TMR1_ISR:	
  2942  0071                     ??_ISR:	
  2943                           ; 0 bytes @ 0x1
  2944                           
  2945                           
  2946                           ; 0 bytes @ 0x1
  2947  0071                     	ds	1
  2948  0072                     ??_RF_Timeout_Counter:	
  2949  0072                     ??_setRF_TimeoutCleared:	
  2950                           ; 0 bytes @ 0x2
  2951                           
  2952  0072                     ??_CC2500_WriteByte:	
  2953                           ; 0 bytes @ 0x2
  2954                           
  2955  0072                     ??_CC2500_ReadByte:	
  2956                           ; 0 bytes @ 0x2
  2957                           
  2958  0072                     ?_DelayTime_1us:	
  2959                           ; 0 bytes @ 0x2
  2960                           
  2961  0072                     ??_setDimmerLights_Initialization:	
  2962                           ; 0 bytes @ 0x2
  2963                           
  2964  0072                     ??_getLoad_OK:	
  2965                           ; 0 bytes @ 0x2
  2966                           
  2967  0072                     ??_getMain_All_Error_Status:	
  2968                           ; 0 bytes @ 0x2
  2969                           
  2970  0072                     ??_getMain_All_LightsStatus:	
  2971                           ; 0 bytes @ 0x2
  2972                           
  2973  0072                     ??_setDimmerLights_Line:	
  2974                           ; 0 bytes @ 0x2
  2975                           
  2976  0072                     ??_getCmd_Status:	
  2977                           ; 0 bytes @ 0x2
  2978                           
  2979  0072                     ?_setCmd_Status:	
  2980                           ; 0 bytes @ 0x2
  2981                           
  2982  0072                     ??_setTxData:	
  2983                           ; 0 bytes @ 0x2
  2984                           
  2985  0072                     ??_setRF_TransceiveGO:	
  2986                           ; 0 bytes @ 0x2
  2987                           
  2988  0072                     ??_Fosc_Set:	
  2989                           ; 0 bytes @ 0x2
  2990                           
  2991  0072                     ??_IO_Set:	
  2992                           ; 0 bytes @ 0x2
  2993                           
  2994  0072                     ??_TMR1_Set:	
  2995                           ; 0 bytes @ 0x2
  2996                           
  2997  0072                     ??_ADC_Set:	
  2998                           ; 0 bytes @ 0x2
  2999                           
  3000  0072                     ??_IOC_Set:	
  3001                           ; 0 bytes @ 0x2
  3002                           
  3003  0072                     ??_WDT_Set:	
  3004                           ; 0 bytes @ 0x2
  3005                           
  3006  0072                     ??_Timeout_Counter:	
  3007                           ; 0 bytes @ 0x2
  3008                           
  3009  0072                     ??_set_TimeoutCleared:	
  3010                           ; 0 bytes @ 0x2
  3011                           
  3012  0072                     ??_Flash_Memory_Read:	
  3013                           ; 0 bytes @ 0x2
  3014                           
  3015  0072                     ?_setMemory_Data:	
  3016                           ; 0 bytes @ 0x2
  3017                           
  3018  0072                     ??_Flash_Memory_Write:	
  3019                           ; 0 bytes @ 0x2
  3020                           
  3021  0072                     ??_WDT_Clearing:	
  3022                           ; 0 bytes @ 0x2
  3023                           
  3024  0072                     ??_setLoad_AH_AL_Restore:	
  3025                           ; 0 bytes @ 0x2
  3026                           
  3027  0072                     ??_getMain_Lights_Count:	
  3028                           ; 0 bytes @ 0x2
  3029                           
  3030  0072                     ??_setTemp_Initialization:	
  3031                           ; 0 bytes @ 0x2
  3032                           
  3033  0072                     ??_setRF_Initialization:	
  3034                           ; 0 bytes @ 0x2
  3035                           
  3036  0072                     ??_getRF_KeyStatus:	
  3037                           ; 0 bytes @ 0x2
  3038                           
  3039  0072                     ??_getSw_KeyStatus:	
  3040                           ; 0 bytes @ 0x2
  3041                           
  3042  0072                     ??_myMain_Initialization:	
  3043                           ; 0 bytes @ 0x2
  3044                           
  3045  0072                     ??_Buzzer_Initialization:	
  3046                           ; 0 bytes @ 0x2
  3047                           
  3048  0072                     ??_Buzzer_Main:	
  3049                           ; 0 bytes @ 0x2
  3050                           
  3051  0072                     ??_DelayOffPointSelect:	
  3052                           ; 0 bytes @ 0x2
  3053                           
  3054  0072                     ??_DimmerIntr_Initialization:	
  3055                           ; 0 bytes @ 0x2
  3056                           
  3057  0072                     ?_setDimmerIntr_ControlStatus:	
  3058                           ; 0 bytes @ 0x2
  3059                           
  3060  0072                     ?_setDimmerIntr_DimmingValue:	
  3061                           ; 0 bytes @ 0x2
  3062                           
  3063  0072                     ??_getDimmerIntr_DimmingValue:	
  3064                           ; 0 bytes @ 0x2
  3065                           
  3066  0072                     ?_setDimmerIntr_Dimming_Sw:	
  3067                           ; 0 bytes @ 0x2
  3068                           
  3069  0072                     ?_setDimmerIntr_Dimming_RF:	
  3070                           ; 0 bytes @ 0x2
  3071                           
  3072  0072                     ??_getAll_DimmerIntr_Dimming_Sw_RF:	
  3073                           ; 0 bytes @ 0x2
  3074                           
  3075  0072                     ??_DimmerLights_SelectPointer:	
  3076                           ; 0 bytes @ 0x2
  3077                           
  3078  0072                     ??_getDimmerLights_Line:	
  3079                           ; 0 bytes @ 0x2
  3080                           
  3081  0072                     ??_getDimmer_LoadGO:	
  3082                           ; 0 bytes @ 0x2
  3083                           
  3084  0072                     ??_getDimmer_Load_Status:	
  3085                           ; 0 bytes @ 0x2
  3086                           
  3087  0072                     ??_LedPointSelect:	
  3088                           ; 0 bytes @ 0x2
  3089                           
  3090  0072                     ??_Flash_Memory_Unlock:	
  3091                           ; 0 bytes @ 0x2
  3092                           
  3093  0072                     ??_Flash_Memory_Erasing:	
  3094                           ; 0 bytes @ 0x2
  3095                           
  3096  0072                     ??_setMemory_Modify:	
  3097                           ; 0 bytes @ 0x2
  3098                           
  3099  0072                     ??_setMemory_LoopSave:	
  3100                           ; 0 bytes @ 0x2
  3101                           
  3102  0072                     ??_WDT_Main:	
  3103                           ; 0 bytes @ 0x2
  3104                           
  3105  0072                     ??_Temp_Initialization:	
  3106                           ; 0 bytes @ 0x2
  3107                           
  3108  0072                     ??_setRF_Learn:	
  3109                           ; 0 bytes @ 0x2
  3110                           
  3111  0072                     ??_TouchPower:	
  3112                           ; 0 bytes @ 0x2
  3113                           
  3114  0072                     ??_SwPointSelect:	
  3115                           ; 0 bytes @ 0x2
  3116                           
  3117  0072                     ?___bmul:	
  3118                           ; 0 bytes @ 0x2
  3119                           
  3120  0072                     ?_getBuz_GO:	
  3121                           ; 1 bytes @ 0x2
  3122                           
  3123  0072                     ?_getAD:	
  3124                           ; 2 bytes @ 0x2
  3125                           
  3126  0072                     ?___wmul:	
  3127                           ; 2 bytes @ 0x2
  3128                           
  3129  0072                     ?___awdiv:	
  3130                           ; 2 bytes @ 0x2
  3131                           
  3132  0072                     ?___lwdiv:	
  3133                           ; 2 bytes @ 0x2
  3134                           
  3135  0072                     ?___ftpack:	
  3136                           ; 2 bytes @ 0x2
  3137                           
  3138  0072                     setDimmerIntr_ControlStatus@command:	
  3139                           ; 3 bytes @ 0x2
  3140                           
  3141  0072                     setDimmerIntr_DimmingValue@value:	
  3142                           ; 1 bytes @ 0x2
  3143                           
  3144  0072                     setDimmerIntr_Dimming_Sw@command:	
  3145                           ; 1 bytes @ 0x2
  3146                           
  3147  0072                     setDimmerIntr_Dimming_RF@command:	
  3148                           ; 1 bytes @ 0x2
  3149                           
  3150  0072                     setDimmerLights_Line@lights:	
  3151                           ; 1 bytes @ 0x2
  3152                           
  3153  0072                     getDimmer_LoadGO@loadgo:	
  3154                           ; 1 bytes @ 0x2
  3155                           
  3156  0072                     getDimmer_Load_Status@status:	
  3157                           ; 1 bytes @ 0x2
  3158                           
  3159  0072                     getAD@adcon1:	
  3160                           ; 1 bytes @ 0x2
  3161                           
  3162  0072                     setMemory_Data@data:	
  3163                           ; 1 bytes @ 0x2
  3164                           
  3165  0072                     getLoad_OK@ok:	
  3166                           ; 1 bytes @ 0x2
  3167                           
  3168  0072                     getMain_All_LightsStatus@status:	
  3169                           ; 1 bytes @ 0x2
  3170                           
  3171  0072                     getMain_Lights_Count@count:	
  3172                           ; 1 bytes @ 0x2
  3173                           
  3174  0072                     setCmd_Status@cmd:	
  3175                           ; 1 bytes @ 0x2
  3176                           
  3177  0072                     getCmd_Status@number:	
  3178                           ; 1 bytes @ 0x2
  3179                           
  3180  0072                     ___bmul@multiplicand:	
  3181                           ; 1 bytes @ 0x2
  3182                           
  3183  0072                     DelayTime_1us@count:	
  3184                           ; 1 bytes @ 0x2
  3185                           
  3186  0072                     ___wmul@multiplier:	
  3187                           ; 2 bytes @ 0x2
  3188                           
  3189  0072                     ___awdiv@divisor:	
  3190                           ; 2 bytes @ 0x2
  3191                           
  3192  0072                     ___lwdiv@divisor:	
  3193                           ; 2 bytes @ 0x2
  3194                           
  3195  0072                     ___ftpack@arg:	
  3196                           ; 2 bytes @ 0x2
  3197                           
  3198                           
  3199                           ; 3 bytes @ 0x2
  3200  0072                     	ds	1
  3201  0073                     ??_getDimmerLights_Allow_Condition:	
  3202  0073                     ??_setCmd_Status:	
  3203                           ; 0 bytes @ 0x3
  3204                           
  3205  0073                     ??_setMemory_Data:	
  3206                           ; 0 bytes @ 0x3
  3207                           
  3208  0073                     ??_setDimmerIntr_ControlStatus:	
  3209                           ; 0 bytes @ 0x3
  3210                           
  3211  0073                     ??_setDimmerIntr_DimmingValue:	
  3212                           ; 0 bytes @ 0x3
  3213                           
  3214  0073                     ??_setDimmerIntr_Dimming_Sw:	
  3215                           ; 0 bytes @ 0x3
  3216                           
  3217  0073                     ??_setDimmerIntr_Dimming_RF:	
  3218                           ; 0 bytes @ 0x3
  3219                           
  3220  0073                     ??_DimmerLights_Initialization:	
  3221                           ; 0 bytes @ 0x3
  3222                           
  3223  0073                     ??_Mcu_Initialization:	
  3224                           ; 0 bytes @ 0x3
  3225                           
  3226  0073                     ??_RF_Initialization:	
  3227                           ; 0 bytes @ 0x3
  3228                           
  3229  0073                     ??___bmul:	
  3230                           ; 0 bytes @ 0x3
  3231                           
  3232  0073                     CC2500_WriteByte@loop_a:	
  3233                           ; 0 bytes @ 0x3
  3234                           
  3235  0073                     CC2500_ReadByte@loop_b:	
  3236                           ; 1 bytes @ 0x3
  3237                           
  3238  0073                     DelayOffPointSelect@sw:	
  3239                           ; 1 bytes @ 0x3
  3240                           
  3241  0073                     getDimmerIntr_DimmingValue@value:	
  3242                           ; 1 bytes @ 0x3
  3243                           
  3244  0073                     _getAll_DimmerIntr_Dimming_Sw_RF$2165:	
  3245                           ; 1 bytes @ 0x3
  3246                           
  3247  0073                     DimmerLights_SelectPointer@lights:	
  3248                           ; 1 bytes @ 0x3
  3249                           
  3250  0073                     getDimmerLights_Line@line:	
  3251                           ; 1 bytes @ 0x3
  3252                           
  3253  0073                     LedPointSelect@led:	
  3254                           ; 1 bytes @ 0x3
  3255                           
  3256  0073                     Flash_Memory_Read@i:	
  3257                           ; 1 bytes @ 0x3
  3258                           
  3259  0073                     Flash_Memory_Write@i:	
  3260                           ; 1 bytes @ 0x3
  3261                           
  3262  0073                     setMemory_Modify@command:	
  3263                           ; 1 bytes @ 0x3
  3264                           
  3265  0073                     setMemory_LoopSave@command:	
  3266                           ; 1 bytes @ 0x3
  3267                           
  3268  0073                     setLoad_AH_AL_Restore@i:	
  3269                           ; 1 bytes @ 0x3
  3270                           
  3271  0073                     setRF_Learn@command:	
  3272                           ; 1 bytes @ 0x3
  3273                           
  3274  0073                     getRF_KeyStatus@key:	
  3275                           ; 1 bytes @ 0x3
  3276                           
  3277  0073                     setRF_TransceiveGO@command:	
  3278                           ; 1 bytes @ 0x3
  3279                           
  3280  0073                     SwPointSelect@sw:	
  3281                           ; 1 bytes @ 0x3
  3282                           
  3283  0073                     _getSw_KeyStatus$5839:	
  3284                           ; 1 bytes @ 0x3
  3285                           
  3286  0073                     getMain_Lights_Count@status1:	
  3287                           ; 1 bytes @ 0x3
  3288                           
  3289  0073                     getCmd_Status@cmd:	
  3290                           ; 1 bytes @ 0x3
  3291                           
  3292  0073                     _getMain_All_Error_Status$6546:	
  3293                           ; 1 bytes @ 0x3
  3294                           
  3295                           
  3296                           ; 2 bytes @ 0x3
  3297  0073                     	ds	1
  3298  0074                     ??_CC2500_WriteCommand:	
  3299  0074                     ??_CC2500_ReadStatus:	
  3300                           ; 0 bytes @ 0x4
  3301                           
  3302  0074                     ??_DelayTime_1us:	
  3303                           ; 0 bytes @ 0x4
  3304                           
  3305  0074                     ?_CC2500_WriteREG:	
  3306                           ; 0 bytes @ 0x4
  3307                           
  3308  0074                     ??_DlyOff_Initialization:	
  3309                           ; 0 bytes @ 0x4
  3310                           
  3311  0074                     ??_getDimmerLights_Status:	
  3312                           ; 0 bytes @ 0x4
  3313                           
  3314  0074                     ??_setDimmerLights_SwOff:	
  3315                           ; 0 bytes @ 0x4
  3316                           
  3317  0074                     ?_setLED:	
  3318                           ; 0 bytes @ 0x4
  3319                           
  3320  0074                     ??_setLED_Main:	
  3321                           ; 0 bytes @ 0x4
  3322                           
  3323  0074                     ??_getBuz_GO:	
  3324                           ; 0 bytes @ 0x4
  3325                           
  3326  0074                     ??_getDelayOff_GO:	
  3327                           ; 0 bytes @ 0x4
  3328                           
  3329  0074                     ??_setDimmerLights_DimmingOn:	
  3330                           ; 0 bytes @ 0x4
  3331                           
  3332  0074                     ?_setDimmerLights_DimmingRun:	
  3333                           ; 0 bytes @ 0x4
  3334                           
  3335  0074                     ??_Load_Initialization:	
  3336                           ; 0 bytes @ 0x4
  3337                           
  3338  0074                     CC2500_WriteREG@value:	
  3339                           ; 0 bytes @ 0x4
  3340                           
  3341  0074                     DlyOff_Initialization@sw:	
  3342                           ; 1 bytes @ 0x4
  3343                           
  3344  0074                     getDelayOff_GO@sw:	
  3345                           ; 1 bytes @ 0x4
  3346                           
  3347  0074                     setDimmerIntr_ControlStatus@lights:	
  3348                           ; 1 bytes @ 0x4
  3349                           
  3350  0074                     setDimmerIntr_DimmingValue@lights:	
  3351                           ; 1 bytes @ 0x4
  3352                           
  3353  0074                     getDimmerIntr_DimmingValue@lights:	
  3354                           ; 1 bytes @ 0x4
  3355                           
  3356  0074                     setDimmerIntr_Dimming_Sw@lights:	
  3357                           ; 1 bytes @ 0x4
  3358                           
  3359  0074                     setDimmerIntr_Dimming_RF@lights:	
  3360                           ; 1 bytes @ 0x4
  3361                           
  3362  0074                     _getAll_DimmerIntr_Dimming_Sw_RF$2166:	
  3363                           ; 1 bytes @ 0x4
  3364                           
  3365  0074                     setDimmerLights_SwOff@sw:	
  3366                           ; 1 bytes @ 0x4
  3367                           
  3368  0074                     setDimmerLights_DimmingOn@sw:	
  3369                           ; 1 bytes @ 0x4
  3370                           
  3371  0074                     _getDimmerLights_Allow_Condition$2298:	
  3372                           ; 1 bytes @ 0x4
  3373                           
  3374  0074                     getDimmerLights_Status@lights:	
  3375                           ; 1 bytes @ 0x4
  3376                           
  3377  0074                     setDimmerLights_DimmingRun@command:	
  3378                           ; 1 bytes @ 0x4
  3379                           
  3380  0074                     setLED@command:	
  3381                           ; 1 bytes @ 0x4
  3382                           
  3383  0074                     Flash_Memory_Read@address:	
  3384                           ; 1 bytes @ 0x4
  3385                           
  3386  0074                     setMemory_Data@address:	
  3387                           ; 1 bytes @ 0x4
  3388                           
  3389  0074                     _getRF_KeyStatus$4838:	
  3390                           ; 1 bytes @ 0x4
  3391                           
  3392  0074                     _getSw_KeyStatus$5840:	
  3393                           ; 1 bytes @ 0x4
  3394                           
  3395  0074                     getMain_Lights_Count@status2:	
  3396                           ; 1 bytes @ 0x4
  3397                           
  3398  0074                     setCmd_Status@number:	
  3399                           ; 1 bytes @ 0x4
  3400                           
  3401  0074                     ___bmul@product:	
  3402                           ; 1 bytes @ 0x4
  3403                           
  3404  0074                     DelayTime_1us@i:	
  3405                           ; 1 bytes @ 0x4
  3406                           
  3407  0074                     ___wmul@multiplicand:	
  3408                           ; 2 bytes @ 0x4
  3409                           
  3410  0074                     ___awdiv@dividend:	
  3411                           ; 2 bytes @ 0x4
  3412                           
  3413  0074                     ___lwdiv@dividend:	
  3414                           ; 2 bytes @ 0x4
  3415                           
  3416                           
  3417                           ; 2 bytes @ 0x4
  3418  0074                     	ds	1
  3419  0075                     ??_CC2500_WriteREG:	
  3420  0075                     ??_setLED:	
  3421                           ; 0 bytes @ 0x5
  3422                           
  3423  0075                     ??_DelayOff_Initialization:	
  3424                           ; 0 bytes @ 0x5
  3425                           
  3426  0075                     ??_setDimmerLights_DimmingRun:	
  3427                           ; 0 bytes @ 0x5
  3428                           
  3429  0075                     ??_getAD:	
  3430                           ; 0 bytes @ 0x5
  3431                           
  3432  0075                     CC2500_WriteCommand@command:	
  3433                           ; 0 bytes @ 0x5
  3434                           
  3435  0075                     CC2500_ReadStatus@status_addr:	
  3436                           ; 1 bytes @ 0x5
  3437                           
  3438  0075                     getDelayOff_GO@go:	
  3439                           ; 1 bytes @ 0x5
  3440                           
  3441  0075                     getAll_DimmerIntr_Dimming_Sw_RF@status:	
  3442                           ; 1 bytes @ 0x5
  3443                           
  3444  0075                     _getDimmerLights_Allow_Condition$2299:	
  3445                           ; 1 bytes @ 0x5
  3446                           
  3447  0075                     getDimmerLights_Status@status:	
  3448                           ; 1 bytes @ 0x5
  3449                           
  3450  0075                     setLED@led:	
  3451                           ; 1 bytes @ 0x5
  3452                           
  3453  0075                     getAD@adcon0:	
  3454                           ; 1 bytes @ 0x5
  3455                           
  3456  0075                     Flash_Memory_Read@ret:	
  3457                           ; 1 bytes @ 0x5
  3458                           
  3459  0075                     getSw_KeyStatus@status:	
  3460                           ; 1 bytes @ 0x5
  3461                           
  3462  0075                     ___bmul@multiplier:	
  3463                           ; 1 bytes @ 0x5
  3464                           
  3465  0075                     ___ftpack@exp:	
  3466                           ; 1 bytes @ 0x5
  3467                           
  3468  0075                     _getMain_All_Error_Status$6547:	
  3469                           ; 1 bytes @ 0x5
  3470                           
  3471                           
  3472                           ; 2 bytes @ 0x5
  3473  0075                     	ds	1
  3474  0076                     ??_CC2500_ClearTXFIFO:	
  3475  0076                     ??_CC2500_ClearRXFIFO:	
  3476                           ; 0 bytes @ 0x6
  3477                           
  3478  0076                     ??_CC2500_SIDLEMode:	
  3479                           ; 0 bytes @ 0x6
  3480                           
  3481  0076                     ??_setLED_Initialization:	
  3482                           ; 0 bytes @ 0x6
  3483                           
  3484  0076                     ??_Flash_Memory_Modify:	
  3485                           ; 0 bytes @ 0x6
  3486                           
  3487  0076                     ??_RF_RxDisable:	
  3488                           ; 0 bytes @ 0x6
  3489                           
  3490  0076                     ??_setSw_Initialization:	
  3491                           ; 0 bytes @ 0x6
  3492                           
  3493  0076                     ??_CC2500_TxData:	
  3494                           ; 0 bytes @ 0x6
  3495                           
  3496  0076                     ??_CC2500_RxData:	
  3497                           ; 0 bytes @ 0x6
  3498                           
  3499  0076                     ??_getLoad_AD:	
  3500                           ; 0 bytes @ 0x6
  3501                           
  3502  0076                     ??_getTemp_AD:	
  3503                           ; 0 bytes @ 0x6
  3504                           
  3505  0076                     ??___wmul:	
  3506                           ; 0 bytes @ 0x6
  3507                           
  3508  0076                     ??___awdiv:	
  3509                           ; 0 bytes @ 0x6
  3510                           
  3511  0076                     ??___lwdiv:	
  3512                           ; 0 bytes @ 0x6
  3513                           
  3514  0076                     CC2500_WriteREG@w_addr:	
  3515                           ; 0 bytes @ 0x6
  3516                           
  3517  0076                     _getDimmerLights_Allow_Condition$2300:	
  3518                           ; 1 bytes @ 0x6
  3519                           
  3520  0076                     setDimmerLights_DimmingRun@lights:	
  3521                           ; 1 bytes @ 0x6
  3522                           
  3523  0076                     setLED_Initialization@led:	
  3524                           ; 1 bytes @ 0x6
  3525                           
  3526  0076                     setLED_Main@led:	
  3527                           ; 1 bytes @ 0x6
  3528                           
  3529  0076                     setSw_Initialization@sw:	
  3530                           ; 1 bytes @ 0x6
  3531                           
  3532  0076                     getSw_KeyStatus@sw:	
  3533                           ; 1 bytes @ 0x6
  3534                           
  3535  0076                     ___ftpack@sign:	
  3536                           ; 1 bytes @ 0x6
  3537                           
  3538  0076                     getBuz_GO@i:	
  3539                           ; 1 bytes @ 0x6
  3540                           
  3541  0076                     DelayTime_1us@j:	
  3542                           ; 2 bytes @ 0x6
  3543                           
  3544  0076                     ___wmul@product:	
  3545                           ; 2 bytes @ 0x6
  3546                           
  3547                           
  3548                           ; 2 bytes @ 0x6
  3549  0076                     	ds	1
  3550  0077                     ??_CC2500_InitSetREG:	
  3551  0077                     ??_CC2500_InitPATable:	
  3552                           ; 0 bytes @ 0x7
  3553                           
  3554  0077                     ??___ftpack:	
  3555                           ; 0 bytes @ 0x7
  3556                           
  3557  0077                     ??_setBuz:	
  3558                           ; 0 bytes @ 0x7
  3559                           
  3560  0077                     ??_LED_Initialization:	
  3561                           ; 0 bytes @ 0x7
  3562                           
  3563  0077                     ??_LED_Main:	
  3564                           ; 0 bytes @ 0x7
  3565                           
  3566  0077                     ??_Switch_Initialization:	
  3567                           ; 0 bytes @ 0x7
  3568                           
  3569  0077                     CC2500_TxData@loop_e:	
  3570                           ; 0 bytes @ 0x7
  3571                           
  3572  0077                     CC2500_RxData@loop_f:	
  3573                           ; 1 bytes @ 0x7
  3574                           
  3575  0077                     getDimmerLights_Allow_Condition@lights:	
  3576                           ; 1 bytes @ 0x7
  3577                           
  3578  0077                     Flash_Memory_Modify@i:	
  3579                           ; 1 bytes @ 0x7
  3580                           
  3581  0077                     getTemp_AD@channel:	
  3582                           ; 1 bytes @ 0x7
  3583                           
  3584  0077                     getMain_All_Error_Status@command:	
  3585                           ; 1 bytes @ 0x7
  3586                           
  3587  0077                     ___lwdiv@quotient:	
  3588                           ; 1 bytes @ 0x7
  3589                           
  3590                           
  3591                           ; 2 bytes @ 0x7
  3592  0077                     	ds	1
  3593  0078                     ??_CC2500_PowerRST:	
  3594  0078                     ??_CC2500_FrequencyCabr:	
  3595                           ; 0 bytes @ 0x8
  3596                           
  3597  0078                     ??_Flash_Memory_Main:	
  3598                           ; 0 bytes @ 0x8
  3599                           
  3600  0078                     setBuz@count:	
  3601                           ; 0 bytes @ 0x8
  3602                           
  3603  0078                     CC2500_InitPATable@temp:	
  3604                           ; 1 bytes @ 0x8
  3605                           
  3606  0078                     getDimmerLights_Allow_Condition@allow:	
  3607                           ; 1 bytes @ 0x8
  3608                           
  3609  0078                     getMain_All_Error_Status@status:	
  3610                           ; 1 bytes @ 0x8
  3611                           
  3612                           
  3613                           ; 1 bytes @ 0x8
  3614  0078                     	ds	1
  3615  0079                     ??_setDimmerLights_SwOn:	
  3616  0079                     ??_my_MainTimer:	
  3617                           ; 0 bytes @ 0x9
  3618                           
  3619  0079                     ??_Exception_Main:	
  3620                           ; 0 bytes @ 0x9
  3621                           
  3622  0079                     CC2500_InitPATable@loop_d:	
  3623                           ; 0 bytes @ 0x9
  3624                           
  3625  0079                     ___lwdiv@counter:	
  3626                           ; 1 bytes @ 0x9
  3627                           
  3628                           
  3629                           ; 1 bytes @ 0x9
  3630  0079                     	ds	1
  3631  007A                     ??_setDimmerLights_Main:	
  3632  007A                     ??_setControl_Lights_Table:	
  3633                           ; 0 bytes @ 0xA
  3634                           
  3635  007A                     ??_CC2500_PowerOnInitial:	
  3636                           ; 0 bytes @ 0xA
  3637                           
  3638  007A                     ??_DelayOff_Main:	
  3639                           ; 0 bytes @ 0xA
  3640                           
  3641  007A                     ??_DimmerLights_Main:	
  3642                           ; 0 bytes @ 0xA
  3643                           
  3644  007A                     ??_Temp_Main:	
  3645                           ; 0 bytes @ 0xA
  3646                           
  3647  007A                     ??_RF_Main:	
  3648                           ; 0 bytes @ 0xA
  3649                           
  3650  007A                     ??_Switch_Main:	
  3651                           ; 0 bytes @ 0xA
  3652                           
  3653  007A                     ??_main:	
  3654                           ; 0 bytes @ 0xA
  3655                           
  3656  007A                     ??___ftneg:	
  3657                           ; 0 bytes @ 0xA
  3658                           
  3659                           
  3660                           	psect	cstackBANK0
  3661  0020                     __pcstackBANK0:	
  3662                           ; 0 bytes @ 0xA
  3663                           
  3664  0020                     ??_Load_Main:	
  3665  0020                     ?___awtoft:	
  3666                           ; 0 bytes @ 0x0
  3667                           
  3668  0020                     CC2500_InitSetREG@temp1:	
  3669                           ; 3 bytes @ 0x0
  3670                           
  3671  0020                     getLoad_AD@channel:	
  3672                           ; 1 bytes @ 0x0
  3673                           
  3674  0020                     ___awdiv@counter:	
  3675                           ; 1 bytes @ 0x0
  3676                           
  3677  0020                     ___awtoft@c:	
  3678                           ; 1 bytes @ 0x0
  3679                           
  3680                           
  3681                           ; 2 bytes @ 0x0
  3682  0020                     	ds	1
  3683  0021                     CC2500_InitSetREG@temp2:	
  3684  0021                     getLoad_AD@k:	
  3685                           ; 1 bytes @ 0x1
  3686                           
  3687  0021                     ___awdiv@sign:	
  3688                           ; 1 bytes @ 0x1
  3689                           
  3690                           
  3691                           ; 1 bytes @ 0x1
  3692  0021                     	ds	1
  3693  0022                     CC2500_InitSetREG@loop_c:	
  3694  0022                     getLoad_AD@j:	
  3695                           ; 1 bytes @ 0x2
  3696                           
  3697  0022                     Load_Main@error:	
  3698                           ; 1 bytes @ 0x2
  3699                           
  3700  0022                     ___awdiv@quotient:	
  3701                           ; 1 bytes @ 0x2
  3702                           
  3703                           
  3704                           ; 2 bytes @ 0x2
  3705  0022                     	ds	1
  3706  0023                     ??___awtoft:	
  3707  0023                     getLoad_AD@i:	
  3708                           ; 0 bytes @ 0x3
  3709                           
  3710  0023                     Load_Main@Load_Status:	
  3711                           ; 1 bytes @ 0x3
  3712                           
  3713                           
  3714                           ; 1 bytes @ 0x3
  3715  0023                     	ds	1
  3716  0024                     ?_setBuz:	
  3717  0024                     setBuz@time:	
  3718                           ; 0 bytes @ 0x4
  3719                           
  3720  0024                     Load_Main@i:	
  3721                           ; 2 bytes @ 0x4
  3722                           
  3723                           
  3724                           ; 2 bytes @ 0x4
  3725  0024                     	ds	1
  3726  0025                     ___awtoft@sign:	
  3727                           
  3728                           ; 1 bytes @ 0x5
  3729  0025                     	ds	1
  3730  0026                     ?___ftdiv:	
  3731  0026                     ?___ftmul:	
  3732                           ; 3 bytes @ 0x6
  3733                           
  3734  0026                     _setDimmerLights_SwOn$2241:	
  3735                           ; 3 bytes @ 0x6
  3736                           
  3737  0026                     Exception_Main@count:	
  3738                           ; 1 bytes @ 0x6
  3739                           
  3740  0026                     ___ftdiv@f2:	
  3741                           ; 1 bytes @ 0x6
  3742                           
  3743  0026                     ___ftmul@f1:	
  3744                           ; 3 bytes @ 0x6
  3745                           
  3746                           
  3747                           ; 3 bytes @ 0x6
  3748  0026                     	ds	1
  3749  0027                     _setDimmerLights_SwOn$2250:	
  3750  0027                     Exception_Main@error:	
  3751                           ; 1 bytes @ 0x7
  3752                           
  3753                           
  3754                           ; 1 bytes @ 0x7
  3755  0027                     	ds	1
  3756  0028                     setDimmerLights_SwOn@idle:	
  3757  0028                     Exception_Main@i:	
  3758                           ; 1 bytes @ 0x8
  3759                           
  3760                           
  3761                           ; 2 bytes @ 0x8
  3762  0028                     	ds	1
  3763  0029                     setDimmerLights_SwOn@sw:	
  3764  0029                     ___ftdiv@f1:	
  3765                           ; 1 bytes @ 0x9
  3766                           
  3767  0029                     ___ftmul@f2:	
  3768                           ; 3 bytes @ 0x9
  3769                           
  3770                           
  3771                           ; 3 bytes @ 0x9
  3772  0029                     	ds	1
  3773  002A                     ??_setSw_Main:	
  3774  002A                     Exception_Main@i_6558:	
  3775                           ; 0 bytes @ 0xA
  3776                           
  3777                           
  3778                           ; 2 bytes @ 0xA
  3779  002A                     	ds	2
  3780  002C                     ??___ftdiv:	
  3781  002C                     ??___ftmul:	
  3782                           ; 0 bytes @ 0xC
  3783                           
  3784  002C                     setSw_Main@sw:	
  3785                           ; 0 bytes @ 0xC
  3786                           
  3787  002C                     Exception_Main@lights:	
  3788                           ; 1 bytes @ 0xC
  3789                           
  3790                           
  3791                           ; 1 bytes @ 0xC
  3792  002C                     	ds	4
  3793  0030                     ___ftdiv@cntr:	
  3794  0030                     ___ftmul@exp:	
  3795                           ; 1 bytes @ 0x10
  3796                           
  3797                           
  3798                           ; 1 bytes @ 0x10
  3799  0030                     	ds	1
  3800  0031                     ___ftdiv@f3:	
  3801  0031                     ___ftmul@f3_as_product:	
  3802                           ; 3 bytes @ 0x11
  3803                           
  3804                           
  3805                           ; 3 bytes @ 0x11
  3806  0031                     	ds	3
  3807  0034                     ___ftdiv@exp:	
  3808  0034                     ___ftmul@cntr:	
  3809                           ; 1 bytes @ 0x14
  3810                           
  3811                           
  3812                           ; 1 bytes @ 0x14
  3813  0034                     	ds	1
  3814  0035                     ___ftdiv@sign:	
  3815  0035                     ___ftmul@sign:	
  3816                           ; 1 bytes @ 0x15
  3817                           
  3818                           
  3819                           ; 1 bytes @ 0x15
  3820  0035                     	ds	1
  3821  0036                     ?___ftneg:	
  3822  0036                     ___ftneg@f1:	
  3823                           ; 3 bytes @ 0x16
  3824                           
  3825                           
  3826                           ; 3 bytes @ 0x16
  3827  0036                     	ds	3
  3828  0039                     ?___ftadd:	
  3829  0039                     ___ftadd@f1:	
  3830                           ; 3 bytes @ 0x19
  3831                           
  3832                           
  3833                           ; 3 bytes @ 0x19
  3834  0039                     	ds	3
  3835  003C                     ___ftadd@f2:	
  3836                           
  3837                           ; 3 bytes @ 0x1C
  3838  003C                     	ds	3
  3839  003F                     ??___ftadd:	
  3840                           
  3841                           ; 0 bytes @ 0x1F
  3842  003F                     	ds	4
  3843  0043                     ___ftadd@sign:	
  3844                           
  3845                           ; 1 bytes @ 0x23
  3846  0043                     	ds	1
  3847  0044                     ___ftadd@exp2:	
  3848                           
  3849                           ; 1 bytes @ 0x24
  3850  0044                     	ds	1
  3851  0045                     ___ftadd@exp1:	
  3852                           
  3853                           ; 1 bytes @ 0x25
  3854  0045                     	ds	1
  3855  0046                     ?___fttol:	
  3856  0046                     ___fttol@f1:	
  3857                           ; 4 bytes @ 0x26
  3858                           
  3859                           
  3860                           ; 3 bytes @ 0x26
  3861  0046                     	ds	4
  3862  004A                     ??___fttol:	
  3863                           
  3864                           ; 0 bytes @ 0x2A
  3865  004A                     	ds	4
  3866  004E                     ___fttol@sign1:	
  3867                           
  3868                           ; 1 bytes @ 0x2E
  3869  004E                     	ds	1
  3870  004F                     ___fttol@lval:	
  3871                           
  3872                           ; 4 bytes @ 0x2F
  3873  004F                     	ds	4
  3874  0053                     ___fttol@exp1:	
  3875                           
  3876                           ; 1 bytes @ 0x33
  3877  0053                     	ds	1
  3878  0054                     ??_getDimmerLights_PercentToValue:	
  3879  0054                     ??_getDimmerLights_ValueToPercent:	
  3880                           ; 0 bytes @ 0x34
  3881                           
  3882                           
  3883                           ; 0 bytes @ 0x34
  3884  0054                     	ds	2
  3885  0056                     getDimmerLights_PercentToValue@value:	
  3886  0056                     getDimmerLights_ValueToPercent@value:	
  3887                           ; 1 bytes @ 0x36
  3888                           
  3889                           
  3890                           ; 1 bytes @ 0x36
  3891  0056                     	ds	1
  3892  0057                     getDimmerLights_PercentToValue@i:	
  3893  0057                     getDimmerLights_ValueToPercent@i:	
  3894                           ; 3 bytes @ 0x37
  3895                           
  3896                           
  3897                           ; 3 bytes @ 0x37
  3898  0057                     	ds	3
  3899  005A                     ?_setProductData:	
  3900  005A                     ?_setDimmerIntr_MaxmumValue:	
  3901                           ; 0 bytes @ 0x3A
  3902                           
  3903  005A                     ??_Flash_Memory_Initialization:	
  3904                           ; 0 bytes @ 0x3A
  3905                           
  3906  005A                     setDimmerIntr_MaxmumValue@value:	
  3907                           ; 0 bytes @ 0x3A
  3908                           
  3909  005A                     setProductData@value:	
  3910                           ; 1 bytes @ 0x3A
  3911                           
  3912                           
  3913                           ; 1 bytes @ 0x3A
  3914  005A                     	ds	1
  3915  005B                     ??_setProductData:	
  3916  005B                     ??_setDimmerIntr_MaxmumValue:	
  3917                           ; 0 bytes @ 0x3B
  3918                           
  3919  005B                     Flash_Memory_Initialization@i:	
  3920                           ; 0 bytes @ 0x3B
  3921                           
  3922                           
  3923                           ; 1 bytes @ 0x3B
  3924  005B                     	ds	1
  3925  005C                     setDimmerIntr_MaxmumValue@lights:	
  3926                           
  3927                           ; 1 bytes @ 0x3C
  3928  005C                     	ds	1
  3929  005D                     setProductData@address:	
  3930                           
  3931                           ; 1 bytes @ 0x3D
  3932  005D                     	ds	1
  3933  005E                     ??_DlyOff_Main:	
  3934  005E                     ?_setRF_DimmerLights:	
  3935                           ; 0 bytes @ 0x3E
  3936                           
  3937  005E                     ??_setTemp_Main:	
  3938                           ; 0 bytes @ 0x3E
  3939                           
  3940  005E                     ??_setLog_Code:	
  3941                           ; 0 bytes @ 0x3E
  3942                           
  3943  005E                     ??_setRFSW_AdjControl:	
  3944                           ; 0 bytes @ 0x3E
  3945                           
  3946  005E                     ?_setDelayOff_GO:	
  3947                           ; 0 bytes @ 0x3E
  3948                           
  3949  005E                     setDelayOff_GO@command:	
  3950                           ; 0 bytes @ 0x3E
  3951                           
  3952  005E                     setRF_DimmerLights@on:	
  3953                           ; 1 bytes @ 0x3E
  3954                           
  3955                           
  3956                           ; 1 bytes @ 0x3E
  3957  005E                     	ds	1
  3958  005F                     ??_setRF_DimmerLights:	
  3959  005F                     setDelayOff_GO@value:	
  3960                           ; 0 bytes @ 0x3F
  3961                           
  3962                           
  3963                           ; 1 bytes @ 0x3F
  3964  005F                     	ds	1
  3965  0060                     ??_setDelayOff_GO:	
  3966  0060                     DlyOff_Main@sw:	
  3967                           ; 0 bytes @ 0x40
  3968                           
  3969  0060                     setTemp_Main@error:	
  3970                           ; 1 bytes @ 0x40
  3971                           
  3972  0060                     setRFSW_AdjControl@status:	
  3973                           ; 1 bytes @ 0x40
  3974                           
  3975                           
  3976                           ; 1 bytes @ 0x40
  3977  0060                     	ds	1
  3978  0061                     setRFSW_AdjControl@sw:	
  3979  0061                     setRF_DimmerLights@status:	
  3980                           ; 1 bytes @ 0x41
  3981                           
  3982                           
  3983                           ; 1 bytes @ 0x41
  3984  0061                     	ds	1
  3985  0062                     setDelayOff_GO@i:	
  3986  0062                     setRF_DimmerLights@lights:	
  3987                           ; 1 bytes @ 0x42
  3988                           
  3989                           
  3990                           ; 1 bytes @ 0x42
  3991  0062                     	ds	1
  3992  0063                     ?_setDimmerLights_Dimming:	
  3993  0063                     setDelayOff_GO@j:	
  3994                           ; 0 bytes @ 0x43
  3995                           
  3996  0063                     setDimmerLights_Dimming@status:	
  3997                           ; 1 bytes @ 0x43
  3998                           
  3999                           
  4000                           ; 1 bytes @ 0x43
  4001  0063                     	ds	1
  4002  0064                     ??_setDimmerLights_Dimming:	
  4003  0064                     setDelayOff_GO@k:	
  4004                           ; 0 bytes @ 0x44
  4005                           
  4006                           
  4007                           ; 1 bytes @ 0x44
  4008  0064                     	ds	1
  4009  0065                     setDelayOff_GO@sw:	
  4010  0065                     setDimmerLights_Dimming@lights:	
  4011                           ; 1 bytes @ 0x45
  4012                           
  4013                           
  4014                           ; 1 bytes @ 0x45
  4015  0065                     	ds	1
  4016  0066                     ?_setDimmerLights_OnOff:	
  4017  0066                     ??_setRFSW_Control:	
  4018                           ; 0 bytes @ 0x46
  4019                           
  4020  0066                     setDimmerLights_OnOff@command:	
  4021                           ; 0 bytes @ 0x46
  4022                           
  4023                           
  4024                           ; 1 bytes @ 0x46
  4025  0066                     	ds	1
  4026  0067                     ??_setDimmerLights_OnOff:	
  4027  0067                     setRFSW_Control@status:	
  4028                           ; 0 bytes @ 0x47
  4029                           
  4030                           
  4031                           ; 1 bytes @ 0x47
  4032  0067                     	ds	1
  4033  0068                     setRFSW_Control@sw:	
  4034                           
  4035                           ; 1 bytes @ 0x48
  4036  0068                     	ds	1
  4037  0069                     ??_getRxData:	
  4038  0069                     setDimmerLights_OnOff@lights:	
  4039                           ; 0 bytes @ 0x49
  4040                           
  4041                           
  4042                           ; 1 bytes @ 0x49
  4043  0069                     	ds	1
  4044  006A                     setDimmerLights_Main@lights:	
  4045  006A                     getRxData@error:	
  4046                           ; 1 bytes @ 0x4A
  4047                           
  4048                           
  4049                           ; 1 bytes @ 0x4A
  4050  006A                     	ds	1
  4051  006B                     ??_setRF_Main:	
  4052                           
  4053                           ; 0 bytes @ 0x4B
  4054  006B                     	ds	1
  4055  006C                     setRF_Main@error:	
  4056                           
  4057                           ; 1 bytes @ 0x4C
  4058  006C                     	ds	1
  4059                           
  4060                           	psect	maintext
  4061  162B                     __pmaintext:	
  4062 ;;
  4063 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4064 ;;
  4065 ;; *************** function _main *****************
  4066 ;; Defined at:
  4067 ;;		line 7 in file "../src/main_B1.c"
  4068 ;; Parameters:    Size  Location     Type
  4069 ;;  argc            2    0[BANK3 ] int 
  4070 ;;  argv            2    2[BANK3 ] PTR PTR unsigned char 
  4071 ;; Auto vars:     Size  Location     Type
  4072 ;;		None
  4073 ;; Return value:  Size  Location     Type
  4074 ;;                  2    0[BANK3 ] int 
  4075 ;; Registers used:
  4076 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4077 ;; Tracked objects:
  4078 ;;		On entry : 17F/0
  4079 ;;		On exit  : 0/0
  4080 ;;		Unchanged: 0/0
  4081 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4082 ;;      Params:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  4083 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4085 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0
  4086 ;;Total ram usage:        4 bytes
  4087 ;; Hardware stack levels required when called:   11
  4088 ;; This function calls:
  4089 ;;		_Buzzer_Initialization
  4090 ;;		_Buzzer_Main
  4091 ;;		_CC2500_PowerOnInitial
  4092 ;;		_DelayOff_Initialization
  4093 ;;		_DelayOff_Main
  4094 ;;		_DimmerLights_Initialization
  4095 ;;		_DimmerLights_Main
  4096 ;;		_Exception_Main
  4097 ;;		_Flash_Memory_Initialization
  4098 ;;		_Flash_Memory_Main
  4099 ;;		_LED_Initialization
  4100 ;;		_LED_Main
  4101 ;;		_Load_Initialization
  4102 ;;		_Load_Main
  4103 ;;		_Mcu_Initialization
  4104 ;;		_RF_Initialization
  4105 ;;		_RF_Main
  4106 ;;		_Switch_Initialization
  4107 ;;		_Switch_Main
  4108 ;;		_Temp_Initialization
  4109 ;;		_Temp_Main
  4110 ;;		_WDT_Main
  4111 ;;		_getLoad_AD
  4112 ;;		_getTemp_AD
  4113 ;;		_myMain_Initialization
  4114 ;;		_my_MainTimer
  4115 ;; This function is called by:
  4116 ;;		Startup code after reset
  4117 ;; This function uses a non-reentrant model
  4118 ;;
  4119                           
  4120                           
  4121                           ;psect for function _main
  4122  162B                     _main:	
  4123                           
  4124                           ;main_B1.c: 8: myMain_Initialization();
  4125                           
  4126                           ;incstack = 0
  4127                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4128  162B  319C  2431  3196   	fcall	_myMain_Initialization
  4129                           
  4130                           ;main_B1.c: 9: Mcu_Initialization();
  4131  162E  319D  2505  3196   	fcall	_Mcu_Initialization
  4132                           
  4133                           ;main_B1.c: 10: Flash_Memory_Initialization();
  4134  1631  3184  2450  3196   	fcall	_Flash_Memory_Initialization
  4135                           
  4136                           ;main_B1.c: 11: LED_Initialization();
  4137  1634  319B  238B  3196   	fcall	_LED_Initialization
  4138                           
  4139                           ;main_B1.c: 12: Buzzer_Initialization();
  4140  1637  319A  22B3  3196   	fcall	_Buzzer_Initialization
  4141                           
  4142                           ;main_B1.c: 14: ;;
  4143                           ;main_B1.c: 15: Temp_Initialization();
  4144  163A  319A  22BF  3196   	fcall	_Temp_Initialization
  4145                           
  4146                           ;main_B1.c: 16: Load_Initialization();
  4147  163D  319A  22B6  3196   	fcall	_Load_Initialization
  4148                           
  4149                           ;main_B1.c: 17: ;;
  4150                           ;main_B1.c: 18: DelayOff_Initialization();
  4151  1640  319B  2312  3196   	fcall	_DelayOff_Initialization
  4152                           
  4153                           ;main_B1.c: 20: DimmerLights_Initialization();
  4154  1643  319B  2347  3196   	fcall	_DimmerLights_Initialization
  4155                           
  4156                           ;main_B1.c: 21: ;;
  4157                           ;main_B1.c: 22: ;;
  4158                           ;main_B1.c: 23: ;;
  4159                           ;main_B1.c: 24: Switch_Initialization();
  4160  1646  319B  23AF  3196   	fcall	_Switch_Initialization
  4161                           
  4162                           ;main_B1.c: 25: RF_Initialization();
  4163  1649  319A  22B9  3196   	fcall	_RF_Initialization
  4164                           
  4165                           ;main_B1.c: 26: CC2500_PowerOnInitial();
  4166  164C  319D  25BB  3196   	fcall	_CC2500_PowerOnInitial
  4167  164F                     l10356:	
  4168                           ;main_B1.c: 27: ;;
  4169                           ;main_B1.c: 28: ;;
  4170                           ;main_B1.c: 30: while (1) {
  4171                           
  4172                           
  4173                           ;main_B1.c: 32: if (myMain.PowerON == 1) {
  4174  164F  0022               	movlb	2	; select bank2
  4175  1650  1C20               	btfss	_myMain^(0+256),0
  4176  1651  2E5A               	goto	l10360
  4177                           
  4178                           ;main_B1.c: 38: getLoad_AD(0x05);
  4179  1652  3005               	movlw	5
  4180  1653  318B  2320  3196   	fcall	_getLoad_AD
  4181                           
  4182                           ;main_B1.c: 42: getTemp_AD(0x09);
  4183  1656  3009               	movlw	9
  4184  1657  3193  2306  3196   	fcall	_getTemp_AD
  4185  165A                     l10360:	
  4186                           
  4187                           ;main_B1.c: 57: }
  4188                           ;main_B1.c: 93: if (Timer1.Timeout == 1) {
  4189  165A  0021               	movlb	1	; select bank1
  4190  165B  1C3D               	btfss	_Timer1^(0+128),0
  4191  165C  2E4F               	goto	l10356
  4192                           
  4193                           ;main_B1.c: 94: Timer1.Timeout = 0;
  4194  165D  103D               	bcf	_Timer1^(0+128),0
  4195                           
  4196                           ;main_B1.c: 96: my_MainTimer();
  4197  165E  3193  233F  3196   	fcall	_my_MainTimer
  4198                           
  4199                           ;main_B1.c: 97: WDT_Main();
  4200  1661  319C  24B0  3196   	fcall	_WDT_Main
  4201                           
  4202                           ;main_B1.c: 98: ;;
  4203                           ;main_B1.c: 99: ;;
  4204                           ;main_B1.c: 100: if (myMain.PowerON == 1) {
  4205  1664  0022               	movlb	2	; select bank2
  4206  1665  1C20               	btfss	_myMain^(0+256),0
  4207  1666  2E4F               	goto	l10356
  4208                           
  4209                           ;main_B1.c: 101: Flash_Memory_Main();
  4210  1667  3191  21FA  3196   	fcall	_Flash_Memory_Main
  4211                           
  4212                           ;main_B1.c: 103: LED_Main();
  4213  166A  319B  2397  3196   	fcall	_LED_Main
  4214                           
  4215                           ;main_B1.c: 104: Buzzer_Main();
  4216  166D  3193  23FC  3196   	fcall	_Buzzer_Main
  4217                           
  4218                           ;main_B1.c: 106: ;;
  4219                           ;main_B1.c: 107: Temp_Main();
  4220  1670  319A  22C2  3196   	fcall	_Temp_Main
  4221                           
  4222                           ;main_B1.c: 108: Load_Main();
  4223  1673  3180  2053  3196   	fcall	_Load_Main
  4224                           
  4225                           ;main_B1.c: 109: ;;
  4226                           ;main_B1.c: 111: ;;
  4227                           ;main_B1.c: 112: DimmerLights_Main();
  4228  1676  319F  273B  3196   	fcall	_DimmerLights_Main
  4229                           
  4230                           ;main_B1.c: 113: Switch_Main();
  4231  1679  319B  2368  3196   	fcall	_Switch_Main
  4232                           
  4233                           ;main_B1.c: 114: ;;
  4234                           ;main_B1.c: 115: ;;
  4235                           ;main_B1.c: 117: RF_Main();
  4236  167C  319A  22BC  3196   	fcall	_RF_Main
  4237                           
  4238                           ;main_B1.c: 118: DelayOff_Main();
  4239  167F  319B  231A  3196   	fcall	_DelayOff_Main
  4240                           
  4241                           ;main_B1.c: 119: ;;
  4242                           ;main_B1.c: 120: ;;
  4243                           ;main_B1.c: 121: Exception_Main();
  4244  1682  3185  252C  3196   	fcall	_Exception_Main
  4245  1685  2E4F               	goto	l10356
  4246  1686                     __end_of_main:	
  4247                           ;main_B1.c: 128: }
  4248                           ;main_B1.c: 129: }
  4249                           ;main_B1.c: 163: }
  4250                           ;main_B1.c: 164: return (0);
  4251                           ;	Return value of _main is never used
  4252                           
  4253                           
  4254                           	psect	text1
  4255  133F                     __ptext1:	
  4256 ;; *************** function _my_MainTimer *****************
  4257 ;; Defined at:
  4258 ;;		line 185 in file "../src/main_B1.c"
  4259 ;; Parameters:    Size  Location     Type
  4260 ;;		None
  4261 ;; Auto vars:     Size  Location     Type
  4262 ;;		None
  4263 ;; Return value:  Size  Location     Type
  4264 ;;		None               void
  4265 ;; Registers used:
  4266 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4267 ;; Tracked objects:
  4268 ;;		On entry : 0/0
  4269 ;;		On exit  : 0/0
  4270 ;;		Unchanged: 0/0
  4271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4274 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4275 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4276 ;;Total ram usage:        1 bytes
  4277 ;; Hardware stack levels used:    1
  4278 ;; Hardware stack levels required when called:    5
  4279 ;; This function calls:
  4280 ;;		_setBuz
  4281 ;; This function is called by:
  4282 ;;		_main
  4283 ;; This function uses a non-reentrant model
  4284 ;;
  4285                           
  4286                           
  4287                           ;psect for function _my_MainTimer
  4288  133F                     _my_MainTimer:	
  4289                           
  4290                           ;main_B1.c: 188: if (myMain.PowerON == 0) {
  4291                           
  4292                           ;incstack = 0
  4293                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4294  133F  0022               	movlb	2	; select bank2
  4295  1340  1820               	btfsc	_myMain^(0+256),0
  4296  1341  2B57               	goto	l10236
  4297                           
  4298                           ;main_B1.c: 189: myMain.PowerCount++;
  4299  1342  3001               	movlw	1
  4300  1343  00F9               	movwf	??_my_MainTimer
  4301  1344  0879               	movf	??_my_MainTimer,w
  4302  1345  07A1               	addwf	(_myMain^(0+256)+1),f
  4303                           
  4304                           ;main_B1.c: 190: if (myMain.PowerCount == (1500 / 20)) {
  4305  1346  0821               	movf	(_myMain^(0+256)+1),w
  4306  1347  3A4B               	xorlw	75
  4307  1348  1D03               	skipz
  4308  1349  0008               	return
  4309                           
  4310                           ;main_B1.c: 191: myMain.PowerCount = 0;
  4311  134A  01A1               	clrf	(_myMain^(0+256)+1)
  4312                           
  4313                           ;main_B1.c: 192: myMain.PowerON = 1;
  4314  134B  1420               	bsf	_myMain^(0+256),0
  4315                           
  4316                           ;main_B1.c: 197: setBuz(3, 50);
  4317  134C  3032               	movlw	50
  4318  134D  0020               	movlb	0	; select bank0
  4319  134E  00A4               	movwf	setBuz@time
  4320  134F  3000               	movlw	0
  4321  1350  00A5               	movwf	setBuz@time+1
  4322  1351  3003               	movlw	3
  4323  1352  3195  2584         	fcall	_setBuz
  4324                           
  4325                           ;main_B1.c: 198: myMain.SelfTest = 1;
  4326  1354  0022               	movlb	2	; select bank2
  4327  1355  1620               	bsf	_myMain^(0+256),4
  4328                           
  4329                           ;main_B1.c: 207: }
  4330                           ;main_B1.c: 208: } else {
  4331  1356  0008               	return
  4332  1357                     l10236:	
  4333                           
  4334                           ;main_B1.c: 209: myMain.PowerCount++;
  4335  1357  3001               	movlw	1
  4336  1358  00F9               	movwf	??_my_MainTimer
  4337  1359  0879               	movf	??_my_MainTimer,w
  4338  135A  07A1               	addwf	(_myMain^(0+256)+1),f
  4339                           
  4340                           ;main_B1.c: 210: if (myMain.PowerCount == (1000 / 20)) {
  4341  135B  0821               	movf	(_myMain^(0+256)+1),w
  4342  135C  3A32               	xorlw	50
  4343  135D  1903               	btfsc	3,2
  4344                           
  4345                           ;main_B1.c: 211: myMain.PowerCount = 0;
  4346  135E  01A1               	clrf	(_myMain^(0+256)+1)
  4347                           
  4348                           ;main_B1.c: 226: }
  4349                           ;main_B1.c: 228: myMain.Count1++;
  4350  135F  3001               	movlw	1
  4351  1360  07A4               	addwf	(_myMain^(0+256)+4),f
  4352  1361  3000               	movlw	0
  4353  1362  3DA5               	addwfc	((_myMain+1)^(0+256)+4),f
  4354                           
  4355                           ;main_B1.c: 229: if (myMain.Count1 == (1000 / 20)) {
  4356  1363  3004               	movlw	4
  4357  1364  3E20               	addlw	_myMain& (0+255)
  4358  1365  0086               	movwf	6
  4359  1366  3001               	movlw	1	; select bank2/3
  4360  1367  0087               	movwf	7
  4361  1368  3F40               	moviw [0]fsr1
  4362  1369  3A32               	xorlw	50
  4363  136A  1D03               	skipz
  4364  136B  2B6E               	goto	u12105
  4365  136C  3F41               	moviw [1]fsr1
  4366  136D  3A00               	xorlw	0
  4367  136E                     u12105:	
  4368  136E  1D03               	skipz
  4369  136F  0008               	return
  4370                           
  4371                           ;main_B1.c: 230: myMain.Count1 = 0;
  4372  1370  01A4               	clrf	(_myMain^(0+256)+4)
  4373  1371  01A5               	clrf	((_myMain+1)^(0+256)+4)
  4374                           
  4375                           ;main_B1.c: 242: if (myMain.Flag) {
  4376  1372  1CA0               	btfss	_myMain^(0+256),1
  4377  1373  2B76               	goto	l2821
  4378                           
  4379                           ;main_B1.c: 243: myMain.Flag = 0;
  4380  1374  10A0               	bcf	_myMain^(0+256),1
  4381                           
  4382                           ;main_B1.c: 252: } else {
  4383  1375  0008               	return
  4384  1376                     l2821:	
  4385                           
  4386                           ;main_B1.c: 253: myMain.Flag = 1;
  4387  1376  14A0               	bsf	_myMain^(0+256),1
  4388  1377  0008               	return
  4389  1378                     __end_of_my_MainTimer:	
  4390                           
  4391                           	psect	text2
  4392  1C31                     __ptext2:	
  4393 ;; *************** function _myMain_Initialization *****************
  4394 ;; Defined at:
  4395 ;;		line 170 in file "../src/main_B1.c"
  4396 ;; Parameters:    Size  Location     Type
  4397 ;;		None
  4398 ;; Auto vars:     Size  Location     Type
  4399 ;;		None
  4400 ;; Return value:  Size  Location     Type
  4401 ;;		None               void
  4402 ;; Registers used:
  4403 ;;		wreg, fsr1l, fsr1h
  4404 ;; Tracked objects:
  4405 ;;		On entry : 0/0
  4406 ;;		On exit  : 0/0
  4407 ;;		Unchanged: 0/0
  4408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4411 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4412 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4413 ;;Total ram usage:        1 bytes
  4414 ;; Hardware stack levels used:    1
  4415 ;; Hardware stack levels required when called:    3
  4416 ;; This function calls:
  4417 ;;		Nothing
  4418 ;; This function is called by:
  4419 ;;		_main
  4420 ;; This function uses a non-reentrant model
  4421 ;;
  4422                           
  4423                           
  4424                           ;psect for function _myMain_Initialization
  4425  1C31                     _myMain_Initialization:	
  4426                           
  4427                           ;main_B1.c: 173: product = &_product;
  4428                           
  4429                           ;incstack = 0
  4430                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4431  1C31  3045               	movlw	__product& (0+255)
  4432  1C32  00F2               	movwf	??_myMain_Initialization
  4433  1C33  0872               	movf	??_myMain_Initialization,w
  4434  1C34  0020               	movlb	0	; select bank0
  4435  1C35  00ED               	movwf	_product
  4436                           
  4437                           ;main_B1.c: 174: product->Data[20] = 210;
  4438  1C36  30D2               	movlw	210
  4439  1C37  00F2               	movwf	??_myMain_Initialization
  4440  1C38  086D               	movf	_product,w
  4441  1C39  3E14               	addlw	20
  4442  1C3A  0086               	movwf	6
  4443  1C3B  3002               	movlw	2	; select bank4/5
  4444  1C3C  0087               	movwf	7
  4445  1C3D  0872               	movf	??_myMain_Initialization,w
  4446  1C3E  0081               	movwf	1
  4447  1C3F  0008               	return
  4448  1C40                     __end_of_myMain_Initialization:	
  4449                           
  4450                           	psect	text3
  4451  1306                     __ptext3:	
  4452 ;; *************** function _getTemp_AD *****************
  4453 ;; Defined at:
  4454 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4455 ;; Parameters:    Size  Location     Type
  4456 ;;  channel         1    wreg     unsigned char 
  4457 ;; Auto vars:     Size  Location     Type
  4458 ;;  channel         1    7[COMMON] unsigned char 
  4459 ;; Return value:  Size  Location     Type
  4460 ;;		None               void
  4461 ;; Registers used:
  4462 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4463 ;; Tracked objects:
  4464 ;;		On entry : 0/0
  4465 ;;		On exit  : 0/0
  4466 ;;		Unchanged: 0/0
  4467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4469 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4470 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4471 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4472 ;;Total ram usage:        2 bytes
  4473 ;; Hardware stack levels used:    1
  4474 ;; Hardware stack levels required when called:    5
  4475 ;; This function calls:
  4476 ;;		_getAD
  4477 ;; This function is called by:
  4478 ;;		_main
  4479 ;; This function uses a non-reentrant model
  4480 ;;
  4481                           
  4482                           
  4483                           ;psect for function _getTemp_AD
  4484  1306                     _getTemp_AD:	
  4485                           
  4486                           ;incstack = 0
  4487                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4488                           ;getTemp_AD@channel stored from wreg
  4489  1306  00F7               	movwf	getTemp_AD@channel
  4490                           
  4491                           ;OverTemperature_B1.c: 18: if (Temp.ADtoGO == 1) {
  4492  1307  0021               	movlb	1	; select bank1
  4493  1308  1D50               	btfss	_Temp^(0+128),2
  4494  1309  0008               	return
  4495                           
  4496                           ;OverTemperature_B1.c: 19: Temp.ADRES = getAD(channel, 0xf0);
  4497  130A  30F0               	movlw	240
  4498  130B  00F6               	movwf	??_getTemp_AD
  4499  130C  0876               	movf	??_getTemp_AD,w
  4500  130D  00F2               	movwf	getAD@adcon1
  4501  130E  0877               	movf	getTemp_AD@channel,w
  4502  130F  319E  26AD  3193   	fcall	_getAD
  4503  1312  0873               	movf	?_getAD+1,w
  4504  1313  0021               	movlb	1	; select bank1
  4505  1314  01DD               	clrf	((_Temp+1)^(0+128)+12)
  4506  1315  07DD               	addwf	((_Temp+1)^(0+128)+12),f
  4507  1316  0872               	movf	?_getAD,w
  4508  1317  01DC               	clrf	(_Temp^(0+128)+12)
  4509  1318  07DC               	addwf	(_Temp^(0+128)+12),f
  4510                           
  4511                           ;OverTemperature_B1.c: 20: if (Temp.ADRES > 0) {
  4512  1319  300C               	movlw	12
  4513  131A  3ED0               	addlw	_Temp& (0+255)
  4514  131B  0086               	movwf	6
  4515  131C  0187               	clrf	7
  4516  131D  0016               	moviw fsr1++
  4517  131E  0401               	iorwf	1,w
  4518  131F  1903               	skipnz
  4519  1320  0008               	return
  4520                           
  4521                           ;OverTemperature_B1.c: 21: if (Temp.ADH[0] < Temp.ADRES) {
  4522  1321  085D               	movf	((_Temp+1)^(0+128)+12),w
  4523  1322  0259               	subwf	((_Temp+1)^(0+128)+8),w
  4524  1323  1D03               	skipz
  4525  1324  2B27               	goto	u12055
  4526  1325  085C               	movf	(_Temp^(0+128)+12),w
  4527  1326  0258               	subwf	(_Temp^(0+128)+8),w
  4528  1327                     u12055:	
  4529  1327  1803               	skipnc
  4530  1328  2B30               	goto	l10208
  4531                           
  4532                           ;OverTemperature_B1.c: 22: Temp.ADH[0] = Temp.ADRES;
  4533  1329  085D               	movf	((_Temp+1)^(0+128)+12),w
  4534  132A  01D9               	clrf	((_Temp+1)^(0+128)+8)
  4535  132B  07D9               	addwf	((_Temp+1)^(0+128)+8),f
  4536  132C  085C               	movf	(_Temp^(0+128)+12),w
  4537  132D  01D8               	clrf	(_Temp^(0+128)+8)
  4538  132E  07D8               	addwf	(_Temp^(0+128)+8),f
  4539                           
  4540                           ;OverTemperature_B1.c: 23: } else if (Temp.ADH[1] < Temp.ADRES) {
  4541  132F  0008               	return
  4542  1330                     l10208:	
  4543  1330  085D               	movf	((_Temp+1)^(0+128)+12),w
  4544  1331  025B               	subwf	((_Temp+1)^(0+128)+10),w
  4545  1332  1D03               	skipz
  4546  1333  2B36               	goto	u12065
  4547  1334  085C               	movf	(_Temp^(0+128)+12),w
  4548  1335  025A               	subwf	(_Temp^(0+128)+10),w
  4549  1336                     u12065:	
  4550  1336  1803               	skipnc
  4551  1337  0008               	return
  4552                           
  4553                           ;OverTemperature_B1.c: 24: Temp.ADH[1] = Temp.ADRES;
  4554  1338  085D               	movf	((_Temp+1)^(0+128)+12),w
  4555  1339  01DB               	clrf	((_Temp+1)^(0+128)+10)
  4556  133A  07DB               	addwf	((_Temp+1)^(0+128)+10),f
  4557  133B  085C               	movf	(_Temp^(0+128)+12),w
  4558  133C  01DA               	clrf	(_Temp^(0+128)+10)
  4559  133D  07DA               	addwf	(_Temp^(0+128)+10),f
  4560  133E  0008               	return
  4561  133F                     __end_of_getTemp_AD:	
  4562                           
  4563                           	psect	text4
  4564  0B20                     __ptext4:	
  4565 ;; *************** function _getLoad_AD *****************
  4566 ;; Defined at:
  4567 ;;		line 15 in file "../src/OverLoad_B1.c"
  4568 ;; Parameters:    Size  Location     Type
  4569 ;;  channel         1    wreg     unsigned char 
  4570 ;; Auto vars:     Size  Location     Type
  4571 ;;  channel         1    0[BANK0 ] unsigned char 
  4572 ;;  i               1    3[BANK0 ] unsigned char 
  4573 ;;  j               1    2[BANK0 ] unsigned char 
  4574 ;;  k               1    1[BANK0 ] unsigned char 
  4575 ;; Return value:  Size  Location     Type
  4576 ;;		None               void
  4577 ;; Registers used:
  4578 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4579 ;; Tracked objects:
  4580 ;;		On entry : 0/0
  4581 ;;		On exit  : 0/0
  4582 ;;		Unchanged: 0/0
  4583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4585 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4586 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4587 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4588 ;;Total ram usage:        6 bytes
  4589 ;; Hardware stack levels used:    1
  4590 ;; Hardware stack levels required when called:    5
  4591 ;; This function calls:
  4592 ;;		_getAD
  4593 ;; This function is called by:
  4594 ;;		_main
  4595 ;; This function uses a non-reentrant model
  4596 ;;
  4597                           
  4598                           
  4599                           ;psect for function _getLoad_AD
  4600  0B20                     _getLoad_AD:	
  4601                           
  4602                           ;incstack = 0
  4603                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4604                           ;getLoad_AD@channel stored from wreg
  4605  0B20  0020               	movlb	0	; select bank0
  4606  0B21  00A0               	movwf	getLoad_AD@channel
  4607                           
  4608                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4609  0B22  01A3               	clrf	getLoad_AD@i
  4610  0B23  01A2               	clrf	getLoad_AD@j
  4611  0B24  01A1               	clrf	getLoad_AD@k
  4612                           
  4613                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4614  0B25  0022               	movlb	2	; select bank2
  4615  0B26  1E30               	btfss	_Load^(0+256),4
  4616  0B27  0008               	return
  4617                           
  4618                           ;OverLoad_B1.c: 19: Load.ADRES = getAD(channel, 0xf3);
  4619  0B28  30F3               	movlw	243
  4620  0B29  00F6               	movwf	??_getLoad_AD
  4621  0B2A  0876               	movf	??_getLoad_AD,w
  4622  0B2B  00F2               	movwf	getAD@adcon1
  4623  0B2C  0020               	movlb	0	; select bank0
  4624  0B2D  0820               	movf	getLoad_AD@channel,w
  4625  0B2E  319E  26AD  318B   	fcall	_getAD
  4626  0B31  0873               	movf	?_getAD+1,w
  4627  0B32  0022               	movlb	2	; select bank2
  4628  0B33  01D2               	clrf	((_Load+1)^(0+256)+33)
  4629  0B34  07D2               	addwf	((_Load+1)^(0+256)+33),f
  4630  0B35  0872               	movf	?_getAD,w
  4631  0B36  01D1               	clrf	(_Load^(0+256)+33)
  4632  0B37  07D1               	addwf	(_Load^(0+256)+33),f
  4633                           
  4634                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4635  0B38  0020               	movlb	0	; select bank0
  4636  0B39  01A3               	clrf	getLoad_AD@i
  4637  0B3A  3004               	movlw	4
  4638  0B3B  0223               	subwf	getLoad_AD@i,w
  4639  0B3C  1803               	btfsc	3,0
  4640  0B3D  2B6A               	goto	l10030
  4641  0B3E                     l10018:	
  4642                           
  4643                           ;OverLoad_B1.c: 22: if (Load.AH[i] < Load.ADRES && j == 0) {
  4644  0B3E  3523               	lslf	getLoad_AD@i,w
  4645  0B3F  3E3B               	addlw	(_Load+11)& (0+255)
  4646  0B40  0086               	movwf	6
  4647  0B41  3001               	movlw	1	; select bank2/3
  4648  0B42  0087               	movwf	7
  4649  0B43  3F40               	moviw [0]fsr1
  4650  0B44  00F6               	movwf	??_getLoad_AD
  4651  0B45  3F41               	moviw [1]fsr1
  4652  0B46  00F7               	movwf	??_getLoad_AD+1
  4653  0B47  0022               	movlb	2	; select bank2
  4654  0B48  0852               	movf	((_Load+1)^(0+256)+33),w
  4655  0B49  0277               	subwf	??_getLoad_AD+1,w
  4656  0B4A  1D03               	skipz
  4657  0B4B  2B4E               	goto	u11655
  4658  0B4C  0851               	movf	(_Load^(0+256)+33),w
  4659  0B4D  0276               	subwf	??_getLoad_AD,w
  4660  0B4E                     u11655:	
  4661  0B4E  1803               	skipnc
  4662  0B4F  2B61               	goto	l10026
  4663  0B50  0020               	movlb	0	; select bank0
  4664  0B51  08A2               	movf	getLoad_AD@j,f
  4665  0B52  1D03               	skipz
  4666  0B53  2B61               	goto	l10026
  4667                           
  4668                           ;OverLoad_B1.c: 23: Load.AH[i] = Load.ADRES;
  4669  0B54  3523               	lslf	getLoad_AD@i,w
  4670  0B55  3E3B               	addlw	(_Load+11)& (0+255)
  4671  0B56  0086               	movwf	6
  4672  0B57  3001               	movlw	1	; select bank2/3
  4673  0B58  0087               	movwf	7
  4674  0B59  0022               	movlb	2	; select bank2
  4675  0B5A  0851               	movf	(_Load^(0+256)+33),w
  4676  0B5B  3FC0               	movwi [0]fsr1
  4677  0B5C  0852               	movf	((_Load+1)^(0+256)+33),w
  4678  0B5D  3FC1               	movwi [1]fsr1
  4679                           
  4680                           ;OverLoad_B1.c: 24: j = 1;
  4681  0B5E  0020               	movlb	0	; select bank0
  4682  0B5F  01A2               	clrf	getLoad_AD@j
  4683  0B60  0AA2               	incf	getLoad_AD@j,f
  4684  0B61                     l10026:	
  4685  0B61  3001               	movlw	1
  4686  0B62  00F6               	movwf	??_getLoad_AD
  4687  0B63  0876               	movf	??_getLoad_AD,w
  4688  0B64  0020               	movlb	0	; select bank0
  4689  0B65  07A3               	addwf	getLoad_AD@i,f
  4690  0B66  3004               	movlw	4
  4691  0B67  0223               	subwf	getLoad_AD@i,w
  4692  0B68  1C03               	skipc
  4693  0B69  2B3E               	goto	l10018
  4694  0B6A                     l10030:	
  4695                           
  4696                           ;OverLoad_B1.c: 25: }
  4697                           ;OverLoad_B1.c: 26: }
  4698                           ;OverLoad_B1.c: 27: if (j == 0) {
  4699  0B6A  08A2               	movf	getLoad_AD@j,f
  4700  0B6B  1D03               	skipz
  4701  0B6C  0008               	return
  4702                           
  4703                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4704  0B6D  01A3               	clrf	getLoad_AD@i
  4705  0B6E                     L1:	
  4706  0B6E  3004               	movlw	4
  4707  0B6F  0223               	subwf	getLoad_AD@i,w
  4708  0B70  1803               	btfsc	3,0
  4709  0B71  0008               	return
  4710                           
  4711                           ;OverLoad_B1.c: 29: if (Load.AL[i] > Load.ADRES && k == 0) {
  4712  0B72  3523               	lslf	getLoad_AD@i,w
  4713  0B73  3E45               	addlw	(_Load+21)& (0+255)
  4714  0B74  0086               	movwf	6
  4715  0B75  3001               	movlw	1	; select bank2/3
  4716  0B76  0087               	movwf	7
  4717  0B77  3F40               	moviw [0]fsr1
  4718  0B78  00F6               	movwf	??_getLoad_AD
  4719  0B79  3F41               	moviw [1]fsr1
  4720  0B7A  00F7               	movwf	??_getLoad_AD+1
  4721  0B7B  0877               	movf	??_getLoad_AD+1,w
  4722  0B7C  0022               	movlb	2	; select bank2
  4723  0B7D  0252               	subwf	((_Load+1)^(0+256)+33),w
  4724  0B7E  1D03               	skipz
  4725  0B7F  2B82               	goto	u11705
  4726  0B80  0876               	movf	??_getLoad_AD,w
  4727  0B81  0251               	subwf	(_Load^(0+256)+33),w
  4728  0B82                     u11705:	
  4729  0B82  1803               	skipnc
  4730  0B83  2B95               	goto	l10046
  4731  0B84  0020               	movlb	0	; select bank0
  4732  0B85  08A1               	movf	getLoad_AD@k,f
  4733  0B86  1D03               	skipz
  4734  0B87  2B95               	goto	l10046
  4735                           
  4736                           ;OverLoad_B1.c: 30: Load.AL[i] = Load.ADRES;
  4737  0B88  3523               	lslf	getLoad_AD@i,w
  4738  0B89  3E45               	addlw	(_Load+21)& (0+255)
  4739  0B8A  0086               	movwf	6
  4740  0B8B  3001               	movlw	1	; select bank2/3
  4741  0B8C  0087               	movwf	7
  4742  0B8D  0022               	movlb	2	; select bank2
  4743  0B8E  0851               	movf	(_Load^(0+256)+33),w
  4744  0B8F  3FC0               	movwi [0]fsr1
  4745  0B90  0852               	movf	((_Load+1)^(0+256)+33),w
  4746  0B91  3FC1               	movwi [1]fsr1
  4747                           
  4748                           ;OverLoad_B1.c: 31: k = 1;
  4749  0B92  0020               	movlb	0	; select bank0
  4750  0B93  01A1               	clrf	getLoad_AD@k
  4751  0B94  0AA1               	incf	getLoad_AD@k,f
  4752  0B95                     l10046:	
  4753  0B95  3001               	movlw	1
  4754  0B96  00F6               	movwf	??_getLoad_AD
  4755  0B97  0876               	movf	??_getLoad_AD,w
  4756  0B98  0020               	movlb	0	; select bank0
  4757  0B99  07A3               	addwf	getLoad_AD@i,f
  4758  0B9A  2B6E               	goto	L1
  4759  0B9B                     __end_of_getLoad_AD:	
  4760                           
  4761                           	psect	text5
  4762  1EAD                     __ptext5:	
  4763 ;; *************** function _getAD *****************
  4764 ;; Defined at:
  4765 ;;		line 442 in file "../src/MCU_B1.c"
  4766 ;; Parameters:    Size  Location     Type
  4767 ;;  adcon0          1    wreg     unsigned char 
  4768 ;;  adcon1          1    2[COMMON] unsigned char 
  4769 ;; Auto vars:     Size  Location     Type
  4770 ;;  adcon0          1    5[COMMON] unsigned char 
  4771 ;; Return value:  Size  Location     Type
  4772 ;;                  2    2[COMMON] int 
  4773 ;; Registers used:
  4774 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4775 ;; Tracked objects:
  4776 ;;		On entry : 0/0
  4777 ;;		On exit  : 0/0
  4778 ;;		Unchanged: 0/0
  4779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4780 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4781 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4783 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4784 ;;Total ram usage:        4 bytes
  4785 ;; Hardware stack levels used:    1
  4786 ;; Hardware stack levels required when called:    4
  4787 ;; This function calls:
  4788 ;;		_Timeout_Counter
  4789 ;;		_set_TimeoutCleared
  4790 ;; This function is called by:
  4791 ;;		_getLoad_AD
  4792 ;;		_getTemp_AD
  4793 ;; This function uses a non-reentrant model
  4794 ;;
  4795                           
  4796                           
  4797                           ;psect for function _getAD
  4798  1EAD                     _getAD:	
  4799                           
  4800                           ;incstack = 0
  4801                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4802                           ;getAD@adcon0 stored from wreg
  4803  1EAD  00F5               	movwf	getAD@adcon0
  4804                           
  4805                           ;MCU_B1.c: 443: ADCON0 = adcon0;
  4806  1EAE  0875               	movf	getAD@adcon0,w
  4807  1EAF  0021               	movlb	1	; select bank1
  4808  1EB0  009D               	movwf	29	;volatile
  4809                           
  4810                           ;MCU_B1.c: 444: ADCON1 = adcon1;
  4811  1EB1  0872               	movf	getAD@adcon1,w
  4812  1EB2  009E               	movwf	30	;volatile
  4813                           
  4814                           ;MCU_B1.c: 445: GO_nDONE = 1;
  4815  1EB3  149D               	bsf	29,1	;volatile
  4816                           
  4817                           ;MCU_B1.c: 446: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4818  1EB4  2EB8               	goto	l9688
  4819  1EB5                     l9686:	
  4820                           
  4821                           ;MCU_B1.c: 447: Timeout_Counter();
  4822  1EB5  319D  25E5  319E   	fcall	_Timeout_Counter
  4823  1EB8                     l9688:	
  4824  1EB8  0021               	movlb	1	; select bank1
  4825  1EB9  1C9D               	btfss	29,1	;volatile
  4826  1EBA  2EBE               	goto	l9692
  4827  1EBB  0022               	movlb	2	; select bank2
  4828  1EBC  1D2B               	btfss	(_myMain^(0+256)+11),2
  4829  1EBD  2EB5               	goto	l9686
  4830  1EBE                     l9692:	
  4831                           
  4832                           ;MCU_B1.c: 448: };
  4833                           ;MCU_B1.c: 449: set_TimeoutCleared();
  4834  1EBE  319A  22DE         	fcall	_set_TimeoutCleared
  4835                           
  4836                           ;MCU_B1.c: 450: return ((ADRESH*256)+ADRESL);
  4837  1EC0  0021               	movlb	1	; select bank1
  4838  1EC1  081C               	movf	28,w	;volatile
  4839  1EC2  01F3               	clrf	?_getAD+1
  4840  1EC3  07F3               	addwf	?_getAD+1,f
  4841  1EC4  081B               	movf	27,w	;volatile
  4842  1EC5  01F2               	clrf	?_getAD
  4843  1EC6  07F2               	addwf	?_getAD,f
  4844  1EC7  0008               	return
  4845  1EC8                     __end_of_getAD:	
  4846                           
  4847                           	psect	text6
  4848  1CB0                     __ptext6:	
  4849 ;; *************** function _WDT_Main *****************
  4850 ;; Defined at:
  4851 ;;		line 1086 in file "../src/MCU_B1.c"
  4852 ;; Parameters:    Size  Location     Type
  4853 ;;		None
  4854 ;; Auto vars:     Size  Location     Type
  4855 ;;		None
  4856 ;; Return value:  Size  Location     Type
  4857 ;;		None               void
  4858 ;; Registers used:
  4859 ;;		wreg, status,2, status,0, pclath, cstack
  4860 ;; Tracked objects:
  4861 ;;		On entry : 0/0
  4862 ;;		On exit  : 0/0
  4863 ;;		Unchanged: 0/0
  4864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4867 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4868 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4869 ;;Total ram usage:        1 bytes
  4870 ;; Hardware stack levels used:    1
  4871 ;; Hardware stack levels required when called:    4
  4872 ;; This function calls:
  4873 ;;		_WDT_Clearing
  4874 ;; This function is called by:
  4875 ;;		_main
  4876 ;; This function uses a non-reentrant model
  4877 ;;
  4878                           
  4879                           
  4880                           ;psect for function _WDT_Main
  4881  1CB0                     _WDT_Main:	
  4882                           
  4883                           ;MCU_B1.c: 1087: if (WDT.Enable == 1) {
  4884                           
  4885                           ;incstack = 0
  4886                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4887  1CB0  0021               	movlb	1	; select bank1
  4888  1CB1  1C40               	btfss	_WDT^(0+128),0
  4889  1CB2  0008               	return
  4890                           
  4891                           ;MCU_B1.c: 1088: if (WDT.Timer-- > 0) {
  4892  1CB3  3001               	movlw	1
  4893  1CB4  02C1               	subwf	(_WDT^(0+128)+1),f
  4894  1CB5  0841               	movf	(_WDT^(0+128)+1),w
  4895  1CB6  3AFF               	xorlw	255
  4896  1CB7  1903               	skipnz
  4897  1CB8  0008               	return
  4898                           
  4899                           ;MCU_B1.c: 1089: WDT.Timer = 100;
  4900  1CB9  3064               	movlw	100
  4901  1CBA  00F2               	movwf	??_WDT_Main
  4902  1CBB  0872               	movf	??_WDT_Main,w
  4903  1CBC  00C1               	movwf	(_WDT^(0+128)+1)
  4904                           
  4905                           ;MCU_B1.c: 1090: WDT_Clearing();
  4906  1CBD  3180  2002         	fcall	_WDT_Clearing
  4907  1CBF  0008               	return
  4908  1CC0                     __end_of_WDT_Main:	
  4909                           
  4910                           	psect	text7
  4911  0002                     __ptext7:	
  4912 ;; *************** function _WDT_Clearing *****************
  4913 ;; Defined at:
  4914 ;;		line 1096 in file "../src/MCU_B1.c"
  4915 ;; Parameters:    Size  Location     Type
  4916 ;;		None
  4917 ;; Auto vars:     Size  Location     Type
  4918 ;;		None
  4919 ;; Return value:  Size  Location     Type
  4920 ;;		None               void
  4921 ;; Registers used:
  4922 ;;		None
  4923 ;; Tracked objects:
  4924 ;;		On entry : 0/0
  4925 ;;		On exit  : 0/0
  4926 ;;		Unchanged: 0/0
  4927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4931 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4932 ;;Total ram usage:        0 bytes
  4933 ;; Hardware stack levels used:    1
  4934 ;; Hardware stack levels required when called:    3
  4935 ;; This function calls:
  4936 ;;		Nothing
  4937 ;; This function is called by:
  4938 ;;		_WDT_Main
  4939 ;; This function uses a non-reentrant model
  4940 ;;
  4941                           
  4942                           
  4943                           ;psect for function _WDT_Clearing
  4944  0002                     _WDT_Clearing:	
  4945                           
  4946                           ;incstack = 0
  4947                           ; Regs used in _WDT_Clearing: []
  4948  0002  0064               	clrwdt	;# 
  4949  0003  0008               	return
  4950  0004                     __end_of_WDT_Clearing:	
  4951                           
  4952                           	psect	text8
  4953  1AC2                     __ptext8:	
  4954 ;; *************** function _Temp_Main *****************
  4955 ;; Defined at:
  4956 ;;		line 49 in file "../src/OverTemperature_B1.c"
  4957 ;; Parameters:    Size  Location     Type
  4958 ;;		None
  4959 ;; Auto vars:     Size  Location     Type
  4960 ;;		None
  4961 ;; Return value:  Size  Location     Type
  4962 ;;		None               void
  4963 ;; Registers used:
  4964 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4965 ;; Tracked objects:
  4966 ;;		On entry : 0/0
  4967 ;;		On exit  : 0/0
  4968 ;;		Unchanged: 0/0
  4969 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4971 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4973 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4974 ;;Total ram usage:        0 bytes
  4975 ;; Hardware stack levels used:    1
  4976 ;; Hardware stack levels required when called:    6
  4977 ;; This function calls:
  4978 ;;		_setTemp_Main
  4979 ;; This function is called by:
  4980 ;;		_main
  4981 ;; This function uses a non-reentrant model
  4982 ;;
  4983                           
  4984                           
  4985                           ;psect for function _Temp_Main
  4986  1AC2                     _Temp_Main:	
  4987                           
  4988                           ;OverTemperature_B1.c: 51: setTemp_Main();
  4989                           
  4990                           ;incstack = 0
  4991                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4992  1AC2  318D  25E4         	fcall	_setTemp_Main
  4993  1AC4  0008               	return
  4994  1AC5                     __end_of_Temp_Main:	
  4995                           
  4996                           	psect	text9
  4997  0DE4                     __ptext9:	
  4998 ;; *************** function _setTemp_Main *****************
  4999 ;; Defined at:
  5000 ;;		line 56 in file "../src/OverTemperature_B1.c"
  5001 ;; Parameters:    Size  Location     Type
  5002 ;;		None
  5003 ;; Auto vars:     Size  Location     Type
  5004 ;;  error           1   64[BANK0 ] unsigned char 
  5005 ;; Return value:  Size  Location     Type
  5006 ;;		None               void
  5007 ;; Registers used:
  5008 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5009 ;; Tracked objects:
  5010 ;;		On entry : 0/0
  5011 ;;		On exit  : 0/0
  5012 ;;		Unchanged: 0/0
  5013 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5015 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5016 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5017 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5018 ;;Total ram usage:        3 bytes
  5019 ;; Hardware stack levels used:    1
  5020 ;; Hardware stack levels required when called:    5
  5021 ;; This function calls:
  5022 ;;		_getMain_All_Error_Status
  5023 ;;		_setBuz
  5024 ;;		_setProductData
  5025 ;; This function is called by:
  5026 ;;		_Temp_Main
  5027 ;; This function uses a non-reentrant model
  5028 ;;
  5029                           
  5030                           
  5031                           ;psect for function _setTemp_Main
  5032  0DE4                     _setTemp_Main:	
  5033                           
  5034                           ;OverTemperature_B1.c: 57: char error = getMain_All_Error_Status(0);
  5035                           
  5036                           ;incstack = 0
  5037                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5038  0DE4  3000               	movlw	0
  5039  0DE5  3191  21CC  318D   	fcall	_getMain_All_Error_Status
  5040  0DE8  0020               	movlb	0	; select bank0
  5041  0DE9  00DE               	movwf	??_setTemp_Main
  5042  0DEA  085E               	movf	??_setTemp_Main,w
  5043  0DEB  00E0               	movwf	setTemp_Main@error
  5044                           
  5045                           ;OverTemperature_B1.c: 58: if (Temp.Enable == 1) {
  5046  0DEC  0021               	movlb	1	; select bank1
  5047  0DED  1C50               	btfss	_Temp^(0+128),0
  5048  0DEE  2E90               	goto	l1768
  5049                           
  5050                           ;OverTemperature_B1.c: 65: if (Temp.ADtoGO == 0) {
  5051  0DEF  1950               	btfsc	_Temp^(0+128),2
  5052  0DF0  2E00               	goto	l9710
  5053                           
  5054                           ;OverTemperature_B1.c: 66: Temp.Time++;
  5055  0DF1  3001               	movlw	1
  5056  0DF2  07D1               	addwf	(_Temp^(0+128)+1),f
  5057  0DF3  3000               	movlw	0
  5058  0DF4  3DD2               	addwfc	((_Temp+1)^(0+128)+1),f
  5059                           
  5060                           ;OverTemperature_B1.c: 67: if (Temp.Time >= (5000 / 20)) {
  5061  0DF5  3000               	movlw	0
  5062  0DF6  0252               	subwf	((_Temp+1)^(0+128)+1),w
  5063  0DF7  30FA               	movlw	250
  5064  0DF8  1903               	skipnz
  5065  0DF9  0251               	subwf	(_Temp^(0+128)+1),w
  5066  0DFA  1C03               	skipc
  5067  0DFB  0008               	return
  5068                           
  5069                           ;OverTemperature_B1.c: 68: Temp.Time = 0;
  5070  0DFC  01D1               	clrf	(_Temp^(0+128)+1)
  5071  0DFD  01D2               	clrf	((_Temp+1)^(0+128)+1)
  5072                           
  5073                           ;OverTemperature_B1.c: 69: Temp.ADtoGO = 1;
  5074  0DFE  1550               	bsf	_Temp^(0+128),2
  5075                           
  5076                           ;OverTemperature_B1.c: 70: }
  5077                           ;OverTemperature_B1.c: 71: } else {
  5078  0DFF  0008               	return
  5079  0E00                     l9710:	
  5080                           
  5081                           ;OverTemperature_B1.c: 72: Temp.Time++;
  5082  0E00  3001               	movlw	1
  5083  0E01  07D1               	addwf	(_Temp^(0+128)+1),f
  5084  0E02  3000               	movlw	0
  5085  0E03  3DD2               	addwfc	((_Temp+1)^(0+128)+1),f
  5086                           
  5087                           ;OverTemperature_B1.c: 73: if (Temp.Time >= (40 / 20)) {
  5088  0E04  3000               	movlw	0
  5089  0E05  0252               	subwf	((_Temp+1)^(0+128)+1),w
  5090  0E06  3002               	movlw	2
  5091  0E07  1903               	skipnz
  5092  0E08  0251               	subwf	(_Temp^(0+128)+1),w
  5093  0E09  1C03               	skipc
  5094  0E0A  0008               	return
  5095                           
  5096                           ;OverTemperature_B1.c: 74: Temp.Time = 0;
  5097  0E0B  01D1               	clrf	(_Temp^(0+128)+1)
  5098  0E0C  01D2               	clrf	((_Temp+1)^(0+128)+1)
  5099                           
  5100                           ;OverTemperature_B1.c: 76: if (Temp.ADH[0] > 0 && Temp.ADH[1] > 0) {
  5101  0E0D  3008               	movlw	8
  5102  0E0E  3ED0               	addlw	_Temp& (0+255)
  5103  0E0F  0086               	movwf	6
  5104  0E10  0187               	clrf	7
  5105  0E11  0016               	moviw fsr1++
  5106  0E12  0401               	iorwf	1,w
  5107  0E13  1903               	skipnz
  5108  0E14  2E8A               	goto	l1773
  5109  0E15  300A               	movlw	10
  5110  0E16  3ED0               	addlw	_Temp& (0+255)
  5111  0E17  0086               	movwf	6
  5112  0E18  0187               	clrf	7
  5113  0E19  0016               	moviw fsr1++
  5114  0E1A  0401               	iorwf	1,w
  5115  0E1B  1903               	skipnz
  5116  0E1C  2E8A               	goto	l1773
  5117                           
  5118                           ;OverTemperature_B1.c: 77: Temp.ADtoGO = 0;
  5119  0E1D  1150               	bcf	_Temp^(0+128),2
  5120                           
  5121                           ;OverTemperature_B1.c: 78: Temp.AD = (Temp.ADH[0] + Temp.ADH[1]) / 2;
  5122  0E1E  300A               	movlw	10
  5123  0E1F  3ED0               	addlw	_Temp& (0+255)
  5124  0E20  0086               	movwf	6
  5125  0E21  0187               	clrf	7
  5126  0E22  3008               	movlw	8
  5127  0E23  3ED0               	addlw	_Temp& (0+255)
  5128  0E24  0084               	movwf	4
  5129  0E25  0185               	clrf	5
  5130  0E26  3F40               	moviw [0]fsr1
  5131  0E27  0700               	addwf	0,w
  5132  0E28  0020               	movlb	0	; select bank0
  5133  0E29  00DE               	movwf	??_setTemp_Main
  5134  0E2A  3101               	addfsr 0,1
  5135  0E2B  3F41               	moviw [1]fsr1
  5136  0E2C  3D00               	addwfc	0,w
  5137  0E2D  00DF               	movwf	??_setTemp_Main+1
  5138  0E2E  36DF               	lsrf	??_setTemp_Main+1,f
  5139  0E2F  0CDE               	rrf	??_setTemp_Main,f
  5140  0E30  085E               	movf	??_setTemp_Main,w
  5141  0E31  0021               	movlb	1	; select bank1
  5142  0E32  00D6               	movwf	(_Temp^(0+128)+6)
  5143  0E33  0020               	movlb	0	; select bank0
  5144  0E34  085F               	movf	??_setTemp_Main+1,w
  5145  0E35  0021               	movlb	1	; select bank1
  5146  0E36  00D7               	movwf	((_Temp+1)^(0+128)+6)
  5147                           
  5148                           ;OverTemperature_B1.c: 89: Temp.SafeValue = 455;
  5149  0E37  30C7               	movlw	199
  5150  0E38  00DE               	movwf	(_Temp^(0+128)+14)
  5151  0E39  3001               	movlw	1
  5152  0E3A  00DF               	movwf	(_Temp^(0+128)+15)
  5153                           
  5154                           ;OverTemperature_B1.c: 90: Temp.DangerValue = 415;
  5155  0E3B  309F               	movlw	159
  5156  0E3C  00E0               	movwf	(_Temp^(0+128)+16)
  5157  0E3D  3001               	movlw	1
  5158  0E3E  00E1               	movwf	(_Temp^(0+128)+17)
  5159                           
  5160                           ;OverTemperature_B1.c: 96: if (Temp.ERROR == 1) {
  5161  0E3F  1CD0               	btfss	_Temp^(0+128),1
  5162  0E40  2E61               	goto	l9742
  5163                           
  5164                           ;OverTemperature_B1.c: 97: if (Temp.AD >= Temp.SafeValue) {
  5165  0E41  085F               	movf	((_Temp+1)^(0+128)+14),w
  5166  0E42  0257               	subwf	((_Temp+1)^(0+128)+6),w
  5167  0E43  1D03               	skipz
  5168  0E44  2E47               	goto	u11175
  5169  0E45  085E               	movf	(_Temp^(0+128)+14),w
  5170  0E46  0256               	subwf	(_Temp^(0+128)+6),w
  5171  0E47                     u11175:	
  5172  0E47  1C03               	skipc
  5173  0E48  2E5F               	goto	l9740
  5174                           
  5175                           ;OverTemperature_B1.c: 98: Temp.Count++;
  5176  0E49  3001               	movlw	1
  5177  0E4A  0020               	movlb	0	; select bank0
  5178  0E4B  00DE               	movwf	??_setTemp_Main
  5179  0E4C  085E               	movf	??_setTemp_Main,w
  5180  0E4D  0021               	movlb	1	; select bank1
  5181  0E4E  07D3               	addwf	(_Temp^(0+128)+3),f
  5182                           
  5183                           ;OverTemperature_B1.c: 99: if (Temp.Count >= 3) {
  5184  0E4F  3003               	movlw	3
  5185  0E50  0253               	subwf	(_Temp^(0+128)+3),w
  5186  0E51  1C03               	skipc
  5187  0E52  2E77               	goto	l9754
  5188                           
  5189                           ;OverTemperature_B1.c: 100: Temp.Count = 0;
  5190  0E53  01D3               	clrf	(_Temp^(0+128)+3)
  5191                           
  5192                           ;OverTemperature_B1.c: 101: Temp.ERROR = 0;
  5193  0E54  10D0               	bcf	_Temp^(0+128),1
  5194                           
  5195                           ;OverTemperature_B1.c: 102: setBuz(2, 100);
  5196  0E55  3064               	movlw	100
  5197  0E56  0020               	movlb	0	; select bank0
  5198  0E57  00A4               	movwf	setBuz@time
  5199  0E58  3000               	movlw	0
  5200  0E59  00A5               	movwf	setBuz@time+1
  5201  0E5A  3002               	movlw	2
  5202  0E5B  3195  2584  318D   	fcall	_setBuz
  5203                           
  5204                           ;OverTemperature_B1.c: 103: }
  5205                           ;OverTemperature_B1.c: 104: } else {
  5206  0E5E  2E77               	goto	l9754
  5207  0E5F                     l9740:	
  5208                           
  5209                           ;OverTemperature_B1.c: 105: Temp.Count = 0;
  5210  0E5F  0021               	movlb	1	; select bank1
  5211  0E60  2E76               	goto	l9752
  5212  0E61                     l9742:	
  5213                           ;OverTemperature_B1.c: 106: }
  5214                           ;OverTemperature_B1.c: 107: } else {
  5215                           
  5216                           
  5217                           ;OverTemperature_B1.c: 108: if (Temp.AD <= Temp.DangerValue) {
  5218  0E61  0857               	movf	((_Temp+1)^(0+128)+6),w
  5219  0E62  0261               	subwf	((_Temp+1)^(0+128)+16),w
  5220  0E63  1D03               	skipz
  5221  0E64  2E67               	goto	u11195
  5222  0E65  0856               	movf	(_Temp^(0+128)+6),w
  5223  0E66  0260               	subwf	(_Temp^(0+128)+16),w
  5224  0E67                     u11195:	
  5225  0E67  1C03               	skipc
  5226  0E68  2E76               	goto	l9752
  5227                           
  5228                           ;OverTemperature_B1.c: 109: Temp.Count++;
  5229  0E69  3001               	movlw	1
  5230  0E6A  0020               	movlb	0	; select bank0
  5231  0E6B  00DE               	movwf	??_setTemp_Main
  5232  0E6C  085E               	movf	??_setTemp_Main,w
  5233  0E6D  0021               	movlb	1	; select bank1
  5234  0E6E  07D3               	addwf	(_Temp^(0+128)+3),f
  5235                           
  5236                           ;OverTemperature_B1.c: 110: if (Temp.Count >= 3) {
  5237  0E6F  3003               	movlw	3
  5238  0E70  0253               	subwf	(_Temp^(0+128)+3),w
  5239  0E71  1C03               	skipc
  5240  0E72  2E77               	goto	l9754
  5241                           
  5242                           ;OverTemperature_B1.c: 111: Temp.Count = 0;
  5243  0E73  01D3               	clrf	(_Temp^(0+128)+3)
  5244                           
  5245                           ;OverTemperature_B1.c: 112: Temp.ERROR = 1;
  5246  0E74  14D0               	bsf	_Temp^(0+128),1
  5247                           
  5248                           ;OverTemperature_B1.c: 113: }
  5249                           ;OverTemperature_B1.c: 114: } else {
  5250  0E75  2E77               	goto	l9754
  5251  0E76                     l9752:	
  5252                           
  5253                           ;OverTemperature_B1.c: 115: Temp.Count = 0;
  5254  0E76  01D3               	clrf	(_Temp^(0+128)+3)
  5255  0E77                     l9754:	
  5256                           
  5257                           ;OverTemperature_B1.c: 116: }
  5258                           ;OverTemperature_B1.c: 117: }
  5259                           ;OverTemperature_B1.c: 118: setProductData(24, Temp.AD >> 8);
  5260  0E77  0021               	movlb	1	; select bank1
  5261  0E78  0857               	movf	((_Temp+1)^(0+128)+6),w
  5262  0E79  0020               	movlb	0	; select bank0
  5263  0E7A  00DE               	movwf	??_setTemp_Main
  5264  0E7B  085E               	movf	??_setTemp_Main,w
  5265  0E7C  00DA               	movwf	setProductData@value
  5266  0E7D  3018               	movlw	24
  5267  0E7E  319B  23D8  318D   	fcall	_setProductData
  5268                           
  5269                           ;OverTemperature_B1.c: 119: setProductData(25, Temp.AD);
  5270  0E81  0021               	movlb	1	; select bank1
  5271  0E82  0856               	movf	(_Temp^(0+128)+6),w
  5272  0E83  0020               	movlb	0	; select bank0
  5273  0E84  00DE               	movwf	??_setTemp_Main
  5274  0E85  085E               	movf	??_setTemp_Main,w
  5275  0E86  00DA               	movwf	setProductData@value
  5276  0E87  3019               	movlw	25
  5277  0E88  319B  23D8         	fcall	_setProductData
  5278  0E8A                     l1773:	
  5279                           
  5280                           ;OverTemperature_B1.c: 135: }
  5281                           ;OverTemperature_B1.c: 136: Temp.ADH[0] = 0;
  5282  0E8A  0021               	movlb	1	; select bank1
  5283  0E8B  01D8               	clrf	(_Temp^(0+128)+8)
  5284  0E8C  01D9               	clrf	((_Temp+1)^(0+128)+8)
  5285                           
  5286                           ;OverTemperature_B1.c: 137: Temp.ADH[1] = 0;
  5287  0E8D  01DA               	clrf	(_Temp^(0+128)+10)
  5288  0E8E  01DB               	clrf	((_Temp+1)^(0+128)+10)
  5289                           
  5290                           ;OverTemperature_B1.c: 138: }
  5291                           ;OverTemperature_B1.c: 139: }
  5292                           ;OverTemperature_B1.c: 141: } else {
  5293  0E8F  0008               	return
  5294  0E90                     l1768:	
  5295                           
  5296                           ;OverTemperature_B1.c: 142: if (myMain.PowerON == 1) {
  5297  0E90  0022               	movlb	2	; select bank2
  5298  0E91  1C20               	btfss	_myMain^(0+256),0
  5299  0E92  0008               	return
  5300                           
  5301                           ;OverTemperature_B1.c: 143: Temp.Enable = 1;
  5302  0E93  0021               	movlb	1	; select bank1
  5303  0E94  1450               	bsf	_Temp^(0+128),0
  5304  0E95  0008               	return
  5305  0E96                     __end_of_setTemp_Main:	
  5306                           
  5307                           	psect	text10
  5308  1ABF                     __ptext10:	
  5309 ;; *************** function _Temp_Initialization *****************
  5310 ;; Defined at:
  5311 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5312 ;; Parameters:    Size  Location     Type
  5313 ;;		None
  5314 ;; Auto vars:     Size  Location     Type
  5315 ;;		None
  5316 ;; Return value:  Size  Location     Type
  5317 ;;		None               void
  5318 ;; Registers used:
  5319 ;;		status,2, status,0, pclath, cstack
  5320 ;; Tracked objects:
  5321 ;;		On entry : 0/0
  5322 ;;		On exit  : 0/0
  5323 ;;		Unchanged: 0/0
  5324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5328 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5329 ;;Total ram usage:        0 bytes
  5330 ;; Hardware stack levels used:    1
  5331 ;; Hardware stack levels required when called:    4
  5332 ;; This function calls:
  5333 ;;		_setTemp_Initialization
  5334 ;; This function is called by:
  5335 ;;		_main
  5336 ;; This function uses a non-reentrant model
  5337 ;;
  5338                           
  5339                           
  5340                           ;psect for function _Temp_Initialization
  5341  1ABF                     _Temp_Initialization:	
  5342                           
  5343                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5344                           
  5345                           ;incstack = 0
  5346                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5347  1ABF  3187  27FF         	fcall	_setTemp_Initialization
  5348  1AC1  0008               	return
  5349  1AC2                     __end_of_Temp_Initialization:	
  5350                           
  5351                           	psect	text11
  5352  07FF                     __ptext11:	
  5353 ;; *************** function _setTemp_Initialization *****************
  5354 ;; Defined at:
  5355 ;;		line 44 in file "../src/OverTemperature_B1.c"
  5356 ;; Parameters:    Size  Location     Type
  5357 ;;		None
  5358 ;; Auto vars:     Size  Location     Type
  5359 ;;		None
  5360 ;; Return value:  Size  Location     Type
  5361 ;;		None               void
  5362 ;; Registers used:
  5363 ;;		None
  5364 ;; Tracked objects:
  5365 ;;		On entry : 0/0
  5366 ;;		On exit  : 0/0
  5367 ;;		Unchanged: 0/0
  5368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5372 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5373 ;;Total ram usage:        0 bytes
  5374 ;; Hardware stack levels used:    1
  5375 ;; Hardware stack levels required when called:    3
  5376 ;; This function calls:
  5377 ;;		Nothing
  5378 ;; This function is called by:
  5379 ;;		_Temp_Initialization
  5380 ;; This function uses a non-reentrant model
  5381 ;;
  5382                           
  5383                           
  5384                           ;psect for function _setTemp_Initialization
  5385  07FF                     _setTemp_Initialization:	
  5386                           
  5387                           ;incstack = 0
  5388                           ; Regs used in _setTemp_Initialization: []
  5389  07FF  0008               	return
  5390  0800                     __end_of_setTemp_Initialization:	
  5391                           
  5392                           	psect	text12
  5393  1B68                     __ptext12:	
  5394 ;; *************** function _Switch_Main *****************
  5395 ;; Defined at:
  5396 ;;		line 72 in file "../src/Switch_B1.c"
  5397 ;; Parameters:    Size  Location     Type
  5398 ;;		None
  5399 ;; Auto vars:     Size  Location     Type
  5400 ;;		None
  5401 ;; Return value:  Size  Location     Type
  5402 ;;		None               void
  5403 ;; Registers used:
  5404 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5405 ;; Tracked objects:
  5406 ;;		On entry : 0/0
  5407 ;;		On exit  : 0/0
  5408 ;;		Unchanged: 0/0
  5409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5413 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5414 ;;Total ram usage:        0 bytes
  5415 ;; Hardware stack levels used:    1
  5416 ;; Hardware stack levels required when called:    7
  5417 ;; This function calls:
  5418 ;;		_TouchPower
  5419 ;;		_setSw_Main
  5420 ;; This function is called by:
  5421 ;;		_main
  5422 ;; This function uses a non-reentrant model
  5423 ;;
  5424                           
  5425                           
  5426                           ;psect for function _Switch_Main
  5427  1B68                     _Switch_Main:	
  5428                           
  5429                           ;Switch_B1.c: 75: setSw_Main(1);
  5430                           
  5431                           ;incstack = 0
  5432                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5433  1B68  3001               	movlw	1
  5434  1B69  3181  21EB  319B   	fcall	_setSw_Main
  5435                           
  5436                           ;Switch_B1.c: 79: setSw_Main(2);
  5437  1B6C  3002               	movlw	2
  5438  1B6D  3181  21EB  319B   	fcall	_setSw_Main
  5439                           
  5440                           ;Switch_B1.c: 87: TouchPower();
  5441  1B70  319D  25D0         	fcall	_TouchPower
  5442  1B72  0008               	return
  5443  1B73                     __end_of_Switch_Main:	
  5444                           
  5445                           	psect	text13
  5446  01EB                     __ptext13:	
  5447 ;; *************** function _setSw_Main *****************
  5448 ;; Defined at:
  5449 ;;		line 121 in file "../src/Switch_B1.c"
  5450 ;; Parameters:    Size  Location     Type
  5451 ;;  sw              1    wreg     unsigned char 
  5452 ;; Auto vars:     Size  Location     Type
  5453 ;;  sw              1   12[BANK0 ] unsigned char 
  5454 ;; Return value:  Size  Location     Type
  5455 ;;		None               void
  5456 ;; Registers used:
  5457 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5458 ;; Tracked objects:
  5459 ;;		On entry : 0/0
  5460 ;;		On exit  : 0/0
  5461 ;;		Unchanged: 0/0
  5462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5464 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5465 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5466 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5467 ;;Total ram usage:        3 bytes
  5468 ;; Hardware stack levels used:    1
  5469 ;; Hardware stack levels required when called:    6
  5470 ;; This function calls:
  5471 ;;		_SwPointSelect
  5472 ;;		_getMain_All_Error_Status
  5473 ;;		_getSw_KeyStatus
  5474 ;;		_setBuz
  5475 ;;		_setDimmerLights_DimmingOn
  5476 ;;		_setDimmerLights_SwOff
  5477 ;;		_setDimmerLights_SwOn
  5478 ;;		_setRF_Learn
  5479 ;; This function is called by:
  5480 ;;		_Switch_Main
  5481 ;; This function uses a non-reentrant model
  5482 ;;
  5483                           
  5484                           
  5485                           ;psect for function _setSw_Main
  5486  01EB                     _setSw_Main:	
  5487                           
  5488                           ;incstack = 0
  5489                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5490                           ;setSw_Main@sw stored from wreg
  5491  01EB  0020               	movlb	0	; select bank0
  5492  01EC  00AC               	movwf	setSw_Main@sw
  5493                           
  5494                           ;Switch_B1.c: 122: SwPointSelect(sw);
  5495  01ED  082C               	movf	setSw_Main@sw,w
  5496  01EE  319D  2517  3181   	fcall	_SwPointSelect
  5497                           
  5498                           ;Switch_B1.c: 123: if (Sw->Enable == 1) {
  5499  01F1  087B               	movf	_Sw,w
  5500  01F2  0086               	movwf	6
  5501  01F3  3001               	movlw	1	; select bank2/3
  5502  01F4  0087               	movwf	7
  5503  01F5  1C01               	btfss	1,0
  5504  01F6  2B51               	goto	l2539
  5505                           
  5506                           ;Switch_B1.c: 125: if (getMain_All_Error_Status(0) == 0) {
  5507  01F7  3000               	movlw	0
  5508  01F8  3191  21CC  3181   	fcall	_getMain_All_Error_Status
  5509  01FB  3800               	iorlw	0
  5510  01FC  1D03               	skipz
  5511  01FD  2A19               	goto	l9862
  5512                           
  5513                           ;Switch_B1.c: 126: Sw->Detect = 0;
  5514  01FE  0A7B               	incf	_Sw,w
  5515  01FF  0086               	movwf	6
  5516  0200  3001               	movlw	1	; select bank2/3
  5517  0201  0087               	movwf	7
  5518  0202  1081               	bcf	1,1
  5519                           
  5520                           ;Switch_B1.c: 127: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5521  0203  0020               	movlb	0	; select bank0
  5522  0204  082C               	movf	setSw_Main@sw,w
  5523  0205  319F  275B  3181   	fcall	_getSw_KeyStatus
  5524  0208  3A01               	xorlw	1
  5525  0209  3000               	movlw	0
  5526  020A  1903               	skipnz
  5527  020B  3001               	movlw	1
  5528  020C  0020               	movlb	0	; select bank0
  5529  020D  00AA               	movwf	??_setSw_Main
  5530  020E  087B               	movf	_Sw,w
  5531  020F  0086               	movwf	6
  5532  0210  3001               	movlw	1	; select bank2/3
  5533  0211  0087               	movwf	7
  5534  0212  0DAA               	rlf	??_setSw_Main,f
  5535  0213  0801               	movf	1,w
  5536  0214  062A               	xorwf	??_setSw_Main,w
  5537  0215  39FD               	andlw	-3
  5538  0216  062A               	xorwf	??_setSw_Main,w
  5539  0217  0081               	movwf	1
  5540                           
  5541                           ;Switch_B1.c: 128: } else {
  5542  0218  2A2E               	goto	l2541
  5543  0219                     l9862:	
  5544                           
  5545                           ;Switch_B1.c: 129: if (Sw->Detect == 0) {
  5546  0219  0A7B               	incf	_Sw,w
  5547  021A  0086               	movwf	6
  5548  021B  3001               	movlw	1	; select bank2/3
  5549  021C  0087               	movwf	7
  5550  021D  1881               	btfsc	1,1
  5551  021E  2A2E               	goto	l2541
  5552                           
  5553                           ;Switch_B1.c: 130: Sw->Detect = 1;
  5554  021F  0A7B               	incf	_Sw,w
  5555  0220  0086               	movwf	6
  5556  0221  3001               	movlw	1	; select bank2/3
  5557  0222  0087               	movwf	7
  5558  0223  1481               	bsf	1,1
  5559                           
  5560                           ;Switch_B1.c: 132: Sw->Touch = 0;
  5561  0224  087B               	movf	_Sw,w
  5562  0225  0086               	movwf	6
  5563  0226  3001               	movlw	1	; select bank2/3
  5564  0227  0087               	movwf	7
  5565  0228  1081               	bcf	1,1
  5566                           
  5567                           ;Switch_B1.c: 133: Sw->Debounce = 1;
  5568  0229  087B               	movf	_Sw,w
  5569  022A  0086               	movwf	6
  5570  022B  3001               	movlw	1	; select bank2/3
  5571  022C  0087               	movwf	7
  5572  022D  1501               	bsf	1,2
  5573  022E                     l2541:	
  5574                           
  5575                           ;Switch_B1.c: 134: }
  5576                           ;Switch_B1.c: 135: }
  5577                           ;Switch_B1.c: 137: if (Sw->Touch == 1) {
  5578  022E  087B               	movf	_Sw,w
  5579  022F  0086               	movwf	6
  5580  0230  3001               	movlw	1	; select bank2/3
  5581  0231  0087               	movwf	7
  5582  0232  1C81               	btfss	1,1
  5583  0233  2AFE               	goto	l9912
  5584                           
  5585                           ;Switch_B1.c: 138: if (Sw->Debounce == 0) {
  5586  0234  087B               	movf	_Sw,w
  5587  0235  0086               	movwf	6
  5588  0236  3001               	movlw	1	; select bank2/3
  5589  0237  0087               	movwf	7
  5590  0238  1901               	btfsc	1,2
  5591  0239  2A5C               	goto	l9878
  5592                           
  5593                           ;Switch_B1.c: 139: Sw->DebounceTime++;
  5594  023A  3001               	movlw	1
  5595  023B  0020               	movlb	0	; select bank0
  5596  023C  00AA               	movwf	??_setSw_Main
  5597  023D  087B               	movf	_Sw,w
  5598  023E  3E02               	addlw	2
  5599  023F  0086               	movwf	6
  5600  0240  3001               	movlw	1	; select bank2/3
  5601  0241  0087               	movwf	7
  5602  0242  082A               	movf	??_setSw_Main,w
  5603  0243  0781               	addwf	1,f
  5604                           
  5605                           ;Switch_B1.c: 140: if (Sw->DebounceTime >= (60 / 20)) {
  5606  0244  087B               	movf	_Sw,w
  5607  0245  3E02               	addlw	2
  5608  0246  0086               	movwf	6
  5609  0247  3001               	movlw	1	; select bank2/3
  5610  0248  0087               	movwf	7
  5611  0249  3003               	movlw	3
  5612  024A  0201               	subwf	1,w
  5613  024B  1C03               	skipc
  5614  024C  0008               	return
  5615                           
  5616                           ;Switch_B1.c: 141: Sw->DebounceTime = 0;
  5617  024D  087B               	movf	_Sw,w
  5618  024E  3E02               	addlw	2
  5619  024F  0086               	movwf	6
  5620  0250  3001               	movlw	1	; select bank2/3
  5621  0251  0087               	movwf	7
  5622  0252  0181               	clrf	1
  5623                           
  5624                           ;Switch_B1.c: 142: Sw->Debounce = 1;
  5625  0253  087B               	movf	_Sw,w
  5626  0254  0086               	movwf	6
  5627  0255  3001               	movlw	1	; select bank2/3
  5628  0256  0087               	movwf	7
  5629  0257  1501               	bsf	1,2
  5630                           
  5631                           ;Switch_B1.c: 145: setDimmerLights_SwOn(sw);
  5632  0258  082C               	movf	setSw_Main@sw,w
  5633  0259  3196  2686         	fcall	_setDimmerLights_SwOn
  5634                           
  5635                           ;Switch_B1.c: 148: }
  5636                           ;Switch_B1.c: 149: } else {
  5637  025B  0008               	return
  5638  025C                     l9878:	
  5639                           
  5640                           ;Switch_B1.c: 150: if (Sw->Hold1 == 0) {
  5641  025C  087B               	movf	_Sw,w
  5642  025D  0086               	movwf	6
  5643  025E  3001               	movlw	1	; select bank2/3
  5644  025F  0087               	movwf	7
  5645  0260  1981               	btfsc	1,3
  5646  0261  2A8E               	goto	l9888
  5647                           
  5648                           ;Switch_B1.c: 151: Sw->Hold1Time++;
  5649  0262  087B               	movf	_Sw,w
  5650  0263  3E03               	addlw	3
  5651  0264  0086               	movwf	6
  5652  0265  3001               	movlw	1	; select bank2/3
  5653  0266  0087               	movwf	7
  5654  0267  3001               	movlw	1
  5655  0268  0781               	addwf	1,f
  5656  0269  3141               	addfsr 1,1
  5657  026A  1803               	skipnc
  5658  026B  0A81               	incf	1,f
  5659                           
  5660                           ;Switch_B1.c: 152: if (Sw->Hold1Time >= (1500 / 20)) {
  5661  026C  087B               	movf	_Sw,w
  5662  026D  3E03               	addlw	3
  5663  026E  0086               	movwf	6
  5664  026F  3001               	movlw	1	; select bank2/3
  5665  0270  0087               	movwf	7
  5666  0271  3F40               	moviw [0]fsr1
  5667  0272  0020               	movlb	0	; select bank0
  5668  0273  00AA               	movwf	??_setSw_Main
  5669  0274  3F41               	moviw [1]fsr1
  5670  0275  00AB               	movwf	??_setSw_Main+1
  5671  0276  3000               	movlw	0
  5672  0277  022B               	subwf	??_setSw_Main+1,w
  5673  0278  304B               	movlw	75
  5674  0279  1903               	skipnz
  5675  027A  022A               	subwf	??_setSw_Main,w
  5676  027B  1C03               	skipc
  5677  027C  0008               	return
  5678                           
  5679                           ;Switch_B1.c: 153: Sw->Hold1Time = 0;
  5680  027D  087B               	movf	_Sw,w
  5681  027E  3E03               	addlw	3
  5682  027F  0086               	movwf	6
  5683  0280  3001               	movlw	1	; select bank2/3
  5684  0281  0087               	movwf	7
  5685  0282  3000               	movlw	0
  5686  0283  3FC0               	movwi [0]fsr1
  5687  0284  3FC1               	movwi [1]fsr1
  5688                           
  5689                           ;Switch_B1.c: 156: Sw->Hold1 = 1;
  5690  0285  087B               	movf	_Sw,w
  5691  0286  0086               	movwf	6
  5692  0287  3001               	movlw	1	; select bank2/3
  5693  0288  0087               	movwf	7
  5694  0289  1581               	bsf	1,3
  5695                           
  5696                           ;Switch_B1.c: 157: setDimmerLights_DimmingOn(sw);
  5697  028A  082C               	movf	setSw_Main@sw,w
  5698  028B  3190  20FF         	fcall	_setDimmerLights_DimmingOn
  5699                           
  5700                           ;Switch_B1.c: 160: }
  5701                           ;Switch_B1.c: 161: } else {
  5702  028D  0008               	return
  5703  028E                     l9888:	
  5704                           
  5705                           ;Switch_B1.c: 162: if (Sw->Hold2 == 0) {
  5706  028E  087B               	movf	_Sw,w
  5707  028F  0086               	movwf	6
  5708  0290  3001               	movlw	1	; select bank2/3
  5709  0291  0087               	movwf	7
  5710  0292  1A01               	btfsc	1,4
  5711  0293  2ACC               	goto	l9902
  5712                           
  5713                           ;Switch_B1.c: 163: Sw->Hold2Time++;
  5714  0294  087B               	movf	_Sw,w
  5715  0295  3E05               	addlw	5
  5716  0296  0086               	movwf	6
  5717  0297  3001               	movlw	1	; select bank2/3
  5718  0298  0087               	movwf	7
  5719  0299  3001               	movlw	1
  5720  029A  0781               	addwf	1,f
  5721  029B  3141               	addfsr 1,1
  5722  029C  1803               	skipnc
  5723  029D  0A81               	incf	1,f
  5724                           
  5725                           ;Switch_B1.c: 164: if (Sw->Hold2Time >= (1500 / 20)) {
  5726  029E  087B               	movf	_Sw,w
  5727  029F  3E05               	addlw	5
  5728  02A0  0086               	movwf	6
  5729  02A1  3001               	movlw	1	; select bank2/3
  5730  02A2  0087               	movwf	7
  5731  02A3  3F40               	moviw [0]fsr1
  5732  02A4  0020               	movlb	0	; select bank0
  5733  02A5  00AA               	movwf	??_setSw_Main
  5734  02A6  3F41               	moviw [1]fsr1
  5735  02A7  00AB               	movwf	??_setSw_Main+1
  5736  02A8  3000               	movlw	0
  5737  02A9  022B               	subwf	??_setSw_Main+1,w
  5738  02AA  304B               	movlw	75
  5739  02AB  1903               	skipnz
  5740  02AC  022A               	subwf	??_setSw_Main,w
  5741  02AD  1C03               	skipc
  5742  02AE  0008               	return
  5743                           
  5744                           ;Switch_B1.c: 165: Sw->Hold2Time = 0;
  5745  02AF  087B               	movf	_Sw,w
  5746  02B0  3E05               	addlw	5
  5747  02B1  0086               	movwf	6
  5748  02B2  3001               	movlw	1	; select bank2/3
  5749  02B3  0087               	movwf	7
  5750  02B4  3000               	movlw	0
  5751  02B5  3FC0               	movwi [0]fsr1
  5752  02B6  3FC1               	movwi [1]fsr1
  5753                           
  5754                           ;Switch_B1.c: 166: Sw->Hold2 = 1;
  5755  02B7  087B               	movf	_Sw,w
  5756  02B8  0086               	movwf	6
  5757  02B9  3001               	movlw	1	; select bank2/3
  5758  02BA  0087               	movwf	7
  5759  02BB  1601               	bsf	1,4
  5760                           
  5761                           ;Switch_B1.c: 169: setRF_Learn(1);
  5762  02BC  3001               	movlw	1
  5763  02BD  319C  24E2  3181   	fcall	_setRF_Learn
  5764                           
  5765                           ;Switch_B1.c: 170: if (myMain.First == 1) {
  5766  02C0  0022               	movlb	2	; select bank2
  5767  02C1  1EA0               	btfss	_myMain^(0+256),5
  5768  02C2  0008               	return
  5769                           
  5770                           ;Switch_B1.c: 171: setBuz(2, 100);
  5771  02C3  3064               	movlw	100
  5772  02C4  0020               	movlb	0	; select bank0
  5773  02C5  00A4               	movwf	setBuz@time
  5774  02C6  3000               	movlw	0
  5775  02C7  00A5               	movwf	setBuz@time+1
  5776  02C8  3002               	movlw	2
  5777  02C9  3195  2584         	fcall	_setBuz
  5778                           
  5779                           ;Switch_B1.c: 172: }
  5780                           ;Switch_B1.c: 176: }
  5781                           ;Switch_B1.c: 177: } else {
  5782  02CB  0008               	return
  5783  02CC                     l9902:	
  5784                           
  5785                           ;Switch_B1.c: 178: if (Sw->Hold3 == 0) {
  5786  02CC  087B               	movf	_Sw,w
  5787  02CD  0086               	movwf	6
  5788  02CE  3001               	movlw	1	; select bank2/3
  5789  02CF  0087               	movwf	7
  5790  02D0  1A81               	btfsc	1,5
  5791  02D1  0008               	return
  5792                           
  5793                           ;Switch_B1.c: 179: Sw->Hold3Time++;
  5794  02D2  087B               	movf	_Sw,w
  5795  02D3  3E07               	addlw	7
  5796  02D4  0086               	movwf	6
  5797  02D5  3001               	movlw	1	; select bank2/3
  5798  02D6  0087               	movwf	7
  5799  02D7  3001               	movlw	1
  5800  02D8  0781               	addwf	1,f
  5801  02D9  3141               	addfsr 1,1
  5802  02DA  1803               	skipnc
  5803  02DB  0A81               	incf	1,f
  5804                           
  5805                           ;Switch_B1.c: 180: if (Sw->Hold3Time >= (3000/ 20)) {
  5806  02DC  087B               	movf	_Sw,w
  5807  02DD  3E07               	addlw	7
  5808  02DE  0086               	movwf	6
  5809  02DF  3001               	movlw	1	; select bank2/3
  5810  02E0  0087               	movwf	7
  5811  02E1  3F40               	moviw [0]fsr1
  5812  02E2  0020               	movlb	0	; select bank0
  5813  02E3  00AA               	movwf	??_setSw_Main
  5814  02E4  3F41               	moviw [1]fsr1
  5815  02E5  00AB               	movwf	??_setSw_Main+1
  5816  02E6  3000               	movlw	0
  5817  02E7  022B               	subwf	??_setSw_Main+1,w
  5818  02E8  3096               	movlw	150
  5819  02E9  1903               	skipnz
  5820  02EA  022A               	subwf	??_setSw_Main,w
  5821  02EB  1C03               	skipc
  5822  02EC  0008               	return
  5823                           
  5824                           ;Switch_B1.c: 181: Sw->Hold3Time = 0;
  5825  02ED  087B               	movf	_Sw,w
  5826  02EE  3E07               	addlw	7
  5827  02EF  0086               	movwf	6
  5828  02F0  3001               	movlw	1	; select bank2/3
  5829  02F1  0087               	movwf	7
  5830  02F2  3000               	movlw	0
  5831  02F3  3FC0               	movwi [0]fsr1
  5832  02F4  3FC1               	movwi [1]fsr1
  5833                           
  5834                           ;Switch_B1.c: 182: Sw->Hold3 = 1;
  5835  02F5  087B               	movf	_Sw,w
  5836  02F6  0086               	movwf	6
  5837  02F7  3001               	movlw	1	; select bank2/3
  5838  02F8  0087               	movwf	7
  5839  02F9  1681               	bsf	1,5
  5840                           
  5841                           ;Switch_B1.c: 185: setRF_Learn(0);
  5842  02FA  3000               	movlw	0
  5843  02FB  319C  24E2         	fcall	_setRF_Learn
  5844                           
  5845                           ;Switch_B1.c: 188: }
  5846                           ;Switch_B1.c: 189: }
  5847                           ;Switch_B1.c: 190: }
  5848                           ;Switch_B1.c: 191: }
  5849                           ;Switch_B1.c: 192: }
  5850                           ;Switch_B1.c: 193: } else {
  5851  02FD  0008               	return
  5852  02FE                     l9912:	
  5853                           
  5854                           ;Switch_B1.c: 194: if (Sw->Debounce == 1) {
  5855  02FE  087B               	movf	_Sw,w
  5856  02FF  0086               	movwf	6
  5857  0300  3001               	movlw	1	; select bank2/3
  5858  0301  0087               	movwf	7
  5859  0302  1D01               	btfss	1,2
  5860  0303  0008               	return
  5861                           
  5862                           ;Switch_B1.c: 195: Sw->DebounceTime++;
  5863  0304  3001               	movlw	1
  5864  0305  0020               	movlb	0	; select bank0
  5865  0306  00AA               	movwf	??_setSw_Main
  5866  0307  087B               	movf	_Sw,w
  5867  0308  3E02               	addlw	2
  5868  0309  0086               	movwf	6
  5869  030A  3001               	movlw	1	; select bank2/3
  5870  030B  0087               	movwf	7
  5871  030C  082A               	movf	??_setSw_Main,w
  5872  030D  0781               	addwf	1,f
  5873                           
  5874                           ;Switch_B1.c: 196: if (Sw->DebounceTime >= (60 / 20)) {
  5875  030E  087B               	movf	_Sw,w
  5876  030F  3E02               	addlw	2
  5877  0310  0086               	movwf	6
  5878  0311  3001               	movlw	1	; select bank2/3
  5879  0312  0087               	movwf	7
  5880  0313  3003               	movlw	3
  5881  0314  0201               	subwf	1,w
  5882  0315  1C03               	skipc
  5883  0316  0008               	return
  5884                           
  5885                           ;Switch_B1.c: 197: Sw->DebounceTime = 0;
  5886  0317  087B               	movf	_Sw,w
  5887  0318  3E02               	addlw	2
  5888  0319  0086               	movwf	6
  5889  031A  3001               	movlw	1	; select bank2/3
  5890  031B  0087               	movwf	7
  5891  031C  0181               	clrf	1
  5892                           
  5893                           ;Switch_B1.c: 198: Sw->Debounce = 0;
  5894  031D  087B               	movf	_Sw,w
  5895  031E  0086               	movwf	6
  5896  031F  3001               	movlw	1	; select bank2/3
  5897  0320  0087               	movwf	7
  5898  0321  1101               	bcf	1,2
  5899                           
  5900                           ;Switch_B1.c: 199: Sw->Hold1Time = 0;
  5901  0322  087B               	movf	_Sw,w
  5902  0323  3E03               	addlw	3
  5903  0324  0086               	movwf	6
  5904  0325  3001               	movlw	1	; select bank2/3
  5905  0326  0087               	movwf	7
  5906  0327  3000               	movlw	0
  5907  0328  3FC0               	movwi [0]fsr1
  5908  0329  3FC1               	movwi [1]fsr1
  5909                           
  5910                           ;Switch_B1.c: 200: Sw->Hold1 = 0;
  5911  032A  087B               	movf	_Sw,w
  5912  032B  0086               	movwf	6
  5913  032C  3001               	movlw	1	; select bank2/3
  5914  032D  0087               	movwf	7
  5915  032E  1181               	bcf	1,3
  5916                           
  5917                           ;Switch_B1.c: 201: Sw->Hold2Time = 0;
  5918  032F  087B               	movf	_Sw,w
  5919  0330  3E05               	addlw	5
  5920  0331  0086               	movwf	6
  5921  0332  3001               	movlw	1	; select bank2/3
  5922  0333  0087               	movwf	7
  5923  0334  3000               	movlw	0
  5924  0335  3FC0               	movwi [0]fsr1
  5925  0336  3FC1               	movwi [1]fsr1
  5926                           
  5927                           ;Switch_B1.c: 202: Sw->Hold2 = 0;
  5928  0337  087B               	movf	_Sw,w
  5929  0338  0086               	movwf	6
  5930  0339  3001               	movlw	1	; select bank2/3
  5931  033A  0087               	movwf	7
  5932  033B  1201               	bcf	1,4
  5933                           
  5934                           ;Switch_B1.c: 203: Sw->Hold3Time = 0;
  5935  033C  087B               	movf	_Sw,w
  5936  033D  3E07               	addlw	7
  5937  033E  0086               	movwf	6
  5938  033F  3001               	movlw	1	; select bank2/3
  5939  0340  0087               	movwf	7
  5940  0341  3000               	movlw	0
  5941  0342  3FC0               	movwi [0]fsr1
  5942  0343  3FC1               	movwi [1]fsr1
  5943                           
  5944                           ;Switch_B1.c: 204: Sw->Hold3 = 0;
  5945  0344  087B               	movf	_Sw,w
  5946  0345  0086               	movwf	6
  5947  0346  3001               	movlw	1	; select bank2/3
  5948  0347  0087               	movwf	7
  5949  0348  1281               	bcf	1,5
  5950                           
  5951                           ;Switch_B1.c: 206: setDimmerLights_SwOff(sw);
  5952  0349  082C               	movf	setSw_Main@sw,w
  5953  034A  3192  22CE  3181   	fcall	_setDimmerLights_SwOff
  5954                           
  5955                           ;Switch_B1.c: 210: setRF_Learn(0);
  5956  034D  3000               	movlw	0
  5957  034E  319C  24E2         	fcall	_setRF_Learn
  5958                           
  5959                           ;Switch_B1.c: 212: }
  5960                           ;Switch_B1.c: 213: }
  5961                           ;Switch_B1.c: 214: }
  5962                           ;Switch_B1.c: 215: } else {
  5963  0350  0008               	return
  5964  0351                     l2539:	
  5965                           
  5966                           ;Switch_B1.c: 216: if (myMain.PowerON == 1) {
  5967  0351  0022               	movlb	2	; select bank2
  5968  0352  1C20               	btfss	_myMain^(0+256),0
  5969  0353  0008               	return
  5970                           
  5971                           ;Switch_B1.c: 217: Sw->Enable = 1;
  5972  0354  087B               	movf	_Sw,w
  5973  0355  0086               	movwf	6
  5974  0356  3001               	movlw	1	; select bank2/3
  5975  0357  0087               	movwf	7
  5976  0358  1401               	bsf	1,0
  5977  0359  0008               	return
  5978  035A                     __end_of_setSw_Main:	
  5979                           
  5980                           	psect	text14
  5981  1CE2                     __ptext14:	
  5982 ;; *************** function _setRF_Learn *****************
  5983 ;; Defined at:
  5984 ;;		line 33 in file "../src/RF_Control_B1.c"
  5985 ;; Parameters:    Size  Location     Type
  5986 ;;  command         1    wreg     unsigned char 
  5987 ;; Auto vars:     Size  Location     Type
  5988 ;;  command         1    3[COMMON] unsigned char 
  5989 ;; Return value:  Size  Location     Type
  5990 ;;		None               void
  5991 ;; Registers used:
  5992 ;;		wreg, status,2, status,0
  5993 ;; Tracked objects:
  5994 ;;		On entry : 0/0
  5995 ;;		On exit  : 0/0
  5996 ;;		Unchanged: 0/0
  5997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5999 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6000 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6001 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6002 ;;Total ram usage:        2 bytes
  6003 ;; Hardware stack levels used:    1
  6004 ;; Hardware stack levels required when called:    3
  6005 ;; This function calls:
  6006 ;;		Nothing
  6007 ;; This function is called by:
  6008 ;;		_setSw_Main
  6009 ;; This function uses a non-reentrant model
  6010 ;;
  6011                           
  6012                           
  6013                           ;psect for function _setRF_Learn
  6014  1CE2                     _setRF_Learn:	
  6015                           
  6016                           ;incstack = 0
  6017                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6018                           ;setRF_Learn@command stored from wreg
  6019  1CE2  00F3               	movwf	setRF_Learn@command
  6020                           
  6021                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  6022  1CE3  0873               	movf	setRF_Learn@command,w
  6023  1CE4  3A01               	xorlw	1
  6024  1CE5  3000               	movlw	0
  6025  1CE6  1903               	skipnz
  6026  1CE7  3001               	movlw	1
  6027  1CE8  00F2               	movwf	??_setRF_Learn
  6028  1CE9  0EF2               	swapf	??_setRF_Learn,f
  6029  1CEA  0DF2               	rlf	??_setRF_Learn,f
  6030  1CEB  0DF2               	rlf	??_setRF_Learn,f
  6031  1CEC  0021               	movlb	1	; select bank1
  6032  1CED  0820               	movf	_RF1^(0+128),w
  6033  1CEE  0672               	xorwf	??_setRF_Learn,w
  6034  1CEF  39BF               	andlw	-65
  6035  1CF0  0672               	xorwf	??_setRF_Learn,w
  6036  1CF1  00A0               	movwf	_RF1^(0+128)
  6037  1CF2  0008               	return
  6038  1CF3                     __end_of_setRF_Learn:	
  6039                           
  6040                           	psect	text15
  6041  10FF                     __ptext15:	
  6042 ;; *************** function _setDimmerLights_DimmingOn *****************
  6043 ;; Defined at:
  6044 ;;		line 711 in file "../src/Dimmer_B1.c"
  6045 ;; Parameters:    Size  Location     Type
  6046 ;;  sw              1    wreg     unsigned char 
  6047 ;; Auto vars:     Size  Location     Type
  6048 ;;  sw              1    4[COMMON] unsigned char 
  6049 ;; Return value:  Size  Location     Type
  6050 ;;		None               void
  6051 ;; Registers used:
  6052 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6053 ;; Tracked objects:
  6054 ;;		On entry : 0/0
  6055 ;;		On exit  : 0/0
  6056 ;;		Unchanged: 0/0
  6057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6059 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6061 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6062 ;;Total ram usage:        1 bytes
  6063 ;; Hardware stack levels used:    1
  6064 ;; Hardware stack levels required when called:    4
  6065 ;; This function calls:
  6066 ;;		_DimmerLights_SelectPointer
  6067 ;; This function is called by:
  6068 ;;		_setSw_Main
  6069 ;; This function uses a non-reentrant model
  6070 ;;
  6071                           
  6072                           
  6073                           ;psect for function _setDimmerLights_DimmingOn
  6074  10FF                     _setDimmerLights_DimmingOn:	
  6075                           
  6076                           ;incstack = 0
  6077                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6078                           ;setDimmerLights_DimmingOn@sw stored from wreg
  6079  10FF  00F4               	movwf	setDimmerLights_DimmingOn@sw
  6080                           
  6081                           ;Dimmer_B1.c: 717: DimmerLights_SelectPointer(sw);
  6082  1100  0874               	movf	setDimmerLights_DimmingOn@sw,w
  6083  1101  319D  2567  3190   	fcall	_DimmerLights_SelectPointer
  6084                           
  6085                           ;Dimmer_B1.c: 718: if (DimmerLights->Trigger == 0) {
  6086  1104  0021               	movlb	1	; select bank1
  6087  1105  0846               	movf	_DimmerLights^(0+128),w
  6088  1106  0086               	movwf	6
  6089  1107  3001               	movlw	1	; select bank2/3
  6090  1108  0087               	movwf	7
  6091  1109  1881               	btfsc	1,1
  6092  110A  0008               	return
  6093                           
  6094                           ;Dimmer_B1.c: 719: if (DimmerLights->SwFlag == 1) {
  6095  110B  0846               	movf	_DimmerLights^(0+128),w
  6096  110C  0086               	movwf	6
  6097  110D  3001               	movlw	1	; select bank2/3
  6098  110E  0087               	movwf	7
  6099  110F  1C01               	btfss	1,0
  6100  1110  0008               	return
  6101                           
  6102                           ;Dimmer_B1.c: 720: DimmerLights->Status = 1;
  6103  1111  0A46               	incf	_DimmerLights^(0+128),w
  6104  1112  0086               	movwf	6
  6105  1113  3001               	movlw	1	; select bank2/3
  6106  1114  0087               	movwf	7
  6107  1115  1401               	bsf	1,0
  6108                           
  6109                           ;Dimmer_B1.c: 722: DimmerLights->DimmingSwFlag = 1;
  6110  1116  0846               	movf	_DimmerLights^(0+128),w
  6111  1117  0086               	movwf	6
  6112  1118  3001               	movlw	1	; select bank2/3
  6113  1119  0087               	movwf	7
  6114  111A  1581               	bsf	1,3
  6115                           
  6116                           ;Dimmer_B1.c: 723: DimmerLights->DimmingTrigger = 1;
  6117  111B  0846               	movf	_DimmerLights^(0+128),w
  6118  111C  0086               	movwf	6
  6119  111D  3001               	movlw	1	; select bank2/3
  6120  111E  0087               	movwf	7
  6121  111F  1601               	bsf	1,4
  6122                           
  6123                           ;Dimmer_B1.c: 724: DimmerLights->DimmingSwitch = 1;
  6124  1120  0846               	movf	_DimmerLights^(0+128),w
  6125  1121  0086               	movwf	6
  6126  1122  3001               	movlw	1	; select bank2/3
  6127  1123  0087               	movwf	7
  6128  1124  1681               	bsf	1,5
  6129  1125  0008               	return
  6130  1126                     __end_of_setDimmerLights_DimmingOn:	
  6131                           
  6132                           	psect	text16
  6133  1F5B                     __ptext16:	
  6134 ;; *************** function _getSw_KeyStatus *****************
  6135 ;; Defined at:
  6136 ;;		line 223 in file "../src/Switch_B1.c"
  6137 ;; Parameters:    Size  Location     Type
  6138 ;;  sw              1    wreg     unsigned char 
  6139 ;; Auto vars:     Size  Location     Type
  6140 ;;  sw              1    6[COMMON] unsigned char 
  6141 ;;  status          1    5[COMMON] unsigned char 
  6142 ;; Return value:  Size  Location     Type
  6143 ;;                  1    wreg      unsigned char 
  6144 ;; Registers used:
  6145 ;;		wreg, status,2
  6146 ;; Tracked objects:
  6147 ;;		On entry : 0/0
  6148 ;;		On exit  : 0/0
  6149 ;;		Unchanged: 0/0
  6150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6152 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6153 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6154 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6155 ;;Total ram usage:        5 bytes
  6156 ;; Hardware stack levels used:    1
  6157 ;; Hardware stack levels required when called:    3
  6158 ;; This function calls:
  6159 ;;		Nothing
  6160 ;; This function is called by:
  6161 ;;		_setSw_Main
  6162 ;; This function uses a non-reentrant model
  6163 ;;
  6164                           
  6165                           
  6166                           ;psect for function _getSw_KeyStatus
  6167  1F5B                     _getSw_KeyStatus:	
  6168                           
  6169                           ;incstack = 0
  6170                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6171                           ;getSw_KeyStatus@sw stored from wreg
  6172  1F5B  00F6               	movwf	getSw_KeyStatus@sw
  6173                           
  6174                           ;Switch_B1.c: 224: char status = 0;
  6175  1F5C  01F5               	clrf	getSw_KeyStatus@status
  6176                           
  6177                           ;Switch_B1.c: 236: if (sw == 1) {
  6178  1F5D  0876               	movf	getSw_KeyStatus@sw,w
  6179  1F5E  3A01               	xorlw	1
  6180  1F5F  1D03               	skipz
  6181  1F60  2F6A               	goto	l7610
  6182                           
  6183                           ;Switch_B1.c: 237: status = RA6 == 1 || RA4 == 1 ? 1 : 0;
  6184  1F61  01F3               	clrf	_getSw_KeyStatus$5839
  6185  1F62  0AF3               	incf	_getSw_KeyStatus$5839,f
  6186  1F63  0020               	movlb	0	; select bank0
  6187  1F64  1F0C               	btfss	12,6	;volatile
  6188  1F65  1A0C               	btfsc	12,4	;volatile
  6189  1F66  2F68               	goto	l7608
  6190  1F67  01F3               	clrf	_getSw_KeyStatus$5839
  6191  1F68                     l7608:	
  6192  1F68  0873               	movf	_getSw_KeyStatus$5839,w
  6193  1F69  2F76               	goto	L2
  6194  1F6A                     l7610:	
  6195                           ;Switch_B1.c: 238: } else if (sw == 2) {
  6196                           
  6197  1F6A  0876               	movf	getSw_KeyStatus@sw,w
  6198  1F6B  3A02               	xorlw	2
  6199  1F6C  1D03               	skipz
  6200  1F6D  2F79               	goto	l7620
  6201                           
  6202                           ;Switch_B1.c: 239: status = RA0 == 1 || RB1 == 1 ? 1 : 0;
  6203  1F6E  01F4               	clrf	_getSw_KeyStatus$5840
  6204  1F6F  0AF4               	incf	_getSw_KeyStatus$5840,f
  6205  1F70  0020               	movlb	0	; select bank0
  6206  1F71  1C0C               	btfss	12,0	;volatile
  6207  1F72  188D               	btfsc	13,1	;volatile
  6208  1F73  2F75               	goto	l7618
  6209  1F74  01F4               	clrf	_getSw_KeyStatus$5840
  6210  1F75                     l7618:	
  6211  1F75  0874               	movf	_getSw_KeyStatus$5840,w
  6212  1F76                     L2:	
  6213  1F76  00F2               	movwf	??_getSw_KeyStatus
  6214  1F77  0872               	movf	??_getSw_KeyStatus,w
  6215  1F78  00F5               	movwf	getSw_KeyStatus@status
  6216  1F79                     l7620:	
  6217                           
  6218                           ;Switch_B1.c: 240: }
  6219                           ;Switch_B1.c: 247: return status;
  6220  1F79  0875               	movf	getSw_KeyStatus@status,w
  6221  1F7A  0008               	return
  6222  1F7B                     __end_of_getSw_KeyStatus:	
  6223                           
  6224                           	psect	text17
  6225  1D17                     __ptext17:	
  6226 ;; *************** function _SwPointSelect *****************
  6227 ;; Defined at:
  6228 ;;		line 25 in file "../src/Switch_B1.c"
  6229 ;; Parameters:    Size  Location     Type
  6230 ;;  sw              1    wreg     unsigned char 
  6231 ;; Auto vars:     Size  Location     Type
  6232 ;;  sw              1    3[COMMON] unsigned char 
  6233 ;; Return value:  Size  Location     Type
  6234 ;;		None               void
  6235 ;; Registers used:
  6236 ;;		wreg
  6237 ;; Tracked objects:
  6238 ;;		On entry : 0/0
  6239 ;;		On exit  : 0/0
  6240 ;;		Unchanged: 0/0
  6241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6243 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6244 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6245 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6246 ;;Total ram usage:        2 bytes
  6247 ;; Hardware stack levels used:    1
  6248 ;; Hardware stack levels required when called:    3
  6249 ;; This function calls:
  6250 ;;		Nothing
  6251 ;; This function is called by:
  6252 ;;		_setSw_Main
  6253 ;; This function uses a non-reentrant model
  6254 ;;
  6255                           
  6256                           
  6257                           ;psect for function _SwPointSelect
  6258  1D17                     _SwPointSelect:	
  6259                           
  6260                           ;incstack = 0
  6261                           ; Regs used in _SwPointSelect: [wreg]
  6262                           ;SwPointSelect@sw stored from wreg
  6263  1D17  00F3               	movwf	SwPointSelect@sw
  6264                           
  6265                           ;Switch_B1.c: 28: if (sw == 1) {
  6266  1D18  0873               	movf	SwPointSelect@sw,w
  6267  1D19  3A01               	xorlw	1
  6268  1D1A  1D03               	skipz
  6269  1D1B  2D21               	goto	l7594
  6270                           
  6271                           ;Switch_B1.c: 29: Sw = &Sw1;
  6272  1D1C  30BE               	movlw	_Sw1& (0+255)
  6273  1D1D  00F2               	movwf	??_SwPointSelect
  6274  1D1E  0872               	movf	??_SwPointSelect,w
  6275  1D1F  00FB               	movwf	_Sw
  6276                           
  6277                           ;Switch_B1.c: 30: }
  6278  1D20  0008               	return
  6279  1D21                     l7594:	
  6280                           
  6281                           ;Switch_B1.c: 33: else if (sw == 2) {
  6282  1D21  0873               	movf	SwPointSelect@sw,w
  6283  1D22  3A02               	xorlw	2
  6284  1D23  1D03               	skipz
  6285  1D24  0008               	return
  6286                           
  6287                           ;Switch_B1.c: 34: Sw = &Sw2;
  6288  1D25  30C7               	movlw	_Sw2& (0+255)
  6289  1D26  00F2               	movwf	??_SwPointSelect
  6290  1D27  0872               	movf	??_SwPointSelect,w
  6291  1D28  00FB               	movwf	_Sw
  6292  1D29  0008               	return
  6293  1D2A                     __end_of_SwPointSelect:	
  6294                           
  6295                           	psect	text18
  6296  1BAF                     __ptext18:	
  6297 ;; *************** function _Switch_Initialization *****************
  6298 ;; Defined at:
  6299 ;;		line 46 in file "../src/Switch_B1.c"
  6300 ;; Parameters:    Size  Location     Type
  6301 ;;		None
  6302 ;; Auto vars:     Size  Location     Type
  6303 ;;		None
  6304 ;; Return value:  Size  Location     Type
  6305 ;;		None               void
  6306 ;; Registers used:
  6307 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6308 ;; Tracked objects:
  6309 ;;		On entry : 0/0
  6310 ;;		On exit  : 0/0
  6311 ;;		Unchanged: 0/0
  6312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6316 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6317 ;;Total ram usage:        0 bytes
  6318 ;; Hardware stack levels used:    1
  6319 ;; Hardware stack levels required when called:    6
  6320 ;; This function calls:
  6321 ;;		_TouchPower
  6322 ;;		_setSw_Initialization
  6323 ;; This function is called by:
  6324 ;;		_main
  6325 ;; This function uses a non-reentrant model
  6326 ;;
  6327                           
  6328                           
  6329                           ;psect for function _Switch_Initialization
  6330  1BAF                     _Switch_Initialization:	
  6331                           
  6332                           ;Switch_B1.c: 47: TouchPower();
  6333                           
  6334                           ;incstack = 0
  6335                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6336  1BAF  319D  25D0  319B   	fcall	_TouchPower
  6337                           
  6338                           ;Switch_B1.c: 49: WPUB1 = 0;
  6339  1BB2  0024               	movlb	4	; select bank4
  6340  1BB3  108D               	bcf	13,1	;volatile
  6341                           
  6342                           ;Switch_B1.c: 58: setSw_Initialization(1);
  6343  1BB4  3001               	movlw	1
  6344  1BB5  319B  230B  319B   	fcall	_setSw_Initialization
  6345                           
  6346                           ;Switch_B1.c: 62: setSw_Initialization(2);
  6347  1BB8  3002               	movlw	2
  6348  1BB9  319B  230B         	fcall	_setSw_Initialization
  6349  1BBB  0008               	return
  6350  1BBC                     __end_of_Switch_Initialization:	
  6351                           
  6352                           	psect	text19
  6353  1B0B                     __ptext19:	
  6354 ;; *************** function _setSw_Initialization *****************
  6355 ;; Defined at:
  6356 ;;		line 93 in file "../src/Switch_B1.c"
  6357 ;; Parameters:    Size  Location     Type
  6358 ;;  sw              1    wreg     unsigned char 
  6359 ;; Auto vars:     Size  Location     Type
  6360 ;;  sw              1    6[COMMON] unsigned char 
  6361 ;; Return value:  Size  Location     Type
  6362 ;;		None               void
  6363 ;; Registers used:
  6364 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6365 ;; Tracked objects:
  6366 ;;		On entry : 0/0
  6367 ;;		On exit  : 0/0
  6368 ;;		Unchanged: 0/0
  6369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6371 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6372 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6373 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6374 ;;Total ram usage:        1 bytes
  6375 ;; Hardware stack levels used:    1
  6376 ;; Hardware stack levels required when called:    5
  6377 ;; This function calls:
  6378 ;;		_setLED
  6379 ;; This function is called by:
  6380 ;;		_Switch_Initialization
  6381 ;; This function uses a non-reentrant model
  6382 ;;
  6383                           
  6384                           
  6385                           ;psect for function _setSw_Initialization
  6386  1B0B                     _setSw_Initialization:	
  6387                           
  6388                           ;incstack = 0
  6389                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6390                           ;setSw_Initialization@sw stored from wreg
  6391  1B0B  00F6               	movwf	setSw_Initialization@sw
  6392                           
  6393                           ;Switch_B1.c: 94: setLED(sw, 1);
  6394  1B0C  01F4               	clrf	setLED@command
  6395  1B0D  0AF4               	incf	setLED@command,f
  6396  1B0E  0876               	movf	setSw_Initialization@sw,w
  6397  1B0F  3197  2741         	fcall	_setLED
  6398  1B11  0008               	return
  6399  1B12                     __end_of_setSw_Initialization:	
  6400                           
  6401                           	psect	text20
  6402  1DD0                     __ptext20:	
  6403 ;; *************** function _TouchPower *****************
  6404 ;; Defined at:
  6405 ;;		line 10 in file "../src/Switch_B1.c"
  6406 ;; Parameters:    Size  Location     Type
  6407 ;;		None
  6408 ;; Auto vars:     Size  Location     Type
  6409 ;;		None
  6410 ;; Return value:  Size  Location     Type
  6411 ;;		None               void
  6412 ;; Registers used:
  6413 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6414 ;; Tracked objects:
  6415 ;;		On entry : 0/0
  6416 ;;		On exit  : 0/0
  6417 ;;		Unchanged: 0/0
  6418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6419 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6420 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6421 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6422 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6423 ;;Total ram usage:        0 bytes
  6424 ;; Hardware stack levels used:    1
  6425 ;; Hardware stack levels required when called:    4
  6426 ;; This function calls:
  6427 ;;		_Timeout_Counter
  6428 ;;		_set_TimeoutCleared
  6429 ;; This function is called by:
  6430 ;;		_Switch_Initialization
  6431 ;;		_Switch_Main
  6432 ;; This function uses a non-reentrant model
  6433 ;;
  6434                           
  6435                           
  6436                           ;psect for function _TouchPower
  6437  1DD0                     _TouchPower:	
  6438                           
  6439                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6440                           
  6441                           ;incstack = 0
  6442                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6443  1DD0  0022               	movlb	2	; select bank2
  6444  1DD1  1C20               	btfss	_myMain^(0+256),0
  6445  1DD2  0008               	return
  6446                           
  6447                           ;Switch_B1.c: 12: if (RC5 == 0) {
  6448  1DD3  0020               	movlb	0	; select bank0
  6449  1DD4  1A8E               	btfsc	14,5	;volatile
  6450  1DD5  0008               	return
  6451  1DD6  2DDC               	goto	l9846
  6452  1DD7                     l2517:	
  6453                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6454                           
  6455                           
  6456                           ;Switch_B1.c: 14: RC5 = 1;
  6457  1DD7  0020               	movlb	0	; select bank0
  6458  1DD8  168E               	bsf	14,5	;volatile
  6459                           
  6460                           ;Switch_B1.c: 15: Timeout_Counter();
  6461  1DD9  319D  25E5  319D   	fcall	_Timeout_Counter
  6462  1DDC                     l9846:	
  6463  1DDC  0020               	movlb	0	; select bank0
  6464  1DDD  1A8E               	btfsc	14,5	;volatile
  6465  1DDE  2DE2               	goto	l9850
  6466  1DDF  0022               	movlb	2	; select bank2
  6467  1DE0  1D2B               	btfss	(_myMain^(0+256)+11),2
  6468  1DE1  2DD7               	goto	l2517
  6469  1DE2                     l9850:	
  6470                           
  6471                           ;Switch_B1.c: 16: }
  6472                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6473  1DE2  319A  22DE         	fcall	_set_TimeoutCleared
  6474  1DE4  0008               	return
  6475  1DE5                     __end_of_TouchPower:	
  6476                           
  6477                           	psect	text21
  6478  1ADE                     __ptext21:	
  6479 ;; *************** function _set_TimeoutCleared *****************
  6480 ;; Defined at:
  6481 ;;		line 282 in file "../src/main_B1.c"
  6482 ;; Parameters:    Size  Location     Type
  6483 ;;		None
  6484 ;; Auto vars:     Size  Location     Type
  6485 ;;		None
  6486 ;; Return value:  Size  Location     Type
  6487 ;;		None               void
  6488 ;; Registers used:
  6489 ;;		status,2
  6490 ;; Tracked objects:
  6491 ;;		On entry : 0/0
  6492 ;;		On exit  : 0/0
  6493 ;;		Unchanged: 0/0
  6494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6498 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6499 ;;Total ram usage:        0 bytes
  6500 ;; Hardware stack levels used:    1
  6501 ;; Hardware stack levels required when called:    3
  6502 ;; This function calls:
  6503 ;;		Nothing
  6504 ;; This function is called by:
  6505 ;;		_getAD
  6506 ;;		_TouchPower
  6507 ;; This function uses a non-reentrant model
  6508 ;;
  6509                           
  6510                           
  6511                           ;psect for function _set_TimeoutCleared
  6512  1ADE                     _set_TimeoutCleared:	
  6513                           
  6514                           ;main_B1.c: 283: myMain.Timeout = 0;
  6515                           
  6516                           ;incstack = 0
  6517                           ; Regs used in _set_TimeoutCleared: [status,2]
  6518  1ADE  0022               	movlb	2	; select bank2
  6519  1ADF  112B               	bcf	(_myMain^(0+256)+11),2
  6520                           
  6521                           ;main_B1.c: 284: myMain.Timeout_Counter = 0;
  6522  1AE0  01AC               	clrf	(_myMain^(0+256)+12)
  6523  1AE1  01AD               	clrf	((_myMain+1)^(0+256)+12)
  6524  1AE2  0008               	return
  6525  1AE3                     __end_of_set_TimeoutCleared:	
  6526                           
  6527                           	psect	text22
  6528  1DE5                     __ptext22:	
  6529 ;; *************** function _Timeout_Counter *****************
  6530 ;; Defined at:
  6531 ;;		line 273 in file "../src/main_B1.c"
  6532 ;; Parameters:    Size  Location     Type
  6533 ;;		None
  6534 ;; Auto vars:     Size  Location     Type
  6535 ;;		None
  6536 ;; Return value:  Size  Location     Type
  6537 ;;		None               void
  6538 ;; Registers used:
  6539 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6540 ;; Tracked objects:
  6541 ;;		On entry : 0/0
  6542 ;;		On exit  : 0/0
  6543 ;;		Unchanged: 0/0
  6544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6548 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6549 ;;Total ram usage:        0 bytes
  6550 ;; Hardware stack levels used:    1
  6551 ;; Hardware stack levels required when called:    3
  6552 ;; This function calls:
  6553 ;;		Nothing
  6554 ;; This function is called by:
  6555 ;;		_getAD
  6556 ;;		_TouchPower
  6557 ;; This function uses a non-reentrant model
  6558 ;;
  6559                           
  6560                           
  6561                           ;psect for function _Timeout_Counter
  6562  1DE5                     _Timeout_Counter:	
  6563                           
  6564                           ;main_B1.c: 274: myMain.Timeout_Counter++;
  6565                           
  6566                           ;incstack = 0
  6567                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6568  1DE5  3001               	movlw	1
  6569  1DE6  0022               	movlb	2	; select bank2
  6570  1DE7  07AC               	addwf	(_myMain^(0+256)+12),f
  6571  1DE8  3000               	movlw	0
  6572  1DE9  3DAD               	addwfc	((_myMain+1)^(0+256)+12),f
  6573                           
  6574                           ;main_B1.c: 275: if (myMain.Timeout_Counter == 25000) {
  6575  1DEA  300C               	movlw	12
  6576  1DEB  3E20               	addlw	_myMain& (0+255)
  6577  1DEC  0086               	movwf	6
  6578  1DED  3001               	movlw	1	; select bank2/3
  6579  1DEE  0087               	movwf	7
  6580  1DEF  3F40               	moviw [0]fsr1
  6581  1DF0  3AA8               	xorlw	168
  6582  1DF1  1D03               	skipz
  6583  1DF2  2DF5               	goto	u10775
  6584  1DF3  3F41               	moviw [1]fsr1
  6585  1DF4  3A61               	xorlw	97
  6586  1DF5                     u10775:	
  6587  1DF5  1D03               	skipz
  6588  1DF6  0008               	return
  6589                           
  6590                           ;main_B1.c: 276: myMain.Timeout_Counter = 0;
  6591  1DF7  01AC               	clrf	(_myMain^(0+256)+12)
  6592  1DF8  01AD               	clrf	((_myMain+1)^(0+256)+12)
  6593                           
  6594                           ;main_B1.c: 277: myMain.Timeout = 1;
  6595  1DF9  152B               	bsf	(_myMain^(0+256)+11),2
  6596  1DFA  0008               	return
  6597  1DFB                     __end_of_Timeout_Counter:	
  6598                           
  6599                           	psect	text23
  6600  1ABC                     __ptext23:	
  6601 ;; *************** function _RF_Main *****************
  6602 ;; Defined at:
  6603 ;;		line 26 in file "../src/RF_Control_B1.c"
  6604 ;; Parameters:    Size  Location     Type
  6605 ;;		None
  6606 ;; Auto vars:     Size  Location     Type
  6607 ;;		None
  6608 ;; Return value:  Size  Location     Type
  6609 ;;		None               void
  6610 ;; Registers used:
  6611 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6612 ;; Tracked objects:
  6613 ;;		On entry : 0/0
  6614 ;;		On exit  : 0/0
  6615 ;;		Unchanged: 0/0
  6616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6620 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6621 ;;Total ram usage:        0 bytes
  6622 ;; Hardware stack levels used:    1
  6623 ;; Hardware stack levels required when called:   10
  6624 ;; This function calls:
  6625 ;;		_setRF_Main
  6626 ;; This function is called by:
  6627 ;;		_main
  6628 ;; This function uses a non-reentrant model
  6629 ;;
  6630                           
  6631                           
  6632                           ;psect for function _RF_Main
  6633  1ABC                     _RF_Main:	
  6634                           
  6635                           ;RF_Control_B1.c: 28: setRF_Main();
  6636                           
  6637                           ;incstack = 0
  6638                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6639  1ABC  3186  2600         	fcall	_setRF_Main
  6640  1ABE  0008               	return
  6641  1ABF                     __end_of_RF_Main:	
  6642                           
  6643                           	psect	text24
  6644  0600                     __ptext24:	
  6645 ;; *************** function _setRF_Main *****************
  6646 ;; Defined at:
  6647 ;;		line 53 in file "../src/RF_Control_B1.c"
  6648 ;; Parameters:    Size  Location     Type
  6649 ;;		None
  6650 ;; Auto vars:     Size  Location     Type
  6651 ;;  error           1   76[BANK0 ] unsigned char 
  6652 ;; Return value:  Size  Location     Type
  6653 ;;		None               void
  6654 ;; Registers used:
  6655 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6656 ;; Tracked objects:
  6657 ;;		On entry : 0/0
  6658 ;;		On exit  : 0/0
  6659 ;;		Unchanged: 0/0
  6660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6661 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6662 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6663 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6664 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6665 ;;Total ram usage:        2 bytes
  6666 ;; Hardware stack levels used:    1
  6667 ;; Hardware stack levels required when called:    9
  6668 ;; This function calls:
  6669 ;;		_CC2500_PowerOnInitial
  6670 ;;		_CC2500_RxData
  6671 ;;		_CC2500_TxData
  6672 ;;		_CC2500_WriteCommand
  6673 ;;		_RF_RxDisable
  6674 ;;		___lwdiv
  6675 ;;		_getBuz_GO
  6676 ;;		_getRF_KeyStatus
  6677 ;;		_getRxData
  6678 ;; This function is called by:
  6679 ;;		_RF_Main
  6680 ;; This function uses a non-reentrant model
  6681 ;;
  6682                           
  6683                           
  6684                           ;psect for function _setRF_Main
  6685  0600                     _setRF_Main:	
  6686                           
  6687                           ;RF_Control_B1.c: 54: char error = 0;
  6688                           
  6689                           ;incstack = 0
  6690                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6691  0600  0020               	movlb	0	; select bank0
  6692  0601  01EC               	clrf	setRF_Main@error
  6693                           
  6694                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  6695  0602  0021               	movlb	1	; select bank1
  6696  0603  1C20               	btfss	_RF1^(0+128),0
  6697  0604  2EBC               	goto	l2124
  6698                           
  6699                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  6700  0605  319C  2480  3186   	fcall	_getBuz_GO
  6701  0608  0873               	movf	?_getBuz_GO+1,w
  6702  0609  0472               	iorwf	?_getBuz_GO,w
  6703  060A  1D03               	skipz
  6704  060B  2E9D               	goto	l9816
  6705                           
  6706                           ;RF_Control_B1.c: 59: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6707  060C  319C  24D1  3186   	fcall	_getRF_KeyStatus
  6708  060F  3A01               	xorlw	1
  6709  0610  3000               	movlw	0
  6710  0611  1903               	skipnz
  6711  0612  3001               	movlw	1
  6712  0613  0020               	movlb	0	; select bank0
  6713  0614  00EB               	movwf	??_setRF_Main
  6714  0615  0CEB               	rrf	??_setRF_Main,f
  6715  0616  0CEB               	rrf	??_setRF_Main,f
  6716  0617  0021               	movlb	1	; select bank1
  6717  0618  0820               	movf	_RF1^(0+128),w
  6718  0619  0020               	movlb	0	; select bank0
  6719  061A  066B               	xorwf	??_setRF_Main,w
  6720  061B  397F               	andlw	-129
  6721  061C  066B               	xorwf	??_setRF_Main,w
  6722  061D  0021               	movlb	1	; select bank1
  6723  061E  00A0               	movwf	_RF1^(0+128)
  6724                           
  6725                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  6726  061F  1FA0               	btfss	_RF1^(0+128),7
  6727  0620  2E23               	goto	l2128
  6728  0621  1F20               	btfss	_RF1^(0+128),6
  6729  0622  2E9D               	goto	l9816
  6730  0623                     l2128:	
  6731                           
  6732                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  6733  0623  1D20               	btfss	_RF1^(0+128),2
  6734  0624  2E64               	goto	l2129
  6735                           
  6736                           ;RF_Control_B1.c: 67: if (RF1.Learn == 0) {
  6737  0625  1B20               	btfsc	_RF1^(0+128),6
  6738  0626  2E5F               	goto	l9788
  6739                           
  6740                           ;RF_Control_B1.c: 68: RF1.Count++;
  6741  0627  3001               	movlw	1
  6742  0628  07A2               	addwf	(_RF1^(0+128)+2),f
  6743  0629  3000               	movlw	0
  6744  062A  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6745                           
  6746                           ;RF_Control_B1.c: 69: if (RF1.Count >= (RF1.RunTime / 20)) {
  6747  062B  3014               	movlw	20
  6748  062C  00F2               	movwf	___lwdiv@divisor
  6749  062D  3000               	movlw	0
  6750  062E  00F3               	movwf	___lwdiv@divisor+1
  6751  062F  0828               	movf	((_RF1+1)^(0+128)+7),w
  6752  0630  01F5               	clrf	___lwdiv@dividend+1
  6753  0631  07F5               	addwf	___lwdiv@dividend+1,f
  6754  0632  0827               	movf	(_RF1^(0+128)+7),w
  6755  0633  01F4               	clrf	___lwdiv@dividend
  6756  0634  07F4               	addwf	___lwdiv@dividend,f
  6757  0635  3192  2261  3186   	fcall	___lwdiv
  6758  0638  0873               	movf	?___lwdiv+1,w
  6759  0639  0021               	movlb	1	; select bank1
  6760  063A  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6761  063B  1D03               	skipz
  6762  063C  2E3F               	goto	u11285
  6763  063D  0872               	movf	?___lwdiv,w
  6764  063E  0222               	subwf	(_RF1^(0+128)+2),w
  6765  063F                     u11285:	
  6766  063F  1C03               	skipc
  6767  0640  2E9D               	goto	l9816
  6768                           
  6769                           ;RF_Control_B1.c: 70: RF1.Count = (RF1.RunTime / 20);
  6770  0641  3014               	movlw	20
  6771  0642  00F2               	movwf	___lwdiv@divisor
  6772  0643  3000               	movlw	0
  6773  0644  00F3               	movwf	___lwdiv@divisor+1
  6774  0645  0828               	movf	((_RF1+1)^(0+128)+7),w
  6775  0646  01F5               	clrf	___lwdiv@dividend+1
  6776  0647  07F5               	addwf	___lwdiv@dividend+1,f
  6777  0648  0827               	movf	(_RF1^(0+128)+7),w
  6778  0649  01F4               	clrf	___lwdiv@dividend
  6779  064A  07F4               	addwf	___lwdiv@dividend,f
  6780  064B  3192  2261  3186   	fcall	___lwdiv
  6781  064E  0873               	movf	?___lwdiv+1,w
  6782  064F  0021               	movlb	1	; select bank1
  6783  0650  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6784  0651  07A3               	addwf	((_RF1+1)^(0+128)+2),f
  6785  0652  0872               	movf	?___lwdiv,w
  6786  0653  01A2               	clrf	(_RF1^(0+128)+2)
  6787  0654  07A2               	addwf	(_RF1^(0+128)+2),f
  6788                           
  6789                           ;RF_Control_B1.c: 72: RF1.TransceiveGO = 0;
  6790  0655  1120               	bcf	_RF1^(0+128),2
  6791                           
  6792                           ;RF_Control_B1.c: 73: RF1.CorrectionCounter = 0;
  6793  0656  01AA               	clrf	(_RF1^(0+128)+10)
  6794  0657  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6795                           
  6796                           ;RF_Control_B1.c: 74: RF_RxDisable();
  6797  0658  319C  2422  3186   	fcall	_RF_RxDisable
  6798                           
  6799                           ;RF_Control_B1.c: 75: CC2500_TxData();
  6800  065B  3189  216D  3186   	fcall	_CC2500_TxData
  6801                           
  6802                           ;RF_Control_B1.c: 77: }
  6803                           ;RF_Control_B1.c: 78: } else {
  6804  065E  2E9D               	goto	l9816
  6805  065F                     l9788:	
  6806                           
  6807                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  6808  065F  0021               	movlb	1	; select bank1
  6809  0660  01A2               	clrf	(_RF1^(0+128)+2)
  6810  0661  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6811                           
  6812                           ;RF_Control_B1.c: 80: RF1.TransceiveGO = 0;
  6813  0662  1120               	bcf	_RF1^(0+128),2
  6814                           
  6815                           ;RF_Control_B1.c: 81: }
  6816                           ;RF_Control_B1.c: 82: } else {
  6817  0663  2E9D               	goto	l9816
  6818  0664                     l2129:	
  6819                           
  6820                           ;RF_Control_B1.c: 83: if (RF1.RxStatus == 1) {
  6821  0664  1DA0               	btfss	_RF1^(0+128),3
  6822  0665  2E73               	goto	l9802
  6823                           
  6824                           ;RF_Control_B1.c: 85: CC2500_RxData();
  6825  0666  3188  2042  3186   	fcall	_CC2500_RxData
  6826                           
  6827                           ;RF_Control_B1.c: 87: if (RF1.ReceiveGO == 1) {
  6828  0669  0021               	movlb	1	; select bank1
  6829  066A  1CA0               	btfss	_RF1^(0+128),1
  6830  066B  2E9D               	goto	l9816
  6831                           
  6832                           ;RF_Control_B1.c: 88: RF1.ReceiveGO = 0;
  6833  066C  10A0               	bcf	_RF1^(0+128),1
  6834                           
  6835                           ;RF_Control_B1.c: 89: RF1.CorrectionCounter = 0;
  6836  066D  01AA               	clrf	(_RF1^(0+128)+10)
  6837  066E  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6838                           
  6839                           ;RF_Control_B1.c: 97: getRxData();
  6840  066F  318A  22AD  3186   	fcall	_getRxData
  6841                           
  6842                           ;RF_Control_B1.c: 100: }
  6843                           ;RF_Control_B1.c: 101: } else {
  6844  0672  2E9D               	goto	l9816
  6845  0673                     l9802:	
  6846                           
  6847                           ;RF_Control_B1.c: 102: RF1.Count++;
  6848  0673  3001               	movlw	1
  6849  0674  0021               	movlb	1	; select bank1
  6850  0675  07A2               	addwf	(_RF1^(0+128)+2),f
  6851  0676  3000               	movlw	0
  6852  0677  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6853                           
  6854                           ;RF_Control_B1.c: 103: if (RF1.Count >= (RF1.RunTime / 20)) {
  6855  0678  3014               	movlw	20
  6856  0679  00F2               	movwf	___lwdiv@divisor
  6857  067A  3000               	movlw	0
  6858  067B  00F3               	movwf	___lwdiv@divisor+1
  6859  067C  0828               	movf	((_RF1+1)^(0+128)+7),w
  6860  067D  01F5               	clrf	___lwdiv@dividend+1
  6861  067E  07F5               	addwf	___lwdiv@dividend+1,f
  6862  067F  0827               	movf	(_RF1^(0+128)+7),w
  6863  0680  01F4               	clrf	___lwdiv@dividend
  6864  0681  07F4               	addwf	___lwdiv@dividend,f
  6865  0682  3192  2261  3186   	fcall	___lwdiv
  6866  0685  0873               	movf	?___lwdiv+1,w
  6867  0686  0021               	movlb	1	; select bank1
  6868  0687  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6869  0688  1D03               	skipz
  6870  0689  2E8C               	goto	u11315
  6871  068A  0872               	movf	?___lwdiv,w
  6872  068B  0222               	subwf	(_RF1^(0+128)+2),w
  6873  068C                     u11315:	
  6874  068C  1C03               	skipc
  6875  068D  2E9D               	goto	l9816
  6876                           
  6877                           ;RF_Control_B1.c: 104: RF1.Count = 0;
  6878  068E  01A2               	clrf	(_RF1^(0+128)+2)
  6879  068F  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6880                           
  6881                           ;RF_Control_B1.c: 106: RF1.RxStatus = 1;
  6882  0690  15A0               	bsf	_RF1^(0+128),3
  6883                           
  6884                           ;RF_Control_B1.c: 107: CC2500_WriteCommand(0x36);
  6885  0691  3036               	movlw	54
  6886  0692  319E  2642  3186   	fcall	_CC2500_WriteCommand
  6887                           
  6888                           ;RF_Control_B1.c: 108: CC2500_WriteCommand(0x3A);
  6889  0695  303A               	movlw	58
  6890  0696  319E  2642  3186   	fcall	_CC2500_WriteCommand
  6891                           
  6892                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x34);
  6893  0699  3034               	movlw	52
  6894  069A  319E  2642  3186   	fcall	_CC2500_WriteCommand
  6895  069D                     l9816:	
  6896                           
  6897                           ;RF_Control_B1.c: 111: }
  6898                           ;RF_Control_B1.c: 112: }
  6899                           ;RF_Control_B1.c: 113: }
  6900                           ;RF_Control_B1.c: 114: }
  6901                           ;RF_Control_B1.c: 115: }
  6902                           ;RF_Control_B1.c: 117: RF1.CorrectionCounter++;
  6903  069D  3001               	movlw	1
  6904  069E  0021               	movlb	1	; select bank1
  6905  069F  07AA               	addwf	(_RF1^(0+128)+10),f
  6906  06A0  3000               	movlw	0
  6907  06A1  3DAB               	addwfc	((_RF1+1)^(0+128)+10),f
  6908                           
  6909                           ;RF_Control_B1.c: 118: if (RF1.CorrectionCounter > (60000 / 20)) {
  6910  06A2  300B               	movlw	11
  6911  06A3  022B               	subwf	((_RF1+1)^(0+128)+10),w
  6912  06A4  30B9               	movlw	185
  6913  06A5  1903               	skipnz
  6914  06A6  022A               	subwf	(_RF1^(0+128)+10),w
  6915  06A7  1C03               	skipc
  6916  06A8  2EB5               	goto	l9830
  6917                           
  6918                           ;RF_Control_B1.c: 119: RF1.CorrectionCounter = 0;
  6919  06A9  01AA               	clrf	(_RF1^(0+128)+10)
  6920  06AA  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6921                           
  6922                           ;RF_Control_B1.c: 121: RF1.RxStatus = 0;
  6923  06AB  11A0               	bcf	_RF1^(0+128),3
  6924                           
  6925                           ;RF_Control_B1.c: 122: RF1.ReceiveGO = 0;
  6926  06AC  10A0               	bcf	_RF1^(0+128),1
  6927                           
  6928                           ;RF_Control_B1.c: 123: CC2500_WriteCommand(0x36);
  6929  06AD  3036               	movlw	54
  6930  06AE  319E  2642  3186   	fcall	_CC2500_WriteCommand
  6931                           
  6932                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x3A);
  6933  06B1  303A               	movlw	58
  6934  06B2  319E  2642  3186   	fcall	_CC2500_WriteCommand
  6935  06B5                     l9830:	
  6936                           
  6937                           ;RF_Control_B1.c: 125: }
  6938                           ;RF_Control_B1.c: 127: if (RF1.Timeout == 1) {
  6939  06B5  0021               	movlb	1	; select bank1
  6940  06B6  1F21               	btfss	(_RF1^(0+128)+1),6
  6941  06B7  0008               	return
  6942                           
  6943                           ;RF_Control_B1.c: 128: RF1.Timeout = 0;
  6944  06B8  1321               	bcf	(_RF1^(0+128)+1),6
  6945                           
  6946                           ;RF_Control_B1.c: 129: CC2500_PowerOnInitial();
  6947  06B9  319D  25BB         	fcall	_CC2500_PowerOnInitial
  6948                           
  6949                           ;RF_Control_B1.c: 130: }
  6950                           ;RF_Control_B1.c: 132: } else {
  6951  06BB  0008               	return
  6952  06BC                     l2124:	
  6953                           
  6954                           ;RF_Control_B1.c: 133: if (myMain.PowerON == 1) {
  6955  06BC  0022               	movlb	2	; select bank2
  6956  06BD  1C20               	btfss	_myMain^(0+256),0
  6957  06BE  0008               	return
  6958                           
  6959                           ;RF_Control_B1.c: 134: RF1.Enable = 1;
  6960  06BF  0021               	movlb	1	; select bank1
  6961  06C0  1420               	bsf	_RF1^(0+128),0
  6962  06C1  0008               	return
  6963  06C2                     __end_of_setRF_Main:	
  6964                           
  6965                           	psect	text25
  6966  0AAD                     __ptext25:	
  6967 ;; *************** function _getRxData *****************
  6968 ;; Defined at:
  6969 ;;		line 227 in file "../src/RF_Control_B1.c"
  6970 ;; Parameters:    Size  Location     Type
  6971 ;;		None
  6972 ;; Auto vars:     Size  Location     Type
  6973 ;;  error           1   74[BANK0 ] unsigned char 
  6974 ;; Return value:  Size  Location     Type
  6975 ;;		None               void
  6976 ;; Registers used:
  6977 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6978 ;; Tracked objects:
  6979 ;;		On entry : 0/0
  6980 ;;		On exit  : 0/0
  6981 ;;		Unchanged: 0/0
  6982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6984 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6985 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6986 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6987 ;;Total ram usage:        2 bytes
  6988 ;; Hardware stack levels used:    1
  6989 ;; Hardware stack levels required when called:    8
  6990 ;; This function calls:
  6991 ;;		_getMain_All_Error_Status
  6992 ;;		_setControl_Lights_Table
  6993 ;;		_setLog_Code
  6994 ;;		_setTxData
  6995 ;; This function is called by:
  6996 ;;		_setRF_Main
  6997 ;; This function uses a non-reentrant model
  6998 ;;
  6999                           
  7000                           
  7001                           ;psect for function _getRxData
  7002  0AAD                     _getRxData:	
  7003                           
  7004                           ;RF_Control_B1.c: 229: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7005                           
  7006                           ;incstack = 0
  7007                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7008  0AAD  0023               	movlb	3	; select bank3
  7009  0AAE  0820               	movf	_RF_Data^(0+384),w
  7010  0AAF  3AAA               	xorlw	170
  7011  0AB0  1D03               	skipz
  7012  0AB1  2AC3               	goto	l9596
  7013  0AB2  0821               	movf	(_RF_Data^(0+384)+1),w
  7014  0AB3  3A01               	xorlw	1
  7015  0AB4  1D03               	skipz
  7016  0AB5  2AC3               	goto	l9596
  7017                           
  7018                           ;RF_Control_B1.c: 230: product->Data[2] = 0x55;
  7019  0AB6  3055               	movlw	85
  7020  0AB7  0020               	movlb	0	; select bank0
  7021  0AB8  00E9               	movwf	??_getRxData
  7022  0AB9  086D               	movf	_product,w
  7023  0ABA  3E02               	addlw	2
  7024  0ABB  0086               	movwf	6
  7025  0ABC  3002               	movlw	2	; select bank4/5
  7026  0ABD  0087               	movwf	7
  7027  0ABE  0869               	movf	??_getRxData,w
  7028  0ABF  0081               	movwf	1
  7029                           
  7030                           ;RF_Control_B1.c: 231: setTxData();
  7031  0AC0  318F  274A         	fcall	_setTxData
  7032                           
  7033                           ;RF_Control_B1.c: 235: } else {
  7034  0AC2  0008               	return
  7035  0AC3                     l9596:	
  7036                           
  7037                           ;RF_Control_B1.c: 236: char error = getMain_All_Error_Status(0);
  7038  0AC3  3000               	movlw	0
  7039  0AC4  3191  21CC  318A   	fcall	_getMain_All_Error_Status
  7040  0AC7  0020               	movlb	0	; select bank0
  7041  0AC8  00E9               	movwf	??_getRxData
  7042  0AC9  0869               	movf	??_getRxData,w
  7043  0ACA  00EA               	movwf	getRxData@error
  7044                           
  7045                           ;RF_Control_B1.c: 237: if (error == 0) {
  7046  0ACB  08EA               	movf	getRxData@error,f
  7047  0ACC  1D03               	skipz
  7048  0ACD  2B1E               	goto	l2169
  7049                           
  7050                           ;RF_Control_B1.c: 238: if (RF1.Learn == 1) {
  7051  0ACE  0021               	movlb	1	; select bank1
  7052  0ACF  1F20               	btfss	_RF1^(0+128),6
  7053  0AD0  2ADC               	goto	l9608
  7054                           
  7055                           ;RF_Control_B1.c: 240: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  7056  0AD1  0023               	movlb	3	; select bank3
  7057  0AD2  08A0               	movf	_RF_Data^(0+384),f
  7058  0AD3  1D03               	skipz
  7059  0AD4  0008               	return
  7060  0AD5  0821               	movf	(_RF_Data^(0+384)+1),w
  7061  0AD6  3A64               	xorlw	100
  7062  0AD7  1D03               	skipz
  7063  0AD8  0008               	return
  7064                           
  7065                           ;RF_Control_B1.c: 241: setLog_Code();
  7066  0AD9  3192  222D         	fcall	_setLog_Code
  7067                           
  7068                           ;RF_Control_B1.c: 242: }
  7069                           ;RF_Control_B1.c: 243: } else {
  7070  0ADB  0008               	return
  7071  0ADC                     l9608:	
  7072                           
  7073                           ;RF_Control_B1.c: 244: if (RF_Data[20] == 210 || RF_Data[20] == 0x0a) {
  7074  0ADC  0023               	movlb	3	; select bank3
  7075  0ADD  0834               	movf	(_RF_Data^(0+384)+20),w
  7076  0ADE  3AD2               	xorlw	210
  7077  0ADF  1903               	skipnz
  7078  0AE0  2AE5               	goto	l9612
  7079  0AE1  0834               	movf	(_RF_Data^(0+384)+20),w
  7080  0AE2  3A0A               	xorlw	10
  7081  0AE3  1D03               	skipz
  7082  0AE4  0008               	return
  7083  0AE5                     l9612:	
  7084                           
  7085                           ;RF_Control_B1.c: 246: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7086  0AE5  08A0               	movf	_RF_Data^(0+384),f
  7087  0AE6  1D03               	skipz
  7088  0AE7  0008               	return
  7089  0AE8  0821               	movf	(_RF_Data^(0+384)+1),w
  7090  0AE9  3A02               	xorlw	2
  7091  0AEA  1D03               	skipz
  7092  0AEB  0008               	return
  7093                           
  7094                           ;RF_Control_B1.c: 248: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7095  0AEC  082C               	movf	(_RF_Data^(0+384)+12),w
  7096  0AED  3AFF               	xorlw	255
  7097  0AEE  1D03               	skipz
  7098  0AEF  2AFA               	goto	l9624
  7099  0AF0  082D               	movf	(_RF_Data^(0+384)+13),w
  7100  0AF1  3AFF               	xorlw	255
  7101  0AF2  1D03               	skipz
  7102  0AF3  2AFA               	goto	l9624
  7103  0AF4  082E               	movf	(_RF_Data^(0+384)+14),w
  7104  0AF5  3AFF               	xorlw	255
  7105  0AF6  1D03               	skipz
  7106  0AF7  2AFA               	goto	l9624
  7107                           
  7108                           ;RF_Control_B1.c: 249: __nop();
  7109  0AF8  0000               	nop
  7110                           
  7111                           ;RF_Control_B1.c: 250: } else {
  7112  0AF9  0008               	return
  7113  0AFA                     l9624:	
  7114                           
  7115                           ;RF_Control_B1.c: 251: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7116  0AFA  0020               	movlb	0	; select bank0
  7117  0AFB  086D               	movf	_product,w
  7118  0AFC  3E0C               	addlw	12
  7119  0AFD  0086               	movwf	6
  7120  0AFE  3002               	movlw	2	; select bank4/5
  7121  0AFF  0087               	movwf	7
  7122  0B00  0023               	movlb	3	; select bank3
  7123  0B01  082C               	movf	(_RF_Data^(0+384)+12),w
  7124  0B02  0601               	xorwf	1,w
  7125  0B03  1D03               	skipz
  7126  0B04  0008               	return
  7127  0B05  0020               	movlb	0	; select bank0
  7128  0B06  086D               	movf	_product,w
  7129  0B07  3E0D               	addlw	13
  7130  0B08  0086               	movwf	6
  7131  0B09  3002               	movlw	2	; select bank4/5
  7132  0B0A  0087               	movwf	7
  7133  0B0B  0023               	movlb	3	; select bank3
  7134  0B0C  082D               	movf	(_RF_Data^(0+384)+13),w
  7135  0B0D  0601               	xorwf	1,w
  7136  0B0E  1D03               	skipz
  7137  0B0F  0008               	return
  7138  0B10  0020               	movlb	0	; select bank0
  7139  0B11  086D               	movf	_product,w
  7140  0B12  3E0E               	addlw	14
  7141  0B13  0086               	movwf	6
  7142  0B14  3002               	movlw	2	; select bank4/5
  7143  0B15  0087               	movwf	7
  7144  0B16  0023               	movlb	3	; select bank3
  7145  0B17  082E               	movf	(_RF_Data^(0+384)+14),w
  7146  0B18  0601               	xorwf	1,w
  7147  0B19  1D03               	skipz
  7148  0B1A  0008               	return
  7149                           
  7150                           ;RF_Control_B1.c: 252: setControl_Lights_Table();
  7151  0B1B  318C  24AE         	fcall	_setControl_Lights_Table
  7152                           
  7153                           ;RF_Control_B1.c: 253: }
  7154                           ;RF_Control_B1.c: 254: }
  7155                           ;RF_Control_B1.c: 256: }
  7156                           ;RF_Control_B1.c: 267: }
  7157                           ;RF_Control_B1.c: 268: }
  7158                           ;RF_Control_B1.c: 269: } else {
  7159  0B1D  0008               	return
  7160  0B1E                     l2169:	
  7161                           
  7162                           ;RF_Control_B1.c: 270: __nop();
  7163  0B1E  0000               	nop
  7164  0B1F  0008               	return
  7165  0B20                     __end_of_getRxData:	
  7166                           
  7167                           	psect	text26
  7168  122D                     __ptext26:	
  7169 ;; *************** function _setLog_Code *****************
  7170 ;; Defined at:
  7171 ;;		line 276 in file "../src/RF_Control_B1.c"
  7172 ;; Parameters:    Size  Location     Type
  7173 ;;		None
  7174 ;; Auto vars:     Size  Location     Type
  7175 ;;		None
  7176 ;; Return value:  Size  Location     Type
  7177 ;;		None               void
  7178 ;; Registers used:
  7179 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7180 ;; Tracked objects:
  7181 ;;		On entry : 0/0
  7182 ;;		On exit  : 0/0
  7183 ;;		Unchanged: 0/0
  7184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7187 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7188 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7189 ;;Total ram usage:        1 bytes
  7190 ;; Hardware stack levels used:    1
  7191 ;; Hardware stack levels required when called:    5
  7192 ;; This function calls:
  7193 ;;		_setBuz
  7194 ;;		_setMemory_LoopSave
  7195 ;;		_setMemory_Modify
  7196 ;;		_setProductData
  7197 ;; This function is called by:
  7198 ;;		_getRxData
  7199 ;; This function uses a non-reentrant model
  7200 ;;
  7201                           
  7202                           
  7203                           ;psect for function _setLog_Code
  7204  122D                     _setLog_Code:	
  7205                           
  7206                           ;RF_Control_B1.c: 277: RF1.Learn = 0;
  7207                           
  7208                           ;incstack = 0
  7209                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7210  122D  0021               	movlb	1	; select bank1
  7211  122E  1320               	bcf	_RF1^(0+128),6
  7212                           
  7213                           ;RF_Control_B1.c: 278: setProductData(12, RF_Data[12]);
  7214  122F  0023               	movlb	3	; select bank3
  7215  1230  082C               	movf	(_RF_Data^(0+384)+12),w
  7216  1231  0020               	movlb	0	; select bank0
  7217  1232  00DE               	movwf	??_setLog_Code
  7218  1233  085E               	movf	??_setLog_Code,w
  7219  1234  00DA               	movwf	setProductData@value
  7220  1235  300C               	movlw	12
  7221  1236  319B  23D8  3192   	fcall	_setProductData
  7222                           
  7223                           ;RF_Control_B1.c: 279: setProductData(13, RF_Data[13]);
  7224  1239  0023               	movlb	3	; select bank3
  7225  123A  082D               	movf	(_RF_Data^(0+384)+13),w
  7226  123B  0020               	movlb	0	; select bank0
  7227  123C  00DE               	movwf	??_setLog_Code
  7228  123D  085E               	movf	??_setLog_Code,w
  7229  123E  00DA               	movwf	setProductData@value
  7230  123F  300D               	movlw	13
  7231  1240  319B  23D8  3192   	fcall	_setProductData
  7232                           
  7233                           ;RF_Control_B1.c: 280: setProductData(14, RF_Data[14]);
  7234  1243  0023               	movlb	3	; select bank3
  7235  1244  082E               	movf	(_RF_Data^(0+384)+14),w
  7236  1245  0020               	movlb	0	; select bank0
  7237  1246  00DE               	movwf	??_setLog_Code
  7238  1247  085E               	movf	??_setLog_Code,w
  7239  1248  00DA               	movwf	setProductData@value
  7240  1249  300E               	movlw	14
  7241  124A  319B  23D8  3192   	fcall	_setProductData
  7242                           
  7243                           ;RF_Control_B1.c: 281: setBuz(1, 100);
  7244  124D  3064               	movlw	100
  7245  124E  0020               	movlb	0	; select bank0
  7246  124F  00A4               	movwf	setBuz@time
  7247  1250  3000               	movlw	0
  7248  1251  00A5               	movwf	setBuz@time+1
  7249  1252  3001               	movlw	1
  7250  1253  3195  2584  3192   	fcall	_setBuz
  7251                           
  7252                           ;RF_Control_B1.c: 282: if (myMain.First == 1) {
  7253  1256  0022               	movlb	2	; select bank2
  7254  1257  1EA0               	btfss	_myMain^(0+256),5
  7255  1258  2A5D               	goto	l2184
  7256                           
  7257                           ;RF_Control_B1.c: 283: setMemory_LoopSave(1);
  7258  1259  3001               	movlw	1
  7259  125A  319C  24A0  3192   	fcall	_setMemory_LoopSave
  7260  125D                     l2184:	
  7261                           
  7262                           ;RF_Control_B1.c: 284: }
  7263                           ;RF_Control_B1.c: 285: setMemory_Modify(1);
  7264  125D  3001               	movlw	1
  7265  125E  319C  2490         	fcall	_setMemory_Modify
  7266  1260  0008               	return
  7267  1261                     __end_of_setLog_Code:	
  7268                           
  7269                           	psect	text27
  7270  1CA0                     __ptext27:	
  7271 ;; *************** function _setMemory_LoopSave *****************
  7272 ;; Defined at:
  7273 ;;		line 1059 in file "../src/MCU_B1.c"
  7274 ;; Parameters:    Size  Location     Type
  7275 ;;  command         1    wreg     unsigned char 
  7276 ;; Auto vars:     Size  Location     Type
  7277 ;;  command         1    3[COMMON] unsigned char 
  7278 ;; Return value:  Size  Location     Type
  7279 ;;		None               void
  7280 ;; Registers used:
  7281 ;;		wreg, status,2, status,0
  7282 ;; Tracked objects:
  7283 ;;		On entry : 0/0
  7284 ;;		On exit  : 0/0
  7285 ;;		Unchanged: 0/0
  7286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7287 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7288 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7289 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7290 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7291 ;;Total ram usage:        2 bytes
  7292 ;; Hardware stack levels used:    1
  7293 ;; Hardware stack levels required when called:    3
  7294 ;; This function calls:
  7295 ;;		Nothing
  7296 ;; This function is called by:
  7297 ;;		_setLog_Code
  7298 ;; This function uses a non-reentrant model
  7299 ;;
  7300                           
  7301                           
  7302                           ;psect for function _setMemory_LoopSave
  7303  1CA0                     _setMemory_LoopSave:	
  7304                           
  7305                           ;incstack = 0
  7306                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7307                           ;setMemory_LoopSave@command stored from wreg
  7308  1CA0  00F3               	movwf	setMemory_LoopSave@command
  7309                           
  7310                           ;MCU_B1.c: 1060: Memory.LoopSave = command == 1 ? 1 : 0;
  7311  1CA1  0873               	movf	setMemory_LoopSave@command,w
  7312  1CA2  3A01               	xorlw	1
  7313  1CA3  3000               	movlw	0
  7314  1CA4  1903               	skipnz
  7315  1CA5  3001               	movlw	1
  7316  1CA6  00F2               	movwf	??_setMemory_LoopSave
  7317  1CA7  0DF2               	rlf	??_setMemory_LoopSave,f
  7318  1CA8  0DF2               	rlf	??_setMemory_LoopSave,f
  7319  1CA9  0024               	movlb	4	; select bank4
  7320  1CAA  0844               	movf	(_Memory^(0+512)+36),w
  7321  1CAB  0672               	xorwf	??_setMemory_LoopSave,w
  7322  1CAC  39FB               	andlw	-5
  7323  1CAD  0672               	xorwf	??_setMemory_LoopSave,w
  7324  1CAE  00C4               	movwf	(_Memory^(0+512)+36)
  7325  1CAF  0008               	return
  7326  1CB0                     __end_of_setMemory_LoopSave:	
  7327                           
  7328                           	psect	text28
  7329  0CAE                     __ptext28:	
  7330 ;; *************** function _setControl_Lights_Table *****************
  7331 ;; Defined at:
  7332 ;;		line 289 in file "../src/RF_Control_B1.c"
  7333 ;; Parameters:    Size  Location     Type
  7334 ;;		None
  7335 ;; Auto vars:     Size  Location     Type
  7336 ;;		None
  7337 ;; Return value:  Size  Location     Type
  7338 ;;		None               void
  7339 ;; Registers used:
  7340 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7341 ;; Tracked objects:
  7342 ;;		On entry : 0/0
  7343 ;;		On exit  : 0/0
  7344 ;;		Unchanged: 0/0
  7345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7349 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7350 ;;Total ram usage:        0 bytes
  7351 ;; Hardware stack levels used:    1
  7352 ;; Hardware stack levels required when called:    7
  7353 ;; This function calls:
  7354 ;;		_getDimmerLights_Status
  7355 ;;		_getMain_All_LightsStatus
  7356 ;;		_setCmd_Status
  7357 ;;		_setDimmerLights_SwOff
  7358 ;;		_setDimmerLights_SwOn
  7359 ;;		_setProductData
  7360 ;;		_setRFSW_AdjControl
  7361 ;;		_setRFSW_Control
  7362 ;;		_setTxData
  7363 ;; This function is called by:
  7364 ;;		_getRxData
  7365 ;; This function uses a non-reentrant model
  7366 ;;
  7367                           
  7368                           
  7369                           ;psect for function _setControl_Lights_Table
  7370  0CAE                     _setControl_Lights_Table:	
  7371                           
  7372                           ;RF_Control_B1.c: 290: switch (RF_Data[15]) {
  7373                           
  7374                           ;incstack = 0
  7375                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7376  0CAE  2D25               	goto	l9386
  7377  0CAF                     l9362:	
  7378                           ;RF_Control_B1.c: 292: case 0x00:
  7379                           
  7380                           
  7381                           ;RF_Control_B1.c: 293: if (getMain_All_LightsStatus() == 1) {
  7382  0CAF  319C  2404  318C   	fcall	_getMain_All_LightsStatus
  7383  0CB2  3A01               	xorlw	1
  7384  0CB3  1D03               	skipz
  7385  0CB4  2CD9               	goto	l9372
  7386                           
  7387                           ;RF_Control_B1.c: 296: if (getDimmerLights_Status(1) == 1) {
  7388  0CB5  3001               	movlw	1
  7389  0CB6  319B  23E6  318C   	fcall	_getDimmerLights_Status
  7390  0CB9  3A01               	xorlw	1
  7391  0CBA  1D03               	skipz
  7392  0CBB  2CC4               	goto	l2191
  7393                           
  7394                           ;RF_Control_B1.c: 297: setDimmerLights_SwOn(1);
  7395  0CBC  3001               	movlw	1
  7396  0CBD  3196  2686  318C   	fcall	_setDimmerLights_SwOn
  7397                           
  7398                           ;RF_Control_B1.c: 298: setDimmerLights_SwOff(1);
  7399  0CC0  3001               	movlw	1
  7400  0CC1  3192  22CE  318C   	fcall	_setDimmerLights_SwOff
  7401  0CC4                     l2191:	
  7402                           
  7403                           ;RF_Control_B1.c: 299: }
  7404                           ;RF_Control_B1.c: 302: if (getDimmerLights_Status(2) == 1) {
  7405  0CC4  3002               	movlw	2
  7406  0CC5  319B  23E6  318C   	fcall	_getDimmerLights_Status
  7407  0CC8  3A01               	xorlw	1
  7408  0CC9  1D03               	skipz
  7409  0CCA  2CD3               	goto	l9370
  7410                           
  7411                           ;RF_Control_B1.c: 303: setDimmerLights_SwOn(2);
  7412  0CCB  3002               	movlw	2
  7413  0CCC  3196  2686  318C   	fcall	_setDimmerLights_SwOn
  7414                           
  7415                           ;RF_Control_B1.c: 304: setDimmerLights_SwOff(2);
  7416  0CCF  3002               	movlw	2
  7417  0CD0  3192  22CE  318C   	fcall	_setDimmerLights_SwOff
  7418  0CD3                     l9370:	
  7419                           
  7420                           ;RF_Control_B1.c: 305: }
  7421                           ;RF_Control_B1.c: 314: setCmd_Status(1, 1);
  7422  0CD3  01F2               	clrf	setCmd_Status@cmd
  7423  0CD4  0AF2               	incf	setCmd_Status@cmd,f
  7424  0CD5  3001               	movlw	1
  7425  0CD6  319D  257C         	fcall	_setCmd_Status
  7426                           
  7427                           ;RF_Control_B1.c: 315: } else {
  7428  0CD8  0008               	return
  7429  0CD9                     l9372:	
  7430                           
  7431                           ;RF_Control_B1.c: 316: setProductData(9, 0);
  7432  0CD9  0020               	movlb	0	; select bank0
  7433  0CDA  01DA               	clrf	setProductData@value
  7434  0CDB  3009               	movlw	9
  7435  0CDC  319B  23D8  318C   	fcall	_setProductData
  7436                           
  7437                           ;RF_Control_B1.c: 317: setProductData(11, 0);
  7438  0CDF  0020               	movlb	0	; select bank0
  7439  0CE0  01DA               	clrf	setProductData@value
  7440  0CE1  300B               	movlw	11
  7441  0CE2  319B  23D8  318C   	fcall	_setProductData
  7442                           
  7443                           ;RF_Control_B1.c: 318: setProductData(15, 0);
  7444  0CE5  0020               	movlb	0	; select bank0
  7445  0CE6  01DA               	clrf	setProductData@value
  7446  0CE7  300F               	movlw	15
  7447  0CE8  319B  23D8  318C   	fcall	_setProductData
  7448                           
  7449                           ;RF_Control_B1.c: 319: setProductData(17, 0);
  7450  0CEB  0020               	movlb	0	; select bank0
  7451  0CEC  01DA               	clrf	setProductData@value
  7452  0CED  3011               	movlw	17
  7453  0CEE  319B  23D8  318C   	fcall	_setProductData
  7454                           
  7455                           ;RF_Control_B1.c: 320: setTxData();
  7456  0CF1  318F  274A         	fcall	_setTxData
  7457                           
  7458                           ;RF_Control_B1.c: 321: }
  7459                           ;RF_Control_B1.c: 322: break;
  7460  0CF3  0008               	return
  7461  0CF4                     l9374:	
  7462                           ;RF_Control_B1.c: 324: case 0x20:
  7463                           
  7464                           
  7465                           ;RF_Control_B1.c: 325: setProductData(9, 0);
  7466  0CF4  0020               	movlb	0	; select bank0
  7467  0CF5  01DA               	clrf	setProductData@value
  7468  0CF6  3009               	movlw	9
  7469  0CF7  319B  23D8  318C   	fcall	_setProductData
  7470                           
  7471                           ;RF_Control_B1.c: 326: setProductData(11, 0);
  7472  0CFA  0020               	movlb	0	; select bank0
  7473  0CFB  01DA               	clrf	setProductData@value
  7474  0CFC  300B               	movlw	11
  7475  0CFD  319B  23D8  318C   	fcall	_setProductData
  7476                           
  7477                           ;RF_Control_B1.c: 327: setProductData(15, product->Data[15]);
  7478  0D00  0020               	movlb	0	; select bank0
  7479  0D01  086D               	movf	_product,w
  7480  0D02  0086               	movwf	6
  7481  0D03  3002               	movlw	2	; select bank4/5
  7482  0D04  0087               	movwf	7
  7483  0D05  3002               	movlw	2	; select bank4/5
  7484  0D06  3F4F               	moviw [15]fsr1
  7485  0D07  00DA               	movwf	setProductData@value
  7486  0D08  300F               	movlw	15
  7487  0D09  319B  23D8  318C   	fcall	_setProductData
  7488                           
  7489                           ;RF_Control_B1.c: 328: setProductData(17, 0);
  7490  0D0C  0020               	movlb	0	; select bank0
  7491  0D0D  01DA               	clrf	setProductData@value
  7492  0D0E  3011               	movlw	17
  7493  0D0F  319B  23D8  318C   	fcall	_setProductData
  7494                           
  7495                           ;RF_Control_B1.c: 329: setTxData();
  7496  0D12  318F  274A         	fcall	_setTxData
  7497                           
  7498                           ;RF_Control_B1.c: 330: break;
  7499  0D14  0008               	return
  7500  0D15                     l9376:	
  7501                           ;RF_Control_B1.c: 333: case 0x01:
  7502                           
  7503                           
  7504                           ;RF_Control_B1.c: 334: setRFSW_Control(1);
  7505  0D15  3001               	movlw	1
  7506  0D16  3193  2378         	fcall	_setRFSW_Control
  7507                           
  7508                           ;RF_Control_B1.c: 335: break;
  7509  0D18  0008               	return
  7510  0D19                     l9378:	
  7511                           ;RF_Control_B1.c: 339: case 0x11:
  7512                           
  7513                           
  7514                           ;RF_Control_B1.c: 340: setRFSW_AdjControl(1);
  7515  0D19  3001               	movlw	1
  7516  0D1A  3187  2781         	fcall	_setRFSW_AdjControl
  7517                           
  7518                           ;RF_Control_B1.c: 341: break;
  7519  0D1C  0008               	return
  7520  0D1D                     l9380:	
  7521                           ;RF_Control_B1.c: 346: case 0x02:
  7522                           
  7523                           
  7524                           ;RF_Control_B1.c: 347: setRFSW_Control(2);
  7525  0D1D  3002               	movlw	2
  7526  0D1E  3193  2378         	fcall	_setRFSW_Control
  7527                           
  7528                           ;RF_Control_B1.c: 348: break;
  7529  0D20  0008               	return
  7530  0D21                     l9382:	
  7531                           ;RF_Control_B1.c: 351: case 0x21:
  7532                           
  7533                           
  7534                           ;RF_Control_B1.c: 352: setRFSW_AdjControl(2);
  7535  0D21  3002               	movlw	2
  7536  0D22  3187  2781         	fcall	_setRFSW_AdjControl
  7537                           
  7538                           ;RF_Control_B1.c: 370: }
  7539                           
  7540                           ;RF_Control_B1.c: 353: break;
  7541  0D24  0008               	return
  7542  0D25                     l9386:	
  7543  0D25  0023               	movlb	3	; select bank3
  7544  0D26  082F               	movf	(_RF_Data^(0+384)+15),w
  7545                           
  7546                           ; Switch size 1, requested type "space"
  7547                           ; Number of cases is 6, Range of values is 0 to 33
  7548                           ; switch strategies available:
  7549                           ; Name         Instructions Cycles
  7550                           ; simple_byte           19    10 (average)
  7551                           ; direct_byte           74     6 (fixed)
  7552                           ; jumptable            260     6 (fixed)
  7553                           ;	Chosen strategy is simple_byte
  7554  0D27  3A00               	xorlw	0	; case 0
  7555  0D28  1903               	skipnz
  7556  0D29  2CAF               	goto	l9362
  7557  0D2A  3A01               	xorlw	1	; case 1
  7558  0D2B  1903               	skipnz
  7559  0D2C  2D15               	goto	l9376
  7560  0D2D  3A03               	xorlw	3	; case 2
  7561  0D2E  1903               	skipnz
  7562  0D2F  2D1D               	goto	l9380
  7563  0D30  3A13               	xorlw	19	; case 17
  7564  0D31  1903               	skipnz
  7565  0D32  2D19               	goto	l9378
  7566  0D33  3A31               	xorlw	49	; case 32
  7567  0D34  1903               	skipnz
  7568  0D35  2CF4               	goto	l9374
  7569  0D36  3A01               	xorlw	1	; case 33
  7570  0D37  1903               	skipnz
  7571  0D38  2D21               	goto	l9382
  7572  0D39  2D3A               	goto	l2200
  7573  0D3A                     l2200:	
  7574  0D3A  0008               	return
  7575  0D3B                     __end_of_setControl_Lights_Table:	
  7576                           
  7577                           	psect	text29
  7578  1378                     __ptext29:	
  7579 ;; *************** function _setRFSW_Control *****************
  7580 ;; Defined at:
  7581 ;;		line 378 in file "../src/RF_Control_B1.c"
  7582 ;; Parameters:    Size  Location     Type
  7583 ;;  sw              1    wreg     unsigned char 
  7584 ;; Auto vars:     Size  Location     Type
  7585 ;;  sw              1   72[BANK0 ] unsigned char 
  7586 ;;  status          1   71[BANK0 ] unsigned char 
  7587 ;; Return value:  Size  Location     Type
  7588 ;;		None               void
  7589 ;; Registers used:
  7590 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7591 ;; Tracked objects:
  7592 ;;		On entry : 0/0
  7593 ;;		On exit  : 0/0
  7594 ;;		Unchanged: 0/0
  7595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7597 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7598 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7599 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7600 ;;Total ram usage:        3 bytes
  7601 ;; Hardware stack levels used:    1
  7602 ;; Hardware stack levels required when called:    6
  7603 ;; This function calls:
  7604 ;;		_getDimmerLights_Status
  7605 ;;		_setBuz
  7606 ;;		_setDelayOff_GO
  7607 ;;		_setDimmerLights_SwOff
  7608 ;;		_setDimmerLights_SwOn
  7609 ;;		_setRF_DimmerLights
  7610 ;;		_setTxData
  7611 ;; This function is called by:
  7612 ;;		_setControl_Lights_Table
  7613 ;; This function uses a non-reentrant model
  7614 ;;
  7615                           
  7616                           
  7617                           ;psect for function _setRFSW_Control
  7618  1378                     _setRFSW_Control:	
  7619                           
  7620                           ;incstack = 0
  7621                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7622                           ;setRFSW_Control@sw stored from wreg
  7623  1378  0020               	movlb	0	; select bank0
  7624  1379  00E8               	movwf	setRFSW_Control@sw
  7625                           
  7626                           ;RF_Control_B1.c: 379: char status = 0;
  7627  137A  01E7               	clrf	setRFSW_Control@status
  7628                           
  7629                           ;RF_Control_B1.c: 381: if (RF_Data[16] == 0x80) {
  7630  137B  0023               	movlb	3	; select bank3
  7631  137C  0830               	movf	(_RF_Data^(0+384)+16),w
  7632  137D  3A80               	xorlw	128
  7633  137E  1D03               	skipz
  7634  137F  2BAB               	goto	l9220
  7635                           
  7636                           ;RF_Control_B1.c: 382: setDelayOff_GO(sw, 1, RF_Data[17]);
  7637  1380  0020               	movlb	0	; select bank0
  7638  1381  01DE               	clrf	setDelayOff_GO@command
  7639  1382  0ADE               	incf	setDelayOff_GO@command,f
  7640  1383  0023               	movlb	3	; select bank3
  7641  1384  0831               	movf	(_RF_Data^(0+384)+17),w
  7642  1385  0020               	movlb	0	; select bank0
  7643  1386  00E6               	movwf	??_setRFSW_Control
  7644  1387  0866               	movf	??_setRFSW_Control,w
  7645  1388  00DF               	movwf	setDelayOff_GO@value
  7646  1389  0868               	movf	setRFSW_Control@sw,w
  7647  138A  318C  2422  3193   	fcall	_setDelayOff_GO
  7648                           
  7649                           ;RF_Control_B1.c: 383: if (getDimmerLights_Status(sw) == 1) {
  7650  138D  0020               	movlb	0	; select bank0
  7651  138E  0868               	movf	setRFSW_Control@sw,w
  7652  138F  319B  23E6  3193   	fcall	_getDimmerLights_Status
  7653  1392  3A01               	xorlw	1
  7654  1393  1D03               	skipz
  7655  1394  2BAB               	goto	l9220
  7656                           
  7657                           ;RF_Control_B1.c: 384: setBuz(1, 100);
  7658  1395  3064               	movlw	100
  7659  1396  0020               	movlb	0	; select bank0
  7660  1397  00A4               	movwf	setBuz@time
  7661  1398  3000               	movlw	0
  7662  1399  00A5               	movwf	setBuz@time+1
  7663  139A  3001               	movlw	1
  7664  139B  3195  2584  3193   	fcall	_setBuz
  7665                           
  7666                           ;RF_Control_B1.c: 385: setRF_DimmerLights(sw, 1);
  7667  139E  0020               	movlb	0	; select bank0
  7668  139F  01DE               	clrf	setRF_DimmerLights@on
  7669  13A0  0ADE               	incf	setRF_DimmerLights@on,f
  7670  13A1  0868               	movf	setRFSW_Control@sw,w
  7671  13A2  3196  26E2  3193   	fcall	_setRF_DimmerLights
  7672                           
  7673                           ;RF_Control_B1.c: 386: setTxData();
  7674  13A5  318F  274A  3193   	fcall	_setTxData
  7675                           
  7676                           ;RF_Control_B1.c: 387: status = 1;
  7677  13A8  0020               	movlb	0	; select bank0
  7678  13A9  01E7               	clrf	setRFSW_Control@status
  7679  13AA  0AE7               	incf	setRFSW_Control@status,f
  7680  13AB                     l9220:	
  7681                           
  7682                           ;RF_Control_B1.c: 388: }
  7683                           ;RF_Control_B1.c: 389: }
  7684                           ;RF_Control_B1.c: 391: if (status == 0) {
  7685  13AB  0020               	movlb	0	; select bank0
  7686  13AC  08E7               	movf	setRFSW_Control@status,f
  7687  13AD  1D03               	skipz
  7688  13AE  0008               	return
  7689                           
  7690                           ;RF_Control_B1.c: 393: setDimmerLights_SwOn(sw);
  7691  13AF  0868               	movf	setRFSW_Control@sw,w
  7692  13B0  3196  2686  3193   	fcall	_setDimmerLights_SwOn
  7693                           
  7694                           ;RF_Control_B1.c: 394: setDimmerLights_SwOff(sw);
  7695  13B3  0020               	movlb	0	; select bank0
  7696  13B4  0868               	movf	setRFSW_Control@sw,w
  7697  13B5  3192  22CE         	fcall	_setDimmerLights_SwOff
  7698  13B7  0008               	return
  7699  13B8                     __end_of_setRFSW_Control:	
  7700                           
  7701                           	psect	text30
  7702  0781                     __ptext30:	
  7703 ;; *************** function _setRFSW_AdjControl *****************
  7704 ;; Defined at:
  7705 ;;		line 400 in file "../src/RF_Control_B1.c"
  7706 ;; Parameters:    Size  Location     Type
  7707 ;;  sw              1    wreg     unsigned char 
  7708 ;; Auto vars:     Size  Location     Type
  7709 ;;  sw              1   65[BANK0 ] unsigned char 
  7710 ;;  status          1   64[BANK0 ] unsigned char 
  7711 ;; Return value:  Size  Location     Type
  7712 ;;		None               void
  7713 ;; Registers used:
  7714 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7715 ;; Tracked objects:
  7716 ;;		On entry : 0/0
  7717 ;;		On exit  : 0/0
  7718 ;;		Unchanged: 0/0
  7719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7721 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7722 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7723 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7724 ;;Total ram usage:        4 bytes
  7725 ;; Hardware stack levels used:    1
  7726 ;; Hardware stack levels required when called:    6
  7727 ;; This function calls:
  7728 ;;		_getDimmerLights_PercentToValue
  7729 ;;		_getDimmerLights_Status
  7730 ;;		_setDimmerIntr_Dimming_RF
  7731 ;;		_setDimmerIntr_MaxmumValue
  7732 ;;		_setDimmerLights_DimmingRun
  7733 ;;		_setDimmerLights_SwOff
  7734 ;;		_setDimmerLights_SwOn
  7735 ;;		_setMemory_Modify
  7736 ;;		_setProductData
  7737 ;;		_setTxData
  7738 ;; This function is called by:
  7739 ;;		_setControl_Lights_Table
  7740 ;; This function uses a non-reentrant model
  7741 ;;
  7742                           
  7743                           
  7744                           ;psect for function _setRFSW_AdjControl
  7745  0781                     _setRFSW_AdjControl:	
  7746                           
  7747                           ;incstack = 0
  7748                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7749                           ;setRFSW_AdjControl@sw stored from wreg
  7750  0781  0020               	movlb	0	; select bank0
  7751  0782  00E1               	movwf	setRFSW_AdjControl@sw
  7752                           
  7753                           ;RF_Control_B1.c: 401: char status = 0;
  7754  0783  01E0               	clrf	setRFSW_AdjControl@status
  7755                           
  7756                           ;RF_Control_B1.c: 403: status = getDimmerLights_Status(sw);
  7757  0784  0861               	movf	setRFSW_AdjControl@sw,w
  7758  0785  319B  23E6  3187   	fcall	_getDimmerLights_Status
  7759  0788  0020               	movlb	0	; select bank0
  7760  0789  00DE               	movwf	??_setRFSW_AdjControl
  7761  078A  085E               	movf	??_setRFSW_AdjControl,w
  7762  078B  00E0               	movwf	setRFSW_AdjControl@status
  7763                           
  7764                           ;RF_Control_B1.c: 405: if (RF_Data[9] > 0x64) {
  7765  078C  3065               	movlw	101
  7766  078D  0023               	movlb	3	; select bank3
  7767  078E  0229               	subwf	(_RF_Data^(0+384)+9),w
  7768  078F  1C03               	skipc
  7769  0790  2F98               	goto	l9232
  7770                           
  7771                           ;RF_Control_B1.c: 406: RF_Data[9] = 0x64;
  7772  0791  3064               	movlw	100
  7773  0792  0020               	movlb	0	; select bank0
  7774  0793  00DE               	movwf	??_setRFSW_AdjControl
  7775  0794  085E               	movf	??_setRFSW_AdjControl,w
  7776  0795  0023               	movlb	3	; select bank3
  7777  0796  00A9               	movwf	(_RF_Data^(0+384)+9)
  7778                           
  7779                           ;RF_Control_B1.c: 407: } else if (RF_Data[9] < 0x01) {
  7780  0797  2F9D               	goto	l9236
  7781  0798                     l9232:	
  7782  0798  08A9               	movf	(_RF_Data^(0+384)+9),f
  7783  0799  1D03               	skipz
  7784  079A  2F9D               	goto	l9236
  7785                           
  7786                           ;RF_Control_B1.c: 408: RF_Data[9] = 0x01;
  7787  079B  01A9               	clrf	(_RF_Data^(0+384)+9)
  7788  079C  0AA9               	incf	(_RF_Data^(0+384)+9),f
  7789  079D                     l9236:	
  7790                           
  7791                           ;RF_Control_B1.c: 409: }
  7792                           ;RF_Control_B1.c: 410: setProductData(9, RF_Data[9]);
  7793  079D  0829               	movf	(_RF_Data^(0+384)+9),w
  7794  079E  0020               	movlb	0	; select bank0
  7795  079F  00DE               	movwf	??_setRFSW_AdjControl
  7796  07A0  085E               	movf	??_setRFSW_AdjControl,w
  7797  07A1  00DA               	movwf	setProductData@value
  7798  07A2  3009               	movlw	9
  7799  07A3  319B  23D8  3187   	fcall	_setProductData
  7800                           
  7801                           ;RF_Control_B1.c: 411: setProductData(11, sw);
  7802  07A6  0020               	movlb	0	; select bank0
  7803  07A7  0861               	movf	setRFSW_AdjControl@sw,w
  7804  07A8  00DE               	movwf	??_setRFSW_AdjControl
  7805  07A9  085E               	movf	??_setRFSW_AdjControl,w
  7806  07AA  00DA               	movwf	setProductData@value
  7807  07AB  300B               	movlw	11
  7808  07AC  319B  23D8  3187   	fcall	_setProductData
  7809                           
  7810                           ;RF_Control_B1.c: 412: setProductData(17, product->Data[26 + sw]);
  7811  07AF  0020               	movlb	0	; select bank0
  7812  07B0  0861               	movf	setRFSW_AdjControl@sw,w
  7813  07B1  3E1A               	addlw	26
  7814  07B2  076D               	addwf	_product,w
  7815  07B3  00DE               	movwf	??_setRFSW_AdjControl
  7816  07B4  085E               	movf	??_setRFSW_AdjControl,w
  7817  07B5  0086               	movwf	6
  7818  07B6  3002               	movlw	2	; select bank4/5
  7819  07B7  0087               	movwf	7
  7820  07B8  0801               	movf	1,w
  7821  07B9  00DF               	movwf	??_setRFSW_AdjControl+1
  7822  07BA  085F               	movf	??_setRFSW_AdjControl+1,w
  7823  07BB  00DA               	movwf	setProductData@value
  7824  07BC  3011               	movlw	17
  7825  07BD  319B  23D8  3187   	fcall	_setProductData
  7826                           
  7827                           ;RF_Control_B1.c: 413: setProductData((20 + sw), RF_Data[9]);
  7828  07C0  0023               	movlb	3	; select bank3
  7829  07C1  0829               	movf	(_RF_Data^(0+384)+9),w
  7830  07C2  0020               	movlb	0	; select bank0
  7831  07C3  00DE               	movwf	??_setRFSW_AdjControl
  7832  07C4  085E               	movf	??_setRFSW_AdjControl,w
  7833  07C5  00DA               	movwf	setProductData@value
  7834  07C6  0861               	movf	setRFSW_AdjControl@sw,w
  7835  07C7  3E14               	addlw	20
  7836  07C8  319B  23D8  3187   	fcall	_setProductData
  7837                           
  7838                           ;RF_Control_B1.c: 414: setMemory_Modify(1);
  7839  07CB  3001               	movlw	1
  7840  07CC  319C  2490  3187   	fcall	_setMemory_Modify
  7841                           
  7842                           ;RF_Control_B1.c: 416: if (status == 1) {
  7843  07CF  0020               	movlb	0	; select bank0
  7844  07D0  0860               	movf	setRFSW_AdjControl@status,w
  7845  07D1  3A01               	xorlw	1
  7846  07D2  1D03               	skipz
  7847  07D3  2FEB               	goto	l9246
  7848                           
  7849                           ;RF_Control_B1.c: 417: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(RF_D
      +                          ata[9]));
  7850  07D4  0023               	movlb	3	; select bank3
  7851  07D5  0829               	movf	(_RF_Data^(0+384)+9),w
  7852  07D6  3189  2108  3187   	fcall	_getDimmerLights_PercentToValue
  7853  07D9  0020               	movlb	0	; select bank0
  7854  07DA  00DE               	movwf	??_setRFSW_AdjControl
  7855  07DB  085E               	movf	??_setRFSW_AdjControl,w
  7856  07DC  00DA               	movwf	setDimmerIntr_MaxmumValue@value
  7857  07DD  0861               	movf	setRFSW_AdjControl@sw,w
  7858  07DE  319D  25FB  3187   	fcall	_setDimmerIntr_MaxmumValue
  7859                           
  7860                           ;RF_Control_B1.c: 418: setDimmerIntr_Dimming_RF(sw, 1);
  7861  07E1  01F2               	clrf	setDimmerIntr_Dimming_RF@command
  7862  07E2  0AF2               	incf	setDimmerIntr_Dimming_RF@command,f
  7863  07E3  0020               	movlb	0	; select bank0
  7864  07E4  0861               	movf	setRFSW_AdjControl@sw,w
  7865  07E5  3191  214F  3187   	fcall	_setDimmerIntr_Dimming_RF
  7866                           
  7867                           ;RF_Control_B1.c: 419: setTxData();
  7868  07E8  318F  274A         	fcall	_setTxData
  7869                           
  7870                           ;RF_Control_B1.c: 421: } else if (status == 0) {
  7871  07EA  0008               	return
  7872  07EB                     l9246:	
  7873  07EB  0020               	movlb	0	; select bank0
  7874  07EC  08E0               	movf	setRFSW_AdjControl@status,f
  7875  07ED  1D03               	skipz
  7876  07EE  0008               	return
  7877                           
  7878                           ;RF_Control_B1.c: 425: setDimmerLights_DimmingRun(sw, 1);
  7879  07EF  01F4               	clrf	setDimmerLights_DimmingRun@command
  7880  07F0  0AF4               	incf	setDimmerLights_DimmingRun@command,f
  7881  07F1  0861               	movf	setRFSW_AdjControl@sw,w
  7882  07F2  319E  262A  3187   	fcall	_setDimmerLights_DimmingRun
  7883                           
  7884                           ;RF_Control_B1.c: 426: setDimmerLights_SwOn(sw);
  7885  07F5  0020               	movlb	0	; select bank0
  7886  07F6  0861               	movf	setRFSW_AdjControl@sw,w
  7887  07F7  3196  2686  3187   	fcall	_setDimmerLights_SwOn
  7888                           
  7889                           ;RF_Control_B1.c: 427: setDimmerLights_SwOff(sw);
  7890  07FA  0020               	movlb	0	; select bank0
  7891  07FB  0861               	movf	setRFSW_AdjControl@sw,w
  7892  07FC  3192  22CE         	fcall	_setDimmerLights_SwOff
  7893  07FE  0008               	return
  7894  07FF                     __end_of_setRFSW_AdjControl:	
  7895                           
  7896                           	psect	text31
  7897  1C90                     __ptext31:	
  7898 ;; *************** function _setMemory_Modify *****************
  7899 ;; Defined at:
  7900 ;;		line 1053 in file "../src/MCU_B1.c"
  7901 ;; Parameters:    Size  Location     Type
  7902 ;;  command         1    wreg     unsigned char 
  7903 ;; Auto vars:     Size  Location     Type
  7904 ;;  command         1    3[COMMON] unsigned char 
  7905 ;; Return value:  Size  Location     Type
  7906 ;;		None               void
  7907 ;; Registers used:
  7908 ;;		wreg, status,2, status,0
  7909 ;; Tracked objects:
  7910 ;;		On entry : 0/0
  7911 ;;		On exit  : 0/0
  7912 ;;		Unchanged: 0/0
  7913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7915 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7916 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7917 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7918 ;;Total ram usage:        2 bytes
  7919 ;; Hardware stack levels used:    1
  7920 ;; Hardware stack levels required when called:    3
  7921 ;; This function calls:
  7922 ;;		Nothing
  7923 ;; This function is called by:
  7924 ;;		_setLog_Code
  7925 ;;		_setRFSW_AdjControl
  7926 ;; This function uses a non-reentrant model
  7927 ;;
  7928                           
  7929                           
  7930                           ;psect for function _setMemory_Modify
  7931  1C90                     _setMemory_Modify:	
  7932                           
  7933                           ;incstack = 0
  7934                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
  7935                           ;setMemory_Modify@command stored from wreg
  7936  1C90  00F3               	movwf	setMemory_Modify@command
  7937                           
  7938                           ;MCU_B1.c: 1054: Memory.Modify = command == 1 ? 1 : 0;
  7939  1C91  0873               	movf	setMemory_Modify@command,w
  7940  1C92  3A01               	xorlw	1
  7941  1C93  3000               	movlw	0
  7942  1C94  1903               	skipnz
  7943  1C95  3001               	movlw	1
  7944  1C96  00F2               	movwf	??_setMemory_Modify
  7945  1C97  0024               	movlb	4	; select bank4
  7946  1C98  0844               	movf	(_Memory^(0+512)+36),w
  7947  1C99  0672               	xorwf	??_setMemory_Modify,w
  7948  1C9A  39FE               	andlw	-2
  7949  1C9B  0672               	xorwf	??_setMemory_Modify,w
  7950  1C9C  00C4               	movwf	(_Memory^(0+512)+36)
  7951                           
  7952                           ;MCU_B1.c: 1055: Memory.Time = 0;
  7953  1C9D  01C2               	clrf	(_Memory^(0+512)+34)
  7954  1C9E  01C3               	clrf	((_Memory+1)^(0+512)+34)
  7955  1C9F  0008               	return
  7956  1CA0                     __end_of_setMemory_Modify:	
  7957                           
  7958                           	psect	text32
  7959  1E2A                     __ptext32:	
  7960 ;; *************** function _setDimmerLights_DimmingRun *****************
  7961 ;; Defined at:
  7962 ;;		line 1000 in file "../src/Dimmer_B1.c"
  7963 ;; Parameters:    Size  Location     Type
  7964 ;;  lights          1    wreg     unsigned char 
  7965 ;;  command         1    4[COMMON] unsigned char 
  7966 ;; Auto vars:     Size  Location     Type
  7967 ;;  lights          1    6[COMMON] unsigned char 
  7968 ;; Return value:  Size  Location     Type
  7969 ;;		None               void
  7970 ;; Registers used:
  7971 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7972 ;; Tracked objects:
  7973 ;;		On entry : 0/0
  7974 ;;		On exit  : 0/0
  7975 ;;		Unchanged: 0/0
  7976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7977 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7978 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7979 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7980 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7981 ;;Total ram usage:        3 bytes
  7982 ;; Hardware stack levels used:    1
  7983 ;; Hardware stack levels required when called:    4
  7984 ;; This function calls:
  7985 ;;		_DimmerLights_SelectPointer
  7986 ;; This function is called by:
  7987 ;;		_setRFSW_AdjControl
  7988 ;; This function uses a non-reentrant model
  7989 ;;
  7990                           
  7991                           
  7992                           ;psect for function _setDimmerLights_DimmingRun
  7993  1E2A                     _setDimmerLights_DimmingRun:	
  7994                           
  7995                           ;incstack = 0
  7996                           ; Regs used in _setDimmerLights_DimmingRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  7997                           ;setDimmerLights_DimmingRun@lights stored from wreg
  7998  1E2A  00F6               	movwf	setDimmerLights_DimmingRun@lights
  7999                           
  8000                           ;Dimmer_B1.c: 1001: DimmerLights_SelectPointer(lights);
  8001  1E2B  0876               	movf	setDimmerLights_DimmingRun@lights,w
  8002  1E2C  319D  2567         	fcall	_DimmerLights_SelectPointer
  8003                           
  8004                           ;Dimmer_B1.c: 1002: DimmerLights->DimmingRun = command == 1 ? 1 : 0;
  8005  1E2E  0874               	movf	setDimmerLights_DimmingRun@command,w
  8006  1E2F  3A01               	xorlw	1
  8007  1E30  3000               	movlw	0
  8008  1E31  1903               	skipnz
  8009  1E32  3001               	movlw	1
  8010  1E33  00F5               	movwf	??_setDimmerLights_DimmingRun
  8011  1E34  0021               	movlb	1	; select bank1
  8012  1E35  0A46               	incf	_DimmerLights^(0+128),w
  8013  1E36  0086               	movwf	6
  8014  1E37  3001               	movlw	1	; select bank2/3
  8015  1E38  0087               	movwf	7
  8016  1E39  0EF5               	swapf	??_setDimmerLights_DimmingRun,f
  8017  1E3A  0DF5               	rlf	??_setDimmerLights_DimmingRun,f
  8018  1E3B  0DF5               	rlf	??_setDimmerLights_DimmingRun,f
  8019  1E3C  0801               	movf	1,w
  8020  1E3D  0675               	xorwf	??_setDimmerLights_DimmingRun,w
  8021  1E3E  39BF               	andlw	-65
  8022  1E3F  0675               	xorwf	??_setDimmerLights_DimmingRun,w
  8023  1E40  0081               	movwf	1
  8024  1E41  0008               	return
  8025  1E42                     __end_of_setDimmerLights_DimmingRun:	
  8026                           
  8027                           	psect	text33
  8028  1CD1                     __ptext33:	
  8029 ;; *************** function _getRF_KeyStatus *****************
  8030 ;; Defined at:
  8031 ;;		line 166 in file "../src/RF_Control_B1.c"
  8032 ;; Parameters:    Size  Location     Type
  8033 ;;		None
  8034 ;; Auto vars:     Size  Location     Type
  8035 ;;  key             1    3[COMMON] unsigned char 
  8036 ;; Return value:  Size  Location     Type
  8037 ;;                  1    wreg      unsigned char 
  8038 ;; Registers used:
  8039 ;;		wreg, status,2
  8040 ;; Tracked objects:
  8041 ;;		On entry : 0/0
  8042 ;;		On exit  : 0/0
  8043 ;;		Unchanged: 0/0
  8044 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8045 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8046 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8047 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8048 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8049 ;;Total ram usage:        3 bytes
  8050 ;; Hardware stack levels used:    1
  8051 ;; Hardware stack levels required when called:    3
  8052 ;; This function calls:
  8053 ;;		Nothing
  8054 ;; This function is called by:
  8055 ;;		_setRF_Main
  8056 ;; This function uses a non-reentrant model
  8057 ;;
  8058                           
  8059                           
  8060                           ;psect for function _getRF_KeyStatus
  8061  1CD1                     _getRF_KeyStatus:	
  8062                           
  8063                           ;RF_Control_B1.c: 167: char key = 0;
  8064                           
  8065                           ;incstack = 0
  8066                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8067  1CD1  01F3               	clrf	getRF_KeyStatus@key
  8068                           
  8069                           ;RF_Control_B1.c: 173: key = (RA6 == 1 || RA4 == 1 || RA0 == 1 || RB1 == 1) ? 1 : 0;
  8070  1CD2  01F4               	clrf	_getRF_KeyStatus$4838
  8071  1CD3  0AF4               	incf	_getRF_KeyStatus$4838,f
  8072  1CD4  0020               	movlb	0	; select bank0
  8073  1CD5  1F0C               	btfss	12,6	;volatile
  8074  1CD6  1A0C               	btfsc	12,4	;volatile
  8075  1CD7  2CDC               	goto	l7534
  8076  1CD8  1C0C               	btfss	12,0	;volatile
  8077  1CD9  188D               	btfsc	13,1	;volatile
  8078  1CDA  2CDC               	goto	l7534
  8079  1CDB  01F4               	clrf	_getRF_KeyStatus$4838
  8080  1CDC                     l7534:	
  8081  1CDC  0874               	movf	_getRF_KeyStatus$4838,w
  8082  1CDD  00F2               	movwf	??_getRF_KeyStatus
  8083  1CDE  0872               	movf	??_getRF_KeyStatus,w
  8084  1CDF  00F3               	movwf	getRF_KeyStatus@key
  8085                           
  8086                           ;RF_Control_B1.c: 179: return key;
  8087  1CE0  0873               	movf	getRF_KeyStatus@key,w
  8088  1CE1  0008               	return
  8089  1CE2                     __end_of_getRF_KeyStatus:	
  8090                           
  8091                           	psect	text34
  8092  1C80                     __ptext34:	
  8093 ;; *************** function _getBuz_GO *****************
  8094 ;; Defined at:
  8095 ;;		line 82 in file "../src/Buzzer_B1.c"
  8096 ;; Parameters:    Size  Location     Type
  8097 ;;		None
  8098 ;; Auto vars:     Size  Location     Type
  8099 ;;  i               2    6[COMMON] int 
  8100 ;; Return value:  Size  Location     Type
  8101 ;;                  2    2[COMMON] int 
  8102 ;; Registers used:
  8103 ;;		wreg, status,2, status,0
  8104 ;; Tracked objects:
  8105 ;;		On entry : 0/0
  8106 ;;		On exit  : 0/0
  8107 ;;		Unchanged: 0/0
  8108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8109 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8110 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8111 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8112 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8113 ;;Total ram usage:        6 bytes
  8114 ;; Hardware stack levels used:    1
  8115 ;; Hardware stack levels required when called:    3
  8116 ;; This function calls:
  8117 ;;		Nothing
  8118 ;; This function is called by:
  8119 ;;		_setRF_Main
  8120 ;; This function uses a non-reentrant model
  8121 ;;
  8122                           
  8123                           
  8124                           ;psect for function _getBuz_GO
  8125  1C80                     _getBuz_GO:	
  8126                           
  8127                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8128                           
  8129                           ;incstack = 0
  8130                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8131  1C80  0021               	movlb	1	; select bank1
  8132  1C81  0C2E               	rrf	_Buz1^(0+128),w
  8133  1C82  3901               	andlw	1
  8134  1C83  00F4               	movwf	??_getBuz_GO
  8135  1C84  01F5               	clrf	??_getBuz_GO+1
  8136  1C85  0874               	movf	??_getBuz_GO,w
  8137  1C86  00F6               	movwf	getBuz_GO@i
  8138  1C87  0875               	movf	??_getBuz_GO+1,w
  8139  1C88  00F7               	movwf	getBuz_GO@i+1
  8140                           
  8141                           ;Buzzer_B1.c: 84: return i;
  8142  1C89  0877               	movf	getBuz_GO@i+1,w
  8143  1C8A  01F3               	clrf	?_getBuz_GO+1
  8144  1C8B  07F3               	addwf	?_getBuz_GO+1,f
  8145  1C8C  0876               	movf	getBuz_GO@i,w
  8146  1C8D  01F2               	clrf	?_getBuz_GO
  8147  1C8E  07F2               	addwf	?_getBuz_GO,f
  8148  1C8F  0008               	return
  8149  1C90                     __end_of_getBuz_GO:	
  8150                           
  8151                           	psect	text35
  8152  1C22                     __ptext35:	
  8153 ;; *************** function _RF_RxDisable *****************
  8154 ;; Defined at:
  8155 ;;		line 154 in file "../src/RF_Control_B1.c"
  8156 ;; Parameters:    Size  Location     Type
  8157 ;;		None
  8158 ;; Auto vars:     Size  Location     Type
  8159 ;;		None
  8160 ;; Return value:  Size  Location     Type
  8161 ;;		None               void
  8162 ;; Registers used:
  8163 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8164 ;; Tracked objects:
  8165 ;;		On entry : 0/0
  8166 ;;		On exit  : 0/0
  8167 ;;		Unchanged: 0/0
  8168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8170 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8172 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8173 ;;Total ram usage:        0 bytes
  8174 ;; Hardware stack levels used:    1
  8175 ;; Hardware stack levels required when called:    5
  8176 ;; This function calls:
  8177 ;;		_CC2500_WriteCommand
  8178 ;; This function is called by:
  8179 ;;		_setRF_Main
  8180 ;; This function uses a non-reentrant model
  8181 ;;
  8182                           
  8183                           
  8184                           ;psect for function _RF_RxDisable
  8185  1C22                     _RF_RxDisable:	
  8186                           
  8187                           ;RF_Control_B1.c: 155: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8188                           
  8189                           ;incstack = 0
  8190                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8191  1C22  0021               	movlb	1	; select bank1
  8192  1C23  18A0               	btfsc	_RF1^(0+128),1
  8193  1C24  2C27               	goto	l2154
  8194  1C25  1DA0               	btfss	_RF1^(0+128),3
  8195  1C26  0008               	return
  8196  1C27                     l2154:	
  8197                           
  8198                           ;RF_Control_B1.c: 156: RF1.RxStatus = 0;
  8199  1C27  11A0               	bcf	_RF1^(0+128),3
  8200                           
  8201                           ;RF_Control_B1.c: 157: RF1.ReceiveGO = 0;
  8202  1C28  10A0               	bcf	_RF1^(0+128),1
  8203                           
  8204                           ;RF_Control_B1.c: 158: CC2500_WriteCommand(0x36);
  8205  1C29  3036               	movlw	54
  8206  1C2A  319E  2642  319C   	fcall	_CC2500_WriteCommand
  8207                           
  8208                           ;RF_Control_B1.c: 159: CC2500_WriteCommand(0x3A);
  8209  1C2D  303A               	movlw	58
  8210  1C2E  319E  2642         	fcall	_CC2500_WriteCommand
  8211  1C30  0008               	return
  8212  1C31                     __end_of_RF_RxDisable:	
  8213                           
  8214                           	psect	text36
  8215  096D                     __ptext36:	
  8216 ;; *************** function _CC2500_TxData *****************
  8217 ;; Defined at:
  8218 ;;		line 32 in file "../src/CC2500_B1.c"
  8219 ;; Parameters:    Size  Location     Type
  8220 ;;		None
  8221 ;; Auto vars:     Size  Location     Type
  8222 ;;  loop_e          1    7[COMMON] unsigned char 
  8223 ;; Return value:  Size  Location     Type
  8224 ;;		None               void
  8225 ;; Registers used:
  8226 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8227 ;; Tracked objects:
  8228 ;;		On entry : 0/0
  8229 ;;		On exit  : 0/0
  8230 ;;		Unchanged: 0/0
  8231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8233 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8234 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8235 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8236 ;;Total ram usage:        2 bytes
  8237 ;; Hardware stack levels used:    1
  8238 ;; Hardware stack levels required when called:    5
  8239 ;; This function calls:
  8240 ;;		_CC2500_WriteByte
  8241 ;;		_CC2500_WriteCommand
  8242 ;;		_RF_Timeout_Counter
  8243 ;;		_setRF_TimeoutCleared
  8244 ;; This function is called by:
  8245 ;;		_setRF_Main
  8246 ;; This function uses a non-reentrant model
  8247 ;;
  8248                           
  8249                           
  8250                           ;psect for function _CC2500_TxData
  8251  096D                     _CC2500_TxData:	
  8252                           
  8253                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8254                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8255                           
  8256                           ;incstack = 0
  8257                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8258  096D  3036               	movlw	54
  8259  096E  319E  2642  3189   	fcall	_CC2500_WriteCommand
  8260                           
  8261                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8262  0971  303B               	movlw	59
  8263  0972  319E  2642  3189   	fcall	_CC2500_WriteCommand
  8264                           
  8265                           ;CC2500_B1.c: 38: RC4 = 0;
  8266  0975  0020               	movlb	0	; select bank0
  8267  0976  120E               	bcf	14,4	;volatile
  8268                           
  8269                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8270  0977  307F               	movlw	127
  8271  0978  00F6               	movwf	??_CC2500_TxData
  8272  0979  0876               	movf	??_CC2500_TxData,w
  8273  097A  0021               	movlb	1	; select bank1
  8274  097B  00CA               	movwf	_SPI0Buffer^(0+128)
  8275                           
  8276                           ;CC2500_B1.c: 40: while (RC2 == 1 && RF1.Timeout == 0) {
  8277  097C  2980               	goto	l9396
  8278  097D                     l9394:	
  8279                           
  8280                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8281  097D  319D  25A6  3189   	fcall	_RF_Timeout_Counter
  8282  0980                     l9396:	
  8283  0980  0020               	movlb	0	; select bank0
  8284  0981  1D0E               	btfss	14,2	;volatile
  8285  0982  2986               	goto	l9400
  8286  0983  0021               	movlb	1	; select bank1
  8287  0984  1F21               	btfss	(_RF1^(0+128)+1),6
  8288  0985  297D               	goto	l9394
  8289  0986                     l9400:	
  8290                           
  8291                           ;CC2500_B1.c: 42: };
  8292                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8293  0986  319A  22C9  3189   	fcall	_setRF_TimeoutCleared
  8294                           
  8295                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8296  0989  319E  2612  3189   	fcall	_CC2500_WriteByte
  8297                           
  8298                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8299  098C  0021               	movlb	1	; select bank1
  8300  098D  084C               	movf	_Tx_Length^(0+128),w
  8301  098E  00F6               	movwf	??_CC2500_TxData
  8302  098F  0876               	movf	??_CC2500_TxData,w
  8303  0990  00CA               	movwf	_SPI0Buffer^(0+128)
  8304                           
  8305                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8306  0991  319E  2612  3189   	fcall	_CC2500_WriteByte
  8307                           
  8308                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8309  0994  01F7               	clrf	CC2500_TxData@loop_e
  8310  0995                     l9414:	
  8311  0995  0021               	movlb	1	; select bank1
  8312  0996  084C               	movf	_Tx_Length^(0+128),w
  8313  0997  0277               	subwf	CC2500_TxData@loop_e,w
  8314  0998  1803               	btfsc	3,0
  8315  0999  29AC               	goto	l255
  8316                           
  8317                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8318  099A  0877               	movf	CC2500_TxData@loop_e,w
  8319  099B  3EA0               	addlw	_RF_Data& (0+255)
  8320  099C  0086               	movwf	6
  8321  099D  3001               	movlw	1	; select bank3/4
  8322  099E  0087               	movwf	7
  8323  099F  0801               	movf	1,w
  8324  09A0  00F6               	movwf	??_CC2500_TxData
  8325  09A1  0876               	movf	??_CC2500_TxData,w
  8326  09A2  0021               	movlb	1	; select bank1
  8327  09A3  00CA               	movwf	_SPI0Buffer^(0+128)
  8328                           
  8329                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8330  09A4  319E  2612  3189   	fcall	_CC2500_WriteByte
  8331  09A7  3001               	movlw	1
  8332  09A8  00F6               	movwf	??_CC2500_TxData
  8333  09A9  0876               	movf	??_CC2500_TxData,w
  8334  09AA  07F7               	addwf	CC2500_TxData@loop_e,f
  8335  09AB  2995               	goto	l9414
  8336  09AC                     l255:	
  8337                           
  8338                           ;CC2500_B1.c: 51: }
  8339                           ;CC2500_B1.c: 52: RC4 = 1;
  8340  09AC  0020               	movlb	0	; select bank0
  8341  09AD  160E               	bsf	14,4	;volatile
  8342                           
  8343                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8344  09AE  3035               	movlw	53
  8345  09AF  319E  2642  3189   	fcall	_CC2500_WriteCommand
  8346                           
  8347                           ;CC2500_B1.c: 54: while (RB0 == 0 && RF1.Timeout == 0) {
  8348  09B2  29B6               	goto	l9420
  8349  09B3                     l9418:	
  8350                           
  8351                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8352  09B3  319D  25A6  3189   	fcall	_RF_Timeout_Counter
  8353  09B6                     l9420:	
  8354  09B6  0020               	movlb	0	; select bank0
  8355  09B7  180D               	btfsc	13,0	;volatile
  8356  09B8  29BC               	goto	l9424
  8357  09B9  0021               	movlb	1	; select bank1
  8358  09BA  1F21               	btfss	(_RF1^(0+128)+1),6
  8359  09BB  29B3               	goto	l9418
  8360  09BC                     l9424:	
  8361                           
  8362                           ;CC2500_B1.c: 56: };
  8363                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8364  09BC  319A  22C9  3189   	fcall	_setRF_TimeoutCleared
  8365                           
  8366                           ;CC2500_B1.c: 59: while (RB0 == 1 && RF1.Timeout == 0) {
  8367  09BF  29C3               	goto	l9428
  8368  09C0                     l9426:	
  8369                           
  8370                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8371  09C0  319D  25A6  3189   	fcall	_RF_Timeout_Counter
  8372  09C3                     l9428:	
  8373  09C3  0020               	movlb	0	; select bank0
  8374  09C4  1C0D               	btfss	13,0	;volatile
  8375  09C5  29C9               	goto	l9432
  8376  09C6  0021               	movlb	1	; select bank1
  8377  09C7  1F21               	btfss	(_RF1^(0+128)+1),6
  8378  09C8  29C0               	goto	l9426
  8379  09C9                     l9432:	
  8380                           
  8381                           ;CC2500_B1.c: 61: };
  8382                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8383  09C9  319A  22C9  3189   	fcall	_setRF_TimeoutCleared
  8384                           
  8385                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8386  09CC  3036               	movlw	54
  8387  09CD  319E  2642  3189   	fcall	_CC2500_WriteCommand
  8388                           
  8389                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8390  09D0  303B               	movlw	59
  8391  09D1  319E  2642         	fcall	_CC2500_WriteCommand
  8392                           
  8393                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8394  09D3  14FA               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8395  09D4  0008               	return
  8396  09D5                     __end_of_CC2500_TxData:	
  8397                           
  8398                           	psect	text37
  8399  0842                     __ptext37:	
  8400 ;; *************** function _CC2500_RxData *****************
  8401 ;; Defined at:
  8402 ;;		line 73 in file "../src/CC2500_B1.c"
  8403 ;; Parameters:    Size  Location     Type
  8404 ;;		None
  8405 ;; Auto vars:     Size  Location     Type
  8406 ;;  loop_f          1    7[COMMON] unsigned char 
  8407 ;; Return value:  Size  Location     Type
  8408 ;;		None               void
  8409 ;; Registers used:
  8410 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8411 ;; Tracked objects:
  8412 ;;		On entry : 0/0
  8413 ;;		On exit  : 0/0
  8414 ;;		Unchanged: 0/0
  8415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8416 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8417 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8418 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8419 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8420 ;;Total ram usage:        2 bytes
  8421 ;; Hardware stack levels used:    1
  8422 ;; Hardware stack levels required when called:    5
  8423 ;; This function calls:
  8424 ;;		_CC2500_ReadByte
  8425 ;;		_CC2500_ReadStatus
  8426 ;;		_CC2500_WriteByte
  8427 ;;		_CC2500_WriteCommand
  8428 ;;		_RF_Timeout_Counter
  8429 ;;		_setRF_TimeoutCleared
  8430 ;; This function is called by:
  8431 ;;		_setRF_Main
  8432 ;; This function uses a non-reentrant model
  8433 ;;
  8434                           
  8435                           
  8436                           ;psect for function _CC2500_RxData
  8437  0842                     _CC2500_RxData:	
  8438                           
  8439                           ;CC2500_B1.c: 74: unsigned char loop_f;
  8440                           ;CC2500_B1.c: 78: if (RB0 == 0) {
  8441                           
  8442                           ;incstack = 0
  8443                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8444  0842  0020               	movlb	0	; select bank0
  8445  0843  180D               	btfsc	13,0	;volatile
  8446  0844  0008               	return
  8447                           
  8448                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  8449  0845  303B               	movlw	59
  8450  0846  3190  2092  3188   	fcall	_CC2500_ReadStatus
  8451                           
  8452                           ;CC2500_B1.c: 89: if (s_data != 0) {
  8453  0849  0021               	movlb	1	; select bank1
  8454  084A  084F               	movf	_s_data^(0+128),w
  8455  084B  1903               	btfsc	3,2
  8456  084C  0008               	return
  8457                           
  8458                           ;CC2500_B1.c: 90: RC4 = 0;
  8459  084D  0020               	movlb	0	; select bank0
  8460  084E  120E               	bcf	14,4	;volatile
  8461                           
  8462                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  8463  084F  30FF               	movlw	255
  8464  0850  00F6               	movwf	??_CC2500_RxData
  8465  0851  0876               	movf	??_CC2500_RxData,w
  8466  0852  0021               	movlb	1	; select bank1
  8467  0853  00CA               	movwf	_SPI0Buffer^(0+128)
  8468                           
  8469                           ;CC2500_B1.c: 93: while (RC2 == 1 && RF1.Timeout == 0) {
  8470  0854  2858               	goto	l9452
  8471  0855                     l9450:	
  8472                           
  8473                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  8474  0855  319D  25A6  3188   	fcall	_RF_Timeout_Counter
  8475  0858                     l9452:	
  8476  0858  0020               	movlb	0	; select bank0
  8477  0859  1D0E               	btfss	14,2	;volatile
  8478  085A  285E               	goto	l9456
  8479  085B  0021               	movlb	1	; select bank1
  8480  085C  1F21               	btfss	(_RF1^(0+128)+1),6
  8481  085D  2855               	goto	l9450
  8482  085E                     l9456:	
  8483                           
  8484                           ;CC2500_B1.c: 95: };
  8485                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  8486  085E  319A  22C9  3188   	fcall	_setRF_TimeoutCleared
  8487                           
  8488                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  8489  0861  319E  2612  3188   	fcall	_CC2500_WriteByte
  8490                           
  8491                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  8492  0864  319E  26C8  3188   	fcall	_CC2500_ReadByte
  8493                           
  8494                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  8495  0867  0021               	movlb	1	; select bank1
  8496  0868  084A               	movf	_SPI0Buffer^(0+128),w
  8497  0869  00F6               	movwf	??_CC2500_RxData
  8498  086A  0876               	movf	??_CC2500_RxData,w
  8499  086B  00C9               	movwf	_Rx_Length^(0+128)
  8500                           
  8501                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8502  086C  01F7               	clrf	CC2500_RxData@loop_f
  8503  086D                     l9472:	
  8504  086D  0849               	movf	_Rx_Length^(0+128),w
  8505  086E  0277               	subwf	CC2500_RxData@loop_f,w
  8506  086F  1803               	btfsc	3,0
  8507  0870  2883               	goto	l9474
  8508                           
  8509                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8510  0871  319E  26C8  3188   	fcall	_CC2500_ReadByte
  8511                           
  8512                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  8513  0874  0021               	movlb	1	; select bank1
  8514  0875  084A               	movf	_SPI0Buffer^(0+128),w
  8515  0876  00F6               	movwf	??_CC2500_RxData
  8516  0877  0877               	movf	CC2500_RxData@loop_f,w
  8517  0878  3EA0               	addlw	_RF_Data& (0+255)
  8518  0879  0086               	movwf	6
  8519  087A  3001               	movlw	1	; select bank3/4
  8520  087B  0087               	movwf	7
  8521  087C  0876               	movf	??_CC2500_RxData,w
  8522  087D  0081               	movwf	1
  8523  087E  3001               	movlw	1
  8524  087F  00F6               	movwf	??_CC2500_RxData
  8525  0880  0876               	movf	??_CC2500_RxData,w
  8526  0881  07F7               	addwf	CC2500_RxData@loop_f,f
  8527  0882  286D               	goto	l9472
  8528  0883                     l9474:	
  8529                           
  8530                           ;CC2500_B1.c: 104: }
  8531                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  8532  0883  319E  26C8  3188   	fcall	_CC2500_ReadByte
  8533                           
  8534                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  8535  0886  0021               	movlb	1	; select bank1
  8536  0887  084A               	movf	_SPI0Buffer^(0+128),w
  8537  0888  00F6               	movwf	??_CC2500_RxData
  8538  0889  0876               	movf	??_CC2500_RxData,w
  8539  088A  00C8               	movwf	_RSSI^(0+128)
  8540                           
  8541                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  8542  088B  319E  26C8  3188   	fcall	_CC2500_ReadByte
  8543                           
  8544                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  8545  088E  0021               	movlb	1	; select bank1
  8546  088F  084A               	movf	_SPI0Buffer^(0+128),w
  8547  0890  00F6               	movwf	??_CC2500_RxData
  8548  0891  0876               	movf	??_CC2500_RxData,w
  8549  0892  00C2               	movwf	_CRC^(0+128)
  8550                           
  8551                           ;CC2500_B1.c: 109: RC4 = 1;
  8552  0893  0020               	movlb	0	; select bank0
  8553  0894  160E               	bsf	14,4	;volatile
  8554                           
  8555                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  8556  0895  0021               	movlb	1	; select bank1
  8557  0896  1BC2               	btfsc	_CRC^(0+128),7
  8558                           
  8559                           ;CC2500_B1.c: 111: Receive_OK = 1;
  8560  0897  147A               	bsf	_Receive_OK/(0+8),_Receive_OK& (0+7)
  8561                           
  8562                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  8563  0898  11A0               	bcf	_RF1^(0+128),3
  8564                           
  8565                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  8566  0899  14A0               	bsf	_RF1^(0+128),1
  8567                           
  8568                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  8569  089A  3036               	movlw	54
  8570  089B  319E  2642  3188   	fcall	_CC2500_WriteCommand
  8571                           
  8572                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  8573  089E  303A               	movlw	58
  8574  089F  319E  2642         	fcall	_CC2500_WriteCommand
  8575  08A1  0021               	movlb	1	; select bank1
  8576  08A2  0008               	return
  8577  08A3                     __end_of_CC2500_RxData:	
  8578                           
  8579                           	psect	text38
  8580  1092                     __ptext38:	
  8581 ;; *************** function _CC2500_ReadStatus *****************
  8582 ;; Defined at:
  8583 ;;		line 308 in file "../src/CC2500_B1.c"
  8584 ;; Parameters:    Size  Location     Type
  8585 ;;  status_addr     1    wreg     unsigned char 
  8586 ;; Auto vars:     Size  Location     Type
  8587 ;;  status_addr     1    5[COMMON] unsigned char 
  8588 ;; Return value:  Size  Location     Type
  8589 ;;		None               void
  8590 ;; Registers used:
  8591 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8592 ;; Tracked objects:
  8593 ;;		On entry : 0/0
  8594 ;;		On exit  : 0/0
  8595 ;;		Unchanged: 0/0
  8596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8598 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8599 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8600 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8601 ;;Total ram usage:        2 bytes
  8602 ;; Hardware stack levels used:    1
  8603 ;; Hardware stack levels required when called:    4
  8604 ;; This function calls:
  8605 ;;		_CC2500_ReadByte
  8606 ;;		_CC2500_WriteByte
  8607 ;;		_RF_Timeout_Counter
  8608 ;;		_setRF_TimeoutCleared
  8609 ;; This function is called by:
  8610 ;;		_CC2500_RxData
  8611 ;; This function uses a non-reentrant model
  8612 ;;
  8613                           
  8614                           
  8615                           ;psect for function _CC2500_ReadStatus
  8616  1092                     _CC2500_ReadStatus:	
  8617                           
  8618                           ;incstack = 0
  8619                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8620                           ;CC2500_ReadStatus@status_addr stored from wreg
  8621  1092  00F5               	movwf	CC2500_ReadStatus@status_addr
  8622                           
  8623                           ;CC2500_B1.c: 309: RC4 = 0;
  8624  1093  0020               	movlb	0	; select bank0
  8625  1094  120E               	bcf	14,4	;volatile
  8626                           
  8627                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  8628  1095  0875               	movf	CC2500_ReadStatus@status_addr,w
  8629  1096  3EC0               	addlw	192
  8630  1097  00F4               	movwf	??_CC2500_ReadStatus
  8631  1098  0874               	movf	??_CC2500_ReadStatus,w
  8632  1099  0021               	movlb	1	; select bank1
  8633  109A  00CA               	movwf	_SPI0Buffer^(0+128)
  8634                           
  8635                           ;CC2500_B1.c: 312: while (RC2 == 1 && RF1.Timeout == 0) {
  8636  109B  289F               	goto	l9256
  8637  109C                     l9254:	
  8638                           
  8639                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  8640  109C  319D  25A6  3190   	fcall	_RF_Timeout_Counter
  8641  109F                     l9256:	
  8642  109F  0020               	movlb	0	; select bank0
  8643  10A0  1D0E               	btfss	14,2	;volatile
  8644  10A1  28A5               	goto	l9260
  8645  10A2  0021               	movlb	1	; select bank1
  8646  10A3  1F21               	btfss	(_RF1^(0+128)+1),6
  8647  10A4  289C               	goto	l9254
  8648  10A5                     l9260:	
  8649                           
  8650                           ;CC2500_B1.c: 314: };
  8651                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  8652  10A5  319A  22C9  3190   	fcall	_setRF_TimeoutCleared
  8653                           
  8654                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  8655  10A8  319E  2612  3190   	fcall	_CC2500_WriteByte
  8656                           
  8657                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  8658  10AB  319E  26C8         	fcall	_CC2500_ReadByte
  8659                           
  8660                           ;CC2500_B1.c: 319: RC4 = 1;
  8661  10AD  0020               	movlb	0	; select bank0
  8662  10AE  160E               	bsf	14,4	;volatile
  8663                           
  8664                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  8665  10AF  0021               	movlb	1	; select bank1
  8666  10B0  084A               	movf	_SPI0Buffer^(0+128),w
  8667  10B1  00F4               	movwf	??_CC2500_ReadStatus
  8668  10B2  0874               	movf	??_CC2500_ReadStatus,w
  8669  10B3  00CF               	movwf	_s_data^(0+128)
  8670  10B4  0008               	return
  8671  10B5                     __end_of_CC2500_ReadStatus:	
  8672                           
  8673                           	psect	text39
  8674  1EC8                     __ptext39:	
  8675 ;; *************** function _CC2500_ReadByte *****************
  8676 ;; Defined at:
  8677 ;;		line 242 in file "../src/CC2500_B1.c"
  8678 ;; Parameters:    Size  Location     Type
  8679 ;;		None
  8680 ;; Auto vars:     Size  Location     Type
  8681 ;;  loop_b          1    3[COMMON] unsigned char 
  8682 ;; Return value:  Size  Location     Type
  8683 ;;		None               void
  8684 ;; Registers used:
  8685 ;;		wreg, status,2, status,0
  8686 ;; Tracked objects:
  8687 ;;		On entry : 0/0
  8688 ;;		On exit  : 0/0
  8689 ;;		Unchanged: 0/0
  8690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8692 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8693 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8694 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8695 ;;Total ram usage:        2 bytes
  8696 ;; Hardware stack levels used:    1
  8697 ;; Hardware stack levels required when called:    3
  8698 ;; This function calls:
  8699 ;;		Nothing
  8700 ;; This function is called by:
  8701 ;;		_CC2500_RxData
  8702 ;;		_CC2500_ReadStatus
  8703 ;;		_CC2500_ReadREG
  8704 ;; This function uses a non-reentrant model
  8705 ;;
  8706                           
  8707                           
  8708                           ;psect for function _CC2500_ReadByte
  8709  1EC8                     _CC2500_ReadByte:	
  8710                           
  8711                           ;CC2500_B1.c: 243: unsigned char loop_b;
  8712                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  8713                           
  8714                           ;incstack = 0
  8715                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8716  1EC8  01F3               	clrf	CC2500_ReadByte@loop_b
  8717  1EC9                     L3:	
  8718  1EC9  3008               	movlw	8
  8719  1ECA  0273               	subwf	CC2500_ReadByte@loop_b,w
  8720  1ECB  1803               	btfsc	3,0
  8721  1ECC  0008               	return
  8722                           
  8723                           ;CC2500_B1.c: 245: RC1 = 1;
  8724  1ECD  0020               	movlb	0	; select bank0
  8725  1ECE  148E               	bsf	14,1	;volatile
  8726                           
  8727                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  8728  1ECF  1003               	clrc
  8729  1ED0  0021               	movlb	1	; select bank1
  8730  1ED1  0DCA               	rlf	_SPI0Buffer^(0+128),f
  8731                           
  8732                           ;CC2500_B1.c: 247: if (RC2 == 1)
  8733  1ED2  0020               	movlb	0	; select bank0
  8734  1ED3  1D0E               	btfss	14,2	;volatile
  8735  1ED4  2ED8               	goto	l6802
  8736                           
  8737                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  8738  1ED5  0021               	movlb	1	; select bank1
  8739  1ED6  144A               	bsf	_SPI0Buffer^(0+128),0
  8740  1ED7  2EDD               	goto	l6804
  8741  1ED8                     l6802:	
  8742                           
  8743                           ;CC2500_B1.c: 249: else
  8744                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  8745  1ED8  30FE               	movlw	254
  8746  1ED9  00F2               	movwf	??_CC2500_ReadByte
  8747  1EDA  0872               	movf	??_CC2500_ReadByte,w
  8748  1EDB  0021               	movlb	1	; select bank1
  8749  1EDC  05CA               	andwf	_SPI0Buffer^(0+128),f
  8750  1EDD                     l6804:	
  8751                           
  8752                           ;CC2500_B1.c: 251: RC1 = 0;
  8753  1EDD  0020               	movlb	0	; select bank0
  8754  1EDE  108E               	bcf	14,1	;volatile
  8755  1EDF  3001               	movlw	1
  8756  1EE0  00F2               	movwf	??_CC2500_ReadByte
  8757  1EE1  0872               	movf	??_CC2500_ReadByte,w
  8758  1EE2  07F3               	addwf	CC2500_ReadByte@loop_b,f
  8759  1EE3  2EC9               	goto	L3
  8760  1EE4                     __end_of_CC2500_ReadByte:	
  8761                           
  8762                           	psect	text40
  8763  1DBB                     __ptext40:	
  8764 ;; *************** function _CC2500_PowerOnInitial *****************
  8765 ;; Defined at:
  8766 ;;		line 126 in file "../src/CC2500_B1.c"
  8767 ;; Parameters:    Size  Location     Type
  8768 ;;		None
  8769 ;; Auto vars:     Size  Location     Type
  8770 ;;		None
  8771 ;; Return value:  Size  Location     Type
  8772 ;;		None               void
  8773 ;; Registers used:
  8774 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8775 ;; Tracked objects:
  8776 ;;		On entry : 0/0
  8777 ;;		On exit  : 0/0
  8778 ;;		Unchanged: 0/0
  8779 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8780 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8781 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8782 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8783 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8784 ;;Total ram usage:        0 bytes
  8785 ;; Hardware stack levels used:    1
  8786 ;; Hardware stack levels required when called:    6
  8787 ;; This function calls:
  8788 ;;		_CC2500_ClearRXFIFO
  8789 ;;		_CC2500_ClearTXFIFO
  8790 ;;		_CC2500_FrequencyCabr
  8791 ;;		_CC2500_InitPATable
  8792 ;;		_CC2500_InitSetREG
  8793 ;;		_CC2500_PowerRST
  8794 ;;		_CC2500_SIDLEMode
  8795 ;; This function is called by:
  8796 ;;		_setRF_Main
  8797 ;;		_main
  8798 ;; This function uses a non-reentrant model
  8799 ;;
  8800                           
  8801                           
  8802                           ;psect for function _CC2500_PowerOnInitial
  8803  1DBB                     _CC2500_PowerOnInitial:	
  8804                           
  8805                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  8806                           
  8807                           ;incstack = 0
  8808                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8809  1DBB  3193  23B8  319D   	fcall	_CC2500_PowerRST
  8810                           
  8811                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  8812  1DBE  3191  21A2  319D   	fcall	_CC2500_InitSetREG
  8813                           
  8814                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  8815  1DC1  319F  271E  319D   	fcall	_CC2500_InitPATable
  8816                           
  8817                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  8818  1DC4  319A  22D1  319D   	fcall	_CC2500_ClearTXFIFO
  8819                           
  8820                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  8821  1DC7  319A  22CD  319D   	fcall	_CC2500_ClearRXFIFO
  8822                           
  8823                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  8824  1DCA  319B  235D  319D   	fcall	_CC2500_FrequencyCabr
  8825                           
  8826                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  8827  1DCD  319A  22D5         	fcall	_CC2500_SIDLEMode
  8828  1DCF  0008               	return
  8829  1DD0                     __end_of_CC2500_PowerOnInitial:	
  8830                           
  8831                           	psect	text41
  8832  1AD5                     __ptext41:	
  8833 ;; *************** function _CC2500_SIDLEMode *****************
  8834 ;; Defined at:
  8835 ;;		line 216 in file "../src/CC2500_B1.c"
  8836 ;; Parameters:    Size  Location     Type
  8837 ;;		None
  8838 ;; Auto vars:     Size  Location     Type
  8839 ;;		None
  8840 ;; Return value:  Size  Location     Type
  8841 ;;		None               void
  8842 ;; Registers used:
  8843 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8844 ;; Tracked objects:
  8845 ;;		On entry : 0/0
  8846 ;;		On exit  : 0/0
  8847 ;;		Unchanged: 0/0
  8848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8852 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8853 ;;Total ram usage:        0 bytes
  8854 ;; Hardware stack levels used:    1
  8855 ;; Hardware stack levels required when called:    5
  8856 ;; This function calls:
  8857 ;;		_CC2500_WriteCommand
  8858 ;; This function is called by:
  8859 ;;		_CC2500_PowerOnInitial
  8860 ;; This function uses a non-reentrant model
  8861 ;;
  8862                           
  8863                           
  8864                           ;psect for function _CC2500_SIDLEMode
  8865  1AD5                     _CC2500_SIDLEMode:	
  8866                           
  8867                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  8868                           
  8869                           ;incstack = 0
  8870                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8871  1AD5  3036               	movlw	54
  8872  1AD6  319E  2642         	fcall	_CC2500_WriteCommand
  8873  1AD8  0008               	return
  8874  1AD9                     __end_of_CC2500_SIDLEMode:	
  8875                           
  8876                           	psect	text42
  8877  13B8                     __ptext42:	
  8878 ;; *************** function _CC2500_PowerRST *****************
  8879 ;; Defined at:
  8880 ;;		line 139 in file "../src/CC2500_B1.c"
  8881 ;; Parameters:    Size  Location     Type
  8882 ;;		None
  8883 ;; Auto vars:     Size  Location     Type
  8884 ;;		None
  8885 ;; Return value:  Size  Location     Type
  8886 ;;		None               void
  8887 ;; Registers used:
  8888 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8889 ;; Tracked objects:
  8890 ;;		On entry : 0/0
  8891 ;;		On exit  : 0/0
  8892 ;;		Unchanged: 0/0
  8893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8896 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8897 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8898 ;;Total ram usage:        1 bytes
  8899 ;; Hardware stack levels used:    1
  8900 ;; Hardware stack levels required when called:    4
  8901 ;; This function calls:
  8902 ;;		_CC2500_WriteByte
  8903 ;;		_DelayTime_1us
  8904 ;;		_RF_Timeout_Counter
  8905 ;;		_setRF_TimeoutCleared
  8906 ;; This function is called by:
  8907 ;;		_CC2500_PowerOnInitial
  8908 ;; This function uses a non-reentrant model
  8909 ;;
  8910                           
  8911                           
  8912                           ;psect for function _CC2500_PowerRST
  8913  13B8                     _CC2500_PowerRST:	
  8914                           
  8915                           ;CC2500_B1.c: 140: RC1 = 0;
  8916                           
  8917                           ;incstack = 0
  8918                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8919  13B8  0020               	movlb	0	; select bank0
  8920  13B9  108E               	bcf	14,1	;volatile
  8921                           
  8922                           ;CC2500_B1.c: 141: RC0 = 0;
  8923  13BA  100E               	bcf	14,0	;volatile
  8924                           
  8925                           ;CC2500_B1.c: 142: RC4 = 1;
  8926  13BB  160E               	bsf	14,4	;volatile
  8927                           
  8928                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  8929  13BC  300A               	movlw	10
  8930  13BD  00F2               	movwf	DelayTime_1us@count
  8931  13BE  3000               	movlw	0
  8932  13BF  00F3               	movwf	DelayTime_1us@count+1
  8933  13C0  3190  20DA  3193   	fcall	_DelayTime_1us
  8934                           
  8935                           ;CC2500_B1.c: 144: RC4 = 0;
  8936  13C3  0020               	movlb	0	; select bank0
  8937  13C4  120E               	bcf	14,4	;volatile
  8938                           
  8939                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  8940  13C5  300A               	movlw	10
  8941  13C6  00F2               	movwf	DelayTime_1us@count
  8942  13C7  3000               	movlw	0
  8943  13C8  00F3               	movwf	DelayTime_1us@count+1
  8944  13C9  3190  20DA  3193   	fcall	_DelayTime_1us
  8945                           
  8946                           ;CC2500_B1.c: 146: RC4 = 1;
  8947  13CC  0020               	movlb	0	; select bank0
  8948  13CD  160E               	bsf	14,4	;volatile
  8949                           
  8950                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  8951  13CE  3028               	movlw	40
  8952  13CF  00F2               	movwf	DelayTime_1us@count
  8953  13D0  3000               	movlw	0
  8954  13D1  00F3               	movwf	DelayTime_1us@count+1
  8955  13D2  3190  20DA  3193   	fcall	_DelayTime_1us
  8956                           
  8957                           ;CC2500_B1.c: 148: RC4 = 0;
  8958  13D5  0020               	movlb	0	; select bank0
  8959  13D6  120E               	bcf	14,4	;volatile
  8960                           
  8961                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  8962  13D7  3030               	movlw	48
  8963  13D8  00F8               	movwf	??_CC2500_PowerRST
  8964  13D9  0878               	movf	??_CC2500_PowerRST,w
  8965  13DA  0021               	movlb	1	; select bank1
  8966  13DB  00CA               	movwf	_SPI0Buffer^(0+128)
  8967                           
  8968                           ;CC2500_B1.c: 150: while (RC2 == 1 && RF1.Timeout == 0) {
  8969  13DC  2BE0               	goto	l9284
  8970  13DD                     l9282:	
  8971                           
  8972                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  8973  13DD  319D  25A6  3193   	fcall	_RF_Timeout_Counter
  8974  13E0                     l9284:	
  8975  13E0  0020               	movlb	0	; select bank0
  8976  13E1  1D0E               	btfss	14,2	;volatile
  8977  13E2  2BE6               	goto	l9288
  8978  13E3  0021               	movlb	1	; select bank1
  8979  13E4  1F21               	btfss	(_RF1^(0+128)+1),6
  8980  13E5  2BDD               	goto	l9282
  8981  13E6                     l9288:	
  8982                           
  8983                           ;CC2500_B1.c: 152: };
  8984                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  8985  13E6  319A  22C9  3193   	fcall	_setRF_TimeoutCleared
  8986                           
  8987                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  8988  13E9  319E  2612  3193   	fcall	_CC2500_WriteByte
  8989                           
  8990                           ;CC2500_B1.c: 155: while (RC2 == 1 && RF1.Timeout == 0) {
  8991  13EC  2BF0               	goto	l9294
  8992  13ED                     l9292:	
  8993                           
  8994                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  8995  13ED  319D  25A6  3193   	fcall	_RF_Timeout_Counter
  8996  13F0                     l9294:	
  8997  13F0  0020               	movlb	0	; select bank0
  8998  13F1  1D0E               	btfss	14,2	;volatile
  8999  13F2  2BF6               	goto	l9298
  9000  13F3  0021               	movlb	1	; select bank1
  9001  13F4  1F21               	btfss	(_RF1^(0+128)+1),6
  9002  13F5  2BED               	goto	l9292
  9003  13F6                     l9298:	
  9004                           
  9005                           ;CC2500_B1.c: 157: };
  9006                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  9007  13F6  319A  22C9         	fcall	_setRF_TimeoutCleared
  9008                           
  9009                           ;CC2500_B1.c: 159: RC0 = 0;
  9010  13F8  0020               	movlb	0	; select bank0
  9011  13F9  100E               	bcf	14,0	;volatile
  9012                           
  9013                           ;CC2500_B1.c: 160: RC4 = 1;
  9014  13FA  160E               	bsf	14,4	;volatile
  9015  13FB  0008               	return
  9016  13FC                     __end_of_CC2500_PowerRST:	
  9017                           
  9018                           	psect	text43
  9019  11A2                     __ptext43:	
  9020 ;; *************** function _CC2500_InitSetREG *****************
  9021 ;; Defined at:
  9022 ;;		line 166 in file "../src/CC2500_B1.c"
  9023 ;; Parameters:    Size  Location     Type
  9024 ;;		None
  9025 ;; Auto vars:     Size  Location     Type
  9026 ;;  loop_c          1    2[BANK0 ] unsigned char 
  9027 ;;  temp2           1    1[BANK0 ] unsigned char 
  9028 ;;  temp1           1    0[BANK0 ] unsigned char 
  9029 ;; Return value:  Size  Location     Type
  9030 ;;		None               void
  9031 ;; Registers used:
  9032 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9033 ;; Tracked objects:
  9034 ;;		On entry : 0/0
  9035 ;;		On exit  : 0/0
  9036 ;;		Unchanged: 0/0
  9037 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9038 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9039 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9040 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9041 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9042 ;;Total ram usage:        4 bytes
  9043 ;; Hardware stack levels used:    1
  9044 ;; Hardware stack levels required when called:    5
  9045 ;; This function calls:
  9046 ;;		_CC2500_WriteREG
  9047 ;; This function is called by:
  9048 ;;		_CC2500_PowerOnInitial
  9049 ;; This function uses a non-reentrant model
  9050 ;;
  9051                           
  9052                           
  9053                           ;psect for function _CC2500_InitSetREG
  9054  11A2                     _CC2500_InitSetREG:	
  9055                           
  9056                           ;CC2500_B1.c: 167: unsigned char loop_c;
  9057                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  9058                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  9059                           
  9060                           ;incstack = 0
  9061                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9062  11A2  0020               	movlb	0	; select bank0
  9063  11A3  01A2               	clrf	CC2500_InitSetREG@loop_c
  9064  11A4                     L4:	
  9065  11A4  302F               	movlw	47
  9066  11A5  0222               	subwf	CC2500_InitSetREG@loop_c,w
  9067  11A6  1803               	btfsc	3,0
  9068  11A7  0008               	return
  9069                           
  9070                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  9071  11A8  0822               	movf	CC2500_InitSetREG@loop_c,w
  9072  11A9  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  9073  11AA  0084               	movwf	4
  9074  11AB  3090               	movlw	high (_CC2500_registers_address| (0+32768))
  9075  11AC  1803               	skipnc
  9076  11AD  3E01               	addlw	1
  9077  11AE  0085               	movwf	5
  9078  11AF  0800               	movf	0,w	;code access
  9079  11B0  00F7               	movwf	??_CC2500_InitSetREG
  9080  11B1  0877               	movf	??_CC2500_InitSetREG,w
  9081  11B2  00A0               	movwf	CC2500_InitSetREG@temp1
  9082                           
  9083                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9084  11B3  0822               	movf	CC2500_InitSetREG@loop_c,w
  9085  11B4  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9086  11B5  0084               	movwf	4
  9087  11B6  3090               	movlw	high (_CC2500_rfSettings| (0+32768))
  9088  11B7  1803               	skipnc
  9089  11B8  3E01               	addlw	1
  9090  11B9  0085               	movwf	5
  9091  11BA  0800               	movf	0,w	;code access
  9092  11BB  00F7               	movwf	??_CC2500_InitSetREG
  9093  11BC  0877               	movf	??_CC2500_InitSetREG,w
  9094  11BD  00A1               	movwf	CC2500_InitSetREG@temp2
  9095                           
  9096                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9097  11BE  0821               	movf	CC2500_InitSetREG@temp2,w
  9098  11BF  00F7               	movwf	??_CC2500_InitSetREG
  9099  11C0  0877               	movf	??_CC2500_InitSetREG,w
  9100  11C1  00F4               	movwf	CC2500_WriteREG@value
  9101  11C2  0820               	movf	CC2500_InitSetREG@temp1,w
  9102  11C3  3190  2070  3191   	fcall	_CC2500_WriteREG
  9103  11C6  3001               	movlw	1
  9104  11C7  00F7               	movwf	??_CC2500_InitSetREG
  9105  11C8  0877               	movf	??_CC2500_InitSetREG,w
  9106  11C9  0020               	movlb	0	; select bank0
  9107  11CA  07A2               	addwf	CC2500_InitSetREG@loop_c,f
  9108  11CB  29A4               	goto	L4
  9109  11CC                     __end_of_CC2500_InitSetREG:	
  9110                           
  9111                           	psect	text44
  9112  1F1E                     __ptext44:	
  9113 ;; *************** function _CC2500_InitPATable *****************
  9114 ;; Defined at:
  9115 ;;		line 181 in file "../src/CC2500_B1.c"
  9116 ;; Parameters:    Size  Location     Type
  9117 ;;		None
  9118 ;; Auto vars:     Size  Location     Type
  9119 ;;  loop_d          1    9[COMMON] unsigned char 
  9120 ;;  temp            1    8[COMMON] unsigned char 
  9121 ;; Return value:  Size  Location     Type
  9122 ;;		None               void
  9123 ;; Registers used:
  9124 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9125 ;; Tracked objects:
  9126 ;;		On entry : 0/0
  9127 ;;		On exit  : 0/0
  9128 ;;		Unchanged: 0/0
  9129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9131 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9132 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9133 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9134 ;;Total ram usage:        3 bytes
  9135 ;; Hardware stack levels used:    1
  9136 ;; Hardware stack levels required when called:    5
  9137 ;; This function calls:
  9138 ;;		_CC2500_WriteREG
  9139 ;; This function is called by:
  9140 ;;		_CC2500_PowerOnInitial
  9141 ;; This function uses a non-reentrant model
  9142 ;;
  9143                           
  9144                           
  9145                           ;psect for function _CC2500_InitPATable
  9146  1F1E                     _CC2500_InitPATable:	
  9147                           
  9148                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9149                           ;CC2500_B1.c: 183: unsigned char temp;
  9150                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9151                           
  9152                           ;incstack = 0
  9153                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9154  1F1E  01F9               	clrf	CC2500_InitPATable@loop_d
  9155  1F1F                     L5:	
  9156  1F1F  3008               	movlw	8
  9157  1F20  0279               	subwf	CC2500_InitPATable@loop_d,w
  9158  1F21  1803               	btfsc	3,0
  9159  1F22  0008               	return
  9160                           
  9161                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9162  1F23  0879               	movf	CC2500_InitPATable@loop_d,w
  9163  1F24  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9164  1F25  0084               	movwf	4
  9165  1F26  3090               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9166  1F27  1803               	skipnc
  9167  1F28  3E01               	addlw	1
  9168  1F29  0085               	movwf	5
  9169  1F2A  0800               	movf	0,w	;code access
  9170  1F2B  00F7               	movwf	??_CC2500_InitPATable
  9171  1F2C  0877               	movf	??_CC2500_InitPATable,w
  9172  1F2D  00F8               	movwf	CC2500_InitPATable@temp
  9173                           
  9174                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9175  1F2E  0878               	movf	CC2500_InitPATable@temp,w
  9176  1F2F  00F7               	movwf	??_CC2500_InitPATable
  9177  1F30  0877               	movf	??_CC2500_InitPATable,w
  9178  1F31  00F4               	movwf	CC2500_WriteREG@value
  9179  1F32  303E               	movlw	62
  9180  1F33  3190  2070  319F   	fcall	_CC2500_WriteREG
  9181  1F36  3001               	movlw	1
  9182  1F37  00F7               	movwf	??_CC2500_InitPATable
  9183  1F38  0877               	movf	??_CC2500_InitPATable,w
  9184  1F39  07F9               	addwf	CC2500_InitPATable@loop_d,f
  9185  1F3A  2F1F               	goto	L5
  9186  1F3B                     __end_of_CC2500_InitPATable:	
  9187                           
  9188                           	psect	text45
  9189  1070                     __ptext45:	
  9190 ;; *************** function _CC2500_WriteREG *****************
  9191 ;; Defined at:
  9192 ;;		line 258 in file "../src/CC2500_B1.c"
  9193 ;; Parameters:    Size  Location     Type
  9194 ;;  w_addr          1    wreg     unsigned char 
  9195 ;;  value           1    4[COMMON] unsigned char 
  9196 ;; Auto vars:     Size  Location     Type
  9197 ;;  w_addr          1    6[COMMON] unsigned char 
  9198 ;; Return value:  Size  Location     Type
  9199 ;;		None               void
  9200 ;; Registers used:
  9201 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9202 ;; Tracked objects:
  9203 ;;		On entry : 0/0
  9204 ;;		On exit  : 0/0
  9205 ;;		Unchanged: 0/0
  9206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9207 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9208 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9209 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9210 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9211 ;;Total ram usage:        3 bytes
  9212 ;; Hardware stack levels used:    1
  9213 ;; Hardware stack levels required when called:    4
  9214 ;; This function calls:
  9215 ;;		_CC2500_WriteByte
  9216 ;;		_RF_Timeout_Counter
  9217 ;;		_setRF_TimeoutCleared
  9218 ;; This function is called by:
  9219 ;;		_CC2500_InitSetREG
  9220 ;;		_CC2500_InitPATable
  9221 ;; This function uses a non-reentrant model
  9222 ;;
  9223                           
  9224                           
  9225                           ;psect for function _CC2500_WriteREG
  9226  1070                     _CC2500_WriteREG:	
  9227                           
  9228                           ;incstack = 0
  9229                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9230                           ;CC2500_WriteREG@w_addr stored from wreg
  9231  1070  00F6               	movwf	CC2500_WriteREG@w_addr
  9232                           
  9233                           ;CC2500_B1.c: 259: RC4 = 0;
  9234  1071  0020               	movlb	0	; select bank0
  9235  1072  120E               	bcf	14,4	;volatile
  9236                           
  9237                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9238  1073  0876               	movf	CC2500_WriteREG@w_addr,w
  9239  1074  00F5               	movwf	??_CC2500_WriteREG
  9240  1075  0875               	movf	??_CC2500_WriteREG,w
  9241  1076  0021               	movlb	1	; select bank1
  9242  1077  00CA               	movwf	_SPI0Buffer^(0+128)
  9243                           
  9244                           ;CC2500_B1.c: 261: while (RC2 == 1 && RF1.Timeout == 0) {
  9245  1078  287C               	goto	l9194
  9246  1079                     l9192:	
  9247                           
  9248                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9249  1079  319D  25A6  3190   	fcall	_RF_Timeout_Counter
  9250  107C                     l9194:	
  9251  107C  0020               	movlb	0	; select bank0
  9252  107D  1D0E               	btfss	14,2	;volatile
  9253  107E  2882               	goto	l9198
  9254  107F  0021               	movlb	1	; select bank1
  9255  1080  1F21               	btfss	(_RF1^(0+128)+1),6
  9256  1081  2879               	goto	l9192
  9257  1082                     l9198:	
  9258                           
  9259                           ;CC2500_B1.c: 263: };
  9260                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9261  1082  319A  22C9  3190   	fcall	_setRF_TimeoutCleared
  9262                           
  9263                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9264  1085  319E  2612  3190   	fcall	_CC2500_WriteByte
  9265                           
  9266                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9267  1088  0874               	movf	CC2500_WriteREG@value,w
  9268  1089  00F5               	movwf	??_CC2500_WriteREG
  9269  108A  0875               	movf	??_CC2500_WriteREG,w
  9270  108B  0021               	movlb	1	; select bank1
  9271  108C  00CA               	movwf	_SPI0Buffer^(0+128)
  9272                           
  9273                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9274  108D  319E  2612         	fcall	_CC2500_WriteByte
  9275                           
  9276                           ;CC2500_B1.c: 269: RC4 = 1;
  9277  108F  0020               	movlb	0	; select bank0
  9278  1090  160E               	bsf	14,4	;volatile
  9279  1091  0008               	return
  9280  1092                     __end_of_CC2500_WriteREG:	
  9281                           
  9282                           	psect	text46
  9283  1B5D                     __ptext46:	
  9284 ;; *************** function _CC2500_FrequencyCabr *****************
  9285 ;; Defined at:
  9286 ;;		line 208 in file "../src/CC2500_B1.c"
  9287 ;; Parameters:    Size  Location     Type
  9288 ;;		None
  9289 ;; Auto vars:     Size  Location     Type
  9290 ;;		None
  9291 ;; Return value:  Size  Location     Type
  9292 ;;		None               void
  9293 ;; Registers used:
  9294 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9295 ;; Tracked objects:
  9296 ;;		On entry : 0/0
  9297 ;;		On exit  : 0/0
  9298 ;;		Unchanged: 0/0
  9299 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9303 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9304 ;;Total ram usage:        0 bytes
  9305 ;; Hardware stack levels used:    1
  9306 ;; Hardware stack levels required when called:    5
  9307 ;; This function calls:
  9308 ;;		_CC2500_WriteCommand
  9309 ;;		_DelayTime_1us
  9310 ;; This function is called by:
  9311 ;;		_CC2500_PowerOnInitial
  9312 ;; This function uses a non-reentrant model
  9313 ;;
  9314                           
  9315                           
  9316                           ;psect for function _CC2500_FrequencyCabr
  9317  1B5D                     _CC2500_FrequencyCabr:	
  9318                           
  9319                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9320                           
  9321                           ;incstack = 0
  9322                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9323  1B5D  3033               	movlw	51
  9324  1B5E  319E  2642  319B   	fcall	_CC2500_WriteCommand
  9325                           
  9326                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9327  1B61  30E8               	movlw	232
  9328  1B62  00F2               	movwf	DelayTime_1us@count
  9329  1B63  3003               	movlw	3
  9330  1B64  00F3               	movwf	DelayTime_1us@count+1
  9331  1B65  3190  20DA         	fcall	_DelayTime_1us
  9332  1B67  0008               	return
  9333  1B68                     __end_of_CC2500_FrequencyCabr:	
  9334                           
  9335                           	psect	text47
  9336  10DA                     __ptext47:	
  9337 ;; *************** function _DelayTime_1us *****************
  9338 ;; Defined at:
  9339 ;;		line 327 in file "../src/CC2500_B1.c"
  9340 ;; Parameters:    Size  Location     Type
  9341 ;;  count           2    2[COMMON] int 
  9342 ;; Auto vars:     Size  Location     Type
  9343 ;;  j               2    6[COMMON] unsigned int 
  9344 ;;  i               2    4[COMMON] unsigned int 
  9345 ;; Return value:  Size  Location     Type
  9346 ;;		None               void
  9347 ;; Registers used:
  9348 ;;		wreg, status,2
  9349 ;; Tracked objects:
  9350 ;;		On entry : 0/0
  9351 ;;		On exit  : 0/0
  9352 ;;		Unchanged: 0/0
  9353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9354 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9355 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9356 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9357 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9358 ;;Total ram usage:        6 bytes
  9359 ;; Hardware stack levels used:    1
  9360 ;; Hardware stack levels required when called:    3
  9361 ;; This function calls:
  9362 ;;		Nothing
  9363 ;; This function is called by:
  9364 ;;		_CC2500_PowerRST
  9365 ;;		_CC2500_FrequencyCabr
  9366 ;; This function uses a non-reentrant model
  9367 ;;
  9368                           
  9369                           
  9370                           ;psect for function _DelayTime_1us
  9371  10DA                     _DelayTime_1us:	
  9372                           
  9373                           ;CC2500_B1.c: 328: unsigned int i, j;
  9374                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9375                           
  9376                           ;incstack = 0
  9377                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9378  10DA  3001               	movlw	1
  9379  10DB  00F4               	movwf	DelayTime_1us@i
  9380  10DC  3000               	movlw	0
  9381  10DD  00F5               	movwf	DelayTime_1us@i+1
  9382  10DE                     l367:	
  9383  10DE  0873               	movf	DelayTime_1us@count+1,w
  9384  10DF  0275               	subwf	DelayTime_1us@i+1,w
  9385  10E0  1D03               	skipz
  9386  10E1  28E4               	goto	u6235
  9387  10E2  0872               	movf	DelayTime_1us@count,w
  9388  10E3  0274               	subwf	DelayTime_1us@i,w
  9389  10E4                     u6235:	
  9390  10E4  1803               	btfsc	3,0
  9391  10E5  0008               	return
  9392                           
  9393                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9394  10E6  01F6               	clrf	DelayTime_1us@j
  9395  10E7  01F7               	clrf	DelayTime_1us@j+1
  9396  10E8  3000               	movlw	0
  9397  10E9  0277               	subwf	DelayTime_1us@j+1,w
  9398  10EA  3002               	movlw	2
  9399  10EB  1903               	skipnz
  9400  10EC  0276               	subwf	DelayTime_1us@j,w
  9401  10ED  1803               	btfsc	3,0
  9402  10EE  28FA               	goto	l6818
  9403  10EF                     l6816:	
  9404  10EF  3001               	movlw	1
  9405  10F0  07F6               	addwf	DelayTime_1us@j,f
  9406  10F1  3000               	movlw	0
  9407  10F2  3DF7               	addwfc	DelayTime_1us@j+1,f
  9408  10F3  3000               	movlw	0
  9409  10F4  0277               	subwf	DelayTime_1us@j+1,w
  9410  10F5  3002               	movlw	2
  9411  10F6  1903               	skipnz
  9412  10F7  0276               	subwf	DelayTime_1us@j,w
  9413  10F8  1C03               	skipc
  9414  10F9  28EF               	goto	l6816
  9415  10FA                     l6818:	
  9416  10FA  3001               	movlw	1
  9417  10FB  07F4               	addwf	DelayTime_1us@i,f
  9418  10FC  3000               	movlw	0
  9419  10FD  3DF5               	addwfc	DelayTime_1us@i+1,f
  9420  10FE  28DE               	goto	l367
  9421  10FF                     __end_of_DelayTime_1us:	
  9422                           
  9423                           	psect	text48
  9424  1AD1                     __ptext48:	
  9425 ;; *************** function _CC2500_ClearTXFIFO *****************
  9426 ;; Defined at:
  9427 ;;		line 194 in file "../src/CC2500_B1.c"
  9428 ;; Parameters:    Size  Location     Type
  9429 ;;		None
  9430 ;; Auto vars:     Size  Location     Type
  9431 ;;		None
  9432 ;; Return value:  Size  Location     Type
  9433 ;;		None               void
  9434 ;; Registers used:
  9435 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9436 ;; Tracked objects:
  9437 ;;		On entry : 0/0
  9438 ;;		On exit  : 0/0
  9439 ;;		Unchanged: 0/0
  9440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9441 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9442 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9443 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9444 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9445 ;;Total ram usage:        0 bytes
  9446 ;; Hardware stack levels used:    1
  9447 ;; Hardware stack levels required when called:    5
  9448 ;; This function calls:
  9449 ;;		_CC2500_WriteCommand
  9450 ;; This function is called by:
  9451 ;;		_CC2500_PowerOnInitial
  9452 ;; This function uses a non-reentrant model
  9453 ;;
  9454                           
  9455                           
  9456                           ;psect for function _CC2500_ClearTXFIFO
  9457  1AD1                     _CC2500_ClearTXFIFO:	
  9458                           
  9459                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
  9460                           
  9461                           ;incstack = 0
  9462                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9463  1AD1  303B               	movlw	59
  9464  1AD2  319E  2642         	fcall	_CC2500_WriteCommand
  9465  1AD4  0008               	return
  9466  1AD5                     __end_of_CC2500_ClearTXFIFO:	
  9467                           
  9468                           	psect	text49
  9469  1ACD                     __ptext49:	
  9470 ;; *************** function _CC2500_ClearRXFIFO *****************
  9471 ;; Defined at:
  9472 ;;		line 201 in file "../src/CC2500_B1.c"
  9473 ;; Parameters:    Size  Location     Type
  9474 ;;		None
  9475 ;; Auto vars:     Size  Location     Type
  9476 ;;		None
  9477 ;; Return value:  Size  Location     Type
  9478 ;;		None               void
  9479 ;; Registers used:
  9480 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9481 ;; Tracked objects:
  9482 ;;		On entry : 0/0
  9483 ;;		On exit  : 0/0
  9484 ;;		Unchanged: 0/0
  9485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9489 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9490 ;;Total ram usage:        0 bytes
  9491 ;; Hardware stack levels used:    1
  9492 ;; Hardware stack levels required when called:    5
  9493 ;; This function calls:
  9494 ;;		_CC2500_WriteCommand
  9495 ;; This function is called by:
  9496 ;;		_CC2500_PowerOnInitial
  9497 ;; This function uses a non-reentrant model
  9498 ;;
  9499                           
  9500                           
  9501                           ;psect for function _CC2500_ClearRXFIFO
  9502  1ACD                     _CC2500_ClearRXFIFO:	
  9503                           
  9504                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
  9505                           
  9506                           ;incstack = 0
  9507                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9508  1ACD  303A               	movlw	58
  9509  1ACE  319E  2642         	fcall	_CC2500_WriteCommand
  9510  1AD0  0008               	return
  9511  1AD1                     __end_of_CC2500_ClearRXFIFO:	
  9512                           
  9513                           	psect	text50
  9514  1E42                     __ptext50:	
  9515 ;; *************** function _CC2500_WriteCommand *****************
  9516 ;; Defined at:
  9517 ;;		line 292 in file "../src/CC2500_B1.c"
  9518 ;; Parameters:    Size  Location     Type
  9519 ;;  command         1    wreg     unsigned char 
  9520 ;; Auto vars:     Size  Location     Type
  9521 ;;  command         1    5[COMMON] unsigned char 
  9522 ;; Return value:  Size  Location     Type
  9523 ;;		None               void
  9524 ;; Registers used:
  9525 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9526 ;; Tracked objects:
  9527 ;;		On entry : 0/0
  9528 ;;		On exit  : 0/0
  9529 ;;		Unchanged: 0/0
  9530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9532 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9533 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9534 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9535 ;;Total ram usage:        2 bytes
  9536 ;; Hardware stack levels used:    1
  9537 ;; Hardware stack levels required when called:    4
  9538 ;; This function calls:
  9539 ;;		_CC2500_WriteByte
  9540 ;;		_RF_Timeout_Counter
  9541 ;;		_setRF_TimeoutCleared
  9542 ;; This function is called by:
  9543 ;;		_CC2500_TxData
  9544 ;;		_CC2500_RxData
  9545 ;;		_CC2500_ClearTXFIFO
  9546 ;;		_CC2500_ClearRXFIFO
  9547 ;;		_CC2500_FrequencyCabr
  9548 ;;		_CC2500_SIDLEMode
  9549 ;;		_setRF_Main
  9550 ;;		_RF_RxDisable
  9551 ;; This function uses a non-reentrant model
  9552 ;;
  9553                           
  9554                           
  9555                           ;psect for function _CC2500_WriteCommand
  9556  1E42                     _CC2500_WriteCommand:	
  9557                           
  9558                           ;incstack = 0
  9559                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9560                           ;CC2500_WriteCommand@command stored from wreg
  9561  1E42  00F5               	movwf	CC2500_WriteCommand@command
  9562                           
  9563                           ;CC2500_B1.c: 293: RC4 = 0;
  9564  1E43  0020               	movlb	0	; select bank0
  9565  1E44  120E               	bcf	14,4	;volatile
  9566                           
  9567                           ;CC2500_B1.c: 294: SPI0Buffer = command;
  9568  1E45  0875               	movf	CC2500_WriteCommand@command,w
  9569  1E46  00F4               	movwf	??_CC2500_WriteCommand
  9570  1E47  0874               	movf	??_CC2500_WriteCommand,w
  9571  1E48  0021               	movlb	1	; select bank1
  9572  1E49  00CA               	movwf	_SPI0Buffer^(0+128)
  9573                           
  9574                           ;CC2500_B1.c: 296: while (RC2 == 1 && RF1.Timeout == 0) {
  9575  1E4A  2E4E               	goto	l9178
  9576  1E4B                     l9176:	
  9577                           
  9578                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
  9579  1E4B  319D  25A6  319E   	fcall	_RF_Timeout_Counter
  9580  1E4E                     l9178:	
  9581  1E4E  0020               	movlb	0	; select bank0
  9582  1E4F  1D0E               	btfss	14,2	;volatile
  9583  1E50  2E54               	goto	l9182
  9584  1E51  0021               	movlb	1	; select bank1
  9585  1E52  1F21               	btfss	(_RF1^(0+128)+1),6
  9586  1E53  2E4B               	goto	l9176
  9587  1E54                     l9182:	
  9588                           
  9589                           ;CC2500_B1.c: 298: };
  9590                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
  9591  1E54  319A  22C9  319E   	fcall	_setRF_TimeoutCleared
  9592                           
  9593                           ;CC2500_B1.c: 301: CC2500_WriteByte();
  9594  1E57  319E  2612         	fcall	_CC2500_WriteByte
  9595                           
  9596                           ;CC2500_B1.c: 302: RC4 = 1;
  9597  1E59  0020               	movlb	0	; select bank0
  9598  1E5A  160E               	bsf	14,4	;volatile
  9599  1E5B  0008               	return
  9600  1E5C                     __end_of_CC2500_WriteCommand:	
  9601                           
  9602                           	psect	text51
  9603  1AC9                     __ptext51:	
  9604 ;; *************** function _setRF_TimeoutCleared *****************
  9605 ;; Defined at:
  9606 ;;		line 149 in file "../src/RF_Control_B1.c"
  9607 ;; Parameters:    Size  Location     Type
  9608 ;;		None
  9609 ;; Auto vars:     Size  Location     Type
  9610 ;;		None
  9611 ;; Return value:  Size  Location     Type
  9612 ;;		None               void
  9613 ;; Registers used:
  9614 ;;		status,2
  9615 ;; Tracked objects:
  9616 ;;		On entry : 0/0
  9617 ;;		On exit  : 0/0
  9618 ;;		Unchanged: 0/0
  9619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9620 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9621 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9622 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9623 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9624 ;;Total ram usage:        0 bytes
  9625 ;; Hardware stack levels used:    1
  9626 ;; Hardware stack levels required when called:    3
  9627 ;; This function calls:
  9628 ;;		Nothing
  9629 ;; This function is called by:
  9630 ;;		_CC2500_TxData
  9631 ;;		_CC2500_RxData
  9632 ;;		_CC2500_PowerRST
  9633 ;;		_CC2500_WriteREG
  9634 ;;		_CC2500_WriteCommand
  9635 ;;		_CC2500_ReadStatus
  9636 ;;		_CC2500_ReadREG
  9637 ;; This function uses a non-reentrant model
  9638 ;;
  9639                           
  9640                           
  9641                           ;psect for function _setRF_TimeoutCleared
  9642  1AC9                     _setRF_TimeoutCleared:	
  9643                           
  9644                           ;RF_Control_B1.c: 150: RF1.TimeoutCount = 0;
  9645                           
  9646                           ;incstack = 0
  9647                           ; Regs used in _setRF_TimeoutCleared: [status,2]
  9648  1AC9  0021               	movlb	1	; select bank1
  9649  1ACA  01AC               	clrf	(_RF1^(0+128)+12)
  9650  1ACB  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9651  1ACC  0008               	return
  9652  1ACD                     __end_of_setRF_TimeoutCleared:	
  9653                           
  9654                           	psect	text52
  9655  1DA6                     __ptext52:	
  9656 ;; *************** function _RF_Timeout_Counter *****************
  9657 ;; Defined at:
  9658 ;;		line 141 in file "../src/RF_Control_B1.c"
  9659 ;; Parameters:    Size  Location     Type
  9660 ;;		None
  9661 ;; Auto vars:     Size  Location     Type
  9662 ;;		None
  9663 ;; Return value:  Size  Location     Type
  9664 ;;		None               void
  9665 ;; Registers used:
  9666 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9667 ;; Tracked objects:
  9668 ;;		On entry : 0/0
  9669 ;;		On exit  : 0/0
  9670 ;;		Unchanged: 0/0
  9671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9673 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9675 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9676 ;;Total ram usage:        0 bytes
  9677 ;; Hardware stack levels used:    1
  9678 ;; Hardware stack levels required when called:    3
  9679 ;; This function calls:
  9680 ;;		Nothing
  9681 ;; This function is called by:
  9682 ;;		_CC2500_TxData
  9683 ;;		_CC2500_RxData
  9684 ;;		_CC2500_PowerRST
  9685 ;;		_CC2500_WriteREG
  9686 ;;		_CC2500_WriteCommand
  9687 ;;		_CC2500_ReadStatus
  9688 ;;		_CC2500_ReadREG
  9689 ;; This function uses a non-reentrant model
  9690 ;;
  9691                           
  9692                           
  9693                           ;psect for function _RF_Timeout_Counter
  9694  1DA6                     _RF_Timeout_Counter:	
  9695                           
  9696                           ;RF_Control_B1.c: 142: RF1.TimeoutCount++;
  9697                           
  9698                           ;incstack = 0
  9699                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  9700  1DA6  3001               	movlw	1
  9701  1DA7  0021               	movlb	1	; select bank1
  9702  1DA8  07AC               	addwf	(_RF1^(0+128)+12),f
  9703  1DA9  3000               	movlw	0
  9704  1DAA  3DAD               	addwfc	((_RF1+1)^(0+128)+12),f
  9705                           
  9706                           ;RF_Control_B1.c: 143: if (RF1.TimeoutCount == 25000) {
  9707  1DAB  300C               	movlw	12
  9708  1DAC  3EA0               	addlw	_RF1& (0+255)
  9709  1DAD  0086               	movwf	6
  9710  1DAE  0187               	clrf	7
  9711  1DAF  3F40               	moviw [0]fsr1
  9712  1DB0  3AA8               	xorlw	168
  9713  1DB1  1D03               	skipz
  9714  1DB2  2DB5               	goto	u10165
  9715  1DB3  3F41               	moviw [1]fsr1
  9716  1DB4  3A61               	xorlw	97
  9717  1DB5                     u10165:	
  9718  1DB5  1D03               	skipz
  9719  1DB6  0008               	return
  9720                           
  9721                           ;RF_Control_B1.c: 144: RF1.TimeoutCount = 0;
  9722  1DB7  01AC               	clrf	(_RF1^(0+128)+12)
  9723  1DB8  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9724                           
  9725                           ;RF_Control_B1.c: 145: RF1.Timeout = 1;
  9726  1DB9  1721               	bsf	(_RF1^(0+128)+1),6
  9727  1DBA  0008               	return
  9728  1DBB                     __end_of_RF_Timeout_Counter:	
  9729                           
  9730                           	psect	text53
  9731  1E12                     __ptext53:	
  9732 ;; *************** function _CC2500_WriteByte *****************
  9733 ;; Defined at:
  9734 ;;		line 226 in file "../src/CC2500_B1.c"
  9735 ;; Parameters:    Size  Location     Type
  9736 ;;		None
  9737 ;; Auto vars:     Size  Location     Type
  9738 ;;  loop_a          1    3[COMMON] unsigned char 
  9739 ;; Return value:  Size  Location     Type
  9740 ;;		None               void
  9741 ;; Registers used:
  9742 ;;		wreg, status,2, status,0
  9743 ;; Tracked objects:
  9744 ;;		On entry : 0/0
  9745 ;;		On exit  : 0/0
  9746 ;;		Unchanged: 0/0
  9747 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9749 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9750 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9751 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9752 ;;Total ram usage:        2 bytes
  9753 ;; Hardware stack levels used:    1
  9754 ;; Hardware stack levels required when called:    3
  9755 ;; This function calls:
  9756 ;;		Nothing
  9757 ;; This function is called by:
  9758 ;;		_CC2500_TxData
  9759 ;;		_CC2500_RxData
  9760 ;;		_CC2500_PowerRST
  9761 ;;		_CC2500_WriteREG
  9762 ;;		_CC2500_WriteCommand
  9763 ;;		_CC2500_ReadStatus
  9764 ;;		_CC2500_ReadREG
  9765 ;; This function uses a non-reentrant model
  9766 ;;
  9767                           
  9768                           
  9769                           ;psect for function _CC2500_WriteByte
  9770  1E12                     _CC2500_WriteByte:	
  9771                           
  9772                           ;CC2500_B1.c: 227: unsigned char loop_a;
  9773                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
  9774                           
  9775                           ;incstack = 0
  9776                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
  9777  1E12  01F3               	clrf	CC2500_WriteByte@loop_a
  9778  1E13                     L6:	
  9779  1E13  3008               	movlw	8
  9780  1E14  0273               	subwf	CC2500_WriteByte@loop_a,w
  9781  1E15  1803               	btfsc	3,0
  9782  1E16  0008               	return
  9783                           
  9784                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
  9785  1E17  0021               	movlb	1	; select bank1
  9786  1E18  1FCA               	btfss	_SPI0Buffer^(0+128),7
  9787  1E19  2E1D               	goto	l323
  9788                           
  9789                           ;CC2500_B1.c: 230: RC0 = 1;
  9790  1E1A  0020               	movlb	0	; select bank0
  9791  1E1B  140E               	bsf	14,0	;volatile
  9792  1E1C  2E1F               	goto	l324
  9793  1E1D                     l323:	
  9794                           
  9795                           ;CC2500_B1.c: 231: else
  9796                           ;CC2500_B1.c: 232: RC0 = 0;
  9797  1E1D  0020               	movlb	0	; select bank0
  9798  1E1E  100E               	bcf	14,0	;volatile
  9799  1E1F                     l324:	
  9800                           
  9801                           ;CC2500_B1.c: 233: RC1 = 1;
  9802  1E1F  148E               	bsf	14,1	;volatile
  9803                           
  9804                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
  9805  1E20  1003               	clrc
  9806  1E21  0021               	movlb	1	; select bank1
  9807  1E22  0DCA               	rlf	_SPI0Buffer^(0+128),f
  9808                           
  9809                           ;CC2500_B1.c: 235: RC1 = 0;
  9810  1E23  0020               	movlb	0	; select bank0
  9811  1E24  108E               	bcf	14,1	;volatile
  9812  1E25  3001               	movlw	1
  9813  1E26  00F2               	movwf	??_CC2500_WriteByte
  9814  1E27  0872               	movf	??_CC2500_WriteByte,w
  9815  1E28  07F3               	addwf	CC2500_WriteByte@loop_a,f
  9816  1E29  2E13               	goto	L6
  9817  1E2A                     __end_of_CC2500_WriteByte:	
  9818                           
  9819                           	psect	text54
  9820  1AB9                     __ptext54:	
  9821 ;; *************** function _RF_Initialization *****************
  9822 ;; Defined at:
  9823 ;;		line 9 in file "../src/RF_Control_B1.c"
  9824 ;; Parameters:    Size  Location     Type
  9825 ;;		None
  9826 ;; Auto vars:     Size  Location     Type
  9827 ;;		None
  9828 ;; Return value:  Size  Location     Type
  9829 ;;		None               void
  9830 ;; Registers used:
  9831 ;;		wreg, status,2, status,0, pclath, cstack
  9832 ;; Tracked objects:
  9833 ;;		On entry : 0/0
  9834 ;;		On exit  : 0/0
  9835 ;;		Unchanged: 0/0
  9836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9840 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9841 ;;Total ram usage:        0 bytes
  9842 ;; Hardware stack levels used:    1
  9843 ;; Hardware stack levels required when called:    4
  9844 ;; This function calls:
  9845 ;;		_setRF_Initialization
  9846 ;; This function is called by:
  9847 ;;		_main
  9848 ;; This function uses a non-reentrant model
  9849 ;;
  9850                           
  9851                           
  9852                           ;psect for function _RF_Initialization
  9853  1AB9                     _RF_Initialization:	
  9854                           
  9855                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9856                           
  9857                           ;incstack = 0
  9858                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9859  1AB9  3190  2066         	fcall	_setRF_Initialization
  9860  1ABB  0008               	return
  9861  1ABC                     __end_of_RF_Initialization:	
  9862                           
  9863                           	psect	text55
  9864  1066                     __ptext55:	
  9865 ;; *************** function _setRF_Initialization *****************
  9866 ;; Defined at:
  9867 ;;		line 17 in file "../src/RF_Control_B1.c"
  9868 ;; Parameters:    Size  Location     Type
  9869 ;;		None
  9870 ;; Auto vars:     Size  Location     Type
  9871 ;;		None
  9872 ;; Return value:  Size  Location     Type
  9873 ;;		None               void
  9874 ;; Registers used:
  9875 ;;		wreg
  9876 ;; Tracked objects:
  9877 ;;		On entry : 0/0
  9878 ;;		On exit  : 0/0
  9879 ;;		Unchanged: 0/0
  9880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9883 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9884 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9885 ;;Total ram usage:        1 bytes
  9886 ;; Hardware stack levels used:    1
  9887 ;; Hardware stack levels required when called:    3
  9888 ;; This function calls:
  9889 ;;		Nothing
  9890 ;; This function is called by:
  9891 ;;		_RF_Initialization
  9892 ;; This function uses a non-reentrant model
  9893 ;;
  9894                           
  9895                           
  9896                           ;psect for function _setRF_Initialization
  9897  1066                     _setRF_Initialization:	
  9898                           
  9899                           ;RF_Control_B1.c: 19: Tx_Length = 21;
  9900                           
  9901                           ;incstack = 0
  9902                           ; Regs used in _setRF_Initialization: [wreg]
  9903  1066  3015               	movlw	21
  9904  1067  00F2               	movwf	??_setRF_Initialization
  9905  1068  0872               	movf	??_setRF_Initialization,w
  9906  1069  0021               	movlb	1	; select bank1
  9907  106A  00CC               	movwf	_Tx_Length^(0+128)
  9908                           
  9909                           ;RF_Control_B1.c: 20: RF1.RunTime = 150;
  9910  106B  3096               	movlw	150
  9911  106C  00A7               	movwf	(_RF1^(0+128)+7)
  9912  106D  3000               	movlw	0
  9913  106E  00A8               	movwf	(_RF1^(0+128)+8)
  9914  106F  0008               	return
  9915  1070                     __end_of_setRF_Initialization:	
  9916                           
  9917                           	psect	text56
  9918  1D05                     __ptext56:	
  9919 ;; *************** function _Mcu_Initialization *****************
  9920 ;; Defined at:
  9921 ;;		line 30 in file "../src/MCU_B1.c"
  9922 ;; Parameters:    Size  Location     Type
  9923 ;;		None
  9924 ;; Auto vars:     Size  Location     Type
  9925 ;;		None
  9926 ;; Return value:  Size  Location     Type
  9927 ;;		None               void
  9928 ;; Registers used:
  9929 ;;		wreg, status,2, status,0, pclath, cstack
  9930 ;; Tracked objects:
  9931 ;;		On entry : 0/0
  9932 ;;		On exit  : 0/0
  9933 ;;		Unchanged: 0/0
  9934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9936 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9938 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9939 ;;Total ram usage:        0 bytes
  9940 ;; Hardware stack levels used:    1
  9941 ;; Hardware stack levels required when called:    4
  9942 ;; This function calls:
  9943 ;;		_ADC_Set
  9944 ;;		_Fosc_Set
  9945 ;;		_IOC_Set
  9946 ;;		_IO_Set
  9947 ;;		_TMR1_Set
  9948 ;;		_WDT_Set
  9949 ;; This function is called by:
  9950 ;;		_main
  9951 ;; This function uses a non-reentrant model
  9952 ;;
  9953                           
  9954                           
  9955                           ;psect for function _Mcu_Initialization
  9956  1D05                     _Mcu_Initialization:	
  9957                           
  9958                           ;MCU_B1.c: 32: Fosc_Set();
  9959                           
  9960                           ;incstack = 0
  9961                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9962  1D05  319A  22C5  319D   	fcall	_Fosc_Set
  9963                           
  9964                           ;MCU_B1.c: 34: IO_Set();
  9965  1D08  319E  2692  319D   	fcall	_IO_Set
  9966                           
  9967                           ;MCU_B1.c: 36: ;;
  9968                           ;MCU_B1.c: 38: TMR1_Set();
  9969  1D0B  319B  23A3  319D   	fcall	_TMR1_Set
  9970                           
  9971                           ;MCU_B1.c: 40: ADC_Set();
  9972  1D0E  319B  2304  319D   	fcall	_ADC_Set
  9973                           
  9974                           ;MCU_B1.c: 42: ;;
  9975                           ;MCU_B1.c: 44: ;;
  9976                           ;MCU_B1.c: 46: IOC_Set();
  9977  1D11  319B  233D  319D   	fcall	_IOC_Set
  9978                           
  9979                           ;MCU_B1.c: 48: ;;
  9980                           ;MCU_B1.c: 50: ;;
  9981                           ;MCU_B1.c: 52: WDT_Set();
  9982  1D14  319B  2334         	fcall	_WDT_Set
  9983  1D16  0008               	return
  9984  1D17                     __end_of_Mcu_Initialization:	
  9985                           
  9986                           	psect	text57
  9987  1B34                     __ptext57:	
  9988 ;; *************** function _WDT_Set *****************
  9989 ;; Defined at:
  9990 ;;		line 1072 in file "../src/MCU_B1.c"
  9991 ;; Parameters:    Size  Location     Type
  9992 ;;		None
  9993 ;; Auto vars:     Size  Location     Type
  9994 ;;		None
  9995 ;; Return value:  Size  Location     Type
  9996 ;;		None               void
  9997 ;; Registers used:
  9998 ;;		wreg
  9999 ;; Tracked objects:
 10000 ;;		On entry : 0/0
 10001 ;;		On exit  : 0/0
 10002 ;;		Unchanged: 0/0
 10003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10005 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10006 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10007 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10008 ;;Total ram usage:        1 bytes
 10009 ;; Hardware stack levels used:    1
 10010 ;; Hardware stack levels required when called:    3
 10011 ;; This function calls:
 10012 ;;		Nothing
 10013 ;; This function is called by:
 10014 ;;		_Mcu_Initialization
 10015 ;; This function uses a non-reentrant model
 10016 ;;
 10017                           
 10018                           
 10019                           ;psect for function _WDT_Set
 10020  1B34                     _WDT_Set:	
 10021                           
 10022                           ;MCU_B1.c: 1079: WDTCON = 0b00010111;;
 10023                           
 10024                           ;incstack = 0
 10025                           ; Regs used in _WDT_Set: [wreg]
 10026  1B34  3017               	movlw	23
 10027  1B35  0021               	movlb	1	; select bank1
 10028  1B36  0097               	movwf	23	;volatile
 10029                           
 10030                           ;MCU_B1.c: 1081: WDT.Enable = 1;
 10031  1B37  1440               	bsf	_WDT^(0+128),0
 10032                           
 10033                           ;MCU_B1.c: 1082: WDT.Timer = 10;
 10034  1B38  300A               	movlw	10
 10035  1B39  00F2               	movwf	??_WDT_Set
 10036  1B3A  0872               	movf	??_WDT_Set,w
 10037  1B3B  00C1               	movwf	(_WDT^(0+128)+1)
 10038  1B3C  0008               	return
 10039  1B3D                     __end_of_WDT_Set:	
 10040                           
 10041                           	psect	text58
 10042  1BA3                     __ptext58:	
 10043 ;; *************** function _TMR1_Set *****************
 10044 ;; Defined at:
 10045 ;;		line 221 in file "../src/MCU_B1.c"
 10046 ;; Parameters:    Size  Location     Type
 10047 ;;		None
 10048 ;; Auto vars:     Size  Location     Type
 10049 ;;		None
 10050 ;; Return value:  Size  Location     Type
 10051 ;;		None               void
 10052 ;; Registers used:
 10053 ;;		wreg
 10054 ;; Tracked objects:
 10055 ;;		On entry : 0/0
 10056 ;;		On exit  : 0/0
 10057 ;;		Unchanged: 0/0
 10058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10061 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10062 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10063 ;;Total ram usage:        0 bytes
 10064 ;; Hardware stack levels used:    1
 10065 ;; Hardware stack levels required when called:    3
 10066 ;; This function calls:
 10067 ;;		Nothing
 10068 ;; This function is called by:
 10069 ;;		_Mcu_Initialization
 10070 ;; This function uses a non-reentrant model
 10071 ;;
 10072                           
 10073                           
 10074                           ;psect for function _TMR1_Set
 10075  1BA3                     _TMR1_Set:	
 10076                           
 10077                           ;MCU_B1.c: 222: T1CON = (0x40 | 0x00 | 0x01);
 10078                           
 10079                           ;incstack = 0
 10080                           ; Regs used in _TMR1_Set: [wreg]
 10081  1BA3  3041               	movlw	65
 10082  1BA4  0020               	movlb	0	; select bank0
 10083  1BA5  0098               	movwf	24	;volatile
 10084                           
 10085                           ;MCU_B1.c: 223: TMR1H = (int)((65536-1480)/256);
 10086  1BA6  30FA               	movlw	250
 10087  1BA7  0097               	movwf	23	;volatile
 10088                           
 10089                           ;MCU_B1.c: 224: TMR1L = (int)((65536-1480)%256);
 10090  1BA8  3038               	movlw	56
 10091  1BA9  0096               	movwf	22	;volatile
 10092                           
 10093                           ;MCU_B1.c: 225: TMR1IE = 1;
 10094  1BAA  0021               	movlb	1	; select bank1
 10095  1BAB  1411               	bsf	17,0	;volatile
 10096                           
 10097                           ;MCU_B1.c: 226: PEIE = 1;
 10098  1BAC  170B               	bsf	11,6	;volatile
 10099                           
 10100                           ;MCU_B1.c: 227: GIE = 1;
 10101  1BAD  178B               	bsf	11,7	;volatile
 10102  1BAE  0008               	return
 10103  1BAF                     __end_of_TMR1_Set:	
 10104                           
 10105                           	psect	text59
 10106  1E92                     __ptext59:	
 10107 ;; *************** function _IO_Set *****************
 10108 ;; Defined at:
 10109 ;;		line 60 in file "../src/MCU_B1.c"
 10110 ;; Parameters:    Size  Location     Type
 10111 ;;		None
 10112 ;; Auto vars:     Size  Location     Type
 10113 ;;		None
 10114 ;; Return value:  Size  Location     Type
 10115 ;;		None               void
 10116 ;; Registers used:
 10117 ;;		wreg, status,2
 10118 ;; Tracked objects:
 10119 ;;		On entry : 0/0
 10120 ;;		On exit  : 0/0
 10121 ;;		Unchanged: 0/0
 10122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10124 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10125 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10126 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10127 ;;Total ram usage:        0 bytes
 10128 ;; Hardware stack levels used:    1
 10129 ;; Hardware stack levels required when called:    3
 10130 ;; This function calls:
 10131 ;;		Nothing
 10132 ;; This function is called by:
 10133 ;;		_Mcu_Initialization
 10134 ;; This function uses a non-reentrant model
 10135 ;;
 10136                           
 10137                           
 10138                           ;psect for function _IO_Set
 10139  1E92                     _IO_Set:	
 10140                           
 10141                           ;MCU_B1.c: 88: TRISA = 0b01110111;;
 10142                           
 10143                           ;incstack = 0
 10144                           ; Regs used in _IO_Set: [wreg+status,2]
 10145  1E92  3077               	movlw	119
 10146  1E93  0021               	movlb	1	; select bank1
 10147  1E94  008C               	movwf	12	;volatile
 10148                           
 10149                           ;MCU_B1.c: 89: TRISB = 0b00000111;;
 10150  1E95  3007               	movlw	7
 10151  1E96  008D               	movwf	13	;volatile
 10152                           
 10153                           ;MCU_B1.c: 90: TRISC = 0b00001100;;
 10154  1E97  300C               	movlw	12
 10155  1E98  008E               	movwf	14	;volatile
 10156                           
 10157                           ;MCU_B1.c: 92: LATA = 0b00000000;;
 10158  1E99  0022               	movlb	2	; select bank2
 10159  1E9A  018C               	clrf	12	;volatile
 10160                           
 10161                           ;MCU_B1.c: 93: LATB = 0b00000010;;
 10162  1E9B  3002               	movlw	2
 10163  1E9C  008D               	movwf	13	;volatile
 10164                           
 10165                           ;MCU_B1.c: 94: LATC = 0b00000000;;
 10166  1E9D  018E               	clrf	14	;volatile
 10167                           
 10168                           ;MCU_B1.c: 96: ANSELA = 0b00100010;;
 10169  1E9E  3022               	movlw	34
 10170  1E9F  0023               	movlb	3	; select bank3
 10171  1EA0  008C               	movwf	12	;volatile
 10172                           
 10173                           ;MCU_B1.c: 97: ANSELB = 0b00000000;;
 10174  1EA1  018D               	clrf	13	;volatile
 10175                           
 10176                           ;MCU_B1.c: 98: ANSELC = 0b00000000;;
 10177  1EA2  018E               	clrf	14	;volatile
 10178                           
 10179                           ;MCU_B1.c: 100: PORTA = 0b01110111;;
 10180  1EA3  3077               	movlw	119
 10181  1EA4  0020               	movlb	0	; select bank0
 10182  1EA5  008C               	movwf	12	;volatile
 10183                           
 10184                           ;MCU_B1.c: 101: PORTB = 0b00000111;;
 10185  1EA6  3007               	movlw	7
 10186  1EA7  008D               	movwf	13	;volatile
 10187                           
 10188                           ;MCU_B1.c: 102: PORTC = 0b00001100;;
 10189  1EA8  300C               	movlw	12
 10190  1EA9  008E               	movwf	14	;volatile
 10191                           
 10192                           ;MCU_B1.c: 104: WPUB = 0b00000000;;
 10193  1EAA  0024               	movlb	4	; select bank4
 10194  1EAB  018D               	clrf	13	;volatile
 10195  1EAC  0008               	return
 10196  1EAD                     __end_of_IO_Set:	
 10197                           
 10198                           	psect	text60
 10199  1B3D                     __ptext60:	
 10200 ;; *************** function _IOC_Set *****************
 10201 ;; Defined at:
 10202 ;;		line 362 in file "../src/MCU_B1.c"
 10203 ;; Parameters:    Size  Location     Type
 10204 ;;		None
 10205 ;; Auto vars:     Size  Location     Type
 10206 ;;		None
 10207 ;; Return value:  Size  Location     Type
 10208 ;;		None               void
 10209 ;; Registers used:
 10210 ;;		wreg, status,2
 10211 ;; Tracked objects:
 10212 ;;		On entry : 0/0
 10213 ;;		On exit  : 0/0
 10214 ;;		Unchanged: 0/0
 10215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10219 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10220 ;;Total ram usage:        0 bytes
 10221 ;; Hardware stack levels used:    1
 10222 ;; Hardware stack levels required when called:    3
 10223 ;; This function calls:
 10224 ;;		Nothing
 10225 ;; This function is called by:
 10226 ;;		_Mcu_Initialization
 10227 ;; This function uses a non-reentrant model
 10228 ;;
 10229                           
 10230                           
 10231                           ;psect for function _IOC_Set
 10232  1B3D                     _IOC_Set:	
 10233                           
 10234                           ;MCU_B1.c: 364: IOCBP = 0b00000100;;
 10235                           
 10236                           ;incstack = 0
 10237                           ; Regs used in _IOC_Set: [wreg+status,2]
 10238  1B3D  3004               	movlw	4
 10239  1B3E  0027               	movlb	7	; select bank7
 10240  1B3F  0094               	movwf	20	;volatile
 10241                           
 10242                           ;MCU_B1.c: 365: IOCBN = 0b00000000;;
 10243  1B40  0195               	clrf	21	;volatile
 10244                           
 10245                           ;MCU_B1.c: 367: IOCBF = 0b00000000;
 10246  1B41  0196               	clrf	22	;volatile
 10247                           
 10248                           ;MCU_B1.c: 369: IOCIE = 1;
 10249  1B42  158B               	bsf	11,3	;volatile
 10250                           
 10251                           ;MCU_B1.c: 370: IOCIF = 0;
 10252  1B43  100B               	bcf	11,0	;volatile
 10253                           
 10254                           ;MCU_B1.c: 371: PEIE = 1;
 10255  1B44  170B               	bsf	11,6	;volatile
 10256                           
 10257                           ;MCU_B1.c: 372: GIE = 1;
 10258  1B45  178B               	bsf	11,7	;volatile
 10259  1B46  0008               	return
 10260  1B47                     __end_of_IOC_Set:	
 10261                           
 10262                           	psect	text61
 10263  1AC5                     __ptext61:	
 10264 ;; *************** function _Fosc_Set *****************
 10265 ;; Defined at:
 10266 ;;		line 56 in file "../src/MCU_B1.c"
 10267 ;; Parameters:    Size  Location     Type
 10268 ;;		None
 10269 ;; Auto vars:     Size  Location     Type
 10270 ;;		None
 10271 ;; Return value:  Size  Location     Type
 10272 ;;		None               void
 10273 ;; Registers used:
 10274 ;;		wreg
 10275 ;; Tracked objects:
 10276 ;;		On entry : 0/0
 10277 ;;		On exit  : 0/0
 10278 ;;		Unchanged: 0/0
 10279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10283 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10284 ;;Total ram usage:        0 bytes
 10285 ;; Hardware stack levels used:    1
 10286 ;; Hardware stack levels required when called:    3
 10287 ;; This function calls:
 10288 ;;		Nothing
 10289 ;; This function is called by:
 10290 ;;		_Mcu_Initialization
 10291 ;; This function uses a non-reentrant model
 10292 ;;
 10293                           
 10294                           
 10295                           ;psect for function _Fosc_Set
 10296  1AC5                     _Fosc_Set:	
 10297                           
 10298                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10299                           
 10300                           ;incstack = 0
 10301                           ; Regs used in _Fosc_Set: [wreg]
 10302  1AC5  3078               	movlw	120
 10303  1AC6  0021               	movlb	1	; select bank1
 10304  1AC7  0099               	movwf	25	;volatile
 10305  1AC8  0008               	return
 10306  1AC9                     __end_of_Fosc_Set:	
 10307                           
 10308                           	psect	text62
 10309  1B04                     __ptext62:	
 10310 ;; *************** function _ADC_Set *****************
 10311 ;; Defined at:
 10312 ;;		line 408 in file "../src/MCU_B1.c"
 10313 ;; Parameters:    Size  Location     Type
 10314 ;;		None
 10315 ;; Auto vars:     Size  Location     Type
 10316 ;;		None
 10317 ;; Return value:  Size  Location     Type
 10318 ;;		None               void
 10319 ;; Registers used:
 10320 ;;		wreg
 10321 ;; Tracked objects:
 10322 ;;		On entry : 0/0
 10323 ;;		On exit  : 0/0
 10324 ;;		Unchanged: 0/0
 10325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10329 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10330 ;;Total ram usage:        0 bytes
 10331 ;; Hardware stack levels used:    1
 10332 ;; Hardware stack levels required when called:    3
 10333 ;; This function calls:
 10334 ;;		Nothing
 10335 ;; This function is called by:
 10336 ;;		_Mcu_Initialization
 10337 ;; This function uses a non-reentrant model
 10338 ;;
 10339                           
 10340                           
 10341                           ;psect for function _ADC_Set
 10342  1B04                     _ADC_Set:	
 10343                           
 10344                           ;MCU_B1.c: 409: ADCON1 = 0xf3;
 10345                           
 10346                           ;incstack = 0
 10347                           ; Regs used in _ADC_Set: [wreg]
 10348  1B04  30F3               	movlw	243
 10349  1B05  0021               	movlb	1	; select bank1
 10350  1B06  009E               	movwf	30	;volatile
 10351                           
 10352                           ;MCU_B1.c: 410: FVRCON = 0xc1;
 10353  1B07  30C1               	movlw	193
 10354  1B08  0022               	movlb	2	; select bank2
 10355  1B09  0097               	movwf	23	;volatile
 10356  1B0A  0008               	return
 10357  1B0B                     __end_of_ADC_Set:	
 10358                           
 10359                           	psect	text63
 10360  0053                     __ptext63:	
 10361 ;; *************** function _Load_Main *****************
 10362 ;; Defined at:
 10363 ;;		line 39 in file "../src/OverLoad_B1.c"
 10364 ;; Parameters:    Size  Location     Type
 10365 ;;		None
 10366 ;; Auto vars:     Size  Location     Type
 10367 ;;  i               2    4[BANK0 ] int 
 10368 ;;  Load_Status     1    3[BANK0 ] unsigned char 
 10369 ;;  error           1    2[BANK0 ] unsigned char 
 10370 ;; Return value:  Size  Location     Type
 10371 ;;		None               void
 10372 ;; Registers used:
 10373 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10374 ;; Tracked objects:
 10375 ;;		On entry : 0/0
 10376 ;;		On exit  : 0/0
 10377 ;;		Unchanged: 0/0
 10378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10380 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10381 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10382 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10383 ;;Total ram usage:        6 bytes
 10384 ;; Hardware stack levels used:    1
 10385 ;; Hardware stack levels required when called:    4
 10386 ;; This function calls:
 10387 ;;		___lwdiv
 10388 ;;		___wmul
 10389 ;;		_getAll_DimmerIntr_Dimming_Sw_RF
 10390 ;;		_getDimmer_LoadGO
 10391 ;;		_getDimmer_Load_Status
 10392 ;;		_getMain_All_Error_Status
 10393 ;;		_getMain_All_LightsStatus
 10394 ;;		_getMain_Lights_Count
 10395 ;;		_setLoad_AH_AL_Restore
 10396 ;; This function is called by:
 10397 ;;		_main
 10398 ;; This function uses a non-reentrant model
 10399 ;;
 10400                           
 10401                           
 10402                           ;psect for function _Load_Main
 10403  0053                     _Load_Main:	
 10404                           
 10405                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
 10406                           
 10407                           ;incstack = 0
 10408                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10409  0053  3000               	movlw	0
 10410  0054  3191  21CC  3180   	fcall	_getMain_All_Error_Status
 10411  0057  0020               	movlb	0	; select bank0
 10412  0058  00A0               	movwf	??_Load_Main
 10413  0059  0820               	movf	??_Load_Main,w
 10414  005A  00A2               	movwf	Load_Main@error
 10415                           
 10416                           ;OverLoad_B1.c: 41: char Load_Status = 0;
 10417  005B  01A3               	clrf	Load_Main@Load_Status
 10418                           
 10419                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
 10420  005C  0022               	movlb	2	; select bank2
 10421  005D  1C30               	btfss	_Load^(0+256),0
 10422  005E  29E7               	goto	l1600
 10423                           
 10424                           ;OverLoad_B1.c: 45: if (getMain_All_LightsStatus() == 0) {
 10425  005F  319C  2404  3180   	fcall	_getMain_All_LightsStatus
 10426  0062  3800               	iorlw	0
 10427  0063  1D03               	skipz
 10428  0064  2867               	goto	l10060
 10429                           
 10430                           ;OverLoad_B1.c: 46: Load.GO = 0;
 10431  0065  0022               	movlb	2	; select bank2
 10432  0066  2888               	goto	l10078
 10433  0067                     l10060:	
 10434                           ;OverLoad_B1.c: 47: } else {
 10435                           
 10436                           
 10437                           ;OverLoad_B1.c: 50: if (error == 0 && getAll_DimmerIntr_Dimming_Sw_RF() == 0) {
 10438  0067  0020               	movlb	0	; select bank0
 10439  0068  08A2               	movf	Load_Main@error,f
 10440  0069  1D03               	skipz
 10441  006A  2885               	goto	l1603
 10442  006B  319E  2677  3180   	fcall	_getAll_DimmerIntr_Dimming_Sw_RF
 10443  006E  3800               	iorlw	0
 10444  006F  1D03               	skipz
 10445  0070  2885               	goto	l1603
 10446                           
 10447                           ;OverLoad_B1.c: 51: Load.GO = 1;
 10448  0071  0022               	movlb	2	; select bank2
 10449  0072  14B0               	bsf	_Load^(0+256),1
 10450                           
 10451                           ;OverLoad_B1.c: 53: if (getDimmer_LoadGO() == 1) {
 10452  0073  319A  22F6  3180   	fcall	_getDimmer_LoadGO
 10453  0076  3A01               	xorlw	1
 10454  0077  1D03               	skipz
 10455  0078  2880               	goto	l1604
 10456                           
 10457                           ;OverLoad_B1.c: 54: if (Load.Run == 0 && Load.OK == 0) {
 10458  0079  0022               	movlb	2	; select bank2
 10459  007A  1DB0               	btfss	_Load^(0+256),3
 10460  007B  1BB0               	btfsc	_Load^(0+256),7
 10461  007C  2889               	goto	l1602
 10462                           
 10463                           ;OverLoad_B1.c: 55: Load.Run = 1;
 10464  007D  15B0               	bsf	_Load^(0+256),3
 10465                           
 10466                           ;OverLoad_B1.c: 56: Load.Count = 0;
 10467  007E  01D9               	clrf	(_Load^(0+256)+41)
 10468                           
 10469                           ;OverLoad_B1.c: 57: }
 10470                           ;OverLoad_B1.c: 58: } else {
 10471  007F  2889               	goto	l1602
 10472  0080                     l1604:	
 10473                           
 10474                           ;OverLoad_B1.c: 59: if (Load.OK == 1) {
 10475  0080  0022               	movlb	2	; select bank2
 10476  0081  1FB0               	btfss	_Load^(0+256),7
 10477  0082  2889               	goto	l1602
 10478                           
 10479                           ;OverLoad_B1.c: 60: Load.OK = 0;
 10480  0083  13B0               	bcf	_Load^(0+256),7
 10481                           
 10482                           ;OverLoad_B1.c: 61: }
 10483                           ;OverLoad_B1.c: 62: }
 10484                           ;OverLoad_B1.c: 63: } else {
 10485  0084  2889               	goto	l1602
 10486  0085                     l1603:	
 10487                           
 10488                           ;OverLoad_B1.c: 64: if (Load.GO == 1) {
 10489  0085  0022               	movlb	2	; select bank2
 10490  0086  1CB0               	btfss	_Load^(0+256),1
 10491  0087  2889               	goto	l1602
 10492  0088                     l10078:	
 10493                           
 10494                           ;OverLoad_B1.c: 65: Load.GO = 0;
 10495  0088  10B0               	bcf	_Load^(0+256),1
 10496  0089                     l1602:	
 10497                           
 10498                           ;OverLoad_B1.c: 66: }
 10499                           ;OverLoad_B1.c: 67: }
 10500                           ;OverLoad_B1.c: 69: }
 10501                           ;OverLoad_B1.c: 72: if (Load.GO == 1) {
 10502  0089  1CB0               	btfss	_Load^(0+256),1
 10503  008A  29C3               	goto	l1610
 10504                           
 10505                           ;OverLoad_B1.c: 73: Load.LightsON = 1;
 10506  008B  1530               	bsf	_Load^(0+256),2
 10507                           
 10508                           ;OverLoad_B1.c: 75: if (Load.ADtoGO == 1) {
 10509  008C  1E30               	btfss	_Load^(0+256),4
 10510  008D  29C1               	goto	l1611
 10511                           
 10512                           ;OverLoad_B1.c: 76: Load.Time++;
 10513  008E  3001               	movlw	1
 10514  008F  07B1               	addwf	(_Load^(0+256)+1),f
 10515  0090  3000               	movlw	0
 10516  0091  3DB2               	addwfc	((_Load+1)^(0+256)+1),f
 10517                           
 10518                           ;OverLoad_B1.c: 77: if (Load.Time >= (40 / 20)) {
 10519  0092  3000               	movlw	0
 10520  0093  0232               	subwf	((_Load+1)^(0+256)+1),w
 10521  0094  3002               	movlw	2
 10522  0095  1903               	skipnz
 10523  0096  0231               	subwf	(_Load^(0+256)+1),w
 10524  0097  1C03               	skipc
 10525  0098  0008               	return
 10526                           
 10527                           ;OverLoad_B1.c: 78: Load.Time = 0;
 10528  0099  01B1               	clrf	(_Load^(0+256)+1)
 10529  009A  01B2               	clrf	((_Load+1)^(0+256)+1)
 10530                           
 10531                           ;OverLoad_B1.c: 79: Load.ADtoGO = 0;
 10532  009B  1230               	bcf	_Load^(0+256),4
 10533                           
 10534                           ;OverLoad_B1.c: 81: for (int i = 1; i < 4; i++) {
 10535  009C  3001               	movlw	1
 10536  009D  0020               	movlb	0	; select bank0
 10537  009E  00A4               	movwf	Load_Main@i
 10538  009F  3000               	movlw	0
 10539  00A0  00A5               	movwf	Load_Main@i+1
 10540  00A1  0825               	movf	Load_Main@i+1,w
 10541  00A2  3A80               	xorlw	128
 10542  00A3  00A0               	movwf	??_Load_Main
 10543  00A4  3080               	movlw	128
 10544  00A5  0220               	subwf	??_Load_Main,w
 10545  00A6  1D03               	skipz
 10546  00A7  28AA               	goto	u11855
 10547  00A8  3004               	movlw	4
 10548  00A9  0224               	subwf	Load_Main@i,w
 10549  00AA                     u11855:	
 10550  00AA  1803               	btfsc	3,0
 10551  00AB  28DE               	goto	l10100
 10552  00AC                     l10094:	
 10553                           
 10554                           ;OverLoad_B1.c: 82: Load.ADH += Load.AH[i];
 10555  00AC  0020               	movlb	0	; select bank0
 10556  00AD  3524               	lslf	Load_Main@i,w
 10557  00AE  3E3B               	addlw	(_Load+11)& (0+255)
 10558  00AF  0086               	movwf	6
 10559  00B0  3001               	movlw	1	; select bank2/3
 10560  00B1  0087               	movwf	7
 10561  00B2  3F40               	moviw [0]fsr1
 10562  00B3  00A0               	movwf	??_Load_Main
 10563  00B4  3F41               	moviw [1]fsr1
 10564  00B5  00A1               	movwf	??_Load_Main+1
 10565  00B6  0820               	movf	??_Load_Main,w
 10566  00B7  0022               	movlb	2	; select bank2
 10567  00B8  07B5               	addwf	(_Load^(0+256)+5),f
 10568  00B9  0020               	movlb	0	; select bank0
 10569  00BA  0821               	movf	??_Load_Main+1,w
 10570  00BB  0022               	movlb	2	; select bank2
 10571  00BC  3DB6               	addwfc	((_Load+1)^(0+256)+5),f
 10572                           
 10573                           ;OverLoad_B1.c: 83: Load.ADL += Load.AL[i];
 10574  00BD  0020               	movlb	0	; select bank0
 10575  00BE  3524               	lslf	Load_Main@i,w
 10576  00BF  3E45               	addlw	(_Load+21)& (0+255)
 10577  00C0  0086               	movwf	6
 10578  00C1  3001               	movlw	1	; select bank2/3
 10579  00C2  0087               	movwf	7
 10580  00C3  3F40               	moviw [0]fsr1
 10581  00C4  00A0               	movwf	??_Load_Main
 10582  00C5  3F41               	moviw [1]fsr1
 10583  00C6  00A1               	movwf	??_Load_Main+1
 10584  00C7  0820               	movf	??_Load_Main,w
 10585  00C8  0022               	movlb	2	; select bank2
 10586  00C9  07B7               	addwf	(_Load^(0+256)+7),f
 10587  00CA  0020               	movlb	0	; select bank0
 10588  00CB  0821               	movf	??_Load_Main+1,w
 10589  00CC  0022               	movlb	2	; select bank2
 10590  00CD  3DB8               	addwfc	((_Load+1)^(0+256)+7),f
 10591  00CE  3001               	movlw	1
 10592  00CF  0020               	movlb	0	; select bank0
 10593  00D0  07A4               	addwf	Load_Main@i,f
 10594  00D1  3000               	movlw	0
 10595  00D2  3DA5               	addwfc	Load_Main@i+1,f
 10596  00D3  0825               	movf	Load_Main@i+1,w
 10597  00D4  3A80               	xorlw	128
 10598  00D5  00A0               	movwf	??_Load_Main
 10599  00D6  3080               	movlw	128
 10600  00D7  0220               	subwf	??_Load_Main,w
 10601  00D8  1D03               	skipz
 10602  00D9  28DC               	goto	u11865
 10603  00DA  3004               	movlw	4
 10604  00DB  0224               	subwf	Load_Main@i,w
 10605  00DC                     u11865:	
 10606  00DC  1C03               	skipc
 10607  00DD  28AC               	goto	l10094
 10608  00DE                     l10100:	
 10609                           
 10610                           ;OverLoad_B1.c: 84: }
 10611                           ;OverLoad_B1.c: 85: Load.ADH /= 3;
 10612  00DE  3003               	movlw	3
 10613  00DF  00F2               	movwf	___lwdiv@divisor
 10614  00E0  3000               	movlw	0
 10615  00E1  00F3               	movwf	___lwdiv@divisor+1
 10616  00E2  0022               	movlb	2	; select bank2
 10617  00E3  0836               	movf	((_Load+1)^(0+256)+5),w
 10618  00E4  01F5               	clrf	___lwdiv@dividend+1
 10619  00E5  07F5               	addwf	___lwdiv@dividend+1,f
 10620  00E6  0835               	movf	(_Load^(0+256)+5),w
 10621  00E7  01F4               	clrf	___lwdiv@dividend
 10622  00E8  07F4               	addwf	___lwdiv@dividend,f
 10623  00E9  3192  2261  3180   	fcall	___lwdiv
 10624  00EC  0873               	movf	?___lwdiv+1,w
 10625  00ED  0022               	movlb	2	; select bank2
 10626  00EE  01B6               	clrf	((_Load+1)^(0+256)+5)
 10627  00EF  07B6               	addwf	((_Load+1)^(0+256)+5),f
 10628  00F0  0872               	movf	?___lwdiv,w
 10629  00F1  01B5               	clrf	(_Load^(0+256)+5)
 10630  00F2  07B5               	addwf	(_Load^(0+256)+5),f
 10631                           
 10632                           ;OverLoad_B1.c: 86: Load.ADL /= 3;
 10633  00F3  3003               	movlw	3
 10634  00F4  00F2               	movwf	___lwdiv@divisor
 10635  00F5  3000               	movlw	0
 10636  00F6  00F3               	movwf	___lwdiv@divisor+1
 10637  00F7  0838               	movf	((_Load+1)^(0+256)+7),w
 10638  00F8  01F5               	clrf	___lwdiv@dividend+1
 10639  00F9  07F5               	addwf	___lwdiv@dividend+1,f
 10640  00FA  0837               	movf	(_Load^(0+256)+7),w
 10641  00FB  01F4               	clrf	___lwdiv@dividend
 10642  00FC  07F4               	addwf	___lwdiv@dividend,f
 10643  00FD  3192  2261  3180   	fcall	___lwdiv
 10644  0100  0873               	movf	?___lwdiv+1,w
 10645  0101  0022               	movlb	2	; select bank2
 10646  0102  01B8               	clrf	((_Load+1)^(0+256)+7)
 10647  0103  07B8               	addwf	((_Load+1)^(0+256)+7),f
 10648  0104  0872               	movf	?___lwdiv,w
 10649  0105  01B7               	clrf	(_Load^(0+256)+7)
 10650  0106  07B7               	addwf	(_Load^(0+256)+7),f
 10651                           
 10652                           ;OverLoad_B1.c: 87: setLoad_AH_AL_Restore();
 10653  0107  319E  265C  3180   	fcall	_setLoad_AH_AL_Restore
 10654                           
 10655                           ;OverLoad_B1.c: 89: if (Load.ADH >= Load.ADL) {
 10656  010A  0022               	movlb	2	; select bank2
 10657  010B  0838               	movf	((_Load+1)^(0+256)+7),w
 10658  010C  0236               	subwf	((_Load+1)^(0+256)+5),w
 10659  010D  1D03               	skipz
 10660  010E  2911               	goto	u11875
 10661  010F  0837               	movf	(_Load^(0+256)+7),w
 10662  0110  0235               	subwf	(_Load^(0+256)+5),w
 10663  0111                     u11875:	
 10664  0111  1C03               	skipc
 10665  0112  0008               	return
 10666                           
 10667                           ;OverLoad_B1.c: 90: Load.AD = Load.ADH - Load.ADL;
 10668  0113  3005               	movlw	5
 10669  0114  3E30               	addlw	_Load& (0+255)
 10670  0115  0086               	movwf	6
 10671  0116  3001               	movlw	1	; select bank2/3
 10672  0117  0087               	movwf	7
 10673  0118  0937               	comf	(_Load^(0+256)+7),w
 10674  0119  0020               	movlb	0	; select bank0
 10675  011A  00A0               	movwf	??_Load_Main
 10676  011B  0022               	movlb	2	; select bank2
 10677  011C  0938               	comf	((_Load+1)^(0+256)+7),w
 10678  011D  0020               	movlb	0	; select bank0
 10679  011E  00A1               	movwf	??_Load_Main+1
 10680  011F  0AA0               	incf	??_Load_Main,f
 10681  0120  1903               	skipnz
 10682  0121  0AA1               	incf	??_Load_Main+1,f
 10683  0122  3F40               	moviw [0]fsr1
 10684  0123  0720               	addwf	??_Load_Main,w
 10685  0124  0022               	movlb	2	; select bank2
 10686  0125  00CF               	movwf	(_Load^(0+256)+31)
 10687  0126  3F41               	moviw [1]fsr1
 10688  0127  0020               	movlb	0	; select bank0
 10689  0128  3D21               	addwfc	??_Load_Main+1,w
 10690  0129  0022               	movlb	2	; select bank2
 10691  012A  00D0               	movwf	(_Load^(0+256)+32)
 10692                           
 10693                           ;OverLoad_B1.c: 91: Load.ADH = 0;
 10694  012B  01B5               	clrf	(_Load^(0+256)+5)
 10695  012C  01B6               	clrf	((_Load+1)^(0+256)+5)
 10696                           
 10697                           ;OverLoad_B1.c: 92: Load.ADL = 0;
 10698  012D  01B7               	clrf	(_Load^(0+256)+7)
 10699  012E  01B8               	clrf	((_Load+1)^(0+256)+7)
 10700                           
 10701                           ;OverLoad_B1.c: 94: if (Load.Run == 1) {
 10702  012F  1DB0               	btfss	_Load^(0+256),3
 10703  0130  298D               	goto	l10140
 10704                           
 10705                           ;OverLoad_B1.c: 95: if (Load.Count < 2) {
 10706  0131  3002               	movlw	2
 10707  0132  0259               	subwf	(_Load^(0+256)+41),w
 10708  0133  1803               	skipnc
 10709  0134  298D               	goto	l10140
 10710                           
 10711                           ;OverLoad_B1.c: 96: Load.Count++;
 10712  0135  3001               	movlw	1
 10713  0136  0020               	movlb	0	; select bank0
 10714  0137  00A0               	movwf	??_Load_Main
 10715  0138  0820               	movf	??_Load_Main,w
 10716  0139  0022               	movlb	2	; select bank2
 10717  013A  07D9               	addwf	(_Load^(0+256)+41),f
 10718                           
 10719                           ;OverLoad_B1.c: 97: Load_Status = getDimmer_Load_Status();
 10720  013B  319A  22FD  3180   	fcall	_getDimmer_Load_Status
 10721  013E  0020               	movlb	0	; select bank0
 10722  013F  00A0               	movwf	??_Load_Main
 10723  0140  0820               	movf	??_Load_Main,w
 10724  0141  00A3               	movwf	Load_Main@Load_Status
 10725                           
 10726                           ;OverLoad_B1.c: 98: Load.LightsCount = getMain_Lights_Count();
 10727  0142  319C  2470  3180   	fcall	_getMain_Lights_Count
 10728  0145  0020               	movlb	0	; select bank0
 10729  0146  00A0               	movwf	??_Load_Main
 10730  0147  0820               	movf	??_Load_Main,w
 10731  0148  0022               	movlb	2	; select bank2
 10732  0149  00DC               	movwf	(_Load^(0+256)+44)
 10733                           
 10734                           ;OverLoad_B1.c: 99: if (Load.Count == 1) {
 10735  014A  0859               	movf	(_Load^(0+256)+41),w
 10736  014B  3A01               	xorlw	1
 10737  014C  1D03               	skipz
 10738  014D  2958               	goto	l10126
 10739                           
 10740                           ;OverLoad_B1.c: 100: Load.ErrorCountValue = 2;
 10741  014E  3002               	movlw	2
 10742  014F  0020               	movlb	0	; select bank0
 10743  0150  00A0               	movwf	??_Load_Main
 10744  0151  0820               	movf	??_Load_Main,w
 10745  0152  0022               	movlb	2	; select bank2
 10746  0153  00DB               	movwf	(_Load^(0+256)+43)
 10747                           
 10748                           ;OverLoad_B1.c: 101: Load.JudgeValue = (20*50);
 10749  0154  30E8               	movlw	232
 10750  0155  00D5               	movwf	(_Load^(0+256)+37)
 10751  0156  3003               	movlw	3
 10752  0157  2963               	goto	L7
 10753  0158                     l10126:	
 10754                           ;OverLoad_B1.c: 102: } else if (Load.Count == 2) {
 10755                           
 10756  0158  0859               	movf	(_Load^(0+256)+41),w
 10757  0159  3A02               	xorlw	2
 10758  015A  1D03               	skipz
 10759  015B  298D               	goto	l10140
 10760                           
 10761                           ;OverLoad_B1.c: 103: if (Load.LightsCount == 1) {
 10762  015C  085C               	movf	(_Load^(0+256)+44),w
 10763  015D  3A01               	xorlw	1
 10764  015E  1D03               	skipz
 10765  015F  2965               	goto	l10132
 10766                           
 10767                           ;OverLoad_B1.c: 104: Load.JudgeValue = (int)(1.1*50);
 10768  0160  3037               	movlw	55
 10769  0161  00D5               	movwf	(_Load^(0+256)+37)
 10770  0162  3000               	movlw	0
 10771  0163                     L7:	
 10772  0163  00D6               	movwf	(_Load^(0+256)+38)
 10773                           
 10774                           ;OverLoad_B1.c: 105: } else {
 10775  0164  298D               	goto	l10140
 10776  0165                     l10132:	
 10777                           
 10778                           ;OverLoad_B1.c: 106: if (Load_Status == 0) {
 10779  0165  0020               	movlb	0	; select bank0
 10780  0166  08A3               	movf	Load_Main@Load_Status,f
 10781  0167  1D03               	skipz
 10782  0168  2981               	goto	l10136
 10783                           
 10784                           ;OverLoad_B1.c: 107: Load.JudgeValue = (int)(1.1*50) * Load.LightsCount;
 10785  0169  0022               	movlb	2	; select bank2
 10786  016A  085C               	movf	(_Load^(0+256)+44),w
 10787  016B  0020               	movlb	0	; select bank0
 10788  016C  00A0               	movwf	??_Load_Main
 10789  016D  01A1               	clrf	??_Load_Main+1
 10790  016E  0820               	movf	??_Load_Main,w
 10791  016F  00F2               	movwf	___wmul@multiplier
 10792  0170  0821               	movf	??_Load_Main+1,w
 10793  0171  00F3               	movwf	___wmul@multiplier+1
 10794  0172  3037               	movlw	55
 10795  0173  00F4               	movwf	___wmul@multiplicand
 10796  0174  3000               	movlw	0
 10797  0175  00F5               	movwf	___wmul@multiplicand+1
 10798  0176  319F  2701  3180   	fcall	___wmul
 10799  0179  0873               	movf	?___wmul+1,w
 10800  017A  0022               	movlb	2	; select bank2
 10801  017B  01D6               	clrf	((_Load+1)^(0+256)+37)
 10802  017C  07D6               	addwf	((_Load+1)^(0+256)+37),f
 10803  017D  0872               	movf	?___wmul,w
 10804  017E  01D5               	clrf	(_Load^(0+256)+37)
 10805  017F  07D5               	addwf	(_Load^(0+256)+37),f
 10806                           
 10807                           ;OverLoad_B1.c: 108: } else if (Load_Status == 1) {
 10808  0180  298D               	goto	l10140
 10809  0181                     l10136:	
 10810  0181  0020               	movlb	0	; select bank0
 10811  0182  0823               	movf	Load_Main@Load_Status,w
 10812  0183  3A01               	xorlw	1
 10813  0184  1D03               	skipz
 10814  0185  298D               	goto	l10140
 10815                           
 10816                           ;OverLoad_B1.c: 109: Load.JudgeValue = (int)(1.1*50) + Load.TotalLoad;
 10817  0186  0022               	movlb	2	; select bank2
 10818  0187  0839               	movf	(_Load^(0+256)+9),w
 10819  0188  3E37               	addlw	55
 10820  0189  00D5               	movwf	(_Load^(0+256)+37)
 10821  018A  3000               	movlw	0
 10822  018B  3D3A               	addwfc	((_Load+1)^(0+256)+9),w
 10823  018C  00D6               	movwf	((_Load+1)^(0+256)+37)
 10824  018D                     l10140:	
 10825                           
 10826                           ;OverLoad_B1.c: 110: }
 10827                           ;OverLoad_B1.c: 111: }
 10828                           ;OverLoad_B1.c: 112: }
 10829                           ;OverLoad_B1.c: 113: }
 10830                           ;OverLoad_B1.c: 114: }
 10831                           ;OverLoad_B1.c: 116: if (Load.AD >= Load.JudgeValue) {
 10832  018D  0022               	movlb	2	; select bank2
 10833  018E  0856               	movf	((_Load+1)^(0+256)+37),w
 10834  018F  0250               	subwf	((_Load+1)^(0+256)+31),w
 10835  0190  1D03               	skipz
 10836  0191  2994               	goto	u11955
 10837  0192  0855               	movf	(_Load^(0+256)+37),w
 10838  0193  024F               	subwf	(_Load^(0+256)+31),w
 10839  0194                     u11955:	
 10840  0194  1C03               	skipc
 10841  0195  29A3               	goto	l10150
 10842                           
 10843                           ;OverLoad_B1.c: 117: Load.ErrorCount++;
 10844  0196  3001               	movlw	1
 10845  0197  0020               	movlb	0	; select bank0
 10846  0198  00A0               	movwf	??_Load_Main
 10847  0199  0820               	movf	??_Load_Main,w
 10848  019A  0022               	movlb	2	; select bank2
 10849  019B  07DA               	addwf	(_Load^(0+256)+42),f
 10850                           
 10851                           ;OverLoad_B1.c: 118: if (Load.ErrorCount > Load.ErrorCountValue) {
 10852  019C  085A               	movf	(_Load^(0+256)+42),w
 10853  019D  025B               	subwf	(_Load^(0+256)+43),w
 10854  019E  1803               	skipnc
 10855  019F  0008               	return
 10856                           
 10857                           ;OverLoad_B1.c: 119: Load.ErrorCount = 0;
 10858  01A0  01DA               	clrf	(_Load^(0+256)+42)
 10859                           
 10860                           ;OverLoad_B1.c: 120: Load.ERROR = 1;
 10861  01A1  16B0               	bsf	_Load^(0+256),5
 10862                           
 10863                           ;OverLoad_B1.c: 142: }
 10864                           ;OverLoad_B1.c: 143: } else {
 10865  01A2  0008               	return
 10866  01A3                     l10150:	
 10867                           
 10868                           ;OverLoad_B1.c: 144: Load.ErrorCount = 0;
 10869  01A3  01DA               	clrf	(_Load^(0+256)+42)
 10870                           
 10871                           ;OverLoad_B1.c: 145: if (Load.Run == 1) {
 10872  01A4  1DB0               	btfss	_Load^(0+256),3
 10873  01A5  0008               	return
 10874                           
 10875                           ;OverLoad_B1.c: 146: Load.SafeCount++;
 10876  01A6  3001               	movlw	1
 10877  01A7  0020               	movlb	0	; select bank0
 10878  01A8  00A0               	movwf	??_Load_Main
 10879  01A9  0820               	movf	??_Load_Main,w
 10880  01AA  0022               	movlb	2	; select bank2
 10881  01AB  07DD               	addwf	(_Load^(0+256)+45),f
 10882                           
 10883                           ;OverLoad_B1.c: 147: if (Load.SafeCount >= 3) {
 10884  01AC  3003               	movlw	3
 10885  01AD  025D               	subwf	(_Load^(0+256)+45),w
 10886  01AE  1C03               	skipc
 10887  01AF  0008               	return
 10888                           
 10889                           ;OverLoad_B1.c: 148: Load.SafeCount = 0;
 10890  01B0  01DD               	clrf	(_Load^(0+256)+45)
 10891                           
 10892                           ;OverLoad_B1.c: 149: Load.OK = 1;
 10893  01B1  17B0               	bsf	_Load^(0+256),7
 10894                           
 10895                           ;OverLoad_B1.c: 150: Load.Run = 0;
 10896  01B2  11B0               	bcf	_Load^(0+256),3
 10897                           
 10898                           ;OverLoad_B1.c: 151: Load.Count = 0;
 10899  01B3  01D9               	clrf	(_Load^(0+256)+41)
 10900                           
 10901                           ;OverLoad_B1.c: 152: Load.TotalLoad = Load.AD;
 10902  01B4  0850               	movf	((_Load+1)^(0+256)+31),w
 10903  01B5  01BA               	clrf	((_Load+1)^(0+256)+9)
 10904  01B6  07BA               	addwf	((_Load+1)^(0+256)+9),f
 10905  01B7  084F               	movf	(_Load^(0+256)+31),w
 10906  01B8  01B9               	clrf	(_Load^(0+256)+9)
 10907  01B9  07B9               	addwf	(_Load^(0+256)+9),f
 10908                           
 10909                           ;OverLoad_B1.c: 153: Load.ErrorCountValue = 3;
 10910  01BA  3003               	movlw	3
 10911  01BB  0020               	movlb	0	; select bank0
 10912  01BC  00A0               	movwf	??_Load_Main
 10913  01BD  0820               	movf	??_Load_Main,w
 10914  01BE  0022               	movlb	2	; select bank2
 10915  01BF  00DB               	movwf	(_Load^(0+256)+43)
 10916                           
 10917                           ;OverLoad_B1.c: 156: }
 10918                           ;OverLoad_B1.c: 157: }
 10919                           ;OverLoad_B1.c: 180: }
 10920                           ;OverLoad_B1.c: 181: }
 10921                           ;OverLoad_B1.c: 182: }
 10922                           ;OverLoad_B1.c: 183: } else {
 10923  01C0  0008               	return
 10924  01C1                     l1611:	
 10925                           
 10926                           ;OverLoad_B1.c: 184: Load.ADtoGO = 1;
 10927  01C1  1630               	bsf	_Load^(0+256),4
 10928                           
 10929                           ;OverLoad_B1.c: 185: }
 10930                           ;OverLoad_B1.c: 186: } else {
 10931  01C2  0008               	return
 10932  01C3                     l1610:	
 10933                           
 10934                           ;OverLoad_B1.c: 188: if (Load.LightsON == 1) {
 10935  01C3  1D30               	btfss	_Load^(0+256),2
 10936  01C4  29D6               	goto	l10188
 10937                           
 10938                           ;OverLoad_B1.c: 189: Load.LightsON = 0;
 10939  01C5  1130               	bcf	_Load^(0+256),2
 10940                           
 10941                           ;OverLoad_B1.c: 191: Load.ADtoGO = 0;
 10942  01C6  1230               	bcf	_Load^(0+256),4
 10943                           
 10944                           ;OverLoad_B1.c: 192: Load.Time = 0;
 10945  01C7  01B1               	clrf	(_Load^(0+256)+1)
 10946  01C8  01B2               	clrf	((_Load+1)^(0+256)+1)
 10947                           
 10948                           ;OverLoad_B1.c: 193: setLoad_AH_AL_Restore();
 10949  01C9  319E  265C  3180   	fcall	_setLoad_AH_AL_Restore
 10950                           
 10951                           ;OverLoad_B1.c: 195: Load.ErrorCount = 0;
 10952  01CC  0022               	movlb	2	; select bank2
 10953  01CD  01DA               	clrf	(_Load^(0+256)+42)
 10954                           
 10955                           ;OverLoad_B1.c: 196: Load.SafeCount = 0;
 10956  01CE  01DD               	clrf	(_Load^(0+256)+45)
 10957                           
 10958                           ;OverLoad_B1.c: 198: Load.ADH = 0;
 10959  01CF  01B5               	clrf	(_Load^(0+256)+5)
 10960  01D0  01B6               	clrf	((_Load+1)^(0+256)+5)
 10961                           
 10962                           ;OverLoad_B1.c: 199: Load.ADL = 0;
 10963  01D1  01B7               	clrf	(_Load^(0+256)+7)
 10964  01D2  01B8               	clrf	((_Load+1)^(0+256)+7)
 10965                           
 10966                           ;OverLoad_B1.c: 205: Load.Run = 0;
 10967  01D3  11B0               	bcf	_Load^(0+256),3
 10968                           
 10969                           ;OverLoad_B1.c: 206: Load.Count = 0;
 10970  01D4  01D9               	clrf	(_Load^(0+256)+41)
 10971                           
 10972                           ;OverLoad_B1.c: 207: Load.OK = 0;
 10973  01D5  13B0               	bcf	_Load^(0+256),7
 10974  01D6                     l10188:	
 10975                           
 10976                           ;OverLoad_B1.c: 229: }
 10977                           ;OverLoad_B1.c: 230: if (Load.ERROR == 1) {
 10978  01D6  1EB0               	btfss	_Load^(0+256),5
 10979  01D7  0008               	return
 10980                           
 10981                           ;OverLoad_B1.c: 231: Load.ErrorTime++;
 10982  01D8  3001               	movlw	1
 10983  01D9  07B3               	addwf	(_Load^(0+256)+3),f
 10984  01DA  3000               	movlw	0
 10985  01DB  3DB4               	addwfc	((_Load+1)^(0+256)+3),f
 10986                           
 10987                           ;OverLoad_B1.c: 232: if (Load.ErrorTime >= (10000 / 20)) {
 10988  01DC  3001               	movlw	1
 10989  01DD  0234               	subwf	((_Load+1)^(0+256)+3),w
 10990  01DE  30F4               	movlw	244
 10991  01DF  1903               	skipnz
 10992  01E0  0233               	subwf	(_Load^(0+256)+3),w
 10993  01E1  1C03               	skipc
 10994  01E2  0008               	return
 10995                           
 10996                           ;OverLoad_B1.c: 233: Load.ErrorTime = 0;
 10997  01E3  01B3               	clrf	(_Load^(0+256)+3)
 10998  01E4  01B4               	clrf	((_Load+1)^(0+256)+3)
 10999                           
 11000                           ;OverLoad_B1.c: 234: Load.ERROR = 0;
 11001  01E5  12B0               	bcf	_Load^(0+256),5
 11002                           
 11003                           ;OverLoad_B1.c: 235: }
 11004                           ;OverLoad_B1.c: 236: }
 11005                           ;OverLoad_B1.c: 237: }
 11006                           ;OverLoad_B1.c: 238: } else {
 11007  01E6  0008               	return
 11008  01E7                     l1600:	
 11009                           
 11010                           ;OverLoad_B1.c: 239: if (myMain.PowerON == 1) {
 11011  01E7  1C20               	btfss	_myMain^(0+256),0
 11012  01E8  0008               	return
 11013                           
 11014                           ;OverLoad_B1.c: 240: Load.Enable = 1;
 11015  01E9  1430               	bsf	_Load^(0+256),0
 11016  01EA  0008               	return
 11017  01EB                     __end_of_Load_Main:	
 11018                           
 11019                           	psect	text64
 11020  1C70                     __ptext64:	
 11021 ;; *************** function _getMain_Lights_Count *****************
 11022 ;; Defined at:
 11023 ;;		line 466 in file "../src/main_B1.c"
 11024 ;; Parameters:    Size  Location     Type
 11025 ;;		None
 11026 ;; Auto vars:     Size  Location     Type
 11027 ;;  status2         1    4[COMMON] unsigned char 
 11028 ;;  status1         1    3[COMMON] unsigned char 
 11029 ;;  count           1    2[COMMON] unsigned char 
 11030 ;; Return value:  Size  Location     Type
 11031 ;;                  1    wreg      unsigned char 
 11032 ;; Registers used:
 11033 ;;		wreg, status,2, status,0
 11034 ;; Tracked objects:
 11035 ;;		On entry : 0/0
 11036 ;;		On exit  : 0/0
 11037 ;;		Unchanged: 0/0
 11038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11040 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11042 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11043 ;;Total ram usage:        3 bytes
 11044 ;; Hardware stack levels used:    1
 11045 ;; Hardware stack levels required when called:    3
 11046 ;; This function calls:
 11047 ;;		Nothing
 11048 ;; This function is called by:
 11049 ;;		_Load_Main
 11050 ;; This function uses a non-reentrant model
 11051 ;;
 11052                           
 11053                           
 11054                           ;psect for function _getMain_Lights_Count
 11055  1C70                     _getMain_Lights_Count:	
 11056                           
 11057                           ;main_B1.c: 467: char count = 0;
 11058                           
 11059                           ;incstack = 0
 11060                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 11061  1C70  01F2               	clrf	getMain_Lights_Count@count
 11062                           
 11063                           ;main_B1.c: 471: char status1 = 0;
 11064  1C71  01F3               	clrf	getMain_Lights_Count@status1
 11065                           
 11066                           ;main_B1.c: 472: status1 = DimmerIntr1.ControlStatus == 1 ? 1 : 0;
 11067  1C72  3000               	movlw	0
 11068  1C73  0021               	movlb	1	; select bank1
 11069  1C74  19E2               	btfsc	_DimmerIntr1^(0+128),3
 11070  1C75  3001               	movlw	1
 11071  1C76  00F3               	movwf	getMain_Lights_Count@status1
 11072                           
 11073                           ;main_B1.c: 475: char status2 = 0;
 11074  1C77  01F4               	clrf	getMain_Lights_Count@status2
 11075                           
 11076                           ;main_B1.c: 476: status2 = DimmerIntr2.ControlStatus == 1 ? 1 : 0;
 11077  1C78  3000               	movlw	0
 11078  1C79  19E9               	btfsc	_DimmerIntr2^(0+128),3
 11079  1C7A  3001               	movlw	1
 11080  1C7B  00F4               	movwf	getMain_Lights_Count@status2
 11081                           
 11082                           ;main_B1.c: 500: return count = (status1 + status2);
 11083  1C7C  0873               	movf	getMain_Lights_Count@status1,w
 11084  1C7D  0774               	addwf	getMain_Lights_Count@status2,w
 11085  1C7E  00F2               	movwf	getMain_Lights_Count@count
 11086  1C7F  0008               	return
 11087  1C80                     __end_of_getMain_Lights_Count:	
 11088                           
 11089                           	psect	text65
 11090  1AFD                     __ptext65:	
 11091 ;; *************** function _getDimmer_Load_Status *****************
 11092 ;; Defined at:
 11093 ;;		line 1069 in file "../src/Dimmer_B1.c"
 11094 ;; Parameters:    Size  Location     Type
 11095 ;;		None
 11096 ;; Auto vars:     Size  Location     Type
 11097 ;;  status          1    2[COMMON] unsigned char 
 11098 ;; Return value:  Size  Location     Type
 11099 ;;                  1    wreg      unsigned char 
 11100 ;; Registers used:
 11101 ;;		wreg, status,2
 11102 ;; Tracked objects:
 11103 ;;		On entry : 0/0
 11104 ;;		On exit  : 0/0
 11105 ;;		Unchanged: 0/0
 11106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11107 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11108 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11110 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11111 ;;Total ram usage:        1 bytes
 11112 ;; Hardware stack levels used:    1
 11113 ;; Hardware stack levels required when called:    3
 11114 ;; This function calls:
 11115 ;;		Nothing
 11116 ;; This function is called by:
 11117 ;;		_Load_Main
 11118 ;; This function uses a non-reentrant model
 11119 ;;
 11120                           
 11121                           
 11122                           ;psect for function _getDimmer_Load_Status
 11123  1AFD                     _getDimmer_Load_Status:	
 11124                           
 11125                           ;Dimmer_B1.c: 1070: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11126                           
 11127                           ;incstack = 0
 11128                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11129  1AFD  3000               	movlw	0
 11130  1AFE  0021               	movlb	1	; select bank1
 11131  1AFF  193A               	btfsc	_Dimmer^(0+128),2
 11132  1B00  3001               	movlw	1
 11133  1B01  00F2               	movwf	getDimmer_Load_Status@status
 11134                           
 11135                           ;Dimmer_B1.c: 1071: return status;
 11136  1B02  0872               	movf	getDimmer_Load_Status@status,w
 11137  1B03  0008               	return
 11138  1B04                     __end_of_getDimmer_Load_Status:	
 11139                           
 11140                           	psect	text66
 11141  1AF6                     __ptext66:	
 11142 ;; *************** function _getDimmer_LoadGO *****************
 11143 ;; Defined at:
 11144 ;;		line 1063 in file "../src/Dimmer_B1.c"
 11145 ;; Parameters:    Size  Location     Type
 11146 ;;		None
 11147 ;; Auto vars:     Size  Location     Type
 11148 ;;  loadgo          1    2[COMMON] unsigned char 
 11149 ;; Return value:  Size  Location     Type
 11150 ;;                  1    wreg      unsigned char 
 11151 ;; Registers used:
 11152 ;;		wreg, status,2
 11153 ;; Tracked objects:
 11154 ;;		On entry : 0/0
 11155 ;;		On exit  : 0/0
 11156 ;;		Unchanged: 0/0
 11157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11159 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11161 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11162 ;;Total ram usage:        1 bytes
 11163 ;; Hardware stack levels used:    1
 11164 ;; Hardware stack levels required when called:    3
 11165 ;; This function calls:
 11166 ;;		Nothing
 11167 ;; This function is called by:
 11168 ;;		_Load_Main
 11169 ;; This function uses a non-reentrant model
 11170 ;;
 11171                           
 11172                           
 11173                           ;psect for function _getDimmer_LoadGO
 11174  1AF6                     _getDimmer_LoadGO:	
 11175                           
 11176                           ;Dimmer_B1.c: 1064: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11177                           
 11178                           ;incstack = 0
 11179                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11180  1AF6  3000               	movlw	0
 11181  1AF7  0021               	movlb	1	; select bank1
 11182  1AF8  18BA               	btfsc	_Dimmer^(0+128),1
 11183  1AF9  3001               	movlw	1
 11184  1AFA  00F2               	movwf	getDimmer_LoadGO@loadgo
 11185                           
 11186                           ;Dimmer_B1.c: 1065: return loadgo;
 11187  1AFB  0872               	movf	getDimmer_LoadGO@loadgo,w
 11188  1AFC  0008               	return
 11189  1AFD                     __end_of_getDimmer_LoadGO:	
 11190                           
 11191                           	psect	text67
 11192  1E77                     __ptext67:	
 11193 ;; *************** function _getAll_DimmerIntr_Dimming_Sw_RF *****************
 11194 ;; Defined at:
 11195 ;;		line 238 in file "../src/Dimmer_B1.c"
 11196 ;; Parameters:    Size  Location     Type
 11197 ;;		None
 11198 ;; Auto vars:     Size  Location     Type
 11199 ;;  status          1    5[COMMON] unsigned char 
 11200 ;; Return value:  Size  Location     Type
 11201 ;;                  1    wreg      unsigned char 
 11202 ;; Registers used:
 11203 ;;		wreg, status,2, status,0
 11204 ;; Tracked objects:
 11205 ;;		On entry : 0/0
 11206 ;;		On exit  : 0/0
 11207 ;;		Unchanged: 0/0
 11208 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11209 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11210 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11211 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11212 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11213 ;;Total ram usage:        4 bytes
 11214 ;; Hardware stack levels used:    1
 11215 ;; Hardware stack levels required when called:    3
 11216 ;; This function calls:
 11217 ;;		Nothing
 11218 ;; This function is called by:
 11219 ;;		_Load_Main
 11220 ;; This function uses a non-reentrant model
 11221 ;;
 11222                           
 11223                           
 11224                           ;psect for function _getAll_DimmerIntr_Dimming_Sw_RF
 11225  1E77                     _getAll_DimmerIntr_Dimming_Sw_RF:	
 11226                           
 11227                           ;Dimmer_B1.c: 239: char status = 0;
 11228                           
 11229                           ;incstack = 0
 11230                           ; Regs used in _getAll_DimmerIntr_Dimming_Sw_RF: [wreg+status,2+status,0]
 11231  1E77  01F5               	clrf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11232                           
 11233                           ;Dimmer_B1.c: 246: status = (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr2.Dimming_Sw == 1)
      +                           ? 1 : 0;
 11234  1E78  01F3               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2165
 11235  1E79  0AF3               	incf	_getAll_DimmerIntr_Dimming_Sw_RF$2165,f
 11236  1E7A  0021               	movlb	1	; select bank1
 11237  1E7B  1E62               	btfss	_DimmerIntr1^(0+128),4
 11238  1E7C  1A69               	btfsc	_DimmerIntr2^(0+128),4
 11239  1E7D  2E7F               	goto	l7686
 11240  1E7E  01F3               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2165
 11241  1E7F                     l7686:	
 11242  1E7F  0873               	movf	_getAll_DimmerIntr_Dimming_Sw_RF$2165,w
 11243  1E80  00F2               	movwf	??_getAll_DimmerIntr_Dimming_Sw_RF
 11244  1E81  0872               	movf	??_getAll_DimmerIntr_Dimming_Sw_RF,w
 11245  1E82  00F5               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11246                           
 11247                           ;Dimmer_B1.c: 254: if (status == 0) {
 11248  1E83  08F5               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,f
 11249  1E84  1D03               	skipz
 11250  1E85  2E90               	goto	l7698
 11251                           
 11252                           ;Dimmer_B1.c: 260: status = (DimmerIntr1.Dimming_RF == 1 || DimmerIntr2.Dimming_RF == 1)
      +                           ? 1 : 0;
 11253  1E86  01F4               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2166
 11254  1E87  0AF4               	incf	_getAll_DimmerIntr_Dimming_Sw_RF$2166,f
 11255  1E88  1F62               	btfss	_DimmerIntr1^(0+128),6
 11256  1E89  1B69               	btfsc	_DimmerIntr2^(0+128),6
 11257  1E8A  2E8C               	goto	l7696
 11258  1E8B  01F4               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2166
 11259  1E8C                     l7696:	
 11260  1E8C  0874               	movf	_getAll_DimmerIntr_Dimming_Sw_RF$2166,w
 11261  1E8D  00F2               	movwf	??_getAll_DimmerIntr_Dimming_Sw_RF
 11262  1E8E  0872               	movf	??_getAll_DimmerIntr_Dimming_Sw_RF,w
 11263  1E8F  00F5               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11264  1E90                     l7698:	
 11265                           
 11266                           ;Dimmer_B1.c: 266: }
 11267                           ;Dimmer_B1.c: 268: return status;
 11268  1E90  0875               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,w
 11269  1E91  0008               	return
 11270  1E92                     __end_of_getAll_DimmerIntr_Dimming_Sw_RF:	
 11271                           
 11272                           	psect	text68
 11273  1F01                     __ptext68:	
 11274 ;; *************** function ___wmul *****************
 11275 ;; Defined at:
 11276 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11277 ;; Parameters:    Size  Location     Type
 11278 ;;  multiplier      2    2[COMMON] unsigned int 
 11279 ;;  multiplicand    2    4[COMMON] unsigned int 
 11280 ;; Auto vars:     Size  Location     Type
 11281 ;;  product         2    6[COMMON] unsigned int 
 11282 ;; Return value:  Size  Location     Type
 11283 ;;                  2    2[COMMON] unsigned int 
 11284 ;; Registers used:
 11285 ;;		wreg, status,2, status,0
 11286 ;; Tracked objects:
 11287 ;;		On entry : 0/0
 11288 ;;		On exit  : 0/0
 11289 ;;		Unchanged: 0/0
 11290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11291 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11292 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11294 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11295 ;;Total ram usage:        6 bytes
 11296 ;; Hardware stack levels used:    1
 11297 ;; Hardware stack levels required when called:    3
 11298 ;; This function calls:
 11299 ;;		Nothing
 11300 ;; This function is called by:
 11301 ;;		_Load_Main
 11302 ;; This function uses a non-reentrant model
 11303 ;;
 11304                           
 11305                           
 11306                           ;psect for function ___wmul
 11307  1F01                     ___wmul:	
 11308                           
 11309                           ;incstack = 0
 11310                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11311  1F01  01F6               	clrf	___wmul@product
 11312  1F02  01F7               	clrf	___wmul@product+1
 11313  1F03                     l8244:	
 11314  1F03  1C72               	btfss	___wmul@multiplier,0
 11315  1F04  2F09               	goto	l2983
 11316  1F05  0874               	movf	___wmul@multiplicand,w
 11317  1F06  07F6               	addwf	___wmul@product,f
 11318  1F07  0875               	movf	___wmul@multiplicand+1,w
 11319  1F08  3DF7               	addwfc	___wmul@product+1,f
 11320  1F09                     l2983:	
 11321  1F09  3001               	movlw	1
 11322  1F0A                     u8655:	
 11323  1F0A  35F4               	lslf	___wmul@multiplicand,f
 11324  1F0B  0DF5               	rlf	___wmul@multiplicand+1,f
 11325  1F0C  0B89               	decfsz	9,f
 11326  1F0D  2F0A               	goto	u8655
 11327  1F0E  3001               	movlw	1
 11328  1F0F                     u8665:	
 11329  1F0F  36F3               	lsrf	___wmul@multiplier+1,f
 11330  1F10  0CF2               	rrf	___wmul@multiplier,f
 11331  1F11  0B89               	decfsz	9,f
 11332  1F12  2F0F               	goto	u8665
 11333  1F13  0873               	movf	___wmul@multiplier+1,w
 11334  1F14  0472               	iorwf	___wmul@multiplier,w
 11335  1F15  1D03               	skipz
 11336  1F16  2F03               	goto	l8244
 11337  1F17  0877               	movf	___wmul@product+1,w
 11338  1F18  01F3               	clrf	?___wmul+1
 11339  1F19  07F3               	addwf	?___wmul+1,f
 11340  1F1A  0876               	movf	___wmul@product,w
 11341  1F1B  01F2               	clrf	?___wmul
 11342  1F1C  07F2               	addwf	?___wmul,f
 11343  1F1D  0008               	return
 11344  1F1E                     __end_of___wmul:	
 11345                           
 11346                           	psect	text69
 11347  1261                     __ptext69:	
 11348 ;; *************** function ___lwdiv *****************
 11349 ;; Defined at:
 11350 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11351 ;; Parameters:    Size  Location     Type
 11352 ;;  divisor         2    2[COMMON] unsigned int 
 11353 ;;  dividend        2    4[COMMON] unsigned int 
 11354 ;; Auto vars:     Size  Location     Type
 11355 ;;  quotient        2    7[COMMON] unsigned int 
 11356 ;;  counter         1    9[COMMON] unsigned char 
 11357 ;; Return value:  Size  Location     Type
 11358 ;;                  2    2[COMMON] unsigned int 
 11359 ;; Registers used:
 11360 ;;		wreg, status,2, status,0
 11361 ;; Tracked objects:
 11362 ;;		On entry : 0/0
 11363 ;;		On exit  : 0/0
 11364 ;;		Unchanged: 0/0
 11365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11366 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11367 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11368 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11369 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11370 ;;Total ram usage:        8 bytes
 11371 ;; Hardware stack levels used:    1
 11372 ;; Hardware stack levels required when called:    3
 11373 ;; This function calls:
 11374 ;;		Nothing
 11375 ;; This function is called by:
 11376 ;;		_Load_Main
 11377 ;;		_setRF_Main
 11378 ;; This function uses a non-reentrant model
 11379 ;;
 11380                           
 11381                           
 11382                           ;psect for function ___lwdiv
 11383  1261                     ___lwdiv:	
 11384                           
 11385                           ;incstack = 0
 11386                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11387  1261  01F7               	clrf	___lwdiv@quotient
 11388  1262  01F8               	clrf	___lwdiv@quotient+1
 11389  1263  0873               	movf	___lwdiv@divisor+1,w
 11390  1264  0472               	iorwf	___lwdiv@divisor,w
 11391  1265  1903               	skipnz
 11392  1266  2A90               	goto	l7646
 11393  1267  01F9               	clrf	___lwdiv@counter
 11394  1268  0AF9               	incf	___lwdiv@counter,f
 11395  1269                     l7634:	
 11396  1269  1BF3               	btfsc	___lwdiv@divisor+1,7
 11397  126A  2A75               	goto	l7636
 11398  126B  3001               	movlw	1
 11399  126C                     u7485:	
 11400  126C  35F2               	lslf	___lwdiv@divisor,f
 11401  126D  0DF3               	rlf	___lwdiv@divisor+1,f
 11402  126E  0B89               	decfsz	9,f
 11403  126F  2A6C               	goto	u7485
 11404  1270  3001               	movlw	1
 11405  1271  00F6               	movwf	??___lwdiv
 11406  1272  0876               	movf	??___lwdiv,w
 11407  1273  07F9               	addwf	___lwdiv@counter,f
 11408  1274  2A69               	goto	l7634
 11409  1275                     l7636:	
 11410  1275  3001               	movlw	1
 11411  1276                     u7505:	
 11412  1276  35F7               	lslf	___lwdiv@quotient,f
 11413  1277  0DF8               	rlf	___lwdiv@quotient+1,f
 11414  1278  0B89               	decfsz	9,f
 11415  1279  2A76               	goto	u7505
 11416  127A  0873               	movf	___lwdiv@divisor+1,w
 11417  127B  0275               	subwf	___lwdiv@dividend+1,w
 11418  127C  1D03               	skipz
 11419  127D  2A80               	goto	u7515
 11420  127E  0872               	movf	___lwdiv@divisor,w
 11421  127F  0274               	subwf	___lwdiv@dividend,w
 11422  1280                     u7515:	
 11423  1280  1C03               	skipc
 11424  1281  2A87               	goto	l7642
 11425  1282  0872               	movf	___lwdiv@divisor,w
 11426  1283  02F4               	subwf	___lwdiv@dividend,f
 11427  1284  0873               	movf	___lwdiv@divisor+1,w
 11428  1285  3BF5               	subwfb	___lwdiv@dividend+1,f
 11429  1286  1477               	bsf	___lwdiv@quotient,0
 11430  1287                     l7642:	
 11431  1287  3001               	movlw	1
 11432  1288                     u7525:	
 11433  1288  36F3               	lsrf	___lwdiv@divisor+1,f
 11434  1289  0CF2               	rrf	___lwdiv@divisor,f
 11435  128A  0B89               	decfsz	9,f
 11436  128B  2A88               	goto	u7525
 11437  128C  3001               	movlw	1
 11438  128D  02F9               	subwf	___lwdiv@counter,f
 11439  128E  1D03               	btfss	3,2
 11440  128F  2A75               	goto	l7636
 11441  1290                     l7646:	
 11442  1290  0878               	movf	___lwdiv@quotient+1,w
 11443  1291  01F3               	clrf	?___lwdiv+1
 11444  1292  07F3               	addwf	?___lwdiv+1,f
 11445  1293  0877               	movf	___lwdiv@quotient,w
 11446  1294  01F2               	clrf	?___lwdiv
 11447  1295  07F2               	addwf	?___lwdiv,f
 11448  1296  0008               	return
 11449  1297                     __end_of___lwdiv:	
 11450                           
 11451                           	psect	text70
 11452  1AB6                     __ptext70:	
 11453 ;; *************** function _Load_Initialization *****************
 11454 ;; Defined at:
 11455 ;;		line 9 in file "../src/OverLoad_B1.c"
 11456 ;; Parameters:    Size  Location     Type
 11457 ;;		None
 11458 ;; Auto vars:     Size  Location     Type
 11459 ;;		None
 11460 ;; Return value:  Size  Location     Type
 11461 ;;		None               void
 11462 ;; Registers used:
 11463 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11464 ;; Tracked objects:
 11465 ;;		On entry : 0/0
 11466 ;;		On exit  : 0/0
 11467 ;;		Unchanged: 0/0
 11468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11472 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11473 ;;Total ram usage:        0 bytes
 11474 ;; Hardware stack levels used:    1
 11475 ;; Hardware stack levels required when called:    4
 11476 ;; This function calls:
 11477 ;;		_setLoad_AH_AL_Restore
 11478 ;; This function is called by:
 11479 ;;		_main
 11480 ;; This function uses a non-reentrant model
 11481 ;;
 11482                           
 11483                           
 11484                           ;psect for function _Load_Initialization
 11485  1AB6                     _Load_Initialization:	
 11486                           
 11487                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11488                           
 11489                           ;incstack = 0
 11490                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11491  1AB6  319E  265C         	fcall	_setLoad_AH_AL_Restore
 11492  1AB8  0008               	return
 11493  1AB9                     __end_of_Load_Initialization:	
 11494                           
 11495                           	psect	text71
 11496  1E5C                     __ptext71:	
 11497 ;; *************** function _setLoad_AH_AL_Restore *****************
 11498 ;; Defined at:
 11499 ;;		line 266 in file "../src/OverLoad_B1.c"
 11500 ;; Parameters:    Size  Location     Type
 11501 ;;		None
 11502 ;; Auto vars:     Size  Location     Type
 11503 ;;  i               1    3[COMMON] unsigned char 
 11504 ;; Return value:  Size  Location     Type
 11505 ;;		None               void
 11506 ;; Registers used:
 11507 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11508 ;; Tracked objects:
 11509 ;;		On entry : 0/0
 11510 ;;		On exit  : 0/0
 11511 ;;		Unchanged: 0/0
 11512 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11513 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11514 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11515 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11516 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11517 ;;Total ram usage:        2 bytes
 11518 ;; Hardware stack levels used:    1
 11519 ;; Hardware stack levels required when called:    3
 11520 ;; This function calls:
 11521 ;;		Nothing
 11522 ;; This function is called by:
 11523 ;;		_Load_Initialization
 11524 ;;		_Load_Main
 11525 ;; This function uses a non-reentrant model
 11526 ;;
 11527                           
 11528                           
 11529                           ;psect for function _setLoad_AH_AL_Restore
 11530  1E5C                     _setLoad_AH_AL_Restore:	
 11531                           
 11532                           ;OverLoad_B1.c: 267: char i;
 11533                           ;OverLoad_B1.c: 268: for (i = 0; i < 5; i++) {
 11534                           
 11535                           ;incstack = 0
 11536                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11537  1E5C  01F3               	clrf	setLoad_AH_AL_Restore@i
 11538  1E5D                     L8:	
 11539  1E5D  3005               	movlw	5
 11540  1E5E  0273               	subwf	setLoad_AH_AL_Restore@i,w
 11541  1E5F  1803               	btfsc	3,0
 11542  1E60  0008               	return
 11543                           
 11544                           ;OverLoad_B1.c: 269: Load.AH[i] = 0;
 11545  1E61  3573               	lslf	setLoad_AH_AL_Restore@i,w
 11546  1E62  3E3B               	addlw	(_Load+11)& (0+255)
 11547  1E63  0086               	movwf	6
 11548  1E64  3001               	movlw	1	; select bank2/3
 11549  1E65  0087               	movwf	7
 11550  1E66  3000               	movlw	0
 11551  1E67  3FC0               	movwi [0]fsr1
 11552  1E68  3FC1               	movwi [1]fsr1
 11553                           
 11554                           ;OverLoad_B1.c: 270: Load.AL[i] = 0xffff;
 11555  1E69  3573               	lslf	setLoad_AH_AL_Restore@i,w
 11556  1E6A  3E45               	addlw	(_Load+21)& (0+255)
 11557  1E6B  0086               	movwf	6
 11558  1E6C  3001               	movlw	1	; select bank2/3
 11559  1E6D  0087               	movwf	7
 11560  1E6E  30FF               	movlw	255
 11561  1E6F  3FC0               	movwi [0]fsr1
 11562  1E70  30FF               	movlw	255
 11563  1E71  3FC1               	movwi [1]fsr1
 11564  1E72  3001               	movlw	1
 11565  1E73  00F2               	movwf	??_setLoad_AH_AL_Restore
 11566  1E74  0872               	movf	??_setLoad_AH_AL_Restore,w
 11567  1E75  07F3               	addwf	setLoad_AH_AL_Restore@i,f
 11568  1E76  2E5D               	goto	L8
 11569  1E77                     __end_of_setLoad_AH_AL_Restore:	
 11570                           
 11571                           	psect	text72
 11572  1B97                     __ptext72:	
 11573 ;; *************** function _LED_Main *****************
 11574 ;; Defined at:
 11575 ;;		line 47 in file "../src/LED_B1.c"
 11576 ;; Parameters:    Size  Location     Type
 11577 ;;		None
 11578 ;; Auto vars:     Size  Location     Type
 11579 ;;		None
 11580 ;; Return value:  Size  Location     Type
 11581 ;;		None               void
 11582 ;; Registers used:
 11583 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11584 ;; Tracked objects:
 11585 ;;		On entry : 0/0
 11586 ;;		On exit  : 0/0
 11587 ;;		Unchanged: 0/0
 11588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11592 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11593 ;;Total ram usage:        0 bytes
 11594 ;; Hardware stack levels used:    1
 11595 ;; Hardware stack levels required when called:    5
 11596 ;; This function calls:
 11597 ;;		_setLED_Main
 11598 ;; This function is called by:
 11599 ;;		_main
 11600 ;; This function uses a non-reentrant model
 11601 ;;
 11602                           
 11603                           
 11604                           ;psect for function _LED_Main
 11605  1B97                     _LED_Main:	
 11606                           
 11607                           ;LED_B1.c: 53: setLED_Main(1);
 11608                           
 11609                           ;incstack = 0
 11610                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11611  1B97  3001               	movlw	1
 11612  1B98  3188  2001  319B   	fcall	_setLED_Main
 11613                           
 11614                           ;LED_B1.c: 56: setLED_Main(2);
 11615  1B9B  3002               	movlw	2
 11616  1B9C  3188  2001  319B   	fcall	_setLED_Main
 11617                           
 11618                           ;LED_B1.c: 62: setLED_Main(99);
 11619  1B9F  3063               	movlw	99
 11620  1BA0  3188  2001         	fcall	_setLED_Main
 11621  1BA2  0008               	return
 11622  1BA3                     __end_of_LED_Main:	
 11623                           
 11624                           	psect	text73
 11625  0801                     __ptext73:	
 11626 ;; *************** function _setLED_Main *****************
 11627 ;; Defined at:
 11628 ;;		line 221 in file "../src/LED_B1.c"
 11629 ;; Parameters:    Size  Location     Type
 11630 ;;  led             1    wreg     unsigned char 
 11631 ;; Auto vars:     Size  Location     Type
 11632 ;;  led             1    6[COMMON] unsigned char 
 11633 ;; Return value:  Size  Location     Type
 11634 ;;		None               void
 11635 ;; Registers used:
 11636 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11637 ;; Tracked objects:
 11638 ;;		On entry : 0/0
 11639 ;;		On exit  : 0/0
 11640 ;;		Unchanged: 0/0
 11641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11643 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11644 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11645 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11646 ;;Total ram usage:        3 bytes
 11647 ;; Hardware stack levels used:    1
 11648 ;; Hardware stack levels required when called:    4
 11649 ;; This function calls:
 11650 ;;		_LedPointSelect
 11651 ;; This function is called by:
 11652 ;;		_LED_Main
 11653 ;; This function uses a non-reentrant model
 11654 ;;
 11655                           
 11656                           
 11657                           ;psect for function _setLED_Main
 11658  0801                     _setLED_Main:	
 11659                           
 11660                           ;incstack = 0
 11661                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11662                           ;setLED_Main@led stored from wreg
 11663  0801  00F6               	movwf	setLED_Main@led
 11664                           
 11665                           ;LED_B1.c: 222: LedPointSelect(led);
 11666  0802  0876               	movf	setLED_Main@led,w
 11667  0803  319E  26E4  3188   	fcall	_LedPointSelect
 11668                           
 11669                           ;LED_B1.c: 223: if (LED->GO == 1) {
 11670  0806  0021               	movlb	1	; select bank1
 11671  0807  0847               	movf	_LED^(0+128),w
 11672  0808  0086               	movwf	6
 11673  0809  3001               	movlw	1	; select bank2/3
 11674  080A  0087               	movwf	7
 11675  080B  1C81               	btfss	1,1
 11676  080C  0008               	return
 11677                           
 11678                           ;LED_B1.c: 224: LED->Time++;
 11679  080D  0A47               	incf	_LED^(0+128),w
 11680  080E  0086               	movwf	6
 11681  080F  3001               	movlw	1	; select bank2/3
 11682  0810  0087               	movwf	7
 11683  0811  3001               	movlw	1
 11684  0812  0781               	addwf	1,f
 11685  0813  3141               	addfsr 1,1
 11686  0814  1803               	skipnc
 11687  0815  0A81               	incf	1,f
 11688                           
 11689                           ;LED_B1.c: 225: if (LED->Time >= (500 / 20)) {
 11690  0816  0A47               	incf	_LED^(0+128),w
 11691  0817  0086               	movwf	6
 11692  0818  3001               	movlw	1	; select bank2/3
 11693  0819  0087               	movwf	7
 11694  081A  3F40               	moviw [0]fsr1
 11695  081B  00F4               	movwf	??_setLED_Main
 11696  081C  3F41               	moviw [1]fsr1
 11697  081D  00F5               	movwf	??_setLED_Main+1
 11698  081E  3000               	movlw	0
 11699  081F  0275               	subwf	??_setLED_Main+1,w
 11700  0820  3019               	movlw	25
 11701  0821  1903               	skipnz
 11702  0822  0274               	subwf	??_setLED_Main,w
 11703  0823  1C03               	skipc
 11704  0824  0008               	return
 11705                           
 11706                           ;LED_B1.c: 226: LED->Time = 0;
 11707  0825  0A47               	incf	_LED^(0+128),w
 11708  0826  0086               	movwf	6
 11709  0827  3001               	movlw	1	; select bank2/3
 11710  0828  0087               	movwf	7
 11711  0829  3000               	movlw	0
 11712  082A  3FC0               	movwi [0]fsr1
 11713  082B  3FC1               	movwi [1]fsr1
 11714                           
 11715                           ;LED_B1.c: 228: if (led == 1) {
 11716  082C  0876               	movf	setLED_Main@led,w
 11717  082D  3A01               	xorlw	1
 11718  082E  1D03               	skipz
 11719  082F  2833               	goto	l1168
 11720                           
 11721                           ;LED_B1.c: 229: RA3 = RA3 == 1 ? 0 : 1;
 11722  0830  3008               	movlw	8
 11723  0831  0020               	movlb	0	; select bank0
 11724  0832  068C               	xorwf	12,f
 11725  0833                     l1168:	
 11726                           
 11727                           ;LED_B1.c: 230: }
 11728                           ;LED_B1.c: 233: if (led == 2) {
 11729  0833  0876               	movf	setLED_Main@led,w
 11730  0834  3A02               	xorlw	2
 11731  0835  1D03               	skipz
 11732  0836  283A               	goto	l1169
 11733                           
 11734                           ;LED_B1.c: 234: RC7 = RC7 == 1 ? 0 : 1;
 11735  0837  3080               	movlw	128
 11736  0838  0020               	movlb	0	; select bank0
 11737  0839  068E               	xorwf	14,f
 11738  083A                     l1169:	
 11739                           
 11740                           ;LED_B1.c: 235: }
 11741                           ;LED_B1.c: 243: if (led == 99) {
 11742  083A  0876               	movf	setLED_Main@led,w
 11743  083B  3A63               	xorlw	99
 11744  083C  1D03               	skipz
 11745  083D  0008               	return
 11746                           
 11747                           ;LED_B1.c: 244: RB5 = RB5 == 1 ? 0 : 1;
 11748  083E  3020               	movlw	32
 11749  083F  0020               	movlb	0	; select bank0
 11750  0840  068D               	xorwf	13,f
 11751  0841  0008               	return
 11752  0842                     __end_of_setLED_Main:	
 11753                           
 11754                           	psect	text74
 11755  1B8B                     __ptext74:	
 11756 ;; *************** function _LED_Initialization *****************
 11757 ;; Defined at:
 11758 ;;		line 31 in file "../src/LED_B1.c"
 11759 ;; Parameters:    Size  Location     Type
 11760 ;;		None
 11761 ;; Auto vars:     Size  Location     Type
 11762 ;;		None
 11763 ;; Return value:  Size  Location     Type
 11764 ;;		None               void
 11765 ;; Registers used:
 11766 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11767 ;; Tracked objects:
 11768 ;;		On entry : 0/0
 11769 ;;		On exit  : 0/0
 11770 ;;		Unchanged: 0/0
 11771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11775 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11776 ;;Total ram usage:        0 bytes
 11777 ;; Hardware stack levels used:    1
 11778 ;; Hardware stack levels required when called:    6
 11779 ;; This function calls:
 11780 ;;		_setLED_Initialization
 11781 ;; This function is called by:
 11782 ;;		_main
 11783 ;; This function uses a non-reentrant model
 11784 ;;
 11785                           
 11786                           
 11787                           ;psect for function _LED_Initialization
 11788  1B8B                     _LED_Initialization:	
 11789                           
 11790                           ;LED_B1.c: 33: setLED_Initialization(1);
 11791                           
 11792                           ;incstack = 0
 11793                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11794  1B8B  3001               	movlw	1
 11795  1B8C  319C  2460  319B   	fcall	_setLED_Initialization
 11796                           
 11797                           ;LED_B1.c: 36: setLED_Initialization(2);
 11798  1B8F  3002               	movlw	2
 11799  1B90  319C  2460  319B   	fcall	_setLED_Initialization
 11800                           
 11801                           ;LED_B1.c: 42: setLED_Initialization(99);
 11802  1B93  3063               	movlw	99
 11803  1B94  319C  2460         	fcall	_setLED_Initialization
 11804  1B96  0008               	return
 11805  1B97                     __end_of_LED_Initialization:	
 11806                           
 11807                           	psect	text75
 11808  1C60                     __ptext75:	
 11809 ;; *************** function _setLED_Initialization *****************
 11810 ;; Defined at:
 11811 ;;		line 69 in file "../src/LED_B1.c"
 11812 ;; Parameters:    Size  Location     Type
 11813 ;;  led             1    wreg     unsigned char 
 11814 ;; Auto vars:     Size  Location     Type
 11815 ;;  led             1    6[COMMON] unsigned char 
 11816 ;; Return value:  Size  Location     Type
 11817 ;;		None               void
 11818 ;; Registers used:
 11819 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11820 ;; Tracked objects:
 11821 ;;		On entry : 0/0
 11822 ;;		On exit  : 0/0
 11823 ;;		Unchanged: 0/0
 11824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11826 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11828 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11829 ;;Total ram usage:        1 bytes
 11830 ;; Hardware stack levels used:    1
 11831 ;; Hardware stack levels required when called:    5
 11832 ;; This function calls:
 11833 ;;		_LedPointSelect
 11834 ;;		_setLED
 11835 ;; This function is called by:
 11836 ;;		_LED_Initialization
 11837 ;; This function uses a non-reentrant model
 11838 ;;
 11839                           
 11840                           
 11841                           ;psect for function _setLED_Initialization
 11842  1C60                     _setLED_Initialization:	
 11843                           
 11844                           ;incstack = 0
 11845                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 11846                           ;setLED_Initialization@led stored from wreg
 11847  1C60  00F6               	movwf	setLED_Initialization@led
 11848                           
 11849                           ;LED_B1.c: 70: LedPointSelect(led);
 11850  1C61  0876               	movf	setLED_Initialization@led,w
 11851  1C62  319E  26E4  319C   	fcall	_LedPointSelect
 11852                           
 11853                           ;LED_B1.c: 71: LED->Enable = 1;
 11854  1C65  0021               	movlb	1	; select bank1
 11855  1C66  0847               	movf	_LED^(0+128),w
 11856  1C67  0086               	movwf	6
 11857  1C68  3001               	movlw	1	; select bank2/3
 11858  1C69  0087               	movwf	7
 11859  1C6A  1401               	bsf	1,0
 11860                           
 11861                           ;LED_B1.c: 72: setLED(led, 0);
 11862  1C6B  01F4               	clrf	setLED@command
 11863  1C6C  0876               	movf	setLED_Initialization@led,w
 11864  1C6D  3197  2741         	fcall	_setLED
 11865  1C6F  0008               	return
 11866  1C70                     __end_of_setLED_Initialization:	
 11867                           
 11868                           	psect	text76
 11869  11FA                     __ptext76:	
 11870 ;; *************** function _Flash_Memory_Main *****************
 11871 ;; Defined at:
 11872 ;;		line 954 in file "../src/MCU_B1.c"
 11873 ;; Parameters:    Size  Location     Type
 11874 ;;		None
 11875 ;; Auto vars:     Size  Location     Type
 11876 ;;		None
 11877 ;; Return value:  Size  Location     Type
 11878 ;;		None               void
 11879 ;; Registers used:
 11880 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11881 ;; Tracked objects:
 11882 ;;		On entry : 0/0
 11883 ;;		On exit  : 0/0
 11884 ;;		Unchanged: 0/0
 11885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11886 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11887 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11888 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11889 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11890 ;;Total ram usage:        1 bytes
 11891 ;; Hardware stack levels used:    1
 11892 ;; Hardware stack levels required when called:    6
 11893 ;; This function calls:
 11894 ;;		_Flash_Memory_Modify
 11895 ;;		_getMain_All_LightsStatus
 11896 ;; This function is called by:
 11897 ;;		_main
 11898 ;; This function uses a non-reentrant model
 11899 ;;
 11900                           
 11901                           
 11902                           ;psect for function _Flash_Memory_Main
 11903  11FA                     _Flash_Memory_Main:	
 11904                           
 11905                           ;MCU_B1.c: 955: if (Memory.Modify == 1) {
 11906                           
 11907                           ;incstack = 0
 11908                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11909  11FA  0024               	movlb	4	; select bank4
 11910  11FB  1C44               	btfss	(_Memory^(0+512)+36),0
 11911  11FC  0008               	return
 11912                           
 11913                           ;MCU_B1.c: 956: Memory.GO = getMain_All_LightsStatus() == 0 ? 1 : 0;
 11914  11FD  319C  2404  3191   	fcall	_getMain_All_LightsStatus
 11915  1200  3A00               	xorlw	0
 11916  1201  3000               	movlw	0
 11917  1202  1903               	skipnz
 11918  1203  3001               	movlw	1
 11919  1204  00F8               	movwf	??_Flash_Memory_Main
 11920  1205  0DF8               	rlf	??_Flash_Memory_Main,f
 11921  1206  0024               	movlb	4	; select bank4
 11922  1207  0844               	movf	(_Memory^(0+512)+36),w
 11923  1208  0678               	xorwf	??_Flash_Memory_Main,w
 11924  1209  39FD               	andlw	-3
 11925  120A  0678               	xorwf	??_Flash_Memory_Main,w
 11926  120B  00C4               	movwf	(_Memory^(0+512)+36)
 11927                           
 11928                           ;MCU_B1.c: 957: if (Memory.GO == 1) {
 11929  120C  1CC4               	btfss	(_Memory^(0+512)+36),1
 11930  120D  2A27               	goto	l1439
 11931                           
 11932                           ;MCU_B1.c: 958: Memory.Runtime = 1;
 11933  120E  15C4               	bsf	(_Memory^(0+512)+36),3
 11934                           
 11935                           ;MCU_B1.c: 959: Memory.Time++;
 11936  120F  3001               	movlw	1
 11937  1210  07C2               	addwf	(_Memory^(0+512)+34),f
 11938  1211  3000               	movlw	0
 11939  1212  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 11940                           
 11941                           ;MCU_B1.c: 960: if (Memory.Time == (200 / 20)) {
 11942  1213  3022               	movlw	34
 11943  1214  3E20               	addlw	_Memory& (0+255)
 11944  1215  0086               	movwf	6
 11945  1216  3002               	movlw	2	; select bank4/5
 11946  1217  0087               	movwf	7
 11947  1218  3F40               	moviw [0]fsr1
 11948  1219  3A0A               	xorlw	10
 11949  121A  1D03               	skipz
 11950  121B  2A1E               	goto	u8875
 11951  121C  3F41               	moviw [1]fsr1
 11952  121D  3A00               	xorlw	0
 11953  121E                     u8875:	
 11954  121E  1D03               	skipz
 11955  121F  0008               	return
 11956                           
 11957                           ;MCU_B1.c: 961: Memory.Time = 0;
 11958  1220  01C2               	clrf	(_Memory^(0+512)+34)
 11959  1221  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11960                           
 11961                           ;MCU_B1.c: 962: Memory.Modify = 0;
 11962  1222  1044               	bcf	(_Memory^(0+512)+36),0
 11963                           
 11964                           ;MCU_B1.c: 963: Memory.GO = 0;
 11965  1223  10C4               	bcf	(_Memory^(0+512)+36),1
 11966                           
 11967                           ;MCU_B1.c: 964: Flash_Memory_Modify();
 11968  1224  3194  2442         	fcall	_Flash_Memory_Modify
 11969                           
 11970                           ;MCU_B1.c: 965: }
 11971                           ;MCU_B1.c: 966: } else {
 11972  1226  0008               	return
 11973  1227                     l1439:	
 11974                           
 11975                           ;MCU_B1.c: 967: if (Memory.Runtime == 1) {
 11976  1227  1DC4               	btfss	(_Memory^(0+512)+36),3
 11977  1228  0008               	return
 11978                           
 11979                           ;MCU_B1.c: 968: Memory.Runtime = 0;
 11980  1229  11C4               	bcf	(_Memory^(0+512)+36),3
 11981                           
 11982                           ;MCU_B1.c: 969: Memory.Time = 0;
 11983  122A  01C2               	clrf	(_Memory^(0+512)+34)
 11984  122B  01C3               	clrf	((_Memory+1)^(0+512)+34)
 11985  122C  0008               	return
 11986  122D                     __end_of_Flash_Memory_Main:	
 11987                           
 11988                           	psect	text77
 11989  1442                     __ptext77:	
 11990 ;; *************** function _Flash_Memory_Modify *****************
 11991 ;; Defined at:
 11992 ;;		line 1027 in file "../src/MCU_B1.c"
 11993 ;; Parameters:    Size  Location     Type
 11994 ;;		None
 11995 ;; Auto vars:     Size  Location     Type
 11996 ;;  i               1    7[COMMON] unsigned char 
 11997 ;; Return value:  Size  Location     Type
 11998 ;;		None               void
 11999 ;; Registers used:
 12000 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12001 ;; Tracked objects:
 12002 ;;		On entry : 0/0
 12003 ;;		On exit  : 0/0
 12004 ;;		Unchanged: 0/0
 12005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12007 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12008 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12009 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12010 ;;Total ram usage:        2 bytes
 12011 ;; Hardware stack levels used:    1
 12012 ;; Hardware stack levels required when called:    5
 12013 ;; This function calls:
 12014 ;;		_Flash_Memory_Erasing
 12015 ;;		_Flash_Memory_Read
 12016 ;;		_Flash_Memory_Write
 12017 ;;		_setMemory_Data
 12018 ;; This function is called by:
 12019 ;;		_Flash_Memory_Main
 12020 ;; This function uses a non-reentrant model
 12021 ;;
 12022                           
 12023                           
 12024                           ;psect for function _Flash_Memory_Modify
 12025  1442                     _Flash_Memory_Modify:	
 12026                           
 12027                           ;MCU_B1.c: 1028: char i = 0;
 12028                           
 12029                           ;incstack = 0
 12030                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12031  1442  01F7               	clrf	Flash_Memory_Modify@i
 12032                           
 12033                           ;MCU_B1.c: 1029: for (i = 0; i < 32; i++) {
 12034  1443  01F7               	clrf	Flash_Memory_Modify@i
 12035  1444  3020               	movlw	32
 12036  1445  0277               	subwf	Flash_Memory_Modify@i,w
 12037  1446  1803               	btfsc	3,0
 12038  1447  2C5C               	goto	l7960
 12039  1448                     l7954:	
 12040                           
 12041                           ;MCU_B1.c: 1030: Memory.Data[i] = Flash_Memory_Read(i);
 12042  1448  0877               	movf	Flash_Memory_Modify@i,w
 12043  1449  319D  253E  3194   	fcall	_Flash_Memory_Read
 12044  144C  00F6               	movwf	??_Flash_Memory_Modify
 12045  144D  0877               	movf	Flash_Memory_Modify@i,w
 12046  144E  3E20               	addlw	_Memory& (0+255)
 12047  144F  0086               	movwf	6
 12048  1450  3002               	movlw	2	; select bank4/5
 12049  1451  0087               	movwf	7
 12050  1452  0876               	movf	??_Flash_Memory_Modify,w
 12051  1453  0081               	movwf	1
 12052  1454  3001               	movlw	1
 12053  1455  00F6               	movwf	??_Flash_Memory_Modify
 12054  1456  0876               	movf	??_Flash_Memory_Modify,w
 12055  1457  07F7               	addwf	Flash_Memory_Modify@i,f
 12056  1458  3020               	movlw	32
 12057  1459  0277               	subwf	Flash_Memory_Modify@i,w
 12058  145A  1C03               	skipc
 12059  145B  2C48               	goto	l7954
 12060  145C                     l7960:	
 12061                           
 12062                           ;MCU_B1.c: 1031: }
 12063                           ;MCU_B1.c: 1032: setMemory_Data(0, product->Data[12]);
 12064  145C  0020               	movlb	0	; select bank0
 12065  145D  086D               	movf	_product,w
 12066  145E  0086               	movwf	6
 12067  145F  3002               	movlw	2	; select bank4/5
 12068  1460  0087               	movwf	7
 12069  1461  3002               	movlw	2	; select bank4/5
 12070  1462  3F4C               	moviw [12]fsr1
 12071  1463  00F2               	movwf	setMemory_Data@data
 12072  1464  3000               	movlw	0
 12073  1465  319B  2352  3194   	fcall	_setMemory_Data
 12074                           
 12075                           ;MCU_B1.c: 1033: setMemory_Data(1, product->Data[13]);
 12076  1468  0020               	movlb	0	; select bank0
 12077  1469  086D               	movf	_product,w
 12078  146A  0086               	movwf	6
 12079  146B  3002               	movlw	2	; select bank4/5
 12080  146C  0087               	movwf	7
 12081  146D  3002               	movlw	2	; select bank4/5
 12082  146E  3F4D               	moviw [13]fsr1
 12083  146F  00F2               	movwf	setMemory_Data@data
 12084  1470  3001               	movlw	1
 12085  1471  319B  2352  3194   	fcall	_setMemory_Data
 12086                           
 12087                           ;MCU_B1.c: 1034: setMemory_Data(2, product->Data[14]);
 12088  1474  0020               	movlb	0	; select bank0
 12089  1475  086D               	movf	_product,w
 12090  1476  0086               	movwf	6
 12091  1477  3002               	movlw	2	; select bank4/5
 12092  1478  0087               	movwf	7
 12093  1479  3002               	movlw	2	; select bank4/5
 12094  147A  3F4E               	moviw [14]fsr1
 12095  147B  00F2               	movwf	setMemory_Data@data
 12096  147C  3002               	movlw	2
 12097  147D  319B  2352  3194   	fcall	_setMemory_Data
 12098                           
 12099                           ;MCU_B1.c: 1040: if (Memory.LoopSave == 1) {
 12100  1480  0024               	movlb	4	; select bank4
 12101  1481  1D44               	btfss	(_Memory^(0+512)+36),2
 12102  1482  2C87               	goto	l1462
 12103                           
 12104                           ;MCU_B1.c: 1041: Memory.LoopSave = 0;
 12105  1483  1144               	bcf	(_Memory^(0+512)+36),2
 12106                           
 12107                           ;MCU_B1.c: 1042: myMain.FirstOpen = 0;
 12108  1484  0022               	movlb	2	; select bank2
 12109  1485  11A0               	bcf	_myMain^(0+256),3
 12110                           
 12111                           ;MCU_B1.c: 1043: myMain.First = 0;
 12112  1486  12A0               	bcf	_myMain^(0+256),5
 12113  1487                     l1462:	
 12114                           
 12115                           ;MCU_B1.c: 1045: }
 12116                           ;MCU_B1.c: 1046: GIE = 0;
 12117  1487  138B               	bcf	11,7	;volatile
 12118                           
 12119                           ;MCU_B1.c: 1047: Flash_Memory_Erasing();
 12120  1488  319B  237F  3194   	fcall	_Flash_Memory_Erasing
 12121                           
 12122                           ;MCU_B1.c: 1048: Flash_Memory_Write();
 12123  148B  3191  2178         	fcall	_Flash_Memory_Write
 12124                           
 12125                           ;MCU_B1.c: 1049: GIE = 1;
 12126  148D  178B               	bsf	11,7	;volatile
 12127  148E  0008               	return
 12128  148F                     __end_of_Flash_Memory_Modify:	
 12129                           
 12130                           	psect	text78
 12131  1B7F                     __ptext78:	
 12132 ;; *************** function _Flash_Memory_Erasing *****************
 12133 ;; Defined at:
 12134 ;;		line 1016 in file "../src/MCU_B1.c"
 12135 ;; Parameters:    Size  Location     Type
 12136 ;;		None
 12137 ;; Auto vars:     Size  Location     Type
 12138 ;;		None
 12139 ;; Return value:  Size  Location     Type
 12140 ;;		None               void
 12141 ;; Registers used:
 12142 ;;		wreg, status,2, status,0, pclath, cstack
 12143 ;; Tracked objects:
 12144 ;;		On entry : 0/0
 12145 ;;		On exit  : 0/0
 12146 ;;		Unchanged: 0/0
 12147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12148 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12151 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12152 ;;Total ram usage:        0 bytes
 12153 ;; Hardware stack levels used:    1
 12154 ;; Hardware stack levels required when called:    4
 12155 ;; This function calls:
 12156 ;;		_Flash_Memory_Unlock
 12157 ;; This function is called by:
 12158 ;;		_Flash_Memory_Modify
 12159 ;; This function uses a non-reentrant model
 12160 ;;
 12161                           
 12162                           
 12163                           ;psect for function _Flash_Memory_Erasing
 12164  1B7F                     _Flash_Memory_Erasing:	
 12165                           
 12166                           ;MCU_B1.c: 1017: CFGS = 0;
 12167                           
 12168                           ;incstack = 0
 12169                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12170  1B7F  0023               	movlb	3	; select bank3
 12171  1B80  1315               	bcf	21,6	;volatile
 12172                           
 12173                           ;MCU_B1.c: 1018: PMADRH = 0x30;
 12174  1B81  3030               	movlw	48
 12175  1B82  0092               	movwf	18	;volatile
 12176                           
 12177                           ;MCU_B1.c: 1019: PMADRL = 0x00;
 12178  1B83  0191               	clrf	17	;volatile
 12179                           
 12180                           ;MCU_B1.c: 1020: FREE = 1;
 12181  1B84  1615               	bsf	21,4	;volatile
 12182                           
 12183                           ;MCU_B1.c: 1021: WREN = 1;
 12184  1B85  1515               	bsf	21,2	;volatile
 12185                           
 12186                           ;MCU_B1.c: 1022: Flash_Memory_Unlock();
 12187  1B86  319B  232B         	fcall	_Flash_Memory_Unlock
 12188                           
 12189                           ;MCU_B1.c: 1023: WREN = 0;
 12190  1B88  0023               	movlb	3	; select bank3
 12191  1B89  1115               	bcf	21,2	;volatile
 12192  1B8A  0008               	return
 12193  1B8B                     __end_of_Flash_Memory_Erasing:	
 12194                           
 12195                           	psect	text79
 12196  0450                     __ptext79:	
 12197 ;; *************** function _Flash_Memory_Initialization *****************
 12198 ;; Defined at:
 12199 ;;		line 913 in file "../src/MCU_B1.c"
 12200 ;; Parameters:    Size  Location     Type
 12201 ;;		None
 12202 ;; Auto vars:     Size  Location     Type
 12203 ;;  i               1   59[BANK0 ] unsigned char 
 12204 ;; Return value:  Size  Location     Type
 12205 ;;		None               void
 12206 ;; Registers used:
 12207 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12208 ;; Tracked objects:
 12209 ;;		On entry : 0/0
 12210 ;;		On exit  : 0/0
 12211 ;;		Unchanged: 0/0
 12212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12214 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12215 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12216 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12217 ;;Total ram usage:        2 bytes
 12218 ;; Hardware stack levels used:    1
 12219 ;; Hardware stack levels required when called:    6
 12220 ;; This function calls:
 12221 ;;		_Flash_Memory_Read
 12222 ;;		_Flash_Memory_Write
 12223 ;;		_getDimmerLights_ValueToPercent
 12224 ;;		_setMemory_Data
 12225 ;; This function is called by:
 12226 ;;		_main
 12227 ;; This function uses a non-reentrant model
 12228 ;;
 12229                           
 12230                           
 12231                           ;psect for function _Flash_Memory_Initialization
 12232  0450                     _Flash_Memory_Initialization:	
 12233                           
 12234                           ;MCU_B1.c: 914: char i = 0;
 12235                           
 12236                           ;incstack = 0
 12237                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12238  0450  0020               	movlb	0	; select bank0
 12239  0451  01DB               	clrf	Flash_Memory_Initialization@i
 12240                           
 12241                           ;MCU_B1.c: 915: if (Flash_Memory_Read(31) == 0xaa) {
 12242  0452  301F               	movlw	31
 12243  0453  319D  253E  3184   	fcall	_Flash_Memory_Read
 12244  0456  3AAA               	xorlw	170
 12245  0457  1D03               	skipz
 12246  0458  2CC2               	goto	l9974
 12247                           
 12248                           ;MCU_B1.c: 916: product->Data[12] = Flash_Memory_Read(0);
 12249  0459  3000               	movlw	0
 12250  045A  319D  253E  3184   	fcall	_Flash_Memory_Read
 12251  045D  0020               	movlb	0	; select bank0
 12252  045E  00DA               	movwf	??_Flash_Memory_Initialization
 12253  045F  086D               	movf	_product,w
 12254  0460  3E0C               	addlw	12
 12255  0461  0086               	movwf	6
 12256  0462  3002               	movlw	2	; select bank4/5
 12257  0463  0087               	movwf	7
 12258  0464  085A               	movf	??_Flash_Memory_Initialization,w
 12259  0465  0081               	movwf	1
 12260                           
 12261                           ;MCU_B1.c: 917: product->Data[13] = Flash_Memory_Read(1);
 12262  0466  3001               	movlw	1
 12263  0467  319D  253E  3184   	fcall	_Flash_Memory_Read
 12264  046A  0020               	movlb	0	; select bank0
 12265  046B  00DA               	movwf	??_Flash_Memory_Initialization
 12266  046C  086D               	movf	_product,w
 12267  046D  3E0D               	addlw	13
 12268  046E  0086               	movwf	6
 12269  046F  3002               	movlw	2	; select bank4/5
 12270  0470  0087               	movwf	7
 12271  0471  085A               	movf	??_Flash_Memory_Initialization,w
 12272  0472  0081               	movwf	1
 12273                           
 12274                           ;MCU_B1.c: 918: product->Data[14] = Flash_Memory_Read(2);
 12275  0473  3002               	movlw	2
 12276  0474  319D  253E  3184   	fcall	_Flash_Memory_Read
 12277  0477  0020               	movlb	0	; select bank0
 12278  0478  00DA               	movwf	??_Flash_Memory_Initialization
 12279  0479  086D               	movf	_product,w
 12280  047A  3E0E               	addlw	14
 12281  047B  0086               	movwf	6
 12282  047C  3002               	movlw	2	; select bank4/5
 12283  047D  0087               	movwf	7
 12284  047E  085A               	movf	??_Flash_Memory_Initialization,w
 12285  047F  0081               	movwf	1
 12286                           
 12287                           ;MCU_B1.c: 924: i = getDimmerLights_ValueToPercent(((char)(65*0.8)));
 12288  0480  3034               	movlw	52
 12289  0481  3188  20A3  3184   	fcall	_getDimmerLights_ValueToPercent
 12290  0484  0020               	movlb	0	; select bank0
 12291  0485  00DA               	movwf	??_Flash_Memory_Initialization
 12292  0486  085A               	movf	??_Flash_Memory_Initialization,w
 12293  0487  00DB               	movwf	Flash_Memory_Initialization@i
 12294                           
 12295                           ;MCU_B1.c: 925: product->Data[21] = i;
 12296  0488  085B               	movf	Flash_Memory_Initialization@i,w
 12297  0489  00DA               	movwf	??_Flash_Memory_Initialization
 12298  048A  086D               	movf	_product,w
 12299  048B  3E15               	addlw	21
 12300  048C  0086               	movwf	6
 12301  048D  3002               	movlw	2	; select bank4/5
 12302  048E  0087               	movwf	7
 12303  048F  085A               	movf	??_Flash_Memory_Initialization,w
 12304  0490  0081               	movwf	1
 12305                           
 12306                           ;MCU_B1.c: 926: product->Data[22] = i;
 12307  0491  085B               	movf	Flash_Memory_Initialization@i,w
 12308  0492  00DA               	movwf	??_Flash_Memory_Initialization
 12309  0493  086D               	movf	_product,w
 12310  0494  3E16               	addlw	22
 12311  0495  0086               	movwf	6
 12312  0496  3002               	movlw	2	; select bank4/5
 12313  0497  0087               	movwf	7
 12314  0498  085A               	movf	??_Flash_Memory_Initialization,w
 12315  0499  0081               	movwf	1
 12316                           
 12317                           ;MCU_B1.c: 927: product->Data[23] = i;
 12318  049A  085B               	movf	Flash_Memory_Initialization@i,w
 12319  049B  00DA               	movwf	??_Flash_Memory_Initialization
 12320  049C  086D               	movf	_product,w
 12321  049D  3E17               	addlw	23
 12322  049E  0086               	movwf	6
 12323  049F  3002               	movlw	2	; select bank4/5
 12324  04A0  0087               	movwf	7
 12325  04A1  085A               	movf	??_Flash_Memory_Initialization,w
 12326  04A2  0081               	movwf	1
 12327                           
 12328                           ;MCU_B1.c: 929: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12329  04A3  086D               	movf	_product,w
 12330  04A4  3E0C               	addlw	12
 12331  04A5  0086               	movwf	6
 12332  04A6  3002               	movlw	2	; select bank4/5
 12333  04A7  0087               	movwf	7
 12334  04A8  0801               	movf	1,w
 12335  04A9  3AFF               	xorlw	255
 12336  04AA  1D03               	skipz
 12337  04AB  0008               	return
 12338  04AC  086D               	movf	_product,w
 12339  04AD  3E0D               	addlw	13
 12340  04AE  0086               	movwf	6
 12341  04AF  3002               	movlw	2	; select bank4/5
 12342  04B0  0087               	movwf	7
 12343  04B1  0801               	movf	1,w
 12344  04B2  3AFF               	xorlw	255
 12345  04B3  1D03               	skipz
 12346  04B4  0008               	return
 12347  04B5  086D               	movf	_product,w
 12348  04B6  3E0E               	addlw	14
 12349  04B7  0086               	movwf	6
 12350  04B8  3002               	movlw	2	; select bank4/5
 12351  04B9  0087               	movwf	7
 12352  04BA  0801               	movf	1,w
 12353  04BB  3AFF               	xorlw	255
 12354  04BC  1D03               	skipz
 12355  04BD  0008               	return
 12356                           
 12357                           ;MCU_B1.c: 930: myMain.FirstOpen = 1;
 12358  04BE  0022               	movlb	2	; select bank2
 12359  04BF  15A0               	bsf	_myMain^(0+256),3
 12360                           
 12361                           ;MCU_B1.c: 931: myMain.First = 1;
 12362  04C0  16A0               	bsf	_myMain^(0+256),5
 12363                           
 12364                           ;MCU_B1.c: 932: }
 12365                           ;MCU_B1.c: 933: } else {
 12366  04C1  0008               	return
 12367  04C2                     l9974:	
 12368                           
 12369                           ;MCU_B1.c: 934: i = getDimmerLights_ValueToPercent(((char)(65*0.8)));
 12370  04C2  3034               	movlw	52
 12371  04C3  3188  20A3  3184   	fcall	_getDimmerLights_ValueToPercent
 12372  04C6  0020               	movlb	0	; select bank0
 12373  04C7  00DA               	movwf	??_Flash_Memory_Initialization
 12374  04C8  085A               	movf	??_Flash_Memory_Initialization,w
 12375  04C9  00DB               	movwf	Flash_Memory_Initialization@i
 12376                           
 12377                           ;MCU_B1.c: 935: setMemory_Data(0, 0xff);
 12378  04CA  30FF               	movlw	255
 12379  04CB  00DA               	movwf	??_Flash_Memory_Initialization
 12380  04CC  085A               	movf	??_Flash_Memory_Initialization,w
 12381  04CD  00F2               	movwf	setMemory_Data@data
 12382  04CE  3000               	movlw	0
 12383  04CF  319B  2352  3184   	fcall	_setMemory_Data
 12384                           
 12385                           ;MCU_B1.c: 936: setMemory_Data(1, 0xff);
 12386  04D2  30FF               	movlw	255
 12387  04D3  0020               	movlb	0	; select bank0
 12388  04D4  00DA               	movwf	??_Flash_Memory_Initialization
 12389  04D5  085A               	movf	??_Flash_Memory_Initialization,w
 12390  04D6  00F2               	movwf	setMemory_Data@data
 12391  04D7  3001               	movlw	1
 12392  04D8  319B  2352  3184   	fcall	_setMemory_Data
 12393                           
 12394                           ;MCU_B1.c: 937: setMemory_Data(2, 0xff);
 12395  04DB  30FF               	movlw	255
 12396  04DC  0020               	movlb	0	; select bank0
 12397  04DD  00DA               	movwf	??_Flash_Memory_Initialization
 12398  04DE  085A               	movf	??_Flash_Memory_Initialization,w
 12399  04DF  00F2               	movwf	setMemory_Data@data
 12400  04E0  3002               	movlw	2
 12401  04E1  319B  2352  3184   	fcall	_setMemory_Data
 12402                           
 12403                           ;MCU_B1.c: 938: setMemory_Data(3, 0xff);
 12404  04E4  30FF               	movlw	255
 12405  04E5  0020               	movlb	0	; select bank0
 12406  04E6  00DA               	movwf	??_Flash_Memory_Initialization
 12407  04E7  085A               	movf	??_Flash_Memory_Initialization,w
 12408  04E8  00F2               	movwf	setMemory_Data@data
 12409  04E9  3003               	movlw	3
 12410  04EA  319B  2352  3184   	fcall	_setMemory_Data
 12411                           
 12412                           ;MCU_B1.c: 939: setMemory_Data(4, 0xff);
 12413  04ED  30FF               	movlw	255
 12414  04EE  0020               	movlb	0	; select bank0
 12415  04EF  00DA               	movwf	??_Flash_Memory_Initialization
 12416  04F0  085A               	movf	??_Flash_Memory_Initialization,w
 12417  04F1  00F2               	movwf	setMemory_Data@data
 12418  04F2  3004               	movlw	4
 12419  04F3  319B  2352  3184   	fcall	_setMemory_Data
 12420                           
 12421                           ;MCU_B1.c: 940: setMemory_Data(5, 0xff);
 12422  04F6  30FF               	movlw	255
 12423  04F7  0020               	movlb	0	; select bank0
 12424  04F8  00DA               	movwf	??_Flash_Memory_Initialization
 12425  04F9  085A               	movf	??_Flash_Memory_Initialization,w
 12426  04FA  00F2               	movwf	setMemory_Data@data
 12427  04FB  3005               	movlw	5
 12428  04FC  319B  2352  3184   	fcall	_setMemory_Data
 12429                           
 12430                           ;MCU_B1.c: 941: setMemory_Data(31, 0xaa);
 12431  04FF  30AA               	movlw	170
 12432  0500  0020               	movlb	0	; select bank0
 12433  0501  00DA               	movwf	??_Flash_Memory_Initialization
 12434  0502  085A               	movf	??_Flash_Memory_Initialization,w
 12435  0503  00F2               	movwf	setMemory_Data@data
 12436  0504  301F               	movlw	31
 12437  0505  319B  2352  3184   	fcall	_setMemory_Data
 12438                           
 12439                           ;MCU_B1.c: 942: product->Data[21] = i;
 12440  0508  0020               	movlb	0	; select bank0
 12441  0509  085B               	movf	Flash_Memory_Initialization@i,w
 12442  050A  00DA               	movwf	??_Flash_Memory_Initialization
 12443  050B  086D               	movf	_product,w
 12444  050C  3E15               	addlw	21
 12445  050D  0086               	movwf	6
 12446  050E  3002               	movlw	2	; select bank4/5
 12447  050F  0087               	movwf	7
 12448  0510  085A               	movf	??_Flash_Memory_Initialization,w
 12449  0511  0081               	movwf	1
 12450                           
 12451                           ;MCU_B1.c: 943: product->Data[22] = i;
 12452  0512  085B               	movf	Flash_Memory_Initialization@i,w
 12453  0513  00DA               	movwf	??_Flash_Memory_Initialization
 12454  0514  086D               	movf	_product,w
 12455  0515  3E16               	addlw	22
 12456  0516  0086               	movwf	6
 12457  0517  3002               	movlw	2	; select bank4/5
 12458  0518  0087               	movwf	7
 12459  0519  085A               	movf	??_Flash_Memory_Initialization,w
 12460  051A  0081               	movwf	1
 12461                           
 12462                           ;MCU_B1.c: 944: product->Data[23] = i;
 12463  051B  085B               	movf	Flash_Memory_Initialization@i,w
 12464  051C  00DA               	movwf	??_Flash_Memory_Initialization
 12465  051D  086D               	movf	_product,w
 12466  051E  3E17               	addlw	23
 12467  051F  0086               	movwf	6
 12468  0520  3002               	movlw	2	; select bank4/5
 12469  0521  0087               	movwf	7
 12470  0522  085A               	movf	??_Flash_Memory_Initialization,w
 12471  0523  0081               	movwf	1
 12472                           
 12473                           ;MCU_B1.c: 945: GIE = 0;
 12474  0524  138B               	bcf	11,7	;volatile
 12475                           
 12476                           ;MCU_B1.c: 946: Flash_Memory_Write();
 12477  0525  3191  2178         	fcall	_Flash_Memory_Write
 12478                           
 12479                           ;MCU_B1.c: 947: GIE = 1;
 12480  0527  178B               	bsf	11,7	;volatile
 12481                           
 12482                           ;MCU_B1.c: 948: myMain.FirstOpen = 1;
 12483  0528  0022               	movlb	2	; select bank2
 12484  0529  15A0               	bsf	_myMain^(0+256),3
 12485                           
 12486                           ;MCU_B1.c: 949: myMain.First = 1;
 12487  052A  16A0               	bsf	_myMain^(0+256),5
 12488  052B  0008               	return
 12489  052C                     __end_of_Flash_Memory_Initialization:	
 12490                           
 12491                           	psect	text80
 12492  1B52                     __ptext80:	
 12493 ;; *************** function _setMemory_Data *****************
 12494 ;; Defined at:
 12495 ;;		line 1064 in file "../src/MCU_B1.c"
 12496 ;; Parameters:    Size  Location     Type
 12497 ;;  address         1    wreg     unsigned char 
 12498 ;;  data            1    2[COMMON] unsigned char 
 12499 ;; Auto vars:     Size  Location     Type
 12500 ;;  address         1    4[COMMON] unsigned char 
 12501 ;; Return value:  Size  Location     Type
 12502 ;;		None               void
 12503 ;; Registers used:
 12504 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12505 ;; Tracked objects:
 12506 ;;		On entry : 0/0
 12507 ;;		On exit  : 0/0
 12508 ;;		Unchanged: 0/0
 12509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12510 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12511 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12512 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12513 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12514 ;;Total ram usage:        3 bytes
 12515 ;; Hardware stack levels used:    1
 12516 ;; Hardware stack levels required when called:    3
 12517 ;; This function calls:
 12518 ;;		Nothing
 12519 ;; This function is called by:
 12520 ;;		_Flash_Memory_Initialization
 12521 ;;		_Flash_Memory_Modify
 12522 ;; This function uses a non-reentrant model
 12523 ;;
 12524                           
 12525                           
 12526                           ;psect for function _setMemory_Data
 12527  1B52                     _setMemory_Data:	
 12528                           
 12529                           ;incstack = 0
 12530                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12531                           ;setMemory_Data@address stored from wreg
 12532  1B52  00F4               	movwf	setMemory_Data@address
 12533                           
 12534                           ;MCU_B1.c: 1065: Memory.Data[address] = data;
 12535  1B53  0872               	movf	setMemory_Data@data,w
 12536  1B54  00F3               	movwf	??_setMemory_Data
 12537  1B55  0874               	movf	setMemory_Data@address,w
 12538  1B56  3E20               	addlw	_Memory& (0+255)
 12539  1B57  0086               	movwf	6
 12540  1B58  3002               	movlw	2	; select bank4/5
 12541  1B59  0087               	movwf	7
 12542  1B5A  0873               	movf	??_setMemory_Data,w
 12543  1B5B  0081               	movwf	1
 12544  1B5C  0008               	return
 12545  1B5D                     __end_of_setMemory_Data:	
 12546                           
 12547                           	psect	text81
 12548  1178                     __ptext81:	
 12549 ;; *************** function _Flash_Memory_Write *****************
 12550 ;; Defined at:
 12551 ;;		line 997 in file "../src/MCU_B1.c"
 12552 ;; Parameters:    Size  Location     Type
 12553 ;;		None
 12554 ;; Auto vars:     Size  Location     Type
 12555 ;;  i               1    3[COMMON] unsigned char 
 12556 ;; Return value:  Size  Location     Type
 12557 ;;		None               void
 12558 ;; Registers used:
 12559 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12560 ;; Tracked objects:
 12561 ;;		On entry : 0/0
 12562 ;;		On exit  : 0/0
 12563 ;;		Unchanged: 0/0
 12564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12565 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12566 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12567 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12568 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12569 ;;Total ram usage:        2 bytes
 12570 ;; Hardware stack levels used:    1
 12571 ;; Hardware stack levels required when called:    4
 12572 ;; This function calls:
 12573 ;;		_Flash_Memory_Unlock
 12574 ;; This function is called by:
 12575 ;;		_Flash_Memory_Initialization
 12576 ;;		_Flash_Memory_Modify
 12577 ;; This function uses a non-reentrant model
 12578 ;;
 12579                           
 12580                           
 12581                           ;psect for function _Flash_Memory_Write
 12582  1178                     _Flash_Memory_Write:	
 12583                           
 12584                           ;MCU_B1.c: 998: char i = 0;
 12585                           
 12586                           ;incstack = 0
 12587                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12588  1178  01F3               	clrf	Flash_Memory_Write@i
 12589                           
 12590                           ;MCU_B1.c: 999: CFGS = 0;
 12591  1179  0023               	movlb	3	; select bank3
 12592  117A  1315               	bcf	21,6	;volatile
 12593                           
 12594                           ;MCU_B1.c: 1000: PMADRH = 0x30;
 12595  117B  3030               	movlw	48
 12596  117C  0092               	movwf	18	;volatile
 12597                           
 12598                           ;MCU_B1.c: 1001: PMDATH = 0;
 12599  117D  0194               	clrf	20	;volatile
 12600                           
 12601                           ;MCU_B1.c: 1002: FREE = 0;
 12602  117E  1215               	bcf	21,4	;volatile
 12603                           
 12604                           ;MCU_B1.c: 1003: LWLO = 1;
 12605  117F  1695               	bsf	21,5	;volatile
 12606                           
 12607                           ;MCU_B1.c: 1004: WREN = 1;
 12608  1180  1515               	bsf	21,2	;volatile
 12609                           
 12610                           ;MCU_B1.c: 1005: for (i = 0; i < 32; i++) {
 12611  1181  01F3               	clrf	Flash_Memory_Write@i
 12612  1182  3020               	movlw	32
 12613  1183  0273               	subwf	Flash_Memory_Write@i,w
 12614  1184  1803               	btfsc	3,0
 12615  1185  299B               	goto	l1453
 12616  1186                     l7490:	
 12617                           
 12618                           ;MCU_B1.c: 1006: PMADRL = i;
 12619  1186  0873               	movf	Flash_Memory_Write@i,w
 12620  1187  0023               	movlb	3	; select bank3
 12621  1188  0091               	movwf	17	;volatile
 12622                           
 12623                           ;MCU_B1.c: 1007: PMDATL = Memory.Data[i];
 12624  1189  0873               	movf	Flash_Memory_Write@i,w
 12625  118A  3E20               	addlw	_Memory& (0+255)
 12626  118B  0086               	movwf	6
 12627  118C  3002               	movlw	2	; select bank4/5
 12628  118D  0087               	movwf	7
 12629  118E  0801               	movf	1,w
 12630  118F  0093               	movwf	19	;volatile
 12631                           
 12632                           ;MCU_B1.c: 1008: Flash_Memory_Unlock();
 12633  1190  319B  232B  3191   	fcall	_Flash_Memory_Unlock
 12634  1193  3001               	movlw	1
 12635  1194  00F2               	movwf	??_Flash_Memory_Write
 12636  1195  0872               	movf	??_Flash_Memory_Write,w
 12637  1196  07F3               	addwf	Flash_Memory_Write@i,f
 12638  1197  3020               	movlw	32
 12639  1198  0273               	subwf	Flash_Memory_Write@i,w
 12640  1199  1C03               	skipc
 12641  119A  2986               	goto	l7490
 12642  119B                     l1453:	
 12643                           
 12644                           ;MCU_B1.c: 1009: }
 12645                           ;MCU_B1.c: 1010: LWLO = 0;
 12646  119B  0023               	movlb	3	; select bank3
 12647  119C  1295               	bcf	21,5	;volatile
 12648                           
 12649                           ;MCU_B1.c: 1011: Flash_Memory_Unlock();
 12650  119D  319B  232B         	fcall	_Flash_Memory_Unlock
 12651                           
 12652                           ;MCU_B1.c: 1012: WREN = 0;
 12653  119F  0023               	movlb	3	; select bank3
 12654  11A0  1115               	bcf	21,2	;volatile
 12655  11A1  0008               	return
 12656  11A2                     __end_of_Flash_Memory_Write:	
 12657                           
 12658                           	psect	text82
 12659  1B2B                     __ptext82:	
 12660 ;; *************** function _Flash_Memory_Unlock *****************
 12661 ;; Defined at:
 12662 ;;		line 976 in file "../src/MCU_B1.c"
 12663 ;; Parameters:    Size  Location     Type
 12664 ;;		None
 12665 ;; Auto vars:     Size  Location     Type
 12666 ;;		None
 12667 ;; Return value:  Size  Location     Type
 12668 ;;		None               void
 12669 ;; Registers used:
 12670 ;;		wreg
 12671 ;; Tracked objects:
 12672 ;;		On entry : 0/0
 12673 ;;		On exit  : 0/0
 12674 ;;		Unchanged: 0/0
 12675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12677 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12679 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12680 ;;Total ram usage:        0 bytes
 12681 ;; Hardware stack levels used:    1
 12682 ;; Hardware stack levels required when called:    3
 12683 ;; This function calls:
 12684 ;;		Nothing
 12685 ;; This function is called by:
 12686 ;;		_Flash_Memory_Write
 12687 ;;		_Flash_Memory_Erasing
 12688 ;; This function uses a non-reentrant model
 12689 ;;
 12690                           
 12691                           
 12692                           ;psect for function _Flash_Memory_Unlock
 12693  1B2B                     _Flash_Memory_Unlock:	
 12694                           
 12695                           ;MCU_B1.c: 977: PMCON2 = 0x55;
 12696                           
 12697                           ;incstack = 0
 12698                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 12699  1B2B  3055               	movlw	85
 12700  1B2C  0023               	movlb	3	; select bank3
 12701  1B2D  0096               	movwf	22	;volatile
 12702                           
 12703                           ;MCU_B1.c: 978: PMCON2 = 0xaa;
 12704  1B2E  30AA               	movlw	170
 12705  1B2F  0096               	movwf	22	;volatile
 12706                           
 12707                           ;MCU_B1.c: 979: WR = 1;
 12708  1B30  1495               	bsf	21,1	;volatile
 12709                           
 12710                           ;MCU_B1.c: 980: __nop();
 12711  1B31  0000               	nop
 12712                           
 12713                           ;MCU_B1.c: 981: __nop();
 12714  1B32  0000               	nop
 12715  1B33  0008               	return
 12716  1B34                     __end_of_Flash_Memory_Unlock:	
 12717                           
 12718                           	psect	text83
 12719  1D3E                     __ptext83:	
 12720 ;; *************** function _Flash_Memory_Read *****************
 12721 ;; Defined at:
 12722 ;;		line 985 in file "../src/MCU_B1.c"
 12723 ;; Parameters:    Size  Location     Type
 12724 ;;  address         1    wreg     unsigned char 
 12725 ;; Auto vars:     Size  Location     Type
 12726 ;;  address         1    4[COMMON] unsigned char 
 12727 ;;  ret             1    5[COMMON] unsigned char 
 12728 ;;  i               1    3[COMMON] unsigned char 
 12729 ;; Return value:  Size  Location     Type
 12730 ;;                  1    wreg      unsigned char 
 12731 ;; Registers used:
 12732 ;;		wreg, status,2
 12733 ;; Tracked objects:
 12734 ;;		On entry : 0/0
 12735 ;;		On exit  : 0/0
 12736 ;;		Unchanged: 0/0
 12737 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12739 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12740 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12741 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12742 ;;Total ram usage:        4 bytes
 12743 ;; Hardware stack levels used:    1
 12744 ;; Hardware stack levels required when called:    3
 12745 ;; This function calls:
 12746 ;;		Nothing
 12747 ;; This function is called by:
 12748 ;;		_Flash_Memory_Initialization
 12749 ;;		_Flash_Memory_Modify
 12750 ;; This function uses a non-reentrant model
 12751 ;;
 12752                           
 12753                           
 12754                           ;psect for function _Flash_Memory_Read
 12755  1D3E                     _Flash_Memory_Read:	
 12756                           
 12757                           ;incstack = 0
 12758                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 12759                           ;Flash_Memory_Read@address stored from wreg
 12760  1D3E  00F4               	movwf	Flash_Memory_Read@address
 12761                           
 12762                           ;MCU_B1.c: 986: char i = 0, ret = 0;
 12763  1D3F  01F3               	clrf	Flash_Memory_Read@i
 12764  1D40  01F5               	clrf	Flash_Memory_Read@ret
 12765                           
 12766                           ;MCU_B1.c: 987: PMADRH = 0x30;
 12767  1D41  3030               	movlw	48
 12768  1D42  0023               	movlb	3	; select bank3
 12769  1D43  0092               	movwf	18	;volatile
 12770                           
 12771                           ;MCU_B1.c: 988: PMADRL = address;
 12772  1D44  0874               	movf	Flash_Memory_Read@address,w
 12773  1D45  0091               	movwf	17	;volatile
 12774                           
 12775                           ;MCU_B1.c: 989: CFGS = 0;
 12776  1D46  1315               	bcf	21,6	;volatile
 12777                           
 12778                           ;MCU_B1.c: 990: RD = 1;
 12779  1D47  1415               	bsf	21,0	;volatile
 12780                           
 12781                           ;MCU_B1.c: 991: i = PMDATH;
 12782  1D48  0814               	movf	20,w	;volatile
 12783  1D49  00F2               	movwf	??_Flash_Memory_Read
 12784  1D4A  0872               	movf	??_Flash_Memory_Read,w
 12785  1D4B  00F3               	movwf	Flash_Memory_Read@i
 12786                           
 12787                           ;MCU_B1.c: 992: ret = PMDATL;
 12788  1D4C  0813               	movf	19,w	;volatile
 12789  1D4D  00F2               	movwf	??_Flash_Memory_Read
 12790  1D4E  0872               	movf	??_Flash_Memory_Read,w
 12791  1D4F  00F5               	movwf	Flash_Memory_Read@ret
 12792                           
 12793                           ;MCU_B1.c: 993: return ret;
 12794  1D50  0875               	movf	Flash_Memory_Read@ret,w
 12795  1D51  0008               	return
 12796  1D52                     __end_of_Flash_Memory_Read:	
 12797                           
 12798                           	psect	text84
 12799  052C                     __ptext84:	
 12800 ;; *************** function _Exception_Main *****************
 12801 ;; Defined at:
 12802 ;;		line 509 in file "../src/main_B1.c"
 12803 ;; Parameters:    Size  Location     Type
 12804 ;;		None
 12805 ;; Auto vars:     Size  Location     Type
 12806 ;;  i               2   10[BANK0 ] int 
 12807 ;;  i               2    8[BANK0 ] int 
 12808 ;;  lights          1   12[BANK0 ] unsigned char 
 12809 ;;  error           1    7[BANK0 ] unsigned char 
 12810 ;;  count           1    6[BANK0 ] unsigned char 
 12811 ;; Return value:  Size  Location     Type
 12812 ;;		None               void
 12813 ;; Registers used:
 12814 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12815 ;; Tracked objects:
 12816 ;;		On entry : 0/0
 12817 ;;		On exit  : 0/0
 12818 ;;		Unchanged: 0/0
 12819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12821 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12822 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12823 ;;      Totals:         1       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12824 ;;Total ram usage:        8 bytes
 12825 ;; Hardware stack levels used:    1
 12826 ;; Hardware stack levels required when called:    5
 12827 ;; This function calls:
 12828 ;;		_getDimmerLights_Line
 12829 ;;		_getDimmerLights_Status
 12830 ;;		_getMain_All_Error_Status
 12831 ;;		_getMain_All_LightsStatus
 12832 ;;		_setBuz
 12833 ;;		_setDimmerLights_SwOff
 12834 ;;		_setLED
 12835 ;; This function is called by:
 12836 ;;		_main
 12837 ;; This function uses a non-reentrant model
 12838 ;;
 12839                           
 12840                           
 12841                           ;psect for function _Exception_Main
 12842  052C                     _Exception_Main:	
 12843                           
 12844                           ;main_B1.c: 510: char error = getMain_All_Error_Status(0);
 12845                           
 12846                           ;incstack = 0
 12847                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12848  052C  3000               	movlw	0
 12849  052D  3191  21CC  3185   	fcall	_getMain_All_Error_Status
 12850  0530  00F9               	movwf	??_Exception_Main
 12851  0531  0879               	movf	??_Exception_Main,w
 12852  0532  0020               	movlb	0	; select bank0
 12853  0533  00A7               	movwf	Exception_Main@error
 12854                           
 12855                           ;main_B1.c: 511: char lights = 0, count = 2;
 12856  0534  01AC               	clrf	Exception_Main@lights
 12857  0535  3002               	movlw	2
 12858  0536  00F9               	movwf	??_Exception_Main
 12859  0537  0879               	movf	??_Exception_Main,w
 12860  0538  00A6               	movwf	Exception_Main@count
 12861                           
 12862                           ;main_B1.c: 512: if (myMain.Error_Run == 1) {
 12863  0539  0022               	movlb	2	; select bank2
 12864  053A  1DAB               	btfss	(_myMain^(0+256)+11),3
 12865  053B  2D4A               	goto	l10266
 12866                           
 12867                           ;main_B1.c: 513: if (error == 0) {
 12868  053C  0020               	movlb	0	; select bank0
 12869  053D  08A7               	movf	Exception_Main@error,f
 12870  053E  1D03               	skipz
 12871  053F  0008               	return
 12872                           
 12873                           ;main_B1.c: 514: myMain.Error_Run = 0;
 12874  0540  0022               	movlb	2	; select bank2
 12875  0541  11AB               	bcf	(_myMain^(0+256)+11),3
 12876                           
 12877                           ;main_B1.c: 519: setLED(99, 10);
 12878  0542  300A               	movlw	10
 12879  0543  00F9               	movwf	??_Exception_Main
 12880  0544  0879               	movf	??_Exception_Main,w
 12881  0545  00F4               	movwf	setLED@command
 12882  0546  3063               	movlw	99
 12883  0547  3197  2741         	fcall	_setLED
 12884                           
 12885                           ;main_B1.c: 521: }
 12886                           ;main_B1.c: 522: } else {
 12887  0549  0008               	return
 12888  054A                     l10266:	
 12889                           
 12890                           ;main_B1.c: 523: if (error != 0) {
 12891  054A  0020               	movlb	0	; select bank0
 12892  054B  0827               	movf	Exception_Main@error,w
 12893  054C  1903               	btfsc	3,2
 12894  054D  0008               	return
 12895                           
 12896                           ;main_B1.c: 524: myMain.Error_Run = 1;
 12897  054E  0022               	movlb	2	; select bank2
 12898  054F  15AB               	bsf	(_myMain^(0+256)+11),3
 12899                           
 12900                           ;main_B1.c: 527: setLED(99, 11);
 12901  0550  300B               	movlw	11
 12902  0551  00F9               	movwf	??_Exception_Main
 12903  0552  0879               	movf	??_Exception_Main,w
 12904  0553  00F4               	movwf	setLED@command
 12905  0554  3063               	movlw	99
 12906  0555  3197  2741  3185   	fcall	_setLED
 12907                           
 12908                           ;main_B1.c: 529: switch (error) {
 12909  0558  2DF5               	goto	l10314
 12910  0559                     l10272:	
 12911                           ;main_B1.c: 530: case 2:
 12912                           
 12913                           
 12914                           ;main_B1.c: 531: if (getMain_All_LightsStatus() == 1) {
 12915  0559  319C  2404  3185   	fcall	_getMain_All_LightsStatus
 12916  055C  3A01               	xorlw	1
 12917  055D  1D03               	skipz
 12918  055E  2D68               	goto	l10276
 12919                           
 12920                           ;main_B1.c: 532: setBuz(10, 300);
 12921  055F  302C               	movlw	44
 12922  0560  0020               	movlb	0	; select bank0
 12923  0561  00A4               	movwf	setBuz@time
 12924  0562  3001               	movlw	1
 12925  0563  00A5               	movwf	setBuz@time+1
 12926  0564  300A               	movlw	10
 12927  0565  3195  2584  3185   	fcall	_setBuz
 12928  0568                     l10276:	
 12929                           
 12930                           ;main_B1.c: 533: }
 12931                           ;main_B1.c: 535: for (int i = 0; i < count; i++) {
 12932  0568  0020               	movlb	0	; select bank0
 12933  0569  01A8               	clrf	Exception_Main@i
 12934  056A  01A9               	clrf	Exception_Main@i+1
 12935  056B                     l10286:	
 12936  056B  0829               	movf	Exception_Main@i+1,w
 12937  056C  3A80               	xorlw	128
 12938  056D  00F9               	movwf	??_Exception_Main
 12939  056E  3080               	movlw	128
 12940  056F  0279               	subwf	??_Exception_Main,w
 12941  0570  1D03               	skipz
 12942  0571  2D74               	goto	u12175
 12943  0572  0826               	movf	Exception_Main@count,w
 12944  0573  0228               	subwf	Exception_Main@i,w
 12945  0574                     u12175:	
 12946  0574  1803               	btfsc	3,0
 12947  0575  2D96               	goto	u12170
 12948                           
 12949                           ;main_B1.c: 537: if (getDimmerLights_Status(i + 1) == 1) {
 12950  0576  0020               	movlb	0	; select bank0
 12951  0577  0828               	movf	Exception_Main@i,w
 12952  0578  3E01               	addlw	1
 12953  0579  319B  23E6  3185   	fcall	_getDimmerLights_Status
 12954  057C  3A01               	xorlw	1
 12955  057D  1D03               	skipz
 12956  057E  2D90               	goto	l10284
 12957                           
 12958                           ;main_B1.c: 538: DimmerLights->SwFlag = 1;
 12959  057F  0021               	movlb	1	; select bank1
 12960  0580  0846               	movf	_DimmerLights^(0+128),w
 12961  0581  0086               	movwf	6
 12962  0582  3001               	movlw	1	; select bank2/3
 12963  0583  0087               	movwf	7
 12964  0584  1401               	bsf	1,0
 12965                           
 12966                           ;main_B1.c: 539: DimmerLights->Status = 0;
 12967  0585  0A46               	incf	_DimmerLights^(0+128),w
 12968  0586  0086               	movwf	6
 12969  0587  3001               	movlw	1	; select bank2/3
 12970  0588  0087               	movwf	7
 12971  0589  1001               	bcf	1,0
 12972                           
 12973                           ;main_B1.c: 540: setDimmerLights_SwOff(i + 1);
 12974  058A  0020               	movlb	0	; select bank0
 12975  058B  0828               	movf	Exception_Main@i,w
 12976  058C  3E01               	addlw	1
 12977  058D  3192  22CE  3185   	fcall	_setDimmerLights_SwOff
 12978  0590                     l10284:	
 12979  0590  3001               	movlw	1
 12980  0591  0020               	movlb	0	; select bank0
 12981  0592  07A8               	addwf	Exception_Main@i,f
 12982  0593  3000               	movlw	0
 12983  0594  3DA9               	addwfc	Exception_Main@i+1,f
 12984  0595  2D6B               	goto	l10286
 12985  0596                     u12170:	
 12986  0596  0020               	movlb	0	; select bank0
 12987  0597  0008               	return
 12988  0598                     l10288:	
 12989                           ;main_B1.c: 544: case 3:
 12990                           
 12991                           ;main_B1.c: 541: }
 12992                           ;main_B1.c: 542: }
 12993                           ;main_B1.c: 543: break;
 12994                           
 12995                           
 12996                           ;main_B1.c: 546: setBuz(5, 300);
 12997  0598  302C               	movlw	44
 12998  0599  0020               	movlb	0	; select bank0
 12999  059A  00A4               	movwf	setBuz@time
 13000  059B  3001               	movlw	1
 13001  059C  00A5               	movwf	setBuz@time+1
 13002  059D  3005               	movlw	5
 13003  059E  3195  2584  3185   	fcall	_setBuz
 13004                           
 13005                           ;main_B1.c: 547: lights = getDimmerLights_Line();
 13006  05A1  319C  2413  3185   	fcall	_getDimmerLights_Line
 13007  05A4  00F9               	movwf	??_Exception_Main
 13008  05A5  0879               	movf	??_Exception_Main,w
 13009  05A6  0020               	movlb	0	; select bank0
 13010  05A7  00AC               	movwf	Exception_Main@lights
 13011                           
 13012                           ;main_B1.c: 548: if (lights == 0) {
 13013  05A8  08AC               	movf	Exception_Main@lights,f
 13014  05A9  1D03               	skipz
 13015  05AA  2DDA               	goto	l10306
 13016                           
 13017                           ;main_B1.c: 550: for (int i = 0; i < count; i++) {
 13018  05AB  01AA               	clrf	Exception_Main@i_6558
 13019  05AC  01AB               	clrf	Exception_Main@i_6558+1
 13020  05AD                     l10304:	
 13021  05AD  082B               	movf	Exception_Main@i_6558+1,w
 13022  05AE  3A80               	xorlw	128
 13023  05AF  00F9               	movwf	??_Exception_Main
 13024  05B0  3080               	movlw	128
 13025  05B1  0279               	subwf	??_Exception_Main,w
 13026  05B2  1D03               	skipz
 13027  05B3  2DB6               	goto	u12205
 13028  05B4  0826               	movf	Exception_Main@count,w
 13029  05B5  022A               	subwf	Exception_Main@i_6558,w
 13030  05B6                     u12205:	
 13031  05B6  1803               	btfsc	3,0
 13032  05B7  2DD8               	goto	u12200
 13033                           
 13034                           ;main_B1.c: 552: if (getDimmerLights_Status(i + 1) == 1) {
 13035  05B8  0020               	movlb	0	; select bank0
 13036  05B9  082A               	movf	Exception_Main@i_6558,w
 13037  05BA  3E01               	addlw	1
 13038  05BB  319B  23E6  3185   	fcall	_getDimmerLights_Status
 13039  05BE  3A01               	xorlw	1
 13040  05BF  1D03               	skipz
 13041  05C0  2DD2               	goto	l10302
 13042                           
 13043                           ;main_B1.c: 553: DimmerLights->SwFlag = 1;
 13044  05C1  0021               	movlb	1	; select bank1
 13045  05C2  0846               	movf	_DimmerLights^(0+128),w
 13046  05C3  0086               	movwf	6
 13047  05C4  3001               	movlw	1	; select bank2/3
 13048  05C5  0087               	movwf	7
 13049  05C6  1401               	bsf	1,0
 13050                           
 13051                           ;main_B1.c: 554: DimmerLights->Status = 0;
 13052  05C7  0A46               	incf	_DimmerLights^(0+128),w
 13053  05C8  0086               	movwf	6
 13054  05C9  3001               	movlw	1	; select bank2/3
 13055  05CA  0087               	movwf	7
 13056  05CB  1001               	bcf	1,0
 13057                           
 13058                           ;main_B1.c: 555: setDimmerLights_SwOff(i + 1);
 13059  05CC  0020               	movlb	0	; select bank0
 13060  05CD  082A               	movf	Exception_Main@i_6558,w
 13061  05CE  3E01               	addlw	1
 13062  05CF  3192  22CE  3185   	fcall	_setDimmerLights_SwOff
 13063  05D2                     l10302:	
 13064  05D2  3001               	movlw	1
 13065  05D3  0020               	movlb	0	; select bank0
 13066  05D4  07AA               	addwf	Exception_Main@i_6558,f
 13067  05D5  3000               	movlw	0
 13068  05D6  3DAB               	addwfc	Exception_Main@i_6558+1,f
 13069  05D7  2DAD               	goto	l10304
 13070  05D8                     u12200:	
 13071  05D8  0020               	movlb	0	; select bank0
 13072  05D9  0008               	return
 13073  05DA                     l10306:	
 13074                           ;main_B1.c: 556: }
 13075                           ;main_B1.c: 557: }
 13076                           ;main_B1.c: 558: } else {
 13077                           
 13078                           
 13079                           ;main_B1.c: 560: if (getDimmerLights_Status(lights) == 1) {
 13080  05DA  0020               	movlb	0	; select bank0
 13081  05DB  082C               	movf	Exception_Main@lights,w
 13082  05DC  319B  23E6  3185   	fcall	_getDimmerLights_Status
 13083  05DF  3A01               	xorlw	1
 13084  05E0  1903               	btfsc	3,2
 13085  05E1  2DE4               	goto	l10308
 13086  05E2  0020               	movlb	0	; select bank0
 13087  05E3  0008               	return
 13088  05E4                     l10308:	
 13089                           
 13090                           ;main_B1.c: 562: DimmerLights->SwFlag = 1;
 13091  05E4  0021               	movlb	1	; select bank1
 13092  05E5  0846               	movf	_DimmerLights^(0+128),w
 13093  05E6  0086               	movwf	6
 13094  05E7  3001               	movlw	1	; select bank2/3
 13095  05E8  0087               	movwf	7
 13096  05E9  1401               	bsf	1,0
 13097                           
 13098                           ;main_B1.c: 563: DimmerLights->Status = 0;
 13099  05EA  0A46               	incf	_DimmerLights^(0+128),w
 13100  05EB  0086               	movwf	6
 13101  05EC  3001               	movlw	1	; select bank2/3
 13102  05ED  0087               	movwf	7
 13103  05EE  1001               	bcf	1,0
 13104                           
 13105                           ;main_B1.c: 564: setDimmerLights_SwOff(lights);
 13106  05EF  0020               	movlb	0	; select bank0
 13107  05F0  082C               	movf	Exception_Main@lights,w
 13108  05F1  3192  22CE         	fcall	_setDimmerLights_SwOff
 13109  05F3  0020               	movlb	0	; select bank0
 13110  05F4  0008               	return
 13111  05F5                     l10314:	
 13112                           ;main_B1.c: 568: }
 13113                           
 13114                           ;main_B1.c: 565: }
 13115                           ;main_B1.c: 566: }
 13116                           ;main_B1.c: 567: break;
 13117                           
 13118  05F5  0020               	movlb	0	; select bank0
 13119  05F6  0827               	movf	Exception_Main@error,w
 13120                           
 13121                           ; Switch size 1, requested type "space"
 13122                           ; Number of cases is 2, Range of values is 2 to 3
 13123                           ; switch strategies available:
 13124                           ; Name         Instructions Cycles
 13125                           ; simple_byte            7     4 (average)
 13126                           ; direct_byte           13     9 (fixed)
 13127                           ; jumptable            263     9 (fixed)
 13128                           ;	Chosen strategy is simple_byte
 13129  05F7  3A02               	xorlw	2	; case 2
 13130  05F8  1903               	skipnz
 13131  05F9  2D59               	goto	l10272
 13132  05FA  3A01               	xorlw	1	; case 3
 13133  05FB  1903               	skipnz
 13134  05FC  2D98               	goto	l10288
 13135  05FD  2DFF               	goto	l2880
 13136  05FE  0008               	return
 13137  05FF                     l2880:	
 13138  05FF  0008               	return
 13139  0600                     __end_of_Exception_Main:	
 13140                           
 13141                           	psect	text85
 13142  1C13                     __ptext85:	
 13143 ;; *************** function _getDimmerLights_Line *****************
 13144 ;; Defined at:
 13145 ;;		line 966 in file "../src/Dimmer_B1.c"
 13146 ;; Parameters:    Size  Location     Type
 13147 ;;		None
 13148 ;; Auto vars:     Size  Location     Type
 13149 ;;  line            1    3[COMMON] unsigned char 
 13150 ;; Return value:  Size  Location     Type
 13151 ;;                  1    wreg      unsigned char 
 13152 ;; Registers used:
 13153 ;;		wreg, status,2
 13154 ;; Tracked objects:
 13155 ;;		On entry : 0/0
 13156 ;;		On exit  : 0/0
 13157 ;;		Unchanged: 0/0
 13158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13159 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13160 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13161 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13162 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13163 ;;Total ram usage:        2 bytes
 13164 ;; Hardware stack levels used:    1
 13165 ;; Hardware stack levels required when called:    3
 13166 ;; This function calls:
 13167 ;;		Nothing
 13168 ;; This function is called by:
 13169 ;;		_Exception_Main
 13170 ;; This function uses a non-reentrant model
 13171 ;;
 13172                           
 13173                           
 13174                           ;psect for function _getDimmerLights_Line
 13175  1C13                     _getDimmerLights_Line:	
 13176                           
 13177                           ;Dimmer_B1.c: 967: char line = 0;
 13178                           
 13179                           ;incstack = 0
 13180                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 13181  1C13  01F3               	clrf	getDimmerLights_Line@line
 13182                           
 13183                           ;Dimmer_B1.c: 969: if (DimmerLights1.Line == 1) {
 13184  1C14  0022               	movlb	2	; select bank2
 13185  1C15  1CDF               	btfss	(_DimmerLights1^(0+256)+1),1
 13186  1C16  2C1A               	goto	l945
 13187                           
 13188                           ;Dimmer_B1.c: 970: line = 1;
 13189  1C17  01F3               	clrf	getDimmerLights_Line@line
 13190  1C18  0AF3               	incf	getDimmerLights_Line@line,f
 13191                           
 13192                           ;Dimmer_B1.c: 971: }
 13193  1C19  2C20               	goto	l946
 13194  1C1A                     l945:	
 13195                           
 13196                           ;Dimmer_B1.c: 974: else if (DimmerLights2.Line == 1) {
 13197  1C1A  1CE7               	btfss	(_DimmerLights2^(0+256)+1),1
 13198  1C1B  2C20               	goto	l946
 13199                           
 13200                           ;Dimmer_B1.c: 975: line = 2;
 13201  1C1C  3002               	movlw	2
 13202  1C1D  00F2               	movwf	??_getDimmerLights_Line
 13203  1C1E  0872               	movf	??_getDimmerLights_Line,w
 13204  1C1F  00F3               	movwf	getDimmerLights_Line@line
 13205  1C20                     l946:	
 13206                           
 13207                           ;Dimmer_B1.c: 976: }
 13208                           ;Dimmer_B1.c: 983: return line;
 13209  1C20  0873               	movf	getDimmerLights_Line@line,w
 13210  1C21  0008               	return
 13211  1C22                     __end_of_getDimmerLights_Line:	
 13212                           
 13213                           	psect	text86
 13214  1F3B                     __ptext86:	
 13215 ;; *************** function _DimmerLights_Main *****************
 13216 ;; Defined at:
 13217 ;;		line 732 in file "../src/Dimmer_B1.c"
 13218 ;; Parameters:    Size  Location     Type
 13219 ;;		None
 13220 ;; Auto vars:     Size  Location     Type
 13221 ;;		None
 13222 ;; Return value:  Size  Location     Type
 13223 ;;		None               void
 13224 ;; Registers used:
 13225 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13226 ;; Tracked objects:
 13227 ;;		On entry : 0/0
 13228 ;;		On exit  : 0/0
 13229 ;;		Unchanged: 0/0
 13230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13232 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13234 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13235 ;;Total ram usage:        0 bytes
 13236 ;; Hardware stack levels used:    1
 13237 ;; Hardware stack levels required when called:    8
 13238 ;; This function calls:
 13239 ;;		_getLoad_OK
 13240 ;;		_getMain_All_Error_Status
 13241 ;;		_getMain_All_LightsStatus
 13242 ;;		_setDimmerLights_Main
 13243 ;; This function is called by:
 13244 ;;		_main
 13245 ;; This function uses a non-reentrant model
 13246 ;;
 13247                           
 13248                           
 13249                           ;psect for function _DimmerLights_Main
 13250  1F3B                     _DimmerLights_Main:	
 13251                           
 13252                           ;Dimmer_B1.c: 735: if (Dimmer.LoadGO == 1) {
 13253                           
 13254                           ;incstack = 0
 13255                           ; Regs used in _DimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13256  1F3B  0021               	movlb	1	; select bank1
 13257  1F3C  1CBA               	btfss	_Dimmer^(0+128),1
 13258  1F3D  2F53               	goto	l9950
 13259                           
 13260                           ;Dimmer_B1.c: 736: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          All_LightsStatus() == 0) {
 13261  1F3E  319A  22EF  319F   	fcall	_getLoad_OK
 13262  1F41  3A01               	xorlw	1
 13263  1F42  1903               	skipnz
 13264  1F43  2F51               	goto	l886
 13265  1F44  3000               	movlw	0
 13266  1F45  3191  21CC  319F   	fcall	_getMain_All_Error_Status
 13267  1F48  3800               	iorlw	0
 13268  1F49  1D03               	skipz
 13269  1F4A  2F51               	goto	l886
 13270  1F4B  319C  2404  319F   	fcall	_getMain_All_LightsStatus
 13271  1F4E  3800               	iorlw	0
 13272  1F4F  1D03               	skipz
 13273  1F50  2F53               	goto	l9950
 13274  1F51                     l886:	
 13275                           
 13276                           ;Dimmer_B1.c: 737: Dimmer.LoadGO = 0;
 13277  1F51  0021               	movlb	1	; select bank1
 13278  1F52  10BA               	bcf	_Dimmer^(0+128),1
 13279  1F53                     l9950:	
 13280                           
 13281                           ;Dimmer_B1.c: 738: }
 13282                           ;Dimmer_B1.c: 739: }
 13283                           ;Dimmer_B1.c: 743: setDimmerLights_Main(1);
 13284  1F53  3001               	movlw	1
 13285  1F54  3189  21D5  319F   	fcall	_setDimmerLights_Main
 13286                           
 13287                           ;Dimmer_B1.c: 747: setDimmerLights_Main(2);
 13288  1F57  3002               	movlw	2
 13289  1F58  3189  21D5         	fcall	_setDimmerLights_Main
 13290  1F5A  0008               	return
 13291  1F5B                     __end_of_DimmerLights_Main:	
 13292                           
 13293                           	psect	text87
 13294  09D5                     __ptext87:	
 13295 ;; *************** function _setDimmerLights_Main *****************
 13296 ;; Defined at:
 13297 ;;		line 757 in file "../src/Dimmer_B1.c"
 13298 ;; Parameters:    Size  Location     Type
 13299 ;;  lights          1    wreg     unsigned char 
 13300 ;; Auto vars:     Size  Location     Type
 13301 ;;  lights          1   74[BANK0 ] unsigned char 
 13302 ;; Return value:  Size  Location     Type
 13303 ;;		None               void
 13304 ;; Registers used:
 13305 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13306 ;; Tracked objects:
 13307 ;;		On entry : 0/0
 13308 ;;		On exit  : 0/0
 13309 ;;		Unchanged: 0/0
 13310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13312 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13313 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13314 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13315 ;;Total ram usage:        1 bytes
 13316 ;; Hardware stack levels used:    1
 13317 ;; Hardware stack levels required when called:    7
 13318 ;; This function calls:
 13319 ;;		_DimmerLights_SelectPointer
 13320 ;;		_getDimmerLights_Allow_Condition
 13321 ;;		_getMain_All_LightsStatus
 13322 ;;		_setDimmerLights_Dimming
 13323 ;;		_setDimmerLights_OnOff
 13324 ;; This function is called by:
 13325 ;;		_DimmerLights_Main
 13326 ;; This function uses a non-reentrant model
 13327 ;;
 13328                           
 13329                           
 13330                           ;psect for function _setDimmerLights_Main
 13331  09D5                     _setDimmerLights_Main:	
 13332                           
 13333                           ;incstack = 0
 13334                           ; Regs used in _setDimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13335                           ;setDimmerLights_Main@lights stored from wreg
 13336  09D5  0020               	movlb	0	; select bank0
 13337  09D6  00EA               	movwf	setDimmerLights_Main@lights
 13338                           
 13339                           ;Dimmer_B1.c: 759: DimmerLights_SelectPointer(lights);
 13340  09D7  086A               	movf	setDimmerLights_Main@lights,w
 13341  09D8  319D  2567  3189   	fcall	_DimmerLights_SelectPointer
 13342                           
 13343                           ;Dimmer_B1.c: 760: if (DimmerLights->Trigger == 1) {
 13344  09DB  0021               	movlb	1	; select bank1
 13345  09DC  0846               	movf	_DimmerLights^(0+128),w
 13346  09DD  0086               	movwf	6
 13347  09DE  3001               	movlw	1	; select bank2/3
 13348  09DF  0087               	movwf	7
 13349  09E0  1C81               	btfss	1,1
 13350  09E1  2A03               	goto	l9666
 13351                           
 13352                           ;Dimmer_B1.c: 761: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13353  09E2  0020               	movlb	0	; select bank0
 13354  09E3  086A               	movf	setDimmerLights_Main@lights,w
 13355  09E4  3192  2297  3189   	fcall	_getDimmerLights_Allow_Condition
 13356  09E7  3800               	iorlw	0
 13357  09E8  1D03               	skipz
 13358  09E9  0008               	return
 13359                           
 13360                           ;Dimmer_B1.c: 762: DimmerLights->Trigger = 0;
 13361  09EA  0021               	movlb	1	; select bank1
 13362  09EB  0846               	movf	_DimmerLights^(0+128),w
 13363  09EC  0086               	movwf	6
 13364  09ED  3001               	movlw	1	; select bank2/3
 13365  09EE  0087               	movwf	7
 13366  09EF  1081               	bcf	1,1
 13367                           
 13368                           ;Dimmer_B1.c: 763: if (DimmerLights->Switch == 1) {
 13369  09F0  0846               	movf	_DimmerLights^(0+128),w
 13370  09F1  0086               	movwf	6
 13371  09F2  3001               	movlw	1	; select bank2/3
 13372  09F3  0087               	movwf	7
 13373  09F4  1D01               	btfss	1,2
 13374  09F5  29FD               	goto	l9664
 13375                           
 13376                           ;Dimmer_B1.c: 764: setDimmerLights_OnOff(lights, 1);
 13377  09F6  0020               	movlb	0	; select bank0
 13378  09F7  01E6               	clrf	setDimmerLights_OnOff@command
 13379  09F8  0AE6               	incf	setDimmerLights_OnOff@command,f
 13380  09F9  086A               	movf	setDimmerLights_Main@lights,w
 13381  09FA  3186  26C2         	fcall	_setDimmerLights_OnOff
 13382                           
 13383                           ;Dimmer_B1.c: 765: } else {
 13384  09FC  0008               	return
 13385  09FD                     l9664:	
 13386                           
 13387                           ;Dimmer_B1.c: 766: setDimmerLights_OnOff(lights, 0);
 13388  09FD  0020               	movlb	0	; select bank0
 13389  09FE  01E6               	clrf	setDimmerLights_OnOff@command
 13390  09FF  086A               	movf	setDimmerLights_Main@lights,w
 13391  0A00  3186  26C2         	fcall	_setDimmerLights_OnOff
 13392                           
 13393                           ;Dimmer_B1.c: 767: }
 13394                           ;Dimmer_B1.c: 768: }
 13395                           ;Dimmer_B1.c: 769: } else {
 13396  0A02  0008               	return
 13397  0A03                     l9666:	
 13398                           
 13399                           ;Dimmer_B1.c: 770: if (getMain_All_LightsStatus() == 1) {
 13400  0A03  319C  2404  3189   	fcall	_getMain_All_LightsStatus
 13401  0A06  3A01               	xorlw	1
 13402  0A07  1D03               	skipz
 13403  0A08  2A31               	goto	l9678
 13404                           
 13405                           ;Dimmer_B1.c: 771: if (DimmerLights->DimmingTrigger == 1) {
 13406  0A09  0021               	movlb	1	; select bank1
 13407  0A0A  0846               	movf	_DimmerLights^(0+128),w
 13408  0A0B  0086               	movwf	6
 13409  0A0C  3001               	movlw	1	; select bank2/3
 13410  0A0D  0087               	movwf	7
 13411  0A0E  1E01               	btfss	1,4
 13412  0A0F  0008               	return
 13413                           
 13414                           ;Dimmer_B1.c: 772: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13415  0A10  0020               	movlb	0	; select bank0
 13416  0A11  086A               	movf	setDimmerLights_Main@lights,w
 13417  0A12  3192  2297  3189   	fcall	_getDimmerLights_Allow_Condition
 13418  0A15  3800               	iorlw	0
 13419  0A16  1D03               	skipz
 13420  0A17  0008               	return
 13421                           
 13422                           ;Dimmer_B1.c: 773: DimmerLights->DimmingTrigger = 0;
 13423  0A18  0021               	movlb	1	; select bank1
 13424  0A19  0846               	movf	_DimmerLights^(0+128),w
 13425  0A1A  0086               	movwf	6
 13426  0A1B  3001               	movlw	1	; select bank2/3
 13427  0A1C  0087               	movwf	7
 13428  0A1D  1201               	bcf	1,4
 13429                           
 13430                           ;Dimmer_B1.c: 774: if (DimmerLights->DimmingSwitch == 1) {
 13431  0A1E  0846               	movf	_DimmerLights^(0+128),w
 13432  0A1F  0086               	movwf	6
 13433  0A20  3001               	movlw	1	; select bank2/3
 13434  0A21  0087               	movwf	7
 13435  0A22  1E81               	btfss	1,5
 13436  0A23  2A2B               	goto	l9676
 13437                           
 13438                           ;Dimmer_B1.c: 775: setDimmerLights_Dimming(lights, 1);
 13439  0A24  0020               	movlb	0	; select bank0
 13440  0A25  01E3               	clrf	setDimmerLights_Dimming@status
 13441  0A26  0AE3               	incf	setDimmerLights_Dimming@status,f
 13442  0A27  086A               	movf	setDimmerLights_Main@lights,w
 13443  0A28  3194  248F         	fcall	_setDimmerLights_Dimming
 13444                           
 13445                           ;Dimmer_B1.c: 776: } else {
 13446  0A2A  0008               	return
 13447  0A2B                     l9676:	
 13448                           
 13449                           ;Dimmer_B1.c: 777: setDimmerLights_Dimming(lights, 0);
 13450  0A2B  0020               	movlb	0	; select bank0
 13451  0A2C  01E3               	clrf	setDimmerLights_Dimming@status
 13452  0A2D  086A               	movf	setDimmerLights_Main@lights,w
 13453  0A2E  3194  248F         	fcall	_setDimmerLights_Dimming
 13454                           
 13455                           ;Dimmer_B1.c: 778: }
 13456                           ;Dimmer_B1.c: 779: }
 13457                           ;Dimmer_B1.c: 780: }
 13458                           ;Dimmer_B1.c: 781: } else {
 13459  0A30  0008               	return
 13460  0A31                     l9678:	
 13461                           
 13462                           ;Dimmer_B1.c: 782: if (DimmerLights->DimmingTrigger == 1) {
 13463  0A31  0021               	movlb	1	; select bank1
 13464  0A32  0846               	movf	_DimmerLights^(0+128),w
 13465  0A33  0086               	movwf	6
 13466  0A34  3001               	movlw	1	; select bank2/3
 13467  0A35  0087               	movwf	7
 13468  0A36  1E01               	btfss	1,4
 13469  0A37  0008               	return
 13470                           
 13471                           ;Dimmer_B1.c: 783: DimmerLights->DimmingTrigger = 0;
 13472  0A38  0846               	movf	_DimmerLights^(0+128),w
 13473  0A39  0086               	movwf	6
 13474  0A3A  3001               	movlw	1	; select bank2/3
 13475  0A3B  0087               	movwf	7
 13476  0A3C  1201               	bcf	1,4
 13477  0A3D  0008               	return
 13478  0A3E                     __end_of_setDimmerLights_Main:	
 13479                           
 13480                           	psect	text88
 13481  06C2                     __ptext88:	
 13482 ;; *************** function _setDimmerLights_OnOff *****************
 13483 ;; Defined at:
 13484 ;;		line 791 in file "../src/Dimmer_B1.c"
 13485 ;; Parameters:    Size  Location     Type
 13486 ;;  lights          1    wreg     unsigned char 
 13487 ;;  command         1   70[BANK0 ] unsigned char 
 13488 ;; Auto vars:     Size  Location     Type
 13489 ;;  lights          1   73[BANK0 ] unsigned char 
 13490 ;; Return value:  Size  Location     Type
 13491 ;;		None               void
 13492 ;; Registers used:
 13493 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13494 ;; Tracked objects:
 13495 ;;		On entry : 0/0
 13496 ;;		On exit  : 0/0
 13497 ;;		Unchanged: 0/0
 13498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13499 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13500 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13501 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13502 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13503 ;;Total ram usage:        4 bytes
 13504 ;; Hardware stack levels used:    1
 13505 ;; Hardware stack levels required when called:    6
 13506 ;; This function calls:
 13507 ;;		_getCmd_Status
 13508 ;;		_getDelayOff_GO
 13509 ;;		_getDimmerLights_PercentToValue
 13510 ;;		_getDimmerLights_ValueToPercent
 13511 ;;		_getMain_All_LightsStatus
 13512 ;;		_setCmd_Status
 13513 ;;		_setDelayOff_GO
 13514 ;;		_setDimmerIntr_ControlStatus
 13515 ;;		_setDimmerIntr_DimmingValue
 13516 ;;		_setDimmerIntr_Dimming_RF
 13517 ;;		_setDimmerIntr_MaxmumValue
 13518 ;;		_setDimmerLights_Line
 13519 ;;		_setLED
 13520 ;;		_setProductData
 13521 ;;		_setRF_DimmerLights
 13522 ;;		_setTxData
 13523 ;; This function is called by:
 13524 ;;		_setDimmerLights_Main
 13525 ;; This function uses a non-reentrant model
 13526 ;;
 13527                           
 13528                           
 13529                           ;psect for function _setDimmerLights_OnOff
 13530  06C2                     _setDimmerLights_OnOff:	
 13531                           
 13532                           ;incstack = 0
 13533                           ; Regs used in _setDimmerLights_OnOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13534                           ;setDimmerLights_OnOff@lights stored from wreg
 13535  06C2  0020               	movlb	0	; select bank0
 13536  06C3  00E9               	movwf	setDimmerLights_OnOff@lights
 13537                           
 13538                           ;Dimmer_B1.c: 793: if (command == 1) {
 13539  06C4  0866               	movf	setDimmerLights_OnOff@command,w
 13540  06C5  3A01               	xorlw	1
 13541  06C6  1D03               	skipz
 13542  06C7  2F24               	goto	l9518
 13543                           
 13544                           ;Dimmer_B1.c: 794: setDimmerIntr_ControlStatus(lights, 1);
 13545  06C8  01F2               	clrf	setDimmerIntr_ControlStatus@command
 13546  06C9  0AF2               	incf	setDimmerIntr_ControlStatus@command,f
 13547  06CA  0869               	movf	setDimmerLights_OnOff@lights,w
 13548  06CB  3191  2126  3186   	fcall	_setDimmerIntr_ControlStatus
 13549                           
 13550                           ;Dimmer_B1.c: 795: setLED(lights, 0);
 13551  06CE  01F4               	clrf	setLED@command
 13552  06CF  0020               	movlb	0	; select bank0
 13553  06D0  0869               	movf	setDimmerLights_OnOff@lights,w
 13554  06D1  3197  2741  3186   	fcall	_setLED
 13555                           
 13556                           ;Dimmer_B1.c: 799: Dimmer.Load_Status = 1;
 13557  06D4  0021               	movlb	1	; select bank1
 13558  06D5  153A               	bsf	_Dimmer^(0+128),2
 13559                           
 13560                           ;Dimmer_B1.c: 800: setDimmerLights_Line(lights);
 13561  06D6  0020               	movlb	0	; select bank0
 13562  06D7  0869               	movf	setDimmerLights_OnOff@lights,w
 13563  06D8  319C  24F3  3186   	fcall	_setDimmerLights_Line
 13564                           
 13565                           ;Dimmer_B1.c: 805: setDimmerIntr_DimmingValue(lights, ((char)(65*0.8)));
 13566  06DB  3034               	movlw	52
 13567  06DC  0020               	movlb	0	; select bank0
 13568  06DD  00E7               	movwf	??_setDimmerLights_OnOff
 13569  06DE  0867               	movf	??_setDimmerLights_OnOff,w
 13570  06DF  00F2               	movwf	setDimmerIntr_DimmingValue@value
 13571  06E0  0869               	movf	setDimmerLights_OnOff@lights,w
 13572  06E1  319D  2591  3186   	fcall	_setDimmerIntr_DimmingValue
 13573                           
 13574                           ;Dimmer_B1.c: 806: if (DimmerLights->DimmingRun == 1) {
 13575  06E4  0021               	movlb	1	; select bank1
 13576  06E5  0A46               	incf	_DimmerLights^(0+128),w
 13577  06E6  0086               	movwf	6
 13578  06E7  3001               	movlw	1	; select bank2/3
 13579  06E8  0087               	movwf	7
 13580  06E9  1F01               	btfss	1,6
 13581  06EA  2F0D               	goto	l9514
 13582                           
 13583                           ;Dimmer_B1.c: 807: DimmerLights->DimmingRun = 0;
 13584  06EB  0A46               	incf	_DimmerLights^(0+128),w
 13585  06EC  0086               	movwf	6
 13586  06ED  3001               	movlw	1	; select bank2/3
 13587  06EE  0087               	movwf	7
 13588  06EF  1301               	bcf	1,6
 13589                           
 13590                           ;Dimmer_B1.c: 808: setDimmerIntr_MaxmumValue(lights, getDimmerLights_PercentToValue(prod
      +                          uct->Data[20 + lights]));
 13591  06F0  0020               	movlb	0	; select bank0
 13592  06F1  0869               	movf	setDimmerLights_OnOff@lights,w
 13593  06F2  3E14               	addlw	20
 13594  06F3  076D               	addwf	_product,w
 13595  06F4  00E7               	movwf	??_setDimmerLights_OnOff
 13596  06F5  0867               	movf	??_setDimmerLights_OnOff,w
 13597  06F6  0086               	movwf	6
 13598  06F7  3002               	movlw	2	; select bank4/5
 13599  06F8  0087               	movwf	7
 13600  06F9  0801               	movf	1,w
 13601  06FA  3189  2108  3186   	fcall	_getDimmerLights_PercentToValue
 13602  06FD  0020               	movlb	0	; select bank0
 13603  06FE  00E8               	movwf	??_setDimmerLights_OnOff+1
 13604  06FF  0868               	movf	??_setDimmerLights_OnOff+1,w
 13605  0700  00DA               	movwf	setDimmerIntr_MaxmumValue@value
 13606  0701  0869               	movf	setDimmerLights_OnOff@lights,w
 13607  0702  319D  25FB  3186   	fcall	_setDimmerIntr_MaxmumValue
 13608                           
 13609                           ;Dimmer_B1.c: 809: setDimmerIntr_Dimming_RF(lights, 1);
 13610  0705  01F2               	clrf	setDimmerIntr_Dimming_RF@command
 13611  0706  0AF2               	incf	setDimmerIntr_Dimming_RF@command,f
 13612  0707  0020               	movlb	0	; select bank0
 13613  0708  0869               	movf	setDimmerLights_OnOff@lights,w
 13614  0709  3191  214F  3186   	fcall	_setDimmerIntr_Dimming_RF
 13615                           
 13616                           ;Dimmer_B1.c: 810: } else {
 13617  070C  2F54               	goto	l9538
 13618  070D                     l9514:	
 13619                           
 13620                           ;Dimmer_B1.c: 811: setDimmerIntr_MaxmumValue(lights, ((char)(65*0.8)));
 13621  070D  3034               	movlw	52
 13622  070E  0020               	movlb	0	; select bank0
 13623  070F  00E7               	movwf	??_setDimmerLights_OnOff
 13624  0710  0867               	movf	??_setDimmerLights_OnOff,w
 13625  0711  00DA               	movwf	setDimmerIntr_MaxmumValue@value
 13626  0712  0869               	movf	setDimmerLights_OnOff@lights,w
 13627  0713  319D  25FB  3186   	fcall	_setDimmerIntr_MaxmumValue
 13628                           
 13629                           ;Dimmer_B1.c: 812: setProductData((20 + lights), getDimmerLights_ValueToPercent(((char)(
      +                          65*0.8))));
 13630  0716  3034               	movlw	52
 13631  0717  3188  20A3  3186   	fcall	_getDimmerLights_ValueToPercent
 13632  071A  0020               	movlb	0	; select bank0
 13633  071B  00E7               	movwf	??_setDimmerLights_OnOff
 13634  071C  0867               	movf	??_setDimmerLights_OnOff,w
 13635  071D  00DA               	movwf	setProductData@value
 13636  071E  0869               	movf	setDimmerLights_OnOff@lights,w
 13637  071F  3E14               	addlw	20
 13638  0720  319B  23D8  3186   	fcall	_setProductData
 13639                           
 13640                           ;Dimmer_B1.c: 813: }
 13641                           ;Dimmer_B1.c: 815: } else if (command == 0) {
 13642  0723  2F54               	goto	l9538
 13643  0724                     l9518:	
 13644  0724  0020               	movlb	0	; select bank0
 13645  0725  08E6               	movf	setDimmerLights_OnOff@command,f
 13646  0726  1D03               	skipz
 13647  0727  2F54               	goto	l9538
 13648                           
 13649                           ;Dimmer_B1.c: 816: setDimmerIntr_ControlStatus(lights, 0);
 13650  0728  01F2               	clrf	setDimmerIntr_ControlStatus@command
 13651  0729  0869               	movf	setDimmerLights_OnOff@lights,w
 13652  072A  3191  2126  3186   	fcall	_setDimmerIntr_ControlStatus
 13653                           
 13654                           ;Dimmer_B1.c: 817: setLED(lights, 1);
 13655  072D  01F4               	clrf	setLED@command
 13656  072E  0AF4               	incf	setLED@command,f
 13657  072F  0020               	movlb	0	; select bank0
 13658  0730  0869               	movf	setDimmerLights_OnOff@lights,w
 13659  0731  3197  2741  3186   	fcall	_setLED
 13660                           
 13661                           ;Dimmer_B1.c: 821: if (getDelayOff_GO(lights) == 1) {
 13662  0734  0020               	movlb	0	; select bank0
 13663  0735  0869               	movf	setDimmerLights_OnOff@lights,w
 13664  0736  319B  23F5  3186   	fcall	_getDelayOff_GO
 13665  0739  3A01               	xorlw	1
 13666  073A  1D03               	skipz
 13667  073B  2F43               	goto	l9528
 13668                           
 13669                           ;Dimmer_B1.c: 822: setDelayOff_GO(lights, 0, 0);
 13670  073C  0020               	movlb	0	; select bank0
 13671  073D  01DE               	clrf	setDelayOff_GO@command
 13672  073E  01DF               	clrf	setDelayOff_GO@value
 13673  073F  0869               	movf	setDimmerLights_OnOff@lights,w
 13674  0740  318C  2422  3186   	fcall	_setDelayOff_GO
 13675  0743                     l9528:	
 13676                           
 13677                           ;Dimmer_B1.c: 823: }
 13678                           ;Dimmer_B1.c: 828: if (lights == 1) {
 13679  0743  0020               	movlb	0	; select bank0
 13680  0744  0869               	movf	setDimmerLights_OnOff@lights,w
 13681  0745  3A01               	xorlw	1
 13682  0746  1D03               	skipz
 13683  0747  2F4A               	goto	l9532
 13684                           
 13685                           ;Dimmer_B1.c: 829: RA7 = 0;
 13686  0748  138C               	bcf	12,7	;volatile
 13687                           
 13688                           ;Dimmer_B1.c: 831: }
 13689  0749  2F4E               	goto	l912
 13690  074A                     l9532:	
 13691                           
 13692                           ;Dimmer_B1.c: 834: else if (lights == 2) {
 13693  074A  0869               	movf	setDimmerLights_OnOff@lights,w
 13694  074B  3A02               	xorlw	2
 13695  074C  1903               	btfsc	3,2
 13696                           
 13697                           ;Dimmer_B1.c: 835: RB4 = 0;
 13698  074D  120D               	bcf	13,4	;volatile
 13699  074E                     l912:	
 13700                           
 13701                           ;Dimmer_B1.c: 836: }
 13702                           ;Dimmer_B1.c: 841: Dimmer.Load_Status = 0;
 13703  074E  0021               	movlb	1	; select bank1
 13704  074F  113A               	bcf	_Dimmer^(0+128),2
 13705                           
 13706                           ;Dimmer_B1.c: 842: setDimmerLights_Line(0);
 13707  0750  3000               	movlw	0
 13708  0751  319C  24F3  3186   	fcall	_setDimmerLights_Line
 13709  0754                     l9538:	
 13710                           
 13711                           ;Dimmer_B1.c: 844: }
 13712                           ;Dimmer_B1.c: 847: setRF_DimmerLights(lights, command);
 13713  0754  0020               	movlb	0	; select bank0
 13714  0755  0866               	movf	setDimmerLights_OnOff@command,w
 13715  0756  00E7               	movwf	??_setDimmerLights_OnOff
 13716  0757  0867               	movf	??_setDimmerLights_OnOff,w
 13717  0758  00DE               	movwf	setRF_DimmerLights@on
 13718  0759  0869               	movf	setDimmerLights_OnOff@lights,w
 13719  075A  3196  26E2  3186   	fcall	_setRF_DimmerLights
 13720                           
 13721                           ;Dimmer_B1.c: 849: if (getCmd_Status(1) == 1) {
 13722  075D  3001               	movlw	1
 13723  075E  319C  2450  3186   	fcall	_getCmd_Status
 13724  0761  3A01               	xorlw	1
 13725  0762  1D03               	skipz
 13726  0763  2F7E               	goto	l9552
 13727                           
 13728                           ;Dimmer_B1.c: 850: if (getMain_All_LightsStatus() == 0) {
 13729  0764  319C  2404  3186   	fcall	_getMain_All_LightsStatus
 13730  0767  3800               	iorlw	0
 13731  0768  1D03               	skipz
 13732  0769  0008               	return
 13733                           
 13734                           ;Dimmer_B1.c: 851: setCmd_Status(1, 0);
 13735  076A  01F2               	clrf	setCmd_Status@cmd
 13736  076B  3001               	movlw	1
 13737  076C  319D  257C  3186   	fcall	_setCmd_Status
 13738                           
 13739                           ;Dimmer_B1.c: 852: setProductData(11, 0);
 13740  076F  0020               	movlb	0	; select bank0
 13741  0770  01DA               	clrf	setProductData@value
 13742  0771  300B               	movlw	11
 13743  0772  319B  23D8  3186   	fcall	_setProductData
 13744                           
 13745                           ;Dimmer_B1.c: 853: setProductData(17, 0);
 13746  0775  0020               	movlb	0	; select bank0
 13747  0776  01DA               	clrf	setProductData@value
 13748  0777  3011               	movlw	17
 13749  0778  319B  23D8  3186   	fcall	_setProductData
 13750                           
 13751                           ;Dimmer_B1.c: 854: setTxData();
 13752  077B  318F  274A         	fcall	_setTxData
 13753                           
 13754                           ;Dimmer_B1.c: 855: }
 13755                           ;Dimmer_B1.c: 856: } else {
 13756  077D  0008               	return
 13757  077E                     l9552:	
 13758                           
 13759                           ;Dimmer_B1.c: 857: setTxData();
 13760  077E  318F  274A         	fcall	_setTxData
 13761  0780  0008               	return
 13762  0781                     __end_of_setDimmerLights_OnOff:	
 13763                           
 13764                           	psect	text89
 13765  1741                     __ptext89:	
 13766 ;; *************** function _setLED *****************
 13767 ;; Defined at:
 13768 ;;		line 76 in file "../src/LED_B1.c"
 13769 ;; Parameters:    Size  Location     Type
 13770 ;;  led             1    wreg     unsigned char 
 13771 ;;  command         1    4[COMMON] unsigned char 
 13772 ;; Auto vars:     Size  Location     Type
 13773 ;;  led             1    5[COMMON] unsigned char 
 13774 ;; Return value:  Size  Location     Type
 13775 ;;		None               void
 13776 ;; Registers used:
 13777 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13778 ;; Tracked objects:
 13779 ;;		On entry : 0/0
 13780 ;;		On exit  : 0/0
 13781 ;;		Unchanged: 0/0
 13782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13783 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13784 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13786 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13787 ;;Total ram usage:        2 bytes
 13788 ;; Hardware stack levels used:    1
 13789 ;; Hardware stack levels required when called:    4
 13790 ;; This function calls:
 13791 ;;		_LedPointSelect
 13792 ;; This function is called by:
 13793 ;;		_setDimmerLights_OnOff
 13794 ;;		_setLED_Initialization
 13795 ;;		_setSw_Initialization
 13796 ;;		_Exception_Main
 13797 ;; This function uses a non-reentrant model
 13798 ;;
 13799                           
 13800                           
 13801                           ;psect for function _setLED
 13802  1741                     _setLED:	
 13803                           
 13804                           ;incstack = 0
 13805                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13806                           ;setLED@led stored from wreg
 13807  1741  00F5               	movwf	setLED@led
 13808                           
 13809                           ;LED_B1.c: 77: LedPointSelect(led);
 13810  1742  0875               	movf	setLED@led,w
 13811  1743  319E  26E4  3197   	fcall	_LedPointSelect
 13812                           
 13813                           ;LED_B1.c: 78: if (command == 0) {
 13814  1746  08F4               	movf	setLED@command,f
 13815  1747  1D03               	skipz
 13816  1748  2F5B               	goto	l7094
 13817                           
 13818                           ;LED_B1.c: 80: if (led == 1) {
 13819  1749  0875               	movf	setLED@led,w
 13820  174A  3A01               	xorlw	1
 13821  174B  1D03               	skipz
 13822  174C  2F4F               	goto	l7086
 13823                           
 13824                           ;LED_B1.c: 84: RA3 = 1;
 13825  174D  0020               	movlb	0	; select bank0
 13826  174E  158C               	bsf	12,3	;volatile
 13827  174F                     l7086:	
 13828                           
 13829                           ;LED_B1.c: 86: }
 13830                           ;LED_B1.c: 89: if (led == 2) {
 13831  174F  0875               	movf	setLED@led,w
 13832  1750  3A02               	xorlw	2
 13833  1751  1D03               	skipz
 13834  1752  2F55               	goto	l7090
 13835                           
 13836                           ;LED_B1.c: 93: RC7 = 1;
 13837  1753  0020               	movlb	0	; select bank0
 13838  1754  178E               	bsf	14,7	;volatile
 13839  1755                     l7090:	
 13840                           
 13841                           ;LED_B1.c: 95: }
 13842                           ;LED_B1.c: 107: if (led == 99) {
 13843  1755  0875               	movf	setLED@led,w
 13844  1756  3A63               	xorlw	99
 13845  1757  1D03               	skipz
 13846  1758  2F5B               	goto	l7094
 13847                           
 13848                           ;LED_B1.c: 111: RB5 = 1;
 13849  1759  0020               	movlb	0	; select bank0
 13850  175A  168D               	bsf	13,5	;volatile
 13851  175B                     l7094:	
 13852                           
 13853                           ;LED_B1.c: 113: }
 13854                           ;LED_B1.c: 115: }
 13855                           ;LED_B1.c: 116: if (command == 1) {
 13856  175B  0874               	movf	setLED@command,w
 13857  175C  3A01               	xorlw	1
 13858  175D  1D03               	skipz
 13859  175E  2F71               	goto	l7108
 13860                           
 13861                           ;LED_B1.c: 118: if (led == 1) {
 13862  175F  0875               	movf	setLED@led,w
 13863  1760  3A01               	xorlw	1
 13864  1761  1D03               	skipz
 13865  1762  2F65               	goto	l7100
 13866                           
 13867                           ;LED_B1.c: 122: RA3 = 0;
 13868  1763  0020               	movlb	0	; select bank0
 13869  1764  118C               	bcf	12,3	;volatile
 13870  1765                     l7100:	
 13871                           
 13872                           ;LED_B1.c: 124: }
 13873                           ;LED_B1.c: 127: if (led == 2) {
 13874  1765  0875               	movf	setLED@led,w
 13875  1766  3A02               	xorlw	2
 13876  1767  1D03               	skipz
 13877  1768  2F6B               	goto	l7104
 13878                           
 13879                           ;LED_B1.c: 131: RC7 = 0;
 13880  1769  0020               	movlb	0	; select bank0
 13881  176A  138E               	bcf	14,7	;volatile
 13882  176B                     l7104:	
 13883                           
 13884                           ;LED_B1.c: 133: }
 13885                           ;LED_B1.c: 145: if (led == 99) {
 13886  176B  0875               	movf	setLED@led,w
 13887  176C  3A63               	xorlw	99
 13888  176D  1D03               	skipz
 13889  176E  2F71               	goto	l7108
 13890                           
 13891                           ;LED_B1.c: 149: RB5 = 0;
 13892  176F  0020               	movlb	0	; select bank0
 13893  1770  128D               	bcf	13,5	;volatile
 13894  1771                     l7108:	
 13895                           
 13896                           ;LED_B1.c: 151: }
 13897                           ;LED_B1.c: 153: }
 13898                           ;LED_B1.c: 154: if (command == 10) {
 13899  1771  0874               	movf	setLED@command,w
 13900  1772  3A0A               	xorlw	10
 13901  1773  1D03               	skipz
 13902  1774  2F95               	goto	l7124
 13903                           
 13904                           ;LED_B1.c: 155: LED->GO = 0;
 13905  1775  0021               	movlb	1	; select bank1
 13906  1776  0847               	movf	_LED^(0+128),w
 13907  1777  0086               	movwf	6
 13908  1778  3001               	movlw	1	; select bank2/3
 13909  1779  0087               	movwf	7
 13910  177A  1081               	bcf	1,1
 13911                           
 13912                           ;LED_B1.c: 156: LED->Time = 0;
 13913  177B  0A47               	incf	_LED^(0+128),w
 13914  177C  0086               	movwf	6
 13915  177D  3001               	movlw	1	; select bank2/3
 13916  177E  0087               	movwf	7
 13917  177F  3000               	movlw	0
 13918  1780  3FC0               	movwi [0]fsr1
 13919  1781  3FC1               	movwi [1]fsr1
 13920                           
 13921                           ;LED_B1.c: 158: if (led == 1) {
 13922  1782  0875               	movf	setLED@led,w
 13923  1783  3A01               	xorlw	1
 13924  1784  1D03               	skipz
 13925  1785  2F89               	goto	l7116
 13926                           
 13927                           ;LED_B1.c: 162: RA3 = 1;
 13928  1786  0020               	movlb	0	; select bank0
 13929  1787  158C               	bsf	12,3	;volatile
 13930                           
 13931                           ;LED_B1.c: 164: }
 13932  1788  2F8F               	goto	l7120
 13933  1789                     l7116:	
 13934                           
 13935                           ;LED_B1.c: 167: else if (led == 2) {
 13936  1789  0875               	movf	setLED@led,w
 13937  178A  3A02               	xorlw	2
 13938  178B  1D03               	skipz
 13939  178C  2F8F               	goto	l7120
 13940                           
 13941                           ;LED_B1.c: 171: RC7 = 1;
 13942  178D  0020               	movlb	0	; select bank0
 13943  178E  178E               	bsf	14,7	;volatile
 13944  178F                     l7120:	
 13945                           
 13946                           ;LED_B1.c: 173: }
 13947                           ;LED_B1.c: 185: if (led == 99) {
 13948  178F  0875               	movf	setLED@led,w
 13949  1790  3A63               	xorlw	99
 13950  1791  1D03               	skipz
 13951  1792  2F95               	goto	l7124
 13952                           
 13953                           ;LED_B1.c: 189: RB5 = 1;
 13954  1793  0020               	movlb	0	; select bank0
 13955  1794  168D               	bsf	13,5	;volatile
 13956  1795                     l7124:	
 13957                           
 13958                           ;LED_B1.c: 191: }
 13959                           ;LED_B1.c: 193: }
 13960                           ;LED_B1.c: 194: if (command == 11) {
 13961  1795  0874               	movf	setLED@command,w
 13962  1796  3A0B               	xorlw	11
 13963  1797  1D03               	skipz
 13964  1798  0008               	return
 13965                           
 13966                           ;LED_B1.c: 195: LED->GO = 1;
 13967  1799  0021               	movlb	1	; select bank1
 13968  179A  0847               	movf	_LED^(0+128),w
 13969  179B  0086               	movwf	6
 13970  179C  3001               	movlw	1	; select bank2/3
 13971  179D  0087               	movwf	7
 13972  179E  1481               	bsf	1,1
 13973  179F  0008               	return
 13974  17A0                     __end_of_setLED:	
 13975                           
 13976                           	psect	text90
 13977  1EE4                     __ptext90:	
 13978 ;; *************** function _LedPointSelect *****************
 13979 ;; Defined at:
 13980 ;;		line 7 in file "../src/LED_B1.c"
 13981 ;; Parameters:    Size  Location     Type
 13982 ;;  led             1    wreg     unsigned char 
 13983 ;; Auto vars:     Size  Location     Type
 13984 ;;  led             1    3[COMMON] unsigned char 
 13985 ;; Return value:  Size  Location     Type
 13986 ;;		None               void
 13987 ;; Registers used:
 13988 ;;		wreg
 13989 ;; Tracked objects:
 13990 ;;		On entry : 0/0
 13991 ;;		On exit  : 0/0
 13992 ;;		Unchanged: 0/0
 13993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13995 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13996 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13997 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13998 ;;Total ram usage:        2 bytes
 13999 ;; Hardware stack levels used:    1
 14000 ;; Hardware stack levels required when called:    3
 14001 ;; This function calls:
 14002 ;;		Nothing
 14003 ;; This function is called by:
 14004 ;;		_setLED_Initialization
 14005 ;;		_setLED
 14006 ;;		_setLED_Main
 14007 ;; This function uses a non-reentrant model
 14008 ;;
 14009                           
 14010                           
 14011                           ;psect for function _LedPointSelect
 14012  1EE4                     _LedPointSelect:	
 14013                           
 14014                           ;incstack = 0
 14015                           ; Regs used in _LedPointSelect: [wreg]
 14016                           ;LedPointSelect@led stored from wreg
 14017  1EE4  00F3               	movwf	LedPointSelect@led
 14018                           
 14019                           ;LED_B1.c: 9: if (led == 1) {
 14020  1EE5  0873               	movf	LedPointSelect@led,w
 14021  1EE6  3A01               	xorlw	1
 14022  1EE7  1D03               	skipz
 14023  1EE8  2EEE               	goto	l1134
 14024                           
 14025                           ;LED_B1.c: 10: LED = &VarLED1;
 14026  1EE9  30DE               	movlw	_VarLED1& (0+255)
 14027  1EEA  00F2               	movwf	??_LedPointSelect
 14028  1EEB  0872               	movf	??_LedPointSelect,w
 14029  1EEC  0021               	movlb	1	; select bank1
 14030  1EED  00C7               	movwf	_LED^(0+128)
 14031  1EEE                     l1134:	
 14032                           
 14033                           ;LED_B1.c: 11: }
 14034                           ;LED_B1.c: 14: if (led == 2) {
 14035  1EEE  0873               	movf	LedPointSelect@led,w
 14036  1EEF  3A02               	xorlw	2
 14037  1EF0  1D03               	skipz
 14038  1EF1  2EF7               	goto	l1135
 14039                           
 14040                           ;LED_B1.c: 15: LED = &VarLED2;
 14041  1EF2  30E2               	movlw	_VarLED2& (0+255)
 14042  1EF3  00F2               	movwf	??_LedPointSelect
 14043  1EF4  0872               	movf	??_LedPointSelect,w
 14044  1EF5  0021               	movlb	1	; select bank1
 14045  1EF6  00C7               	movwf	_LED^(0+128)
 14046  1EF7                     l1135:	
 14047                           
 14048                           ;LED_B1.c: 16: }
 14049                           ;LED_B1.c: 24: if (led == 99) {
 14050  1EF7  0873               	movf	LedPointSelect@led,w
 14051  1EF8  3A63               	xorlw	99
 14052  1EF9  1D03               	skipz
 14053  1EFA  0008               	return
 14054                           
 14055                           ;LED_B1.c: 25: LED = &VarErrLED;
 14056  1EFB  30DA               	movlw	_VarErrLED& (0+255)
 14057  1EFC  00F2               	movwf	??_LedPointSelect
 14058  1EFD  0872               	movf	??_LedPointSelect,w
 14059  1EFE  0021               	movlb	1	; select bank1
 14060  1EFF  00C7               	movwf	_LED^(0+128)
 14061  1F00  0008               	return
 14062  1F01                     __end_of_LedPointSelect:	
 14063                           
 14064                           	psect	text91
 14065  114F                     __ptext91:	
 14066 ;; *************** function _setDimmerIntr_Dimming_RF *****************
 14067 ;; Defined at:
 14068 ;;		line 180 in file "../src/Dimmer_B1.c"
 14069 ;; Parameters:    Size  Location     Type
 14070 ;;  lights          1    wreg     unsigned char 
 14071 ;;  command         1    2[COMMON] unsigned char 
 14072 ;; Auto vars:     Size  Location     Type
 14073 ;;  lights          1    4[COMMON] unsigned char 
 14074 ;; Return value:  Size  Location     Type
 14075 ;;		None               void
 14076 ;; Registers used:
 14077 ;;		wreg, status,2, status,0
 14078 ;; Tracked objects:
 14079 ;;		On entry : 0/0
 14080 ;;		On exit  : 0/0
 14081 ;;		Unchanged: 0/0
 14082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14083 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14084 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14085 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14086 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14087 ;;Total ram usage:        3 bytes
 14088 ;; Hardware stack levels used:    1
 14089 ;; Hardware stack levels required when called:    3
 14090 ;; This function calls:
 14091 ;;		Nothing
 14092 ;; This function is called by:
 14093 ;;		_setDimmerLights_OnOff
 14094 ;;		_setRFSW_AdjControl
 14095 ;; This function uses a non-reentrant model
 14096 ;;
 14097                           
 14098                           
 14099                           ;psect for function _setDimmerIntr_Dimming_RF
 14100  114F                     _setDimmerIntr_Dimming_RF:	
 14101                           
 14102                           ;incstack = 0
 14103                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
 14104                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
 14105  114F  00F4               	movwf	setDimmerIntr_Dimming_RF@lights
 14106                           
 14107                           ;Dimmer_B1.c: 182: if (lights == 1) {
 14108  1150  0874               	movf	setDimmerIntr_Dimming_RF@lights,w
 14109  1151  3A01               	xorlw	1
 14110  1152  1D03               	skipz
 14111  1153  2964               	goto	l6692
 14112                           
 14113                           ;Dimmer_B1.c: 183: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
 14114  1154  0872               	movf	setDimmerIntr_Dimming_RF@command,w
 14115  1155  3A01               	xorlw	1
 14116  1156  3000               	movlw	0
 14117  1157  1903               	skipnz
 14118  1158  3001               	movlw	1
 14119  1159  00F3               	movwf	??_setDimmerIntr_Dimming_RF
 14120  115A  0EF3               	swapf	??_setDimmerIntr_Dimming_RF,f
 14121  115B  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 14122  115C  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 14123  115D  0021               	movlb	1	; select bank1
 14124  115E  0862               	movf	_DimmerIntr1^(0+128),w
 14125  115F  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14126  1160  39BF               	andlw	-65
 14127  1161  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14128  1162  00E2               	movwf	_DimmerIntr1^(0+128)
 14129                           
 14130                           ;Dimmer_B1.c: 184: }
 14131  1163  0008               	return
 14132  1164                     l6692:	
 14133                           
 14134                           ;Dimmer_B1.c: 187: else if (lights == 2) {
 14135  1164  0874               	movf	setDimmerIntr_Dimming_RF@lights,w
 14136  1165  3A02               	xorlw	2
 14137  1166  1D03               	skipz
 14138  1167  0008               	return
 14139                           
 14140                           ;Dimmer_B1.c: 188: DimmerIntr2.Dimming_RF = command == 1 ? 1 : 0;
 14141  1168  0872               	movf	setDimmerIntr_Dimming_RF@command,w
 14142  1169  3A01               	xorlw	1
 14143  116A  3000               	movlw	0
 14144  116B  1903               	skipnz
 14145  116C  3001               	movlw	1
 14146  116D  00F3               	movwf	??_setDimmerIntr_Dimming_RF
 14147  116E  0EF3               	swapf	??_setDimmerIntr_Dimming_RF,f
 14148  116F  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 14149  1170  0DF3               	rlf	??_setDimmerIntr_Dimming_RF,f
 14150  1171  0021               	movlb	1	; select bank1
 14151  1172  0869               	movf	_DimmerIntr2^(0+128),w
 14152  1173  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14153  1174  39BF               	andlw	-65
 14154  1175  0673               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14155  1176  00E9               	movwf	_DimmerIntr2^(0+128)
 14156  1177  0008               	return
 14157  1178                     __end_of_setDimmerIntr_Dimming_RF:	
 14158                           
 14159                           	psect	text92
 14160  1D91                     __ptext92:	
 14161 ;; *************** function _setDimmerIntr_DimmingValue *****************
 14162 ;; Defined at:
 14163 ;;		line 48 in file "../src/Dimmer_B1.c"
 14164 ;; Parameters:    Size  Location     Type
 14165 ;;  lights          1    wreg     unsigned char 
 14166 ;;  value           1    2[COMMON] unsigned char 
 14167 ;; Auto vars:     Size  Location     Type
 14168 ;;  lights          1    4[COMMON] unsigned char 
 14169 ;; Return value:  Size  Location     Type
 14170 ;;		None               void
 14171 ;; Registers used:
 14172 ;;		wreg
 14173 ;; Tracked objects:
 14174 ;;		On entry : 0/0
 14175 ;;		On exit  : 0/0
 14176 ;;		Unchanged: 0/0
 14177 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14178 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14179 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14180 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14181 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14182 ;;Total ram usage:        3 bytes
 14183 ;; Hardware stack levels used:    1
 14184 ;; Hardware stack levels required when called:    3
 14185 ;; This function calls:
 14186 ;;		Nothing
 14187 ;; This function is called by:
 14188 ;;		_setDimmerLights_OnOff
 14189 ;; This function uses a non-reentrant model
 14190 ;;
 14191                           
 14192                           
 14193                           ;psect for function _setDimmerIntr_DimmingValue
 14194  1D91                     _setDimmerIntr_DimmingValue:	
 14195                           
 14196                           ;incstack = 0
 14197                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 14198                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 14199  1D91  00F4               	movwf	setDimmerIntr_DimmingValue@lights
 14200                           
 14201                           ;Dimmer_B1.c: 50: if (lights == 1) {
 14202  1D92  0874               	movf	setDimmerIntr_DimmingValue@lights,w
 14203  1D93  3A01               	xorlw	1
 14204  1D94  1D03               	skipz
 14205  1D95  2D9C               	goto	l7024
 14206                           
 14207                           ;Dimmer_B1.c: 51: DimmerIntr1.DimmingValue = value;
 14208  1D96  0872               	movf	setDimmerIntr_DimmingValue@value,w
 14209  1D97  00F3               	movwf	??_setDimmerIntr_DimmingValue
 14210  1D98  0873               	movf	??_setDimmerIntr_DimmingValue,w
 14211  1D99  0021               	movlb	1	; select bank1
 14212  1D9A  00E6               	movwf	(_DimmerIntr1^(0+128)+4)
 14213                           
 14214                           ;Dimmer_B1.c: 52: }
 14215  1D9B  0008               	return
 14216  1D9C                     l7024:	
 14217                           
 14218                           ;Dimmer_B1.c: 55: else if (lights == 2) {
 14219  1D9C  0874               	movf	setDimmerIntr_DimmingValue@lights,w
 14220  1D9D  3A02               	xorlw	2
 14221  1D9E  1D03               	skipz
 14222  1D9F  0008               	return
 14223                           
 14224                           ;Dimmer_B1.c: 56: DimmerIntr2.DimmingValue = value;
 14225  1DA0  0872               	movf	setDimmerIntr_DimmingValue@value,w
 14226  1DA1  00F3               	movwf	??_setDimmerIntr_DimmingValue
 14227  1DA2  0873               	movf	??_setDimmerIntr_DimmingValue,w
 14228  1DA3  0021               	movlb	1	; select bank1
 14229  1DA4  00ED               	movwf	(_DimmerIntr2^(0+128)+4)
 14230  1DA5  0008               	return
 14231  1DA6                     __end_of_setDimmerIntr_DimmingValue:	
 14232                           
 14233                           	psect	text93
 14234  1126                     __ptext93:	
 14235 ;; *************** function _setDimmerIntr_ControlStatus *****************
 14236 ;; Defined at:
 14237 ;;		line 30 in file "../src/Dimmer_B1.c"
 14238 ;; Parameters:    Size  Location     Type
 14239 ;;  lights          1    wreg     unsigned char 
 14240 ;;  command         1    2[COMMON] unsigned char 
 14241 ;; Auto vars:     Size  Location     Type
 14242 ;;  lights          1    4[COMMON] unsigned char 
 14243 ;; Return value:  Size  Location     Type
 14244 ;;		None               void
 14245 ;; Registers used:
 14246 ;;		wreg, status,2, status,0
 14247 ;; Tracked objects:
 14248 ;;		On entry : 0/0
 14249 ;;		On exit  : 0/0
 14250 ;;		Unchanged: 0/0
 14251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14252 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14253 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14254 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14255 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14256 ;;Total ram usage:        3 bytes
 14257 ;; Hardware stack levels used:    1
 14258 ;; Hardware stack levels required when called:    3
 14259 ;; This function calls:
 14260 ;;		Nothing
 14261 ;; This function is called by:
 14262 ;;		_setDimmerLights_OnOff
 14263 ;; This function uses a non-reentrant model
 14264 ;;
 14265                           
 14266                           
 14267                           ;psect for function _setDimmerIntr_ControlStatus
 14268  1126                     _setDimmerIntr_ControlStatus:	
 14269                           
 14270                           ;incstack = 0
 14271                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 14272                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 14273  1126  00F4               	movwf	setDimmerIntr_ControlStatus@lights
 14274                           
 14275                           ;Dimmer_B1.c: 32: if (lights == 1) {
 14276  1127  0874               	movf	setDimmerIntr_ControlStatus@lights,w
 14277  1128  3A01               	xorlw	1
 14278  1129  1D03               	skipz
 14279  112A  293B               	goto	l7016
 14280                           
 14281                           ;Dimmer_B1.c: 33: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 14282  112B  0872               	movf	setDimmerIntr_ControlStatus@command,w
 14283  112C  3A01               	xorlw	1
 14284  112D  3000               	movlw	0
 14285  112E  1903               	skipnz
 14286  112F  3001               	movlw	1
 14287  1130  00F3               	movwf	??_setDimmerIntr_ControlStatus
 14288  1131  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14289  1132  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14290  1133  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14291  1134  0021               	movlb	1	; select bank1
 14292  1135  0862               	movf	_DimmerIntr1^(0+128),w
 14293  1136  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14294  1137  39F7               	andlw	-9
 14295  1138  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14296  1139  00E2               	movwf	_DimmerIntr1^(0+128)
 14297                           
 14298                           ;Dimmer_B1.c: 34: }
 14299  113A  0008               	return
 14300  113B                     l7016:	
 14301                           
 14302                           ;Dimmer_B1.c: 37: else if (lights == 2) {
 14303  113B  0874               	movf	setDimmerIntr_ControlStatus@lights,w
 14304  113C  3A02               	xorlw	2
 14305  113D  1D03               	skipz
 14306  113E  0008               	return
 14307                           
 14308                           ;Dimmer_B1.c: 38: DimmerIntr2.ControlStatus = command == 1 ? 1 : 0;
 14309  113F  0872               	movf	setDimmerIntr_ControlStatus@command,w
 14310  1140  3A01               	xorlw	1
 14311  1141  3000               	movlw	0
 14312  1142  1903               	skipnz
 14313  1143  3001               	movlw	1
 14314  1144  00F3               	movwf	??_setDimmerIntr_ControlStatus
 14315  1145  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14316  1146  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14317  1147  0DF3               	rlf	??_setDimmerIntr_ControlStatus,f
 14318  1148  0021               	movlb	1	; select bank1
 14319  1149  0869               	movf	_DimmerIntr2^(0+128),w
 14320  114A  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14321  114B  39F7               	andlw	-9
 14322  114C  0673               	xorwf	??_setDimmerIntr_ControlStatus,w
 14323  114D  00E9               	movwf	_DimmerIntr2^(0+128)
 14324  114E  0008               	return
 14325  114F                     __end_of_setDimmerIntr_ControlStatus:	
 14326                           
 14327                           	psect	text94
 14328  0C22                     __ptext94:	
 14329 ;; *************** function _setDelayOff_GO *****************
 14330 ;; Defined at:
 14331 ;;		line 87 in file "../src/DelayOff_B1.c"
 14332 ;; Parameters:    Size  Location     Type
 14333 ;;  sw              1    wreg     unsigned char 
 14334 ;;  command         1   62[BANK0 ] unsigned char 
 14335 ;;  value           1   63[BANK0 ] unsigned char 
 14336 ;; Auto vars:     Size  Location     Type
 14337 ;;  sw              1   69[BANK0 ] unsigned char 
 14338 ;;  k               1   68[BANK0 ] unsigned char 
 14339 ;;  j               1   67[BANK0 ] unsigned char 
 14340 ;;  i               1   66[BANK0 ] unsigned char 
 14341 ;; Return value:  Size  Location     Type
 14342 ;;		None               void
 14343 ;; Registers used:
 14344 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14345 ;; Tracked objects:
 14346 ;;		On entry : 0/0
 14347 ;;		On exit  : 0/0
 14348 ;;		Unchanged: 0/0
 14349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14350 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14351 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14352 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14353 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14354 ;;Total ram usage:        8 bytes
 14355 ;; Hardware stack levels used:    1
 14356 ;; Hardware stack levels required when called:    4
 14357 ;; This function calls:
 14358 ;;		_DelayOffPointSelect
 14359 ;;		___bmul
 14360 ;;		_setProductData
 14361 ;; This function is called by:
 14362 ;;		_setDimmerLights_OnOff
 14363 ;;		_setRFSW_Control
 14364 ;; This function uses a non-reentrant model
 14365 ;;
 14366                           
 14367                           
 14368                           ;psect for function _setDelayOff_GO
 14369  0C22                     _setDelayOff_GO:	
 14370                           
 14371                           ;incstack = 0
 14372                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14373                           ;setDelayOff_GO@sw stored from wreg
 14374  0C22  0020               	movlb	0	; select bank0
 14375  0C23  00E5               	movwf	setDelayOff_GO@sw
 14376                           
 14377                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 14378  0C24  0865               	movf	setDelayOff_GO@sw,w
 14379  0C25  319D  2552  318C   	fcall	_DelayOffPointSelect
 14380                           
 14381                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 14382  0C28  0020               	movlb	0	; select bank0
 14383  0C29  085E               	movf	setDelayOff_GO@command,w
 14384  0C2A  3A01               	xorlw	1
 14385  0C2B  3000               	movlw	0
 14386  0C2C  1903               	skipnz
 14387  0C2D  3001               	movlw	1
 14388  0C2E  00E0               	movwf	??_setDelayOff_GO
 14389  0C2F  0021               	movlb	1	; select bank1
 14390  0C30  0844               	movf	_DelayOff^(0+128),w
 14391  0C31  0086               	movwf	6
 14392  0C32  3001               	movlw	1	; select bank2/3
 14393  0C33  0087               	movwf	7
 14394  0C34  0020               	movlb	0	; select bank0
 14395  0C35  0DE0               	rlf	??_setDelayOff_GO,f
 14396  0C36  0801               	movf	1,w
 14397  0C37  0660               	xorwf	??_setDelayOff_GO,w
 14398  0C38  39FD               	andlw	-3
 14399  0C39  0660               	xorwf	??_setDelayOff_GO,w
 14400  0C3A  0081               	movwf	1
 14401                           
 14402                           ;DelayOff_B1.c: 91: DelayOff->SecondTime = 0;
 14403  0C3B  0021               	movlb	1	; select bank1
 14404  0C3C  0844               	movf	_DelayOff^(0+128),w
 14405  0C3D  3E02               	addlw	2
 14406  0C3E  0086               	movwf	6
 14407  0C3F  3001               	movlw	1	; select bank2/3
 14408  0C40  0087               	movwf	7
 14409  0C41  3000               	movlw	0
 14410  0C42  3FC0               	movwi [0]fsr1
 14411  0C43  3FC1               	movwi [1]fsr1
 14412                           
 14413                           ;DelayOff_B1.c: 92: DelayOff->MinuteTime = 0;
 14414  0C44  0844               	movf	_DelayOff^(0+128),w
 14415  0C45  3E04               	addlw	4
 14416  0C46  0086               	movwf	6
 14417  0C47  3001               	movlw	1	; select bank2/3
 14418  0C48  0087               	movwf	7
 14419  0C49  0181               	clrf	1
 14420                           
 14421                           ;DelayOff_B1.c: 94: if (command == 1) {
 14422  0C4A  0020               	movlb	0	; select bank0
 14423  0C4B  085E               	movf	setDelayOff_GO@command,w
 14424  0C4C  3A01               	xorlw	1
 14425  0C4D  1D03               	skipz
 14426  0C4E  2CA4               	goto	l6676
 14427                           
 14428                           ;DelayOff_B1.c: 96: char i = 5, j = 0, k = 0;
 14429  0C4F  3005               	movlw	5
 14430  0C50  00E0               	movwf	??_setDelayOff_GO
 14431  0C51  0860               	movf	??_setDelayOff_GO,w
 14432  0C52  00E2               	movwf	setDelayOff_GO@i
 14433  0C53  01E3               	clrf	setDelayOff_GO@j
 14434  0C54  01E4               	clrf	setDelayOff_GO@k
 14435                           
 14436                           ;DelayOff_B1.c: 97: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x30) {
 14437  0C55  300F               	movlw	15
 14438  0C56  055F               	andwf	setDelayOff_GO@value,w
 14439  0C57  00E0               	movwf	??_setDelayOff_GO
 14440  0C58  0860               	movf	??_setDelayOff_GO,w
 14441  0C59  3A05               	xorlw	5
 14442  0C5A  1903               	skipnz
 14443  0C5B  2C60               	goto	l6662
 14444  0C5C  085F               	movf	setDelayOff_GO@value,w
 14445  0C5D  390F               	andlw	15
 14446  0C5E  1D03               	btfss	3,2
 14447  0C5F  2C90               	goto	l6672
 14448  0C60                     l6662:	
 14449  0C60  3031               	movlw	49
 14450  0C61  025F               	subwf	setDelayOff_GO@value,w
 14451  0C62  1803               	skipnc
 14452  0C63  2C90               	goto	l6672
 14453                           
 14454                           ;DelayOff_B1.c: 98: j = value & 0x0f;
 14455  0C64  085F               	movf	setDelayOff_GO@value,w
 14456  0C65  390F               	andlw	15
 14457  0C66  00E0               	movwf	??_setDelayOff_GO
 14458  0C67  0860               	movf	??_setDelayOff_GO,w
 14459  0C68  00E3               	movwf	setDelayOff_GO@j
 14460                           
 14461                           ;DelayOff_B1.c: 99: k = (value >> 4) & 0x0f;
 14462  0C69  085F               	movf	setDelayOff_GO@value,w
 14463  0C6A  00E0               	movwf	??_setDelayOff_GO
 14464  0C6B  3004               	movlw	4
 14465  0C6C                     u6075:	
 14466  0C6C  36E0               	lsrf	??_setDelayOff_GO,f
 14467  0C6D  0B89               	decfsz	9,f
 14468  0C6E  2C6C               	goto	u6075
 14469  0C6F  0860               	movf	??_setDelayOff_GO,w
 14470  0C70  390F               	andlw	15
 14471  0C71  00E1               	movwf	??_setDelayOff_GO+1
 14472  0C72  0861               	movf	??_setDelayOff_GO+1,w
 14473  0C73  00E4               	movwf	setDelayOff_GO@k
 14474                           
 14475                           ;DelayOff_B1.c: 100: DelayOff->Value = j + (k * 10);
 14476  0C74  300A               	movlw	10
 14477  0C75  00E0               	movwf	??_setDelayOff_GO
 14478  0C76  0860               	movf	??_setDelayOff_GO,w
 14479  0C77  00F2               	movwf	___bmul@multiplicand
 14480  0C78  0864               	movf	setDelayOff_GO@k,w
 14481  0C79  319C  24C0  318C   	fcall	___bmul
 14482  0C7C  0020               	movlb	0	; select bank0
 14483  0C7D  0763               	addwf	setDelayOff_GO@j,w
 14484  0C7E  00E1               	movwf	??_setDelayOff_GO+1
 14485  0C7F  0021               	movlb	1	; select bank1
 14486  0C80  0A44               	incf	_DelayOff^(0+128),w
 14487  0C81  0086               	movwf	6
 14488  0C82  3001               	movlw	1	; select bank2/3
 14489  0C83  0087               	movwf	7
 14490  0C84  0020               	movlb	0	; select bank0
 14491  0C85  0861               	movf	??_setDelayOff_GO+1,w
 14492  0C86  0081               	movwf	1
 14493                           
 14494                           ;DelayOff_B1.c: 102: setProductData(26 + sw, value);
 14495  0C87  085F               	movf	setDelayOff_GO@value,w
 14496  0C88  00E0               	movwf	??_setDelayOff_GO
 14497  0C89  0860               	movf	??_setDelayOff_GO,w
 14498  0C8A  00DA               	movwf	setProductData@value
 14499  0C8B  0865               	movf	setDelayOff_GO@sw,w
 14500  0C8C  3E1A               	addlw	26
 14501  0C8D  319B  23D8         	fcall	_setProductData
 14502                           
 14503                           ;DelayOff_B1.c: 103: } else {
 14504  0C8F  0008               	return
 14505  0C90                     l6672:	
 14506                           
 14507                           ;DelayOff_B1.c: 104: DelayOff->Value = 0x05;
 14508  0C90  3005               	movlw	5
 14509  0C91  0020               	movlb	0	; select bank0
 14510  0C92  00E0               	movwf	??_setDelayOff_GO
 14511  0C93  0021               	movlb	1	; select bank1
 14512  0C94  0A44               	incf	_DelayOff^(0+128),w
 14513  0C95  0086               	movwf	6
 14514  0C96  3001               	movlw	1	; select bank2/3
 14515  0C97  0087               	movwf	7
 14516  0C98  0020               	movlb	0	; select bank0
 14517  0C99  0860               	movf	??_setDelayOff_GO,w
 14518  0C9A  0081               	movwf	1
 14519                           
 14520                           ;DelayOff_B1.c: 105: setProductData(26 + sw, 0x05);
 14521  0C9B  3005               	movlw	5
 14522  0C9C  00E0               	movwf	??_setDelayOff_GO
 14523  0C9D  0860               	movf	??_setDelayOff_GO,w
 14524  0C9E  00DA               	movwf	setProductData@value
 14525  0C9F  0865               	movf	setDelayOff_GO@sw,w
 14526  0CA0  3E1A               	addlw	26
 14527  0CA1  319B  23D8         	fcall	_setProductData
 14528                           
 14529                           ;DelayOff_B1.c: 106: }
 14530                           ;DelayOff_B1.c: 108: } else if (command == 0) {
 14531  0CA3  0008               	return
 14532  0CA4                     l6676:	
 14533  0CA4  0020               	movlb	0	; select bank0
 14534  0CA5  08DE               	movf	setDelayOff_GO@command,f
 14535  0CA6  1D03               	skipz
 14536  0CA7  0008               	return
 14537                           
 14538                           ;DelayOff_B1.c: 109: setProductData(26 + sw, 0);
 14539  0CA8  01DA               	clrf	setProductData@value
 14540  0CA9  0865               	movf	setDelayOff_GO@sw,w
 14541  0CAA  3E1A               	addlw	26
 14542  0CAB  319B  23D8         	fcall	_setProductData
 14543  0CAD  0008               	return
 14544  0CAE                     __end_of_setDelayOff_GO:	
 14545                           
 14546                           	psect	text95
 14547  1CC0                     __ptext95:	
 14548 ;; *************** function ___bmul *****************
 14549 ;; Defined at:
 14550 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 14551 ;; Parameters:    Size  Location     Type
 14552 ;;  multiplier      1    wreg     unsigned char 
 14553 ;;  multiplicand    1    2[COMMON] unsigned char 
 14554 ;; Auto vars:     Size  Location     Type
 14555 ;;  multiplier      1    5[COMMON] unsigned char 
 14556 ;;  product         1    4[COMMON] unsigned char 
 14557 ;; Return value:  Size  Location     Type
 14558 ;;                  1    wreg      unsigned char 
 14559 ;; Registers used:
 14560 ;;		wreg, status,2, status,0
 14561 ;; Tracked objects:
 14562 ;;		On entry : 0/0
 14563 ;;		On exit  : 0/0
 14564 ;;		Unchanged: 0/0
 14565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14566 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14567 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14568 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14569 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14570 ;;Total ram usage:        4 bytes
 14571 ;; Hardware stack levels used:    1
 14572 ;; Hardware stack levels required when called:    3
 14573 ;; This function calls:
 14574 ;;		Nothing
 14575 ;; This function is called by:
 14576 ;;		_setDelayOff_GO
 14577 ;;		_DelayTimejudge
 14578 ;; This function uses a non-reentrant model
 14579 ;;
 14580                           
 14581                           
 14582                           ;psect for function ___bmul
 14583  1CC0                     ___bmul:	
 14584                           
 14585                           ;incstack = 0
 14586                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 14587                           ;___bmul@multiplier stored from wreg
 14588  1CC0  00F5               	movwf	___bmul@multiplier
 14589  1CC1  01F4               	clrf	___bmul@product
 14590  1CC2                     l6318:	
 14591  1CC2  1C75               	btfss	___bmul@multiplier,0
 14592  1CC3  2CC8               	goto	l6322
 14593  1CC4  0872               	movf	___bmul@multiplicand,w
 14594  1CC5  00F3               	movwf	??___bmul
 14595  1CC6  0873               	movf	??___bmul,w
 14596  1CC7  07F4               	addwf	___bmul@product,f
 14597  1CC8                     l6322:	
 14598  1CC8  1003               	clrc
 14599  1CC9  0DF2               	rlf	___bmul@multiplicand,f
 14600  1CCA  1003               	clrc
 14601  1CCB  0CF5               	rrf	___bmul@multiplier,f
 14602  1CCC  08F5               	movf	___bmul@multiplier,f
 14603  1CCD  1D03               	skipz
 14604  1CCE  2CC2               	goto	l6318
 14605  1CCF  0874               	movf	___bmul@product,w
 14606  1CD0  0008               	return
 14607  1CD1                     __end_of___bmul:	
 14608                           
 14609                           	psect	text96
 14610  1D7C                     __ptext96:	
 14611 ;; *************** function _setCmd_Status *****************
 14612 ;; Defined at:
 14613 ;;		line 597 in file "../src/main_B1.c"
 14614 ;; Parameters:    Size  Location     Type
 14615 ;;  number          1    wreg     unsigned char 
 14616 ;;  cmd             1    2[COMMON] unsigned char 
 14617 ;; Auto vars:     Size  Location     Type
 14618 ;;  number          1    4[COMMON] unsigned char 
 14619 ;; Return value:  Size  Location     Type
 14620 ;;		None               void
 14621 ;; Registers used:
 14622 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14623 ;; Tracked objects:
 14624 ;;		On entry : 0/0
 14625 ;;		On exit  : 0/0
 14626 ;;		Unchanged: 0/0
 14627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14628 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14629 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14630 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14631 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14632 ;;Total ram usage:        3 bytes
 14633 ;; Hardware stack levels used:    1
 14634 ;; Hardware stack levels required when called:    3
 14635 ;; This function calls:
 14636 ;;		Nothing
 14637 ;; This function is called by:
 14638 ;;		_setDimmerLights_OnOff
 14639 ;;		_setControl_Lights_Table
 14640 ;; This function uses a non-reentrant model
 14641 ;;
 14642                           
 14643                           
 14644                           ;psect for function _setCmd_Status
 14645  1D7C                     _setCmd_Status:	
 14646                           
 14647                           ;incstack = 0
 14648                           ; Regs used in _setCmd_Status: [wreg-fsr0h+status,2+status,0]
 14649                           ;setCmd_Status@number stored from wreg
 14650  1D7C  00F4               	movwf	setCmd_Status@number
 14651                           
 14652                           ;main_B1.c: 598: switch (number) {
 14653  1D7D  2D8B               	goto	l6856
 14654  1D7E                     l6852:	
 14655                           ;main_B1.c: 599: case 1:
 14656                           
 14657                           
 14658                           ;main_B1.c: 600: Cmd.all_off = cmd == 1 ? 1 : 0;
 14659  1D7E  0872               	movf	setCmd_Status@cmd,w
 14660  1D7F  3A01               	xorlw	1
 14661  1D80  3000               	movlw	0
 14662  1D81  1903               	skipnz
 14663  1D82  3001               	movlw	1
 14664  1D83  00F3               	movwf	??_setCmd_Status
 14665  1D84  0021               	movlb	1	; select bank1
 14666  1D85  0843               	movf	_Cmd^(0+128),w
 14667  1D86  0673               	xorwf	??_setCmd_Status,w
 14668  1D87  39FE               	andlw	-2
 14669  1D88  0673               	xorwf	??_setCmd_Status,w
 14670  1D89  00C3               	movwf	_Cmd^(0+128)
 14671                           
 14672                           ;main_B1.c: 602: }
 14673                           
 14674                           ;main_B1.c: 601: break;
 14675  1D8A  0008               	return
 14676  1D8B                     l6856:	
 14677  1D8B  0874               	movf	setCmd_Status@number,w
 14678                           
 14679                           ; Switch size 1, requested type "space"
 14680                           ; Number of cases is 1, Range of values is 1 to 1
 14681                           ; switch strategies available:
 14682                           ; Name         Instructions Cycles
 14683                           ; simple_byte            4     3 (average)
 14684                           ; direct_byte           11     9 (fixed)
 14685                           ; jumptable            263     9 (fixed)
 14686                           ;	Chosen strategy is simple_byte
 14687  1D8C  3A01               	xorlw	1	; case 1
 14688  1D8D  1903               	skipnz
 14689  1D8E  2D7E               	goto	l6852
 14690  1D8F  2D90               	goto	l2889
 14691  1D90                     l2889:	
 14692  1D90  0008               	return
 14693  1D91                     __end_of_setCmd_Status:	
 14694                           
 14695                           	psect	text97
 14696  1C04                     __ptext97:	
 14697 ;; *************** function _getMain_All_LightsStatus *****************
 14698 ;; Defined at:
 14699 ;;		line 374 in file "../src/main_B1.c"
 14700 ;; Parameters:    Size  Location     Type
 14701 ;;		None
 14702 ;; Auto vars:     Size  Location     Type
 14703 ;;  status          1    2[COMMON] unsigned char 
 14704 ;; Return value:  Size  Location     Type
 14705 ;;                  1    wreg      unsigned char 
 14706 ;; Registers used:
 14707 ;;		wreg, status,2, status,0
 14708 ;; Tracked objects:
 14709 ;;		On entry : 0/0
 14710 ;;		On exit  : 0/0
 14711 ;;		Unchanged: 0/0
 14712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14714 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14716 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14717 ;;Total ram usage:        1 bytes
 14718 ;; Hardware stack levels used:    1
 14719 ;; Hardware stack levels required when called:    3
 14720 ;; This function calls:
 14721 ;;		Nothing
 14722 ;; This function is called by:
 14723 ;;		_DimmerLights_Main
 14724 ;;		_setDimmerLights_Main
 14725 ;;		_setDimmerLights_OnOff
 14726 ;;		_Flash_Memory_Main
 14727 ;;		_Load_Main
 14728 ;;		_setControl_Lights_Table
 14729 ;;		_Exception_Main
 14730 ;; This function uses a non-reentrant model
 14731 ;;
 14732                           
 14733                           
 14734                           ;psect for function _getMain_All_LightsStatus
 14735  1C04                     _getMain_All_LightsStatus:	
 14736                           
 14737                           ;main_B1.c: 375: char status = 0;
 14738                           
 14739                           ;incstack = 0
 14740                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2+status,0]
 14741  1C04  01F2               	clrf	getMain_All_LightsStatus@status
 14742                           
 14743                           ;main_B1.c: 394: status = DimmerLights1.Status == 1 ? 1 : 0;
 14744  1C05  3000               	movlw	0
 14745  1C06  0022               	movlb	2	; select bank2
 14746  1C07  185F               	btfsc	(_DimmerLights1^(0+256)+1),0
 14747  1C08  3001               	movlw	1
 14748  1C09  00F2               	movwf	getMain_All_LightsStatus@status
 14749                           
 14750                           ;main_B1.c: 395: if (status == 0) {
 14751  1C0A  08F2               	movf	getMain_All_LightsStatus@status,f
 14752  1C0B  1D03               	skipz
 14753  1C0C  2C11               	goto	l6846
 14754                           
 14755                           ;main_B1.c: 396: status = DimmerLights2.Status == 1 ? 1 : 0;
 14756  1C0D  3000               	movlw	0
 14757  1C0E  1867               	btfsc	(_DimmerLights2^(0+256)+1),0
 14758  1C0F  3001               	movlw	1
 14759  1C10  00F2               	movwf	getMain_All_LightsStatus@status
 14760  1C11                     l6846:	
 14761                           
 14762                           ;main_B1.c: 397: }
 14763                           ;main_B1.c: 421: return status;
 14764  1C11  0872               	movf	getMain_All_LightsStatus@status,w
 14765  1C12  0008               	return
 14766  1C13                     __end_of_getMain_All_LightsStatus:	
 14767                           
 14768                           	psect	text98
 14769  0908                     __ptext98:	
 14770 ;; *************** function _getDimmerLights_PercentToValue *****************
 14771 ;; Defined at:
 14772 ;;		line 1026 in file "../src/Dimmer_B1.c"
 14773 ;; Parameters:    Size  Location     Type
 14774 ;;  value           1    wreg     unsigned char 
 14775 ;; Auto vars:     Size  Location     Type
 14776 ;;  value           1   54[BANK0 ] unsigned char 
 14777 ;;  i               3   55[BANK0 ] float 
 14778 ;; Return value:  Size  Location     Type
 14779 ;;                  1    wreg      unsigned char 
 14780 ;; Registers used:
 14781 ;;		wreg, status,2, status,0, pclath, cstack
 14782 ;; Tracked objects:
 14783 ;;		On entry : 0/0
 14784 ;;		On exit  : 0/0
 14785 ;;		Unchanged: 0/0
 14786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14788 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14789 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14790 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14791 ;;Total ram usage:        6 bytes
 14792 ;; Hardware stack levels used:    1
 14793 ;; Hardware stack levels required when called:    5
 14794 ;; This function calls:
 14795 ;;		___awtoft
 14796 ;;		___ftadd
 14797 ;;		___ftdiv
 14798 ;;		___ftmul
 14799 ;;		___ftneg
 14800 ;;		___fttol
 14801 ;; This function is called by:
 14802 ;;		_setDimmerLights_OnOff
 14803 ;;		_setRFSW_AdjControl
 14804 ;; This function uses a non-reentrant model
 14805 ;;
 14806                           
 14807                           
 14808                           ;psect for function _getDimmerLights_PercentToValue
 14809  0908                     _getDimmerLights_PercentToValue:	
 14810                           
 14811                           ;incstack = 0
 14812                           ; Regs used in _getDimmerLights_PercentToValue: [wreg+status,2+status,0+pclath+cstack]
 14813                           ;getDimmerLights_PercentToValue@value stored from wreg
 14814  0908  0020               	movlb	0	; select bank0
 14815  0909  00D6               	movwf	getDimmerLights_PercentToValue@value
 14816                           
 14817                           ;Dimmer_B1.c: 1034: float i = ((char)(65*0.8)) - ((char)(20*0.8));
 14818  090A  3000               	movlw	0
 14819  090B  00D7               	movwf	getDimmerLights_PercentToValue@i
 14820  090C  3010               	movlw	16
 14821  090D  00D8               	movwf	getDimmerLights_PercentToValue@i+1
 14822  090E  3042               	movlw	66
 14823  090F  00D9               	movwf	getDimmerLights_PercentToValue@i+2
 14824                           
 14825                           ;Dimmer_B1.c: 1035: i /= 100;
 14826  0910  3000               	movlw	0
 14827  0911  00A6               	movwf	___ftdiv@f2
 14828  0912  30C8               	movlw	200
 14829  0913  00A7               	movwf	___ftdiv@f2+1
 14830  0914  3042               	movlw	66
 14831  0915  00A8               	movwf	___ftdiv@f2+2
 14832  0916  0857               	movf	getDimmerLights_PercentToValue@i,w
 14833  0917  00A9               	movwf	___ftdiv@f1
 14834  0918  0858               	movf	getDimmerLights_PercentToValue@i+1,w
 14835  0919  00AA               	movwf	___ftdiv@f1+1
 14836  091A  0859               	movf	getDimmerLights_PercentToValue@i+2,w
 14837  091B  00AB               	movwf	___ftdiv@f1+2
 14838  091C  318D  253B  3189   	fcall	___ftdiv
 14839  091F  0020               	movlb	0	; select bank0
 14840  0920  0826               	movf	?___ftdiv,w
 14841  0921  00D7               	movwf	getDimmerLights_PercentToValue@i
 14842  0922  0827               	movf	?___ftdiv+1,w
 14843  0923  00D8               	movwf	getDimmerLights_PercentToValue@i+1
 14844  0924  0828               	movf	?___ftdiv+2,w
 14845  0925  00D9               	movwf	getDimmerLights_PercentToValue@i+2
 14846                           
 14847                           ;Dimmer_B1.c: 1037: return (char) (((char)(65*0.8)) - ((100 - value) * i));
 14848  0926  0856               	movf	getDimmerLights_PercentToValue@value,w
 14849  0927  00D4               	movwf	??_getDimmerLights_PercentToValue
 14850  0928  01D5               	clrf	??_getDimmerLights_PercentToValue+1
 14851  0929  09D4               	comf	??_getDimmerLights_PercentToValue,f
 14852  092A  09D5               	comf	??_getDimmerLights_PercentToValue+1,f
 14853  092B  0AD4               	incf	??_getDimmerLights_PercentToValue,f
 14854  092C  1903               	skipnz
 14855  092D  0AD5               	incf	??_getDimmerLights_PercentToValue+1,f
 14856  092E  0854               	movf	??_getDimmerLights_PercentToValue,w
 14857  092F  3E64               	addlw	100
 14858  0930  00A0               	movwf	___awtoft@c
 14859  0931  3000               	movlw	0
 14860  0932  3D55               	addwfc	??_getDimmerLights_PercentToValue+1,w
 14861  0933  00A1               	movwf	___awtoft@c+1
 14862  0934  319F  27DE  3189   	fcall	___awtoft
 14863  0937  0020               	movlb	0	; select bank0
 14864  0938  0820               	movf	?___awtoft,w
 14865  0939  00A9               	movwf	___ftmul@f2
 14866  093A  0821               	movf	?___awtoft+1,w
 14867  093B  00AA               	movwf	___ftmul@f2+1
 14868  093C  0822               	movf	?___awtoft+2,w
 14869  093D  00AB               	movwf	___ftmul@f2+2
 14870  093E  0857               	movf	getDimmerLights_PercentToValue@i,w
 14871  093F  00A6               	movwf	___ftmul@f1
 14872  0940  0858               	movf	getDimmerLights_PercentToValue@i+1,w
 14873  0941  00A7               	movwf	___ftmul@f1+1
 14874  0942  0859               	movf	getDimmerLights_PercentToValue@i+2,w
 14875  0943  00A8               	movwf	___ftmul@f1+2
 14876  0944  318E  2696  3189   	fcall	___ftmul
 14877  0947  0020               	movlb	0	; select bank0
 14878  0948  0826               	movf	?___ftmul,w
 14879  0949  00B6               	movwf	___ftneg@f1
 14880  094A  0827               	movf	?___ftmul+1,w
 14881  094B  00B7               	movwf	___ftneg@f1+1
 14882  094C  0828               	movf	?___ftmul+2,w
 14883  094D  00B8               	movwf	___ftneg@f1+2
 14884  094E  319B  2322  3189   	fcall	___ftneg
 14885  0951  0020               	movlb	0	; select bank0
 14886  0952  0836               	movf	?___ftneg,w
 14887  0953  00BC               	movwf	___ftadd@f2
 14888  0954  0837               	movf	?___ftneg+1,w
 14889  0955  00BD               	movwf	___ftadd@f2+1
 14890  0956  0838               	movf	?___ftneg+2,w
 14891  0957  00BE               	movwf	___ftadd@f2+2
 14892  0958  3000               	movlw	0
 14893  0959  00B9               	movwf	___ftadd@f1
 14894  095A  3050               	movlw	80
 14895  095B  00BA               	movwf	___ftadd@f1+1
 14896  095C  3042               	movlw	66
 14897  095D  00BB               	movwf	___ftadd@f1+2
 14898  095E  3183  235A  3189   	fcall	___ftadd
 14899  0961  0020               	movlb	0	; select bank0
 14900  0962  0839               	movf	?___ftadd,w
 14901  0963  00C6               	movwf	___fttol@f1
 14902  0964  083A               	movf	?___ftadd+1,w
 14903  0965  00C7               	movwf	___fttol@f1+1
 14904  0966  083B               	movf	?___ftadd+2,w
 14905  0967  00C8               	movwf	___fttol@f1+2
 14906  0968  318B  239B         	fcall	___fttol
 14907  096A  0020               	movlb	0	; select bank0
 14908  096B  0846               	movf	?___fttol,w
 14909  096C  0008               	return
 14910  096D                     __end_of_getDimmerLights_PercentToValue:	
 14911                           
 14912                           	psect	text99
 14913  0E96                     __ptext99:	
 14914 ;; *************** function ___ftmul *****************
 14915 ;; Defined at:
 14916 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 14917 ;; Parameters:    Size  Location     Type
 14918 ;;  f1              3    6[BANK0 ] float 
 14919 ;;  f2              3    9[BANK0 ] float 
 14920 ;; Auto vars:     Size  Location     Type
 14921 ;;  f3_as_produc    3   17[BANK0 ] unsigned um
 14922 ;;  sign            1   21[BANK0 ] unsigned char 
 14923 ;;  cntr            1   20[BANK0 ] unsigned char 
 14924 ;;  exp             1   16[BANK0 ] unsigned char 
 14925 ;; Return value:  Size  Location     Type
 14926 ;;                  3    6[BANK0 ] float 
 14927 ;; Registers used:
 14928 ;;		wreg, status,2, status,0, pclath, cstack
 14929 ;; Tracked objects:
 14930 ;;		On entry : 0/0
 14931 ;;		On exit  : 0/0
 14932 ;;		Unchanged: 0/0
 14933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14934 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14935 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14936 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14937 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14938 ;;Total ram usage:       16 bytes
 14939 ;; Hardware stack levels used:    1
 14940 ;; Hardware stack levels required when called:    4
 14941 ;; This function calls:
 14942 ;;		___ftpack
 14943 ;; This function is called by:
 14944 ;;		_getDimmerLights_PercentToValue
 14945 ;; This function uses a non-reentrant model
 14946 ;;
 14947                           
 14948                           
 14949                           ;psect for function ___ftmul
 14950  0E96                     ___ftmul:	
 14951                           
 14952                           ;incstack = 0
 14953                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 14954  0E96  0020               	movlb	0	; select bank0
 14955  0E97  0826               	movf	___ftmul@f1,w
 14956  0E98  00AC               	movwf	??___ftmul
 14957  0E99  0827               	movf	___ftmul@f1+1,w
 14958  0E9A  00AD               	movwf	??___ftmul+1
 14959  0E9B  0828               	movf	___ftmul@f1+2,w
 14960  0E9C  00AE               	movwf	??___ftmul+2
 14961  0E9D  1003               	clrc
 14962  0E9E  0D2D               	rlf	??___ftmul+1,w
 14963  0E9F  0D2E               	rlf	??___ftmul+2,w
 14964  0EA0  00AF               	movwf	??___ftmul+3
 14965  0EA1  082F               	movf	??___ftmul+3,w
 14966  0EA2  00B0               	movwf	___ftmul@exp
 14967  0EA3  08B0               	movf	___ftmul@exp,f
 14968  0EA4  1D03               	skipz
 14969  0EA5  2EAD               	goto	l6464
 14970  0EA6  3000               	movlw	0
 14971  0EA7  00A6               	movwf	?___ftmul
 14972  0EA8  3000               	movlw	0
 14973  0EA9  00A7               	movwf	?___ftmul+1
 14974  0EAA  3000               	movlw	0
 14975  0EAB  00A8               	movwf	?___ftmul+2
 14976  0EAC  0008               	return
 14977  0EAD                     l6464:	
 14978  0EAD  0829               	movf	___ftmul@f2,w
 14979  0EAE  00AC               	movwf	??___ftmul
 14980  0EAF  082A               	movf	___ftmul@f2+1,w
 14981  0EB0  00AD               	movwf	??___ftmul+1
 14982  0EB1  082B               	movf	___ftmul@f2+2,w
 14983  0EB2  00AE               	movwf	??___ftmul+2
 14984  0EB3  1003               	clrc
 14985  0EB4  0D2D               	rlf	??___ftmul+1,w
 14986  0EB5  0D2E               	rlf	??___ftmul+2,w
 14987  0EB6  00AF               	movwf	??___ftmul+3
 14988  0EB7  082F               	movf	??___ftmul+3,w
 14989  0EB8  00B5               	movwf	___ftmul@sign
 14990  0EB9  08B5               	movf	___ftmul@sign,f
 14991  0EBA  1D03               	skipz
 14992  0EBB  2EC3               	goto	l6470
 14993  0EBC  3000               	movlw	0
 14994  0EBD  00A6               	movwf	?___ftmul
 14995  0EBE  3000               	movlw	0
 14996  0EBF  00A7               	movwf	?___ftmul+1
 14997  0EC0  3000               	movlw	0
 14998  0EC1  00A8               	movwf	?___ftmul+2
 14999  0EC2  0008               	return
 15000  0EC3                     l6470:	
 15001  0EC3  0835               	movf	___ftmul@sign,w
 15002  0EC4  3E7B               	addlw	123
 15003  0EC5  00AC               	movwf	??___ftmul
 15004  0EC6  082C               	movf	??___ftmul,w
 15005  0EC7  07B0               	addwf	___ftmul@exp,f
 15006  0EC8  0826               	movf	___ftmul@f1,w
 15007  0EC9  00AC               	movwf	??___ftmul
 15008  0ECA  0827               	movf	___ftmul@f1+1,w
 15009  0ECB  00AD               	movwf	??___ftmul+1
 15010  0ECC  0828               	movf	___ftmul@f1+2,w
 15011  0ECD  00AE               	movwf	??___ftmul+2
 15012  0ECE  3010               	movlw	16
 15013  0ECF                     u5665:	
 15014  0ECF  36AE               	lsrf	??___ftmul+2,f
 15015  0ED0  0CAD               	rrf	??___ftmul+1,f
 15016  0ED1  0CAC               	rrf	??___ftmul,f
 15017  0ED2  0B89               	decfsz	9,f
 15018  0ED3  2ECF               	goto	u5665
 15019  0ED4  082C               	movf	??___ftmul,w
 15020  0ED5  00AF               	movwf	??___ftmul+3
 15021  0ED6  082F               	movf	??___ftmul+3,w
 15022  0ED7  00B5               	movwf	___ftmul@sign
 15023  0ED8  0829               	movf	___ftmul@f2,w
 15024  0ED9  00AC               	movwf	??___ftmul
 15025  0EDA  082A               	movf	___ftmul@f2+1,w
 15026  0EDB  00AD               	movwf	??___ftmul+1
 15027  0EDC  082B               	movf	___ftmul@f2+2,w
 15028  0EDD  00AE               	movwf	??___ftmul+2
 15029  0EDE  3010               	movlw	16
 15030  0EDF                     u5675:	
 15031  0EDF  36AE               	lsrf	??___ftmul+2,f
 15032  0EE0  0CAD               	rrf	??___ftmul+1,f
 15033  0EE1  0CAC               	rrf	??___ftmul,f
 15034  0EE2  0B89               	decfsz	9,f
 15035  0EE3  2EDF               	goto	u5675
 15036  0EE4  082C               	movf	??___ftmul,w
 15037  0EE5  00AF               	movwf	??___ftmul+3
 15038  0EE6  082F               	movf	??___ftmul+3,w
 15039  0EE7  06B5               	xorwf	___ftmul@sign,f
 15040  0EE8  3080               	movlw	128
 15041  0EE9  00AC               	movwf	??___ftmul
 15042  0EEA  082C               	movf	??___ftmul,w
 15043  0EEB  05B5               	andwf	___ftmul@sign,f
 15044  0EEC  17A7               	bsf	___ftmul@f1+1,7
 15045  0EED  17AA               	bsf	___ftmul@f2+1,7
 15046  0EEE  30FF               	movlw	255
 15047  0EEF  05A9               	andwf	___ftmul@f2,f
 15048  0EF0  30FF               	movlw	255
 15049  0EF1  05AA               	andwf	___ftmul@f2+1,f
 15050  0EF2  3000               	movlw	0
 15051  0EF3  05AB               	andwf	___ftmul@f2+2,f
 15052  0EF4  3000               	movlw	0
 15053  0EF5  00B1               	movwf	___ftmul@f3_as_product
 15054  0EF6  3000               	movlw	0
 15055  0EF7  00B2               	movwf	___ftmul@f3_as_product+1
 15056  0EF8  3000               	movlw	0
 15057  0EF9  00B3               	movwf	___ftmul@f3_as_product+2
 15058  0EFA  3007               	movlw	7
 15059  0EFB  00AC               	movwf	??___ftmul
 15060  0EFC  082C               	movf	??___ftmul,w
 15061  0EFD  00B4               	movwf	___ftmul@cntr
 15062  0EFE                     l6482:	
 15063  0EFE  1C26               	btfss	___ftmul@f1,0
 15064  0EFF  2F06               	goto	l6486
 15065  0F00  0829               	movf	___ftmul@f2,w
 15066  0F01  07B1               	addwf	___ftmul@f3_as_product,f
 15067  0F02  082A               	movf	___ftmul@f2+1,w
 15068  0F03  3DB2               	addwfc	___ftmul@f3_as_product+1,f
 15069  0F04  082B               	movf	___ftmul@f2+2,w
 15070  0F05  3DB3               	addwfc	___ftmul@f3_as_product+2,f
 15071  0F06                     l6486:	
 15072  0F06  3001               	movlw	1
 15073  0F07                     u5695:	
 15074  0F07  36A8               	lsrf	___ftmul@f1+2,f
 15075  0F08  0CA7               	rrf	___ftmul@f1+1,f
 15076  0F09  0CA6               	rrf	___ftmul@f1,f
 15077  0F0A  0B89               	decfsz	9,f
 15078  0F0B  2F07               	goto	u5695
 15079  0F0C  3001               	movlw	1
 15080  0F0D                     u5705:	
 15081  0F0D  35A9               	lslf	___ftmul@f2,f
 15082  0F0E  0DAA               	rlf	___ftmul@f2+1,f
 15083  0F0F  0DAB               	rlf	___ftmul@f2+2,f
 15084  0F10  0B89               	decfsz	9,f
 15085  0F11  2F0D               	goto	u5705
 15086  0F12  3001               	movlw	1
 15087  0F13  02B4               	subwf	___ftmul@cntr,f
 15088  0F14  1D03               	btfss	3,2
 15089  0F15  2EFE               	goto	l6482
 15090  0F16  3009               	movlw	9
 15091  0F17  00AC               	movwf	??___ftmul
 15092  0F18  082C               	movf	??___ftmul,w
 15093  0F19  00B4               	movwf	___ftmul@cntr
 15094  0F1A                     l6494:	
 15095  0F1A  1C26               	btfss	___ftmul@f1,0
 15096  0F1B  2F22               	goto	l6498
 15097  0F1C  0829               	movf	___ftmul@f2,w
 15098  0F1D  07B1               	addwf	___ftmul@f3_as_product,f
 15099  0F1E  082A               	movf	___ftmul@f2+1,w
 15100  0F1F  3DB2               	addwfc	___ftmul@f3_as_product+1,f
 15101  0F20  082B               	movf	___ftmul@f2+2,w
 15102  0F21  3DB3               	addwfc	___ftmul@f3_as_product+2,f
 15103  0F22                     l6498:	
 15104  0F22  3001               	movlw	1
 15105  0F23                     u5735:	
 15106  0F23  36A8               	lsrf	___ftmul@f1+2,f
 15107  0F24  0CA7               	rrf	___ftmul@f1+1,f
 15108  0F25  0CA6               	rrf	___ftmul@f1,f
 15109  0F26  0B89               	decfsz	9,f
 15110  0F27  2F23               	goto	u5735
 15111  0F28  3001               	movlw	1
 15112  0F29                     u5745:	
 15113  0F29  36B3               	lsrf	___ftmul@f3_as_product+2,f
 15114  0F2A  0CB2               	rrf	___ftmul@f3_as_product+1,f
 15115  0F2B  0CB1               	rrf	___ftmul@f3_as_product,f
 15116  0F2C  0B89               	decfsz	9,f
 15117  0F2D  2F29               	goto	u5745
 15118  0F2E  3001               	movlw	1
 15119  0F2F  02B4               	subwf	___ftmul@cntr,f
 15120  0F30  1D03               	btfss	3,2
 15121  0F31  2F1A               	goto	l6494
 15122  0F32  0831               	movf	___ftmul@f3_as_product,w
 15123  0F33  00F2               	movwf	___ftpack@arg
 15124  0F34  0832               	movf	___ftmul@f3_as_product+1,w
 15125  0F35  00F3               	movwf	___ftpack@arg+1
 15126  0F36  0833               	movf	___ftmul@f3_as_product+2,w
 15127  0F37  00F4               	movwf	___ftpack@arg+2
 15128  0F38  0830               	movf	___ftmul@exp,w
 15129  0F39  00AC               	movwf	??___ftmul
 15130  0F3A  082C               	movf	??___ftmul,w
 15131  0F3B  00F5               	movwf	___ftpack@exp
 15132  0F3C  0835               	movf	___ftmul@sign,w
 15133  0F3D  00AD               	movwf	??___ftmul+1
 15134  0F3E  082D               	movf	??___ftmul+1,w
 15135  0F3F  00F6               	movwf	___ftpack@sign
 15136  0F40  3197  27A0         	fcall	___ftpack
 15137  0F42  0872               	movf	?___ftpack,w
 15138  0F43  0020               	movlb	0	; select bank0
 15139  0F44  00A6               	movwf	?___ftmul
 15140  0F45  0873               	movf	?___ftpack+1,w
 15141  0F46  00A7               	movwf	?___ftmul+1
 15142  0F47  0874               	movf	?___ftpack+2,w
 15143  0F48  00A8               	movwf	?___ftmul+2
 15144  0F49  0008               	return
 15145  0F4A                     __end_of___ftmul:	
 15146                           
 15147                           	psect	text100
 15148  1BF5                     __ptext100:	
 15149 ;; *************** function _getDelayOff_GO *****************
 15150 ;; Defined at:
 15151 ;;		line 114 in file "../src/DelayOff_B1.c"
 15152 ;; Parameters:    Size  Location     Type
 15153 ;;  sw              1    wreg     unsigned char 
 15154 ;; Auto vars:     Size  Location     Type
 15155 ;;  sw              1    4[COMMON] unsigned char 
 15156 ;;  go              1    5[COMMON] unsigned char 
 15157 ;; Return value:  Size  Location     Type
 15158 ;;                  1    wreg      unsigned char 
 15159 ;; Registers used:
 15160 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15161 ;; Tracked objects:
 15162 ;;		On entry : 0/0
 15163 ;;		On exit  : 0/0
 15164 ;;		Unchanged: 0/0
 15165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15167 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15169 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15170 ;;Total ram usage:        2 bytes
 15171 ;; Hardware stack levels used:    1
 15172 ;; Hardware stack levels required when called:    4
 15173 ;; This function calls:
 15174 ;;		_DelayOffPointSelect
 15175 ;; This function is called by:
 15176 ;;		_setDimmerLights_OnOff
 15177 ;; This function uses a non-reentrant model
 15178 ;;
 15179                           
 15180                           
 15181                           ;psect for function _getDelayOff_GO
 15182  1BF5                     _getDelayOff_GO:	
 15183                           
 15184                           ;incstack = 0
 15185                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15186                           ;getDelayOff_GO@sw stored from wreg
 15187  1BF5  00F4               	movwf	getDelayOff_GO@sw
 15188                           
 15189                           ;DelayOff_B1.c: 115: DelayOffPointSelect(sw);
 15190  1BF6  0874               	movf	getDelayOff_GO@sw,w
 15191  1BF7  319D  2552         	fcall	_DelayOffPointSelect
 15192                           
 15193                           ;DelayOff_B1.c: 116: char go = DelayOff->GO == 1 ? 1 : 0;
 15194  1BF9  0021               	movlb	1	; select bank1
 15195  1BFA  0844               	movf	_DelayOff^(0+128),w
 15196  1BFB  0086               	movwf	6
 15197  1BFC  3001               	movlw	1	; select bank2/3
 15198  1BFD  0087               	movwf	7
 15199  1BFE  3000               	movlw	0
 15200  1BFF  1881               	btfsc	1,1
 15201  1C00  3001               	movlw	1
 15202  1C01  00F5               	movwf	getDelayOff_GO@go
 15203                           
 15204                           ;DelayOff_B1.c: 117: return go;
 15205  1C02  0875               	movf	getDelayOff_GO@go,w
 15206  1C03  0008               	return
 15207  1C04                     __end_of_getDelayOff_GO:	
 15208                           
 15209                           	psect	text101
 15210  1C50                     __ptext101:	
 15211 ;; *************** function _getCmd_Status *****************
 15212 ;; Defined at:
 15213 ;;		line 605 in file "../src/main_B1.c"
 15214 ;; Parameters:    Size  Location     Type
 15215 ;;  number          1    wreg     unsigned char 
 15216 ;; Auto vars:     Size  Location     Type
 15217 ;;  number          1    2[COMMON] unsigned char 
 15218 ;;  cmd             1    3[COMMON] unsigned char 
 15219 ;; Return value:  Size  Location     Type
 15220 ;;                  1    wreg      unsigned char 
 15221 ;; Registers used:
 15222 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15223 ;; Tracked objects:
 15224 ;;		On entry : 0/0
 15225 ;;		On exit  : 0/0
 15226 ;;		Unchanged: 0/0
 15227 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15229 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15231 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15232 ;;Total ram usage:        2 bytes
 15233 ;; Hardware stack levels used:    1
 15234 ;; Hardware stack levels required when called:    3
 15235 ;; This function calls:
 15236 ;;		Nothing
 15237 ;; This function is called by:
 15238 ;;		_setDimmerLights_OnOff
 15239 ;; This function uses a non-reentrant model
 15240 ;;
 15241                           
 15242                           
 15243                           ;psect for function _getCmd_Status
 15244  1C50                     _getCmd_Status:	
 15245                           
 15246                           ;incstack = 0
 15247                           ; Regs used in _getCmd_Status: [wreg-fsr0h+status,2+status,0]
 15248                           ;getCmd_Status@number stored from wreg
 15249  1C50  00F2               	movwf	getCmd_Status@number
 15250                           
 15251                           ;main_B1.c: 606: char cmd = 0;
 15252  1C51  01F3               	clrf	getCmd_Status@cmd
 15253                           
 15254                           ;main_B1.c: 607: switch (number) {
 15255  1C52  2C59               	goto	l7152
 15256  1C53                     l7148:	
 15257                           ;main_B1.c: 608: case 1:
 15258                           
 15259                           
 15260                           ;main_B1.c: 609: cmd = Cmd.all_off == 1 ? 1 : 0;
 15261  1C53  3000               	movlw	0
 15262  1C54  0021               	movlb	1	; select bank1
 15263  1C55  1843               	btfsc	_Cmd^(0+128),0
 15264  1C56  3001               	movlw	1
 15265  1C57  00F3               	movwf	getCmd_Status@cmd
 15266                           
 15267                           ;main_B1.c: 611: }
 15268                           
 15269                           ;main_B1.c: 610: break;
 15270  1C58  2C5E               	goto	l7154
 15271  1C59                     l7152:	
 15272  1C59  0872               	movf	getCmd_Status@number,w
 15273                           
 15274                           ; Switch size 1, requested type "space"
 15275                           ; Number of cases is 1, Range of values is 1 to 1
 15276                           ; switch strategies available:
 15277                           ; Name         Instructions Cycles
 15278                           ; simple_byte            4     3 (average)
 15279                           ; direct_byte           11     9 (fixed)
 15280                           ; jumptable            263     9 (fixed)
 15281                           ;	Chosen strategy is simple_byte
 15282  1C5A  3A01               	xorlw	1	; case 1
 15283  1C5B  1903               	skipnz
 15284  1C5C  2C53               	goto	l7148
 15285  1C5D  2C5E               	goto	l7154
 15286  1C5E                     l7154:	
 15287                           
 15288                           ;main_B1.c: 612: return cmd;
 15289  1C5E  0873               	movf	getCmd_Status@cmd,w
 15290  1C5F  0008               	return
 15291  1C60                     __end_of_getCmd_Status:	
 15292                           
 15293                           	psect	text102
 15294  148F                     __ptext102:	
 15295 ;; *************** function _setDimmerLights_Dimming *****************
 15296 ;; Defined at:
 15297 ;;		line 864 in file "../src/Dimmer_B1.c"
 15298 ;; Parameters:    Size  Location     Type
 15299 ;;  lights          1    wreg     unsigned char 
 15300 ;;  status          1   67[BANK0 ] unsigned char 
 15301 ;; Auto vars:     Size  Location     Type
 15302 ;;  lights          1   69[BANK0 ] unsigned char 
 15303 ;; Return value:  Size  Location     Type
 15304 ;;		None               void
 15305 ;; Registers used:
 15306 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15307 ;; Tracked objects:
 15308 ;;		On entry : 0/0
 15309 ;;		On exit  : 0/0
 15310 ;;		Unchanged: 0/0
 15311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15312 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15313 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15314 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15315 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15316 ;;Total ram usage:        3 bytes
 15317 ;; Hardware stack levels used:    1
 15318 ;; Hardware stack levels required when called:    6
 15319 ;; This function calls:
 15320 ;;		_getDimmerIntr_DimmingValue
 15321 ;;		_getDimmerLights_ValueToPercent
 15322 ;;		_setBuz
 15323 ;;		_setDimmerIntr_Dimming_Sw
 15324 ;;		_setDimmerIntr_MaxmumValue
 15325 ;;		_setDimmerLights_Line
 15326 ;;		_setProductData
 15327 ;;		_setRF_DimmerLights
 15328 ;;		_setRF_TransceiveGO
 15329 ;;		_setTxData
 15330 ;; This function is called by:
 15331 ;;		_setDimmerLights_Main
 15332 ;; This function uses a non-reentrant model
 15333 ;;
 15334                           
 15335                           
 15336                           ;psect for function _setDimmerLights_Dimming
 15337  148F                     _setDimmerLights_Dimming:	
 15338                           
 15339                           ;incstack = 0
 15340                           ; Regs used in _setDimmerLights_Dimming: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15341                           ;setDimmerLights_Dimming@lights stored from wreg
 15342  148F  0020               	movlb	0	; select bank0
 15343  1490  00E5               	movwf	setDimmerLights_Dimming@lights
 15344                           
 15345                           ;Dimmer_B1.c: 865: if (status == 1) {
 15346  1491  0863               	movf	setDimmerLights_Dimming@status,w
 15347  1492  3A01               	xorlw	1
 15348  1493  1D03               	skipz
 15349  1494  2CA8               	goto	l9558
 15350                           
 15351                           ;Dimmer_B1.c: 866: setDimmerIntr_Dimming_Sw(lights, 1);
 15352  1495  01F2               	clrf	setDimmerIntr_Dimming_Sw@command
 15353  1496  0AF2               	incf	setDimmerIntr_Dimming_Sw@command,f
 15354  1497  0865               	movf	setDimmerLights_Dimming@lights,w
 15355  1498  3190  20B5  3194   	fcall	_setDimmerIntr_Dimming_Sw
 15356                           
 15357                           ;Dimmer_B1.c: 869: setRF_TransceiveGO(0);
 15358  149B  3000               	movlw	0
 15359  149C  319C  2440  3194   	fcall	_setRF_TransceiveGO
 15360                           
 15361                           ;Dimmer_B1.c: 871: setBuz(1, 100);
 15362  149F  3064               	movlw	100
 15363  14A0  0020               	movlb	0	; select bank0
 15364  14A1  00A4               	movwf	setBuz@time
 15365  14A2  3000               	movlw	0
 15366  14A3  00A5               	movwf	setBuz@time+1
 15367  14A4  3001               	movlw	1
 15368  14A5  3195  2584         	fcall	_setBuz
 15369                           
 15370                           ;Dimmer_B1.c: 872: } else if (status == 0) {
 15371  14A7  0008               	return
 15372  14A8                     l9558:	
 15373  14A8  0020               	movlb	0	; select bank0
 15374  14A9  08E3               	movf	setDimmerLights_Dimming@status,f
 15375  14AA  1D03               	skipz
 15376  14AB  0008               	return
 15377                           
 15378                           ;Dimmer_B1.c: 873: setDimmerIntr_Dimming_Sw(lights, 0);
 15379  14AC  01F2               	clrf	setDimmerIntr_Dimming_Sw@command
 15380  14AD  0865               	movf	setDimmerLights_Dimming@lights,w
 15381  14AE  3190  20B5  3194   	fcall	_setDimmerIntr_Dimming_Sw
 15382                           
 15383                           ;Dimmer_B1.c: 876: Dimmer.Load_Status = 0;
 15384  14B1  0021               	movlb	1	; select bank1
 15385  14B2  113A               	bcf	_Dimmer^(0+128),2
 15386                           
 15387                           ;Dimmer_B1.c: 877: setDimmerLights_Line(lights);
 15388  14B3  0020               	movlb	0	; select bank0
 15389  14B4  0865               	movf	setDimmerLights_Dimming@lights,w
 15390  14B5  319C  24F3  3194   	fcall	_setDimmerLights_Line
 15391                           
 15392                           ;Dimmer_B1.c: 880: setDimmerIntr_MaxmumValue(lights, getDimmerIntr_DimmingValue(lights))
      +                          ;
 15393  14B8  0020               	movlb	0	; select bank0
 15394  14B9  0865               	movf	setDimmerLights_Dimming@lights,w
 15395  14BA  319D  252A  3194   	fcall	_getDimmerIntr_DimmingValue
 15396  14BD  0020               	movlb	0	; select bank0
 15397  14BE  00E4               	movwf	??_setDimmerLights_Dimming
 15398  14BF  0864               	movf	??_setDimmerLights_Dimming,w
 15399  14C0  00DA               	movwf	setDimmerIntr_MaxmumValue@value
 15400  14C1  0865               	movf	setDimmerLights_Dimming@lights,w
 15401  14C2  319D  25FB  3194   	fcall	_setDimmerIntr_MaxmumValue
 15402                           
 15403                           ;Dimmer_B1.c: 881: setProductData((20 + lights), getDimmerLights_ValueToPercent(getDimme
      +                          rIntr_DimmingValue(lights)));
 15404  14C5  0020               	movlb	0	; select bank0
 15405  14C6  0865               	movf	setDimmerLights_Dimming@lights,w
 15406  14C7  319D  252A  3194   	fcall	_getDimmerIntr_DimmingValue
 15407  14CA  3188  20A3  3194   	fcall	_getDimmerLights_ValueToPercent
 15408  14CD  0020               	movlb	0	; select bank0
 15409  14CE  00E4               	movwf	??_setDimmerLights_Dimming
 15410  14CF  0864               	movf	??_setDimmerLights_Dimming,w
 15411  14D0  00DA               	movwf	setProductData@value
 15412  14D1  0865               	movf	setDimmerLights_Dimming@lights,w
 15413  14D2  3E14               	addlw	20
 15414  14D3  319B  23D8  3194   	fcall	_setProductData
 15415                           
 15416                           ;Dimmer_B1.c: 891: setRF_DimmerLights(lights, 1);
 15417  14D6  0020               	movlb	0	; select bank0
 15418  14D7  01DE               	clrf	setRF_DimmerLights@on
 15419  14D8  0ADE               	incf	setRF_DimmerLights@on,f
 15420  14D9  0865               	movf	setDimmerLights_Dimming@lights,w
 15421  14DA  3196  26E2  3194   	fcall	_setRF_DimmerLights
 15422                           
 15423                           ;Dimmer_B1.c: 892: setTxData();
 15424  14DD  318F  274A         	fcall	_setTxData
 15425  14DF  0008               	return
 15426  14E0                     __end_of_setDimmerLights_Dimming:	
 15427                           
 15428                           	psect	text103
 15429  0F4A                     __ptext103:	
 15430 ;; *************** function _setTxData *****************
 15431 ;; Defined at:
 15432 ;;		line 183 in file "../src/RF_Control_B1.c"
 15433 ;; Parameters:    Size  Location     Type
 15434 ;;		None
 15435 ;; Auto vars:     Size  Location     Type
 15436 ;;  i               1    0        unsigned char 
 15437 ;; Return value:  Size  Location     Type
 15438 ;;		None               void
 15439 ;; Registers used:
 15440 ;;		wreg, fsr1l, fsr1h, status,2
 15441 ;; Tracked objects:
 15442 ;;		On entry : 0/0
 15443 ;;		On exit  : 0/0
 15444 ;;		Unchanged: 0/0
 15445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15448 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15449 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15450 ;;Total ram usage:        1 bytes
 15451 ;; Hardware stack levels used:    1
 15452 ;; Hardware stack levels required when called:    3
 15453 ;; This function calls:
 15454 ;;		Nothing
 15455 ;; This function is called by:
 15456 ;;		_setDimmerLights_OnOff
 15457 ;;		_setDimmerLights_Dimming
 15458 ;;		_getRxData
 15459 ;;		_setControl_Lights_Table
 15460 ;;		_setRFSW_Control
 15461 ;;		_setRFSW_AdjControl
 15462 ;; This function uses a non-reentrant model
 15463 ;;
 15464                           
 15465                           
 15466                           ;psect for function _setTxData
 15467  0F4A                     _setTxData:	
 15468                           
 15469                           ;RF_Control_B1.c: 184: char i;
 15470                           ;RF_Control_B1.c: 185: if (RF1.Enable == 1) {
 15471                           
 15472                           ;incstack = 0
 15473                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2]
 15474  0F4A  0021               	movlb	1	; select bank1
 15475  0F4B  1C20               	btfss	_RF1^(0+128),0
 15476  0F4C  0008               	return
 15477                           
 15478                           ;RF_Control_B1.c: 187: RF1.TransceiveGO = 1;
 15479  0F4D  1520               	bsf	_RF1^(0+128),2
 15480                           
 15481                           ;RF_Control_B1.c: 188: RF1.Count = 0;
 15482  0F4E  01A2               	clrf	(_RF1^(0+128)+2)
 15483  0F4F  01A3               	clrf	((_RF1+1)^(0+128)+2)
 15484                           
 15485                           ;RF_Control_B1.c: 200: RF_Data[0] = 0x63;
 15486  0F50  3063               	movlw	99
 15487  0F51  00F2               	movwf	??_setTxData
 15488  0F52  0872               	movf	??_setTxData,w
 15489  0F53  0023               	movlb	3	; select bank3
 15490  0F54  00A0               	movwf	_RF_Data^(0+384)
 15491                           
 15492                           ;RF_Control_B1.c: 201: RF_Data[1] = 0x02;
 15493  0F55  3002               	movlw	2
 15494  0F56  00F2               	movwf	??_setTxData
 15495  0F57  0872               	movf	??_setTxData,w
 15496  0F58  00A1               	movwf	(_RF_Data^(0+384)+1)
 15497                           
 15498                           ;RF_Control_B1.c: 203: RF_Data[2] = product->Data[2];
 15499  0F59  0020               	movlb	0	; select bank0
 15500  0F5A  086D               	movf	_product,w
 15501  0F5B  0086               	movwf	6
 15502  0F5C  3002               	movlw	2	; select bank4/5
 15503  0F5D  0087               	movwf	7
 15504  0F5E  3002               	movlw	2	; select bank4/5
 15505  0F5F  3F42               	moviw [2]fsr1
 15506  0F60  0023               	movlb	3	; select bank3
 15507  0F61  00A2               	movwf	(_RF_Data^(0+384)+2)
 15508                           
 15509                           ;RF_Control_B1.c: 204: RF_Data[3] = product->Data[3];
 15510  0F62  0020               	movlb	0	; select bank0
 15511  0F63  086D               	movf	_product,w
 15512  0F64  0086               	movwf	6
 15513  0F65  3002               	movlw	2	; select bank4/5
 15514  0F66  0087               	movwf	7
 15515  0F67  3002               	movlw	2	; select bank4/5
 15516  0F68  3F43               	moviw [3]fsr1
 15517  0F69  0023               	movlb	3	; select bank3
 15518  0F6A  00A3               	movwf	(_RF_Data^(0+384)+3)
 15519                           
 15520                           ;RF_Control_B1.c: 205: RF_Data[4] = product->Data[4];
 15521  0F6B  0020               	movlb	0	; select bank0
 15522  0F6C  086D               	movf	_product,w
 15523  0F6D  0086               	movwf	6
 15524  0F6E  3002               	movlw	2	; select bank4/5
 15525  0F6F  0087               	movwf	7
 15526  0F70  3002               	movlw	2	; select bank4/5
 15527  0F71  3F44               	moviw [4]fsr1
 15528  0F72  0023               	movlb	3	; select bank3
 15529  0F73  00A4               	movwf	(_RF_Data^(0+384)+4)
 15530                           
 15531                           ;RF_Control_B1.c: 206: RF_Data[5] = product->Data[5];
 15532  0F74  0020               	movlb	0	; select bank0
 15533  0F75  086D               	movf	_product,w
 15534  0F76  0086               	movwf	6
 15535  0F77  3002               	movlw	2	; select bank4/5
 15536  0F78  0087               	movwf	7
 15537  0F79  3002               	movlw	2	; select bank4/5
 15538  0F7A  3F45               	moviw [5]fsr1
 15539  0F7B  0023               	movlb	3	; select bank3
 15540  0F7C  00A5               	movwf	(_RF_Data^(0+384)+5)
 15541                           
 15542                           ;RF_Control_B1.c: 207: RF_Data[6] = product->Data[6];
 15543  0F7D  0020               	movlb	0	; select bank0
 15544  0F7E  086D               	movf	_product,w
 15545  0F7F  0086               	movwf	6
 15546  0F80  3002               	movlw	2	; select bank4/5
 15547  0F81  0087               	movwf	7
 15548  0F82  3002               	movlw	2	; select bank4/5
 15549  0F83  3F46               	moviw [6]fsr1
 15550  0F84  0023               	movlb	3	; select bank3
 15551  0F85  00A6               	movwf	(_RF_Data^(0+384)+6)
 15552                           
 15553                           ;RF_Control_B1.c: 208: RF_Data[7] = product->Data[7];
 15554  0F86  0020               	movlb	0	; select bank0
 15555  0F87  086D               	movf	_product,w
 15556  0F88  0086               	movwf	6
 15557  0F89  3002               	movlw	2	; select bank4/5
 15558  0F8A  0087               	movwf	7
 15559  0F8B  3002               	movlw	2	; select bank4/5
 15560  0F8C  3F47               	moviw [7]fsr1
 15561  0F8D  0023               	movlb	3	; select bank3
 15562  0F8E  00A7               	movwf	(_RF_Data^(0+384)+7)
 15563                           
 15564                           ;RF_Control_B1.c: 209: RF_Data[8] = product->Data[8];
 15565  0F8F  0020               	movlb	0	; select bank0
 15566  0F90  086D               	movf	_product,w
 15567  0F91  0086               	movwf	6
 15568  0F92  3002               	movlw	2	; select bank4/5
 15569  0F93  0087               	movwf	7
 15570  0F94  3002               	movlw	2	; select bank4/5
 15571  0F95  3F48               	moviw [8]fsr1
 15572  0F96  0023               	movlb	3	; select bank3
 15573  0F97  00A8               	movwf	(_RF_Data^(0+384)+8)
 15574                           
 15575                           ;RF_Control_B1.c: 210: RF_Data[9] = product->Data[9];
 15576  0F98  0020               	movlb	0	; select bank0
 15577  0F99  086D               	movf	_product,w
 15578  0F9A  0086               	movwf	6
 15579  0F9B  3002               	movlw	2	; select bank4/5
 15580  0F9C  0087               	movwf	7
 15581  0F9D  3002               	movlw	2	; select bank4/5
 15582  0F9E  3F49               	moviw [9]fsr1
 15583  0F9F  0023               	movlb	3	; select bank3
 15584  0FA0  00A9               	movwf	(_RF_Data^(0+384)+9)
 15585                           
 15586                           ;RF_Control_B1.c: 211: RF_Data[10] = product->Data[10];
 15587  0FA1  0020               	movlb	0	; select bank0
 15588  0FA2  086D               	movf	_product,w
 15589  0FA3  0086               	movwf	6
 15590  0FA4  3002               	movlw	2	; select bank4/5
 15591  0FA5  0087               	movwf	7
 15592  0FA6  3002               	movlw	2	; select bank4/5
 15593  0FA7  3F4A               	moviw [10]fsr1
 15594  0FA8  0023               	movlb	3	; select bank3
 15595  0FA9  00AA               	movwf	(_RF_Data^(0+384)+10)
 15596                           
 15597                           ;RF_Control_B1.c: 212: RF_Data[11] = product->Data[11];
 15598  0FAA  0020               	movlb	0	; select bank0
 15599  0FAB  086D               	movf	_product,w
 15600  0FAC  0086               	movwf	6
 15601  0FAD  3002               	movlw	2	; select bank4/5
 15602  0FAE  0087               	movwf	7
 15603  0FAF  3002               	movlw	2	; select bank4/5
 15604  0FB0  3F4B               	moviw [11]fsr1
 15605  0FB1  0023               	movlb	3	; select bank3
 15606  0FB2  00AB               	movwf	(_RF_Data^(0+384)+11)
 15607                           
 15608                           ;RF_Control_B1.c: 213: RF_Data[12] = product->Data[12];
 15609  0FB3  0020               	movlb	0	; select bank0
 15610  0FB4  086D               	movf	_product,w
 15611  0FB5  0086               	movwf	6
 15612  0FB6  3002               	movlw	2	; select bank4/5
 15613  0FB7  0087               	movwf	7
 15614  0FB8  3002               	movlw	2	; select bank4/5
 15615  0FB9  3F4C               	moviw [12]fsr1
 15616  0FBA  0023               	movlb	3	; select bank3
 15617  0FBB  00AC               	movwf	(_RF_Data^(0+384)+12)
 15618                           
 15619                           ;RF_Control_B1.c: 214: RF_Data[13] = product->Data[13];
 15620  0FBC  0020               	movlb	0	; select bank0
 15621  0FBD  086D               	movf	_product,w
 15622  0FBE  0086               	movwf	6
 15623  0FBF  3002               	movlw	2	; select bank4/5
 15624  0FC0  0087               	movwf	7
 15625  0FC1  3002               	movlw	2	; select bank4/5
 15626  0FC2  3F4D               	moviw [13]fsr1
 15627  0FC3  0023               	movlb	3	; select bank3
 15628  0FC4  00AD               	movwf	(_RF_Data^(0+384)+13)
 15629                           
 15630                           ;RF_Control_B1.c: 215: RF_Data[14] = product->Data[14];
 15631  0FC5  0020               	movlb	0	; select bank0
 15632  0FC6  086D               	movf	_product,w
 15633  0FC7  0086               	movwf	6
 15634  0FC8  3002               	movlw	2	; select bank4/5
 15635  0FC9  0087               	movwf	7
 15636  0FCA  3002               	movlw	2	; select bank4/5
 15637  0FCB  3F4E               	moviw [14]fsr1
 15638  0FCC  0023               	movlb	3	; select bank3
 15639  0FCD  00AE               	movwf	(_RF_Data^(0+384)+14)
 15640                           
 15641                           ;RF_Control_B1.c: 216: RF_Data[15] = product->Data[15];
 15642  0FCE  0020               	movlb	0	; select bank0
 15643  0FCF  086D               	movf	_product,w
 15644  0FD0  0086               	movwf	6
 15645  0FD1  3002               	movlw	2	; select bank4/5
 15646  0FD2  0087               	movwf	7
 15647  0FD3  3002               	movlw	2	; select bank4/5
 15648  0FD4  3F4F               	moviw [15]fsr1
 15649  0FD5  0023               	movlb	3	; select bank3
 15650  0FD6  00AF               	movwf	(_RF_Data^(0+384)+15)
 15651                           
 15652                           ;RF_Control_B1.c: 217: RF_Data[16] = product->Data[16];
 15653  0FD7  0020               	movlb	0	; select bank0
 15654  0FD8  086D               	movf	_product,w
 15655  0FD9  0086               	movwf	6
 15656  0FDA  3002               	movlw	2	; select bank4/5
 15657  0FDB  0087               	movwf	7
 15658  0FDC  3002               	movlw	2	; select bank4/5
 15659  0FDD  3F50               	moviw [16]fsr1
 15660  0FDE  0023               	movlb	3	; select bank3
 15661  0FDF  00B0               	movwf	(_RF_Data^(0+384)+16)
 15662                           
 15663                           ;RF_Control_B1.c: 218: RF_Data[17] = product->Data[17];
 15664  0FE0  0020               	movlb	0	; select bank0
 15665  0FE1  086D               	movf	_product,w
 15666  0FE2  0086               	movwf	6
 15667  0FE3  3002               	movlw	2	; select bank4/5
 15668  0FE4  0087               	movwf	7
 15669  0FE5  3002               	movlw	2	; select bank4/5
 15670  0FE6  3F51               	moviw [17]fsr1
 15671  0FE7  0023               	movlb	3	; select bank3
 15672  0FE8  00B1               	movwf	(_RF_Data^(0+384)+17)
 15673                           
 15674                           ;RF_Control_B1.c: 219: RF_Data[18] = product->Data[18];
 15675  0FE9  0020               	movlb	0	; select bank0
 15676  0FEA  086D               	movf	_product,w
 15677  0FEB  0086               	movwf	6
 15678  0FEC  3002               	movlw	2	; select bank4/5
 15679  0FED  0087               	movwf	7
 15680  0FEE  3002               	movlw	2	; select bank4/5
 15681  0FEF  3F52               	moviw [18]fsr1
 15682  0FF0  0023               	movlb	3	; select bank3
 15683  0FF1  00B2               	movwf	(_RF_Data^(0+384)+18)
 15684                           
 15685                           ;RF_Control_B1.c: 220: RF_Data[19] = product->Data[19];
 15686  0FF2  0020               	movlb	0	; select bank0
 15687  0FF3  086D               	movf	_product,w
 15688  0FF4  0086               	movwf	6
 15689  0FF5  3002               	movlw	2	; select bank4/5
 15690  0FF6  0087               	movwf	7
 15691  0FF7  3002               	movlw	2	; select bank4/5
 15692  0FF8  3F53               	moviw [19]fsr1
 15693  0FF9  0023               	movlb	3	; select bank3
 15694  0FFA  00B3               	movwf	(_RF_Data^(0+384)+19)
 15695                           
 15696                           ;RF_Control_B1.c: 221: RF_Data[20] = 210;
 15697  0FFB  30D2               	movlw	210
 15698  0FFC  00F2               	movwf	??_setTxData
 15699  0FFD  0872               	movf	??_setTxData,w
 15700  0FFE  00B4               	movwf	(_RF_Data^(0+384)+20)
 15701  0FFF  0008               	return
 15702  1000                     __end_of_setTxData:	
 15703                           
 15704                           	psect	text104
 15705  1C40                     __ptext104:	
 15706 ;; *************** function _setRF_TransceiveGO *****************
 15707 ;; Defined at:
 15708 ;;		line 461 in file "../src/RF_Control_B1.c"
 15709 ;; Parameters:    Size  Location     Type
 15710 ;;  command         1    wreg     unsigned char 
 15711 ;; Auto vars:     Size  Location     Type
 15712 ;;  command         1    3[COMMON] unsigned char 
 15713 ;; Return value:  Size  Location     Type
 15714 ;;		None               void
 15715 ;; Registers used:
 15716 ;;		wreg, status,2, status,0
 15717 ;; Tracked objects:
 15718 ;;		On entry : 0/0
 15719 ;;		On exit  : 0/0
 15720 ;;		Unchanged: 0/0
 15721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15723 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15724 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15725 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15726 ;;Total ram usage:        2 bytes
 15727 ;; Hardware stack levels used:    1
 15728 ;; Hardware stack levels required when called:    3
 15729 ;; This function calls:
 15730 ;;		Nothing
 15731 ;; This function is called by:
 15732 ;;		_setDimmerLights_Dimming
 15733 ;; This function uses a non-reentrant model
 15734 ;;
 15735                           
 15736                           
 15737                           ;psect for function _setRF_TransceiveGO
 15738  1C40                     _setRF_TransceiveGO:	
 15739                           
 15740                           ;incstack = 0
 15741                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 15742                           ;setRF_TransceiveGO@command stored from wreg
 15743  1C40  00F3               	movwf	setRF_TransceiveGO@command
 15744                           
 15745                           ;RF_Control_B1.c: 462: RF1.TransceiveGO = command == 1 ? 1 : 0;
 15746  1C41  0873               	movf	setRF_TransceiveGO@command,w
 15747  1C42  3A01               	xorlw	1
 15748  1C43  3000               	movlw	0
 15749  1C44  1903               	skipnz
 15750  1C45  3001               	movlw	1
 15751  1C46  00F2               	movwf	??_setRF_TransceiveGO
 15752  1C47  0DF2               	rlf	??_setRF_TransceiveGO,f
 15753  1C48  0DF2               	rlf	??_setRF_TransceiveGO,f
 15754  1C49  0021               	movlb	1	; select bank1
 15755  1C4A  0820               	movf	_RF1^(0+128),w
 15756  1C4B  0672               	xorwf	??_setRF_TransceiveGO,w
 15757  1C4C  39FB               	andlw	-5
 15758  1C4D  0672               	xorwf	??_setRF_TransceiveGO,w
 15759  1C4E  00A0               	movwf	_RF1^(0+128)
 15760  1C4F  0008               	return
 15761  1C50                     __end_of_setRF_TransceiveGO:	
 15762                           
 15763                           	psect	text105
 15764  16E2                     __ptext105:	
 15765 ;; *************** function _setRF_DimmerLights *****************
 15766 ;; Defined at:
 15767 ;;		line 446 in file "../src/RF_Control_B1.c"
 15768 ;; Parameters:    Size  Location     Type
 15769 ;;  lights          1    wreg     unsigned char 
 15770 ;;  on              1   62[BANK0 ] unsigned char 
 15771 ;; Auto vars:     Size  Location     Type
 15772 ;;  lights          1   66[BANK0 ] unsigned char 
 15773 ;;  status          1   65[BANK0 ] unsigned char 
 15774 ;; Return value:  Size  Location     Type
 15775 ;;		None               void
 15776 ;; Registers used:
 15777 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15778 ;; Tracked objects:
 15779 ;;		On entry : 0/0
 15780 ;;		On exit  : 0/0
 15781 ;;		Unchanged: 0/0
 15782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15783 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15784 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15785 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15786 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15787 ;;Total ram usage:        5 bytes
 15788 ;; Hardware stack levels used:    1
 15789 ;; Hardware stack levels required when called:    4
 15790 ;; This function calls:
 15791 ;;		_setProductData
 15792 ;; This function is called by:
 15793 ;;		_setDimmerLights_OnOff
 15794 ;;		_setDimmerLights_Dimming
 15795 ;;		_setRFSW_Control
 15796 ;; This function uses a non-reentrant model
 15797 ;;
 15798                           
 15799                           
 15800                           ;psect for function _setRF_DimmerLights
 15801  16E2                     _setRF_DimmerLights:	
 15802                           
 15803                           ;incstack = 0
 15804                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15805                           ;setRF_DimmerLights@lights stored from wreg
 15806  16E2  0020               	movlb	0	; select bank0
 15807  16E3  00E2               	movwf	setRF_DimmerLights@lights
 15808                           
 15809                           ;RF_Control_B1.c: 447: char status = 1;
 15810  16E4  01E1               	clrf	setRF_DimmerLights@status
 15811  16E5  0AE1               	incf	setRF_DimmerLights@status,f
 15812                           
 15813                           ;RF_Control_B1.c: 448: status <<= (lights - 1);
 15814  16E6  0862               	movf	setRF_DimmerLights@lights,w
 15815  16E7  3EFF               	addlw	-1
 15816  16E8  0A89               	incf	9,f
 15817  16E9  2EEC               	goto	u6130
 15818  16EA                     u6135:	
 15819  16EA  1003               	clrc
 15820  16EB  0DE1               	rlf	setRF_DimmerLights@status,f
 15821  16EC                     u6130:	
 15822  16EC  3EFF               	addlw	-1
 15823  16ED  1D03               	skipz
 15824  16EE  2EEA               	goto	u6135
 15825                           
 15826                           ;RF_Control_B1.c: 449: setProductData(11, lights);
 15827  16EF  0862               	movf	setRF_DimmerLights@lights,w
 15828  16F0  00DF               	movwf	??_setRF_DimmerLights
 15829  16F1  085F               	movf	??_setRF_DimmerLights,w
 15830  16F2  00DA               	movwf	setProductData@value
 15831  16F3  300B               	movlw	11
 15832  16F4  319B  23D8  3196   	fcall	_setProductData
 15833                           
 15834                           ;RF_Control_B1.c: 450: setProductData(17, product->Data[26 + lights]);
 15835  16F7  0020               	movlb	0	; select bank0
 15836  16F8  0862               	movf	setRF_DimmerLights@lights,w
 15837  16F9  3E1A               	addlw	26
 15838  16FA  076D               	addwf	_product,w
 15839  16FB  00DF               	movwf	??_setRF_DimmerLights
 15840  16FC  085F               	movf	??_setRF_DimmerLights,w
 15841  16FD  0086               	movwf	6
 15842  16FE  3002               	movlw	2	; select bank4/5
 15843  16FF  0087               	movwf	7
 15844  1700  0801               	movf	1,w
 15845  1701  00E0               	movwf	??_setRF_DimmerLights+1
 15846  1702  0860               	movf	??_setRF_DimmerLights+1,w
 15847  1703  00DA               	movwf	setProductData@value
 15848  1704  3011               	movlw	17
 15849  1705  319B  23D8  3196   	fcall	_setProductData
 15850                           
 15851                           ;RF_Control_B1.c: 451: if (on == 1) {
 15852  1708  0020               	movlb	0	; select bank0
 15853  1709  085E               	movf	setRF_DimmerLights@on,w
 15854  170A  3A01               	xorlw	1
 15855  170B  1D03               	skipz
 15856  170C  2F2C               	goto	l6716
 15857                           
 15858                           ;RF_Control_B1.c: 452: setProductData(9, product->Data[20 + lights]);
 15859  170D  0862               	movf	setRF_DimmerLights@lights,w
 15860  170E  3E14               	addlw	20
 15861  170F  076D               	addwf	_product,w
 15862  1710  00DF               	movwf	??_setRF_DimmerLights
 15863  1711  085F               	movf	??_setRF_DimmerLights,w
 15864  1712  0086               	movwf	6
 15865  1713  3002               	movlw	2	; select bank4/5
 15866  1714  0087               	movwf	7
 15867  1715  0801               	movf	1,w
 15868  1716  00E0               	movwf	??_setRF_DimmerLights+1
 15869  1717  0860               	movf	??_setRF_DimmerLights+1,w
 15870  1718  00DA               	movwf	setProductData@value
 15871  1719  3009               	movlw	9
 15872  171A  319B  23D8  3196   	fcall	_setProductData
 15873                           
 15874                           ;RF_Control_B1.c: 453: setProductData(15, (product->Data[15] | status));
 15875  171D  0020               	movlb	0	; select bank0
 15876  171E  086D               	movf	_product,w
 15877  171F  3E0F               	addlw	15
 15878  1720  0086               	movwf	6
 15879  1721  3002               	movlw	2	; select bank4/5
 15880  1722  0087               	movwf	7
 15881  1723  0801               	movf	1,w
 15882  1724  0461               	iorwf	setRF_DimmerLights@status,w
 15883  1725  00DF               	movwf	??_setRF_DimmerLights
 15884  1726  085F               	movf	??_setRF_DimmerLights,w
 15885  1727  00DA               	movwf	setProductData@value
 15886  1728  300F               	movlw	15
 15887  1729  319B  23D8         	fcall	_setProductData
 15888                           
 15889                           ;RF_Control_B1.c: 454: } else {
 15890  172B  0008               	return
 15891  172C                     l6716:	
 15892                           
 15893                           ;RF_Control_B1.c: 455: setProductData(9, 0x00);
 15894  172C  0020               	movlb	0	; select bank0
 15895  172D  01DA               	clrf	setProductData@value
 15896  172E  3009               	movlw	9
 15897  172F  319B  23D8  3196   	fcall	_setProductData
 15898                           
 15899                           ;RF_Control_B1.c: 456: setProductData(15, (product->Data[15]&(~status)));
 15900  1732  0020               	movlb	0	; select bank0
 15901  1733  086D               	movf	_product,w
 15902  1734  3E0F               	addlw	15
 15903  1735  0086               	movwf	6
 15904  1736  3002               	movlw	2	; select bank4/5
 15905  1737  0087               	movwf	7
 15906  1738  0961               	comf	setRF_DimmerLights@status,w
 15907  1739  0501               	andwf	1,w
 15908  173A  00DF               	movwf	??_setRF_DimmerLights
 15909  173B  085F               	movf	??_setRF_DimmerLights,w
 15910  173C  00DA               	movwf	setProductData@value
 15911  173D  300F               	movlw	15
 15912  173E  319B  23D8         	fcall	_setProductData
 15913  1740  0008               	return
 15914  1741                     __end_of_setRF_DimmerLights:	
 15915                           
 15916                           	psect	text106
 15917  1CF3                     __ptext106:	
 15918 ;; *************** function _setDimmerLights_Line *****************
 15919 ;; Defined at:
 15920 ;;		line 936 in file "../src/Dimmer_B1.c"
 15921 ;; Parameters:    Size  Location     Type
 15922 ;;  lights          1    wreg     unsigned char 
 15923 ;; Auto vars:     Size  Location     Type
 15924 ;;  lights          1    2[COMMON] unsigned char 
 15925 ;; Return value:  Size  Location     Type
 15926 ;;		None               void
 15927 ;; Registers used:
 15928 ;;		wreg
 15929 ;; Tracked objects:
 15930 ;;		On entry : 0/0
 15931 ;;		On exit  : 0/0
 15932 ;;		Unchanged: 0/0
 15933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15934 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15935 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15937 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15938 ;;Total ram usage:        1 bytes
 15939 ;; Hardware stack levels used:    1
 15940 ;; Hardware stack levels required when called:    3
 15941 ;; This function calls:
 15942 ;;		Nothing
 15943 ;; This function is called by:
 15944 ;;		_setDimmerLights_OnOff
 15945 ;;		_setDimmerLights_Dimming
 15946 ;; This function uses a non-reentrant model
 15947 ;;
 15948                           
 15949                           
 15950                           ;psect for function _setDimmerLights_Line
 15951  1CF3                     _setDimmerLights_Line:	
 15952                           
 15953                           ;incstack = 0
 15954                           ; Regs used in _setDimmerLights_Line: [wreg]
 15955                           ;setDimmerLights_Line@lights stored from wreg
 15956  1CF3  00F2               	movwf	setDimmerLights_Line@lights
 15957                           
 15958                           ;Dimmer_B1.c: 937: Dimmer.LoadGO = 1;
 15959  1CF4  0021               	movlb	1	; select bank1
 15960  1CF5  14BA               	bsf	_Dimmer^(0+128),1
 15961                           
 15962                           ;Dimmer_B1.c: 939: DimmerLights1.Line = 0;
 15963  1CF6  0022               	movlb	2	; select bank2
 15964  1CF7  10DF               	bcf	(_DimmerLights1^(0+256)+1),1
 15965                           
 15966                           ;Dimmer_B1.c: 942: DimmerLights2.Line = 0;
 15967  1CF8  10E7               	bcf	(_DimmerLights2^(0+256)+1),1
 15968                           
 15969                           ;Dimmer_B1.c: 948: if (lights == 1) {
 15970  1CF9  0872               	movf	setDimmerLights_Line@lights,w
 15971  1CFA  3A01               	xorlw	1
 15972  1CFB  1D03               	skipz
 15973  1CFC  2CFF               	goto	l7134
 15974                           
 15975                           ;Dimmer_B1.c: 949: DimmerLights1.Line = 1;
 15976  1CFD  14DF               	bsf	(_DimmerLights1^(0+256)+1),1
 15977                           
 15978                           ;Dimmer_B1.c: 950: }
 15979  1CFE  0008               	return
 15980  1CFF                     l7134:	
 15981                           
 15982                           ;Dimmer_B1.c: 953: else if (lights == 2) {
 15983  1CFF  0872               	movf	setDimmerLights_Line@lights,w
 15984  1D00  3A02               	xorlw	2
 15985  1D01  1D03               	skipz
 15986  1D02  0008               	return
 15987                           
 15988                           ;Dimmer_B1.c: 954: DimmerLights2.Line = 1;
 15989  1D03  14E7               	bsf	(_DimmerLights2^(0+256)+1),1
 15990  1D04  0008               	return
 15991  1D05                     __end_of_setDimmerLights_Line:	
 15992                           
 15993                           	psect	text107
 15994  1DFB                     __ptext107:	
 15995 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 15996 ;; Defined at:
 15997 ;;		line 86 in file "../src/Dimmer_B1.c"
 15998 ;; Parameters:    Size  Location     Type
 15999 ;;  lights          1    wreg     unsigned char 
 16000 ;;  value           1   58[BANK0 ] unsigned char 
 16001 ;; Auto vars:     Size  Location     Type
 16002 ;;  lights          1   60[BANK0 ] unsigned char 
 16003 ;; Return value:  Size  Location     Type
 16004 ;;		None               void
 16005 ;; Registers used:
 16006 ;;		wreg
 16007 ;; Tracked objects:
 16008 ;;		On entry : 0/0
 16009 ;;		On exit  : 0/0
 16010 ;;		Unchanged: 0/0
 16011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16012 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16013 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16014 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16015 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16016 ;;Total ram usage:        3 bytes
 16017 ;; Hardware stack levels used:    1
 16018 ;; Hardware stack levels required when called:    3
 16019 ;; This function calls:
 16020 ;;		Nothing
 16021 ;; This function is called by:
 16022 ;;		_setDimmerLights_OnOff
 16023 ;;		_setDimmerLights_Dimming
 16024 ;;		_setRFSW_AdjControl
 16025 ;; This function uses a non-reentrant model
 16026 ;;
 16027                           
 16028                           
 16029                           ;psect for function _setDimmerIntr_MaxmumValue
 16030  1DFB                     _setDimmerIntr_MaxmumValue:	
 16031                           
 16032                           ;incstack = 0
 16033                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 16034                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 16035  1DFB  0020               	movlb	0	; select bank0
 16036  1DFC  00DC               	movwf	setDimmerIntr_MaxmumValue@lights
 16037                           
 16038                           ;Dimmer_B1.c: 88: if (lights == 1) {
 16039  1DFD  085C               	movf	setDimmerIntr_MaxmumValue@lights,w
 16040  1DFE  3A01               	xorlw	1
 16041  1DFF  1D03               	skipz
 16042  1E00  2E07               	goto	l6684
 16043                           
 16044                           ;Dimmer_B1.c: 89: DimmerIntr1.MaxmumValue = value;
 16045  1E01  085A               	movf	setDimmerIntr_MaxmumValue@value,w
 16046  1E02  00DB               	movwf	??_setDimmerIntr_MaxmumValue
 16047  1E03  085B               	movf	??_setDimmerIntr_MaxmumValue,w
 16048  1E04  0021               	movlb	1	; select bank1
 16049  1E05  00E7               	movwf	(_DimmerIntr1^(0+128)+5)
 16050                           
 16051                           ;Dimmer_B1.c: 90: }
 16052  1E06  0008               	return
 16053  1E07                     l6684:	
 16054                           
 16055                           ;Dimmer_B1.c: 93: else if (lights == 2) {
 16056  1E07  0020               	movlb	0	; select bank0
 16057  1E08  085C               	movf	setDimmerIntr_MaxmumValue@lights,w
 16058  1E09  3A02               	xorlw	2
 16059  1E0A  1D03               	skipz
 16060  1E0B  0008               	return
 16061                           
 16062                           ;Dimmer_B1.c: 94: DimmerIntr2.MaxmumValue = value;
 16063  1E0C  085A               	movf	setDimmerIntr_MaxmumValue@value,w
 16064  1E0D  00DB               	movwf	??_setDimmerIntr_MaxmumValue
 16065  1E0E  085B               	movf	??_setDimmerIntr_MaxmumValue,w
 16066  1E0F  0021               	movlb	1	; select bank1
 16067  1E10  00EE               	movwf	(_DimmerIntr2^(0+128)+5)
 16068  1E11  0008               	return
 16069  1E12                     __end_of_setDimmerIntr_MaxmumValue:	
 16070                           
 16071                           	psect	text108
 16072  10B5                     __ptext108:	
 16073 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 16074 ;; Defined at:
 16075 ;;		line 162 in file "../src/Dimmer_B1.c"
 16076 ;; Parameters:    Size  Location     Type
 16077 ;;  lights          1    wreg     unsigned char 
 16078 ;;  command         1    2[COMMON] unsigned char 
 16079 ;; Auto vars:     Size  Location     Type
 16080 ;;  lights          1    4[COMMON] unsigned char 
 16081 ;; Return value:  Size  Location     Type
 16082 ;;		None               void
 16083 ;; Registers used:
 16084 ;;		wreg, status,2, status,0
 16085 ;; Tracked objects:
 16086 ;;		On entry : 0/0
 16087 ;;		On exit  : 0/0
 16088 ;;		Unchanged: 0/0
 16089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16090 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16091 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16092 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16093 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16094 ;;Total ram usage:        3 bytes
 16095 ;; Hardware stack levels used:    1
 16096 ;; Hardware stack levels required when called:    3
 16097 ;; This function calls:
 16098 ;;		Nothing
 16099 ;; This function is called by:
 16100 ;;		_setDimmerLights_Dimming
 16101 ;; This function uses a non-reentrant model
 16102 ;;
 16103                           
 16104                           
 16105                           ;psect for function _setDimmerIntr_Dimming_Sw
 16106  10B5                     _setDimmerIntr_Dimming_Sw:	
 16107                           
 16108                           ;incstack = 0
 16109                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 16110                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 16111  10B5  00F4               	movwf	setDimmerIntr_Dimming_Sw@lights
 16112                           
 16113                           ;Dimmer_B1.c: 164: if (lights == 1) {
 16114  10B6  0874               	movf	setDimmerIntr_Dimming_Sw@lights,w
 16115  10B7  3A01               	xorlw	1
 16116  10B8  1D03               	skipz
 16117  10B9  28C8               	goto	l7044
 16118                           
 16119                           ;Dimmer_B1.c: 165: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 16120  10BA  0872               	movf	setDimmerIntr_Dimming_Sw@command,w
 16121  10BB  3A01               	xorlw	1
 16122  10BC  3000               	movlw	0
 16123  10BD  1903               	skipnz
 16124  10BE  3001               	movlw	1
 16125  10BF  00F3               	movwf	??_setDimmerIntr_Dimming_Sw
 16126  10C0  0EF3               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16127  10C1  0021               	movlb	1	; select bank1
 16128  10C2  0862               	movf	_DimmerIntr1^(0+128),w
 16129  10C3  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16130  10C4  39EF               	andlw	-17
 16131  10C5  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16132  10C6  00E2               	movwf	_DimmerIntr1^(0+128)
 16133                           
 16134                           ;Dimmer_B1.c: 166: }
 16135  10C7  0008               	return
 16136  10C8                     l7044:	
 16137                           
 16138                           ;Dimmer_B1.c: 169: else if (lights == 2) {
 16139  10C8  0874               	movf	setDimmerIntr_Dimming_Sw@lights,w
 16140  10C9  3A02               	xorlw	2
 16141  10CA  1D03               	skipz
 16142  10CB  0008               	return
 16143                           
 16144                           ;Dimmer_B1.c: 170: DimmerIntr2.Dimming_Sw = command == 1 ? 1 : 0;
 16145  10CC  0872               	movf	setDimmerIntr_Dimming_Sw@command,w
 16146  10CD  3A01               	xorlw	1
 16147  10CE  3000               	movlw	0
 16148  10CF  1903               	skipnz
 16149  10D0  3001               	movlw	1
 16150  10D1  00F3               	movwf	??_setDimmerIntr_Dimming_Sw
 16151  10D2  0EF3               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16152  10D3  0021               	movlb	1	; select bank1
 16153  10D4  0869               	movf	_DimmerIntr2^(0+128),w
 16154  10D5  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16155  10D6  39EF               	andlw	-17
 16156  10D7  0673               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16157  10D8  00E9               	movwf	_DimmerIntr2^(0+128)
 16158  10D9  0008               	return
 16159  10DA                     __end_of_setDimmerIntr_Dimming_Sw:	
 16160                           
 16161                           	psect	text109
 16162  08A3                     __ptext109:	
 16163 ;; *************** function _getDimmerLights_ValueToPercent *****************
 16164 ;; Defined at:
 16165 ;;		line 1042 in file "../src/Dimmer_B1.c"
 16166 ;; Parameters:    Size  Location     Type
 16167 ;;  value           1    wreg     unsigned char 
 16168 ;; Auto vars:     Size  Location     Type
 16169 ;;  value           1   54[BANK0 ] unsigned char 
 16170 ;;  i               3   55[BANK0 ] float 
 16171 ;; Return value:  Size  Location     Type
 16172 ;;                  1    wreg      unsigned char 
 16173 ;; Registers used:
 16174 ;;		wreg, status,2, status,0, pclath, cstack
 16175 ;; Tracked objects:
 16176 ;;		On entry : 0/0
 16177 ;;		On exit  : 0/0
 16178 ;;		Unchanged: 0/0
 16179 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16180 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16181 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16182 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16183 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16184 ;;Total ram usage:        6 bytes
 16185 ;; Hardware stack levels used:    1
 16186 ;; Hardware stack levels required when called:    5
 16187 ;; This function calls:
 16188 ;;		___awtoft
 16189 ;;		___ftadd
 16190 ;;		___ftdiv
 16191 ;;		___ftneg
 16192 ;;		___fttol
 16193 ;; This function is called by:
 16194 ;;		_setDimmerLights_OnOff
 16195 ;;		_setDimmerLights_Dimming
 16196 ;;		_Flash_Memory_Initialization
 16197 ;; This function uses a non-reentrant model
 16198 ;;
 16199                           
 16200                           
 16201                           ;psect for function _getDimmerLights_ValueToPercent
 16202  08A3                     _getDimmerLights_ValueToPercent:	
 16203                           
 16204                           ;incstack = 0
 16205                           ; Regs used in _getDimmerLights_ValueToPercent: [wreg+status,2+status,0+pclath+cstack]
 16206                           ;getDimmerLights_ValueToPercent@value stored from wreg
 16207  08A3  0020               	movlb	0	; select bank0
 16208  08A4  00D6               	movwf	getDimmerLights_ValueToPercent@value
 16209                           
 16210                           ;Dimmer_B1.c: 1050: float i = ((char)(65*0.8)) - ((char)(20*0.8));
 16211  08A5  3000               	movlw	0
 16212  08A6  00D7               	movwf	getDimmerLights_ValueToPercent@i
 16213  08A7  3010               	movlw	16
 16214  08A8  00D8               	movwf	getDimmerLights_ValueToPercent@i+1
 16215  08A9  3042               	movlw	66
 16216  08AA  00D9               	movwf	getDimmerLights_ValueToPercent@i+2
 16217                           
 16218                           ;Dimmer_B1.c: 1051: i /= 100;
 16219  08AB  3000               	movlw	0
 16220  08AC  00A6               	movwf	___ftdiv@f2
 16221  08AD  30C8               	movlw	200
 16222  08AE  00A7               	movwf	___ftdiv@f2+1
 16223  08AF  3042               	movlw	66
 16224  08B0  00A8               	movwf	___ftdiv@f2+2
 16225  08B1  0857               	movf	getDimmerLights_ValueToPercent@i,w
 16226  08B2  00A9               	movwf	___ftdiv@f1
 16227  08B3  0858               	movf	getDimmerLights_ValueToPercent@i+1,w
 16228  08B4  00AA               	movwf	___ftdiv@f1+1
 16229  08B5  0859               	movf	getDimmerLights_ValueToPercent@i+2,w
 16230  08B6  00AB               	movwf	___ftdiv@f1+2
 16231  08B7  318D  253B  3188   	fcall	___ftdiv
 16232  08BA  0020               	movlb	0	; select bank0
 16233  08BB  0826               	movf	?___ftdiv,w
 16234  08BC  00D7               	movwf	getDimmerLights_ValueToPercent@i
 16235  08BD  0827               	movf	?___ftdiv+1,w
 16236  08BE  00D8               	movwf	getDimmerLights_ValueToPercent@i+1
 16237  08BF  0828               	movf	?___ftdiv+2,w
 16238  08C0  00D9               	movwf	getDimmerLights_ValueToPercent@i+2
 16239                           
 16240                           ;Dimmer_B1.c: 1053: return (char) (100 - ((((char)(65*0.8)) - value) / i));
 16241  08C1  0856               	movf	getDimmerLights_ValueToPercent@value,w
 16242  08C2  00D4               	movwf	??_getDimmerLights_ValueToPercent
 16243  08C3  01D5               	clrf	??_getDimmerLights_ValueToPercent+1
 16244  08C4  09D4               	comf	??_getDimmerLights_ValueToPercent,f
 16245  08C5  09D5               	comf	??_getDimmerLights_ValueToPercent+1,f
 16246  08C6  0AD4               	incf	??_getDimmerLights_ValueToPercent,f
 16247  08C7  1903               	skipnz
 16248  08C8  0AD5               	incf	??_getDimmerLights_ValueToPercent+1,f
 16249  08C9  0854               	movf	??_getDimmerLights_ValueToPercent,w
 16250  08CA  3E34               	addlw	52
 16251  08CB  00A0               	movwf	___awtoft@c
 16252  08CC  3000               	movlw	0
 16253  08CD  3D55               	addwfc	??_getDimmerLights_ValueToPercent+1,w
 16254  08CE  00A1               	movwf	___awtoft@c+1
 16255  08CF  319F  27DE  3188   	fcall	___awtoft
 16256  08D2  0020               	movlb	0	; select bank0
 16257  08D3  0820               	movf	?___awtoft,w
 16258  08D4  00A9               	movwf	___ftdiv@f1
 16259  08D5  0821               	movf	?___awtoft+1,w
 16260  08D6  00AA               	movwf	___ftdiv@f1+1
 16261  08D7  0822               	movf	?___awtoft+2,w
 16262  08D8  00AB               	movwf	___ftdiv@f1+2
 16263  08D9  0857               	movf	getDimmerLights_ValueToPercent@i,w
 16264  08DA  00A6               	movwf	___ftdiv@f2
 16265  08DB  0858               	movf	getDimmerLights_ValueToPercent@i+1,w
 16266  08DC  00A7               	movwf	___ftdiv@f2+1
 16267  08DD  0859               	movf	getDimmerLights_ValueToPercent@i+2,w
 16268  08DE  00A8               	movwf	___ftdiv@f2+2
 16269  08DF  318D  253B  3188   	fcall	___ftdiv
 16270  08E2  0020               	movlb	0	; select bank0
 16271  08E3  0826               	movf	?___ftdiv,w
 16272  08E4  00B6               	movwf	___ftneg@f1
 16273  08E5  0827               	movf	?___ftdiv+1,w
 16274  08E6  00B7               	movwf	___ftneg@f1+1
 16275  08E7  0828               	movf	?___ftdiv+2,w
 16276  08E8  00B8               	movwf	___ftneg@f1+2
 16277  08E9  319B  2322  3188   	fcall	___ftneg
 16278  08EC  0020               	movlb	0	; select bank0
 16279  08ED  0836               	movf	?___ftneg,w
 16280  08EE  00BC               	movwf	___ftadd@f2
 16281  08EF  0837               	movf	?___ftneg+1,w
 16282  08F0  00BD               	movwf	___ftadd@f2+1
 16283  08F1  0838               	movf	?___ftneg+2,w
 16284  08F2  00BE               	movwf	___ftadd@f2+2
 16285  08F3  3000               	movlw	0
 16286  08F4  00B9               	movwf	___ftadd@f1
 16287  08F5  30C8               	movlw	200
 16288  08F6  00BA               	movwf	___ftadd@f1+1
 16289  08F7  3042               	movlw	66
 16290  08F8  00BB               	movwf	___ftadd@f1+2
 16291  08F9  3183  235A  3188   	fcall	___ftadd
 16292  08FC  0020               	movlb	0	; select bank0
 16293  08FD  0839               	movf	?___ftadd,w
 16294  08FE  00C6               	movwf	___fttol@f1
 16295  08FF  083A               	movf	?___ftadd+1,w
 16296  0900  00C7               	movwf	___fttol@f1+1
 16297  0901  083B               	movf	?___ftadd+2,w
 16298  0902  00C8               	movwf	___fttol@f1+2
 16299  0903  318B  239B         	fcall	___fttol
 16300  0905  0020               	movlb	0	; select bank0
 16301  0906  0846               	movf	?___fttol,w
 16302  0907  0008               	return
 16303  0908                     __end_of_getDimmerLights_ValueToPercent:	
 16304                           
 16305                           	psect	text110
 16306  0B9B                     __ptext110:	
 16307 ;; *************** function ___fttol *****************
 16308 ;; Defined at:
 16309 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 16310 ;; Parameters:    Size  Location     Type
 16311 ;;  f1              3   38[BANK0 ] float 
 16312 ;; Auto vars:     Size  Location     Type
 16313 ;;  lval            4   47[BANK0 ] unsigned long 
 16314 ;;  exp1            1   51[BANK0 ] unsigned char 
 16315 ;;  sign1           1   46[BANK0 ] unsigned char 
 16316 ;; Return value:  Size  Location     Type
 16317 ;;                  4   38[BANK0 ] long 
 16318 ;; Registers used:
 16319 ;;		wreg, status,2, status,0
 16320 ;; Tracked objects:
 16321 ;;		On entry : 0/0
 16322 ;;		On exit  : 0/0
 16323 ;;		Unchanged: 0/0
 16324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16325 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16326 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16327 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16328 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16329 ;;Total ram usage:       14 bytes
 16330 ;; Hardware stack levels used:    1
 16331 ;; Hardware stack levels required when called:    3
 16332 ;; This function calls:
 16333 ;;		Nothing
 16334 ;; This function is called by:
 16335 ;;		_getDimmerLights_PercentToValue
 16336 ;;		_getDimmerLights_ValueToPercent
 16337 ;; This function uses a non-reentrant model
 16338 ;;
 16339                           
 16340                           
 16341                           ;psect for function ___fttol
 16342  0B9B                     ___fttol:	
 16343                           
 16344                           ;incstack = 0
 16345                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 16346  0B9B  0020               	movlb	0	; select bank0
 16347  0B9C  0846               	movf	___fttol@f1,w
 16348  0B9D  00CA               	movwf	??___fttol
 16349  0B9E  0847               	movf	___fttol@f1+1,w
 16350  0B9F  00CB               	movwf	??___fttol+1
 16351  0BA0  0848               	movf	___fttol@f1+2,w
 16352  0BA1  00CC               	movwf	??___fttol+2
 16353  0BA2  1003               	clrc
 16354  0BA3  0D4B               	rlf	??___fttol+1,w
 16355  0BA4  0D4C               	rlf	??___fttol+2,w
 16356  0BA5  00CD               	movwf	??___fttol+3
 16357  0BA6  084D               	movf	??___fttol+3,w
 16358  0BA7  00D3               	movwf	___fttol@exp1
 16359  0BA8  08D3               	movf	___fttol@exp1,f
 16360  0BA9  1D03               	skipz
 16361  0BAA  2BB4               	goto	l6522
 16362  0BAB  3000               	movlw	0
 16363  0BAC  00C9               	movwf	?___fttol+3
 16364  0BAD  3000               	movlw	0
 16365  0BAE  00C8               	movwf	?___fttol+2
 16366  0BAF  3000               	movlw	0
 16367  0BB0  00C7               	movwf	?___fttol+1
 16368  0BB1  3000               	movlw	0
 16369  0BB2  00C6               	movwf	?___fttol
 16370  0BB3  0008               	return
 16371  0BB4                     l6522:	
 16372  0BB4  0846               	movf	___fttol@f1,w
 16373  0BB5  00CA               	movwf	??___fttol
 16374  0BB6  0847               	movf	___fttol@f1+1,w
 16375  0BB7  00CB               	movwf	??___fttol+1
 16376  0BB8  0848               	movf	___fttol@f1+2,w
 16377  0BB9  00CC               	movwf	??___fttol+2
 16378  0BBA  3017               	movlw	23
 16379  0BBB                     u5785:	
 16380  0BBB  36CC               	lsrf	??___fttol+2,f
 16381  0BBC  0CCB               	rrf	??___fttol+1,f
 16382  0BBD  0CCA               	rrf	??___fttol,f
 16383  0BBE  0B89               	decfsz	9,f
 16384  0BBF  2BBB               	goto	u5785
 16385  0BC0  084A               	movf	??___fttol,w
 16386  0BC1  00CD               	movwf	??___fttol+3
 16387  0BC2  084D               	movf	??___fttol+3,w
 16388  0BC3  00CE               	movwf	___fttol@sign1
 16389  0BC4  17C7               	bsf	___fttol@f1+1,7
 16390  0BC5  30FF               	movlw	255
 16391  0BC6  05C6               	andwf	___fttol@f1,f
 16392  0BC7  30FF               	movlw	255
 16393  0BC8  05C7               	andwf	___fttol@f1+1,f
 16394  0BC9  3000               	movlw	0
 16395  0BCA  05C8               	andwf	___fttol@f1+2,f
 16396  0BCB  0846               	movf	___fttol@f1,w
 16397  0BCC  00CF               	movwf	___fttol@lval
 16398  0BCD  0847               	movf	___fttol@f1+1,w
 16399  0BCE  00D0               	movwf	___fttol@lval+1
 16400  0BCF  0848               	movf	___fttol@f1+2,w
 16401  0BD0  00D1               	movwf	___fttol@lval+2
 16402  0BD1  01D2               	clrf	___fttol@lval+3
 16403  0BD2  308E               	movlw	142
 16404  0BD3  02D3               	subwf	___fttol@exp1,f
 16405  0BD4  1FD3               	btfss	___fttol@exp1,7
 16406  0BD5  2BF2               	goto	l6542
 16407  0BD6  0853               	movf	___fttol@exp1,w
 16408  0BD7  3A80               	xorlw	128
 16409  0BD8  3E8F               	addlw	143
 16410  0BD9  1803               	skipnc
 16411  0BDA  2BE4               	goto	l6540
 16412  0BDB  3000               	movlw	0
 16413  0BDC  00C9               	movwf	?___fttol+3
 16414  0BDD  3000               	movlw	0
 16415  0BDE  00C8               	movwf	?___fttol+2
 16416  0BDF  3000               	movlw	0
 16417  0BE0  00C7               	movwf	?___fttol+1
 16418  0BE1  3000               	movlw	0
 16419  0BE2  00C6               	movwf	?___fttol
 16420  0BE3  0008               	return
 16421  0BE4                     l6540:	
 16422  0BE4  3001               	movlw	1
 16423  0BE5                     u5815:	
 16424  0BE5  36D2               	lsrf	___fttol@lval+3,f
 16425  0BE6  0CD1               	rrf	___fttol@lval+2,f
 16426  0BE7  0CD0               	rrf	___fttol@lval+1,f
 16427  0BE8  0CCF               	rrf	___fttol@lval,f
 16428  0BE9  0B89               	decfsz	9,f
 16429  0BEA  2BE5               	goto	u5815
 16430  0BEB  3001               	movlw	1
 16431  0BEC  00CA               	movwf	??___fttol
 16432  0BED  084A               	movf	??___fttol,w
 16433  0BEE  07D3               	addwf	___fttol@exp1,f
 16434  0BEF  1903               	btfsc	3,2
 16435  0BF0  2C0B               	goto	l6552
 16436  0BF1  2BE4               	goto	l6540
 16437  0BF2                     l6542:	
 16438  0BF2  3018               	movlw	24
 16439  0BF3  0253               	subwf	___fttol@exp1,w
 16440  0BF4  1C03               	skipc
 16441  0BF5  2C08               	goto	l6550
 16442  0BF6  3000               	movlw	0
 16443  0BF7  00C9               	movwf	?___fttol+3
 16444  0BF8  3000               	movlw	0
 16445  0BF9  00C8               	movwf	?___fttol+2
 16446  0BFA  3000               	movlw	0
 16447  0BFB  00C7               	movwf	?___fttol+1
 16448  0BFC  3000               	movlw	0
 16449  0BFD  00C6               	movwf	?___fttol
 16450  0BFE  0008               	return
 16451  0BFF                     l6548:	
 16452  0BFF  3001               	movlw	1
 16453  0C00                     u5845:	
 16454  0C00  35CF               	lslf	___fttol@lval,f
 16455  0C01  0DD0               	rlf	___fttol@lval+1,f
 16456  0C02  0DD1               	rlf	___fttol@lval+2,f
 16457  0C03  0DD2               	rlf	___fttol@lval+3,f
 16458  0C04  0B89               	decfsz	9,f
 16459  0C05  2C00               	goto	u5845
 16460  0C06  3001               	movlw	1
 16461  0C07  02D3               	subwf	___fttol@exp1,f
 16462  0C08                     l6550:	
 16463  0C08  08D3               	movf	___fttol@exp1,f
 16464  0C09  1D03               	skipz
 16465  0C0A  2BFF               	goto	l6548
 16466  0C0B                     l6552:	
 16467  0C0B  084E               	movf	___fttol@sign1,w
 16468  0C0C  1903               	btfsc	3,2
 16469  0C0D  2C19               	goto	l6556
 16470  0C0E  09CF               	comf	___fttol@lval,f
 16471  0C0F  09D0               	comf	___fttol@lval+1,f
 16472  0C10  09D1               	comf	___fttol@lval+2,f
 16473  0C11  09D2               	comf	___fttol@lval+3,f
 16474  0C12  0ACF               	incf	___fttol@lval,f
 16475  0C13  1903               	skipnz
 16476  0C14  0AD0               	incf	___fttol@lval+1,f
 16477  0C15  1903               	skipnz
 16478  0C16  0AD1               	incf	___fttol@lval+2,f
 16479  0C17  1903               	skipnz
 16480  0C18  0AD2               	incf	___fttol@lval+3,f
 16481  0C19                     l6556:	
 16482  0C19  0852               	movf	___fttol@lval+3,w
 16483  0C1A  00C9               	movwf	?___fttol+3
 16484  0C1B  0851               	movf	___fttol@lval+2,w
 16485  0C1C  00C8               	movwf	?___fttol+2
 16486  0C1D  0850               	movf	___fttol@lval+1,w
 16487  0C1E  00C7               	movwf	?___fttol+1
 16488  0C1F  084F               	movf	___fttol@lval,w
 16489  0C20  00C6               	movwf	?___fttol
 16490  0C21  0008               	return
 16491  0C22                     __end_of___fttol:	
 16492                           
 16493                           	psect	text111
 16494  1B22                     __ptext111:	
 16495 ;; *************** function ___ftneg *****************
 16496 ;; Defined at:
 16497 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 16498 ;; Parameters:    Size  Location     Type
 16499 ;;  f1              3   22[BANK0 ] float 
 16500 ;; Auto vars:     Size  Location     Type
 16501 ;;		None
 16502 ;; Return value:  Size  Location     Type
 16503 ;;                  3   22[BANK0 ] float 
 16504 ;; Registers used:
 16505 ;;		wreg
 16506 ;; Tracked objects:
 16507 ;;		On entry : 0/0
 16508 ;;		On exit  : 0/0
 16509 ;;		Unchanged: 0/0
 16510 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16511 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16512 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16513 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16514 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16515 ;;Total ram usage:        3 bytes
 16516 ;; Hardware stack levels used:    1
 16517 ;; Hardware stack levels required when called:    3
 16518 ;; This function calls:
 16519 ;;		Nothing
 16520 ;; This function is called by:
 16521 ;;		_getDimmerLights_PercentToValue
 16522 ;;		_getDimmerLights_ValueToPercent
 16523 ;; This function uses a non-reentrant model
 16524 ;;
 16525                           
 16526                           
 16527                           ;psect for function ___ftneg
 16528  1B22                     ___ftneg:	
 16529                           
 16530                           ;incstack = 0
 16531                           ; Regs used in ___ftneg: [wreg]
 16532  1B22  0020               	movlb	0	; select bank0
 16533  1B23  0838               	movf	___ftneg@f1+2,w
 16534  1B24  0437               	iorwf	___ftneg@f1+1,w
 16535  1B25  0436               	iorwf	___ftneg@f1,w
 16536  1B26  1903               	skipnz
 16537  1B27  0008               	return
 16538  1B28  3080               	movlw	128
 16539  1B29  06B8               	xorwf	___ftneg@f1+2,f
 16540  1B2A  0008               	return
 16541  1B2B                     __end_of___ftneg:	
 16542                           
 16543                           	psect	text112
 16544  0D3B                     __ptext112:	
 16545 ;; *************** function ___ftdiv *****************
 16546 ;; Defined at:
 16547 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 16548 ;; Parameters:    Size  Location     Type
 16549 ;;  f2              3    6[BANK0 ] float 
 16550 ;;  f1              3    9[BANK0 ] float 
 16551 ;; Auto vars:     Size  Location     Type
 16552 ;;  f3              3   17[BANK0 ] float 
 16553 ;;  sign            1   21[BANK0 ] unsigned char 
 16554 ;;  exp             1   20[BANK0 ] unsigned char 
 16555 ;;  cntr            1   16[BANK0 ] unsigned char 
 16556 ;; Return value:  Size  Location     Type
 16557 ;;                  3    6[BANK0 ] float 
 16558 ;; Registers used:
 16559 ;;		wreg, status,2, status,0, pclath, cstack
 16560 ;; Tracked objects:
 16561 ;;		On entry : 0/0
 16562 ;;		On exit  : 0/0
 16563 ;;		Unchanged: 0/0
 16564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16565 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16566 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16567 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16568 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16569 ;;Total ram usage:       16 bytes
 16570 ;; Hardware stack levels used:    1
 16571 ;; Hardware stack levels required when called:    4
 16572 ;; This function calls:
 16573 ;;		___ftpack
 16574 ;; This function is called by:
 16575 ;;		_getDimmerLights_PercentToValue
 16576 ;;		_getDimmerLights_ValueToPercent
 16577 ;; This function uses a non-reentrant model
 16578 ;;
 16579                           
 16580                           
 16581                           ;psect for function ___ftdiv
 16582  0D3B                     ___ftdiv:	
 16583                           
 16584                           ;incstack = 0
 16585                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 16586  0D3B  0020               	movlb	0	; select bank0
 16587  0D3C  0829               	movf	___ftdiv@f1,w
 16588  0D3D  00AC               	movwf	??___ftdiv
 16589  0D3E  082A               	movf	___ftdiv@f1+1,w
 16590  0D3F  00AD               	movwf	??___ftdiv+1
 16591  0D40  082B               	movf	___ftdiv@f1+2,w
 16592  0D41  00AE               	movwf	??___ftdiv+2
 16593  0D42  1003               	clrc
 16594  0D43  0D2D               	rlf	??___ftdiv+1,w
 16595  0D44  0D2E               	rlf	??___ftdiv+2,w
 16596  0D45  00AF               	movwf	??___ftdiv+3
 16597  0D46  082F               	movf	??___ftdiv+3,w
 16598  0D47  00B4               	movwf	___ftdiv@exp
 16599  0D48  08B4               	movf	___ftdiv@exp,f
 16600  0D49  1D03               	skipz
 16601  0D4A  2D52               	goto	l6422
 16602  0D4B  3000               	movlw	0
 16603  0D4C  00A6               	movwf	?___ftdiv
 16604  0D4D  3000               	movlw	0
 16605  0D4E  00A7               	movwf	?___ftdiv+1
 16606  0D4F  3000               	movlw	0
 16607  0D50  00A8               	movwf	?___ftdiv+2
 16608  0D51  0008               	return
 16609  0D52                     l6422:	
 16610  0D52  0826               	movf	___ftdiv@f2,w
 16611  0D53  00AC               	movwf	??___ftdiv
 16612  0D54  0827               	movf	___ftdiv@f2+1,w
 16613  0D55  00AD               	movwf	??___ftdiv+1
 16614  0D56  0828               	movf	___ftdiv@f2+2,w
 16615  0D57  00AE               	movwf	??___ftdiv+2
 16616  0D58  1003               	clrc
 16617  0D59  0D2D               	rlf	??___ftdiv+1,w
 16618  0D5A  0D2E               	rlf	??___ftdiv+2,w
 16619  0D5B  00AF               	movwf	??___ftdiv+3
 16620  0D5C  082F               	movf	??___ftdiv+3,w
 16621  0D5D  00B5               	movwf	___ftdiv@sign
 16622  0D5E  08B5               	movf	___ftdiv@sign,f
 16623  0D5F  1D03               	skipz
 16624  0D60  2D68               	goto	l6428
 16625  0D61  3000               	movlw	0
 16626  0D62  00A6               	movwf	?___ftdiv
 16627  0D63  3000               	movlw	0
 16628  0D64  00A7               	movwf	?___ftdiv+1
 16629  0D65  3000               	movlw	0
 16630  0D66  00A8               	movwf	?___ftdiv+2
 16631  0D67  0008               	return
 16632  0D68                     l6428:	
 16633  0D68  3000               	movlw	0
 16634  0D69  00B1               	movwf	___ftdiv@f3
 16635  0D6A  3000               	movlw	0
 16636  0D6B  00B2               	movwf	___ftdiv@f3+1
 16637  0D6C  3000               	movlw	0
 16638  0D6D  00B3               	movwf	___ftdiv@f3+2
 16639  0D6E  3089               	movlw	137
 16640  0D6F  0735               	addwf	___ftdiv@sign,w
 16641  0D70  00AC               	movwf	??___ftdiv
 16642  0D71  082C               	movf	??___ftdiv,w
 16643  0D72  02B4               	subwf	___ftdiv@exp,f
 16644  0D73  0829               	movf	___ftdiv@f1,w
 16645  0D74  00AC               	movwf	??___ftdiv
 16646  0D75  082A               	movf	___ftdiv@f1+1,w
 16647  0D76  00AD               	movwf	??___ftdiv+1
 16648  0D77  082B               	movf	___ftdiv@f1+2,w
 16649  0D78  00AE               	movwf	??___ftdiv+2
 16650  0D79  3010               	movlw	16
 16651  0D7A                     u5585:	
 16652  0D7A  36AE               	lsrf	??___ftdiv+2,f
 16653  0D7B  0CAD               	rrf	??___ftdiv+1,f
 16654  0D7C  0CAC               	rrf	??___ftdiv,f
 16655  0D7D  0B89               	decfsz	9,f
 16656  0D7E  2D7A               	goto	u5585
 16657  0D7F  082C               	movf	??___ftdiv,w
 16658  0D80  00AF               	movwf	??___ftdiv+3
 16659  0D81  082F               	movf	??___ftdiv+3,w
 16660  0D82  00B5               	movwf	___ftdiv@sign
 16661  0D83  0826               	movf	___ftdiv@f2,w
 16662  0D84  00AC               	movwf	??___ftdiv
 16663  0D85  0827               	movf	___ftdiv@f2+1,w
 16664  0D86  00AD               	movwf	??___ftdiv+1
 16665  0D87  0828               	movf	___ftdiv@f2+2,w
 16666  0D88  00AE               	movwf	??___ftdiv+2
 16667  0D89  3010               	movlw	16
 16668  0D8A                     u5595:	
 16669  0D8A  36AE               	lsrf	??___ftdiv+2,f
 16670  0D8B  0CAD               	rrf	??___ftdiv+1,f
 16671  0D8C  0CAC               	rrf	??___ftdiv,f
 16672  0D8D  0B89               	decfsz	9,f
 16673  0D8E  2D8A               	goto	u5595
 16674  0D8F  082C               	movf	??___ftdiv,w
 16675  0D90  00AF               	movwf	??___ftdiv+3
 16676  0D91  082F               	movf	??___ftdiv+3,w
 16677  0D92  06B5               	xorwf	___ftdiv@sign,f
 16678  0D93  3080               	movlw	128
 16679  0D94  00AC               	movwf	??___ftdiv
 16680  0D95  082C               	movf	??___ftdiv,w
 16681  0D96  05B5               	andwf	___ftdiv@sign,f
 16682  0D97  17AA               	bsf	___ftdiv@f1+1,7
 16683  0D98  30FF               	movlw	255
 16684  0D99  05A9               	andwf	___ftdiv@f1,f
 16685  0D9A  30FF               	movlw	255
 16686  0D9B  05AA               	andwf	___ftdiv@f1+1,f
 16687  0D9C  3000               	movlw	0
 16688  0D9D  05AB               	andwf	___ftdiv@f1+2,f
 16689  0D9E  17A7               	bsf	___ftdiv@f2+1,7
 16690  0D9F  30FF               	movlw	255
 16691  0DA0  05A6               	andwf	___ftdiv@f2,f
 16692  0DA1  30FF               	movlw	255
 16693  0DA2  05A7               	andwf	___ftdiv@f2+1,f
 16694  0DA3  3000               	movlw	0
 16695  0DA4  05A8               	andwf	___ftdiv@f2+2,f
 16696  0DA5  3018               	movlw	24
 16697  0DA6  00AC               	movwf	??___ftdiv
 16698  0DA7  082C               	movf	??___ftdiv,w
 16699  0DA8  00B0               	movwf	___ftdiv@cntr
 16700  0DA9                     l6442:	
 16701  0DA9  3001               	movlw	1
 16702  0DAA                     u5605:	
 16703  0DAA  35B1               	lslf	___ftdiv@f3,f
 16704  0DAB  0DB2               	rlf	___ftdiv@f3+1,f
 16705  0DAC  0DB3               	rlf	___ftdiv@f3+2,f
 16706  0DAD  0B89               	decfsz	9,f
 16707  0DAE  2DAA               	goto	u5605
 16708  0DAF  0828               	movf	___ftdiv@f2+2,w
 16709  0DB0  022B               	subwf	___ftdiv@f1+2,w
 16710  0DB1  1D03               	skipz
 16711  0DB2  2DB9               	goto	u5615
 16712  0DB3  0827               	movf	___ftdiv@f2+1,w
 16713  0DB4  022A               	subwf	___ftdiv@f1+1,w
 16714  0DB5  1D03               	skipz
 16715  0DB6  2DB9               	goto	u5615
 16716  0DB7  0826               	movf	___ftdiv@f2,w
 16717  0DB8  0229               	subwf	___ftdiv@f1,w
 16718  0DB9                     u5615:	
 16719  0DB9  1C03               	skipc
 16720  0DBA  2DC2               	goto	l6450
 16721  0DBB  0826               	movf	___ftdiv@f2,w
 16722  0DBC  02A9               	subwf	___ftdiv@f1,f
 16723  0DBD  0827               	movf	___ftdiv@f2+1,w
 16724  0DBE  3BAA               	subwfb	___ftdiv@f1+1,f
 16725  0DBF  0828               	movf	___ftdiv@f2+2,w
 16726  0DC0  3BAB               	subwfb	___ftdiv@f1+2,f
 16727  0DC1  1431               	bsf	___ftdiv@f3,0
 16728  0DC2                     l6450:	
 16729  0DC2  3001               	movlw	1
 16730  0DC3                     u5625:	
 16731  0DC3  35A9               	lslf	___ftdiv@f1,f
 16732  0DC4  0DAA               	rlf	___ftdiv@f1+1,f
 16733  0DC5  0DAB               	rlf	___ftdiv@f1+2,f
 16734  0DC6  0B89               	decfsz	9,f
 16735  0DC7  2DC3               	goto	u5625
 16736  0DC8  3001               	movlw	1
 16737  0DC9  02B0               	subwf	___ftdiv@cntr,f
 16738  0DCA  1D03               	btfss	3,2
 16739  0DCB  2DA9               	goto	l6442
 16740  0DCC  0831               	movf	___ftdiv@f3,w
 16741  0DCD  00F2               	movwf	___ftpack@arg
 16742  0DCE  0832               	movf	___ftdiv@f3+1,w
 16743  0DCF  00F3               	movwf	___ftpack@arg+1
 16744  0DD0  0833               	movf	___ftdiv@f3+2,w
 16745  0DD1  00F4               	movwf	___ftpack@arg+2
 16746  0DD2  0834               	movf	___ftdiv@exp,w
 16747  0DD3  00AC               	movwf	??___ftdiv
 16748  0DD4  082C               	movf	??___ftdiv,w
 16749  0DD5  00F5               	movwf	___ftpack@exp
 16750  0DD6  0835               	movf	___ftdiv@sign,w
 16751  0DD7  00AD               	movwf	??___ftdiv+1
 16752  0DD8  082D               	movf	??___ftdiv+1,w
 16753  0DD9  00F6               	movwf	___ftpack@sign
 16754  0DDA  3197  27A0         	fcall	___ftpack
 16755  0DDC  0872               	movf	?___ftpack,w
 16756  0DDD  0020               	movlb	0	; select bank0
 16757  0DDE  00A6               	movwf	?___ftdiv
 16758  0DDF  0873               	movf	?___ftpack+1,w
 16759  0DE0  00A7               	movwf	?___ftdiv+1
 16760  0DE1  0874               	movf	?___ftpack+2,w
 16761  0DE2  00A8               	movwf	?___ftdiv+2
 16762  0DE3  0008               	return
 16763  0DE4                     __end_of___ftdiv:	
 16764                           
 16765                           	psect	text113
 16766  035A                     __ptext113:	
 16767 ;; *************** function ___ftadd *****************
 16768 ;; Defined at:
 16769 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 16770 ;; Parameters:    Size  Location     Type
 16771 ;;  f1              3   25[BANK0 ] float 
 16772 ;;  f2              3   28[BANK0 ] float 
 16773 ;; Auto vars:     Size  Location     Type
 16774 ;;  exp1            1   37[BANK0 ] unsigned char 
 16775 ;;  exp2            1   36[BANK0 ] unsigned char 
 16776 ;;  sign            1   35[BANK0 ] unsigned char 
 16777 ;; Return value:  Size  Location     Type
 16778 ;;                  3   25[BANK0 ] float 
 16779 ;; Registers used:
 16780 ;;		wreg, status,2, status,0, pclath, cstack
 16781 ;; Tracked objects:
 16782 ;;		On entry : 0/0
 16783 ;;		On exit  : 0/0
 16784 ;;		Unchanged: 0/0
 16785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16786 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16787 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16788 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16789 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16790 ;;Total ram usage:       13 bytes
 16791 ;; Hardware stack levels used:    1
 16792 ;; Hardware stack levels required when called:    4
 16793 ;; This function calls:
 16794 ;;		___ftpack
 16795 ;; This function is called by:
 16796 ;;		_getDimmerLights_PercentToValue
 16797 ;;		_getDimmerLights_ValueToPercent
 16798 ;; This function uses a non-reentrant model
 16799 ;;
 16800                           
 16801                           
 16802                           ;psect for function ___ftadd
 16803  035A                     ___ftadd:	
 16804                           
 16805                           ;incstack = 0
 16806                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 16807  035A  0020               	movlb	0	; select bank0
 16808  035B  0839               	movf	___ftadd@f1,w
 16809  035C  00BF               	movwf	??___ftadd
 16810  035D  083A               	movf	___ftadd@f1+1,w
 16811  035E  00C0               	movwf	??___ftadd+1
 16812  035F  083B               	movf	___ftadd@f1+2,w
 16813  0360  00C1               	movwf	??___ftadd+2
 16814  0361  1003               	clrc
 16815  0362  0D40               	rlf	??___ftadd+1,w
 16816  0363  0D41               	rlf	??___ftadd+2,w
 16817  0364  00C2               	movwf	??___ftadd+3
 16818  0365  0842               	movf	??___ftadd+3,w
 16819  0366  00C5               	movwf	___ftadd@exp1
 16820  0367  083C               	movf	___ftadd@f2,w
 16821  0368  00BF               	movwf	??___ftadd
 16822  0369  083D               	movf	___ftadd@f2+1,w
 16823  036A  00C0               	movwf	??___ftadd+1
 16824  036B  083E               	movf	___ftadd@f2+2,w
 16825  036C  00C1               	movwf	??___ftadd+2
 16826  036D  1003               	clrc
 16827  036E  0D40               	rlf	??___ftadd+1,w
 16828  036F  0D41               	rlf	??___ftadd+2,w
 16829  0370  00C2               	movwf	??___ftadd+3
 16830  0371  0842               	movf	??___ftadd+3,w
 16831  0372  00C4               	movwf	___ftadd@exp2
 16832  0373  0845               	movf	___ftadd@exp1,w
 16833  0374  1903               	btfsc	3,2
 16834  0375  2B82               	goto	l6352
 16835  0376  0844               	movf	___ftadd@exp2,w
 16836  0377  0245               	subwf	___ftadd@exp1,w
 16837  0378  1803               	skipnc
 16838  0379  2B89               	goto	l6356
 16839  037A  0345               	decf	___ftadd@exp1,w
 16840  037B  3AFF               	xorlw	255
 16841  037C  0744               	addwf	___ftadd@exp2,w
 16842  037D  00BF               	movwf	??___ftadd
 16843  037E  3019               	movlw	25
 16844  037F  023F               	subwf	??___ftadd,w
 16845  0380  1C03               	skipc
 16846  0381  2B89               	goto	l6356
 16847  0382                     l6352:	
 16848  0382  083C               	movf	___ftadd@f2,w
 16849  0383  00B9               	movwf	?___ftadd
 16850  0384  083D               	movf	___ftadd@f2+1,w
 16851  0385  00BA               	movwf	?___ftadd+1
 16852  0386  083E               	movf	___ftadd@f2+2,w
 16853  0387  00BB               	movwf	?___ftadd+2
 16854  0388  0008               	return
 16855  0389                     l6356:	
 16856  0389  0844               	movf	___ftadd@exp2,w
 16857  038A  1903               	btfsc	3,2
 16858  038B  0008               	return
 16859  038C  0845               	movf	___ftadd@exp1,w
 16860  038D  0244               	subwf	___ftadd@exp2,w
 16861  038E  1803               	skipnc
 16862  038F  2B98               	goto	l6362
 16863  0390  0344               	decf	___ftadd@exp2,w
 16864  0391  3AFF               	xorlw	255
 16865  0392  0745               	addwf	___ftadd@exp1,w
 16866  0393  00BF               	movwf	??___ftadd
 16867  0394  3019               	movlw	25
 16868  0395  023F               	subwf	??___ftadd,w
 16869  0396  1803               	btfsc	3,0
 16870  0397  0008               	return
 16871  0398                     l6362:	
 16872  0398  3006               	movlw	6
 16873  0399  00BF               	movwf	??___ftadd
 16874  039A  083F               	movf	??___ftadd,w
 16875  039B  00C3               	movwf	___ftadd@sign
 16876  039C  1BBB               	btfsc	___ftadd@f1+2,7
 16877  039D  17C3               	bsf	___ftadd@sign,7
 16878  039E  1BBE               	btfsc	___ftadd@f2+2,7
 16879  039F  1743               	bsf	___ftadd@sign,6
 16880  03A0  17BA               	bsf	___ftadd@f1+1,7
 16881  03A1  30FF               	movlw	255
 16882  03A2  05B9               	andwf	___ftadd@f1,f
 16883  03A3  30FF               	movlw	255
 16884  03A4  05BA               	andwf	___ftadd@f1+1,f
 16885  03A5  3000               	movlw	0
 16886  03A6  05BB               	andwf	___ftadd@f1+2,f
 16887  03A7  17BD               	bsf	___ftadd@f2+1,7
 16888  03A8  30FF               	movlw	255
 16889  03A9  05BC               	andwf	___ftadd@f2,f
 16890  03AA  30FF               	movlw	255
 16891  03AB  05BD               	andwf	___ftadd@f2+1,f
 16892  03AC  3000               	movlw	0
 16893  03AD  05BE               	andwf	___ftadd@f2+2,f
 16894  03AE  0844               	movf	___ftadd@exp2,w
 16895  03AF  0245               	subwf	___ftadd@exp1,w
 16896  03B0  1803               	skipnc
 16897  03B1  2BD4               	goto	l6384
 16898  03B2                     l6374:	
 16899  03B2  3001               	movlw	1
 16900  03B3                     u5425:	
 16901  03B3  35BC               	lslf	___ftadd@f2,f
 16902  03B4  0DBD               	rlf	___ftadd@f2+1,f
 16903  03B5  0DBE               	rlf	___ftadd@f2+2,f
 16904  03B6  0B89               	decfsz	9,f
 16905  03B7  2BB3               	goto	u5425
 16906  03B8  3001               	movlw	1
 16907  03B9  02C4               	subwf	___ftadd@exp2,f
 16908  03BA  0844               	movf	___ftadd@exp2,w
 16909  03BB  0645               	xorwf	___ftadd@exp1,w
 16910  03BC  1903               	skipnz
 16911  03BD  2BCF               	goto	l6382
 16912  03BE  3001               	movlw	1
 16913  03BF  02C3               	subwf	___ftadd@sign,f
 16914  03C0  0843               	movf	___ftadd@sign,w
 16915  03C1  3907               	andlw	7
 16916  03C2  1903               	btfsc	3,2
 16917  03C3  2BCF               	goto	l6382
 16918  03C4  2BB2               	goto	l6374
 16919  03C5                     l6380:	
 16920  03C5  3001               	movlw	1
 16921  03C6                     u5455:	
 16922  03C6  36BB               	lsrf	___ftadd@f1+2,f
 16923  03C7  0CBA               	rrf	___ftadd@f1+1,f
 16924  03C8  0CB9               	rrf	___ftadd@f1,f
 16925  03C9  0B89               	decfsz	9,f
 16926  03CA  2BC6               	goto	u5455
 16927  03CB  3001               	movlw	1
 16928  03CC  00BF               	movwf	??___ftadd
 16929  03CD  083F               	movf	??___ftadd,w
 16930  03CE  07C5               	addwf	___ftadd@exp1,f
 16931  03CF                     l6382:	
 16932  03CF  0845               	movf	___ftadd@exp1,w
 16933  03D0  0644               	xorwf	___ftadd@exp2,w
 16934  03D1  1903               	btfsc	3,2
 16935  03D2  2BF9               	goto	l3173
 16936  03D3  2BC5               	goto	l6380
 16937  03D4                     l6384:	
 16938  03D4  0845               	movf	___ftadd@exp1,w
 16939  03D5  0244               	subwf	___ftadd@exp2,w
 16940  03D6  1803               	skipnc
 16941  03D7  2BF9               	goto	l3173
 16942  03D8                     l6386:	
 16943  03D8  3001               	movlw	1
 16944  03D9                     u5485:	
 16945  03D9  35B9               	lslf	___ftadd@f1,f
 16946  03DA  0DBA               	rlf	___ftadd@f1+1,f
 16947  03DB  0DBB               	rlf	___ftadd@f1+2,f
 16948  03DC  0B89               	decfsz	9,f
 16949  03DD  2BD9               	goto	u5485
 16950  03DE  3001               	movlw	1
 16951  03DF  02C5               	subwf	___ftadd@exp1,f
 16952  03E0  0844               	movf	___ftadd@exp2,w
 16953  03E1  0645               	xorwf	___ftadd@exp1,w
 16954  03E2  1903               	skipnz
 16955  03E3  2BF5               	goto	l6394
 16956  03E4  3001               	movlw	1
 16957  03E5  02C3               	subwf	___ftadd@sign,f
 16958  03E6  0843               	movf	___ftadd@sign,w
 16959  03E7  3907               	andlw	7
 16960  03E8  1903               	btfsc	3,2
 16961  03E9  2BF5               	goto	l6394
 16962  03EA  2BD8               	goto	l6386
 16963  03EB                     l6392:	
 16964  03EB  3001               	movlw	1
 16965  03EC                     u5515:	
 16966  03EC  36BE               	lsrf	___ftadd@f2+2,f
 16967  03ED  0CBD               	rrf	___ftadd@f2+1,f
 16968  03EE  0CBC               	rrf	___ftadd@f2,f
 16969  03EF  0B89               	decfsz	9,f
 16970  03F0  2BEC               	goto	u5515
 16971  03F1  3001               	movlw	1
 16972  03F2  00BF               	movwf	??___ftadd
 16973  03F3  083F               	movf	??___ftadd,w
 16974  03F4  07C4               	addwf	___ftadd@exp2,f
 16975  03F5                     l6394:	
 16976  03F5  0845               	movf	___ftadd@exp1,w
 16977  03F6  0644               	xorwf	___ftadd@exp2,w
 16978  03F7  1D03               	skipz
 16979  03F8  2BEB               	goto	l6392
 16980  03F9                     l3173:	
 16981  03F9  1FC3               	btfss	___ftadd@sign,7
 16982  03FA  2C0B               	goto	l6398
 16983  03FB  30FF               	movlw	255
 16984  03FC  06B9               	xorwf	___ftadd@f1,f
 16985  03FD  30FF               	movlw	255
 16986  03FE  06BA               	xorwf	___ftadd@f1+1,f
 16987  03FF  30FF               	movlw	255
 16988  0400  06BB               	xorwf	___ftadd@f1+2,f
 16989  0401  3001               	movlw	1
 16990  0402  07B9               	addwf	___ftadd@f1,f
 16991  0403  3000               	movlw	0
 16992  0404  1803               	skipnc
 16993  0405  3001               	movlw	1
 16994  0406  07BA               	addwf	___ftadd@f1+1,f
 16995  0407  3000               	movlw	0
 16996  0408  1803               	skipnc
 16997  0409  3001               	movlw	1
 16998  040A  07BB               	addwf	___ftadd@f1+2,f
 16999  040B                     l6398:	
 17000  040B  1F43               	btfss	___ftadd@sign,6
 17001  040C  2C1D               	goto	l6402
 17002  040D  30FF               	movlw	255
 17003  040E  06BC               	xorwf	___ftadd@f2,f
 17004  040F  30FF               	movlw	255
 17005  0410  06BD               	xorwf	___ftadd@f2+1,f
 17006  0411  30FF               	movlw	255
 17007  0412  06BE               	xorwf	___ftadd@f2+2,f
 17008  0413  3001               	movlw	1
 17009  0414  07BC               	addwf	___ftadd@f2,f
 17010  0415  3000               	movlw	0
 17011  0416  1803               	skipnc
 17012  0417  3001               	movlw	1
 17013  0418  07BD               	addwf	___ftadd@f2+1,f
 17014  0419  3000               	movlw	0
 17015  041A  1803               	skipnc
 17016  041B  3001               	movlw	1
 17017  041C  07BE               	addwf	___ftadd@f2+2,f
 17018  041D                     l6402:	
 17019  041D  01C3               	clrf	___ftadd@sign
 17020  041E  0839               	movf	___ftadd@f1,w
 17021  041F  07BC               	addwf	___ftadd@f2,f
 17022  0420  083A               	movf	___ftadd@f1+1,w
 17023  0421  3DBD               	addwfc	___ftadd@f2+1,f
 17024  0422  083B               	movf	___ftadd@f1+2,w
 17025  0423  3DBE               	addwfc	___ftadd@f2+2,f
 17026  0424  1FBE               	btfss	___ftadd@f2+2,7
 17027  0425  2C38               	goto	l6412
 17028  0426  30FF               	movlw	255
 17029  0427  06BC               	xorwf	___ftadd@f2,f
 17030  0428  30FF               	movlw	255
 17031  0429  06BD               	xorwf	___ftadd@f2+1,f
 17032  042A  30FF               	movlw	255
 17033  042B  06BE               	xorwf	___ftadd@f2+2,f
 17034  042C  3001               	movlw	1
 17035  042D  07BC               	addwf	___ftadd@f2,f
 17036  042E  3000               	movlw	0
 17037  042F  1803               	skipnc
 17038  0430  3001               	movlw	1
 17039  0431  07BD               	addwf	___ftadd@f2+1,f
 17040  0432  3000               	movlw	0
 17041  0433  1803               	skipnc
 17042  0434  3001               	movlw	1
 17043  0435  07BE               	addwf	___ftadd@f2+2,f
 17044  0436  01C3               	clrf	___ftadd@sign
 17045  0437  0AC3               	incf	___ftadd@sign,f
 17046  0438                     l6412:	
 17047  0438  083C               	movf	___ftadd@f2,w
 17048  0439  00F2               	movwf	___ftpack@arg
 17049  043A  083D               	movf	___ftadd@f2+1,w
 17050  043B  00F3               	movwf	___ftpack@arg+1
 17051  043C  083E               	movf	___ftadd@f2+2,w
 17052  043D  00F4               	movwf	___ftpack@arg+2
 17053  043E  0845               	movf	___ftadd@exp1,w
 17054  043F  00BF               	movwf	??___ftadd
 17055  0440  083F               	movf	??___ftadd,w
 17056  0441  00F5               	movwf	___ftpack@exp
 17057  0442  0843               	movf	___ftadd@sign,w
 17058  0443  00C0               	movwf	??___ftadd+1
 17059  0444  0840               	movf	??___ftadd+1,w
 17060  0445  00F6               	movwf	___ftpack@sign
 17061  0446  3197  27A0         	fcall	___ftpack
 17062  0448  0872               	movf	?___ftpack,w
 17063  0449  0020               	movlb	0	; select bank0
 17064  044A  00B9               	movwf	?___ftadd
 17065  044B  0873               	movf	?___ftpack+1,w
 17066  044C  00BA               	movwf	?___ftadd+1
 17067  044D  0874               	movf	?___ftpack+2,w
 17068  044E  00BB               	movwf	?___ftadd+2
 17069  044F  0008               	return
 17070  0450                     __end_of___ftadd:	
 17071                           
 17072                           	psect	text114
 17073  1FDE                     __ptext114:	
 17074 ;; *************** function ___awtoft *****************
 17075 ;; Defined at:
 17076 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 17077 ;; Parameters:    Size  Location     Type
 17078 ;;  c               2    0[BANK0 ] int 
 17079 ;; Auto vars:     Size  Location     Type
 17080 ;;  sign            1    5[BANK0 ] unsigned char 
 17081 ;; Return value:  Size  Location     Type
 17082 ;;                  3    0[BANK0 ] float 
 17083 ;; Registers used:
 17084 ;;		wreg, status,2, status,0, pclath, cstack
 17085 ;; Tracked objects:
 17086 ;;		On entry : 0/0
 17087 ;;		On exit  : 0/0
 17088 ;;		Unchanged: 0/0
 17089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17090 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17091 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17092 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17093 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17094 ;;Total ram usage:        6 bytes
 17095 ;; Hardware stack levels used:    1
 17096 ;; Hardware stack levels required when called:    4
 17097 ;; This function calls:
 17098 ;;		___ftpack
 17099 ;; This function is called by:
 17100 ;;		_getDimmerLights_PercentToValue
 17101 ;;		_getDimmerLights_ValueToPercent
 17102 ;; This function uses a non-reentrant model
 17103 ;;
 17104                           
 17105                           
 17106                           ;psect for function ___awtoft
 17107  1FDE                     ___awtoft:	
 17108                           
 17109                           ;incstack = 0
 17110                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 17111  1FDE  0020               	movlb	0	; select bank0
 17112  1FDF  01A5               	clrf	___awtoft@sign
 17113  1FE0  1FA1               	btfss	___awtoft@c+1,7
 17114  1FE1  2FE9               	goto	l9098
 17115  1FE2  09A0               	comf	___awtoft@c,f
 17116  1FE3  09A1               	comf	___awtoft@c+1,f
 17117  1FE4  0AA0               	incf	___awtoft@c,f
 17118  1FE5  1903               	skipnz
 17119  1FE6  0AA1               	incf	___awtoft@c+1,f
 17120  1FE7  01A5               	clrf	___awtoft@sign
 17121  1FE8  0AA5               	incf	___awtoft@sign,f
 17122  1FE9                     l9098:	
 17123  1FE9  0820               	movf	___awtoft@c,w
 17124  1FEA  00F2               	movwf	___ftpack@arg
 17125  1FEB  0821               	movf	___awtoft@c+1,w
 17126  1FEC  00F3               	movwf	___ftpack@arg+1
 17127  1FED  01F4               	clrf	___ftpack@arg+2
 17128  1FEE  308E               	movlw	142
 17129  1FEF  00A3               	movwf	??___awtoft
 17130  1FF0  0823               	movf	??___awtoft,w
 17131  1FF1  00F5               	movwf	___ftpack@exp
 17132  1FF2  0825               	movf	___awtoft@sign,w
 17133  1FF3  00A4               	movwf	??___awtoft+1
 17134  1FF4  0824               	movf	??___awtoft+1,w
 17135  1FF5  00F6               	movwf	___ftpack@sign
 17136  1FF6  3197  27A0         	fcall	___ftpack
 17137  1FF8  0872               	movf	?___ftpack,w
 17138  1FF9  0020               	movlb	0	; select bank0
 17139  1FFA  00A0               	movwf	?___awtoft
 17140  1FFB  0873               	movf	?___ftpack+1,w
 17141  1FFC  00A1               	movwf	?___awtoft+1
 17142  1FFD  0874               	movf	?___ftpack+2,w
 17143  1FFE  00A2               	movwf	?___awtoft+2
 17144  1FFF  0008               	return
 17145  2000                     __end_of___awtoft:	
 17146                           
 17147                           	psect	text115
 17148  17A0                     __ptext115:	
 17149 ;; *************** function ___ftpack *****************
 17150 ;; Defined at:
 17151 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 17152 ;; Parameters:    Size  Location     Type
 17153 ;;  arg             3    2[COMMON] unsigned um
 17154 ;;  exp             1    5[COMMON] unsigned char 
 17155 ;;  sign            1    6[COMMON] unsigned char 
 17156 ;; Auto vars:     Size  Location     Type
 17157 ;;		None
 17158 ;; Return value:  Size  Location     Type
 17159 ;;                  3    2[COMMON] float 
 17160 ;; Registers used:
 17161 ;;		wreg, status,2, status,0
 17162 ;; Tracked objects:
 17163 ;;		On entry : 0/0
 17164 ;;		On exit  : 0/0
 17165 ;;		Unchanged: 0/0
 17166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17167 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17169 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17170 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17171 ;;Total ram usage:        8 bytes
 17172 ;; Hardware stack levels used:    1
 17173 ;; Hardware stack levels required when called:    3
 17174 ;; This function calls:
 17175 ;;		Nothing
 17176 ;; This function is called by:
 17177 ;;		___awtoft
 17178 ;;		___ftadd
 17179 ;;		___ftdiv
 17180 ;;		___ftmul
 17181 ;; This function uses a non-reentrant model
 17182 ;;
 17183                           
 17184                           
 17185                           ;psect for function ___ftpack
 17186  17A0                     ___ftpack:	
 17187                           
 17188                           ;incstack = 0
 17189                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 17190  17A0  0875               	movf	___ftpack@exp,w
 17191  17A1  1903               	btfsc	3,2
 17192  17A2  2FA8               	goto	l6200
 17193  17A3  0874               	movf	___ftpack@arg+2,w
 17194  17A4  0473               	iorwf	___ftpack@arg+1,w
 17195  17A5  0472               	iorwf	___ftpack@arg,w
 17196  17A6  1D03               	skipz
 17197  17A7  2FB9               	goto	l6206
 17198  17A8                     l6200:	
 17199  17A8  3000               	movlw	0
 17200  17A9  00F2               	movwf	?___ftpack
 17201  17AA  3000               	movlw	0
 17202  17AB  00F3               	movwf	?___ftpack+1
 17203  17AC  3000               	movlw	0
 17204  17AD  00F4               	movwf	?___ftpack+2
 17205  17AE  0008               	return
 17206  17AF                     l6204:	
 17207  17AF  3001               	movlw	1
 17208  17B0  00F7               	movwf	??___ftpack
 17209  17B1  0877               	movf	??___ftpack,w
 17210  17B2  07F5               	addwf	___ftpack@exp,f
 17211  17B3  3001               	movlw	1
 17212  17B4                     u5035:	
 17213  17B4  36F4               	lsrf	___ftpack@arg+2,f
 17214  17B5  0CF3               	rrf	___ftpack@arg+1,f
 17215  17B6  0CF2               	rrf	___ftpack@arg,f
 17216  17B7  0B89               	decfsz	9,f
 17217  17B8  2FB4               	goto	u5035
 17218  17B9                     l6206:	
 17219  17B9  30FE               	movlw	254
 17220  17BA  0574               	andwf	___ftpack@arg+2,w
 17221  17BB  1903               	btfsc	3,2
 17222  17BC  2FD2               	goto	l3144
 17223  17BD  2FAF               	goto	l6204
 17224  17BE                     l6208:	
 17225  17BE  3001               	movlw	1
 17226  17BF  00F7               	movwf	??___ftpack
 17227  17C0  0877               	movf	??___ftpack,w
 17228  17C1  07F5               	addwf	___ftpack@exp,f
 17229  17C2  3001               	movlw	1
 17230  17C3  07F2               	addwf	___ftpack@arg,f
 17231  17C4  3000               	movlw	0
 17232  17C5  1803               	skipnc
 17233  17C6  3001               	movlw	1
 17234  17C7  07F3               	addwf	___ftpack@arg+1,f
 17235  17C8  3000               	movlw	0
 17236  17C9  1803               	skipnc
 17237  17CA  3001               	movlw	1
 17238  17CB  07F4               	addwf	___ftpack@arg+2,f
 17239  17CC  3001               	movlw	1
 17240  17CD                     u5055:	
 17241  17CD  36F4               	lsrf	___ftpack@arg+2,f
 17242  17CE  0CF3               	rrf	___ftpack@arg+1,f
 17243  17CF  0CF2               	rrf	___ftpack@arg,f
 17244  17D0  0B89               	decfsz	9,f
 17245  17D1  2FCD               	goto	u5055
 17246  17D2                     l3144:	
 17247  17D2  30FF               	movlw	255
 17248  17D3  0574               	andwf	___ftpack@arg+2,w
 17249  17D4  1903               	btfsc	3,2
 17250  17D5  2FDF               	goto	l6216
 17251  17D6  2FBE               	goto	l6208
 17252  17D7                     l6214:	
 17253  17D7  3001               	movlw	1
 17254  17D8  02F5               	subwf	___ftpack@exp,f
 17255  17D9  3001               	movlw	1
 17256  17DA                     u5075:	
 17257  17DA  35F2               	lslf	___ftpack@arg,f
 17258  17DB  0DF3               	rlf	___ftpack@arg+1,f
 17259  17DC  0DF4               	rlf	___ftpack@arg+2,f
 17260  17DD  0B89               	decfsz	9,f
 17261  17DE  2FDA               	goto	u5075
 17262  17DF                     l6216:	
 17263  17DF  1FF3               	btfss	___ftpack@arg+1,7
 17264  17E0  2FD7               	goto	l6214
 17265  17E1  1875               	btfsc	___ftpack@exp,0
 17266  17E2  2FE9               	goto	l3150
 17267  17E3  30FF               	movlw	255
 17268  17E4  05F2               	andwf	___ftpack@arg,f
 17269  17E5  307F               	movlw	127
 17270  17E6  05F3               	andwf	___ftpack@arg+1,f
 17271  17E7  30FF               	movlw	255
 17272  17E8  05F4               	andwf	___ftpack@arg+2,f
 17273  17E9                     l3150:	
 17274  17E9  1003               	clrc
 17275  17EA  0CF5               	rrf	___ftpack@exp,f
 17276  17EB  0875               	movf	___ftpack@exp,w
 17277  17EC  00F7               	movwf	??___ftpack
 17278  17ED  01F8               	clrf	??___ftpack+1
 17279  17EE  01F9               	clrf	??___ftpack+2
 17280  17EF  3010               	movlw	16
 17281  17F0                     u5105:	
 17282  17F0  35F7               	lslf	??___ftpack,f
 17283  17F1  0DF8               	rlf	??___ftpack+1,f
 17284  17F2  0DF9               	rlf	??___ftpack+2,f
 17285  17F3  0B89               	decfsz	9,f
 17286  17F4  2FF0               	goto	u5105
 17287  17F5  0877               	movf	??___ftpack,w
 17288  17F6  04F2               	iorwf	___ftpack@arg,f
 17289  17F7  0878               	movf	??___ftpack+1,w
 17290  17F8  04F3               	iorwf	___ftpack@arg+1,f
 17291  17F9  0879               	movf	??___ftpack+2,w
 17292  17FA  04F4               	iorwf	___ftpack@arg+2,f
 17293  17FB  0876               	movf	___ftpack@sign,w
 17294  17FC  1903               	btfsc	3,2
 17295  17FD  0008               	return
 17296  17FE  17F4               	bsf	___ftpack@arg+2,7
 17297  17FF  0008               	return
 17298  1800                     __end_of___ftpack:	
 17299                           
 17300                           	psect	text116
 17301  1D2A                     __ptext116:	
 17302 ;; *************** function _getDimmerIntr_DimmingValue *****************
 17303 ;; Defined at:
 17304 ;;		line 66 in file "../src/Dimmer_B1.c"
 17305 ;; Parameters:    Size  Location     Type
 17306 ;;  lights          1    wreg     unsigned char 
 17307 ;; Auto vars:     Size  Location     Type
 17308 ;;  lights          1    4[COMMON] unsigned char 
 17309 ;;  value           1    3[COMMON] unsigned char 
 17310 ;; Return value:  Size  Location     Type
 17311 ;;                  1    wreg      unsigned char 
 17312 ;; Registers used:
 17313 ;;		wreg, status,2
 17314 ;; Tracked objects:
 17315 ;;		On entry : 0/0
 17316 ;;		On exit  : 0/0
 17317 ;;		Unchanged: 0/0
 17318 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17320 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17321 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17322 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17323 ;;Total ram usage:        3 bytes
 17324 ;; Hardware stack levels used:    1
 17325 ;; Hardware stack levels required when called:    3
 17326 ;; This function calls:
 17327 ;;		Nothing
 17328 ;; This function is called by:
 17329 ;;		_setDimmerLights_Dimming
 17330 ;; This function uses a non-reentrant model
 17331 ;;
 17332                           
 17333                           
 17334                           ;psect for function _getDimmerIntr_DimmingValue
 17335  1D2A                     _getDimmerIntr_DimmingValue:	
 17336                           
 17337                           ;incstack = 0
 17338                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 17339                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 17340  1D2A  00F4               	movwf	getDimmerIntr_DimmingValue@lights
 17341                           
 17342                           ;Dimmer_B1.c: 67: char value = 0;
 17343  1D2B  01F3               	clrf	getDimmerIntr_DimmingValue@value
 17344                           
 17345                           ;Dimmer_B1.c: 69: if (lights == 1) {
 17346  1D2C  0874               	movf	getDimmerIntr_DimmingValue@lights,w
 17347  1D2D  3A01               	xorlw	1
 17348  1D2E  1D03               	skipz
 17349  1D2F  2D33               	goto	l7034
 17350                           
 17351                           ;Dimmer_B1.c: 70: value = DimmerIntr1.DimmingValue;
 17352  1D30  0021               	movlb	1	; select bank1
 17353  1D31  0866               	movf	(_DimmerIntr1^(0+128)+4),w
 17354  1D32  2D39               	goto	L9
 17355  1D33                     l7034:	
 17356                           ;Dimmer_B1.c: 71: }
 17357                           
 17358                           
 17359                           ;Dimmer_B1.c: 74: else if (lights == 2) {
 17360  1D33  0874               	movf	getDimmerIntr_DimmingValue@lights,w
 17361  1D34  3A02               	xorlw	2
 17362  1D35  1D03               	skipz
 17363  1D36  2D3C               	goto	l742
 17364                           
 17365                           ;Dimmer_B1.c: 75: value = DimmerIntr2.DimmingValue;
 17366  1D37  0021               	movlb	1	; select bank1
 17367  1D38  086D               	movf	(_DimmerIntr2^(0+128)+4),w
 17368  1D39                     L9:	
 17369  1D39  00F2               	movwf	??_getDimmerIntr_DimmingValue
 17370  1D3A  0872               	movf	??_getDimmerIntr_DimmingValue,w
 17371  1D3B  00F3               	movwf	getDimmerIntr_DimmingValue@value
 17372  1D3C                     l742:	
 17373                           
 17374                           ;Dimmer_B1.c: 76: }
 17375                           ;Dimmer_B1.c: 83: return value;
 17376  1D3C  0873               	movf	getDimmerIntr_DimmingValue@value,w
 17377  1D3D  0008               	return
 17378  1D3E                     __end_of_getDimmerIntr_DimmingValue:	
 17379                           
 17380                           	psect	text117
 17381  1297                     __ptext117:	
 17382 ;; *************** function _getDimmerLights_Allow_Condition *****************
 17383 ;; Defined at:
 17384 ;;		line 897 in file "../src/Dimmer_B1.c"
 17385 ;; Parameters:    Size  Location     Type
 17386 ;;  lights          1    wreg     unsigned char 
 17387 ;; Auto vars:     Size  Location     Type
 17388 ;;  lights          1    7[COMMON] unsigned char 
 17389 ;;  allow           1    8[COMMON] unsigned char 
 17390 ;; Return value:  Size  Location     Type
 17391 ;;                  1    wreg      unsigned char 
 17392 ;; Registers used:
 17393 ;;		wreg, status,2, status,0, pclath, cstack
 17394 ;; Tracked objects:
 17395 ;;		On entry : 0/0
 17396 ;;		On exit  : 0/0
 17397 ;;		Unchanged: 0/0
 17398 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17399 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17400 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17401 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17402 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17403 ;;Total ram usage:        6 bytes
 17404 ;; Hardware stack levels used:    1
 17405 ;; Hardware stack levels required when called:    4
 17406 ;; This function calls:
 17407 ;;		_getLoad_OK
 17408 ;; This function is called by:
 17409 ;;		_setDimmerLights_Main
 17410 ;; This function uses a non-reentrant model
 17411 ;;
 17412                           
 17413                           
 17414                           ;psect for function _getDimmerLights_Allow_Condition
 17415  1297                     _getDimmerLights_Allow_Condition:	
 17416                           
 17417                           ;incstack = 0
 17418                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+status,0+pclath+cstack]
 17419                           ;getDimmerLights_Allow_Condition@lights stored from wreg
 17420  1297  00F7               	movwf	getDimmerLights_Allow_Condition@lights
 17421                           
 17422                           ;Dimmer_B1.c: 898: char allow = 0;
 17423  1298  01F8               	clrf	getDimmerLights_Allow_Condition@allow
 17424                           
 17425                           ;Dimmer_B1.c: 904: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 17426  1299  01F4               	clrf	_getDimmerLights_Allow_Condition$2298
 17427  129A  0AF4               	incf	_getDimmerLights_Allow_Condition$2298,f
 17428  129B  319A  22EF  3192   	fcall	_getLoad_OK
 17429  129E  3800               	iorlw	0
 17430  129F  1D03               	skipz
 17431  12A0  2AA5               	goto	l7334
 17432  12A1  0021               	movlb	1	; select bank1
 17433  12A2  18BA               	btfsc	_Dimmer^(0+128),1
 17434  12A3  2AA5               	goto	l7334
 17435  12A4  01F4               	clrf	_getDimmerLights_Allow_Condition$2298
 17436  12A5                     l7334:	
 17437  12A5  0874               	movf	_getDimmerLights_Allow_Condition$2298,w
 17438  12A6  00F3               	movwf	??_getDimmerLights_Allow_Condition
 17439  12A7  0873               	movf	??_getDimmerLights_Allow_Condition,w
 17440  12A8  00F8               	movwf	getDimmerLights_Allow_Condition@allow
 17441                           
 17442                           ;Dimmer_B1.c: 908: if (allow == 0) {
 17443  12A9  08F8               	movf	getDimmerLights_Allow_Condition@allow,f
 17444  12AA  1D03               	skipz
 17445  12AB  2ACC               	goto	l7358
 17446                           
 17447                           ;Dimmer_B1.c: 909: if (lights == 1) {
 17448  12AC  0877               	movf	getDimmerLights_Allow_Condition@lights,w
 17449  12AD  3A01               	xorlw	1
 17450  12AE  1D03               	skipz
 17451  12AF  2ABB               	goto	l7348
 17452                           
 17453                           ;Dimmer_B1.c: 910: allow = DimmerLights2.DimmingTrigger == 1 || DimmerIntr2.Dimming_Sw =
      +                          = 1 ? 1 : 0;
 17454  12B0  01F5               	clrf	_getDimmerLights_Allow_Condition$2299
 17455  12B1  0AF5               	incf	_getDimmerLights_Allow_Condition$2299,f
 17456  12B2  0022               	movlb	2	; select bank2
 17457  12B3  1A66               	btfsc	_DimmerLights2^(0+256),4
 17458  12B4  2AB9               	goto	l7346
 17459  12B5  0021               	movlb	1	; select bank1
 17460  12B6  1A69               	btfsc	_DimmerIntr2^(0+128),4
 17461  12B7  2AB9               	goto	l7346
 17462  12B8  01F5               	clrf	_getDimmerLights_Allow_Condition$2299
 17463  12B9                     l7346:	
 17464  12B9  0875               	movf	_getDimmerLights_Allow_Condition$2299,w
 17465  12BA  2AC9               	goto	L10
 17466  12BB                     l7348:	
 17467                           ;Dimmer_B1.c: 911: } else if (lights == 2) {
 17468                           
 17469  12BB  0877               	movf	getDimmerLights_Allow_Condition@lights,w
 17470  12BC  3A02               	xorlw	2
 17471  12BD  1D03               	skipz
 17472  12BE  2ACC               	goto	l7358
 17473                           
 17474                           ;Dimmer_B1.c: 912: allow = DimmerLights1.DimmingTrigger == 1 || DimmerIntr1.Dimming_Sw =
      +                          = 1 ? 1 : 0;
 17475  12BF  01F6               	clrf	_getDimmerLights_Allow_Condition$2300
 17476  12C0  0AF6               	incf	_getDimmerLights_Allow_Condition$2300,f
 17477  12C1  0022               	movlb	2	; select bank2
 17478  12C2  1A5E               	btfsc	_DimmerLights1^(0+256),4
 17479  12C3  2AC8               	goto	l7356
 17480  12C4  0021               	movlb	1	; select bank1
 17481  12C5  1A62               	btfsc	_DimmerIntr1^(0+128),4
 17482  12C6  2AC8               	goto	l7356
 17483  12C7  01F6               	clrf	_getDimmerLights_Allow_Condition$2300
 17484  12C8                     l7356:	
 17485  12C8  0876               	movf	_getDimmerLights_Allow_Condition$2300,w
 17486  12C9                     L10:	
 17487  12C9  00F3               	movwf	??_getDimmerLights_Allow_Condition
 17488  12CA  0873               	movf	??_getDimmerLights_Allow_Condition,w
 17489  12CB  00F8               	movwf	getDimmerLights_Allow_Condition@allow
 17490  12CC                     l7358:	
 17491                           
 17492                           ;Dimmer_B1.c: 913: }
 17493                           ;Dimmer_B1.c: 914: }
 17494                           ;Dimmer_B1.c: 931: return allow;
 17495  12CC  0878               	movf	getDimmerLights_Allow_Condition@allow,w
 17496  12CD  0008               	return
 17497  12CE                     __end_of_getDimmerLights_Allow_Condition:	
 17498                           
 17499                           	psect	text118
 17500  1AEF                     __ptext118:	
 17501 ;; *************** function _getLoad_OK *****************
 17502 ;; Defined at:
 17503 ;;		line 246 in file "../src/OverLoad_B1.c"
 17504 ;; Parameters:    Size  Location     Type
 17505 ;;		None
 17506 ;; Auto vars:     Size  Location     Type
 17507 ;;  ok              1    2[COMMON] unsigned char 
 17508 ;; Return value:  Size  Location     Type
 17509 ;;                  1    wreg      unsigned char 
 17510 ;; Registers used:
 17511 ;;		wreg, status,2
 17512 ;; Tracked objects:
 17513 ;;		On entry : 0/0
 17514 ;;		On exit  : 0/0
 17515 ;;		Unchanged: 0/0
 17516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17518 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17520 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17521 ;;Total ram usage:        1 bytes
 17522 ;; Hardware stack levels used:    1
 17523 ;; Hardware stack levels required when called:    3
 17524 ;; This function calls:
 17525 ;;		Nothing
 17526 ;; This function is called by:
 17527 ;;		_DimmerLights_Main
 17528 ;;		_getDimmerLights_Allow_Condition
 17529 ;; This function uses a non-reentrant model
 17530 ;;
 17531                           
 17532                           
 17533                           ;psect for function _getLoad_OK
 17534  1AEF                     _getLoad_OK:	
 17535                           
 17536                           ;OverLoad_B1.c: 247: char ok = Load.OK == 1 ? 1 : 0;
 17537                           
 17538                           ;incstack = 0
 17539                           ; Regs used in _getLoad_OK: [wreg+status,2]
 17540  1AEF  3000               	movlw	0
 17541  1AF0  0022               	movlb	2	; select bank2
 17542  1AF1  1BB0               	btfsc	_Load^(0+256),7
 17543  1AF2  3001               	movlw	1
 17544  1AF3  00F2               	movwf	getLoad_OK@ok
 17545                           
 17546                           ;OverLoad_B1.c: 248: return ok;
 17547  1AF4  0872               	movf	getLoad_OK@ok,w
 17548  1AF5  0008               	return
 17549  1AF6                     __end_of_getLoad_OK:	
 17550                           
 17551                           	psect	text119
 17552  11CC                     __ptext119:	
 17553 ;; *************** function _getMain_All_Error_Status *****************
 17554 ;; Defined at:
 17555 ;;		line 425 in file "../src/main_B1.c"
 17556 ;; Parameters:    Size  Location     Type
 17557 ;;  command         1    wreg     unsigned char 
 17558 ;; Auto vars:     Size  Location     Type
 17559 ;;  command         1    7[COMMON] unsigned char 
 17560 ;;  status          1    8[COMMON] unsigned char 
 17561 ;; Return value:  Size  Location     Type
 17562 ;;                  1    wreg      unsigned char 
 17563 ;; Registers used:
 17564 ;;		wreg, status,2, status,0
 17565 ;; Tracked objects:
 17566 ;;		On entry : 0/0
 17567 ;;		On exit  : 0/0
 17568 ;;		Unchanged: 0/0
 17569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17571 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17572 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17573 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17574 ;;Total ram usage:        7 bytes
 17575 ;; Hardware stack levels used:    1
 17576 ;; Hardware stack levels required when called:    3
 17577 ;; This function calls:
 17578 ;;		Nothing
 17579 ;; This function is called by:
 17580 ;;		_DimmerLights_Main
 17581 ;;		_Load_Main
 17582 ;;		_setTemp_Main
 17583 ;;		_getRxData
 17584 ;;		_setSw_Main
 17585 ;;		_Exception_Main
 17586 ;; This function uses a non-reentrant model
 17587 ;;
 17588                           
 17589                           
 17590                           ;psect for function _getMain_All_Error_Status
 17591  11CC                     _getMain_All_Error_Status:	
 17592                           
 17593                           ;incstack = 0
 17594                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 17595                           ;getMain_All_Error_Status@command stored from wreg
 17596  11CC  00F7               	movwf	getMain_All_Error_Status@command
 17597                           
 17598                           ;main_B1.c: 426: char status = 0;
 17599  11CD  01F8               	clrf	getMain_All_Error_Status@status
 17600                           
 17601                           ;main_B1.c: 437: if (status == 0 && command != 2) {
 17602  11CE  08F8               	movf	getMain_All_Error_Status@status,f
 17603  11CF  1D03               	skipz
 17604  11D0  29E3               	goto	l7066
 17605  11D1  0877               	movf	getMain_All_Error_Status@command,w
 17606  11D2  3A02               	xorlw	2
 17607  11D3  1903               	skipnz
 17608  11D4  29E3               	goto	l7066
 17609                           
 17610                           ;main_B1.c: 438: status = Temp.ERROR == 1 ? 2 : 0;
 17611  11D5  0021               	movlb	1	; select bank1
 17612  11D6  18D0               	btfsc	_Temp^(0+128),1
 17613  11D7  29DB               	goto	l7064
 17614  11D8  01F3               	clrf	_getMain_All_Error_Status$6546
 17615  11D9  01F4               	clrf	_getMain_All_Error_Status$6546+1
 17616  11DA  29DF               	goto	l2848
 17617  11DB                     l7064:	
 17618  11DB  3002               	movlw	2
 17619  11DC  00F3               	movwf	_getMain_All_Error_Status$6546
 17620  11DD  3000               	movlw	0
 17621  11DE  00F4               	movwf	_getMain_All_Error_Status$6546+1
 17622  11DF                     l2848:	
 17623  11DF  0873               	movf	_getMain_All_Error_Status$6546,w
 17624  11E0  00F2               	movwf	??_getMain_All_Error_Status
 17625  11E1  0872               	movf	??_getMain_All_Error_Status,w
 17626  11E2  00F8               	movwf	getMain_All_Error_Status@status
 17627  11E3                     l7066:	
 17628                           
 17629                           ;main_B1.c: 439: }
 17630                           ;main_B1.c: 444: if (status == 0 && command != 3) {
 17631  11E3  08F8               	movf	getMain_All_Error_Status@status,f
 17632  11E4  1D03               	skipz
 17633  11E5  29F8               	goto	l2849
 17634  11E6  0877               	movf	getMain_All_Error_Status@command,w
 17635  11E7  3A03               	xorlw	3
 17636  11E8  1903               	skipnz
 17637  11E9  29F8               	goto	l2849
 17638                           
 17639                           ;main_B1.c: 445: status = Load.ERROR == 1 ? 3 : 0;
 17640  11EA  0022               	movlb	2	; select bank2
 17641  11EB  1AB0               	btfsc	_Load^(0+256),5
 17642  11EC  29F0               	goto	l7074
 17643  11ED  01F5               	clrf	_getMain_All_Error_Status$6547
 17644  11EE  01F6               	clrf	_getMain_All_Error_Status$6547+1
 17645  11EF  29F4               	goto	l2853
 17646  11F0                     l7074:	
 17647  11F0  3003               	movlw	3
 17648  11F1  00F5               	movwf	_getMain_All_Error_Status$6547
 17649  11F2  3000               	movlw	0
 17650  11F3  00F6               	movwf	_getMain_All_Error_Status$6547+1
 17651  11F4                     l2853:	
 17652  11F4  0875               	movf	_getMain_All_Error_Status$6547,w
 17653  11F5  00F2               	movwf	??_getMain_All_Error_Status
 17654  11F6  0872               	movf	??_getMain_All_Error_Status,w
 17655  11F7  00F8               	movwf	getMain_All_Error_Status@status
 17656  11F8                     l2849:	
 17657                           
 17658                           ;main_B1.c: 446: }
 17659                           ;main_B1.c: 462: return status;
 17660  11F8  0878               	movf	getMain_All_Error_Status@status,w
 17661  11F9  0008               	return
 17662  11FA                     __end_of_getMain_All_Error_Status:	
 17663                           
 17664                           	psect	text120
 17665  1B47                     __ptext120:	
 17666 ;; *************** function _DimmerLights_Initialization *****************
 17667 ;; Defined at:
 17668 ;;		line 593 in file "../src/Dimmer_B1.c"
 17669 ;; Parameters:    Size  Location     Type
 17670 ;;		None
 17671 ;; Auto vars:     Size  Location     Type
 17672 ;;		None
 17673 ;; Return value:  Size  Location     Type
 17674 ;;		None               void
 17675 ;; Registers used:
 17676 ;;		wreg, status,2, status,0, pclath, cstack
 17677 ;; Tracked objects:
 17678 ;;		On entry : 0/0
 17679 ;;		On exit  : 0/0
 17680 ;;		Unchanged: 0/0
 17681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17685 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17686 ;;Total ram usage:        0 bytes
 17687 ;; Hardware stack levels used:    1
 17688 ;; Hardware stack levels required when called:    4
 17689 ;; This function calls:
 17690 ;;		_DimmerIntr_Initialization
 17691 ;;		_setDimmerLights_Initialization
 17692 ;; This function is called by:
 17693 ;;		_main
 17694 ;; This function uses a non-reentrant model
 17695 ;;
 17696                           
 17697                           
 17698                           ;psect for function _DimmerLights_Initialization
 17699  1B47                     _DimmerLights_Initialization:	
 17700                           
 17701                           ;Dimmer_B1.c: 595: setDimmerLights_Initialization(1);
 17702                           
 17703                           ;incstack = 0
 17704                           ; Regs used in _DimmerLights_Initialization: [wreg+status,2+status,0+pclath+cstack]
 17705  1B47  3001               	movlw	1
 17706  1B48  3188  2000  319B   	fcall	_setDimmerLights_Initialization
 17707                           
 17708                           ;Dimmer_B1.c: 599: setDimmerLights_Initialization(2);
 17709  1B4B  3002               	movlw	2
 17710  1B4C  3188  2000  319B   	fcall	_setDimmerLights_Initialization
 17711                           
 17712                           ;Dimmer_B1.c: 605: DimmerIntr_Initialization();
 17713  1B4F  319F  27BC         	fcall	_DimmerIntr_Initialization
 17714  1B51  0008               	return
 17715  1B52                     __end_of_DimmerLights_Initialization:	
 17716                           
 17717                           	psect	text121
 17718  0800                     __ptext121:	
 17719 ;; *************** function _setDimmerLights_Initialization *****************
 17720 ;; Defined at:
 17721 ;;		line 609 in file "../src/Dimmer_B1.c"
 17722 ;; Parameters:    Size  Location     Type
 17723 ;;  lights          1    wreg     unsigned char 
 17724 ;; Auto vars:     Size  Location     Type
 17725 ;;  lights          1    0[COMMON] unsigned char 
 17726 ;; Return value:  Size  Location     Type
 17727 ;;		None               void
 17728 ;; Registers used:
 17729 ;;		wreg
 17730 ;; Tracked objects:
 17731 ;;		On entry : 0/0
 17732 ;;		On exit  : 0/0
 17733 ;;		Unchanged: 0/0
 17734 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17735 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17736 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17738 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17739 ;;Total ram usage:        0 bytes
 17740 ;; Hardware stack levels used:    1
 17741 ;; Hardware stack levels required when called:    3
 17742 ;; This function calls:
 17743 ;;		Nothing
 17744 ;; This function is called by:
 17745 ;;		_DimmerLights_Initialization
 17746 ;; This function uses a non-reentrant model
 17747 ;;
 17748                           
 17749                           
 17750                           ;psect for function _setDimmerLights_Initialization
 17751  0800                     _setDimmerLights_Initialization:	
 17752                           
 17753                           ;incstack = 0
 17754                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 17755  0800  0008               	return
 17756  0801                     __end_of_setDimmerLights_Initialization:	
 17757                           
 17758                           	psect	text122
 17759  1FBC                     __ptext122:	
 17760 ;; *************** function _DimmerIntr_Initialization *****************
 17761 ;; Defined at:
 17762 ;;		line 7 in file "../src/Dimmer_B1.c"
 17763 ;; Parameters:    Size  Location     Type
 17764 ;;		None
 17765 ;; Auto vars:     Size  Location     Type
 17766 ;;		None
 17767 ;; Return value:  Size  Location     Type
 17768 ;;		None               void
 17769 ;; Registers used:
 17770 ;;		wreg
 17771 ;; Tracked objects:
 17772 ;;		On entry : 0/0
 17773 ;;		On exit  : 0/0
 17774 ;;		Unchanged: 0/0
 17775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17777 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17778 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17779 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17780 ;;Total ram usage:        1 bytes
 17781 ;; Hardware stack levels used:    1
 17782 ;; Hardware stack levels required when called:    3
 17783 ;; This function calls:
 17784 ;;		Nothing
 17785 ;; This function is called by:
 17786 ;;		_DimmerLights_Initialization
 17787 ;; This function uses a non-reentrant model
 17788 ;;
 17789                           
 17790                           
 17791                           ;psect for function _DimmerIntr_Initialization
 17792  1FBC                     _DimmerIntr_Initialization:	
 17793                           
 17794                           ;Dimmer_B1.c: 9: DimmerIntr1.TuneTimeValue = 7;
 17795                           
 17796                           ;incstack = 0
 17797                           ; Regs used in _DimmerIntr_Initialization: [wreg]
 17798  1FBC  3007               	movlw	7
 17799  1FBD  00F2               	movwf	??_DimmerIntr_Initialization
 17800  1FBE  0872               	movf	??_DimmerIntr_Initialization,w
 17801  1FBF  0021               	movlb	1	; select bank1
 17802  1FC0  00E5               	movwf	(_DimmerIntr1^(0+128)+3)
 17803                           
 17804                           ;Dimmer_B1.c: 10: DimmerIntr1.MaxmumValue = ((char)(65*0.8));
 17805  1FC1  3034               	movlw	52
 17806  1FC2  00F2               	movwf	??_DimmerIntr_Initialization
 17807  1FC3  0872               	movf	??_DimmerIntr_Initialization,w
 17808  1FC4  00E7               	movwf	(_DimmerIntr1^(0+128)+5)
 17809                           
 17810                           ;Dimmer_B1.c: 11: DimmerIntr1.MinimumValue = ((char)(20*0.8));
 17811  1FC5  3010               	movlw	16
 17812  1FC6  00F2               	movwf	??_DimmerIntr_Initialization
 17813  1FC7  0872               	movf	??_DimmerIntr_Initialization,w
 17814  1FC8  00E8               	movwf	(_DimmerIntr1^(0+128)+6)
 17815                           
 17816                           ;Dimmer_B1.c: 12: DimmerIntr1.DimmingValue = ((char)(65*0.8));
 17817  1FC9  3034               	movlw	52
 17818  1FCA  00F2               	movwf	??_DimmerIntr_Initialization
 17819  1FCB  0872               	movf	??_DimmerIntr_Initialization,w
 17820  1FCC  00E6               	movwf	(_DimmerIntr1^(0+128)+4)
 17821                           
 17822                           ;Dimmer_B1.c: 15: DimmerIntr2.TuneTimeValue = 7;
 17823  1FCD  3007               	movlw	7
 17824  1FCE  00F2               	movwf	??_DimmerIntr_Initialization
 17825  1FCF  0872               	movf	??_DimmerIntr_Initialization,w
 17826  1FD0  00EC               	movwf	(_DimmerIntr2^(0+128)+3)
 17827                           
 17828                           ;Dimmer_B1.c: 16: DimmerIntr2.MaxmumValue = ((char)(65*0.8));
 17829  1FD1  3034               	movlw	52
 17830  1FD2  00F2               	movwf	??_DimmerIntr_Initialization
 17831  1FD3  0872               	movf	??_DimmerIntr_Initialization,w
 17832  1FD4  00EE               	movwf	(_DimmerIntr2^(0+128)+5)
 17833                           
 17834                           ;Dimmer_B1.c: 17: DimmerIntr2.MinimumValue = ((char)(20*0.8));
 17835  1FD5  3010               	movlw	16
 17836  1FD6  00F2               	movwf	??_DimmerIntr_Initialization
 17837  1FD7  0872               	movf	??_DimmerIntr_Initialization,w
 17838  1FD8  00EF               	movwf	(_DimmerIntr2^(0+128)+6)
 17839                           
 17840                           ;Dimmer_B1.c: 18: DimmerIntr2.DimmingValue = ((char)(65*0.8));
 17841  1FD9  3034               	movlw	52
 17842  1FDA  00F2               	movwf	??_DimmerIntr_Initialization
 17843  1FDB  0872               	movf	??_DimmerIntr_Initialization,w
 17844  1FDC  00ED               	movwf	(_DimmerIntr2^(0+128)+4)
 17845  1FDD  0008               	return
 17846  1FDE                     __end_of_DimmerIntr_Initialization:	
 17847                           
 17848                           	psect	text123
 17849  1B1A                     __ptext123:	
 17850 ;; *************** function _DelayOff_Main *****************
 17851 ;; Defined at:
 17852 ;;		line 41 in file "../src/DelayOff_B1.c"
 17853 ;; Parameters:    Size  Location     Type
 17854 ;;		None
 17855 ;; Auto vars:     Size  Location     Type
 17856 ;;		None
 17857 ;; Return value:  Size  Location     Type
 17858 ;;		None               void
 17859 ;; Registers used:
 17860 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17861 ;; Tracked objects:
 17862 ;;		On entry : 0/0
 17863 ;;		On exit  : 0/0
 17864 ;;		Unchanged: 0/0
 17865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17869 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17870 ;;Total ram usage:        0 bytes
 17871 ;; Hardware stack levels used:    1
 17872 ;; Hardware stack levels required when called:    7
 17873 ;; This function calls:
 17874 ;;		_DlyOff_Main
 17875 ;; This function is called by:
 17876 ;;		_main
 17877 ;; This function uses a non-reentrant model
 17878 ;;
 17879                           
 17880                           
 17881                           ;psect for function _DelayOff_Main
 17882  1B1A                     _DelayOff_Main:	
 17883                           
 17884                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 17885                           
 17886                           ;incstack = 0
 17887                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17888  1B1A  3001               	movlw	1
 17889  1B1B  318A  223E  319B   	fcall	_DlyOff_Main
 17890                           
 17891                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 17892  1B1E  3002               	movlw	2
 17893  1B1F  318A  223E         	fcall	_DlyOff_Main
 17894  1B21  0008               	return
 17895  1B22                     __end_of_DelayOff_Main:	
 17896                           
 17897                           	psect	text124
 17898  0A3E                     __ptext124:	
 17899 ;; *************** function _DlyOff_Main *****************
 17900 ;; Defined at:
 17901 ;;		line 61 in file "../src/DelayOff_B1.c"
 17902 ;; Parameters:    Size  Location     Type
 17903 ;;  sw              1    wreg     unsigned char 
 17904 ;; Auto vars:     Size  Location     Type
 17905 ;;  sw              1   64[BANK0 ] unsigned char 
 17906 ;; Return value:  Size  Location     Type
 17907 ;;		None               void
 17908 ;; Registers used:
 17909 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17910 ;; Tracked objects:
 17911 ;;		On entry : 0/0
 17912 ;;		On exit  : 0/0
 17913 ;;		Unchanged: 0/0
 17914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17916 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17917 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17918 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17919 ;;Total ram usage:        3 bytes
 17920 ;; Hardware stack levels used:    1
 17921 ;; Hardware stack levels required when called:    6
 17922 ;; This function calls:
 17923 ;;		_DelayOffPointSelect
 17924 ;;		_getDimmerLights_Status
 17925 ;;		_setDimmerLights_SwOff
 17926 ;;		_setDimmerLights_SwOn
 17927 ;;		_setProductData
 17928 ;; This function is called by:
 17929 ;;		_DelayOff_Main
 17930 ;; This function uses a non-reentrant model
 17931 ;;
 17932                           
 17933                           
 17934                           ;psect for function _DlyOff_Main
 17935  0A3E                     _DlyOff_Main:	
 17936                           
 17937                           ;incstack = 0
 17938                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17939                           ;DlyOff_Main@sw stored from wreg
 17940  0A3E  0020               	movlb	0	; select bank0
 17941  0A3F  00E0               	movwf	DlyOff_Main@sw
 17942                           
 17943                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 17944  0A40  0860               	movf	DlyOff_Main@sw,w
 17945  0A41  319D  2552  318A   	fcall	_DelayOffPointSelect
 17946                           
 17947                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 17948  0A44  0021               	movlb	1	; select bank1
 17949  0A45  0844               	movf	_DelayOff^(0+128),w
 17950  0A46  0086               	movwf	6
 17951  0A47  3001               	movlw	1	; select bank2/3
 17952  0A48  0087               	movwf	7
 17953  0A49  1C81               	btfss	1,1
 17954  0A4A  0008               	return
 17955                           
 17956                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 17957  0A4B  0844               	movf	_DelayOff^(0+128),w
 17958  0A4C  3E02               	addlw	2
 17959  0A4D  0086               	movwf	6
 17960  0A4E  3001               	movlw	1	; select bank2/3
 17961  0A4F  0087               	movwf	7
 17962  0A50  3001               	movlw	1
 17963  0A51  0781               	addwf	1,f
 17964  0A52  3141               	addfsr 1,1
 17965  0A53  1803               	skipnc
 17966  0A54  0A81               	incf	1,f
 17967                           
 17968                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 60000/20) {
 17969  0A55  0844               	movf	_DelayOff^(0+128),w
 17970  0A56  3E02               	addlw	2
 17971  0A57  0086               	movwf	6
 17972  0A58  3001               	movlw	1	; select bank2/3
 17973  0A59  0087               	movwf	7
 17974  0A5A  3F40               	moviw [0]fsr1
 17975  0A5B  0020               	movlb	0	; select bank0
 17976  0A5C  00DE               	movwf	??_DlyOff_Main
 17977  0A5D  3F41               	moviw [1]fsr1
 17978  0A5E  00DF               	movwf	??_DlyOff_Main+1
 17979  0A5F  300B               	movlw	11
 17980  0A60  025F               	subwf	??_DlyOff_Main+1,w
 17981  0A61  30B8               	movlw	184
 17982  0A62  1903               	skipnz
 17983  0A63  025E               	subwf	??_DlyOff_Main,w
 17984  0A64  1C03               	skipc
 17985  0A65  0008               	return
 17986                           
 17987                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 17988  0A66  0021               	movlb	1	; select bank1
 17989  0A67  0844               	movf	_DelayOff^(0+128),w
 17990  0A68  3E02               	addlw	2
 17991  0A69  0086               	movwf	6
 17992  0A6A  3001               	movlw	1	; select bank2/3
 17993  0A6B  0087               	movwf	7
 17994  0A6C  3000               	movlw	0
 17995  0A6D  3FC0               	movwi [0]fsr1
 17996  0A6E  3FC1               	movwi [1]fsr1
 17997                           
 17998                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 17999  0A6F  3001               	movlw	1
 18000  0A70  0020               	movlb	0	; select bank0
 18001  0A71  00DE               	movwf	??_DlyOff_Main
 18002  0A72  0021               	movlb	1	; select bank1
 18003  0A73  0844               	movf	_DelayOff^(0+128),w
 18004  0A74  3E04               	addlw	4
 18005  0A75  0086               	movwf	6
 18006  0A76  3001               	movlw	1	; select bank2/3
 18007  0A77  0087               	movwf	7
 18008  0A78  0020               	movlb	0	; select bank0
 18009  0A79  085E               	movf	??_DlyOff_Main,w
 18010  0A7A  0781               	addwf	1,f
 18011                           
 18012                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 18013  0A7B  0021               	movlb	1	; select bank1
 18014  0A7C  0844               	movf	_DelayOff^(0+128),w
 18015  0A7D  3E04               	addlw	4
 18016  0A7E  0086               	movwf	6
 18017  0A7F  3001               	movlw	1	; select bank2/3
 18018  0A80  0087               	movwf	7
 18019  0A81  0A44               	incf	_DelayOff^(0+128),w
 18020  0A82  0084               	movwf	4
 18021  0A83  3001               	movlw	1	; select bank2/3
 18022  0A84  0085               	movwf	5
 18023  0A85  0800               	movf	0,w
 18024  0A86  0201               	subwf	1,w
 18025  0A87  1C03               	skipc
 18026  0A88  0008               	return
 18027                           
 18028                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 18029  0A89  0844               	movf	_DelayOff^(0+128),w
 18030  0A8A  3E04               	addlw	4
 18031  0A8B  0086               	movwf	6
 18032  0A8C  3001               	movlw	1	; select bank2/3
 18033  0A8D  0087               	movwf	7
 18034  0A8E  0181               	clrf	1
 18035                           
 18036                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 18037  0A8F  0844               	movf	_DelayOff^(0+128),w
 18038  0A90  0086               	movwf	6
 18039  0A91  3001               	movlw	1	; select bank2/3
 18040  0A92  0087               	movwf	7
 18041  0A93  1081               	bcf	1,1
 18042                           
 18043                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 18044  0A94  0020               	movlb	0	; select bank0
 18045  0A95  0860               	movf	DlyOff_Main@sw,w
 18046  0A96  319B  23E6  318A   	fcall	_getDimmerLights_Status
 18047  0A99  3A01               	xorlw	1
 18048  0A9A  1D03               	skipz
 18049  0A9B  2AA6               	goto	l573
 18050                           
 18051                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 18052  0A9C  0020               	movlb	0	; select bank0
 18053  0A9D  0860               	movf	DlyOff_Main@sw,w
 18054  0A9E  3196  2686  318A   	fcall	_setDimmerLights_SwOn
 18055                           
 18056                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 18057  0AA1  0020               	movlb	0	; select bank0
 18058  0AA2  0860               	movf	DlyOff_Main@sw,w
 18059  0AA3  3192  22CE  318A   	fcall	_setDimmerLights_SwOff
 18060  0AA6                     l573:	
 18061                           
 18062                           ;DelayOff_B1.c: 78: }
 18063                           ;DelayOff_B1.c: 80: setProductData(26 + sw, 0);
 18064  0AA6  0020               	movlb	0	; select bank0
 18065  0AA7  01DA               	clrf	setProductData@value
 18066  0AA8  0860               	movf	DlyOff_Main@sw,w
 18067  0AA9  3E1A               	addlw	26
 18068  0AAA  319B  23D8         	fcall	_setProductData
 18069  0AAC  0008               	return
 18070  0AAD                     __end_of_DlyOff_Main:	
 18071                           
 18072                           	psect	text125
 18073  1BD8                     __ptext125:	
 18074 ;; *************** function _setProductData *****************
 18075 ;; Defined at:
 18076 ;;		line 592 in file "../src/main_B1.c"
 18077 ;; Parameters:    Size  Location     Type
 18078 ;;  address         1    wreg     unsigned char 
 18079 ;;  value           1   58[BANK0 ] unsigned char 
 18080 ;; Auto vars:     Size  Location     Type
 18081 ;;  address         1   61[BANK0 ] unsigned char 
 18082 ;; Return value:  Size  Location     Type
 18083 ;;		None               void
 18084 ;; Registers used:
 18085 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18086 ;; Tracked objects:
 18087 ;;		On entry : 0/0
 18088 ;;		On exit  : 0/0
 18089 ;;		Unchanged: 0/0
 18090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18091 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18092 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18093 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18094 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18095 ;;Total ram usage:        4 bytes
 18096 ;; Hardware stack levels used:    1
 18097 ;; Hardware stack levels required when called:    3
 18098 ;; This function calls:
 18099 ;;		Nothing
 18100 ;; This function is called by:
 18101 ;;		_DlyOff_Main
 18102 ;;		_setDelayOff_GO
 18103 ;;		_setDimmerLights_OnOff
 18104 ;;		_setDimmerLights_Dimming
 18105 ;;		_setTemp_Main
 18106 ;;		_setLog_Code
 18107 ;;		_setControl_Lights_Table
 18108 ;;		_setRFSW_AdjControl
 18109 ;;		_setRF_DimmerLights
 18110 ;; This function uses a non-reentrant model
 18111 ;;
 18112                           
 18113                           
 18114                           ;psect for function _setProductData
 18115  1BD8                     _setProductData:	
 18116                           
 18117                           ;incstack = 0
 18118                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 18119                           ;setProductData@address stored from wreg
 18120  1BD8  0020               	movlb	0	; select bank0
 18121  1BD9  00DD               	movwf	setProductData@address
 18122                           
 18123                           ;main_B1.c: 593: product->Data[address] = value;
 18124  1BDA  085A               	movf	setProductData@value,w
 18125  1BDB  00DB               	movwf	??_setProductData
 18126  1BDC  085D               	movf	setProductData@address,w
 18127  1BDD  076D               	addwf	_product,w
 18128  1BDE  00DC               	movwf	??_setProductData+1
 18129  1BDF  085C               	movf	??_setProductData+1,w
 18130  1BE0  0086               	movwf	6
 18131  1BE1  3002               	movlw	2	; select bank4/5
 18132  1BE2  0087               	movwf	7
 18133  1BE3  085B               	movf	??_setProductData,w
 18134  1BE4  0081               	movwf	1
 18135  1BE5  0008               	return
 18136  1BE6                     __end_of_setProductData:	
 18137                           
 18138                           	psect	text126
 18139  1686                     __ptext126:	
 18140 ;; *************** function _setDimmerLights_SwOn *****************
 18141 ;; Defined at:
 18142 ;;		line 649 in file "../src/Dimmer_B1.c"
 18143 ;; Parameters:    Size  Location     Type
 18144 ;;  sw              1    wreg     unsigned char 
 18145 ;; Auto vars:     Size  Location     Type
 18146 ;;  sw              1    9[BANK0 ] unsigned char 
 18147 ;;  idle            1    8[BANK0 ] unsigned char 
 18148 ;; Return value:  Size  Location     Type
 18149 ;;		None               void
 18150 ;; Registers used:
 18151 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18152 ;; Tracked objects:
 18153 ;;		On entry : 0/0
 18154 ;;		On exit  : 0/0
 18155 ;;		Unchanged: 0/0
 18156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18158 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18159 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18160 ;;      Totals:         1       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18161 ;;Total ram usage:        5 bytes
 18162 ;; Hardware stack levels used:    1
 18163 ;; Hardware stack levels required when called:    5
 18164 ;; This function calls:
 18165 ;;		_DimmerLights_SelectPointer
 18166 ;;		_setBuz
 18167 ;; This function is called by:
 18168 ;;		_DlyOff_Main
 18169 ;;		_setControl_Lights_Table
 18170 ;;		_setRFSW_Control
 18171 ;;		_setRFSW_AdjControl
 18172 ;;		_setSw_Main
 18173 ;; This function uses a non-reentrant model
 18174 ;;
 18175                           
 18176                           
 18177                           ;psect for function _setDimmerLights_SwOn
 18178  1686                     _setDimmerLights_SwOn:	
 18179                           
 18180                           ;incstack = 0
 18181                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18182                           ;setDimmerLights_SwOn@sw stored from wreg
 18183  1686  0020               	movlb	0	; select bank0
 18184  1687  00A9               	movwf	setDimmerLights_SwOn@sw
 18185                           
 18186                           ;Dimmer_B1.c: 650: char idle = 0;
 18187  1688  01A8               	clrf	setDimmerLights_SwOn@idle
 18188                           
 18189                           ;Dimmer_B1.c: 652: if (idle == 0) {
 18190  1689  08A8               	movf	setDimmerLights_SwOn@idle,f
 18191  168A  1D03               	skipz
 18192  168B  2EB0               	goto	l9152
 18193                           
 18194                           ;Dimmer_B1.c: 653: if (sw == 1) {
 18195  168C  0829               	movf	setDimmerLights_SwOn@sw,w
 18196  168D  3A01               	xorlw	1
 18197  168E  1D03               	skipz
 18198  168F  2E9D               	goto	l9142
 18199                           
 18200                           ;Dimmer_B1.c: 654: idle = DimmerLights2.DimmingTrigger == 1 || DimmerIntr2.Dimming_Sw ==
      +                           1 ? 1 : 0;
 18201  1690  01A6               	clrf	_setDimmerLights_SwOn$2241
 18202  1691  0AA6               	incf	_setDimmerLights_SwOn$2241,f
 18203  1692  0022               	movlb	2	; select bank2
 18204  1693  1A66               	btfsc	_DimmerLights2^(0+256),4
 18205  1694  2E9A               	goto	l9140
 18206  1695  0021               	movlb	1	; select bank1
 18207  1696  1A69               	btfsc	_DimmerIntr2^(0+128),4
 18208  1697  2E9A               	goto	l9140
 18209  1698  0020               	movlb	0	; select bank0
 18210  1699  01A6               	clrf	_setDimmerLights_SwOn$2241
 18211  169A                     l9140:	
 18212  169A  0020               	movlb	0	; select bank0
 18213  169B  0826               	movf	_setDimmerLights_SwOn$2241,w
 18214  169C  2EAD               	goto	L11
 18215  169D                     l9142:	
 18216                           ;Dimmer_B1.c: 655: } else if (sw == 2) {
 18217                           
 18218  169D  0829               	movf	setDimmerLights_SwOn@sw,w
 18219  169E  3A02               	xorlw	2
 18220  169F  1D03               	skipz
 18221  16A0  2EB0               	goto	l9152
 18222                           
 18223                           ;Dimmer_B1.c: 656: idle = DimmerLights1.DimmingTrigger == 1 || DimmerIntr1.Dimming_Sw ==
      +                           1 ? 1 : 0;
 18224  16A1  01A7               	clrf	_setDimmerLights_SwOn$2250
 18225  16A2  0AA7               	incf	_setDimmerLights_SwOn$2250,f
 18226  16A3  0022               	movlb	2	; select bank2
 18227  16A4  1A5E               	btfsc	_DimmerLights1^(0+256),4
 18228  16A5  2EAB               	goto	l9150
 18229  16A6  0021               	movlb	1	; select bank1
 18230  16A7  1A62               	btfsc	_DimmerIntr1^(0+128),4
 18231  16A8  2EAB               	goto	l9150
 18232  16A9  0020               	movlb	0	; select bank0
 18233  16AA  01A7               	clrf	_setDimmerLights_SwOn$2250
 18234  16AB                     l9150:	
 18235  16AB  0020               	movlb	0	; select bank0
 18236  16AC  0827               	movf	_setDimmerLights_SwOn$2250,w
 18237  16AD                     L11:	
 18238  16AD  00F9               	movwf	??_setDimmerLights_SwOn
 18239  16AE  0879               	movf	??_setDimmerLights_SwOn,w
 18240  16AF  00A8               	movwf	setDimmerLights_SwOn@idle
 18241  16B0                     l9152:	
 18242                           
 18243                           ;Dimmer_B1.c: 657: }
 18244                           ;Dimmer_B1.c: 658: }
 18245                           ;Dimmer_B1.c: 675: DimmerLights_SelectPointer(sw);
 18246  16B0  0829               	movf	setDimmerLights_SwOn@sw,w
 18247  16B1  319D  2567  3196   	fcall	_DimmerLights_SelectPointer
 18248                           
 18249                           ;Dimmer_B1.c: 676: if (idle == 0) {
 18250  16B4  0020               	movlb	0	; select bank0
 18251  16B5  08A8               	movf	setDimmerLights_SwOn@idle,f
 18252  16B6  1D03               	skipz
 18253  16B7  0008               	return
 18254                           
 18255                           ;Dimmer_B1.c: 677: DimmerLights->SwFlag = 1;
 18256  16B8  0021               	movlb	1	; select bank1
 18257  16B9  0846               	movf	_DimmerLights^(0+128),w
 18258  16BA  0086               	movwf	6
 18259  16BB  3001               	movlw	1	; select bank2/3
 18260  16BC  0087               	movwf	7
 18261  16BD  1401               	bsf	1,0
 18262                           
 18263                           ;Dimmer_B1.c: 678: if (DimmerLights->Status == 0) {
 18264  16BE  0A46               	incf	_DimmerLights^(0+128),w
 18265  16BF  0086               	movwf	6
 18266  16C0  3001               	movlw	1	; select bank2/3
 18267  16C1  0087               	movwf	7
 18268  16C2  1801               	btfsc	1,0
 18269  16C3  2ED4               	goto	l9160
 18270                           
 18271                           ;Dimmer_B1.c: 679: DimmerLights->Status = 1;
 18272  16C4  0A46               	incf	_DimmerLights^(0+128),w
 18273  16C5  0086               	movwf	6
 18274  16C6  3001               	movlw	1	; select bank2/3
 18275  16C7  0087               	movwf	7
 18276  16C8  1401               	bsf	1,0
 18277                           
 18278                           ;Dimmer_B1.c: 680: DimmerLights->Trigger = 1;
 18279  16C9  0846               	movf	_DimmerLights^(0+128),w
 18280  16CA  0086               	movwf	6
 18281  16CB  3001               	movlw	1	; select bank2/3
 18282  16CC  0087               	movwf	7
 18283  16CD  1481               	bsf	1,1
 18284                           
 18285                           ;Dimmer_B1.c: 681: DimmerLights->Switch = 1;
 18286  16CE  0846               	movf	_DimmerLights^(0+128),w
 18287  16CF  0086               	movwf	6
 18288  16D0  3001               	movlw	1	; select bank2/3
 18289  16D1  0087               	movwf	7
 18290  16D2  1501               	bsf	1,2
 18291                           
 18292                           ;Dimmer_B1.c: 682: } else {
 18293  16D3  2ED9               	goto	l9162
 18294  16D4                     l9160:	
 18295                           
 18296                           ;Dimmer_B1.c: 683: DimmerLights->Status = 0;
 18297  16D4  0A46               	incf	_DimmerLights^(0+128),w
 18298  16D5  0086               	movwf	6
 18299  16D6  3001               	movlw	1	; select bank2/3
 18300  16D7  0087               	movwf	7
 18301  16D8  1001               	bcf	1,0
 18302  16D9                     l9162:	
 18303                           
 18304                           ;Dimmer_B1.c: 684: }
 18305                           ;Dimmer_B1.c: 685: setBuz(1, 100);
 18306  16D9  3064               	movlw	100
 18307  16DA  0020               	movlb	0	; select bank0
 18308  16DB  00A4               	movwf	setBuz@time
 18309  16DC  3000               	movlw	0
 18310  16DD  00A5               	movwf	setBuz@time+1
 18311  16DE  3001               	movlw	1
 18312  16DF  3195  2584         	fcall	_setBuz
 18313  16E1  0008               	return
 18314  16E2                     __end_of_setDimmerLights_SwOn:	
 18315                           
 18316                           	psect	text127
 18317  1584                     __ptext127:	
 18318 ;; *************** function _setBuz *****************
 18319 ;; Defined at:
 18320 ;;		line 22 in file "../src/Buzzer_B1.c"
 18321 ;; Parameters:    Size  Location     Type
 18322 ;;  count           1    wreg     unsigned char 
 18323 ;;  time            2    4[BANK0 ] int 
 18324 ;; Auto vars:     Size  Location     Type
 18325 ;;  count           1    8[COMMON] unsigned char 
 18326 ;; Return value:  Size  Location     Type
 18327 ;;		None               void
 18328 ;; Registers used:
 18329 ;;		wreg, status,2, status,0, pclath, cstack
 18330 ;; Tracked objects:
 18331 ;;		On entry : 0/0
 18332 ;;		On exit  : 0/0
 18333 ;;		Unchanged: 0/0
 18334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18335 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18336 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18337 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18338 ;;      Totals:         2       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18339 ;;Total ram usage:        4 bytes
 18340 ;; Hardware stack levels used:    1
 18341 ;; Hardware stack levels required when called:    4
 18342 ;; This function calls:
 18343 ;;		___awdiv
 18344 ;; This function is called by:
 18345 ;;		_setDimmerLights_SwOn
 18346 ;;		_setDimmerLights_Dimming
 18347 ;;		_setTemp_Main
 18348 ;;		_setLog_Code
 18349 ;;		_setRFSW_Control
 18350 ;;		_setSw_Main
 18351 ;;		_my_MainTimer
 18352 ;;		_Exception_Main
 18353 ;; This function uses a non-reentrant model
 18354 ;;
 18355                           
 18356                           
 18357                           ;psect for function _setBuz
 18358  1584                     _setBuz:	
 18359                           
 18360                           ;incstack = 0
 18361                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 18362                           ;setBuz@count stored from wreg
 18363  1584  00F8               	movwf	setBuz@count
 18364                           
 18365                           ;Buzzer_B1.c: 23: time /= 20;
 18366  1585  3014               	movlw	20
 18367  1586  00F2               	movwf	___awdiv@divisor
 18368  1587  3000               	movlw	0
 18369  1588  00F3               	movwf	___awdiv@divisor+1
 18370  1589  0020               	movlb	0	; select bank0
 18371  158A  0825               	movf	setBuz@time+1,w
 18372  158B  01F5               	clrf	___awdiv@dividend+1
 18373  158C  07F5               	addwf	___awdiv@dividend+1,f
 18374  158D  0824               	movf	setBuz@time,w
 18375  158E  01F4               	clrf	___awdiv@dividend
 18376  158F  07F4               	addwf	___awdiv@dividend,f
 18377  1590  3195  25D7  3195   	fcall	___awdiv
 18378  1593  0873               	movf	?___awdiv+1,w
 18379  1594  0020               	movlb	0	; select bank0
 18380  1595  01A5               	clrf	setBuz@time+1
 18381  1596  07A5               	addwf	setBuz@time+1,f
 18382  1597  0872               	movf	?___awdiv,w
 18383  1598  01A4               	clrf	setBuz@time
 18384  1599  07A4               	addwf	setBuz@time,f
 18385                           
 18386                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 18387  159A  0021               	movlb	1	; select bank1
 18388  159B  1C2E               	btfss	_Buz1^(0+128),0
 18389  159C  0008               	return
 18390                           
 18391                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 18392  159D  18AE               	btfsc	_Buz1^(0+128),1
 18393  159E  2DB3               	goto	l96
 18394                           
 18395                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 18396  159F  14AE               	bsf	_Buz1^(0+128),1
 18397                           
 18398                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 18399  15A0  01AF               	clrf	(_Buz1^(0+128)+1)
 18400  15A1  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 18401                           
 18402                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 18403  15A2  0878               	movf	setBuz@count,w
 18404  15A3  00F7               	movwf	??_setBuz
 18405  15A4  0877               	movf	??_setBuz,w
 18406  15A5  00B1               	movwf	(_Buz1^(0+128)+3)
 18407                           
 18408                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 18409  15A6  0020               	movlb	0	; select bank0
 18410  15A7  0825               	movf	setBuz@time+1,w
 18411  15A8  0021               	movlb	1	; select bank1
 18412  15A9  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 18413  15AA  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 18414  15AB  0020               	movlb	0	; select bank0
 18415  15AC  0824               	movf	setBuz@time,w
 18416  15AD  0021               	movlb	1	; select bank1
 18417  15AE  01B4               	clrf	(_Buz1^(0+128)+6)
 18418  15AF  07B4               	addwf	(_Buz1^(0+128)+6),f
 18419                           
 18420                           ;Buzzer_B1.c: 30: RB3 = 1;
 18421  15B0  0020               	movlb	0	; select bank0
 18422  15B1  158D               	bsf	13,3	;volatile
 18423                           
 18424                           ;Buzzer_B1.c: 31: } else {
 18425  15B2  0008               	return
 18426  15B3                     l96:	
 18427                           
 18428                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 18429  15B3  19AE               	btfsc	_Buz1^(0+128),3
 18430  15B4  2DC5               	goto	l98
 18431                           
 18432                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 18433  15B5  15AE               	bsf	_Buz1^(0+128),3
 18434                           
 18435                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 18436  15B6  0878               	movf	setBuz@count,w
 18437  15B7  00F7               	movwf	??_setBuz
 18438  15B8  0877               	movf	??_setBuz,w
 18439  15B9  00B2               	movwf	(_Buz1^(0+128)+4)
 18440                           
 18441                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 18442  15BA  0020               	movlb	0	; select bank0
 18443  15BB  0825               	movf	setBuz@time+1,w
 18444  15BC  0021               	movlb	1	; select bank1
 18445  15BD  01B7               	clrf	((_Buz1+1)^(0+128)+8)
 18446  15BE  07B7               	addwf	((_Buz1+1)^(0+128)+8),f
 18447  15BF  0020               	movlb	0	; select bank0
 18448  15C0  0824               	movf	setBuz@time,w
 18449  15C1  0021               	movlb	1	; select bank1
 18450  15C2  01B6               	clrf	(_Buz1^(0+128)+8)
 18451  15C3  07B6               	addwf	(_Buz1^(0+128)+8),f
 18452                           
 18453                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 18454  15C4  0008               	return
 18455  15C5                     l98:	
 18456  15C5  1A2E               	btfsc	_Buz1^(0+128),4
 18457  15C6  0008               	return
 18458                           
 18459                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 18460  15C7  162E               	bsf	_Buz1^(0+128),4
 18461                           
 18462                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 18463  15C8  0878               	movf	setBuz@count,w
 18464  15C9  00F7               	movwf	??_setBuz
 18465  15CA  0877               	movf	??_setBuz,w
 18466  15CB  00B3               	movwf	(_Buz1^(0+128)+5)
 18467                           
 18468                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 18469  15CC  0020               	movlb	0	; select bank0
 18470  15CD  0825               	movf	setBuz@time+1,w
 18471  15CE  0021               	movlb	1	; select bank1
 18472  15CF  01B9               	clrf	((_Buz1+1)^(0+128)+10)
 18473  15D0  07B9               	addwf	((_Buz1+1)^(0+128)+10),f
 18474  15D1  0020               	movlb	0	; select bank0
 18475  15D2  0824               	movf	setBuz@time,w
 18476  15D3  0021               	movlb	1	; select bank1
 18477  15D4  01B8               	clrf	(_Buz1^(0+128)+10)
 18478  15D5  07B8               	addwf	(_Buz1^(0+128)+10),f
 18479  15D6  0008               	return
 18480  15D7                     __end_of_setBuz:	
 18481                           
 18482                           	psect	text128
 18483  15D7                     __ptext128:	
 18484 ;; *************** function ___awdiv *****************
 18485 ;; Defined at:
 18486 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 18487 ;; Parameters:    Size  Location     Type
 18488 ;;  divisor         2    2[COMMON] int 
 18489 ;;  dividend        2    4[COMMON] int 
 18490 ;; Auto vars:     Size  Location     Type
 18491 ;;  quotient        2    2[BANK0 ] int 
 18492 ;;  sign            1    1[BANK0 ] unsigned char 
 18493 ;;  counter         1    0[BANK0 ] unsigned char 
 18494 ;; Return value:  Size  Location     Type
 18495 ;;                  2    2[COMMON] int 
 18496 ;; Registers used:
 18497 ;;		wreg, status,2, status,0
 18498 ;; Tracked objects:
 18499 ;;		On entry : 0/0
 18500 ;;		On exit  : 0/0
 18501 ;;		Unchanged: 0/0
 18502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18503 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18504 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18505 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18506 ;;      Totals:         5       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18507 ;;Total ram usage:        9 bytes
 18508 ;; Hardware stack levels used:    1
 18509 ;; Hardware stack levels required when called:    3
 18510 ;; This function calls:
 18511 ;;		Nothing
 18512 ;; This function is called by:
 18513 ;;		_setBuz
 18514 ;; This function uses a non-reentrant model
 18515 ;;
 18516                           
 18517                           
 18518                           ;psect for function ___awdiv
 18519  15D7                     ___awdiv:	
 18520                           
 18521                           ;incstack = 0
 18522                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 18523  15D7  0020               	movlb	0	; select bank0
 18524  15D8  01A1               	clrf	___awdiv@sign
 18525  15D9  1FF3               	btfss	___awdiv@divisor+1,7
 18526  15DA  2DE2               	goto	l9026
 18527  15DB  09F2               	comf	___awdiv@divisor,f
 18528  15DC  09F3               	comf	___awdiv@divisor+1,f
 18529  15DD  0AF2               	incf	___awdiv@divisor,f
 18530  15DE  1903               	skipnz
 18531  15DF  0AF3               	incf	___awdiv@divisor+1,f
 18532  15E0  01A1               	clrf	___awdiv@sign
 18533  15E1  0AA1               	incf	___awdiv@sign,f
 18534  15E2                     l9026:	
 18535  15E2  1FF5               	btfss	___awdiv@dividend+1,7
 18536  15E3  2DED               	goto	l9032
 18537  15E4  09F4               	comf	___awdiv@dividend,f
 18538  15E5  09F5               	comf	___awdiv@dividend+1,f
 18539  15E6  0AF4               	incf	___awdiv@dividend,f
 18540  15E7  1903               	skipnz
 18541  15E8  0AF5               	incf	___awdiv@dividend+1,f
 18542  15E9  3001               	movlw	1
 18543  15EA  00F6               	movwf	??___awdiv
 18544  15EB  0876               	movf	??___awdiv,w
 18545  15EC  06A1               	xorwf	___awdiv@sign,f
 18546  15ED                     l9032:	
 18547  15ED  01A2               	clrf	___awdiv@quotient
 18548  15EE  01A3               	clrf	___awdiv@quotient+1
 18549  15EF  0873               	movf	___awdiv@divisor+1,w
 18550  15F0  0472               	iorwf	___awdiv@divisor,w
 18551  15F1  1903               	skipnz
 18552  15F2  2E1C               	goto	l9054
 18553  15F3  01A0               	clrf	___awdiv@counter
 18554  15F4  0AA0               	incf	___awdiv@counter,f
 18555  15F5                     l9042:	
 18556  15F5  1BF3               	btfsc	___awdiv@divisor+1,7
 18557  15F6  2E01               	goto	l9044
 18558  15F7  3001               	movlw	1
 18559  15F8                     u10045:	
 18560  15F8  35F2               	lslf	___awdiv@divisor,f
 18561  15F9  0DF3               	rlf	___awdiv@divisor+1,f
 18562  15FA  0B89               	decfsz	9,f
 18563  15FB  2DF8               	goto	u10045
 18564  15FC  3001               	movlw	1
 18565  15FD  00F6               	movwf	??___awdiv
 18566  15FE  0876               	movf	??___awdiv,w
 18567  15FF  07A0               	addwf	___awdiv@counter,f
 18568  1600  2DF5               	goto	l9042
 18569  1601                     l9044:	
 18570  1601  3001               	movlw	1
 18571  1602                     u10065:	
 18572  1602  35A2               	lslf	___awdiv@quotient,f
 18573  1603  0DA3               	rlf	___awdiv@quotient+1,f
 18574  1604  0B89               	decfsz	9,f
 18575  1605  2E02               	goto	u10065
 18576  1606  0873               	movf	___awdiv@divisor+1,w
 18577  1607  0275               	subwf	___awdiv@dividend+1,w
 18578  1608  1D03               	skipz
 18579  1609  2E0C               	goto	u10075
 18580  160A  0872               	movf	___awdiv@divisor,w
 18581  160B  0274               	subwf	___awdiv@dividend,w
 18582  160C                     u10075:	
 18583  160C  1C03               	skipc
 18584  160D  2E13               	goto	l9050
 18585  160E  0872               	movf	___awdiv@divisor,w
 18586  160F  02F4               	subwf	___awdiv@dividend,f
 18587  1610  0873               	movf	___awdiv@divisor+1,w
 18588  1611  3BF5               	subwfb	___awdiv@dividend+1,f
 18589  1612  1422               	bsf	___awdiv@quotient,0
 18590  1613                     l9050:	
 18591  1613  3001               	movlw	1
 18592  1614                     u10085:	
 18593  1614  36F3               	lsrf	___awdiv@divisor+1,f
 18594  1615  0CF2               	rrf	___awdiv@divisor,f
 18595  1616  0B89               	decfsz	9,f
 18596  1617  2E14               	goto	u10085
 18597  1618  3001               	movlw	1
 18598  1619  02A0               	subwf	___awdiv@counter,f
 18599  161A  1D03               	btfss	3,2
 18600  161B  2E01               	goto	l9044
 18601  161C                     l9054:	
 18602  161C  0821               	movf	___awdiv@sign,w
 18603  161D  1903               	btfsc	3,2
 18604  161E  2E24               	goto	l9058
 18605  161F  09A2               	comf	___awdiv@quotient,f
 18606  1620  09A3               	comf	___awdiv@quotient+1,f
 18607  1621  0AA2               	incf	___awdiv@quotient,f
 18608  1622  1903               	skipnz
 18609  1623  0AA3               	incf	___awdiv@quotient+1,f
 18610  1624                     l9058:	
 18611  1624  0823               	movf	___awdiv@quotient+1,w
 18612  1625  01F3               	clrf	?___awdiv+1
 18613  1626  07F3               	addwf	?___awdiv+1,f
 18614  1627  0822               	movf	___awdiv@quotient,w
 18615  1628  01F2               	clrf	?___awdiv
 18616  1629  07F2               	addwf	?___awdiv,f
 18617  162A  0008               	return
 18618  162B                     __end_of___awdiv:	
 18619                           
 18620                           	psect	text129
 18621  12CE                     __ptext129:	
 18622 ;; *************** function _setDimmerLights_SwOff *****************
 18623 ;; Defined at:
 18624 ;;		line 690 in file "../src/Dimmer_B1.c"
 18625 ;; Parameters:    Size  Location     Type
 18626 ;;  sw              1    wreg     unsigned char 
 18627 ;; Auto vars:     Size  Location     Type
 18628 ;;  sw              1    4[COMMON] unsigned char 
 18629 ;; Return value:  Size  Location     Type
 18630 ;;		None               void
 18631 ;; Registers used:
 18632 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18633 ;; Tracked objects:
 18634 ;;		On entry : 0/0
 18635 ;;		On exit  : 0/0
 18636 ;;		Unchanged: 0/0
 18637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18639 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18641 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18642 ;;Total ram usage:        1 bytes
 18643 ;; Hardware stack levels used:    1
 18644 ;; Hardware stack levels required when called:    4
 18645 ;; This function calls:
 18646 ;;		_DimmerLights_SelectPointer
 18647 ;; This function is called by:
 18648 ;;		_DlyOff_Main
 18649 ;;		_setControl_Lights_Table
 18650 ;;		_setRFSW_Control
 18651 ;;		_setRFSW_AdjControl
 18652 ;;		_setSw_Main
 18653 ;;		_Exception_Main
 18654 ;; This function uses a non-reentrant model
 18655 ;;
 18656                           
 18657                           
 18658                           ;psect for function _setDimmerLights_SwOff
 18659  12CE                     _setDimmerLights_SwOff:	
 18660                           
 18661                           ;incstack = 0
 18662                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 18663                           ;setDimmerLights_SwOff@sw stored from wreg
 18664  12CE  00F4               	movwf	setDimmerLights_SwOff@sw
 18665                           
 18666                           ;Dimmer_B1.c: 691: DimmerLights_SelectPointer(sw);
 18667  12CF  0874               	movf	setDimmerLights_SwOff@sw,w
 18668  12D0  319D  2567  3192   	fcall	_DimmerLights_SelectPointer
 18669                           
 18670                           ;Dimmer_B1.c: 693: if (DimmerLights->SwFlag == 1) {
 18671  12D3  0021               	movlb	1	; select bank1
 18672  12D4  0846               	movf	_DimmerLights^(0+128),w
 18673  12D5  0086               	movwf	6
 18674  12D6  3001               	movlw	1	; select bank2/3
 18675  12D7  0087               	movwf	7
 18676  12D8  1C01               	btfss	1,0
 18677  12D9  0008               	return
 18678                           
 18679                           ;Dimmer_B1.c: 694: DimmerLights->SwFlag = 0;
 18680  12DA  0846               	movf	_DimmerLights^(0+128),w
 18681  12DB  0086               	movwf	6
 18682  12DC  3001               	movlw	1	; select bank2/3
 18683  12DD  0087               	movwf	7
 18684  12DE  1001               	bcf	1,0
 18685                           
 18686                           ;Dimmer_B1.c: 695: if (DimmerLights->Status == 1) {
 18687  12DF  0A46               	incf	_DimmerLights^(0+128),w
 18688  12E0  0086               	movwf	6
 18689  12E1  3001               	movlw	1	; select bank2/3
 18690  12E2  0087               	movwf	7
 18691  12E3  1C01               	btfss	1,0
 18692  12E4  2AFB               	goto	l6640
 18693                           
 18694                           ;Dimmer_B1.c: 696: if (DimmerLights->DimmingSwFlag == 1) {
 18695  12E5  0846               	movf	_DimmerLights^(0+128),w
 18696  12E6  0086               	movwf	6
 18697  12E7  3001               	movlw	1	; select bank2/3
 18698  12E8  0087               	movwf	7
 18699  12E9  1D81               	btfss	1,3
 18700  12EA  0008               	return
 18701                           
 18702                           ;Dimmer_B1.c: 697: DimmerLights->DimmingSwFlag = 0;
 18703  12EB  0846               	movf	_DimmerLights^(0+128),w
 18704  12EC  0086               	movwf	6
 18705  12ED  3001               	movlw	1	; select bank2/3
 18706  12EE  0087               	movwf	7
 18707  12EF  1181               	bcf	1,3
 18708                           
 18709                           ;Dimmer_B1.c: 699: DimmerLights->DimmingTrigger = 1;
 18710  12F0  0846               	movf	_DimmerLights^(0+128),w
 18711  12F1  0086               	movwf	6
 18712  12F2  3001               	movlw	1	; select bank2/3
 18713  12F3  0087               	movwf	7
 18714  12F4  1601               	bsf	1,4
 18715                           
 18716                           ;Dimmer_B1.c: 700: DimmerLights->DimmingSwitch = 0;
 18717  12F5  0846               	movf	_DimmerLights^(0+128),w
 18718  12F6  0086               	movwf	6
 18719  12F7  3001               	movlw	1	; select bank2/3
 18720  12F8  0087               	movwf	7
 18721  12F9  1281               	bcf	1,5
 18722                           
 18723                           ;Dimmer_B1.c: 701: }
 18724                           ;Dimmer_B1.c: 702: } else {
 18725  12FA  0008               	return
 18726  12FB                     l6640:	
 18727                           
 18728                           ;Dimmer_B1.c: 704: DimmerLights->Trigger = 1;
 18729  12FB  0846               	movf	_DimmerLights^(0+128),w
 18730  12FC  0086               	movwf	6
 18731  12FD  3001               	movlw	1	; select bank2/3
 18732  12FE  0087               	movwf	7
 18733  12FF  1481               	bsf	1,1
 18734                           
 18735                           ;Dimmer_B1.c: 705: DimmerLights->Switch = 0;
 18736  1300  0846               	movf	_DimmerLights^(0+128),w
 18737  1301  0086               	movwf	6
 18738  1302  3001               	movlw	1	; select bank2/3
 18739  1303  0087               	movwf	7
 18740  1304  1101               	bcf	1,2
 18741  1305  0008               	return
 18742  1306                     __end_of_setDimmerLights_SwOff:	
 18743                           
 18744                           	psect	text130
 18745  1BE6                     __ptext130:	
 18746 ;; *************** function _getDimmerLights_Status *****************
 18747 ;; Defined at:
 18748 ;;		line 994 in file "../src/Dimmer_B1.c"
 18749 ;; Parameters:    Size  Location     Type
 18750 ;;  lights          1    wreg     unsigned char 
 18751 ;; Auto vars:     Size  Location     Type
 18752 ;;  lights          1    4[COMMON] unsigned char 
 18753 ;;  status          1    5[COMMON] unsigned char 
 18754 ;; Return value:  Size  Location     Type
 18755 ;;                  1    wreg      unsigned char 
 18756 ;; Registers used:
 18757 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18758 ;; Tracked objects:
 18759 ;;		On entry : 0/0
 18760 ;;		On exit  : 0/0
 18761 ;;		Unchanged: 0/0
 18762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18764 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18766 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18767 ;;Total ram usage:        2 bytes
 18768 ;; Hardware stack levels used:    1
 18769 ;; Hardware stack levels required when called:    4
 18770 ;; This function calls:
 18771 ;;		_DimmerLights_SelectPointer
 18772 ;; This function is called by:
 18773 ;;		_DlyOff_Main
 18774 ;;		_setControl_Lights_Table
 18775 ;;		_setRFSW_Control
 18776 ;;		_setRFSW_AdjControl
 18777 ;;		_Exception_Main
 18778 ;; This function uses a non-reentrant model
 18779 ;;
 18780                           
 18781                           
 18782                           ;psect for function _getDimmerLights_Status
 18783  1BE6                     _getDimmerLights_Status:	
 18784                           
 18785                           ;incstack = 0
 18786                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 18787                           ;getDimmerLights_Status@lights stored from wreg
 18788  1BE6  00F4               	movwf	getDimmerLights_Status@lights
 18789                           
 18790                           ;Dimmer_B1.c: 995: DimmerLights_SelectPointer(lights);
 18791  1BE7  0874               	movf	getDimmerLights_Status@lights,w
 18792  1BE8  319D  2567         	fcall	_DimmerLights_SelectPointer
 18793                           
 18794                           ;Dimmer_B1.c: 996: char status = DimmerLights->Status == 1 ? 1 : 0;
 18795  1BEA  0021               	movlb	1	; select bank1
 18796  1BEB  0A46               	incf	_DimmerLights^(0+128),w
 18797  1BEC  0086               	movwf	6
 18798  1BED  3001               	movlw	1	; select bank2/3
 18799  1BEE  0087               	movwf	7
 18800  1BEF  3000               	movlw	0
 18801  1BF0  1801               	btfsc	1,0
 18802  1BF1  3001               	movlw	1
 18803  1BF2  00F5               	movwf	getDimmerLights_Status@status
 18804                           
 18805                           ;Dimmer_B1.c: 997: return status;
 18806  1BF3  0875               	movf	getDimmerLights_Status@status,w
 18807  1BF4  0008               	return
 18808  1BF5                     __end_of_getDimmerLights_Status:	
 18809                           
 18810                           	psect	text131
 18811  1D67                     __ptext131:	
 18812 ;; *************** function _DimmerLights_SelectPointer *****************
 18813 ;; Defined at:
 18814 ;;		line 572 in file "../src/Dimmer_B1.c"
 18815 ;; Parameters:    Size  Location     Type
 18816 ;;  lights          1    wreg     unsigned char 
 18817 ;; Auto vars:     Size  Location     Type
 18818 ;;  lights          1    3[COMMON] unsigned char 
 18819 ;; Return value:  Size  Location     Type
 18820 ;;		None               void
 18821 ;; Registers used:
 18822 ;;		wreg
 18823 ;; Tracked objects:
 18824 ;;		On entry : 0/0
 18825 ;;		On exit  : 0/0
 18826 ;;		Unchanged: 0/0
 18827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18829 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18830 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18831 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18832 ;;Total ram usage:        2 bytes
 18833 ;; Hardware stack levels used:    1
 18834 ;; Hardware stack levels required when called:    3
 18835 ;; This function calls:
 18836 ;;		Nothing
 18837 ;; This function is called by:
 18838 ;;		_setDimmerLights_SwOn
 18839 ;;		_setDimmerLights_SwOff
 18840 ;;		_setDimmerLights_DimmingOn
 18841 ;;		_setDimmerLights_Main
 18842 ;;		_getDimmerLights_Status
 18843 ;;		_setDimmerLights_DimmingRun
 18844 ;;		_setDimmerLights_Status
 18845 ;; This function uses a non-reentrant model
 18846 ;;
 18847                           
 18848                           
 18849                           ;psect for function _DimmerLights_SelectPointer
 18850  1D67                     _DimmerLights_SelectPointer:	
 18851                           
 18852                           ;incstack = 0
 18853                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 18854                           ;DimmerLights_SelectPointer@lights stored from wreg
 18855  1D67  00F3               	movwf	DimmerLights_SelectPointer@lights
 18856                           
 18857                           ;Dimmer_B1.c: 574: if (lights == 1) {
 18858  1D68  0873               	movf	DimmerLights_SelectPointer@lights,w
 18859  1D69  3A01               	xorlw	1
 18860  1D6A  1D03               	skipz
 18861  1D6B  2D72               	goto	l6312
 18862                           
 18863                           ;Dimmer_B1.c: 575: DimmerLights = &DimmerLights1;
 18864  1D6C  305E               	movlw	_DimmerLights1& (0+255)
 18865  1D6D  00F2               	movwf	??_DimmerLights_SelectPointer
 18866  1D6E  0872               	movf	??_DimmerLights_SelectPointer,w
 18867  1D6F  0021               	movlb	1	; select bank1
 18868  1D70  00C6               	movwf	_DimmerLights^(0+128)
 18869                           
 18870                           ;Dimmer_B1.c: 576: }
 18871  1D71  0008               	return
 18872  1D72                     l6312:	
 18873                           
 18874                           ;Dimmer_B1.c: 579: else if (lights == 2) {
 18875  1D72  0873               	movf	DimmerLights_SelectPointer@lights,w
 18876  1D73  3A02               	xorlw	2
 18877  1D74  1D03               	skipz
 18878  1D75  0008               	return
 18879                           
 18880                           ;Dimmer_B1.c: 580: DimmerLights = &DimmerLights2;
 18881  1D76  3066               	movlw	_DimmerLights2& (0+255)
 18882  1D77  00F2               	movwf	??_DimmerLights_SelectPointer
 18883  1D78  0872               	movf	??_DimmerLights_SelectPointer,w
 18884  1D79  0021               	movlb	1	; select bank1
 18885  1D7A  00C6               	movwf	_DimmerLights^(0+128)
 18886  1D7B  0008               	return
 18887  1D7C                     __end_of_DimmerLights_SelectPointer:	
 18888                           
 18889                           	psect	text132
 18890  1B12                     __ptext132:	
 18891 ;; *************** function _DelayOff_Initialization *****************
 18892 ;; Defined at:
 18893 ;;		line 26 in file "../src/DelayOff_B1.c"
 18894 ;; Parameters:    Size  Location     Type
 18895 ;;		None
 18896 ;; Auto vars:     Size  Location     Type
 18897 ;;		None
 18898 ;; Return value:  Size  Location     Type
 18899 ;;		None               void
 18900 ;; Registers used:
 18901 ;;		wreg, status,2, status,0, pclath, cstack
 18902 ;; Tracked objects:
 18903 ;;		On entry : 0/0
 18904 ;;		On exit  : 0/0
 18905 ;;		Unchanged: 0/0
 18906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18908 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18910 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18911 ;;Total ram usage:        0 bytes
 18912 ;; Hardware stack levels used:    1
 18913 ;; Hardware stack levels required when called:    5
 18914 ;; This function calls:
 18915 ;;		_DlyOff_Initialization
 18916 ;; This function is called by:
 18917 ;;		_main
 18918 ;; This function uses a non-reentrant model
 18919 ;;
 18920                           
 18921                           
 18922                           ;psect for function _DelayOff_Initialization
 18923  1B12                     _DelayOff_Initialization:	
 18924                           
 18925                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 18926                           
 18927                           ;incstack = 0
 18928                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18929  1B12  3001               	movlw	1
 18930  1B13  319A  22D9  319B   	fcall	_DlyOff_Initialization
 18931                           
 18932                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 18933  1B16  3002               	movlw	2
 18934  1B17  319A  22D9         	fcall	_DlyOff_Initialization
 18935  1B19  0008               	return
 18936  1B1A                     __end_of_DelayOff_Initialization:	
 18937                           
 18938                           	psect	text133
 18939  1AD9                     __ptext133:	
 18940 ;; *************** function _DlyOff_Initialization *****************
 18941 ;; Defined at:
 18942 ;;		line 56 in file "../src/DelayOff_B1.c"
 18943 ;; Parameters:    Size  Location     Type
 18944 ;;  sw              1    wreg     unsigned char 
 18945 ;; Auto vars:     Size  Location     Type
 18946 ;;  sw              1    4[COMMON] unsigned char 
 18947 ;; Return value:  Size  Location     Type
 18948 ;;		None               void
 18949 ;; Registers used:
 18950 ;;		wreg, status,2, status,0, pclath, cstack
 18951 ;; Tracked objects:
 18952 ;;		On entry : 0/0
 18953 ;;		On exit  : 0/0
 18954 ;;		Unchanged: 0/0
 18955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18957 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18959 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18960 ;;Total ram usage:        1 bytes
 18961 ;; Hardware stack levels used:    1
 18962 ;; Hardware stack levels required when called:    4
 18963 ;; This function calls:
 18964 ;;		_DelayOffPointSelect
 18965 ;; This function is called by:
 18966 ;;		_DelayOff_Initialization
 18967 ;; This function uses a non-reentrant model
 18968 ;;
 18969                           
 18970                           
 18971                           ;psect for function _DlyOff_Initialization
 18972  1AD9                     _DlyOff_Initialization:	
 18973                           
 18974                           ;incstack = 0
 18975                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 18976                           ;DlyOff_Initialization@sw stored from wreg
 18977  1AD9  00F4               	movwf	DlyOff_Initialization@sw
 18978                           
 18979                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 18980  1ADA  0874               	movf	DlyOff_Initialization@sw,w
 18981  1ADB  319D  2552         	fcall	_DelayOffPointSelect
 18982  1ADD  0008               	return
 18983  1ADE                     __end_of_DlyOff_Initialization:	
 18984                           
 18985                           	psect	text134
 18986  1D52                     __ptext134:	
 18987 ;; *************** function _DelayOffPointSelect *****************
 18988 ;; Defined at:
 18989 ;;		line 7 in file "../src/DelayOff_B1.c"
 18990 ;; Parameters:    Size  Location     Type
 18991 ;;  sw              1    wreg     unsigned char 
 18992 ;; Auto vars:     Size  Location     Type
 18993 ;;  sw              1    3[COMMON] unsigned char 
 18994 ;; Return value:  Size  Location     Type
 18995 ;;		None               void
 18996 ;; Registers used:
 18997 ;;		wreg
 18998 ;; Tracked objects:
 18999 ;;		On entry : 0/0
 19000 ;;		On exit  : 0/0
 19001 ;;		Unchanged: 0/0
 19002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19004 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19005 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19006 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19007 ;;Total ram usage:        2 bytes
 19008 ;; Hardware stack levels used:    1
 19009 ;; Hardware stack levels required when called:    3
 19010 ;; This function calls:
 19011 ;;		Nothing
 19012 ;; This function is called by:
 19013 ;;		_DlyOff_Initialization
 19014 ;;		_DlyOff_Main
 19015 ;;		_setDelayOff_GO
 19016 ;;		_getDelayOff_GO
 19017 ;; This function uses a non-reentrant model
 19018 ;;
 19019                           
 19020                           
 19021                           ;psect for function _DelayOffPointSelect
 19022  1D52                     _DelayOffPointSelect:	
 19023                           
 19024                           ;incstack = 0
 19025                           ; Regs used in _DelayOffPointSelect: [wreg]
 19026                           ;DelayOffPointSelect@sw stored from wreg
 19027  1D52  00F3               	movwf	DelayOffPointSelect@sw
 19028                           
 19029                           ;DelayOff_B1.c: 9: if (sw == 1) {
 19030  1D53  0873               	movf	DelayOffPointSelect@sw,w
 19031  1D54  3A01               	xorlw	1
 19032  1D55  1D03               	skipz
 19033  1D56  2D5D               	goto	l6302
 19034                           
 19035                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 19036  1D57  30D0               	movlw	_DlySw1& (0+255)
 19037  1D58  00F2               	movwf	??_DelayOffPointSelect
 19038  1D59  0872               	movf	??_DelayOffPointSelect,w
 19039  1D5A  0021               	movlb	1	; select bank1
 19040  1D5B  00C4               	movwf	_DelayOff^(0+128)
 19041                           
 19042                           ;DelayOff_B1.c: 11: }
 19043  1D5C  0008               	return
 19044  1D5D                     l6302:	
 19045                           
 19046                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 19047  1D5D  0873               	movf	DelayOffPointSelect@sw,w
 19048  1D5E  3A02               	xorlw	2
 19049  1D5F  1D03               	skipz
 19050  1D60  0008               	return
 19051                           
 19052                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 19053  1D61  30D5               	movlw	_DlySw2& (0+255)
 19054  1D62  00F2               	movwf	??_DelayOffPointSelect
 19055  1D63  0872               	movf	??_DelayOffPointSelect,w
 19056  1D64  0021               	movlb	1	; select bank1
 19057  1D65  00C4               	movwf	_DelayOff^(0+128)
 19058  1D66  0008               	return
 19059  1D67                     __end_of_DelayOffPointSelect:	
 19060                           
 19061                           	psect	text135
 19062  13FC                     __ptext135:	
 19063 ;; *************** function _Buzzer_Main *****************
 19064 ;; Defined at:
 19065 ;;		line 46 in file "../src/Buzzer_B1.c"
 19066 ;; Parameters:    Size  Location     Type
 19067 ;;		None
 19068 ;; Auto vars:     Size  Location     Type
 19069 ;;		None
 19070 ;; Return value:  Size  Location     Type
 19071 ;;		None               void
 19072 ;; Registers used:
 19073 ;;		wreg, status,2, status,0
 19074 ;; Tracked objects:
 19075 ;;		On entry : 0/0
 19076 ;;		On exit  : 0/0
 19077 ;;		Unchanged: 0/0
 19078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19081 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19082 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19083 ;;Total ram usage:        1 bytes
 19084 ;; Hardware stack levels used:    1
 19085 ;; Hardware stack levels required when called:    3
 19086 ;; This function calls:
 19087 ;;		Nothing
 19088 ;; This function is called by:
 19089 ;;		_main
 19090 ;; This function uses a non-reentrant model
 19091 ;;
 19092                           
 19093                           
 19094                           ;psect for function _Buzzer_Main
 19095  13FC                     _Buzzer_Main:	
 19096                           
 19097                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 19098                           
 19099                           ;incstack = 0
 19100                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 19101  13FC  0021               	movlb	1	; select bank1
 19102  13FD  1CAE               	btfss	_Buz1^(0+128),1
 19103  13FE  0008               	return
 19104                           
 19105                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 19106  13FF  3001               	movlw	1
 19107  1400  07AF               	addwf	(_Buz1^(0+128)+1),f
 19108  1401  3000               	movlw	0
 19109  1402  3DB0               	addwfc	((_Buz1+1)^(0+128)+1),f
 19110                           
 19111                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 19112  1403  0835               	movf	((_Buz1+1)^(0+128)+6),w
 19113  1404  0230               	subwf	((_Buz1+1)^(0+128)+1),w
 19114  1405  1D03               	skipz
 19115  1406  2C09               	goto	u8695
 19116  1407  0834               	movf	(_Buz1^(0+128)+6),w
 19117  1408  022F               	subwf	(_Buz1^(0+128)+1),w
 19118  1409                     u8695:	
 19119  1409  1C03               	skipc
 19120  140A  0008               	return
 19121                           
 19122                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 19123  140B  01AF               	clrf	(_Buz1^(0+128)+1)
 19124  140C  01B0               	clrf	((_Buz1+1)^(0+128)+1)
 19125                           
 19126                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 19127  140D  12AE               	bcf	_Buz1^(0+128),5
 19128  140E  0020               	movlb	0	; select bank0
 19129  140F  1D8D               	btfss	13,3	;volatile
 19130  1410  2C13               	goto	l8264
 19131  1411  0021               	movlb	1	; select bank1
 19132  1412  16AE               	bsf	_Buz1^(0+128),5
 19133  1413                     l8264:	
 19134                           
 19135                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 19136  1413  0021               	movlb	1	; select bank1
 19137  1414  1AAE               	btfsc	_Buz1^(0+128),5
 19138  1415  2C3B               	goto	l106
 19139                           
 19140                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 19141  1416  08B1               	movf	(_Buz1^(0+128)+3),f
 19142  1417  1D03               	skipz
 19143  1418  2C37               	goto	l107
 19144                           
 19145                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 19146  1419  1DAE               	btfss	_Buz1^(0+128),3
 19147  141A  2C27               	goto	l108
 19148                           
 19149                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 19150  141B  11AE               	bcf	_Buz1^(0+128),3
 19151                           
 19152                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 19153  141C  0832               	movf	(_Buz1^(0+128)+4),w
 19154  141D  00F2               	movwf	??_Buzzer_Main
 19155  141E  0872               	movf	??_Buzzer_Main,w
 19156  141F  00B1               	movwf	(_Buz1^(0+128)+3)
 19157                           
 19158                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 19159  1420  0837               	movf	((_Buz1+1)^(0+128)+8),w
 19160  1421  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 19161  1422  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 19162  1423  0836               	movf	(_Buz1^(0+128)+8),w
 19163  1424  01B4               	clrf	(_Buz1^(0+128)+6)
 19164  1425  07B4               	addwf	(_Buz1^(0+128)+6),f
 19165                           
 19166                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 19167  1426  0008               	return
 19168  1427                     l108:	
 19169  1427  1E2E               	btfss	_Buz1^(0+128),4
 19170  1428  2C35               	goto	l110
 19171                           
 19172                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 19173  1429  122E               	bcf	_Buz1^(0+128),4
 19174                           
 19175                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 19176  142A  0833               	movf	(_Buz1^(0+128)+5),w
 19177  142B  00F2               	movwf	??_Buzzer_Main
 19178  142C  0872               	movf	??_Buzzer_Main,w
 19179  142D  00B1               	movwf	(_Buz1^(0+128)+3)
 19180                           
 19181                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 19182  142E  0839               	movf	((_Buz1+1)^(0+128)+10),w
 19183  142F  01B5               	clrf	((_Buz1+1)^(0+128)+6)
 19184  1430  07B5               	addwf	((_Buz1+1)^(0+128)+6),f
 19185  1431  0838               	movf	(_Buz1^(0+128)+10),w
 19186  1432  01B4               	clrf	(_Buz1^(0+128)+6)
 19187  1433  07B4               	addwf	(_Buz1^(0+128)+6),f
 19188                           
 19189                           ;Buzzer_B1.c: 62: } else {
 19190  1434  0008               	return
 19191  1435                     l110:	
 19192                           
 19193                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 19194  1435  10AE               	bcf	_Buz1^(0+128),1
 19195                           
 19196                           ;Buzzer_B1.c: 64: }
 19197                           ;Buzzer_B1.c: 65: } else {
 19198  1436  0008               	return
 19199  1437                     l107:	
 19200                           
 19201                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 19202  1437  16AE               	bsf	_Buz1^(0+128),5
 19203                           
 19204                           ;Buzzer_B1.c: 68: RB3 = 1;
 19205  1438  0020               	movlb	0	; select bank0
 19206  1439  158D               	bsf	13,3	;volatile
 19207                           
 19208                           ;Buzzer_B1.c: 69: }
 19209                           ;Buzzer_B1.c: 70: } else {
 19210  143A  0008               	return
 19211  143B                     l106:	
 19212                           
 19213                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 19214  143B  12AE               	bcf	_Buz1^(0+128),5
 19215                           
 19216                           ;Buzzer_B1.c: 73: RB3 = 0;
 19217  143C  0020               	movlb	0	; select bank0
 19218  143D  118D               	bcf	13,3	;volatile
 19219                           
 19220                           ;Buzzer_B1.c: 75: Buz1.Count--;
 19221  143E  3001               	movlw	1
 19222  143F  0021               	movlb	1	; select bank1
 19223  1440  02B1               	subwf	(_Buz1^(0+128)+3),f
 19224  1441  0008               	return
 19225  1442                     __end_of_Buzzer_Main:	
 19226                           
 19227                           	psect	text136
 19228  1AB3                     __ptext136:	
 19229 ;; *************** function _Buzzer_Initialization *****************
 19230 ;; Defined at:
 19231 ;;		line 11 in file "../src/Buzzer_B1.c"
 19232 ;; Parameters:    Size  Location     Type
 19233 ;;		None
 19234 ;; Auto vars:     Size  Location     Type
 19235 ;;		None
 19236 ;; Return value:  Size  Location     Type
 19237 ;;		None               void
 19238 ;; Registers used:
 19239 ;;		None
 19240 ;; Tracked objects:
 19241 ;;		On entry : 0/0
 19242 ;;		On exit  : 0/0
 19243 ;;		Unchanged: 0/0
 19244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19248 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19249 ;;Total ram usage:        0 bytes
 19250 ;; Hardware stack levels used:    1
 19251 ;; Hardware stack levels required when called:    3
 19252 ;; This function calls:
 19253 ;;		Nothing
 19254 ;; This function is called by:
 19255 ;;		_main
 19256 ;; This function uses a non-reentrant model
 19257 ;;
 19258                           
 19259                           
 19260                           ;psect for function _Buzzer_Initialization
 19261  1AB3                     _Buzzer_Initialization:	
 19262                           
 19263                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 19264                           
 19265                           ;incstack = 0
 19266                           ; Regs used in _Buzzer_Initialization: []
 19267  1AB3  0021               	movlb	1	; select bank1
 19268  1AB4  142E               	bsf	_Buz1^(0+128),0
 19269  1AB5  0008               	return
 19270  1AB6                     __end_of_Buzzer_Initialization:	
 19271                           
 19272                           	psect	intentry
 19273  0004                     __pintentry:	
 19274 ;; *************** function _ISR *****************
 19275 ;; Defined at:
 19276 ;;		line 112 in file "../src/MCU_B1.c"
 19277 ;; Parameters:    Size  Location     Type
 19278 ;;		None
 19279 ;; Auto vars:     Size  Location     Type
 19280 ;;		None
 19281 ;; Return value:  Size  Location     Type
 19282 ;;		None               void
 19283 ;; Registers used:
 19284 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19285 ;; Tracked objects:
 19286 ;;		On entry : 0/0
 19287 ;;		On exit  : 0/0
 19288 ;;		Unchanged: 0/0
 19289 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19292 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19293 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19294 ;;Total ram usage:        1 bytes
 19295 ;; Hardware stack levels used:    1
 19296 ;; Hardware stack levels required when called:    2
 19297 ;; This function calls:
 19298 ;;		_IOC_ISR
 19299 ;;		_TMR1_ISR
 19300 ;; This function is called by:
 19301 ;;		Interrupt level 1
 19302 ;; This function uses a non-reentrant model
 19303 ;;
 19304                           
 19305  0004                     _ISR:	
 19306                           
 19307                           ;incstack = 0
 19308                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19309  0004  147E               	bsf	126,0	;set compiler interrupt flag
 19310  0005  3180               	pagesel	$
 19311  0006  0020               	movlb	0	; select bank0
 19312  0007  087F               	movf	127,w
 19313  0008  00F1               	movwf	??_ISR
 19314                           
 19315                           ;MCU_B1.c: 115: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 19316  0009  198B               	btfsc	11,3	;volatile
 19317  000A  1C0B               	btfss	11,0	;volatile
 19318  000B  2813               	goto	i1l1401
 19319  000C  0027               	movlb	7	; select bank7
 19320  000D  1D16               	btfss	22,2	;volatile
 19321  000E  2813               	goto	i1l1401
 19322                           
 19323                           ;MCU_B1.c: 116: IOC_ISR();
 19324  000F  319B  2373  3180   	fcall	_IOC_ISR
 19325                           
 19326                           ;MCU_B1.c: 117: }
 19327  0012  281B               	goto	i1l1404
 19328  0013                     i1l1401:	
 19329                           
 19330                           ;MCU_B1.c: 125: else if (TMR1IE == 1 && TMR1IF == 1) {
 19331  0013  0021               	movlb	1	; select bank1
 19332  0014  1C11               	btfss	17,0	;volatile
 19333  0015  281B               	goto	i1l1404
 19334  0016  0020               	movlb	0	; select bank0
 19335  0017  1C11               	btfss	17,0	;volatile
 19336  0018  281B               	goto	i1l1404
 19337                           
 19338                           ;MCU_B1.c: 126: TMR1_ISR();
 19339  0019  319F  279B         	fcall	_TMR1_ISR
 19340  001B                     i1l1404:	
 19341                           ;MCU_B1.c: 127: }
 19342                           ;MCU_B1.c: 143: return;
 19343                           
 19344  001B  0871               	movf	??_ISR,w
 19345  001C  0020               	movlb	0	; select bank0
 19346  001D  00FF               	movwf	127
 19347  001E  107E               	bcf	126,0	;clear compiler interrupt flag
 19348  001F  0009               	retfie
 19349  0020                     __end_of_ISR:	
 19350                           
 19351                           	psect	text138
 19352  1F9B                     __ptext138:	
 19353 ;; *************** function _TMR1_ISR *****************
 19354 ;; Defined at:
 19355 ;;		line 231 in file "../src/MCU_B1.c"
 19356 ;; Parameters:    Size  Location     Type
 19357 ;;		None
 19358 ;; Auto vars:     Size  Location     Type
 19359 ;;		None
 19360 ;; Return value:  Size  Location     Type
 19361 ;;		None               void
 19362 ;; Registers used:
 19363 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19364 ;; Tracked objects:
 19365 ;;		On entry : 0/0
 19366 ;;		On exit  : 0/0
 19367 ;;		Unchanged: 0/0
 19368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19372 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19373 ;;Total ram usage:        0 bytes
 19374 ;; Hardware stack levels used:    1
 19375 ;; Hardware stack levels required when called:    1
 19376 ;; This function calls:
 19377 ;;		_DimmerLights_MOSFET_TMR_1
 19378 ;;		_DimmerLights_MOSFET_TMR_2
 19379 ;; This function is called by:
 19380 ;;		_ISR
 19381 ;; This function uses a non-reentrant model
 19382 ;;
 19383                           
 19384                           
 19385                           ;psect for function _TMR1_ISR
 19386  1F9B                     _TMR1_ISR:	
 19387                           
 19388                           ;MCU_B1.c: 233: TMR1H = (int)((65536-1480)/256);
 19389                           
 19390                           ;incstack = 0
 19391                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19392  1F9B  30FA               	movlw	250
 19393  1F9C  0020               	movlb	0	; select bank0
 19394  1F9D  0097               	movwf	23	;volatile
 19395                           
 19396                           ;MCU_B1.c: 234: TMR1L = (int)((65536-1480)%256);
 19397  1F9E  3038               	movlw	56
 19398  1F9F  0096               	movwf	22	;volatile
 19399                           
 19400                           ;MCU_B1.c: 235: TMR1IF = 0;
 19401  1FA0  1011               	bcf	17,0	;volatile
 19402                           
 19403                           ;MCU_B1.c: 240: DimmerLights_MOSFET_TMR_1();
 19404  1FA1  3194  24E0  319F   	fcall	_DimmerLights_MOSFET_TMR_1
 19405                           
 19406                           ;MCU_B1.c: 245: DimmerLights_MOSFET_TMR_2();
 19407  1FA4  3195  2532  319F   	fcall	_DimmerLights_MOSFET_TMR_2
 19408                           
 19409                           ;MCU_B1.c: 254: Timer1.Count++;
 19410  1FA7  3001               	movlw	1
 19411  1FA8  0021               	movlb	1	; select bank1
 19412  1FA9  07BE               	addwf	(_Timer1^(0+128)+1),f
 19413  1FAA  3000               	movlw	0
 19414  1FAB  3DBF               	addwfc	((_Timer1+1)^(0+128)+1),f
 19415                           
 19416                           ;MCU_B1.c: 255: if (Timer1.Count == (int)(20*10)) {
 19417  1FAC  3001               	movlw	1
 19418  1FAD  3EBD               	addlw	_Timer1& (0+255)
 19419  1FAE  0086               	movwf	6
 19420  1FAF  0187               	clrf	7
 19421  1FB0  3F40               	moviw [0]fsr1
 19422  1FB1  3AC8               	xorlw	200
 19423  1FB2  1D03               	skipz
 19424  1FB3  2FB6               	goto	u880_25
 19425  1FB4  3F41               	moviw [1]fsr1
 19426  1FB5  3A00               	xorlw	0
 19427  1FB6                     u880_25:	
 19428  1FB6  1D03               	skipz
 19429  1FB7  0008               	return
 19430                           
 19431                           ;MCU_B1.c: 256: Timer1.Count = 0;
 19432  1FB8  01BE               	clrf	(_Timer1^(0+128)+1)
 19433  1FB9  01BF               	clrf	((_Timer1+1)^(0+128)+1)
 19434                           
 19435                           ;MCU_B1.c: 257: Timer1.Timeout = 1;
 19436  1FBA  143D               	bsf	_Timer1^(0+128),0
 19437  1FBB  0008               	return
 19438  1FBC                     __end_of_TMR1_ISR:	
 19439                           
 19440                           	psect	text139
 19441  1532                     __ptext139:	
 19442 ;; *************** function _DimmerLights_MOSFET_TMR_2 *****************
 19443 ;; Defined at:
 19444 ;;		line 1262 in file "../src/Dimmer_B1.c"
 19445 ;; Parameters:    Size  Location     Type
 19446 ;;		None
 19447 ;; Auto vars:     Size  Location     Type
 19448 ;;		None
 19449 ;; Return value:  Size  Location     Type
 19450 ;;		None               void
 19451 ;; Registers used:
 19452 ;;		wreg, status,2, status,0
 19453 ;; Tracked objects:
 19454 ;;		On entry : 0/0
 19455 ;;		On exit  : 0/0
 19456 ;;		Unchanged: 0/0
 19457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19459 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19460 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19461 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19462 ;;Total ram usage:        1 bytes
 19463 ;; Hardware stack levels used:    1
 19464 ;; This function calls:
 19465 ;;		Nothing
 19466 ;; This function is called by:
 19467 ;;		_TMR1_ISR
 19468 ;; This function uses a non-reentrant model
 19469 ;;
 19470                           
 19471                           
 19472                           ;psect for function _DimmerLights_MOSFET_TMR_2
 19473  1532                     _DimmerLights_MOSFET_TMR_2:	
 19474                           
 19475                           ;Dimmer_B1.c: 1263: if (DimmerIntr2.Start == 1) {
 19476                           
 19477                           ;incstack = 0
 19478                           ; Regs used in _DimmerLights_MOSFET_TMR_2: [wreg+status,2+status,0]
 19479  1532  0021               	movlb	1	; select bank1
 19480  1533  1D69               	btfss	_DimmerIntr2^(0+128),2
 19481  1534  2D3F               	goto	i1l7816
 19482                           
 19483                           ;Dimmer_B1.c: 1264: DimmerIntr2.Count++;
 19484  1535  3001               	movlw	1
 19485  1536  00F0               	movwf	??_DimmerLights_MOSFET_TMR_2
 19486  1537  0870               	movf	??_DimmerLights_MOSFET_TMR_2,w
 19487  1538  07EA               	addwf	(_DimmerIntr2^(0+128)+1),f
 19488                           
 19489                           ;Dimmer_B1.c: 1265: if (DimmerIntr2.Count >= ((char)(65*0.8)) + 1) {
 19490  1539  3035               	movlw	53
 19491  153A  026A               	subwf	(_DimmerIntr2^(0+128)+1),w
 19492  153B  1C03               	skipc
 19493  153C  2D3F               	goto	i1l7816
 19494                           
 19495                           ;Dimmer_B1.c: 1266: DimmerIntr2.Count = 0;
 19496  153D  01EA               	clrf	(_DimmerIntr2^(0+128)+1)
 19497                           
 19498                           ;Dimmer_B1.c: 1267: DimmerIntr2.Start = 0;
 19499  153E  1169               	bcf	_DimmerIntr2^(0+128),2
 19500  153F                     i1l7816:	
 19501                           
 19502                           ;Dimmer_B1.c: 1268: }
 19503                           ;Dimmer_B1.c: 1269: }
 19504                           ;Dimmer_B1.c: 1271: if (DimmerIntr2.GO == 1) {
 19505  153F  1C69               	btfss	_DimmerIntr2^(0+128),0
 19506  1540  2D4C               	goto	i1l1011
 19507                           
 19508                           ;Dimmer_B1.c: 1272: if (DimmerIntr2.Count >= DimmerIntr2.DimmingValue) {
 19509  1541  086D               	movf	(_DimmerIntr2^(0+128)+4),w
 19510  1542  026A               	subwf	(_DimmerIntr2^(0+128)+1),w
 19511  1543  1C03               	skipc
 19512  1544  0008               	return
 19513                           
 19514                           ;Dimmer_B1.c: 1273: DimmerIntr2.GO = 0;
 19515  1545  1069               	bcf	_DimmerIntr2^(0+128),0
 19516                           
 19517                           ;Dimmer_B1.c: 1274: DimmerIntr2.Tune = 1;
 19518  1546  14E9               	bsf	_DimmerIntr2^(0+128),1
 19519                           
 19520                           ;Dimmer_B1.c: 1276: if (DimmerIntr2.ControlStatus == 1) {
 19521  1547  1DE9               	btfss	_DimmerIntr2^(0+128),3
 19522  1548  0008               	return
 19523                           
 19524                           ;Dimmer_B1.c: 1277: RB4 = 0;
 19525  1549  0020               	movlb	0	; select bank0
 19526  154A  120D               	bcf	13,4	;volatile
 19527                           
 19528                           ;Dimmer_B1.c: 1279: }
 19529                           ;Dimmer_B1.c: 1280: }
 19530                           ;Dimmer_B1.c: 1281: } else {
 19531  154B  0008               	return
 19532  154C                     i1l1011:	
 19533                           
 19534                           ;Dimmer_B1.c: 1282: if (DimmerIntr2.Tune == 1) {
 19535  154C  1CE9               	btfss	_DimmerIntr2^(0+128),1
 19536  154D  0008               	return
 19537                           
 19538                           ;Dimmer_B1.c: 1283: DimmerIntr2.Tune = 0;
 19539  154E  10E9               	bcf	_DimmerIntr2^(0+128),1
 19540                           
 19541                           ;Dimmer_B1.c: 1284: DimmerIntr2.TuneTime++;
 19542  154F  3001               	movlw	1
 19543  1550  00F0               	movwf	??_DimmerLights_MOSFET_TMR_2
 19544  1551  0870               	movf	??_DimmerLights_MOSFET_TMR_2,w
 19545  1552  07EB               	addwf	(_DimmerIntr2^(0+128)+2),f
 19546                           
 19547                           ;Dimmer_B1.c: 1285: if (DimmerIntr2.TuneTime >= DimmerIntr2.TuneTimeValue) {
 19548  1553  086C               	movf	(_DimmerIntr2^(0+128)+3),w
 19549  1554  026B               	subwf	(_DimmerIntr2^(0+128)+2),w
 19550  1555  1C03               	skipc
 19551  1556  0008               	return
 19552                           
 19553                           ;Dimmer_B1.c: 1286: DimmerIntr2.TuneTime = 0;
 19554  1557  01EB               	clrf	(_DimmerIntr2^(0+128)+2)
 19555                           
 19556                           ;Dimmer_B1.c: 1287: if (DimmerIntr2.Dimming_Sw == 1) {
 19557  1558  1E69               	btfss	_DimmerIntr2^(0+128),4
 19558  1559  2D70               	goto	i1l1017
 19559                           
 19560                           ;Dimmer_B1.c: 1288: if (DimmerIntr2.Dimming_Status == 0) {
 19561  155A  1AE9               	btfsc	_DimmerIntr2^(0+128),5
 19562  155B  2D67               	goto	i1l7840
 19563                           
 19564                           ;Dimmer_B1.c: 1289: if (DimmerIntr2.DimmingValue < ((char)(65*0.8))) {
 19565  155C  3034               	movlw	52
 19566  155D  026D               	subwf	(_DimmerIntr2^(0+128)+4),w
 19567  155E  1803               	skipnc
 19568  155F  2D65               	goto	i1l1019
 19569                           
 19570                           ;Dimmer_B1.c: 1290: DimmerIntr2.DimmingValue++;
 19571  1560  3001               	movlw	1
 19572  1561  00F0               	movwf	??_DimmerLights_MOSFET_TMR_2
 19573  1562  0870               	movf	??_DimmerLights_MOSFET_TMR_2,w
 19574  1563  07ED               	addwf	(_DimmerIntr2^(0+128)+4),f
 19575                           
 19576                           ;Dimmer_B1.c: 1291: } else {
 19577  1564  0008               	return
 19578  1565                     i1l1019:	
 19579                           
 19580                           ;Dimmer_B1.c: 1292: DimmerIntr2.Dimming_Status = 1;
 19581  1565  16E9               	bsf	_DimmerIntr2^(0+128),5
 19582                           
 19583                           ;Dimmer_B1.c: 1293: }
 19584                           ;Dimmer_B1.c: 1294: } else {
 19585  1566  0008               	return
 19586  1567                     i1l7840:	
 19587                           
 19588                           ;Dimmer_B1.c: 1295: if (DimmerIntr2.DimmingValue > ((char)(20*0.8))) {
 19589  1567  3011               	movlw	17
 19590  1568  026D               	subwf	(_DimmerIntr2^(0+128)+4),w
 19591  1569  1C03               	skipc
 19592  156A  2D6E               	goto	i1l1022
 19593                           
 19594                           ;Dimmer_B1.c: 1296: DimmerIntr2.DimmingValue--;
 19595  156B  3001               	movlw	1
 19596  156C  02ED               	subwf	(_DimmerIntr2^(0+128)+4),f
 19597                           
 19598                           ;Dimmer_B1.c: 1297: } else {
 19599  156D  0008               	return
 19600  156E                     i1l1022:	
 19601                           
 19602                           ;Dimmer_B1.c: 1298: DimmerIntr2.Dimming_Status = 0;
 19603  156E  12E9               	bcf	_DimmerIntr2^(0+128),5
 19604                           
 19605                           ;Dimmer_B1.c: 1299: }
 19606                           ;Dimmer_B1.c: 1300: }
 19607                           ;Dimmer_B1.c: 1301: } else if (DimmerIntr2.Dimming_RF == 1) {
 19608  156F  0008               	return
 19609  1570                     i1l1017:	
 19610  1570  1F69               	btfss	_DimmerIntr2^(0+128),6
 19611  1571  0008               	return
 19612                           
 19613                           ;Dimmer_B1.c: 1302: if (DimmerIntr2.DimmingValue < DimmerIntr2.MaxmumValue) {
 19614  1572  086E               	movf	(_DimmerIntr2^(0+128)+5),w
 19615  1573  026D               	subwf	(_DimmerIntr2^(0+128)+4),w
 19616  1574  1803               	skipnc
 19617  1575  2D7B               	goto	i1l7848
 19618                           
 19619                           ;Dimmer_B1.c: 1303: DimmerIntr2.DimmingValue++;
 19620  1576  3001               	movlw	1
 19621  1577  00F0               	movwf	??_DimmerLights_MOSFET_TMR_2
 19622  1578  0870               	movf	??_DimmerLights_MOSFET_TMR_2,w
 19623  1579  07ED               	addwf	(_DimmerIntr2^(0+128)+4),f
 19624                           
 19625                           ;Dimmer_B1.c: 1304: } else if (DimmerIntr2.DimmingValue > DimmerIntr2.MaxmumValue) {
 19626  157A  0008               	return
 19627  157B                     i1l7848:	
 19628  157B  086D               	movf	(_DimmerIntr2^(0+128)+4),w
 19629  157C  026E               	subwf	(_DimmerIntr2^(0+128)+5),w
 19630  157D  1803               	skipnc
 19631  157E  2D82               	goto	i1l1028
 19632                           
 19633                           ;Dimmer_B1.c: 1305: DimmerIntr2.DimmingValue--;
 19634  157F  3001               	movlw	1
 19635  1580  02ED               	subwf	(_DimmerIntr2^(0+128)+4),f
 19636                           
 19637                           ;Dimmer_B1.c: 1306: } else {
 19638  1581  0008               	return
 19639  1582                     i1l1028:	
 19640                           
 19641                           ;Dimmer_B1.c: 1307: DimmerIntr2.Dimming_RF = 0;
 19642  1582  1369               	bcf	_DimmerIntr2^(0+128),6
 19643  1583  0008               	return
 19644  1584                     __end_of_DimmerLights_MOSFET_TMR_2:	
 19645                           
 19646                           	psect	text140
 19647  14E0                     __ptext140:	
 19648 ;; *************** function _DimmerLights_MOSFET_TMR_1 *****************
 19649 ;; Defined at:
 19650 ;;		line 1192 in file "../src/Dimmer_B1.c"
 19651 ;; Parameters:    Size  Location     Type
 19652 ;;		None
 19653 ;; Auto vars:     Size  Location     Type
 19654 ;;		None
 19655 ;; Return value:  Size  Location     Type
 19656 ;;		None               void
 19657 ;; Registers used:
 19658 ;;		wreg, status,2, status,0
 19659 ;; Tracked objects:
 19660 ;;		On entry : 0/0
 19661 ;;		On exit  : 0/0
 19662 ;;		Unchanged: 0/0
 19663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19666 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19667 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19668 ;;Total ram usage:        1 bytes
 19669 ;; Hardware stack levels used:    1
 19670 ;; This function calls:
 19671 ;;		Nothing
 19672 ;; This function is called by:
 19673 ;;		_TMR1_ISR
 19674 ;; This function uses a non-reentrant model
 19675 ;;
 19676                           
 19677                           
 19678                           ;psect for function _DimmerLights_MOSFET_TMR_1
 19679  14E0                     _DimmerLights_MOSFET_TMR_1:	
 19680                           
 19681                           ;Dimmer_B1.c: 1193: if (DimmerIntr1.Start == 1) {
 19682                           
 19683                           ;incstack = 0
 19684                           ; Regs used in _DimmerLights_MOSFET_TMR_1: [wreg+status,2+status,0]
 19685  14E0  0021               	movlb	1	; select bank1
 19686  14E1  1D62               	btfss	_DimmerIntr1^(0+128),2
 19687  14E2  2CED               	goto	i1l7762
 19688                           
 19689                           ;Dimmer_B1.c: 1194: DimmerIntr1.Count++;
 19690  14E3  3001               	movlw	1
 19691  14E4  00F0               	movwf	??_DimmerLights_MOSFET_TMR_1
 19692  14E5  0870               	movf	??_DimmerLights_MOSFET_TMR_1,w
 19693  14E6  07E3               	addwf	(_DimmerIntr1^(0+128)+1),f
 19694                           
 19695                           ;Dimmer_B1.c: 1195: if (DimmerIntr1.Count >= ((char)(65*0.8)) + 1) {
 19696  14E7  3035               	movlw	53
 19697  14E8  0263               	subwf	(_DimmerIntr1^(0+128)+1),w
 19698  14E9  1C03               	skipc
 19699  14EA  2CED               	goto	i1l7762
 19700                           
 19701                           ;Dimmer_B1.c: 1196: DimmerIntr1.Count = 0;
 19702  14EB  01E3               	clrf	(_DimmerIntr1^(0+128)+1)
 19703                           
 19704                           ;Dimmer_B1.c: 1197: DimmerIntr1.Start = 0;
 19705  14EC  1162               	bcf	_DimmerIntr1^(0+128),2
 19706  14ED                     i1l7762:	
 19707                           
 19708                           ;Dimmer_B1.c: 1198: }
 19709                           ;Dimmer_B1.c: 1199: }
 19710                           ;Dimmer_B1.c: 1201: if (DimmerIntr1.GO == 1) {
 19711  14ED  1C62               	btfss	_DimmerIntr1^(0+128),0
 19712  14EE  2CFA               	goto	i1l982
 19713                           
 19714                           ;Dimmer_B1.c: 1202: if (DimmerIntr1.Count >= DimmerIntr1.DimmingValue) {
 19715  14EF  0866               	movf	(_DimmerIntr1^(0+128)+4),w
 19716  14F0  0263               	subwf	(_DimmerIntr1^(0+128)+1),w
 19717  14F1  1C03               	skipc
 19718  14F2  0008               	return
 19719                           
 19720                           ;Dimmer_B1.c: 1203: DimmerIntr1.GO = 0;
 19721  14F3  1062               	bcf	_DimmerIntr1^(0+128),0
 19722                           
 19723                           ;Dimmer_B1.c: 1204: DimmerIntr1.Tune = 1;
 19724  14F4  14E2               	bsf	_DimmerIntr1^(0+128),1
 19725                           
 19726                           ;Dimmer_B1.c: 1206: if (DimmerIntr1.ControlStatus == 1) {
 19727  14F5  1DE2               	btfss	_DimmerIntr1^(0+128),3
 19728  14F6  0008               	return
 19729                           
 19730                           ;Dimmer_B1.c: 1207: RA7 = 0;
 19731  14F7  0020               	movlb	0	; select bank0
 19732  14F8  138C               	bcf	12,7	;volatile
 19733                           
 19734                           ;Dimmer_B1.c: 1209: }
 19735                           ;Dimmer_B1.c: 1210: }
 19736                           ;Dimmer_B1.c: 1211: } else {
 19737  14F9  0008               	return
 19738  14FA                     i1l982:	
 19739                           
 19740                           ;Dimmer_B1.c: 1212: if (DimmerIntr1.Tune == 1) {
 19741  14FA  1CE2               	btfss	_DimmerIntr1^(0+128),1
 19742  14FB  0008               	return
 19743                           
 19744                           ;Dimmer_B1.c: 1213: DimmerIntr1.Tune = 0;
 19745  14FC  10E2               	bcf	_DimmerIntr1^(0+128),1
 19746                           
 19747                           ;Dimmer_B1.c: 1214: DimmerIntr1.TuneTime++;
 19748  14FD  3001               	movlw	1
 19749  14FE  00F0               	movwf	??_DimmerLights_MOSFET_TMR_1
 19750  14FF  0870               	movf	??_DimmerLights_MOSFET_TMR_1,w
 19751  1500  07E4               	addwf	(_DimmerIntr1^(0+128)+2),f
 19752                           
 19753                           ;Dimmer_B1.c: 1215: if (DimmerIntr1.TuneTime >= DimmerIntr1.TuneTimeValue) {
 19754  1501  0865               	movf	(_DimmerIntr1^(0+128)+3),w
 19755  1502  0264               	subwf	(_DimmerIntr1^(0+128)+2),w
 19756  1503  1C03               	skipc
 19757  1504  0008               	return
 19758                           
 19759                           ;Dimmer_B1.c: 1216: DimmerIntr1.TuneTime = 0;
 19760  1505  01E4               	clrf	(_DimmerIntr1^(0+128)+2)
 19761                           
 19762                           ;Dimmer_B1.c: 1217: if (DimmerIntr1.Dimming_Sw == 1) {
 19763  1506  1E62               	btfss	_DimmerIntr1^(0+128),4
 19764  1507  2D1E               	goto	i1l988
 19765                           
 19766                           ;Dimmer_B1.c: 1218: if (DimmerIntr1.Dimming_Status == 0) {
 19767  1508  1AE2               	btfsc	_DimmerIntr1^(0+128),5
 19768  1509  2D15               	goto	i1l7786
 19769                           
 19770                           ;Dimmer_B1.c: 1219: if (DimmerIntr1.DimmingValue < ((char)(65*0.8))) {
 19771  150A  3034               	movlw	52
 19772  150B  0266               	subwf	(_DimmerIntr1^(0+128)+4),w
 19773  150C  1803               	skipnc
 19774  150D  2D13               	goto	i1l990
 19775                           
 19776                           ;Dimmer_B1.c: 1220: DimmerIntr1.DimmingValue++;
 19777  150E  3001               	movlw	1
 19778  150F  00F0               	movwf	??_DimmerLights_MOSFET_TMR_1
 19779  1510  0870               	movf	??_DimmerLights_MOSFET_TMR_1,w
 19780  1511  07E6               	addwf	(_DimmerIntr1^(0+128)+4),f
 19781                           
 19782                           ;Dimmer_B1.c: 1221: } else {
 19783  1512  0008               	return
 19784  1513                     i1l990:	
 19785                           
 19786                           ;Dimmer_B1.c: 1222: DimmerIntr1.Dimming_Status = 1;
 19787  1513  16E2               	bsf	_DimmerIntr1^(0+128),5
 19788                           
 19789                           ;Dimmer_B1.c: 1223: }
 19790                           ;Dimmer_B1.c: 1224: } else {
 19791  1514  0008               	return
 19792  1515                     i1l7786:	
 19793                           
 19794                           ;Dimmer_B1.c: 1225: if (DimmerIntr1.DimmingValue > ((char)(20*0.8))) {
 19795  1515  3011               	movlw	17
 19796  1516  0266               	subwf	(_DimmerIntr1^(0+128)+4),w
 19797  1517  1C03               	skipc
 19798  1518  2D1C               	goto	i1l993
 19799                           
 19800                           ;Dimmer_B1.c: 1226: DimmerIntr1.DimmingValue--;
 19801  1519  3001               	movlw	1
 19802  151A  02E6               	subwf	(_DimmerIntr1^(0+128)+4),f
 19803                           
 19804                           ;Dimmer_B1.c: 1227: } else {
 19805  151B  0008               	return
 19806  151C                     i1l993:	
 19807                           
 19808                           ;Dimmer_B1.c: 1228: DimmerIntr1.Dimming_Status = 0;
 19809  151C  12E2               	bcf	_DimmerIntr1^(0+128),5
 19810                           
 19811                           ;Dimmer_B1.c: 1229: }
 19812                           ;Dimmer_B1.c: 1230: }
 19813                           ;Dimmer_B1.c: 1231: } else if (DimmerIntr1.Dimming_RF == 1) {
 19814  151D  0008               	return
 19815  151E                     i1l988:	
 19816  151E  1F62               	btfss	_DimmerIntr1^(0+128),6
 19817  151F  0008               	return
 19818                           
 19819                           ;Dimmer_B1.c: 1232: if (DimmerIntr1.DimmingValue < DimmerIntr1.MaxmumValue) {
 19820  1520  0867               	movf	(_DimmerIntr1^(0+128)+5),w
 19821  1521  0266               	subwf	(_DimmerIntr1^(0+128)+4),w
 19822  1522  1803               	skipnc
 19823  1523  2D29               	goto	i1l7794
 19824                           
 19825                           ;Dimmer_B1.c: 1233: DimmerIntr1.DimmingValue++;
 19826  1524  3001               	movlw	1
 19827  1525  00F0               	movwf	??_DimmerLights_MOSFET_TMR_1
 19828  1526  0870               	movf	??_DimmerLights_MOSFET_TMR_1,w
 19829  1527  07E6               	addwf	(_DimmerIntr1^(0+128)+4),f
 19830                           
 19831                           ;Dimmer_B1.c: 1234: } else if (DimmerIntr1.DimmingValue > DimmerIntr1.MaxmumValue) {
 19832  1528  0008               	return
 19833  1529                     i1l7794:	
 19834  1529  0866               	movf	(_DimmerIntr1^(0+128)+4),w
 19835  152A  0267               	subwf	(_DimmerIntr1^(0+128)+5),w
 19836  152B  1803               	skipnc
 19837  152C  2D30               	goto	i1l999
 19838                           
 19839                           ;Dimmer_B1.c: 1235: DimmerIntr1.DimmingValue--;
 19840  152D  3001               	movlw	1
 19841  152E  02E6               	subwf	(_DimmerIntr1^(0+128)+4),f
 19842                           
 19843                           ;Dimmer_B1.c: 1236: } else {
 19844  152F  0008               	return
 19845  1530                     i1l999:	
 19846                           
 19847                           ;Dimmer_B1.c: 1237: DimmerIntr1.Dimming_RF = 0;
 19848  1530  1362               	bcf	_DimmerIntr1^(0+128),6
 19849  1531  0008               	return
 19850  1532                     __end_of_DimmerLights_MOSFET_TMR_1:	
 19851                           
 19852                           	psect	text141
 19853  1B73                     __ptext141:	
 19854 ;; *************** function _IOC_ISR *****************
 19855 ;; Defined at:
 19856 ;;		line 377 in file "../src/MCU_B1.c"
 19857 ;; Parameters:    Size  Location     Type
 19858 ;;		None
 19859 ;; Auto vars:     Size  Location     Type
 19860 ;;		None
 19861 ;; Return value:  Size  Location     Type
 19862 ;;		None               void
 19863 ;; Registers used:
 19864 ;;		status,2, status,0, pclath, cstack
 19865 ;; Tracked objects:
 19866 ;;		On entry : 0/0
 19867 ;;		On exit  : 0/0
 19868 ;;		Unchanged: 0/0
 19869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19873 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19874 ;;Total ram usage:        0 bytes
 19875 ;; Hardware stack levels used:    1
 19876 ;; Hardware stack levels required when called:    1
 19877 ;; This function calls:
 19878 ;;		_DimmerLights_MOSFET_IOC_1
 19879 ;;		_DimmerLights_MOSFET_IOC_2
 19880 ;; This function is called by:
 19881 ;;		_ISR
 19882 ;; This function uses a non-reentrant model
 19883 ;;
 19884                           
 19885                           
 19886                           ;psect for function _IOC_ISR
 19887  1B73                     _IOC_ISR:	
 19888                           
 19889                           ;MCU_B1.c: 378: IOCBF2 = 0;
 19890                           
 19891                           ;incstack = 0
 19892                           ; Regs used in _IOC_ISR: [status,2+status,0+pclath+cstack]
 19893  1B73  0027               	movlb	7	; select bank7
 19894  1B74  1116               	bcf	22,2	;volatile
 19895                           
 19896                           ;MCU_B1.c: 379: IOCIF = 0;
 19897  1B75  100B               	bcf	11,0	;volatile
 19898                           
 19899                           ;MCU_B1.c: 381: if (myMain.PowerON == 1) {
 19900  1B76  0022               	movlb	2	; select bank2
 19901  1B77  1C20               	btfss	_myMain^(0+256),0
 19902  1B78  0008               	return
 19903                           
 19904                           ;MCU_B1.c: 387: DimmerLights_MOSFET_IOC_1();
 19905  1B79  319B  23BC  319B   	fcall	_DimmerLights_MOSFET_IOC_1
 19906                           
 19907                           ;MCU_B1.c: 392: DimmerLights_MOSFET_IOC_2();
 19908  1B7C  319B  23CA         	fcall	_DimmerLights_MOSFET_IOC_2
 19909  1B7E  0008               	return
 19910  1B7F                     __end_of_IOC_ISR:	
 19911                           
 19912                           	psect	text142
 19913  1BCA                     __ptext142:	
 19914 ;; *************** function _DimmerLights_MOSFET_IOC_2 *****************
 19915 ;; Defined at:
 19916 ;;		line 1315 in file "../src/Dimmer_B1.c"
 19917 ;; Parameters:    Size  Location     Type
 19918 ;;		None
 19919 ;; Auto vars:     Size  Location     Type
 19920 ;;		None
 19921 ;; Return value:  Size  Location     Type
 19922 ;;		None               void
 19923 ;; Registers used:
 19924 ;;		None
 19925 ;; Tracked objects:
 19926 ;;		On entry : 0/0
 19927 ;;		On exit  : 0/0
 19928 ;;		Unchanged: 0/0
 19929 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19930 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19933 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19934 ;;Total ram usage:        0 bytes
 19935 ;; Hardware stack levels used:    1
 19936 ;; This function calls:
 19937 ;;		Nothing
 19938 ;; This function is called by:
 19939 ;;		_IOC_ISR
 19940 ;; This function uses a non-reentrant model
 19941 ;;
 19942                           
 19943                           
 19944                           ;psect for function _DimmerLights_MOSFET_IOC_2
 19945  1BCA                     _DimmerLights_MOSFET_IOC_2:	
 19946                           
 19947                           ;Dimmer_B1.c: 1316: if (DimmerIntr2.Start == 0 && RB2 == 1) {
 19948                           
 19949                           ;incstack = 0
 19950                           ; Regs used in _DimmerLights_MOSFET_IOC_2: []
 19951  1BCA  0021               	movlb	1	; select bank1
 19952  1BCB  1969               	btfsc	_DimmerIntr2^(0+128),2
 19953  1BCC  0008               	return
 19954  1BCD  0020               	movlb	0	; select bank0
 19955  1BCE  1D0D               	btfss	13,2	;volatile
 19956  1BCF  0008               	return
 19957                           
 19958                           ;Dimmer_B1.c: 1317: DimmerIntr2.Start = 1;
 19959  1BD0  0021               	movlb	1	; select bank1
 19960  1BD1  1569               	bsf	_DimmerIntr2^(0+128),2
 19961                           
 19962                           ;Dimmer_B1.c: 1318: DimmerIntr2.GO = 1;
 19963  1BD2  1469               	bsf	_DimmerIntr2^(0+128),0
 19964                           
 19965                           ;Dimmer_B1.c: 1320: if (DimmerIntr2.ControlStatus == 1) {
 19966  1BD3  1DE9               	btfss	_DimmerIntr2^(0+128),3
 19967  1BD4  0008               	return
 19968                           
 19969                           ;Dimmer_B1.c: 1321: RB4 = 1;
 19970  1BD5  0020               	movlb	0	; select bank0
 19971  1BD6  160D               	bsf	13,4	;volatile
 19972  1BD7  0008               	return
 19973  1BD8                     __end_of_DimmerLights_MOSFET_IOC_2:	
 19974                           
 19975                           	psect	text143
 19976  1BBC                     __ptext143:	
 19977 ;; *************** function _DimmerLights_MOSFET_IOC_1 *****************
 19978 ;; Defined at:
 19979 ;;		line 1245 in file "../src/Dimmer_B1.c"
 19980 ;; Parameters:    Size  Location     Type
 19981 ;;		None
 19982 ;; Auto vars:     Size  Location     Type
 19983 ;;		None
 19984 ;; Return value:  Size  Location     Type
 19985 ;;		None               void
 19986 ;; Registers used:
 19987 ;;		None
 19988 ;; Tracked objects:
 19989 ;;		On entry : 0/0
 19990 ;;		On exit  : 0/0
 19991 ;;		Unchanged: 0/0
 19992 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19996 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19997 ;;Total ram usage:        0 bytes
 19998 ;; Hardware stack levels used:    1
 19999 ;; This function calls:
 20000 ;;		Nothing
 20001 ;; This function is called by:
 20002 ;;		_IOC_ISR
 20003 ;; This function uses a non-reentrant model
 20004 ;;
 20005                           
 20006                           
 20007                           ;psect for function _DimmerLights_MOSFET_IOC_1
 20008  1BBC                     _DimmerLights_MOSFET_IOC_1:	
 20009                           
 20010                           ;Dimmer_B1.c: 1246: if (DimmerIntr1.Start == 0 && RB2 == 1) {
 20011                           
 20012                           ;incstack = 0
 20013                           ; Regs used in _DimmerLights_MOSFET_IOC_1: []
 20014  1BBC  0021               	movlb	1	; select bank1
 20015  1BBD  1962               	btfsc	_DimmerIntr1^(0+128),2
 20016  1BBE  0008               	return
 20017  1BBF  0020               	movlb	0	; select bank0
 20018  1BC0  1D0D               	btfss	13,2	;volatile
 20019  1BC1  0008               	return
 20020                           
 20021                           ;Dimmer_B1.c: 1247: DimmerIntr1.Start = 1;
 20022  1BC2  0021               	movlb	1	; select bank1
 20023  1BC3  1562               	bsf	_DimmerIntr1^(0+128),2
 20024                           
 20025                           ;Dimmer_B1.c: 1248: DimmerIntr1.GO = 1;
 20026  1BC4  1462               	bsf	_DimmerIntr1^(0+128),0
 20027                           
 20028                           ;Dimmer_B1.c: 1250: if (DimmerIntr1.ControlStatus == 1) {
 20029  1BC5  1DE2               	btfss	_DimmerIntr1^(0+128),3
 20030  1BC6  0008               	return
 20031                           
 20032                           ;Dimmer_B1.c: 1251: RA7 = 1;
 20033  1BC7  0020               	movlb	0	; select bank0
 20034  1BC8  178C               	bsf	12,7	;volatile
 20035  1BC9  0008               	return
 20036  1BCA                     __end_of_DimmerLights_MOSFET_IOC_1:	
 20037  007E                     btemp	set	126	;btemp
 20038  007E                     pic14e$flags	set	126
 20039  007E                     wtemp	set	126
 20040  007E                     wtemp0	set	126
 20041  0080                     wtemp1	set	128
 20042  0082                     wtemp2	set	130
 20043  0084                     wtemp3	set	132
 20044  0086                     wtemp4	set	134
 20045  0088                     wtemp5	set	136
 20046  007F                     wtemp6	set	127
 20047  007E                     ttemp	set	126
 20048  007E                     ttemp0	set	126
 20049  0081                     ttemp1	set	129
 20050  0084                     ttemp2	set	132
 20051  0087                     ttemp3	set	135
 20052  007F                     ttemp4	set	127
 20053  007E                     ltemp	set	126
 20054  007E                     ltemp0	set	126
 20055  0082                     ltemp1	set	130
 20056  0086                     ltemp2	set	134
 20057  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         266
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     77      78
    BANK1            80      0      80
    BANK2            80      0      78
    BANK3            80      4      74
    BANK4            80      0      69
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK3[4]), VarLED2(BANK3[4]), VarLED1(BANK3[4]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 8
		 -> NULL(NULL[0]), DimmerLights2(BANK2[8]), DimmerLights1(BANK2[8]), 

    DimmerIntr	PTR struct Dimmer_Interrupt size(1) Largest target is 7
		 -> NULL(NULL[0]), DimmerIntr2(BANK1[7]), DimmerIntr1(BANK1[7]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK3[5]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    _main->_Exception_Main
    _main->_my_MainTimer
    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _setSw_Main->_setDimmerLights_SwOn
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setRF_Main->___lwdiv
    _setControl_Lights_Table->_setDimmerLights_SwOn
    _setRFSW_Control->_setDimmerLights_SwOn
    _setRFSW_AdjControl->_setDimmerLights_SwOn
    _setDimmerLights_DimmingRun->_DimmerLights_SelectPointer
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitPATable
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Exception_Main->_getMain_All_Error_Status
    _Exception_Main->_setBuz
    _setLED->_LedPointSelect
    ___ftmul->___ftpack
    _getDelayOff_GO->_DelayOffPointSelect
    ___ftdiv->___ftpack
    ___ftadd->___ftpack
    ___awtoft->___ftpack
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _DlyOff_Main->_setDimmerLights_SwOn
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_DimmerLights_SelectPointer
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_MOSFET_TMR_1
    _TMR1_ISR->_DimmerLights_MOSFET_TMR_2

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOn
    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDelayOff_GO
    _setRFSW_AdjControl->_setProductData
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _Flash_Memory_Initialization->_getDimmerLights_ValueToPercent
    _Exception_Main->_setBuz
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_OnOff
    _setDimmerLights_OnOff->_setDelayOff_GO
    _setDelayOff_GO->_setProductData
    _getDimmerLights_PercentToValue->___fttol
    ___ftmul->___awtoft
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setDimmerIntr_MaxmumValue->_getDimmerLights_PercentToValue
    _getDimmerLights_ValueToPercent->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setProductData
    _setProductData->_getDimmerLights_ValueToPercent
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  151345
                                              0 BANK3      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1809
                                              9 COMMON     1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           2     2      0     301
                                              6 COMMON     2     2      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           6     6      0     669
                                              6 COMMON     2     2      0
                                              0 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     270
                                              2 COMMON     4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              2 COMMON     1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    4776
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         3     3      0    4776
                                             62 BANK0      3     3      0
           _getMain_All_Error_Status
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    4531
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    4531
                                             10 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      66
                                              4 COMMON     1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     117
                                              2 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     930
                         _TouchPower
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     930
                                              6 COMMON     1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   47358
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   47358
                                             75 BANK0      2     2      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   43006
                                             73 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    4656
                                             62 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   38155
             _getDimmerLights_Status
           _getMain_All_LightsStatus
                      _setCmd_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   11281
                                             70 BANK0      3     3      0
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   21556
                                             62 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
         _setDimmerLights_DimmingRun
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                   _setMemory_Modify
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerLights_DimmingRun                           3     2      1     177
                                              4 COMMON     3     2      1
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              2 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              6 COMMON     2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     426
                                              6 COMMON     2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     145
                                              4 COMMON     2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    2367
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     516
                                              8 COMMON     1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     536
                                              7 COMMON     1     1      0
                                              0 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     471
                                              7 COMMON     3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     338
                                              4 COMMON     3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     547
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     448
                                              2 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              4 COMMON     2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                            6     6      0    2043
                                              0 BANK0      6     6      0
                            ___lwdiv
                             ___wmul
    _getAll_DimmerIntr_Dimming_Sw_RF
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 3     3      0      50
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerIntr_Dimming_Sw_RF                      4     4      0      95
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     270
                                              2 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4    1052
                                              2 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              4 COMMON     3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1018
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1018
                                              6 COMMON     1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    1     1      0    1211
                                              8 COMMON     1     1      0
                _Flash_Memory_Modify
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1164
                                              6 COMMON     2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0   13142
                                             58 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
     _getDimmerLights_ValueToPercent
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1     934
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              2 COMMON     2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              2 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       8     8      0    3563
                                              9 COMMON     1     1      0
                                              6 BANK0      7     7      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 2     2      0      25
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   62069
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   61838
                                             74 BANK0      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
           _getMain_All_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                4     3      1   40268
                                             70 BANK0      4     3      1
                      _getCmd_Status
                     _getDelayOff_GO
     _getDimmerLights_PercentToValue
     _getDimmerLights_ValueToPercent
           _getMain_All_LightsStatus
                      _setCmd_Status
                     _setDelayOff_GO
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     908
                                              4 COMMON     2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      66
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_Dimming_RF                             3     2      1     266
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     177
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     266
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (6) _setDelayOff_GO                                       8     6      2    3808
                                             62 BANK0      8     6      2
                _DelayOffPointSelect
                             ___bmul
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) ___bmul                                               4     3      1     270
                                              2 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (5) _setCmd_Status                                        3     2      1     222
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (5) _getMain_All_LightsStatus                             1     1      0      47
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_PercentToValue                       6     6      0   15251
                                             52 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    3377
                                              6 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      89
                                              4 COMMON     2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getCmd_Status                                        2     2      0      46
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              3     2      1   21075
                                             67 BANK0      3     2      1
         _getDimmerIntr_DimmingValue
     _getDimmerLights_ValueToPercent
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      22
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    3226
                                             62 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      44
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_MaxmumValue                            3     2      1     444
                                             58 BANK0      3     2      1
         _getDimmerIntr_DimmingValue (ARG)
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_Dimming_Sw                             3     2      1     266
                                              2 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_ValueToPercent                       6     6      0   11874
                                             52 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     430
                                             38 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     223
                                             22 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    3687
                                              6 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    4221
                                             25 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    3214
                                              0 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2873
                                              2 COMMON     8     3      5
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      69
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      6     6      0     187
                                              3 COMMON     6     6      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      23
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     161
                                              2 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0       0
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    5248
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    5248
                                             62 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       4     3      1    2803
                                             58 BANK0      4     3      1
         _getDimmerIntr_DimmingValue (ARG)
     _getDimmerLights_ValueToPercent (ARG)
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 5     5      0    2091
                                              9 COMMON     1     1      0
                                              6 BANK0      4     4      0
         _DimmerLights_SelectPointer
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1809
                                              7 COMMON     2     2      0
                                              4 BANK0      2     0      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     653
                                              2 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0      66
                                              4 COMMON     1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      89
                                              4 COMMON     2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      44
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      66
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      66
                                              4 COMMON     1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (7) _DelayOffPointSelect                                  2     2      0      44
                                              2 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              2 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  1     1      0       0
                                              1 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0       0
          _DimmerLights_MOSFET_TMR_1
          _DimmerLights_MOSFET_TMR_2
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_MOSFET_TMR_2                           1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_MOSFET_TMR_1                           1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _IOC_ISR                                             0     0      0       0
          _DimmerLights_MOSFET_IOC_1
          _DimmerLights_MOSFET_IOC_2
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_MOSFET_IOC_2                           0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_MOSFET_IOC_1                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setProductData
         _getDimmerIntr_DimmingValue (ARG)
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_All_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setProductData
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _getCmd_Status
         _getDelayOff_GO
           _DelayOffPointSelect
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getMain_All_LightsStatus
         _setCmd_Status
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerIntr_DimmingValue (ARG)
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLights_SelectPointer
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLights_SelectPointer
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _getDimmerLights_ValueToPercent
       ___awtoft
         ___ftpack
       ___ftadd
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftneg
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getMain_All_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerIntr_Dimming_Sw_RF
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _getMain_All_LightsStatus
           _setCmd_Status
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_PercentToValue
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setDimmerIntr_Dimming_RF
             _setDimmerIntr_MaxmumValue
               _getDimmerIntr_DimmingValue (ARG)
               _getDimmerLights_PercentToValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_DimmingRun
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setMemory_Modify
             _setProductData
               _getDimmerIntr_DimmingValue (ARG)
               _getDimmerLights_ValueToPercent (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerIntr_DimmingValue (ARG)
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerIntr_DimmingValue (ARG)
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerIntr_DimmingValue (ARG)
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _setBuz
         ___awdiv
       _setProductData
         _getDimmerIntr_DimmingValue (ARG)
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_MOSFET_IOC_1
     _DimmerLights_MOSFET_IOC_2
   _TMR1_ISR
     _DimmerLights_MOSFET_TMR_1
     _DimmerLights_MOSFET_TMR_2

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      A       C       2       85.7%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4D      4E       5       97.5%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4E       9       97.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      4      4A      11       92.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      45      13       86.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     187      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     187      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Jan 05 13:28:43 2015

                    __size_of_Switch_Main 000B                     ?_Flash_Memory_Erasing 0070  
                            _WDT_Clearing 0002                     __end_of_setCmd_Status 1D91  
                          ___bmul@product 0074                 getMain_Lights_Count@count 0072  
                                      l96 15B3                                        l98 15C5  
                                      _RD 0CA8                   __end_of_CC2500_WriteREG 1092  
                                      _WR 0CA9                              ___awdiv@sign 0021  
                                      _Sw 007B                       ___wmul@multiplicand 0074  
                    _getDimmerLights_Line 1C13                    __end_of_setDelayOff_GO 0CAE  
                            ___ftadd@exp1 0045                              ___ftadd@exp2 0044  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 09D5  
                    _setDimmerLights_Line 1CF3                              ___ftadd@sign 0043  
                                     l110 1435                                       l106 143B  
                                     l107 1437                                       l108 1427  
                                     l323 1E1D                      _setDimmerLights_SwOn 1686  
                                     l324 1E1F                                       l255 09AC  
                                     l367 10DE                                       l573 0AA6  
                                     l742 1D3C                                       l912 074E  
                                     l945 1C1A                                       l946 1C20  
                                     l886 1F51                                       _GIE 005F  
                                     _CRC 00C2                                       _RA0 0060  
                                     _RB0 0068      __size_of_DimmerLights_Initialization 000B  
                                     _RB1 0069                                       _RA3 0063  
                                     _RC0 0070                                       _RB2 006A  
                                     _RA4 0064                                       _LED 00C7  
                                     _RC1 0071                                       _RB3 006B  
                                     _RC2 0072                                       _RB4 006C  
                                     _RA6 0066                                       _RB5 006D  
                                     _RA7 0067                                       _RC4 0074  
                                     _RC5 0075                                       _RC7 0077  
                                     _RF1 00A0                                       _ISR 0004  
                                     _WDT 00C0                                       _Cmd 00C3  
            getDimmerLights_Status@lights 0074                                       _Sw1 01BE  
                                     _Sw2 01C7                ??_setDimmerIntr_Dimming_RF 0073  
              ??_setDimmerIntr_Dimming_Sw 0073           setDimmerIntr_Dimming_RF@command 0072  
                __end_of_CC2500_WriteByte 1E2A                     _Buzzer_Initialization 1AB3  
                         __end_of_ADC_Set 1B0B                                       wreg 0009  
    setDimmerLights_Initialization@lights 0070              getDimmerLights_Status@status 0075  
     __end_of_setDimmerIntr_ControlStatus 114F               _setDimmerIntr_ControlStatus 1126  
                       ??_getSw_KeyStatus 0072                                      ?_ISR 0070  
                            ___ftdiv@cntr 0030                           __end_of_IOC_ISR 1B7F  
                   _setDimmerLights_OnOff 06C2          setDimmerLights_DimmingRun@lights 0076  
                              Load_Main@i 0024                              ___ftdiv@sign 0035  
                                    l1134 1EEE                                      l1135 1EF7  
                                    l2200 0D3A                                      l2124 06BC  
                                    l1168 0833                                      l1600 01E7  
                                    l2128 0623                                      l1169 083A  
                                    l2129 0664                                      l1610 01C3  
                                    l1602 0089                                      l2154 1C27  
                                    l1611 01C1                                      l1603 0085  
                                    l1604 0080                                      l1453 119B  
                                    l3150 17E9                                      l1462 1487  
                                    l1439 1227                                      l2191 0CC4  
                                    l3144 17D2                                      l2184 125D  
                                    l2169 0B1E                                      l3173 03F9  
                         __end_of_IOC_Set 1B47                                      l2517 1DD7  
                                    l2541 022E                                      l2539 0351  
                                    l1773 0E8A                                      l2821 1376  
                                    l6200 17A8                                      l1768 0E90  
                                    l6204 17AF                                      l7100 1765  
                                    l2853 11F4                                      l6302 1D5D  
                                    l6214 17D7                                      l6206 17B9  
                                    l6312 1D72                                      l2848 11DF  
                                    l6216 17DF                                      l6208 17BE  
                                    l7016 113B                                      l7024 1D9C  
                                    l7120 178F                                      l7104 176B  
                                    l2880 05FF                                      l2849 11F8  
                                    l7034 1D33                                      l6402 041D  
                                    l6322 1CC8                                      l6412 0438  
                                    l7044 10C8                                      l7116 1789  
                                    l7124 1795                                      l7108 1771  
                                    l6422 0D52                                      l7134 1CFF  
                                    l6318 1CC2                                      l2983 1F09  
                                    l7064 11DB                                      l6352 0382  
                                    l7152 1C59                                      l2889 1D90  
                                    l7074 11F0                                      l7066 11E3  
                                    l6362 0398                                      l6450 0DC2  
                                    l6442 0DA9                                      l6522 0BB4  
                                    l7154 1C5E                                      l7090 1755  
                                    l6380 03C5                                      l6356 0389  
                                    l6428 0D68                                      l6540 0BE4  
                                    l7148 1C53                     _setDimmerLights_SwOff 12CE  
                                    l7334 12A5                                      l6382 03CF  
                                    l6374 03B2                                      l6550 0C08  
                                    l6542 0BF2                                      l6470 0EC3  
                                    l7086 174F                                      l7094 175B  
                                    l6640 12FB                                      l9032 15ED  
                                    l6392 03EB                                      l6384 03D4  
                                    l6552 0C0B                                      l6464 0EAD  
                                    l9050 1613                                      l9042 15F5  
                                    l9026 15E2                                      l7346 12B9  
                                    l6394 03F5                                      l6386 03D8  
                                    l6482 0EFE                                      l6802 1ED8  
                                    l7610 1F6A                                      l9044 1601  
                                    l9140 169A                                      l7356 12C8  
                                    l7348 12BB                                      l6556 0C19  
                                    l6548 0BFF                                      l6716 172C  
                                    l8244 1F03                                      l6804 1EDD  
                                    l9220 13AB                                      l7620 1F79  
                                    l9054 161C                                      l9150 16AB  
                                    l9142 169D                                      l7358 12CC  
                                    l6398 040B                                      l6494 0F1A  
                                    l6486 0F06                                      l6662 0C60  
                                    l7534 1CDC                                      l8264 1413  
                                    l9160 16D4                                      l9152 16B0  
                                    l6672 0C90                                      l6816 10EF  
                                    l9400 0986                                      l9232 0798  
                                    l7608 1F68                                      l9058 1624  
                                    l9162 16D9                                      l6498 0F22  
                                    l7490 1186                                      l7642 1287  
                                    l7634 1269                                      l6818 10FA  
                                    l7618 1F75                                      l6684 1E07  
                                    l6852 1D7E                                      l6676 0CA4  
                                    l6692 1164                                      l7636 1275  
                                    l9260 10A5                                      l9420 09B6  
                                    l9236 079D                                      l6846 1C11  
                                    l7646 1290                                      l9182 1E54  
                                    l9254 109C                                      l9414 0995  
                                    l9246 07EB                                      l6856 1D8B  
                                    l9176 1E4B                                      l9192 1079  
                                    l9256 109F                                      l9432 09C9  
                                    l9424 09BC                                      l9098 1FE9  
                                    l9514 070D                                      l9178 1E4E  
                                    l9194 107C                                      l9282 13DD  
                                    l9450 0855                                      l9426 09C0  
                                    l9418 09B3                                      l9370 0CD3  
                                    l9362 0CAF                                      l7594 1D21  
                                    l9532 074A                                      l9292 13ED  
                                    l9284 13E0                                      l9452 0858  
                                    l9428 09C3                                      l9380 0D1D  
                                    l9372 0CD9                                      l9612 0AE5  
                   _myMain_Initialization 1C31                                      l9518 0724  
                                    l7686 1E7F                                      l9198 1082  
                                    l9294 13F0                                      l9382 0D21  
                                    l9374 0CF4                                      l9710 0E00  
                                    l9552 077E                                      l9528 0743  
                                    l7960 145C                                      l7696 1E8C  
                                    l9288 13E6                                      l9472 086D  
                                    l9456 085E                                      l9376 0D15  
                                    l9624 0AFA                                      l9608 0ADC  
                                    l9538 0754                                      l7954 1448  
                                    l7698 1E90                                      l9298 13F6  
                                    l9474 0883                                      l9394 097D  
                                    l9378 0D19                                      l9386 0D25  
                                    l9802 0673                                      l9396 0980  
                                    l9740 0E5F                                      l9558 14A8  
                                    l9830 06B5                                      l9902 02CC  
                                    l9742 0E61                                      l9664 09FD  
                                    l9816 069D                                      l9912 02FE  
                                    l9752 0E76                                      _CFGS 0CAE  
                                    l9666 0A03                                      l9850 1DE2  
                                    l9754 0E77                                      l9676 0A2B  
                                    l9596 0AC3                                      l9692 1EBE  
                                    l9678 0A31                                      l9950 1F53  
                                    l9846 1DDC                                      l9862 0219  
                                    l9686 1EB5                                      l9688 1EB8  
                            __CFG_WDTE$ON 0000                                      l9788 065F  
                                    l9974 04C2                                      l9878 025C  
                                    l9888 028E                                      _FREE 0CAC  
                                    _LATA 010C                                      _LATB 010D  
                                    _LATC 010E                                      u5105 17F0  
                                    u5035 17B4                                      u5055 17CD  
                                    u6130 16EC                                      u5075 17DA  
                                    _PEIE 005E                                      u6135 16EA  
                                    u5425 03B3                                      u5515 03EC  
                                    u6075 0C6C                                      u6235 10E4  
                                    u5605 0DAA                                      u5455 03C6  
                                    u5615 0DB9                                      u5625 0DC3  
                                    u5705 0F0D                                      u5485 03D9  
                                    u5815 0BE5                                      u5735 0F23  
                                    u5585 0D7A                                      u5745 0F29  
                                    u5665 0ECF                                      u7505 1276  
                                    u5595 0D8A                                      u5675 0EDF  
                                    u7515 1280                                      u5845 0C00  
                                    u7525 1288                                      u5695 0F07  
                                    u5785 0BBB                                      u7485 126C  
                                    u8655 1F0A                                      u8665 1F0F  
                                    u8695 1409                                      u8875 121E  
                                    _LWLO 0CAD                                      _RSSI 00C8  
                                    _WREN 0CAA                                      _WPUB 020D  
      __end_of_setDimmerLights_DimmingRun 1E42                _setDimmerLights_DimmingRun 1E2A  
                                    _Buz1 00AE                                      _Load 0130  
                                    _Temp 00D0                                      _main 162B  
                            ___ftpack@arg 0072                       __end_of_DlyOff_Main 0AAD  
                         __end_of_RF_Main 1ABF                              ___ftpack@exp 0075  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                           __end_of_WDT_Set 1B3D  
                                    ltemp 007E             __size_of_setRF_Initialization 000A  
                                    start 0020                                      ttemp 007E  
                                    wtemp 007E                __end_of_setRFSW_AdjControl 07FF  
                       ___bmul@multiplier 0075                              ___ftmul@cntr 0034  
                            ___ftmul@sign 0035              __size_of_Temp_Initialization 0003  
    _getDimmerLights_Allow_Condition$2300 0076      _getDimmerLights_Allow_Condition$2298 0074  
    _getDimmerLights_Allow_Condition$2299 0075                         ?_getDimmer_LoadGO 0070  
                                   ??_ISR 0071                              ___fttol@exp1 0053  
                            ___fttol@lval 004F         setDimmerLights_DimmingRun@command 0074  
 __end_of_getDimmerLights_Allow_Condition 12CE  __size_of_getDimmerLights_Allow_Condition 0037  
       ??_getDimmerLights_Allow_Condition 0073          ?_getDimmerLights_Allow_Condition 0070  
         _getDimmerLights_Allow_Condition 1297                    _getDimmerLights_Status 1BE6  
                      ??_getDimmer_LoadGO 0072                          __end_of_LED_Main 1BA3  
                   ?_getDimmerLights_Line 0070                                _DimmerIntr 00C5  
                                   l10100 00DE                                     l10030 0B6A  
                                   l10026 0B61                                     l10018 0B3E  
                                   l10132 0165                                     l10140 018D  
                                   l10060 0067                                     l10302 05D2  
                                   l10150 01A3                                     l10126 0158  
                                   l10046 0B95                                     l10304 05AD  
                                   l10136 0181                                     l10208 1330  
                                   l10306 05DA                                     l10314 05F5  
                                   l10308 05E4                                     l10236 1357  
                                   l10094 00AC                                     l10078 0088  
                                   l10272 0559                                     l10360 165A  
                                   l10266 054A                                     l10284 0590  
                                   l10276 0568                                     l10188 01D6  
                                   l10356 164F                                     l10286 056B  
                                   l10288 0598                     ?_setDimmerLights_Main 0070  
                   ?_setDimmerLights_Line 0070                           ?_setDelayOff_GO 005E  
                   ?_setDimmerLights_SwOn 0070                                     ?_main 01E6  
                         __end_of___awdiv 162B                           __end_of___ftadd 0450  
                         __end_of___ftdiv 0DE4                           __end_of___ftneg 1B2B  
                                   u10045 15F8                                     u10065 1602  
                                   u10075 160C                                     u10085 1614  
                         __end_of___ftmul 0F4A                                     u10165 1DB5  
                                   u12200 05D8                                     u12105 136E  
                                   u11315 068C                           ___awdiv@divisor 0072  
                                   u12205 05B6                                     u11175 0E47  
                                   u12055 1327                                     _T1CON 0018  
                                   u12065 1336                                     u12170 0596  
                                   u11195 0E67                           __end_of___fttol 0C22  
                                   u11285 063F                                     u12175 0574  
                                   u11705 0B82                                     u10775 1DF5  
                                   u11655 0B4E                                     u11855 00AA  
                                   u11865 00DC                                     u11955 0194  
                                   u11875 0111                                     _IOCBF 0396  
                                   _IOCBN 0395                                     _IOCBP 0394  
                                   _IOCIE 005B                                     _IOCIF 0058  
                         __end_of___lwdiv 1297                                     i1l990 1513  
                                   i1l982 14FA                                     i1l993 151C  
                                   i1l988 151E                                     i1l999 1530  
                         ___awdiv@counter 0020             __size_of_CC2500_FrequencyCabr 000B  
                                   _TMR1H 0017                                     _TMR1L 0016  
                                   _PORTA 000C                                     _PORTB 000D  
                                   _PORTC 000E                              ?_setLED_Main 0070  
                      setRF_Learn@command 0073                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
                                   _WPUB1 1069                   __end_of_Timeout_Counter 1DFB  
                           __CFG_WRT$HALF 0000    __end_of_getDimmerLights_ValueToPercent 0908  
 __size_of_getDimmerLights_ValueToPercent 0065            _getDimmerLights_ValueToPercent 08A3  
                        __end_of_TMR1_ISR 1FBC                   __size_of_setProductData 000E  
            __size_of_CC2500_WriteCommand 001A                          __end_of_TMR1_Set 1BAF  
                                   _getAD 1EAD                             ___awtoft@sign 0025  
                           ___ftpack@sign 0076               __size_of_CC2500_ClearRXFIFO 0004  
                           ??_Buzzer_Main 0072                          __end_of_WDT_Main 1CC0  
             __size_of_CC2500_ClearTXFIFO 0004                       CC2500_RxData@loop_f 0077  
                          __pbitbssCOMMON 03D0                            __CFG_BOREN$OFF 0000  
            __end_of_getMain_Lights_Count 1C80                        Flash_Memory_Read@i 0073  
                        ?_CC2500_ReadByte 0070                                     ltemp0 007E  
                                   ltemp1 0082                                     ltemp2 0086  
                                   ltemp3 0080            __size_of_setLED_Initialization 0010  
           __end_of_setLED_Initialization 1C70                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                            ?_setRF_Learn 0070                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F                        _setRF_DimmerLights 16E2  
             __size_of_Flash_Memory_Write 002A                         ?_CC2500_SIDLEMode 0070  
              __size_of_RF_Initialization 0003          __size_of_DelayOff_Initialization 0008  
                  ?_setLoad_AH_AL_Restore 0070                         setTemp_Main@error 0060  
             __size_of_setRF_TransceiveGO 0010                    ??_Flash_Memory_Erasing 0072  
             ??_setDimmerLights_DimmingOn 0074                        ??_CC2500_SIDLEMode 0076  
                         __initialization 0022                          ?_CC2500_PowerRST 0070  
                       ?_setMemory_Modify 0070                   __size_of_getDelayOff_GO 000F  
                            __end_of_main 1686                       ?_setRF_DimmerLights 005E  
                        __end_of_Fosc_Set 1AC9            getMain_All_LightsStatus@status 0072  
                      ??_setMemory_Modify 0072              setDimmerLights_OnOff@command 0066  
                          _Exception_Main 052C                          ?_CC2500_WriteREG 0074  
                               ??_ADC_Set 0072                      _setSw_Initialization 1B0B  
                                  ??_main 007A                             ___fttol@sign1 004E  
                            ?_setLog_Code 0070               ?_setDimmerIntr_DimmingValue 0072  
            ??_DimmerLights_SelectPointer 0072                   _setControl_Lights_Table 0CAE  
                          _setMemory_Data 1B52                    ?_Buzzer_Initialization 0070  
                 ??_DlyOff_Initialization 0074                                _Receive_OK 03D0  
      setDimmerIntr_ControlStatus@command 0072                   _setDimmerLights_Dimming 148F  
                               ??_IOC_ISR 0070                                 ??_IOC_Set 0072  
                             _DimmerIntr1 00E2                               _DimmerIntr2 00E9  
                _getMain_All_LightsStatus 1C04                  __size_of_setRFSW_Control 0040  
                      _RF_Timeout_Counter 1DA6                   ??_Switch_Initialization 0077  
                  ?_setDimmerLights_OnOff 0066                      ??_setRF_DimmerLights 005F  
                                  ?_getAD 0072                         ??_getRF_KeyStatus 0072  
                  ?_setDimmerLights_SwOff 0070                               _DlyOff_Main 0A3E  
                  ?_myMain_Initialization 0070                                    _ADCON0 009D  
                                  _ADCON1 009E                                 ??_RF_Main 007A  
                                  _ADRESH 009C                                    _ADRESL 009B  
                        ___awdiv@dividend 0074                     _getDimmer_Load_Status 1AFD  
                               ??_WDT_Set 0072                          __end_of___awtoft 2000  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  _ANSELC 018E                          __end_of___ftpack 1800  
                _getMain_All_Error_Status 11CC                                    _IOCBF2 1CB2  
                                  i1l1011 154C                                    i1l1022 156E  
                                  i1l1017 1570                                    i1l1019 1565  
                                  i1l1028 1582                                    i1l1401 0013  
                                  i1l1404 001B                                    i1l7840 1567  
                                  i1l7816 153F                                    i1l7762 14ED  
                                  i1l7848 157B                                    i1l7794 1529  
                                  i1l7786 1515                                    _FVRCON 0117  
    getDimmerLights_Allow_Condition@allow 0078                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                       ?_RF_Timeout_Counter 0070  
                                  _PMCON2 0196                                    _OSCCON 0099  
                      __size_of_Load_Main 0198                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    _IO_Set 1E92  
                                  u880_25 1FB6                                    _WDTCON 0097  
                      DelayTime_1us@count 0072                      Exception_Main@i_6558 002A  
          __size_of_CC2500_PowerOnInitial 0015               ??_setDimmerIntr_MaxmumValue 005B  
           __end_of_CC2500_PowerOnInitial 1DD0                                    _Dimmer 00BA  
                                  _DlySw1 01D0                                    _DlySw2 01D5  
           __size_of_setRF_TimeoutCleared 0004                     __end_of_getCmd_Status 1C60  
              __end_of_Mcu_Initialization 1D17                       __end_of_Buzzer_Main 1442  
                                  _Memory 0220                                    _Timer1 00BD  
                                  ___bmul 1CC0                    __end_of_Exception_Main 0600  
                    Load_Main@Load_Status 0023                      Exception_Main@lights 002C  
                                  ___wmul 1F01                                 ??___awdiv 0076  
                               ??___ftadd 003F              __size_of_DelayOffPointSelect 0015  
                               ??___ftdiv 002C                                 ??___ftneg 007A  
                               ??___ftmul 002C                                 ??___fttol 004A  
            ?_Flash_Memory_Initialization 0070                    ??_getDimmerLights_Line 0072  
                               ??___lwdiv 0076                    ??_setDimmerLights_Main 007A  
                  ??_setDimmerLights_Line 0072                                    _r_data 00CE  
 __end_of_getAll_DimmerIntr_Dimming_Sw_RF 1E92  __size_of_getAll_DimmerIntr_Dimming_Sw_RF 001B  
       ??_getAll_DimmerIntr_Dimming_Sw_RF 0072          ?_getAll_DimmerIntr_Dimming_Sw_RF 0070  
         _getAll_DimmerIntr_Dimming_Sw_RF 1E77                                    _s_data 00CF  
                  ??_setDimmerLights_SwOn 0079                                    _setLED 1741  
                                  _myMain 0120                      ??_RF_Timeout_Counter 0072  
                  __end_of_setMemory_Data 1B5D                     ?_setSw_Initialization 0070  
                        ___awdiv@quotient 0022                                    _setBuz 1584  
                      __size_of_Temp_Main 0003               __end_of_Load_Initialization 1AB9  
        ??_setDimmerLights_Initialization 0072           ?_setDimmerLights_Initialization 0070  
        __end_of_setDimmerIntr_Dimming_RF 1178          __end_of_setDimmerIntr_Dimming_Sw 10DA  
                   ___ftmul@f3_as_product 0031                 _setDimmerLights_DimmingOn 10FF  
                Flash_Memory_Read@address 0074                          ?_Timeout_Counter 0070  
              __end_of_setMemory_LoopSave 1CB0               getMain_Lights_Count@status1 0073  
             getMain_Lights_Count@status2 0074                     __end_of_SwPointSelect 1D2A  
            __size_of_Flash_Memory_Modify 004D                   __size_of_LedPointSelect 001D  
         setDimmerIntr_Dimming_Sw@command 0072                       Flash_Memory_Write@i 0073  
            __size_of_Flash_Memory_Unlock 0009                                _TouchPower 1DD0  
             __size_of_CC2500_InitPATable 001D                       CC2500_TxData@loop_e 0077  
        __end_of_CC2500_registers_address 102F                   __end_of__initialization 004F  
         getDimmerIntr_DimmingValue@value 0073           setDimmerIntr_DimmingValue@value 0072  
                               ?_LED_Main 0070                                ___ftadd@f1 0039  
                              ___ftadd@f2 003C                      _getRF_KeyStatus$4838 0074  
                           ?_my_MainTimer 0070                 _setDimmerLights_SwOn$2241 0026  
               _setDimmerLights_SwOn$2250 0027                                ___ftdiv@f1 0029  
                              ___ftdiv@f2 0026                                ___ftdiv@f3 0031  
                              ___ftneg@f1 0036                                ___awtoft@c 0020  
                     ___bmul@multiplicand 0072              ?_DimmerLights_Initialization 0070  
                              ___ftmul@f1 0026                                ___ftmul@f2 0029  
              ?_DimmerIntr_Initialization 0070                                ___fttol@f1 0046  
                          __pcstackCOMMON 0070                           ?_Exception_Main 0070  
                            __pidataBANK4 1F7B                             __end_of_getAD 1EC8  
                               ?_TMR1_ISR 0070                                 ?_TMR1_Set 0070  
                  setLoad_AH_AL_Restore@i 0073                 setMemory_LoopSave@command 0073  
                      _LED_Initialization 1B8B                           _getSw_KeyStatus 1F5B  
               ??_setControl_Lights_Table 007A                        getRF_KeyStatus@key 0073  
                         ?_setMemory_Data 0072          ??_getDimmerLights_PercentToValue 0054  
         ?_getDimmerLights_PercentToValue 0070                 ??_setDimmerLights_Dimming 0064  
           ??_Flash_Memory_Initialization 005A                ?_DimmerLights_MOSFET_IOC_1 0070  
              ?_DimmerLights_MOSFET_IOC_2 0070                      _getMain_Lights_Count 1C70  
                               ?_WDT_Main 0070                         __end_of_Load_Main 01EB  
       setDimmerIntr_ControlStatus@lights 0074                ?_DimmerLights_MOSFET_TMR_1 0070  
              ?_DimmerLights_MOSFET_TMR_2 0070                        __size_of_getBuz_GO 0010  
               _setDimmerIntr_MaxmumValue 1DFB                __end_of_set_TimeoutCleared 1AE3  
         setDimmerIntr_MaxmumValue@lights 005C                        __size_of_getRxData 0073  
                     ?_LED_Initialization 0070                         ?_CC2500_WriteByte 0070  
                          _setProductData 1BD8                      __size_of_setLED_Main 0041  
                  ?_getDimmer_Load_Status 0070                                   ??_getAD 0075  
                     _Temp_Initialization 1ABF                        ??_CC2500_WriteByte 0072  
                              __pbssBANK1 00A0                                __pbssBANK2 0120  
                              __pbssBANK3 01A0                                __pbssBANK4 0220  
                               ?_Fosc_Set 0070                               _Buzzer_Main 13FC  
                       ??_setRFSW_Control 0066               ?_setDimmerLights_DimmingRun 0074  
                       __end_of_Temp_Main 1AC5                                   ?_IO_Set 0070  
                          ??_my_MainTimer 0079                                ??_LED_Main 0077  
                         __CFG_VCAPEN$OFF 0000                   _DelayOff_Initialization 1B12  
                           ??_Switch_Main 007A                            DelayTime_1us@i 0074  
                          DelayTime_1us@j 0076                      ??_LED_Initialization 0077  
                            _DimmerLights 00C6                         LedPointSelect@led 0073  
   getAll_DimmerIntr_Dimming_Sw_RF@status 0075                    __size_of_DelayOff_Main 0008  
                    __size_of_setRF_Learn 0011                               setBuz@count 0078  
                 ?_getDimmerLights_Status 0070                                __pmaintext 162B  
                          _getDelayOff_GO 1BF5                       _CC2500_WriteCommand 1E42  
                    ?_Temp_Initialization 0070                                   ?___bmul 0072  
                        ??_setDelayOff_GO 0060         __end_of_DimmerIntr_Initialization 1FDE  
           ??_DimmerLights_Initialization 0073                                   ?___wmul 0072  
                              ??_TMR1_ISR 0071                             ?_setTemp_Main 0070  
                              _getLoad_AD 0B20                                ??_TMR1_Set 0072  
                              __pintentry 0004                    ??_setSw_Initialization 0076  
                              _getLoad_OK 1AEF                        __size_of_setTxData 00B6  
                                 ?_setLED 0074                    __size_of_DelayTime_1us 0025  
                   ?_getMain_Lights_Count 0070                                   _ADC_Set 1B04  
                                 ?_setBuz 0024                                 ?___awtoft 0020  
                               ?___ftpack 0072                                _getTemp_AD 1306  
      __end_of_DimmerLights_SelectPointer 1D7C                _DimmerLights_SelectPointer 1D67  
                              ??_WDT_Main 0072              __end_of_setRF_Initialization 1070  
       __end_of_DimmerLights_MOSFET_IOC_1 1BCA         __end_of_DimmerLights_MOSFET_IOC_2 1BD8  
                      _setRFSW_AdjControl 0781                    __end_of_setProductData 1BE6  
       __end_of_DimmerLights_MOSFET_TMR_1 1532         __end_of_DimmerLights_MOSFET_TMR_2 1584  
           setDimmerLights_Dimming@lights 0065                                   _IOC_ISR 1B73  
                                 _IOC_Set 1B3D                      __size_of_setLog_Code 0034  
           setDimmerLights_Dimming@status 0063     getDimmerLights_Allow_Condition@lights 0077  
                    ?_CC2500_WriteCommand 0070                         _Flash_Memory_Main 11FA  
               __size_of_getDimmer_LoadGO 0007                         _Flash_Memory_Read 1D3E  
                  __size_of_CC2500_RxData 0061                    __size_of_CC2500_TxData 0068  
                     ?_setRFSW_AdjControl 0070                                   _RF_Data 01A0  
                                 _RF_Main 1ABC                        ?_Flash_Memory_Main 0070  
                      ?_Flash_Memory_Read 0070                                   _WDT_Set 1B34  
         __end_of_setControl_Lights_Table 0D3B                           setRF_Main@error 006C  
                  __size_of_setCmd_Status 0015                                ??_Fosc_Set 0072  
                             ?_TouchPower 0070           __end_of_setDimmerLights_Dimming 14E0  
                 ??_setLoad_AH_AL_Restore 0072                       getCmd_Status@number 0072  
            __end_of_CC2500_FrequencyCabr 1B68                           __size_of_IO_Set 001B  
                     setCmd_Status@number 0074         __size_of_setDimmerIntr_Dimming_RF 0029  
       __size_of_setDimmerIntr_Dimming_Sw 0025                         __end_of_getBuz_GO 1C90  
               ?_setDimmerIntr_Dimming_RF 0072                       ??_Flash_Memory_Main 0078  
               ?_setDimmerIntr_Dimming_Sw 0072                       ??_Flash_Memory_Read 0072  
                  __end_of_getDelayOff_GO 1C04                                   _VarLED1 01DE  
                                 _VarLED2 01E2            __end_of_getDimmerLights_Status 1BF5  
                       __end_of_getRxData 0B20                   __end_of_getSw_KeyStatus 1F7B  
                _CC2500_registers_address 1000                     ??_Temp_Initialization 0072  
                    ??_setRFSW_AdjControl 005E                            ??_setTemp_Main 005E  
                         __size_of___bmul 0011                       setProductData@value 005A  
                                 ___awdiv 15D7                                   ___ftadd 035A  
                                 ___ftdiv 0D3B                                   ___ftneg 1B22  
                         __size_of___wmul 001D                                   ___ftmul 0E96  
                                 ___fttol 0B9B                       __end_of_Switch_Main 1B73  
                                 ___lwdiv 1261                ??_getMain_All_LightsStatus 0072  
                 ??_Buzzer_Initialization 0072                           _getRF_KeyStatus 1CD1  
                              ??___awtoft 0023                                ??___ftpack 0077  
                         __size_of_setLED 005F                      setRFSW_AdjControl@sw 0061  
                         __size_of_setBuz 0053                                   __ptext1 133F  
                                 __ptext2 1C31                                   __ptext3 1306  
                                 __ptext4 0B20                                   __ptext5 1EAD  
                                 __ptext6 1CB0                                   __ptext7 0002  
                                 __ptext8 1AC2                                   __ptext9 0DE4  
               __size_of_CC2500_SIDLEMode 0004                              __size_of_ISR 001C  
              ??_getMain_All_Error_Status 0072                   ??_setDimmerLights_OnOff 0067  
                         ?_setProductData 005A                 __end_of_Flash_Memory_Main 122D  
               __end_of_Flash_Memory_Read 1D52                   ??_setDimmerLights_SwOff 0074  
                              _setRF_Main 0600                   ??_myMain_Initialization 0072  
                           _DelayOff_Main 1B1A                         _DimmerLights_Main 1F3B  
          __size_of_DlyOff_Initialization 0005                     ??_CC2500_WriteCommand 0074  
               __size_of_setMemory_Modify 0010             __end_of_DlyOff_Initialization 1ADE  
              __end_of_CC2500_ClearRXFIFO 1AD1                  ??_setTemp_Initialization 0072  
              __end_of_CC2500_ClearTXFIFO 1AD5                              ?_DlyOff_Main 0070  
                      ?_DimmerLights_Main 0070                                   _product 006D  
                          _LedPointSelect 1EE4                       _DelayOffPointSelect 1D52  
                                 clrloop0 1AEA            __size_of_Switch_Initialization 000D  
           __end_of_Switch_Initialization 1BBC                      end_of_initialization 004F  
               ??_DelayOff_Initialization 0075                         _CC2500_InitSetREG 11A2  
                           _DelayTime_1us 10DA                         __end_of_setTxData 1000  
              __end_of_Flash_Memory_Write 11A2        __size_of_setDimmerLights_DimmingOn 0027  
                                 init_ram 1AE3                __end_of_setRF_TransceiveGO 1C50  
                      ?_CC2500_InitSetREG 0070                       ??_DimmerLights_Main 007A  
                    Flash_Memory_Read@ret 0075                                   initloop 1AE4  
                              _setSw_Main 01EB                     CC2500_ReadByte@loop_b 0073  
                  setDimmerLights_SwOn@sw 0029                         _CC2500_ReadStatus 1092  
                    Flash_Memory_Modify@i 0077                     _setLED_Initialization 1C60  
                         ?_getDelayOff_GO 0070                                getBuz_GO@i 0076  
                      ?_CC2500_ReadStatus 0070                  __size_of_CC2500_ReadByte 001C  
                           _CC2500_RxData 0842                             _CC2500_TxData 096D  
                     ??_CC2500_InitSetREG 0077             __size_of_Flash_Memory_Erasing 000C  
                    ?_DelayOffPointSelect 0070                       _Flash_Memory_Modify 1442  
                             ?_getLoad_AD 0070                               ?_getLoad_OK 0070  
                  ??_getMain_Lights_Count 0072                              __pstringtext 1000  
                           _setCmd_Status 1D7C                       _Flash_Memory_Unlock 1B2B  
                     ??_CC2500_ReadStatus 0074                   CC2500_InitSetREG@loop_c 0022  
                             ?_getTemp_AD 0070                       __size_of_TouchPower 0015  
                setLED_Initialization@led 0076                    setSw_Initialization@sw 0076  
               __end_of_DimmerLights_Main 1F5B                        _Mcu_Initialization 1D05  
                __size_of_CC2500_PowerRST 0044              __end_of_setRF_TimeoutCleared 1ACD  
                    __end_of_my_MainTimer 1378                            ?_DelayOff_Main 0070  
                        __CFG_FOSC$INTOSC 0000                    __end_of_LedPointSelect 1F01  
                __size_of_CC2500_WriteREG 0022          getDimmerIntr_DimmingValue@lights 0074  
        setDimmerIntr_DimmingValue@lights 0074                 __end_of_CC2500_InitSetREG 11CC  
                     ?_Mcu_Initialization 0070                      ?_Flash_Memory_Modify 0070  
             __size_of_setRF_DimmerLights 005F                            ?_DelayTime_1us 0072  
                    ?_Flash_Memory_Unlock 0070        __size_of_setDimmerIntr_MaxmumValue 0017  
               __end_of_CC2500_ReadStatus 10B5                             ?_RF_RxDisable 0070  
          setDimmerIntr_Dimming_RF@lights 0074           getMain_All_Error_Status@command 0077  
                             ___ftdiv@exp 0034         __end_of_setDimmerLights_DimmingOn 1126  
                        ??_Exception_Main 0079                            __end_of_IO_Set 1EAD  
                    _setRF_Initialization 1066                        _setMemory_LoopSave 1CA0  
                             _Switch_Main 1B68                         __size_of_LED_Main 000C  
                        ?_getSw_KeyStatus 0070                            ?_CC2500_RxData 0070  
                          ?_CC2500_TxData 0070                   __end_of_getRF_KeyStatus 1CE2  
                        ??_setMemory_Data 0073                               ___ftmul@exp 0030  
                   _CC2500_PowerOnInitial 1DBB               ??_DimmerIntr_Initialization 0072  
                    ??_Mcu_Initialization 0073                     ??_DelayOffPointSelect 0072  
                           ?_WDT_Clearing 0070                            ?_setCmd_Status 0072  
                     ?_setMemory_LoopSave 0070                            __end_of___bmul 1CD1  
     __size_of_getDimmerIntr_DimmingValue 0014                      setRF_DimmerLights@on 005E  
                          __end_of___wmul 1F1E                         getSw_KeyStatus@sw 0076  
             __size_of_RF_Timeout_Counter 0015                         __size_of_TMR1_ISR 0021  
           __size_of_getDimmerLights_Line 000F          DimmerLights_SelectPointer@lights 0073  
                       __size_of_TMR1_Set 000C               ??_DimmerLights_MOSFET_IOC_1 0070  
             ??_DimmerLights_MOSFET_IOC_2 0070             __size_of_setDimmerLights_Main 0069  
                          __end_of_setLED 17A0             __size_of_setDimmerLights_Line 0012  
           __size_of_setDimmerLights_SwOn 005C                            __end_of_setBuz 15D7  
             ??_DimmerLights_MOSFET_TMR_1 0070               ??_DimmerLights_MOSFET_TMR_2 0070  
                    _CC2500_FrequencyCabr 1B5D                   ??_getDimmer_Load_Status 0072  
              __size_of_Flash_Memory_Main 0033                __size_of_Flash_Memory_Read 0014  
                             ?_setRF_Main 0070                           _setRFSW_Control 1378  
                       __size_of_WDT_Main 0010                       start_initialization 0022  
                         ?_LedPointSelect 0070                                 _Load_Main 0053  
                             __end_of_ISR 0020                    __size_of_getCmd_Status 0010  
                        _getDimmer_LoadGO 1AF6                     ??_Flash_Memory_Modify 0076  
            __size_of_Load_Initialization 0003              ?_setDimmerIntr_ControlStatus 0072  
              __end_of_CC2500_InitPATable 1F3B           __size_of_setTemp_Initialization 0001  
                    ??_setMemory_LoopSave 0072                     ??_Flash_Memory_Unlock 0072  
                    __end_of_setTemp_Main 0E96                            ??_RF_RxDisable 0076  
  __end_of_getDimmerLights_PercentToValue 096D   __size_of_getDimmerLights_PercentToValue 0065  
          _getDimmerLights_PercentToValue 0908                       __size_of_getLoad_AD 007B  
                            ?_Buzzer_Main 0070       getDimmerLights_PercentToValue@value 0056  
                     __size_of_getLoad_OK 0007                        _set_TimeoutCleared 1ADE  
       __end_of_setDimmerIntr_MaxmumValue 1E12                                  ??_IO_Set 0072  
                __size_of_Timeout_Counter 0016                                 _VarErrLED 01DA  
                             ?_setSw_Main 0070                       __size_of_getTemp_AD 0039  
                  ?_setLED_Initialization 0070                     ?_setRF_Initialization 0070  
                       __size_of_Fosc_Set 0004                 __size_of_CC2500_WriteByte 0018  
                               _Temp_Main 1AC2                       ?_set_TimeoutCleared 0070  
                          ??_WDT_Clearing 0072                                 _Rx_Length 00C9  
                   setProductData@address 005D                       Exception_Main@count 0026  
                     Exception_Main@error 0027                                  ??___bmul 0073  
                                ??___wmul 0076                    __size_of_SwPointSelect 0013  
        __end_of_getMain_All_LightsStatus 1C13                                 _Tx_Length 00CC  
                             __pdataBANK4 0245                                  ??_setLED 0075  
                                ?_ADC_Set 0070                                  ??_setBuz 0077  
                         ??_DelayOff_Main 007A                         ??_CC2500_ReadByte 0072  
             ?_DimmerLights_SelectPointer 0070          __end_of_getMain_All_Error_Status 11FA  
                        _CC2500_SIDLEMode 1AD5                __size_of_DimmerLights_Main 0020  
                      setMemory_Data@data 0072                     ?_CC2500_FrequencyCabr 0070  
          setDimmerIntr_Dimming_Sw@lights 0074                             ??_setLED_Main 0074  
                       __size_of___awtoft 0022                         __size_of___ftpack 0060  
                                ?_IOC_ISR 0070                               __pbssCOMMON 007B  
                                ?_IOC_Set 0070                                 ___latbits 0003  
                        _setMemory_Modify 1C90                                ?_Load_Main 0070  
                           __pcstackBANK0 0020                 setRF_TransceiveGO@command 0073  
                           __pcstackBANK3 01E6                      ??_set_TimeoutCleared 0072  
               _DimmerIntr_Initialization 1FBC                           ??_DelayTime_1us 0074  
              __size_of_CC2500_InitSetREG 002A                             DlyOff_Main@sw 0060  
                       ??_CC2500_PowerRST 0078                                  ?_RF_Main 0070  
                                ?_WDT_Set 0070             ??_setDimmerIntr_ControlStatus 0073  
                            ??_TouchPower 0072                      __size_of_DlyOff_Main 006F  
              __size_of_CC2500_ReadStatus 0023            setDimmerIntr_MaxmumValue@value 005A  
             setDimmerLights_DimmingOn@sw 0074                 _DimmerLights_MOSFET_IOC_1 1BBC  
               _DimmerLights_MOSFET_IOC_2 1BCA                         ??_CC2500_WriteREG 0075  
                           ??_setRF_Learn 0072                             _DimmerLights1 015E  
                           _DimmerLights2 0166                     CC2500_WriteREG@w_addr 0076  
               _DimmerLights_MOSFET_TMR_1 14E0                 _DimmerLights_MOSFET_TMR_2 1532  
                   setDelayOff_GO@command 005E            __size_of_setLoad_AH_AL_Restore 001B  
                         ??_CC2500_RxData 0076             __end_of_setLoad_AH_AL_Restore 1E77  
                setRFSW_AdjControl@status 0060                           ??_CC2500_TxData 0076  
                               __pnvBANK0 006D                            getRxData@error 006A  
             __size_of_LED_Initialization 000C                      _setRF_TimeoutCleared 1AC9  
                  ?_CC2500_PowerOnInitial 0070                           Exception_Main@i 0028  
                              ?_Temp_Main 0070                       __size_of_setRF_Main 00C2  
                        ___lwdiv@dividend 0074                     DelayOffPointSelect@sw 0073  
                           _getCmd_Status 1C50                                setBuz@time 0024  
                         ??_setCmd_Status 0073                       setDelayOff_GO@value 005F  
                ?_setControl_Lights_Table 0070                          ?_getRF_KeyStatus 0070  
                          Load_Main@error 0022                    _setTemp_Initialization 07FF  
                               _getBuz_GO 1C80                  ?_setDimmerLights_Dimming 0063  
     __end_of_Flash_Memory_Initialization 052C               _Flash_Memory_Initialization 0450  
                                ?___awdiv 0072                                 __ptext100 1BF5  
                               __ptext101 1C50                                 __ptext110 0B9B  
                               __ptext102 148F                                 __ptext111 1B22  
                               __ptext103 0F4A                                 __ptext120 1B47  
                               __ptext112 0D3B                                 __ptext104 1C40  
                               __ptext121 0800                                 __ptext113 035A  
                               __ptext105 16E2                                 __ptext130 1BE6  
                               __ptext122 1FBC                                 __ptext114 1FDE  
                               __ptext106 1CF3                                 __ptext131 1D67  
                               __ptext123 1B1A                                 __ptext115 17A0  
                               __ptext107 1DFB                                 __ptext140 14E0  
                               __ptext132 1B12                                 __ptext124 0A3E  
                               __ptext116 1D2A                                 __ptext108 10B5  
                               __ptext141 1B73                                 __ptext133 1AD9  
                               __ptext125 1BD8                                 __ptext117 1297  
                               __ptext109 08A3                                  ?___ftadd 0039  
                               __ptext142 1BCA                                 __ptext134 1D52  
                               __ptext126 1686                                 __ptext118 1AEF  
                               __ptext143 1BBC                                 __ptext135 13FC  
                               __ptext127 1584                                 __ptext119 11CC  
                               __ptext136 1AB3                                 __ptext128 15D7  
                               __ptext129 12CE                                 __ptext138 1F9B  
                               __ptext139 1532                                 _getRxData 0AAD  
                                ?___ftdiv 0026                                  ?___ftneg 0036  
                                ?___ftmul 0026                                  ?___fttol 0046  
                   __size_of_my_MainTimer 0039                                  ?___lwdiv 0072  
                 __end_of_setRFSW_Control 13B8                          ??_setProductData 005B  
           __size_of_setSw_Initialization 0007            __size_of_Buzzer_Initialization 0003  
           __end_of_Buzzer_Initialization 1AB6                             ??_setLog_Code 005E  
                getDimmerLights_Line@line 0073                        __end_of_TouchPower 1DE5  
                     __size_of_setSw_Main 016F              CC2500_ReadStatus@status_addr 0075  
      __end_of_getDimmerIntr_DimmingValue 1D3E              ??_setDimmerIntr_DimmingValue 0073  
              _getDimmerIntr_DimmingValue 1D2A                    CC2500_WriteByte@loop_a 0073  
          __size_of_setDimmerLights_OnOff 00BF                                 _r_address 00CD  
           __end_of_setDimmerLights_OnOff 0781            __size_of_setDimmerLights_SwOff 0038  
          __size_of_myMain_Initialization 000F             __end_of_setDimmerLights_SwOff 1306  
            __end_of_CC2500_patable_vaule 1066             __end_of_myMain_Initialization 1C40  
                          __size_of_getAD 001B                          ___lwdiv@quotient 0077  
                           _SwPointSelect 1D17                       __end_of_setLED_Main 0842  
                        ??_getDelayOff_GO 0074                    ??_setRF_Initialization 0072  
             __end_of_Temp_Initialization 1AC2                         _CC2500_rfSettings 102F  
                          ___wmul@product 0076                                  _LED_Main 1B97  
                         SwPointSelect@sw 0073                                 clear_ram0 1AE9  
                CC2500_InitPATable@loop_d 0079                     ?_setRF_TimeoutCleared 0070  
                            _my_MainTimer 133F                                 _setTxData 0F4A  
     __end_of_DimmerLights_Initialization 1B52               _DimmerLights_Initialization 1B47  
                      _CC2500_ClearRXFIFO 1ACD                            ?_getCmd_Status 0070  
                      _CC2500_ClearTXFIFO 1AD1                  setRF_DimmerLights@lights 0062  
                                _GO_nDONE 04E9                       __end_of_setRF_Learn 1CF3  
                       ??_Timeout_Counter 0072                                ?_getBuz_GO 0072  
                setRF_DimmerLights@status 0061      __size_of_setDimmerIntr_ControlStatus 0029  
             __size_of_setRFSW_AdjControl 007E       __size_of_setDimmerIntr_DimmingValue 0015  
                      _Flash_Memory_Write 1178                                ?_getRxData 0070  
                            ??_getLoad_AD 0076                                  _TMR1_ISR 1F9B  
                  CC2500_InitSetREG@temp1 0020                    CC2500_InitSetREG@temp2 0021  
                            ??_getLoad_OK 0072                                  _TMR1_Set 1BA3  
                     ?_CC2500_ClearRXFIFO 0070                       ?_CC2500_ClearTXFIFO 0070  
                      _setRF_TransceiveGO 1C40                                  _RF_Count 012E  
                    __end_of_RF_RxDisable 1C31                              ??_getTemp_AD 0076  
             __end_of_CC2500_WriteCommand 1E5C                    ??_CC2500_FrequencyCabr 0078  
                                _WDT_Main 1CB0                   DlyOff_Initialization@sw 0074  
                   getSw_KeyStatus@status 0075                          __size_of_ADC_Set 0007  
                       ___wmul@multiplier 0072                       ?_Flash_Memory_Write 0070  
                   __size_of_setTemp_Main 00B2                       ?_setRF_TransceiveGO 0070  
                 __size_of_setDelayOff_GO 008C                                  _DelayOff 00C4  
                            setSw_Main@sw 002C                               ??_Load_Main 0020  
                        __size_of_IOC_ISR 000C            getMain_All_Error_Status@status 0078  
                        __size_of_IOC_Set 000A              __end_of_Flash_Memory_Erasing 1B8B  
                          ?_SwPointSelect 0070                               getAD@adcon0 0075  
                             getAD@adcon1 0072                            setLED_Main@led 0076  
                    __end_of_WDT_Clearing 0004                       __end_of_setLog_Code 1261  
                   _DlyOff_Initialization 1AD9         __size_of_getMain_All_LightsStatus 000F  
                    ??_CC2500_ClearRXFIFO 0076                 ?_getMain_All_LightsStatus 0070  
                    ??_CC2500_ClearTXFIFO 0076                 __end_of_CC2500_rfSettings 105E  
                        __size_of_RF_Main 0003                  _setDimmerIntr_Dimming_RF 114F  
             setDimmerLights_OnOff@lights 0069                  _setDimmerIntr_Dimming_Sw 10B5  
                                _Fosc_Set 1AC5                          __size_of_WDT_Set 0009  
                   setRFSW_Control@status 0067                        __end_of_getLoad_AD 0B9B  
                      __end_of_getLoad_OK 1AF6                     _Switch_Initialization 1BAF  
       __size_of_getMain_All_Error_Status 002E                      ??_Flash_Memory_Write 0072  
               ?_getMain_All_Error_Status 0070                      __size_of_Buzzer_Main 0046  
                      __end_of_getTemp_AD 133F                                ?_setTxData 0070  
                            ?_Switch_Main 0070                          _CC2500_WriteByte 1E12  
                       getLoad_AD@channel 0020       __size_of_DimmerLights_SelectPointer 0015  
                    ??_setRF_TransceiveGO 0072              Flash_Memory_Initialization@i 005B  
                                _SwDetect 00CB                               ??_Temp_Main 007A  
                        getCmd_Status@cmd 0073                          setCmd_Status@cmd 0072  
                       setRFSW_Control@sw 0068             _getMain_All_Error_Status$6546 0073  
           _getMain_All_Error_Status$6547 0075                  __end_of_getDimmer_LoadGO 1AFD  
                     _Load_Initialization 1AB6          ??_getDimmerLights_ValueToPercent 0054  
         ?_getDimmerLights_ValueToPercent 0070                                 setLED@led 0075  
                            _setTemp_Main 0DE4                          __size_of___awdiv 0054  
                        __size_of___ftadd 00F6                          ?_setRFSW_Control 0070  
                        __size_of___ftdiv 00A9                          __size_of___ftneg 0009  
                        __size_of___ftmul 00B4                          __size_of___fttol 0087  
                        __size_of___lwdiv 0036                  setDimmerLights_SwOn@idle 0028  
                                ___awtoft 1FDE                          ??_LedPointSelect 0072  
                                ___ftpack 17A0             __size_of_getMain_Lights_Count 0010  
                  getDimmer_LoadGO@loadgo 0072                         getTemp_AD@channel 0077  
                            ??_setRF_Main 006B                      CC2500_WriteREG@value 0074  
                             _setLED_Main 0801                __end_of_setRF_DimmerLights 1741  
          __size_of_getDimmer_Load_Status 0007                  ?_DelayOff_Initialization 0070  
                        getDelayOff_GO@go 0075                          getDelayOff_GO@sw 0074  
           __end_of_getDimmer_Load_Status 1B04                          setDelayOff_GO@sw 0065  
                         ___lwdiv@divisor 0072                      ?_Load_Initialization 0070  
                         ___lwdiv@counter 0079                                  __ptext10 1ABF  
                                __ptext11 07FF                                  __ptext20 1DD0  
                                __ptext12 1B68                                  __ptext21 1ADE  
                                __ptext13 01EB                                  __ptext30 0781  
                                __ptext22 1DE5                                  __ptext14 1CE2  
                                __ptext31 1C90                                  __ptext23 1ABC  
                                __ptext15 10FF                                  __ptext40 1DBB  
                                __ptext32 1E2A                                  __ptext24 0600  
                                __ptext16 1F5B                                  __ptext41 1AD5  
                                __ptext33 1CD1                                  __ptext25 0AAD  
                                __ptext17 1D17                                  __ptext50 1E42  
                                __ptext42 13B8                                  __ptext34 1C80  
                                __ptext26 122D                                  __ptext18 1BAF  
                                __ptext51 1AC9                                  __ptext43 11A2  
                                __ptext35 1C22                                  __ptext27 1CA0  
                                __ptext19 1B0B                                  __ptext60 1B3D  
                                __ptext52 1DA6                                  __ptext44 1F1E  
                                __ptext36 096D                                  __ptext28 0CAE  
                                __ptext61 1AC5                                  __ptext53 1E12  
                                __ptext45 1070                                  __ptext37 0842  
                                __ptext29 1378                                  __ptext70 1AB6  
                                __ptext62 1B04                                  __ptext54 1AB9  
                                __ptext46 1B5D                                  __ptext38 1092  
                                __ptext71 1E5C                                  __ptext63 0053  
                                __ptext55 1066                                  __ptext47 10DA  
                                __ptext39 1EC8                                  __ptext80 1B52  
                                __ptext72 1B97                                  __ptext64 1C70  
                                __ptext56 1D05                                  __ptext48 1AD1  
                                __ptext81 1178                                  __ptext73 0801  
                                __ptext65 1AFD                                  __ptext57 1B34  
                                __ptext49 1ACD                                  __ptext90 1EE4  
                                __ptext82 1B2B                                  __ptext74 1B8B  
                                __ptext66 1AF6                                  __ptext58 1BA3  
                                __ptext91 114F                                  __ptext83 1D3E  
                                __ptext75 1C60                                  __ptext67 1E77  
                                __ptext59 1E92                                  __ptext92 1D91  
                                __ptext84 052C                                  __ptext76 11FA  
                                __ptext68 1F01                                  __ptext93 1126  
                                __ptext85 1C13                                  __ptext77 1442  
                                __ptext69 1261                                  __ptext94 0C22  
                                __ptext86 1F3B                                  __ptext78 1B7F  
                                __ptext95 1CC0                                  __ptext87 09D5  
                                __ptext79 0450                                  __ptext96 1D7C  
                                __ptext88 06C2                                  __ptext97 1C04  
                                __ptext89 1741                                  __ptext98 0908  
                                __ptext99 0E96                                  __product 0245  
                 ??_setLED_Initialization 0076                  ??_getDimmerLights_Status 0074  
            __end_of_getDimmerLights_Line 1C22              __end_of_setDimmerLights_Main 0A3E  
            __end_of_setDimmerLights_Line 1D05              __end_of_setDimmerLights_SwOn 16E2  
                            ??_setSw_Main 002A                    ??_setRF_TimeoutCleared 0072  
            ??_setDimmerLights_DimmingRun 0075                             setLED@command 0074  
                           __size_of_main 005B                               _setRF_Learn 1CE2  
      __size_of_DimmerIntr_Initialization 0022                           ??_getCmd_Status 0072  
                __end_of_CC2500_SIDLEMode 1AD9                setDimmerLights_Main@lights 006A  
             __end_of_DelayOffPointSelect 1D67                CC2500_WriteCommand@command 0075  
                         _CC2500_ReadByte 1EC8                ?_setDimmerLights_DimmingOn 0070  
                      _CC2500_InitPATable 1F1E                  __end_of_setMemory_Modify 1CA0  
    _getAll_DimmerIntr_Dimming_Sw_RF$2165 0073      _getAll_DimmerIntr_Dimming_Sw_RF$2166 0074  
                      __end_of_setRF_Main 06C2                               ??_getBuz_GO 0074  
             __size_of_Mcu_Initialization 0012        __size_of_DimmerLights_MOSFET_IOC_1 000E  
      __size_of_DimmerLights_MOSFET_IOC_2 000E                      _CC2500_patable_vaule 105E  
                             ??_getRxData 0069                              getLoad_OK@ok 0072  
              __end_of_RF_Timeout_Counter 1DBB        __size_of_DimmerLights_MOSFET_TMR_1 0052  
      __size_of_DimmerLights_MOSFET_TMR_2 0052                                  main@argc 01E6  
                                main@argv 01E8                       ?_CC2500_InitPATable 0070  
                    _getSw_KeyStatus$5840 0074                      _getSw_KeyStatus$5839 0073  
     getDimmerLights_ValueToPercent@value 0056                           _CC2500_PowerRST 13B8  
                __size_of_getSw_KeyStatus 0020        __end_of_setDimmerIntr_DimmingValue 1DA6  
              _setDimmerIntr_DimmingValue 1D91               __end_of_Flash_Memory_Modify 148F  
                             _setLog_Code 122D               __end_of_Flash_Memory_Unlock 1B34  
                         ??_SwPointSelect 0072                           _CC2500_WriteREG 1070  
                      __end_of_setSw_Main 035A                     ??_Load_Initialization 0074  
         getDimmerLights_PercentToValue@i 0057       __size_of_setDimmerLights_DimmingRun 0018  
                           _Transceive_OK 03D1                    ?_DlyOff_Initialization 0070  
                             pic14e$flags 007E              ??_getDimmerIntr_DimmingValue 0072  
              setDimmerLights_Line@lights 0072                   setDimmerLights_SwOff@sw 0074  
             __size_of_setMemory_LoopSave 0010                                  intlevel1 0000  
                    ??_CC2500_InitPATable 0077                    ?_Switch_Initialization 0070  
                         setDelayOff_GO@i 0062                           setDelayOff_GO@j 0063  
                         setDelayOff_GO@k 0064                   ??_CC2500_PowerOnInitial 007A  
  __end_of_setDimmerLights_Initialization 0801   __size_of_setDimmerLights_Initialization 0001  
          _setDimmerLights_Initialization 0800                ?_setDimmerIntr_MaxmumValue 005A  
                 ?_setTemp_Initialization 0070                               ??_setTxData 0072  
                  CC2500_InitPATable@temp 0078                     __size_of_RF_RxDisable 000F  
                       _RF_Initialization 1AB9                               getLoad_AD@i 0023  
                             getLoad_AD@j 0022                               getLoad_AD@k 0021  
                    _Flash_Memory_Erasing 1B7F                        ?_RF_Initialization 0070  
                              _SPI0Buffer 00CA                   __size_of_Exception_Main 00D4  
         __end_of_DelayOff_Initialization 1B1A                     __size_of_WDT_Clearing 0002  
                   __end_of_DelayOff_Main 1B22                       ??_RF_Initialization 0073  
                 __size_of_setMemory_Data 000B                            _setDelayOff_GO 0C22  
             ?_getDimmerIntr_DimmingValue 0070          __size_of_setControl_Lights_Table 008D  
        __size_of_setDimmerLights_Dimming 0051               getDimmer_Load_Status@status 0072  
    __size_of_Flash_Memory_Initialization 00DC               __size_of_set_TimeoutCleared 0005  
                           ??_DlyOff_Main 005E                     setMemory_Data@address 0074  
                   __end_of_DelayTime_1us 10FF                   __end_of_CC2500_ReadByte 1EE4  
            __end_of_setSw_Initialization 1B12                           _Timeout_Counter 1DE5  
         __size_of_getDimmerLights_Status 000F           getDimmerLights_ValueToPercent@i 0057  
                            _RF_RxDisable 1C22                __end_of_LED_Initialization 1B97  
          __end_of_setTemp_Initialization 0800                   setMemory_Modify@command 0073  
               __end_of_RF_Initialization 1ABC                     __end_of_CC2500_RxData 08A3  
                   __end_of_CC2500_TxData 09D5                     _setLoad_AH_AL_Restore 1E5C  
                 __end_of_CC2500_PowerRST 13FC  
