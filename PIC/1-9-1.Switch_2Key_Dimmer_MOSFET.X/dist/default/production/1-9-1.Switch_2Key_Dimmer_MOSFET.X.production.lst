

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Mon Feb 09 17:13:42 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssBANK1,global,bit,class=BANK1,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    11                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    12                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    13                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    17                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    19                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    20                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    21                           	psect	text2,local,class=CODE,merge=1,delta=2
    22                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    23                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text6,local,class=CODE,merge=1,delta=2
    26                           	psect	text7,local,class=CODE,merge=1,delta=2
    27                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    28                           	psect	text9,local,class=CODE,merge=1,delta=2
    29                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    30                           	psect	text11,local,class=CODE,merge=1,delta=2
    31                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text13,local,class=CODE,merge=1,delta=2
    33                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text15,local,class=CODE,merge=1,delta=2
    35                           	psect	text16,local,class=CODE,merge=1,delta=2
    36                           	psect	text17,local,class=CODE,merge=1,delta=2
    37                           	psect	text18,local,class=CODE,merge=1,delta=2
    38                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    39                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    40                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text22,local,class=CODE,merge=1,delta=2
    42                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text27,local,class=CODE,merge=1,delta=2
    47                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text29,local,class=CODE,merge=1,delta=2
    49                           	psect	text30,local,class=CODE,merge=1,delta=2
    50                           	psect	text31,local,class=CODE,merge=1,delta=2
    51                           	psect	text32,local,class=CODE,merge=1,inline,delta=2
    52                           	psect	text33,local,class=CODE,merge=1,delta=2
    53                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    54                           	psect	text35,local,class=CODE,merge=1,delta=2
    55                           	psect	text36,local,class=CODE,merge=1,delta=2
    56                           	psect	text37,local,class=CODE,merge=1,delta=2
    57                           	psect	text38,local,class=CODE,merge=1,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2
    61                           	psect	text42,local,class=CODE,merge=1,delta=2
    62                           	psect	text43,local,class=CODE,merge=1,delta=2
    63                           	psect	text44,local,class=CODE,merge=1,delta=2
    64                           	psect	text45,local,class=CODE,merge=1,delta=2
    65                           	psect	text46,local,class=CODE,merge=1,delta=2
    66                           	psect	text47,local,class=CODE,merge=1,delta=2
    67                           	psect	text48,local,class=CODE,merge=1,delta=2
    68                           	psect	text49,local,class=CODE,merge=1,delta=2
    69                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    70                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    71                           	psect	text52,local,class=CODE,merge=1,delta=2
    72                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text55,local,class=CODE,merge=1,delta=2
    75                           	psect	text56,local,class=CODE,merge=1,delta=2
    76                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text58,local,class=CODE,merge=1,delta=2
    78                           	psect	text59,local,class=CODE,merge=1,delta=2
    79                           	psect	text60,local,class=CODE,merge=1,delta=2
    80                           	psect	text61,local,class=CODE,merge=1,delta=2
    81                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    82                           	psect	text63,local,class=CODE,merge=1,delta=2
    83                           	psect	text64,local,class=CODE,merge=1,delta=2
    84                           	psect	text65,local,class=CODE,merge=1,delta=2
    85                           	psect	text66,local,class=CODE,merge=1,delta=2
    86                           	psect	text67,local,class=CODE,merge=1,delta=2
    87                           	psect	text68,local,class=CODE,merge=1,delta=2
    88                           	psect	text69,local,class=CODE,merge=1,inline,delta=2
    89                           	psect	text70,local,class=CODE,merge=1,delta=2
    90                           	psect	text71,local,class=CODE,merge=1,inline,delta=2
    91                           	psect	text72,local,class=CODE,merge=1,delta=2
    92                           	psect	text73,local,class=CODE,merge=1,inline,delta=2
    93                           	psect	text74,local,class=CODE,merge=1,delta=2
    94                           	psect	text75,local,class=CODE,merge=1,delta=2
    95                           	psect	text76,local,class=CODE,merge=1,delta=2
    96                           	psect	text77,local,class=CODE,merge=1,delta=2
    97                           	psect	text78,local,class=CODE,merge=1,delta=2
    98                           	psect	text79,local,class=CODE,merge=1,delta=2
    99                           	psect	text80,local,class=CODE,merge=1,delta=2
   100                           	psect	text81,local,class=CODE,merge=1,delta=2
   101                           	psect	text82,local,class=CODE,merge=1,delta=2
   102                           	psect	text83,local,class=CODE,merge=1,delta=2
   103                           	psect	text84,local,class=CODE,merge=1,delta=2
   104                           	psect	text85,local,class=CODE,merge=1,delta=2
   105                           	psect	text86,local,class=CODE,merge=1,delta=2
   106                           	psect	text87,local,class=CODE,merge=1,delta=2
   107                           	psect	text88,local,class=CODE,merge=1,delta=2
   108                           	psect	text89,local,class=CODE,merge=1,delta=2
   109                           	psect	text90,local,class=CODE,merge=1,delta=2
   110                           	psect	text91,local,class=CODE,merge=1,delta=2
   111                           	psect	text92,local,class=CODE,merge=1,delta=2
   112                           	psect	text93,local,class=CODE,merge=1,delta=2
   113                           	psect	text94,local,class=CODE,merge=1,delta=2
   114                           	psect	text95,local,class=CODE,merge=1,delta=2
   115                           	psect	text96,local,class=CODE,merge=1,delta=2
   116                           	psect	text97,local,class=CODE,merge=1,delta=2
   117                           	psect	text98,local,class=CODE,merge=1,delta=2
   118                           	psect	text99,local,class=CODE,merge=1,delta=2
   119                           	psect	text100,local,class=CODE,merge=1,delta=2
   120                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   121                           	psect	text102,local,class=CODE,merge=1,inline,delta=2
   122                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   123                           	psect	text104,local,class=CODE,merge=1,delta=2
   124                           	psect	text105,local,class=CODE,merge=1,delta=2
   125                           	psect	text106,local,class=CODE,merge=1,delta=2
   126                           	psect	text107,local,class=CODE,merge=1,delta=2
   127                           	psect	text108,local,class=CODE,merge=1,delta=2
   128                           	psect	text109,local,class=CODE,merge=1,delta=2
   129                           	psect	text110,local,class=CODE,merge=1,delta=2
   130                           	psect	text111,local,class=CODE,merge=1,delta=2
   131                           	psect	text112,local,class=CODE,merge=1,delta=2
   132                           	psect	text113,local,class=CODE,merge=1,delta=2
   133                           	psect	text114,local,class=CODE,merge=1,delta=2
   134                           	psect	text115,local,class=CODE,merge=1,delta=2
   135                           	psect	text116,local,class=CODE,merge=1,delta=2
   136                           	psect	text117,local,class=CODE,merge=1,delta=2
   137                           	psect	text118,local,class=CODE,merge=1,delta=2
   138                           	psect	text119,local,class=CODE,merge=1,delta=2
   139                           	psect	text120,local,class=CODE,merge=1,delta=2
   140                           	psect	text121,local,class=CODE,merge=1,delta=2
   141                           	psect	text122,local,class=CODE,merge=1,delta=2
   142                           	psect	text123,local,class=CODE,merge=1,delta=2
   143                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   144                           	psect	text125,local,class=CODE,merge=1,delta=2
   145                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   146                           	psect	text127,local,class=CODE,merge=1,delta=2
   147                           	psect	text128,local,class=CODE,merge=1,delta=2
   148                           	psect	text129,local,class=CODE,merge=1,delta=2
   149                           	psect	text130,local,class=CODE,merge=1,delta=2
   150                           	psect	text131,local,class=CODE,merge=1,delta=2
   151                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   152                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text134,local,class=CODE,merge=1,delta=2
   154                           	psect	text135,local,class=CODE,merge=1,delta=2
   155                           	psect	text136,local,class=CODE,merge=1,inline,delta=2
   156                           	psect	text137,local,class=CODE,merge=1,inline,delta=2
   157                           	psect	intentry,global,class=CODE,delta=2
   158                           	psect	text139,local,class=CODE,merge=1,inline,delta=2
   159                           	psect	text140,local,class=CODE,merge=1,inline,delta=2
   160                           	psect	text141,local,class=CODE,merge=1,inline,delta=2
   161                           	psect	text142,local,class=CODE,merge=1,inline,delta=2
   162                           	psect	text143,local,class=CODE,merge=1,inline,delta=2
   163                           	psect	text144,local,class=CODE,merge=1,inline,delta=2
   164                           	psect	text145,local,class=CODE,merge=1,inline,delta=2
   165                           	psect	text146,local,class=CODE,merge=1,delta=2
   166                           	dabs	1,0x7E,2
   167  0000                     	;# 
   168  0001                     	;# 
   169  0002                     	;# 
   170  0003                     	;# 
   171  0004                     	;# 
   172  0005                     	;# 
   173  0006                     	;# 
   174  0007                     	;# 
   175  0008                     	;# 
   176  0009                     	;# 
   177  000A                     	;# 
   178  000B                     	;# 
   179  000C                     	;# 
   180  000D                     	;# 
   181  000E                     	;# 
   182  0010                     	;# 
   183  0011                     	;# 
   184  0012                     	;# 
   185  0015                     	;# 
   186  0016                     	;# 
   187  0016                     	;# 
   188  0017                     	;# 
   189  0018                     	;# 
   190  0019                     	;# 
   191  001A                     	;# 
   192  001B                     	;# 
   193  001C                     	;# 
   194  008C                     	;# 
   195  008D                     	;# 
   196  008E                     	;# 
   197  0090                     	;# 
   198  0091                     	;# 
   199  0092                     	;# 
   200  0095                     	;# 
   201  0096                     	;# 
   202  0097                     	;# 
   203  0099                     	;# 
   204  009A                     	;# 
   205  009B                     	;# 
   206  009B                     	;# 
   207  009C                     	;# 
   208  009D                     	;# 
   209  009E                     	;# 
   210  010C                     	;# 
   211  010D                     	;# 
   212  010E                     	;# 
   213  0116                     	;# 
   214  0117                     	;# 
   215  011D                     	;# 
   216  018C                     	;# 
   217  018D                     	;# 
   218  018E                     	;# 
   219  0191                     	;# 
   220  0191                     	;# 
   221  0192                     	;# 
   222  0193                     	;# 
   223  0193                     	;# 
   224  0194                     	;# 
   225  0195                     	;# 
   226  0196                     	;# 
   227  0197                     	;# 
   228  0199                     	;# 
   229  019A                     	;# 
   230  019B                     	;# 
   231  019B                     	;# 
   232  019B                     	;# 
   233  019B                     	;# 
   234  019C                     	;# 
   235  019C                     	;# 
   236  019D                     	;# 
   237  019E                     	;# 
   238  019F                     	;# 
   239  020D                     	;# 
   240  0210                     	;# 
   241  0211                     	;# 
   242  0211                     	;# 
   243  0212                     	;# 
   244  0212                     	;# 
   245  0213                     	;# 
   246  0213                     	;# 
   247  0214                     	;# 
   248  0214                     	;# 
   249  0215                     	;# 
   250  0215                     	;# 
   251  0215                     	;# 
   252  0216                     	;# 
   253  0216                     	;# 
   254  0217                     	;# 
   255  0217                     	;# 
   256  0291                     	;# 
   257  0291                     	;# 
   258  0292                     	;# 
   259  0293                     	;# 
   260  0298                     	;# 
   261  0298                     	;# 
   262  0299                     	;# 
   263  029A                     	;# 
   264  0394                     	;# 
   265  0395                     	;# 
   266  0396                     	;# 
   267  0FE4                     	;# 
   268  0FE5                     	;# 
   269  0FE6                     	;# 
   270  0FE7                     	;# 
   271  0FE8                     	;# 
   272  0FE9                     	;# 
   273  0FEA                     	;# 
   274  0FEB                     	;# 
   275  0FED                     	;# 
   276  0FEE                     	;# 
   277  0FEF                     	;# 
   278  0000                     	;# 
   279  0001                     	;# 
   280  0002                     	;# 
   281  0003                     	;# 
   282  0004                     	;# 
   283  0005                     	;# 
   284  0006                     	;# 
   285  0007                     	;# 
   286  0008                     	;# 
   287  0009                     	;# 
   288  000A                     	;# 
   289  000B                     	;# 
   290  000C                     	;# 
   291  000D                     	;# 
   292  000E                     	;# 
   293  0010                     	;# 
   294  0011                     	;# 
   295  0012                     	;# 
   296  0015                     	;# 
   297  0016                     	;# 
   298  0016                     	;# 
   299  0017                     	;# 
   300  0018                     	;# 
   301  0019                     	;# 
   302  001A                     	;# 
   303  001B                     	;# 
   304  001C                     	;# 
   305  008C                     	;# 
   306  008D                     	;# 
   307  008E                     	;# 
   308  0090                     	;# 
   309  0091                     	;# 
   310  0092                     	;# 
   311  0095                     	;# 
   312  0096                     	;# 
   313  0097                     	;# 
   314  0099                     	;# 
   315  009A                     	;# 
   316  009B                     	;# 
   317  009B                     	;# 
   318  009C                     	;# 
   319  009D                     	;# 
   320  009E                     	;# 
   321  010C                     	;# 
   322  010D                     	;# 
   323  010E                     	;# 
   324  0116                     	;# 
   325  0117                     	;# 
   326  011D                     	;# 
   327  018C                     	;# 
   328  018D                     	;# 
   329  018E                     	;# 
   330  0191                     	;# 
   331  0191                     	;# 
   332  0192                     	;# 
   333  0193                     	;# 
   334  0193                     	;# 
   335  0194                     	;# 
   336  0195                     	;# 
   337  0196                     	;# 
   338  0197                     	;# 
   339  0199                     	;# 
   340  019A                     	;# 
   341  019B                     	;# 
   342  019B                     	;# 
   343  019B                     	;# 
   344  019B                     	;# 
   345  019C                     	;# 
   346  019C                     	;# 
   347  019D                     	;# 
   348  019E                     	;# 
   349  019F                     	;# 
   350  020D                     	;# 
   351  0210                     	;# 
   352  0211                     	;# 
   353  0211                     	;# 
   354  0212                     	;# 
   355  0212                     	;# 
   356  0213                     	;# 
   357  0213                     	;# 
   358  0214                     	;# 
   359  0214                     	;# 
   360  0215                     	;# 
   361  0215                     	;# 
   362  0215                     	;# 
   363  0216                     	;# 
   364  0216                     	;# 
   365  0217                     	;# 
   366  0217                     	;# 
   367  0291                     	;# 
   368  0291                     	;# 
   369  0292                     	;# 
   370  0293                     	;# 
   371  0298                     	;# 
   372  0298                     	;# 
   373  0299                     	;# 
   374  029A                     	;# 
   375  0394                     	;# 
   376  0395                     	;# 
   377  0396                     	;# 
   378  0FE4                     	;# 
   379  0FE5                     	;# 
   380  0FE6                     	;# 
   381  0FE7                     	;# 
   382  0FE8                     	;# 
   383  0FE9                     	;# 
   384  0FEA                     	;# 
   385  0FEB                     	;# 
   386  0FED                     	;# 
   387  0FEE                     	;# 
   388  0FEF                     	;# 
   389  0000                     	;# 
   390  0001                     	;# 
   391  0002                     	;# 
   392  0003                     	;# 
   393  0004                     	;# 
   394  0005                     	;# 
   395  0006                     	;# 
   396  0007                     	;# 
   397  0008                     	;# 
   398  0009                     	;# 
   399  000A                     	;# 
   400  000B                     	;# 
   401  000C                     	;# 
   402  000D                     	;# 
   403  000E                     	;# 
   404  0010                     	;# 
   405  0011                     	;# 
   406  0012                     	;# 
   407  0015                     	;# 
   408  0016                     	;# 
   409  0016                     	;# 
   410  0017                     	;# 
   411  0018                     	;# 
   412  0019                     	;# 
   413  001A                     	;# 
   414  001B                     	;# 
   415  001C                     	;# 
   416  008C                     	;# 
   417  008D                     	;# 
   418  008E                     	;# 
   419  0090                     	;# 
   420  0091                     	;# 
   421  0092                     	;# 
   422  0095                     	;# 
   423  0096                     	;# 
   424  0097                     	;# 
   425  0099                     	;# 
   426  009A                     	;# 
   427  009B                     	;# 
   428  009B                     	;# 
   429  009C                     	;# 
   430  009D                     	;# 
   431  009E                     	;# 
   432  010C                     	;# 
   433  010D                     	;# 
   434  010E                     	;# 
   435  0116                     	;# 
   436  0117                     	;# 
   437  011D                     	;# 
   438  018C                     	;# 
   439  018D                     	;# 
   440  018E                     	;# 
   441  0191                     	;# 
   442  0191                     	;# 
   443  0192                     	;# 
   444  0193                     	;# 
   445  0193                     	;# 
   446  0194                     	;# 
   447  0195                     	;# 
   448  0196                     	;# 
   449  0197                     	;# 
   450  0199                     	;# 
   451  019A                     	;# 
   452  019B                     	;# 
   453  019B                     	;# 
   454  019B                     	;# 
   455  019B                     	;# 
   456  019C                     	;# 
   457  019C                     	;# 
   458  019D                     	;# 
   459  019E                     	;# 
   460  019F                     	;# 
   461  020D                     	;# 
   462  0210                     	;# 
   463  0211                     	;# 
   464  0211                     	;# 
   465  0212                     	;# 
   466  0212                     	;# 
   467  0213                     	;# 
   468  0213                     	;# 
   469  0214                     	;# 
   470  0214                     	;# 
   471  0215                     	;# 
   472  0215                     	;# 
   473  0215                     	;# 
   474  0216                     	;# 
   475  0216                     	;# 
   476  0217                     	;# 
   477  0217                     	;# 
   478  0291                     	;# 
   479  0291                     	;# 
   480  0292                     	;# 
   481  0293                     	;# 
   482  0298                     	;# 
   483  0298                     	;# 
   484  0299                     	;# 
   485  029A                     	;# 
   486  0394                     	;# 
   487  0395                     	;# 
   488  0396                     	;# 
   489  0FE4                     	;# 
   490  0FE5                     	;# 
   491  0FE6                     	;# 
   492  0FE7                     	;# 
   493  0FE8                     	;# 
   494  0FE9                     	;# 
   495  0FEA                     	;# 
   496  0FEB                     	;# 
   497  0FED                     	;# 
   498  0FEE                     	;# 
   499  0FEF                     	;# 
   500  0000                     	;# 
   501  0001                     	;# 
   502  0002                     	;# 
   503  0003                     	;# 
   504  0004                     	;# 
   505  0005                     	;# 
   506  0006                     	;# 
   507  0007                     	;# 
   508  0008                     	;# 
   509  0009                     	;# 
   510  000A                     	;# 
   511  000B                     	;# 
   512  000C                     	;# 
   513  000D                     	;# 
   514  000E                     	;# 
   515  0010                     	;# 
   516  0011                     	;# 
   517  0012                     	;# 
   518  0015                     	;# 
   519  0016                     	;# 
   520  0016                     	;# 
   521  0017                     	;# 
   522  0018                     	;# 
   523  0019                     	;# 
   524  001A                     	;# 
   525  001B                     	;# 
   526  001C                     	;# 
   527  008C                     	;# 
   528  008D                     	;# 
   529  008E                     	;# 
   530  0090                     	;# 
   531  0091                     	;# 
   532  0092                     	;# 
   533  0095                     	;# 
   534  0096                     	;# 
   535  0097                     	;# 
   536  0099                     	;# 
   537  009A                     	;# 
   538  009B                     	;# 
   539  009B                     	;# 
   540  009C                     	;# 
   541  009D                     	;# 
   542  009E                     	;# 
   543  010C                     	;# 
   544  010D                     	;# 
   545  010E                     	;# 
   546  0116                     	;# 
   547  0117                     	;# 
   548  011D                     	;# 
   549  018C                     	;# 
   550  018D                     	;# 
   551  018E                     	;# 
   552  0191                     	;# 
   553  0191                     	;# 
   554  0192                     	;# 
   555  0193                     	;# 
   556  0193                     	;# 
   557  0194                     	;# 
   558  0195                     	;# 
   559  0196                     	;# 
   560  0197                     	;# 
   561  0199                     	;# 
   562  019A                     	;# 
   563  019B                     	;# 
   564  019B                     	;# 
   565  019B                     	;# 
   566  019B                     	;# 
   567  019C                     	;# 
   568  019C                     	;# 
   569  019D                     	;# 
   570  019E                     	;# 
   571  019F                     	;# 
   572  020D                     	;# 
   573  0210                     	;# 
   574  0211                     	;# 
   575  0211                     	;# 
   576  0212                     	;# 
   577  0212                     	;# 
   578  0213                     	;# 
   579  0213                     	;# 
   580  0214                     	;# 
   581  0214                     	;# 
   582  0215                     	;# 
   583  0215                     	;# 
   584  0215                     	;# 
   585  0216                     	;# 
   586  0216                     	;# 
   587  0217                     	;# 
   588  0217                     	;# 
   589  0291                     	;# 
   590  0291                     	;# 
   591  0292                     	;# 
   592  0293                     	;# 
   593  0298                     	;# 
   594  0298                     	;# 
   595  0299                     	;# 
   596  029A                     	;# 
   597  0394                     	;# 
   598  0395                     	;# 
   599  0396                     	;# 
   600  0FE4                     	;# 
   601  0FE5                     	;# 
   602  0FE6                     	;# 
   603  0FE7                     	;# 
   604  0FE8                     	;# 
   605  0FE9                     	;# 
   606  0FEA                     	;# 
   607  0FEB                     	;# 
   608  0FED                     	;# 
   609  0FEE                     	;# 
   610  0FEF                     	;# 
   611  0000                     	;# 
   612  0001                     	;# 
   613  0002                     	;# 
   614  0003                     	;# 
   615  0004                     	;# 
   616  0005                     	;# 
   617  0006                     	;# 
   618  0007                     	;# 
   619  0008                     	;# 
   620  0009                     	;# 
   621  000A                     	;# 
   622  000B                     	;# 
   623  000C                     	;# 
   624  000D                     	;# 
   625  000E                     	;# 
   626  0010                     	;# 
   627  0011                     	;# 
   628  0012                     	;# 
   629  0015                     	;# 
   630  0016                     	;# 
   631  0016                     	;# 
   632  0017                     	;# 
   633  0018                     	;# 
   634  0019                     	;# 
   635  001A                     	;# 
   636  001B                     	;# 
   637  001C                     	;# 
   638  008C                     	;# 
   639  008D                     	;# 
   640  008E                     	;# 
   641  0090                     	;# 
   642  0091                     	;# 
   643  0092                     	;# 
   644  0095                     	;# 
   645  0096                     	;# 
   646  0097                     	;# 
   647  0099                     	;# 
   648  009A                     	;# 
   649  009B                     	;# 
   650  009B                     	;# 
   651  009C                     	;# 
   652  009D                     	;# 
   653  009E                     	;# 
   654  010C                     	;# 
   655  010D                     	;# 
   656  010E                     	;# 
   657  0116                     	;# 
   658  0117                     	;# 
   659  011D                     	;# 
   660  018C                     	;# 
   661  018D                     	;# 
   662  018E                     	;# 
   663  0191                     	;# 
   664  0191                     	;# 
   665  0192                     	;# 
   666  0193                     	;# 
   667  0193                     	;# 
   668  0194                     	;# 
   669  0195                     	;# 
   670  0196                     	;# 
   671  0197                     	;# 
   672  0199                     	;# 
   673  019A                     	;# 
   674  019B                     	;# 
   675  019B                     	;# 
   676  019B                     	;# 
   677  019B                     	;# 
   678  019C                     	;# 
   679  019C                     	;# 
   680  019D                     	;# 
   681  019E                     	;# 
   682  019F                     	;# 
   683  020D                     	;# 
   684  0210                     	;# 
   685  0211                     	;# 
   686  0211                     	;# 
   687  0212                     	;# 
   688  0212                     	;# 
   689  0213                     	;# 
   690  0213                     	;# 
   691  0214                     	;# 
   692  0214                     	;# 
   693  0215                     	;# 
   694  0215                     	;# 
   695  0215                     	;# 
   696  0216                     	;# 
   697  0216                     	;# 
   698  0217                     	;# 
   699  0217                     	;# 
   700  0291                     	;# 
   701  0291                     	;# 
   702  0292                     	;# 
   703  0293                     	;# 
   704  0298                     	;# 
   705  0298                     	;# 
   706  0299                     	;# 
   707  029A                     	;# 
   708  0394                     	;# 
   709  0395                     	;# 
   710  0396                     	;# 
   711  0FE4                     	;# 
   712  0FE5                     	;# 
   713  0FE6                     	;# 
   714  0FE7                     	;# 
   715  0FE8                     	;# 
   716  0FE9                     	;# 
   717  0FEA                     	;# 
   718  0FEB                     	;# 
   719  0FED                     	;# 
   720  0FEE                     	;# 
   721  0FEF                     	;# 
   722  0000                     	;# 
   723  0001                     	;# 
   724  0002                     	;# 
   725  0003                     	;# 
   726  0004                     	;# 
   727  0005                     	;# 
   728  0006                     	;# 
   729  0007                     	;# 
   730  0008                     	;# 
   731  0009                     	;# 
   732  000A                     	;# 
   733  000B                     	;# 
   734  000C                     	;# 
   735  000D                     	;# 
   736  000E                     	;# 
   737  0010                     	;# 
   738  0011                     	;# 
   739  0012                     	;# 
   740  0015                     	;# 
   741  0016                     	;# 
   742  0016                     	;# 
   743  0017                     	;# 
   744  0018                     	;# 
   745  0019                     	;# 
   746  001A                     	;# 
   747  001B                     	;# 
   748  001C                     	;# 
   749  008C                     	;# 
   750  008D                     	;# 
   751  008E                     	;# 
   752  0090                     	;# 
   753  0091                     	;# 
   754  0092                     	;# 
   755  0095                     	;# 
   756  0096                     	;# 
   757  0097                     	;# 
   758  0099                     	;# 
   759  009A                     	;# 
   760  009B                     	;# 
   761  009B                     	;# 
   762  009C                     	;# 
   763  009D                     	;# 
   764  009E                     	;# 
   765  010C                     	;# 
   766  010D                     	;# 
   767  010E                     	;# 
   768  0116                     	;# 
   769  0117                     	;# 
   770  011D                     	;# 
   771  018C                     	;# 
   772  018D                     	;# 
   773  018E                     	;# 
   774  0191                     	;# 
   775  0191                     	;# 
   776  0192                     	;# 
   777  0193                     	;# 
   778  0193                     	;# 
   779  0194                     	;# 
   780  0195                     	;# 
   781  0196                     	;# 
   782  0197                     	;# 
   783  0199                     	;# 
   784  019A                     	;# 
   785  019B                     	;# 
   786  019B                     	;# 
   787  019B                     	;# 
   788  019B                     	;# 
   789  019C                     	;# 
   790  019C                     	;# 
   791  019D                     	;# 
   792  019E                     	;# 
   793  019F                     	;# 
   794  020D                     	;# 
   795  0210                     	;# 
   796  0211                     	;# 
   797  0211                     	;# 
   798  0212                     	;# 
   799  0212                     	;# 
   800  0213                     	;# 
   801  0213                     	;# 
   802  0214                     	;# 
   803  0214                     	;# 
   804  0215                     	;# 
   805  0215                     	;# 
   806  0215                     	;# 
   807  0216                     	;# 
   808  0216                     	;# 
   809  0217                     	;# 
   810  0217                     	;# 
   811  0291                     	;# 
   812  0291                     	;# 
   813  0292                     	;# 
   814  0293                     	;# 
   815  0298                     	;# 
   816  0298                     	;# 
   817  0299                     	;# 
   818  029A                     	;# 
   819  0394                     	;# 
   820  0395                     	;# 
   821  0396                     	;# 
   822  0FE4                     	;# 
   823  0FE5                     	;# 
   824  0FE6                     	;# 
   825  0FE7                     	;# 
   826  0FE8                     	;# 
   827  0FE9                     	;# 
   828  0FEA                     	;# 
   829  0FEB                     	;# 
   830  0FED                     	;# 
   831  0FEE                     	;# 
   832  0FEF                     	;# 
   833  0000                     	;# 
   834  0001                     	;# 
   835  0002                     	;# 
   836  0003                     	;# 
   837  0004                     	;# 
   838  0005                     	;# 
   839  0006                     	;# 
   840  0007                     	;# 
   841  0008                     	;# 
   842  0009                     	;# 
   843  000A                     	;# 
   844  000B                     	;# 
   845  000C                     	;# 
   846  000D                     	;# 
   847  000E                     	;# 
   848  0010                     	;# 
   849  0011                     	;# 
   850  0012                     	;# 
   851  0015                     	;# 
   852  0016                     	;# 
   853  0016                     	;# 
   854  0017                     	;# 
   855  0018                     	;# 
   856  0019                     	;# 
   857  001A                     	;# 
   858  001B                     	;# 
   859  001C                     	;# 
   860  008C                     	;# 
   861  008D                     	;# 
   862  008E                     	;# 
   863  0090                     	;# 
   864  0091                     	;# 
   865  0092                     	;# 
   866  0095                     	;# 
   867  0096                     	;# 
   868  0097                     	;# 
   869  0099                     	;# 
   870  009A                     	;# 
   871  009B                     	;# 
   872  009B                     	;# 
   873  009C                     	;# 
   874  009D                     	;# 
   875  009E                     	;# 
   876  010C                     	;# 
   877  010D                     	;# 
   878  010E                     	;# 
   879  0116                     	;# 
   880  0117                     	;# 
   881  011D                     	;# 
   882  018C                     	;# 
   883  018D                     	;# 
   884  018E                     	;# 
   885  0191                     	;# 
   886  0191                     	;# 
   887  0192                     	;# 
   888  0193                     	;# 
   889  0193                     	;# 
   890  0194                     	;# 
   891  0195                     	;# 
   892  0196                     	;# 
   893  0197                     	;# 
   894  0199                     	;# 
   895  019A                     	;# 
   896  019B                     	;# 
   897  019B                     	;# 
   898  019B                     	;# 
   899  019B                     	;# 
   900  019C                     	;# 
   901  019C                     	;# 
   902  019D                     	;# 
   903  019E                     	;# 
   904  019F                     	;# 
   905  020D                     	;# 
   906  0210                     	;# 
   907  0211                     	;# 
   908  0211                     	;# 
   909  0212                     	;# 
   910  0212                     	;# 
   911  0213                     	;# 
   912  0213                     	;# 
   913  0214                     	;# 
   914  0214                     	;# 
   915  0215                     	;# 
   916  0215                     	;# 
   917  0215                     	;# 
   918  0216                     	;# 
   919  0216                     	;# 
   920  0217                     	;# 
   921  0217                     	;# 
   922  0291                     	;# 
   923  0291                     	;# 
   924  0292                     	;# 
   925  0293                     	;# 
   926  0298                     	;# 
   927  0298                     	;# 
   928  0299                     	;# 
   929  029A                     	;# 
   930  0394                     	;# 
   931  0395                     	;# 
   932  0396                     	;# 
   933  0FE4                     	;# 
   934  0FE5                     	;# 
   935  0FE6                     	;# 
   936  0FE7                     	;# 
   937  0FE8                     	;# 
   938  0FE9                     	;# 
   939  0FEA                     	;# 
   940  0FEB                     	;# 
   941  0FED                     	;# 
   942  0FEE                     	;# 
   943  0FEF                     	;# 
   944  0000                     	;# 
   945  0001                     	;# 
   946  0002                     	;# 
   947  0003                     	;# 
   948  0004                     	;# 
   949  0005                     	;# 
   950  0006                     	;# 
   951  0007                     	;# 
   952  0008                     	;# 
   953  0009                     	;# 
   954  000A                     	;# 
   955  000B                     	;# 
   956  000C                     	;# 
   957  000D                     	;# 
   958  000E                     	;# 
   959  0010                     	;# 
   960  0011                     	;# 
   961  0012                     	;# 
   962  0015                     	;# 
   963  0016                     	;# 
   964  0016                     	;# 
   965  0017                     	;# 
   966  0018                     	;# 
   967  0019                     	;# 
   968  001A                     	;# 
   969  001B                     	;# 
   970  001C                     	;# 
   971  008C                     	;# 
   972  008D                     	;# 
   973  008E                     	;# 
   974  0090                     	;# 
   975  0091                     	;# 
   976  0092                     	;# 
   977  0095                     	;# 
   978  0096                     	;# 
   979  0097                     	;# 
   980  0099                     	;# 
   981  009A                     	;# 
   982  009B                     	;# 
   983  009B                     	;# 
   984  009C                     	;# 
   985  009D                     	;# 
   986  009E                     	;# 
   987  010C                     	;# 
   988  010D                     	;# 
   989  010E                     	;# 
   990  0116                     	;# 
   991  0117                     	;# 
   992  011D                     	;# 
   993  018C                     	;# 
   994  018D                     	;# 
   995  018E                     	;# 
   996  0191                     	;# 
   997  0191                     	;# 
   998  0192                     	;# 
   999  0193                     	;# 
  1000  0193                     	;# 
  1001  0194                     	;# 
  1002  0195                     	;# 
  1003  0196                     	;# 
  1004  0197                     	;# 
  1005  0199                     	;# 
  1006  019A                     	;# 
  1007  019B                     	;# 
  1008  019B                     	;# 
  1009  019B                     	;# 
  1010  019B                     	;# 
  1011  019C                     	;# 
  1012  019C                     	;# 
  1013  019D                     	;# 
  1014  019E                     	;# 
  1015  019F                     	;# 
  1016  020D                     	;# 
  1017  0210                     	;# 
  1018  0211                     	;# 
  1019  0211                     	;# 
  1020  0212                     	;# 
  1021  0212                     	;# 
  1022  0213                     	;# 
  1023  0213                     	;# 
  1024  0214                     	;# 
  1025  0214                     	;# 
  1026  0215                     	;# 
  1027  0215                     	;# 
  1028  0215                     	;# 
  1029  0216                     	;# 
  1030  0216                     	;# 
  1031  0217                     	;# 
  1032  0217                     	;# 
  1033  0291                     	;# 
  1034  0291                     	;# 
  1035  0292                     	;# 
  1036  0293                     	;# 
  1037  0298                     	;# 
  1038  0298                     	;# 
  1039  0299                     	;# 
  1040  029A                     	;# 
  1041  0394                     	;# 
  1042  0395                     	;# 
  1043  0396                     	;# 
  1044  0FE4                     	;# 
  1045  0FE5                     	;# 
  1046  0FE6                     	;# 
  1047  0FE7                     	;# 
  1048  0FE8                     	;# 
  1049  0FE9                     	;# 
  1050  0FEA                     	;# 
  1051  0FEB                     	;# 
  1052  0FED                     	;# 
  1053  0FEE                     	;# 
  1054  0FEF                     	;# 
  1055  0000                     	;# 
  1056  0001                     	;# 
  1057  0002                     	;# 
  1058  0003                     	;# 
  1059  0004                     	;# 
  1060  0005                     	;# 
  1061  0006                     	;# 
  1062  0007                     	;# 
  1063  0008                     	;# 
  1064  0009                     	;# 
  1065  000A                     	;# 
  1066  000B                     	;# 
  1067  000C                     	;# 
  1068  000D                     	;# 
  1069  000E                     	;# 
  1070  0010                     	;# 
  1071  0011                     	;# 
  1072  0012                     	;# 
  1073  0015                     	;# 
  1074  0016                     	;# 
  1075  0016                     	;# 
  1076  0017                     	;# 
  1077  0018                     	;# 
  1078  0019                     	;# 
  1079  001A                     	;# 
  1080  001B                     	;# 
  1081  001C                     	;# 
  1082  008C                     	;# 
  1083  008D                     	;# 
  1084  008E                     	;# 
  1085  0090                     	;# 
  1086  0091                     	;# 
  1087  0092                     	;# 
  1088  0095                     	;# 
  1089  0096                     	;# 
  1090  0097                     	;# 
  1091  0099                     	;# 
  1092  009A                     	;# 
  1093  009B                     	;# 
  1094  009B                     	;# 
  1095  009C                     	;# 
  1096  009D                     	;# 
  1097  009E                     	;# 
  1098  010C                     	;# 
  1099  010D                     	;# 
  1100  010E                     	;# 
  1101  0116                     	;# 
  1102  0117                     	;# 
  1103  011D                     	;# 
  1104  018C                     	;# 
  1105  018D                     	;# 
  1106  018E                     	;# 
  1107  0191                     	;# 
  1108  0191                     	;# 
  1109  0192                     	;# 
  1110  0193                     	;# 
  1111  0193                     	;# 
  1112  0194                     	;# 
  1113  0195                     	;# 
  1114  0196                     	;# 
  1115  0197                     	;# 
  1116  0199                     	;# 
  1117  019A                     	;# 
  1118  019B                     	;# 
  1119  019B                     	;# 
  1120  019B                     	;# 
  1121  019B                     	;# 
  1122  019C                     	;# 
  1123  019C                     	;# 
  1124  019D                     	;# 
  1125  019E                     	;# 
  1126  019F                     	;# 
  1127  020D                     	;# 
  1128  0210                     	;# 
  1129  0211                     	;# 
  1130  0211                     	;# 
  1131  0212                     	;# 
  1132  0212                     	;# 
  1133  0213                     	;# 
  1134  0213                     	;# 
  1135  0214                     	;# 
  1136  0214                     	;# 
  1137  0215                     	;# 
  1138  0215                     	;# 
  1139  0215                     	;# 
  1140  0216                     	;# 
  1141  0216                     	;# 
  1142  0217                     	;# 
  1143  0217                     	;# 
  1144  0291                     	;# 
  1145  0291                     	;# 
  1146  0292                     	;# 
  1147  0293                     	;# 
  1148  0298                     	;# 
  1149  0298                     	;# 
  1150  0299                     	;# 
  1151  029A                     	;# 
  1152  0394                     	;# 
  1153  0395                     	;# 
  1154  0396                     	;# 
  1155  0FE4                     	;# 
  1156  0FE5                     	;# 
  1157  0FE6                     	;# 
  1158  0FE7                     	;# 
  1159  0FE8                     	;# 
  1160  0FE9                     	;# 
  1161  0FEA                     	;# 
  1162  0FEB                     	;# 
  1163  0FED                     	;# 
  1164  0FEE                     	;# 
  1165  0FEF                     	;# 
  1166  0000                     	;# 
  1167  0001                     	;# 
  1168  0002                     	;# 
  1169  0003                     	;# 
  1170  0004                     	;# 
  1171  0005                     	;# 
  1172  0006                     	;# 
  1173  0007                     	;# 
  1174  0008                     	;# 
  1175  0009                     	;# 
  1176  000A                     	;# 
  1177  000B                     	;# 
  1178  000C                     	;# 
  1179  000D                     	;# 
  1180  000E                     	;# 
  1181  0010                     	;# 
  1182  0011                     	;# 
  1183  0012                     	;# 
  1184  0015                     	;# 
  1185  0016                     	;# 
  1186  0016                     	;# 
  1187  0017                     	;# 
  1188  0018                     	;# 
  1189  0019                     	;# 
  1190  001A                     	;# 
  1191  001B                     	;# 
  1192  001C                     	;# 
  1193  008C                     	;# 
  1194  008D                     	;# 
  1195  008E                     	;# 
  1196  0090                     	;# 
  1197  0091                     	;# 
  1198  0092                     	;# 
  1199  0095                     	;# 
  1200  0096                     	;# 
  1201  0097                     	;# 
  1202  0099                     	;# 
  1203  009A                     	;# 
  1204  009B                     	;# 
  1205  009B                     	;# 
  1206  009C                     	;# 
  1207  009D                     	;# 
  1208  009E                     	;# 
  1209  010C                     	;# 
  1210  010D                     	;# 
  1211  010E                     	;# 
  1212  0116                     	;# 
  1213  0117                     	;# 
  1214  011D                     	;# 
  1215  018C                     	;# 
  1216  018D                     	;# 
  1217  018E                     	;# 
  1218  0191                     	;# 
  1219  0191                     	;# 
  1220  0192                     	;# 
  1221  0193                     	;# 
  1222  0193                     	;# 
  1223  0194                     	;# 
  1224  0195                     	;# 
  1225  0196                     	;# 
  1226  0197                     	;# 
  1227  0199                     	;# 
  1228  019A                     	;# 
  1229  019B                     	;# 
  1230  019B                     	;# 
  1231  019B                     	;# 
  1232  019B                     	;# 
  1233  019C                     	;# 
  1234  019C                     	;# 
  1235  019D                     	;# 
  1236  019E                     	;# 
  1237  019F                     	;# 
  1238  020D                     	;# 
  1239  0210                     	;# 
  1240  0211                     	;# 
  1241  0211                     	;# 
  1242  0212                     	;# 
  1243  0212                     	;# 
  1244  0213                     	;# 
  1245  0213                     	;# 
  1246  0214                     	;# 
  1247  0214                     	;# 
  1248  0215                     	;# 
  1249  0215                     	;# 
  1250  0215                     	;# 
  1251  0216                     	;# 
  1252  0216                     	;# 
  1253  0217                     	;# 
  1254  0217                     	;# 
  1255  0291                     	;# 
  1256  0291                     	;# 
  1257  0292                     	;# 
  1258  0293                     	;# 
  1259  0298                     	;# 
  1260  0298                     	;# 
  1261  0299                     	;# 
  1262  029A                     	;# 
  1263  0394                     	;# 
  1264  0395                     	;# 
  1265  0396                     	;# 
  1266  0FE4                     	;# 
  1267  0FE5                     	;# 
  1268  0FE6                     	;# 
  1269  0FE7                     	;# 
  1270  0FE8                     	;# 
  1271  0FE9                     	;# 
  1272  0FEA                     	;# 
  1273  0FEB                     	;# 
  1274  0FED                     	;# 
  1275  0FEE                     	;# 
  1276  0FEF                     	;# 
  1277  0000                     	;# 
  1278  0001                     	;# 
  1279  0002                     	;# 
  1280  0003                     	;# 
  1281  0004                     	;# 
  1282  0005                     	;# 
  1283  0006                     	;# 
  1284  0007                     	;# 
  1285  0008                     	;# 
  1286  0009                     	;# 
  1287  000A                     	;# 
  1288  000B                     	;# 
  1289  000C                     	;# 
  1290  000D                     	;# 
  1291  000E                     	;# 
  1292  0010                     	;# 
  1293  0011                     	;# 
  1294  0012                     	;# 
  1295  0015                     	;# 
  1296  0016                     	;# 
  1297  0016                     	;# 
  1298  0017                     	;# 
  1299  0018                     	;# 
  1300  0019                     	;# 
  1301  001A                     	;# 
  1302  001B                     	;# 
  1303  001C                     	;# 
  1304  008C                     	;# 
  1305  008D                     	;# 
  1306  008E                     	;# 
  1307  0090                     	;# 
  1308  0091                     	;# 
  1309  0092                     	;# 
  1310  0095                     	;# 
  1311  0096                     	;# 
  1312  0097                     	;# 
  1313  0099                     	;# 
  1314  009A                     	;# 
  1315  009B                     	;# 
  1316  009B                     	;# 
  1317  009C                     	;# 
  1318  009D                     	;# 
  1319  009E                     	;# 
  1320  010C                     	;# 
  1321  010D                     	;# 
  1322  010E                     	;# 
  1323  0116                     	;# 
  1324  0117                     	;# 
  1325  011D                     	;# 
  1326  018C                     	;# 
  1327  018D                     	;# 
  1328  018E                     	;# 
  1329  0191                     	;# 
  1330  0191                     	;# 
  1331  0192                     	;# 
  1332  0193                     	;# 
  1333  0193                     	;# 
  1334  0194                     	;# 
  1335  0195                     	;# 
  1336  0196                     	;# 
  1337  0197                     	;# 
  1338  0199                     	;# 
  1339  019A                     	;# 
  1340  019B                     	;# 
  1341  019B                     	;# 
  1342  019B                     	;# 
  1343  019B                     	;# 
  1344  019C                     	;# 
  1345  019C                     	;# 
  1346  019D                     	;# 
  1347  019E                     	;# 
  1348  019F                     	;# 
  1349  020D                     	;# 
  1350  0210                     	;# 
  1351  0211                     	;# 
  1352  0211                     	;# 
  1353  0212                     	;# 
  1354  0212                     	;# 
  1355  0213                     	;# 
  1356  0213                     	;# 
  1357  0214                     	;# 
  1358  0214                     	;# 
  1359  0215                     	;# 
  1360  0215                     	;# 
  1361  0215                     	;# 
  1362  0216                     	;# 
  1363  0216                     	;# 
  1364  0217                     	;# 
  1365  0217                     	;# 
  1366  0291                     	;# 
  1367  0291                     	;# 
  1368  0292                     	;# 
  1369  0293                     	;# 
  1370  0298                     	;# 
  1371  0298                     	;# 
  1372  0299                     	;# 
  1373  029A                     	;# 
  1374  0394                     	;# 
  1375  0395                     	;# 
  1376  0396                     	;# 
  1377  0FE4                     	;# 
  1378  0FE5                     	;# 
  1379  0FE6                     	;# 
  1380  0FE7                     	;# 
  1381  0FE8                     	;# 
  1382  0FE9                     	;# 
  1383  0FEA                     	;# 
  1384  0FEB                     	;# 
  1385  0FED                     	;# 
  1386  0FEE                     	;# 
  1387  0FEF                     	;# 
  1388  0000                     	;# 
  1389  0001                     	;# 
  1390  0002                     	;# 
  1391  0003                     	;# 
  1392  0004                     	;# 
  1393  0005                     	;# 
  1394  0006                     	;# 
  1395  0007                     	;# 
  1396  0008                     	;# 
  1397  0009                     	;# 
  1398  000A                     	;# 
  1399  000B                     	;# 
  1400  000C                     	;# 
  1401  000D                     	;# 
  1402  000E                     	;# 
  1403  0010                     	;# 
  1404  0011                     	;# 
  1405  0012                     	;# 
  1406  0015                     	;# 
  1407  0016                     	;# 
  1408  0016                     	;# 
  1409  0017                     	;# 
  1410  0018                     	;# 
  1411  0019                     	;# 
  1412  001A                     	;# 
  1413  001B                     	;# 
  1414  001C                     	;# 
  1415  008C                     	;# 
  1416  008D                     	;# 
  1417  008E                     	;# 
  1418  0090                     	;# 
  1419  0091                     	;# 
  1420  0092                     	;# 
  1421  0095                     	;# 
  1422  0096                     	;# 
  1423  0097                     	;# 
  1424  0099                     	;# 
  1425  009A                     	;# 
  1426  009B                     	;# 
  1427  009B                     	;# 
  1428  009C                     	;# 
  1429  009D                     	;# 
  1430  009E                     	;# 
  1431  010C                     	;# 
  1432  010D                     	;# 
  1433  010E                     	;# 
  1434  0116                     	;# 
  1435  0117                     	;# 
  1436  011D                     	;# 
  1437  018C                     	;# 
  1438  018D                     	;# 
  1439  018E                     	;# 
  1440  0191                     	;# 
  1441  0191                     	;# 
  1442  0192                     	;# 
  1443  0193                     	;# 
  1444  0193                     	;# 
  1445  0194                     	;# 
  1446  0195                     	;# 
  1447  0196                     	;# 
  1448  0197                     	;# 
  1449  0199                     	;# 
  1450  019A                     	;# 
  1451  019B                     	;# 
  1452  019B                     	;# 
  1453  019B                     	;# 
  1454  019B                     	;# 
  1455  019C                     	;# 
  1456  019C                     	;# 
  1457  019D                     	;# 
  1458  019E                     	;# 
  1459  019F                     	;# 
  1460  020D                     	;# 
  1461  0210                     	;# 
  1462  0211                     	;# 
  1463  0211                     	;# 
  1464  0212                     	;# 
  1465  0212                     	;# 
  1466  0213                     	;# 
  1467  0213                     	;# 
  1468  0214                     	;# 
  1469  0214                     	;# 
  1470  0215                     	;# 
  1471  0215                     	;# 
  1472  0215                     	;# 
  1473  0216                     	;# 
  1474  0216                     	;# 
  1475  0217                     	;# 
  1476  0217                     	;# 
  1477  0291                     	;# 
  1478  0291                     	;# 
  1479  0292                     	;# 
  1480  0293                     	;# 
  1481  0298                     	;# 
  1482  0298                     	;# 
  1483  0299                     	;# 
  1484  029A                     	;# 
  1485  0394                     	;# 
  1486  0395                     	;# 
  1487  0396                     	;# 
  1488  0FE4                     	;# 
  1489  0FE5                     	;# 
  1490  0FE6                     	;# 
  1491  0FE7                     	;# 
  1492  0FE8                     	;# 
  1493  0FE9                     	;# 
  1494  0FEA                     	;# 
  1495  0FEB                     	;# 
  1496  0FED                     	;# 
  1497  0FEE                     	;# 
  1498  0FEF                     	;# 
  1499  0000                     	;# 
  1500  0001                     	;# 
  1501  0002                     	;# 
  1502  0003                     	;# 
  1503  0004                     	;# 
  1504  0005                     	;# 
  1505  0006                     	;# 
  1506  0007                     	;# 
  1507  0008                     	;# 
  1508  0009                     	;# 
  1509  000A                     	;# 
  1510  000B                     	;# 
  1511  000C                     	;# 
  1512  000D                     	;# 
  1513  000E                     	;# 
  1514  0010                     	;# 
  1515  0011                     	;# 
  1516  0012                     	;# 
  1517  0015                     	;# 
  1518  0016                     	;# 
  1519  0016                     	;# 
  1520  0017                     	;# 
  1521  0018                     	;# 
  1522  0019                     	;# 
  1523  001A                     	;# 
  1524  001B                     	;# 
  1525  001C                     	;# 
  1526  008C                     	;# 
  1527  008D                     	;# 
  1528  008E                     	;# 
  1529  0090                     	;# 
  1530  0091                     	;# 
  1531  0092                     	;# 
  1532  0095                     	;# 
  1533  0096                     	;# 
  1534  0097                     	;# 
  1535  0099                     	;# 
  1536  009A                     	;# 
  1537  009B                     	;# 
  1538  009B                     	;# 
  1539  009C                     	;# 
  1540  009D                     	;# 
  1541  009E                     	;# 
  1542  010C                     	;# 
  1543  010D                     	;# 
  1544  010E                     	;# 
  1545  0116                     	;# 
  1546  0117                     	;# 
  1547  011D                     	;# 
  1548  018C                     	;# 
  1549  018D                     	;# 
  1550  018E                     	;# 
  1551  0191                     	;# 
  1552  0191                     	;# 
  1553  0192                     	;# 
  1554  0193                     	;# 
  1555  0193                     	;# 
  1556  0194                     	;# 
  1557  0195                     	;# 
  1558  0196                     	;# 
  1559  0197                     	;# 
  1560  0199                     	;# 
  1561  019A                     	;# 
  1562  019B                     	;# 
  1563  019B                     	;# 
  1564  019B                     	;# 
  1565  019B                     	;# 
  1566  019C                     	;# 
  1567  019C                     	;# 
  1568  019D                     	;# 
  1569  019E                     	;# 
  1570  019F                     	;# 
  1571  020D                     	;# 
  1572  0210                     	;# 
  1573  0211                     	;# 
  1574  0211                     	;# 
  1575  0212                     	;# 
  1576  0212                     	;# 
  1577  0213                     	;# 
  1578  0213                     	;# 
  1579  0214                     	;# 
  1580  0214                     	;# 
  1581  0215                     	;# 
  1582  0215                     	;# 
  1583  0215                     	;# 
  1584  0216                     	;# 
  1585  0216                     	;# 
  1586  0217                     	;# 
  1587  0217                     	;# 
  1588  0291                     	;# 
  1589  0291                     	;# 
  1590  0292                     	;# 
  1591  0293                     	;# 
  1592  0298                     	;# 
  1593  0298                     	;# 
  1594  0299                     	;# 
  1595  029A                     	;# 
  1596  0394                     	;# 
  1597  0395                     	;# 
  1598  0396                     	;# 
  1599  0FE4                     	;# 
  1600  0FE5                     	;# 
  1601  0FE6                     	;# 
  1602  0FE7                     	;# 
  1603  0FE8                     	;# 
  1604  0FE9                     	;# 
  1605  0FEA                     	;# 
  1606  0FEB                     	;# 
  1607  0FED                     	;# 
  1608  0FEE                     	;# 
  1609  0FEF                     	;# 
  1610  0000                     	;# 
  1611  0001                     	;# 
  1612  0002                     	;# 
  1613  0003                     	;# 
  1614  0004                     	;# 
  1615  0005                     	;# 
  1616  0006                     	;# 
  1617  0007                     	;# 
  1618  0008                     	;# 
  1619  0009                     	;# 
  1620  000A                     	;# 
  1621  000B                     	;# 
  1622  000C                     	;# 
  1623  000D                     	;# 
  1624  000E                     	;# 
  1625  0010                     	;# 
  1626  0011                     	;# 
  1627  0012                     	;# 
  1628  0015                     	;# 
  1629  0016                     	;# 
  1630  0016                     	;# 
  1631  0017                     	;# 
  1632  0018                     	;# 
  1633  0019                     	;# 
  1634  001A                     	;# 
  1635  001B                     	;# 
  1636  001C                     	;# 
  1637  008C                     	;# 
  1638  008D                     	;# 
  1639  008E                     	;# 
  1640  0090                     	;# 
  1641  0091                     	;# 
  1642  0092                     	;# 
  1643  0095                     	;# 
  1644  0096                     	;# 
  1645  0097                     	;# 
  1646  0099                     	;# 
  1647  009A                     	;# 
  1648  009B                     	;# 
  1649  009B                     	;# 
  1650  009C                     	;# 
  1651  009D                     	;# 
  1652  009E                     	;# 
  1653  010C                     	;# 
  1654  010D                     	;# 
  1655  010E                     	;# 
  1656  0116                     	;# 
  1657  0117                     	;# 
  1658  011D                     	;# 
  1659  018C                     	;# 
  1660  018D                     	;# 
  1661  018E                     	;# 
  1662  0191                     	;# 
  1663  0191                     	;# 
  1664  0192                     	;# 
  1665  0193                     	;# 
  1666  0193                     	;# 
  1667  0194                     	;# 
  1668  0195                     	;# 
  1669  0196                     	;# 
  1670  0197                     	;# 
  1671  0199                     	;# 
  1672  019A                     	;# 
  1673  019B                     	;# 
  1674  019B                     	;# 
  1675  019B                     	;# 
  1676  019B                     	;# 
  1677  019C                     	;# 
  1678  019C                     	;# 
  1679  019D                     	;# 
  1680  019E                     	;# 
  1681  019F                     	;# 
  1682  020D                     	;# 
  1683  0210                     	;# 
  1684  0211                     	;# 
  1685  0211                     	;# 
  1686  0212                     	;# 
  1687  0212                     	;# 
  1688  0213                     	;# 
  1689  0213                     	;# 
  1690  0214                     	;# 
  1691  0214                     	;# 
  1692  0215                     	;# 
  1693  0215                     	;# 
  1694  0215                     	;# 
  1695  0216                     	;# 
  1696  0216                     	;# 
  1697  0217                     	;# 
  1698  0217                     	;# 
  1699  0291                     	;# 
  1700  0291                     	;# 
  1701  0292                     	;# 
  1702  0293                     	;# 
  1703  0298                     	;# 
  1704  0298                     	;# 
  1705  0299                     	;# 
  1706  029A                     	;# 
  1707  0394                     	;# 
  1708  0395                     	;# 
  1709  0396                     	;# 
  1710  0FE4                     	;# 
  1711  0FE5                     	;# 
  1712  0FE6                     	;# 
  1713  0FE7                     	;# 
  1714  0FE8                     	;# 
  1715  0FE9                     	;# 
  1716  0FEA                     	;# 
  1717  0FEB                     	;# 
  1718  0FED                     	;# 
  1719  0FEE                     	;# 
  1720  0FEF                     	;# 
  1721  0000                     	;# 
  1722  0001                     	;# 
  1723  0002                     	;# 
  1724  0003                     	;# 
  1725  0004                     	;# 
  1726  0005                     	;# 
  1727  0006                     	;# 
  1728  0007                     	;# 
  1729  0008                     	;# 
  1730  0009                     	;# 
  1731  000A                     	;# 
  1732  000B                     	;# 
  1733  000C                     	;# 
  1734  000D                     	;# 
  1735  000E                     	;# 
  1736  0010                     	;# 
  1737  0011                     	;# 
  1738  0012                     	;# 
  1739  0015                     	;# 
  1740  0016                     	;# 
  1741  0016                     	;# 
  1742  0017                     	;# 
  1743  0018                     	;# 
  1744  0019                     	;# 
  1745  001A                     	;# 
  1746  001B                     	;# 
  1747  001C                     	;# 
  1748  008C                     	;# 
  1749  008D                     	;# 
  1750  008E                     	;# 
  1751  0090                     	;# 
  1752  0091                     	;# 
  1753  0092                     	;# 
  1754  0095                     	;# 
  1755  0096                     	;# 
  1756  0097                     	;# 
  1757  0099                     	;# 
  1758  009A                     	;# 
  1759  009B                     	;# 
  1760  009B                     	;# 
  1761  009C                     	;# 
  1762  009D                     	;# 
  1763  009E                     	;# 
  1764  010C                     	;# 
  1765  010D                     	;# 
  1766  010E                     	;# 
  1767  0116                     	;# 
  1768  0117                     	;# 
  1769  011D                     	;# 
  1770  018C                     	;# 
  1771  018D                     	;# 
  1772  018E                     	;# 
  1773  0191                     	;# 
  1774  0191                     	;# 
  1775  0192                     	;# 
  1776  0193                     	;# 
  1777  0193                     	;# 
  1778  0194                     	;# 
  1779  0195                     	;# 
  1780  0196                     	;# 
  1781  0197                     	;# 
  1782  0199                     	;# 
  1783  019A                     	;# 
  1784  019B                     	;# 
  1785  019B                     	;# 
  1786  019B                     	;# 
  1787  019B                     	;# 
  1788  019C                     	;# 
  1789  019C                     	;# 
  1790  019D                     	;# 
  1791  019E                     	;# 
  1792  019F                     	;# 
  1793  020D                     	;# 
  1794  0210                     	;# 
  1795  0211                     	;# 
  1796  0211                     	;# 
  1797  0212                     	;# 
  1798  0212                     	;# 
  1799  0213                     	;# 
  1800  0213                     	;# 
  1801  0214                     	;# 
  1802  0214                     	;# 
  1803  0215                     	;# 
  1804  0215                     	;# 
  1805  0215                     	;# 
  1806  0216                     	;# 
  1807  0216                     	;# 
  1808  0217                     	;# 
  1809  0217                     	;# 
  1810  0291                     	;# 
  1811  0291                     	;# 
  1812  0292                     	;# 
  1813  0293                     	;# 
  1814  0298                     	;# 
  1815  0298                     	;# 
  1816  0299                     	;# 
  1817  029A                     	;# 
  1818  0394                     	;# 
  1819  0395                     	;# 
  1820  0396                     	;# 
  1821  0FE4                     	;# 
  1822  0FE5                     	;# 
  1823  0FE6                     	;# 
  1824  0FE7                     	;# 
  1825  0FE8                     	;# 
  1826  0FE9                     	;# 
  1827  0FEA                     	;# 
  1828  0FEB                     	;# 
  1829  0FED                     	;# 
  1830  0FEE                     	;# 
  1831  0FEF                     	;# 
  1832  0000                     	;# 
  1833  0001                     	;# 
  1834  0002                     	;# 
  1835  0003                     	;# 
  1836  0004                     	;# 
  1837  0005                     	;# 
  1838  0006                     	;# 
  1839  0007                     	;# 
  1840  0008                     	;# 
  1841  0009                     	;# 
  1842  000A                     	;# 
  1843  000B                     	;# 
  1844  000C                     	;# 
  1845  000D                     	;# 
  1846  000E                     	;# 
  1847  0010                     	;# 
  1848  0011                     	;# 
  1849  0012                     	;# 
  1850  0015                     	;# 
  1851  0016                     	;# 
  1852  0016                     	;# 
  1853  0017                     	;# 
  1854  0018                     	;# 
  1855  0019                     	;# 
  1856  001A                     	;# 
  1857  001B                     	;# 
  1858  001C                     	;# 
  1859  008C                     	;# 
  1860  008D                     	;# 
  1861  008E                     	;# 
  1862  0090                     	;# 
  1863  0091                     	;# 
  1864  0092                     	;# 
  1865  0095                     	;# 
  1866  0096                     	;# 
  1867  0097                     	;# 
  1868  0099                     	;# 
  1869  009A                     	;# 
  1870  009B                     	;# 
  1871  009B                     	;# 
  1872  009C                     	;# 
  1873  009D                     	;# 
  1874  009E                     	;# 
  1875  010C                     	;# 
  1876  010D                     	;# 
  1877  010E                     	;# 
  1878  0116                     	;# 
  1879  0117                     	;# 
  1880  011D                     	;# 
  1881  018C                     	;# 
  1882  018D                     	;# 
  1883  018E                     	;# 
  1884  0191                     	;# 
  1885  0191                     	;# 
  1886  0192                     	;# 
  1887  0193                     	;# 
  1888  0193                     	;# 
  1889  0194                     	;# 
  1890  0195                     	;# 
  1891  0196                     	;# 
  1892  0197                     	;# 
  1893  0199                     	;# 
  1894  019A                     	;# 
  1895  019B                     	;# 
  1896  019B                     	;# 
  1897  019B                     	;# 
  1898  019B                     	;# 
  1899  019C                     	;# 
  1900  019C                     	;# 
  1901  019D                     	;# 
  1902  019E                     	;# 
  1903  019F                     	;# 
  1904  020D                     	;# 
  1905  0210                     	;# 
  1906  0211                     	;# 
  1907  0211                     	;# 
  1908  0212                     	;# 
  1909  0212                     	;# 
  1910  0213                     	;# 
  1911  0213                     	;# 
  1912  0214                     	;# 
  1913  0214                     	;# 
  1914  0215                     	;# 
  1915  0215                     	;# 
  1916  0215                     	;# 
  1917  0216                     	;# 
  1918  0216                     	;# 
  1919  0217                     	;# 
  1920  0217                     	;# 
  1921  0291                     	;# 
  1922  0291                     	;# 
  1923  0292                     	;# 
  1924  0293                     	;# 
  1925  0298                     	;# 
  1926  0298                     	;# 
  1927  0299                     	;# 
  1928  029A                     	;# 
  1929  0394                     	;# 
  1930  0395                     	;# 
  1931  0396                     	;# 
  1932  0FE4                     	;# 
  1933  0FE5                     	;# 
  1934  0FE6                     	;# 
  1935  0FE7                     	;# 
  1936  0FE8                     	;# 
  1937  0FE9                     	;# 
  1938  0FEA                     	;# 
  1939  0FEB                     	;# 
  1940  0FED                     	;# 
  1941  0FEE                     	;# 
  1942  0FEF                     	;# 
  1943  0000                     	;# 
  1944  0001                     	;# 
  1945  0002                     	;# 
  1946  0003                     	;# 
  1947  0004                     	;# 
  1948  0005                     	;# 
  1949  0006                     	;# 
  1950  0007                     	;# 
  1951  0008                     	;# 
  1952  0009                     	;# 
  1953  000A                     	;# 
  1954  000B                     	;# 
  1955  000C                     	;# 
  1956  000D                     	;# 
  1957  000E                     	;# 
  1958  0010                     	;# 
  1959  0011                     	;# 
  1960  0012                     	;# 
  1961  0015                     	;# 
  1962  0016                     	;# 
  1963  0016                     	;# 
  1964  0017                     	;# 
  1965  0018                     	;# 
  1966  0019                     	;# 
  1967  001A                     	;# 
  1968  001B                     	;# 
  1969  001C                     	;# 
  1970  008C                     	;# 
  1971  008D                     	;# 
  1972  008E                     	;# 
  1973  0090                     	;# 
  1974  0091                     	;# 
  1975  0092                     	;# 
  1976  0095                     	;# 
  1977  0096                     	;# 
  1978  0097                     	;# 
  1979  0099                     	;# 
  1980  009A                     	;# 
  1981  009B                     	;# 
  1982  009B                     	;# 
  1983  009C                     	;# 
  1984  009D                     	;# 
  1985  009E                     	;# 
  1986  010C                     	;# 
  1987  010D                     	;# 
  1988  010E                     	;# 
  1989  0116                     	;# 
  1990  0117                     	;# 
  1991  011D                     	;# 
  1992  018C                     	;# 
  1993  018D                     	;# 
  1994  018E                     	;# 
  1995  0191                     	;# 
  1996  0191                     	;# 
  1997  0192                     	;# 
  1998  0193                     	;# 
  1999  0193                     	;# 
  2000  0194                     	;# 
  2001  0195                     	;# 
  2002  0196                     	;# 
  2003  0197                     	;# 
  2004  0199                     	;# 
  2005  019A                     	;# 
  2006  019B                     	;# 
  2007  019B                     	;# 
  2008  019B                     	;# 
  2009  019B                     	;# 
  2010  019C                     	;# 
  2011  019C                     	;# 
  2012  019D                     	;# 
  2013  019E                     	;# 
  2014  019F                     	;# 
  2015  020D                     	;# 
  2016  0210                     	;# 
  2017  0211                     	;# 
  2018  0211                     	;# 
  2019  0212                     	;# 
  2020  0212                     	;# 
  2021  0213                     	;# 
  2022  0213                     	;# 
  2023  0214                     	;# 
  2024  0214                     	;# 
  2025  0215                     	;# 
  2026  0215                     	;# 
  2027  0215                     	;# 
  2028  0216                     	;# 
  2029  0216                     	;# 
  2030  0217                     	;# 
  2031  0217                     	;# 
  2032  0291                     	;# 
  2033  0291                     	;# 
  2034  0292                     	;# 
  2035  0293                     	;# 
  2036  0298                     	;# 
  2037  0298                     	;# 
  2038  0299                     	;# 
  2039  029A                     	;# 
  2040  0394                     	;# 
  2041  0395                     	;# 
  2042  0396                     	;# 
  2043  0FE4                     	;# 
  2044  0FE5                     	;# 
  2045  0FE6                     	;# 
  2046  0FE7                     	;# 
  2047  0FE8                     	;# 
  2048  0FE9                     	;# 
  2049  0FEA                     	;# 
  2050  0FEB                     	;# 
  2051  0FED                     	;# 
  2052  0FEE                     	;# 
  2053  0FEF                     	;# 
  2054  0000                     	;# 
  2055  0001                     	;# 
  2056  0002                     	;# 
  2057  0003                     	;# 
  2058  0004                     	;# 
  2059  0005                     	;# 
  2060  0006                     	;# 
  2061  0007                     	;# 
  2062  0008                     	;# 
  2063  0009                     	;# 
  2064  000A                     	;# 
  2065  000B                     	;# 
  2066  000C                     	;# 
  2067  000D                     	;# 
  2068  000E                     	;# 
  2069  0010                     	;# 
  2070  0011                     	;# 
  2071  0012                     	;# 
  2072  0015                     	;# 
  2073  0016                     	;# 
  2074  0016                     	;# 
  2075  0017                     	;# 
  2076  0018                     	;# 
  2077  0019                     	;# 
  2078  001A                     	;# 
  2079  001B                     	;# 
  2080  001C                     	;# 
  2081  008C                     	;# 
  2082  008D                     	;# 
  2083  008E                     	;# 
  2084  0090                     	;# 
  2085  0091                     	;# 
  2086  0092                     	;# 
  2087  0095                     	;# 
  2088  0096                     	;# 
  2089  0097                     	;# 
  2090  0099                     	;# 
  2091  009A                     	;# 
  2092  009B                     	;# 
  2093  009B                     	;# 
  2094  009C                     	;# 
  2095  009D                     	;# 
  2096  009E                     	;# 
  2097  010C                     	;# 
  2098  010D                     	;# 
  2099  010E                     	;# 
  2100  0116                     	;# 
  2101  0117                     	;# 
  2102  011D                     	;# 
  2103  018C                     	;# 
  2104  018D                     	;# 
  2105  018E                     	;# 
  2106  0191                     	;# 
  2107  0191                     	;# 
  2108  0192                     	;# 
  2109  0193                     	;# 
  2110  0193                     	;# 
  2111  0194                     	;# 
  2112  0195                     	;# 
  2113  0196                     	;# 
  2114  0197                     	;# 
  2115  0199                     	;# 
  2116  019A                     	;# 
  2117  019B                     	;# 
  2118  019B                     	;# 
  2119  019B                     	;# 
  2120  019B                     	;# 
  2121  019C                     	;# 
  2122  019C                     	;# 
  2123  019D                     	;# 
  2124  019E                     	;# 
  2125  019F                     	;# 
  2126  020D                     	;# 
  2127  0210                     	;# 
  2128  0211                     	;# 
  2129  0211                     	;# 
  2130  0212                     	;# 
  2131  0212                     	;# 
  2132  0213                     	;# 
  2133  0213                     	;# 
  2134  0214                     	;# 
  2135  0214                     	;# 
  2136  0215                     	;# 
  2137  0215                     	;# 
  2138  0215                     	;# 
  2139  0216                     	;# 
  2140  0216                     	;# 
  2141  0217                     	;# 
  2142  0217                     	;# 
  2143  0291                     	;# 
  2144  0291                     	;# 
  2145  0292                     	;# 
  2146  0293                     	;# 
  2147  0298                     	;# 
  2148  0298                     	;# 
  2149  0299                     	;# 
  2150  029A                     	;# 
  2151  0394                     	;# 
  2152  0395                     	;# 
  2153  0396                     	;# 
  2154  0FE4                     	;# 
  2155  0FE5                     	;# 
  2156  0FE6                     	;# 
  2157  0FE7                     	;# 
  2158  0FE8                     	;# 
  2159  0FE9                     	;# 
  2160  0FEA                     	;# 
  2161  0FEB                     	;# 
  2162  0FED                     	;# 
  2163  0FEE                     	;# 
  2164  0FEF                     	;# 
  2165                           
  2166                           	psect	idataBANK4
  2167  1DD5                     __pidataBANK4:	
  2168                           
  2169                           ;initializer for __product
  2170  1DD5  3463               	retlw	99
  2171  1DD6  3402               	retlw	2
  2172  1DD7  3400               	retlw	0
  2173  1DD8  3400               	retlw	0
  2174  1DD9  3400               	retlw	0
  2175  1DDA  3400               	retlw	0
  2176  1DDB  3400               	retlw	0
  2177  1DDC  3400               	retlw	0
  2178  1DDD  3400               	retlw	0
  2179  1DDE  3400               	retlw	0
  2180  1DDF  3400               	retlw	0
  2181  1DE0  3400               	retlw	0
  2182  1DE1  34FF               	retlw	255
  2183  1DE2  34FF               	retlw	255
  2184  1DE3  34FF               	retlw	255
  2185  1DE4  3400               	retlw	0
  2186  1DE5  3400               	retlw	0
  2187  1DE6  3400               	retlw	0
  2188  1DE7  3400               	retlw	0
  2189  1DE8  3400               	retlw	0
  2190  1DE9  3400               	retlw	0
  2191  1DEA  3400               	retlw	0
  2192  1DEB  3400               	retlw	0
  2193  1DEC  3400               	retlw	0
  2194  1DED  3400               	retlw	0
  2195  1DEE  3400               	retlw	0
  2196  1DEF  3400               	retlw	0
  2197  1DF0  3400               	retlw	0
  2198  1DF1  3400               	retlw	0
  2199  1DF2  3400               	retlw	0
  2200  1DF3  3400               	retlw	0
  2201  1DF4  3400               	retlw	0
  2202                           
  2203                           	psect	stringtext
  2204  1800                     __pstringtext:	
  2205  1800                     _CC2500_registers_address:	
  2206  1800  3403               	retlw	3
  2207  1801  3416               	retlw	22
  2208  1802  3417               	retlw	23
  2209  1803  341E               	retlw	30
  2210  1804  341F               	retlw	31
  2211  1805  3420               	retlw	32
  2212  1806  342A               	retlw	42
  2213  1807  342B               	retlw	43
  2214  1808  340B               	retlw	11
  2215  1809  340C               	retlw	12
  2216  180A  340D               	retlw	13
  2217  180B  340E               	retlw	14
  2218  180C  340F               	retlw	15
  2219  180D  3410               	retlw	16
  2220  180E  3411               	retlw	17
  2221  180F  3412               	retlw	18
  2222  1810  3413               	retlw	19
  2223  1811  3414               	retlw	20
  2224  1812  340A               	retlw	10
  2225  1813  3415               	retlw	21
  2226  1814  3421               	retlw	33
  2227  1815  3422               	retlw	34
  2228  1816  3418               	retlw	24
  2229  1817  3419               	retlw	25
  2230  1818  341A               	retlw	26
  2231  1819  341B               	retlw	27
  2232  181A  341C               	retlw	28
  2233  181B  341D               	retlw	29
  2234  181C  3423               	retlw	35
  2235  181D  3424               	retlw	36
  2236  181E  3425               	retlw	37
  2237  181F  3426               	retlw	38
  2238  1820  3429               	retlw	41
  2239  1821  342C               	retlw	44
  2240  1822  342D               	retlw	45
  2241  1823  342E               	retlw	46
  2242  1824  3400               	retlw	0
  2243  1825  3401               	retlw	1
  2244  1826  3402               	retlw	2
  2245  1827  3407               	retlw	7
  2246  1828  3408               	retlw	8
  2247  1829  3409               	retlw	9
  2248  182A  3406               	retlw	6
  2249  182B  3404               	retlw	4
  2250  182C  3405               	retlw	5
  2251  182D  3427               	retlw	39
  2252  182E  3428               	retlw	40
  2253  182F                     __end_of_CC2500_registers_address:	
  2254  182F                     _CC2500_rfSettings:	
  2255  182F  3407               	retlw	7
  2256  1830  3407               	retlw	7
  2257  1831  3430               	retlw	48
  2258  1832  3487               	retlw	135
  2259  1833  346B               	retlw	107
  2260  1834  34F8               	retlw	248
  2261  1835  347F               	retlw	127
  2262  1836  343F               	retlw	63
  2263  1837  3409               	retlw	9
  2264  1838  3400               	retlw	0
  2265  1839  345C               	retlw	92
  2266  183A  34A7               	retlw	167
  2267  183B  3462               	retlw	98
  2268  183C  3486               	retlw	134
  2269  183D  3483               	retlw	131
  2270  183E  3403               	retlw	3
  2271  183F  3422               	retlw	34
  2272  1840  34F8               	retlw	248
  2273  1841  3400               	retlw	0
  2274  1842  3444               	retlw	68
  2275  1843  34B6               	retlw	182
  2276  1844  3410               	retlw	16
  2277  1845  3418               	retlw	24
  2278  1846  341D               	retlw	29
  2279  1847  341C               	retlw	28
  2280  1848  34C7               	retlw	199
  2281  1849  3400               	retlw	0
  2282  184A  34B2               	retlw	178
  2283  184B  34EA               	retlw	234
  2284  184C  340A               	retlw	10
  2285  184D  3400               	retlw	0
  2286  184E  3411               	retlw	17
  2287  184F  3459               	retlw	89
  2288  1850  3488               	retlw	136
  2289  1851  3431               	retlw	49
  2290  1852  340B               	retlw	11
  2291  1853  342F               	retlw	47
  2292  1854  342E               	retlw	46
  2293  1855  3406               	retlw	6
  2294  1856  3404               	retlw	4
  2295  1857  3405               	retlw	5
  2296  1858  3400               	retlw	0
  2297  1859  3430               	retlw	48
  2298  185A  34D3               	retlw	211
  2299  185B  3491               	retlw	145
  2300  185C  3441               	retlw	65
  2301  185D  3400               	retlw	0
  2302  185E                     __end_of_CC2500_rfSettings:	
  2303  185E                     _CC2500_patable_vaule:	
  2304  185E  34FE               	retlw	254
  2305  185F  34FE               	retlw	254
  2306  1860  34FE               	retlw	254
  2307  1861  34FE               	retlw	254
  2308  1862  34FE               	retlw	254
  2309  1863  34FE               	retlw	254
  2310  1864  34FE               	retlw	254
  2311  1865  34FE               	retlw	254
  2312  1866                     __end_of_CC2500_patable_vaule:	
  2313                           
  2314                           	psect	nvBANK1
  2315  00EF                     __pnvBANK1:	
  2316  00EF                     _product:	
  2317  00EF                     	ds	1
  2318  000C                     _PORTA	set	12
  2319  000D                     _PORTB	set	13
  2320  000E                     _PORTC	set	14
  2321  0018                     _T1CON	set	24
  2322  0017                     _TMR1H	set	23
  2323  0016                     _TMR1L	set	22
  2324  005F                     _GIE	set	95
  2325  005B                     _IOCIE	set	91
  2326  0058                     _IOCIF	set	88
  2327  005E                     _PEIE	set	94
  2328  0060                     _RA0	set	96
  2329  0063                     _RA3	set	99
  2330  0064                     _RA4	set	100
  2331  0066                     _RA6	set	102
  2332  0067                     _RA7	set	103
  2333  0068                     _RB0	set	104
  2334  0069                     _RB1	set	105
  2335  006A                     _RB2	set	106
  2336  006B                     _RB3	set	107
  2337  006C                     _RB4	set	108
  2338  006D                     _RB5	set	109
  2339  0070                     _RC0	set	112
  2340  0071                     _RC1	set	113
  2341  0072                     _RC2	set	114
  2342  0074                     _RC4	set	116
  2343  0075                     _RC5	set	117
  2344  0077                     _RC7	set	119
  2345  0088                     _TMR1IF	set	136
  2346  009D                     _ADCON0	set	157
  2347  009E                     _ADCON1	set	158
  2348  009C                     _ADRESH	set	156
  2349  009B                     _ADRESL	set	155
  2350  0099                     _OSCCON	set	153
  2351  008C                     _TRISA	set	140
  2352  008D                     _TRISB	set	141
  2353  008E                     _TRISC	set	142
  2354  0097                     _WDTCON	set	151
  2355  04E9                     _GO_nDONE	set	1257
  2356  0488                     _TMR1IE	set	1160
  2357  0117                     _FVRCON	set	279
  2358  010C                     _LATA	set	268
  2359  010D                     _LATB	set	269
  2360  010E                     _LATC	set	270
  2361  018C                     _ANSELA	set	396
  2362  018D                     _ANSELB	set	397
  2363  018E                     _ANSELC	set	398
  2364  0192                     _PMADRH	set	402
  2365  0191                     _PMADRL	set	401
  2366  0196                     _PMCON2	set	406
  2367  0194                     _PMDATH	set	404
  2368  0193                     _PMDATL	set	403
  2369  0CAE                     _CFGS	set	3246
  2370  0CAC                     _FREE	set	3244
  2371  0CAD                     _LWLO	set	3245
  2372  0CA8                     _RD	set	3240
  2373  0CA9                     _WR	set	3241
  2374  0CAA                     _WREN	set	3242
  2375  020D                     _WPUB	set	525
  2376  0396                     _IOCBF	set	918
  2377  0395                     _IOCBN	set	917
  2378  0394                     _IOCBP	set	916
  2379  1CB2                     _IOCBF2	set	7346
  2380                           
  2381                           ; #config settings
  2382  0000                     
  2383                           	psect	cinit
  2384  0021                     start_initialization:	
  2385  0021                     __initialization:	
  2386                           
  2387                           ; Clear objects allocated to BITBANK1
  2388  0021  0021               	movlb	1	; select bank1
  2389  0022  01EE               	clrf	(__pbitbssBANK1/(0+8))& (0+127)
  2390                           
  2391                           ; Clear objects allocated to BANK1
  2392  0023  30A0               	movlw	low __pbssBANK1
  2393  0024  0084               	movwf	4
  2394  0025  3000               	movlw	high __pbssBANK1
  2395  0026  0085               	movwf	5
  2396  0027  3046               	movlw	70
  2397  0028  3198  20F7  3180   	fcall	clear_ram0
  2398                           
  2399                           ; Clear objects allocated to BANK2
  2400  002B  3020               	movlw	low __pbssBANK2
  2401  002C  0084               	movwf	4
  2402  002D  3001               	movlw	high __pbssBANK2
  2403  002E  0085               	movwf	5
  2404  002F  304F               	movlw	79
  2405  0030  3198  20F7  3180   	fcall	clear_ram0
  2406                           
  2407                           ; Clear objects allocated to BANK3
  2408  0033  30A0               	movlw	low __pbssBANK3
  2409  0034  0084               	movwf	4
  2410  0035  3001               	movlw	high __pbssBANK3
  2411  0036  0085               	movwf	5
  2412  0037  304E               	movlw	78
  2413  0038  3198  20F7  3180   	fcall	clear_ram0
  2414                           
  2415                           ; Clear objects allocated to BANK4
  2416  003B  3020               	movlw	low __pbssBANK4
  2417  003C  0084               	movwf	4
  2418  003D  3002               	movlw	high __pbssBANK4
  2419  003E  0085               	movwf	5
  2420  003F  3025               	movlw	37
  2421  0040  3198  20F7  3180   	fcall	clear_ram0
  2422                           
  2423                           ; Initialize objects allocated to BANK4
  2424  0043  30D5               	movlw	low __pidataBANK4
  2425  0044  0084               	movwf	4
  2426  0045  309D               	movlw	(high __pidataBANK4)| (0+128)
  2427  0046  0085               	movwf	5
  2428  0047  3045               	movlw	low __pdataBANK4
  2429  0048  0086               	movwf	6
  2430  0049  3002               	movlw	high __pdataBANK4
  2431  004A  0087               	movwf	7
  2432  004B  3020               	movlw	32
  2433  004C  3198  20F1         	fcall	init_ram
  2434  004E                     end_of_initialization:	
  2435                           ;End of C runtime variable initialization code
  2436                           
  2437  004E                     __end_of__initialization:	
  2438  004E  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2439  004F  0020               	movlb	0
  2440  0050  3194  2C64         	ljmp	_main	;jump to C main() function
  2441                           
  2442                           	psect	bitbssBANK1
  2443  0770                     __pbitbssBANK1:	
  2444  0770                     _Receive_OK:	
  2445  0770                     	ds	1
  2446  0771                     _Transceive_OK:	
  2447  0771                     	ds	1
  2448                           
  2449                           	psect	bssBANK1
  2450  00A0                     __pbssBANK1:	
  2451  00A0                     _RF1:	
  2452  00A0                     	ds	14
  2453  00AE                     _myMain:	
  2454  00AE                     	ds	13
  2455  00BB                     _DimmerIntr1:	
  2456  00BB                     	ds	12
  2457  00C7                     _DimmerIntr2:	
  2458  00C7                     	ds	12
  2459  00D3                     _CRC:	
  2460  00D3                     	ds	1
  2461  00D4                     _Cmd:	
  2462  00D4                     	ds	1
  2463  00D5                     _DelayOff:	
  2464  00D5                     	ds	1
  2465  00D6                     _DimmerLights:	
  2466  00D6                     	ds	1
  2467  00D7                     _LED:	
  2468  00D7                     	ds	1
  2469  00D8                     _SPI0Buffer:	
  2470  00D8                     	ds	1
  2471  00D9                     _Sw:	
  2472  00D9                     	ds	1
  2473  00DA                     _Tx_Length:	
  2474  00DA                     	ds	1
  2475  00DB                     _s_data:	
  2476  00DB                     	ds	1
  2477  00DC                     _Temp:	
  2478  00DC                     	ds	10
  2479                           
  2480                           	psect	bssBANK2
  2481  0120                     __pbssBANK2:	
  2482  0120                     _Buz1:	
  2483  0120                     	ds	12
  2484  012C                     _Dimmer:	
  2485  012C                     	ds	5
  2486  0131                     _Timer1:	
  2487  0131                     	ds	3
  2488  0134                     _RF_Count:	
  2489  0134                     	ds	2
  2490  0136                     _WDT:	
  2491  0136                     	ds	2
  2492  0138                     _DimmerIntr:	
  2493  0138                     	ds	1
  2494  0139                     _Light:	
  2495  0139                     	ds	1
  2496  013A                     _RSSI:	
  2497  013A                     	ds	1
  2498  013B                     _Rx_Length:	
  2499  013B                     	ds	1
  2500  013C                     _SwDetect:	
  2501  013C                     	ds	1
  2502  013D                     _r_address:	
  2503  013D                     	ds	1
  2504  013E                     _r_data:	
  2505  013E                     	ds	1
  2506  013F                     _Load:	
  2507  013F                     	ds	40
  2508  0167                     _DimmerLights1:	
  2509  0167                     	ds	8
  2510                           
  2511                           	psect	bssBANK3
  2512  01A0                     __pbssBANK3:	
  2513  01A0                     _RF_Data:	
  2514  01A0                     	ds	30
  2515  01BE                     _Sw1:	
  2516  01BE                     	ds	9
  2517  01C7                     _Sw2:	
  2518  01C7                     	ds	9
  2519  01D0                     _DimmerLights2:	
  2520  01D0                     	ds	8
  2521  01D8                     _DlySw1:	
  2522  01D8                     	ds	5
  2523  01DD                     _DlySw2:	
  2524  01DD                     	ds	5
  2525  01E2                     _VarErrLED:	
  2526  01E2                     	ds	4
  2527  01E6                     _VarLED1:	
  2528  01E6                     	ds	4
  2529  01EA                     _VarLED2:	
  2530  01EA                     	ds	4
  2531                           
  2532                           	psect	bssBANK4
  2533  0220                     __pbssBANK4:	
  2534  0220                     _Memory:	
  2535  0220                     	ds	37
  2536                           
  2537                           	psect	dataBANK4
  2538  0245                     __pdataBANK4:	
  2539  0245                     __product:	
  2540  0245                     	ds	32
  2541                           
  2542                           	psect	clrtext
  2543  18F7                     clear_ram0:	
  2544                           ;	Called with FSR0 containing the base address, and
  2545                           ;	WREG with the size to clear
  2546                           
  2547  18F7  0064               	clrwdt	;clear the watchdog before getting into this loop
  2548  18F8                     clrloop0:	
  2549  18F8  0180               	clrf	0	;clear RAM location pointed to by FSR
  2550  18F9  3101               	addfsr 0,1
  2551  18FA  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2552  18FB  28F8               	goto	clrloop0	;have we reached the end yet?
  2553  18FC  3400               	retlw	0	;all done for this memory range, return
  2554                           
  2555                           	psect	inittext
  2556  18F1                     init_ram:	
  2557  18F1  00FE               	movwf	126
  2558  18F2                     initloop:	
  2559  18F2  0012               	moviw fsr0++
  2560  18F3  001E               	movwi fsr1++
  2561  18F4  0BFE               	decfsz	126,f
  2562  18F5  28F2               	goto	initloop
  2563  18F6  3400               	retlw	0
  2564                           
  2565                           	psect	cstackBANK1
  2566  00E6                     __pcstackBANK1:	
  2567  00E6                     ??_getRxData:	
  2568  00E6                     setDimmerLights_OnOff@lights:	
  2569                           ; 0 bytes @ 0x0
  2570                           
  2571                           
  2572                           ; 1 bytes @ 0x0
  2573  00E6                     	ds	1
  2574  00E7                     setDimmerLights_Main@lights:	
  2575  00E7                     getRxData@error:	
  2576                           ; 1 bytes @ 0x1
  2577                           
  2578                           
  2579                           ; 1 bytes @ 0x1
  2580  00E7                     	ds	1
  2581  00E8                     ??_setRF_Main:	
  2582                           
  2583                           ; 0 bytes @ 0x2
  2584  00E8                     	ds	1
  2585  00E9                     setRF_Main@error:	
  2586                           
  2587                           ; 1 bytes @ 0x3
  2588  00E9                     	ds	1
  2589  00EA                     ?_main:	
  2590  00EA                     main@argc:	
  2591                           ; 2 bytes @ 0x4
  2592                           
  2593                           
  2594                           ; 2 bytes @ 0x4
  2595  00EA                     	ds	2
  2596  00EC                     main@argv:	
  2597                           
  2598                           ; 2 bytes @ 0x6
  2599  00EC                     	ds	2
  2600                           
  2601                           	psect	cstackCOMMON
  2602  0070                     __pcstackCOMMON:	
  2603  0070                     ?_CC2500_WriteCommand:	
  2604  0070                     ?_RF_Timeout_Counter:	
  2605                           ; 0 bytes @ 0x0
  2606                           
  2607  0070                     ?_setRF_TimeoutCleared:	
  2608                           ; 0 bytes @ 0x0
  2609                           
  2610  0070                     ?_CC2500_WriteByte:	
  2611                           ; 0 bytes @ 0x0
  2612                           
  2613  0070                     ?_CC2500_ReadStatus:	
  2614                           ; 0 bytes @ 0x0
  2615                           
  2616  0070                     ?_CC2500_ReadByte:	
  2617                           ; 0 bytes @ 0x0
  2618                           
  2619  0070                     ?_CC2500_PowerRST:	
  2620                           ; 0 bytes @ 0x0
  2621                           
  2622  0070                     ?_CC2500_InitSetREG:	
  2623                           ; 0 bytes @ 0x0
  2624                           
  2625  0070                     ?_CC2500_InitPATable:	
  2626                           ; 0 bytes @ 0x0
  2627                           
  2628  0070                     ?_CC2500_ClearTXFIFO:	
  2629                           ; 0 bytes @ 0x0
  2630                           
  2631  0070                     ?_CC2500_ClearRXFIFO:	
  2632                           ; 0 bytes @ 0x0
  2633                           
  2634  0070                     ?_CC2500_FrequencyCabr:	
  2635                           ; 0 bytes @ 0x0
  2636                           
  2637  0070                     ?_CC2500_SIDLEMode:	
  2638                           ; 0 bytes @ 0x0
  2639                           
  2640  0070                     ?_DlyOff_Initialization:	
  2641                           ; 0 bytes @ 0x0
  2642                           
  2643  0070                     ?_DlyOff_Main:	
  2644                           ; 0 bytes @ 0x0
  2645                           
  2646  0070                     ?_setDimmerLights_SwOn:	
  2647                           ; 0 bytes @ 0x0
  2648                           
  2649  0070                     ?_setDimmerLights_SwOff:	
  2650                           ; 0 bytes @ 0x0
  2651                           
  2652  0070                     ?_setMemory_Modify:	
  2653                           ; 0 bytes @ 0x0
  2654                           
  2655  0070                     ?_setDimmerLights_Initialization:	
  2656                           ; 0 bytes @ 0x0
  2657                           
  2658  0070                     ?_setDimmerLights_Main:	
  2659                           ; 0 bytes @ 0x0
  2660                           
  2661  0070                     ?_setDimmerLights_Line:	
  2662                           ; 0 bytes @ 0x0
  2663                           
  2664  0070                     ?_setTxData:	
  2665                           ; 0 bytes @ 0x0
  2666                           
  2667  0070                     ?_setRF_TransceiveGO:	
  2668                           ; 0 bytes @ 0x0
  2669                           
  2670  0070                     ?_setLED_Initialization:	
  2671                           ; 0 bytes @ 0x0
  2672                           
  2673  0070                     ?_setLED_Main:	
  2674                           ; 0 bytes @ 0x0
  2675                           
  2676  0070                     ?_Fosc_Set:	
  2677                           ; 0 bytes @ 0x0
  2678                           
  2679  0070                     ?_IO_Set:	
  2680                           ; 0 bytes @ 0x0
  2681                           
  2682  0070                     ?_TMR1_Set:	
  2683                           ; 0 bytes @ 0x0
  2684                           
  2685  0070                     ?_ADC_Set:	
  2686                           ; 0 bytes @ 0x0
  2687                           
  2688  0070                     ?_IOC_Set:	
  2689                           ; 0 bytes @ 0x0
  2690                           
  2691  0070                     ?_WDT_Set:	
  2692                           ; 0 bytes @ 0x0
  2693                           
  2694  0070                     ?_TMR1_ISR:	
  2695                           ; 0 bytes @ 0x0
  2696                           
  2697  0070                     ?_IOC_ISR:	
  2698                           ; 0 bytes @ 0x0
  2699                           
  2700  0070                     ?_Timeout_Counter:	
  2701                           ; 0 bytes @ 0x0
  2702                           
  2703  0070                     ?_set_TimeoutCleared:	
  2704                           ; 0 bytes @ 0x0
  2705                           
  2706  0070                     ?_Flash_Memory_Write:	
  2707                           ; 0 bytes @ 0x0
  2708                           
  2709  0070                     ?_Flash_Memory_Modify:	
  2710                           ; 0 bytes @ 0x0
  2711                           
  2712  0070                     ?_WDT_Clearing:	
  2713                           ; 0 bytes @ 0x0
  2714                           
  2715  0070                     ?_setLoad_AH_AL_Restore:	
  2716                           ; 0 bytes @ 0x0
  2717                           
  2718  0070                     ?_setTemp_Initialization:	
  2719                           ; 0 bytes @ 0x0
  2720                           
  2721  0070                     ?_setTemp_Main:	
  2722                           ; 0 bytes @ 0x0
  2723                           
  2724  0070                     ?_setRF_Initialization:	
  2725                           ; 0 bytes @ 0x0
  2726                           
  2727  0070                     ?_setRF_Main:	
  2728                           ; 0 bytes @ 0x0
  2729                           
  2730  0070                     ?_RF_RxDisable:	
  2731                           ; 0 bytes @ 0x0
  2732                           
  2733  0070                     ?_getRxData:	
  2734                           ; 0 bytes @ 0x0
  2735                           
  2736  0070                     ?_setLog_Code:	
  2737                           ; 0 bytes @ 0x0
  2738                           
  2739  0070                     ?_setControl_Lights_Table:	
  2740                           ; 0 bytes @ 0x0
  2741                           
  2742  0070                     ?_setRFSW_Control:	
  2743                           ; 0 bytes @ 0x0
  2744                           
  2745  0070                     ?_setRFSW_AdjControl:	
  2746                           ; 0 bytes @ 0x0
  2747                           
  2748  0070                     ?_setSw_Initialization:	
  2749                           ; 0 bytes @ 0x0
  2750                           
  2751  0070                     ?_setSw_Main:	
  2752                           ; 0 bytes @ 0x0
  2753                           
  2754  0070                     ?_myMain_Initialization:	
  2755                           ; 0 bytes @ 0x0
  2756                           
  2757  0070                     ?_my_MainTimer:	
  2758                           ; 0 bytes @ 0x0
  2759                           
  2760  0070                     ?_Exception_Main:	
  2761                           ; 0 bytes @ 0x0
  2762                           
  2763  0070                     ?_Buzzer_Initialization:	
  2764                           ; 0 bytes @ 0x0
  2765                           
  2766  0070                     ?_Buzzer_Main:	
  2767                           ; 0 bytes @ 0x0
  2768                           
  2769  0070                     ?_CC2500_TxData:	
  2770                           ; 0 bytes @ 0x0
  2771                           
  2772  0070                     ?_CC2500_RxData:	
  2773                           ; 0 bytes @ 0x0
  2774                           
  2775  0070                     ?_CC2500_PowerOnInitial:	
  2776                           ; 0 bytes @ 0x0
  2777                           
  2778  0070                     ?_DelayOffPointSelect:	
  2779                           ; 0 bytes @ 0x0
  2780                           
  2781  0070                     ?_DelayOff_Initialization:	
  2782                           ; 0 bytes @ 0x0
  2783                           
  2784  0070                     ?_DelayOff_Main:	
  2785                           ; 0 bytes @ 0x0
  2786                           
  2787  0070                     ?_DimmerIntr_Initialization:	
  2788                           ; 0 bytes @ 0x0
  2789                           
  2790  0070                     ?_DimmerLights_SelectPointer:	
  2791                           ; 0 bytes @ 0x0
  2792                           
  2793  0070                     ?_DimmerLights_Initialization:	
  2794                           ; 0 bytes @ 0x0
  2795                           
  2796  0070                     ?_setDimmerLights_DimmingOn:	
  2797                           ; 0 bytes @ 0x0
  2798                           
  2799  0070                     ?_DimmerLights_Main:	
  2800                           ; 0 bytes @ 0x0
  2801                           
  2802  0070                     ?_DimmerLights_TMR_1:	
  2803                           ; 0 bytes @ 0x0
  2804                           
  2805  0070                     ??_DimmerLights_TMR_1:	
  2806                           ; 0 bytes @ 0x0
  2807                           
  2808  0070                     ?_DimmerLights_IOC_1:	
  2809                           ; 0 bytes @ 0x0
  2810                           
  2811  0070                     ?_DimmerLights_TMR_2:	
  2812                           ; 0 bytes @ 0x0
  2813                           
  2814  0070                     ??_DimmerLights_TMR_2:	
  2815                           ; 0 bytes @ 0x0
  2816                           
  2817  0070                     ?_DimmerLights_IOC_2:	
  2818                           ; 0 bytes @ 0x0
  2819                           
  2820  0070                     ?_LedPointSelect:	
  2821                           ; 0 bytes @ 0x0
  2822                           
  2823  0070                     ?_LED_Initialization:	
  2824                           ; 0 bytes @ 0x0
  2825                           
  2826  0070                     ?_LED_Main:	
  2827                           ; 0 bytes @ 0x0
  2828                           
  2829  0070                     ?_Mcu_Initialization:	
  2830                           ; 0 bytes @ 0x0
  2831                           
  2832  0070                     ?_ISR:	
  2833                           ; 0 bytes @ 0x0
  2834                           
  2835  0070                     ?_Flash_Memory_Initialization:	
  2836                           ; 0 bytes @ 0x0
  2837                           
  2838  0070                     ?_Flash_Memory_Main:	
  2839                           ; 0 bytes @ 0x0
  2840                           
  2841  0070                     ?_Flash_Memory_Unlock:	
  2842                           ; 0 bytes @ 0x0
  2843                           
  2844  0070                     ?_Flash_Memory_Erasing:	
  2845                           ; 0 bytes @ 0x0
  2846                           
  2847  0070                     ?_setMemory_LoopSave:	
  2848                           ; 0 bytes @ 0x0
  2849                           
  2850  0070                     ?_WDT_Main:	
  2851                           ; 0 bytes @ 0x0
  2852                           
  2853  0070                     ?_Load_Initialization:	
  2854                           ; 0 bytes @ 0x0
  2855                           
  2856  0070                     ?_getLoad_AD:	
  2857                           ; 0 bytes @ 0x0
  2858                           
  2859  0070                     ?_Load_Main:	
  2860                           ; 0 bytes @ 0x0
  2861                           
  2862  0070                     ?_Temp_Initialization:	
  2863                           ; 0 bytes @ 0x0
  2864                           
  2865  0070                     ?_getTemp_AD:	
  2866                           ; 0 bytes @ 0x0
  2867                           
  2868  0070                     ?_Temp_Main:	
  2869                           ; 0 bytes @ 0x0
  2870                           
  2871  0070                     ?_RF_Initialization:	
  2872                           ; 0 bytes @ 0x0
  2873                           
  2874  0070                     ?_RF_Main:	
  2875                           ; 0 bytes @ 0x0
  2876                           
  2877  0070                     ?_setRF_Learn:	
  2878                           ; 0 bytes @ 0x0
  2879                           
  2880  0070                     ?_TouchPower:	
  2881                           ; 0 bytes @ 0x0
  2882                           
  2883  0070                     ?_SwPointSelect:	
  2884                           ; 0 bytes @ 0x0
  2885                           
  2886  0070                     ?_Switch_Initialization:	
  2887                           ; 0 bytes @ 0x0
  2888                           
  2889  0070                     ?_Switch_Main:	
  2890                           ; 0 bytes @ 0x0
  2891                           
  2892  0070                     ?_getDimmerLights_Status:	
  2893                           ; 0 bytes @ 0x0
  2894                           
  2895  0070                     ?_getDimmerLights_ValueToPercent:	
  2896                           ; 1 bytes @ 0x0
  2897                           
  2898  0070                     ?_getDimmerLights_PercentToValue:	
  2899                           ; 1 bytes @ 0x0
  2900                           
  2901  0070                     ?_getLoad_OK:	
  2902                           ; 1 bytes @ 0x0
  2903                           
  2904  0070                     ?_getMain_All_Error_Status:	
  2905                           ; 1 bytes @ 0x0
  2906                           
  2907  0070                     ?_getMain_All_LightsStatus:	
  2908                           ; 1 bytes @ 0x0
  2909                           
  2910  0070                     ?_getDimmerLights_Allow_Condition:	
  2911                           ; 1 bytes @ 0x0
  2912                           
  2913  0070                     ?_getCmd_Status:	
  2914                           ; 1 bytes @ 0x0
  2915                           
  2916  0070                     ?_Flash_Memory_Read:	
  2917                           ; 1 bytes @ 0x0
  2918                           
  2919  0070                     ?_getAll_Sw_KeyStatus:	
  2920                           ; 1 bytes @ 0x0
  2921                           
  2922  0070                     ?_getMain_Lights_Count:	
  2923                           ; 1 bytes @ 0x0
  2924                           
  2925  0070                     ?_getRF_KeyStatus:	
  2926                           ; 1 bytes @ 0x0
  2927                           
  2928  0070                     ?_getSw_KeyStatus:	
  2929                           ; 1 bytes @ 0x0
  2930                           
  2931  0070                     ?_getDelayOff_GO:	
  2932                           ; 1 bytes @ 0x0
  2933                           
  2934  0070                     ?_getDimmerIntr_DimmingValue:	
  2935                           ; 1 bytes @ 0x0
  2936                           
  2937  0070                     ?_getAll_DimmerIntr_Dimming_Sw_RF:	
  2938                           ; 1 bytes @ 0x0
  2939                           
  2940  0070                     ?_getDimmerLights_Line:	
  2941                           ; 1 bytes @ 0x0
  2942                           
  2943  0070                     ?_getDimmer_LoadGO:	
  2944                           ; 1 bytes @ 0x0
  2945                           
  2946  0070                     ?_getDimmer_Load_Status:	
  2947                           ; 1 bytes @ 0x0
  2948                           
  2949  0070                     ?___lbdiv:	
  2950                           ; 1 bytes @ 0x0
  2951                           
  2952  0070                     setDimmerLights_Initialization@lights:	
  2953                           ; 1 bytes @ 0x0
  2954                           
  2955  0070                     ___lbdiv@divisor:	
  2956                           ; 1 bytes @ 0x0
  2957                           
  2958                           
  2959                           ; 1 bytes @ 0x0
  2960  0070                     	ds	1
  2961  0071                     ??_TMR1_ISR:	
  2962  0071                     ??___lbdiv:	
  2963                           ; 0 bytes @ 0x1
  2964                           
  2965                           
  2966                           ; 0 bytes @ 0x1
  2967  0071                     	ds	1
  2968  0072                     ___lbdiv@dividend:	
  2969                           
  2970                           ; 1 bytes @ 0x2
  2971  0072                     	ds	1
  2972  0073                     ___lbdiv@counter:	
  2973                           
  2974                           ; 1 bytes @ 0x3
  2975  0073                     	ds	1
  2976  0074                     ___lbdiv@quotient:	
  2977                           
  2978                           ; 1 bytes @ 0x4
  2979  0074                     	ds	1
  2980  0075                     ?_Division:	
  2981  0075                     Division@num:	
  2982                           ; 1 bytes @ 0x5
  2983                           
  2984                           
  2985                           ; 1 bytes @ 0x5
  2986  0075                     	ds	1
  2987  0076                     ??_Division:	
  2988                           
  2989                           ; 0 bytes @ 0x6
  2990  0076                     	ds	2
  2991  0078                     Division@value:	
  2992                           
  2993                           ; 1 bytes @ 0x8
  2994  0078                     	ds	1
  2995  0079                     Division@result:	
  2996                           
  2997                           ; 1 bytes @ 0x9
  2998  0079                     	ds	1
  2999  007A                     ??_DimmerLights_IOC_1:	
  3000  007A                     ??_DimmerLights_IOC_2:	
  3001                           ; 0 bytes @ 0xA
  3002                           
  3003                           
  3004                           ; 0 bytes @ 0xA
  3005  007A                     	ds	2
  3006  007C                     DimmerLights_IOC_1@dimming:	
  3007  007C                     DimmerLights_IOC_2@dimming:	
  3008                           ; 1 bytes @ 0xC
  3009                           
  3010                           
  3011                           ; 1 bytes @ 0xC
  3012  007C                     	ds	1
  3013  007D                     ??_IOC_ISR:	
  3014  007D                     ??_ISR:	
  3015                           ; 0 bytes @ 0xD
  3016                           
  3017                           
  3018                           ; 0 bytes @ 0xD
  3019  007D                     	ds	1
  3020                           
  3021                           	psect	cstackBANK0
  3022  0020                     __pcstackBANK0:	
  3023  0020                     ??_RF_Timeout_Counter:	
  3024  0020                     ??_setRF_TimeoutCleared:	
  3025                           ; 0 bytes @ 0x0
  3026                           
  3027  0020                     ??_CC2500_WriteByte:	
  3028                           ; 0 bytes @ 0x0
  3029                           
  3030  0020                     ??_CC2500_ReadByte:	
  3031                           ; 0 bytes @ 0x0
  3032                           
  3033  0020                     ?_DelayTime_1us:	
  3034                           ; 0 bytes @ 0x0
  3035                           
  3036  0020                     ??_setMemory_Modify:	
  3037                           ; 0 bytes @ 0x0
  3038                           
  3039  0020                     ??_setDimmerLights_Initialization:	
  3040                           ; 0 bytes @ 0x0
  3041                           
  3042  0020                     ??_getLoad_OK:	
  3043                           ; 0 bytes @ 0x0
  3044                           
  3045  0020                     ??_getMain_All_Error_Status:	
  3046                           ; 0 bytes @ 0x0
  3047                           
  3048  0020                     ??_getMain_All_LightsStatus:	
  3049                           ; 0 bytes @ 0x0
  3050                           
  3051  0020                     ??_setDimmerLights_Line:	
  3052                           ; 0 bytes @ 0x0
  3053                           
  3054  0020                     ??_getCmd_Status:	
  3055                           ; 0 bytes @ 0x0
  3056                           
  3057  0020                     ?_setCmd_Status:	
  3058                           ; 0 bytes @ 0x0
  3059                           
  3060  0020                     ??_setTxData:	
  3061                           ; 0 bytes @ 0x0
  3062                           
  3063  0020                     ??_setRF_TransceiveGO:	
  3064                           ; 0 bytes @ 0x0
  3065                           
  3066  0020                     ??_Fosc_Set:	
  3067                           ; 0 bytes @ 0x0
  3068                           
  3069  0020                     ??_IO_Set:	
  3070                           ; 0 bytes @ 0x0
  3071                           
  3072  0020                     ??_TMR1_Set:	
  3073                           ; 0 bytes @ 0x0
  3074                           
  3075  0020                     ??_ADC_Set:	
  3076                           ; 0 bytes @ 0x0
  3077                           
  3078  0020                     ??_IOC_Set:	
  3079                           ; 0 bytes @ 0x0
  3080                           
  3081  0020                     ??_WDT_Set:	
  3082                           ; 0 bytes @ 0x0
  3083                           
  3084  0020                     ??_Timeout_Counter:	
  3085                           ; 0 bytes @ 0x0
  3086                           
  3087  0020                     ??_set_TimeoutCleared:	
  3088                           ; 0 bytes @ 0x0
  3089                           
  3090  0020                     ??_Flash_Memory_Read:	
  3091                           ; 0 bytes @ 0x0
  3092                           
  3093  0020                     ?_setMemory_Data:	
  3094                           ; 0 bytes @ 0x0
  3095                           
  3096  0020                     ??_Flash_Memory_Write:	
  3097                           ; 0 bytes @ 0x0
  3098                           
  3099  0020                     ??_getAll_Sw_KeyStatus:	
  3100                           ; 0 bytes @ 0x0
  3101                           
  3102  0020                     ??_WDT_Clearing:	
  3103                           ; 0 bytes @ 0x0
  3104                           
  3105  0020                     ??_setLoad_AH_AL_Restore:	
  3106                           ; 0 bytes @ 0x0
  3107                           
  3108  0020                     ??_getMain_Lights_Count:	
  3109                           ; 0 bytes @ 0x0
  3110                           
  3111  0020                     ??_setTemp_Initialization:	
  3112                           ; 0 bytes @ 0x0
  3113                           
  3114  0020                     ??_setRF_Initialization:	
  3115                           ; 0 bytes @ 0x0
  3116                           
  3117  0020                     ??_getRF_KeyStatus:	
  3118                           ; 0 bytes @ 0x0
  3119                           
  3120  0020                     ??_getSw_KeyStatus:	
  3121                           ; 0 bytes @ 0x0
  3122                           
  3123  0020                     ??_myMain_Initialization:	
  3124                           ; 0 bytes @ 0x0
  3125                           
  3126  0020                     ??_Buzzer_Initialization:	
  3127                           ; 0 bytes @ 0x0
  3128                           
  3129  0020                     ??_Buzzer_Main:	
  3130                           ; 0 bytes @ 0x0
  3131                           
  3132  0020                     ??_DelayOffPointSelect:	
  3133                           ; 0 bytes @ 0x0
  3134                           
  3135  0020                     ?_setDimmerIntr_ControlStatus:	
  3136                           ; 0 bytes @ 0x0
  3137                           
  3138  0020                     ??_getDimmerIntr_DimmingValue:	
  3139                           ; 0 bytes @ 0x0
  3140                           
  3141  0020                     ?_setDimmerIntr_Dimming_Sw:	
  3142                           ; 0 bytes @ 0x0
  3143                           
  3144  0020                     ?_setDimmerIntr_Dimming_RF:	
  3145                           ; 0 bytes @ 0x0
  3146                           
  3147  0020                     ??_getAll_DimmerIntr_Dimming_Sw_RF:	
  3148                           ; 0 bytes @ 0x0
  3149                           
  3150  0020                     ??_DimmerLights_SelectPointer:	
  3151                           ; 0 bytes @ 0x0
  3152                           
  3153  0020                     ??_getDimmerLights_Line:	
  3154                           ; 0 bytes @ 0x0
  3155                           
  3156  0020                     ??_getDimmer_LoadGO:	
  3157                           ; 0 bytes @ 0x0
  3158                           
  3159  0020                     ??_getDimmer_Load_Status:	
  3160                           ; 0 bytes @ 0x0
  3161                           
  3162  0020                     ??_LedPointSelect:	
  3163                           ; 0 bytes @ 0x0
  3164                           
  3165  0020                     ??_Flash_Memory_Unlock:	
  3166                           ; 0 bytes @ 0x0
  3167                           
  3168  0020                     ??_Flash_Memory_Erasing:	
  3169                           ; 0 bytes @ 0x0
  3170                           
  3171  0020                     ??_setMemory_LoopSave:	
  3172                           ; 0 bytes @ 0x0
  3173                           
  3174  0020                     ??_WDT_Main:	
  3175                           ; 0 bytes @ 0x0
  3176                           
  3177  0020                     ??_Temp_Initialization:	
  3178                           ; 0 bytes @ 0x0
  3179                           
  3180  0020                     ??_setRF_Learn:	
  3181                           ; 0 bytes @ 0x0
  3182                           
  3183  0020                     ??_TouchPower:	
  3184                           ; 0 bytes @ 0x0
  3185                           
  3186  0020                     ??_SwPointSelect:	
  3187                           ; 0 bytes @ 0x0
  3188                           
  3189  0020                     ?___bmul:	
  3190                           ; 0 bytes @ 0x0
  3191                           
  3192  0020                     ?_getBuz_GO:	
  3193                           ; 1 bytes @ 0x0
  3194                           
  3195  0020                     ?_getAD:	
  3196                           ; 2 bytes @ 0x0
  3197                           
  3198  0020                     ?___wmul:	
  3199                           ; 2 bytes @ 0x0
  3200                           
  3201  0020                     ?___awdiv:	
  3202                           ; 2 bytes @ 0x0
  3203                           
  3204  0020                     ?___lwdiv:	
  3205                           ; 2 bytes @ 0x0
  3206                           
  3207  0020                     ?___ftpack:	
  3208                           ; 2 bytes @ 0x0
  3209                           
  3210  0020                     setDimmerIntr_ControlStatus@command:	
  3211                           ; 3 bytes @ 0x0
  3212                           
  3213  0020                     setDimmerIntr_Dimming_Sw@command:	
  3214                           ; 1 bytes @ 0x0
  3215                           
  3216  0020                     setDimmerIntr_Dimming_RF@command:	
  3217                           ; 1 bytes @ 0x0
  3218                           
  3219  0020                     setDimmerLights_Line@lights:	
  3220                           ; 1 bytes @ 0x0
  3221                           
  3222  0020                     getDimmer_LoadGO@loadgo:	
  3223                           ; 1 bytes @ 0x0
  3224                           
  3225  0020                     getDimmer_Load_Status@status:	
  3226                           ; 1 bytes @ 0x0
  3227                           
  3228  0020                     getAD@adcon1:	
  3229                           ; 1 bytes @ 0x0
  3230                           
  3231  0020                     setMemory_Data@data:	
  3232                           ; 1 bytes @ 0x0
  3233                           
  3234  0020                     getLoad_OK@ok:	
  3235                           ; 1 bytes @ 0x0
  3236                           
  3237  0020                     getMain_All_LightsStatus@status:	
  3238                           ; 1 bytes @ 0x0
  3239                           
  3240  0020                     getMain_Lights_Count@count:	
  3241                           ; 1 bytes @ 0x0
  3242                           
  3243  0020                     setCmd_Status@cmd:	
  3244                           ; 1 bytes @ 0x0
  3245                           
  3246  0020                     getCmd_Status@number:	
  3247                           ; 1 bytes @ 0x0
  3248                           
  3249  0020                     ___bmul@multiplicand:	
  3250                           ; 1 bytes @ 0x0
  3251                           
  3252  0020                     DelayTime_1us@count:	
  3253                           ; 1 bytes @ 0x0
  3254                           
  3255  0020                     ___wmul@multiplier:	
  3256                           ; 2 bytes @ 0x0
  3257                           
  3258  0020                     ___awdiv@divisor:	
  3259                           ; 2 bytes @ 0x0
  3260                           
  3261  0020                     ___lwdiv@divisor:	
  3262                           ; 2 bytes @ 0x0
  3263                           
  3264  0020                     ___ftpack@arg:	
  3265                           ; 2 bytes @ 0x0
  3266                           
  3267                           
  3268                           ; 3 bytes @ 0x0
  3269  0020                     	ds	1
  3270  0021                     ??_getDimmerLights_Allow_Condition:	
  3271  0021                     ??_setCmd_Status:	
  3272                           ; 0 bytes @ 0x1
  3273                           
  3274  0021                     ??_setMemory_Data:	
  3275                           ; 0 bytes @ 0x1
  3276                           
  3277  0021                     ??_setDimmerIntr_ControlStatus:	
  3278                           ; 0 bytes @ 0x1
  3279                           
  3280  0021                     ??_setDimmerIntr_Dimming_Sw:	
  3281                           ; 0 bytes @ 0x1
  3282                           
  3283  0021                     ??_setDimmerIntr_Dimming_RF:	
  3284                           ; 0 bytes @ 0x1
  3285                           
  3286  0021                     ??_Mcu_Initialization:	
  3287                           ; 0 bytes @ 0x1
  3288                           
  3289  0021                     ??_RF_Initialization:	
  3290                           ; 0 bytes @ 0x1
  3291                           
  3292  0021                     ??___bmul:	
  3293                           ; 0 bytes @ 0x1
  3294                           
  3295  0021                     CC2500_WriteByte@loop_a:	
  3296                           ; 0 bytes @ 0x1
  3297                           
  3298  0021                     CC2500_ReadByte@loop_b:	
  3299                           ; 1 bytes @ 0x1
  3300                           
  3301  0021                     DelayOffPointSelect@sw:	
  3302                           ; 1 bytes @ 0x1
  3303                           
  3304  0021                     getDimmerIntr_DimmingValue@value:	
  3305                           ; 1 bytes @ 0x1
  3306                           
  3307  0021                     _getAll_DimmerIntr_Dimming_Sw_RF$2294:	
  3308                           ; 1 bytes @ 0x1
  3309                           
  3310  0021                     DimmerLights_SelectPointer@lights:	
  3311                           ; 1 bytes @ 0x1
  3312                           
  3313  0021                     getDimmerLights_Line@line:	
  3314                           ; 1 bytes @ 0x1
  3315                           
  3316  0021                     LedPointSelect@led:	
  3317                           ; 1 bytes @ 0x1
  3318                           
  3319  0021                     Flash_Memory_Read@i:	
  3320                           ; 1 bytes @ 0x1
  3321                           
  3322  0021                     Flash_Memory_Write@i:	
  3323                           ; 1 bytes @ 0x1
  3324                           
  3325  0021                     setMemory_Modify@command:	
  3326                           ; 1 bytes @ 0x1
  3327                           
  3328  0021                     setMemory_LoopSave@command:	
  3329                           ; 1 bytes @ 0x1
  3330                           
  3331  0021                     setLoad_AH_AL_Restore@i:	
  3332                           ; 1 bytes @ 0x1
  3333                           
  3334  0021                     setRF_Learn@command:	
  3335                           ; 1 bytes @ 0x1
  3336                           
  3337  0021                     getRF_KeyStatus@key:	
  3338                           ; 1 bytes @ 0x1
  3339                           
  3340  0021                     setRF_TransceiveGO@command:	
  3341                           ; 1 bytes @ 0x1
  3342                           
  3343  0021                     SwPointSelect@sw:	
  3344                           ; 1 bytes @ 0x1
  3345                           
  3346  0021                     _getSw_KeyStatus$6169:	
  3347                           ; 1 bytes @ 0x1
  3348                           
  3349  0021                     getAll_Sw_KeyStatus@status:	
  3350                           ; 1 bytes @ 0x1
  3351                           
  3352  0021                     getMain_Lights_Count@status1:	
  3353                           ; 1 bytes @ 0x1
  3354                           
  3355  0021                     getCmd_Status@cmd:	
  3356                           ; 1 bytes @ 0x1
  3357                           
  3358  0021                     _getMain_All_Error_Status$6913:	
  3359                           ; 1 bytes @ 0x1
  3360                           
  3361                           
  3362                           ; 2 bytes @ 0x1
  3363  0021                     	ds	1
  3364  0022                     ??_CC2500_WriteCommand:	
  3365  0022                     ??_CC2500_ReadStatus:	
  3366                           ; 0 bytes @ 0x2
  3367                           
  3368  0022                     ??_DelayTime_1us:	
  3369                           ; 0 bytes @ 0x2
  3370                           
  3371  0022                     ?_CC2500_WriteREG:	
  3372                           ; 0 bytes @ 0x2
  3373                           
  3374  0022                     ??_DlyOff_Initialization:	
  3375                           ; 0 bytes @ 0x2
  3376                           
  3377  0022                     ??_getDimmerLights_Status:	
  3378                           ; 0 bytes @ 0x2
  3379                           
  3380  0022                     ??_setDimmerLights_SwOff:	
  3381                           ; 0 bytes @ 0x2
  3382                           
  3383  0022                     ?_setLED:	
  3384                           ; 0 bytes @ 0x2
  3385                           
  3386  0022                     ??_setLED_Main:	
  3387                           ; 0 bytes @ 0x2
  3388                           
  3389  0022                     ??_getBuz_GO:	
  3390                           ; 0 bytes @ 0x2
  3391                           
  3392  0022                     ??_getDelayOff_GO:	
  3393                           ; 0 bytes @ 0x2
  3394                           
  3395  0022                     ??_setDimmerLights_DimmingOn:	
  3396                           ; 0 bytes @ 0x2
  3397                           
  3398  0022                     ?_setDimmerLights_DimmingRun:	
  3399                           ; 0 bytes @ 0x2
  3400                           
  3401  0022                     ??_Load_Initialization:	
  3402                           ; 0 bytes @ 0x2
  3403                           
  3404  0022                     CC2500_WriteREG@value:	
  3405                           ; 0 bytes @ 0x2
  3406                           
  3407  0022                     DlyOff_Initialization@sw:	
  3408                           ; 1 bytes @ 0x2
  3409                           
  3410  0022                     getDelayOff_GO@sw:	
  3411                           ; 1 bytes @ 0x2
  3412                           
  3413  0022                     setDimmerIntr_ControlStatus@lights:	
  3414                           ; 1 bytes @ 0x2
  3415                           
  3416  0022                     getDimmerIntr_DimmingValue@lights:	
  3417                           ; 1 bytes @ 0x2
  3418                           
  3419  0022                     setDimmerIntr_Dimming_Sw@lights:	
  3420                           ; 1 bytes @ 0x2
  3421                           
  3422  0022                     setDimmerIntr_Dimming_RF@lights:	
  3423                           ; 1 bytes @ 0x2
  3424                           
  3425  0022                     _getAll_DimmerIntr_Dimming_Sw_RF$2295:	
  3426                           ; 1 bytes @ 0x2
  3427                           
  3428  0022                     setDimmerLights_SwOff@sw:	
  3429                           ; 1 bytes @ 0x2
  3430                           
  3431  0022                     setDimmerLights_DimmingOn@sw:	
  3432                           ; 1 bytes @ 0x2
  3433                           
  3434  0022                     _getDimmerLights_Allow_Condition$2417:	
  3435                           ; 1 bytes @ 0x2
  3436                           
  3437  0022                     getDimmerLights_Status@lights:	
  3438                           ; 1 bytes @ 0x2
  3439                           
  3440  0022                     setDimmerLights_DimmingRun@command:	
  3441                           ; 1 bytes @ 0x2
  3442                           
  3443  0022                     setLED@command:	
  3444                           ; 1 bytes @ 0x2
  3445                           
  3446  0022                     Flash_Memory_Read@address:	
  3447                           ; 1 bytes @ 0x2
  3448                           
  3449  0022                     setMemory_Data@address:	
  3450                           ; 1 bytes @ 0x2
  3451                           
  3452  0022                     _getRF_KeyStatus$5113:	
  3453                           ; 1 bytes @ 0x2
  3454                           
  3455  0022                     _getSw_KeyStatus$6170:	
  3456                           ; 1 bytes @ 0x2
  3457                           
  3458  0022                     _getAll_Sw_KeyStatus$6173:	
  3459                           ; 1 bytes @ 0x2
  3460                           
  3461  0022                     getMain_Lights_Count@status2:	
  3462                           ; 1 bytes @ 0x2
  3463                           
  3464  0022                     setCmd_Status@number:	
  3465                           ; 1 bytes @ 0x2
  3466                           
  3467  0022                     ___bmul@product:	
  3468                           ; 1 bytes @ 0x2
  3469                           
  3470  0022                     DelayTime_1us@i:	
  3471                           ; 1 bytes @ 0x2
  3472                           
  3473  0022                     ___wmul@multiplicand:	
  3474                           ; 2 bytes @ 0x2
  3475                           
  3476  0022                     ___awdiv@dividend:	
  3477                           ; 2 bytes @ 0x2
  3478                           
  3479  0022                     ___lwdiv@dividend:	
  3480                           ; 2 bytes @ 0x2
  3481                           
  3482                           
  3483                           ; 2 bytes @ 0x2
  3484  0022                     	ds	1
  3485  0023                     ??_CC2500_WriteREG:	
  3486  0023                     ??_setLED:	
  3487                           ; 0 bytes @ 0x3
  3488                           
  3489  0023                     ??_DelayOff_Initialization:	
  3490                           ; 0 bytes @ 0x3
  3491                           
  3492  0023                     ??_setDimmerLights_DimmingRun:	
  3493                           ; 0 bytes @ 0x3
  3494                           
  3495  0023                     ??_getAD:	
  3496                           ; 0 bytes @ 0x3
  3497                           
  3498  0023                     CC2500_WriteCommand@command:	
  3499                           ; 0 bytes @ 0x3
  3500                           
  3501  0023                     CC2500_ReadStatus@status_addr:	
  3502                           ; 1 bytes @ 0x3
  3503                           
  3504  0023                     getDelayOff_GO@go:	
  3505                           ; 1 bytes @ 0x3
  3506                           
  3507  0023                     getAll_DimmerIntr_Dimming_Sw_RF@status:	
  3508                           ; 1 bytes @ 0x3
  3509                           
  3510  0023                     _getDimmerLights_Allow_Condition$2418:	
  3511                           ; 1 bytes @ 0x3
  3512                           
  3513  0023                     getDimmerLights_Status@status:	
  3514                           ; 1 bytes @ 0x3
  3515                           
  3516  0023                     setLED@led:	
  3517                           ; 1 bytes @ 0x3
  3518                           
  3519  0023                     getAD@adcon0:	
  3520                           ; 1 bytes @ 0x3
  3521                           
  3522  0023                     Flash_Memory_Read@ret:	
  3523                           ; 1 bytes @ 0x3
  3524                           
  3525  0023                     getSw_KeyStatus@status:	
  3526                           ; 1 bytes @ 0x3
  3527                           
  3528  0023                     ___bmul@multiplier:	
  3529                           ; 1 bytes @ 0x3
  3530                           
  3531  0023                     ___ftpack@exp:	
  3532                           ; 1 bytes @ 0x3
  3533                           
  3534  0023                     _getMain_All_Error_Status$6914:	
  3535                           ; 1 bytes @ 0x3
  3536                           
  3537                           
  3538                           ; 2 bytes @ 0x3
  3539  0023                     	ds	1
  3540  0024                     ??_CC2500_ClearTXFIFO:	
  3541  0024                     ??_CC2500_ClearRXFIFO:	
  3542                           ; 0 bytes @ 0x4
  3543                           
  3544  0024                     ??_CC2500_SIDLEMode:	
  3545                           ; 0 bytes @ 0x4
  3546                           
  3547  0024                     ??_setLED_Initialization:	
  3548                           ; 0 bytes @ 0x4
  3549                           
  3550  0024                     ??_Flash_Memory_Modify:	
  3551                           ; 0 bytes @ 0x4
  3552                           
  3553  0024                     ??_RF_RxDisable:	
  3554                           ; 0 bytes @ 0x4
  3555                           
  3556  0024                     ??_setSw_Initialization:	
  3557                           ; 0 bytes @ 0x4
  3558                           
  3559  0024                     ??_CC2500_TxData:	
  3560                           ; 0 bytes @ 0x4
  3561                           
  3562  0024                     ??_CC2500_RxData:	
  3563                           ; 0 bytes @ 0x4
  3564                           
  3565  0024                     ??_Flash_Memory_Initialization:	
  3566                           ; 0 bytes @ 0x4
  3567                           
  3568  0024                     ??_getLoad_AD:	
  3569                           ; 0 bytes @ 0x4
  3570                           
  3571  0024                     ??_getTemp_AD:	
  3572                           ; 0 bytes @ 0x4
  3573                           
  3574  0024                     ??___wmul:	
  3575                           ; 0 bytes @ 0x4
  3576                           
  3577  0024                     ??___awdiv:	
  3578                           ; 0 bytes @ 0x4
  3579                           
  3580  0024                     ??___lwdiv:	
  3581                           ; 0 bytes @ 0x4
  3582                           
  3583  0024                     CC2500_WriteREG@w_addr:	
  3584                           ; 0 bytes @ 0x4
  3585                           
  3586  0024                     _getDimmerLights_Allow_Condition$2419:	
  3587                           ; 1 bytes @ 0x4
  3588                           
  3589  0024                     setDimmerLights_DimmingRun@lights:	
  3590                           ; 1 bytes @ 0x4
  3591                           
  3592  0024                     setLED_Initialization@led:	
  3593                           ; 1 bytes @ 0x4
  3594                           
  3595  0024                     setLED_Main@led:	
  3596                           ; 1 bytes @ 0x4
  3597                           
  3598  0024                     setSw_Initialization@sw:	
  3599                           ; 1 bytes @ 0x4
  3600                           
  3601  0024                     getSw_KeyStatus@sw:	
  3602                           ; 1 bytes @ 0x4
  3603                           
  3604  0024                     ___ftpack@sign:	
  3605                           ; 1 bytes @ 0x4
  3606                           
  3607  0024                     getBuz_GO@i:	
  3608                           ; 1 bytes @ 0x4
  3609                           
  3610  0024                     DelayTime_1us@j:	
  3611                           ; 2 bytes @ 0x4
  3612                           
  3613  0024                     ___wmul@product:	
  3614                           ; 2 bytes @ 0x4
  3615                           
  3616                           
  3617                           ; 2 bytes @ 0x4
  3618  0024                     	ds	1
  3619  0025                     ??_CC2500_InitSetREG:	
  3620  0025                     ??_CC2500_InitPATable:	
  3621                           ; 0 bytes @ 0x5
  3622                           
  3623  0025                     ??___ftpack:	
  3624                           ; 0 bytes @ 0x5
  3625                           
  3626  0025                     ??_LED_Initialization:	
  3627                           ; 0 bytes @ 0x5
  3628                           
  3629  0025                     ??_LED_Main:	
  3630                           ; 0 bytes @ 0x5
  3631                           
  3632  0025                     ??_Switch_Initialization:	
  3633                           ; 0 bytes @ 0x5
  3634                           
  3635  0025                     CC2500_TxData@loop_e:	
  3636                           ; 0 bytes @ 0x5
  3637                           
  3638  0025                     CC2500_RxData@loop_f:	
  3639                           ; 1 bytes @ 0x5
  3640                           
  3641  0025                     getDimmerLights_Allow_Condition@lights:	
  3642                           ; 1 bytes @ 0x5
  3643                           
  3644  0025                     Flash_Memory_Initialization@value:	
  3645                           ; 1 bytes @ 0x5
  3646                           
  3647  0025                     Flash_Memory_Modify@i:	
  3648                           ; 1 bytes @ 0x5
  3649                           
  3650  0025                     getTemp_AD@channel:	
  3651                           ; 1 bytes @ 0x5
  3652                           
  3653  0025                     getMain_All_Error_Status@command:	
  3654                           ; 1 bytes @ 0x5
  3655                           
  3656  0025                     ___awdiv@counter:	
  3657                           ; 1 bytes @ 0x5
  3658                           
  3659  0025                     ___lwdiv@quotient:	
  3660                           ; 1 bytes @ 0x5
  3661                           
  3662                           
  3663                           ; 2 bytes @ 0x5
  3664  0025                     	ds	1
  3665  0026                     ??_CC2500_PowerRST:	
  3666  0026                     ??_CC2500_FrequencyCabr:	
  3667                           ; 0 bytes @ 0x6
  3668                           
  3669  0026                     ??_Flash_Memory_Main:	
  3670                           ; 0 bytes @ 0x6
  3671                           
  3672  0026                     CC2500_InitSetREG@temp1:	
  3673                           ; 0 bytes @ 0x6
  3674                           
  3675  0026                     CC2500_InitPATable@temp:	
  3676                           ; 1 bytes @ 0x6
  3677                           
  3678  0026                     getDimmerLights_Allow_Condition@allow:	
  3679                           ; 1 bytes @ 0x6
  3680                           
  3681  0026                     getLoad_AD@channel:	
  3682                           ; 1 bytes @ 0x6
  3683                           
  3684  0026                     getMain_All_Error_Status@status:	
  3685                           ; 1 bytes @ 0x6
  3686                           
  3687  0026                     ___awdiv@sign:	
  3688                           ; 1 bytes @ 0x6
  3689                           
  3690  0026                     getTemp_AD@ADRES:	
  3691                           ; 1 bytes @ 0x6
  3692                           
  3693                           
  3694                           ; 2 bytes @ 0x6
  3695  0026                     	ds	1
  3696  0027                     CC2500_InitSetREG@temp2:	
  3697  0027                     CC2500_InitPATable@loop_d:	
  3698                           ; 1 bytes @ 0x7
  3699                           
  3700  0027                     Flash_Memory_Main@key_Status:	
  3701                           ; 1 bytes @ 0x7
  3702                           
  3703  0027                     getLoad_AD@k:	
  3704                           ; 1 bytes @ 0x7
  3705                           
  3706  0027                     ___lwdiv@counter:	
  3707                           ; 1 bytes @ 0x7
  3708                           
  3709  0027                     ___awdiv@quotient:	
  3710                           ; 1 bytes @ 0x7
  3711                           
  3712                           
  3713                           ; 2 bytes @ 0x7
  3714  0027                     	ds	1
  3715  0028                     ??_Load_Main:	
  3716  0028                     ?___awtoft:	
  3717                           ; 0 bytes @ 0x8
  3718                           
  3719  0028                     CC2500_InitSetREG@loop_c:	
  3720                           ; 3 bytes @ 0x8
  3721                           
  3722  0028                     _Flash_Memory_Main$3310:	
  3723                           ; 1 bytes @ 0x8
  3724                           
  3725  0028                     getLoad_AD@j:	
  3726                           ; 1 bytes @ 0x8
  3727                           
  3728  0028                     ___awtoft@c:	
  3729                           ; 1 bytes @ 0x8
  3730                           
  3731                           
  3732                           ; 2 bytes @ 0x8
  3733  0028                     	ds	1
  3734  0029                     ?_setBuz:	
  3735  0029                     ??_CC2500_PowerOnInitial:	
  3736                           ; 0 bytes @ 0x9
  3737                           
  3738  0029                     setBuz@time:	
  3739                           ; 0 bytes @ 0x9
  3740                           
  3741  0029                     getLoad_AD@ADRES:	
  3742                           ; 2 bytes @ 0x9
  3743                           
  3744                           
  3745                           ; 2 bytes @ 0x9
  3746  0029                     	ds	1
  3747  002A                     _Load_Main$3690:	
  3748                           
  3749                           ; 2 bytes @ 0xA
  3750  002A                     	ds	1
  3751  002B                     ??_setBuz:	
  3752  002B                     ??___awtoft:	
  3753                           ; 0 bytes @ 0xB
  3754                           
  3755  002B                     getLoad_AD@i:	
  3756                           ; 0 bytes @ 0xB
  3757                           
  3758                           
  3759                           ; 1 bytes @ 0xB
  3760  002B                     	ds	1
  3761  002C                     setBuz@count:	
  3762  002C                     Load_Main@error:	
  3763                           ; 1 bytes @ 0xC
  3764                           
  3765                           
  3766                           ; 1 bytes @ 0xC
  3767  002C                     	ds	1
  3768  002D                     ??_setDimmerLights_SwOn:	
  3769  002D                     ??_my_MainTimer:	
  3770                           ; 0 bytes @ 0xD
  3771                           
  3772  002D                     ??_Exception_Main:	
  3773                           ; 0 bytes @ 0xD
  3774                           
  3775  002D                     Load_Main@ErrorCountValue:	
  3776                           ; 0 bytes @ 0xD
  3777                           
  3778  002D                     ___awtoft@sign:	
  3779                           ; 1 bytes @ 0xD
  3780                           
  3781                           
  3782                           ; 1 bytes @ 0xD
  3783  002D                     	ds	1
  3784  002E                     ?___ftdiv:	
  3785  002E                     ?___ftmul:	
  3786                           ; 3 bytes @ 0xE
  3787                           
  3788  002E                     _setDimmerLights_SwOn$2340:	
  3789                           ; 3 bytes @ 0xE
  3790                           
  3791  002E                     Load_Main@Load_RunStatus:	
  3792                           ; 1 bytes @ 0xE
  3793                           
  3794  002E                     Exception_Main@status:	
  3795                           ; 1 bytes @ 0xE
  3796                           
  3797  002E                     ___ftdiv@f2:	
  3798                           ; 1 bytes @ 0xE
  3799                           
  3800  002E                     ___ftmul@f1:	
  3801                           ; 3 bytes @ 0xE
  3802                           
  3803                           
  3804                           ; 3 bytes @ 0xE
  3805  002E                     	ds	1
  3806  002F                     _setDimmerLights_SwOn$2349:	
  3807  002F                     Load_Main@LightsCount:	
  3808                           ; 1 bytes @ 0xF
  3809                           
  3810  002F                     Exception_Main@count:	
  3811                           ; 1 bytes @ 0xF
  3812                           
  3813                           
  3814                           ; 1 bytes @ 0xF
  3815  002F                     	ds	1
  3816  0030                     setDimmerLights_SwOn@idle:	
  3817  0030                     Load_Main@i:	
  3818                           ; 1 bytes @ 0x10
  3819                           
  3820  0030                     Exception_Main@i:	
  3821                           ; 2 bytes @ 0x10
  3822                           
  3823                           
  3824                           ; 2 bytes @ 0x10
  3825  0030                     	ds	1
  3826  0031                     setDimmerLights_SwOn@sw:	
  3827  0031                     ___ftdiv@f1:	
  3828                           ; 1 bytes @ 0x11
  3829                           
  3830  0031                     ___ftmul@f2:	
  3831                           ; 3 bytes @ 0x11
  3832                           
  3833                           
  3834                           ; 3 bytes @ 0x11
  3835  0031                     	ds	1
  3836  0032                     ??_setSw_Main:	
  3837  0032                     Exception_Main@i_6926:	
  3838                           ; 0 bytes @ 0x12
  3839                           
  3840                           
  3841                           ; 2 bytes @ 0x12
  3842  0032                     	ds	2
  3843  0034                     ??___ftdiv:	
  3844  0034                     ??___ftmul:	
  3845                           ; 0 bytes @ 0x14
  3846                           
  3847  0034                     setSw_Main@sw:	
  3848                           ; 0 bytes @ 0x14
  3849                           
  3850  0034                     Exception_Main@error:	
  3851                           ; 1 bytes @ 0x14
  3852                           
  3853                           
  3854                           ; 1 bytes @ 0x14
  3855  0034                     	ds	1
  3856  0035                     ??_Switch_Main:	
  3857  0035                     Exception_Main@lights:	
  3858                           ; 0 bytes @ 0x15
  3859                           
  3860                           
  3861                           ; 1 bytes @ 0x15
  3862  0035                     	ds	3
  3863  0038                     ___ftdiv@cntr:	
  3864  0038                     ___ftmul@exp:	
  3865                           ; 1 bytes @ 0x18
  3866                           
  3867                           
  3868                           ; 1 bytes @ 0x18
  3869  0038                     	ds	1
  3870  0039                     ___ftdiv@f3:	
  3871  0039                     ___ftmul@f3_as_product:	
  3872                           ; 3 bytes @ 0x19
  3873                           
  3874                           
  3875                           ; 3 bytes @ 0x19
  3876  0039                     	ds	3
  3877  003C                     ___ftdiv@exp:	
  3878  003C                     ___ftmul@cntr:	
  3879                           ; 1 bytes @ 0x1C
  3880                           
  3881                           
  3882                           ; 1 bytes @ 0x1C
  3883  003C                     	ds	1
  3884  003D                     ___ftdiv@sign:	
  3885  003D                     ___ftmul@sign:	
  3886                           ; 1 bytes @ 0x1D
  3887                           
  3888                           
  3889                           ; 1 bytes @ 0x1D
  3890  003D                     	ds	1
  3891  003E                     ?___ftneg:	
  3892  003E                     ___ftneg@f1:	
  3893                           ; 3 bytes @ 0x1E
  3894                           
  3895                           
  3896                           ; 3 bytes @ 0x1E
  3897  003E                     	ds	3
  3898  0041                     ??___ftneg:	
  3899  0041                     ?___ftadd:	
  3900                           ; 0 bytes @ 0x21
  3901                           
  3902  0041                     ___ftadd@f1:	
  3903                           ; 3 bytes @ 0x21
  3904                           
  3905                           
  3906                           ; 3 bytes @ 0x21
  3907  0041                     	ds	3
  3908  0044                     ___ftadd@f2:	
  3909                           
  3910                           ; 3 bytes @ 0x24
  3911  0044                     	ds	3
  3912  0047                     ??___ftadd:	
  3913                           
  3914                           ; 0 bytes @ 0x27
  3915  0047                     	ds	4
  3916  004B                     ___ftadd@sign:	
  3917                           
  3918                           ; 1 bytes @ 0x2B
  3919  004B                     	ds	1
  3920  004C                     ___ftadd@exp2:	
  3921                           
  3922                           ; 1 bytes @ 0x2C
  3923  004C                     	ds	1
  3924  004D                     ___ftadd@exp1:	
  3925                           
  3926                           ; 1 bytes @ 0x2D
  3927  004D                     	ds	1
  3928  004E                     ?___fttol:	
  3929  004E                     ___fttol@f1:	
  3930                           ; 4 bytes @ 0x2E
  3931                           
  3932                           
  3933                           ; 3 bytes @ 0x2E
  3934  004E                     	ds	4
  3935  0052                     ??___fttol:	
  3936                           
  3937                           ; 0 bytes @ 0x32
  3938  0052                     	ds	4
  3939  0056                     ___fttol@sign1:	
  3940                           
  3941                           ; 1 bytes @ 0x36
  3942  0056                     	ds	1
  3943  0057                     ___fttol@lval:	
  3944                           
  3945                           ; 4 bytes @ 0x37
  3946  0057                     	ds	4
  3947  005B                     ___fttol@exp1:	
  3948                           
  3949                           ; 1 bytes @ 0x3B
  3950  005B                     	ds	1
  3951  005C                     ??_getDimmerLights_ValueToPercent:	
  3952  005C                     ??_getDimmerLights_PercentToValue:	
  3953                           ; 0 bytes @ 0x3C
  3954                           
  3955                           
  3956                           ; 0 bytes @ 0x3C
  3957  005C                     	ds	2
  3958  005E                     getDimmerLights_PercentToValue@value:	
  3959  005E                     getDimmerLights_ValueToPercent@value:	
  3960                           ; 1 bytes @ 0x3E
  3961                           
  3962                           
  3963                           ; 1 bytes @ 0x3E
  3964  005E                     	ds	1
  3965  005F                     getDimmerLights_PercentToValue@i:	
  3966  005F                     getDimmerLights_ValueToPercent@i:	
  3967                           ; 3 bytes @ 0x3F
  3968                           
  3969                           
  3970                           ; 3 bytes @ 0x3F
  3971  005F                     	ds	3
  3972  0062                     ?_setProductData:	
  3973  0062                     ??_DimmerIntr_Initialization:	
  3974                           ; 0 bytes @ 0x42
  3975                           
  3976  0062                     ?_setDimmerIntr_DimmingValue:	
  3977                           ; 0 bytes @ 0x42
  3978                           
  3979  0062                     ?_setDimmerIntr_MaxmumValue:	
  3980                           ; 0 bytes @ 0x42
  3981                           
  3982  0062                     setDimmerIntr_DimmingValue@value:	
  3983                           ; 0 bytes @ 0x42
  3984                           
  3985  0062                     setDimmerIntr_MaxmumValue@value:	
  3986                           ; 1 bytes @ 0x42
  3987                           
  3988  0062                     setProductData@value:	
  3989                           ; 1 bytes @ 0x42
  3990                           
  3991                           
  3992                           ; 1 bytes @ 0x42
  3993  0062                     	ds	1
  3994  0063                     ??_setProductData:	
  3995  0063                     ??_setDimmerIntr_DimmingValue:	
  3996                           ; 0 bytes @ 0x43
  3997                           
  3998  0063                     ??_setDimmerIntr_MaxmumValue:	
  3999                           ; 0 bytes @ 0x43
  4000                           
  4001  0063                     ??_DimmerLights_Initialization:	
  4002                           ; 0 bytes @ 0x43
  4003                           
  4004                           
  4005                           ; 0 bytes @ 0x43
  4006  0063                     	ds	1
  4007  0064                     setDimmerIntr_DimmingValue@lights:	
  4008  0064                     setDimmerIntr_MaxmumValue@lights:	
  4009                           ; 1 bytes @ 0x44
  4010                           
  4011  0064                     setProductData@address:	
  4012                           ; 1 bytes @ 0x44
  4013                           
  4014                           
  4015                           ; 1 bytes @ 0x44
  4016  0064                     	ds	1
  4017  0065                     ??_DlyOff_Main:	
  4018  0065                     ?_setRF_DimmerLights:	
  4019                           ; 0 bytes @ 0x45
  4020                           
  4021  0065                     ??_setTemp_Main:	
  4022                           ; 0 bytes @ 0x45
  4023                           
  4024  0065                     ??_setLog_Code:	
  4025                           ; 0 bytes @ 0x45
  4026                           
  4027  0065                     ??_setRFSW_AdjControl:	
  4028                           ; 0 bytes @ 0x45
  4029                           
  4030  0065                     ?_setDelayOff_GO:	
  4031                           ; 0 bytes @ 0x45
  4032                           
  4033  0065                     setDelayOff_GO@command:	
  4034                           ; 0 bytes @ 0x45
  4035                           
  4036  0065                     setRF_DimmerLights@on:	
  4037                           ; 1 bytes @ 0x45
  4038                           
  4039                           
  4040                           ; 1 bytes @ 0x45
  4041  0065                     	ds	1
  4042  0066                     ??_setRF_DimmerLights:	
  4043  0066                     setDelayOff_GO@value:	
  4044                           ; 0 bytes @ 0x46
  4045                           
  4046  0066                     setTemp_Main@error:	
  4047                           ; 1 bytes @ 0x46
  4048                           
  4049                           
  4050                           ; 1 bytes @ 0x46
  4051  0066                     	ds	1
  4052  0067                     ??_setDelayOff_GO:	
  4053  0067                     DlyOff_Main@sw:	
  4054                           ; 0 bytes @ 0x47
  4055                           
  4056  0067                     setRFSW_AdjControl@status:	
  4057                           ; 1 bytes @ 0x47
  4058                           
  4059  0067                     setTemp_Main@SafeValue:	
  4060                           ; 1 bytes @ 0x47
  4061                           
  4062                           
  4063                           ; 2 bytes @ 0x47
  4064  0067                     	ds	1
  4065  0068                     ??_DelayOff_Main:	
  4066  0068                     setRFSW_AdjControl@sw:	
  4067                           ; 0 bytes @ 0x48
  4068                           
  4069  0068                     setRF_DimmerLights@status:	
  4070                           ; 1 bytes @ 0x48
  4071                           
  4072                           
  4073                           ; 1 bytes @ 0x48
  4074  0068                     	ds	1
  4075  0069                     setDelayOff_GO@i:	
  4076  0069                     setRF_DimmerLights@lights:	
  4077                           ; 1 bytes @ 0x49
  4078                           
  4079  0069                     setTemp_Main@DangerValue:	
  4080                           ; 1 bytes @ 0x49
  4081                           
  4082                           
  4083                           ; 2 bytes @ 0x49
  4084  0069                     	ds	1
  4085  006A                     ?_setDimmerLights_Dimming:	
  4086  006A                     setDelayOff_GO@j:	
  4087                           ; 0 bytes @ 0x4A
  4088                           
  4089  006A                     setDimmerLights_Dimming@status:	
  4090                           ; 1 bytes @ 0x4A
  4091                           
  4092                           
  4093                           ; 1 bytes @ 0x4A
  4094  006A                     	ds	1
  4095  006B                     ??_setDimmerLights_Dimming:	
  4096  006B                     setDelayOff_GO@k:	
  4097                           ; 0 bytes @ 0x4B
  4098                           
  4099  006B                     setTemp_Main@TempGO:	
  4100                           ; 1 bytes @ 0x4B
  4101                           
  4102                           
  4103                           ; 1 bytes @ 0x4B
  4104  006B                     	ds	1
  4105  006C                     setDelayOff_GO@sw:	
  4106  006C                     setDimmerLights_Dimming@value:	
  4107                           ; 1 bytes @ 0x4C
  4108                           
  4109  006C                     setTemp_Main@AD:	
  4110                           ; 1 bytes @ 0x4C
  4111                           
  4112                           
  4113                           ; 2 bytes @ 0x4C
  4114  006C                     	ds	1
  4115  006D                     ?_setDimmerLights_OnOff:	
  4116  006D                     ??_setRFSW_Control:	
  4117                           ; 0 bytes @ 0x4D
  4118                           
  4119  006D                     setDimmerLights_OnOff@command:	
  4120                           ; 0 bytes @ 0x4D
  4121                           
  4122  006D                     setDimmerLights_Dimming@lights:	
  4123                           ; 1 bytes @ 0x4D
  4124                           
  4125                           
  4126                           ; 1 bytes @ 0x4D
  4127  006D                     	ds	1
  4128  006E                     ??_setDimmerLights_OnOff:	
  4129  006E                     ??_Temp_Main:	
  4130                           ; 0 bytes @ 0x4E
  4131                           
  4132  006E                     setRFSW_Control@status:	
  4133                           ; 0 bytes @ 0x4E
  4134                           
  4135                           
  4136                           ; 1 bytes @ 0x4E
  4137  006E                     	ds	1
  4138  006F                     setRFSW_Control@sw:	
  4139                           
  4140                           ; 1 bytes @ 0x4F
  4141  006F                     	ds	1
  4142  0070                     ??_setDimmerLights_Main:	
  4143  0070                     ??_setControl_Lights_Table:	
  4144                           ; 0 bytes @ 0x50
  4145                           
  4146  0070                     ??_DimmerLights_Main:	
  4147                           ; 0 bytes @ 0x50
  4148                           
  4149  0070                     ??_RF_Main:	
  4150                           ; 0 bytes @ 0x50
  4151                           
  4152  0070                     ??_main:	
  4153                           ; 0 bytes @ 0x50
  4154                           
  4155                           
  4156                           	psect	maintext
  4157  1464                     __pmaintext:	
  4158                           ; 0 bytes @ 0x50
  4159 ;;
  4160 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4161 ;;
  4162 ;; *************** function _main *****************
  4163 ;; Defined at:
  4164 ;;		line 7 in file "../src/main_B1.c"
  4165 ;; Parameters:    Size  Location     Type
  4166 ;;  argc            2    4[BANK1 ] int 
  4167 ;;  argv            2    6[BANK1 ] PTR PTR unsigned char 
  4168 ;; Auto vars:     Size  Location     Type
  4169 ;;		None
  4170 ;; Return value:  Size  Location     Type
  4171 ;;                  2    4[BANK1 ] int 
  4172 ;; Registers used:
  4173 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4174 ;; Tracked objects:
  4175 ;;		On entry : 17F/0
  4176 ;;		On exit  : 0/0
  4177 ;;		Unchanged: 0/0
  4178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4179 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4182 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4183 ;;Total ram usage:        4 bytes
  4184 ;; Hardware stack levels required when called:   13
  4185 ;; This function calls:
  4186 ;;		_Buzzer_Initialization
  4187 ;;		_Buzzer_Main
  4188 ;;		_CC2500_PowerOnInitial
  4189 ;;		_DelayOff_Initialization
  4190 ;;		_DelayOff_Main
  4191 ;;		_DimmerLights_Initialization
  4192 ;;		_DimmerLights_Main
  4193 ;;		_Exception_Main
  4194 ;;		_Flash_Memory_Initialization
  4195 ;;		_Flash_Memory_Main
  4196 ;;		_LED_Initialization
  4197 ;;		_LED_Main
  4198 ;;		_Load_Initialization
  4199 ;;		_Load_Main
  4200 ;;		_Mcu_Initialization
  4201 ;;		_RF_Initialization
  4202 ;;		_RF_Main
  4203 ;;		_Switch_Initialization
  4204 ;;		_Switch_Main
  4205 ;;		_Temp_Initialization
  4206 ;;		_Temp_Main
  4207 ;;		_WDT_Main
  4208 ;;		_getLoad_AD
  4209 ;;		_getTemp_AD
  4210 ;;		_myMain_Initialization
  4211 ;;		_my_MainTimer
  4212 ;; This function is called by:
  4213 ;;		Startup code after reset
  4214 ;; This function uses a non-reentrant model
  4215 ;;
  4216                           
  4217                           
  4218                           ;psect for function _main
  4219  1464                     _main:	
  4220                           
  4221                           ;main_B1.c: 8: myMain_Initialization();
  4222                           
  4223                           ;incstack = 0
  4224                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4225  1464  319B  230F  3194   	fcall	_myMain_Initialization
  4226                           
  4227                           ;main_B1.c: 9: Mcu_Initialization();
  4228  1467  319A  229F  3194   	fcall	_Mcu_Initialization
  4229                           
  4230                           ;main_B1.c: 10: Flash_Memory_Initialization();
  4231  146A  3186  26FB  3194   	fcall	_Flash_Memory_Initialization
  4232                           
  4233                           ;main_B1.c: 11: LED_Initialization();
  4234  146D  3199  21AA  3194   	fcall	_LED_Initialization
  4235                           
  4236                           ;main_B1.c: 12: Buzzer_Initialization();
  4237  1470  3198  20C0  3194   	fcall	_Buzzer_Initialization
  4238                           
  4239                           ;main_B1.c: 14: ;;
  4240                           ;main_B1.c: 15: Temp_Initialization();
  4241  1473  3198  20CC  3194   	fcall	_Temp_Initialization
  4242                           
  4243                           ;main_B1.c: 16: Load_Initialization();
  4244  1476  3198  20C3  3194   	fcall	_Load_Initialization
  4245                           
  4246                           ;main_B1.c: 17: ;;
  4247                           ;main_B1.c: 18: DelayOff_Initialization();
  4248  1479  3199  2104  3194   	fcall	_DelayOff_Initialization
  4249                           
  4250                           ;main_B1.c: 20: DimmerLights_Initialization();
  4251  147C  3199  214E  3194   	fcall	_DimmerLights_Initialization
  4252                           
  4253                           ;main_B1.c: 21: ;;
  4254                           ;main_B1.c: 22: ;;
  4255                           ;main_B1.c: 23: ;;
  4256                           ;main_B1.c: 24: Switch_Initialization();
  4257  147F  3199  2134  3194   	fcall	_Switch_Initialization
  4258                           
  4259                           ;main_B1.c: 25: RF_Initialization();
  4260  1482  3198  20C6  3194   	fcall	_RF_Initialization
  4261                           
  4262                           ;main_B1.c: 26: CC2500_PowerOnInitial();
  4263  1485  319B  235F  3194   	fcall	_CC2500_PowerOnInitial
  4264  1488                     l9187:	
  4265                           ;main_B1.c: 27: ;;
  4266                           ;main_B1.c: 28: ;;
  4267                           ;main_B1.c: 30: while (1) {
  4268                           
  4269                           
  4270                           ;main_B1.c: 32: if (myMain.PowerON == 1) {
  4271  1488  0021               	movlb	1	; select bank1
  4272  1489  1C2E               	btfss	_myMain^(0+128),0
  4273  148A  2C93               	goto	l9191
  4274                           
  4275                           ;main_B1.c: 38: getLoad_AD(0x05);
  4276  148B  3005               	movlw	5
  4277  148C  318A  221D  3194   	fcall	_getLoad_AD
  4278                           
  4279                           ;main_B1.c: 42: getTemp_AD(0x09);
  4280  148F  3009               	movlw	9
  4281  1490  3191  21BE  3194   	fcall	_getTemp_AD
  4282  1493                     l9191:	
  4283                           
  4284                           ;main_B1.c: 57: }
  4285                           ;main_B1.c: 93: if (Timer1.Timeout == 1) {
  4286  1493  0022               	movlb	2	; select bank2
  4287  1494  1C31               	btfss	_Timer1^(0+256),0
  4288  1495  2C88               	goto	l9187
  4289                           
  4290                           ;main_B1.c: 94: Timer1.Timeout = 0;
  4291  1496  1031               	bcf	_Timer1^(0+256),0
  4292                           
  4293                           ;main_B1.c: 96: my_MainTimer();
  4294  1497  3191  2104  3194   	fcall	_my_MainTimer
  4295                           
  4296                           ;main_B1.c: 97: WDT_Main();
  4297  149A  319A  22B1  3194   	fcall	_WDT_Main
  4298                           
  4299                           ;main_B1.c: 98: ;;
  4300                           ;main_B1.c: 99: ;;
  4301                           ;main_B1.c: 100: if (myMain.PowerON == 1) {
  4302  149D  0021               	movlb	1	; select bank1
  4303  149E  1C2E               	btfss	_myMain^(0+128),0
  4304  149F  2C88               	goto	l9187
  4305                           
  4306                           ;main_B1.c: 101: Flash_Memory_Main();
  4307  14A0  3191  21FE  3194   	fcall	_Flash_Memory_Main
  4308                           
  4309                           ;main_B1.c: 103: LED_Main();
  4310  14A3  3199  21B6  3194   	fcall	_LED_Main
  4311                           
  4312                           ;main_B1.c: 104: Buzzer_Main();
  4313  14A6  3192  22C4  3194   	fcall	_Buzzer_Main
  4314                           
  4315                           ;main_B1.c: 106: ;;
  4316                           ;main_B1.c: 107: Temp_Main();
  4317  14A9  3198  20CF  3194   	fcall	_Temp_Main
  4318                           
  4319                           ;main_B1.c: 108: Load_Main();
  4320  14AC  3180  2052  3194   	fcall	_Load_Main
  4321                           
  4322                           ;main_B1.c: 109: ;;
  4323                           ;main_B1.c: 111: ;;
  4324                           ;main_B1.c: 112: DimmerLights_Main();
  4325  14AF  319D  2595  3194   	fcall	_DimmerLights_Main
  4326                           
  4327                           ;main_B1.c: 113: Switch_Main();
  4328  14B2  3199  216F  3194   	fcall	_Switch_Main
  4329                           
  4330                           ;main_B1.c: 114: ;;
  4331                           ;main_B1.c: 115: ;;
  4332                           ;main_B1.c: 117: RF_Main();
  4333  14B5  3198  20C9  3194   	fcall	_RF_Main
  4334                           
  4335                           ;main_B1.c: 118: DelayOff_Main();
  4336  14B8  3199  210C  3194   	fcall	_DelayOff_Main
  4337                           
  4338                           ;main_B1.c: 119: ;;
  4339                           ;main_B1.c: 120: ;;
  4340                           ;main_B1.c: 121: Exception_Main();
  4341  14BB  3184  247E  3194   	fcall	_Exception_Main
  4342  14BE  2C88               	goto	l9187
  4343  14BF                     __end_of_main:	
  4344                           ;main_B1.c: 128: }
  4345                           ;main_B1.c: 129: }
  4346                           ;main_B1.c: 163: }
  4347                           ;main_B1.c: 164: return (0);
  4348                           ;	Return value of _main is never used
  4349                           
  4350                           
  4351                           	psect	text1
  4352  1104                     __ptext1:	
  4353 ;; *************** function _my_MainTimer *****************
  4354 ;; Defined at:
  4355 ;;		line 185 in file "../src/main_B1.c"
  4356 ;; Parameters:    Size  Location     Type
  4357 ;;		None
  4358 ;; Auto vars:     Size  Location     Type
  4359 ;;		None
  4360 ;; Return value:  Size  Location     Type
  4361 ;;		None               void
  4362 ;; Registers used:
  4363 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4364 ;; Tracked objects:
  4365 ;;		On entry : 0/0
  4366 ;;		On exit  : 0/0
  4367 ;;		Unchanged: 0/0
  4368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4371 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4372 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4373 ;;Total ram usage:        1 bytes
  4374 ;; Hardware stack levels used:    1
  4375 ;; Hardware stack levels required when called:    7
  4376 ;; This function calls:
  4377 ;;		_setBuz
  4378 ;; This function is called by:
  4379 ;;		_main
  4380 ;; This function uses a non-reentrant model
  4381 ;;
  4382                           
  4383                           
  4384                           ;psect for function _my_MainTimer
  4385  1104                     _my_MainTimer:	
  4386                           
  4387                           ;main_B1.c: 187: if (myMain.PowerON == 0) {
  4388                           
  4389                           ;incstack = 0
  4390                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4391  1104  0021               	movlb	1	; select bank1
  4392  1105  182E               	btfsc	_myMain^(0+128),0
  4393  1106  291E               	goto	l8945
  4394                           
  4395                           ;main_B1.c: 188: myMain.PowerCount++;
  4396  1107  3001               	movlw	1
  4397  1108  0020               	movlb	0	; select bank0
  4398  1109  00AD               	movwf	??_my_MainTimer
  4399  110A  082D               	movf	??_my_MainTimer,w
  4400  110B  0021               	movlb	1	; select bank1
  4401  110C  07AF               	addwf	(_myMain^(0+128)+1),f
  4402                           
  4403                           ;main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  4404  110D  082F               	movf	(_myMain^(0+128)+1),w
  4405  110E  3A4B               	xorlw	75
  4406  110F  1D03               	skipz
  4407  1110  0008               	return
  4408                           
  4409                           ;main_B1.c: 190: myMain.PowerCount = 0;
  4410  1111  01AF               	clrf	(_myMain^(0+128)+1)
  4411                           
  4412                           ;main_B1.c: 191: myMain.PowerON = 1;
  4413  1112  142E               	bsf	_myMain^(0+128),0
  4414                           
  4415                           ;main_B1.c: 196: setBuz(3, 50);
  4416  1113  3032               	movlw	50
  4417  1114  0020               	movlb	0	; select bank0
  4418  1115  00A9               	movwf	setBuz@time
  4419  1116  3000               	movlw	0
  4420  1117  00AA               	movwf	setBuz@time+1
  4421  1118  3003               	movlw	3
  4422  1119  3194  240B         	fcall	_setBuz
  4423                           
  4424                           ;main_B1.c: 197: myMain.SelfTest = 1;
  4425  111B  0021               	movlb	1	; select bank1
  4426  111C  162E               	bsf	_myMain^(0+128),4
  4427                           
  4428                           ;main_B1.c: 206: }
  4429                           ;main_B1.c: 207: } else {
  4430  111D  0008               	return
  4431  111E                     l8945:	
  4432                           
  4433                           ;main_B1.c: 208: myMain.PowerCount++;
  4434  111E  3001               	movlw	1
  4435  111F  0020               	movlb	0	; select bank0
  4436  1120  00AD               	movwf	??_my_MainTimer
  4437  1121  082D               	movf	??_my_MainTimer,w
  4438  1122  0021               	movlb	1	; select bank1
  4439  1123  07AF               	addwf	(_myMain^(0+128)+1),f
  4440                           
  4441                           ;main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  4442  1124  082F               	movf	(_myMain^(0+128)+1),w
  4443  1125  3A32               	xorlw	50
  4444  1126  1903               	btfsc	3,2
  4445                           
  4446                           ;main_B1.c: 210: myMain.PowerCount = 0;
  4447  1127  01AF               	clrf	(_myMain^(0+128)+1)
  4448                           
  4449                           ;main_B1.c: 226: }
  4450                           ;main_B1.c: 228: myMain.Count1++;
  4451  1128  3001               	movlw	1
  4452  1129  07B2               	addwf	(_myMain^(0+128)+4),f
  4453  112A  3000               	movlw	0
  4454  112B  3DB3               	addwfc	((_myMain+1)^(0+128)+4),f
  4455                           
  4456                           ;main_B1.c: 229: if (myMain.Count1 == (1000 / 20)) {
  4457  112C  3004               	movlw	4
  4458  112D  3EAE               	addlw	_myMain& (0+255)
  4459  112E  0086               	movwf	6
  4460  112F  0187               	clrf	7
  4461  1130  3F40               	moviw [0]fsr1
  4462  1131  3A32               	xorlw	50
  4463  1132  1D03               	skipz
  4464  1133  2936               	goto	u9835
  4465  1134  3F41               	moviw [1]fsr1
  4466  1135  3A00               	xorlw	0
  4467  1136                     u9835:	
  4468  1136  1D03               	skipz
  4469  1137  0008               	return
  4470                           
  4471                           ;main_B1.c: 230: myMain.Count1 = 0;
  4472  1138  01B2               	clrf	(_myMain^(0+128)+4)
  4473  1139  01B3               	clrf	((_myMain+1)^(0+128)+4)
  4474                           
  4475                           ;main_B1.c: 242: if (myMain.Flag) {
  4476  113A  1CAE               	btfss	_myMain^(0+128),1
  4477  113B  293E               	goto	l2861
  4478                           
  4479                           ;main_B1.c: 243: myMain.Flag = 0;
  4480  113C  10AE               	bcf	_myMain^(0+128),1
  4481                           
  4482                           ;main_B1.c: 252: } else {
  4483  113D  0008               	return
  4484  113E                     l2861:	
  4485                           
  4486                           ;main_B1.c: 253: myMain.Flag = 1;
  4487  113E  14AE               	bsf	_myMain^(0+128),1
  4488  113F  0008               	return
  4489  1140                     __end_of_my_MainTimer:	
  4490                           
  4491                           	psect	text2
  4492  1B0F                     __ptext2:	
  4493 ;; *************** function _myMain_Initialization *****************
  4494 ;; Defined at:
  4495 ;;		line 170 in file "../src/main_B1.c"
  4496 ;; Parameters:    Size  Location     Type
  4497 ;;		None
  4498 ;; Auto vars:     Size  Location     Type
  4499 ;;		None
  4500 ;; Return value:  Size  Location     Type
  4501 ;;		None               void
  4502 ;; Registers used:
  4503 ;;		wreg, fsr1l, fsr1h
  4504 ;; Tracked objects:
  4505 ;;		On entry : 0/0
  4506 ;;		On exit  : 0/0
  4507 ;;		Unchanged: 0/0
  4508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4510 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4511 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4512 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4513 ;;Total ram usage:        1 bytes
  4514 ;; Hardware stack levels used:    1
  4515 ;; Hardware stack levels required when called:    5
  4516 ;; This function calls:
  4517 ;;		Nothing
  4518 ;; This function is called by:
  4519 ;;		_main
  4520 ;; This function uses a non-reentrant model
  4521 ;;
  4522                           
  4523                           
  4524                           ;psect for function _myMain_Initialization
  4525  1B0F                     _myMain_Initialization:	
  4526                           
  4527                           ;main_B1.c: 173: product = &_product;
  4528                           
  4529                           ;incstack = 0
  4530                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4531  1B0F  3045               	movlw	__product& (0+255)
  4532  1B10  0020               	movlb	0	; select bank0
  4533  1B11  00A0               	movwf	??_myMain_Initialization
  4534  1B12  0820               	movf	??_myMain_Initialization,w
  4535  1B13  0021               	movlb	1	; select bank1
  4536  1B14  00EF               	movwf	_product^(0+128)
  4537                           
  4538                           ;main_B1.c: 174: product->Data[20] = 210;
  4539  1B15  30D2               	movlw	210
  4540  1B16  0020               	movlb	0	; select bank0
  4541  1B17  00A0               	movwf	??_myMain_Initialization
  4542  1B18  0021               	movlb	1	; select bank1
  4543  1B19  086F               	movf	_product^(0+128),w
  4544  1B1A  3E14               	addlw	20
  4545  1B1B  0086               	movwf	6
  4546  1B1C  3002               	movlw	2	; select bank4/5
  4547  1B1D  0087               	movwf	7
  4548  1B1E  0020               	movlb	0	; select bank0
  4549  1B1F  0820               	movf	??_myMain_Initialization,w
  4550  1B20  0081               	movwf	1
  4551  1B21  0008               	return
  4552  1B22                     __end_of_myMain_Initialization:	
  4553                           
  4554                           	psect	text3
  4555  11BE                     __ptext3:	
  4556 ;; *************** function _getTemp_AD *****************
  4557 ;; Defined at:
  4558 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4559 ;; Parameters:    Size  Location     Type
  4560 ;;  channel         1    wreg     unsigned char 
  4561 ;; Auto vars:     Size  Location     Type
  4562 ;;  channel         1    5[BANK0 ] unsigned char 
  4563 ;;  ADRES           2    6[BANK0 ] unsigned int 
  4564 ;; Return value:  Size  Location     Type
  4565 ;;		None               void
  4566 ;; Registers used:
  4567 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4568 ;; Tracked objects:
  4569 ;;		On entry : 0/0
  4570 ;;		On exit  : 0/0
  4571 ;;		Unchanged: 0/0
  4572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4574 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4575 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4576 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4577 ;;Total ram usage:        4 bytes
  4578 ;; Hardware stack levels used:    1
  4579 ;; Hardware stack levels required when called:    7
  4580 ;; This function calls:
  4581 ;;		_getAD
  4582 ;; This function is called by:
  4583 ;;		_main
  4584 ;; This function uses a non-reentrant model
  4585 ;;
  4586                           
  4587                           
  4588                           ;psect for function _getTemp_AD
  4589  11BE                     _getTemp_AD:	
  4590                           
  4591                           ;incstack = 0
  4592                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4593                           ;getTemp_AD@channel stored from wreg
  4594  11BE  0020               	movlb	0	; select bank0
  4595  11BF  00A5               	movwf	getTemp_AD@channel
  4596                           
  4597                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  4598  11C0  01A6               	clrf	getTemp_AD@ADRES
  4599  11C1  01A7               	clrf	getTemp_AD@ADRES+1
  4600                           
  4601                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  4602  11C2  0021               	movlb	1	; select bank1
  4603  11C3  1D5C               	btfss	_Temp^(0+128),2
  4604  11C4  29EE               	goto	l8915
  4605                           
  4606                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0xf0);
  4607  11C5  30F0               	movlw	240
  4608  11C6  0020               	movlb	0	; select bank0
  4609  11C7  00A4               	movwf	??_getTemp_AD
  4610  11C8  0824               	movf	??_getTemp_AD,w
  4611  11C9  00A0               	movwf	getAD@adcon1
  4612  11CA  0825               	movf	getTemp_AD@channel,w
  4613  11CB  319D  25B5  3191   	fcall	_getAD
  4614  11CE  0020               	movlb	0	; select bank0
  4615  11CF  0821               	movf	?_getAD+1,w
  4616  11D0  01A7               	clrf	getTemp_AD@ADRES+1
  4617  11D1  07A7               	addwf	getTemp_AD@ADRES+1,f
  4618  11D2  0820               	movf	?_getAD,w
  4619  11D3  01A6               	clrf	getTemp_AD@ADRES
  4620  11D4  07A6               	addwf	getTemp_AD@ADRES,f
  4621                           
  4622                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  4623  11D5  0827               	movf	getTemp_AD@ADRES+1,w
  4624  11D6  0426               	iorwf	getTemp_AD@ADRES,w
  4625  11D7  1903               	skipnz
  4626  11D8  29EE               	goto	l8915
  4627                           
  4628                           ;OverTemperature_B1.c: 30: if (Temp.ADV < ADRES) {
  4629  11D9  0827               	movf	getTemp_AD@ADRES+1,w
  4630  11DA  0021               	movlb	1	; select bank1
  4631  11DB  0265               	subwf	((_Temp+1)^(0+128)+8),w
  4632  11DC  1D03               	skipz
  4633  11DD  29E2               	goto	u9795
  4634  11DE  0020               	movlb	0	; select bank0
  4635  11DF  0826               	movf	getTemp_AD@ADRES,w
  4636  11E0  0021               	movlb	1	; select bank1
  4637  11E1  0264               	subwf	(_Temp^(0+128)+8),w
  4638  11E2                     u9795:	
  4639  11E2  1803               	skipnc
  4640  11E3  29EE               	goto	l8915
  4641                           
  4642                           ;OverTemperature_B1.c: 31: Temp.ADV = ADRES;
  4643  11E4  0020               	movlb	0	; select bank0
  4644  11E5  0827               	movf	getTemp_AD@ADRES+1,w
  4645  11E6  0021               	movlb	1	; select bank1
  4646  11E7  01E5               	clrf	((_Temp+1)^(0+128)+8)
  4647  11E8  07E5               	addwf	((_Temp+1)^(0+128)+8),f
  4648  11E9  0020               	movlb	0	; select bank0
  4649  11EA  0826               	movf	getTemp_AD@ADRES,w
  4650  11EB  0021               	movlb	1	; select bank1
  4651  11EC  01E4               	clrf	(_Temp^(0+128)+8)
  4652  11ED  07E4               	addwf	(_Temp^(0+128)+8),f
  4653  11EE                     l8915:	
  4654                           
  4655                           ;OverTemperature_B1.c: 32: }
  4656                           ;OverTemperature_B1.c: 33: }
  4657                           ;OverTemperature_B1.c: 34: }
  4658                           ;OverTemperature_B1.c: 41: ADRES = getAD(channel, 0xf0);
  4659  11EE  30F0               	movlw	240
  4660  11EF  0020               	movlb	0	; select bank0
  4661  11F0  00A4               	movwf	??_getTemp_AD
  4662  11F1  0824               	movf	??_getTemp_AD,w
  4663  11F2  00A0               	movwf	getAD@adcon1
  4664  11F3  0825               	movf	getTemp_AD@channel,w
  4665  11F4  319D  25B5         	fcall	_getAD
  4666  11F6  0020               	movlb	0	; select bank0
  4667  11F7  0821               	movf	?_getAD+1,w
  4668  11F8  01A7               	clrf	getTemp_AD@ADRES+1
  4669  11F9  07A7               	addwf	getTemp_AD@ADRES+1,f
  4670  11FA  0820               	movf	?_getAD,w
  4671  11FB  01A6               	clrf	getTemp_AD@ADRES
  4672  11FC  07A6               	addwf	getTemp_AD@ADRES,f
  4673  11FD  0008               	return
  4674  11FE                     __end_of_getTemp_AD:	
  4675                           
  4676                           	psect	text4
  4677  0A1D                     __ptext4:	
  4678 ;; *************** function _getLoad_AD *****************
  4679 ;; Defined at:
  4680 ;;		line 15 in file "../src/OverLoad_B1.c"
  4681 ;; Parameters:    Size  Location     Type
  4682 ;;  channel         1    wreg     unsigned char 
  4683 ;; Auto vars:     Size  Location     Type
  4684 ;;  channel         1    6[BANK0 ] unsigned char 
  4685 ;;  ADRES           2    9[BANK0 ] unsigned int 
  4686 ;;  i               1   11[BANK0 ] unsigned char 
  4687 ;;  j               1    8[BANK0 ] unsigned char 
  4688 ;;  k               1    7[BANK0 ] unsigned char 
  4689 ;; Return value:  Size  Location     Type
  4690 ;;		None               void
  4691 ;; Registers used:
  4692 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4693 ;; Tracked objects:
  4694 ;;		On entry : 0/0
  4695 ;;		On exit  : 0/0
  4696 ;;		Unchanged: 0/0
  4697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4699 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4700 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4701 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4702 ;;Total ram usage:        8 bytes
  4703 ;; Hardware stack levels used:    1
  4704 ;; Hardware stack levels required when called:    7
  4705 ;; This function calls:
  4706 ;;		_getAD
  4707 ;; This function is called by:
  4708 ;;		_main
  4709 ;; This function uses a non-reentrant model
  4710 ;;
  4711                           
  4712                           
  4713                           ;psect for function _getLoad_AD
  4714  0A1D                     _getLoad_AD:	
  4715                           
  4716                           ;incstack = 0
  4717                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4718                           ;getLoad_AD@channel stored from wreg
  4719  0A1D  0020               	movlb	0	; select bank0
  4720  0A1E  00A6               	movwf	getLoad_AD@channel
  4721                           
  4722                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4723  0A1F  01AB               	clrf	getLoad_AD@i
  4724  0A20  01A8               	clrf	getLoad_AD@j
  4725  0A21  01A7               	clrf	getLoad_AD@k
  4726                           
  4727                           ;OverLoad_B1.c: 17: ADtype ADRES = 0;
  4728  0A22  01A9               	clrf	getLoad_AD@ADRES
  4729  0A23  01AA               	clrf	getLoad_AD@ADRES+1
  4730                           
  4731                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4732  0A24  0022               	movlb	2	; select bank2
  4733  0A25  1E3F               	btfss	_Load^(0+256),4
  4734  0A26  0008               	return
  4735                           
  4736                           ;OverLoad_B1.c: 20: ADRES = getAD(channel, 0xf3);
  4737  0A27  30F3               	movlw	243
  4738  0A28  0020               	movlb	0	; select bank0
  4739  0A29  00A4               	movwf	??_getLoad_AD
  4740  0A2A  0824               	movf	??_getLoad_AD,w
  4741  0A2B  00A0               	movwf	getAD@adcon1
  4742  0A2C  0826               	movf	getLoad_AD@channel,w
  4743  0A2D  319D  25B5  318A   	fcall	_getAD
  4744  0A30  0020               	movlb	0	; select bank0
  4745  0A31  0821               	movf	?_getAD+1,w
  4746  0A32  01AA               	clrf	getLoad_AD@ADRES+1
  4747  0A33  07AA               	addwf	getLoad_AD@ADRES+1,f
  4748  0A34  0820               	movf	?_getAD,w
  4749  0A35  01A9               	clrf	getLoad_AD@ADRES
  4750  0A36  07A9               	addwf	getLoad_AD@ADRES,f
  4751                           
  4752                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4753  0A37  01AB               	clrf	getLoad_AD@i
  4754  0A38  3004               	movlw	4
  4755  0A39  022B               	subwf	getLoad_AD@i,w
  4756  0A3A  1803               	btfsc	3,0
  4757  0A3B  2A63               	goto	l8725
  4758  0A3C                     l8713:	
  4759                           
  4760                           ;OverLoad_B1.c: 22: if (Load.AH[i] < ADRES && j == 0) {
  4761  0A3C  352B               	lslf	getLoad_AD@i,w
  4762  0A3D  3E4A               	addlw	(_Load+11)& (0+255)
  4763  0A3E  0086               	movwf	6
  4764  0A3F  3001               	movlw	1	; select bank2/3
  4765  0A40  0087               	movwf	7
  4766  0A41  3F40               	moviw [0]fsr1
  4767  0A42  00A4               	movwf	??_getLoad_AD
  4768  0A43  3F41               	moviw [1]fsr1
  4769  0A44  00A5               	movwf	??_getLoad_AD+1
  4770  0A45  082A               	movf	getLoad_AD@ADRES+1,w
  4771  0A46  0225               	subwf	??_getLoad_AD+1,w
  4772  0A47  1D03               	skipz
  4773  0A48  2A4B               	goto	u9385
  4774  0A49  0829               	movf	getLoad_AD@ADRES,w
  4775  0A4A  0224               	subwf	??_getLoad_AD,w
  4776  0A4B                     u9385:	
  4777  0A4B  1803               	skipnc
  4778  0A4C  2A5B               	goto	l8721
  4779  0A4D  08A8               	movf	getLoad_AD@j,f
  4780  0A4E  1D03               	skipz
  4781  0A4F  2A5B               	goto	l8721
  4782                           
  4783                           ;OverLoad_B1.c: 23: Load.AH[i] = ADRES;
  4784  0A50  352B               	lslf	getLoad_AD@i,w
  4785  0A51  3E4A               	addlw	(_Load+11)& (0+255)
  4786  0A52  0086               	movwf	6
  4787  0A53  3001               	movlw	1	; select bank2/3
  4788  0A54  0087               	movwf	7
  4789  0A55  0829               	movf	getLoad_AD@ADRES,w
  4790  0A56  3FC0               	movwi [0]fsr1
  4791  0A57  082A               	movf	getLoad_AD@ADRES+1,w
  4792  0A58  3FC1               	movwi [1]fsr1
  4793                           
  4794                           ;OverLoad_B1.c: 24: j = 1;
  4795  0A59  01A8               	clrf	getLoad_AD@j
  4796  0A5A  0AA8               	incf	getLoad_AD@j,f
  4797  0A5B                     l8721:	
  4798  0A5B  3001               	movlw	1
  4799  0A5C  00A4               	movwf	??_getLoad_AD
  4800  0A5D  0824               	movf	??_getLoad_AD,w
  4801  0A5E  07AB               	addwf	getLoad_AD@i,f
  4802  0A5F  3004               	movlw	4
  4803  0A60  022B               	subwf	getLoad_AD@i,w
  4804  0A61  1C03               	skipc
  4805  0A62  2A3C               	goto	l8713
  4806  0A63                     l8725:	
  4807                           
  4808                           ;OverLoad_B1.c: 25: }
  4809                           ;OverLoad_B1.c: 26: }
  4810                           ;OverLoad_B1.c: 27: if (j == 0) {
  4811  0A63  08A8               	movf	getLoad_AD@j,f
  4812  0A64  1D03               	skipz
  4813  0A65  0008               	return
  4814                           
  4815                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4816  0A66  01AB               	clrf	getLoad_AD@i
  4817  0A67                     L1:	
  4818  0A67  3004               	movlw	4
  4819  0A68  022B               	subwf	getLoad_AD@i,w
  4820  0A69  1803               	btfsc	3,0
  4821  0A6A  0008               	return
  4822                           
  4823                           ;OverLoad_B1.c: 29: if (Load.AL[i] > ADRES && k == 0) {
  4824  0A6B  352B               	lslf	getLoad_AD@i,w
  4825  0A6C  3E54               	addlw	(_Load+21)& (0+255)
  4826  0A6D  0086               	movwf	6
  4827  0A6E  3001               	movlw	1	; select bank2/3
  4828  0A6F  0087               	movwf	7
  4829  0A70  3F40               	moviw [0]fsr1
  4830  0A71  00A4               	movwf	??_getLoad_AD
  4831  0A72  3F41               	moviw [1]fsr1
  4832  0A73  00A5               	movwf	??_getLoad_AD+1
  4833  0A74  0825               	movf	??_getLoad_AD+1,w
  4834  0A75  022A               	subwf	getLoad_AD@ADRES+1,w
  4835  0A76  1D03               	skipz
  4836  0A77  2A7A               	goto	u9435
  4837  0A78  0824               	movf	??_getLoad_AD,w
  4838  0A79  0229               	subwf	getLoad_AD@ADRES,w
  4839  0A7A                     u9435:	
  4840  0A7A  1803               	skipnc
  4841  0A7B  2A8A               	goto	l8741
  4842  0A7C  08A7               	movf	getLoad_AD@k,f
  4843  0A7D  1D03               	skipz
  4844  0A7E  2A8A               	goto	l8741
  4845                           
  4846                           ;OverLoad_B1.c: 30: Load.AL[i] = ADRES;
  4847  0A7F  352B               	lslf	getLoad_AD@i,w
  4848  0A80  3E54               	addlw	(_Load+21)& (0+255)
  4849  0A81  0086               	movwf	6
  4850  0A82  3001               	movlw	1	; select bank2/3
  4851  0A83  0087               	movwf	7
  4852  0A84  0829               	movf	getLoad_AD@ADRES,w
  4853  0A85  3FC0               	movwi [0]fsr1
  4854  0A86  082A               	movf	getLoad_AD@ADRES+1,w
  4855  0A87  3FC1               	movwi [1]fsr1
  4856                           
  4857                           ;OverLoad_B1.c: 31: k = 1;
  4858  0A88  01A7               	clrf	getLoad_AD@k
  4859  0A89  0AA7               	incf	getLoad_AD@k,f
  4860  0A8A                     l8741:	
  4861  0A8A  3001               	movlw	1
  4862  0A8B  00A4               	movwf	??_getLoad_AD
  4863  0A8C  0824               	movf	??_getLoad_AD,w
  4864  0A8D  07AB               	addwf	getLoad_AD@i,f
  4865  0A8E  2A67               	goto	L1
  4866  0A8F                     __end_of_getLoad_AD:	
  4867                           
  4868                           	psect	text5
  4869  1DB5                     __ptext5:	
  4870 ;; *************** function _getAD *****************
  4871 ;; Defined at:
  4872 ;;		line 461 in file "../src/MCU_B1.c"
  4873 ;; Parameters:    Size  Location     Type
  4874 ;;  adcon0          1    wreg     unsigned char 
  4875 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4876 ;; Auto vars:     Size  Location     Type
  4877 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4878 ;; Return value:  Size  Location     Type
  4879 ;;                  2    0[BANK0 ] int 
  4880 ;; Registers used:
  4881 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4882 ;; Tracked objects:
  4883 ;;		On entry : 0/0
  4884 ;;		On exit  : 0/0
  4885 ;;		Unchanged: 0/0
  4886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4887 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4888 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4890 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4891 ;;Total ram usage:        4 bytes
  4892 ;; Hardware stack levels used:    1
  4893 ;; Hardware stack levels required when called:    6
  4894 ;; This function calls:
  4895 ;;		_Timeout_Counter
  4896 ;;		_set_TimeoutCleared
  4897 ;; This function is called by:
  4898 ;;		_getLoad_AD
  4899 ;;		_getTemp_AD
  4900 ;; This function uses a non-reentrant model
  4901 ;;
  4902                           
  4903                           
  4904                           ;psect for function _getAD
  4905  1DB5                     _getAD:	
  4906                           
  4907                           ;incstack = 0
  4908                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4909                           ;getAD@adcon0 stored from wreg
  4910  1DB5  0020               	movlb	0	; select bank0
  4911  1DB6  00A3               	movwf	getAD@adcon0
  4912                           
  4913                           ;MCU_B1.c: 462: ADCON0 = adcon0;
  4914  1DB7  0823               	movf	getAD@adcon0,w
  4915  1DB8  0021               	movlb	1	; select bank1
  4916  1DB9  009D               	movwf	29	;volatile
  4917                           
  4918                           ;MCU_B1.c: 463: ADCON1 = adcon1;
  4919  1DBA  0020               	movlb	0	; select bank0
  4920  1DBB  0820               	movf	getAD@adcon1,w
  4921  1DBC  0021               	movlb	1	; select bank1
  4922  1DBD  009E               	movwf	30	;volatile
  4923                           
  4924                           ;MCU_B1.c: 464: GO_nDONE = 1;
  4925  1DBE  149D               	bsf	29,1	;volatile
  4926                           
  4927                           ;MCU_B1.c: 465: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4928  1DBF  2DC3               	goto	l8201
  4929  1DC0                     l8199:	
  4930                           
  4931                           ;MCU_B1.c: 466: Timeout_Counter();
  4932  1DC0  319B  2374  319D   	fcall	_Timeout_Counter
  4933  1DC3                     l8201:	
  4934  1DC3  0021               	movlb	1	; select bank1
  4935  1DC4  1C9D               	btfss	29,1	;volatile
  4936  1DC5  2DC8               	goto	l8205
  4937  1DC6  1D38               	btfss	(_myMain^(0+128)+10),2
  4938  1DC7  2DC0               	goto	l8199
  4939  1DC8                     l8205:	
  4940                           
  4941                           ;MCU_B1.c: 467: };
  4942                           ;MCU_B1.c: 468: set_TimeoutCleared();
  4943  1DC8  3198  20E6         	fcall	_set_TimeoutCleared
  4944                           
  4945                           ;MCU_B1.c: 469: return ((ADRESH*256)+ADRESL);
  4946  1DCA  0021               	movlb	1	; select bank1
  4947  1DCB  081C               	movf	28,w	;volatile
  4948  1DCC  0020               	movlb	0	; select bank0
  4949  1DCD  01A1               	clrf	?_getAD+1
  4950  1DCE  07A1               	addwf	?_getAD+1,f
  4951  1DCF  0021               	movlb	1	; select bank1
  4952  1DD0  081B               	movf	27,w	;volatile
  4953  1DD1  0020               	movlb	0	; select bank0
  4954  1DD2  01A0               	clrf	?_getAD
  4955  1DD3  07A0               	addwf	?_getAD,f
  4956  1DD4  0008               	return
  4957  1DD5                     __end_of_getAD:	
  4958                           
  4959                           	psect	text6
  4960  1AB1                     __ptext6:	
  4961 ;; *************** function _WDT_Main *****************
  4962 ;; Defined at:
  4963 ;;		line 1116 in file "../src/MCU_B1.c"
  4964 ;; Parameters:    Size  Location     Type
  4965 ;;		None
  4966 ;; Auto vars:     Size  Location     Type
  4967 ;;		None
  4968 ;; Return value:  Size  Location     Type
  4969 ;;		None               void
  4970 ;; Registers used:
  4971 ;;		wreg, status,2, status,0, pclath, cstack
  4972 ;; Tracked objects:
  4973 ;;		On entry : 0/0
  4974 ;;		On exit  : 0/0
  4975 ;;		Unchanged: 0/0
  4976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4979 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4980 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4981 ;;Total ram usage:        1 bytes
  4982 ;; Hardware stack levels used:    1
  4983 ;; Hardware stack levels required when called:    6
  4984 ;; This function calls:
  4985 ;;		_WDT_Clearing
  4986 ;; This function is called by:
  4987 ;;		_main
  4988 ;; This function uses a non-reentrant model
  4989 ;;
  4990                           
  4991                           
  4992                           ;psect for function _WDT_Main
  4993  1AB1                     _WDT_Main:	
  4994                           
  4995                           ;MCU_B1.c: 1117: if (WDT.Enable == 1) {
  4996                           
  4997                           ;incstack = 0
  4998                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4999  1AB1  0022               	movlb	2	; select bank2
  5000  1AB2  1C36               	btfss	_WDT^(0+256),0
  5001  1AB3  0008               	return
  5002                           
  5003                           ;MCU_B1.c: 1118: if (WDT.Timer-- > 0) {
  5004  1AB4  3001               	movlw	1
  5005  1AB5  02B7               	subwf	(_WDT^(0+256)+1),f
  5006  1AB6  0837               	movf	(_WDT^(0+256)+1),w
  5007  1AB7  3AFF               	xorlw	255
  5008  1AB8  1903               	skipnz
  5009  1AB9  0008               	return
  5010                           
  5011                           ;MCU_B1.c: 1119: WDT.Timer = 100;
  5012  1ABA  3064               	movlw	100
  5013  1ABB  0020               	movlb	0	; select bank0
  5014  1ABC  00A0               	movwf	??_WDT_Main
  5015  1ABD  0820               	movf	??_WDT_Main,w
  5016  1ABE  0022               	movlb	2	; select bank2
  5017  1ABF  00B7               	movwf	(_WDT^(0+256)+1)
  5018                           
  5019                           ;MCU_B1.c: 1120: WDT_Clearing();
  5020  1AC0  3180  2002         	fcall	_WDT_Clearing
  5021  1AC2  0008               	return
  5022  1AC3                     __end_of_WDT_Main:	
  5023                           
  5024                           	psect	text7
  5025  0002                     __ptext7:	
  5026 ;; *************** function _WDT_Clearing *****************
  5027 ;; Defined at:
  5028 ;;		line 1126 in file "../src/MCU_B1.c"
  5029 ;; Parameters:    Size  Location     Type
  5030 ;;		None
  5031 ;; Auto vars:     Size  Location     Type
  5032 ;;		None
  5033 ;; Return value:  Size  Location     Type
  5034 ;;		None               void
  5035 ;; Registers used:
  5036 ;;		None
  5037 ;; Tracked objects:
  5038 ;;		On entry : 0/0
  5039 ;;		On exit  : 0/0
  5040 ;;		Unchanged: 0/0
  5041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5045 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5046 ;;Total ram usage:        0 bytes
  5047 ;; Hardware stack levels used:    1
  5048 ;; Hardware stack levels required when called:    5
  5049 ;; This function calls:
  5050 ;;		Nothing
  5051 ;; This function is called by:
  5052 ;;		_WDT_Main
  5053 ;; This function uses a non-reentrant model
  5054 ;;
  5055                           
  5056                           
  5057                           ;psect for function _WDT_Clearing
  5058  0002                     _WDT_Clearing:	
  5059                           
  5060                           ;incstack = 0
  5061                           ; Regs used in _WDT_Clearing: []
  5062  0002  0064               	clrwdt	;# 
  5063  0003  0008               	return
  5064  0004                     __end_of_WDT_Clearing:	
  5065                           
  5066                           	psect	text8
  5067  18CF                     __ptext8:	
  5068 ;; *************** function _Temp_Main *****************
  5069 ;; Defined at:
  5070 ;;		line 57 in file "../src/OverTemperature_B1.c"
  5071 ;; Parameters:    Size  Location     Type
  5072 ;;		None
  5073 ;; Auto vars:     Size  Location     Type
  5074 ;;		None
  5075 ;; Return value:  Size  Location     Type
  5076 ;;		None               void
  5077 ;; Registers used:
  5078 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5079 ;; Tracked objects:
  5080 ;;		On entry : 0/0
  5081 ;;		On exit  : 0/0
  5082 ;;		Unchanged: 0/0
  5083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5087 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5088 ;;Total ram usage:        0 bytes
  5089 ;; Hardware stack levels used:    1
  5090 ;; Hardware stack levels required when called:    8
  5091 ;; This function calls:
  5092 ;;		_setTemp_Main
  5093 ;; This function is called by:
  5094 ;;		_main
  5095 ;; This function uses a non-reentrant model
  5096 ;;
  5097                           
  5098                           
  5099                           ;psect for function _Temp_Main
  5100  18CF                     _Temp_Main:	
  5101                           
  5102                           ;OverTemperature_B1.c: 59: setTemp_Main();
  5103                           
  5104                           ;incstack = 0
  5105                           ; Regs used in _Temp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5106  18CF  318D  25E0         	fcall	_setTemp_Main
  5107  18D1  0008               	return
  5108  18D2                     __end_of_Temp_Main:	
  5109                           
  5110                           	psect	text9
  5111  0DE0                     __ptext9:	
  5112 ;; *************** function _setTemp_Main *****************
  5113 ;; Defined at:
  5114 ;;		line 64 in file "../src/OverTemperature_B1.c"
  5115 ;; Parameters:    Size  Location     Type
  5116 ;;		None
  5117 ;; Auto vars:     Size  Location     Type
  5118 ;;  AD              2   76[BANK0 ] unsigned int 
  5119 ;;  DangerValue     2   73[BANK0 ] unsigned int 
  5120 ;;  SafeValue       2   71[BANK0 ] unsigned int 
  5121 ;;  TempGO          1   75[BANK0 ] unsigned char 
  5122 ;;  error           1   70[BANK0 ] unsigned char 
  5123 ;; Return value:  Size  Location     Type
  5124 ;;		None               void
  5125 ;; Registers used:
  5126 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5127 ;; Tracked objects:
  5128 ;;		On entry : 0/0
  5129 ;;		On exit  : 0/0
  5130 ;;		Unchanged: 0/0
  5131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5133 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5134 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5135 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5136 ;;Total ram usage:        9 bytes
  5137 ;; Hardware stack levels used:    1
  5138 ;; Hardware stack levels required when called:    7
  5139 ;; This function calls:
  5140 ;;		_getMain_All_Error_Status
  5141 ;;		_getMain_All_LightsStatus
  5142 ;;		_setBuz
  5143 ;;		_setProductData
  5144 ;; This function is called by:
  5145 ;;		_Temp_Main
  5146 ;; This function uses a non-reentrant model
  5147 ;;
  5148                           
  5149                           
  5150                           ;psect for function _setTemp_Main
  5151  0DE0                     _setTemp_Main:	
  5152                           
  5153                           ;OverTemperature_B1.c: 65: char error = getMain_All_Error_Status(0);
  5154                           
  5155                           ;incstack = 0
  5156                           ; Regs used in _setTemp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5157  0DE0  3000               	movlw	0
  5158  0DE1  319F  27CD  318D   	fcall	_getMain_All_Error_Status
  5159  0DE4  0020               	movlb	0	; select bank0
  5160  0DE5  00E5               	movwf	??_setTemp_Main
  5161  0DE6  0865               	movf	??_setTemp_Main,w
  5162  0DE7  00E6               	movwf	setTemp_Main@error
  5163                           
  5164                           ;OverTemperature_B1.c: 66: ADtype SafeValue = 0, DangerValue = 0, AD;
  5165  0DE8  01E7               	clrf	setTemp_Main@SafeValue
  5166  0DE9  01E8               	clrf	setTemp_Main@SafeValue+1
  5167  0DEA  01E9               	clrf	setTemp_Main@DangerValue
  5168  0DEB  01EA               	clrf	setTemp_Main@DangerValue+1
  5169                           
  5170                           ;OverTemperature_B1.c: 67: char TempGO = getMain_All_LightsStatus();
  5171  0DEC  319A  22E9  318D   	fcall	_getMain_All_LightsStatus
  5172  0DEF  0020               	movlb	0	; select bank0
  5173  0DF0  00E5               	movwf	??_setTemp_Main
  5174  0DF1  0865               	movf	??_setTemp_Main,w
  5175  0DF2  00EB               	movwf	setTemp_Main@TempGO
  5176                           
  5177                           ;OverTemperature_B1.c: 69: if (Temp.Enable == 1) {
  5178  0DF3  0021               	movlb	1	; select bank1
  5179  0DF4  1C5C               	btfss	_Temp^(0+128),0
  5180  0DF5  2E8D               	goto	l1783
  5181                           
  5182                           ;OverTemperature_B1.c: 77: if (Temp.ADtoGO == 0) {
  5183  0DF6  195C               	btfsc	_Temp^(0+128),2
  5184  0DF7  2E15               	goto	l8307
  5185                           
  5186                           ;OverTemperature_B1.c: 78: if ((TempGO == 1 && Temp.ERROR == 0) || Temp.ERROR == 1) {
  5187  0DF8  0020               	movlb	0	; select bank0
  5188  0DF9  086B               	movf	setTemp_Main@TempGO,w
  5189  0DFA  3A01               	xorlw	1
  5190  0DFB  1D03               	skipz
  5191  0DFC  2E00               	goto	l1789
  5192  0DFD  0021               	movlb	1	; select bank1
  5193  0DFE  1CDC               	btfss	_Temp^(0+128),1
  5194  0DFF  2E03               	goto	l8299
  5195  0E00                     l1789:	
  5196  0E00  0021               	movlb	1	; select bank1
  5197  0E01  1CDC               	btfss	_Temp^(0+128),1
  5198  0E02  2E12               	goto	l8305
  5199  0E03                     l8299:	
  5200                           
  5201                           ;OverTemperature_B1.c: 79: Temp.Time++;
  5202  0E03  3001               	movlw	1
  5203  0E04  07DD               	addwf	(_Temp^(0+128)+1),f
  5204  0E05  3000               	movlw	0
  5205  0E06  3DDE               	addwfc	((_Temp+1)^(0+128)+1),f
  5206                           
  5207                           ;OverTemperature_B1.c: 80: if (Temp.Time >= (5000 / 20)) {
  5208  0E07  3000               	movlw	0
  5209  0E08  025E               	subwf	((_Temp+1)^(0+128)+1),w
  5210  0E09  30FA               	movlw	250
  5211  0E0A  1903               	skipnz
  5212  0E0B  025D               	subwf	(_Temp^(0+128)+1),w
  5213  0E0C  1C03               	skipc
  5214  0E0D  0008               	return
  5215                           
  5216                           ;OverTemperature_B1.c: 81: Temp.Time = 0;
  5217  0E0E  01DD               	clrf	(_Temp^(0+128)+1)
  5218  0E0F  01DE               	clrf	((_Temp+1)^(0+128)+1)
  5219                           
  5220                           ;OverTemperature_B1.c: 82: Temp.ADtoGO = 1;
  5221  0E10  155C               	bsf	_Temp^(0+128),2
  5222                           
  5223                           ;OverTemperature_B1.c: 83: }
  5224                           ;OverTemperature_B1.c: 84: } else {
  5225  0E11  0008               	return
  5226  0E12                     l8305:	
  5227                           
  5228                           ;OverTemperature_B1.c: 85: Temp.Time = 0;
  5229  0E12  01DD               	clrf	(_Temp^(0+128)+1)
  5230  0E13  01DE               	clrf	((_Temp+1)^(0+128)+1)
  5231                           
  5232                           ;OverTemperature_B1.c: 86: }
  5233                           ;OverTemperature_B1.c: 87: } else {
  5234  0E14  0008               	return
  5235  0E15                     l8307:	
  5236                           
  5237                           ;OverTemperature_B1.c: 88: Temp.Time++;
  5238  0E15  3001               	movlw	1
  5239  0E16  07DD               	addwf	(_Temp^(0+128)+1),f
  5240  0E17  3000               	movlw	0
  5241  0E18  3DDE               	addwfc	((_Temp+1)^(0+128)+1),f
  5242                           
  5243                           ;OverTemperature_B1.c: 89: if (Temp.Time >= (100 / 20)) {
  5244  0E19  3000               	movlw	0
  5245  0E1A  025E               	subwf	((_Temp+1)^(0+128)+1),w
  5246  0E1B  3005               	movlw	5
  5247  0E1C  1903               	skipnz
  5248  0E1D  025D               	subwf	(_Temp^(0+128)+1),w
  5249  0E1E  1C03               	skipc
  5250  0E1F  0008               	return
  5251                           
  5252                           ;OverTemperature_B1.c: 90: Temp.Time = 0;
  5253  0E20  01DD               	clrf	(_Temp^(0+128)+1)
  5254  0E21  01DE               	clrf	((_Temp+1)^(0+128)+1)
  5255                           
  5256                           ;OverTemperature_B1.c: 95: if (Temp.ADV > 0) {
  5257  0E22  3008               	movlw	8
  5258  0E23  3EDC               	addlw	_Temp& (0+255)
  5259  0E24  0086               	movwf	6
  5260  0E25  0187               	clrf	7
  5261  0E26  0016               	moviw fsr1++
  5262  0E27  0401               	iorwf	1,w
  5263  0E28  1903               	skipnz
  5264  0E29  2E85               	goto	l1794
  5265                           
  5266                           ;OverTemperature_B1.c: 96: Temp.ADtoGO = 0;
  5267  0E2A  115C               	bcf	_Temp^(0+128),2
  5268                           
  5269                           ;OverTemperature_B1.c: 97: AD = Temp.ADV;
  5270  0E2B  0865               	movf	((_Temp+1)^(0+128)+8),w
  5271  0E2C  0020               	movlb	0	; select bank0
  5272  0E2D  01ED               	clrf	setTemp_Main@AD+1
  5273  0E2E  07ED               	addwf	setTemp_Main@AD+1,f
  5274  0E2F  0021               	movlb	1	; select bank1
  5275  0E30  0864               	movf	(_Temp^(0+128)+8),w
  5276  0E31  0020               	movlb	0	; select bank0
  5277  0E32  01EC               	clrf	setTemp_Main@AD
  5278  0E33  07EC               	addwf	setTemp_Main@AD,f
  5279                           
  5280                           ;OverTemperature_B1.c: 112: SafeValue = 420;
  5281  0E34  30A4               	movlw	164
  5282  0E35  00E7               	movwf	setTemp_Main@SafeValue
  5283  0E36  3001               	movlw	1
  5284  0E37  00E8               	movwf	setTemp_Main@SafeValue+1
  5285                           
  5286                           ;OverTemperature_B1.c: 113: DangerValue = 365;
  5287  0E38  306D               	movlw	109
  5288  0E39  00E9               	movwf	setTemp_Main@DangerValue
  5289  0E3A  3001               	movlw	1
  5290  0E3B  00EA               	movwf	setTemp_Main@DangerValue+1
  5291                           
  5292                           ;OverTemperature_B1.c: 119: if (Temp.ERROR == 1) {
  5293  0E3C  0021               	movlb	1	; select bank1
  5294  0E3D  1CDC               	btfss	_Temp^(0+128),1
  5295  0E3E  2E5D               	goto	l8337
  5296                           
  5297                           ;OverTemperature_B1.c: 120: if (AD >= SafeValue) {
  5298  0E3F  0020               	movlb	0	; select bank0
  5299  0E40  0868               	movf	setTemp_Main@SafeValue+1,w
  5300  0E41  026D               	subwf	setTemp_Main@AD+1,w
  5301  0E42  1D03               	skipz
  5302  0E43  2E46               	goto	u8695
  5303  0E44  0867               	movf	setTemp_Main@SafeValue,w
  5304  0E45  026C               	subwf	setTemp_Main@AD,w
  5305  0E46                     u8695:	
  5306  0E46  1C03               	skipc
  5307  0E47  2E72               	goto	l8347
  5308                           
  5309                           ;OverTemperature_B1.c: 121: Temp.Count++;
  5310  0E48  3001               	movlw	1
  5311  0E49  00E5               	movwf	??_setTemp_Main
  5312  0E4A  0865               	movf	??_setTemp_Main,w
  5313  0E4B  0021               	movlb	1	; select bank1
  5314  0E4C  07DF               	addwf	(_Temp^(0+128)+3),f
  5315                           
  5316                           ;OverTemperature_B1.c: 122: if (Temp.Count >= 3) {
  5317  0E4D  3003               	movlw	3
  5318  0E4E  025F               	subwf	(_Temp^(0+128)+3),w
  5319  0E4F  1C03               	skipc
  5320  0E50  2E74               	goto	l8349
  5321                           
  5322                           ;OverTemperature_B1.c: 123: Temp.Count = 0;
  5323  0E51  01DF               	clrf	(_Temp^(0+128)+3)
  5324                           
  5325                           ;OverTemperature_B1.c: 124: Temp.ERROR = 0;
  5326  0E52  10DC               	bcf	_Temp^(0+128),1
  5327                           
  5328                           ;OverTemperature_B1.c: 125: setBuz(2, 100);
  5329  0E53  3064               	movlw	100
  5330  0E54  0020               	movlb	0	; select bank0
  5331  0E55  00A9               	movwf	setBuz@time
  5332  0E56  3000               	movlw	0
  5333  0E57  00AA               	movwf	setBuz@time+1
  5334  0E58  3002               	movlw	2
  5335  0E59  3194  240B  318D   	fcall	_setBuz
  5336                           
  5337                           ;OverTemperature_B1.c: 126: }
  5338                           ;OverTemperature_B1.c: 127: } else {
  5339  0E5C  2E74               	goto	l8349
  5340  0E5D                     l8337:	
  5341                           ;OverTemperature_B1.c: 129: }
  5342                           ;OverTemperature_B1.c: 130: } else {
  5343                           
  5344                           ;OverTemperature_B1.c: 128: Temp.Count = 0;
  5345                           
  5346                           
  5347                           ;OverTemperature_B1.c: 131: if (AD <= DangerValue) {
  5348  0E5D  0020               	movlb	0	; select bank0
  5349  0E5E  086D               	movf	setTemp_Main@AD+1,w
  5350  0E5F  026A               	subwf	setTemp_Main@DangerValue+1,w
  5351  0E60  1D03               	skipz
  5352  0E61  2E64               	goto	u8715
  5353  0E62  086C               	movf	setTemp_Main@AD,w
  5354  0E63  0269               	subwf	setTemp_Main@DangerValue,w
  5355  0E64                     u8715:	
  5356  0E64  1C03               	skipc
  5357  0E65  2E72               	goto	l8347
  5358                           
  5359                           ;OverTemperature_B1.c: 132: Temp.Count++;
  5360  0E66  3001               	movlw	1
  5361  0E67  00E5               	movwf	??_setTemp_Main
  5362  0E68  0865               	movf	??_setTemp_Main,w
  5363  0E69  0021               	movlb	1	; select bank1
  5364  0E6A  07DF               	addwf	(_Temp^(0+128)+3),f
  5365                           
  5366                           ;OverTemperature_B1.c: 133: if (Temp.Count >= 3) {
  5367  0E6B  3003               	movlw	3
  5368  0E6C  025F               	subwf	(_Temp^(0+128)+3),w
  5369  0E6D  1C03               	skipc
  5370  0E6E  2E74               	goto	l8349
  5371                           
  5372                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  5373  0E6F  01DF               	clrf	(_Temp^(0+128)+3)
  5374                           
  5375                           ;OverTemperature_B1.c: 135: Temp.ERROR = 1;
  5376  0E70  14DC               	bsf	_Temp^(0+128),1
  5377                           
  5378                           ;OverTemperature_B1.c: 136: }
  5379                           ;OverTemperature_B1.c: 137: } else {
  5380  0E71  2E74               	goto	l8349
  5381  0E72                     l8347:	
  5382                           
  5383                           ;OverTemperature_B1.c: 138: Temp.Count = 0;
  5384  0E72  0021               	movlb	1	; select bank1
  5385  0E73  01DF               	clrf	(_Temp^(0+128)+3)
  5386  0E74                     l8349:	
  5387                           
  5388                           ;OverTemperature_B1.c: 139: }
  5389                           ;OverTemperature_B1.c: 140: }
  5390                           ;OverTemperature_B1.c: 141: setProductData(24, AD >> 8);
  5391  0E74  0020               	movlb	0	; select bank0
  5392  0E75  086D               	movf	setTemp_Main@AD+1,w
  5393  0E76  00E5               	movwf	??_setTemp_Main
  5394  0E77  0865               	movf	??_setTemp_Main,w
  5395  0E78  00E2               	movwf	setProductData@value
  5396  0E79  3018               	movlw	24
  5397  0E7A  3199  2186  318D   	fcall	_setProductData
  5398                           
  5399                           ;OverTemperature_B1.c: 142: setProductData(25, AD);
  5400  0E7D  0020               	movlb	0	; select bank0
  5401  0E7E  086C               	movf	setTemp_Main@AD,w
  5402  0E7F  00E5               	movwf	??_setTemp_Main
  5403  0E80  0865               	movf	??_setTemp_Main,w
  5404  0E81  00E2               	movwf	setProductData@value
  5405  0E82  3019               	movlw	25
  5406  0E83  3199  2186         	fcall	_setProductData
  5407  0E85                     l1794:	
  5408                           
  5409                           ;OverTemperature_B1.c: 158: }
  5410                           ;OverTemperature_B1.c: 159: Temp.ADH[0] = 0;
  5411  0E85  0021               	movlb	1	; select bank1
  5412  0E86  01E0               	clrf	(_Temp^(0+128)+4)
  5413  0E87  01E1               	clrf	((_Temp+1)^(0+128)+4)
  5414                           
  5415                           ;OverTemperature_B1.c: 160: Temp.ADH[1] = 0;
  5416  0E88  01E2               	clrf	(_Temp^(0+128)+6)
  5417  0E89  01E3               	clrf	((_Temp+1)^(0+128)+6)
  5418                           
  5419                           ;OverTemperature_B1.c: 161: Temp.ADV = 0;
  5420  0E8A  01E4               	clrf	(_Temp^(0+128)+8)
  5421  0E8B  01E5               	clrf	((_Temp+1)^(0+128)+8)
  5422                           
  5423                           ;OverTemperature_B1.c: 162: }
  5424                           ;OverTemperature_B1.c: 163: }
  5425                           ;OverTemperature_B1.c: 166: } else {
  5426  0E8C  0008               	return
  5427  0E8D                     l1783:	
  5428                           
  5429                           ;OverTemperature_B1.c: 167: if (myMain.PowerON == 1) {
  5430  0E8D  1C2E               	btfss	_myMain^(0+128),0
  5431  0E8E  0008               	return
  5432                           
  5433                           ;OverTemperature_B1.c: 168: Temp.Enable = 1;
  5434  0E8F  145C               	bsf	_Temp^(0+128),0
  5435  0E90  0008               	return
  5436  0E91                     __end_of_setTemp_Main:	
  5437                           
  5438                           	psect	text10
  5439  18CC                     __ptext10:	
  5440 ;; *************** function _Temp_Initialization *****************
  5441 ;; Defined at:
  5442 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5443 ;; Parameters:    Size  Location     Type
  5444 ;;		None
  5445 ;; Auto vars:     Size  Location     Type
  5446 ;;		None
  5447 ;; Return value:  Size  Location     Type
  5448 ;;		None               void
  5449 ;; Registers used:
  5450 ;;		status,2, status,0, pclath, cstack
  5451 ;; Tracked objects:
  5452 ;;		On entry : 0/0
  5453 ;;		On exit  : 0/0
  5454 ;;		Unchanged: 0/0
  5455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5459 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5460 ;;Total ram usage:        0 bytes
  5461 ;; Hardware stack levels used:    1
  5462 ;; Hardware stack levels required when called:    6
  5463 ;; This function calls:
  5464 ;;		_setTemp_Initialization
  5465 ;; This function is called by:
  5466 ;;		_main
  5467 ;; This function uses a non-reentrant model
  5468 ;;
  5469                           
  5470                           
  5471                           ;psect for function _Temp_Initialization
  5472  18CC                     _Temp_Initialization:	
  5473                           
  5474                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5475                           
  5476                           ;incstack = 0
  5477                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5478  18CC  3187  27FF         	fcall	_setTemp_Initialization
  5479  18CE  0008               	return
  5480  18CF                     __end_of_Temp_Initialization:	
  5481                           
  5482                           	psect	text11
  5483  07FF                     __ptext11:	
  5484 ;; *************** function _setTemp_Initialization *****************
  5485 ;; Defined at:
  5486 ;;		line 52 in file "../src/OverTemperature_B1.c"
  5487 ;; Parameters:    Size  Location     Type
  5488 ;;		None
  5489 ;; Auto vars:     Size  Location     Type
  5490 ;;		None
  5491 ;; Return value:  Size  Location     Type
  5492 ;;		None               void
  5493 ;; Registers used:
  5494 ;;		None
  5495 ;; Tracked objects:
  5496 ;;		On entry : 0/0
  5497 ;;		On exit  : 0/0
  5498 ;;		Unchanged: 0/0
  5499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5501 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5503 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5504 ;;Total ram usage:        0 bytes
  5505 ;; Hardware stack levels used:    1
  5506 ;; Hardware stack levels required when called:    5
  5507 ;; This function calls:
  5508 ;;		Nothing
  5509 ;; This function is called by:
  5510 ;;		_Temp_Initialization
  5511 ;; This function uses a non-reentrant model
  5512 ;;
  5513                           
  5514                           
  5515                           ;psect for function _setTemp_Initialization
  5516  07FF                     _setTemp_Initialization:	
  5517                           
  5518                           ;incstack = 0
  5519                           ; Regs used in _setTemp_Initialization: []
  5520  07FF  0008               	return
  5521  0800                     __end_of_setTemp_Initialization:	
  5522                           
  5523                           	psect	text12
  5524  196F                     __ptext12:	
  5525 ;; *************** function _Switch_Main *****************
  5526 ;; Defined at:
  5527 ;;		line 76 in file "../src/Switch_B1.c"
  5528 ;; Parameters:    Size  Location     Type
  5529 ;;		None
  5530 ;; Auto vars:     Size  Location     Type
  5531 ;;		None
  5532 ;; Return value:  Size  Location     Type
  5533 ;;		None               void
  5534 ;; Registers used:
  5535 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5536 ;; Tracked objects:
  5537 ;;		On entry : 0/0
  5538 ;;		On exit  : 0/0
  5539 ;;		Unchanged: 0/0
  5540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5542 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5544 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5545 ;;Total ram usage:        0 bytes
  5546 ;; Hardware stack levels used:    1
  5547 ;; Hardware stack levels required when called:    9
  5548 ;; This function calls:
  5549 ;;		_TouchPower
  5550 ;;		_setSw_Main
  5551 ;; This function is called by:
  5552 ;;		_main
  5553 ;; This function uses a non-reentrant model
  5554 ;;
  5555                           
  5556                           
  5557                           ;psect for function _Switch_Main
  5558  196F                     _Switch_Main:	
  5559                           
  5560                           ;Switch_B1.c: 79: setSw_Main(1);
  5561                           
  5562                           ;incstack = 0
  5563                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5564  196F  3001               	movlw	1
  5565  1970  3182  2204  3199   	fcall	_setSw_Main
  5566                           
  5567                           ;Switch_B1.c: 83: setSw_Main(2);
  5568  1973  3002               	movlw	2
  5569  1974  3182  2204  3199   	fcall	_setSw_Main
  5570                           
  5571                           ;Switch_B1.c: 91: TouchPower();
  5572  1977  319B  2389         	fcall	_TouchPower
  5573  1979  0008               	return
  5574  197A                     __end_of_Switch_Main:	
  5575                           
  5576                           	psect	text13
  5577  0204                     __ptext13:	
  5578 ;; *************** function _setSw_Main *****************
  5579 ;; Defined at:
  5580 ;;		line 117 in file "../src/Switch_B1.c"
  5581 ;; Parameters:    Size  Location     Type
  5582 ;;  sw              1    wreg     unsigned char 
  5583 ;; Auto vars:     Size  Location     Type
  5584 ;;  sw              1   20[BANK0 ] unsigned char 
  5585 ;; Return value:  Size  Location     Type
  5586 ;;		None               void
  5587 ;; Registers used:
  5588 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5589 ;; Tracked objects:
  5590 ;;		On entry : 0/0
  5591 ;;		On exit  : 0/0
  5592 ;;		Unchanged: 0/0
  5593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5595 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5596 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5597 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5598 ;;Total ram usage:        3 bytes
  5599 ;; Hardware stack levels used:    1
  5600 ;; Hardware stack levels required when called:    8
  5601 ;; This function calls:
  5602 ;;		_SwPointSelect
  5603 ;;		_getMain_All_Error_Status
  5604 ;;		_getSw_KeyStatus
  5605 ;;		_setBuz
  5606 ;;		_setDimmerLights_DimmingOn
  5607 ;;		_setDimmerLights_SwOff
  5608 ;;		_setDimmerLights_SwOn
  5609 ;;		_setRF_Learn
  5610 ;; This function is called by:
  5611 ;;		_Switch_Main
  5612 ;; This function uses a non-reentrant model
  5613 ;;
  5614                           
  5615                           
  5616                           ;psect for function _setSw_Main
  5617  0204                     _setSw_Main:	
  5618                           
  5619                           ;incstack = 0
  5620                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5621                           ;setSw_Main@sw stored from wreg
  5622  0204  0020               	movlb	0	; select bank0
  5623  0205  00B4               	movwf	setSw_Main@sw
  5624                           
  5625                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5626  0206  0834               	movf	setSw_Main@sw,w
  5627  0207  319C  2410  3182   	fcall	_SwPointSelect
  5628                           
  5629                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5630  020A  0021               	movlb	1	; select bank1
  5631  020B  0859               	movf	_Sw^(0+128),w
  5632  020C  0086               	movwf	6
  5633  020D  3001               	movlw	1	; select bank2/3
  5634  020E  0087               	movwf	7
  5635  020F  1C01               	btfss	1,0
  5636  0210  2B80               	goto	l2570
  5637                           
  5638                           ;Switch_B1.c: 121: if (getMain_All_Error_Status(0) == 0) {
  5639  0211  3000               	movlw	0
  5640  0212  319F  27CD  3182   	fcall	_getMain_All_Error_Status
  5641  0215  3800               	iorlw	0
  5642  0216  1D03               	skipz
  5643  0217  2A36               	goto	l8461
  5644                           
  5645                           ;Switch_B1.c: 122: Sw->Detect = 0;
  5646  0218  0021               	movlb	1	; select bank1
  5647  0219  0A59               	incf	_Sw^(0+128),w
  5648  021A  0086               	movwf	6
  5649  021B  3001               	movlw	1	; select bank2/3
  5650  021C  0087               	movwf	7
  5651  021D  1081               	bcf	1,1
  5652                           
  5653                           ;Switch_B1.c: 123: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5654  021E  0020               	movlb	0	; select bank0
  5655  021F  0834               	movf	setSw_Main@sw,w
  5656  0220  319D  2556  3182   	fcall	_getSw_KeyStatus
  5657  0223  3A01               	xorlw	1
  5658  0224  3000               	movlw	0
  5659  0225  1903               	skipnz
  5660  0226  3001               	movlw	1
  5661  0227  0020               	movlb	0	; select bank0
  5662  0228  00B2               	movwf	??_setSw_Main
  5663  0229  0021               	movlb	1	; select bank1
  5664  022A  0859               	movf	_Sw^(0+128),w
  5665  022B  0086               	movwf	6
  5666  022C  3001               	movlw	1	; select bank2/3
  5667  022D  0087               	movwf	7
  5668  022E  0020               	movlb	0	; select bank0
  5669  022F  0DB2               	rlf	??_setSw_Main,f
  5670  0230  0801               	movf	1,w
  5671  0231  0632               	xorwf	??_setSw_Main,w
  5672  0232  39FD               	andlw	-3
  5673  0233  0632               	xorwf	??_setSw_Main,w
  5674  0234  0081               	movwf	1
  5675                           
  5676                           ;Switch_B1.c: 124: } else {
  5677  0235  2A4C               	goto	l2572
  5678  0236                     l8461:	
  5679                           
  5680                           ;Switch_B1.c: 125: if (Sw->Detect == 0) {
  5681  0236  0021               	movlb	1	; select bank1
  5682  0237  0A59               	incf	_Sw^(0+128),w
  5683  0238  0086               	movwf	6
  5684  0239  3001               	movlw	1	; select bank2/3
  5685  023A  0087               	movwf	7
  5686  023B  1881               	btfsc	1,1
  5687  023C  2A4C               	goto	l2572
  5688                           
  5689                           ;Switch_B1.c: 126: Sw->Detect = 1;
  5690  023D  0A59               	incf	_Sw^(0+128),w
  5691  023E  0086               	movwf	6
  5692  023F  3001               	movlw	1	; select bank2/3
  5693  0240  0087               	movwf	7
  5694  0241  1481               	bsf	1,1
  5695                           
  5696                           ;Switch_B1.c: 128: Sw->Touch = 0;
  5697  0242  0859               	movf	_Sw^(0+128),w
  5698  0243  0086               	movwf	6
  5699  0244  3001               	movlw	1	; select bank2/3
  5700  0245  0087               	movwf	7
  5701  0246  1081               	bcf	1,1
  5702                           
  5703                           ;Switch_B1.c: 129: Sw->Debounce = 1;
  5704  0247  0859               	movf	_Sw^(0+128),w
  5705  0248  0086               	movwf	6
  5706  0249  3001               	movlw	1	; select bank2/3
  5707  024A  0087               	movwf	7
  5708  024B  1501               	bsf	1,2
  5709  024C                     l2572:	
  5710                           
  5711                           ;Switch_B1.c: 130: }
  5712                           ;Switch_B1.c: 131: }
  5713                           ;Switch_B1.c: 133: if (Sw->Touch == 1) {
  5714  024C  0021               	movlb	1	; select bank1
  5715  024D  0859               	movf	_Sw^(0+128),w
  5716  024E  0086               	movwf	6
  5717  024F  3001               	movlw	1	; select bank2/3
  5718  0250  0087               	movwf	7
  5719  0251  1C81               	btfss	1,1
  5720  0252  2B28               	goto	l8511
  5721                           
  5722                           ;Switch_B1.c: 134: if (Sw->Debounce == 0) {
  5723  0253  0859               	movf	_Sw^(0+128),w
  5724  0254  0086               	movwf	6
  5725  0255  3001               	movlw	1	; select bank2/3
  5726  0256  0087               	movwf	7
  5727  0257  1901               	btfsc	1,2
  5728  0258  2A7F               	goto	l8477
  5729                           
  5730                           ;Switch_B1.c: 135: Sw->DebounceTime++;
  5731  0259  3001               	movlw	1
  5732  025A  0020               	movlb	0	; select bank0
  5733  025B  00B2               	movwf	??_setSw_Main
  5734  025C  0021               	movlb	1	; select bank1
  5735  025D  0859               	movf	_Sw^(0+128),w
  5736  025E  3E02               	addlw	2
  5737  025F  0086               	movwf	6
  5738  0260  3001               	movlw	1	; select bank2/3
  5739  0261  0087               	movwf	7
  5740  0262  0020               	movlb	0	; select bank0
  5741  0263  0832               	movf	??_setSw_Main,w
  5742  0264  0781               	addwf	1,f
  5743                           
  5744                           ;Switch_B1.c: 136: if (Sw->DebounceTime >= (60 / 20)) {
  5745  0265  0021               	movlb	1	; select bank1
  5746  0266  0859               	movf	_Sw^(0+128),w
  5747  0267  3E02               	addlw	2
  5748  0268  0086               	movwf	6
  5749  0269  3001               	movlw	1	; select bank2/3
  5750  026A  0087               	movwf	7
  5751  026B  3003               	movlw	3
  5752  026C  0201               	subwf	1,w
  5753  026D  1C03               	skipc
  5754  026E  0008               	return
  5755                           
  5756                           ;Switch_B1.c: 137: Sw->DebounceTime = 0;
  5757  026F  0859               	movf	_Sw^(0+128),w
  5758  0270  3E02               	addlw	2
  5759  0271  0086               	movwf	6
  5760  0272  3001               	movlw	1	; select bank2/3
  5761  0273  0087               	movwf	7
  5762  0274  0181               	clrf	1
  5763                           
  5764                           ;Switch_B1.c: 138: Sw->Debounce = 1;
  5765  0275  0859               	movf	_Sw^(0+128),w
  5766  0276  0086               	movwf	6
  5767  0277  3001               	movlw	1	; select bank2/3
  5768  0278  0087               	movwf	7
  5769  0279  1501               	bsf	1,2
  5770                           
  5771                           ;Switch_B1.c: 143: setDimmerLights_SwOn(sw);
  5772  027A  0020               	movlb	0	; select bank0
  5773  027B  0834               	movf	setSw_Main@sw,w
  5774  027C  3188  2002         	fcall	_setDimmerLights_SwOn
  5775                           
  5776                           ;Switch_B1.c: 146: }
  5777                           ;Switch_B1.c: 147: } else {
  5778  027E  0008               	return
  5779  027F                     l8477:	
  5780                           
  5781                           ;Switch_B1.c: 148: if (Sw->Hold1 == 0) {
  5782  027F  0021               	movlb	1	; select bank1
  5783  0280  0859               	movf	_Sw^(0+128),w
  5784  0281  0086               	movwf	6
  5785  0282  3001               	movlw	1	; select bank2/3
  5786  0283  0087               	movwf	7
  5787  0284  1981               	btfsc	1,3
  5788  0285  2AB4               	goto	l8487
  5789                           
  5790                           ;Switch_B1.c: 149: Sw->Hold1Time++;
  5791  0286  0859               	movf	_Sw^(0+128),w
  5792  0287  3E03               	addlw	3
  5793  0288  0086               	movwf	6
  5794  0289  3001               	movlw	1	; select bank2/3
  5795  028A  0087               	movwf	7
  5796  028B  3001               	movlw	1
  5797  028C  0781               	addwf	1,f
  5798  028D  3141               	addfsr 1,1
  5799  028E  1803               	skipnc
  5800  028F  0A81               	incf	1,f
  5801                           
  5802                           ;Switch_B1.c: 150: if (Sw->Hold1Time >= (1500 / 20)) {
  5803  0290  0859               	movf	_Sw^(0+128),w
  5804  0291  3E03               	addlw	3
  5805  0292  0086               	movwf	6
  5806  0293  3001               	movlw	1	; select bank2/3
  5807  0294  0087               	movwf	7
  5808  0295  3F40               	moviw [0]fsr1
  5809  0296  0020               	movlb	0	; select bank0
  5810  0297  00B2               	movwf	??_setSw_Main
  5811  0298  3F41               	moviw [1]fsr1
  5812  0299  00B3               	movwf	??_setSw_Main+1
  5813  029A  3000               	movlw	0
  5814  029B  0233               	subwf	??_setSw_Main+1,w
  5815  029C  304B               	movlw	75
  5816  029D  1903               	skipnz
  5817  029E  0232               	subwf	??_setSw_Main,w
  5818  029F  1C03               	skipc
  5819  02A0  0008               	return
  5820                           
  5821                           ;Switch_B1.c: 151: Sw->Hold1Time = 0;
  5822  02A1  0021               	movlb	1	; select bank1
  5823  02A2  0859               	movf	_Sw^(0+128),w
  5824  02A3  3E03               	addlw	3
  5825  02A4  0086               	movwf	6
  5826  02A5  3001               	movlw	1	; select bank2/3
  5827  02A6  0087               	movwf	7
  5828  02A7  3000               	movlw	0
  5829  02A8  3FC0               	movwi [0]fsr1
  5830  02A9  3FC1               	movwi [1]fsr1
  5831                           
  5832                           ;Switch_B1.c: 152: Sw->Hold1 = 1;
  5833  02AA  0859               	movf	_Sw^(0+128),w
  5834  02AB  0086               	movwf	6
  5835  02AC  3001               	movlw	1	; select bank2/3
  5836  02AD  0087               	movwf	7
  5837  02AE  1581               	bsf	1,3
  5838                           
  5839                           ;Switch_B1.c: 158: setDimmerLights_DimmingOn(sw);
  5840  02AF  0020               	movlb	0	; select bank0
  5841  02B0  0834               	movf	setSw_Main@sw,w
  5842  02B1  319E  26C3         	fcall	_setDimmerLights_DimmingOn
  5843                           
  5844                           ;Switch_B1.c: 161: }
  5845                           ;Switch_B1.c: 162: } else {
  5846  02B3  0008               	return
  5847  02B4                     l8487:	
  5848                           
  5849                           ;Switch_B1.c: 164: if (Sw->Hold2 == 0) {
  5850  02B4  0021               	movlb	1	; select bank1
  5851  02B5  0859               	movf	_Sw^(0+128),w
  5852  02B6  0086               	movwf	6
  5853  02B7  3001               	movlw	1	; select bank2/3
  5854  02B8  0087               	movwf	7
  5855  02B9  1A01               	btfsc	1,4
  5856  02BA  2AF4               	goto	l8501
  5857                           
  5858                           ;Switch_B1.c: 165: Sw->Hold2Time++;
  5859  02BB  0859               	movf	_Sw^(0+128),w
  5860  02BC  3E05               	addlw	5
  5861  02BD  0086               	movwf	6
  5862  02BE  3001               	movlw	1	; select bank2/3
  5863  02BF  0087               	movwf	7
  5864  02C0  3001               	movlw	1
  5865  02C1  0781               	addwf	1,f
  5866  02C2  3141               	addfsr 1,1
  5867  02C3  1803               	skipnc
  5868  02C4  0A81               	incf	1,f
  5869                           
  5870                           ;Switch_B1.c: 166: if (Sw->Hold2Time >= (1500 / 20)) {
  5871  02C5  0859               	movf	_Sw^(0+128),w
  5872  02C6  3E05               	addlw	5
  5873  02C7  0086               	movwf	6
  5874  02C8  3001               	movlw	1	; select bank2/3
  5875  02C9  0087               	movwf	7
  5876  02CA  3F40               	moviw [0]fsr1
  5877  02CB  0020               	movlb	0	; select bank0
  5878  02CC  00B2               	movwf	??_setSw_Main
  5879  02CD  3F41               	moviw [1]fsr1
  5880  02CE  00B3               	movwf	??_setSw_Main+1
  5881  02CF  3000               	movlw	0
  5882  02D0  0233               	subwf	??_setSw_Main+1,w
  5883  02D1  304B               	movlw	75
  5884  02D2  1903               	skipnz
  5885  02D3  0232               	subwf	??_setSw_Main,w
  5886  02D4  1C03               	skipc
  5887  02D5  0008               	return
  5888                           
  5889                           ;Switch_B1.c: 167: Sw->Hold2Time = 0;
  5890  02D6  0021               	movlb	1	; select bank1
  5891  02D7  0859               	movf	_Sw^(0+128),w
  5892  02D8  3E05               	addlw	5
  5893  02D9  0086               	movwf	6
  5894  02DA  3001               	movlw	1	; select bank2/3
  5895  02DB  0087               	movwf	7
  5896  02DC  3000               	movlw	0
  5897  02DD  3FC0               	movwi [0]fsr1
  5898  02DE  3FC1               	movwi [1]fsr1
  5899                           
  5900                           ;Switch_B1.c: 168: Sw->Hold2 = 1;
  5901  02DF  0859               	movf	_Sw^(0+128),w
  5902  02E0  0086               	movwf	6
  5903  02E1  3001               	movlw	1	; select bank2/3
  5904  02E2  0087               	movwf	7
  5905  02E3  1601               	bsf	1,4
  5906                           
  5907                           ;Switch_B1.c: 171: setRF_Learn(1);
  5908  02E4  3001               	movlw	1
  5909  02E5  319B  2336  3182   	fcall	_setRF_Learn
  5910                           
  5911                           ;Switch_B1.c: 172: if (myMain.First == 1) {
  5912  02E8  0021               	movlb	1	; select bank1
  5913  02E9  1EAE               	btfss	_myMain^(0+128),5
  5914  02EA  0008               	return
  5915                           
  5916                           ;Switch_B1.c: 173: setBuz(2, 100);
  5917  02EB  3064               	movlw	100
  5918  02EC  0020               	movlb	0	; select bank0
  5919  02ED  00A9               	movwf	setBuz@time
  5920  02EE  3000               	movlw	0
  5921  02EF  00AA               	movwf	setBuz@time+1
  5922  02F0  3002               	movlw	2
  5923  02F1  3194  240B         	fcall	_setBuz
  5924                           
  5925                           ;Switch_B1.c: 174: }
  5926                           ;Switch_B1.c: 178: }
  5927                           ;Switch_B1.c: 179: } else {
  5928  02F3  0008               	return
  5929  02F4                     l8501:	
  5930                           
  5931                           ;Switch_B1.c: 180: if (Sw->Hold3 == 0) {
  5932  02F4  0021               	movlb	1	; select bank1
  5933  02F5  0859               	movf	_Sw^(0+128),w
  5934  02F6  0086               	movwf	6
  5935  02F7  3001               	movlw	1	; select bank2/3
  5936  02F8  0087               	movwf	7
  5937  02F9  1A81               	btfsc	1,5
  5938  02FA  0008               	return
  5939                           
  5940                           ;Switch_B1.c: 181: Sw->Hold3Time++;
  5941  02FB  0859               	movf	_Sw^(0+128),w
  5942  02FC  3E07               	addlw	7
  5943  02FD  0086               	movwf	6
  5944  02FE  3001               	movlw	1	; select bank2/3
  5945  02FF  0087               	movwf	7
  5946  0300  3001               	movlw	1
  5947  0301  0781               	addwf	1,f
  5948  0302  3141               	addfsr 1,1
  5949  0303  1803               	skipnc
  5950  0304  0A81               	incf	1,f
  5951                           
  5952                           ;Switch_B1.c: 182: if (Sw->Hold3Time >= (3000 / 20)) {
  5953  0305  0859               	movf	_Sw^(0+128),w
  5954  0306  3E07               	addlw	7
  5955  0307  0086               	movwf	6
  5956  0308  3001               	movlw	1	; select bank2/3
  5957  0309  0087               	movwf	7
  5958  030A  3F40               	moviw [0]fsr1
  5959  030B  0020               	movlb	0	; select bank0
  5960  030C  00B2               	movwf	??_setSw_Main
  5961  030D  3F41               	moviw [1]fsr1
  5962  030E  00B3               	movwf	??_setSw_Main+1
  5963  030F  3000               	movlw	0
  5964  0310  0233               	subwf	??_setSw_Main+1,w
  5965  0311  3096               	movlw	150
  5966  0312  1903               	skipnz
  5967  0313  0232               	subwf	??_setSw_Main,w
  5968  0314  1C03               	skipc
  5969  0315  0008               	return
  5970                           
  5971                           ;Switch_B1.c: 183: Sw->Hold3Time = 0;
  5972  0316  0021               	movlb	1	; select bank1
  5973  0317  0859               	movf	_Sw^(0+128),w
  5974  0318  3E07               	addlw	7
  5975  0319  0086               	movwf	6
  5976  031A  3001               	movlw	1	; select bank2/3
  5977  031B  0087               	movwf	7
  5978  031C  3000               	movlw	0
  5979  031D  3FC0               	movwi [0]fsr1
  5980  031E  3FC1               	movwi [1]fsr1
  5981                           
  5982                           ;Switch_B1.c: 184: Sw->Hold3 = 1;
  5983  031F  0859               	movf	_Sw^(0+128),w
  5984  0320  0086               	movwf	6
  5985  0321  3001               	movlw	1	; select bank2/3
  5986  0322  0087               	movwf	7
  5987  0323  1681               	bsf	1,5
  5988                           
  5989                           ;Switch_B1.c: 187: setRF_Learn(0);
  5990  0324  3000               	movlw	0
  5991  0325  319B  2336         	fcall	_setRF_Learn
  5992                           
  5993                           ;Switch_B1.c: 190: }
  5994                           ;Switch_B1.c: 191: }
  5995                           ;Switch_B1.c: 192: }
  5996                           ;Switch_B1.c: 194: }
  5997                           ;Switch_B1.c: 195: }
  5998                           ;Switch_B1.c: 196: } else {
  5999  0327  0008               	return
  6000  0328                     l8511:	
  6001                           
  6002                           ;Switch_B1.c: 197: if (Sw->Debounce == 1) {
  6003  0328  0021               	movlb	1	; select bank1
  6004  0329  0859               	movf	_Sw^(0+128),w
  6005  032A  0086               	movwf	6
  6006  032B  3001               	movlw	1	; select bank2/3
  6007  032C  0087               	movwf	7
  6008  032D  1D01               	btfss	1,2
  6009  032E  0008               	return
  6010                           
  6011                           ;Switch_B1.c: 198: Sw->DebounceTime++;
  6012  032F  3001               	movlw	1
  6013  0330  0020               	movlb	0	; select bank0
  6014  0331  00B2               	movwf	??_setSw_Main
  6015  0332  0021               	movlb	1	; select bank1
  6016  0333  0859               	movf	_Sw^(0+128),w
  6017  0334  3E02               	addlw	2
  6018  0335  0086               	movwf	6
  6019  0336  3001               	movlw	1	; select bank2/3
  6020  0337  0087               	movwf	7
  6021  0338  0020               	movlb	0	; select bank0
  6022  0339  0832               	movf	??_setSw_Main,w
  6023  033A  0781               	addwf	1,f
  6024                           
  6025                           ;Switch_B1.c: 199: if (Sw->DebounceTime >= (60 / 20)) {
  6026  033B  0021               	movlb	1	; select bank1
  6027  033C  0859               	movf	_Sw^(0+128),w
  6028  033D  3E02               	addlw	2
  6029  033E  0086               	movwf	6
  6030  033F  3001               	movlw	1	; select bank2/3
  6031  0340  0087               	movwf	7
  6032  0341  3003               	movlw	3
  6033  0342  0201               	subwf	1,w
  6034  0343  1C03               	skipc
  6035  0344  0008               	return
  6036                           
  6037                           ;Switch_B1.c: 200: Sw->DebounceTime = 0;
  6038  0345  0859               	movf	_Sw^(0+128),w
  6039  0346  3E02               	addlw	2
  6040  0347  0086               	movwf	6
  6041  0348  3001               	movlw	1	; select bank2/3
  6042  0349  0087               	movwf	7
  6043  034A  0181               	clrf	1
  6044                           
  6045                           ;Switch_B1.c: 201: Sw->Debounce = 0;
  6046  034B  0859               	movf	_Sw^(0+128),w
  6047  034C  0086               	movwf	6
  6048  034D  3001               	movlw	1	; select bank2/3
  6049  034E  0087               	movwf	7
  6050  034F  1101               	bcf	1,2
  6051                           
  6052                           ;Switch_B1.c: 202: Sw->Hold1Time = 0;
  6053  0350  0859               	movf	_Sw^(0+128),w
  6054  0351  3E03               	addlw	3
  6055  0352  0086               	movwf	6
  6056  0353  3001               	movlw	1	; select bank2/3
  6057  0354  0087               	movwf	7
  6058  0355  3000               	movlw	0
  6059  0356  3FC0               	movwi [0]fsr1
  6060  0357  3FC1               	movwi [1]fsr1
  6061                           
  6062                           ;Switch_B1.c: 203: Sw->Hold1 = 0;
  6063  0358  0859               	movf	_Sw^(0+128),w
  6064  0359  0086               	movwf	6
  6065  035A  3001               	movlw	1	; select bank2/3
  6066  035B  0087               	movwf	7
  6067  035C  1181               	bcf	1,3
  6068                           
  6069                           ;Switch_B1.c: 205: Sw->Hold2 = 0;
  6070  035D  0859               	movf	_Sw^(0+128),w
  6071  035E  0086               	movwf	6
  6072  035F  3001               	movlw	1	; select bank2/3
  6073  0360  0087               	movwf	7
  6074  0361  1201               	bcf	1,4
  6075                           
  6076                           ;Switch_B1.c: 206: Sw->Hold3 = 0;
  6077  0362  0859               	movf	_Sw^(0+128),w
  6078  0363  0086               	movwf	6
  6079  0364  3001               	movlw	1	; select bank2/3
  6080  0365  0087               	movwf	7
  6081  0366  1281               	bcf	1,5
  6082                           
  6083                           ;Switch_B1.c: 207: Sw->Hold2Time = 0;
  6084  0367  0859               	movf	_Sw^(0+128),w
  6085  0368  3E05               	addlw	5
  6086  0369  0086               	movwf	6
  6087  036A  3001               	movlw	1	; select bank2/3
  6088  036B  0087               	movwf	7
  6089  036C  3000               	movlw	0
  6090  036D  3FC0               	movwi [0]fsr1
  6091  036E  3FC1               	movwi [1]fsr1
  6092                           
  6093                           ;Switch_B1.c: 208: Sw->Hold3Time = 0;
  6094  036F  0859               	movf	_Sw^(0+128),w
  6095  0370  3E07               	addlw	7
  6096  0371  0086               	movwf	6
  6097  0372  3001               	movlw	1	; select bank2/3
  6098  0373  0087               	movwf	7
  6099  0374  3000               	movlw	0
  6100  0375  3FC0               	movwi [0]fsr1
  6101  0376  3FC1               	movwi [1]fsr1
  6102                           
  6103                           ;Switch_B1.c: 215: setDimmerLights_SwOff(sw);
  6104  0377  0020               	movlb	0	; select bank0
  6105  0378  0834               	movf	setSw_Main@sw,w
  6106  0379  3190  20CB  3182   	fcall	_setDimmerLights_SwOff
  6107                           
  6108                           ;Switch_B1.c: 219: setRF_Learn(0);
  6109  037C  3000               	movlw	0
  6110  037D  319B  2336         	fcall	_setRF_Learn
  6111                           
  6112                           ;Switch_B1.c: 221: }
  6113                           ;Switch_B1.c: 222: }
  6114                           ;Switch_B1.c: 223: }
  6115                           ;Switch_B1.c: 224: } else {
  6116  037F  0008               	return
  6117  0380                     l2570:	
  6118                           
  6119                           ;Switch_B1.c: 225: if (myMain.PowerON == 1) {
  6120  0380  1C2E               	btfss	_myMain^(0+128),0
  6121  0381  0008               	return
  6122                           
  6123                           ;Switch_B1.c: 226: Sw->Enable = 1;
  6124  0382  0859               	movf	_Sw^(0+128),w
  6125  0383  0086               	movwf	6
  6126  0384  3001               	movlw	1	; select bank2/3
  6127  0385  0087               	movwf	7
  6128  0386  1401               	bsf	1,0
  6129  0387  0008               	return
  6130  0388                     __end_of_setSw_Main:	
  6131                           
  6132                           	psect	text14
  6133  1B36                     __ptext14:	
  6134 ;; *************** function _setRF_Learn *****************
  6135 ;; Defined at:
  6136 ;;		line 33 in file "../src/RF_Control_B1.c"
  6137 ;; Parameters:    Size  Location     Type
  6138 ;;  command         1    wreg     unsigned char 
  6139 ;; Auto vars:     Size  Location     Type
  6140 ;;  command         1    1[BANK0 ] unsigned char 
  6141 ;; Return value:  Size  Location     Type
  6142 ;;		None               void
  6143 ;; Registers used:
  6144 ;;		wreg, status,2, status,0
  6145 ;; Tracked objects:
  6146 ;;		On entry : 0/0
  6147 ;;		On exit  : 0/0
  6148 ;;		Unchanged: 0/0
  6149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6151 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6152 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6153 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6154 ;;Total ram usage:        2 bytes
  6155 ;; Hardware stack levels used:    1
  6156 ;; Hardware stack levels required when called:    5
  6157 ;; This function calls:
  6158 ;;		Nothing
  6159 ;; This function is called by:
  6160 ;;		_setSw_Main
  6161 ;; This function uses a non-reentrant model
  6162 ;;
  6163                           
  6164                           
  6165                           ;psect for function _setRF_Learn
  6166  1B36                     _setRF_Learn:	
  6167                           
  6168                           ;incstack = 0
  6169                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6170                           ;setRF_Learn@command stored from wreg
  6171  1B36  0020               	movlb	0	; select bank0
  6172  1B37  00A1               	movwf	setRF_Learn@command
  6173                           
  6174                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  6175  1B38  0821               	movf	setRF_Learn@command,w
  6176  1B39  3A01               	xorlw	1
  6177  1B3A  3000               	movlw	0
  6178  1B3B  1903               	skipnz
  6179  1B3C  3001               	movlw	1
  6180  1B3D  00A0               	movwf	??_setRF_Learn
  6181  1B3E  0EA0               	swapf	??_setRF_Learn,f
  6182  1B3F  0DA0               	rlf	??_setRF_Learn,f
  6183  1B40  0DA0               	rlf	??_setRF_Learn,f
  6184  1B41  0021               	movlb	1	; select bank1
  6185  1B42  0820               	movf	_RF1^(0+128),w
  6186  1B43  0020               	movlb	0	; select bank0
  6187  1B44  0620               	xorwf	??_setRF_Learn,w
  6188  1B45  39BF               	andlw	-65
  6189  1B46  0620               	xorwf	??_setRF_Learn,w
  6190  1B47  0021               	movlb	1	; select bank1
  6191  1B48  00A0               	movwf	_RF1^(0+128)
  6192  1B49  0008               	return
  6193  1B4A                     __end_of_setRF_Learn:	
  6194                           
  6195                           	psect	text15
  6196  1EC3                     __ptext15:	
  6197 ;; *************** function _setDimmerLights_DimmingOn *****************
  6198 ;; Defined at:
  6199 ;;		line 750 in file "../src/Dimmer_B1.c"
  6200 ;; Parameters:    Size  Location     Type
  6201 ;;  sw              1    wreg     unsigned char 
  6202 ;; Auto vars:     Size  Location     Type
  6203 ;;  sw              1    2[BANK0 ] unsigned char 
  6204 ;; Return value:  Size  Location     Type
  6205 ;;		None               void
  6206 ;; Registers used:
  6207 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6208 ;; Tracked objects:
  6209 ;;		On entry : 0/0
  6210 ;;		On exit  : 0/0
  6211 ;;		Unchanged: 0/0
  6212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6214 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6216 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6217 ;;Total ram usage:        1 bytes
  6218 ;; Hardware stack levels used:    1
  6219 ;; Hardware stack levels required when called:    6
  6220 ;; This function calls:
  6221 ;;		_DimmerLights_SelectPointer
  6222 ;; This function is called by:
  6223 ;;		_setSw_Main
  6224 ;; This function uses a non-reentrant model
  6225 ;;
  6226                           
  6227                           
  6228                           ;psect for function _setDimmerLights_DimmingOn
  6229  1EC3                     _setDimmerLights_DimmingOn:	
  6230                           
  6231                           ;incstack = 0
  6232                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6233                           ;setDimmerLights_DimmingOn@sw stored from wreg
  6234  1EC3  0020               	movlb	0	; select bank0
  6235  1EC4  00A2               	movwf	setDimmerLights_DimmingOn@sw
  6236                           
  6237                           ;Dimmer_B1.c: 756: DimmerLights_SelectPointer(sw);
  6238  1EC5  0822               	movf	setDimmerLights_DimmingOn@sw,w
  6239  1EC6  319B  23CB  319E   	fcall	_DimmerLights_SelectPointer
  6240                           
  6241                           ;Dimmer_B1.c: 757: if (DimmerLights->Trigger == 0) {
  6242  1EC9  0021               	movlb	1	; select bank1
  6243  1ECA  0856               	movf	_DimmerLights^(0+128),w
  6244  1ECB  0086               	movwf	6
  6245  1ECC  3001               	movlw	1	; select bank2/3
  6246  1ECD  0087               	movwf	7
  6247  1ECE  1881               	btfsc	1,1
  6248  1ECF  0008               	return
  6249                           
  6250                           ;Dimmer_B1.c: 758: if (DimmerLights->SwFlag == 1) {
  6251  1ED0  0856               	movf	_DimmerLights^(0+128),w
  6252  1ED1  0086               	movwf	6
  6253  1ED2  3001               	movlw	1	; select bank2/3
  6254  1ED3  0087               	movwf	7
  6255  1ED4  1C01               	btfss	1,0
  6256  1ED5  0008               	return
  6257                           
  6258                           ;Dimmer_B1.c: 759: DimmerLights->Status = 1;
  6259  1ED6  0A56               	incf	_DimmerLights^(0+128),w
  6260  1ED7  0086               	movwf	6
  6261  1ED8  3001               	movlw	1	; select bank2/3
  6262  1ED9  0087               	movwf	7
  6263  1EDA  1401               	bsf	1,0
  6264                           
  6265                           ;Dimmer_B1.c: 761: DimmerLights->DimmingSwFlag = 1;
  6266  1EDB  0856               	movf	_DimmerLights^(0+128),w
  6267  1EDC  0086               	movwf	6
  6268  1EDD  3001               	movlw	1	; select bank2/3
  6269  1EDE  0087               	movwf	7
  6270  1EDF  1581               	bsf	1,3
  6271                           
  6272                           ;Dimmer_B1.c: 762: DimmerLights->DimmingTrigger = 1;
  6273  1EE0  0856               	movf	_DimmerLights^(0+128),w
  6274  1EE1  0086               	movwf	6
  6275  1EE2  3001               	movlw	1	; select bank2/3
  6276  1EE3  0087               	movwf	7
  6277  1EE4  1601               	bsf	1,4
  6278                           
  6279                           ;Dimmer_B1.c: 763: DimmerLights->DimmingSwitch = 1;
  6280  1EE5  0856               	movf	_DimmerLights^(0+128),w
  6281  1EE6  0086               	movwf	6
  6282  1EE7  3001               	movlw	1	; select bank2/3
  6283  1EE8  0087               	movwf	7
  6284  1EE9  1681               	bsf	1,5
  6285  1EEA  0008               	return
  6286  1EEB                     __end_of_setDimmerLights_DimmingOn:	
  6287                           
  6288                           	psect	text16
  6289  1D56                     __ptext16:	
  6290 ;; *************** function _getSw_KeyStatus *****************
  6291 ;; Defined at:
  6292 ;;		line 237 in file "../src/Switch_B1.c"
  6293 ;; Parameters:    Size  Location     Type
  6294 ;;  sw              1    wreg     unsigned char 
  6295 ;; Auto vars:     Size  Location     Type
  6296 ;;  sw              1    4[BANK0 ] unsigned char 
  6297 ;;  status          1    3[BANK0 ] unsigned char 
  6298 ;; Return value:  Size  Location     Type
  6299 ;;                  1    wreg      unsigned char 
  6300 ;; Registers used:
  6301 ;;		wreg, status,2
  6302 ;; Tracked objects:
  6303 ;;		On entry : 0/0
  6304 ;;		On exit  : 0/0
  6305 ;;		Unchanged: 0/0
  6306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6308 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6309 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6310 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6311 ;;Total ram usage:        5 bytes
  6312 ;; Hardware stack levels used:    1
  6313 ;; Hardware stack levels required when called:    5
  6314 ;; This function calls:
  6315 ;;		Nothing
  6316 ;; This function is called by:
  6317 ;;		_setSw_Main
  6318 ;; This function uses a non-reentrant model
  6319 ;;
  6320                           
  6321                           
  6322                           ;psect for function _getSw_KeyStatus
  6323  1D56                     _getSw_KeyStatus:	
  6324                           
  6325                           ;incstack = 0
  6326                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6327                           ;getSw_KeyStatus@sw stored from wreg
  6328  1D56  0020               	movlb	0	; select bank0
  6329  1D57  00A4               	movwf	getSw_KeyStatus@sw
  6330                           
  6331                           ;Switch_B1.c: 238: char status = 0;
  6332  1D58  01A3               	clrf	getSw_KeyStatus@status
  6333                           
  6334                           ;Switch_B1.c: 258: if (sw == 1) {
  6335  1D59  0824               	movf	getSw_KeyStatus@sw,w
  6336  1D5A  3A01               	xorlw	1
  6337  1D5B  1D03               	skipz
  6338  1D5C  2D65               	goto	l7771
  6339                           
  6340                           ;Switch_B1.c: 259: status = RA0 == 1 || RB1 == 1 ? 1 : 0;
  6341  1D5D  01A1               	clrf	_getSw_KeyStatus$6169
  6342  1D5E  0AA1               	incf	_getSw_KeyStatus$6169,f
  6343  1D5F  1C0C               	btfss	12,0	;volatile
  6344  1D60  188D               	btfsc	13,1	;volatile
  6345  1D61  2D63               	goto	l7769
  6346  1D62  01A1               	clrf	_getSw_KeyStatus$6169
  6347  1D63                     l7769:	
  6348  1D63  0821               	movf	_getSw_KeyStatus$6169,w
  6349  1D64  2D70               	goto	L2
  6350  1D65                     l7771:	
  6351                           ;Switch_B1.c: 260: } else if (sw == 2) {
  6352                           
  6353  1D65  0824               	movf	getSw_KeyStatus@sw,w
  6354  1D66  3A02               	xorlw	2
  6355  1D67  1D03               	skipz
  6356  1D68  2D73               	goto	l7781
  6357                           
  6358                           ;Switch_B1.c: 261: status = RA6 == 1 || RA4 == 1 ? 1 : 0;
  6359  1D69  01A2               	clrf	_getSw_KeyStatus$6170
  6360  1D6A  0AA2               	incf	_getSw_KeyStatus$6170,f
  6361  1D6B  1F0C               	btfss	12,6	;volatile
  6362  1D6C  1A0C               	btfsc	12,4	;volatile
  6363  1D6D  2D6F               	goto	l7779
  6364  1D6E  01A2               	clrf	_getSw_KeyStatus$6170
  6365  1D6F                     l7779:	
  6366  1D6F  0822               	movf	_getSw_KeyStatus$6170,w
  6367  1D70                     L2:	
  6368  1D70  00A0               	movwf	??_getSw_KeyStatus
  6369  1D71  0820               	movf	??_getSw_KeyStatus,w
  6370  1D72  00A3               	movwf	getSw_KeyStatus@status
  6371  1D73                     l7781:	
  6372                           
  6373                           ;Switch_B1.c: 262: }
  6374                           ;Switch_B1.c: 275: return status;
  6375  1D73  0823               	movf	getSw_KeyStatus@status,w
  6376  1D74  0008               	return
  6377  1D75                     __end_of_getSw_KeyStatus:	
  6378                           
  6379                           	psect	text17
  6380  1C10                     __ptext17:	
  6381 ;; *************** function _SwPointSelect *****************
  6382 ;; Defined at:
  6383 ;;		line 25 in file "../src/Switch_B1.c"
  6384 ;; Parameters:    Size  Location     Type
  6385 ;;  sw              1    wreg     unsigned char 
  6386 ;; Auto vars:     Size  Location     Type
  6387 ;;  sw              1    1[BANK0 ] unsigned char 
  6388 ;; Return value:  Size  Location     Type
  6389 ;;		None               void
  6390 ;; Registers used:
  6391 ;;		wreg
  6392 ;; Tracked objects:
  6393 ;;		On entry : 0/0
  6394 ;;		On exit  : 0/0
  6395 ;;		Unchanged: 0/0
  6396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6398 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6399 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6400 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6401 ;;Total ram usage:        2 bytes
  6402 ;; Hardware stack levels used:    1
  6403 ;; Hardware stack levels required when called:    5
  6404 ;; This function calls:
  6405 ;;		Nothing
  6406 ;; This function is called by:
  6407 ;;		_setSw_Main
  6408 ;; This function uses a non-reentrant model
  6409 ;;
  6410                           
  6411                           
  6412                           ;psect for function _SwPointSelect
  6413  1C10                     _SwPointSelect:	
  6414                           
  6415                           ;incstack = 0
  6416                           ; Regs used in _SwPointSelect: [wreg]
  6417                           ;SwPointSelect@sw stored from wreg
  6418  1C10  0020               	movlb	0	; select bank0
  6419  1C11  00A1               	movwf	SwPointSelect@sw
  6420                           
  6421                           ;Switch_B1.c: 28: if (sw == 1) {
  6422  1C12  0821               	movf	SwPointSelect@sw,w
  6423  1C13  3A01               	xorlw	1
  6424  1C14  1D03               	skipz
  6425  1C15  2C1C               	goto	l7755
  6426                           
  6427                           ;Switch_B1.c: 29: Sw = &Sw1;
  6428  1C16  30BE               	movlw	_Sw1& (0+255)
  6429  1C17  00A0               	movwf	??_SwPointSelect
  6430  1C18  0820               	movf	??_SwPointSelect,w
  6431  1C19  0021               	movlb	1	; select bank1
  6432  1C1A  00D9               	movwf	_Sw^(0+128)
  6433                           
  6434                           ;Switch_B1.c: 30: }
  6435  1C1B  0008               	return
  6436  1C1C                     l7755:	
  6437                           
  6438                           ;Switch_B1.c: 33: else if (sw == 2) {
  6439  1C1C  0020               	movlb	0	; select bank0
  6440  1C1D  0821               	movf	SwPointSelect@sw,w
  6441  1C1E  3A02               	xorlw	2
  6442  1C1F  1D03               	skipz
  6443  1C20  0008               	return
  6444                           
  6445                           ;Switch_B1.c: 34: Sw = &Sw2;
  6446  1C21  30C7               	movlw	_Sw2& (0+255)
  6447  1C22  00A0               	movwf	??_SwPointSelect
  6448  1C23  0820               	movf	??_SwPointSelect,w
  6449  1C24  0021               	movlb	1	; select bank1
  6450  1C25  00D9               	movwf	_Sw^(0+128)
  6451  1C26  0008               	return
  6452  1C27                     __end_of_SwPointSelect:	
  6453                           
  6454                           	psect	text18
  6455  1B89                     __ptext18:	
  6456 ;; *************** function _TouchPower *****************
  6457 ;; Defined at:
  6458 ;;		line 10 in file "../src/Switch_B1.c"
  6459 ;; Parameters:    Size  Location     Type
  6460 ;;		None
  6461 ;; Auto vars:     Size  Location     Type
  6462 ;;		None
  6463 ;; Return value:  Size  Location     Type
  6464 ;;		None               void
  6465 ;; Registers used:
  6466 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6467 ;; Tracked objects:
  6468 ;;		On entry : 0/0
  6469 ;;		On exit  : 0/0
  6470 ;;		Unchanged: 0/0
  6471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6473 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6475 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6476 ;;Total ram usage:        0 bytes
  6477 ;; Hardware stack levels used:    1
  6478 ;; Hardware stack levels required when called:    6
  6479 ;; This function calls:
  6480 ;;		_Timeout_Counter
  6481 ;;		_set_TimeoutCleared
  6482 ;; This function is called by:
  6483 ;;		_Switch_Main
  6484 ;; This function uses a non-reentrant model
  6485 ;;
  6486                           
  6487                           
  6488                           ;psect for function _TouchPower
  6489  1B89                     _TouchPower:	
  6490                           
  6491                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6492                           
  6493                           ;incstack = 0
  6494                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6495  1B89  0021               	movlb	1	; select bank1
  6496  1B8A  1C2E               	btfss	_myMain^(0+128),0
  6497  1B8B  0008               	return
  6498                           
  6499                           ;Switch_B1.c: 12: if (RC5 == 0) {
  6500  1B8C  0020               	movlb	0	; select bank0
  6501  1B8D  1A8E               	btfsc	14,5	;volatile
  6502  1B8E  0008               	return
  6503  1B8F  2B95               	goto	l8443
  6504  1B90                     l2548:	
  6505                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6506                           
  6507                           
  6508                           ;Switch_B1.c: 14: RC5 = 1;
  6509  1B90  0020               	movlb	0	; select bank0
  6510  1B91  168E               	bsf	14,5	;volatile
  6511                           
  6512                           ;Switch_B1.c: 15: Timeout_Counter();
  6513  1B92  319B  2374  319B   	fcall	_Timeout_Counter
  6514  1B95                     l8443:	
  6515  1B95  0020               	movlb	0	; select bank0
  6516  1B96  1A8E               	btfsc	14,5	;volatile
  6517  1B97  2B9B               	goto	l8447
  6518  1B98  0021               	movlb	1	; select bank1
  6519  1B99  1D38               	btfss	(_myMain^(0+128)+10),2
  6520  1B9A  2B90               	goto	l2548
  6521  1B9B                     l8447:	
  6522                           
  6523                           ;Switch_B1.c: 16: }
  6524                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6525  1B9B  3198  20E6         	fcall	_set_TimeoutCleared
  6526  1B9D  0008               	return
  6527  1B9E                     __end_of_TouchPower:	
  6528                           
  6529                           	psect	text19
  6530  18E6                     __ptext19:	
  6531 ;; *************** function _set_TimeoutCleared *****************
  6532 ;; Defined at:
  6533 ;;		line 281 in file "../src/main_B1.c"
  6534 ;; Parameters:    Size  Location     Type
  6535 ;;		None
  6536 ;; Auto vars:     Size  Location     Type
  6537 ;;		None
  6538 ;; Return value:  Size  Location     Type
  6539 ;;		None               void
  6540 ;; Registers used:
  6541 ;;		status,2
  6542 ;; Tracked objects:
  6543 ;;		On entry : 0/0
  6544 ;;		On exit  : 0/0
  6545 ;;		Unchanged: 0/0
  6546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6550 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6551 ;;Total ram usage:        0 bytes
  6552 ;; Hardware stack levels used:    1
  6553 ;; Hardware stack levels required when called:    5
  6554 ;; This function calls:
  6555 ;;		Nothing
  6556 ;; This function is called by:
  6557 ;;		_getAD
  6558 ;;		_TouchPower
  6559 ;; This function uses a non-reentrant model
  6560 ;;
  6561                           
  6562                           
  6563                           ;psect for function _set_TimeoutCleared
  6564  18E6                     _set_TimeoutCleared:	
  6565                           
  6566                           ;main_B1.c: 282: myMain.Timeout = 0;
  6567                           
  6568                           ;incstack = 0
  6569                           ; Regs used in _set_TimeoutCleared: [status,2]
  6570  18E6  0021               	movlb	1	; select bank1
  6571  18E7  1138               	bcf	(_myMain^(0+128)+10),2
  6572                           
  6573                           ;main_B1.c: 283: myMain.Timeout_Counter = 0;
  6574  18E8  01B9               	clrf	(_myMain^(0+128)+11)
  6575  18E9  01BA               	clrf	((_myMain+1)^(0+128)+11)
  6576  18EA  0008               	return
  6577  18EB                     __end_of_set_TimeoutCleared:	
  6578                           
  6579                           	psect	text20
  6580  1B74                     __ptext20:	
  6581 ;; *************** function _Timeout_Counter *****************
  6582 ;; Defined at:
  6583 ;;		line 272 in file "../src/main_B1.c"
  6584 ;; Parameters:    Size  Location     Type
  6585 ;;		None
  6586 ;; Auto vars:     Size  Location     Type
  6587 ;;		None
  6588 ;; Return value:  Size  Location     Type
  6589 ;;		None               void
  6590 ;; Registers used:
  6591 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6592 ;; Tracked objects:
  6593 ;;		On entry : 0/0
  6594 ;;		On exit  : 0/0
  6595 ;;		Unchanged: 0/0
  6596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6600 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6601 ;;Total ram usage:        0 bytes
  6602 ;; Hardware stack levels used:    1
  6603 ;; Hardware stack levels required when called:    5
  6604 ;; This function calls:
  6605 ;;		Nothing
  6606 ;; This function is called by:
  6607 ;;		_getAD
  6608 ;;		_TouchPower
  6609 ;; This function uses a non-reentrant model
  6610 ;;
  6611                           
  6612                           
  6613                           ;psect for function _Timeout_Counter
  6614  1B74                     _Timeout_Counter:	
  6615                           
  6616                           ;main_B1.c: 273: myMain.Timeout_Counter++;
  6617                           
  6618                           ;incstack = 0
  6619                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6620  1B74  3001               	movlw	1
  6621  1B75  0021               	movlb	1	; select bank1
  6622  1B76  07B9               	addwf	(_myMain^(0+128)+11),f
  6623  1B77  3000               	movlw	0
  6624  1B78  3DBA               	addwfc	((_myMain+1)^(0+128)+11),f
  6625                           
  6626                           ;main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  6627  1B79  300B               	movlw	11
  6628  1B7A  3EAE               	addlw	_myMain& (0+255)
  6629  1B7B  0086               	movwf	6
  6630  1B7C  0187               	clrf	7
  6631  1B7D  3F40               	moviw [0]fsr1
  6632  1B7E  3AA8               	xorlw	168
  6633  1B7F  1D03               	skipz
  6634  1B80  2B83               	goto	u7315
  6635  1B81  3F41               	moviw [1]fsr1
  6636  1B82  3A61               	xorlw	97
  6637  1B83                     u7315:	
  6638  1B83  1D03               	skipz
  6639  1B84  0008               	return
  6640                           
  6641                           ;main_B1.c: 275: myMain.Timeout_Counter = 0;
  6642  1B85  01B9               	clrf	(_myMain^(0+128)+11)
  6643  1B86  01BA               	clrf	((_myMain+1)^(0+128)+11)
  6644                           
  6645                           ;main_B1.c: 276: myMain.Timeout = 1;
  6646  1B87  1538               	bsf	(_myMain^(0+128)+10),2
  6647  1B88  0008               	return
  6648  1B89                     __end_of_Timeout_Counter:	
  6649                           
  6650                           	psect	text21
  6651  1934                     __ptext21:	
  6652 ;; *************** function _Switch_Initialization *****************
  6653 ;; Defined at:
  6654 ;;		line 46 in file "../src/Switch_B1.c"
  6655 ;; Parameters:    Size  Location     Type
  6656 ;;		None
  6657 ;; Auto vars:     Size  Location     Type
  6658 ;;		None
  6659 ;; Return value:  Size  Location     Type
  6660 ;;		None               void
  6661 ;; Registers used:
  6662 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6663 ;; Tracked objects:
  6664 ;;		On entry : 0/0
  6665 ;;		On exit  : 0/0
  6666 ;;		Unchanged: 0/0
  6667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6671 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6672 ;;Total ram usage:        0 bytes
  6673 ;; Hardware stack levels used:    1
  6674 ;; Hardware stack levels required when called:    8
  6675 ;; This function calls:
  6676 ;;		_setSw_Initialization
  6677 ;; This function is called by:
  6678 ;;		_main
  6679 ;; This function uses a non-reentrant model
  6680 ;;
  6681                           
  6682                           
  6683                           ;psect for function _Switch_Initialization
  6684  1934                     _Switch_Initialization:	
  6685                           
  6686                           ;Switch_B1.c: 52: setSw_Initialization(1);
  6687                           
  6688                           ;incstack = 0
  6689                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6690  1934  3001               	movlw	1
  6691  1935  3199  212C  3199   	fcall	_setSw_Initialization
  6692                           
  6693                           ;Switch_B1.c: 56: setSw_Initialization(2);
  6694  1938  3002               	movlw	2
  6695  1939  3199  212C         	fcall	_setSw_Initialization
  6696  193B  0008               	return
  6697  193C                     __end_of_Switch_Initialization:	
  6698                           
  6699                           	psect	text22
  6700  192C                     __ptext22:	
  6701 ;; *************** function _setSw_Initialization *****************
  6702 ;; Defined at:
  6703 ;;		line 66 in file "../src/Switch_B1.c"
  6704 ;; Parameters:    Size  Location     Type
  6705 ;;  sw              1    wreg     unsigned char 
  6706 ;; Auto vars:     Size  Location     Type
  6707 ;;  sw              1    4[BANK0 ] unsigned char 
  6708 ;; Return value:  Size  Location     Type
  6709 ;;		None               void
  6710 ;; Registers used:
  6711 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6712 ;; Tracked objects:
  6713 ;;		On entry : 0/0
  6714 ;;		On exit  : 0/0
  6715 ;;		Unchanged: 0/0
  6716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6718 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6720 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6721 ;;Total ram usage:        1 bytes
  6722 ;; Hardware stack levels used:    1
  6723 ;; Hardware stack levels required when called:    7
  6724 ;; This function calls:
  6725 ;;		_setLED
  6726 ;; This function is called by:
  6727 ;;		_Switch_Initialization
  6728 ;; This function uses a non-reentrant model
  6729 ;;
  6730                           
  6731                           
  6732                           ;psect for function _setSw_Initialization
  6733  192C                     _setSw_Initialization:	
  6734                           
  6735                           ;incstack = 0
  6736                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6737                           ;setSw_Initialization@sw stored from wreg
  6738  192C  0020               	movlb	0	; select bank0
  6739  192D  00A4               	movwf	setSw_Initialization@sw
  6740                           
  6741                           ;Switch_B1.c: 68: setLED(sw, 1);
  6742  192E  01A2               	clrf	setLED@command
  6743  192F  0AA2               	incf	setLED@command,f
  6744  1930  0824               	movf	setSw_Initialization@sw,w
  6745  1931  3193  230E         	fcall	_setLED
  6746  1933  0008               	return
  6747  1934                     __end_of_setSw_Initialization:	
  6748                           
  6749                           	psect	text23
  6750  18C9                     __ptext23:	
  6751 ;; *************** function _RF_Main *****************
  6752 ;; Defined at:
  6753 ;;		line 26 in file "../src/RF_Control_B1.c"
  6754 ;; Parameters:    Size  Location     Type
  6755 ;;		None
  6756 ;; Auto vars:     Size  Location     Type
  6757 ;;		None
  6758 ;; Return value:  Size  Location     Type
  6759 ;;		None               void
  6760 ;; Registers used:
  6761 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6762 ;; Tracked objects:
  6763 ;;		On entry : 0/0
  6764 ;;		On exit  : 0/0
  6765 ;;		Unchanged: 0/0
  6766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6770 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6771 ;;Total ram usage:        0 bytes
  6772 ;; Hardware stack levels used:    1
  6773 ;; Hardware stack levels required when called:   12
  6774 ;; This function calls:
  6775 ;;		_setRF_Main
  6776 ;; This function is called by:
  6777 ;;		_main
  6778 ;; This function uses a non-reentrant model
  6779 ;;
  6780                           
  6781                           
  6782                           ;psect for function _RF_Main
  6783  18C9                     _RF_Main:	
  6784                           
  6785                           ;RF_Control_B1.c: 28: setRF_Main();
  6786                           
  6787                           ;incstack = 0
  6788                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6789  18C9  3185  2555         	fcall	_setRF_Main
  6790  18CB  0008               	return
  6791  18CC                     __end_of_RF_Main:	
  6792                           
  6793                           	psect	text24
  6794  0555                     __ptext24:	
  6795 ;; *************** function _setRF_Main *****************
  6796 ;; Defined at:
  6797 ;;		line 53 in file "../src/RF_Control_B1.c"
  6798 ;; Parameters:    Size  Location     Type
  6799 ;;		None
  6800 ;; Auto vars:     Size  Location     Type
  6801 ;;  error           1    3[BANK1 ] unsigned char 
  6802 ;; Return value:  Size  Location     Type
  6803 ;;		None               void
  6804 ;; Registers used:
  6805 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6806 ;; Tracked objects:
  6807 ;;		On entry : 0/0
  6808 ;;		On exit  : 0/0
  6809 ;;		Unchanged: 0/0
  6810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6812 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6813 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6814 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6815 ;;Total ram usage:        2 bytes
  6816 ;; Hardware stack levels used:    1
  6817 ;; Hardware stack levels required when called:   11
  6818 ;; This function calls:
  6819 ;;		_CC2500_PowerOnInitial
  6820 ;;		_CC2500_RxData
  6821 ;;		_CC2500_TxData
  6822 ;;		_CC2500_WriteCommand
  6823 ;;		_RF_RxDisable
  6824 ;;		___lwdiv
  6825 ;;		_getBuz_GO
  6826 ;;		_getRF_KeyStatus
  6827 ;;		_getRxData
  6828 ;; This function is called by:
  6829 ;;		_RF_Main
  6830 ;; This function uses a non-reentrant model
  6831 ;;
  6832                           
  6833                           
  6834                           ;psect for function _setRF_Main
  6835  0555                     _setRF_Main:	
  6836                           
  6837                           ;RF_Control_B1.c: 54: char error = 0;
  6838                           
  6839                           ;incstack = 0
  6840                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6841  0555  0021               	movlb	1	; select bank1
  6842  0556  01E9               	clrf	setRF_Main@error^(0+128)
  6843                           
  6844                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  6845  0557  1C20               	btfss	_RF1^(0+128),0
  6846  0558  2E26               	goto	l2151
  6847                           
  6848                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  6849  0559  319A  2235  3185   	fcall	_getBuz_GO
  6850  055C  0020               	movlb	0	; select bank0
  6851  055D  0821               	movf	?_getBuz_GO+1,w
  6852  055E  0420               	iorwf	?_getBuz_GO,w
  6853  055F  1D03               	skipz
  6854  0560  2E07               	goto	l8413
  6855                           
  6856                           ;RF_Control_B1.c: 59: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6857  0561  319A  2246  3185   	fcall	_getRF_KeyStatus
  6858  0564  3A01               	xorlw	1
  6859  0565  3000               	movlw	0
  6860  0566  1903               	skipnz
  6861  0567  3001               	movlw	1
  6862  0568  0021               	movlb	1	; select bank1
  6863  0569  00E8               	movwf	??_setRF_Main^(0+128)
  6864  056A  0CE8               	rrf	??_setRF_Main^(0+128),f
  6865  056B  0CE8               	rrf	??_setRF_Main^(0+128),f
  6866  056C  0820               	movf	_RF1^(0+128),w
  6867  056D  0668               	xorwf	??_setRF_Main^(0+128),w
  6868  056E  397F               	andlw	-129
  6869  056F  0668               	xorwf	??_setRF_Main^(0+128),w
  6870  0570  00A0               	movwf	_RF1^(0+128)
  6871                           
  6872                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  6873  0571  1FA0               	btfss	_RF1^(0+128),7
  6874  0572  2D75               	goto	l2155
  6875  0573  1F20               	btfss	_RF1^(0+128),6
  6876  0574  2E07               	goto	l8413
  6877  0575                     l2155:	
  6878                           
  6879                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  6880  0575  1D20               	btfss	_RF1^(0+128),2
  6881  0576  2DC6               	goto	l2156
  6882                           
  6883                           ;RF_Control_B1.c: 67: if (RF1.Learn == 0) {
  6884  0577  1B20               	btfsc	_RF1^(0+128),6
  6885  0578  2DC1               	goto	l8385
  6886                           
  6887                           ;RF_Control_B1.c: 68: RF1.Count++;
  6888  0579  3001               	movlw	1
  6889  057A  07A2               	addwf	(_RF1^(0+128)+2),f
  6890  057B  3000               	movlw	0
  6891  057C  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6892                           
  6893                           ;RF_Control_B1.c: 69: if (RF1.Count >= (RF1.RunTime / 20)) {
  6894  057D  3014               	movlw	20
  6895  057E  0020               	movlb	0	; select bank0
  6896  057F  00A0               	movwf	___lwdiv@divisor
  6897  0580  3000               	movlw	0
  6898  0581  00A1               	movwf	___lwdiv@divisor+1
  6899  0582  0021               	movlb	1	; select bank1
  6900  0583  0828               	movf	((_RF1+1)^(0+128)+7),w
  6901  0584  0020               	movlb	0	; select bank0
  6902  0585  01A3               	clrf	___lwdiv@dividend+1
  6903  0586  07A3               	addwf	___lwdiv@dividend+1,f
  6904  0587  0021               	movlb	1	; select bank1
  6905  0588  0827               	movf	(_RF1^(0+128)+7),w
  6906  0589  0020               	movlb	0	; select bank0
  6907  058A  01A2               	clrf	___lwdiv@dividend
  6908  058B  07A2               	addwf	___lwdiv@dividend,f
  6909  058C  3190  205B  3185   	fcall	___lwdiv
  6910  058F  0020               	movlb	0	; select bank0
  6911  0590  0821               	movf	?___lwdiv+1,w
  6912  0591  0021               	movlb	1	; select bank1
  6913  0592  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6914  0593  1D03               	skipz
  6915  0594  2D99               	goto	u8805
  6916  0595  0020               	movlb	0	; select bank0
  6917  0596  0820               	movf	?___lwdiv,w
  6918  0597  0021               	movlb	1	; select bank1
  6919  0598  0222               	subwf	(_RF1^(0+128)+2),w
  6920  0599                     u8805:	
  6921  0599  1C03               	skipc
  6922  059A  2E07               	goto	l8413
  6923                           
  6924                           ;RF_Control_B1.c: 70: RF1.Count = (RF1.RunTime / 20);
  6925  059B  3014               	movlw	20
  6926  059C  0020               	movlb	0	; select bank0
  6927  059D  00A0               	movwf	___lwdiv@divisor
  6928  059E  3000               	movlw	0
  6929  059F  00A1               	movwf	___lwdiv@divisor+1
  6930  05A0  0021               	movlb	1	; select bank1
  6931  05A1  0828               	movf	((_RF1+1)^(0+128)+7),w
  6932  05A2  0020               	movlb	0	; select bank0
  6933  05A3  01A3               	clrf	___lwdiv@dividend+1
  6934  05A4  07A3               	addwf	___lwdiv@dividend+1,f
  6935  05A5  0021               	movlb	1	; select bank1
  6936  05A6  0827               	movf	(_RF1^(0+128)+7),w
  6937  05A7  0020               	movlb	0	; select bank0
  6938  05A8  01A2               	clrf	___lwdiv@dividend
  6939  05A9  07A2               	addwf	___lwdiv@dividend,f
  6940  05AA  3190  205B  3185   	fcall	___lwdiv
  6941  05AD  0020               	movlb	0	; select bank0
  6942  05AE  0821               	movf	?___lwdiv+1,w
  6943  05AF  0021               	movlb	1	; select bank1
  6944  05B0  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6945  05B1  07A3               	addwf	((_RF1+1)^(0+128)+2),f
  6946  05B2  0020               	movlb	0	; select bank0
  6947  05B3  0820               	movf	?___lwdiv,w
  6948  05B4  0021               	movlb	1	; select bank1
  6949  05B5  01A2               	clrf	(_RF1^(0+128)+2)
  6950  05B6  07A2               	addwf	(_RF1^(0+128)+2),f
  6951                           
  6952                           ;RF_Control_B1.c: 72: RF1.TransceiveGO = 0;
  6953  05B7  1120               	bcf	_RF1^(0+128),2
  6954                           
  6955                           ;RF_Control_B1.c: 73: RF1.CorrectionCounter = 0;
  6956  05B8  01AA               	clrf	(_RF1^(0+128)+10)
  6957  05B9  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6958                           
  6959                           ;RF_Control_B1.c: 74: RF_RxDisable();
  6960  05BA  3199  21F3  3185   	fcall	_RF_RxDisable
  6961                           
  6962                           ;RF_Control_B1.c: 75: CC2500_TxData();
  6963  05BD  3197  2725  3185   	fcall	_CC2500_TxData
  6964                           
  6965                           ;RF_Control_B1.c: 77: }
  6966                           ;RF_Control_B1.c: 78: } else {
  6967  05C0  2E07               	goto	l8413
  6968  05C1                     l8385:	
  6969                           
  6970                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  6971  05C1  0021               	movlb	1	; select bank1
  6972  05C2  01A2               	clrf	(_RF1^(0+128)+2)
  6973  05C3  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6974                           
  6975                           ;RF_Control_B1.c: 80: RF1.TransceiveGO = 0;
  6976  05C4  1120               	bcf	_RF1^(0+128),2
  6977                           
  6978                           ;RF_Control_B1.c: 81: }
  6979                           ;RF_Control_B1.c: 82: } else {
  6980  05C5  2E07               	goto	l8413
  6981  05C6                     l2156:	
  6982                           
  6983                           ;RF_Control_B1.c: 83: if (RF1.RxStatus == 1) {
  6984  05C6  1DA0               	btfss	_RF1^(0+128),3
  6985  05C7  2DD5               	goto	l8399
  6986                           
  6987                           ;RF_Control_B1.c: 85: CC2500_RxData();
  6988  05C8  3196  26BA  3185   	fcall	_CC2500_RxData
  6989                           
  6990                           ;RF_Control_B1.c: 87: if (RF1.ReceiveGO == 1) {
  6991  05CB  0021               	movlb	1	; select bank1
  6992  05CC  1CA0               	btfss	_RF1^(0+128),1
  6993  05CD  2E07               	goto	l8413
  6994                           
  6995                           ;RF_Control_B1.c: 88: RF1.ReceiveGO = 0;
  6996  05CE  10A0               	bcf	_RF1^(0+128),1
  6997                           
  6998                           ;RF_Control_B1.c: 89: RF1.CorrectionCounter = 0;
  6999  05CF  01AA               	clrf	(_RF1^(0+128)+10)
  7000  05D0  01AB               	clrf	((_RF1+1)^(0+128)+10)
  7001                           
  7002                           ;RF_Control_B1.c: 97: getRxData();
  7003  05D1  3189  21AB  3185   	fcall	_getRxData
  7004                           
  7005                           ;RF_Control_B1.c: 100: }
  7006                           ;RF_Control_B1.c: 101: } else {
  7007  05D4  2E07               	goto	l8413
  7008  05D5                     l8399:	
  7009                           
  7010                           ;RF_Control_B1.c: 102: RF1.Count++;
  7011  05D5  3001               	movlw	1
  7012  05D6  0021               	movlb	1	; select bank1
  7013  05D7  07A2               	addwf	(_RF1^(0+128)+2),f
  7014  05D8  3000               	movlw	0
  7015  05D9  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  7016                           
  7017                           ;RF_Control_B1.c: 103: if (RF1.Count >= (RF1.RunTime / 20)) {
  7018  05DA  3014               	movlw	20
  7019  05DB  0020               	movlb	0	; select bank0
  7020  05DC  00A0               	movwf	___lwdiv@divisor
  7021  05DD  3000               	movlw	0
  7022  05DE  00A1               	movwf	___lwdiv@divisor+1
  7023  05DF  0021               	movlb	1	; select bank1
  7024  05E0  0828               	movf	((_RF1+1)^(0+128)+7),w
  7025  05E1  0020               	movlb	0	; select bank0
  7026  05E2  01A3               	clrf	___lwdiv@dividend+1
  7027  05E3  07A3               	addwf	___lwdiv@dividend+1,f
  7028  05E4  0021               	movlb	1	; select bank1
  7029  05E5  0827               	movf	(_RF1^(0+128)+7),w
  7030  05E6  0020               	movlb	0	; select bank0
  7031  05E7  01A2               	clrf	___lwdiv@dividend
  7032  05E8  07A2               	addwf	___lwdiv@dividend,f
  7033  05E9  3190  205B  3185   	fcall	___lwdiv
  7034  05EC  0020               	movlb	0	; select bank0
  7035  05ED  0821               	movf	?___lwdiv+1,w
  7036  05EE  0021               	movlb	1	; select bank1
  7037  05EF  0223               	subwf	((_RF1+1)^(0+128)+2),w
  7038  05F0  1D03               	skipz
  7039  05F1  2DF6               	goto	u8835
  7040  05F2  0020               	movlb	0	; select bank0
  7041  05F3  0820               	movf	?___lwdiv,w
  7042  05F4  0021               	movlb	1	; select bank1
  7043  05F5  0222               	subwf	(_RF1^(0+128)+2),w
  7044  05F6                     u8835:	
  7045  05F6  1C03               	skipc
  7046  05F7  2E07               	goto	l8413
  7047                           
  7048                           ;RF_Control_B1.c: 104: RF1.Count = 0;
  7049  05F8  01A2               	clrf	(_RF1^(0+128)+2)
  7050  05F9  01A3               	clrf	((_RF1+1)^(0+128)+2)
  7051                           
  7052                           ;RF_Control_B1.c: 106: RF1.RxStatus = 1;
  7053  05FA  15A0               	bsf	_RF1^(0+128),3
  7054                           
  7055                           ;RF_Control_B1.c: 107: CC2500_WriteCommand(0x36);
  7056  05FB  3036               	movlw	54
  7057  05FC  319C  2473  3185   	fcall	_CC2500_WriteCommand
  7058                           
  7059                           ;RF_Control_B1.c: 108: CC2500_WriteCommand(0x3A);
  7060  05FF  303A               	movlw	58
  7061  0600  319C  2473  3185   	fcall	_CC2500_WriteCommand
  7062                           
  7063                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x34);
  7064  0603  3034               	movlw	52
  7065  0604  319C  2473  3185   	fcall	_CC2500_WriteCommand
  7066  0607                     l8413:	
  7067                           
  7068                           ;RF_Control_B1.c: 111: }
  7069                           ;RF_Control_B1.c: 112: }
  7070                           ;RF_Control_B1.c: 113: }
  7071                           ;RF_Control_B1.c: 114: }
  7072                           ;RF_Control_B1.c: 115: }
  7073                           ;RF_Control_B1.c: 117: RF1.CorrectionCounter++;
  7074  0607  3001               	movlw	1
  7075  0608  0021               	movlb	1	; select bank1
  7076  0609  07AA               	addwf	(_RF1^(0+128)+10),f
  7077  060A  3000               	movlw	0
  7078  060B  3DAB               	addwfc	((_RF1+1)^(0+128)+10),f
  7079                           
  7080                           ;RF_Control_B1.c: 118: if (RF1.CorrectionCounter > (60000 / 20)) {
  7081  060C  300B               	movlw	11
  7082  060D  022B               	subwf	((_RF1+1)^(0+128)+10),w
  7083  060E  30B9               	movlw	185
  7084  060F  1903               	skipnz
  7085  0610  022A               	subwf	(_RF1^(0+128)+10),w
  7086  0611  1C03               	skipc
  7087  0612  2E1F               	goto	l8427
  7088                           
  7089                           ;RF_Control_B1.c: 119: RF1.CorrectionCounter = 0;
  7090  0613  01AA               	clrf	(_RF1^(0+128)+10)
  7091  0614  01AB               	clrf	((_RF1+1)^(0+128)+10)
  7092                           
  7093                           ;RF_Control_B1.c: 121: RF1.RxStatus = 0;
  7094  0615  11A0               	bcf	_RF1^(0+128),3
  7095                           
  7096                           ;RF_Control_B1.c: 122: RF1.ReceiveGO = 0;
  7097  0616  10A0               	bcf	_RF1^(0+128),1
  7098                           
  7099                           ;RF_Control_B1.c: 123: CC2500_WriteCommand(0x36);
  7100  0617  3036               	movlw	54
  7101  0618  319C  2473  3185   	fcall	_CC2500_WriteCommand
  7102                           
  7103                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x3A);
  7104  061B  303A               	movlw	58
  7105  061C  319C  2473  3185   	fcall	_CC2500_WriteCommand
  7106  061F                     l8427:	
  7107                           
  7108                           ;RF_Control_B1.c: 125: }
  7109                           ;RF_Control_B1.c: 127: if (RF1.Timeout == 1) {
  7110  061F  0021               	movlb	1	; select bank1
  7111  0620  1F21               	btfss	(_RF1^(0+128)+1),6
  7112  0621  0008               	return
  7113                           
  7114                           ;RF_Control_B1.c: 128: RF1.Timeout = 0;
  7115  0622  1321               	bcf	(_RF1^(0+128)+1),6
  7116                           
  7117                           ;RF_Control_B1.c: 129: CC2500_PowerOnInitial();
  7118  0623  319B  235F         	fcall	_CC2500_PowerOnInitial
  7119                           
  7120                           ;RF_Control_B1.c: 130: }
  7121                           ;RF_Control_B1.c: 132: } else {
  7122  0625  0008               	return
  7123  0626                     l2151:	
  7124                           
  7125                           ;RF_Control_B1.c: 133: if (myMain.PowerON == 1) {
  7126  0626  1C2E               	btfss	_myMain^(0+128),0
  7127  0627  0008               	return
  7128                           
  7129                           ;RF_Control_B1.c: 134: RF1.Enable = 1;
  7130  0628  1420               	bsf	_RF1^(0+128),0
  7131  0629  0008               	return
  7132  062A                     __end_of_setRF_Main:	
  7133                           
  7134                           	psect	text25
  7135  09AB                     __ptext25:	
  7136 ;; *************** function _getRxData *****************
  7137 ;; Defined at:
  7138 ;;		line 227 in file "../src/RF_Control_B1.c"
  7139 ;; Parameters:    Size  Location     Type
  7140 ;;		None
  7141 ;; Auto vars:     Size  Location     Type
  7142 ;;  error           1    1[BANK1 ] unsigned char 
  7143 ;; Return value:  Size  Location     Type
  7144 ;;		None               void
  7145 ;; Registers used:
  7146 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7147 ;; Tracked objects:
  7148 ;;		On entry : 0/0
  7149 ;;		On exit  : 0/0
  7150 ;;		Unchanged: 0/0
  7151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7153 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7154 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7155 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7156 ;;Total ram usage:        2 bytes
  7157 ;; Hardware stack levels used:    1
  7158 ;; Hardware stack levels required when called:   10
  7159 ;; This function calls:
  7160 ;;		_getMain_All_Error_Status
  7161 ;;		_setControl_Lights_Table
  7162 ;;		_setLog_Code
  7163 ;;		_setTxData
  7164 ;; This function is called by:
  7165 ;;		_setRF_Main
  7166 ;; This function uses a non-reentrant model
  7167 ;;
  7168                           
  7169                           
  7170                           ;psect for function _getRxData
  7171  09AB                     _getRxData:	
  7172                           
  7173                           ;RF_Control_B1.c: 229: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7174                           
  7175                           ;incstack = 0
  7176                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7177  09AB  0023               	movlb	3	; select bank3
  7178  09AC  0820               	movf	_RF_Data^(0+384),w
  7179  09AD  3AAA               	xorlw	170
  7180  09AE  1D03               	skipz
  7181  09AF  29C1               	goto	l7715
  7182  09B0  0821               	movf	(_RF_Data^(0+384)+1),w
  7183  09B1  3A01               	xorlw	1
  7184  09B2  1D03               	skipz
  7185  09B3  29C1               	goto	l7715
  7186                           
  7187                           ;RF_Control_B1.c: 230: product->Data[2] = 0x55;
  7188  09B4  3055               	movlw	85
  7189  09B5  0021               	movlb	1	; select bank1
  7190  09B6  00E6               	movwf	??_getRxData^(0+128)
  7191  09B7  086F               	movf	_product^(0+128),w
  7192  09B8  3E02               	addlw	2
  7193  09B9  0086               	movwf	6
  7194  09BA  3002               	movlw	2	; select bank4/5
  7195  09BB  0087               	movwf	7
  7196  09BC  0866               	movf	??_getRxData^(0+128),w
  7197  09BD  0081               	movwf	1
  7198                           
  7199                           ;RF_Control_B1.c: 231: setTxData();
  7200  09BE  318F  2745         	fcall	_setTxData
  7201                           
  7202                           ;RF_Control_B1.c: 235: } else {
  7203  09C0  0008               	return
  7204  09C1                     l7715:	
  7205                           
  7206                           ;RF_Control_B1.c: 236: char error = getMain_All_Error_Status(0);
  7207  09C1  3000               	movlw	0
  7208  09C2  319F  27CD  3189   	fcall	_getMain_All_Error_Status
  7209  09C5  0021               	movlb	1	; select bank1
  7210  09C6  00E6               	movwf	??_getRxData^(0+128)
  7211  09C7  0866               	movf	??_getRxData^(0+128),w
  7212  09C8  00E7               	movwf	getRxData@error^(0+128)
  7213                           
  7214                           ;RF_Control_B1.c: 237: if (error == 0) {
  7215  09C9  08E7               	movf	getRxData@error^(0+128),f
  7216  09CA  1D03               	skipz
  7217  09CB  2A1B               	goto	l2196
  7218                           
  7219                           ;RF_Control_B1.c: 238: if (RF1.Learn == 1) {
  7220  09CC  1F20               	btfss	_RF1^(0+128),6
  7221  09CD  29D9               	goto	l7727
  7222                           
  7223                           ;RF_Control_B1.c: 240: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  7224  09CE  0023               	movlb	3	; select bank3
  7225  09CF  08A0               	movf	_RF_Data^(0+384),f
  7226  09D0  1D03               	skipz
  7227  09D1  0008               	return
  7228  09D2  0821               	movf	(_RF_Data^(0+384)+1),w
  7229  09D3  3A64               	xorlw	100
  7230  09D4  1D03               	skipz
  7231  09D5  0008               	return
  7232                           
  7233                           ;RF_Control_B1.c: 241: setLog_Code();
  7234  09D6  3190  2027         	fcall	_setLog_Code
  7235                           
  7236                           ;RF_Control_B1.c: 242: }
  7237                           ;RF_Control_B1.c: 243: } else {
  7238  09D8  0008               	return
  7239  09D9                     l7727:	
  7240                           
  7241                           ;RF_Control_B1.c: 244: if (RF_Data[20] == 210 || RF_Data[20] == 0x0a) {
  7242  09D9  0023               	movlb	3	; select bank3
  7243  09DA  0834               	movf	(_RF_Data^(0+384)+20),w
  7244  09DB  3AD2               	xorlw	210
  7245  09DC  1903               	skipnz
  7246  09DD  29E2               	goto	l7731
  7247  09DE  0834               	movf	(_RF_Data^(0+384)+20),w
  7248  09DF  3A0A               	xorlw	10
  7249  09E0  1D03               	skipz
  7250  09E1  0008               	return
  7251  09E2                     l7731:	
  7252                           
  7253                           ;RF_Control_B1.c: 246: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7254  09E2  08A0               	movf	_RF_Data^(0+384),f
  7255  09E3  1D03               	skipz
  7256  09E4  0008               	return
  7257  09E5  0821               	movf	(_RF_Data^(0+384)+1),w
  7258  09E6  3A02               	xorlw	2
  7259  09E7  1D03               	skipz
  7260  09E8  0008               	return
  7261                           
  7262                           ;RF_Control_B1.c: 248: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7263  09E9  082C               	movf	(_RF_Data^(0+384)+12),w
  7264  09EA  3AFF               	xorlw	255
  7265  09EB  1D03               	skipz
  7266  09EC  29F7               	goto	l7743
  7267  09ED  082D               	movf	(_RF_Data^(0+384)+13),w
  7268  09EE  3AFF               	xorlw	255
  7269  09EF  1D03               	skipz
  7270  09F0  29F7               	goto	l7743
  7271  09F1  082E               	movf	(_RF_Data^(0+384)+14),w
  7272  09F2  3AFF               	xorlw	255
  7273  09F3  1D03               	skipz
  7274  09F4  29F7               	goto	l7743
  7275                           
  7276                           ;RF_Control_B1.c: 249: __nop();
  7277  09F5  0000               	nop
  7278                           
  7279                           ;RF_Control_B1.c: 250: } else {
  7280  09F6  0008               	return
  7281  09F7                     l7743:	
  7282                           
  7283                           ;RF_Control_B1.c: 251: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7284  09F7  0021               	movlb	1	; select bank1
  7285  09F8  086F               	movf	_product^(0+128),w
  7286  09F9  3E0C               	addlw	12
  7287  09FA  0086               	movwf	6
  7288  09FB  3002               	movlw	2	; select bank4/5
  7289  09FC  0087               	movwf	7
  7290  09FD  0023               	movlb	3	; select bank3
  7291  09FE  082C               	movf	(_RF_Data^(0+384)+12),w
  7292  09FF  0601               	xorwf	1,w
  7293  0A00  1D03               	skipz
  7294  0A01  0008               	return
  7295  0A02  0021               	movlb	1	; select bank1
  7296  0A03  086F               	movf	_product^(0+128),w
  7297  0A04  3E0D               	addlw	13
  7298  0A05  0086               	movwf	6
  7299  0A06  3002               	movlw	2	; select bank4/5
  7300  0A07  0087               	movwf	7
  7301  0A08  0023               	movlb	3	; select bank3
  7302  0A09  082D               	movf	(_RF_Data^(0+384)+13),w
  7303  0A0A  0601               	xorwf	1,w
  7304  0A0B  1D03               	skipz
  7305  0A0C  0008               	return
  7306  0A0D  0021               	movlb	1	; select bank1
  7307  0A0E  086F               	movf	_product^(0+128),w
  7308  0A0F  3E0E               	addlw	14
  7309  0A10  0086               	movwf	6
  7310  0A11  3002               	movlw	2	; select bank4/5
  7311  0A12  0087               	movwf	7
  7312  0A13  0023               	movlb	3	; select bank3
  7313  0A14  082E               	movf	(_RF_Data^(0+384)+14),w
  7314  0A15  0601               	xorwf	1,w
  7315  0A16  1D03               	skipz
  7316  0A17  0008               	return
  7317                           
  7318                           ;RF_Control_B1.c: 252: setControl_Lights_Table();
  7319  0A18  318C  24A8         	fcall	_setControl_Lights_Table
  7320                           
  7321                           ;RF_Control_B1.c: 253: }
  7322                           ;RF_Control_B1.c: 254: }
  7323                           ;RF_Control_B1.c: 256: }
  7324                           ;RF_Control_B1.c: 267: }
  7325                           ;RF_Control_B1.c: 268: }
  7326                           ;RF_Control_B1.c: 269: } else {
  7327  0A1A  0008               	return
  7328  0A1B                     l2196:	
  7329                           
  7330                           ;RF_Control_B1.c: 270: __nop();
  7331  0A1B  0000               	nop
  7332  0A1C  0008               	return
  7333  0A1D                     __end_of_getRxData:	
  7334                           
  7335                           	psect	text26
  7336  1027                     __ptext26:	
  7337 ;; *************** function _setLog_Code *****************
  7338 ;; Defined at:
  7339 ;;		line 276 in file "../src/RF_Control_B1.c"
  7340 ;; Parameters:    Size  Location     Type
  7341 ;;		None
  7342 ;; Auto vars:     Size  Location     Type
  7343 ;;		None
  7344 ;; Return value:  Size  Location     Type
  7345 ;;		None               void
  7346 ;; Registers used:
  7347 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7348 ;; Tracked objects:
  7349 ;;		On entry : 0/0
  7350 ;;		On exit  : 0/0
  7351 ;;		Unchanged: 0/0
  7352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7355 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7356 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7357 ;;Total ram usage:        1 bytes
  7358 ;; Hardware stack levels used:    1
  7359 ;; Hardware stack levels required when called:    7
  7360 ;; This function calls:
  7361 ;;		_setBuz
  7362 ;;		_setMemory_LoopSave
  7363 ;;		_setMemory_Modify
  7364 ;;		_setProductData
  7365 ;; This function is called by:
  7366 ;;		_getRxData
  7367 ;; This function uses a non-reentrant model
  7368 ;;
  7369                           
  7370                           
  7371                           ;psect for function _setLog_Code
  7372  1027                     _setLog_Code:	
  7373                           
  7374                           ;RF_Control_B1.c: 277: RF1.Learn = 0;
  7375                           
  7376                           ;incstack = 0
  7377                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7378  1027  0021               	movlb	1	; select bank1
  7379  1028  1320               	bcf	_RF1^(0+128),6
  7380                           
  7381                           ;RF_Control_B1.c: 278: setProductData(12, RF_Data[12]);
  7382  1029  0023               	movlb	3	; select bank3
  7383  102A  082C               	movf	(_RF_Data^(0+384)+12),w
  7384  102B  0020               	movlb	0	; select bank0
  7385  102C  00E5               	movwf	??_setLog_Code
  7386  102D  0865               	movf	??_setLog_Code,w
  7387  102E  00E2               	movwf	setProductData@value
  7388  102F  300C               	movlw	12
  7389  1030  3199  2186  3190   	fcall	_setProductData
  7390                           
  7391                           ;RF_Control_B1.c: 279: setProductData(13, RF_Data[13]);
  7392  1033  0023               	movlb	3	; select bank3
  7393  1034  082D               	movf	(_RF_Data^(0+384)+13),w
  7394  1035  0020               	movlb	0	; select bank0
  7395  1036  00E5               	movwf	??_setLog_Code
  7396  1037  0865               	movf	??_setLog_Code,w
  7397  1038  00E2               	movwf	setProductData@value
  7398  1039  300D               	movlw	13
  7399  103A  3199  2186  3190   	fcall	_setProductData
  7400                           
  7401                           ;RF_Control_B1.c: 280: setProductData(14, RF_Data[14]);
  7402  103D  0023               	movlb	3	; select bank3
  7403  103E  082E               	movf	(_RF_Data^(0+384)+14),w
  7404  103F  0020               	movlb	0	; select bank0
  7405  1040  00E5               	movwf	??_setLog_Code
  7406  1041  0865               	movf	??_setLog_Code,w
  7407  1042  00E2               	movwf	setProductData@value
  7408  1043  300E               	movlw	14
  7409  1044  3199  2186  3190   	fcall	_setProductData
  7410                           
  7411                           ;RF_Control_B1.c: 281: setBuz(1, 100);
  7412  1047  3064               	movlw	100
  7413  1048  0020               	movlb	0	; select bank0
  7414  1049  00A9               	movwf	setBuz@time
  7415  104A  3000               	movlw	0
  7416  104B  00AA               	movwf	setBuz@time+1
  7417  104C  3001               	movlw	1
  7418  104D  3194  240B  3190   	fcall	_setBuz
  7419                           
  7420                           ;RF_Control_B1.c: 282: if (myMain.First == 1) {
  7421  1050  0021               	movlb	1	; select bank1
  7422  1051  1EAE               	btfss	_myMain^(0+128),5
  7423  1052  2857               	goto	l2211
  7424                           
  7425                           ;RF_Control_B1.c: 283: setMemory_LoopSave(1);
  7426  1053  3001               	movlw	1
  7427  1054  319A  22FC  3190   	fcall	_setMemory_LoopSave
  7428  1057                     l2211:	
  7429                           
  7430                           ;RF_Control_B1.c: 284: }
  7431                           ;RF_Control_B1.c: 285: setMemory_Modify(1);
  7432  1057  3001               	movlw	1
  7433  1058  319A  22C3         	fcall	_setMemory_Modify
  7434  105A  0008               	return
  7435  105B                     __end_of_setLog_Code:	
  7436                           
  7437                           	psect	text27
  7438  1AFC                     __ptext27:	
  7439 ;; *************** function _setMemory_LoopSave *****************
  7440 ;; Defined at:
  7441 ;;		line 1089 in file "../src/MCU_B1.c"
  7442 ;; Parameters:    Size  Location     Type
  7443 ;;  command         1    wreg     unsigned char 
  7444 ;; Auto vars:     Size  Location     Type
  7445 ;;  command         1    1[BANK0 ] unsigned char 
  7446 ;; Return value:  Size  Location     Type
  7447 ;;		None               void
  7448 ;; Registers used:
  7449 ;;		wreg, status,2, status,0
  7450 ;; Tracked objects:
  7451 ;;		On entry : 0/0
  7452 ;;		On exit  : 0/0
  7453 ;;		Unchanged: 0/0
  7454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7456 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7457 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7458 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7459 ;;Total ram usage:        2 bytes
  7460 ;; Hardware stack levels used:    1
  7461 ;; Hardware stack levels required when called:    5
  7462 ;; This function calls:
  7463 ;;		Nothing
  7464 ;; This function is called by:
  7465 ;;		_setLog_Code
  7466 ;; This function uses a non-reentrant model
  7467 ;;
  7468                           
  7469                           
  7470                           ;psect for function _setMemory_LoopSave
  7471  1AFC                     _setMemory_LoopSave:	
  7472                           
  7473                           ;incstack = 0
  7474                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7475                           ;setMemory_LoopSave@command stored from wreg
  7476  1AFC  0020               	movlb	0	; select bank0
  7477  1AFD  00A1               	movwf	setMemory_LoopSave@command
  7478                           
  7479                           ;MCU_B1.c: 1090: Memory.LoopSave = command == 1 ? 1 : 0;
  7480  1AFE  0821               	movf	setMemory_LoopSave@command,w
  7481  1AFF  3A01               	xorlw	1
  7482  1B00  3000               	movlw	0
  7483  1B01  1903               	skipnz
  7484  1B02  3001               	movlw	1
  7485  1B03  00A0               	movwf	??_setMemory_LoopSave
  7486  1B04  0DA0               	rlf	??_setMemory_LoopSave,f
  7487  1B05  0DA0               	rlf	??_setMemory_LoopSave,f
  7488  1B06  0024               	movlb	4	; select bank4
  7489  1B07  0844               	movf	(_Memory^(0+512)+36),w
  7490  1B08  0020               	movlb	0	; select bank0
  7491  1B09  0620               	xorwf	??_setMemory_LoopSave,w
  7492  1B0A  39FB               	andlw	-5
  7493  1B0B  0620               	xorwf	??_setMemory_LoopSave,w
  7494  1B0C  0024               	movlb	4	; select bank4
  7495  1B0D  00C4               	movwf	(_Memory^(0+512)+36)
  7496  1B0E  0008               	return
  7497  1B0F                     __end_of_setMemory_LoopSave:	
  7498                           
  7499                           	psect	text28
  7500  0CA8                     __ptext28:	
  7501 ;; *************** function _setControl_Lights_Table *****************
  7502 ;; Defined at:
  7503 ;;		line 289 in file "../src/RF_Control_B1.c"
  7504 ;; Parameters:    Size  Location     Type
  7505 ;;		None
  7506 ;; Auto vars:     Size  Location     Type
  7507 ;;		None
  7508 ;; Return value:  Size  Location     Type
  7509 ;;		None               void
  7510 ;; Registers used:
  7511 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7512 ;; Tracked objects:
  7513 ;;		On entry : 0/0
  7514 ;;		On exit  : 0/0
  7515 ;;		Unchanged: 0/0
  7516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7520 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7521 ;;Total ram usage:        0 bytes
  7522 ;; Hardware stack levels used:    1
  7523 ;; Hardware stack levels required when called:    9
  7524 ;; This function calls:
  7525 ;;		_getDimmerLights_Status
  7526 ;;		_getMain_All_LightsStatus
  7527 ;;		_setCmd_Status
  7528 ;;		_setDimmerLights_SwOff
  7529 ;;		_setDimmerLights_SwOn
  7530 ;;		_setProductData
  7531 ;;		_setRFSW_AdjControl
  7532 ;;		_setRFSW_Control
  7533 ;;		_setTxData
  7534 ;; This function is called by:
  7535 ;;		_getRxData
  7536 ;; This function uses a non-reentrant model
  7537 ;;
  7538                           
  7539                           
  7540                           ;psect for function _setControl_Lights_Table
  7541  0CA8                     _setControl_Lights_Table:	
  7542                           
  7543                           ;RF_Control_B1.c: 290: switch (RF_Data[15]) {
  7544                           
  7545                           ;incstack = 0
  7546                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7547  0CA8  2D21               	goto	l7327
  7548  0CA9                     l7303:	
  7549                           ;RF_Control_B1.c: 292: case 0x00:
  7550                           
  7551                           
  7552                           ;RF_Control_B1.c: 293: if (getMain_All_LightsStatus() == 1) {
  7553  0CA9  319A  22E9  318C   	fcall	_getMain_All_LightsStatus
  7554  0CAC  3A01               	xorlw	1
  7555  0CAD  1D03               	skipz
  7556  0CAE  2CD4               	goto	l7313
  7557                           
  7558                           ;RF_Control_B1.c: 296: if (getDimmerLights_Status(1) == 1) {
  7559  0CAF  3001               	movlw	1
  7560  0CB0  319A  2202  318C   	fcall	_getDimmerLights_Status
  7561  0CB3  3A01               	xorlw	1
  7562  0CB4  1D03               	skipz
  7563  0CB5  2CBE               	goto	l2218
  7564                           
  7565                           ;RF_Control_B1.c: 297: setDimmerLights_SwOn(1);
  7566  0CB6  3001               	movlw	1
  7567  0CB7  3188  2002  318C   	fcall	_setDimmerLights_SwOn
  7568                           
  7569                           ;RF_Control_B1.c: 298: setDimmerLights_SwOff(1);
  7570  0CBA  3001               	movlw	1
  7571  0CBB  3190  20CB  318C   	fcall	_setDimmerLights_SwOff
  7572  0CBE                     l2218:	
  7573                           
  7574                           ;RF_Control_B1.c: 299: }
  7575                           ;RF_Control_B1.c: 302: if (getDimmerLights_Status(2) == 1) {
  7576  0CBE  3002               	movlw	2
  7577  0CBF  319A  2202  318C   	fcall	_getDimmerLights_Status
  7578  0CC2  3A01               	xorlw	1
  7579  0CC3  1D03               	skipz
  7580  0CC4  2CCD               	goto	l7311
  7581                           
  7582                           ;RF_Control_B1.c: 303: setDimmerLights_SwOn(2);
  7583  0CC5  3002               	movlw	2
  7584  0CC6  3188  2002  318C   	fcall	_setDimmerLights_SwOn
  7585                           
  7586                           ;RF_Control_B1.c: 304: setDimmerLights_SwOff(2);
  7587  0CC9  3002               	movlw	2
  7588  0CCA  3190  20CB  318C   	fcall	_setDimmerLights_SwOff
  7589  0CCD                     l7311:	
  7590                           
  7591                           ;RF_Control_B1.c: 305: }
  7592                           ;RF_Control_B1.c: 314: setCmd_Status(1, 1);
  7593  0CCD  0020               	movlb	0	; select bank0
  7594  0CCE  01A0               	clrf	setCmd_Status@cmd
  7595  0CCF  0AA0               	incf	setCmd_Status@cmd,f
  7596  0CD0  3001               	movlw	1
  7597  0CD1  319C  2427         	fcall	_setCmd_Status
  7598                           
  7599                           ;RF_Control_B1.c: 315: } else {
  7600  0CD3  0008               	return
  7601  0CD4                     l7313:	
  7602                           
  7603                           ;RF_Control_B1.c: 316: setProductData(9, 0);
  7604  0CD4  0020               	movlb	0	; select bank0
  7605  0CD5  01E2               	clrf	setProductData@value
  7606  0CD6  3009               	movlw	9
  7607  0CD7  3199  2186  318C   	fcall	_setProductData
  7608                           
  7609                           ;RF_Control_B1.c: 317: setProductData(11, 0);
  7610  0CDA  0020               	movlb	0	; select bank0
  7611  0CDB  01E2               	clrf	setProductData@value
  7612  0CDC  300B               	movlw	11
  7613  0CDD  3199  2186  318C   	fcall	_setProductData
  7614                           
  7615                           ;RF_Control_B1.c: 318: setProductData(15, 0);
  7616  0CE0  0020               	movlb	0	; select bank0
  7617  0CE1  01E2               	clrf	setProductData@value
  7618  0CE2  300F               	movlw	15
  7619  0CE3  3199  2186  318C   	fcall	_setProductData
  7620                           
  7621                           ;RF_Control_B1.c: 319: setProductData(17, 0);
  7622  0CE6  0020               	movlb	0	; select bank0
  7623  0CE7  01E2               	clrf	setProductData@value
  7624  0CE8  3011               	movlw	17
  7625  0CE9  3199  2186  318C   	fcall	_setProductData
  7626                           
  7627                           ;RF_Control_B1.c: 320: setTxData();
  7628  0CEC  318F  2745         	fcall	_setTxData
  7629                           
  7630                           ;RF_Control_B1.c: 321: }
  7631                           ;RF_Control_B1.c: 322: break;
  7632  0CEE  0008               	return
  7633  0CEF                     l7315:	
  7634                           ;RF_Control_B1.c: 324: case 0x20:
  7635                           
  7636                           
  7637                           ;RF_Control_B1.c: 325: setProductData(9, 0);
  7638  0CEF  0020               	movlb	0	; select bank0
  7639  0CF0  01E2               	clrf	setProductData@value
  7640  0CF1  3009               	movlw	9
  7641  0CF2  3199  2186  318C   	fcall	_setProductData
  7642                           
  7643                           ;RF_Control_B1.c: 326: setProductData(11, 0);
  7644  0CF5  0020               	movlb	0	; select bank0
  7645  0CF6  01E2               	clrf	setProductData@value
  7646  0CF7  300B               	movlw	11
  7647  0CF8  3199  2186  318C   	fcall	_setProductData
  7648                           
  7649                           ;RF_Control_B1.c: 327: setProductData(15, product->Data[15]);
  7650  0CFB  0021               	movlb	1	; select bank1
  7651  0CFC  086F               	movf	_product^(0+128),w
  7652  0CFD  0086               	movwf	6
  7653  0CFE  3002               	movlw	2	; select bank4/5
  7654  0CFF  0087               	movwf	7
  7655  0D00  3002               	movlw	2	; select bank4/5
  7656  0D01  3F4F               	moviw [15]fsr1
  7657  0D02  0020               	movlb	0	; select bank0
  7658  0D03  00E2               	movwf	setProductData@value
  7659  0D04  300F               	movlw	15
  7660  0D05  3199  2186  318C   	fcall	_setProductData
  7661                           
  7662                           ;RF_Control_B1.c: 328: setProductData(17, 0);
  7663  0D08  0020               	movlb	0	; select bank0
  7664  0D09  01E2               	clrf	setProductData@value
  7665  0D0A  3011               	movlw	17
  7666  0D0B  3199  2186  318C   	fcall	_setProductData
  7667                           
  7668                           ;RF_Control_B1.c: 329: setTxData();
  7669  0D0E  318F  2745         	fcall	_setTxData
  7670                           
  7671                           ;RF_Control_B1.c: 330: break;
  7672  0D10  0008               	return
  7673  0D11                     l7317:	
  7674                           ;RF_Control_B1.c: 333: case 0x01:
  7675                           
  7676                           
  7677                           ;RF_Control_B1.c: 334: setRFSW_Control(1);
  7678  0D11  3001               	movlw	1
  7679  0D12  3191  217E         	fcall	_setRFSW_Control
  7680                           
  7681                           ;RF_Control_B1.c: 335: break;
  7682  0D14  0008               	return
  7683  0D15                     l7319:	
  7684                           ;RF_Control_B1.c: 339: case 0x11:
  7685                           
  7686                           
  7687                           ;RF_Control_B1.c: 340: setRFSW_AdjControl(1);
  7688  0D15  3001               	movlw	1
  7689  0D16  318A  228F         	fcall	_setRFSW_AdjControl
  7690                           
  7691                           ;RF_Control_B1.c: 341: break;
  7692  0D18  0008               	return
  7693  0D19                     l7321:	
  7694                           ;RF_Control_B1.c: 346: case 0x02:
  7695                           
  7696                           
  7697                           ;RF_Control_B1.c: 347: setRFSW_Control(2);
  7698  0D19  3002               	movlw	2
  7699  0D1A  3191  217E         	fcall	_setRFSW_Control
  7700                           
  7701                           ;RF_Control_B1.c: 348: break;
  7702  0D1C  0008               	return
  7703  0D1D                     l7323:	
  7704                           ;RF_Control_B1.c: 351: case 0x21:
  7705                           
  7706                           
  7707                           ;RF_Control_B1.c: 352: setRFSW_AdjControl(2);
  7708  0D1D  3002               	movlw	2
  7709  0D1E  318A  228F         	fcall	_setRFSW_AdjControl
  7710                           
  7711                           ;RF_Control_B1.c: 370: }
  7712                           
  7713                           ;RF_Control_B1.c: 353: break;
  7714  0D20  0008               	return
  7715  0D21                     l7327:	
  7716  0D21  0023               	movlb	3	; select bank3
  7717  0D22  082F               	movf	(_RF_Data^(0+384)+15),w
  7718                           
  7719                           ; Switch size 1, requested type "space"
  7720                           ; Number of cases is 6, Range of values is 0 to 33
  7721                           ; switch strategies available:
  7722                           ; Name         Instructions Cycles
  7723                           ; simple_byte           19    10 (average)
  7724                           ; direct_byte           74     6 (fixed)
  7725                           ; jumptable            260     6 (fixed)
  7726                           ;	Chosen strategy is simple_byte
  7727  0D23  3A00               	xorlw	0	; case 0
  7728  0D24  1903               	skipnz
  7729  0D25  2CA9               	goto	l7303
  7730  0D26  3A01               	xorlw	1	; case 1
  7731  0D27  1903               	skipnz
  7732  0D28  2D11               	goto	l7317
  7733  0D29  3A03               	xorlw	3	; case 2
  7734  0D2A  1903               	skipnz
  7735  0D2B  2D19               	goto	l7321
  7736  0D2C  3A13               	xorlw	19	; case 17
  7737  0D2D  1903               	skipnz
  7738  0D2E  2D15               	goto	l7319
  7739  0D2F  3A31               	xorlw	49	; case 32
  7740  0D30  1903               	skipnz
  7741  0D31  2CEF               	goto	l7315
  7742  0D32  3A01               	xorlw	1	; case 33
  7743  0D33  1903               	skipnz
  7744  0D34  2D1D               	goto	l7323
  7745  0D35  2D36               	goto	l2227
  7746  0D36                     l2227:	
  7747  0D36  0008               	return
  7748  0D37                     __end_of_setControl_Lights_Table:	
  7749                           
  7750                           	psect	text29
  7751  117E                     __ptext29:	
  7752 ;; *************** function _setRFSW_Control *****************
  7753 ;; Defined at:
  7754 ;;		line 378 in file "../src/RF_Control_B1.c"
  7755 ;; Parameters:    Size  Location     Type
  7756 ;;  sw              1    wreg     unsigned char 
  7757 ;; Auto vars:     Size  Location     Type
  7758 ;;  sw              1   79[BANK0 ] unsigned char 
  7759 ;;  status          1   78[BANK0 ] unsigned char 
  7760 ;; Return value:  Size  Location     Type
  7761 ;;		None               void
  7762 ;; Registers used:
  7763 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7764 ;; Tracked objects:
  7765 ;;		On entry : 0/0
  7766 ;;		On exit  : 0/0
  7767 ;;		Unchanged: 0/0
  7768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7770 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7771 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7772 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7773 ;;Total ram usage:        3 bytes
  7774 ;; Hardware stack levels used:    1
  7775 ;; Hardware stack levels required when called:    8
  7776 ;; This function calls:
  7777 ;;		_getDimmerLights_Status
  7778 ;;		_setBuz
  7779 ;;		_setDelayOff_GO
  7780 ;;		_setDimmerLights_SwOff
  7781 ;;		_setDimmerLights_SwOn
  7782 ;;		_setRF_DimmerLights
  7783 ;;		_setTxData
  7784 ;; This function is called by:
  7785 ;;		_setControl_Lights_Table
  7786 ;; This function uses a non-reentrant model
  7787 ;;
  7788                           
  7789                           
  7790                           ;psect for function _setRFSW_Control
  7791  117E                     _setRFSW_Control:	
  7792                           
  7793                           ;incstack = 0
  7794                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7795                           ;setRFSW_Control@sw stored from wreg
  7796  117E  0020               	movlb	0	; select bank0
  7797  117F  00EF               	movwf	setRFSW_Control@sw
  7798                           
  7799                           ;RF_Control_B1.c: 379: char status = 0;
  7800  1180  01EE               	clrf	setRFSW_Control@status
  7801                           
  7802                           ;RF_Control_B1.c: 381: if (RF_Data[16] == 0x80) {
  7803  1181  0023               	movlb	3	; select bank3
  7804  1182  0830               	movf	(_RF_Data^(0+384)+16),w
  7805  1183  3A80               	xorlw	128
  7806  1184  1D03               	skipz
  7807  1185  29B1               	goto	l7001
  7808                           
  7809                           ;RF_Control_B1.c: 382: setDelayOff_GO(sw, 1, RF_Data[17]);
  7810  1186  0020               	movlb	0	; select bank0
  7811  1187  01E5               	clrf	setDelayOff_GO@command
  7812  1188  0AE5               	incf	setDelayOff_GO@command,f
  7813  1189  0023               	movlb	3	; select bank3
  7814  118A  0831               	movf	(_RF_Data^(0+384)+17),w
  7815  118B  0020               	movlb	0	; select bank0
  7816  118C  00ED               	movwf	??_setRFSW_Control
  7817  118D  086D               	movf	??_setRFSW_Control,w
  7818  118E  00E6               	movwf	setDelayOff_GO@value
  7819  118F  086F               	movf	setRFSW_Control@sw,w
  7820  1190  318C  241C  3191   	fcall	_setDelayOff_GO
  7821                           
  7822                           ;RF_Control_B1.c: 383: if (getDimmerLights_Status(sw) == 1) {
  7823  1193  0020               	movlb	0	; select bank0
  7824  1194  086F               	movf	setRFSW_Control@sw,w
  7825  1195  319A  2202  3191   	fcall	_getDimmerLights_Status
  7826  1198  3A01               	xorlw	1
  7827  1199  1D03               	skipz
  7828  119A  29B1               	goto	l7001
  7829                           
  7830                           ;RF_Control_B1.c: 384: setBuz(1, 100);
  7831  119B  3064               	movlw	100
  7832  119C  0020               	movlb	0	; select bank0
  7833  119D  00A9               	movwf	setBuz@time
  7834  119E  3000               	movlw	0
  7835  119F  00AA               	movwf	setBuz@time+1
  7836  11A0  3001               	movlw	1
  7837  11A1  3194  240B  3191   	fcall	_setBuz
  7838                           
  7839                           ;RF_Control_B1.c: 385: setRF_DimmerLights(sw, 1);
  7840  11A4  0020               	movlb	0	; select bank0
  7841  11A5  01E5               	clrf	setRF_DimmerLights@on
  7842  11A6  0AE5               	incf	setRF_DimmerLights@on,f
  7843  11A7  086F               	movf	setRFSW_Control@sw,w
  7844  11A8  3195  25EA  3191   	fcall	_setRF_DimmerLights
  7845                           
  7846                           ;RF_Control_B1.c: 386: setTxData();
  7847  11AB  318F  2745  3191   	fcall	_setTxData
  7848                           
  7849                           ;RF_Control_B1.c: 387: status = 1;
  7850  11AE  0020               	movlb	0	; select bank0
  7851  11AF  01EE               	clrf	setRFSW_Control@status
  7852  11B0  0AEE               	incf	setRFSW_Control@status,f
  7853  11B1                     l7001:	
  7854                           
  7855                           ;RF_Control_B1.c: 388: }
  7856                           ;RF_Control_B1.c: 389: }
  7857                           ;RF_Control_B1.c: 391: if (status == 0) {
  7858  11B1  0020               	movlb	0	; select bank0
  7859  11B2  08EE               	movf	setRFSW_Control@status,f
  7860  11B3  1D03               	skipz
  7861  11B4  0008               	return
  7862                           
  7863                           ;RF_Control_B1.c: 393: setDimmerLights_SwOn(sw);
  7864  11B5  086F               	movf	setRFSW_Control@sw,w
  7865  11B6  3188  2002  3191   	fcall	_setDimmerLights_SwOn
  7866                           
  7867                           ;RF_Control_B1.c: 394: setDimmerLights_SwOff(sw);
  7868  11B9  0020               	movlb	0	; select bank0
  7869  11BA  086F               	movf	setRFSW_Control@sw,w
  7870  11BB  3190  20CB         	fcall	_setDimmerLights_SwOff
  7871  11BD  0008               	return
  7872  11BE                     __end_of_setRFSW_Control:	
  7873                           
  7874                           	psect	text30
  7875  0A8F                     __ptext30:	
  7876 ;; *************** function _setRFSW_AdjControl *****************
  7877 ;; Defined at:
  7878 ;;		line 400 in file "../src/RF_Control_B1.c"
  7879 ;; Parameters:    Size  Location     Type
  7880 ;;  sw              1    wreg     unsigned char 
  7881 ;; Auto vars:     Size  Location     Type
  7882 ;;  sw              1   72[BANK0 ] unsigned char 
  7883 ;;  status          1   71[BANK0 ] unsigned char 
  7884 ;; Return value:  Size  Location     Type
  7885 ;;		None               void
  7886 ;; Registers used:
  7887 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7888 ;; Tracked objects:
  7889 ;;		On entry : 0/0
  7890 ;;		On exit  : 0/0
  7891 ;;		Unchanged: 0/0
  7892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7894 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7895 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7896 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7897 ;;Total ram usage:        4 bytes
  7898 ;; Hardware stack levels used:    1
  7899 ;; Hardware stack levels required when called:    8
  7900 ;; This function calls:
  7901 ;;		_getDimmerLights_PercentToValue
  7902 ;;		_getDimmerLights_Status
  7903 ;;		_setDimmerIntr_Dimming_RF
  7904 ;;		_setDimmerIntr_MaxmumValue
  7905 ;;		_setDimmerLights_DimmingRun
  7906 ;;		_setDimmerLights_SwOff
  7907 ;;		_setDimmerLights_SwOn
  7908 ;;		_setMemory_Modify
  7909 ;;		_setProductData
  7910 ;;		_setTxData
  7911 ;; This function is called by:
  7912 ;;		_setControl_Lights_Table
  7913 ;; This function uses a non-reentrant model
  7914 ;;
  7915                           
  7916                           
  7917                           ;psect for function _setRFSW_AdjControl
  7918  0A8F                     _setRFSW_AdjControl:	
  7919                           
  7920                           ;incstack = 0
  7921                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7922                           ;setRFSW_AdjControl@sw stored from wreg
  7923  0A8F  0020               	movlb	0	; select bank0
  7924  0A90  00E8               	movwf	setRFSW_AdjControl@sw
  7925                           
  7926                           ;RF_Control_B1.c: 401: char status = 0;
  7927  0A91  01E7               	clrf	setRFSW_AdjControl@status
  7928                           
  7929                           ;RF_Control_B1.c: 403: status = getDimmerLights_Status(sw);
  7930  0A92  0868               	movf	setRFSW_AdjControl@sw,w
  7931  0A93  319A  2202  318A   	fcall	_getDimmerLights_Status
  7932  0A96  0020               	movlb	0	; select bank0
  7933  0A97  00E5               	movwf	??_setRFSW_AdjControl
  7934  0A98  0865               	movf	??_setRFSW_AdjControl,w
  7935  0A99  00E7               	movwf	setRFSW_AdjControl@status
  7936                           
  7937                           ;RF_Control_B1.c: 405: if (RF_Data[9] > 0x64) {
  7938  0A9A  3065               	movlw	101
  7939  0A9B  0023               	movlb	3	; select bank3
  7940  0A9C  0229               	subwf	(_RF_Data^(0+384)+9),w
  7941  0A9D  1C03               	skipc
  7942  0A9E  2AA6               	goto	l7013
  7943                           
  7944                           ;RF_Control_B1.c: 406: RF_Data[9] = 0x64;
  7945  0A9F  3064               	movlw	100
  7946  0AA0  0020               	movlb	0	; select bank0
  7947  0AA1  00E5               	movwf	??_setRFSW_AdjControl
  7948  0AA2  0865               	movf	??_setRFSW_AdjControl,w
  7949  0AA3  0023               	movlb	3	; select bank3
  7950  0AA4  00A9               	movwf	(_RF_Data^(0+384)+9)
  7951                           
  7952                           ;RF_Control_B1.c: 407: } else if (RF_Data[9] < 0x01) {
  7953  0AA5  2AAB               	goto	l7017
  7954  0AA6                     l7013:	
  7955  0AA6  08A9               	movf	(_RF_Data^(0+384)+9),f
  7956  0AA7  1D03               	skipz
  7957  0AA8  2AAB               	goto	l7017
  7958                           
  7959                           ;RF_Control_B1.c: 408: RF_Data[9] = 0x01;
  7960  0AA9  01A9               	clrf	(_RF_Data^(0+384)+9)
  7961  0AAA  0AA9               	incf	(_RF_Data^(0+384)+9),f
  7962  0AAB                     l7017:	
  7963                           
  7964                           ;RF_Control_B1.c: 409: }
  7965                           ;RF_Control_B1.c: 410: setProductData(9, RF_Data[9]);
  7966  0AAB  0829               	movf	(_RF_Data^(0+384)+9),w
  7967  0AAC  0020               	movlb	0	; select bank0
  7968  0AAD  00E5               	movwf	??_setRFSW_AdjControl
  7969  0AAE  0865               	movf	??_setRFSW_AdjControl,w
  7970  0AAF  00E2               	movwf	setProductData@value
  7971  0AB0  3009               	movlw	9
  7972  0AB1  3199  2186  318A   	fcall	_setProductData
  7973                           
  7974                           ;RF_Control_B1.c: 411: setProductData(11, sw);
  7975  0AB4  0020               	movlb	0	; select bank0
  7976  0AB5  0868               	movf	setRFSW_AdjControl@sw,w
  7977  0AB6  00E5               	movwf	??_setRFSW_AdjControl
  7978  0AB7  0865               	movf	??_setRFSW_AdjControl,w
  7979  0AB8  00E2               	movwf	setProductData@value
  7980  0AB9  300B               	movlw	11
  7981  0ABA  3199  2186  318A   	fcall	_setProductData
  7982                           
  7983                           ;RF_Control_B1.c: 412: setProductData(17, product->Data[26 + sw]);
  7984  0ABD  0020               	movlb	0	; select bank0
  7985  0ABE  0868               	movf	setRFSW_AdjControl@sw,w
  7986  0ABF  3E1A               	addlw	26
  7987  0AC0  0021               	movlb	1	; select bank1
  7988  0AC1  076F               	addwf	_product^(0+128),w
  7989  0AC2  0020               	movlb	0	; select bank0
  7990  0AC3  00E5               	movwf	??_setRFSW_AdjControl
  7991  0AC4  0865               	movf	??_setRFSW_AdjControl,w
  7992  0AC5  0086               	movwf	6
  7993  0AC6  3002               	movlw	2	; select bank4/5
  7994  0AC7  0087               	movwf	7
  7995  0AC8  0801               	movf	1,w
  7996  0AC9  00E6               	movwf	??_setRFSW_AdjControl+1
  7997  0ACA  0866               	movf	??_setRFSW_AdjControl+1,w
  7998  0ACB  00E2               	movwf	setProductData@value
  7999  0ACC  3011               	movlw	17
  8000  0ACD  3199  2186  318A   	fcall	_setProductData
  8001                           
  8002                           ;RF_Control_B1.c: 413: setProductData((20 + sw), RF_Data[9]);
  8003  0AD0  0023               	movlb	3	; select bank3
  8004  0AD1  0829               	movf	(_RF_Data^(0+384)+9),w
  8005  0AD2  0020               	movlb	0	; select bank0
  8006  0AD3  00E5               	movwf	??_setRFSW_AdjControl
  8007  0AD4  0865               	movf	??_setRFSW_AdjControl,w
  8008  0AD5  00E2               	movwf	setProductData@value
  8009  0AD6  0868               	movf	setRFSW_AdjControl@sw,w
  8010  0AD7  3E14               	addlw	20
  8011  0AD8  3199  2186  318A   	fcall	_setProductData
  8012                           
  8013                           ;RF_Control_B1.c: 421: setMemory_Modify(1);
  8014  0ADB  3001               	movlw	1
  8015  0ADC  319A  22C3  318A   	fcall	_setMemory_Modify
  8016                           
  8017                           ;RF_Control_B1.c: 425: if (status == 1) {
  8018  0ADF  0020               	movlb	0	; select bank0
  8019  0AE0  0867               	movf	setRFSW_AdjControl@status,w
  8020  0AE1  3A01               	xorlw	1
  8021  0AE2  1D03               	skipz
  8022  0AE3  2AFB               	goto	l7027
  8023                           
  8024                           ;RF_Control_B1.c: 426: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(RF_D
      +                          ata[9]));
  8025  0AE4  0023               	movlb	3	; select bank3
  8026  0AE5  0829               	movf	(_RF_Data^(0+384)+9),w
  8027  0AE6  3195  2520  318A   	fcall	_getDimmerLights_PercentToValue
  8028  0AE9  0020               	movlb	0	; select bank0
  8029  0AEA  00E5               	movwf	??_setRFSW_AdjControl
  8030  0AEB  0865               	movf	??_setRFSW_AdjControl,w
  8031  0AEC  00E2               	movwf	setDimmerIntr_MaxmumValue@value
  8032  0AED  0868               	movf	setRFSW_AdjControl@sw,w
  8033  0AEE  319B  23E2  318A   	fcall	_setDimmerIntr_MaxmumValue
  8034                           
  8035                           ;RF_Control_B1.c: 427: setDimmerIntr_Dimming_RF(sw, 1);
  8036  0AF1  0020               	movlb	0	; select bank0
  8037  0AF2  01A0               	clrf	setDimmerIntr_Dimming_RF@command
  8038  0AF3  0AA0               	incf	setDimmerIntr_Dimming_RF@command,f
  8039  0AF4  0868               	movf	setRFSW_AdjControl@sw,w
  8040  0AF5  319F  276F  318A   	fcall	_setDimmerIntr_Dimming_RF
  8041                           
  8042                           ;RF_Control_B1.c: 428: setTxData();
  8043  0AF8  318F  2745         	fcall	_setTxData
  8044                           
  8045                           ;RF_Control_B1.c: 430: } else if (status == 0) {
  8046  0AFA  0008               	return
  8047  0AFB                     l7027:	
  8048  0AFB  0020               	movlb	0	; select bank0
  8049  0AFC  08E7               	movf	setRFSW_AdjControl@status,f
  8050  0AFD  1D03               	skipz
  8051  0AFE  0008               	return
  8052                           
  8053                           ;RF_Control_B1.c: 434: setDimmerLights_DimmingRun(sw, 1);
  8054  0AFF  01A2               	clrf	setDimmerLights_DimmingRun@command
  8055  0B00  0AA2               	incf	setDimmerLights_DimmingRun@command,f
  8056  0B01  0868               	movf	setRFSW_AdjControl@sw,w
  8057  0B02  319C  24A8  318A   	fcall	_setDimmerLights_DimmingRun
  8058                           
  8059                           ;RF_Control_B1.c: 435: setDimmerLights_SwOn(sw);
  8060  0B05  0020               	movlb	0	; select bank0
  8061  0B06  0868               	movf	setRFSW_AdjControl@sw,w
  8062  0B07  3188  2002  318A   	fcall	_setDimmerLights_SwOn
  8063                           
  8064                           ;RF_Control_B1.c: 436: setDimmerLights_SwOff(sw);
  8065  0B0A  0020               	movlb	0	; select bank0
  8066  0B0B  0868               	movf	setRFSW_AdjControl@sw,w
  8067  0B0C  3190  20CB         	fcall	_setDimmerLights_SwOff
  8068  0B0E  0008               	return
  8069  0B0F                     __end_of_setRFSW_AdjControl:	
  8070                           
  8071                           	psect	text31
  8072  1CA8                     __ptext31:	
  8073 ;; *************** function _setDimmerLights_DimmingRun *****************
  8074 ;; Defined at:
  8075 ;;		line 1076 in file "../src/Dimmer_B1.c"
  8076 ;; Parameters:    Size  Location     Type
  8077 ;;  lights          1    wreg     unsigned char 
  8078 ;;  command         1    2[BANK0 ] unsigned char 
  8079 ;; Auto vars:     Size  Location     Type
  8080 ;;  lights          1    4[BANK0 ] unsigned char 
  8081 ;; Return value:  Size  Location     Type
  8082 ;;		None               void
  8083 ;; Registers used:
  8084 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8085 ;; Tracked objects:
  8086 ;;		On entry : 0/0
  8087 ;;		On exit  : 0/0
  8088 ;;		Unchanged: 0/0
  8089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8090 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8091 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8092 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8093 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8094 ;;Total ram usage:        3 bytes
  8095 ;; Hardware stack levels used:    1
  8096 ;; Hardware stack levels required when called:    6
  8097 ;; This function calls:
  8098 ;;		_DimmerLights_SelectPointer
  8099 ;; This function is called by:
  8100 ;;		_setRFSW_AdjControl
  8101 ;; This function uses a non-reentrant model
  8102 ;;
  8103                           
  8104                           
  8105                           ;psect for function _setDimmerLights_DimmingRun
  8106  1CA8                     _setDimmerLights_DimmingRun:	
  8107                           
  8108                           ;incstack = 0
  8109                           ; Regs used in _setDimmerLights_DimmingRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  8110                           ;setDimmerLights_DimmingRun@lights stored from wreg
  8111  1CA8  0020               	movlb	0	; select bank0
  8112  1CA9  00A4               	movwf	setDimmerLights_DimmingRun@lights
  8113                           
  8114                           ;Dimmer_B1.c: 1077: DimmerLights_SelectPointer(lights);
  8115  1CAA  0824               	movf	setDimmerLights_DimmingRun@lights,w
  8116  1CAB  319B  23CB         	fcall	_DimmerLights_SelectPointer
  8117                           
  8118                           ;Dimmer_B1.c: 1078: DimmerLights->DimmingRun = command == 1 ? 1 : 0;
  8119  1CAD  0020               	movlb	0	; select bank0
  8120  1CAE  0822               	movf	setDimmerLights_DimmingRun@command,w
  8121  1CAF  3A01               	xorlw	1
  8122  1CB0  3000               	movlw	0
  8123  1CB1  1903               	skipnz
  8124  1CB2  3001               	movlw	1
  8125  1CB3  00A3               	movwf	??_setDimmerLights_DimmingRun
  8126  1CB4  0021               	movlb	1	; select bank1
  8127  1CB5  0A56               	incf	_DimmerLights^(0+128),w
  8128  1CB6  0086               	movwf	6
  8129  1CB7  3001               	movlw	1	; select bank2/3
  8130  1CB8  0087               	movwf	7
  8131  1CB9  0020               	movlb	0	; select bank0
  8132  1CBA  0EA3               	swapf	??_setDimmerLights_DimmingRun,f
  8133  1CBB  0DA3               	rlf	??_setDimmerLights_DimmingRun,f
  8134  1CBC  0DA3               	rlf	??_setDimmerLights_DimmingRun,f
  8135  1CBD  0801               	movf	1,w
  8136  1CBE  0623               	xorwf	??_setDimmerLights_DimmingRun,w
  8137  1CBF  39BF               	andlw	-65
  8138  1CC0  0623               	xorwf	??_setDimmerLights_DimmingRun,w
  8139  1CC1  0081               	movwf	1
  8140  1CC2  0008               	return
  8141  1CC3                     __end_of_setDimmerLights_DimmingRun:	
  8142                           
  8143                           	psect	text32
  8144  1A46                     __ptext32:	
  8145 ;; *************** function _getRF_KeyStatus *****************
  8146 ;; Defined at:
  8147 ;;		line 166 in file "../src/RF_Control_B1.c"
  8148 ;; Parameters:    Size  Location     Type
  8149 ;;		None
  8150 ;; Auto vars:     Size  Location     Type
  8151 ;;  key             1    1[BANK0 ] unsigned char 
  8152 ;; Return value:  Size  Location     Type
  8153 ;;                  1    wreg      unsigned char 
  8154 ;; Registers used:
  8155 ;;		wreg, status,2
  8156 ;; Tracked objects:
  8157 ;;		On entry : 0/0
  8158 ;;		On exit  : 0/0
  8159 ;;		Unchanged: 0/0
  8160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8162 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8163 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8164 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8165 ;;Total ram usage:        3 bytes
  8166 ;; Hardware stack levels used:    1
  8167 ;; Hardware stack levels required when called:    5
  8168 ;; This function calls:
  8169 ;;		Nothing
  8170 ;; This function is called by:
  8171 ;;		_setRF_Main
  8172 ;; This function uses a non-reentrant model
  8173 ;;
  8174                           
  8175                           
  8176                           ;psect for function _getRF_KeyStatus
  8177  1A46                     _getRF_KeyStatus:	
  8178                           
  8179                           ;RF_Control_B1.c: 167: char key = 0;
  8180                           
  8181                           ;incstack = 0
  8182                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8183  1A46  0020               	movlb	0	; select bank0
  8184  1A47  01A1               	clrf	getRF_KeyStatus@key
  8185                           
  8186                           ;RF_Control_B1.c: 173: key = (RA0 == 1 || RB1 == 1 || RA6 == 1 || RA4 == 1) ? 1 : 0;
  8187  1A48  01A2               	clrf	_getRF_KeyStatus$5113
  8188  1A49  0AA2               	incf	_getRF_KeyStatus$5113,f
  8189  1A4A  1C0C               	btfss	12,0	;volatile
  8190  1A4B  188D               	btfsc	13,1	;volatile
  8191  1A4C  2A51               	goto	l7695
  8192  1A4D  1F0C               	btfss	12,6	;volatile
  8193  1A4E  1A0C               	btfsc	12,4	;volatile
  8194  1A4F  2A51               	goto	l7695
  8195  1A50  01A2               	clrf	_getRF_KeyStatus$5113
  8196  1A51                     l7695:	
  8197  1A51  0822               	movf	_getRF_KeyStatus$5113,w
  8198  1A52  00A0               	movwf	??_getRF_KeyStatus
  8199  1A53  0820               	movf	??_getRF_KeyStatus,w
  8200  1A54  00A1               	movwf	getRF_KeyStatus@key
  8201                           
  8202                           ;RF_Control_B1.c: 179: return key;
  8203  1A55  0821               	movf	getRF_KeyStatus@key,w
  8204  1A56  0008               	return
  8205  1A57                     __end_of_getRF_KeyStatus:	
  8206                           
  8207                           	psect	text33
  8208  1A35                     __ptext33:	
  8209 ;; *************** function _getBuz_GO *****************
  8210 ;; Defined at:
  8211 ;;		line 82 in file "../src/Buzzer_B1.c"
  8212 ;; Parameters:    Size  Location     Type
  8213 ;;		None
  8214 ;; Auto vars:     Size  Location     Type
  8215 ;;  i               2    4[BANK0 ] int 
  8216 ;; Return value:  Size  Location     Type
  8217 ;;                  2    0[BANK0 ] int 
  8218 ;; Registers used:
  8219 ;;		wreg, status,2, status,0
  8220 ;; Tracked objects:
  8221 ;;		On entry : 0/0
  8222 ;;		On exit  : 0/0
  8223 ;;		Unchanged: 0/0
  8224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8225 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8226 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8227 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8228 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8229 ;;Total ram usage:        6 bytes
  8230 ;; Hardware stack levels used:    1
  8231 ;; Hardware stack levels required when called:    5
  8232 ;; This function calls:
  8233 ;;		Nothing
  8234 ;; This function is called by:
  8235 ;;		_setRF_Main
  8236 ;; This function uses a non-reentrant model
  8237 ;;
  8238                           
  8239                           
  8240                           ;psect for function _getBuz_GO
  8241  1A35                     _getBuz_GO:	
  8242                           
  8243                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8244                           
  8245                           ;incstack = 0
  8246                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8247  1A35  0022               	movlb	2	; select bank2
  8248  1A36  0C20               	rrf	_Buz1^(0+256),w
  8249  1A37  3901               	andlw	1
  8250  1A38  0020               	movlb	0	; select bank0
  8251  1A39  00A2               	movwf	??_getBuz_GO
  8252  1A3A  01A3               	clrf	??_getBuz_GO+1
  8253  1A3B  0822               	movf	??_getBuz_GO,w
  8254  1A3C  00A4               	movwf	getBuz_GO@i
  8255  1A3D  0823               	movf	??_getBuz_GO+1,w
  8256  1A3E  00A5               	movwf	getBuz_GO@i+1
  8257                           
  8258                           ;Buzzer_B1.c: 84: return i;
  8259  1A3F  0825               	movf	getBuz_GO@i+1,w
  8260  1A40  01A1               	clrf	?_getBuz_GO+1
  8261  1A41  07A1               	addwf	?_getBuz_GO+1,f
  8262  1A42  0824               	movf	getBuz_GO@i,w
  8263  1A43  01A0               	clrf	?_getBuz_GO
  8264  1A44  07A0               	addwf	?_getBuz_GO,f
  8265  1A45  0008               	return
  8266  1A46                     __end_of_getBuz_GO:	
  8267                           
  8268                           	psect	text34
  8269  19F3                     __ptext34:	
  8270 ;; *************** function _RF_RxDisable *****************
  8271 ;; Defined at:
  8272 ;;		line 154 in file "../src/RF_Control_B1.c"
  8273 ;; Parameters:    Size  Location     Type
  8274 ;;		None
  8275 ;; Auto vars:     Size  Location     Type
  8276 ;;		None
  8277 ;; Return value:  Size  Location     Type
  8278 ;;		None               void
  8279 ;; Registers used:
  8280 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8281 ;; Tracked objects:
  8282 ;;		On entry : 0/0
  8283 ;;		On exit  : 0/0
  8284 ;;		Unchanged: 0/0
  8285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8289 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8290 ;;Total ram usage:        0 bytes
  8291 ;; Hardware stack levels used:    1
  8292 ;; Hardware stack levels required when called:    7
  8293 ;; This function calls:
  8294 ;;		_CC2500_WriteCommand
  8295 ;; This function is called by:
  8296 ;;		_setRF_Main
  8297 ;; This function uses a non-reentrant model
  8298 ;;
  8299                           
  8300                           
  8301                           ;psect for function _RF_RxDisable
  8302  19F3                     _RF_RxDisable:	
  8303                           
  8304                           ;RF_Control_B1.c: 155: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8305                           
  8306                           ;incstack = 0
  8307                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8308  19F3  0021               	movlb	1	; select bank1
  8309  19F4  18A0               	btfsc	_RF1^(0+128),1
  8310  19F5  29F8               	goto	l2181
  8311  19F6  1DA0               	btfss	_RF1^(0+128),3
  8312  19F7  0008               	return
  8313  19F8                     l2181:	
  8314                           
  8315                           ;RF_Control_B1.c: 156: RF1.RxStatus = 0;
  8316  19F8  11A0               	bcf	_RF1^(0+128),3
  8317                           
  8318                           ;RF_Control_B1.c: 157: RF1.ReceiveGO = 0;
  8319  19F9  10A0               	bcf	_RF1^(0+128),1
  8320                           
  8321                           ;RF_Control_B1.c: 158: CC2500_WriteCommand(0x36);
  8322  19FA  3036               	movlw	54
  8323  19FB  319C  2473  3199   	fcall	_CC2500_WriteCommand
  8324                           
  8325                           ;RF_Control_B1.c: 159: CC2500_WriteCommand(0x3A);
  8326  19FE  303A               	movlw	58
  8327  19FF  319C  2473         	fcall	_CC2500_WriteCommand
  8328  1A01  0008               	return
  8329  1A02                     __end_of_RF_RxDisable:	
  8330                           
  8331                           	psect	text35
  8332  1725                     __ptext35:	
  8333 ;; *************** function _CC2500_TxData *****************
  8334 ;; Defined at:
  8335 ;;		line 32 in file "../src/CC2500_B1.c"
  8336 ;; Parameters:    Size  Location     Type
  8337 ;;		None
  8338 ;; Auto vars:     Size  Location     Type
  8339 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8340 ;; Return value:  Size  Location     Type
  8341 ;;		None               void
  8342 ;; Registers used:
  8343 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8344 ;; Tracked objects:
  8345 ;;		On entry : 0/0
  8346 ;;		On exit  : 0/0
  8347 ;;		Unchanged: 0/0
  8348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8350 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8351 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8352 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8353 ;;Total ram usage:        2 bytes
  8354 ;; Hardware stack levels used:    1
  8355 ;; Hardware stack levels required when called:    7
  8356 ;; This function calls:
  8357 ;;		_CC2500_WriteByte
  8358 ;;		_CC2500_WriteCommand
  8359 ;;		_RF_Timeout_Counter
  8360 ;;		_setRF_TimeoutCleared
  8361 ;; This function is called by:
  8362 ;;		_setRF_Main
  8363 ;; This function uses a non-reentrant model
  8364 ;;
  8365                           
  8366                           
  8367                           ;psect for function _CC2500_TxData
  8368  1725                     _CC2500_TxData:	
  8369                           
  8370                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8371                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8372                           
  8373                           ;incstack = 0
  8374                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8375  1725  3036               	movlw	54
  8376  1726  319C  2473  3197   	fcall	_CC2500_WriteCommand
  8377                           
  8378                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8379  1729  303B               	movlw	59
  8380  172A  319C  2473  3197   	fcall	_CC2500_WriteCommand
  8381                           
  8382                           ;CC2500_B1.c: 38: RC4 = 0;
  8383  172D  0020               	movlb	0	; select bank0
  8384  172E  120E               	bcf	14,4	;volatile
  8385                           
  8386                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8387  172F  307F               	movlw	127
  8388  1730  00A4               	movwf	??_CC2500_TxData
  8389  1731  0824               	movf	??_CC2500_TxData,w
  8390  1732  0021               	movlb	1	; select bank1
  8391  1733  00D8               	movwf	_SPI0Buffer^(0+128)
  8392                           
  8393                           ;CC2500_B1.c: 40: while (RC2 == 1 && RF1.Timeout == 0) {
  8394  1734  2F38               	goto	l7367
  8395  1735                     l7365:	
  8396                           
  8397                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8398  1735  319B  234A  3197   	fcall	_RF_Timeout_Counter
  8399  1738                     l7367:	
  8400  1738  0020               	movlb	0	; select bank0
  8401  1739  1D0E               	btfss	14,2	;volatile
  8402  173A  2F3E               	goto	l7371
  8403  173B  0021               	movlb	1	; select bank1
  8404  173C  1F21               	btfss	(_RF1^(0+128)+1),6
  8405  173D  2F35               	goto	l7365
  8406  173E                     l7371:	
  8407                           
  8408                           ;CC2500_B1.c: 42: };
  8409                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8410  173E  3198  20D6  3197   	fcall	_setRF_TimeoutCleared
  8411                           
  8412                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8413  1741  319C  2440  3197   	fcall	_CC2500_WriteByte
  8414                           
  8415                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8416  1744  0021               	movlb	1	; select bank1
  8417  1745  085A               	movf	_Tx_Length^(0+128),w
  8418  1746  0020               	movlb	0	; select bank0
  8419  1747  00A4               	movwf	??_CC2500_TxData
  8420  1748  0824               	movf	??_CC2500_TxData,w
  8421  1749  0021               	movlb	1	; select bank1
  8422  174A  00D8               	movwf	_SPI0Buffer^(0+128)
  8423                           
  8424                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8425  174B  319C  2440  3197   	fcall	_CC2500_WriteByte
  8426                           
  8427                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8428  174E  0020               	movlb	0	; select bank0
  8429  174F  01A5               	clrf	CC2500_TxData@loop_e
  8430  1750                     l7385:	
  8431  1750  0021               	movlb	1	; select bank1
  8432  1751  085A               	movf	_Tx_Length^(0+128),w
  8433  1752  0020               	movlb	0	; select bank0
  8434  1753  0225               	subwf	CC2500_TxData@loop_e,w
  8435  1754  1803               	btfsc	3,0
  8436  1755  2F69               	goto	l259
  8437                           
  8438                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8439  1756  0825               	movf	CC2500_TxData@loop_e,w
  8440  1757  3EA0               	addlw	_RF_Data& (0+255)
  8441  1758  0086               	movwf	6
  8442  1759  3001               	movlw	1	; select bank3/4
  8443  175A  0087               	movwf	7
  8444  175B  0801               	movf	1,w
  8445  175C  00A4               	movwf	??_CC2500_TxData
  8446  175D  0824               	movf	??_CC2500_TxData,w
  8447  175E  0021               	movlb	1	; select bank1
  8448  175F  00D8               	movwf	_SPI0Buffer^(0+128)
  8449                           
  8450                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8451  1760  319C  2440  3197   	fcall	_CC2500_WriteByte
  8452  1763  3001               	movlw	1
  8453  1764  0020               	movlb	0	; select bank0
  8454  1765  00A4               	movwf	??_CC2500_TxData
  8455  1766  0824               	movf	??_CC2500_TxData,w
  8456  1767  07A5               	addwf	CC2500_TxData@loop_e,f
  8457  1768  2F50               	goto	l7385
  8458  1769                     l259:	
  8459                           
  8460                           ;CC2500_B1.c: 51: }
  8461                           ;CC2500_B1.c: 52: RC4 = 1;
  8462  1769  160E               	bsf	14,4	;volatile
  8463                           
  8464                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8465  176A  3035               	movlw	53
  8466  176B  319C  2473  3197   	fcall	_CC2500_WriteCommand
  8467                           
  8468                           ;CC2500_B1.c: 54: while (RB0 == 0 && RF1.Timeout == 0) {
  8469  176E  2F72               	goto	l7391
  8470  176F                     l7389:	
  8471                           
  8472                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8473  176F  319B  234A  3197   	fcall	_RF_Timeout_Counter
  8474  1772                     l7391:	
  8475  1772  0020               	movlb	0	; select bank0
  8476  1773  180D               	btfsc	13,0	;volatile
  8477  1774  2F78               	goto	l7395
  8478  1775  0021               	movlb	1	; select bank1
  8479  1776  1F21               	btfss	(_RF1^(0+128)+1),6
  8480  1777  2F6F               	goto	l7389
  8481  1778                     l7395:	
  8482                           
  8483                           ;CC2500_B1.c: 56: };
  8484                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8485  1778  3198  20D6  3197   	fcall	_setRF_TimeoutCleared
  8486                           
  8487                           ;CC2500_B1.c: 59: while (RB0 == 1 && RF1.Timeout == 0) {
  8488  177B  2F7F               	goto	l7399
  8489  177C                     l7397:	
  8490                           
  8491                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8492  177C  319B  234A  3197   	fcall	_RF_Timeout_Counter
  8493  177F                     l7399:	
  8494  177F  0020               	movlb	0	; select bank0
  8495  1780  1C0D               	btfss	13,0	;volatile
  8496  1781  2F85               	goto	l7403
  8497  1782  0021               	movlb	1	; select bank1
  8498  1783  1F21               	btfss	(_RF1^(0+128)+1),6
  8499  1784  2F7C               	goto	l7397
  8500  1785                     l7403:	
  8501                           
  8502                           ;CC2500_B1.c: 61: };
  8503                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8504  1785  3198  20D6  3197   	fcall	_setRF_TimeoutCleared
  8505                           
  8506                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8507  1788  3036               	movlw	54
  8508  1789  319C  2473  3197   	fcall	_CC2500_WriteCommand
  8509                           
  8510                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8511  178C  303B               	movlw	59
  8512  178D  319C  2473         	fcall	_CC2500_WriteCommand
  8513                           
  8514                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8515  178F  0021               	movlb	1	; select bank1
  8516  1790  14EE               	bsf	(_Transceive_OK/(0+8))^(0+128),_Transceive_OK& (0+7)
  8517  1791  0008               	return
  8518  1792                     __end_of_CC2500_TxData:	
  8519                           
  8520                           	psect	text36
  8521  16BA                     __ptext36:	
  8522 ;; *************** function _CC2500_RxData *****************
  8523 ;; Defined at:
  8524 ;;		line 73 in file "../src/CC2500_B1.c"
  8525 ;; Parameters:    Size  Location     Type
  8526 ;;		None
  8527 ;; Auto vars:     Size  Location     Type
  8528 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8529 ;; Return value:  Size  Location     Type
  8530 ;;		None               void
  8531 ;; Registers used:
  8532 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8533 ;; Tracked objects:
  8534 ;;		On entry : 0/0
  8535 ;;		On exit  : 0/0
  8536 ;;		Unchanged: 0/0
  8537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8538 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8539 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8540 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8541 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8542 ;;Total ram usage:        2 bytes
  8543 ;; Hardware stack levels used:    1
  8544 ;; Hardware stack levels required when called:    7
  8545 ;; This function calls:
  8546 ;;		_CC2500_ReadByte
  8547 ;;		_CC2500_ReadStatus
  8548 ;;		_CC2500_WriteByte
  8549 ;;		_CC2500_WriteCommand
  8550 ;;		_RF_Timeout_Counter
  8551 ;;		_setRF_TimeoutCleared
  8552 ;; This function is called by:
  8553 ;;		_setRF_Main
  8554 ;; This function uses a non-reentrant model
  8555 ;;
  8556                           
  8557                           
  8558                           ;psect for function _CC2500_RxData
  8559  16BA                     _CC2500_RxData:	
  8560                           
  8561                           ;CC2500_B1.c: 74: unsigned char loop_f;
  8562                           ;CC2500_B1.c: 78: if (RB0 == 0) {
  8563                           
  8564                           ;incstack = 0
  8565                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8566  16BA  0020               	movlb	0	; select bank0
  8567  16BB  180D               	btfsc	13,0	;volatile
  8568  16BC  0008               	return
  8569                           
  8570                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  8571  16BD  303B               	movlw	59
  8572  16BE  319E  269E  3196   	fcall	_CC2500_ReadStatus
  8573                           
  8574                           ;CC2500_B1.c: 89: if (s_data != 0) {
  8575  16C1  0021               	movlb	1	; select bank1
  8576  16C2  085B               	movf	_s_data^(0+128),w
  8577  16C3  1903               	btfsc	3,2
  8578  16C4  0008               	return
  8579                           
  8580                           ;CC2500_B1.c: 90: RC4 = 0;
  8581  16C5  0020               	movlb	0	; select bank0
  8582  16C6  120E               	bcf	14,4	;volatile
  8583                           
  8584                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  8585  16C7  30FF               	movlw	255
  8586  16C8  00A4               	movwf	??_CC2500_RxData
  8587  16C9  0824               	movf	??_CC2500_RxData,w
  8588  16CA  0021               	movlb	1	; select bank1
  8589  16CB  00D8               	movwf	_SPI0Buffer^(0+128)
  8590                           
  8591                           ;CC2500_B1.c: 93: while (RC2 == 1 && RF1.Timeout == 0) {
  8592  16CC  2ED0               	goto	l7423
  8593  16CD                     l7421:	
  8594                           
  8595                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  8596  16CD  319B  234A  3196   	fcall	_RF_Timeout_Counter
  8597  16D0                     l7423:	
  8598  16D0  0020               	movlb	0	; select bank0
  8599  16D1  1D0E               	btfss	14,2	;volatile
  8600  16D2  2ED6               	goto	l7427
  8601  16D3  0021               	movlb	1	; select bank1
  8602  16D4  1F21               	btfss	(_RF1^(0+128)+1),6
  8603  16D5  2ECD               	goto	l7421
  8604  16D6                     l7427:	
  8605                           
  8606                           ;CC2500_B1.c: 95: };
  8607                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  8608  16D6  3198  20D6  3196   	fcall	_setRF_TimeoutCleared
  8609                           
  8610                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  8611  16D9  319C  2440  3196   	fcall	_CC2500_WriteByte
  8612                           
  8613                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  8614  16DC  319C  24FC  3196   	fcall	_CC2500_ReadByte
  8615                           
  8616                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  8617  16DF  0021               	movlb	1	; select bank1
  8618  16E0  0858               	movf	_SPI0Buffer^(0+128),w
  8619  16E1  0020               	movlb	0	; select bank0
  8620  16E2  00A4               	movwf	??_CC2500_RxData
  8621  16E3  0824               	movf	??_CC2500_RxData,w
  8622  16E4  0022               	movlb	2	; select bank2
  8623  16E5  00BB               	movwf	_Rx_Length^(0+256)
  8624                           
  8625                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8626  16E6  0020               	movlb	0	; select bank0
  8627  16E7  01A5               	clrf	CC2500_RxData@loop_f
  8628  16E8                     l7443:	
  8629  16E8  0022               	movlb	2	; select bank2
  8630  16E9  083B               	movf	_Rx_Length^(0+256),w
  8631  16EA  0020               	movlb	0	; select bank0
  8632  16EB  0225               	subwf	CC2500_RxData@loop_f,w
  8633  16EC  1803               	btfsc	3,0
  8634  16ED  2F01               	goto	l7445
  8635                           
  8636                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8637  16EE  319C  24FC  3196   	fcall	_CC2500_ReadByte
  8638                           
  8639                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  8640  16F1  0021               	movlb	1	; select bank1
  8641  16F2  0858               	movf	_SPI0Buffer^(0+128),w
  8642  16F3  0020               	movlb	0	; select bank0
  8643  16F4  00A4               	movwf	??_CC2500_RxData
  8644  16F5  0825               	movf	CC2500_RxData@loop_f,w
  8645  16F6  3EA0               	addlw	_RF_Data& (0+255)
  8646  16F7  0086               	movwf	6
  8647  16F8  3001               	movlw	1	; select bank3/4
  8648  16F9  0087               	movwf	7
  8649  16FA  0824               	movf	??_CC2500_RxData,w
  8650  16FB  0081               	movwf	1
  8651  16FC  3001               	movlw	1
  8652  16FD  00A4               	movwf	??_CC2500_RxData
  8653  16FE  0824               	movf	??_CC2500_RxData,w
  8654  16FF  07A5               	addwf	CC2500_RxData@loop_f,f
  8655  1700  2EE8               	goto	l7443
  8656  1701                     l7445:	
  8657                           
  8658                           ;CC2500_B1.c: 104: }
  8659                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  8660  1701  319C  24FC  3196   	fcall	_CC2500_ReadByte
  8661                           
  8662                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  8663  1704  0021               	movlb	1	; select bank1
  8664  1705  0858               	movf	_SPI0Buffer^(0+128),w
  8665  1706  0020               	movlb	0	; select bank0
  8666  1707  00A4               	movwf	??_CC2500_RxData
  8667  1708  0824               	movf	??_CC2500_RxData,w
  8668  1709  0022               	movlb	2	; select bank2
  8669  170A  00BA               	movwf	_RSSI^(0+256)
  8670                           
  8671                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  8672  170B  319C  24FC  3196   	fcall	_CC2500_ReadByte
  8673                           
  8674                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  8675  170E  0021               	movlb	1	; select bank1
  8676  170F  0858               	movf	_SPI0Buffer^(0+128),w
  8677  1710  0020               	movlb	0	; select bank0
  8678  1711  00A4               	movwf	??_CC2500_RxData
  8679  1712  0824               	movf	??_CC2500_RxData,w
  8680  1713  0021               	movlb	1	; select bank1
  8681  1714  00D3               	movwf	_CRC^(0+128)
  8682                           
  8683                           ;CC2500_B1.c: 109: RC4 = 1;
  8684  1715  0020               	movlb	0	; select bank0
  8685  1716  160E               	bsf	14,4	;volatile
  8686                           
  8687                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  8688  1717  0021               	movlb	1	; select bank1
  8689  1718  1BD3               	btfsc	_CRC^(0+128),7
  8690                           
  8691                           ;CC2500_B1.c: 111: Receive_OK = 1;
  8692  1719  146E               	bsf	(_Receive_OK/(0+8))^(0+128),_Receive_OK& (0+7)
  8693                           
  8694                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  8695  171A  11A0               	bcf	_RF1^(0+128),3
  8696                           
  8697                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  8698  171B  14A0               	bsf	_RF1^(0+128),1
  8699                           
  8700                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  8701  171C  3036               	movlw	54
  8702  171D  319C  2473  3196   	fcall	_CC2500_WriteCommand
  8703                           
  8704                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  8705  1720  303A               	movlw	58
  8706  1721  319C  2473         	fcall	_CC2500_WriteCommand
  8707  1723  0021               	movlb	1	; select bank1
  8708  1724  0008               	return
  8709  1725                     __end_of_CC2500_RxData:	
  8710                           
  8711                           	psect	text37
  8712  1E9E                     __ptext37:	
  8713 ;; *************** function _CC2500_ReadStatus *****************
  8714 ;; Defined at:
  8715 ;;		line 308 in file "../src/CC2500_B1.c"
  8716 ;; Parameters:    Size  Location     Type
  8717 ;;  status_addr     1    wreg     unsigned char 
  8718 ;; Auto vars:     Size  Location     Type
  8719 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8720 ;; Return value:  Size  Location     Type
  8721 ;;		None               void
  8722 ;; Registers used:
  8723 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8724 ;; Tracked objects:
  8725 ;;		On entry : 0/0
  8726 ;;		On exit  : 0/0
  8727 ;;		Unchanged: 0/0
  8728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8729 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8730 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8731 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8732 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8733 ;;Total ram usage:        2 bytes
  8734 ;; Hardware stack levels used:    1
  8735 ;; Hardware stack levels required when called:    6
  8736 ;; This function calls:
  8737 ;;		_CC2500_ReadByte
  8738 ;;		_CC2500_WriteByte
  8739 ;;		_RF_Timeout_Counter
  8740 ;;		_setRF_TimeoutCleared
  8741 ;; This function is called by:
  8742 ;;		_CC2500_RxData
  8743 ;; This function uses a non-reentrant model
  8744 ;;
  8745                           
  8746                           
  8747                           ;psect for function _CC2500_ReadStatus
  8748  1E9E                     _CC2500_ReadStatus:	
  8749                           
  8750                           ;incstack = 0
  8751                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8752                           ;CC2500_ReadStatus@status_addr stored from wreg
  8753  1E9E  0020               	movlb	0	; select bank0
  8754  1E9F  00A3               	movwf	CC2500_ReadStatus@status_addr
  8755                           
  8756                           ;CC2500_B1.c: 309: RC4 = 0;
  8757  1EA0  120E               	bcf	14,4	;volatile
  8758                           
  8759                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  8760  1EA1  0823               	movf	CC2500_ReadStatus@status_addr,w
  8761  1EA2  3EC0               	addlw	192
  8762  1EA3  00A2               	movwf	??_CC2500_ReadStatus
  8763  1EA4  0822               	movf	??_CC2500_ReadStatus,w
  8764  1EA5  0021               	movlb	1	; select bank1
  8765  1EA6  00D8               	movwf	_SPI0Buffer^(0+128)
  8766                           
  8767                           ;CC2500_B1.c: 312: while (RC2 == 1 && RF1.Timeout == 0) {
  8768  1EA7  2EAB               	goto	l7037
  8769  1EA8                     l7035:	
  8770                           
  8771                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  8772  1EA8  319B  234A  319E   	fcall	_RF_Timeout_Counter
  8773  1EAB                     l7037:	
  8774  1EAB  0020               	movlb	0	; select bank0
  8775  1EAC  1D0E               	btfss	14,2	;volatile
  8776  1EAD  2EB1               	goto	l7041
  8777  1EAE  0021               	movlb	1	; select bank1
  8778  1EAF  1F21               	btfss	(_RF1^(0+128)+1),6
  8779  1EB0  2EA8               	goto	l7035
  8780  1EB1                     l7041:	
  8781                           
  8782                           ;CC2500_B1.c: 314: };
  8783                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  8784  1EB1  3198  20D6  319E   	fcall	_setRF_TimeoutCleared
  8785                           
  8786                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  8787  1EB4  319C  2440  319E   	fcall	_CC2500_WriteByte
  8788                           
  8789                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  8790  1EB7  319C  24FC         	fcall	_CC2500_ReadByte
  8791                           
  8792                           ;CC2500_B1.c: 319: RC4 = 1;
  8793  1EB9  0020               	movlb	0	; select bank0
  8794  1EBA  160E               	bsf	14,4	;volatile
  8795                           
  8796                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  8797  1EBB  0021               	movlb	1	; select bank1
  8798  1EBC  0858               	movf	_SPI0Buffer^(0+128),w
  8799  1EBD  0020               	movlb	0	; select bank0
  8800  1EBE  00A2               	movwf	??_CC2500_ReadStatus
  8801  1EBF  0822               	movf	??_CC2500_ReadStatus,w
  8802  1EC0  0021               	movlb	1	; select bank1
  8803  1EC1  00DB               	movwf	_s_data^(0+128)
  8804  1EC2  0008               	return
  8805  1EC3                     __end_of_CC2500_ReadStatus:	
  8806                           
  8807                           	psect	text38
  8808  1CFC                     __ptext38:	
  8809 ;; *************** function _CC2500_ReadByte *****************
  8810 ;; Defined at:
  8811 ;;		line 242 in file "../src/CC2500_B1.c"
  8812 ;; Parameters:    Size  Location     Type
  8813 ;;		None
  8814 ;; Auto vars:     Size  Location     Type
  8815 ;;  loop_b          1    1[BANK0 ] unsigned char 
  8816 ;; Return value:  Size  Location     Type
  8817 ;;		None               void
  8818 ;; Registers used:
  8819 ;;		wreg, status,2, status,0
  8820 ;; Tracked objects:
  8821 ;;		On entry : 0/0
  8822 ;;		On exit  : 0/0
  8823 ;;		Unchanged: 0/0
  8824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8826 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8827 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8828 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8829 ;;Total ram usage:        2 bytes
  8830 ;; Hardware stack levels used:    1
  8831 ;; Hardware stack levels required when called:    5
  8832 ;; This function calls:
  8833 ;;		Nothing
  8834 ;; This function is called by:
  8835 ;;		_CC2500_RxData
  8836 ;;		_CC2500_ReadStatus
  8837 ;;		_CC2500_ReadREG
  8838 ;; This function uses a non-reentrant model
  8839 ;;
  8840                           
  8841                           
  8842                           ;psect for function _CC2500_ReadByte
  8843  1CFC                     _CC2500_ReadByte:	
  8844                           
  8845                           ;CC2500_B1.c: 243: unsigned char loop_b;
  8846                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  8847                           
  8848                           ;incstack = 0
  8849                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8850  1CFC  0020               	movlb	0	; select bank0
  8851  1CFD  01A1               	clrf	CC2500_ReadByte@loop_b
  8852  1CFE                     L3:	
  8853  1CFE  3008               	movlw	8
  8854  1CFF  0221               	subwf	CC2500_ReadByte@loop_b,w
  8855  1D00  1803               	btfsc	3,0
  8856  1D01  0008               	return
  8857                           
  8858                           ;CC2500_B1.c: 245: RC1 = 1;
  8859  1D02  148E               	bsf	14,1	;volatile
  8860                           
  8861                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  8862  1D03  1003               	clrc
  8863  1D04  0021               	movlb	1	; select bank1
  8864  1D05  0DD8               	rlf	_SPI0Buffer^(0+128),f
  8865                           
  8866                           ;CC2500_B1.c: 247: if (RC2 == 1)
  8867  1D06  0020               	movlb	0	; select bank0
  8868  1D07  1D0E               	btfss	14,2	;volatile
  8869  1D08  2D0C               	goto	l6921
  8870                           
  8871                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  8872  1D09  0021               	movlb	1	; select bank1
  8873  1D0A  1458               	bsf	_SPI0Buffer^(0+128),0
  8874  1D0B  2D12               	goto	l6923
  8875  1D0C                     l6921:	
  8876                           
  8877                           ;CC2500_B1.c: 249: else
  8878                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  8879  1D0C  30FE               	movlw	254
  8880  1D0D  0020               	movlb	0	; select bank0
  8881  1D0E  00A0               	movwf	??_CC2500_ReadByte
  8882  1D0F  0820               	movf	??_CC2500_ReadByte,w
  8883  1D10  0021               	movlb	1	; select bank1
  8884  1D11  05D8               	andwf	_SPI0Buffer^(0+128),f
  8885  1D12                     l6923:	
  8886                           
  8887                           ;CC2500_B1.c: 251: RC1 = 0;
  8888  1D12  0020               	movlb	0	; select bank0
  8889  1D13  108E               	bcf	14,1	;volatile
  8890  1D14  3001               	movlw	1
  8891  1D15  00A0               	movwf	??_CC2500_ReadByte
  8892  1D16  0820               	movf	??_CC2500_ReadByte,w
  8893  1D17  07A1               	addwf	CC2500_ReadByte@loop_b,f
  8894  1D18  2CFE               	goto	L3
  8895  1D19                     __end_of_CC2500_ReadByte:	
  8896                           
  8897                           	psect	text39
  8898  1B5F                     __ptext39:	
  8899 ;; *************** function _CC2500_PowerOnInitial *****************
  8900 ;; Defined at:
  8901 ;;		line 126 in file "../src/CC2500_B1.c"
  8902 ;; Parameters:    Size  Location     Type
  8903 ;;		None
  8904 ;; Auto vars:     Size  Location     Type
  8905 ;;		None
  8906 ;; Return value:  Size  Location     Type
  8907 ;;		None               void
  8908 ;; Registers used:
  8909 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8910 ;; Tracked objects:
  8911 ;;		On entry : 0/0
  8912 ;;		On exit  : 0/0
  8913 ;;		Unchanged: 0/0
  8914 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8918 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8919 ;;Total ram usage:        0 bytes
  8920 ;; Hardware stack levels used:    1
  8921 ;; Hardware stack levels required when called:    8
  8922 ;; This function calls:
  8923 ;;		_CC2500_ClearRXFIFO
  8924 ;;		_CC2500_ClearTXFIFO
  8925 ;;		_CC2500_FrequencyCabr
  8926 ;;		_CC2500_InitPATable
  8927 ;;		_CC2500_InitSetREG
  8928 ;;		_CC2500_PowerRST
  8929 ;;		_CC2500_SIDLEMode
  8930 ;; This function is called by:
  8931 ;;		_setRF_Main
  8932 ;;		_main
  8933 ;; This function uses a non-reentrant model
  8934 ;;
  8935                           
  8936                           
  8937                           ;psect for function _CC2500_PowerOnInitial
  8938  1B5F                     _CC2500_PowerOnInitial:	
  8939                           
  8940                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  8941                           
  8942                           ;incstack = 0
  8943                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8944  1B5F  3192  2280  319B   	fcall	_CC2500_PowerRST
  8945                           
  8946                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  8947  1B62  319E  26EB  319B   	fcall	_CC2500_InitSetREG
  8948                           
  8949                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  8950  1B65  319D  2537  319B   	fcall	_CC2500_InitPATable
  8951                           
  8952                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  8953  1B68  3198  20DE  319B   	fcall	_CC2500_ClearTXFIFO
  8954                           
  8955                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  8956  1B6B  3198  20DA  319B   	fcall	_CC2500_ClearRXFIFO
  8957                           
  8958                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  8959  1B6E  3199  21DA  319B   	fcall	_CC2500_FrequencyCabr
  8960                           
  8961                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  8962  1B71  3198  20E2         	fcall	_CC2500_SIDLEMode
  8963  1B73  0008               	return
  8964  1B74                     __end_of_CC2500_PowerOnInitial:	
  8965                           
  8966                           	psect	text40
  8967  18E2                     __ptext40:	
  8968 ;; *************** function _CC2500_SIDLEMode *****************
  8969 ;; Defined at:
  8970 ;;		line 216 in file "../src/CC2500_B1.c"
  8971 ;; Parameters:    Size  Location     Type
  8972 ;;		None
  8973 ;; Auto vars:     Size  Location     Type
  8974 ;;		None
  8975 ;; Return value:  Size  Location     Type
  8976 ;;		None               void
  8977 ;; Registers used:
  8978 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8979 ;; Tracked objects:
  8980 ;;		On entry : 0/0
  8981 ;;		On exit  : 0/0
  8982 ;;		Unchanged: 0/0
  8983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8984 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8985 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8987 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8988 ;;Total ram usage:        0 bytes
  8989 ;; Hardware stack levels used:    1
  8990 ;; Hardware stack levels required when called:    7
  8991 ;; This function calls:
  8992 ;;		_CC2500_WriteCommand
  8993 ;; This function is called by:
  8994 ;;		_CC2500_PowerOnInitial
  8995 ;; This function uses a non-reentrant model
  8996 ;;
  8997                           
  8998                           
  8999                           ;psect for function _CC2500_SIDLEMode
  9000  18E2                     _CC2500_SIDLEMode:	
  9001                           
  9002                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  9003                           
  9004                           ;incstack = 0
  9005                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9006  18E2  3036               	movlw	54
  9007  18E3  319C  2473         	fcall	_CC2500_WriteCommand
  9008  18E5  0008               	return
  9009  18E6                     __end_of_CC2500_SIDLEMode:	
  9010                           
  9011                           	psect	text41
  9012  1280                     __ptext41:	
  9013 ;; *************** function _CC2500_PowerRST *****************
  9014 ;; Defined at:
  9015 ;;		line 139 in file "../src/CC2500_B1.c"
  9016 ;; Parameters:    Size  Location     Type
  9017 ;;		None
  9018 ;; Auto vars:     Size  Location     Type
  9019 ;;		None
  9020 ;; Return value:  Size  Location     Type
  9021 ;;		None               void
  9022 ;; Registers used:
  9023 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9024 ;; Tracked objects:
  9025 ;;		On entry : 0/0
  9026 ;;		On exit  : 0/0
  9027 ;;		Unchanged: 0/0
  9028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9030 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9031 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9032 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9033 ;;Total ram usage:        1 bytes
  9034 ;; Hardware stack levels used:    1
  9035 ;; Hardware stack levels required when called:    6
  9036 ;; This function calls:
  9037 ;;		_CC2500_WriteByte
  9038 ;;		_DelayTime_1us
  9039 ;;		_RF_Timeout_Counter
  9040 ;;		_setRF_TimeoutCleared
  9041 ;; This function is called by:
  9042 ;;		_CC2500_PowerOnInitial
  9043 ;; This function uses a non-reentrant model
  9044 ;;
  9045                           
  9046                           
  9047                           ;psect for function _CC2500_PowerRST
  9048  1280                     _CC2500_PowerRST:	
  9049                           
  9050                           ;CC2500_B1.c: 140: RC1 = 0;
  9051                           
  9052                           ;incstack = 0
  9053                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9054  1280  0020               	movlb	0	; select bank0
  9055  1281  108E               	bcf	14,1	;volatile
  9056                           
  9057                           ;CC2500_B1.c: 141: RC0 = 0;
  9058  1282  100E               	bcf	14,0	;volatile
  9059                           
  9060                           ;CC2500_B1.c: 142: RC4 = 1;
  9061  1283  160E               	bsf	14,4	;volatile
  9062                           
  9063                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  9064  1284  300A               	movlw	10
  9065  1285  00A0               	movwf	DelayTime_1us@count
  9066  1286  3000               	movlw	0
  9067  1287  00A1               	movwf	DelayTime_1us@count+1
  9068  1288  3190  2001  3192   	fcall	_DelayTime_1us
  9069                           
  9070                           ;CC2500_B1.c: 144: RC4 = 0;
  9071  128B  0020               	movlb	0	; select bank0
  9072  128C  120E               	bcf	14,4	;volatile
  9073                           
  9074                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  9075  128D  300A               	movlw	10
  9076  128E  00A0               	movwf	DelayTime_1us@count
  9077  128F  3000               	movlw	0
  9078  1290  00A1               	movwf	DelayTime_1us@count+1
  9079  1291  3190  2001  3192   	fcall	_DelayTime_1us
  9080                           
  9081                           ;CC2500_B1.c: 146: RC4 = 1;
  9082  1294  0020               	movlb	0	; select bank0
  9083  1295  160E               	bsf	14,4	;volatile
  9084                           
  9085                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  9086  1296  3028               	movlw	40
  9087  1297  00A0               	movwf	DelayTime_1us@count
  9088  1298  3000               	movlw	0
  9089  1299  00A1               	movwf	DelayTime_1us@count+1
  9090  129A  3190  2001  3192   	fcall	_DelayTime_1us
  9091                           
  9092                           ;CC2500_B1.c: 148: RC4 = 0;
  9093  129D  0020               	movlb	0	; select bank0
  9094  129E  120E               	bcf	14,4	;volatile
  9095                           
  9096                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  9097  129F  3030               	movlw	48
  9098  12A0  00A6               	movwf	??_CC2500_PowerRST
  9099  12A1  0826               	movf	??_CC2500_PowerRST,w
  9100  12A2  0021               	movlb	1	; select bank1
  9101  12A3  00D8               	movwf	_SPI0Buffer^(0+128)
  9102                           
  9103                           ;CC2500_B1.c: 150: while (RC2 == 1 && RF1.Timeout == 0) {
  9104  12A4  2AA8               	goto	l7065
  9105  12A5                     l7063:	
  9106                           
  9107                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  9108  12A5  319B  234A  3192   	fcall	_RF_Timeout_Counter
  9109  12A8                     l7065:	
  9110  12A8  0020               	movlb	0	; select bank0
  9111  12A9  1D0E               	btfss	14,2	;volatile
  9112  12AA  2AAE               	goto	l7069
  9113  12AB  0021               	movlb	1	; select bank1
  9114  12AC  1F21               	btfss	(_RF1^(0+128)+1),6
  9115  12AD  2AA5               	goto	l7063
  9116  12AE                     l7069:	
  9117                           
  9118                           ;CC2500_B1.c: 152: };
  9119                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  9120  12AE  3198  20D6  3192   	fcall	_setRF_TimeoutCleared
  9121                           
  9122                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  9123  12B1  319C  2440  3192   	fcall	_CC2500_WriteByte
  9124                           
  9125                           ;CC2500_B1.c: 155: while (RC2 == 1 && RF1.Timeout == 0) {
  9126  12B4  2AB8               	goto	l7075
  9127  12B5                     l7073:	
  9128                           
  9129                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  9130  12B5  319B  234A  3192   	fcall	_RF_Timeout_Counter
  9131  12B8                     l7075:	
  9132  12B8  0020               	movlb	0	; select bank0
  9133  12B9  1D0E               	btfss	14,2	;volatile
  9134  12BA  2ABE               	goto	l7079
  9135  12BB  0021               	movlb	1	; select bank1
  9136  12BC  1F21               	btfss	(_RF1^(0+128)+1),6
  9137  12BD  2AB5               	goto	l7073
  9138  12BE                     l7079:	
  9139                           
  9140                           ;CC2500_B1.c: 157: };
  9141                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  9142  12BE  3198  20D6         	fcall	_setRF_TimeoutCleared
  9143                           
  9144                           ;CC2500_B1.c: 159: RC0 = 0;
  9145  12C0  0020               	movlb	0	; select bank0
  9146  12C1  100E               	bcf	14,0	;volatile
  9147                           
  9148                           ;CC2500_B1.c: 160: RC4 = 1;
  9149  12C2  160E               	bsf	14,4	;volatile
  9150  12C3  0008               	return
  9151  12C4                     __end_of_CC2500_PowerRST:	
  9152                           
  9153                           	psect	text42
  9154  1EEB                     __ptext42:	
  9155 ;; *************** function _CC2500_InitSetREG *****************
  9156 ;; Defined at:
  9157 ;;		line 166 in file "../src/CC2500_B1.c"
  9158 ;; Parameters:    Size  Location     Type
  9159 ;;		None
  9160 ;; Auto vars:     Size  Location     Type
  9161 ;;  loop_c          1    8[BANK0 ] unsigned char 
  9162 ;;  temp2           1    7[BANK0 ] unsigned char 
  9163 ;;  temp1           1    6[BANK0 ] unsigned char 
  9164 ;; Return value:  Size  Location     Type
  9165 ;;		None               void
  9166 ;; Registers used:
  9167 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9168 ;; Tracked objects:
  9169 ;;		On entry : 0/0
  9170 ;;		On exit  : 0/0
  9171 ;;		Unchanged: 0/0
  9172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9174 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9175 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9176 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9177 ;;Total ram usage:        4 bytes
  9178 ;; Hardware stack levels used:    1
  9179 ;; Hardware stack levels required when called:    7
  9180 ;; This function calls:
  9181 ;;		_CC2500_WriteREG
  9182 ;; This function is called by:
  9183 ;;		_CC2500_PowerOnInitial
  9184 ;; This function uses a non-reentrant model
  9185 ;;
  9186                           
  9187                           
  9188                           ;psect for function _CC2500_InitSetREG
  9189  1EEB                     _CC2500_InitSetREG:	
  9190                           
  9191                           ;CC2500_B1.c: 167: unsigned char loop_c;
  9192                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  9193                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  9194                           
  9195                           ;incstack = 0
  9196                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9197  1EEB  0020               	movlb	0	; select bank0
  9198  1EEC  01A8               	clrf	CC2500_InitSetREG@loop_c
  9199  1EED                     L4:	
  9200  1EED  302F               	movlw	47
  9201  1EEE  0228               	subwf	CC2500_InitSetREG@loop_c,w
  9202  1EEF  1803               	btfsc	3,0
  9203  1EF0  0008               	return
  9204                           
  9205                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  9206  1EF1  0828               	movf	CC2500_InitSetREG@loop_c,w
  9207  1EF2  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  9208  1EF3  0084               	movwf	4
  9209  1EF4  3098               	movlw	high (_CC2500_registers_address| (0+32768))
  9210  1EF5  1803               	skipnc
  9211  1EF6  3E01               	addlw	1
  9212  1EF7  0085               	movwf	5
  9213  1EF8  0800               	movf	0,w	;code access
  9214  1EF9  00A5               	movwf	??_CC2500_InitSetREG
  9215  1EFA  0825               	movf	??_CC2500_InitSetREG,w
  9216  1EFB  00A6               	movwf	CC2500_InitSetREG@temp1
  9217                           
  9218                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9219  1EFC  0828               	movf	CC2500_InitSetREG@loop_c,w
  9220  1EFD  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9221  1EFE  0084               	movwf	4
  9222  1EFF  3098               	movlw	high (_CC2500_rfSettings| (0+32768))
  9223  1F00  1803               	skipnc
  9224  1F01  3E01               	addlw	1
  9225  1F02  0085               	movwf	5
  9226  1F03  0800               	movf	0,w	;code access
  9227  1F04  00A5               	movwf	??_CC2500_InitSetREG
  9228  1F05  0825               	movf	??_CC2500_InitSetREG,w
  9229  1F06  00A7               	movwf	CC2500_InitSetREG@temp2
  9230                           
  9231                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9232  1F07  0827               	movf	CC2500_InitSetREG@temp2,w
  9233  1F08  00A5               	movwf	??_CC2500_InitSetREG
  9234  1F09  0825               	movf	??_CC2500_InitSetREG,w
  9235  1F0A  00A2               	movwf	CC2500_WriteREG@value
  9236  1F0B  0826               	movf	CC2500_InitSetREG@temp1,w
  9237  1F0C  319E  267B  319E   	fcall	_CC2500_WriteREG
  9238  1F0F  3001               	movlw	1
  9239  1F10  0020               	movlb	0	; select bank0
  9240  1F11  00A5               	movwf	??_CC2500_InitSetREG
  9241  1F12  0825               	movf	??_CC2500_InitSetREG,w
  9242  1F13  07A8               	addwf	CC2500_InitSetREG@loop_c,f
  9243  1F14  2EED               	goto	L4
  9244  1F15                     __end_of_CC2500_InitSetREG:	
  9245                           
  9246                           	psect	text43
  9247  1D37                     __ptext43:	
  9248 ;; *************** function _CC2500_InitPATable *****************
  9249 ;; Defined at:
  9250 ;;		line 181 in file "../src/CC2500_B1.c"
  9251 ;; Parameters:    Size  Location     Type
  9252 ;;		None
  9253 ;; Auto vars:     Size  Location     Type
  9254 ;;  loop_d          1    7[BANK0 ] unsigned char 
  9255 ;;  temp            1    6[BANK0 ] unsigned char 
  9256 ;; Return value:  Size  Location     Type
  9257 ;;		None               void
  9258 ;; Registers used:
  9259 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9260 ;; Tracked objects:
  9261 ;;		On entry : 0/0
  9262 ;;		On exit  : 0/0
  9263 ;;		Unchanged: 0/0
  9264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9266 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9267 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9268 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9269 ;;Total ram usage:        3 bytes
  9270 ;; Hardware stack levels used:    1
  9271 ;; Hardware stack levels required when called:    7
  9272 ;; This function calls:
  9273 ;;		_CC2500_WriteREG
  9274 ;; This function is called by:
  9275 ;;		_CC2500_PowerOnInitial
  9276 ;; This function uses a non-reentrant model
  9277 ;;
  9278                           
  9279                           
  9280                           ;psect for function _CC2500_InitPATable
  9281  1D37                     _CC2500_InitPATable:	
  9282                           
  9283                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9284                           ;CC2500_B1.c: 183: unsigned char temp;
  9285                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9286                           
  9287                           ;incstack = 0
  9288                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9289  1D37  0020               	movlb	0	; select bank0
  9290  1D38  01A7               	clrf	CC2500_InitPATable@loop_d
  9291  1D39                     L5:	
  9292  1D39  3008               	movlw	8
  9293  1D3A  0227               	subwf	CC2500_InitPATable@loop_d,w
  9294  1D3B  1803               	btfsc	3,0
  9295  1D3C  0008               	return
  9296                           
  9297                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9298  1D3D  0827               	movf	CC2500_InitPATable@loop_d,w
  9299  1D3E  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9300  1D3F  0084               	movwf	4
  9301  1D40  3098               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9302  1D41  1803               	skipnc
  9303  1D42  3E01               	addlw	1
  9304  1D43  0085               	movwf	5
  9305  1D44  0800               	movf	0,w	;code access
  9306  1D45  00A5               	movwf	??_CC2500_InitPATable
  9307  1D46  0825               	movf	??_CC2500_InitPATable,w
  9308  1D47  00A6               	movwf	CC2500_InitPATable@temp
  9309                           
  9310                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9311  1D48  0826               	movf	CC2500_InitPATable@temp,w
  9312  1D49  00A5               	movwf	??_CC2500_InitPATable
  9313  1D4A  0825               	movf	??_CC2500_InitPATable,w
  9314  1D4B  00A2               	movwf	CC2500_WriteREG@value
  9315  1D4C  303E               	movlw	62
  9316  1D4D  319E  267B  319D   	fcall	_CC2500_WriteREG
  9317  1D50  3001               	movlw	1
  9318  1D51  0020               	movlb	0	; select bank0
  9319  1D52  00A5               	movwf	??_CC2500_InitPATable
  9320  1D53  0825               	movf	??_CC2500_InitPATable,w
  9321  1D54  07A7               	addwf	CC2500_InitPATable@loop_d,f
  9322  1D55  2D39               	goto	L5
  9323  1D56                     __end_of_CC2500_InitPATable:	
  9324                           
  9325                           	psect	text44
  9326  1E7B                     __ptext44:	
  9327 ;; *************** function _CC2500_WriteREG *****************
  9328 ;; Defined at:
  9329 ;;		line 258 in file "../src/CC2500_B1.c"
  9330 ;; Parameters:    Size  Location     Type
  9331 ;;  w_addr          1    wreg     unsigned char 
  9332 ;;  value           1    2[BANK0 ] unsigned char 
  9333 ;; Auto vars:     Size  Location     Type
  9334 ;;  w_addr          1    4[BANK0 ] unsigned char 
  9335 ;; Return value:  Size  Location     Type
  9336 ;;		None               void
  9337 ;; Registers used:
  9338 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9339 ;; Tracked objects:
  9340 ;;		On entry : 0/0
  9341 ;;		On exit  : 0/0
  9342 ;;		Unchanged: 0/0
  9343 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9344 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9345 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9346 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9347 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9348 ;;Total ram usage:        3 bytes
  9349 ;; Hardware stack levels used:    1
  9350 ;; Hardware stack levels required when called:    6
  9351 ;; This function calls:
  9352 ;;		_CC2500_WriteByte
  9353 ;;		_RF_Timeout_Counter
  9354 ;;		_setRF_TimeoutCleared
  9355 ;; This function is called by:
  9356 ;;		_CC2500_InitSetREG
  9357 ;;		_CC2500_InitPATable
  9358 ;; This function uses a non-reentrant model
  9359 ;;
  9360                           
  9361                           
  9362                           ;psect for function _CC2500_WriteREG
  9363  1E7B                     _CC2500_WriteREG:	
  9364                           
  9365                           ;incstack = 0
  9366                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9367                           ;CC2500_WriteREG@w_addr stored from wreg
  9368  1E7B  0020               	movlb	0	; select bank0
  9369  1E7C  00A4               	movwf	CC2500_WriteREG@w_addr
  9370                           
  9371                           ;CC2500_B1.c: 259: RC4 = 0;
  9372  1E7D  120E               	bcf	14,4	;volatile
  9373                           
  9374                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9375  1E7E  0824               	movf	CC2500_WriteREG@w_addr,w
  9376  1E7F  00A3               	movwf	??_CC2500_WriteREG
  9377  1E80  0823               	movf	??_CC2500_WriteREG,w
  9378  1E81  0021               	movlb	1	; select bank1
  9379  1E82  00D8               	movwf	_SPI0Buffer^(0+128)
  9380                           
  9381                           ;CC2500_B1.c: 261: while (RC2 == 1 && RF1.Timeout == 0) {
  9382  1E83  2E87               	goto	l6945
  9383  1E84                     l6943:	
  9384                           
  9385                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9386  1E84  319B  234A  319E   	fcall	_RF_Timeout_Counter
  9387  1E87                     l6945:	
  9388  1E87  0020               	movlb	0	; select bank0
  9389  1E88  1D0E               	btfss	14,2	;volatile
  9390  1E89  2E8D               	goto	l6949
  9391  1E8A  0021               	movlb	1	; select bank1
  9392  1E8B  1F21               	btfss	(_RF1^(0+128)+1),6
  9393  1E8C  2E84               	goto	l6943
  9394  1E8D                     l6949:	
  9395                           
  9396                           ;CC2500_B1.c: 263: };
  9397                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9398  1E8D  3198  20D6  319E   	fcall	_setRF_TimeoutCleared
  9399                           
  9400                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9401  1E90  319C  2440  319E   	fcall	_CC2500_WriteByte
  9402                           
  9403                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9404  1E93  0020               	movlb	0	; select bank0
  9405  1E94  0822               	movf	CC2500_WriteREG@value,w
  9406  1E95  00A3               	movwf	??_CC2500_WriteREG
  9407  1E96  0823               	movf	??_CC2500_WriteREG,w
  9408  1E97  0021               	movlb	1	; select bank1
  9409  1E98  00D8               	movwf	_SPI0Buffer^(0+128)
  9410                           
  9411                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9412  1E99  319C  2440         	fcall	_CC2500_WriteByte
  9413                           
  9414                           ;CC2500_B1.c: 269: RC4 = 1;
  9415  1E9B  0020               	movlb	0	; select bank0
  9416  1E9C  160E               	bsf	14,4	;volatile
  9417  1E9D  0008               	return
  9418  1E9E                     __end_of_CC2500_WriteREG:	
  9419                           
  9420                           	psect	text45
  9421  19DA                     __ptext45:	
  9422 ;; *************** function _CC2500_FrequencyCabr *****************
  9423 ;; Defined at:
  9424 ;;		line 208 in file "../src/CC2500_B1.c"
  9425 ;; Parameters:    Size  Location     Type
  9426 ;;		None
  9427 ;; Auto vars:     Size  Location     Type
  9428 ;;		None
  9429 ;; Return value:  Size  Location     Type
  9430 ;;		None               void
  9431 ;; Registers used:
  9432 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9433 ;; Tracked objects:
  9434 ;;		On entry : 0/0
  9435 ;;		On exit  : 0/0
  9436 ;;		Unchanged: 0/0
  9437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9438 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9439 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9441 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9442 ;;Total ram usage:        0 bytes
  9443 ;; Hardware stack levels used:    1
  9444 ;; Hardware stack levels required when called:    7
  9445 ;; This function calls:
  9446 ;;		_CC2500_WriteCommand
  9447 ;;		_DelayTime_1us
  9448 ;; This function is called by:
  9449 ;;		_CC2500_PowerOnInitial
  9450 ;; This function uses a non-reentrant model
  9451 ;;
  9452                           
  9453                           
  9454                           ;psect for function _CC2500_FrequencyCabr
  9455  19DA                     _CC2500_FrequencyCabr:	
  9456                           
  9457                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9458                           
  9459                           ;incstack = 0
  9460                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9461  19DA  3033               	movlw	51
  9462  19DB  319C  2473  3199   	fcall	_CC2500_WriteCommand
  9463                           
  9464                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9465  19DE  30E8               	movlw	232
  9466  19DF  0020               	movlb	0	; select bank0
  9467  19E0  00A0               	movwf	DelayTime_1us@count
  9468  19E1  3003               	movlw	3
  9469  19E2  00A1               	movwf	DelayTime_1us@count+1
  9470  19E3  3190  2001         	fcall	_DelayTime_1us
  9471  19E5  0008               	return
  9472  19E6                     __end_of_CC2500_FrequencyCabr:	
  9473                           
  9474                           	psect	text46
  9475  1001                     __ptext46:	
  9476 ;; *************** function _DelayTime_1us *****************
  9477 ;; Defined at:
  9478 ;;		line 327 in file "../src/CC2500_B1.c"
  9479 ;; Parameters:    Size  Location     Type
  9480 ;;  count           2    0[BANK0 ] int 
  9481 ;; Auto vars:     Size  Location     Type
  9482 ;;  j               2    4[BANK0 ] unsigned int 
  9483 ;;  i               2    2[BANK0 ] unsigned int 
  9484 ;; Return value:  Size  Location     Type
  9485 ;;		None               void
  9486 ;; Registers used:
  9487 ;;		wreg, status,2
  9488 ;; Tracked objects:
  9489 ;;		On entry : 0/0
  9490 ;;		On exit  : 0/0
  9491 ;;		Unchanged: 0/0
  9492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9493 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9494 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9496 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9497 ;;Total ram usage:        6 bytes
  9498 ;; Hardware stack levels used:    1
  9499 ;; Hardware stack levels required when called:    5
  9500 ;; This function calls:
  9501 ;;		Nothing
  9502 ;; This function is called by:
  9503 ;;		_CC2500_PowerRST
  9504 ;;		_CC2500_FrequencyCabr
  9505 ;; This function uses a non-reentrant model
  9506 ;;
  9507                           
  9508                           
  9509                           ;psect for function _DelayTime_1us
  9510  1001                     _DelayTime_1us:	
  9511                           
  9512                           ;CC2500_B1.c: 328: unsigned int i, j;
  9513                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9514                           
  9515                           ;incstack = 0
  9516                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9517  1001  3001               	movlw	1
  9518  1002  0020               	movlb	0	; select bank0
  9519  1003  00A2               	movwf	DelayTime_1us@i
  9520  1004  3000               	movlw	0
  9521  1005  00A3               	movwf	DelayTime_1us@i+1
  9522  1006                     l371:	
  9523  1006  0821               	movf	DelayTime_1us@count+1,w
  9524  1007  0223               	subwf	DelayTime_1us@i+1,w
  9525  1008  1D03               	skipz
  9526  1009  280C               	goto	u6325
  9527  100A  0820               	movf	DelayTime_1us@count,w
  9528  100B  0222               	subwf	DelayTime_1us@i,w
  9529  100C                     u6325:	
  9530  100C  1803               	btfsc	3,0
  9531  100D  0008               	return
  9532                           
  9533                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9534  100E  01A4               	clrf	DelayTime_1us@j
  9535  100F  01A5               	clrf	DelayTime_1us@j+1
  9536  1010  3000               	movlw	0
  9537  1011  0225               	subwf	DelayTime_1us@j+1,w
  9538  1012  3002               	movlw	2
  9539  1013  1903               	skipnz
  9540  1014  0224               	subwf	DelayTime_1us@j,w
  9541  1015  1803               	btfsc	3,0
  9542  1016  2822               	goto	l6937
  9543  1017                     l6935:	
  9544  1017  3001               	movlw	1
  9545  1018  07A4               	addwf	DelayTime_1us@j,f
  9546  1019  3000               	movlw	0
  9547  101A  3DA5               	addwfc	DelayTime_1us@j+1,f
  9548  101B  3000               	movlw	0
  9549  101C  0225               	subwf	DelayTime_1us@j+1,w
  9550  101D  3002               	movlw	2
  9551  101E  1903               	skipnz
  9552  101F  0224               	subwf	DelayTime_1us@j,w
  9553  1020  1C03               	skipc
  9554  1021  2817               	goto	l6935
  9555  1022                     l6937:	
  9556  1022  3001               	movlw	1
  9557  1023  07A2               	addwf	DelayTime_1us@i,f
  9558  1024  3000               	movlw	0
  9559  1025  3DA3               	addwfc	DelayTime_1us@i+1,f
  9560  1026  2806               	goto	l371
  9561  1027                     __end_of_DelayTime_1us:	
  9562                           
  9563                           	psect	text47
  9564  18DE                     __ptext47:	
  9565 ;; *************** function _CC2500_ClearTXFIFO *****************
  9566 ;; Defined at:
  9567 ;;		line 194 in file "../src/CC2500_B1.c"
  9568 ;; Parameters:    Size  Location     Type
  9569 ;;		None
  9570 ;; Auto vars:     Size  Location     Type
  9571 ;;		None
  9572 ;; Return value:  Size  Location     Type
  9573 ;;		None               void
  9574 ;; Registers used:
  9575 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9576 ;; Tracked objects:
  9577 ;;		On entry : 0/0
  9578 ;;		On exit  : 0/0
  9579 ;;		Unchanged: 0/0
  9580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9582 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9584 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9585 ;;Total ram usage:        0 bytes
  9586 ;; Hardware stack levels used:    1
  9587 ;; Hardware stack levels required when called:    7
  9588 ;; This function calls:
  9589 ;;		_CC2500_WriteCommand
  9590 ;; This function is called by:
  9591 ;;		_CC2500_PowerOnInitial
  9592 ;; This function uses a non-reentrant model
  9593 ;;
  9594                           
  9595                           
  9596                           ;psect for function _CC2500_ClearTXFIFO
  9597  18DE                     _CC2500_ClearTXFIFO:	
  9598                           
  9599                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
  9600                           
  9601                           ;incstack = 0
  9602                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9603  18DE  303B               	movlw	59
  9604  18DF  319C  2473         	fcall	_CC2500_WriteCommand
  9605  18E1  0008               	return
  9606  18E2                     __end_of_CC2500_ClearTXFIFO:	
  9607                           
  9608                           	psect	text48
  9609  18DA                     __ptext48:	
  9610 ;; *************** function _CC2500_ClearRXFIFO *****************
  9611 ;; Defined at:
  9612 ;;		line 201 in file "../src/CC2500_B1.c"
  9613 ;; Parameters:    Size  Location     Type
  9614 ;;		None
  9615 ;; Auto vars:     Size  Location     Type
  9616 ;;		None
  9617 ;; Return value:  Size  Location     Type
  9618 ;;		None               void
  9619 ;; Registers used:
  9620 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9621 ;; Tracked objects:
  9622 ;;		On entry : 0/0
  9623 ;;		On exit  : 0/0
  9624 ;;		Unchanged: 0/0
  9625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9629 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9630 ;;Total ram usage:        0 bytes
  9631 ;; Hardware stack levels used:    1
  9632 ;; Hardware stack levels required when called:    7
  9633 ;; This function calls:
  9634 ;;		_CC2500_WriteCommand
  9635 ;; This function is called by:
  9636 ;;		_CC2500_PowerOnInitial
  9637 ;; This function uses a non-reentrant model
  9638 ;;
  9639                           
  9640                           
  9641                           ;psect for function _CC2500_ClearRXFIFO
  9642  18DA                     _CC2500_ClearRXFIFO:	
  9643                           
  9644                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
  9645                           
  9646                           ;incstack = 0
  9647                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9648  18DA  303A               	movlw	58
  9649  18DB  319C  2473         	fcall	_CC2500_WriteCommand
  9650  18DD  0008               	return
  9651  18DE                     __end_of_CC2500_ClearRXFIFO:	
  9652                           
  9653                           	psect	text49
  9654  1C73                     __ptext49:	
  9655 ;; *************** function _CC2500_WriteCommand *****************
  9656 ;; Defined at:
  9657 ;;		line 292 in file "../src/CC2500_B1.c"
  9658 ;; Parameters:    Size  Location     Type
  9659 ;;  command         1    wreg     unsigned char 
  9660 ;; Auto vars:     Size  Location     Type
  9661 ;;  command         1    3[BANK0 ] unsigned char 
  9662 ;; Return value:  Size  Location     Type
  9663 ;;		None               void
  9664 ;; Registers used:
  9665 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9666 ;; Tracked objects:
  9667 ;;		On entry : 0/0
  9668 ;;		On exit  : 0/0
  9669 ;;		Unchanged: 0/0
  9670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9671 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9672 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9673 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9674 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9675 ;;Total ram usage:        2 bytes
  9676 ;; Hardware stack levels used:    1
  9677 ;; Hardware stack levels required when called:    6
  9678 ;; This function calls:
  9679 ;;		_CC2500_WriteByte
  9680 ;;		_RF_Timeout_Counter
  9681 ;;		_setRF_TimeoutCleared
  9682 ;; This function is called by:
  9683 ;;		_CC2500_TxData
  9684 ;;		_CC2500_RxData
  9685 ;;		_CC2500_ClearTXFIFO
  9686 ;;		_CC2500_ClearRXFIFO
  9687 ;;		_CC2500_FrequencyCabr
  9688 ;;		_CC2500_SIDLEMode
  9689 ;;		_setRF_Main
  9690 ;;		_RF_RxDisable
  9691 ;; This function uses a non-reentrant model
  9692 ;;
  9693                           
  9694                           
  9695                           ;psect for function _CC2500_WriteCommand
  9696  1C73                     _CC2500_WriteCommand:	
  9697                           
  9698                           ;incstack = 0
  9699                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9700                           ;CC2500_WriteCommand@command stored from wreg
  9701  1C73  0020               	movlb	0	; select bank0
  9702  1C74  00A3               	movwf	CC2500_WriteCommand@command
  9703                           
  9704                           ;CC2500_B1.c: 293: RC4 = 0;
  9705  1C75  120E               	bcf	14,4	;volatile
  9706                           
  9707                           ;CC2500_B1.c: 294: SPI0Buffer = command;
  9708  1C76  0823               	movf	CC2500_WriteCommand@command,w
  9709  1C77  00A2               	movwf	??_CC2500_WriteCommand
  9710  1C78  0822               	movf	??_CC2500_WriteCommand,w
  9711  1C79  0021               	movlb	1	; select bank1
  9712  1C7A  00D8               	movwf	_SPI0Buffer^(0+128)
  9713                           
  9714                           ;CC2500_B1.c: 296: while (RC2 == 1 && RF1.Timeout == 0) {
  9715  1C7B  2C7F               	goto	l6899
  9716  1C7C                     l6897:	
  9717                           
  9718                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
  9719  1C7C  319B  234A  319C   	fcall	_RF_Timeout_Counter
  9720  1C7F                     l6899:	
  9721  1C7F  0020               	movlb	0	; select bank0
  9722  1C80  1D0E               	btfss	14,2	;volatile
  9723  1C81  2C85               	goto	l6903
  9724  1C82  0021               	movlb	1	; select bank1
  9725  1C83  1F21               	btfss	(_RF1^(0+128)+1),6
  9726  1C84  2C7C               	goto	l6897
  9727  1C85                     l6903:	
  9728                           
  9729                           ;CC2500_B1.c: 298: };
  9730                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
  9731  1C85  3198  20D6  319C   	fcall	_setRF_TimeoutCleared
  9732                           
  9733                           ;CC2500_B1.c: 301: CC2500_WriteByte();
  9734  1C88  319C  2440         	fcall	_CC2500_WriteByte
  9735                           
  9736                           ;CC2500_B1.c: 302: RC4 = 1;
  9737  1C8A  0020               	movlb	0	; select bank0
  9738  1C8B  160E               	bsf	14,4	;volatile
  9739  1C8C  0008               	return
  9740  1C8D                     __end_of_CC2500_WriteCommand:	
  9741                           
  9742                           	psect	text50
  9743  18D6                     __ptext50:	
  9744 ;; *************** function _setRF_TimeoutCleared *****************
  9745 ;; Defined at:
  9746 ;;		line 149 in file "../src/RF_Control_B1.c"
  9747 ;; Parameters:    Size  Location     Type
  9748 ;;		None
  9749 ;; Auto vars:     Size  Location     Type
  9750 ;;		None
  9751 ;; Return value:  Size  Location     Type
  9752 ;;		None               void
  9753 ;; Registers used:
  9754 ;;		status,2
  9755 ;; Tracked objects:
  9756 ;;		On entry : 0/0
  9757 ;;		On exit  : 0/0
  9758 ;;		Unchanged: 0/0
  9759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9763 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9764 ;;Total ram usage:        0 bytes
  9765 ;; Hardware stack levels used:    1
  9766 ;; Hardware stack levels required when called:    5
  9767 ;; This function calls:
  9768 ;;		Nothing
  9769 ;; This function is called by:
  9770 ;;		_CC2500_TxData
  9771 ;;		_CC2500_RxData
  9772 ;;		_CC2500_PowerRST
  9773 ;;		_CC2500_WriteREG
  9774 ;;		_CC2500_WriteCommand
  9775 ;;		_CC2500_ReadStatus
  9776 ;;		_CC2500_ReadREG
  9777 ;; This function uses a non-reentrant model
  9778 ;;
  9779                           
  9780                           
  9781                           ;psect for function _setRF_TimeoutCleared
  9782  18D6                     _setRF_TimeoutCleared:	
  9783                           
  9784                           ;RF_Control_B1.c: 150: RF1.TimeoutCount = 0;
  9785                           
  9786                           ;incstack = 0
  9787                           ; Regs used in _setRF_TimeoutCleared: [status,2]
  9788  18D6  0021               	movlb	1	; select bank1
  9789  18D7  01AC               	clrf	(_RF1^(0+128)+12)
  9790  18D8  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9791  18D9  0008               	return
  9792  18DA                     __end_of_setRF_TimeoutCleared:	
  9793                           
  9794                           	psect	text51
  9795  1B4A                     __ptext51:	
  9796 ;; *************** function _RF_Timeout_Counter *****************
  9797 ;; Defined at:
  9798 ;;		line 141 in file "../src/RF_Control_B1.c"
  9799 ;; Parameters:    Size  Location     Type
  9800 ;;		None
  9801 ;; Auto vars:     Size  Location     Type
  9802 ;;		None
  9803 ;; Return value:  Size  Location     Type
  9804 ;;		None               void
  9805 ;; Registers used:
  9806 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9807 ;; Tracked objects:
  9808 ;;		On entry : 0/0
  9809 ;;		On exit  : 0/0
  9810 ;;		Unchanged: 0/0
  9811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9813 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9815 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9816 ;;Total ram usage:        0 bytes
  9817 ;; Hardware stack levels used:    1
  9818 ;; Hardware stack levels required when called:    5
  9819 ;; This function calls:
  9820 ;;		Nothing
  9821 ;; This function is called by:
  9822 ;;		_CC2500_TxData
  9823 ;;		_CC2500_RxData
  9824 ;;		_CC2500_PowerRST
  9825 ;;		_CC2500_WriteREG
  9826 ;;		_CC2500_WriteCommand
  9827 ;;		_CC2500_ReadStatus
  9828 ;;		_CC2500_ReadREG
  9829 ;; This function uses a non-reentrant model
  9830 ;;
  9831                           
  9832                           
  9833                           ;psect for function _RF_Timeout_Counter
  9834  1B4A                     _RF_Timeout_Counter:	
  9835                           
  9836                           ;RF_Control_B1.c: 142: RF1.TimeoutCount++;
  9837                           
  9838                           ;incstack = 0
  9839                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  9840  1B4A  3001               	movlw	1
  9841  1B4B  0021               	movlb	1	; select bank1
  9842  1B4C  07AC               	addwf	(_RF1^(0+128)+12),f
  9843  1B4D  3000               	movlw	0
  9844  1B4E  3DAD               	addwfc	((_RF1+1)^(0+128)+12),f
  9845                           
  9846                           ;RF_Control_B1.c: 143: if (RF1.TimeoutCount == 25000) {
  9847  1B4F  300C               	movlw	12
  9848  1B50  3EA0               	addlw	_RF1& (0+255)
  9849  1B51  0086               	movwf	6
  9850  1B52  0187               	clrf	7
  9851  1B53  3F40               	moviw [0]fsr1
  9852  1B54  3AA8               	xorlw	168
  9853  1B55  1D03               	skipz
  9854  1B56  2B59               	goto	u5965
  9855  1B57  3F41               	moviw [1]fsr1
  9856  1B58  3A61               	xorlw	97
  9857  1B59                     u5965:	
  9858  1B59  1D03               	skipz
  9859  1B5A  0008               	return
  9860                           
  9861                           ;RF_Control_B1.c: 144: RF1.TimeoutCount = 0;
  9862  1B5B  01AC               	clrf	(_RF1^(0+128)+12)
  9863  1B5C  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9864                           
  9865                           ;RF_Control_B1.c: 145: RF1.Timeout = 1;
  9866  1B5D  1721               	bsf	(_RF1^(0+128)+1),6
  9867  1B5E  0008               	return
  9868  1B5F                     __end_of_RF_Timeout_Counter:	
  9869                           
  9870                           	psect	text52
  9871  1C40                     __ptext52:	
  9872 ;; *************** function _CC2500_WriteByte *****************
  9873 ;; Defined at:
  9874 ;;		line 226 in file "../src/CC2500_B1.c"
  9875 ;; Parameters:    Size  Location     Type
  9876 ;;		None
  9877 ;; Auto vars:     Size  Location     Type
  9878 ;;  loop_a          1    1[BANK0 ] unsigned char 
  9879 ;; Return value:  Size  Location     Type
  9880 ;;		None               void
  9881 ;; Registers used:
  9882 ;;		wreg, status,2, status,0
  9883 ;; Tracked objects:
  9884 ;;		On entry : 0/0
  9885 ;;		On exit  : 0/0
  9886 ;;		Unchanged: 0/0
  9887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9888 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9889 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9890 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9891 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9892 ;;Total ram usage:        2 bytes
  9893 ;; Hardware stack levels used:    1
  9894 ;; Hardware stack levels required when called:    5
  9895 ;; This function calls:
  9896 ;;		Nothing
  9897 ;; This function is called by:
  9898 ;;		_CC2500_TxData
  9899 ;;		_CC2500_RxData
  9900 ;;		_CC2500_PowerRST
  9901 ;;		_CC2500_WriteREG
  9902 ;;		_CC2500_WriteCommand
  9903 ;;		_CC2500_ReadStatus
  9904 ;;		_CC2500_ReadREG
  9905 ;; This function uses a non-reentrant model
  9906 ;;
  9907                           
  9908                           
  9909                           ;psect for function _CC2500_WriteByte
  9910  1C40                     _CC2500_WriteByte:	
  9911                           
  9912                           ;CC2500_B1.c: 227: unsigned char loop_a;
  9913                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
  9914                           
  9915                           ;incstack = 0
  9916                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
  9917  1C40  0020               	movlb	0	; select bank0
  9918  1C41  01A1               	clrf	CC2500_WriteByte@loop_a
  9919  1C42                     L6:	
  9920  1C42  3008               	movlw	8
  9921  1C43  0221               	subwf	CC2500_WriteByte@loop_a,w
  9922  1C44  1803               	btfsc	3,0
  9923  1C45  0008               	return
  9924                           
  9925                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
  9926  1C46  0021               	movlb	1	; select bank1
  9927  1C47  1FD8               	btfss	_SPI0Buffer^(0+128),7
  9928  1C48  2C4C               	goto	l327
  9929                           
  9930                           ;CC2500_B1.c: 230: RC0 = 1;
  9931  1C49  0020               	movlb	0	; select bank0
  9932  1C4A  140E               	bsf	14,0	;volatile
  9933  1C4B  2C4E               	goto	l328
  9934  1C4C                     l327:	
  9935                           
  9936                           ;CC2500_B1.c: 231: else
  9937                           ;CC2500_B1.c: 232: RC0 = 0;
  9938  1C4C  0020               	movlb	0	; select bank0
  9939  1C4D  100E               	bcf	14,0	;volatile
  9940  1C4E                     l328:	
  9941                           
  9942                           ;CC2500_B1.c: 233: RC1 = 1;
  9943  1C4E  148E               	bsf	14,1	;volatile
  9944                           
  9945                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
  9946  1C4F  1003               	clrc
  9947  1C50  0021               	movlb	1	; select bank1
  9948  1C51  0DD8               	rlf	_SPI0Buffer^(0+128),f
  9949                           
  9950                           ;CC2500_B1.c: 235: RC1 = 0;
  9951  1C52  0020               	movlb	0	; select bank0
  9952  1C53  108E               	bcf	14,1	;volatile
  9953  1C54  3001               	movlw	1
  9954  1C55  00A0               	movwf	??_CC2500_WriteByte
  9955  1C56  0820               	movf	??_CC2500_WriteByte,w
  9956  1C57  07A1               	addwf	CC2500_WriteByte@loop_a,f
  9957  1C58  2C42               	goto	L6
  9958  1C59                     __end_of_CC2500_WriteByte:	
  9959                           
  9960                           	psect	text53
  9961  18C6                     __ptext53:	
  9962 ;; *************** function _RF_Initialization *****************
  9963 ;; Defined at:
  9964 ;;		line 9 in file "../src/RF_Control_B1.c"
  9965 ;; Parameters:    Size  Location     Type
  9966 ;;		None
  9967 ;; Auto vars:     Size  Location     Type
  9968 ;;		None
  9969 ;; Return value:  Size  Location     Type
  9970 ;;		None               void
  9971 ;; Registers used:
  9972 ;;		wreg, status,2, status,0, pclath, cstack
  9973 ;; Tracked objects:
  9974 ;;		On entry : 0/0
  9975 ;;		On exit  : 0/0
  9976 ;;		Unchanged: 0/0
  9977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9978 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9981 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9982 ;;Total ram usage:        0 bytes
  9983 ;; Hardware stack levels used:    1
  9984 ;; Hardware stack levels required when called:    6
  9985 ;; This function calls:
  9986 ;;		_setRF_Initialization
  9987 ;; This function is called by:
  9988 ;;		_main
  9989 ;; This function uses a non-reentrant model
  9990 ;;
  9991                           
  9992                           
  9993                           ;psect for function _RF_Initialization
  9994  18C6                     _RF_Initialization:	
  9995                           
  9996                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9997                           
  9998                           ;incstack = 0
  9999                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10000  18C6  3199  2164         	fcall	_setRF_Initialization
 10001  18C8  0008               	return
 10002  18C9                     __end_of_RF_Initialization:	
 10003                           
 10004                           	psect	text54
 10005  1964                     __ptext54:	
 10006 ;; *************** function _setRF_Initialization *****************
 10007 ;; Defined at:
 10008 ;;		line 17 in file "../src/RF_Control_B1.c"
 10009 ;; Parameters:    Size  Location     Type
 10010 ;;		None
 10011 ;; Auto vars:     Size  Location     Type
 10012 ;;		None
 10013 ;; Return value:  Size  Location     Type
 10014 ;;		None               void
 10015 ;; Registers used:
 10016 ;;		wreg
 10017 ;; Tracked objects:
 10018 ;;		On entry : 0/0
 10019 ;;		On exit  : 0/0
 10020 ;;		Unchanged: 0/0
 10021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10023 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10024 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10025 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10026 ;;Total ram usage:        1 bytes
 10027 ;; Hardware stack levels used:    1
 10028 ;; Hardware stack levels required when called:    5
 10029 ;; This function calls:
 10030 ;;		Nothing
 10031 ;; This function is called by:
 10032 ;;		_RF_Initialization
 10033 ;; This function uses a non-reentrant model
 10034 ;;
 10035                           
 10036                           
 10037                           ;psect for function _setRF_Initialization
 10038  1964                     _setRF_Initialization:	
 10039                           
 10040                           ;RF_Control_B1.c: 19: Tx_Length = 21;
 10041                           
 10042                           ;incstack = 0
 10043                           ; Regs used in _setRF_Initialization: [wreg]
 10044  1964  3015               	movlw	21
 10045  1965  0020               	movlb	0	; select bank0
 10046  1966  00A0               	movwf	??_setRF_Initialization
 10047  1967  0820               	movf	??_setRF_Initialization,w
 10048  1968  0021               	movlb	1	; select bank1
 10049  1969  00DA               	movwf	_Tx_Length^(0+128)
 10050                           
 10051                           ;RF_Control_B1.c: 20: RF1.RunTime = 200;
 10052  196A  30C8               	movlw	200
 10053  196B  00A7               	movwf	(_RF1^(0+128)+7)
 10054  196C  3000               	movlw	0
 10055  196D  00A8               	movwf	(_RF1^(0+128)+8)
 10056  196E  0008               	return
 10057  196F                     __end_of_setRF_Initialization:	
 10058                           
 10059                           	psect	text55
 10060  1A9F                     __ptext55:	
 10061 ;; *************** function _Mcu_Initialization *****************
 10062 ;; Defined at:
 10063 ;;		line 30 in file "../src/MCU_B1.c"
 10064 ;; Parameters:    Size  Location     Type
 10065 ;;		None
 10066 ;; Auto vars:     Size  Location     Type
 10067 ;;		None
 10068 ;; Return value:  Size  Location     Type
 10069 ;;		None               void
 10070 ;; Registers used:
 10071 ;;		wreg, status,2, status,0, pclath, cstack
 10072 ;; Tracked objects:
 10073 ;;		On entry : 0/0
 10074 ;;		On exit  : 0/0
 10075 ;;		Unchanged: 0/0
 10076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10080 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10081 ;;Total ram usage:        0 bytes
 10082 ;; Hardware stack levels used:    1
 10083 ;; Hardware stack levels required when called:    6
 10084 ;; This function calls:
 10085 ;;		_ADC_Set
 10086 ;;		_Fosc_Set
 10087 ;;		_IOC_Set
 10088 ;;		_IO_Set
 10089 ;;		_TMR1_Set
 10090 ;;		_WDT_Set
 10091 ;; This function is called by:
 10092 ;;		_main
 10093 ;; This function uses a non-reentrant model
 10094 ;;
 10095                           
 10096                           
 10097                           ;psect for function _Mcu_Initialization
 10098  1A9F                     _Mcu_Initialization:	
 10099                           
 10100                           ;MCU_B1.c: 32: Fosc_Set();
 10101                           
 10102                           ;incstack = 0
 10103                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10104  1A9F  3198  20D2  319A   	fcall	_Fosc_Set
 10105                           
 10106                           ;MCU_B1.c: 34: IO_Set();
 10107  1AA2  319C  248D  319A   	fcall	_IO_Set
 10108                           
 10109                           ;MCU_B1.c: 36: ;;
 10110                           ;MCU_B1.c: 38: TMR1_Set();
 10111  1AA5  3199  21C2  319A   	fcall	_TMR1_Set
 10112                           
 10113                           ;MCU_B1.c: 40: ADC_Set();
 10114  1AA8  3198  20FD  319A   	fcall	_ADC_Set
 10115                           
 10116                           ;MCU_B1.c: 42: ;;
 10117                           ;MCU_B1.c: 44: ;;
 10118                           ;MCU_B1.c: 46: IOC_Set();
 10119  1AAB  3199  2159  319A   	fcall	_IOC_Set
 10120                           
 10121                           ;MCU_B1.c: 48: ;;
 10122                           ;MCU_B1.c: 50: ;;
 10123                           ;MCU_B1.c: 52: WDT_Set();
 10124  1AAE  3199  21CE         	fcall	_WDT_Set
 10125  1AB0  0008               	return
 10126  1AB1                     __end_of_Mcu_Initialization:	
 10127                           
 10128                           	psect	text56
 10129  19CE                     __ptext56:	
 10130 ;; *************** function _WDT_Set *****************
 10131 ;; Defined at:
 10132 ;;		line 1102 in file "../src/MCU_B1.c"
 10133 ;; Parameters:    Size  Location     Type
 10134 ;;		None
 10135 ;; Auto vars:     Size  Location     Type
 10136 ;;		None
 10137 ;; Return value:  Size  Location     Type
 10138 ;;		None               void
 10139 ;; Registers used:
 10140 ;;		wreg
 10141 ;; Tracked objects:
 10142 ;;		On entry : 0/0
 10143 ;;		On exit  : 0/0
 10144 ;;		Unchanged: 0/0
 10145 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10146 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10147 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10148 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10149 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10150 ;;Total ram usage:        1 bytes
 10151 ;; Hardware stack levels used:    1
 10152 ;; Hardware stack levels required when called:    5
 10153 ;; This function calls:
 10154 ;;		Nothing
 10155 ;; This function is called by:
 10156 ;;		_Mcu_Initialization
 10157 ;; This function uses a non-reentrant model
 10158 ;;
 10159                           
 10160                           
 10161                           ;psect for function _WDT_Set
 10162  19CE                     _WDT_Set:	
 10163                           
 10164                           ;MCU_B1.c: 1109: WDTCON = 0b00010111;;
 10165                           
 10166                           ;incstack = 0
 10167                           ; Regs used in _WDT_Set: [wreg]
 10168  19CE  3017               	movlw	23
 10169  19CF  0021               	movlb	1	; select bank1
 10170  19D0  0097               	movwf	23	;volatile
 10171                           
 10172                           ;MCU_B1.c: 1111: WDT.Enable = 1;
 10173  19D1  0022               	movlb	2	; select bank2
 10174  19D2  1436               	bsf	_WDT^(0+256),0
 10175                           
 10176                           ;MCU_B1.c: 1112: WDT.Timer = 10;
 10177  19D3  300A               	movlw	10
 10178  19D4  0020               	movlb	0	; select bank0
 10179  19D5  00A0               	movwf	??_WDT_Set
 10180  19D6  0820               	movf	??_WDT_Set,w
 10181  19D7  0022               	movlb	2	; select bank2
 10182  19D8  00B7               	movwf	(_WDT^(0+256)+1)
 10183  19D9  0008               	return
 10184  19DA                     __end_of_WDT_Set:	
 10185                           
 10186                           	psect	text57
 10187  19C2                     __ptext57:	
 10188 ;; *************** function _TMR1_Set *****************
 10189 ;; Defined at:
 10190 ;;		line 226 in file "../src/MCU_B1.c"
 10191 ;; Parameters:    Size  Location     Type
 10192 ;;		None
 10193 ;; Auto vars:     Size  Location     Type
 10194 ;;		None
 10195 ;; Return value:  Size  Location     Type
 10196 ;;		None               void
 10197 ;; Registers used:
 10198 ;;		wreg
 10199 ;; Tracked objects:
 10200 ;;		On entry : 0/0
 10201 ;;		On exit  : 0/0
 10202 ;;		Unchanged: 0/0
 10203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10204 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10205 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10206 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10207 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10208 ;;Total ram usage:        0 bytes
 10209 ;; Hardware stack levels used:    1
 10210 ;; Hardware stack levels required when called:    5
 10211 ;; This function calls:
 10212 ;;		Nothing
 10213 ;; This function is called by:
 10214 ;;		_Mcu_Initialization
 10215 ;; This function uses a non-reentrant model
 10216 ;;
 10217                           
 10218                           
 10219                           ;psect for function _TMR1_Set
 10220  19C2                     _TMR1_Set:	
 10221                           
 10222                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
 10223                           
 10224                           ;incstack = 0
 10225                           ; Regs used in _TMR1_Set: [wreg]
 10226  19C2  3041               	movlw	65
 10227  19C3  0020               	movlb	0	; select bank0
 10228  19C4  0098               	movwf	24	;volatile
 10229                           
 10230                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
 10231  19C5  30FA               	movlw	250
 10232  19C6  0097               	movwf	23	;volatile
 10233                           
 10234                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
 10235  19C7  3038               	movlw	56
 10236  19C8  0096               	movwf	22	;volatile
 10237                           
 10238                           ;MCU_B1.c: 230: TMR1IE = 1;
 10239  19C9  0021               	movlb	1	; select bank1
 10240  19CA  1411               	bsf	17,0	;volatile
 10241                           
 10242                           ;MCU_B1.c: 231: PEIE = 1;
 10243  19CB  170B               	bsf	11,6	;volatile
 10244                           
 10245                           ;MCU_B1.c: 232: GIE = 1;
 10246  19CC  178B               	bsf	11,7	;volatile
 10247  19CD  0008               	return
 10248  19CE                     __end_of_TMR1_Set:	
 10249                           
 10250                           	psect	text58
 10251  1C8D                     __ptext58:	
 10252 ;; *************** function _IO_Set *****************
 10253 ;; Defined at:
 10254 ;;		line 60 in file "../src/MCU_B1.c"
 10255 ;; Parameters:    Size  Location     Type
 10256 ;;		None
 10257 ;; Auto vars:     Size  Location     Type
 10258 ;;		None
 10259 ;; Return value:  Size  Location     Type
 10260 ;;		None               void
 10261 ;; Registers used:
 10262 ;;		wreg, status,2
 10263 ;; Tracked objects:
 10264 ;;		On entry : 0/0
 10265 ;;		On exit  : 0/0
 10266 ;;		Unchanged: 0/0
 10267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10268 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10269 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10270 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10271 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10272 ;;Total ram usage:        0 bytes
 10273 ;; Hardware stack levels used:    1
 10274 ;; Hardware stack levels required when called:    5
 10275 ;; This function calls:
 10276 ;;		Nothing
 10277 ;; This function is called by:
 10278 ;;		_Mcu_Initialization
 10279 ;; This function uses a non-reentrant model
 10280 ;;
 10281                           
 10282                           
 10283                           ;psect for function _IO_Set
 10284  1C8D                     _IO_Set:	
 10285                           
 10286                           ;MCU_B1.c: 92: TRISA = 0b01110111;;
 10287                           
 10288                           ;incstack = 0
 10289                           ; Regs used in _IO_Set: [wreg+status,2]
 10290  1C8D  3077               	movlw	119
 10291  1C8E  0021               	movlb	1	; select bank1
 10292  1C8F  008C               	movwf	12	;volatile
 10293                           
 10294                           ;MCU_B1.c: 93: TRISB = 0b00000111;;
 10295  1C90  3007               	movlw	7
 10296  1C91  008D               	movwf	13	;volatile
 10297                           
 10298                           ;MCU_B1.c: 94: TRISC = 0b00001100;;
 10299  1C92  300C               	movlw	12
 10300  1C93  008E               	movwf	14	;volatile
 10301                           
 10302                           ;MCU_B1.c: 96: LATA = 0b00000000;;
 10303  1C94  0022               	movlb	2	; select bank2
 10304  1C95  018C               	clrf	12	;volatile
 10305                           
 10306                           ;MCU_B1.c: 97: LATB = 0b00000010;;
 10307  1C96  3002               	movlw	2
 10308  1C97  008D               	movwf	13	;volatile
 10309                           
 10310                           ;MCU_B1.c: 98: LATC = 0b00000000;;
 10311  1C98  018E               	clrf	14	;volatile
 10312                           
 10313                           ;MCU_B1.c: 100: ANSELA = 0b00100010;;
 10314  1C99  3022               	movlw	34
 10315  1C9A  0023               	movlb	3	; select bank3
 10316  1C9B  008C               	movwf	12	;volatile
 10317                           
 10318                           ;MCU_B1.c: 101: ANSELB = 0b00000000;;
 10319  1C9C  018D               	clrf	13	;volatile
 10320                           
 10321                           ;MCU_B1.c: 102: ANSELC = 0b00000000;;
 10322  1C9D  018E               	clrf	14	;volatile
 10323                           
 10324                           ;MCU_B1.c: 104: PORTA = 0b01110111;;
 10325  1C9E  3077               	movlw	119
 10326  1C9F  0020               	movlb	0	; select bank0
 10327  1CA0  008C               	movwf	12	;volatile
 10328                           
 10329                           ;MCU_B1.c: 105: PORTB = 0b00000111;;
 10330  1CA1  3007               	movlw	7
 10331  1CA2  008D               	movwf	13	;volatile
 10332                           
 10333                           ;MCU_B1.c: 106: PORTC = 0b00001100;;
 10334  1CA3  300C               	movlw	12
 10335  1CA4  008E               	movwf	14	;volatile
 10336                           
 10337                           ;MCU_B1.c: 108: WPUB = 0b00000000;;
 10338  1CA5  0024               	movlb	4	; select bank4
 10339  1CA6  018D               	clrf	13	;volatile
 10340  1CA7  0008               	return
 10341  1CA8                     __end_of_IO_Set:	
 10342                           
 10343                           	psect	text59
 10344  1959                     __ptext59:	
 10345 ;; *************** function _IOC_Set *****************
 10346 ;; Defined at:
 10347 ;;		line 380 in file "../src/MCU_B1.c"
 10348 ;; Parameters:    Size  Location     Type
 10349 ;;		None
 10350 ;; Auto vars:     Size  Location     Type
 10351 ;;		None
 10352 ;; Return value:  Size  Location     Type
 10353 ;;		None               void
 10354 ;; Registers used:
 10355 ;;		wreg, status,2
 10356 ;; Tracked objects:
 10357 ;;		On entry : 0/0
 10358 ;;		On exit  : 0/0
 10359 ;;		Unchanged: 0/0
 10360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10361 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10362 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10363 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10364 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10365 ;;Total ram usage:        0 bytes
 10366 ;; Hardware stack levels used:    1
 10367 ;; Hardware stack levels required when called:    5
 10368 ;; This function calls:
 10369 ;;		Nothing
 10370 ;; This function is called by:
 10371 ;;		_Mcu_Initialization
 10372 ;; This function uses a non-reentrant model
 10373 ;;
 10374                           
 10375                           
 10376                           ;psect for function _IOC_Set
 10377  1959                     _IOC_Set:	
 10378                           
 10379                           ;MCU_B1.c: 382: IOCBP = 0b00000100;;
 10380                           
 10381                           ;incstack = 0
 10382                           ; Regs used in _IOC_Set: [wreg+status,2]
 10383  1959  3004               	movlw	4
 10384  195A  0027               	movlb	7	; select bank7
 10385  195B  0094               	movwf	20	;volatile
 10386                           
 10387                           ;MCU_B1.c: 383: IOCBN = 0b00000100;;
 10388  195C  3004               	movlw	4
 10389  195D  0095               	movwf	21	;volatile
 10390                           
 10391                           ;MCU_B1.c: 385: IOCBF = 0b00000000;
 10392  195E  0196               	clrf	22	;volatile
 10393                           
 10394                           ;MCU_B1.c: 387: IOCIE = 1;
 10395  195F  158B               	bsf	11,3	;volatile
 10396                           
 10397                           ;MCU_B1.c: 388: IOCIF = 0;
 10398  1960  100B               	bcf	11,0	;volatile
 10399                           
 10400                           ;MCU_B1.c: 389: PEIE = 1;
 10401  1961  170B               	bsf	11,6	;volatile
 10402                           
 10403                           ;MCU_B1.c: 390: GIE = 1;
 10404  1962  178B               	bsf	11,7	;volatile
 10405  1963  0008               	return
 10406  1964                     __end_of_IOC_Set:	
 10407                           
 10408                           	psect	text60
 10409  18D2                     __ptext60:	
 10410 ;; *************** function _Fosc_Set *****************
 10411 ;; Defined at:
 10412 ;;		line 56 in file "../src/MCU_B1.c"
 10413 ;; Parameters:    Size  Location     Type
 10414 ;;		None
 10415 ;; Auto vars:     Size  Location     Type
 10416 ;;		None
 10417 ;; Return value:  Size  Location     Type
 10418 ;;		None               void
 10419 ;; Registers used:
 10420 ;;		wreg
 10421 ;; Tracked objects:
 10422 ;;		On entry : 0/0
 10423 ;;		On exit  : 0/0
 10424 ;;		Unchanged: 0/0
 10425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10427 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10429 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10430 ;;Total ram usage:        0 bytes
 10431 ;; Hardware stack levels used:    1
 10432 ;; Hardware stack levels required when called:    5
 10433 ;; This function calls:
 10434 ;;		Nothing
 10435 ;; This function is called by:
 10436 ;;		_Mcu_Initialization
 10437 ;; This function uses a non-reentrant model
 10438 ;;
 10439                           
 10440                           
 10441                           ;psect for function _Fosc_Set
 10442  18D2                     _Fosc_Set:	
 10443                           
 10444                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10445                           
 10446                           ;incstack = 0
 10447                           ; Regs used in _Fosc_Set: [wreg]
 10448  18D2  3078               	movlw	120
 10449  18D3  0021               	movlb	1	; select bank1
 10450  18D4  0099               	movwf	25	;volatile
 10451  18D5  0008               	return
 10452  18D6                     __end_of_Fosc_Set:	
 10453                           
 10454                           	psect	text61
 10455  18FD                     __ptext61:	
 10456 ;; *************** function _ADC_Set *****************
 10457 ;; Defined at:
 10458 ;;		line 427 in file "../src/MCU_B1.c"
 10459 ;; Parameters:    Size  Location     Type
 10460 ;;		None
 10461 ;; Auto vars:     Size  Location     Type
 10462 ;;		None
 10463 ;; Return value:  Size  Location     Type
 10464 ;;		None               void
 10465 ;; Registers used:
 10466 ;;		wreg
 10467 ;; Tracked objects:
 10468 ;;		On entry : 0/0
 10469 ;;		On exit  : 0/0
 10470 ;;		Unchanged: 0/0
 10471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10473 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10475 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10476 ;;Total ram usage:        0 bytes
 10477 ;; Hardware stack levels used:    1
 10478 ;; Hardware stack levels required when called:    5
 10479 ;; This function calls:
 10480 ;;		Nothing
 10481 ;; This function is called by:
 10482 ;;		_Mcu_Initialization
 10483 ;; This function uses a non-reentrant model
 10484 ;;
 10485                           
 10486                           
 10487                           ;psect for function _ADC_Set
 10488  18FD                     _ADC_Set:	
 10489                           
 10490                           ;MCU_B1.c: 428: ADCON1 = 0xf3;
 10491                           
 10492                           ;incstack = 0
 10493                           ; Regs used in _ADC_Set: [wreg]
 10494  18FD  30F3               	movlw	243
 10495  18FE  0021               	movlb	1	; select bank1
 10496  18FF  009E               	movwf	30	;volatile
 10497                           
 10498                           ;MCU_B1.c: 429: FVRCON = 0xc1;
 10499  1900  30C1               	movlw	193
 10500  1901  0022               	movlb	2	; select bank2
 10501  1902  0097               	movwf	23	;volatile
 10502  1903  0008               	return
 10503  1904                     __end_of_ADC_Set:	
 10504                           
 10505                           	psect	text62
 10506  0052                     __ptext62:	
 10507 ;; *************** function _Load_Main *****************
 10508 ;; Defined at:
 10509 ;;		line 39 in file "../src/OverLoad_B1.c"
 10510 ;; Parameters:    Size  Location     Type
 10511 ;;		None
 10512 ;; Auto vars:     Size  Location     Type
 10513 ;;  i               2   16[BANK0 ] int 
 10514 ;;  LightsCount     1   15[BANK0 ] unsigned char 
 10515 ;;  Load_RunStat    1   14[BANK0 ] unsigned char 
 10516 ;;  ErrorCountVa    1   13[BANK0 ] unsigned char 
 10517 ;;  error           1   12[BANK0 ] unsigned char 
 10518 ;; Return value:  Size  Location     Type
 10519 ;;		None               void
 10520 ;; Registers used:
 10521 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10522 ;; Tracked objects:
 10523 ;;		On entry : 0/0
 10524 ;;		On exit  : 0/0
 10525 ;;		Unchanged: 0/0
 10526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10528 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10529 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10530 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10531 ;;Total ram usage:       10 bytes
 10532 ;; Hardware stack levels used:    1
 10533 ;; Hardware stack levels required when called:    6
 10534 ;; This function calls:
 10535 ;;		___lwdiv
 10536 ;;		___wmul
 10537 ;;		_getAll_DimmerIntr_Dimming_Sw_RF
 10538 ;;		_getDimmer_LoadGO
 10539 ;;		_getDimmer_Load_Status
 10540 ;;		_getMain_All_Error_Status
 10541 ;;		_getMain_All_LightsStatus
 10542 ;;		_getMain_Lights_Count
 10543 ;;		_setLoad_AH_AL_Restore
 10544 ;; This function is called by:
 10545 ;;		_main
 10546 ;; This function uses a non-reentrant model
 10547 ;;
 10548                           
 10549                           
 10550                           ;psect for function _Load_Main
 10551  0052                     _Load_Main:	
 10552                           
 10553                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
 10554                           
 10555                           ;incstack = 0
 10556                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10557  0052  3000               	movlw	0
 10558  0053  319F  27CD  3180   	fcall	_getMain_All_Error_Status
 10559  0056  0020               	movlb	0	; select bank0
 10560  0057  00A8               	movwf	??_Load_Main
 10561  0058  0828               	movf	??_Load_Main,w
 10562  0059  00AC               	movwf	Load_Main@error
 10563                           
 10564                           ;OverLoad_B1.c: 41: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount=0;
 10565  005A  01AE               	clrf	Load_Main@Load_RunStatus
 10566  005B  01AD               	clrf	Load_Main@ErrorCountValue
 10567  005C  01AF               	clrf	Load_Main@LightsCount
 10568                           
 10569                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
 10570  005D  0022               	movlb	2	; select bank2
 10571  005E  1C3F               	btfss	_Load^(0+256),0
 10572  005F  29FE               	goto	l1609
 10573                           
 10574                           ;OverLoad_B1.c: 44: if (getMain_All_LightsStatus() == 0) {
 10575  0060  319A  22E9  3180   	fcall	_getMain_All_LightsStatus
 10576  0063  3800               	iorlw	0
 10577  0064  1D03               	skipz
 10578  0065  2868               	goto	l8759
 10579                           
 10580                           ;OverLoad_B1.c: 45: Load.GO = 0;
 10581  0066  0022               	movlb	2	; select bank2
 10582  0067  2889               	goto	l8777
 10583  0068                     l8759:	
 10584                           ;OverLoad_B1.c: 46: } else {
 10585                           
 10586                           
 10587                           ;OverLoad_B1.c: 49: if (error == 0 && getAll_DimmerIntr_Dimming_Sw_RF() == 0) {
 10588  0068  0020               	movlb	0	; select bank0
 10589  0069  08AC               	movf	Load_Main@error,f
 10590  006A  1D03               	skipz
 10591  006B  2886               	goto	l1612
 10592  006C  319E  2616  3180   	fcall	_getAll_DimmerIntr_Dimming_Sw_RF
 10593  006F  3800               	iorlw	0
 10594  0070  1D03               	skipz
 10595  0071  2886               	goto	l1612
 10596                           
 10597                           ;OverLoad_B1.c: 50: Load.GO = 1;
 10598  0072  0022               	movlb	2	; select bank2
 10599  0073  14BF               	bsf	_Load^(0+256),1
 10600                           
 10601                           ;OverLoad_B1.c: 52: if (getDimmer_LoadGO() == 1) {
 10602  0074  3199  211C  3180   	fcall	_getDimmer_LoadGO
 10603  0077  3A01               	xorlw	1
 10604  0078  1D03               	skipz
 10605  0079  2881               	goto	l1613
 10606                           
 10607                           ;OverLoad_B1.c: 53: if (Load.Run == 0 && Load.OK == 0) {
 10608  007A  0022               	movlb	2	; select bank2
 10609  007B  1DBF               	btfss	_Load^(0+256),3
 10610  007C  1BBF               	btfsc	_Load^(0+256),7
 10611  007D  288A               	goto	l1611
 10612                           
 10613                           ;OverLoad_B1.c: 54: Load.Run = 1;
 10614  007E  15BF               	bsf	_Load^(0+256),3
 10615                           
 10616                           ;OverLoad_B1.c: 55: Load.Count = 0;
 10617  007F  01E4               	clrf	(_Load^(0+256)+37)
 10618                           
 10619                           ;OverLoad_B1.c: 56: }
 10620                           ;OverLoad_B1.c: 57: } else {
 10621  0080  288A               	goto	l1611
 10622  0081                     l1613:	
 10623                           
 10624                           ;OverLoad_B1.c: 58: if (Load.OK == 1) {
 10625  0081  0022               	movlb	2	; select bank2
 10626  0082  1FBF               	btfss	_Load^(0+256),7
 10627  0083  288A               	goto	l1611
 10628                           
 10629                           ;OverLoad_B1.c: 59: Load.OK = 0;
 10630  0084  13BF               	bcf	_Load^(0+256),7
 10631                           
 10632                           ;OverLoad_B1.c: 60: }
 10633                           ;OverLoad_B1.c: 61: }
 10634                           ;OverLoad_B1.c: 62: } else {
 10635  0085  288A               	goto	l1611
 10636  0086                     l1612:	
 10637                           
 10638                           ;OverLoad_B1.c: 63: if (Load.GO == 1) {
 10639  0086  0022               	movlb	2	; select bank2
 10640  0087  1CBF               	btfss	_Load^(0+256),1
 10641  0088  288A               	goto	l1611
 10642  0089                     l8777:	
 10643                           
 10644                           ;OverLoad_B1.c: 64: Load.GO = 0;
 10645  0089  10BF               	bcf	_Load^(0+256),1
 10646  008A                     l1611:	
 10647                           
 10648                           ;OverLoad_B1.c: 65: }
 10649                           ;OverLoad_B1.c: 66: }
 10650                           ;OverLoad_B1.c: 88: }
 10651                           ;OverLoad_B1.c: 91: if (Load.GO == 1) {
 10652  008A  1CBF               	btfss	_Load^(0+256),1
 10653  008B  29DA               	goto	l1619
 10654                           
 10655                           ;OverLoad_B1.c: 92: Load.LightsON = 1;
 10656  008C  153F               	bsf	_Load^(0+256),2
 10657                           
 10658                           ;OverLoad_B1.c: 94: if (Load.ADtoGO == 1) {
 10659  008D  1E3F               	btfss	_Load^(0+256),4
 10660  008E  29D8               	goto	l1620
 10661                           
 10662                           ;OverLoad_B1.c: 95: Load.Time++;
 10663  008F  3001               	movlw	1
 10664  0090  07C0               	addwf	(_Load^(0+256)+1),f
 10665  0091  3000               	movlw	0
 10666  0092  3DC1               	addwfc	((_Load+1)^(0+256)+1),f
 10667                           
 10668                           ;OverLoad_B1.c: 96: if (Load.Time >= (40 / 20)) {
 10669  0093  3000               	movlw	0
 10670  0094  0241               	subwf	((_Load+1)^(0+256)+1),w
 10671  0095  3002               	movlw	2
 10672  0096  1903               	skipnz
 10673  0097  0240               	subwf	(_Load^(0+256)+1),w
 10674  0098  1C03               	skipc
 10675  0099  0008               	return
 10676                           
 10677                           ;OverLoad_B1.c: 97: Load.Time = 0;
 10678  009A  01C0               	clrf	(_Load^(0+256)+1)
 10679  009B  01C1               	clrf	((_Load+1)^(0+256)+1)
 10680                           
 10681                           ;OverLoad_B1.c: 98: Load.ADtoGO = 0;
 10682  009C  123F               	bcf	_Load^(0+256),4
 10683                           
 10684                           ;OverLoad_B1.c: 100: for (int i = 1; i < 4; i++) {
 10685  009D  3001               	movlw	1
 10686  009E  0020               	movlb	0	; select bank0
 10687  009F  00B0               	movwf	Load_Main@i
 10688  00A0  3000               	movlw	0
 10689  00A1  00B1               	movwf	Load_Main@i+1
 10690  00A2  0831               	movf	Load_Main@i+1,w
 10691  00A3  3A80               	xorlw	128
 10692  00A4  00A8               	movwf	??_Load_Main
 10693  00A5  3080               	movlw	128
 10694  00A6  0228               	subwf	??_Load_Main,w
 10695  00A7  1D03               	skipz
 10696  00A8  28AB               	goto	u9585
 10697  00A9  3004               	movlw	4
 10698  00AA  0230               	subwf	Load_Main@i,w
 10699  00AB                     u9585:	
 10700  00AB  1803               	btfsc	3,0
 10701  00AC  28DF               	goto	l8799
 10702  00AD                     l8793:	
 10703                           
 10704                           ;OverLoad_B1.c: 101: Load.ADH += Load.AH[i];
 10705  00AD  0020               	movlb	0	; select bank0
 10706  00AE  3530               	lslf	Load_Main@i,w
 10707  00AF  3E4A               	addlw	(_Load+11)& (0+255)
 10708  00B0  0086               	movwf	6
 10709  00B1  3001               	movlw	1	; select bank2/3
 10710  00B2  0087               	movwf	7
 10711  00B3  3F40               	moviw [0]fsr1
 10712  00B4  00A8               	movwf	??_Load_Main
 10713  00B5  3F41               	moviw [1]fsr1
 10714  00B6  00A9               	movwf	??_Load_Main+1
 10715  00B7  0828               	movf	??_Load_Main,w
 10716  00B8  0022               	movlb	2	; select bank2
 10717  00B9  07C4               	addwf	(_Load^(0+256)+5),f
 10718  00BA  0020               	movlb	0	; select bank0
 10719  00BB  0829               	movf	??_Load_Main+1,w
 10720  00BC  0022               	movlb	2	; select bank2
 10721  00BD  3DC5               	addwfc	((_Load+1)^(0+256)+5),f
 10722                           
 10723                           ;OverLoad_B1.c: 102: Load.ADL += Load.AL[i];
 10724  00BE  0020               	movlb	0	; select bank0
 10725  00BF  3530               	lslf	Load_Main@i,w
 10726  00C0  3E54               	addlw	(_Load+21)& (0+255)
 10727  00C1  0086               	movwf	6
 10728  00C2  3001               	movlw	1	; select bank2/3
 10729  00C3  0087               	movwf	7
 10730  00C4  3F40               	moviw [0]fsr1
 10731  00C5  00A8               	movwf	??_Load_Main
 10732  00C6  3F41               	moviw [1]fsr1
 10733  00C7  00A9               	movwf	??_Load_Main+1
 10734  00C8  0828               	movf	??_Load_Main,w
 10735  00C9  0022               	movlb	2	; select bank2
 10736  00CA  07C6               	addwf	(_Load^(0+256)+7),f
 10737  00CB  0020               	movlb	0	; select bank0
 10738  00CC  0829               	movf	??_Load_Main+1,w
 10739  00CD  0022               	movlb	2	; select bank2
 10740  00CE  3DC7               	addwfc	((_Load+1)^(0+256)+7),f
 10741  00CF  3001               	movlw	1
 10742  00D0  0020               	movlb	0	; select bank0
 10743  00D1  07B0               	addwf	Load_Main@i,f
 10744  00D2  3000               	movlw	0
 10745  00D3  3DB1               	addwfc	Load_Main@i+1,f
 10746  00D4  0831               	movf	Load_Main@i+1,w
 10747  00D5  3A80               	xorlw	128
 10748  00D6  00A8               	movwf	??_Load_Main
 10749  00D7  3080               	movlw	128
 10750  00D8  0228               	subwf	??_Load_Main,w
 10751  00D9  1D03               	skipz
 10752  00DA  28DD               	goto	u9595
 10753  00DB  3004               	movlw	4
 10754  00DC  0230               	subwf	Load_Main@i,w
 10755  00DD                     u9595:	
 10756  00DD  1C03               	skipc
 10757  00DE  28AD               	goto	l8793
 10758  00DF                     l8799:	
 10759                           
 10760                           ;OverLoad_B1.c: 103: }
 10761                           ;OverLoad_B1.c: 104: Load.ADH /= 3;
 10762  00DF  3003               	movlw	3
 10763  00E0  0020               	movlb	0	; select bank0
 10764  00E1  00A0               	movwf	___lwdiv@divisor
 10765  00E2  3000               	movlw	0
 10766  00E3  00A1               	movwf	___lwdiv@divisor+1
 10767  00E4  0022               	movlb	2	; select bank2
 10768  00E5  0845               	movf	((_Load+1)^(0+256)+5),w
 10769  00E6  0020               	movlb	0	; select bank0
 10770  00E7  01A3               	clrf	___lwdiv@dividend+1
 10771  00E8  07A3               	addwf	___lwdiv@dividend+1,f
 10772  00E9  0022               	movlb	2	; select bank2
 10773  00EA  0844               	movf	(_Load^(0+256)+5),w
 10774  00EB  0020               	movlb	0	; select bank0
 10775  00EC  01A2               	clrf	___lwdiv@dividend
 10776  00ED  07A2               	addwf	___lwdiv@dividend,f
 10777  00EE  3190  205B  3180   	fcall	___lwdiv
 10778  00F1  0020               	movlb	0	; select bank0
 10779  00F2  0821               	movf	?___lwdiv+1,w
 10780  00F3  0022               	movlb	2	; select bank2
 10781  00F4  01C5               	clrf	((_Load+1)^(0+256)+5)
 10782  00F5  07C5               	addwf	((_Load+1)^(0+256)+5),f
 10783  00F6  0020               	movlb	0	; select bank0
 10784  00F7  0820               	movf	?___lwdiv,w
 10785  00F8  0022               	movlb	2	; select bank2
 10786  00F9  01C4               	clrf	(_Load^(0+256)+5)
 10787  00FA  07C4               	addwf	(_Load^(0+256)+5),f
 10788                           
 10789                           ;OverLoad_B1.c: 105: Load.ADL /= 3;
 10790  00FB  3003               	movlw	3
 10791  00FC  0020               	movlb	0	; select bank0
 10792  00FD  00A0               	movwf	___lwdiv@divisor
 10793  00FE  3000               	movlw	0
 10794  00FF  00A1               	movwf	___lwdiv@divisor+1
 10795  0100  0022               	movlb	2	; select bank2
 10796  0101  0847               	movf	((_Load+1)^(0+256)+7),w
 10797  0102  0020               	movlb	0	; select bank0
 10798  0103  01A3               	clrf	___lwdiv@dividend+1
 10799  0104  07A3               	addwf	___lwdiv@dividend+1,f
 10800  0105  0022               	movlb	2	; select bank2
 10801  0106  0846               	movf	(_Load^(0+256)+7),w
 10802  0107  0020               	movlb	0	; select bank0
 10803  0108  01A2               	clrf	___lwdiv@dividend
 10804  0109  07A2               	addwf	___lwdiv@dividend,f
 10805  010A  3190  205B  3180   	fcall	___lwdiv
 10806  010D  0020               	movlb	0	; select bank0
 10807  010E  0821               	movf	?___lwdiv+1,w
 10808  010F  0022               	movlb	2	; select bank2
 10809  0110  01C7               	clrf	((_Load+1)^(0+256)+7)
 10810  0111  07C7               	addwf	((_Load+1)^(0+256)+7),f
 10811  0112  0020               	movlb	0	; select bank0
 10812  0113  0820               	movf	?___lwdiv,w
 10813  0114  0022               	movlb	2	; select bank2
 10814  0115  01C6               	clrf	(_Load^(0+256)+7)
 10815  0116  07C6               	addwf	(_Load^(0+256)+7),f
 10816                           
 10817                           ;OverLoad_B1.c: 106: setLoad_AH_AL_Restore();
 10818  0117  319C  24C3  3180   	fcall	_setLoad_AH_AL_Restore
 10819                           
 10820                           ;OverLoad_B1.c: 108: if (Load.ADH >= Load.ADL) {
 10821  011A  0022               	movlb	2	; select bank2
 10822  011B  0847               	movf	((_Load+1)^(0+256)+7),w
 10823  011C  0245               	subwf	((_Load+1)^(0+256)+5),w
 10824  011D  1D03               	skipz
 10825  011E  2921               	goto	u9605
 10826  011F  0846               	movf	(_Load^(0+256)+7),w
 10827  0120  0244               	subwf	(_Load^(0+256)+5),w
 10828  0121                     u9605:	
 10829  0121  1C03               	skipc
 10830  0122  0008               	return
 10831                           
 10832                           ;OverLoad_B1.c: 109: Load.AD = Load.ADH - Load.ADL;
 10833  0123  3005               	movlw	5
 10834  0124  3E3F               	addlw	_Load& (0+255)
 10835  0125  0086               	movwf	6
 10836  0126  3001               	movlw	1	; select bank2/3
 10837  0127  0087               	movwf	7
 10838  0128  0946               	comf	(_Load^(0+256)+7),w
 10839  0129  0020               	movlb	0	; select bank0
 10840  012A  00A8               	movwf	??_Load_Main
 10841  012B  0022               	movlb	2	; select bank2
 10842  012C  0947               	comf	((_Load+1)^(0+256)+7),w
 10843  012D  0020               	movlb	0	; select bank0
 10844  012E  00A9               	movwf	??_Load_Main+1
 10845  012F  0AA8               	incf	??_Load_Main,f
 10846  0130  1903               	skipnz
 10847  0131  0AA9               	incf	??_Load_Main+1,f
 10848  0132  3F40               	moviw [0]fsr1
 10849  0133  0728               	addwf	??_Load_Main,w
 10850  0134  0022               	movlb	2	; select bank2
 10851  0135  00DE               	movwf	(_Load^(0+256)+31)
 10852  0136  3F41               	moviw [1]fsr1
 10853  0137  0020               	movlb	0	; select bank0
 10854  0138  3D29               	addwfc	??_Load_Main+1,w
 10855  0139  0022               	movlb	2	; select bank2
 10856  013A  00DF               	movwf	(_Load^(0+256)+32)
 10857                           
 10858                           ;OverLoad_B1.c: 110: Load.ADH = 0;
 10859  013B  01C4               	clrf	(_Load^(0+256)+5)
 10860  013C  01C5               	clrf	((_Load+1)^(0+256)+5)
 10861                           
 10862                           ;OverLoad_B1.c: 111: Load.ADL = 0;
 10863  013D  01C6               	clrf	(_Load^(0+256)+7)
 10864  013E  01C7               	clrf	((_Load+1)^(0+256)+7)
 10865                           
 10866                           ;OverLoad_B1.c: 113: if (Load.Run == 1) {
 10867  013F  1DBF               	btfss	_Load^(0+256),3
 10868  0140  299A               	goto	l8839
 10869                           
 10870                           ;OverLoad_B1.c: 114: if (Load.Count < 2) {
 10871  0141  3002               	movlw	2
 10872  0142  0264               	subwf	(_Load^(0+256)+37),w
 10873  0143  1803               	skipnc
 10874  0144  299A               	goto	l8839
 10875                           
 10876                           ;OverLoad_B1.c: 115: Load.Count++;
 10877  0145  3001               	movlw	1
 10878  0146  0020               	movlb	0	; select bank0
 10879  0147  00A8               	movwf	??_Load_Main
 10880  0148  0828               	movf	??_Load_Main,w
 10881  0149  0022               	movlb	2	; select bank2
 10882  014A  07E4               	addwf	(_Load^(0+256)+37),f
 10883                           
 10884                           ;OverLoad_B1.c: 117: Load_RunStatus = getDimmer_Load_Status();
 10885  014B  3199  2124  3180   	fcall	_getDimmer_Load_Status
 10886  014E  0020               	movlb	0	; select bank0
 10887  014F  00A8               	movwf	??_Load_Main
 10888  0150  0828               	movf	??_Load_Main,w
 10889  0151  00AE               	movwf	Load_Main@Load_RunStatus
 10890                           
 10891                           ;OverLoad_B1.c: 122: LightsCount = getMain_Lights_Count();
 10892  0152  319A  228D  3180   	fcall	_getMain_Lights_Count
 10893  0155  0020               	movlb	0	; select bank0
 10894  0156  00A8               	movwf	??_Load_Main
 10895  0157  0828               	movf	??_Load_Main,w
 10896  0158  00AF               	movwf	Load_Main@LightsCount
 10897                           
 10898                           ;OverLoad_B1.c: 124: if (Load.Count == 1) {
 10899  0159  0022               	movlb	2	; select bank2
 10900  015A  0864               	movf	(_Load^(0+256)+37),w
 10901  015B  3A01               	xorlw	1
 10902  015C  1D03               	skipz
 10903  015D  2962               	goto	l8825
 10904                           
 10905                           ;OverLoad_B1.c: 126: Load.JudgeValue = (20*85);
 10906  015E  30A4               	movlw	164
 10907  015F  00E2               	movwf	(_Load^(0+256)+35)
 10908  0160  3006               	movlw	6
 10909  0161  296F               	goto	L7
 10910  0162                     l8825:	
 10911                           ;OverLoad_B1.c: 127: } else if (Load.Count == 2) {
 10912                           
 10913  0162  0864               	movf	(_Load^(0+256)+37),w
 10914  0163  3A02               	xorlw	2
 10915  0164  1D03               	skipz
 10916  0165  299A               	goto	l8839
 10917                           
 10918                           ;OverLoad_B1.c: 128: if (LightsCount == 1) {
 10919  0166  0020               	movlb	0	; select bank0
 10920  0167  082F               	movf	Load_Main@LightsCount,w
 10921  0168  3A01               	xorlw	1
 10922  0169  1D03               	skipz
 10923  016A  2971               	goto	l8831
 10924                           
 10925                           ;OverLoad_B1.c: 129: Load.JudgeValue = (int)(1.1*85);
 10926  016B  305D               	movlw	93
 10927  016C  0022               	movlb	2	; select bank2
 10928  016D  00E2               	movwf	(_Load^(0+256)+35)
 10929  016E  3000               	movlw	0
 10930  016F                     L7:	
 10931  016F  00E3               	movwf	(_Load^(0+256)+36)
 10932                           
 10933                           ;OverLoad_B1.c: 130: } else {
 10934  0170  299A               	goto	l8839
 10935  0171                     l8831:	
 10936                           
 10937                           ;OverLoad_B1.c: 131: if (Load_RunStatus == 0) {
 10938  0171  0020               	movlb	0	; select bank0
 10939  0172  08AE               	movf	Load_Main@Load_RunStatus,f
 10940  0173  1D03               	skipz
 10941  0174  298E               	goto	l8835
 10942                           
 10943                           ;OverLoad_B1.c: 132: Load.JudgeValue = (int)(1.1*85) * LightsCount;
 10944  0175  082F               	movf	Load_Main@LightsCount,w
 10945  0176  00A8               	movwf	??_Load_Main
 10946  0177  01A9               	clrf	??_Load_Main+1
 10947  0178  0828               	movf	??_Load_Main,w
 10948  0179  00A0               	movwf	___wmul@multiplier
 10949  017A  0829               	movf	??_Load_Main+1,w
 10950  017B  00A1               	movwf	___wmul@multiplier+1
 10951  017C  305D               	movlw	93
 10952  017D  00A2               	movwf	___wmul@multiplicand
 10953  017E  3000               	movlw	0
 10954  017F  00A3               	movwf	___wmul@multiplicand+1
 10955  0180  319D  2519  3180   	fcall	___wmul
 10956  0183  0020               	movlb	0	; select bank0
 10957  0184  0821               	movf	?___wmul+1,w
 10958  0185  0022               	movlb	2	; select bank2
 10959  0186  01E3               	clrf	((_Load+1)^(0+256)+35)
 10960  0187  07E3               	addwf	((_Load+1)^(0+256)+35),f
 10961  0188  0020               	movlb	0	; select bank0
 10962  0189  0820               	movf	?___wmul,w
 10963  018A  0022               	movlb	2	; select bank2
 10964  018B  01E2               	clrf	(_Load^(0+256)+35)
 10965  018C  07E2               	addwf	(_Load^(0+256)+35),f
 10966                           
 10967                           ;OverLoad_B1.c: 133: } else if (Load_RunStatus == 1) {
 10968  018D  299A               	goto	l8839
 10969  018E                     l8835:	
 10970  018E  0020               	movlb	0	; select bank0
 10971  018F  082E               	movf	Load_Main@Load_RunStatus,w
 10972  0190  3A01               	xorlw	1
 10973  0191  1D03               	skipz
 10974  0192  299A               	goto	l8839
 10975                           
 10976                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(1.1*85) + Load.TotalLoad;
 10977  0193  0022               	movlb	2	; select bank2
 10978  0194  0848               	movf	(_Load^(0+256)+9),w
 10979  0195  3E5D               	addlw	93
 10980  0196  00E2               	movwf	(_Load^(0+256)+35)
 10981  0197  3000               	movlw	0
 10982  0198  3D49               	addwfc	((_Load+1)^(0+256)+9),w
 10983  0199  00E3               	movwf	((_Load+1)^(0+256)+35)
 10984  019A                     l8839:	
 10985                           
 10986                           ;OverLoad_B1.c: 135: }
 10987                           ;OverLoad_B1.c: 136: }
 10988                           ;OverLoad_B1.c: 137: }
 10989                           ;OverLoad_B1.c: 138: }
 10990                           ;OverLoad_B1.c: 139: }
 10991                           ;OverLoad_B1.c: 141: if (Load.AD >= Load.JudgeValue) {
 10992  019A  0022               	movlb	2	; select bank2
 10993  019B  0863               	movf	((_Load+1)^(0+256)+35),w
 10994  019C  025F               	subwf	((_Load+1)^(0+256)+31),w
 10995  019D  1D03               	skipz
 10996  019E  29A1               	goto	u9685
 10997  019F  0862               	movf	(_Load^(0+256)+35),w
 10998  01A0  025E               	subwf	(_Load^(0+256)+31),w
 10999  01A1                     u9685:	
 11000  01A1  1C03               	skipc
 11001  01A2  29C0               	goto	l8855
 11002                           
 11003                           ;OverLoad_B1.c: 142: ErrorCountValue = LightsCount == 1 ? 2 : 3;
 11004  01A3  0020               	movlb	0	; select bank0
 11005  01A4  082F               	movf	Load_Main@LightsCount,w
 11006  01A5  3A01               	xorlw	1
 11007  01A6  1903               	skipnz
 11008  01A7  29AA               	goto	l8845
 11009  01A8  3003               	movlw	3
 11010  01A9  29AB               	goto	L8
 11011  01AA                     l8845:	
 11012  01AA  3002               	movlw	2
 11013  01AB                     L8:	
 11014  01AB  00AA               	movwf	_Load_Main$3690
 11015  01AC  3000               	movlw	0
 11016  01AD  00AB               	movwf	_Load_Main$3690+1
 11017  01AE  082A               	movf	_Load_Main$3690,w
 11018  01AF  00A8               	movwf	??_Load_Main
 11019  01B0  0828               	movf	??_Load_Main,w
 11020  01B1  00AD               	movwf	Load_Main@ErrorCountValue
 11021                           
 11022                           ;OverLoad_B1.c: 143: Load.ErrorCount++;
 11023  01B2  3001               	movlw	1
 11024  01B3  00A8               	movwf	??_Load_Main
 11025  01B4  0828               	movf	??_Load_Main,w
 11026  01B5  0022               	movlb	2	; select bank2
 11027  01B6  07E5               	addwf	(_Load^(0+256)+38),f
 11028                           
 11029                           ;OverLoad_B1.c: 144: if (Load.ErrorCount > ErrorCountValue) {
 11030  01B7  0865               	movf	(_Load^(0+256)+38),w
 11031  01B8  0020               	movlb	0	; select bank0
 11032  01B9  022D               	subwf	Load_Main@ErrorCountValue,w
 11033  01BA  1803               	skipnc
 11034  01BB  0008               	return
 11035                           
 11036                           ;OverLoad_B1.c: 145: Load.ErrorCount = 0;
 11037  01BC  0022               	movlb	2	; select bank2
 11038  01BD  01E5               	clrf	(_Load^(0+256)+38)
 11039                           
 11040                           ;OverLoad_B1.c: 146: Load.ERROR = 1;
 11041  01BE  16BF               	bsf	_Load^(0+256),5
 11042                           
 11043                           ;OverLoad_B1.c: 168: }
 11044                           ;OverLoad_B1.c: 169: } else {
 11045  01BF  0008               	return
 11046  01C0                     l8855:	
 11047                           
 11048                           ;OverLoad_B1.c: 170: Load.ErrorCount = 0;
 11049  01C0  01E5               	clrf	(_Load^(0+256)+38)
 11050                           
 11051                           ;OverLoad_B1.c: 171: if (Load.Run == 1) {
 11052  01C1  1DBF               	btfss	_Load^(0+256),3
 11053  01C2  0008               	return
 11054                           
 11055                           ;OverLoad_B1.c: 172: Load.SafeCount++;
 11056  01C3  3001               	movlw	1
 11057  01C4  0020               	movlb	0	; select bank0
 11058  01C5  00A8               	movwf	??_Load_Main
 11059  01C6  0828               	movf	??_Load_Main,w
 11060  01C7  0022               	movlb	2	; select bank2
 11061  01C8  07E6               	addwf	(_Load^(0+256)+39),f
 11062                           
 11063                           ;OverLoad_B1.c: 173: if (Load.SafeCount >= 3) {
 11064  01C9  3003               	movlw	3
 11065  01CA  0266               	subwf	(_Load^(0+256)+39),w
 11066  01CB  1C03               	skipc
 11067  01CC  0008               	return
 11068                           
 11069                           ;OverLoad_B1.c: 174: Load.SafeCount = 0;
 11070  01CD  01E6               	clrf	(_Load^(0+256)+39)
 11071                           
 11072                           ;OverLoad_B1.c: 175: Load.OK = 1;
 11073  01CE  17BF               	bsf	_Load^(0+256),7
 11074                           
 11075                           ;OverLoad_B1.c: 176: Load.Run = 0;
 11076  01CF  11BF               	bcf	_Load^(0+256),3
 11077                           
 11078                           ;OverLoad_B1.c: 177: Load.Count = 0;
 11079  01D0  01E4               	clrf	(_Load^(0+256)+37)
 11080                           
 11081                           ;OverLoad_B1.c: 178: Load.TotalLoad = Load.AD;
 11082  01D1  085F               	movf	((_Load+1)^(0+256)+31),w
 11083  01D2  01C9               	clrf	((_Load+1)^(0+256)+9)
 11084  01D3  07C9               	addwf	((_Load+1)^(0+256)+9),f
 11085  01D4  085E               	movf	(_Load^(0+256)+31),w
 11086  01D5  01C8               	clrf	(_Load^(0+256)+9)
 11087  01D6  07C8               	addwf	(_Load^(0+256)+9),f
 11088                           
 11089                           ;OverLoad_B1.c: 182: }
 11090                           ;OverLoad_B1.c: 183: }
 11091                           ;OverLoad_B1.c: 206: }
 11092                           ;OverLoad_B1.c: 207: }
 11093                           ;OverLoad_B1.c: 208: }
 11094                           ;OverLoad_B1.c: 209: } else {
 11095  01D7  0008               	return
 11096  01D8                     l1620:	
 11097                           
 11098                           ;OverLoad_B1.c: 210: Load.ADtoGO = 1;
 11099  01D8  163F               	bsf	_Load^(0+256),4
 11100                           
 11101                           ;OverLoad_B1.c: 211: }
 11102                           ;OverLoad_B1.c: 212: } else {
 11103  01D9  0008               	return
 11104  01DA                     l1619:	
 11105                           
 11106                           ;OverLoad_B1.c: 214: if (Load.LightsON == 1) {
 11107  01DA  1D3F               	btfss	_Load^(0+256),2
 11108  01DB  29ED               	goto	l8891
 11109                           
 11110                           ;OverLoad_B1.c: 215: Load.LightsON = 0;
 11111  01DC  113F               	bcf	_Load^(0+256),2
 11112                           
 11113                           ;OverLoad_B1.c: 217: Load.ADtoGO = 0;
 11114  01DD  123F               	bcf	_Load^(0+256),4
 11115                           
 11116                           ;OverLoad_B1.c: 218: Load.Time = 0;
 11117  01DE  01C0               	clrf	(_Load^(0+256)+1)
 11118  01DF  01C1               	clrf	((_Load+1)^(0+256)+1)
 11119                           
 11120                           ;OverLoad_B1.c: 219: setLoad_AH_AL_Restore();
 11121  01E0  319C  24C3  3180   	fcall	_setLoad_AH_AL_Restore
 11122                           
 11123                           ;OverLoad_B1.c: 221: Load.ErrorCount = 0;
 11124  01E3  0022               	movlb	2	; select bank2
 11125  01E4  01E5               	clrf	(_Load^(0+256)+38)
 11126                           
 11127                           ;OverLoad_B1.c: 222: Load.SafeCount = 0;
 11128  01E5  01E6               	clrf	(_Load^(0+256)+39)
 11129                           
 11130                           ;OverLoad_B1.c: 224: Load.ADH = 0;
 11131  01E6  01C4               	clrf	(_Load^(0+256)+5)
 11132  01E7  01C5               	clrf	((_Load+1)^(0+256)+5)
 11133                           
 11134                           ;OverLoad_B1.c: 225: Load.ADL = 0;
 11135  01E8  01C6               	clrf	(_Load^(0+256)+7)
 11136  01E9  01C7               	clrf	((_Load+1)^(0+256)+7)
 11137                           
 11138                           ;OverLoad_B1.c: 231: Load.Run = 0;
 11139  01EA  11BF               	bcf	_Load^(0+256),3
 11140                           
 11141                           ;OverLoad_B1.c: 232: Load.Count = 0;
 11142  01EB  01E4               	clrf	(_Load^(0+256)+37)
 11143                           
 11144                           ;OverLoad_B1.c: 233: Load.OK = 0;
 11145  01EC  13BF               	bcf	_Load^(0+256),7
 11146  01ED                     l8891:	
 11147                           
 11148                           ;OverLoad_B1.c: 255: }
 11149                           ;OverLoad_B1.c: 256: if (Load.ERROR == 1) {
 11150  01ED  1EBF               	btfss	_Load^(0+256),5
 11151  01EE  0008               	return
 11152                           
 11153                           ;OverLoad_B1.c: 257: Load.ErrorTime++;
 11154  01EF  3001               	movlw	1
 11155  01F0  07C2               	addwf	(_Load^(0+256)+3),f
 11156  01F1  3000               	movlw	0
 11157  01F2  3DC3               	addwfc	((_Load+1)^(0+256)+3),f
 11158                           
 11159                           ;OverLoad_B1.c: 258: if (Load.ErrorTime >= (10000 / 20)) {
 11160  01F3  3001               	movlw	1
 11161  01F4  0243               	subwf	((_Load+1)^(0+256)+3),w
 11162  01F5  30F4               	movlw	244
 11163  01F6  1903               	skipnz
 11164  01F7  0242               	subwf	(_Load^(0+256)+3),w
 11165  01F8  1C03               	skipc
 11166  01F9  0008               	return
 11167                           
 11168                           ;OverLoad_B1.c: 259: Load.ErrorTime = 0;
 11169  01FA  01C2               	clrf	(_Load^(0+256)+3)
 11170  01FB  01C3               	clrf	((_Load+1)^(0+256)+3)
 11171                           
 11172                           ;OverLoad_B1.c: 260: Load.ERROR = 0;
 11173  01FC  12BF               	bcf	_Load^(0+256),5
 11174                           
 11175                           ;OverLoad_B1.c: 261: }
 11176                           ;OverLoad_B1.c: 262: }
 11177                           ;OverLoad_B1.c: 263: }
 11178                           ;OverLoad_B1.c: 264: } else {
 11179  01FD  0008               	return
 11180  01FE                     l1609:	
 11181                           
 11182                           ;OverLoad_B1.c: 265: if (myMain.PowerON == 1) {
 11183  01FE  0021               	movlb	1	; select bank1
 11184  01FF  1C2E               	btfss	_myMain^(0+128),0
 11185  0200  0008               	return
 11186                           
 11187                           ;OverLoad_B1.c: 266: Load.Enable = 1;
 11188  0201  0022               	movlb	2	; select bank2
 11189  0202  143F               	bsf	_Load^(0+256),0
 11190  0203  0008               	return
 11191  0204                     __end_of_Load_Main:	
 11192                           
 11193                           	psect	text63
 11194  1A8D                     __ptext63:	
 11195 ;; *************** function _getMain_Lights_Count *****************
 11196 ;; Defined at:
 11197 ;;		line 459 in file "../src/main_B1.c"
 11198 ;; Parameters:    Size  Location     Type
 11199 ;;		None
 11200 ;; Auto vars:     Size  Location     Type
 11201 ;;  status2         1    2[BANK0 ] unsigned char 
 11202 ;;  status1         1    1[BANK0 ] unsigned char 
 11203 ;;  count           1    0[BANK0 ] unsigned char 
 11204 ;; Return value:  Size  Location     Type
 11205 ;;                  1    wreg      unsigned char 
 11206 ;; Registers used:
 11207 ;;		wreg, status,2, status,0
 11208 ;; Tracked objects:
 11209 ;;		On entry : 0/0
 11210 ;;		On exit  : 0/0
 11211 ;;		Unchanged: 0/0
 11212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11214 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11216 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11217 ;;Total ram usage:        3 bytes
 11218 ;; Hardware stack levels used:    1
 11219 ;; Hardware stack levels required when called:    5
 11220 ;; This function calls:
 11221 ;;		Nothing
 11222 ;; This function is called by:
 11223 ;;		_Load_Main
 11224 ;; This function uses a non-reentrant model
 11225 ;;
 11226                           
 11227                           
 11228                           ;psect for function _getMain_Lights_Count
 11229  1A8D                     _getMain_Lights_Count:	
 11230                           
 11231                           ;main_B1.c: 460: char count = 0;
 11232                           
 11233                           ;incstack = 0
 11234                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 11235  1A8D  0020               	movlb	0	; select bank0
 11236  1A8E  01A0               	clrf	getMain_Lights_Count@count
 11237                           
 11238                           ;main_B1.c: 464: char status1 = DimmerIntr1.ControlStatus == 1 ? 1 : 0;
 11239  1A8F  3000               	movlw	0
 11240  1A90  0021               	movlb	1	; select bank1
 11241  1A91  19BB               	btfsc	_DimmerIntr1^(0+128),3
 11242  1A92  3001               	movlw	1
 11243  1A93  0020               	movlb	0	; select bank0
 11244  1A94  00A1               	movwf	getMain_Lights_Count@status1
 11245                           
 11246                           ;main_B1.c: 467: char status2 = DimmerIntr2.ControlStatus == 1 ? 1 : 0;
 11247  1A95  3000               	movlw	0
 11248  1A96  0021               	movlb	1	; select bank1
 11249  1A97  19C7               	btfsc	_DimmerIntr2^(0+128),3
 11250  1A98  3001               	movlw	1
 11251  1A99  0020               	movlb	0	; select bank0
 11252  1A9A  00A2               	movwf	getMain_Lights_Count@status2
 11253                           
 11254                           ;main_B1.c: 490: return count = (status1 + status2);
 11255  1A9B  0821               	movf	getMain_Lights_Count@status1,w
 11256  1A9C  0722               	addwf	getMain_Lights_Count@status2,w
 11257  1A9D  00A0               	movwf	getMain_Lights_Count@count
 11258  1A9E  0008               	return
 11259  1A9F                     __end_of_getMain_Lights_Count:	
 11260                           
 11261                           	psect	text64
 11262  1924                     __ptext64:	
 11263 ;; *************** function _getDimmer_Load_Status *****************
 11264 ;; Defined at:
 11265 ;;		line 1148 in file "../src/Dimmer_B1.c"
 11266 ;; Parameters:    Size  Location     Type
 11267 ;;		None
 11268 ;; Auto vars:     Size  Location     Type
 11269 ;;  status          1    0[BANK0 ] unsigned char 
 11270 ;; Return value:  Size  Location     Type
 11271 ;;                  1    wreg      unsigned char 
 11272 ;; Registers used:
 11273 ;;		wreg, status,2
 11274 ;; Tracked objects:
 11275 ;;		On entry : 0/0
 11276 ;;		On exit  : 0/0
 11277 ;;		Unchanged: 0/0
 11278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11280 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11282 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11283 ;;Total ram usage:        1 bytes
 11284 ;; Hardware stack levels used:    1
 11285 ;; Hardware stack levels required when called:    5
 11286 ;; This function calls:
 11287 ;;		Nothing
 11288 ;; This function is called by:
 11289 ;;		_Load_Main
 11290 ;; This function uses a non-reentrant model
 11291 ;;
 11292                           
 11293                           
 11294                           ;psect for function _getDimmer_Load_Status
 11295  1924                     _getDimmer_Load_Status:	
 11296                           
 11297                           ;Dimmer_B1.c: 1149: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11298                           
 11299                           ;incstack = 0
 11300                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11301  1924  3000               	movlw	0
 11302  1925  0022               	movlb	2	; select bank2
 11303  1926  192C               	btfsc	_Dimmer^(0+256),2
 11304  1927  3001               	movlw	1
 11305  1928  0020               	movlb	0	; select bank0
 11306  1929  00A0               	movwf	getDimmer_Load_Status@status
 11307                           
 11308                           ;Dimmer_B1.c: 1150: return status;
 11309  192A  0820               	movf	getDimmer_Load_Status@status,w
 11310  192B  0008               	return
 11311  192C                     __end_of_getDimmer_Load_Status:	
 11312                           
 11313                           	psect	text65
 11314  191C                     __ptext65:	
 11315 ;; *************** function _getDimmer_LoadGO *****************
 11316 ;; Defined at:
 11317 ;;		line 1142 in file "../src/Dimmer_B1.c"
 11318 ;; Parameters:    Size  Location     Type
 11319 ;;		None
 11320 ;; Auto vars:     Size  Location     Type
 11321 ;;  loadgo          1    0[BANK0 ] unsigned char 
 11322 ;; Return value:  Size  Location     Type
 11323 ;;                  1    wreg      unsigned char 
 11324 ;; Registers used:
 11325 ;;		wreg, status,2
 11326 ;; Tracked objects:
 11327 ;;		On entry : 0/0
 11328 ;;		On exit  : 0/0
 11329 ;;		Unchanged: 0/0
 11330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11332 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11334 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11335 ;;Total ram usage:        1 bytes
 11336 ;; Hardware stack levels used:    1
 11337 ;; Hardware stack levels required when called:    5
 11338 ;; This function calls:
 11339 ;;		Nothing
 11340 ;; This function is called by:
 11341 ;;		_Load_Main
 11342 ;; This function uses a non-reentrant model
 11343 ;;
 11344                           
 11345                           
 11346                           ;psect for function _getDimmer_LoadGO
 11347  191C                     _getDimmer_LoadGO:	
 11348                           
 11349                           ;Dimmer_B1.c: 1143: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11350                           
 11351                           ;incstack = 0
 11352                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11353  191C  3000               	movlw	0
 11354  191D  0022               	movlb	2	; select bank2
 11355  191E  18AC               	btfsc	_Dimmer^(0+256),1
 11356  191F  3001               	movlw	1
 11357  1920  0020               	movlb	0	; select bank0
 11358  1921  00A0               	movwf	getDimmer_LoadGO@loadgo
 11359                           
 11360                           ;Dimmer_B1.c: 1144: return loadgo;
 11361  1922  0820               	movf	getDimmer_LoadGO@loadgo,w
 11362  1923  0008               	return
 11363  1924                     __end_of_getDimmer_LoadGO:	
 11364                           
 11365                           	psect	text66
 11366  1E16                     __ptext66:	
 11367 ;; *************** function _getAll_DimmerIntr_Dimming_Sw_RF *****************
 11368 ;; Defined at:
 11369 ;;		line 277 in file "../src/Dimmer_B1.c"
 11370 ;; Parameters:    Size  Location     Type
 11371 ;;		None
 11372 ;; Auto vars:     Size  Location     Type
 11373 ;;  status          1    3[BANK0 ] unsigned char 
 11374 ;; Return value:  Size  Location     Type
 11375 ;;                  1    wreg      unsigned char 
 11376 ;; Registers used:
 11377 ;;		wreg, status,2, status,0
 11378 ;; Tracked objects:
 11379 ;;		On entry : 0/0
 11380 ;;		On exit  : 0/0
 11381 ;;		Unchanged: 0/0
 11382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11384 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11385 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11386 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11387 ;;Total ram usage:        4 bytes
 11388 ;; Hardware stack levels used:    1
 11389 ;; Hardware stack levels required when called:    5
 11390 ;; This function calls:
 11391 ;;		Nothing
 11392 ;; This function is called by:
 11393 ;;		_Load_Main
 11394 ;; This function uses a non-reentrant model
 11395 ;;
 11396                           
 11397                           
 11398                           ;psect for function _getAll_DimmerIntr_Dimming_Sw_RF
 11399  1E16                     _getAll_DimmerIntr_Dimming_Sw_RF:	
 11400                           
 11401                           ;Dimmer_B1.c: 278: char status = 0;
 11402                           
 11403                           ;incstack = 0
 11404                           ; Regs used in _getAll_DimmerIntr_Dimming_Sw_RF: [wreg+status,2+status,0]
 11405  1E16  0020               	movlb	0	; select bank0
 11406  1E17  01A3               	clrf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11407                           
 11408                           ;Dimmer_B1.c: 285: status = (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr2.Dimming_Sw == 1)
      +                           ? 1 : 0;
 11409  1E18  01A1               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2294
 11410  1E19  0AA1               	incf	_getAll_DimmerIntr_Dimming_Sw_RF$2294,f
 11411  1E1A  0021               	movlb	1	; select bank1
 11412  1E1B  1E3B               	btfss	_DimmerIntr1^(0+128),4
 11413  1E1C  1A47               	btfsc	_DimmerIntr2^(0+128),4
 11414  1E1D  2E20               	goto	l7871
 11415  1E1E  0020               	movlb	0	; select bank0
 11416  1E1F  01A1               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2294
 11417  1E20                     l7871:	
 11418  1E20  0020               	movlb	0	; select bank0
 11419  1E21  0821               	movf	_getAll_DimmerIntr_Dimming_Sw_RF$2294,w
 11420  1E22  00A0               	movwf	??_getAll_DimmerIntr_Dimming_Sw_RF
 11421  1E23  0820               	movf	??_getAll_DimmerIntr_Dimming_Sw_RF,w
 11422  1E24  00A3               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11423                           
 11424                           ;Dimmer_B1.c: 293: if (status == 0) {
 11425  1E25  08A3               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,f
 11426  1E26  1D03               	skipz
 11427  1E27  2E35               	goto	l7883
 11428                           
 11429                           ;Dimmer_B1.c: 299: status = (DimmerIntr1.Dimming_RF == 1 || DimmerIntr2.Dimming_RF == 1)
      +                           ? 1 : 0;
 11430  1E28  01A2               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2295
 11431  1E29  0AA2               	incf	_getAll_DimmerIntr_Dimming_Sw_RF$2295,f
 11432  1E2A  0021               	movlb	1	; select bank1
 11433  1E2B  1F3B               	btfss	_DimmerIntr1^(0+128),6
 11434  1E2C  1B47               	btfsc	_DimmerIntr2^(0+128),6
 11435  1E2D  2E30               	goto	l7881
 11436  1E2E  0020               	movlb	0	; select bank0
 11437  1E2F  01A2               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2295
 11438  1E30                     l7881:	
 11439  1E30  0020               	movlb	0	; select bank0
 11440  1E31  0822               	movf	_getAll_DimmerIntr_Dimming_Sw_RF$2295,w
 11441  1E32  00A0               	movwf	??_getAll_DimmerIntr_Dimming_Sw_RF
 11442  1E33  0820               	movf	??_getAll_DimmerIntr_Dimming_Sw_RF,w
 11443  1E34  00A3               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11444  1E35                     l7883:	
 11445                           
 11446                           ;Dimmer_B1.c: 305: }
 11447                           ;Dimmer_B1.c: 307: return status;
 11448  1E35  0823               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,w
 11449  1E36  0008               	return
 11450  1E37                     __end_of_getAll_DimmerIntr_Dimming_Sw_RF:	
 11451                           
 11452                           	psect	text67
 11453  1D19                     __ptext67:	
 11454 ;; *************** function ___wmul *****************
 11455 ;; Defined at:
 11456 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11457 ;; Parameters:    Size  Location     Type
 11458 ;;  multiplier      2    0[BANK0 ] unsigned int 
 11459 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 11460 ;; Auto vars:     Size  Location     Type
 11461 ;;  product         2    4[BANK0 ] unsigned int 
 11462 ;; Return value:  Size  Location     Type
 11463 ;;                  2    0[BANK0 ] unsigned int 
 11464 ;; Registers used:
 11465 ;;		wreg, status,2, status,0
 11466 ;; Tracked objects:
 11467 ;;		On entry : 0/0
 11468 ;;		On exit  : 0/0
 11469 ;;		Unchanged: 0/0
 11470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11471 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11472 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11474 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11475 ;;Total ram usage:        6 bytes
 11476 ;; Hardware stack levels used:    1
 11477 ;; Hardware stack levels required when called:    5
 11478 ;; This function calls:
 11479 ;;		Nothing
 11480 ;; This function is called by:
 11481 ;;		_Load_Main
 11482 ;; This function uses a non-reentrant model
 11483 ;;
 11484                           
 11485                           
 11486                           ;psect for function ___wmul
 11487  1D19                     ___wmul:	
 11488                           
 11489                           ;incstack = 0
 11490                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11491  1D19  0020               	movlb	0	; select bank0
 11492  1D1A  01A4               	clrf	___wmul@product
 11493  1D1B  01A5               	clrf	___wmul@product+1
 11494  1D1C                     l8541:	
 11495  1D1C  1C20               	btfss	___wmul@multiplier,0
 11496  1D1D  2D22               	goto	l3022
 11497  1D1E  0822               	movf	___wmul@multiplicand,w
 11498  1D1F  07A4               	addwf	___wmul@product,f
 11499  1D20  0823               	movf	___wmul@multiplicand+1,w
 11500  1D21  3DA5               	addwfc	___wmul@product+1,f
 11501  1D22                     l3022:	
 11502  1D22  3001               	movlw	1
 11503  1D23                     u9085:	
 11504  1D23  35A2               	lslf	___wmul@multiplicand,f
 11505  1D24  0DA3               	rlf	___wmul@multiplicand+1,f
 11506  1D25  0B89               	decfsz	9,f
 11507  1D26  2D23               	goto	u9085
 11508  1D27  3001               	movlw	1
 11509  1D28                     u9095:	
 11510  1D28  36A1               	lsrf	___wmul@multiplier+1,f
 11511  1D29  0CA0               	rrf	___wmul@multiplier,f
 11512  1D2A  0B89               	decfsz	9,f
 11513  1D2B  2D28               	goto	u9095
 11514  1D2C  0821               	movf	___wmul@multiplier+1,w
 11515  1D2D  0420               	iorwf	___wmul@multiplier,w
 11516  1D2E  1D03               	skipz
 11517  1D2F  2D1C               	goto	l8541
 11518  1D30  0825               	movf	___wmul@product+1,w
 11519  1D31  01A1               	clrf	?___wmul+1
 11520  1D32  07A1               	addwf	?___wmul+1,f
 11521  1D33  0824               	movf	___wmul@product,w
 11522  1D34  01A0               	clrf	?___wmul
 11523  1D35  07A0               	addwf	?___wmul,f
 11524  1D36  0008               	return
 11525  1D37                     __end_of___wmul:	
 11526                           
 11527                           	psect	text68
 11528  105B                     __ptext68:	
 11529 ;; *************** function ___lwdiv *****************
 11530 ;; Defined at:
 11531 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11532 ;; Parameters:    Size  Location     Type
 11533 ;;  divisor         2    0[BANK0 ] unsigned int 
 11534 ;;  dividend        2    2[BANK0 ] unsigned int 
 11535 ;; Auto vars:     Size  Location     Type
 11536 ;;  quotient        2    5[BANK0 ] unsigned int 
 11537 ;;  counter         1    7[BANK0 ] unsigned char 
 11538 ;; Return value:  Size  Location     Type
 11539 ;;                  2    0[BANK0 ] unsigned int 
 11540 ;; Registers used:
 11541 ;;		wreg, status,2, status,0
 11542 ;; Tracked objects:
 11543 ;;		On entry : 0/0
 11544 ;;		On exit  : 0/0
 11545 ;;		Unchanged: 0/0
 11546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11547 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11548 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11549 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11550 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11551 ;;Total ram usage:        8 bytes
 11552 ;; Hardware stack levels used:    1
 11553 ;; Hardware stack levels required when called:    5
 11554 ;; This function calls:
 11555 ;;		Nothing
 11556 ;; This function is called by:
 11557 ;;		_Load_Main
 11558 ;;		_setRF_Main
 11559 ;; This function uses a non-reentrant model
 11560 ;;
 11561                           
 11562                           
 11563                           ;psect for function ___lwdiv
 11564  105B                     ___lwdiv:	
 11565                           
 11566                           ;incstack = 0
 11567                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11568  105B  0020               	movlb	0	; select bank0
 11569  105C  01A5               	clrf	___lwdiv@quotient
 11570  105D  01A6               	clrf	___lwdiv@quotient+1
 11571  105E  0821               	movf	___lwdiv@divisor+1,w
 11572  105F  0420               	iorwf	___lwdiv@divisor,w
 11573  1060  1903               	skipnz
 11574  1061  288B               	goto	l7807
 11575  1062  01A7               	clrf	___lwdiv@counter
 11576  1063  0AA7               	incf	___lwdiv@counter,f
 11577  1064                     l7795:	
 11578  1064  1BA1               	btfsc	___lwdiv@divisor+1,7
 11579  1065  2870               	goto	l7797
 11580  1066  3001               	movlw	1
 11581  1067                     u7655:	
 11582  1067  35A0               	lslf	___lwdiv@divisor,f
 11583  1068  0DA1               	rlf	___lwdiv@divisor+1,f
 11584  1069  0B89               	decfsz	9,f
 11585  106A  2867               	goto	u7655
 11586  106B  3001               	movlw	1
 11587  106C  00A4               	movwf	??___lwdiv
 11588  106D  0824               	movf	??___lwdiv,w
 11589  106E  07A7               	addwf	___lwdiv@counter,f
 11590  106F  2864               	goto	l7795
 11591  1070                     l7797:	
 11592  1070  3001               	movlw	1
 11593  1071                     u7675:	
 11594  1071  35A5               	lslf	___lwdiv@quotient,f
 11595  1072  0DA6               	rlf	___lwdiv@quotient+1,f
 11596  1073  0B89               	decfsz	9,f
 11597  1074  2871               	goto	u7675
 11598  1075  0821               	movf	___lwdiv@divisor+1,w
 11599  1076  0223               	subwf	___lwdiv@dividend+1,w
 11600  1077  1D03               	skipz
 11601  1078  287B               	goto	u7685
 11602  1079  0820               	movf	___lwdiv@divisor,w
 11603  107A  0222               	subwf	___lwdiv@dividend,w
 11604  107B                     u7685:	
 11605  107B  1C03               	skipc
 11606  107C  2882               	goto	l7803
 11607  107D  0820               	movf	___lwdiv@divisor,w
 11608  107E  02A2               	subwf	___lwdiv@dividend,f
 11609  107F  0821               	movf	___lwdiv@divisor+1,w
 11610  1080  3BA3               	subwfb	___lwdiv@dividend+1,f
 11611  1081  1425               	bsf	___lwdiv@quotient,0
 11612  1082                     l7803:	
 11613  1082  3001               	movlw	1
 11614  1083                     u7695:	
 11615  1083  36A1               	lsrf	___lwdiv@divisor+1,f
 11616  1084  0CA0               	rrf	___lwdiv@divisor,f
 11617  1085  0B89               	decfsz	9,f
 11618  1086  2883               	goto	u7695
 11619  1087  3001               	movlw	1
 11620  1088  02A7               	subwf	___lwdiv@counter,f
 11621  1089  1D03               	btfss	3,2
 11622  108A  2870               	goto	l7797
 11623  108B                     l7807:	
 11624  108B  0826               	movf	___lwdiv@quotient+1,w
 11625  108C  01A1               	clrf	?___lwdiv+1
 11626  108D  07A1               	addwf	?___lwdiv+1,f
 11627  108E  0825               	movf	___lwdiv@quotient,w
 11628  108F  01A0               	clrf	?___lwdiv
 11629  1090  07A0               	addwf	?___lwdiv,f
 11630  1091  0008               	return
 11631  1092                     __end_of___lwdiv:	
 11632                           
 11633                           	psect	text69
 11634  18C3                     __ptext69:	
 11635 ;; *************** function _Load_Initialization *****************
 11636 ;; Defined at:
 11637 ;;		line 9 in file "../src/OverLoad_B1.c"
 11638 ;; Parameters:    Size  Location     Type
 11639 ;;		None
 11640 ;; Auto vars:     Size  Location     Type
 11641 ;;		None
 11642 ;; Return value:  Size  Location     Type
 11643 ;;		None               void
 11644 ;; Registers used:
 11645 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11646 ;; Tracked objects:
 11647 ;;		On entry : 0/0
 11648 ;;		On exit  : 0/0
 11649 ;;		Unchanged: 0/0
 11650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11651 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11652 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11653 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11654 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11655 ;;Total ram usage:        0 bytes
 11656 ;; Hardware stack levels used:    1
 11657 ;; Hardware stack levels required when called:    6
 11658 ;; This function calls:
 11659 ;;		_setLoad_AH_AL_Restore
 11660 ;; This function is called by:
 11661 ;;		_main
 11662 ;; This function uses a non-reentrant model
 11663 ;;
 11664                           
 11665                           
 11666                           ;psect for function _Load_Initialization
 11667  18C3                     _Load_Initialization:	
 11668                           
 11669                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11670                           
 11671                           ;incstack = 0
 11672                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11673  18C3  319C  24C3         	fcall	_setLoad_AH_AL_Restore
 11674  18C5  0008               	return
 11675  18C6                     __end_of_Load_Initialization:	
 11676                           
 11677                           	psect	text70
 11678  1CC3                     __ptext70:	
 11679 ;; *************** function _setLoad_AH_AL_Restore *****************
 11680 ;; Defined at:
 11681 ;;		line 292 in file "../src/OverLoad_B1.c"
 11682 ;; Parameters:    Size  Location     Type
 11683 ;;		None
 11684 ;; Auto vars:     Size  Location     Type
 11685 ;;  i               1    1[BANK0 ] unsigned char 
 11686 ;; Return value:  Size  Location     Type
 11687 ;;		None               void
 11688 ;; Registers used:
 11689 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11690 ;; Tracked objects:
 11691 ;;		On entry : 0/0
 11692 ;;		On exit  : 0/0
 11693 ;;		Unchanged: 0/0
 11694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11696 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11697 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11698 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11699 ;;Total ram usage:        2 bytes
 11700 ;; Hardware stack levels used:    1
 11701 ;; Hardware stack levels required when called:    5
 11702 ;; This function calls:
 11703 ;;		Nothing
 11704 ;; This function is called by:
 11705 ;;		_Load_Initialization
 11706 ;;		_Load_Main
 11707 ;; This function uses a non-reentrant model
 11708 ;;
 11709                           
 11710                           
 11711                           ;psect for function _setLoad_AH_AL_Restore
 11712  1CC3                     _setLoad_AH_AL_Restore:	
 11713                           
 11714                           ;OverLoad_B1.c: 293: char i;
 11715                           ;OverLoad_B1.c: 294: for (i = 0; i < 5; i++) {
 11716                           
 11717                           ;incstack = 0
 11718                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11719  1CC3  0020               	movlb	0	; select bank0
 11720  1CC4  01A1               	clrf	setLoad_AH_AL_Restore@i
 11721  1CC5                     L9:	
 11722  1CC5  3005               	movlw	5
 11723  1CC6  0221               	subwf	setLoad_AH_AL_Restore@i,w
 11724  1CC7  1803               	btfsc	3,0
 11725  1CC8  0008               	return
 11726                           
 11727                           ;OverLoad_B1.c: 295: Load.AH[i] = 0;
 11728  1CC9  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11729  1CCA  3E4A               	addlw	(_Load+11)& (0+255)
 11730  1CCB  0086               	movwf	6
 11731  1CCC  3001               	movlw	1	; select bank2/3
 11732  1CCD  0087               	movwf	7
 11733  1CCE  3000               	movlw	0
 11734  1CCF  3FC0               	movwi [0]fsr1
 11735  1CD0  3FC1               	movwi [1]fsr1
 11736                           
 11737                           ;OverLoad_B1.c: 296: Load.AL[i] = 0xffff;
 11738  1CD1  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11739  1CD2  3E54               	addlw	(_Load+21)& (0+255)
 11740  1CD3  0086               	movwf	6
 11741  1CD4  3001               	movlw	1	; select bank2/3
 11742  1CD5  0087               	movwf	7
 11743  1CD6  30FF               	movlw	255
 11744  1CD7  3FC0               	movwi [0]fsr1
 11745  1CD8  30FF               	movlw	255
 11746  1CD9  3FC1               	movwi [1]fsr1
 11747  1CDA  3001               	movlw	1
 11748  1CDB  00A0               	movwf	??_setLoad_AH_AL_Restore
 11749  1CDC  0820               	movf	??_setLoad_AH_AL_Restore,w
 11750  1CDD  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 11751  1CDE  2CC5               	goto	L9
 11752  1CDF                     __end_of_setLoad_AH_AL_Restore:	
 11753                           
 11754                           	psect	text71
 11755  19B6                     __ptext71:	
 11756 ;; *************** function _LED_Main *****************
 11757 ;; Defined at:
 11758 ;;		line 47 in file "../src/LED_B1.c"
 11759 ;; Parameters:    Size  Location     Type
 11760 ;;		None
 11761 ;; Auto vars:     Size  Location     Type
 11762 ;;		None
 11763 ;; Return value:  Size  Location     Type
 11764 ;;		None               void
 11765 ;; Registers used:
 11766 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11767 ;; Tracked objects:
 11768 ;;		On entry : 0/0
 11769 ;;		On exit  : 0/0
 11770 ;;		Unchanged: 0/0
 11771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11775 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11776 ;;Total ram usage:        0 bytes
 11777 ;; Hardware stack levels used:    1
 11778 ;; Hardware stack levels required when called:    7
 11779 ;; This function calls:
 11780 ;;		_setLED_Main
 11781 ;; This function is called by:
 11782 ;;		_main
 11783 ;; This function uses a non-reentrant model
 11784 ;;
 11785                           
 11786                           
 11787                           ;psect for function _LED_Main
 11788  19B6                     _LED_Main:	
 11789                           
 11790                           ;LED_B1.c: 58: setLED_Main(1);
 11791                           
 11792                           ;incstack = 0
 11793                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11794  19B6  3001               	movlw	1
 11795  19B7  3192  223F  3199   	fcall	_setLED_Main
 11796                           
 11797                           ;LED_B1.c: 61: setLED_Main(2);
 11798  19BA  3002               	movlw	2
 11799  19BB  3192  223F  3199   	fcall	_setLED_Main
 11800                           
 11801                           ;LED_B1.c: 67: setLED_Main(99);
 11802  19BE  3063               	movlw	99
 11803  19BF  3192  223F         	fcall	_setLED_Main
 11804  19C1  0008               	return
 11805  19C2                     __end_of_LED_Main:	
 11806                           
 11807                           	psect	text72
 11808  123F                     __ptext72:	
 11809 ;; *************** function _setLED_Main *****************
 11810 ;; Defined at:
 11811 ;;		line 229 in file "../src/LED_B1.c"
 11812 ;; Parameters:    Size  Location     Type
 11813 ;;  led             1    wreg     unsigned char 
 11814 ;; Auto vars:     Size  Location     Type
 11815 ;;  led             1    4[BANK0 ] unsigned char 
 11816 ;; Return value:  Size  Location     Type
 11817 ;;		None               void
 11818 ;; Registers used:
 11819 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11820 ;; Tracked objects:
 11821 ;;		On entry : 0/0
 11822 ;;		On exit  : 0/0
 11823 ;;		Unchanged: 0/0
 11824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11825 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11826 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11827 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11828 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11829 ;;Total ram usage:        3 bytes
 11830 ;; Hardware stack levels used:    1
 11831 ;; Hardware stack levels required when called:    6
 11832 ;; This function calls:
 11833 ;;		_LedPointSelect
 11834 ;; This function is called by:
 11835 ;;		_LED_Main
 11836 ;; This function uses a non-reentrant model
 11837 ;;
 11838                           
 11839                           
 11840                           ;psect for function _setLED_Main
 11841  123F                     _setLED_Main:	
 11842                           
 11843                           ;incstack = 0
 11844                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11845                           ;setLED_Main@led stored from wreg
 11846  123F  0020               	movlb	0	; select bank0
 11847  1240  00A4               	movwf	setLED_Main@led
 11848                           
 11849                           ;LED_B1.c: 230: LedPointSelect(led);
 11850  1241  0824               	movf	setLED_Main@led,w
 11851  1242  319D  2575  3192   	fcall	_LedPointSelect
 11852                           
 11853                           ;LED_B1.c: 231: if (LED->GO == 1) {
 11854  1245  0021               	movlb	1	; select bank1
 11855  1246  0857               	movf	_LED^(0+128),w
 11856  1247  0086               	movwf	6
 11857  1248  3001               	movlw	1	; select bank2/3
 11858  1249  0087               	movwf	7
 11859  124A  1C81               	btfss	1,1
 11860  124B  0008               	return
 11861                           
 11862                           ;LED_B1.c: 232: LED->Time++;
 11863  124C  0A57               	incf	_LED^(0+128),w
 11864  124D  0086               	movwf	6
 11865  124E  3001               	movlw	1	; select bank2/3
 11866  124F  0087               	movwf	7
 11867  1250  3001               	movlw	1
 11868  1251  0781               	addwf	1,f
 11869  1252  3141               	addfsr 1,1
 11870  1253  1803               	skipnc
 11871  1254  0A81               	incf	1,f
 11872                           
 11873                           ;LED_B1.c: 233: if (LED->Time >= (500 / 20)) {
 11874  1255  0A57               	incf	_LED^(0+128),w
 11875  1256  0086               	movwf	6
 11876  1257  3001               	movlw	1	; select bank2/3
 11877  1258  0087               	movwf	7
 11878  1259  3F40               	moviw [0]fsr1
 11879  125A  0020               	movlb	0	; select bank0
 11880  125B  00A2               	movwf	??_setLED_Main
 11881  125C  3F41               	moviw [1]fsr1
 11882  125D  00A3               	movwf	??_setLED_Main+1
 11883  125E  3000               	movlw	0
 11884  125F  0223               	subwf	??_setLED_Main+1,w
 11885  1260  3019               	movlw	25
 11886  1261  1903               	skipnz
 11887  1262  0222               	subwf	??_setLED_Main,w
 11888  1263  1C03               	skipc
 11889  1264  0008               	return
 11890                           
 11891                           ;LED_B1.c: 234: LED->Time = 0;
 11892  1265  0021               	movlb	1	; select bank1
 11893  1266  0A57               	incf	_LED^(0+128),w
 11894  1267  0086               	movwf	6
 11895  1268  3001               	movlw	1	; select bank2/3
 11896  1269  0087               	movwf	7
 11897  126A  3000               	movlw	0
 11898  126B  3FC0               	movwi [0]fsr1
 11899  126C  3FC1               	movwi [1]fsr1
 11900                           
 11901                           ;LED_B1.c: 237: if (led == 1) {
 11902  126D  0020               	movlb	0	; select bank0
 11903  126E  0824               	movf	setLED_Main@led,w
 11904  126F  3A01               	xorlw	1
 11905                           
 11906                           ;LED_B1.c: 238: RA3 = RA3 == 1 ? 0 : 1;
 11907  1270  3008               	movlw	8
 11908  1271  1903               	btfsc	3,2
 11909  1272  068C               	xorwf	12,f
 11910                           
 11911                           ;LED_B1.c: 239: }
 11912                           ;LED_B1.c: 242: if (led == 2) {
 11913  1273  0824               	movf	setLED_Main@led,w
 11914  1274  3A02               	xorlw	2
 11915  1275  1D03               	skipz
 11916  1276  2A79               	goto	l1172
 11917                           
 11918                           ;LED_B1.c: 243: RC7 = RC7 == 1 ? 0 : 1;
 11919  1277  3080               	movlw	128
 11920  1278  068E               	xorwf	14,f
 11921  1279                     l1172:	
 11922                           
 11923                           ;LED_B1.c: 244: }
 11924                           ;LED_B1.c: 252: if (led == 99) {
 11925  1279  0824               	movf	setLED_Main@led,w
 11926  127A  3A63               	xorlw	99
 11927  127B  1D03               	skipz
 11928  127C  0008               	return
 11929                           
 11930                           ;LED_B1.c: 253: RB5 = RB5 == 1 ? 0 : 1;
 11931  127D  3020               	movlw	32
 11932  127E  068D               	xorwf	13,f
 11933  127F  0008               	return
 11934  1280                     __end_of_setLED_Main:	
 11935                           
 11936                           	psect	text73
 11937  19AA                     __ptext73:	
 11938 ;; *************** function _LED_Initialization *****************
 11939 ;; Defined at:
 11940 ;;		line 31 in file "../src/LED_B1.c"
 11941 ;; Parameters:    Size  Location     Type
 11942 ;;		None
 11943 ;; Auto vars:     Size  Location     Type
 11944 ;;		None
 11945 ;; Return value:  Size  Location     Type
 11946 ;;		None               void
 11947 ;; Registers used:
 11948 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11949 ;; Tracked objects:
 11950 ;;		On entry : 0/0
 11951 ;;		On exit  : 0/0
 11952 ;;		Unchanged: 0/0
 11953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11954 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11955 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11956 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11957 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11958 ;;Total ram usage:        0 bytes
 11959 ;; Hardware stack levels used:    1
 11960 ;; Hardware stack levels required when called:    8
 11961 ;; This function calls:
 11962 ;;		_setLED_Initialization
 11963 ;; This function is called by:
 11964 ;;		_main
 11965 ;; This function uses a non-reentrant model
 11966 ;;
 11967                           
 11968                           
 11969                           ;psect for function _LED_Initialization
 11970  19AA                     _LED_Initialization:	
 11971                           
 11972                           ;LED_B1.c: 33: setLED_Initialization(1);
 11973                           
 11974                           ;incstack = 0
 11975                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11976  19AA  3001               	movlw	1
 11977  19AB  319A  227B  3199   	fcall	_setLED_Initialization
 11978                           
 11979                           ;LED_B1.c: 36: setLED_Initialization(2);
 11980  19AE  3002               	movlw	2
 11981  19AF  319A  227B  3199   	fcall	_setLED_Initialization
 11982                           
 11983                           ;LED_B1.c: 42: setLED_Initialization(99);
 11984  19B2  3063               	movlw	99
 11985  19B3  319A  227B         	fcall	_setLED_Initialization
 11986  19B5  0008               	return
 11987  19B6                     __end_of_LED_Initialization:	
 11988                           
 11989                           	psect	text74
 11990  1A7B                     __ptext74:	
 11991 ;; *************** function _setLED_Initialization *****************
 11992 ;; Defined at:
 11993 ;;		line 74 in file "../src/LED_B1.c"
 11994 ;; Parameters:    Size  Location     Type
 11995 ;;  led             1    wreg     unsigned char 
 11996 ;; Auto vars:     Size  Location     Type
 11997 ;;  led             1    4[BANK0 ] unsigned char 
 11998 ;; Return value:  Size  Location     Type
 11999 ;;		None               void
 12000 ;; Registers used:
 12001 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12002 ;; Tracked objects:
 12003 ;;		On entry : 0/0
 12004 ;;		On exit  : 0/0
 12005 ;;		Unchanged: 0/0
 12006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12008 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12010 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12011 ;;Total ram usage:        1 bytes
 12012 ;; Hardware stack levels used:    1
 12013 ;; Hardware stack levels required when called:    7
 12014 ;; This function calls:
 12015 ;;		_LedPointSelect
 12016 ;;		_setLED
 12017 ;; This function is called by:
 12018 ;;		_LED_Initialization
 12019 ;; This function uses a non-reentrant model
 12020 ;;
 12021                           
 12022                           
 12023                           ;psect for function _setLED_Initialization
 12024  1A7B                     _setLED_Initialization:	
 12025                           
 12026                           ;incstack = 0
 12027                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12028                           ;setLED_Initialization@led stored from wreg
 12029  1A7B  0020               	movlb	0	; select bank0
 12030  1A7C  00A4               	movwf	setLED_Initialization@led
 12031                           
 12032                           ;LED_B1.c: 75: LedPointSelect(led);
 12033  1A7D  0824               	movf	setLED_Initialization@led,w
 12034  1A7E  319D  2575  319A   	fcall	_LedPointSelect
 12035                           
 12036                           ;LED_B1.c: 76: LED->Enable = 1;
 12037  1A81  0021               	movlb	1	; select bank1
 12038  1A82  0857               	movf	_LED^(0+128),w
 12039  1A83  0086               	movwf	6
 12040  1A84  3001               	movlw	1	; select bank2/3
 12041  1A85  0087               	movwf	7
 12042  1A86  1401               	bsf	1,0
 12043                           
 12044                           ;LED_B1.c: 77: setLED(led, 0);
 12045  1A87  0020               	movlb	0	; select bank0
 12046  1A88  01A2               	clrf	setLED@command
 12047  1A89  0824               	movf	setLED_Initialization@led,w
 12048  1A8A  3193  230E         	fcall	_setLED
 12049  1A8C  0008               	return
 12050  1A8D                     __end_of_setLED_Initialization:	
 12051                           
 12052                           	psect	text75
 12053  11FE                     __ptext75:	
 12054 ;; *************** function _Flash_Memory_Main *****************
 12055 ;; Defined at:
 12056 ;;		line 976 in file "../src/MCU_B1.c"
 12057 ;; Parameters:    Size  Location     Type
 12058 ;;		None
 12059 ;; Auto vars:     Size  Location     Type
 12060 ;;  key_Status      1    7[BANK0 ] unsigned char 
 12061 ;; Return value:  Size  Location     Type
 12062 ;;		None               void
 12063 ;; Registers used:
 12064 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12065 ;; Tracked objects:
 12066 ;;		On entry : 0/0
 12067 ;;		On exit  : 0/0
 12068 ;;		Unchanged: 0/0
 12069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12071 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12072 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12073 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12074 ;;Total ram usage:        3 bytes
 12075 ;; Hardware stack levels used:    1
 12076 ;; Hardware stack levels required when called:    8
 12077 ;; This function calls:
 12078 ;;		_Flash_Memory_Modify
 12079 ;;		_getAll_Sw_KeyStatus
 12080 ;;		_getMain_All_LightsStatus
 12081 ;; This function is called by:
 12082 ;;		_main
 12083 ;; This function uses a non-reentrant model
 12084 ;;
 12085                           
 12086                           
 12087                           ;psect for function _Flash_Memory_Main
 12088  11FE                     _Flash_Memory_Main:	
 12089                           
 12090                           ;MCU_B1.c: 977: char key_Status = 0;
 12091                           
 12092                           ;incstack = 0
 12093                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12094  11FE  0020               	movlb	0	; select bank0
 12095  11FF  01A7               	clrf	Flash_Memory_Main@key_Status
 12096                           
 12097                           ;MCU_B1.c: 979: key_Status = getAll_Sw_KeyStatus();
 12098  1200  319A  2224  3191   	fcall	_getAll_Sw_KeyStatus
 12099  1203  0020               	movlb	0	; select bank0
 12100  1204  00A6               	movwf	??_Flash_Memory_Main
 12101  1205  0826               	movf	??_Flash_Memory_Main,w
 12102  1206  00A7               	movwf	Flash_Memory_Main@key_Status
 12103                           
 12104                           ;MCU_B1.c: 981: if (Memory.Modify == 1) {
 12105  1207  0024               	movlb	4	; select bank4
 12106  1208  1C44               	btfss	(_Memory^(0+512)+36),0
 12107  1209  0008               	return
 12108                           
 12109                           ;MCU_B1.c: 982: Memory.GO = getMain_All_LightsStatus() == 0 && key_Status == 0 ? 1 : 0;
 12110  120A  0020               	movlb	0	; select bank0
 12111  120B  01A8               	clrf	_Flash_Memory_Main$3310
 12112  120C  319A  22E9  3191   	fcall	_getMain_All_LightsStatus
 12113  120F  3800               	iorlw	0
 12114  1210  1D03               	skipz
 12115  1211  2A18               	goto	l8669
 12116  1212  0020               	movlb	0	; select bank0
 12117  1213  08A7               	movf	Flash_Memory_Main@key_Status,f
 12118  1214  1D03               	skipz
 12119  1215  2A18               	goto	l8669
 12120  1216  01A8               	clrf	_Flash_Memory_Main$3310
 12121  1217  0AA8               	incf	_Flash_Memory_Main$3310,f
 12122  1218                     l8669:	
 12123  1218  0020               	movlb	0	; select bank0
 12124  1219  0828               	movf	_Flash_Memory_Main$3310,w
 12125  121A  0024               	movlb	4	; select bank4
 12126  121B  10C4               	bcf	(_Memory^(0+512)+36),1
 12127  121C  1D03               	skipz
 12128  121D  14C4               	bsf	(_Memory^(0+512)+36),1
 12129                           
 12130                           ;MCU_B1.c: 983: if (Memory.GO == 1) {
 12131  121E  1CC4               	btfss	(_Memory^(0+512)+36),1
 12132  121F  2A39               	goto	l1445
 12133                           
 12134                           ;MCU_B1.c: 984: Memory.Runtime = 1;
 12135  1220  15C4               	bsf	(_Memory^(0+512)+36),3
 12136                           
 12137                           ;MCU_B1.c: 985: Memory.Time++;
 12138  1221  3001               	movlw	1
 12139  1222  07C2               	addwf	(_Memory^(0+512)+34),f
 12140  1223  3000               	movlw	0
 12141  1224  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 12142                           
 12143                           ;MCU_B1.c: 986: if (Memory.Time == (200 / 20)) {
 12144  1225  3022               	movlw	34
 12145  1226  3E20               	addlw	_Memory& (0+255)
 12146  1227  0086               	movwf	6
 12147  1228  3002               	movlw	2	; select bank4/5
 12148  1229  0087               	movwf	7
 12149  122A  3F40               	moviw [0]fsr1
 12150  122B  3A0A               	xorlw	10
 12151  122C  1D03               	skipz
 12152  122D  2A30               	goto	u9325
 12153  122E  3F41               	moviw [1]fsr1
 12154  122F  3A00               	xorlw	0
 12155  1230                     u9325:	
 12156  1230  1D03               	skipz
 12157  1231  0008               	return
 12158                           
 12159                           ;MCU_B1.c: 987: Memory.Time = 0;
 12160  1232  01C2               	clrf	(_Memory^(0+512)+34)
 12161  1233  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12162                           
 12163                           ;MCU_B1.c: 988: Memory.Modify = 0;
 12164  1234  1044               	bcf	(_Memory^(0+512)+36),0
 12165                           
 12166                           ;MCU_B1.c: 989: Memory.GO = 0;
 12167  1235  10C4               	bcf	(_Memory^(0+512)+36),1
 12168                           
 12169                           ;MCU_B1.c: 990: Flash_Memory_Modify();
 12170  1236  318B  230F         	fcall	_Flash_Memory_Modify
 12171                           
 12172                           ;MCU_B1.c: 991: }
 12173                           ;MCU_B1.c: 992: } else {
 12174  1238  0008               	return
 12175  1239                     l1445:	
 12176                           
 12177                           ;MCU_B1.c: 993: if (Memory.Runtime == 1) {
 12178  1239  1DC4               	btfss	(_Memory^(0+512)+36),3
 12179  123A  0008               	return
 12180                           
 12181                           ;MCU_B1.c: 994: Memory.Runtime = 0;
 12182  123B  11C4               	bcf	(_Memory^(0+512)+36),3
 12183                           
 12184                           ;MCU_B1.c: 995: Memory.Time = 0;
 12185  123C  01C2               	clrf	(_Memory^(0+512)+34)
 12186  123D  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12187  123E  0008               	return
 12188  123F                     __end_of_Flash_Memory_Main:	
 12189                           
 12190                           	psect	text76
 12191  1A24                     __ptext76:	
 12192 ;; *************** function _getAll_Sw_KeyStatus *****************
 12193 ;; Defined at:
 12194 ;;		line 278 in file "../src/Switch_B1.c"
 12195 ;; Parameters:    Size  Location     Type
 12196 ;;		None
 12197 ;; Auto vars:     Size  Location     Type
 12198 ;;  status          1    1[BANK0 ] unsigned char 
 12199 ;; Return value:  Size  Location     Type
 12200 ;;                  1    wreg      unsigned char 
 12201 ;; Registers used:
 12202 ;;		wreg, status,2
 12203 ;; Tracked objects:
 12204 ;;		On entry : 0/0
 12205 ;;		On exit  : 0/0
 12206 ;;		Unchanged: 0/0
 12207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12209 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12210 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12211 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12212 ;;Total ram usage:        3 bytes
 12213 ;; Hardware stack levels used:    1
 12214 ;; Hardware stack levels required when called:    5
 12215 ;; This function calls:
 12216 ;;		Nothing
 12217 ;; This function is called by:
 12218 ;;		_Flash_Memory_Main
 12219 ;; This function uses a non-reentrant model
 12220 ;;
 12221                           
 12222                           
 12223                           ;psect for function _getAll_Sw_KeyStatus
 12224  1A24                     _getAll_Sw_KeyStatus:	
 12225                           
 12226                           ;Switch_B1.c: 279: char status = 0;
 12227                           
 12228                           ;incstack = 0
 12229                           ; Regs used in _getAll_Sw_KeyStatus: [wreg+status,2]
 12230  1A24  0020               	movlb	0	; select bank0
 12231  1A25  01A1               	clrf	getAll_Sw_KeyStatus@status
 12232                           
 12233                           ;Switch_B1.c: 293: status = RA0 == 1 || RB1 == 1 || RA6 == 1 || RA4 == 1 ? 1 : 0;
 12234  1A26  01A2               	clrf	_getAll_Sw_KeyStatus$6173
 12235  1A27  0AA2               	incf	_getAll_Sw_KeyStatus$6173,f
 12236  1A28  1C0C               	btfss	12,0	;volatile
 12237  1A29  188D               	btfsc	13,1	;volatile
 12238  1A2A  2A2F               	goto	l8225
 12239  1A2B  1F0C               	btfss	12,6	;volatile
 12240  1A2C  1A0C               	btfsc	12,4	;volatile
 12241  1A2D  2A2F               	goto	l8225
 12242  1A2E  01A2               	clrf	_getAll_Sw_KeyStatus$6173
 12243  1A2F                     l8225:	
 12244  1A2F  0822               	movf	_getAll_Sw_KeyStatus$6173,w
 12245  1A30  00A0               	movwf	??_getAll_Sw_KeyStatus
 12246  1A31  0820               	movf	??_getAll_Sw_KeyStatus,w
 12247  1A32  00A1               	movwf	getAll_Sw_KeyStatus@status
 12248                           
 12249                           ;Switch_B1.c: 306: return status;
 12250  1A33  0821               	movf	getAll_Sw_KeyStatus@status,w
 12251  1A34  0008               	return
 12252  1A35                     __end_of_getAll_Sw_KeyStatus:	
 12253                           
 12254                           	psect	text77
 12255  0B0F                     __ptext77:	
 12256 ;; *************** function _Flash_Memory_Modify *****************
 12257 ;; Defined at:
 12258 ;;		line 1053 in file "../src/MCU_B1.c"
 12259 ;; Parameters:    Size  Location     Type
 12260 ;;		None
 12261 ;; Auto vars:     Size  Location     Type
 12262 ;;  i               1    5[BANK0 ] unsigned char 
 12263 ;; Return value:  Size  Location     Type
 12264 ;;		None               void
 12265 ;; Registers used:
 12266 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12267 ;; Tracked objects:
 12268 ;;		On entry : 0/0
 12269 ;;		On exit  : 0/0
 12270 ;;		Unchanged: 0/0
 12271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12273 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12274 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12275 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12276 ;;Total ram usage:        2 bytes
 12277 ;; Hardware stack levels used:    1
 12278 ;; Hardware stack levels required when called:    7
 12279 ;; This function calls:
 12280 ;;		_Flash_Memory_Erasing
 12281 ;;		_Flash_Memory_Read
 12282 ;;		_Flash_Memory_Write
 12283 ;;		_setMemory_Data
 12284 ;; This function is called by:
 12285 ;;		_Flash_Memory_Main
 12286 ;; This function uses a non-reentrant model
 12287 ;;
 12288                           
 12289                           
 12290                           ;psect for function _Flash_Memory_Modify
 12291  0B0F                     _Flash_Memory_Modify:	
 12292                           
 12293                           ;MCU_B1.c: 1054: char i = 0;
 12294                           
 12295                           ;incstack = 0
 12296                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12297  0B0F  0020               	movlb	0	; select bank0
 12298  0B10  01A5               	clrf	Flash_Memory_Modify@i
 12299                           
 12300                           ;MCU_B1.c: 1055: for (i = 0; i < 32; i++) {
 12301  0B11  01A5               	clrf	Flash_Memory_Modify@i
 12302  0B12  3020               	movlw	32
 12303  0B13  0225               	subwf	Flash_Memory_Modify@i,w
 12304  0B14  1803               	btfsc	3,0
 12305  0B15  2B2B               	goto	l8243
 12306  0B16                     l8237:	
 12307                           
 12308                           ;MCU_B1.c: 1056: Memory.Data[i] = Flash_Memory_Read(i);
 12309  0B16  0825               	movf	Flash_Memory_Modify@i,w
 12310  0B17  319C  2459  318B   	fcall	_Flash_Memory_Read
 12311  0B1A  0020               	movlb	0	; select bank0
 12312  0B1B  00A4               	movwf	??_Flash_Memory_Modify
 12313  0B1C  0825               	movf	Flash_Memory_Modify@i,w
 12314  0B1D  3E20               	addlw	_Memory& (0+255)
 12315  0B1E  0086               	movwf	6
 12316  0B1F  3002               	movlw	2	; select bank4/5
 12317  0B20  0087               	movwf	7
 12318  0B21  0824               	movf	??_Flash_Memory_Modify,w
 12319  0B22  0081               	movwf	1
 12320  0B23  3001               	movlw	1
 12321  0B24  00A4               	movwf	??_Flash_Memory_Modify
 12322  0B25  0824               	movf	??_Flash_Memory_Modify,w
 12323  0B26  07A5               	addwf	Flash_Memory_Modify@i,f
 12324  0B27  3020               	movlw	32
 12325  0B28  0225               	subwf	Flash_Memory_Modify@i,w
 12326  0B29  1C03               	skipc
 12327  0B2A  2B16               	goto	l8237
 12328  0B2B                     l8243:	
 12329                           
 12330                           ;MCU_B1.c: 1057: }
 12331                           ;MCU_B1.c: 1058: setMemory_Data(0, product->Data[12]);
 12332  0B2B  0021               	movlb	1	; select bank1
 12333  0B2C  086F               	movf	_product^(0+128),w
 12334  0B2D  0086               	movwf	6
 12335  0B2E  3002               	movlw	2	; select bank4/5
 12336  0B2F  0087               	movwf	7
 12337  0B30  3002               	movlw	2	; select bank4/5
 12338  0B31  3F4C               	moviw [12]fsr1
 12339  0B32  0020               	movlb	0	; select bank0
 12340  0B33  00A0               	movwf	setMemory_Data@data
 12341  0B34  3000               	movlw	0
 12342  0B35  3199  2192  318B   	fcall	_setMemory_Data
 12343                           
 12344                           ;MCU_B1.c: 1059: setMemory_Data(1, product->Data[13]);
 12345  0B38  0021               	movlb	1	; select bank1
 12346  0B39  086F               	movf	_product^(0+128),w
 12347  0B3A  0086               	movwf	6
 12348  0B3B  3002               	movlw	2	; select bank4/5
 12349  0B3C  0087               	movwf	7
 12350  0B3D  3002               	movlw	2	; select bank4/5
 12351  0B3E  3F4D               	moviw [13]fsr1
 12352  0B3F  0020               	movlb	0	; select bank0
 12353  0B40  00A0               	movwf	setMemory_Data@data
 12354  0B41  3001               	movlw	1
 12355  0B42  3199  2192  318B   	fcall	_setMemory_Data
 12356                           
 12357                           ;MCU_B1.c: 1060: setMemory_Data(2, product->Data[14]);
 12358  0B45  0021               	movlb	1	; select bank1
 12359  0B46  086F               	movf	_product^(0+128),w
 12360  0B47  0086               	movwf	6
 12361  0B48  3002               	movlw	2	; select bank4/5
 12362  0B49  0087               	movwf	7
 12363  0B4A  3002               	movlw	2	; select bank4/5
 12364  0B4B  3F4E               	moviw [14]fsr1
 12365  0B4C  0020               	movlb	0	; select bank0
 12366  0B4D  00A0               	movwf	setMemory_Data@data
 12367  0B4E  3002               	movlw	2
 12368  0B4F  3199  2192  318B   	fcall	_setMemory_Data
 12369                           
 12370                           ;MCU_B1.c: 1062: setMemory_Data(3, product->Data[21]);
 12371  0B52  0021               	movlb	1	; select bank1
 12372  0B53  086F               	movf	_product^(0+128),w
 12373  0B54  0086               	movwf	6
 12374  0B55  3002               	movlw	2	; select bank4/5
 12375  0B56  0087               	movwf	7
 12376  0B57  3002               	movlw	2	; select bank4/5
 12377  0B58  3F55               	moviw [21]fsr1
 12378  0B59  0020               	movlb	0	; select bank0
 12379  0B5A  00A0               	movwf	setMemory_Data@data
 12380  0B5B  3003               	movlw	3
 12381  0B5C  3199  2192  318B   	fcall	_setMemory_Data
 12382                           
 12383                           ;MCU_B1.c: 1063: setMemory_Data(4, product->Data[22]);
 12384  0B5F  0021               	movlb	1	; select bank1
 12385  0B60  086F               	movf	_product^(0+128),w
 12386  0B61  0086               	movwf	6
 12387  0B62  3002               	movlw	2	; select bank4/5
 12388  0B63  0087               	movwf	7
 12389  0B64  3002               	movlw	2	; select bank4/5
 12390  0B65  3F56               	moviw [22]fsr1
 12391  0B66  0020               	movlb	0	; select bank0
 12392  0B67  00A0               	movwf	setMemory_Data@data
 12393  0B68  3004               	movlw	4
 12394  0B69  3199  2192  318B   	fcall	_setMemory_Data
 12395                           
 12396                           ;MCU_B1.c: 1064: setMemory_Data(5, product->Data[23]);
 12397  0B6C  0021               	movlb	1	; select bank1
 12398  0B6D  086F               	movf	_product^(0+128),w
 12399  0B6E  0086               	movwf	6
 12400  0B6F  3002               	movlw	2	; select bank4/5
 12401  0B70  0087               	movwf	7
 12402  0B71  3002               	movlw	2	; select bank4/5
 12403  0B72  3F57               	moviw [23]fsr1
 12404  0B73  0020               	movlb	0	; select bank0
 12405  0B74  00A0               	movwf	setMemory_Data@data
 12406  0B75  3005               	movlw	5
 12407  0B76  3199  2192  318B   	fcall	_setMemory_Data
 12408                           
 12409                           ;MCU_B1.c: 1065: if (myMain.SaveDimmer == 1) {
 12410  0B79  0021               	movlb	1	; select bank1
 12411  0B7A  1EB8               	btfss	(_myMain^(0+128)+10),5
 12412  0B7B  2B86               	goto	l8251
 12413                           
 12414                           ;MCU_B1.c: 1066: myMain.SaveDimmer = 0;
 12415  0B7C  12B8               	bcf	(_myMain^(0+128)+10),5
 12416                           
 12417                           ;MCU_B1.c: 1067: setMemory_Data(30, 0xaa);
 12418  0B7D  30AA               	movlw	170
 12419  0B7E  0020               	movlb	0	; select bank0
 12420  0B7F  00A4               	movwf	??_Flash_Memory_Modify
 12421  0B80  0824               	movf	??_Flash_Memory_Modify,w
 12422  0B81  00A0               	movwf	setMemory_Data@data
 12423  0B82  301E               	movlw	30
 12424  0B83  3199  2192  318B   	fcall	_setMemory_Data
 12425  0B86                     l8251:	
 12426                           
 12427                           ;MCU_B1.c: 1068: }
 12428                           ;MCU_B1.c: 1070: if (Memory.LoopSave == 1) {
 12429  0B86  0024               	movlb	4	; select bank4
 12430  0B87  1D44               	btfss	(_Memory^(0+512)+36),2
 12431  0B88  2B8D               	goto	l1469
 12432                           
 12433                           ;MCU_B1.c: 1071: Memory.LoopSave = 0;
 12434  0B89  1144               	bcf	(_Memory^(0+512)+36),2
 12435                           
 12436                           ;MCU_B1.c: 1072: myMain.FirstOpen = 0;
 12437  0B8A  0021               	movlb	1	; select bank1
 12438  0B8B  11AE               	bcf	_myMain^(0+128),3
 12439                           
 12440                           ;MCU_B1.c: 1073: myMain.First = 0;
 12441  0B8C  12AE               	bcf	_myMain^(0+128),5
 12442  0B8D                     l1469:	
 12443                           
 12444                           ;MCU_B1.c: 1075: }
 12445                           ;MCU_B1.c: 1076: GIE = 0;
 12446  0B8D  138B               	bcf	11,7	;volatile
 12447                           
 12448                           ;MCU_B1.c: 1077: Flash_Memory_Erasing();
 12449  0B8E  3199  219E  318B   	fcall	_Flash_Memory_Erasing
 12450                           
 12451                           ;MCU_B1.c: 1078: Flash_Memory_Write();
 12452  0B91  319F  279E         	fcall	_Flash_Memory_Write
 12453                           
 12454                           ;MCU_B1.c: 1079: GIE = 1;
 12455  0B93  178B               	bsf	11,7	;volatile
 12456  0B94  0008               	return
 12457  0B95                     __end_of_Flash_Memory_Modify:	
 12458                           
 12459                           	psect	text78
 12460  199E                     __ptext78:	
 12461 ;; *************** function _Flash_Memory_Erasing *****************
 12462 ;; Defined at:
 12463 ;;		line 1042 in file "../src/MCU_B1.c"
 12464 ;; Parameters:    Size  Location     Type
 12465 ;;		None
 12466 ;; Auto vars:     Size  Location     Type
 12467 ;;		None
 12468 ;; Return value:  Size  Location     Type
 12469 ;;		None               void
 12470 ;; Registers used:
 12471 ;;		wreg, status,2, status,0, pclath, cstack
 12472 ;; Tracked objects:
 12473 ;;		On entry : 0/0
 12474 ;;		On exit  : 0/0
 12475 ;;		Unchanged: 0/0
 12476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12478 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12480 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12481 ;;Total ram usage:        0 bytes
 12482 ;; Hardware stack levels used:    1
 12483 ;; Hardware stack levels required when called:    6
 12484 ;; This function calls:
 12485 ;;		_Flash_Memory_Unlock
 12486 ;; This function is called by:
 12487 ;;		_Flash_Memory_Modify
 12488 ;; This function uses a non-reentrant model
 12489 ;;
 12490                           
 12491                           
 12492                           ;psect for function _Flash_Memory_Erasing
 12493  199E                     _Flash_Memory_Erasing:	
 12494                           
 12495                           ;MCU_B1.c: 1043: CFGS = 0;
 12496                           
 12497                           ;incstack = 0
 12498                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12499  199E  0023               	movlb	3	; select bank3
 12500  199F  1315               	bcf	21,6	;volatile
 12501                           
 12502                           ;MCU_B1.c: 1044: PMADRH = 0x30;
 12503  19A0  3030               	movlw	48
 12504  19A1  0092               	movwf	18	;volatile
 12505                           
 12506                           ;MCU_B1.c: 1045: PMADRL = 0x00;
 12507  19A2  0191               	clrf	17	;volatile
 12508                           
 12509                           ;MCU_B1.c: 1046: FREE = 1;
 12510  19A3  1615               	bsf	21,4	;volatile
 12511                           
 12512                           ;MCU_B1.c: 1047: WREN = 1;
 12513  19A4  1515               	bsf	21,2	;volatile
 12514                           
 12515                           ;MCU_B1.c: 1048: Flash_Memory_Unlock();
 12516  19A5  3199  2145         	fcall	_Flash_Memory_Unlock
 12517                           
 12518                           ;MCU_B1.c: 1049: WREN = 0;
 12519  19A7  0023               	movlb	3	; select bank3
 12520  19A8  1115               	bcf	21,2	;volatile
 12521  19A9  0008               	return
 12522  19AA                     __end_of_Flash_Memory_Erasing:	
 12523                           
 12524                           	psect	text79
 12525  06FB                     __ptext79:	
 12526 ;; *************** function _Flash_Memory_Initialization *****************
 12527 ;; Defined at:
 12528 ;;		line 932 in file "../src/MCU_B1.c"
 12529 ;; Parameters:    Size  Location     Type
 12530 ;;		None
 12531 ;; Auto vars:     Size  Location     Type
 12532 ;;  value           1    5[BANK0 ] unsigned char 
 12533 ;; Return value:  Size  Location     Type
 12534 ;;		None               void
 12535 ;; Registers used:
 12536 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12537 ;; Tracked objects:
 12538 ;;		On entry : 0/0
 12539 ;;		On exit  : 0/0
 12540 ;;		Unchanged: 0/0
 12541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12543 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12544 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12545 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12546 ;;Total ram usage:        2 bytes
 12547 ;; Hardware stack levels used:    1
 12548 ;; Hardware stack levels required when called:    7
 12549 ;; This function calls:
 12550 ;;		_Flash_Memory_Read
 12551 ;;		_Flash_Memory_Write
 12552 ;;		_setMemory_Data
 12553 ;; This function is called by:
 12554 ;;		_main
 12555 ;; This function uses a non-reentrant model
 12556 ;;
 12557                           
 12558                           
 12559                           ;psect for function _Flash_Memory_Initialization
 12560  06FB                     _Flash_Memory_Initialization:	
 12561                           
 12562                           ;MCU_B1.c: 933: char value = 0;
 12563                           
 12564                           ;incstack = 0
 12565                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12566  06FB  0020               	movlb	0	; select bank0
 12567  06FC  01A5               	clrf	Flash_Memory_Initialization@value
 12568                           
 12569                           ;MCU_B1.c: 934: if (Flash_Memory_Read(31) == 0xaa) {
 12570  06FD  301F               	movlw	31
 12571  06FE  319C  2459  3186   	fcall	_Flash_Memory_Read
 12572  0701  3AAA               	xorlw	170
 12573  0702  1D03               	skipz
 12574  0703  2F7D               	goto	l8643
 12575                           
 12576                           ;MCU_B1.c: 935: product->Data[12] = Flash_Memory_Read(0);
 12577  0704  3000               	movlw	0
 12578  0705  319C  2459  3186   	fcall	_Flash_Memory_Read
 12579  0708  0020               	movlb	0	; select bank0
 12580  0709  00A4               	movwf	??_Flash_Memory_Initialization
 12581  070A  0021               	movlb	1	; select bank1
 12582  070B  086F               	movf	_product^(0+128),w
 12583  070C  3E0C               	addlw	12
 12584  070D  0086               	movwf	6
 12585  070E  3002               	movlw	2	; select bank4/5
 12586  070F  0087               	movwf	7
 12587  0710  0020               	movlb	0	; select bank0
 12588  0711  0824               	movf	??_Flash_Memory_Initialization,w
 12589  0712  0081               	movwf	1
 12590                           
 12591                           ;MCU_B1.c: 936: product->Data[13] = Flash_Memory_Read(1);
 12592  0713  3001               	movlw	1
 12593  0714  319C  2459  3186   	fcall	_Flash_Memory_Read
 12594  0717  0020               	movlb	0	; select bank0
 12595  0718  00A4               	movwf	??_Flash_Memory_Initialization
 12596  0719  0021               	movlb	1	; select bank1
 12597  071A  086F               	movf	_product^(0+128),w
 12598  071B  3E0D               	addlw	13
 12599  071C  0086               	movwf	6
 12600  071D  3002               	movlw	2	; select bank4/5
 12601  071E  0087               	movwf	7
 12602  071F  0020               	movlb	0	; select bank0
 12603  0720  0824               	movf	??_Flash_Memory_Initialization,w
 12604  0721  0081               	movwf	1
 12605                           
 12606                           ;MCU_B1.c: 937: product->Data[14] = Flash_Memory_Read(2);
 12607  0722  3002               	movlw	2
 12608  0723  319C  2459  3186   	fcall	_Flash_Memory_Read
 12609  0726  0020               	movlb	0	; select bank0
 12610  0727  00A4               	movwf	??_Flash_Memory_Initialization
 12611  0728  0021               	movlb	1	; select bank1
 12612  0729  086F               	movf	_product^(0+128),w
 12613  072A  3E0E               	addlw	14
 12614  072B  0086               	movwf	6
 12615  072C  3002               	movlw	2	; select bank4/5
 12616  072D  0087               	movwf	7
 12617  072E  0020               	movlb	0	; select bank0
 12618  072F  0824               	movf	??_Flash_Memory_Initialization,w
 12619  0730  0081               	movwf	1
 12620                           
 12621                           ;MCU_B1.c: 940: product->Data[21] = Flash_Memory_Read(3);
 12622  0731  3003               	movlw	3
 12623  0732  319C  2459  3186   	fcall	_Flash_Memory_Read
 12624  0735  0020               	movlb	0	; select bank0
 12625  0736  00A4               	movwf	??_Flash_Memory_Initialization
 12626  0737  0021               	movlb	1	; select bank1
 12627  0738  086F               	movf	_product^(0+128),w
 12628  0739  3E15               	addlw	21
 12629  073A  0086               	movwf	6
 12630  073B  3002               	movlw	2	; select bank4/5
 12631  073C  0087               	movwf	7
 12632  073D  0020               	movlb	0	; select bank0
 12633  073E  0824               	movf	??_Flash_Memory_Initialization,w
 12634  073F  0081               	movwf	1
 12635                           
 12636                           ;MCU_B1.c: 941: product->Data[22] = Flash_Memory_Read(4);
 12637  0740  3004               	movlw	4
 12638  0741  319C  2459  3186   	fcall	_Flash_Memory_Read
 12639  0744  0020               	movlb	0	; select bank0
 12640  0745  00A4               	movwf	??_Flash_Memory_Initialization
 12641  0746  0021               	movlb	1	; select bank1
 12642  0747  086F               	movf	_product^(0+128),w
 12643  0748  3E16               	addlw	22
 12644  0749  0086               	movwf	6
 12645  074A  3002               	movlw	2	; select bank4/5
 12646  074B  0087               	movwf	7
 12647  074C  0020               	movlb	0	; select bank0
 12648  074D  0824               	movf	??_Flash_Memory_Initialization,w
 12649  074E  0081               	movwf	1
 12650                           
 12651                           ;MCU_B1.c: 942: product->Data[23] = Flash_Memory_Read(5);
 12652  074F  3005               	movlw	5
 12653  0750  319C  2459  3186   	fcall	_Flash_Memory_Read
 12654  0753  0020               	movlb	0	; select bank0
 12655  0754  00A4               	movwf	??_Flash_Memory_Initialization
 12656  0755  0021               	movlb	1	; select bank1
 12657  0756  086F               	movf	_product^(0+128),w
 12658  0757  3E17               	addlw	23
 12659  0758  0086               	movwf	6
 12660  0759  3002               	movlw	2	; select bank4/5
 12661  075A  0087               	movwf	7
 12662  075B  0020               	movlb	0	; select bank0
 12663  075C  0824               	movf	??_Flash_Memory_Initialization,w
 12664  075D  0081               	movwf	1
 12665                           
 12666                           ;MCU_B1.c: 949: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12667  075E  0021               	movlb	1	; select bank1
 12668  075F  086F               	movf	_product^(0+128),w
 12669  0760  3E0C               	addlw	12
 12670  0761  0086               	movwf	6
 12671  0762  3002               	movlw	2	; select bank4/5
 12672  0763  0087               	movwf	7
 12673  0764  0801               	movf	1,w
 12674  0765  3AFF               	xorlw	255
 12675  0766  1D03               	skipz
 12676  0767  0008               	return
 12677  0768  086F               	movf	_product^(0+128),w
 12678  0769  3E0D               	addlw	13
 12679  076A  0086               	movwf	6
 12680  076B  3002               	movlw	2	; select bank4/5
 12681  076C  0087               	movwf	7
 12682  076D  0801               	movf	1,w
 12683  076E  3AFF               	xorlw	255
 12684  076F  1D03               	skipz
 12685  0770  0008               	return
 12686  0771  086F               	movf	_product^(0+128),w
 12687  0772  3E0E               	addlw	14
 12688  0773  0086               	movwf	6
 12689  0774  3002               	movlw	2	; select bank4/5
 12690  0775  0087               	movwf	7
 12691  0776  0801               	movf	1,w
 12692  0777  3AFF               	xorlw	255
 12693  0778  1D03               	skipz
 12694  0779  0008               	return
 12695                           
 12696                           ;MCU_B1.c: 950: myMain.FirstOpen = 1;
 12697  077A  15AE               	bsf	_myMain^(0+128),3
 12698                           
 12699                           ;MCU_B1.c: 951: myMain.First = 1;
 12700  077B  16AE               	bsf	_myMain^(0+128),5
 12701                           
 12702                           ;MCU_B1.c: 952: }
 12703                           ;MCU_B1.c: 953: } else {
 12704  077C  0008               	return
 12705  077D                     l8643:	
 12706                           
 12707                           ;MCU_B1.c: 955: setMemory_Data(0, 0xff);
 12708  077D  30FF               	movlw	255
 12709  077E  0020               	movlb	0	; select bank0
 12710  077F  00A4               	movwf	??_Flash_Memory_Initialization
 12711  0780  0824               	movf	??_Flash_Memory_Initialization,w
 12712  0781  00A0               	movwf	setMemory_Data@data
 12713  0782  3000               	movlw	0
 12714  0783  3199  2192  3186   	fcall	_setMemory_Data
 12715                           
 12716                           ;MCU_B1.c: 956: setMemory_Data(1, 0xff);
 12717  0786  30FF               	movlw	255
 12718  0787  0020               	movlb	0	; select bank0
 12719  0788  00A4               	movwf	??_Flash_Memory_Initialization
 12720  0789  0824               	movf	??_Flash_Memory_Initialization,w
 12721  078A  00A0               	movwf	setMemory_Data@data
 12722  078B  3001               	movlw	1
 12723  078C  3199  2192  3186   	fcall	_setMemory_Data
 12724                           
 12725                           ;MCU_B1.c: 957: setMemory_Data(2, 0xff);
 12726  078F  30FF               	movlw	255
 12727  0790  0020               	movlb	0	; select bank0
 12728  0791  00A4               	movwf	??_Flash_Memory_Initialization
 12729  0792  0824               	movf	??_Flash_Memory_Initialization,w
 12730  0793  00A0               	movwf	setMemory_Data@data
 12731  0794  3002               	movlw	2
 12732  0795  3199  2192  3186   	fcall	_setMemory_Data
 12733                           
 12734                           ;MCU_B1.c: 958: setMemory_Data(3, 0xff);
 12735  0798  30FF               	movlw	255
 12736  0799  0020               	movlb	0	; select bank0
 12737  079A  00A4               	movwf	??_Flash_Memory_Initialization
 12738  079B  0824               	movf	??_Flash_Memory_Initialization,w
 12739  079C  00A0               	movwf	setMemory_Data@data
 12740  079D  3003               	movlw	3
 12741  079E  3199  2192  3186   	fcall	_setMemory_Data
 12742                           
 12743                           ;MCU_B1.c: 959: setMemory_Data(4, 0xff);
 12744  07A1  30FF               	movlw	255
 12745  07A2  0020               	movlb	0	; select bank0
 12746  07A3  00A4               	movwf	??_Flash_Memory_Initialization
 12747  07A4  0824               	movf	??_Flash_Memory_Initialization,w
 12748  07A5  00A0               	movwf	setMemory_Data@data
 12749  07A6  3004               	movlw	4
 12750  07A7  3199  2192  3186   	fcall	_setMemory_Data
 12751                           
 12752                           ;MCU_B1.c: 960: setMemory_Data(5, 0xff);
 12753  07AA  30FF               	movlw	255
 12754  07AB  0020               	movlb	0	; select bank0
 12755  07AC  00A4               	movwf	??_Flash_Memory_Initialization
 12756  07AD  0824               	movf	??_Flash_Memory_Initialization,w
 12757  07AE  00A0               	movwf	setMemory_Data@data
 12758  07AF  3005               	movlw	5
 12759  07B0  3199  2192  3186   	fcall	_setMemory_Data
 12760                           
 12761                           ;MCU_B1.c: 961: setMemory_Data(31, 0xaa);
 12762  07B3  30AA               	movlw	170
 12763  07B4  0020               	movlb	0	; select bank0
 12764  07B5  00A4               	movwf	??_Flash_Memory_Initialization
 12765  07B6  0824               	movf	??_Flash_Memory_Initialization,w
 12766  07B7  00A0               	movwf	setMemory_Data@data
 12767  07B8  301F               	movlw	31
 12768  07B9  3199  2192  3186   	fcall	_setMemory_Data
 12769                           
 12770                           ;MCU_B1.c: 966: GIE = 0;
 12771  07BC  138B               	bcf	11,7	;volatile
 12772                           
 12773                           ;MCU_B1.c: 967: Flash_Memory_Write();
 12774  07BD  319F  279E         	fcall	_Flash_Memory_Write
 12775                           
 12776                           ;MCU_B1.c: 968: GIE = 1;
 12777  07BF  178B               	bsf	11,7	;volatile
 12778                           
 12779                           ;MCU_B1.c: 969: myMain.FirstOpen = 1;
 12780  07C0  0021               	movlb	1	; select bank1
 12781  07C1  15AE               	bsf	_myMain^(0+128),3
 12782                           
 12783                           ;MCU_B1.c: 970: myMain.First = 1;
 12784  07C2  16AE               	bsf	_myMain^(0+128),5
 12785                           
 12786                           ;MCU_B1.c: 971: myMain.InitDimmer = 1;
 12787  07C3  1638               	bsf	(_myMain^(0+128)+10),4
 12788  07C4  0008               	return
 12789  07C5                     __end_of_Flash_Memory_Initialization:	
 12790                           
 12791                           	psect	text80
 12792  1992                     __ptext80:	
 12793 ;; *************** function _setMemory_Data *****************
 12794 ;; Defined at:
 12795 ;;		line 1094 in file "../src/MCU_B1.c"
 12796 ;; Parameters:    Size  Location     Type
 12797 ;;  address         1    wreg     unsigned char 
 12798 ;;  data            1    0[BANK0 ] unsigned char 
 12799 ;; Auto vars:     Size  Location     Type
 12800 ;;  address         1    2[BANK0 ] unsigned char 
 12801 ;; Return value:  Size  Location     Type
 12802 ;;		None               void
 12803 ;; Registers used:
 12804 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12805 ;; Tracked objects:
 12806 ;;		On entry : 0/0
 12807 ;;		On exit  : 0/0
 12808 ;;		Unchanged: 0/0
 12809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12810 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12811 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12812 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12813 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12814 ;;Total ram usage:        3 bytes
 12815 ;; Hardware stack levels used:    1
 12816 ;; Hardware stack levels required when called:    5
 12817 ;; This function calls:
 12818 ;;		Nothing
 12819 ;; This function is called by:
 12820 ;;		_Flash_Memory_Initialization
 12821 ;;		_Flash_Memory_Modify
 12822 ;; This function uses a non-reentrant model
 12823 ;;
 12824                           
 12825                           
 12826                           ;psect for function _setMemory_Data
 12827  1992                     _setMemory_Data:	
 12828                           
 12829                           ;incstack = 0
 12830                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12831                           ;setMemory_Data@address stored from wreg
 12832  1992  0020               	movlb	0	; select bank0
 12833  1993  00A2               	movwf	setMemory_Data@address
 12834                           
 12835                           ;MCU_B1.c: 1095: Memory.Data[address] = data;
 12836  1994  0820               	movf	setMemory_Data@data,w
 12837  1995  00A1               	movwf	??_setMemory_Data
 12838  1996  0822               	movf	setMemory_Data@address,w
 12839  1997  3E20               	addlw	_Memory& (0+255)
 12840  1998  0086               	movwf	6
 12841  1999  3002               	movlw	2	; select bank4/5
 12842  199A  0087               	movwf	7
 12843  199B  0821               	movf	??_setMemory_Data,w
 12844  199C  0081               	movwf	1
 12845  199D  0008               	return
 12846  199E                     __end_of_setMemory_Data:	
 12847                           
 12848                           	psect	text81
 12849  1F9E                     __ptext81:	
 12850 ;; *************** function _Flash_Memory_Write *****************
 12851 ;; Defined at:
 12852 ;;		line 1023 in file "../src/MCU_B1.c"
 12853 ;; Parameters:    Size  Location     Type
 12854 ;;		None
 12855 ;; Auto vars:     Size  Location     Type
 12856 ;;  i               1    1[BANK0 ] unsigned char 
 12857 ;; Return value:  Size  Location     Type
 12858 ;;		None               void
 12859 ;; Registers used:
 12860 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12861 ;; Tracked objects:
 12862 ;;		On entry : 0/0
 12863 ;;		On exit  : 0/0
 12864 ;;		Unchanged: 0/0
 12865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12867 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12868 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12869 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12870 ;;Total ram usage:        2 bytes
 12871 ;; Hardware stack levels used:    1
 12872 ;; Hardware stack levels required when called:    6
 12873 ;; This function calls:
 12874 ;;		_Flash_Memory_Unlock
 12875 ;; This function is called by:
 12876 ;;		_Flash_Memory_Initialization
 12877 ;;		_Flash_Memory_Modify
 12878 ;; This function uses a non-reentrant model
 12879 ;;
 12880                           
 12881                           
 12882                           ;psect for function _Flash_Memory_Write
 12883  1F9E                     _Flash_Memory_Write:	
 12884                           
 12885                           ;MCU_B1.c: 1024: char i = 0;
 12886                           
 12887                           ;incstack = 0
 12888                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12889  1F9E  0020               	movlb	0	; select bank0
 12890  1F9F  01A1               	clrf	Flash_Memory_Write@i
 12891                           
 12892                           ;MCU_B1.c: 1025: CFGS = 0;
 12893  1FA0  0023               	movlb	3	; select bank3
 12894  1FA1  1315               	bcf	21,6	;volatile
 12895                           
 12896                           ;MCU_B1.c: 1026: PMADRH = 0x30;
 12897  1FA2  3030               	movlw	48
 12898  1FA3  0092               	movwf	18	;volatile
 12899                           
 12900                           ;MCU_B1.c: 1027: PMDATH = 0;
 12901  1FA4  0194               	clrf	20	;volatile
 12902                           
 12903                           ;MCU_B1.c: 1028: FREE = 0;
 12904  1FA5  1215               	bcf	21,4	;volatile
 12905                           
 12906                           ;MCU_B1.c: 1029: LWLO = 1;
 12907  1FA6  1695               	bsf	21,5	;volatile
 12908                           
 12909                           ;MCU_B1.c: 1030: WREN = 1;
 12910  1FA7  1515               	bsf	21,2	;volatile
 12911                           
 12912                           ;MCU_B1.c: 1031: for (i = 0; i < 32; i++) {
 12913  1FA8  0020               	movlb	0	; select bank0
 12914  1FA9  01A1               	clrf	Flash_Memory_Write@i
 12915  1FAA  3020               	movlw	32
 12916  1FAB  0221               	subwf	Flash_Memory_Write@i,w
 12917  1FAC  1803               	btfsc	3,0
 12918  1FAD  2FC6               	goto	l1459
 12919  1FAE                     l7651:	
 12920                           
 12921                           ;MCU_B1.c: 1032: PMADRL = i;
 12922  1FAE  0821               	movf	Flash_Memory_Write@i,w
 12923  1FAF  0023               	movlb	3	; select bank3
 12924  1FB0  0091               	movwf	17	;volatile
 12925                           
 12926                           ;MCU_B1.c: 1033: PMDATL = Memory.Data[i];
 12927  1FB1  0020               	movlb	0	; select bank0
 12928  1FB2  0821               	movf	Flash_Memory_Write@i,w
 12929  1FB3  3E20               	addlw	_Memory& (0+255)
 12930  1FB4  0086               	movwf	6
 12931  1FB5  3002               	movlw	2	; select bank4/5
 12932  1FB6  0087               	movwf	7
 12933  1FB7  0801               	movf	1,w
 12934  1FB8  0023               	movlb	3	; select bank3
 12935  1FB9  0093               	movwf	19	;volatile
 12936                           
 12937                           ;MCU_B1.c: 1034: Flash_Memory_Unlock();
 12938  1FBA  3199  2145  319F   	fcall	_Flash_Memory_Unlock
 12939  1FBD  3001               	movlw	1
 12940  1FBE  0020               	movlb	0	; select bank0
 12941  1FBF  00A0               	movwf	??_Flash_Memory_Write
 12942  1FC0  0820               	movf	??_Flash_Memory_Write,w
 12943  1FC1  07A1               	addwf	Flash_Memory_Write@i,f
 12944  1FC2  3020               	movlw	32
 12945  1FC3  0221               	subwf	Flash_Memory_Write@i,w
 12946  1FC4  1C03               	skipc
 12947  1FC5  2FAE               	goto	l7651
 12948  1FC6                     l1459:	
 12949                           
 12950                           ;MCU_B1.c: 1035: }
 12951                           ;MCU_B1.c: 1036: LWLO = 0;
 12952  1FC6  0023               	movlb	3	; select bank3
 12953  1FC7  1295               	bcf	21,5	;volatile
 12954                           
 12955                           ;MCU_B1.c: 1037: Flash_Memory_Unlock();
 12956  1FC8  3199  2145         	fcall	_Flash_Memory_Unlock
 12957                           
 12958                           ;MCU_B1.c: 1038: WREN = 0;
 12959  1FCA  0023               	movlb	3	; select bank3
 12960  1FCB  1115               	bcf	21,2	;volatile
 12961  1FCC  0008               	return
 12962  1FCD                     __end_of_Flash_Memory_Write:	
 12963                           
 12964                           	psect	text82
 12965  1945                     __ptext82:	
 12966 ;; *************** function _Flash_Memory_Unlock *****************
 12967 ;; Defined at:
 12968 ;;		line 1002 in file "../src/MCU_B1.c"
 12969 ;; Parameters:    Size  Location     Type
 12970 ;;		None
 12971 ;; Auto vars:     Size  Location     Type
 12972 ;;		None
 12973 ;; Return value:  Size  Location     Type
 12974 ;;		None               void
 12975 ;; Registers used:
 12976 ;;		wreg
 12977 ;; Tracked objects:
 12978 ;;		On entry : 0/0
 12979 ;;		On exit  : 0/0
 12980 ;;		Unchanged: 0/0
 12981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12982 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12983 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12985 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12986 ;;Total ram usage:        0 bytes
 12987 ;; Hardware stack levels used:    1
 12988 ;; Hardware stack levels required when called:    5
 12989 ;; This function calls:
 12990 ;;		Nothing
 12991 ;; This function is called by:
 12992 ;;		_Flash_Memory_Write
 12993 ;;		_Flash_Memory_Erasing
 12994 ;; This function uses a non-reentrant model
 12995 ;;
 12996                           
 12997                           
 12998                           ;psect for function _Flash_Memory_Unlock
 12999  1945                     _Flash_Memory_Unlock:	
 13000                           
 13001                           ;MCU_B1.c: 1003: PMCON2 = 0x55;
 13002                           
 13003                           ;incstack = 0
 13004                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 13005  1945  3055               	movlw	85
 13006  1946  0023               	movlb	3	; select bank3
 13007  1947  0096               	movwf	22	;volatile
 13008                           
 13009                           ;MCU_B1.c: 1004: PMCON2 = 0xaa;
 13010  1948  30AA               	movlw	170
 13011  1949  0096               	movwf	22	;volatile
 13012                           
 13013                           ;MCU_B1.c: 1005: WR = 1;
 13014  194A  1495               	bsf	21,1	;volatile
 13015                           
 13016                           ;MCU_B1.c: 1006: __nop();
 13017  194B  0000               	nop
 13018                           
 13019                           ;MCU_B1.c: 1007: __nop();
 13020  194C  0000               	nop
 13021  194D  0008               	return
 13022  194E                     __end_of_Flash_Memory_Unlock:	
 13023                           
 13024                           	psect	text83
 13025  1C59                     __ptext83:	
 13026 ;; *************** function _Flash_Memory_Read *****************
 13027 ;; Defined at:
 13028 ;;		line 1011 in file "../src/MCU_B1.c"
 13029 ;; Parameters:    Size  Location     Type
 13030 ;;  address         1    wreg     unsigned char 
 13031 ;; Auto vars:     Size  Location     Type
 13032 ;;  address         1    2[BANK0 ] unsigned char 
 13033 ;;  ret             1    3[BANK0 ] unsigned char 
 13034 ;;  i               1    1[BANK0 ] unsigned char 
 13035 ;; Return value:  Size  Location     Type
 13036 ;;                  1    wreg      unsigned char 
 13037 ;; Registers used:
 13038 ;;		wreg, status,2
 13039 ;; Tracked objects:
 13040 ;;		On entry : 0/0
 13041 ;;		On exit  : 0/0
 13042 ;;		Unchanged: 0/0
 13043 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13045 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13046 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13047 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13048 ;;Total ram usage:        4 bytes
 13049 ;; Hardware stack levels used:    1
 13050 ;; Hardware stack levels required when called:    5
 13051 ;; This function calls:
 13052 ;;		Nothing
 13053 ;; This function is called by:
 13054 ;;		_Flash_Memory_Initialization
 13055 ;;		_Flash_Memory_Modify
 13056 ;; This function uses a non-reentrant model
 13057 ;;
 13058                           
 13059                           
 13060                           ;psect for function _Flash_Memory_Read
 13061  1C59                     _Flash_Memory_Read:	
 13062                           
 13063                           ;incstack = 0
 13064                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 13065                           ;Flash_Memory_Read@address stored from wreg
 13066  1C59  0020               	movlb	0	; select bank0
 13067  1C5A  00A2               	movwf	Flash_Memory_Read@address
 13068                           
 13069                           ;MCU_B1.c: 1012: char i = 0, ret = 0;
 13070  1C5B  01A1               	clrf	Flash_Memory_Read@i
 13071  1C5C  01A3               	clrf	Flash_Memory_Read@ret
 13072                           
 13073                           ;MCU_B1.c: 1013: PMADRH = 0x30;
 13074  1C5D  3030               	movlw	48
 13075  1C5E  0023               	movlb	3	; select bank3
 13076  1C5F  0092               	movwf	18	;volatile
 13077                           
 13078                           ;MCU_B1.c: 1014: PMADRL = address;
 13079  1C60  0020               	movlb	0	; select bank0
 13080  1C61  0822               	movf	Flash_Memory_Read@address,w
 13081  1C62  0023               	movlb	3	; select bank3
 13082  1C63  0091               	movwf	17	;volatile
 13083                           
 13084                           ;MCU_B1.c: 1015: CFGS = 0;
 13085  1C64  1315               	bcf	21,6	;volatile
 13086                           
 13087                           ;MCU_B1.c: 1016: RD = 1;
 13088  1C65  1415               	bsf	21,0	;volatile
 13089                           
 13090                           ;MCU_B1.c: 1017: i = PMDATH;
 13091  1C66  0814               	movf	20,w	;volatile
 13092  1C67  0020               	movlb	0	; select bank0
 13093  1C68  00A0               	movwf	??_Flash_Memory_Read
 13094  1C69  0820               	movf	??_Flash_Memory_Read,w
 13095  1C6A  00A1               	movwf	Flash_Memory_Read@i
 13096                           
 13097                           ;MCU_B1.c: 1018: ret = PMDATL;
 13098  1C6B  0023               	movlb	3	; select bank3
 13099  1C6C  0813               	movf	19,w	;volatile
 13100  1C6D  0020               	movlb	0	; select bank0
 13101  1C6E  00A0               	movwf	??_Flash_Memory_Read
 13102  1C6F  0820               	movf	??_Flash_Memory_Read,w
 13103  1C70  00A3               	movwf	Flash_Memory_Read@ret
 13104                           
 13105                           ;MCU_B1.c: 1019: return ret;
 13106  1C71  0823               	movf	Flash_Memory_Read@ret,w
 13107  1C72  0008               	return
 13108  1C73                     __end_of_Flash_Memory_Read:	
 13109                           
 13110                           	psect	text84
 13111  047E                     __ptext84:	
 13112 ;; *************** function _Exception_Main *****************
 13113 ;; Defined at:
 13114 ;;		line 499 in file "../src/main_B1.c"
 13115 ;; Parameters:    Size  Location     Type
 13116 ;;		None
 13117 ;; Auto vars:     Size  Location     Type
 13118 ;;  i               2   18[BANK0 ] int 
 13119 ;;  i               2   16[BANK0 ] int 
 13120 ;;  lights          1   21[BANK0 ] unsigned char 
 13121 ;;  error           1   20[BANK0 ] unsigned char 
 13122 ;;  count           1   15[BANK0 ] unsigned char 
 13123 ;;  status          1   14[BANK0 ] unsigned char 
 13124 ;; Return value:  Size  Location     Type
 13125 ;;		None               void
 13126 ;; Registers used:
 13127 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13128 ;; Tracked objects:
 13129 ;;		On entry : 0/0
 13130 ;;		On exit  : 0/0
 13131 ;;		Unchanged: 0/0
 13132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13134 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13135 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13136 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13137 ;;Total ram usage:        9 bytes
 13138 ;; Hardware stack levels used:    1
 13139 ;; Hardware stack levels required when called:    7
 13140 ;; This function calls:
 13141 ;;		_getDimmerLights_Line
 13142 ;;		_getDimmerLights_Status
 13143 ;;		_getMain_All_Error_Status
 13144 ;;		_getMain_All_LightsStatus
 13145 ;;		_setBuz
 13146 ;;		_setDimmerLights_SwOff
 13147 ;;		_setLED
 13148 ;; This function is called by:
 13149 ;;		_main
 13150 ;; This function uses a non-reentrant model
 13151 ;;
 13152                           
 13153                           
 13154                           ;psect for function _Exception_Main
 13155  047E                     _Exception_Main:	
 13156                           
 13157                           ;main_B1.c: 500: char error = getMain_All_Error_Status(0);
 13158                           
 13159                           ;incstack = 0
 13160                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13161  047E  3000               	movlw	0
 13162  047F  319F  27CD  3184   	fcall	_getMain_All_Error_Status
 13163  0482  0020               	movlb	0	; select bank0
 13164  0483  00AD               	movwf	??_Exception_Main
 13165  0484  082D               	movf	??_Exception_Main,w
 13166  0485  00B4               	movwf	Exception_Main@error
 13167                           
 13168                           ;main_B1.c: 501: char lights = 0, count = 2;
 13169  0486  01B5               	clrf	Exception_Main@lights
 13170  0487  3002               	movlw	2
 13171  0488  00AD               	movwf	??_Exception_Main
 13172  0489  082D               	movf	??_Exception_Main,w
 13173  048A  00AF               	movwf	Exception_Main@count
 13174                           
 13175                           ;main_B1.c: 502: char status = 0;
 13176  048B  01AE               	clrf	Exception_Main@status
 13177                           
 13178                           ;main_B1.c: 504: if (myMain.Error_Run == 1) {
 13179  048C  0021               	movlb	1	; select bank1
 13180  048D  1DB8               	btfss	(_myMain^(0+128)+10),3
 13181  048E  2C9E               	goto	l8977
 13182                           
 13183                           ;main_B1.c: 505: if (error == 0) {
 13184  048F  0020               	movlb	0	; select bank0
 13185  0490  08B4               	movf	Exception_Main@error,f
 13186  0491  1D03               	skipz
 13187  0492  0008               	return
 13188                           
 13189                           ;main_B1.c: 506: myMain.Error_Run = 0;
 13190  0493  0021               	movlb	1	; select bank1
 13191  0494  11B8               	bcf	(_myMain^(0+128)+10),3
 13192                           
 13193                           ;main_B1.c: 509: setLED(99, 10);
 13194  0495  300A               	movlw	10
 13195  0496  0020               	movlb	0	; select bank0
 13196  0497  00AD               	movwf	??_Exception_Main
 13197  0498  082D               	movf	??_Exception_Main,w
 13198  0499  00A2               	movwf	setLED@command
 13199  049A  3063               	movlw	99
 13200  049B  3193  230E         	fcall	_setLED
 13201                           
 13202                           ;main_B1.c: 522: }
 13203                           ;main_B1.c: 523: } else {
 13204  049D  0008               	return
 13205  049E                     l8977:	
 13206                           
 13207                           ;main_B1.c: 524: if (error != 0) {
 13208  049E  0020               	movlb	0	; select bank0
 13209  049F  0834               	movf	Exception_Main@error,w
 13210  04A0  1903               	btfsc	3,2
 13211  04A1  0008               	return
 13212                           
 13213                           ;main_B1.c: 525: myMain.Error_Run = 1;
 13214  04A2  0021               	movlb	1	; select bank1
 13215  04A3  15B8               	bsf	(_myMain^(0+128)+10),3
 13216                           
 13217                           ;main_B1.c: 527: setLED(99, 11);
 13218  04A4  300B               	movlw	11
 13219  04A5  0020               	movlb	0	; select bank0
 13220  04A6  00AD               	movwf	??_Exception_Main
 13221  04A7  082D               	movf	??_Exception_Main,w
 13222  04A8  00A2               	movwf	setLED@command
 13223  04A9  3063               	movlw	99
 13224  04AA  3193  230E  3184   	fcall	_setLED
 13225                           
 13226                           ;main_B1.c: 538: switch (error) {
 13227  04AD  2D4A               	goto	l9025
 13228  04AE                     l8983:	
 13229                           ;main_B1.c: 539: case 2:
 13230                           
 13231                           
 13232                           ;main_B1.c: 546: if (getMain_All_LightsStatus() == 1) {
 13233  04AE  319A  22E9  3184   	fcall	_getMain_All_LightsStatus
 13234  04B1  3A01               	xorlw	1
 13235  04B2  1D03               	skipz
 13236  04B3  2CBD               	goto	l8987
 13237                           
 13238                           ;main_B1.c: 547: setBuz(10, 300);
 13239  04B4  302C               	movlw	44
 13240  04B5  0020               	movlb	0	; select bank0
 13241  04B6  00A9               	movwf	setBuz@time
 13242  04B7  3001               	movlw	1
 13243  04B8  00AA               	movwf	setBuz@time+1
 13244  04B9  300A               	movlw	10
 13245  04BA  3194  240B  3184   	fcall	_setBuz
 13246  04BD                     l8987:	
 13247                           
 13248                           ;main_B1.c: 548: }
 13249                           ;main_B1.c: 550: for (int i = 0; i < count; i++) {
 13250  04BD  0020               	movlb	0	; select bank0
 13251  04BE  01B0               	clrf	Exception_Main@i
 13252  04BF  01B1               	clrf	Exception_Main@i+1
 13253  04C0                     l8997:	
 13254  04C0  0831               	movf	Exception_Main@i+1,w
 13255  04C1  3A80               	xorlw	128
 13256  04C2  00AD               	movwf	??_Exception_Main
 13257  04C3  3080               	movlw	128
 13258  04C4  022D               	subwf	??_Exception_Main,w
 13259  04C5  1D03               	skipz
 13260  04C6  2CC9               	goto	u9905
 13261  04C7  082F               	movf	Exception_Main@count,w
 13262  04C8  0230               	subwf	Exception_Main@i,w
 13263  04C9                     u9905:	
 13264  04C9  1803               	btfsc	3,0
 13265  04CA  2CEB               	goto	u9900
 13266                           
 13267                           ;main_B1.c: 552: if (getDimmerLights_Status(i + 1) == 1) {
 13268  04CB  0020               	movlb	0	; select bank0
 13269  04CC  0830               	movf	Exception_Main@i,w
 13270  04CD  3E01               	addlw	1
 13271  04CE  319A  2202  3184   	fcall	_getDimmerLights_Status
 13272  04D1  3A01               	xorlw	1
 13273  04D2  1D03               	skipz
 13274  04D3  2CE5               	goto	l8995
 13275                           
 13276                           ;main_B1.c: 553: DimmerLights->SwFlag = 1;
 13277  04D4  0021               	movlb	1	; select bank1
 13278  04D5  0856               	movf	_DimmerLights^(0+128),w
 13279  04D6  0086               	movwf	6
 13280  04D7  3001               	movlw	1	; select bank2/3
 13281  04D8  0087               	movwf	7
 13282  04D9  1401               	bsf	1,0
 13283                           
 13284                           ;main_B1.c: 554: DimmerLights->Status = 0;
 13285  04DA  0A56               	incf	_DimmerLights^(0+128),w
 13286  04DB  0086               	movwf	6
 13287  04DC  3001               	movlw	1	; select bank2/3
 13288  04DD  0087               	movwf	7
 13289  04DE  1001               	bcf	1,0
 13290                           
 13291                           ;main_B1.c: 555: setDimmerLights_SwOff(i + 1);
 13292  04DF  0020               	movlb	0	; select bank0
 13293  04E0  0830               	movf	Exception_Main@i,w
 13294  04E1  3E01               	addlw	1
 13295  04E2  3190  20CB  3184   	fcall	_setDimmerLights_SwOff
 13296  04E5                     l8995:	
 13297  04E5  3001               	movlw	1
 13298  04E6  0020               	movlb	0	; select bank0
 13299  04E7  07B0               	addwf	Exception_Main@i,f
 13300  04E8  3000               	movlw	0
 13301  04E9  3DB1               	addwfc	Exception_Main@i+1,f
 13302  04EA  2CC0               	goto	l8997
 13303  04EB                     u9900:	
 13304  04EB  0020               	movlb	0	; select bank0
 13305  04EC  0008               	return
 13306  04ED                     l8999:	
 13307                           ;main_B1.c: 561: case 3:
 13308                           
 13309                           ;main_B1.c: 556: }
 13310                           ;main_B1.c: 557: }
 13311                           ;main_B1.c: 560: break;
 13312                           
 13313                           
 13314                           ;main_B1.c: 563: setBuz(5, 300);
 13315  04ED  302C               	movlw	44
 13316  04EE  0020               	movlb	0	; select bank0
 13317  04EF  00A9               	movwf	setBuz@time
 13318  04F0  3001               	movlw	1
 13319  04F1  00AA               	movwf	setBuz@time+1
 13320  04F2  3005               	movlw	5
 13321  04F3  3194  240B  3184   	fcall	_setBuz
 13322                           
 13323                           ;main_B1.c: 564: lights = getDimmerLights_Line();
 13324  04F6  319B  2322  3184   	fcall	_getDimmerLights_Line
 13325  04F9  0020               	movlb	0	; select bank0
 13326  04FA  00AD               	movwf	??_Exception_Main
 13327  04FB  082D               	movf	??_Exception_Main,w
 13328  04FC  00B5               	movwf	Exception_Main@lights
 13329                           
 13330                           ;main_B1.c: 565: if (lights == 0) {
 13331  04FD  08B5               	movf	Exception_Main@lights,f
 13332  04FE  1D03               	skipz
 13333  04FF  2D2F               	goto	l9017
 13334                           
 13335                           ;main_B1.c: 567: for (int i = 0; i < count; i++) {
 13336  0500  01B2               	clrf	Exception_Main@i_6926
 13337  0501  01B3               	clrf	Exception_Main@i_6926+1
 13338  0502                     l9015:	
 13339  0502  0833               	movf	Exception_Main@i_6926+1,w
 13340  0503  3A80               	xorlw	128
 13341  0504  00AD               	movwf	??_Exception_Main
 13342  0505  3080               	movlw	128
 13343  0506  022D               	subwf	??_Exception_Main,w
 13344  0507  1D03               	skipz
 13345  0508  2D0B               	goto	u9935
 13346  0509  082F               	movf	Exception_Main@count,w
 13347  050A  0232               	subwf	Exception_Main@i_6926,w
 13348  050B                     u9935:	
 13349  050B  1803               	btfsc	3,0
 13350  050C  2D2D               	goto	u9930
 13351                           
 13352                           ;main_B1.c: 569: if (getDimmerLights_Status(i + 1) == 1) {
 13353  050D  0020               	movlb	0	; select bank0
 13354  050E  0832               	movf	Exception_Main@i_6926,w
 13355  050F  3E01               	addlw	1
 13356  0510  319A  2202  3184   	fcall	_getDimmerLights_Status
 13357  0513  3A01               	xorlw	1
 13358  0514  1D03               	skipz
 13359  0515  2D27               	goto	l9013
 13360                           
 13361                           ;main_B1.c: 570: DimmerLights->SwFlag = 1;
 13362  0516  0021               	movlb	1	; select bank1
 13363  0517  0856               	movf	_DimmerLights^(0+128),w
 13364  0518  0086               	movwf	6
 13365  0519  3001               	movlw	1	; select bank2/3
 13366  051A  0087               	movwf	7
 13367  051B  1401               	bsf	1,0
 13368                           
 13369                           ;main_B1.c: 571: DimmerLights->Status = 0;
 13370  051C  0A56               	incf	_DimmerLights^(0+128),w
 13371  051D  0086               	movwf	6
 13372  051E  3001               	movlw	1	; select bank2/3
 13373  051F  0087               	movwf	7
 13374  0520  1001               	bcf	1,0
 13375                           
 13376                           ;main_B1.c: 572: setDimmerLights_SwOff(i + 1);
 13377  0521  0020               	movlb	0	; select bank0
 13378  0522  0832               	movf	Exception_Main@i_6926,w
 13379  0523  3E01               	addlw	1
 13380  0524  3190  20CB  3184   	fcall	_setDimmerLights_SwOff
 13381  0527                     l9013:	
 13382  0527  3001               	movlw	1
 13383  0528  0020               	movlb	0	; select bank0
 13384  0529  07B2               	addwf	Exception_Main@i_6926,f
 13385  052A  3000               	movlw	0
 13386  052B  3DB3               	addwfc	Exception_Main@i_6926+1,f
 13387  052C  2D02               	goto	l9015
 13388  052D                     u9930:	
 13389  052D  0020               	movlb	0	; select bank0
 13390  052E  0008               	return
 13391  052F                     l9017:	
 13392                           ;main_B1.c: 573: }
 13393                           ;main_B1.c: 574: }
 13394                           ;main_B1.c: 575: } else {
 13395                           
 13396                           
 13397                           ;main_B1.c: 577: if (getDimmerLights_Status(lights) == 1) {
 13398  052F  0020               	movlb	0	; select bank0
 13399  0530  0835               	movf	Exception_Main@lights,w
 13400  0531  319A  2202  3184   	fcall	_getDimmerLights_Status
 13401  0534  3A01               	xorlw	1
 13402  0535  1903               	btfsc	3,2
 13403  0536  2D39               	goto	l9019
 13404  0537  0020               	movlb	0	; select bank0
 13405  0538  0008               	return
 13406  0539                     l9019:	
 13407                           
 13408                           ;main_B1.c: 579: DimmerLights->SwFlag = 1;
 13409  0539  0021               	movlb	1	; select bank1
 13410  053A  0856               	movf	_DimmerLights^(0+128),w
 13411  053B  0086               	movwf	6
 13412  053C  3001               	movlw	1	; select bank2/3
 13413  053D  0087               	movwf	7
 13414  053E  1401               	bsf	1,0
 13415                           
 13416                           ;main_B1.c: 580: DimmerLights->Status = 0;
 13417  053F  0A56               	incf	_DimmerLights^(0+128),w
 13418  0540  0086               	movwf	6
 13419  0541  3001               	movlw	1	; select bank2/3
 13420  0542  0087               	movwf	7
 13421  0543  1001               	bcf	1,0
 13422                           
 13423                           ;main_B1.c: 581: setDimmerLights_SwOff(lights);
 13424  0544  0020               	movlb	0	; select bank0
 13425  0545  0835               	movf	Exception_Main@lights,w
 13426  0546  3190  20CB         	fcall	_setDimmerLights_SwOff
 13427  0548  0020               	movlb	0	; select bank0
 13428  0549  0008               	return
 13429  054A                     l9025:	
 13430                           ;main_B1.c: 586: }
 13431                           
 13432                           ;main_B1.c: 582: }
 13433                           ;main_B1.c: 583: }
 13434                           ;main_B1.c: 585: break;
 13435                           
 13436  054A  0020               	movlb	0	; select bank0
 13437  054B  0834               	movf	Exception_Main@error,w
 13438                           
 13439                           ; Switch size 1, requested type "space"
 13440                           ; Number of cases is 2, Range of values is 2 to 3
 13441                           ; switch strategies available:
 13442                           ; Name         Instructions Cycles
 13443                           ; simple_byte            7     4 (average)
 13444                           ; direct_byte           13     9 (fixed)
 13445                           ; jumptable            263     9 (fixed)
 13446                           ;	Chosen strategy is simple_byte
 13447  054C  3A02               	xorlw	2	; case 2
 13448  054D  1903               	skipnz
 13449  054E  2CAE               	goto	l8983
 13450  054F  3A01               	xorlw	1	; case 3
 13451  0550  1903               	skipnz
 13452  0551  2CED               	goto	l8999
 13453  0552  2D54               	goto	l2917
 13454  0553  0008               	return
 13455  0554                     l2917:	
 13456  0554  0008               	return
 13457  0555                     __end_of_Exception_Main:	
 13458                           
 13459                           	psect	text85
 13460  1B22                     __ptext85:	
 13461 ;; *************** function _getDimmerLights_Line *****************
 13462 ;; Defined at:
 13463 ;;		line 1042 in file "../src/Dimmer_B1.c"
 13464 ;; Parameters:    Size  Location     Type
 13465 ;;		None
 13466 ;; Auto vars:     Size  Location     Type
 13467 ;;  line            1    1[BANK0 ] unsigned char 
 13468 ;; Return value:  Size  Location     Type
 13469 ;;                  1    wreg      unsigned char 
 13470 ;; Registers used:
 13471 ;;		wreg, status,2
 13472 ;; Tracked objects:
 13473 ;;		On entry : 0/0
 13474 ;;		On exit  : 0/0
 13475 ;;		Unchanged: 0/0
 13476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13477 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13478 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13479 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13480 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13481 ;;Total ram usage:        2 bytes
 13482 ;; Hardware stack levels used:    1
 13483 ;; Hardware stack levels required when called:    5
 13484 ;; This function calls:
 13485 ;;		Nothing
 13486 ;; This function is called by:
 13487 ;;		_Exception_Main
 13488 ;; This function uses a non-reentrant model
 13489 ;;
 13490                           
 13491                           
 13492                           ;psect for function _getDimmerLights_Line
 13493  1B22                     _getDimmerLights_Line:	
 13494                           
 13495                           ;Dimmer_B1.c: 1043: char line = 0;
 13496                           
 13497                           ;incstack = 0
 13498                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 13499  1B22  0020               	movlb	0	; select bank0
 13500  1B23  01A1               	clrf	getDimmerLights_Line@line
 13501                           
 13502                           ;Dimmer_B1.c: 1045: if (DimmerLights1.Line == 1) {
 13503  1B24  0022               	movlb	2	; select bank2
 13504  1B25  1CE8               	btfss	(_DimmerLights1^(0+256)+1),1
 13505  1B26  2B2B               	goto	l922
 13506                           
 13507                           ;Dimmer_B1.c: 1046: line = 1;
 13508  1B27  0020               	movlb	0	; select bank0
 13509  1B28  01A1               	clrf	getDimmerLights_Line@line
 13510  1B29  0AA1               	incf	getDimmerLights_Line@line,f
 13511                           
 13512                           ;Dimmer_B1.c: 1047: }
 13513  1B2A  2B33               	goto	l923
 13514  1B2B                     l922:	
 13515                           
 13516                           ;Dimmer_B1.c: 1050: else if (DimmerLights2.Line == 1) {
 13517  1B2B  0023               	movlb	3	; select bank3
 13518  1B2C  1CD1               	btfss	(_DimmerLights2^(0+384)+1),1
 13519  1B2D  2B33               	goto	l923
 13520                           
 13521                           ;Dimmer_B1.c: 1051: line = 2;
 13522  1B2E  3002               	movlw	2
 13523  1B2F  0020               	movlb	0	; select bank0
 13524  1B30  00A0               	movwf	??_getDimmerLights_Line
 13525  1B31  0820               	movf	??_getDimmerLights_Line,w
 13526  1B32  00A1               	movwf	getDimmerLights_Line@line
 13527  1B33                     l923:	
 13528                           
 13529                           ;Dimmer_B1.c: 1052: }
 13530                           ;Dimmer_B1.c: 1059: return line;
 13531  1B33  0020               	movlb	0	; select bank0
 13532  1B34  0821               	movf	getDimmerLights_Line@line,w
 13533  1B35  0008               	return
 13534  1B36                     __end_of_getDimmerLights_Line:	
 13535                           
 13536                           	psect	text86
 13537  1D95                     __ptext86:	
 13538 ;; *************** function _DimmerLights_Main *****************
 13539 ;; Defined at:
 13540 ;;		line 771 in file "../src/Dimmer_B1.c"
 13541 ;; Parameters:    Size  Location     Type
 13542 ;;		None
 13543 ;; Auto vars:     Size  Location     Type
 13544 ;;		None
 13545 ;; Return value:  Size  Location     Type
 13546 ;;		None               void
 13547 ;; Registers used:
 13548 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13549 ;; Tracked objects:
 13550 ;;		On entry : 0/0
 13551 ;;		On exit  : 0/0
 13552 ;;		Unchanged: 0/0
 13553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13555 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13557 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13558 ;;Total ram usage:        0 bytes
 13559 ;; Hardware stack levels used:    1
 13560 ;; Hardware stack levels required when called:   10
 13561 ;; This function calls:
 13562 ;;		_getLoad_OK
 13563 ;;		_getMain_All_Error_Status
 13564 ;;		_getMain_All_LightsStatus
 13565 ;;		_setDimmerLights_Main
 13566 ;; This function is called by:
 13567 ;;		_main
 13568 ;; This function uses a non-reentrant model
 13569 ;;
 13570                           
 13571                           
 13572                           ;psect for function _DimmerLights_Main
 13573  1D95                     _DimmerLights_Main:	
 13574                           
 13575                           ;Dimmer_B1.c: 774: if (Dimmer.LoadGO == 1) {
 13576                           
 13577                           ;incstack = 0
 13578                           ; Regs used in _DimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13579  1D95  0022               	movlb	2	; select bank2
 13580  1D96  1CAC               	btfss	_Dimmer^(0+256),1
 13581  1D97  2DAD               	goto	l8597
 13582                           
 13583                           ;Dimmer_B1.c: 775: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          All_LightsStatus() == 0) {
 13584  1D98  3199  2114  319D   	fcall	_getLoad_OK
 13585  1D9B  3A01               	xorlw	1
 13586  1D9C  1903               	skipnz
 13587  1D9D  2DAB               	goto	l861
 13588  1D9E  3000               	movlw	0
 13589  1D9F  319F  27CD  319D   	fcall	_getMain_All_Error_Status
 13590  1DA2  3800               	iorlw	0
 13591  1DA3  1D03               	skipz
 13592  1DA4  2DAB               	goto	l861
 13593  1DA5  319A  22E9  319D   	fcall	_getMain_All_LightsStatus
 13594  1DA8  3800               	iorlw	0
 13595  1DA9  1D03               	skipz
 13596  1DAA  2DAD               	goto	l8597
 13597  1DAB                     l861:	
 13598                           
 13599                           ;Dimmer_B1.c: 776: Dimmer.LoadGO = 0;
 13600  1DAB  0022               	movlb	2	; select bank2
 13601  1DAC  10AC               	bcf	_Dimmer^(0+256),1
 13602  1DAD                     l8597:	
 13603                           
 13604                           ;Dimmer_B1.c: 777: }
 13605                           ;Dimmer_B1.c: 778: }
 13606                           ;Dimmer_B1.c: 782: setDimmerLights_Main(1);
 13607  1DAD  3001               	movlw	1
 13608  1DAE  3196  264F  319D   	fcall	_setDimmerLights_Main
 13609                           
 13610                           ;Dimmer_B1.c: 786: setDimmerLights_Main(2);
 13611  1DB1  3002               	movlw	2
 13612  1DB2  3196  264F         	fcall	_setDimmerLights_Main
 13613  1DB4  0008               	return
 13614  1DB5                     __end_of_DimmerLights_Main:	
 13615                           
 13616                           	psect	text87
 13617  164F                     __ptext87:	
 13618 ;; *************** function _setDimmerLights_Main *****************
 13619 ;; Defined at:
 13620 ;;		line 800 in file "../src/Dimmer_B1.c"
 13621 ;; Parameters:    Size  Location     Type
 13622 ;;  lights          1    wreg     unsigned char 
 13623 ;; Auto vars:     Size  Location     Type
 13624 ;;  lights          1    1[BANK1 ] unsigned char 
 13625 ;; Return value:  Size  Location     Type
 13626 ;;		None               void
 13627 ;; Registers used:
 13628 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13629 ;; Tracked objects:
 13630 ;;		On entry : 0/0
 13631 ;;		On exit  : 0/0
 13632 ;;		Unchanged: 0/0
 13633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13635 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13637 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13638 ;;Total ram usage:        1 bytes
 13639 ;; Hardware stack levels used:    1
 13640 ;; Hardware stack levels required when called:    9
 13641 ;; This function calls:
 13642 ;;		_DimmerLights_SelectPointer
 13643 ;;		_getDimmerLights_Allow_Condition
 13644 ;;		_getMain_All_LightsStatus
 13645 ;;		_setDimmerLights_Dimming
 13646 ;;		_setDimmerLights_OnOff
 13647 ;; This function is called by:
 13648 ;;		_DimmerLights_Main
 13649 ;; This function uses a non-reentrant model
 13650 ;;
 13651                           
 13652                           
 13653                           ;psect for function _setDimmerLights_Main
 13654  164F                     _setDimmerLights_Main:	
 13655                           
 13656                           ;incstack = 0
 13657                           ; Regs used in _setDimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13658                           ;setDimmerLights_Main@lights stored from wreg
 13659  164F  0021               	movlb	1	; select bank1
 13660  1650  00E7               	movwf	setDimmerLights_Main@lights^(0+128)
 13661                           
 13662                           ;Dimmer_B1.c: 802: DimmerLights_SelectPointer(lights);
 13663  1651  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13664  1652  319B  23CB  3196   	fcall	_DimmerLights_SelectPointer
 13665                           
 13666                           ;Dimmer_B1.c: 803: if (DimmerLights->Trigger == 1) {
 13667  1655  0021               	movlb	1	; select bank1
 13668  1656  0856               	movf	_DimmerLights^(0+128),w
 13669  1657  0086               	movwf	6
 13670  1658  3001               	movlw	1	; select bank2/3
 13671  1659  0087               	movwf	7
 13672  165A  1C81               	btfss	1,1
 13673  165B  2E7E               	goto	l7899
 13674                           
 13675                           ;Dimmer_B1.c: 804: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13676  165C  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13677  165D  3191  2140  3196   	fcall	_getDimmerLights_Allow_Condition
 13678  1660  3800               	iorlw	0
 13679  1661  1D03               	skipz
 13680  1662  0008               	return
 13681                           
 13682                           ;Dimmer_B1.c: 805: DimmerLights->Trigger = 0;
 13683  1663  0021               	movlb	1	; select bank1
 13684  1664  0856               	movf	_DimmerLights^(0+128),w
 13685  1665  0086               	movwf	6
 13686  1666  3001               	movlw	1	; select bank2/3
 13687  1667  0087               	movwf	7
 13688  1668  1081               	bcf	1,1
 13689                           
 13690                           ;Dimmer_B1.c: 806: if (DimmerLights->Switch == 1) {
 13691  1669  0856               	movf	_DimmerLights^(0+128),w
 13692  166A  0086               	movwf	6
 13693  166B  3001               	movlw	1	; select bank2/3
 13694  166C  0087               	movwf	7
 13695  166D  1D01               	btfss	1,2
 13696  166E  2E77               	goto	l7897
 13697                           
 13698                           ;Dimmer_B1.c: 807: setDimmerLights_OnOff(lights, 1);
 13699  166F  0020               	movlb	0	; select bank0
 13700  1670  01ED               	clrf	setDimmerLights_OnOff@command
 13701  1671  0AED               	incf	setDimmerLights_OnOff@command,f
 13702  1672  0021               	movlb	1	; select bank1
 13703  1673  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13704  1674  3186  262A         	fcall	_setDimmerLights_OnOff
 13705                           
 13706                           ;Dimmer_B1.c: 808: } else {
 13707  1676  0008               	return
 13708  1677                     l7897:	
 13709                           
 13710                           ;Dimmer_B1.c: 809: setDimmerLights_OnOff(lights, 0);
 13711  1677  0020               	movlb	0	; select bank0
 13712  1678  01ED               	clrf	setDimmerLights_OnOff@command
 13713  1679  0021               	movlb	1	; select bank1
 13714  167A  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13715  167B  3186  262A         	fcall	_setDimmerLights_OnOff
 13716                           
 13717                           ;Dimmer_B1.c: 810: }
 13718                           ;Dimmer_B1.c: 811: }
 13719                           ;Dimmer_B1.c: 812: } else {
 13720  167D  0008               	return
 13721  167E                     l7899:	
 13722                           
 13723                           ;Dimmer_B1.c: 813: if (getMain_All_LightsStatus() == 1) {
 13724  167E  319A  22E9  3196   	fcall	_getMain_All_LightsStatus
 13725  1681  3A01               	xorlw	1
 13726  1682  1D03               	skipz
 13727  1683  2EAD               	goto	l7911
 13728                           
 13729                           ;Dimmer_B1.c: 814: if (DimmerLights->DimmingTrigger == 1) {
 13730  1684  0021               	movlb	1	; select bank1
 13731  1685  0856               	movf	_DimmerLights^(0+128),w
 13732  1686  0086               	movwf	6
 13733  1687  3001               	movlw	1	; select bank2/3
 13734  1688  0087               	movwf	7
 13735  1689  1E01               	btfss	1,4
 13736  168A  0008               	return
 13737                           
 13738                           ;Dimmer_B1.c: 815: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13739  168B  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13740  168C  3191  2140  3196   	fcall	_getDimmerLights_Allow_Condition
 13741  168F  3800               	iorlw	0
 13742  1690  1D03               	skipz
 13743  1691  0008               	return
 13744                           
 13745                           ;Dimmer_B1.c: 816: DimmerLights->DimmingTrigger = 0;
 13746  1692  0021               	movlb	1	; select bank1
 13747  1693  0856               	movf	_DimmerLights^(0+128),w
 13748  1694  0086               	movwf	6
 13749  1695  3001               	movlw	1	; select bank2/3
 13750  1696  0087               	movwf	7
 13751  1697  1201               	bcf	1,4
 13752                           
 13753                           ;Dimmer_B1.c: 817: if (DimmerLights->DimmingSwitch == 1) {
 13754  1698  0856               	movf	_DimmerLights^(0+128),w
 13755  1699  0086               	movwf	6
 13756  169A  3001               	movlw	1	; select bank2/3
 13757  169B  0087               	movwf	7
 13758  169C  1E81               	btfss	1,5
 13759  169D  2EA6               	goto	l7909
 13760                           
 13761                           ;Dimmer_B1.c: 818: setDimmerLights_Dimming(lights, 1);
 13762  169E  0020               	movlb	0	; select bank0
 13763  169F  01EA               	clrf	setDimmerLights_Dimming@status
 13764  16A0  0AEA               	incf	setDimmerLights_Dimming@status,f
 13765  16A1  0021               	movlb	1	; select bank1
 13766  16A2  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13767  16A3  3193  23B5         	fcall	_setDimmerLights_Dimming
 13768                           
 13769                           ;Dimmer_B1.c: 819: } else {
 13770  16A5  0008               	return
 13771  16A6                     l7909:	
 13772                           
 13773                           ;Dimmer_B1.c: 820: setDimmerLights_Dimming(lights, 0);
 13774  16A6  0020               	movlb	0	; select bank0
 13775  16A7  01EA               	clrf	setDimmerLights_Dimming@status
 13776  16A8  0021               	movlb	1	; select bank1
 13777  16A9  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13778  16AA  3193  23B5         	fcall	_setDimmerLights_Dimming
 13779                           
 13780                           ;Dimmer_B1.c: 821: }
 13781                           ;Dimmer_B1.c: 822: }
 13782                           ;Dimmer_B1.c: 823: }
 13783                           ;Dimmer_B1.c: 824: } else {
 13784  16AC  0008               	return
 13785  16AD                     l7911:	
 13786                           
 13787                           ;Dimmer_B1.c: 825: if (DimmerLights->DimmingTrigger == 1) {
 13788  16AD  0021               	movlb	1	; select bank1
 13789  16AE  0856               	movf	_DimmerLights^(0+128),w
 13790  16AF  0086               	movwf	6
 13791  16B0  3001               	movlw	1	; select bank2/3
 13792  16B1  0087               	movwf	7
 13793  16B2  1E01               	btfss	1,4
 13794  16B3  0008               	return
 13795                           
 13796                           ;Dimmer_B1.c: 826: DimmerLights->DimmingTrigger = 0;
 13797  16B4  0856               	movf	_DimmerLights^(0+128),w
 13798  16B5  0086               	movwf	6
 13799  16B6  3001               	movlw	1	; select bank2/3
 13800  16B7  0087               	movwf	7
 13801  16B8  1201               	bcf	1,4
 13802  16B9  0008               	return
 13803  16BA                     __end_of_setDimmerLights_Main:	
 13804                           
 13805                           	psect	text88
 13806  062A                     __ptext88:	
 13807 ;; *************** function _setDimmerLights_OnOff *****************
 13808 ;; Defined at:
 13809 ;;		line 834 in file "../src/Dimmer_B1.c"
 13810 ;; Parameters:    Size  Location     Type
 13811 ;;  lights          1    wreg     unsigned char 
 13812 ;;  command         1   77[BANK0 ] unsigned char 
 13813 ;; Auto vars:     Size  Location     Type
 13814 ;;  lights          1    0[BANK1 ] unsigned char 
 13815 ;; Return value:  Size  Location     Type
 13816 ;;		None               void
 13817 ;; Registers used:
 13818 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13819 ;; Tracked objects:
 13820 ;;		On entry : 0/0
 13821 ;;		On exit  : 0/0
 13822 ;;		Unchanged: 0/0
 13823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13824 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13825 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13826 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13827 ;;      Totals:         0       3       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13828 ;;Total ram usage:        4 bytes
 13829 ;; Hardware stack levels used:    1
 13830 ;; Hardware stack levels required when called:    8
 13831 ;; This function calls:
 13832 ;;		_getCmd_Status
 13833 ;;		_getDelayOff_GO
 13834 ;;		_getDimmerLights_PercentToValue
 13835 ;;		_getMain_All_LightsStatus
 13836 ;;		_setCmd_Status
 13837 ;;		_setDelayOff_GO
 13838 ;;		_setDimmerIntr_ControlStatus
 13839 ;;		_setDimmerIntr_DimmingValue
 13840 ;;		_setDimmerIntr_Dimming_RF
 13841 ;;		_setDimmerIntr_MaxmumValue
 13842 ;;		_setDimmerLights_Line
 13843 ;;		_setLED
 13844 ;;		_setProductData
 13845 ;;		_setRF_DimmerLights
 13846 ;;		_setTxData
 13847 ;; This function is called by:
 13848 ;;		_setDimmerLights_Main
 13849 ;; This function uses a non-reentrant model
 13850 ;;
 13851                           
 13852                           
 13853                           ;psect for function _setDimmerLights_OnOff
 13854  062A                     _setDimmerLights_OnOff:	
 13855                           
 13856                           ;incstack = 0
 13857                           ; Regs used in _setDimmerLights_OnOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13858                           ;setDimmerLights_OnOff@lights stored from wreg
 13859  062A  0021               	movlb	1	; select bank1
 13860  062B  00E6               	movwf	setDimmerLights_OnOff@lights^(0+128)
 13861                           
 13862                           ;Dimmer_B1.c: 836: if (command == 1) {
 13863  062C  0020               	movlb	0	; select bank0
 13864  062D  086D               	movf	setDimmerLights_OnOff@command,w
 13865  062E  3A01               	xorlw	1
 13866  062F  1D03               	skipz
 13867  0630  2E95               	goto	l7537
 13868                           
 13869                           ;Dimmer_B1.c: 837: setDimmerIntr_ControlStatus(lights, 1);
 13870  0631  01A0               	clrf	setDimmerIntr_ControlStatus@command
 13871  0632  0AA0               	incf	setDimmerIntr_ControlStatus@command,f
 13872  0633  0021               	movlb	1	; select bank1
 13873  0634  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13874  0635  319F  2740  3186   	fcall	_setDimmerIntr_ControlStatus
 13875                           
 13876                           ;Dimmer_B1.c: 840: Dimmer.Load_Status = 1;
 13877  0638  0022               	movlb	2	; select bank2
 13878  0639  152C               	bsf	_Dimmer^(0+256),2
 13879                           
 13880                           ;Dimmer_B1.c: 841: setDimmerLights_Line(lights);
 13881  063A  0021               	movlb	1	; select bank1
 13882  063B  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13883  063C  319C  24DF  3186   	fcall	_setDimmerLights_Line
 13884                           
 13885                           ;Dimmer_B1.c: 847: setLED(lights, 0);
 13886  063F  0020               	movlb	0	; select bank0
 13887  0640  01A2               	clrf	setLED@command
 13888  0641  0021               	movlb	1	; select bank1
 13889  0642  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13890  0643  3193  230E  3186   	fcall	_setLED
 13891                           
 13892                           ;Dimmer_B1.c: 868: if (DimmerLights->DimmingRun == 1) {
 13893  0646  0021               	movlb	1	; select bank1
 13894  0647  0A56               	incf	_DimmerLights^(0+128),w
 13895  0648  0086               	movwf	6
 13896  0649  3001               	movlw	1	; select bank2/3
 13897  064A  0087               	movwf	7
 13898  064B  1F01               	btfss	1,6
 13899  064C  2E71               	goto	l7527
 13900                           
 13901                           ;Dimmer_B1.c: 869: DimmerLights->DimmingRun = 0;
 13902  064D  0A56               	incf	_DimmerLights^(0+128),w
 13903  064E  0086               	movwf	6
 13904  064F  3001               	movlw	1	; select bank2/3
 13905  0650  0087               	movwf	7
 13906  0651  1301               	bcf	1,6
 13907                           
 13908                           ;Dimmer_B1.c: 870: setDimmerIntr_MaxmumValue(lights, getDimmerLights_PercentToValue(prod
      +                          uct->Data[20 + lights]));
 13909  0652  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13910  0653  3E14               	addlw	20
 13911  0654  076F               	addwf	_product^(0+128),w
 13912  0655  0020               	movlb	0	; select bank0
 13913  0656  00EE               	movwf	??_setDimmerLights_OnOff
 13914  0657  086E               	movf	??_setDimmerLights_OnOff,w
 13915  0658  0086               	movwf	6
 13916  0659  3002               	movlw	2	; select bank4/5
 13917  065A  0087               	movwf	7
 13918  065B  0801               	movf	1,w
 13919  065C  3195  2520  3186   	fcall	_getDimmerLights_PercentToValue
 13920  065F  0020               	movlb	0	; select bank0
 13921  0660  00EF               	movwf	??_setDimmerLights_OnOff+1
 13922  0661  086F               	movf	??_setDimmerLights_OnOff+1,w
 13923  0662  00E2               	movwf	setDimmerIntr_MaxmumValue@value
 13924  0663  0021               	movlb	1	; select bank1
 13925  0664  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13926  0665  319B  23E2  3186   	fcall	_setDimmerIntr_MaxmumValue
 13927                           
 13928                           ;Dimmer_B1.c: 871: setDimmerIntr_Dimming_RF(lights, 1);
 13929  0668  0020               	movlb	0	; select bank0
 13930  0669  01A0               	clrf	setDimmerIntr_Dimming_RF@command
 13931  066A  0AA0               	incf	setDimmerIntr_Dimming_RF@command,f
 13932  066B  0021               	movlb	1	; select bank1
 13933  066C  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13934  066D  319F  276F  3186   	fcall	_setDimmerIntr_Dimming_RF
 13935                           
 13936                           ;Dimmer_B1.c: 872: } else {
 13937  0670  2E88               	goto	l7529
 13938  0671                     l7527:	
 13939                           
 13940                           ;Dimmer_B1.c: 873: setDimmerIntr_DimmingValue(lights, getDimmerLights_PercentToValue(pro
      +                          duct->Data[20 + lights]));
 13941  0671  0021               	movlb	1	; select bank1
 13942  0672  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13943  0673  3E14               	addlw	20
 13944  0674  076F               	addwf	_product^(0+128),w
 13945  0675  0020               	movlb	0	; select bank0
 13946  0676  00EE               	movwf	??_setDimmerLights_OnOff
 13947  0677  086E               	movf	??_setDimmerLights_OnOff,w
 13948  0678  0086               	movwf	6
 13949  0679  3002               	movlw	2	; select bank4/5
 13950  067A  0087               	movwf	7
 13951  067B  0801               	movf	1,w
 13952  067C  3195  2520  3186   	fcall	_getDimmerLights_PercentToValue
 13953  067F  0020               	movlb	0	; select bank0
 13954  0680  00EF               	movwf	??_setDimmerLights_OnOff+1
 13955  0681  086F               	movf	??_setDimmerLights_OnOff+1,w
 13956  0682  00E2               	movwf	setDimmerIntr_DimmingValue@value
 13957  0683  0021               	movlb	1	; select bank1
 13958  0684  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13959  0685  319B  23F9  3186   	fcall	_setDimmerIntr_DimmingValue
 13960  0688                     l7529:	
 13961                           
 13962                           ;Dimmer_B1.c: 876: }
 13963                           ;Dimmer_B1.c: 878: if (lights == 1) {
 13964  0688  0021               	movlb	1	; select bank1
 13965  0689  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13966  068A  3A01               	xorlw	1
 13967  068B  1D03               	skipz
 13968  068C  2E8F               	goto	l7533
 13969                           
 13970                           ;Dimmer_B1.c: 880: DimmerIntr1.TuneGO = 1;
 13971  068D  173C               	bsf	(_DimmerIntr1^(0+128)+1),6
 13972                           
 13973                           ;Dimmer_B1.c: 882: } else if (lights == 2) {
 13974  068E  2ECC               	goto	l7555
 13975  068F                     l7533:	
 13976  068F  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13977  0690  3A02               	xorlw	2
 13978  0691  1D03               	skipz
 13979  0692  2ECC               	goto	l7555
 13980                           
 13981                           ;Dimmer_B1.c: 884: DimmerIntr2.TuneGO = 1;
 13982  0693  1748               	bsf	(_DimmerIntr2^(0+128)+1),6
 13983                           
 13984                           ;Dimmer_B1.c: 886: }
 13985                           ;Dimmer_B1.c: 892: } else if (command == 0) {
 13986  0694  2ECC               	goto	l7555
 13987  0695                     l7537:	
 13988  0695  0020               	movlb	0	; select bank0
 13989  0696  08ED               	movf	setDimmerLights_OnOff@command,f
 13990  0697  1D03               	skipz
 13991  0698  2ECC               	goto	l7555
 13992                           
 13993                           ;Dimmer_B1.c: 893: setDimmerIntr_ControlStatus(lights, 0);
 13994  0699  01A0               	clrf	setDimmerIntr_ControlStatus@command
 13995  069A  0021               	movlb	1	; select bank1
 13996  069B  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13997  069C  319F  2740  3186   	fcall	_setDimmerIntr_ControlStatus
 13998                           
 13999                           ;Dimmer_B1.c: 895: Dimmer.Load_Status = 0;
 14000  069F  0022               	movlb	2	; select bank2
 14001  06A0  112C               	bcf	_Dimmer^(0+256),2
 14002                           
 14003                           ;Dimmer_B1.c: 896: setDimmerLights_Line(0);
 14004  06A1  3000               	movlw	0
 14005  06A2  319C  24DF  3186   	fcall	_setDimmerLights_Line
 14006                           
 14007                           ;Dimmer_B1.c: 900: if (getDelayOff_GO(lights) == 1) {
 14008  06A5  0021               	movlb	1	; select bank1
 14009  06A6  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14010  06A7  319A  2213  3186   	fcall	_getDelayOff_GO
 14011  06AA  3A01               	xorlw	1
 14012  06AB  1D03               	skipz
 14013  06AC  2EB5               	goto	l888
 14014                           
 14015                           ;Dimmer_B1.c: 901: setDelayOff_GO(lights, 0, 0);
 14016  06AD  0020               	movlb	0	; select bank0
 14017  06AE  01E5               	clrf	setDelayOff_GO@command
 14018  06AF  01E6               	clrf	setDelayOff_GO@value
 14019  06B0  0021               	movlb	1	; select bank1
 14020  06B1  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14021  06B2  318C  241C  3186   	fcall	_setDelayOff_GO
 14022  06B5                     l888:	
 14023                           
 14024                           ;Dimmer_B1.c: 902: }
 14025                           ;Dimmer_B1.c: 907: setLED(lights, 1);
 14026  06B5  0020               	movlb	0	; select bank0
 14027  06B6  01A2               	clrf	setLED@command
 14028  06B7  0AA2               	incf	setLED@command,f
 14029  06B8  0021               	movlb	1	; select bank1
 14030  06B9  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14031  06BA  3193  230E  3186   	fcall	_setLED
 14032                           
 14033                           ;Dimmer_B1.c: 912: if (lights == 1) {
 14034  06BD  0021               	movlb	1	; select bank1
 14035  06BE  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14036  06BF  3A01               	xorlw	1
 14037  06C0  1D03               	skipz
 14038  06C1  2EC5               	goto	l7551
 14039                           
 14040                           ;Dimmer_B1.c: 913: RB4 = 0;
 14041  06C2  0020               	movlb	0	; select bank0
 14042  06C3  120D               	bcf	13,4	;volatile
 14043                           
 14044                           ;Dimmer_B1.c: 915: }
 14045  06C4  2ECC               	goto	l7555
 14046  06C5                     l7551:	
 14047                           
 14048                           ;Dimmer_B1.c: 918: else if (lights == 2) {
 14049  06C5  0021               	movlb	1	; select bank1
 14050  06C6  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14051  06C7  3A02               	xorlw	2
 14052  06C8  1D03               	skipz
 14053  06C9  2ECC               	goto	l7555
 14054                           
 14055                           ;Dimmer_B1.c: 919: RA7 = 0;
 14056  06CA  0020               	movlb	0	; select bank0
 14057  06CB  138C               	bcf	12,7	;volatile
 14058  06CC                     l7555:	
 14059                           
 14060                           ;Dimmer_B1.c: 920: }
 14061                           ;Dimmer_B1.c: 926: }
 14062                           ;Dimmer_B1.c: 929: setRF_DimmerLights(lights, command);
 14063  06CC  0020               	movlb	0	; select bank0
 14064  06CD  086D               	movf	setDimmerLights_OnOff@command,w
 14065  06CE  00EE               	movwf	??_setDimmerLights_OnOff
 14066  06CF  086E               	movf	??_setDimmerLights_OnOff,w
 14067  06D0  00E5               	movwf	setRF_DimmerLights@on
 14068  06D1  0021               	movlb	1	; select bank1
 14069  06D2  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14070  06D3  3195  25EA  3186   	fcall	_setRF_DimmerLights
 14071                           
 14072                           ;Dimmer_B1.c: 931: if (getCmd_Status(1) == 1) {
 14073  06D6  3001               	movlw	1
 14074  06D7  319A  2257  3186   	fcall	_getCmd_Status
 14075  06DA  3A01               	xorlw	1
 14076  06DB  1D03               	skipz
 14077  06DC  2EF8               	goto	l7569
 14078                           
 14079                           ;Dimmer_B1.c: 932: if (getMain_All_LightsStatus() == 0) {
 14080  06DD  319A  22E9  3186   	fcall	_getMain_All_LightsStatus
 14081  06E0  3800               	iorlw	0
 14082  06E1  1D03               	skipz
 14083  06E2  0008               	return
 14084                           
 14085                           ;Dimmer_B1.c: 933: setCmd_Status(1, 0);
 14086  06E3  0020               	movlb	0	; select bank0
 14087  06E4  01A0               	clrf	setCmd_Status@cmd
 14088  06E5  3001               	movlw	1
 14089  06E6  319C  2427  3186   	fcall	_setCmd_Status
 14090                           
 14091                           ;Dimmer_B1.c: 934: setProductData(11, 0);
 14092  06E9  0020               	movlb	0	; select bank0
 14093  06EA  01E2               	clrf	setProductData@value
 14094  06EB  300B               	movlw	11
 14095  06EC  3199  2186  3186   	fcall	_setProductData
 14096                           
 14097                           ;Dimmer_B1.c: 935: setProductData(17, 0);
 14098  06EF  0020               	movlb	0	; select bank0
 14099  06F0  01E2               	clrf	setProductData@value
 14100  06F1  3011               	movlw	17
 14101  06F2  3199  2186  3186   	fcall	_setProductData
 14102                           
 14103                           ;Dimmer_B1.c: 936: setTxData();
 14104  06F5  318F  2745         	fcall	_setTxData
 14105                           
 14106                           ;Dimmer_B1.c: 937: }
 14107                           ;Dimmer_B1.c: 938: } else {
 14108  06F7  0008               	return
 14109  06F8                     l7569:	
 14110                           
 14111                           ;Dimmer_B1.c: 939: setTxData();
 14112  06F8  318F  2745         	fcall	_setTxData
 14113  06FA  0008               	return
 14114  06FB                     __end_of_setDimmerLights_OnOff:	
 14115                           
 14116                           	psect	text89
 14117  130E                     __ptext89:	
 14118 ;; *************** function _setLED *****************
 14119 ;; Defined at:
 14120 ;;		line 81 in file "../src/LED_B1.c"
 14121 ;; Parameters:    Size  Location     Type
 14122 ;;  led             1    wreg     unsigned char 
 14123 ;;  command         1    2[BANK0 ] unsigned char 
 14124 ;; Auto vars:     Size  Location     Type
 14125 ;;  led             1    3[BANK0 ] unsigned char 
 14126 ;; Return value:  Size  Location     Type
 14127 ;;		None               void
 14128 ;; Registers used:
 14129 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14130 ;; Tracked objects:
 14131 ;;		On entry : 0/0
 14132 ;;		On exit  : 0/0
 14133 ;;		Unchanged: 0/0
 14134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14135 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14136 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14138 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14139 ;;Total ram usage:        2 bytes
 14140 ;; Hardware stack levels used:    1
 14141 ;; Hardware stack levels required when called:    6
 14142 ;; This function calls:
 14143 ;;		_LedPointSelect
 14144 ;; This function is called by:
 14145 ;;		_setDimmerLights_OnOff
 14146 ;;		_setLED_Initialization
 14147 ;;		_setSw_Initialization
 14148 ;;		_Exception_Main
 14149 ;; This function uses a non-reentrant model
 14150 ;;
 14151                           
 14152                           
 14153                           ;psect for function _setLED
 14154  130E                     _setLED:	
 14155                           
 14156                           ;incstack = 0
 14157                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14158                           ;setLED@led stored from wreg
 14159  130E  0020               	movlb	0	; select bank0
 14160  130F  00A3               	movwf	setLED@led
 14161                           
 14162                           ;LED_B1.c: 82: LedPointSelect(led);
 14163  1310  0823               	movf	setLED@led,w
 14164  1311  319D  2575  3193   	fcall	_LedPointSelect
 14165                           
 14166                           ;LED_B1.c: 83: if (command == 0) {
 14167  1314  0020               	movlb	0	; select bank0
 14168  1315  08A2               	movf	setLED@command,f
 14169  1316  1D03               	skipz
 14170  1317  2B25               	goto	l7235
 14171                           
 14172                           ;LED_B1.c: 85: if (led == 1) {
 14173  1318  0823               	movf	setLED@led,w
 14174  1319  3A01               	xorlw	1
 14175  131A  1D03               	skipz
 14176  131B  2B1D               	goto	l7227
 14177                           
 14178                           ;LED_B1.c: 89: RA3 = 1;
 14179  131C  158C               	bsf	12,3	;volatile
 14180  131D                     l7227:	
 14181                           
 14182                           ;LED_B1.c: 91: }
 14183                           ;LED_B1.c: 94: if (led == 2) {
 14184  131D  0823               	movf	setLED@led,w
 14185  131E  3A02               	xorlw	2
 14186  131F  1903               	btfsc	3,2
 14187                           
 14188                           ;LED_B1.c: 98: RC7 = 1;
 14189  1320  178E               	bsf	14,7	;volatile
 14190                           
 14191                           ;LED_B1.c: 100: }
 14192                           ;LED_B1.c: 112: if (led == 99) {
 14193  1321  0823               	movf	setLED@led,w
 14194  1322  3A63               	xorlw	99
 14195  1323  1903               	btfsc	3,2
 14196                           
 14197                           ;LED_B1.c: 116: RB5 = 1;
 14198  1324  168D               	bsf	13,5	;volatile
 14199  1325                     l7235:	
 14200                           
 14201                           ;LED_B1.c: 118: }
 14202                           ;LED_B1.c: 120: }
 14203                           ;LED_B1.c: 121: if (command == 1) {
 14204  1325  0822               	movf	setLED@command,w
 14205  1326  3A01               	xorlw	1
 14206  1327  1D03               	skipz
 14207  1328  2B36               	goto	l7249
 14208                           
 14209                           ;LED_B1.c: 123: if (led == 1) {
 14210  1329  0823               	movf	setLED@led,w
 14211  132A  3A01               	xorlw	1
 14212  132B  1D03               	skipz
 14213  132C  2B2E               	goto	l7241
 14214                           
 14215                           ;LED_B1.c: 127: RA3 = 0;
 14216  132D  118C               	bcf	12,3	;volatile
 14217  132E                     l7241:	
 14218                           
 14219                           ;LED_B1.c: 129: }
 14220                           ;LED_B1.c: 132: if (led == 2) {
 14221  132E  0823               	movf	setLED@led,w
 14222  132F  3A02               	xorlw	2
 14223  1330  1903               	btfsc	3,2
 14224                           
 14225                           ;LED_B1.c: 136: RC7 = 0;
 14226  1331  138E               	bcf	14,7	;volatile
 14227                           
 14228                           ;LED_B1.c: 138: }
 14229                           ;LED_B1.c: 150: if (led == 99) {
 14230  1332  0823               	movf	setLED@led,w
 14231  1333  3A63               	xorlw	99
 14232  1334  1903               	btfsc	3,2
 14233                           
 14234                           ;LED_B1.c: 154: RB5 = 0;
 14235  1335  128D               	bcf	13,5	;volatile
 14236  1336                     l7249:	
 14237                           
 14238                           ;LED_B1.c: 156: }
 14239                           ;LED_B1.c: 158: }
 14240                           ;LED_B1.c: 159: if (command == 10) {
 14241  1336  0822               	movf	setLED@command,w
 14242  1337  3A0A               	xorlw	10
 14243  1338  1D03               	skipz
 14244  1339  2B56               	goto	l7265
 14245                           
 14246                           ;LED_B1.c: 160: LED->GO = 0;
 14247  133A  0021               	movlb	1	; select bank1
 14248  133B  0857               	movf	_LED^(0+128),w
 14249  133C  0086               	movwf	6
 14250  133D  3001               	movlw	1	; select bank2/3
 14251  133E  0087               	movwf	7
 14252  133F  1081               	bcf	1,1
 14253                           
 14254                           ;LED_B1.c: 161: LED->Time = 0;
 14255  1340  0A57               	incf	_LED^(0+128),w
 14256  1341  0086               	movwf	6
 14257  1342  3001               	movlw	1	; select bank2/3
 14258  1343  0087               	movwf	7
 14259  1344  3000               	movlw	0
 14260  1345  3FC0               	movwi [0]fsr1
 14261  1346  3FC1               	movwi [1]fsr1
 14262                           
 14263                           ;LED_B1.c: 163: if (led == 1) {
 14264  1347  0020               	movlb	0	; select bank0
 14265  1348  0823               	movf	setLED@led,w
 14266  1349  3A01               	xorlw	1
 14267  134A  1D03               	skipz
 14268  134B  2B4E               	goto	l7257
 14269                           
 14270                           ;LED_B1.c: 167: RA3 = 1;
 14271  134C  158C               	bsf	12,3	;volatile
 14272                           
 14273                           ;LED_B1.c: 169: }
 14274  134D  2B52               	goto	l7261
 14275  134E                     l7257:	
 14276                           
 14277                           ;LED_B1.c: 172: else if (led == 2) {
 14278  134E  0823               	movf	setLED@led,w
 14279  134F  3A02               	xorlw	2
 14280  1350  1903               	btfsc	3,2
 14281                           
 14282                           ;LED_B1.c: 176: RC7 = 1;
 14283  1351  178E               	bsf	14,7	;volatile
 14284  1352                     l7261:	
 14285                           
 14286                           ;LED_B1.c: 178: }
 14287                           ;LED_B1.c: 190: if (led == 99) {
 14288  1352  0823               	movf	setLED@led,w
 14289  1353  3A63               	xorlw	99
 14290  1354  1903               	btfsc	3,2
 14291                           
 14292                           ;LED_B1.c: 194: RB5 = 1;
 14293  1355  168D               	bsf	13,5	;volatile
 14294  1356                     l7265:	
 14295                           
 14296                           ;LED_B1.c: 196: }
 14297                           ;LED_B1.c: 198: }
 14298                           ;LED_B1.c: 199: if (command == 11) {
 14299  1356  0822               	movf	setLED@command,w
 14300  1357  3A0B               	xorlw	11
 14301  1358  1D03               	skipz
 14302  1359  0008               	return
 14303                           
 14304                           ;LED_B1.c: 200: LED->GO = 1;
 14305  135A  0021               	movlb	1	; select bank1
 14306  135B  0857               	movf	_LED^(0+128),w
 14307  135C  0086               	movwf	6
 14308  135D  3001               	movlw	1	; select bank2/3
 14309  135E  0087               	movwf	7
 14310  135F  1481               	bsf	1,1
 14311  1360  0008               	return
 14312  1361                     __end_of_setLED:	
 14313                           
 14314                           	psect	text90
 14315  1D75                     __ptext90:	
 14316 ;; *************** function _LedPointSelect *****************
 14317 ;; Defined at:
 14318 ;;		line 7 in file "../src/LED_B1.c"
 14319 ;; Parameters:    Size  Location     Type
 14320 ;;  led             1    wreg     unsigned char 
 14321 ;; Auto vars:     Size  Location     Type
 14322 ;;  led             1    1[BANK0 ] unsigned char 
 14323 ;; Return value:  Size  Location     Type
 14324 ;;		None               void
 14325 ;; Registers used:
 14326 ;;		wreg
 14327 ;; Tracked objects:
 14328 ;;		On entry : 0/0
 14329 ;;		On exit  : 0/0
 14330 ;;		Unchanged: 0/0
 14331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14333 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14334 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14335 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14336 ;;Total ram usage:        2 bytes
 14337 ;; Hardware stack levels used:    1
 14338 ;; Hardware stack levels required when called:    5
 14339 ;; This function calls:
 14340 ;;		Nothing
 14341 ;; This function is called by:
 14342 ;;		_setLED_Initialization
 14343 ;;		_setLED
 14344 ;;		_setLED_Main
 14345 ;; This function uses a non-reentrant model
 14346 ;;
 14347                           
 14348                           
 14349                           ;psect for function _LedPointSelect
 14350  1D75                     _LedPointSelect:	
 14351                           
 14352                           ;incstack = 0
 14353                           ; Regs used in _LedPointSelect: [wreg]
 14354                           ;LedPointSelect@led stored from wreg
 14355  1D75  0020               	movlb	0	; select bank0
 14356  1D76  00A1               	movwf	LedPointSelect@led
 14357                           
 14358                           ;LED_B1.c: 9: if (led == 1) {
 14359  1D77  0821               	movf	LedPointSelect@led,w
 14360  1D78  3A01               	xorlw	1
 14361  1D79  1D03               	skipz
 14362  1D7A  2D80               	goto	l1137
 14363                           
 14364                           ;LED_B1.c: 10: LED = &VarLED1;
 14365  1D7B  30E6               	movlw	_VarLED1& (0+255)
 14366  1D7C  00A0               	movwf	??_LedPointSelect
 14367  1D7D  0820               	movf	??_LedPointSelect,w
 14368  1D7E  0021               	movlb	1	; select bank1
 14369  1D7F  00D7               	movwf	_LED^(0+128)
 14370  1D80                     l1137:	
 14371                           
 14372                           ;LED_B1.c: 11: }
 14373                           ;LED_B1.c: 14: if (led == 2) {
 14374  1D80  0020               	movlb	0	; select bank0
 14375  1D81  0821               	movf	LedPointSelect@led,w
 14376  1D82  3A02               	xorlw	2
 14377  1D83  1D03               	skipz
 14378  1D84  2D8A               	goto	l1138
 14379                           
 14380                           ;LED_B1.c: 15: LED = &VarLED2;
 14381  1D85  30EA               	movlw	_VarLED2& (0+255)
 14382  1D86  00A0               	movwf	??_LedPointSelect
 14383  1D87  0820               	movf	??_LedPointSelect,w
 14384  1D88  0021               	movlb	1	; select bank1
 14385  1D89  00D7               	movwf	_LED^(0+128)
 14386  1D8A                     l1138:	
 14387                           
 14388                           ;LED_B1.c: 16: }
 14389                           ;LED_B1.c: 24: if (led == 99) {
 14390  1D8A  0020               	movlb	0	; select bank0
 14391  1D8B  0821               	movf	LedPointSelect@led,w
 14392  1D8C  3A63               	xorlw	99
 14393  1D8D  1D03               	skipz
 14394  1D8E  0008               	return
 14395                           
 14396                           ;LED_B1.c: 25: LED = &VarErrLED;
 14397  1D8F  30E2               	movlw	_VarErrLED& (0+255)
 14398  1D90  00A0               	movwf	??_LedPointSelect
 14399  1D91  0820               	movf	??_LedPointSelect,w
 14400  1D92  0021               	movlb	1	; select bank1
 14401  1D93  00D7               	movwf	_LED^(0+128)
 14402  1D94  0008               	return
 14403  1D95                     __end_of_LedPointSelect:	
 14404                           
 14405                           	psect	text91
 14406  1F6F                     __ptext91:	
 14407 ;; *************** function _setDimmerIntr_Dimming_RF *****************
 14408 ;; Defined at:
 14409 ;;		line 219 in file "../src/Dimmer_B1.c"
 14410 ;; Parameters:    Size  Location     Type
 14411 ;;  lights          1    wreg     unsigned char 
 14412 ;;  command         1    0[BANK0 ] unsigned char 
 14413 ;; Auto vars:     Size  Location     Type
 14414 ;;  lights          1    2[BANK0 ] unsigned char 
 14415 ;; Return value:  Size  Location     Type
 14416 ;;		None               void
 14417 ;; Registers used:
 14418 ;;		wreg, status,2, status,0
 14419 ;; Tracked objects:
 14420 ;;		On entry : 0/0
 14421 ;;		On exit  : 0/0
 14422 ;;		Unchanged: 0/0
 14423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14424 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14425 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14426 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14427 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14428 ;;Total ram usage:        3 bytes
 14429 ;; Hardware stack levels used:    1
 14430 ;; Hardware stack levels required when called:    5
 14431 ;; This function calls:
 14432 ;;		Nothing
 14433 ;; This function is called by:
 14434 ;;		_setDimmerLights_OnOff
 14435 ;;		_setRFSW_AdjControl
 14436 ;; This function uses a non-reentrant model
 14437 ;;
 14438                           
 14439                           
 14440                           ;psect for function _setDimmerIntr_Dimming_RF
 14441  1F6F                     _setDimmerIntr_Dimming_RF:	
 14442                           
 14443                           ;incstack = 0
 14444                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
 14445                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
 14446  1F6F  0020               	movlb	0	; select bank0
 14447  1F70  00A2               	movwf	setDimmerIntr_Dimming_RF@lights
 14448                           
 14449                           ;Dimmer_B1.c: 221: if (lights == 1) {
 14450  1F71  0822               	movf	setDimmerIntr_Dimming_RF@lights,w
 14451  1F72  3A01               	xorlw	1
 14452  1F73  1D03               	skipz
 14453  1F74  2F87               	goto	l6823
 14454                           
 14455                           ;Dimmer_B1.c: 222: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
 14456  1F75  0820               	movf	setDimmerIntr_Dimming_RF@command,w
 14457  1F76  3A01               	xorlw	1
 14458  1F77  3000               	movlw	0
 14459  1F78  1903               	skipnz
 14460  1F79  3001               	movlw	1
 14461  1F7A  00A1               	movwf	??_setDimmerIntr_Dimming_RF
 14462  1F7B  0EA1               	swapf	??_setDimmerIntr_Dimming_RF,f
 14463  1F7C  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 14464  1F7D  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 14465  1F7E  0021               	movlb	1	; select bank1
 14466  1F7F  083B               	movf	_DimmerIntr1^(0+128),w
 14467  1F80  0020               	movlb	0	; select bank0
 14468  1F81  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14469  1F82  39BF               	andlw	-65
 14470  1F83  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14471  1F84  0021               	movlb	1	; select bank1
 14472  1F85  00BB               	movwf	_DimmerIntr1^(0+128)
 14473                           
 14474                           ;Dimmer_B1.c: 223: }
 14475  1F86  0008               	return
 14476  1F87                     l6823:	
 14477                           
 14478                           ;Dimmer_B1.c: 226: else if (lights == 2) {
 14479  1F87  0020               	movlb	0	; select bank0
 14480  1F88  0822               	movf	setDimmerIntr_Dimming_RF@lights,w
 14481  1F89  3A02               	xorlw	2
 14482  1F8A  1D03               	skipz
 14483  1F8B  0008               	return
 14484                           
 14485                           ;Dimmer_B1.c: 227: DimmerIntr2.Dimming_RF = command == 1 ? 1 : 0;
 14486  1F8C  0820               	movf	setDimmerIntr_Dimming_RF@command,w
 14487  1F8D  3A01               	xorlw	1
 14488  1F8E  3000               	movlw	0
 14489  1F8F  1903               	skipnz
 14490  1F90  3001               	movlw	1
 14491  1F91  00A1               	movwf	??_setDimmerIntr_Dimming_RF
 14492  1F92  0EA1               	swapf	??_setDimmerIntr_Dimming_RF,f
 14493  1F93  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 14494  1F94  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 14495  1F95  0021               	movlb	1	; select bank1
 14496  1F96  0847               	movf	_DimmerIntr2^(0+128),w
 14497  1F97  0020               	movlb	0	; select bank0
 14498  1F98  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14499  1F99  39BF               	andlw	-65
 14500  1F9A  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14501  1F9B  0021               	movlb	1	; select bank1
 14502  1F9C  00C7               	movwf	_DimmerIntr2^(0+128)
 14503  1F9D  0008               	return
 14504  1F9E                     __end_of_setDimmerIntr_Dimming_RF:	
 14505                           
 14506                           	psect	text92
 14507  1BF9                     __ptext92:	
 14508 ;; *************** function _setDimmerIntr_DimmingValue *****************
 14509 ;; Defined at:
 14510 ;;		line 84 in file "../src/Dimmer_B1.c"
 14511 ;; Parameters:    Size  Location     Type
 14512 ;;  lights          1    wreg     unsigned char 
 14513 ;;  value           1   66[BANK0 ] unsigned char 
 14514 ;; Auto vars:     Size  Location     Type
 14515 ;;  lights          1   68[BANK0 ] unsigned char 
 14516 ;; Return value:  Size  Location     Type
 14517 ;;		None               void
 14518 ;; Registers used:
 14519 ;;		wreg
 14520 ;; Tracked objects:
 14521 ;;		On entry : 0/0
 14522 ;;		On exit  : 0/0
 14523 ;;		Unchanged: 0/0
 14524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14525 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14526 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14527 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14528 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14529 ;;Total ram usage:        3 bytes
 14530 ;; Hardware stack levels used:    1
 14531 ;; Hardware stack levels required when called:    5
 14532 ;; This function calls:
 14533 ;;		Nothing
 14534 ;; This function is called by:
 14535 ;;		_setDimmerLights_OnOff
 14536 ;; This function uses a non-reentrant model
 14537 ;;
 14538                           
 14539                           
 14540                           ;psect for function _setDimmerIntr_DimmingValue
 14541  1BF9                     _setDimmerIntr_DimmingValue:	
 14542                           
 14543                           ;incstack = 0
 14544                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 14545                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 14546  1BF9  0020               	movlb	0	; select bank0
 14547  1BFA  00E4               	movwf	setDimmerIntr_DimmingValue@lights
 14548                           
 14549                           ;Dimmer_B1.c: 86: if (lights == 1) {
 14550  1BFB  0864               	movf	setDimmerIntr_DimmingValue@lights,w
 14551  1BFC  3A01               	xorlw	1
 14552  1BFD  1D03               	skipz
 14553  1BFE  2C05               	goto	l7151
 14554                           
 14555                           ;Dimmer_B1.c: 87: DimmerIntr1.DimmingValue = value;
 14556  1BFF  0862               	movf	setDimmerIntr_DimmingValue@value,w
 14557  1C00  00E3               	movwf	??_setDimmerIntr_DimmingValue
 14558  1C01  0863               	movf	??_setDimmerIntr_DimmingValue,w
 14559  1C02  0021               	movlb	1	; select bank1
 14560  1C03  00C0               	movwf	(_DimmerIntr1^(0+128)+5)
 14561                           
 14562                           ;Dimmer_B1.c: 88: }
 14563  1C04  0008               	return
 14564  1C05                     l7151:	
 14565                           
 14566                           ;Dimmer_B1.c: 91: else if (lights == 2) {
 14567  1C05  0020               	movlb	0	; select bank0
 14568  1C06  0864               	movf	setDimmerIntr_DimmingValue@lights,w
 14569  1C07  3A02               	xorlw	2
 14570  1C08  1D03               	skipz
 14571  1C09  0008               	return
 14572                           
 14573                           ;Dimmer_B1.c: 92: DimmerIntr2.DimmingValue = value;
 14574  1C0A  0862               	movf	setDimmerIntr_DimmingValue@value,w
 14575  1C0B  00E3               	movwf	??_setDimmerIntr_DimmingValue
 14576  1C0C  0863               	movf	??_setDimmerIntr_DimmingValue,w
 14577  1C0D  0021               	movlb	1	; select bank1
 14578  1C0E  00CC               	movwf	(_DimmerIntr2^(0+128)+5)
 14579  1C0F  0008               	return
 14580  1C10                     __end_of_setDimmerIntr_DimmingValue:	
 14581                           
 14582                           	psect	text93
 14583  1F40                     __ptext93:	
 14584 ;; *************** function _setDimmerIntr_ControlStatus *****************
 14585 ;; Defined at:
 14586 ;;		line 66 in file "../src/Dimmer_B1.c"
 14587 ;; Parameters:    Size  Location     Type
 14588 ;;  lights          1    wreg     unsigned char 
 14589 ;;  command         1    0[BANK0 ] unsigned char 
 14590 ;; Auto vars:     Size  Location     Type
 14591 ;;  lights          1    2[BANK0 ] unsigned char 
 14592 ;; Return value:  Size  Location     Type
 14593 ;;		None               void
 14594 ;; Registers used:
 14595 ;;		wreg, status,2, status,0
 14596 ;; Tracked objects:
 14597 ;;		On entry : 0/0
 14598 ;;		On exit  : 0/0
 14599 ;;		Unchanged: 0/0
 14600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14601 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14602 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14603 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14604 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14605 ;;Total ram usage:        3 bytes
 14606 ;; Hardware stack levels used:    1
 14607 ;; Hardware stack levels required when called:    5
 14608 ;; This function calls:
 14609 ;;		Nothing
 14610 ;; This function is called by:
 14611 ;;		_setDimmerLights_OnOff
 14612 ;; This function uses a non-reentrant model
 14613 ;;
 14614                           
 14615                           
 14616                           ;psect for function _setDimmerIntr_ControlStatus
 14617  1F40                     _setDimmerIntr_ControlStatus:	
 14618                           
 14619                           ;incstack = 0
 14620                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 14621                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 14622  1F40  0020               	movlb	0	; select bank0
 14623  1F41  00A2               	movwf	setDimmerIntr_ControlStatus@lights
 14624                           
 14625                           ;Dimmer_B1.c: 68: if (lights == 1) {
 14626  1F42  0822               	movf	setDimmerIntr_ControlStatus@lights,w
 14627  1F43  3A01               	xorlw	1
 14628  1F44  1D03               	skipz
 14629  1F45  2F58               	goto	l7143
 14630                           
 14631                           ;Dimmer_B1.c: 69: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 14632  1F46  0820               	movf	setDimmerIntr_ControlStatus@command,w
 14633  1F47  3A01               	xorlw	1
 14634  1F48  3000               	movlw	0
 14635  1F49  1903               	skipnz
 14636  1F4A  3001               	movlw	1
 14637  1F4B  00A1               	movwf	??_setDimmerIntr_ControlStatus
 14638  1F4C  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14639  1F4D  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14640  1F4E  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14641  1F4F  0021               	movlb	1	; select bank1
 14642  1F50  083B               	movf	_DimmerIntr1^(0+128),w
 14643  1F51  0020               	movlb	0	; select bank0
 14644  1F52  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 14645  1F53  39F7               	andlw	-9
 14646  1F54  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 14647  1F55  0021               	movlb	1	; select bank1
 14648  1F56  00BB               	movwf	_DimmerIntr1^(0+128)
 14649                           
 14650                           ;Dimmer_B1.c: 70: }
 14651  1F57  0008               	return
 14652  1F58                     l7143:	
 14653                           
 14654                           ;Dimmer_B1.c: 73: else if (lights == 2) {
 14655  1F58  0020               	movlb	0	; select bank0
 14656  1F59  0822               	movf	setDimmerIntr_ControlStatus@lights,w
 14657  1F5A  3A02               	xorlw	2
 14658  1F5B  1D03               	skipz
 14659  1F5C  0008               	return
 14660                           
 14661                           ;Dimmer_B1.c: 74: DimmerIntr2.ControlStatus = command == 1 ? 1 : 0;
 14662  1F5D  0820               	movf	setDimmerIntr_ControlStatus@command,w
 14663  1F5E  3A01               	xorlw	1
 14664  1F5F  3000               	movlw	0
 14665  1F60  1903               	skipnz
 14666  1F61  3001               	movlw	1
 14667  1F62  00A1               	movwf	??_setDimmerIntr_ControlStatus
 14668  1F63  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14669  1F64  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14670  1F65  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14671  1F66  0021               	movlb	1	; select bank1
 14672  1F67  0847               	movf	_DimmerIntr2^(0+128),w
 14673  1F68  0020               	movlb	0	; select bank0
 14674  1F69  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 14675  1F6A  39F7               	andlw	-9
 14676  1F6B  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 14677  1F6C  0021               	movlb	1	; select bank1
 14678  1F6D  00C7               	movwf	_DimmerIntr2^(0+128)
 14679  1F6E  0008               	return
 14680  1F6F                     __end_of_setDimmerIntr_ControlStatus:	
 14681                           
 14682                           	psect	text94
 14683  0C1C                     __ptext94:	
 14684 ;; *************** function _setDelayOff_GO *****************
 14685 ;; Defined at:
 14686 ;;		line 87 in file "../src/DelayOff_B1.c"
 14687 ;; Parameters:    Size  Location     Type
 14688 ;;  sw              1    wreg     unsigned char 
 14689 ;;  command         1   69[BANK0 ] unsigned char 
 14690 ;;  value           1   70[BANK0 ] unsigned char 
 14691 ;; Auto vars:     Size  Location     Type
 14692 ;;  sw              1   76[BANK0 ] unsigned char 
 14693 ;;  k               1   75[BANK0 ] unsigned char 
 14694 ;;  j               1   74[BANK0 ] unsigned char 
 14695 ;;  i               1   73[BANK0 ] unsigned char 
 14696 ;; Return value:  Size  Location     Type
 14697 ;;		None               void
 14698 ;; Registers used:
 14699 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14700 ;; Tracked objects:
 14701 ;;		On entry : 0/0
 14702 ;;		On exit  : 0/0
 14703 ;;		Unchanged: 0/0
 14704 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14705 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14706 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14707 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14708 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14709 ;;Total ram usage:        8 bytes
 14710 ;; Hardware stack levels used:    1
 14711 ;; Hardware stack levels required when called:    6
 14712 ;; This function calls:
 14713 ;;		_DelayOffPointSelect
 14714 ;;		___bmul
 14715 ;;		_setProductData
 14716 ;; This function is called by:
 14717 ;;		_setDimmerLights_OnOff
 14718 ;;		_setRFSW_Control
 14719 ;; This function uses a non-reentrant model
 14720 ;;
 14721                           
 14722                           
 14723                           ;psect for function _setDelayOff_GO
 14724  0C1C                     _setDelayOff_GO:	
 14725                           
 14726                           ;incstack = 0
 14727                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14728                           ;setDelayOff_GO@sw stored from wreg
 14729  0C1C  0020               	movlb	0	; select bank0
 14730  0C1D  00EC               	movwf	setDelayOff_GO@sw
 14731                           
 14732                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 14733  0C1E  086C               	movf	setDelayOff_GO@sw,w
 14734  0C1F  319B  23B4  318C   	fcall	_DelayOffPointSelect
 14735                           
 14736                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 14737  0C22  0020               	movlb	0	; select bank0
 14738  0C23  0865               	movf	setDelayOff_GO@command,w
 14739  0C24  3A01               	xorlw	1
 14740  0C25  3000               	movlw	0
 14741  0C26  1903               	skipnz
 14742  0C27  3001               	movlw	1
 14743  0C28  00E7               	movwf	??_setDelayOff_GO
 14744  0C29  0021               	movlb	1	; select bank1
 14745  0C2A  0855               	movf	_DelayOff^(0+128),w
 14746  0C2B  0086               	movwf	6
 14747  0C2C  3001               	movlw	1	; select bank2/3
 14748  0C2D  0087               	movwf	7
 14749  0C2E  0020               	movlb	0	; select bank0
 14750  0C2F  0DE7               	rlf	??_setDelayOff_GO,f
 14751  0C30  0801               	movf	1,w
 14752  0C31  0667               	xorwf	??_setDelayOff_GO,w
 14753  0C32  39FD               	andlw	-3
 14754  0C33  0667               	xorwf	??_setDelayOff_GO,w
 14755  0C34  0081               	movwf	1
 14756                           
 14757                           ;DelayOff_B1.c: 91: DelayOff->SecondTime = 0;
 14758  0C35  0021               	movlb	1	; select bank1
 14759  0C36  0855               	movf	_DelayOff^(0+128),w
 14760  0C37  3E02               	addlw	2
 14761  0C38  0086               	movwf	6
 14762  0C39  3001               	movlw	1	; select bank2/3
 14763  0C3A  0087               	movwf	7
 14764  0C3B  3000               	movlw	0
 14765  0C3C  3FC0               	movwi [0]fsr1
 14766  0C3D  3FC1               	movwi [1]fsr1
 14767                           
 14768                           ;DelayOff_B1.c: 92: DelayOff->MinuteTime = 0;
 14769  0C3E  0855               	movf	_DelayOff^(0+128),w
 14770  0C3F  3E04               	addlw	4
 14771  0C40  0086               	movwf	6
 14772  0C41  3001               	movlw	1	; select bank2/3
 14773  0C42  0087               	movwf	7
 14774  0C43  0181               	clrf	1
 14775                           
 14776                           ;DelayOff_B1.c: 94: if (command == 1) {
 14777  0C44  0020               	movlb	0	; select bank0
 14778  0C45  0865               	movf	setDelayOff_GO@command,w
 14779  0C46  3A01               	xorlw	1
 14780  0C47  1D03               	skipz
 14781  0C48  2C9E               	goto	l6795
 14782                           
 14783                           ;DelayOff_B1.c: 96: char i = 5, j = 0, k = 0;
 14784  0C49  3005               	movlw	5
 14785  0C4A  00E7               	movwf	??_setDelayOff_GO
 14786  0C4B  0867               	movf	??_setDelayOff_GO,w
 14787  0C4C  00E9               	movwf	setDelayOff_GO@i
 14788  0C4D  01EA               	clrf	setDelayOff_GO@j
 14789  0C4E  01EB               	clrf	setDelayOff_GO@k
 14790                           
 14791                           ;DelayOff_B1.c: 97: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x30) {
 14792  0C4F  300F               	movlw	15
 14793  0C50  0566               	andwf	setDelayOff_GO@value,w
 14794  0C51  00E7               	movwf	??_setDelayOff_GO
 14795  0C52  0867               	movf	??_setDelayOff_GO,w
 14796  0C53  3A05               	xorlw	5
 14797  0C54  1903               	skipnz
 14798  0C55  2C5A               	goto	l6781
 14799  0C56  0866               	movf	setDelayOff_GO@value,w
 14800  0C57  390F               	andlw	15
 14801  0C58  1D03               	btfss	3,2
 14802  0C59  2C8A               	goto	l6791
 14803  0C5A                     l6781:	
 14804  0C5A  3031               	movlw	49
 14805  0C5B  0266               	subwf	setDelayOff_GO@value,w
 14806  0C5C  1803               	skipnc
 14807  0C5D  2C8A               	goto	l6791
 14808                           
 14809                           ;DelayOff_B1.c: 98: j = value & 0x0f;
 14810  0C5E  0866               	movf	setDelayOff_GO@value,w
 14811  0C5F  390F               	andlw	15
 14812  0C60  00E7               	movwf	??_setDelayOff_GO
 14813  0C61  0867               	movf	??_setDelayOff_GO,w
 14814  0C62  00EA               	movwf	setDelayOff_GO@j
 14815                           
 14816                           ;DelayOff_B1.c: 99: k = (value >> 4) & 0x0f;
 14817  0C63  0866               	movf	setDelayOff_GO@value,w
 14818  0C64  00E7               	movwf	??_setDelayOff_GO
 14819  0C65  3004               	movlw	4
 14820  0C66                     u6165:	
 14821  0C66  36E7               	lsrf	??_setDelayOff_GO,f
 14822  0C67  0B89               	decfsz	9,f
 14823  0C68  2C66               	goto	u6165
 14824  0C69  0867               	movf	??_setDelayOff_GO,w
 14825  0C6A  390F               	andlw	15
 14826  0C6B  00E8               	movwf	??_setDelayOff_GO+1
 14827  0C6C  0868               	movf	??_setDelayOff_GO+1,w
 14828  0C6D  00EB               	movwf	setDelayOff_GO@k
 14829                           
 14830                           ;DelayOff_B1.c: 100: DelayOff->Value = j + (k * 10);
 14831  0C6E  300A               	movlw	10
 14832  0C6F  00E7               	movwf	??_setDelayOff_GO
 14833  0C70  0867               	movf	??_setDelayOff_GO,w
 14834  0C71  00A0               	movwf	___bmul@multiplicand
 14835  0C72  086B               	movf	setDelayOff_GO@k,w
 14836  0C73  319A  2269  318C   	fcall	___bmul
 14837  0C76  0020               	movlb	0	; select bank0
 14838  0C77  076A               	addwf	setDelayOff_GO@j,w
 14839  0C78  00E8               	movwf	??_setDelayOff_GO+1
 14840  0C79  0021               	movlb	1	; select bank1
 14841  0C7A  0A55               	incf	_DelayOff^(0+128),w
 14842  0C7B  0086               	movwf	6
 14843  0C7C  3001               	movlw	1	; select bank2/3
 14844  0C7D  0087               	movwf	7
 14845  0C7E  0020               	movlb	0	; select bank0
 14846  0C7F  0868               	movf	??_setDelayOff_GO+1,w
 14847  0C80  0081               	movwf	1
 14848                           
 14849                           ;DelayOff_B1.c: 102: setProductData(26 + sw, value);
 14850  0C81  0866               	movf	setDelayOff_GO@value,w
 14851  0C82  00E7               	movwf	??_setDelayOff_GO
 14852  0C83  0867               	movf	??_setDelayOff_GO,w
 14853  0C84  00E2               	movwf	setProductData@value
 14854  0C85  086C               	movf	setDelayOff_GO@sw,w
 14855  0C86  3E1A               	addlw	26
 14856  0C87  3199  2186         	fcall	_setProductData
 14857                           
 14858                           ;DelayOff_B1.c: 103: } else {
 14859  0C89  0008               	return
 14860  0C8A                     l6791:	
 14861                           
 14862                           ;DelayOff_B1.c: 104: DelayOff->Value = 0x05;
 14863  0C8A  3005               	movlw	5
 14864  0C8B  0020               	movlb	0	; select bank0
 14865  0C8C  00E7               	movwf	??_setDelayOff_GO
 14866  0C8D  0021               	movlb	1	; select bank1
 14867  0C8E  0A55               	incf	_DelayOff^(0+128),w
 14868  0C8F  0086               	movwf	6
 14869  0C90  3001               	movlw	1	; select bank2/3
 14870  0C91  0087               	movwf	7
 14871  0C92  0020               	movlb	0	; select bank0
 14872  0C93  0867               	movf	??_setDelayOff_GO,w
 14873  0C94  0081               	movwf	1
 14874                           
 14875                           ;DelayOff_B1.c: 105: setProductData(26 + sw, 0x05);
 14876  0C95  3005               	movlw	5
 14877  0C96  00E7               	movwf	??_setDelayOff_GO
 14878  0C97  0867               	movf	??_setDelayOff_GO,w
 14879  0C98  00E2               	movwf	setProductData@value
 14880  0C99  086C               	movf	setDelayOff_GO@sw,w
 14881  0C9A  3E1A               	addlw	26
 14882  0C9B  3199  2186         	fcall	_setProductData
 14883                           
 14884                           ;DelayOff_B1.c: 106: }
 14885                           ;DelayOff_B1.c: 108: } else if (command == 0) {
 14886  0C9D  0008               	return
 14887  0C9E                     l6795:	
 14888  0C9E  0020               	movlb	0	; select bank0
 14889  0C9F  08E5               	movf	setDelayOff_GO@command,f
 14890  0CA0  1D03               	skipz
 14891  0CA1  0008               	return
 14892                           
 14893                           ;DelayOff_B1.c: 109: setProductData(26 + sw, 0);
 14894  0CA2  01E2               	clrf	setProductData@value
 14895  0CA3  086C               	movf	setDelayOff_GO@sw,w
 14896  0CA4  3E1A               	addlw	26
 14897  0CA5  3199  2186         	fcall	_setProductData
 14898  0CA7  0008               	return
 14899  0CA8                     __end_of_setDelayOff_GO:	
 14900                           
 14901                           	psect	text95
 14902  1A69                     __ptext95:	
 14903 ;; *************** function ___bmul *****************
 14904 ;; Defined at:
 14905 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 14906 ;; Parameters:    Size  Location     Type
 14907 ;;  multiplier      1    wreg     unsigned char 
 14908 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 14909 ;; Auto vars:     Size  Location     Type
 14910 ;;  multiplier      1    3[BANK0 ] unsigned char 
 14911 ;;  product         1    2[BANK0 ] unsigned char 
 14912 ;; Return value:  Size  Location     Type
 14913 ;;                  1    wreg      unsigned char 
 14914 ;; Registers used:
 14915 ;;		wreg, status,2, status,0
 14916 ;; Tracked objects:
 14917 ;;		On entry : 0/0
 14918 ;;		On exit  : 0/0
 14919 ;;		Unchanged: 0/0
 14920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14921 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14922 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14923 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14924 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14925 ;;Total ram usage:        4 bytes
 14926 ;; Hardware stack levels used:    1
 14927 ;; Hardware stack levels required when called:    5
 14928 ;; This function calls:
 14929 ;;		Nothing
 14930 ;; This function is called by:
 14931 ;;		_setDelayOff_GO
 14932 ;;		_DelayTimejudge
 14933 ;; This function uses a non-reentrant model
 14934 ;;
 14935                           
 14936                           
 14937                           ;psect for function ___bmul
 14938  1A69                     ___bmul:	
 14939                           
 14940                           ;incstack = 0
 14941                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 14942                           ;___bmul@multiplier stored from wreg
 14943  1A69  0020               	movlb	0	; select bank0
 14944  1A6A  00A3               	movwf	___bmul@multiplier
 14945  1A6B  01A2               	clrf	___bmul@product
 14946  1A6C                     l6437:	
 14947  1A6C  1C23               	btfss	___bmul@multiplier,0
 14948  1A6D  2A72               	goto	l6441
 14949  1A6E  0820               	movf	___bmul@multiplicand,w
 14950  1A6F  00A1               	movwf	??___bmul
 14951  1A70  0821               	movf	??___bmul,w
 14952  1A71  07A2               	addwf	___bmul@product,f
 14953  1A72                     l6441:	
 14954  1A72  1003               	clrc
 14955  1A73  0DA0               	rlf	___bmul@multiplicand,f
 14956  1A74  1003               	clrc
 14957  1A75  0CA3               	rrf	___bmul@multiplier,f
 14958  1A76  08A3               	movf	___bmul@multiplier,f
 14959  1A77  1D03               	skipz
 14960  1A78  2A6C               	goto	l6437
 14961  1A79  0822               	movf	___bmul@product,w
 14962  1A7A  0008               	return
 14963  1A7B                     __end_of___bmul:	
 14964                           
 14965                           	psect	text96
 14966  1C27                     __ptext96:	
 14967 ;; *************** function _setCmd_Status *****************
 14968 ;; Defined at:
 14969 ;;		line 651 in file "../src/main_B1.c"
 14970 ;; Parameters:    Size  Location     Type
 14971 ;;  number          1    wreg     unsigned char 
 14972 ;;  cmd             1    0[BANK0 ] unsigned char 
 14973 ;; Auto vars:     Size  Location     Type
 14974 ;;  number          1    2[BANK0 ] unsigned char 
 14975 ;; Return value:  Size  Location     Type
 14976 ;;		None               void
 14977 ;; Registers used:
 14978 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14979 ;; Tracked objects:
 14980 ;;		On entry : 0/0
 14981 ;;		On exit  : 0/0
 14982 ;;		Unchanged: 0/0
 14983 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14984 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14985 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14986 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14987 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14988 ;;Total ram usage:        3 bytes
 14989 ;; Hardware stack levels used:    1
 14990 ;; Hardware stack levels required when called:    5
 14991 ;; This function calls:
 14992 ;;		Nothing
 14993 ;; This function is called by:
 14994 ;;		_setDimmerLights_OnOff
 14995 ;;		_setControl_Lights_Table
 14996 ;; This function uses a non-reentrant model
 14997 ;;
 14998                           
 14999                           
 15000                           ;psect for function _setCmd_Status
 15001  1C27                     _setCmd_Status:	
 15002                           
 15003                           ;incstack = 0
 15004                           ; Regs used in _setCmd_Status: [wreg-fsr0h+status,2+status,0]
 15005                           ;setCmd_Status@number stored from wreg
 15006  1C27  0020               	movlb	0	; select bank0
 15007  1C28  00A2               	movwf	setCmd_Status@number
 15008                           
 15009                           ;main_B1.c: 652: switch (number) {
 15010  1C29  2C39               	goto	l6975
 15011  1C2A                     l6971:	
 15012                           ;main_B1.c: 653: case 1:
 15013                           
 15014                           
 15015                           ;main_B1.c: 654: Cmd.all_off = cmd == 1 ? 1 : 0;
 15016  1C2A  0820               	movf	setCmd_Status@cmd,w
 15017  1C2B  3A01               	xorlw	1
 15018  1C2C  3000               	movlw	0
 15019  1C2D  1903               	skipnz
 15020  1C2E  3001               	movlw	1
 15021  1C2F  00A1               	movwf	??_setCmd_Status
 15022  1C30  0021               	movlb	1	; select bank1
 15023  1C31  0854               	movf	_Cmd^(0+128),w
 15024  1C32  0020               	movlb	0	; select bank0
 15025  1C33  0621               	xorwf	??_setCmd_Status,w
 15026  1C34  39FE               	andlw	-2
 15027  1C35  0621               	xorwf	??_setCmd_Status,w
 15028  1C36  0021               	movlb	1	; select bank1
 15029  1C37  00D4               	movwf	_Cmd^(0+128)
 15030                           
 15031                           ;main_B1.c: 656: }
 15032                           
 15033                           ;main_B1.c: 655: break;
 15034  1C38  0008               	return
 15035  1C39                     l6975:	
 15036  1C39  0020               	movlb	0	; select bank0
 15037  1C3A  0822               	movf	setCmd_Status@number,w
 15038                           
 15039                           ; Switch size 1, requested type "space"
 15040                           ; Number of cases is 1, Range of values is 1 to 1
 15041                           ; switch strategies available:
 15042                           ; Name         Instructions Cycles
 15043                           ; simple_byte            4     3 (average)
 15044                           ; direct_byte           11     9 (fixed)
 15045                           ; jumptable            263     9 (fixed)
 15046                           ;	Chosen strategy is simple_byte
 15047  1C3B  3A01               	xorlw	1	; case 1
 15048  1C3C  1903               	skipnz
 15049  1C3D  2C2A               	goto	l6971
 15050  1C3E  2C3F               	goto	l2926
 15051  1C3F                     l2926:	
 15052  1C3F  0008               	return
 15053  1C40                     __end_of_setCmd_Status:	
 15054                           
 15055                           	psect	text97
 15056  1AE9                     __ptext97:	
 15057 ;; *************** function _getMain_All_LightsStatus *****************
 15058 ;; Defined at:
 15059 ;;		line 373 in file "../src/main_B1.c"
 15060 ;; Parameters:    Size  Location     Type
 15061 ;;		None
 15062 ;; Auto vars:     Size  Location     Type
 15063 ;;  status          1    0[BANK0 ] unsigned char 
 15064 ;; Return value:  Size  Location     Type
 15065 ;;                  1    wreg      unsigned char 
 15066 ;; Registers used:
 15067 ;;		wreg, status,2, status,0
 15068 ;; Tracked objects:
 15069 ;;		On entry : 0/0
 15070 ;;		On exit  : 0/0
 15071 ;;		Unchanged: 0/0
 15072 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15074 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15076 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15077 ;;Total ram usage:        1 bytes
 15078 ;; Hardware stack levels used:    1
 15079 ;; Hardware stack levels required when called:    5
 15080 ;; This function calls:
 15081 ;;		Nothing
 15082 ;; This function is called by:
 15083 ;;		_DimmerLights_Main
 15084 ;;		_setDimmerLights_Main
 15085 ;;		_setDimmerLights_OnOff
 15086 ;;		_Flash_Memory_Main
 15087 ;;		_Load_Main
 15088 ;;		_setTemp_Main
 15089 ;;		_setControl_Lights_Table
 15090 ;;		_Exception_Main
 15091 ;; This function uses a non-reentrant model
 15092 ;;
 15093                           
 15094                           
 15095                           ;psect for function _getMain_All_LightsStatus
 15096  1AE9                     _getMain_All_LightsStatus:	
 15097                           
 15098                           ;main_B1.c: 374: char status = 0;
 15099                           
 15100                           ;incstack = 0
 15101                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2+status,0]
 15102  1AE9  0020               	movlb	0	; select bank0
 15103  1AEA  01A0               	clrf	getMain_All_LightsStatus@status
 15104                           
 15105                           ;main_B1.c: 393: status = DimmerLights1.Status == 1 ? 1 : 0;
 15106  1AEB  3000               	movlw	0
 15107  1AEC  0022               	movlb	2	; select bank2
 15108  1AED  1868               	btfsc	(_DimmerLights1^(0+256)+1),0
 15109  1AEE  3001               	movlw	1
 15110  1AEF  0020               	movlb	0	; select bank0
 15111  1AF0  00A0               	movwf	getMain_All_LightsStatus@status
 15112                           
 15113                           ;main_B1.c: 394: if (status == 0) {
 15114  1AF1  08A0               	movf	getMain_All_LightsStatus@status,f
 15115  1AF2  1D03               	skipz
 15116  1AF3  2AFA               	goto	l6965
 15117                           
 15118                           ;main_B1.c: 395: status = DimmerLights2.Status == 1 ? 1 : 0;
 15119  1AF4  3000               	movlw	0
 15120  1AF5  0023               	movlb	3	; select bank3
 15121  1AF6  1851               	btfsc	(_DimmerLights2^(0+384)+1),0
 15122  1AF7  3001               	movlw	1
 15123  1AF8  0020               	movlb	0	; select bank0
 15124  1AF9  00A0               	movwf	getMain_All_LightsStatus@status
 15125  1AFA                     l6965:	
 15126                           
 15127                           ;main_B1.c: 396: }
 15128                           ;main_B1.c: 420: return status;
 15129  1AFA  0820               	movf	getMain_All_LightsStatus@status,w
 15130  1AFB  0008               	return
 15131  1AFC                     __end_of_getMain_All_LightsStatus:	
 15132                           
 15133                           	psect	text98
 15134  1A13                     __ptext98:	
 15135 ;; *************** function _getDelayOff_GO *****************
 15136 ;; Defined at:
 15137 ;;		line 114 in file "../src/DelayOff_B1.c"
 15138 ;; Parameters:    Size  Location     Type
 15139 ;;  sw              1    wreg     unsigned char 
 15140 ;; Auto vars:     Size  Location     Type
 15141 ;;  sw              1    2[BANK0 ] unsigned char 
 15142 ;;  go              1    3[BANK0 ] unsigned char 
 15143 ;; Return value:  Size  Location     Type
 15144 ;;                  1    wreg      unsigned char 
 15145 ;; Registers used:
 15146 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15147 ;; Tracked objects:
 15148 ;;		On entry : 0/0
 15149 ;;		On exit  : 0/0
 15150 ;;		Unchanged: 0/0
 15151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15153 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15155 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15156 ;;Total ram usage:        2 bytes
 15157 ;; Hardware stack levels used:    1
 15158 ;; Hardware stack levels required when called:    6
 15159 ;; This function calls:
 15160 ;;		_DelayOffPointSelect
 15161 ;; This function is called by:
 15162 ;;		_setDimmerLights_OnOff
 15163 ;; This function uses a non-reentrant model
 15164 ;;
 15165                           
 15166                           
 15167                           ;psect for function _getDelayOff_GO
 15168  1A13                     _getDelayOff_GO:	
 15169                           
 15170                           ;incstack = 0
 15171                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15172                           ;getDelayOff_GO@sw stored from wreg
 15173  1A13  0020               	movlb	0	; select bank0
 15174  1A14  00A2               	movwf	getDelayOff_GO@sw
 15175                           
 15176                           ;DelayOff_B1.c: 115: DelayOffPointSelect(sw);
 15177  1A15  0822               	movf	getDelayOff_GO@sw,w
 15178  1A16  319B  23B4         	fcall	_DelayOffPointSelect
 15179                           
 15180                           ;DelayOff_B1.c: 116: char go = DelayOff->GO == 1 ? 1 : 0;
 15181  1A18  0021               	movlb	1	; select bank1
 15182  1A19  0855               	movf	_DelayOff^(0+128),w
 15183  1A1A  0086               	movwf	6
 15184  1A1B  3001               	movlw	1	; select bank2/3
 15185  1A1C  0087               	movwf	7
 15186  1A1D  3000               	movlw	0
 15187  1A1E  1881               	btfsc	1,1
 15188  1A1F  3001               	movlw	1
 15189  1A20  0020               	movlb	0	; select bank0
 15190  1A21  00A3               	movwf	getDelayOff_GO@go
 15191                           
 15192                           ;DelayOff_B1.c: 117: return go;
 15193  1A22  0823               	movf	getDelayOff_GO@go,w
 15194  1A23  0008               	return
 15195  1A24                     __end_of_getDelayOff_GO:	
 15196                           
 15197                           	psect	text99
 15198  1A57                     __ptext99:	
 15199 ;; *************** function _getCmd_Status *****************
 15200 ;; Defined at:
 15201 ;;		line 659 in file "../src/main_B1.c"
 15202 ;; Parameters:    Size  Location     Type
 15203 ;;  number          1    wreg     unsigned char 
 15204 ;; Auto vars:     Size  Location     Type
 15205 ;;  number          1    0[BANK0 ] unsigned char 
 15206 ;;  cmd             1    1[BANK0 ] unsigned char 
 15207 ;; Return value:  Size  Location     Type
 15208 ;;                  1    wreg      unsigned char 
 15209 ;; Registers used:
 15210 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15211 ;; Tracked objects:
 15212 ;;		On entry : 0/0
 15213 ;;		On exit  : 0/0
 15214 ;;		Unchanged: 0/0
 15215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15217 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15219 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15220 ;;Total ram usage:        2 bytes
 15221 ;; Hardware stack levels used:    1
 15222 ;; Hardware stack levels required when called:    5
 15223 ;; This function calls:
 15224 ;;		Nothing
 15225 ;; This function is called by:
 15226 ;;		_setDimmerLights_OnOff
 15227 ;; This function uses a non-reentrant model
 15228 ;;
 15229                           
 15230                           
 15231                           ;psect for function _getCmd_Status
 15232  1A57                     _getCmd_Status:	
 15233                           
 15234                           ;incstack = 0
 15235                           ; Regs used in _getCmd_Status: [wreg-fsr0h+status,2+status,0]
 15236                           ;getCmd_Status@number stored from wreg
 15237  1A57  0020               	movlb	0	; select bank0
 15238  1A58  00A0               	movwf	getCmd_Status@number
 15239                           
 15240                           ;main_B1.c: 660: char cmd = 0;
 15241  1A59  01A1               	clrf	getCmd_Status@cmd
 15242                           
 15243                           ;main_B1.c: 661: switch (number) {
 15244  1A5A  2A62               	goto	l7275
 15245  1A5B                     l7271:	
 15246                           ;main_B1.c: 662: case 1:
 15247                           
 15248                           
 15249                           ;main_B1.c: 663: cmd = Cmd.all_off == 1 ? 1 : 0;
 15250  1A5B  3000               	movlw	0
 15251  1A5C  0021               	movlb	1	; select bank1
 15252  1A5D  1854               	btfsc	_Cmd^(0+128),0
 15253  1A5E  3001               	movlw	1
 15254  1A5F  0020               	movlb	0	; select bank0
 15255  1A60  00A1               	movwf	getCmd_Status@cmd
 15256                           
 15257                           ;main_B1.c: 665: }
 15258                           
 15259                           ;main_B1.c: 664: break;
 15260  1A61  2A67               	goto	l7277
 15261  1A62                     l7275:	
 15262  1A62  0820               	movf	getCmd_Status@number,w
 15263                           
 15264                           ; Switch size 1, requested type "space"
 15265                           ; Number of cases is 1, Range of values is 1 to 1
 15266                           ; switch strategies available:
 15267                           ; Name         Instructions Cycles
 15268                           ; simple_byte            4     3 (average)
 15269                           ; direct_byte           11     9 (fixed)
 15270                           ; jumptable            263     9 (fixed)
 15271                           ;	Chosen strategy is simple_byte
 15272  1A63  3A01               	xorlw	1	; case 1
 15273  1A64  1903               	skipnz
 15274  1A65  2A5B               	goto	l7271
 15275  1A66  2A67               	goto	l7277
 15276  1A67                     l7277:	
 15277                           
 15278                           ;main_B1.c: 666: return cmd;
 15279  1A67  0821               	movf	getCmd_Status@cmd,w
 15280  1A68  0008               	return
 15281  1A69                     __end_of_getCmd_Status:	
 15282                           
 15283                           	psect	text100
 15284  13B5                     __ptext100:	
 15285 ;; *************** function _setDimmerLights_Dimming *****************
 15286 ;; Defined at:
 15287 ;;		line 945 in file "../src/Dimmer_B1.c"
 15288 ;; Parameters:    Size  Location     Type
 15289 ;;  lights          1    wreg     unsigned char 
 15290 ;;  status          1   74[BANK0 ] unsigned char 
 15291 ;; Auto vars:     Size  Location     Type
 15292 ;;  lights          1   77[BANK0 ] unsigned char 
 15293 ;;  value           1   76[BANK0 ] unsigned char 
 15294 ;; Return value:  Size  Location     Type
 15295 ;;		None               void
 15296 ;; Registers used:
 15297 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15298 ;; Tracked objects:
 15299 ;;		On entry : 0/0
 15300 ;;		On exit  : 0/0
 15301 ;;		Unchanged: 0/0
 15302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15303 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15304 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15305 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15306 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15307 ;;Total ram usage:        4 bytes
 15308 ;; Hardware stack levels used:    1
 15309 ;; Hardware stack levels required when called:    8
 15310 ;; This function calls:
 15311 ;;		_getDimmerIntr_DimmingValue
 15312 ;;		_getDimmerLights_ValueToPercent
 15313 ;;		_setBuz
 15314 ;;		_setDimmerIntr_Dimming_Sw
 15315 ;;		_setDimmerIntr_MaxmumValue
 15316 ;;		_setDimmerLights_Line
 15317 ;;		_setMemory_Modify
 15318 ;;		_setProductData
 15319 ;;		_setRF_DimmerLights
 15320 ;;		_setRF_TransceiveGO
 15321 ;;		_setTxData
 15322 ;; This function is called by:
 15323 ;;		_setDimmerLights_Main
 15324 ;; This function uses a non-reentrant model
 15325 ;;
 15326                           
 15327                           
 15328                           ;psect for function _setDimmerLights_Dimming
 15329  13B5                     _setDimmerLights_Dimming:	
 15330                           
 15331                           ;incstack = 0
 15332                           ; Regs used in _setDimmerLights_Dimming: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15333                           ;setDimmerLights_Dimming@lights stored from wreg
 15334  13B5  0020               	movlb	0	; select bank0
 15335  13B6  00ED               	movwf	setDimmerLights_Dimming@lights
 15336                           
 15337                           ;Dimmer_B1.c: 946: if (status == 1) {
 15338  13B7  086A               	movf	setDimmerLights_Dimming@status,w
 15339  13B8  3A01               	xorlw	1
 15340  13B9  1D03               	skipz
 15341  13BA  2BCE               	goto	l7575
 15342                           
 15343                           ;Dimmer_B1.c: 947: setDimmerIntr_Dimming_Sw(lights, 1);
 15344  13BB  01A0               	clrf	setDimmerIntr_Dimming_Sw@command
 15345  13BC  0AA0               	incf	setDimmerIntr_Dimming_Sw@command,f
 15346  13BD  086D               	movf	setDimmerLights_Dimming@lights,w
 15347  13BE  319F  2715  3193   	fcall	_setDimmerIntr_Dimming_Sw
 15348                           
 15349                           ;Dimmer_B1.c: 950: setRF_TransceiveGO(0);
 15350  13C1  3000               	movlw	0
 15351  13C2  319A  22D6  3193   	fcall	_setRF_TransceiveGO
 15352                           
 15353                           ;Dimmer_B1.c: 952: setBuz(1, 100);
 15354  13C5  3064               	movlw	100
 15355  13C6  0020               	movlb	0	; select bank0
 15356  13C7  00A9               	movwf	setBuz@time
 15357  13C8  3000               	movlw	0
 15358  13C9  00AA               	movwf	setBuz@time+1
 15359  13CA  3001               	movlw	1
 15360  13CB  3194  240B         	fcall	_setBuz
 15361                           
 15362                           ;Dimmer_B1.c: 953: } else if (status == 0) {
 15363  13CD  0008               	return
 15364  13CE                     l7575:	
 15365  13CE  0020               	movlb	0	; select bank0
 15366  13CF  08EA               	movf	setDimmerLights_Dimming@status,f
 15367  13D0  1D03               	skipz
 15368  13D1  0008               	return
 15369                           
 15370                           ;Dimmer_B1.c: 954: setDimmerIntr_Dimming_Sw(lights, 0);
 15371  13D2  01A0               	clrf	setDimmerIntr_Dimming_Sw@command
 15372  13D3  086D               	movf	setDimmerLights_Dimming@lights,w
 15373  13D4  319F  2715  3193   	fcall	_setDimmerIntr_Dimming_Sw
 15374                           
 15375                           ;Dimmer_B1.c: 957: Dimmer.Load_Status = 0;
 15376  13D7  0022               	movlb	2	; select bank2
 15377  13D8  112C               	bcf	_Dimmer^(0+256),2
 15378                           
 15379                           ;Dimmer_B1.c: 958: setDimmerLights_Line(lights);
 15380  13D9  0020               	movlb	0	; select bank0
 15381  13DA  086D               	movf	setDimmerLights_Dimming@lights,w
 15382  13DB  319C  24DF  3193   	fcall	_setDimmerLights_Line
 15383                           
 15384                           ;Dimmer_B1.c: 960: char value = getDimmerIntr_DimmingValue(lights);
 15385  13DE  0020               	movlb	0	; select bank0
 15386  13DF  086D               	movf	setDimmerLights_Dimming@lights,w
 15387  13E0  319B  239E  3193   	fcall	_getDimmerIntr_DimmingValue
 15388  13E3  0020               	movlb	0	; select bank0
 15389  13E4  00EB               	movwf	??_setDimmerLights_Dimming
 15390  13E5  086B               	movf	??_setDimmerLights_Dimming,w
 15391  13E6  00EC               	movwf	setDimmerLights_Dimming@value
 15392                           
 15393                           ;Dimmer_B1.c: 961: setDimmerIntr_MaxmumValue(lights, value);
 15394  13E7  086C               	movf	setDimmerLights_Dimming@value,w
 15395  13E8  00EB               	movwf	??_setDimmerLights_Dimming
 15396  13E9  086B               	movf	??_setDimmerLights_Dimming,w
 15397  13EA  00E2               	movwf	setDimmerIntr_MaxmumValue@value
 15398  13EB  086D               	movf	setDimmerLights_Dimming@lights,w
 15399  13EC  319B  23E2  3193   	fcall	_setDimmerIntr_MaxmumValue
 15400                           
 15401                           ;Dimmer_B1.c: 962: setProductData((20 + lights), getDimmerLights_ValueToPercent(value));
 15402  13EF  0020               	movlb	0	; select bank0
 15403  13F0  086C               	movf	setDimmerLights_Dimming@value,w
 15404  13F1  3195  2585  3193   	fcall	_getDimmerLights_ValueToPercent
 15405  13F4  0020               	movlb	0	; select bank0
 15406  13F5  00EB               	movwf	??_setDimmerLights_Dimming
 15407  13F6  086B               	movf	??_setDimmerLights_Dimming,w
 15408  13F7  00E2               	movwf	setProductData@value
 15409  13F8  086D               	movf	setDimmerLights_Dimming@lights,w
 15410  13F9  3E14               	addlw	20
 15411  13FA  3199  2186  3193   	fcall	_setProductData
 15412                           
 15413                           ;Dimmer_B1.c: 969: setMemory_Modify(1);
 15414  13FD  3001               	movlw	1
 15415  13FE  319A  22C3  3193   	fcall	_setMemory_Modify
 15416                           
 15417                           ;Dimmer_B1.c: 973: setRF_DimmerLights(lights, 1);
 15418  1401  0020               	movlb	0	; select bank0
 15419  1402  01E5               	clrf	setRF_DimmerLights@on
 15420  1403  0AE5               	incf	setRF_DimmerLights@on,f
 15421  1404  086D               	movf	setDimmerLights_Dimming@lights,w
 15422  1405  3195  25EA  3193   	fcall	_setRF_DimmerLights
 15423                           
 15424                           ;Dimmer_B1.c: 974: setTxData();
 15425  1408  318F  2745         	fcall	_setTxData
 15426  140A  0008               	return
 15427  140B                     __end_of_setDimmerLights_Dimming:	
 15428                           
 15429                           	psect	text101
 15430  0F45                     __ptext101:	
 15431 ;; *************** function _setTxData *****************
 15432 ;; Defined at:
 15433 ;;		line 183 in file "../src/RF_Control_B1.c"
 15434 ;; Parameters:    Size  Location     Type
 15435 ;;		None
 15436 ;; Auto vars:     Size  Location     Type
 15437 ;;  i               1    0        unsigned char 
 15438 ;; Return value:  Size  Location     Type
 15439 ;;		None               void
 15440 ;; Registers used:
 15441 ;;		wreg, fsr1l, fsr1h, status,2
 15442 ;; Tracked objects:
 15443 ;;		On entry : 0/0
 15444 ;;		On exit  : 0/0
 15445 ;;		Unchanged: 0/0
 15446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15448 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15449 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15450 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15451 ;;Total ram usage:        1 bytes
 15452 ;; Hardware stack levels used:    1
 15453 ;; Hardware stack levels required when called:    5
 15454 ;; This function calls:
 15455 ;;		Nothing
 15456 ;; This function is called by:
 15457 ;;		_setDimmerLights_OnOff
 15458 ;;		_setDimmerLights_Dimming
 15459 ;;		_getRxData
 15460 ;;		_setControl_Lights_Table
 15461 ;;		_setRFSW_Control
 15462 ;;		_setRFSW_AdjControl
 15463 ;; This function uses a non-reentrant model
 15464 ;;
 15465                           
 15466                           
 15467                           ;psect for function _setTxData
 15468  0F45                     _setTxData:	
 15469                           
 15470                           ;RF_Control_B1.c: 184: char i;
 15471                           ;RF_Control_B1.c: 185: if (RF1.Enable == 1) {
 15472                           
 15473                           ;incstack = 0
 15474                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2]
 15475  0F45  0021               	movlb	1	; select bank1
 15476  0F46  1C20               	btfss	_RF1^(0+128),0
 15477  0F47  0008               	return
 15478                           
 15479                           ;RF_Control_B1.c: 187: RF1.TransceiveGO = 1;
 15480  0F48  1520               	bsf	_RF1^(0+128),2
 15481                           
 15482                           ;RF_Control_B1.c: 188: RF1.Count = 0;
 15483  0F49  01A2               	clrf	(_RF1^(0+128)+2)
 15484  0F4A  01A3               	clrf	((_RF1+1)^(0+128)+2)
 15485                           
 15486                           ;RF_Control_B1.c: 200: RF_Data[0] = 0x63;
 15487  0F4B  3063               	movlw	99
 15488  0F4C  0020               	movlb	0	; select bank0
 15489  0F4D  00A0               	movwf	??_setTxData
 15490  0F4E  0820               	movf	??_setTxData,w
 15491  0F4F  0023               	movlb	3	; select bank3
 15492  0F50  00A0               	movwf	_RF_Data^(0+384)
 15493                           
 15494                           ;RF_Control_B1.c: 201: RF_Data[1] = 0x02;
 15495  0F51  3002               	movlw	2
 15496  0F52  0020               	movlb	0	; select bank0
 15497  0F53  00A0               	movwf	??_setTxData
 15498  0F54  0820               	movf	??_setTxData,w
 15499  0F55  0023               	movlb	3	; select bank3
 15500  0F56  00A1               	movwf	(_RF_Data^(0+384)+1)
 15501                           
 15502                           ;RF_Control_B1.c: 203: RF_Data[2] = product->Data[2];
 15503  0F57  0021               	movlb	1	; select bank1
 15504  0F58  086F               	movf	_product^(0+128),w
 15505  0F59  0086               	movwf	6
 15506  0F5A  3002               	movlw	2	; select bank4/5
 15507  0F5B  0087               	movwf	7
 15508  0F5C  3002               	movlw	2	; select bank4/5
 15509  0F5D  3F42               	moviw [2]fsr1
 15510  0F5E  0023               	movlb	3	; select bank3
 15511  0F5F  00A2               	movwf	(_RF_Data^(0+384)+2)
 15512                           
 15513                           ;RF_Control_B1.c: 204: RF_Data[3] = product->Data[3];
 15514  0F60  0021               	movlb	1	; select bank1
 15515  0F61  086F               	movf	_product^(0+128),w
 15516  0F62  0086               	movwf	6
 15517  0F63  3002               	movlw	2	; select bank4/5
 15518  0F64  0087               	movwf	7
 15519  0F65  3002               	movlw	2	; select bank4/5
 15520  0F66  3F43               	moviw [3]fsr1
 15521  0F67  0023               	movlb	3	; select bank3
 15522  0F68  00A3               	movwf	(_RF_Data^(0+384)+3)
 15523                           
 15524                           ;RF_Control_B1.c: 205: RF_Data[4] = product->Data[4];
 15525  0F69  0021               	movlb	1	; select bank1
 15526  0F6A  086F               	movf	_product^(0+128),w
 15527  0F6B  0086               	movwf	6
 15528  0F6C  3002               	movlw	2	; select bank4/5
 15529  0F6D  0087               	movwf	7
 15530  0F6E  3002               	movlw	2	; select bank4/5
 15531  0F6F  3F44               	moviw [4]fsr1
 15532  0F70  0023               	movlb	3	; select bank3
 15533  0F71  00A4               	movwf	(_RF_Data^(0+384)+4)
 15534                           
 15535                           ;RF_Control_B1.c: 206: RF_Data[5] = product->Data[5];
 15536  0F72  0021               	movlb	1	; select bank1
 15537  0F73  086F               	movf	_product^(0+128),w
 15538  0F74  0086               	movwf	6
 15539  0F75  3002               	movlw	2	; select bank4/5
 15540  0F76  0087               	movwf	7
 15541  0F77  3002               	movlw	2	; select bank4/5
 15542  0F78  3F45               	moviw [5]fsr1
 15543  0F79  0023               	movlb	3	; select bank3
 15544  0F7A  00A5               	movwf	(_RF_Data^(0+384)+5)
 15545                           
 15546                           ;RF_Control_B1.c: 207: RF_Data[6] = product->Data[6];
 15547  0F7B  0021               	movlb	1	; select bank1
 15548  0F7C  086F               	movf	_product^(0+128),w
 15549  0F7D  0086               	movwf	6
 15550  0F7E  3002               	movlw	2	; select bank4/5
 15551  0F7F  0087               	movwf	7
 15552  0F80  3002               	movlw	2	; select bank4/5
 15553  0F81  3F46               	moviw [6]fsr1
 15554  0F82  0023               	movlb	3	; select bank3
 15555  0F83  00A6               	movwf	(_RF_Data^(0+384)+6)
 15556                           
 15557                           ;RF_Control_B1.c: 208: RF_Data[7] = product->Data[7];
 15558  0F84  0021               	movlb	1	; select bank1
 15559  0F85  086F               	movf	_product^(0+128),w
 15560  0F86  0086               	movwf	6
 15561  0F87  3002               	movlw	2	; select bank4/5
 15562  0F88  0087               	movwf	7
 15563  0F89  3002               	movlw	2	; select bank4/5
 15564  0F8A  3F47               	moviw [7]fsr1
 15565  0F8B  0023               	movlb	3	; select bank3
 15566  0F8C  00A7               	movwf	(_RF_Data^(0+384)+7)
 15567                           
 15568                           ;RF_Control_B1.c: 209: RF_Data[8] = product->Data[8];
 15569  0F8D  0021               	movlb	1	; select bank1
 15570  0F8E  086F               	movf	_product^(0+128),w
 15571  0F8F  0086               	movwf	6
 15572  0F90  3002               	movlw	2	; select bank4/5
 15573  0F91  0087               	movwf	7
 15574  0F92  3002               	movlw	2	; select bank4/5
 15575  0F93  3F48               	moviw [8]fsr1
 15576  0F94  0023               	movlb	3	; select bank3
 15577  0F95  00A8               	movwf	(_RF_Data^(0+384)+8)
 15578                           
 15579                           ;RF_Control_B1.c: 210: RF_Data[9] = product->Data[9];
 15580  0F96  0021               	movlb	1	; select bank1
 15581  0F97  086F               	movf	_product^(0+128),w
 15582  0F98  0086               	movwf	6
 15583  0F99  3002               	movlw	2	; select bank4/5
 15584  0F9A  0087               	movwf	7
 15585  0F9B  3002               	movlw	2	; select bank4/5
 15586  0F9C  3F49               	moviw [9]fsr1
 15587  0F9D  0023               	movlb	3	; select bank3
 15588  0F9E  00A9               	movwf	(_RF_Data^(0+384)+9)
 15589                           
 15590                           ;RF_Control_B1.c: 211: RF_Data[10] = product->Data[10];
 15591  0F9F  0021               	movlb	1	; select bank1
 15592  0FA0  086F               	movf	_product^(0+128),w
 15593  0FA1  0086               	movwf	6
 15594  0FA2  3002               	movlw	2	; select bank4/5
 15595  0FA3  0087               	movwf	7
 15596  0FA4  3002               	movlw	2	; select bank4/5
 15597  0FA5  3F4A               	moviw [10]fsr1
 15598  0FA6  0023               	movlb	3	; select bank3
 15599  0FA7  00AA               	movwf	(_RF_Data^(0+384)+10)
 15600                           
 15601                           ;RF_Control_B1.c: 212: RF_Data[11] = product->Data[11];
 15602  0FA8  0021               	movlb	1	; select bank1
 15603  0FA9  086F               	movf	_product^(0+128),w
 15604  0FAA  0086               	movwf	6
 15605  0FAB  3002               	movlw	2	; select bank4/5
 15606  0FAC  0087               	movwf	7
 15607  0FAD  3002               	movlw	2	; select bank4/5
 15608  0FAE  3F4B               	moviw [11]fsr1
 15609  0FAF  0023               	movlb	3	; select bank3
 15610  0FB0  00AB               	movwf	(_RF_Data^(0+384)+11)
 15611                           
 15612                           ;RF_Control_B1.c: 213: RF_Data[12] = product->Data[12];
 15613  0FB1  0021               	movlb	1	; select bank1
 15614  0FB2  086F               	movf	_product^(0+128),w
 15615  0FB3  0086               	movwf	6
 15616  0FB4  3002               	movlw	2	; select bank4/5
 15617  0FB5  0087               	movwf	7
 15618  0FB6  3002               	movlw	2	; select bank4/5
 15619  0FB7  3F4C               	moviw [12]fsr1
 15620  0FB8  0023               	movlb	3	; select bank3
 15621  0FB9  00AC               	movwf	(_RF_Data^(0+384)+12)
 15622                           
 15623                           ;RF_Control_B1.c: 214: RF_Data[13] = product->Data[13];
 15624  0FBA  0021               	movlb	1	; select bank1
 15625  0FBB  086F               	movf	_product^(0+128),w
 15626  0FBC  0086               	movwf	6
 15627  0FBD  3002               	movlw	2	; select bank4/5
 15628  0FBE  0087               	movwf	7
 15629  0FBF  3002               	movlw	2	; select bank4/5
 15630  0FC0  3F4D               	moviw [13]fsr1
 15631  0FC1  0023               	movlb	3	; select bank3
 15632  0FC2  00AD               	movwf	(_RF_Data^(0+384)+13)
 15633                           
 15634                           ;RF_Control_B1.c: 215: RF_Data[14] = product->Data[14];
 15635  0FC3  0021               	movlb	1	; select bank1
 15636  0FC4  086F               	movf	_product^(0+128),w
 15637  0FC5  0086               	movwf	6
 15638  0FC6  3002               	movlw	2	; select bank4/5
 15639  0FC7  0087               	movwf	7
 15640  0FC8  3002               	movlw	2	; select bank4/5
 15641  0FC9  3F4E               	moviw [14]fsr1
 15642  0FCA  0023               	movlb	3	; select bank3
 15643  0FCB  00AE               	movwf	(_RF_Data^(0+384)+14)
 15644                           
 15645                           ;RF_Control_B1.c: 216: RF_Data[15] = product->Data[15];
 15646  0FCC  0021               	movlb	1	; select bank1
 15647  0FCD  086F               	movf	_product^(0+128),w
 15648  0FCE  0086               	movwf	6
 15649  0FCF  3002               	movlw	2	; select bank4/5
 15650  0FD0  0087               	movwf	7
 15651  0FD1  3002               	movlw	2	; select bank4/5
 15652  0FD2  3F4F               	moviw [15]fsr1
 15653  0FD3  0023               	movlb	3	; select bank3
 15654  0FD4  00AF               	movwf	(_RF_Data^(0+384)+15)
 15655                           
 15656                           ;RF_Control_B1.c: 217: RF_Data[16] = product->Data[16];
 15657  0FD5  0021               	movlb	1	; select bank1
 15658  0FD6  086F               	movf	_product^(0+128),w
 15659  0FD7  0086               	movwf	6
 15660  0FD8  3002               	movlw	2	; select bank4/5
 15661  0FD9  0087               	movwf	7
 15662  0FDA  3002               	movlw	2	; select bank4/5
 15663  0FDB  3F50               	moviw [16]fsr1
 15664  0FDC  0023               	movlb	3	; select bank3
 15665  0FDD  00B0               	movwf	(_RF_Data^(0+384)+16)
 15666                           
 15667                           ;RF_Control_B1.c: 218: RF_Data[17] = product->Data[17];
 15668  0FDE  0021               	movlb	1	; select bank1
 15669  0FDF  086F               	movf	_product^(0+128),w
 15670  0FE0  0086               	movwf	6
 15671  0FE1  3002               	movlw	2	; select bank4/5
 15672  0FE2  0087               	movwf	7
 15673  0FE3  3002               	movlw	2	; select bank4/5
 15674  0FE4  3F51               	moviw [17]fsr1
 15675  0FE5  0023               	movlb	3	; select bank3
 15676  0FE6  00B1               	movwf	(_RF_Data^(0+384)+17)
 15677                           
 15678                           ;RF_Control_B1.c: 219: RF_Data[18] = product->Data[18];
 15679  0FE7  0021               	movlb	1	; select bank1
 15680  0FE8  086F               	movf	_product^(0+128),w
 15681  0FE9  0086               	movwf	6
 15682  0FEA  3002               	movlw	2	; select bank4/5
 15683  0FEB  0087               	movwf	7
 15684  0FEC  3002               	movlw	2	; select bank4/5
 15685  0FED  3F52               	moviw [18]fsr1
 15686  0FEE  0023               	movlb	3	; select bank3
 15687  0FEF  00B2               	movwf	(_RF_Data^(0+384)+18)
 15688                           
 15689                           ;RF_Control_B1.c: 220: RF_Data[19] = product->Data[19];
 15690  0FF0  0021               	movlb	1	; select bank1
 15691  0FF1  086F               	movf	_product^(0+128),w
 15692  0FF2  0086               	movwf	6
 15693  0FF3  3002               	movlw	2	; select bank4/5
 15694  0FF4  0087               	movwf	7
 15695  0FF5  3002               	movlw	2	; select bank4/5
 15696  0FF6  3F53               	moviw [19]fsr1
 15697  0FF7  0023               	movlb	3	; select bank3
 15698  0FF8  00B3               	movwf	(_RF_Data^(0+384)+19)
 15699                           
 15700                           ;RF_Control_B1.c: 221: RF_Data[20] = 210;
 15701  0FF9  30D2               	movlw	210
 15702  0FFA  0020               	movlb	0	; select bank0
 15703  0FFB  00A0               	movwf	??_setTxData
 15704  0FFC  0820               	movf	??_setTxData,w
 15705  0FFD  0023               	movlb	3	; select bank3
 15706  0FFE  00B4               	movwf	(_RF_Data^(0+384)+20)
 15707  0FFF  0008               	return
 15708  1000                     __end_of_setTxData:	
 15709                           
 15710                           	psect	text102
 15711  1AD6                     __ptext102:	
 15712 ;; *************** function _setRF_TransceiveGO *****************
 15713 ;; Defined at:
 15714 ;;		line 470 in file "../src/RF_Control_B1.c"
 15715 ;; Parameters:    Size  Location     Type
 15716 ;;  command         1    wreg     unsigned char 
 15717 ;; Auto vars:     Size  Location     Type
 15718 ;;  command         1    1[BANK0 ] unsigned char 
 15719 ;; Return value:  Size  Location     Type
 15720 ;;		None               void
 15721 ;; Registers used:
 15722 ;;		wreg, status,2, status,0
 15723 ;; Tracked objects:
 15724 ;;		On entry : 0/0
 15725 ;;		On exit  : 0/0
 15726 ;;		Unchanged: 0/0
 15727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15729 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15730 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15731 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15732 ;;Total ram usage:        2 bytes
 15733 ;; Hardware stack levels used:    1
 15734 ;; Hardware stack levels required when called:    5
 15735 ;; This function calls:
 15736 ;;		Nothing
 15737 ;; This function is called by:
 15738 ;;		_setDimmerLights_Dimming
 15739 ;; This function uses a non-reentrant model
 15740 ;;
 15741                           
 15742                           
 15743                           ;psect for function _setRF_TransceiveGO
 15744  1AD6                     _setRF_TransceiveGO:	
 15745                           
 15746                           ;incstack = 0
 15747                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 15748                           ;setRF_TransceiveGO@command stored from wreg
 15749  1AD6  0020               	movlb	0	; select bank0
 15750  1AD7  00A1               	movwf	setRF_TransceiveGO@command
 15751                           
 15752                           ;RF_Control_B1.c: 471: RF1.TransceiveGO = command == 1 ? 1 : 0;
 15753  1AD8  0821               	movf	setRF_TransceiveGO@command,w
 15754  1AD9  3A01               	xorlw	1
 15755  1ADA  3000               	movlw	0
 15756  1ADB  1903               	skipnz
 15757  1ADC  3001               	movlw	1
 15758  1ADD  00A0               	movwf	??_setRF_TransceiveGO
 15759  1ADE  0DA0               	rlf	??_setRF_TransceiveGO,f
 15760  1ADF  0DA0               	rlf	??_setRF_TransceiveGO,f
 15761  1AE0  0021               	movlb	1	; select bank1
 15762  1AE1  0820               	movf	_RF1^(0+128),w
 15763  1AE2  0020               	movlb	0	; select bank0
 15764  1AE3  0620               	xorwf	??_setRF_TransceiveGO,w
 15765  1AE4  39FB               	andlw	-5
 15766  1AE5  0620               	xorwf	??_setRF_TransceiveGO,w
 15767  1AE6  0021               	movlb	1	; select bank1
 15768  1AE7  00A0               	movwf	_RF1^(0+128)
 15769  1AE8  0008               	return
 15770  1AE9                     __end_of_setRF_TransceiveGO:	
 15771                           
 15772                           	psect	text103
 15773  15EA                     __ptext103:	
 15774 ;; *************** function _setRF_DimmerLights *****************
 15775 ;; Defined at:
 15776 ;;		line 455 in file "../src/RF_Control_B1.c"
 15777 ;; Parameters:    Size  Location     Type
 15778 ;;  lights          1    wreg     unsigned char 
 15779 ;;  on              1   69[BANK0 ] unsigned char 
 15780 ;; Auto vars:     Size  Location     Type
 15781 ;;  lights          1   73[BANK0 ] unsigned char 
 15782 ;;  status          1   72[BANK0 ] unsigned char 
 15783 ;; Return value:  Size  Location     Type
 15784 ;;		None               void
 15785 ;; Registers used:
 15786 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15787 ;; Tracked objects:
 15788 ;;		On entry : 0/0
 15789 ;;		On exit  : 0/0
 15790 ;;		Unchanged: 0/0
 15791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15792 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15793 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15794 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15795 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15796 ;;Total ram usage:        5 bytes
 15797 ;; Hardware stack levels used:    1
 15798 ;; Hardware stack levels required when called:    6
 15799 ;; This function calls:
 15800 ;;		_setProductData
 15801 ;; This function is called by:
 15802 ;;		_setDimmerLights_OnOff
 15803 ;;		_setDimmerLights_Dimming
 15804 ;;		_setRFSW_Control
 15805 ;; This function uses a non-reentrant model
 15806 ;;
 15807                           
 15808                           
 15809                           ;psect for function _setRF_DimmerLights
 15810  15EA                     _setRF_DimmerLights:	
 15811                           
 15812                           ;incstack = 0
 15813                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15814                           ;setRF_DimmerLights@lights stored from wreg
 15815  15EA  0020               	movlb	0	; select bank0
 15816  15EB  00E9               	movwf	setRF_DimmerLights@lights
 15817                           
 15818                           ;RF_Control_B1.c: 456: char status = 1;
 15819  15EC  01E8               	clrf	setRF_DimmerLights@status
 15820  15ED  0AE8               	incf	setRF_DimmerLights@status,f
 15821                           
 15822                           ;RF_Control_B1.c: 457: status <<= (lights - 1);
 15823  15EE  0869               	movf	setRF_DimmerLights@lights,w
 15824  15EF  3EFF               	addlw	-1
 15825  15F0  0A89               	incf	9,f
 15826  15F1  2DF4               	goto	u6220
 15827  15F2                     u6225:	
 15828  15F2  1003               	clrc
 15829  15F3  0DE8               	rlf	setRF_DimmerLights@status,f
 15830  15F4                     u6220:	
 15831  15F4  3EFF               	addlw	-1
 15832  15F5  1D03               	skipz
 15833  15F6  2DF2               	goto	u6225
 15834                           
 15835                           ;RF_Control_B1.c: 458: setProductData(11, lights);
 15836  15F7  0869               	movf	setRF_DimmerLights@lights,w
 15837  15F8  00E6               	movwf	??_setRF_DimmerLights
 15838  15F9  0866               	movf	??_setRF_DimmerLights,w
 15839  15FA  00E2               	movwf	setProductData@value
 15840  15FB  300B               	movlw	11
 15841  15FC  3199  2186  3195   	fcall	_setProductData
 15842                           
 15843                           ;RF_Control_B1.c: 459: setProductData(17, product->Data[26 + lights]);
 15844  15FF  0020               	movlb	0	; select bank0
 15845  1600  0869               	movf	setRF_DimmerLights@lights,w
 15846  1601  3E1A               	addlw	26
 15847  1602  0021               	movlb	1	; select bank1
 15848  1603  076F               	addwf	_product^(0+128),w
 15849  1604  0020               	movlb	0	; select bank0
 15850  1605  00E6               	movwf	??_setRF_DimmerLights
 15851  1606  0866               	movf	??_setRF_DimmerLights,w
 15852  1607  0086               	movwf	6
 15853  1608  3002               	movlw	2	; select bank4/5
 15854  1609  0087               	movwf	7
 15855  160A  0801               	movf	1,w
 15856  160B  00E7               	movwf	??_setRF_DimmerLights+1
 15857  160C  0867               	movf	??_setRF_DimmerLights+1,w
 15858  160D  00E2               	movwf	setProductData@value
 15859  160E  3011               	movlw	17
 15860  160F  3199  2186  3195   	fcall	_setProductData
 15861                           
 15862                           ;RF_Control_B1.c: 460: if (on == 1) {
 15863  1612  0020               	movlb	0	; select bank0
 15864  1613  0865               	movf	setRF_DimmerLights@on,w
 15865  1614  3A01               	xorlw	1
 15866  1615  1D03               	skipz
 15867  1616  2E39               	goto	l6839
 15868                           
 15869                           ;RF_Control_B1.c: 461: setProductData(9, product->Data[20 + lights]);
 15870  1617  0869               	movf	setRF_DimmerLights@lights,w
 15871  1618  3E14               	addlw	20
 15872  1619  0021               	movlb	1	; select bank1
 15873  161A  076F               	addwf	_product^(0+128),w
 15874  161B  0020               	movlb	0	; select bank0
 15875  161C  00E6               	movwf	??_setRF_DimmerLights
 15876  161D  0866               	movf	??_setRF_DimmerLights,w
 15877  161E  0086               	movwf	6
 15878  161F  3002               	movlw	2	; select bank4/5
 15879  1620  0087               	movwf	7
 15880  1621  0801               	movf	1,w
 15881  1622  00E7               	movwf	??_setRF_DimmerLights+1
 15882  1623  0867               	movf	??_setRF_DimmerLights+1,w
 15883  1624  00E2               	movwf	setProductData@value
 15884  1625  3009               	movlw	9
 15885  1626  3199  2186  3195   	fcall	_setProductData
 15886                           
 15887                           ;RF_Control_B1.c: 462: setProductData(15, (product->Data[15] | status));
 15888  1629  0021               	movlb	1	; select bank1
 15889  162A  086F               	movf	_product^(0+128),w
 15890  162B  3E0F               	addlw	15
 15891  162C  0086               	movwf	6
 15892  162D  3002               	movlw	2	; select bank4/5
 15893  162E  0087               	movwf	7
 15894  162F  0801               	movf	1,w
 15895  1630  0020               	movlb	0	; select bank0
 15896  1631  0468               	iorwf	setRF_DimmerLights@status,w
 15897  1632  00E6               	movwf	??_setRF_DimmerLights
 15898  1633  0866               	movf	??_setRF_DimmerLights,w
 15899  1634  00E2               	movwf	setProductData@value
 15900  1635  300F               	movlw	15
 15901  1636  3199  2186         	fcall	_setProductData
 15902                           
 15903                           ;RF_Control_B1.c: 463: } else {
 15904  1638  0008               	return
 15905  1639                     l6839:	
 15906                           
 15907                           ;RF_Control_B1.c: 464: setProductData(9, 0x00);
 15908  1639  0020               	movlb	0	; select bank0
 15909  163A  01E2               	clrf	setProductData@value
 15910  163B  3009               	movlw	9
 15911  163C  3199  2186  3195   	fcall	_setProductData
 15912                           
 15913                           ;RF_Control_B1.c: 465: setProductData(15, (product->Data[15]&(~status)));
 15914  163F  0021               	movlb	1	; select bank1
 15915  1640  086F               	movf	_product^(0+128),w
 15916  1641  3E0F               	addlw	15
 15917  1642  0086               	movwf	6
 15918  1643  3002               	movlw	2	; select bank4/5
 15919  1644  0087               	movwf	7
 15920  1645  0020               	movlb	0	; select bank0
 15921  1646  0968               	comf	setRF_DimmerLights@status,w
 15922  1647  0501               	andwf	1,w
 15923  1648  00E6               	movwf	??_setRF_DimmerLights
 15924  1649  0866               	movf	??_setRF_DimmerLights,w
 15925  164A  00E2               	movwf	setProductData@value
 15926  164B  300F               	movlw	15
 15927  164C  3199  2186         	fcall	_setProductData
 15928  164E  0008               	return
 15929  164F                     __end_of_setRF_DimmerLights:	
 15930                           
 15931                           	psect	text104
 15932  1CDF                     __ptext104:	
 15933 ;; *************** function _setDimmerLights_Line *****************
 15934 ;; Defined at:
 15935 ;;		line 1019 in file "../src/Dimmer_B1.c"
 15936 ;; Parameters:    Size  Location     Type
 15937 ;;  lights          1    wreg     unsigned char 
 15938 ;; Auto vars:     Size  Location     Type
 15939 ;;  lights          1    0[BANK0 ] unsigned char 
 15940 ;; Return value:  Size  Location     Type
 15941 ;;		None               void
 15942 ;; Registers used:
 15943 ;;		wreg
 15944 ;; Tracked objects:
 15945 ;;		On entry : 0/0
 15946 ;;		On exit  : 0/0
 15947 ;;		Unchanged: 0/0
 15948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15950 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15952 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15953 ;;Total ram usage:        1 bytes
 15954 ;; Hardware stack levels used:    1
 15955 ;; Hardware stack levels required when called:    5
 15956 ;; This function calls:
 15957 ;;		Nothing
 15958 ;; This function is called by:
 15959 ;;		_setDimmerLights_OnOff
 15960 ;;		_setDimmerLights_Dimming
 15961 ;; This function uses a non-reentrant model
 15962 ;;
 15963                           
 15964                           
 15965                           ;psect for function _setDimmerLights_Line
 15966  1CDF                     _setDimmerLights_Line:	
 15967                           
 15968                           ;incstack = 0
 15969                           ; Regs used in _setDimmerLights_Line: [wreg]
 15970                           ;setDimmerLights_Line@lights stored from wreg
 15971  1CDF  0020               	movlb	0	; select bank0
 15972  1CE0  00A0               	movwf	setDimmerLights_Line@lights
 15973                           
 15974                           ;Dimmer_B1.c: 1020: Dimmer.LoadGO = 1;
 15975  1CE1  0022               	movlb	2	; select bank2
 15976  1CE2  14AC               	bsf	_Dimmer^(0+256),1
 15977                           
 15978                           ;Dimmer_B1.c: 1022: DimmerLights1.Line = 0;
 15979  1CE3  10E8               	bcf	(_DimmerLights1^(0+256)+1),1
 15980                           
 15981                           ;Dimmer_B1.c: 1023: if (lights == 1 && lights != 0) {
 15982  1CE4  0020               	movlb	0	; select bank0
 15983  1CE5  0820               	movf	setDimmerLights_Line@lights,w
 15984  1CE6  3A01               	xorlw	1
 15985  1CE7  1D03               	skipz
 15986  1CE8  2CEE               	goto	l917
 15987  1CE9  0820               	movf	setDimmerLights_Line@lights,w
 15988  1CEA  1903               	btfsc	3,2
 15989  1CEB  2CEE               	goto	l917
 15990                           
 15991                           ;Dimmer_B1.c: 1024: DimmerLights1.Line = 1;
 15992  1CEC  0022               	movlb	2	; select bank2
 15993  1CED  14E8               	bsf	(_DimmerLights1^(0+256)+1),1
 15994  1CEE                     l917:	
 15995                           
 15996                           ;Dimmer_B1.c: 1025: }
 15997                           ;Dimmer_B1.c: 1028: DimmerLights2.Line = 0;
 15998  1CEE  0023               	movlb	3	; select bank3
 15999  1CEF  10D1               	bcf	(_DimmerLights2^(0+384)+1),1
 16000                           
 16001                           ;Dimmer_B1.c: 1029: if (lights == 2 && lights != 0) {
 16002  1CF0  0020               	movlb	0	; select bank0
 16003  1CF1  0820               	movf	setDimmerLights_Line@lights,w
 16004  1CF2  3A02               	xorlw	2
 16005  1CF3  1D03               	skipz
 16006  1CF4  0008               	return
 16007  1CF5  0820               	movf	setDimmerLights_Line@lights,w
 16008  1CF6  1903               	btfsc	3,2
 16009  1CF7  0008               	return
 16010                           
 16011                           ;Dimmer_B1.c: 1030: DimmerLights2.Line = 1;
 16012  1CF8  0023               	movlb	3	; select bank3
 16013  1CF9  14D1               	bsf	(_DimmerLights2^(0+384)+1),1
 16014  1CFA  0020               	movlb	0	; select bank0
 16015  1CFB  0008               	return
 16016  1CFC                     __end_of_setDimmerLights_Line:	
 16017                           
 16018                           	psect	text105
 16019  1BE2                     __ptext105:	
 16020 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 16021 ;; Defined at:
 16022 ;;		line 124 in file "../src/Dimmer_B1.c"
 16023 ;; Parameters:    Size  Location     Type
 16024 ;;  lights          1    wreg     unsigned char 
 16025 ;;  value           1   66[BANK0 ] unsigned char 
 16026 ;; Auto vars:     Size  Location     Type
 16027 ;;  lights          1   68[BANK0 ] unsigned char 
 16028 ;; Return value:  Size  Location     Type
 16029 ;;		None               void
 16030 ;; Registers used:
 16031 ;;		wreg
 16032 ;; Tracked objects:
 16033 ;;		On entry : 0/0
 16034 ;;		On exit  : 0/0
 16035 ;;		Unchanged: 0/0
 16036 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16037 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16038 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16039 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16040 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16041 ;;Total ram usage:        3 bytes
 16042 ;; Hardware stack levels used:    1
 16043 ;; Hardware stack levels required when called:    5
 16044 ;; This function calls:
 16045 ;;		Nothing
 16046 ;; This function is called by:
 16047 ;;		_setDimmerLights_OnOff
 16048 ;;		_setDimmerLights_Dimming
 16049 ;;		_setRFSW_AdjControl
 16050 ;; This function uses a non-reentrant model
 16051 ;;
 16052                           
 16053                           
 16054                           ;psect for function _setDimmerIntr_MaxmumValue
 16055  1BE2                     _setDimmerIntr_MaxmumValue:	
 16056                           
 16057                           ;incstack = 0
 16058                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 16059                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 16060  1BE2  0020               	movlb	0	; select bank0
 16061  1BE3  00E4               	movwf	setDimmerIntr_MaxmumValue@lights
 16062                           
 16063                           ;Dimmer_B1.c: 126: if (lights == 1) {
 16064  1BE4  0864               	movf	setDimmerIntr_MaxmumValue@lights,w
 16065  1BE5  3A01               	xorlw	1
 16066  1BE6  1D03               	skipz
 16067  1BE7  2BEE               	goto	l6815
 16068                           
 16069                           ;Dimmer_B1.c: 127: DimmerIntr1.MaxmumValue = value;
 16070  1BE8  0862               	movf	setDimmerIntr_MaxmumValue@value,w
 16071  1BE9  00E3               	movwf	??_setDimmerIntr_MaxmumValue
 16072  1BEA  0863               	movf	??_setDimmerIntr_MaxmumValue,w
 16073  1BEB  0021               	movlb	1	; select bank1
 16074  1BEC  00C1               	movwf	(_DimmerIntr1^(0+128)+6)
 16075                           
 16076                           ;Dimmer_B1.c: 128: }
 16077  1BED  0008               	return
 16078  1BEE                     l6815:	
 16079                           
 16080                           ;Dimmer_B1.c: 131: else if (lights == 2) {
 16081  1BEE  0020               	movlb	0	; select bank0
 16082  1BEF  0864               	movf	setDimmerIntr_MaxmumValue@lights,w
 16083  1BF0  3A02               	xorlw	2
 16084  1BF1  1D03               	skipz
 16085  1BF2  0008               	return
 16086                           
 16087                           ;Dimmer_B1.c: 132: DimmerIntr2.MaxmumValue = value;
 16088  1BF3  0862               	movf	setDimmerIntr_MaxmumValue@value,w
 16089  1BF4  00E3               	movwf	??_setDimmerIntr_MaxmumValue
 16090  1BF5  0863               	movf	??_setDimmerIntr_MaxmumValue,w
 16091  1BF6  0021               	movlb	1	; select bank1
 16092  1BF7  00CD               	movwf	(_DimmerIntr2^(0+128)+6)
 16093  1BF8  0008               	return
 16094  1BF9                     __end_of_setDimmerIntr_MaxmumValue:	
 16095                           
 16096                           	psect	text106
 16097  1F15                     __ptext106:	
 16098 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 16099 ;; Defined at:
 16100 ;;		line 201 in file "../src/Dimmer_B1.c"
 16101 ;; Parameters:    Size  Location     Type
 16102 ;;  lights          1    wreg     unsigned char 
 16103 ;;  command         1    0[BANK0 ] unsigned char 
 16104 ;; Auto vars:     Size  Location     Type
 16105 ;;  lights          1    2[BANK0 ] unsigned char 
 16106 ;; Return value:  Size  Location     Type
 16107 ;;		None               void
 16108 ;; Registers used:
 16109 ;;		wreg, status,2, status,0
 16110 ;; Tracked objects:
 16111 ;;		On entry : 0/0
 16112 ;;		On exit  : 0/0
 16113 ;;		Unchanged: 0/0
 16114 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16115 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16116 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16117 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16118 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16119 ;;Total ram usage:        3 bytes
 16120 ;; Hardware stack levels used:    1
 16121 ;; Hardware stack levels required when called:    5
 16122 ;; This function calls:
 16123 ;;		Nothing
 16124 ;; This function is called by:
 16125 ;;		_setDimmerLights_Dimming
 16126 ;; This function uses a non-reentrant model
 16127 ;;
 16128                           
 16129                           
 16130                           ;psect for function _setDimmerIntr_Dimming_Sw
 16131  1F15                     _setDimmerIntr_Dimming_Sw:	
 16132                           
 16133                           ;incstack = 0
 16134                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 16135                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 16136  1F15  0020               	movlb	0	; select bank0
 16137  1F16  00A2               	movwf	setDimmerIntr_Dimming_Sw@lights
 16138                           
 16139                           ;Dimmer_B1.c: 203: if (lights == 1) {
 16140  1F17  0822               	movf	setDimmerIntr_Dimming_Sw@lights,w
 16141  1F18  3A01               	xorlw	1
 16142  1F19  1D03               	skipz
 16143  1F1A  2F2B               	goto	l7171
 16144                           
 16145                           ;Dimmer_B1.c: 204: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 16146  1F1B  0820               	movf	setDimmerIntr_Dimming_Sw@command,w
 16147  1F1C  3A01               	xorlw	1
 16148  1F1D  3000               	movlw	0
 16149  1F1E  1903               	skipnz
 16150  1F1F  3001               	movlw	1
 16151  1F20  00A1               	movwf	??_setDimmerIntr_Dimming_Sw
 16152  1F21  0EA1               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16153  1F22  0021               	movlb	1	; select bank1
 16154  1F23  083B               	movf	_DimmerIntr1^(0+128),w
 16155  1F24  0020               	movlb	0	; select bank0
 16156  1F25  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16157  1F26  39EF               	andlw	-17
 16158  1F27  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16159  1F28  0021               	movlb	1	; select bank1
 16160  1F29  00BB               	movwf	_DimmerIntr1^(0+128)
 16161                           
 16162                           ;Dimmer_B1.c: 205: }
 16163  1F2A  0008               	return
 16164  1F2B                     l7171:	
 16165                           
 16166                           ;Dimmer_B1.c: 208: else if (lights == 2) {
 16167  1F2B  0020               	movlb	0	; select bank0
 16168  1F2C  0822               	movf	setDimmerIntr_Dimming_Sw@lights,w
 16169  1F2D  3A02               	xorlw	2
 16170  1F2E  1D03               	skipz
 16171  1F2F  0008               	return
 16172                           
 16173                           ;Dimmer_B1.c: 209: DimmerIntr2.Dimming_Sw = command == 1 ? 1 : 0;
 16174  1F30  0820               	movf	setDimmerIntr_Dimming_Sw@command,w
 16175  1F31  3A01               	xorlw	1
 16176  1F32  3000               	movlw	0
 16177  1F33  1903               	skipnz
 16178  1F34  3001               	movlw	1
 16179  1F35  00A1               	movwf	??_setDimmerIntr_Dimming_Sw
 16180  1F36  0EA1               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16181  1F37  0021               	movlb	1	; select bank1
 16182  1F38  0847               	movf	_DimmerIntr2^(0+128),w
 16183  1F39  0020               	movlb	0	; select bank0
 16184  1F3A  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16185  1F3B  39EF               	andlw	-17
 16186  1F3C  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16187  1F3D  0021               	movlb	1	; select bank1
 16188  1F3E  00C7               	movwf	_DimmerIntr2^(0+128)
 16189  1F3F  0008               	return
 16190  1F40                     __end_of_setDimmerIntr_Dimming_Sw:	
 16191                           
 16192                           	psect	text107
 16193  1B9E                     __ptext107:	
 16194 ;; *************** function _getDimmerIntr_DimmingValue *****************
 16195 ;; Defined at:
 16196 ;;		line 102 in file "../src/Dimmer_B1.c"
 16197 ;; Parameters:    Size  Location     Type
 16198 ;;  lights          1    wreg     unsigned char 
 16199 ;; Auto vars:     Size  Location     Type
 16200 ;;  lights          1    2[BANK0 ] unsigned char 
 16201 ;;  value           1    1[BANK0 ] unsigned char 
 16202 ;; Return value:  Size  Location     Type
 16203 ;;                  1    wreg      unsigned char 
 16204 ;; Registers used:
 16205 ;;		wreg, status,2
 16206 ;; Tracked objects:
 16207 ;;		On entry : 0/0
 16208 ;;		On exit  : 0/0
 16209 ;;		Unchanged: 0/0
 16210 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16212 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16213 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16214 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16215 ;;Total ram usage:        3 bytes
 16216 ;; Hardware stack levels used:    1
 16217 ;; Hardware stack levels required when called:    5
 16218 ;; This function calls:
 16219 ;;		Nothing
 16220 ;; This function is called by:
 16221 ;;		_setDimmerLights_Dimming
 16222 ;; This function uses a non-reentrant model
 16223 ;;
 16224                           
 16225                           
 16226                           ;psect for function _getDimmerIntr_DimmingValue
 16227  1B9E                     _getDimmerIntr_DimmingValue:	
 16228                           
 16229                           ;incstack = 0
 16230                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 16231                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 16232  1B9E  0020               	movlb	0	; select bank0
 16233  1B9F  00A2               	movwf	getDimmerIntr_DimmingValue@lights
 16234                           
 16235                           ;Dimmer_B1.c: 103: char value = 0;
 16236  1BA0  01A1               	clrf	getDimmerIntr_DimmingValue@value
 16237                           
 16238                           ;Dimmer_B1.c: 105: if (lights == 1) {
 16239  1BA1  0822               	movf	getDimmerIntr_DimmingValue@lights,w
 16240  1BA2  3A01               	xorlw	1
 16241  1BA3  1D03               	skipz
 16242  1BA4  2BA8               	goto	l7161
 16243                           
 16244                           ;Dimmer_B1.c: 106: value = DimmerIntr1.DimmingValue;
 16245  1BA5  0021               	movlb	1	; select bank1
 16246  1BA6  0840               	movf	(_DimmerIntr1^(0+128)+5),w
 16247  1BA7  2BAE               	goto	L10
 16248  1BA8                     l7161:	
 16249                           ;Dimmer_B1.c: 107: }
 16250                           
 16251                           
 16252                           ;Dimmer_B1.c: 110: else if (lights == 2) {
 16253  1BA8  0822               	movf	getDimmerIntr_DimmingValue@lights,w
 16254  1BA9  3A02               	xorlw	2
 16255  1BAA  1D03               	skipz
 16256  1BAB  2BB2               	goto	l761
 16257                           
 16258                           ;Dimmer_B1.c: 111: value = DimmerIntr2.DimmingValue;
 16259  1BAC  0021               	movlb	1	; select bank1
 16260  1BAD  084C               	movf	(_DimmerIntr2^(0+128)+5),w
 16261  1BAE                     L10:	
 16262  1BAE  0020               	movlb	0	; select bank0
 16263  1BAF  00A0               	movwf	??_getDimmerIntr_DimmingValue
 16264  1BB0  0820               	movf	??_getDimmerIntr_DimmingValue,w
 16265  1BB1  00A1               	movwf	getDimmerIntr_DimmingValue@value
 16266  1BB2                     l761:	
 16267                           
 16268                           ;Dimmer_B1.c: 112: }
 16269                           ;Dimmer_B1.c: 119: return value;
 16270  1BB2  0821               	movf	getDimmerIntr_DimmingValue@value,w
 16271  1BB3  0008               	return
 16272  1BB4                     __end_of_getDimmerIntr_DimmingValue:	
 16273                           
 16274                           	psect	text108
 16275  1140                     __ptext108:	
 16276 ;; *************** function _getDimmerLights_Allow_Condition *****************
 16277 ;; Defined at:
 16278 ;;		line 980 in file "../src/Dimmer_B1.c"
 16279 ;; Parameters:    Size  Location     Type
 16280 ;;  lights          1    wreg     unsigned char 
 16281 ;; Auto vars:     Size  Location     Type
 16282 ;;  lights          1    5[BANK0 ] unsigned char 
 16283 ;;  allow           1    6[BANK0 ] unsigned char 
 16284 ;; Return value:  Size  Location     Type
 16285 ;;                  1    wreg      unsigned char 
 16286 ;; Registers used:
 16287 ;;		wreg, status,2, status,0, pclath, cstack
 16288 ;; Tracked objects:
 16289 ;;		On entry : 0/0
 16290 ;;		On exit  : 0/0
 16291 ;;		Unchanged: 0/0
 16292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16294 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16295 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16296 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16297 ;;Total ram usage:        6 bytes
 16298 ;; Hardware stack levels used:    1
 16299 ;; Hardware stack levels required when called:    6
 16300 ;; This function calls:
 16301 ;;		_getLoad_OK
 16302 ;; This function is called by:
 16303 ;;		_setDimmerLights_Main
 16304 ;; This function uses a non-reentrant model
 16305 ;;
 16306                           
 16307                           
 16308                           ;psect for function _getDimmerLights_Allow_Condition
 16309  1140                     _getDimmerLights_Allow_Condition:	
 16310                           
 16311                           ;incstack = 0
 16312                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+status,0+pclath+cstack]
 16313                           ;getDimmerLights_Allow_Condition@lights stored from wreg
 16314  1140  0020               	movlb	0	; select bank0
 16315  1141  00A5               	movwf	getDimmerLights_Allow_Condition@lights
 16316                           
 16317                           ;Dimmer_B1.c: 981: char allow = 0;
 16318  1142  01A6               	clrf	getDimmerLights_Allow_Condition@allow
 16319                           
 16320                           ;Dimmer_B1.c: 987: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 16321  1143  01A2               	clrf	_getDimmerLights_Allow_Condition$2417
 16322  1144  0AA2               	incf	_getDimmerLights_Allow_Condition$2417,f
 16323  1145  3199  2114  3191   	fcall	_getLoad_OK
 16324  1148  3800               	iorlw	0
 16325  1149  1D03               	skipz
 16326  114A  2950               	goto	l7483
 16327  114B  0022               	movlb	2	; select bank2
 16328  114C  18AC               	btfsc	_Dimmer^(0+256),1
 16329  114D  2950               	goto	l7483
 16330  114E  0020               	movlb	0	; select bank0
 16331  114F  01A2               	clrf	_getDimmerLights_Allow_Condition$2417
 16332  1150                     l7483:	
 16333  1150  0020               	movlb	0	; select bank0
 16334  1151  0822               	movf	_getDimmerLights_Allow_Condition$2417,w
 16335  1152  00A1               	movwf	??_getDimmerLights_Allow_Condition
 16336  1153  0821               	movf	??_getDimmerLights_Allow_Condition,w
 16337  1154  00A6               	movwf	getDimmerLights_Allow_Condition@allow
 16338                           
 16339                           ;Dimmer_B1.c: 991: if (allow == 0) {
 16340  1155  08A6               	movf	getDimmerLights_Allow_Condition@allow,f
 16341  1156  1D03               	skipz
 16342  1157  297C               	goto	l7507
 16343                           
 16344                           ;Dimmer_B1.c: 992: if (lights == 1) {
 16345  1158  0825               	movf	getDimmerLights_Allow_Condition@lights,w
 16346  1159  3A01               	xorlw	1
 16347  115A  1D03               	skipz
 16348  115B  2969               	goto	l7497
 16349                           
 16350                           ;Dimmer_B1.c: 993: allow = DimmerLights2.DimmingTrigger == 1 || DimmerIntr2.Dimming_Sw =
      +                          = 1 ? 1 : 0;
 16351  115C  01A3               	clrf	_getDimmerLights_Allow_Condition$2418
 16352  115D  0AA3               	incf	_getDimmerLights_Allow_Condition$2418,f
 16353  115E  0023               	movlb	3	; select bank3
 16354  115F  1A50               	btfsc	_DimmerLights2^(0+384),4
 16355  1160  2966               	goto	l7495
 16356  1161  0021               	movlb	1	; select bank1
 16357  1162  1A47               	btfsc	_DimmerIntr2^(0+128),4
 16358  1163  2966               	goto	l7495
 16359  1164  0020               	movlb	0	; select bank0
 16360  1165  01A3               	clrf	_getDimmerLights_Allow_Condition$2418
 16361  1166                     l7495:	
 16362  1166  0020               	movlb	0	; select bank0
 16363  1167  0823               	movf	_getDimmerLights_Allow_Condition$2418,w
 16364  1168  2979               	goto	L11
 16365  1169                     l7497:	
 16366                           ;Dimmer_B1.c: 994: } else if (lights == 2) {
 16367                           
 16368  1169  0825               	movf	getDimmerLights_Allow_Condition@lights,w
 16369  116A  3A02               	xorlw	2
 16370  116B  1D03               	skipz
 16371  116C  297C               	goto	l7507
 16372                           
 16373                           ;Dimmer_B1.c: 995: allow = DimmerLights1.DimmingTrigger == 1 || DimmerIntr1.Dimming_Sw =
      +                          = 1 ? 1 : 0;
 16374  116D  01A4               	clrf	_getDimmerLights_Allow_Condition$2419
 16375  116E  0AA4               	incf	_getDimmerLights_Allow_Condition$2419,f
 16376  116F  0022               	movlb	2	; select bank2
 16377  1170  1A67               	btfsc	_DimmerLights1^(0+256),4
 16378  1171  2977               	goto	l7505
 16379  1172  0021               	movlb	1	; select bank1
 16380  1173  1A3B               	btfsc	_DimmerIntr1^(0+128),4
 16381  1174  2977               	goto	l7505
 16382  1175  0020               	movlb	0	; select bank0
 16383  1176  01A4               	clrf	_getDimmerLights_Allow_Condition$2419
 16384  1177                     l7505:	
 16385  1177  0020               	movlb	0	; select bank0
 16386  1178  0824               	movf	_getDimmerLights_Allow_Condition$2419,w
 16387  1179                     L11:	
 16388  1179  00A1               	movwf	??_getDimmerLights_Allow_Condition
 16389  117A  0821               	movf	??_getDimmerLights_Allow_Condition,w
 16390  117B  00A6               	movwf	getDimmerLights_Allow_Condition@allow
 16391  117C                     l7507:	
 16392                           
 16393                           ;Dimmer_B1.c: 996: }
 16394                           ;Dimmer_B1.c: 997: }
 16395                           ;Dimmer_B1.c: 1014: return allow;
 16396  117C  0826               	movf	getDimmerLights_Allow_Condition@allow,w
 16397  117D  0008               	return
 16398  117E                     __end_of_getDimmerLights_Allow_Condition:	
 16399                           
 16400                           	psect	text109
 16401  1914                     __ptext109:	
 16402 ;; *************** function _getLoad_OK *****************
 16403 ;; Defined at:
 16404 ;;		line 272 in file "../src/OverLoad_B1.c"
 16405 ;; Parameters:    Size  Location     Type
 16406 ;;		None
 16407 ;; Auto vars:     Size  Location     Type
 16408 ;;  ok              1    0[BANK0 ] unsigned char 
 16409 ;; Return value:  Size  Location     Type
 16410 ;;                  1    wreg      unsigned char 
 16411 ;; Registers used:
 16412 ;;		wreg, status,2
 16413 ;; Tracked objects:
 16414 ;;		On entry : 0/0
 16415 ;;		On exit  : 0/0
 16416 ;;		Unchanged: 0/0
 16417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16419 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16420 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16421 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16422 ;;Total ram usage:        1 bytes
 16423 ;; Hardware stack levels used:    1
 16424 ;; Hardware stack levels required when called:    5
 16425 ;; This function calls:
 16426 ;;		Nothing
 16427 ;; This function is called by:
 16428 ;;		_DimmerLights_Main
 16429 ;;		_getDimmerLights_Allow_Condition
 16430 ;; This function uses a non-reentrant model
 16431 ;;
 16432                           
 16433                           
 16434                           ;psect for function _getLoad_OK
 16435  1914                     _getLoad_OK:	
 16436                           
 16437                           ;OverLoad_B1.c: 273: char ok = Load.OK == 1 ? 1 : 0;
 16438                           
 16439                           ;incstack = 0
 16440                           ; Regs used in _getLoad_OK: [wreg+status,2]
 16441  1914  3000               	movlw	0
 16442  1915  0022               	movlb	2	; select bank2
 16443  1916  1BBF               	btfsc	_Load^(0+256),7
 16444  1917  3001               	movlw	1
 16445  1918  0020               	movlb	0	; select bank0
 16446  1919  00A0               	movwf	getLoad_OK@ok
 16447                           
 16448                           ;OverLoad_B1.c: 274: return ok;
 16449  191A  0820               	movf	getLoad_OK@ok,w
 16450  191B  0008               	return
 16451  191C                     __end_of_getLoad_OK:	
 16452                           
 16453                           	psect	text110
 16454  1FCD                     __ptext110:	
 16455 ;; *************** function _getMain_All_Error_Status *****************
 16456 ;; Defined at:
 16457 ;;		line 424 in file "../src/main_B1.c"
 16458 ;; Parameters:    Size  Location     Type
 16459 ;;  command         1    wreg     unsigned char 
 16460 ;; Auto vars:     Size  Location     Type
 16461 ;;  command         1    5[BANK0 ] unsigned char 
 16462 ;;  status          1    6[BANK0 ] unsigned char 
 16463 ;; Return value:  Size  Location     Type
 16464 ;;                  1    wreg      unsigned char 
 16465 ;; Registers used:
 16466 ;;		wreg, status,2, status,0
 16467 ;; Tracked objects:
 16468 ;;		On entry : 0/0
 16469 ;;		On exit  : 0/0
 16470 ;;		Unchanged: 0/0
 16471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16473 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16474 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16475 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16476 ;;Total ram usage:        7 bytes
 16477 ;; Hardware stack levels used:    1
 16478 ;; Hardware stack levels required when called:    5
 16479 ;; This function calls:
 16480 ;;		Nothing
 16481 ;; This function is called by:
 16482 ;;		_DimmerLights_Main
 16483 ;;		_Load_Main
 16484 ;;		_setTemp_Main
 16485 ;;		_getRxData
 16486 ;;		_setSw_Main
 16487 ;;		_Exception_Main
 16488 ;; This function uses a non-reentrant model
 16489 ;;
 16490                           
 16491                           
 16492                           ;psect for function _getMain_All_Error_Status
 16493  1FCD                     _getMain_All_Error_Status:	
 16494                           
 16495                           ;incstack = 0
 16496                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 16497                           ;getMain_All_Error_Status@command stored from wreg
 16498  1FCD  0020               	movlb	0	; select bank0
 16499  1FCE  00A5               	movwf	getMain_All_Error_Status@command
 16500                           
 16501                           ;main_B1.c: 425: char status = 0;
 16502  1FCF  01A6               	clrf	getMain_All_Error_Status@status
 16503                           
 16504                           ;main_B1.c: 436: if (status == 0 && command != 2) {
 16505  1FD0  08A6               	movf	getMain_All_Error_Status@status,f
 16506  1FD1  1D03               	skipz
 16507  1FD2  2FE7               	goto	l7193
 16508  1FD3  0825               	movf	getMain_All_Error_Status@command,w
 16509  1FD4  3A02               	xorlw	2
 16510  1FD5  1903               	skipnz
 16511  1FD6  2FE7               	goto	l7193
 16512                           
 16513                           ;main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
 16514  1FD7  0021               	movlb	1	; select bank1
 16515  1FD8  18DC               	btfsc	_Temp^(0+128),1
 16516  1FD9  2FDE               	goto	l7191
 16517  1FDA  0020               	movlb	0	; select bank0
 16518  1FDB  01A1               	clrf	_getMain_All_Error_Status$6913
 16519  1FDC  01A2               	clrf	_getMain_All_Error_Status$6913+1
 16520  1FDD  2FE3               	goto	l2885
 16521  1FDE                     l7191:	
 16522  1FDE  3002               	movlw	2
 16523  1FDF  0020               	movlb	0	; select bank0
 16524  1FE0  00A1               	movwf	_getMain_All_Error_Status$6913
 16525  1FE1  3000               	movlw	0
 16526  1FE2  00A2               	movwf	_getMain_All_Error_Status$6913+1
 16527  1FE3                     l2885:	
 16528  1FE3  0821               	movf	_getMain_All_Error_Status$6913,w
 16529  1FE4  00A0               	movwf	??_getMain_All_Error_Status
 16530  1FE5  0820               	movf	??_getMain_All_Error_Status,w
 16531  1FE6  00A6               	movwf	getMain_All_Error_Status@status
 16532  1FE7                     l7193:	
 16533                           
 16534                           ;main_B1.c: 438: }
 16535                           ;main_B1.c: 443: if (status == 0 && command != 3) {
 16536  1FE7  08A6               	movf	getMain_All_Error_Status@status,f
 16537  1FE8  1D03               	skipz
 16538  1FE9  2FFE               	goto	l2886
 16539  1FEA  0825               	movf	getMain_All_Error_Status@command,w
 16540  1FEB  3A03               	xorlw	3
 16541  1FEC  1903               	skipnz
 16542  1FED  2FFE               	goto	l2886
 16543                           
 16544                           ;main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
 16545  1FEE  0022               	movlb	2	; select bank2
 16546  1FEF  1ABF               	btfsc	_Load^(0+256),5
 16547  1FF0  2FF5               	goto	l7201
 16548  1FF1  0020               	movlb	0	; select bank0
 16549  1FF2  01A3               	clrf	_getMain_All_Error_Status$6914
 16550  1FF3  01A4               	clrf	_getMain_All_Error_Status$6914+1
 16551  1FF4  2FFA               	goto	l2890
 16552  1FF5                     l7201:	
 16553  1FF5  3003               	movlw	3
 16554  1FF6  0020               	movlb	0	; select bank0
 16555  1FF7  00A3               	movwf	_getMain_All_Error_Status$6914
 16556  1FF8  3000               	movlw	0
 16557  1FF9  00A4               	movwf	_getMain_All_Error_Status$6914+1
 16558  1FFA                     l2890:	
 16559  1FFA  0823               	movf	_getMain_All_Error_Status$6914,w
 16560  1FFB  00A0               	movwf	??_getMain_All_Error_Status
 16561  1FFC  0820               	movf	??_getMain_All_Error_Status,w
 16562  1FFD  00A6               	movwf	getMain_All_Error_Status@status
 16563  1FFE                     l2886:	
 16564                           
 16565                           ;main_B1.c: 445: }
 16566                           ;main_B1.c: 455: return status;
 16567  1FFE  0826               	movf	getMain_All_Error_Status@status,w
 16568  1FFF  0008               	return
 16569  2000                     __end_of_getMain_All_Error_Status:	
 16570                           
 16571                           	psect	text111
 16572  194E                     __ptext111:	
 16573 ;; *************** function _DimmerLights_Initialization *****************
 16574 ;; Defined at:
 16575 ;;		line 632 in file "../src/Dimmer_B1.c"
 16576 ;; Parameters:    Size  Location     Type
 16577 ;;		None
 16578 ;; Auto vars:     Size  Location     Type
 16579 ;;		None
 16580 ;; Return value:  Size  Location     Type
 16581 ;;		None               void
 16582 ;; Registers used:
 16583 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16584 ;; Tracked objects:
 16585 ;;		On entry : 0/0
 16586 ;;		On exit  : 0/0
 16587 ;;		Unchanged: 0/0
 16588 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16589 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16590 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16592 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16593 ;;Total ram usage:        0 bytes
 16594 ;; Hardware stack levels used:    1
 16595 ;; Hardware stack levels required when called:    9
 16596 ;; This function calls:
 16597 ;;		_DimmerIntr_Initialization
 16598 ;;		_setDimmerLights_Initialization
 16599 ;; This function is called by:
 16600 ;;		_main
 16601 ;; This function uses a non-reentrant model
 16602 ;;
 16603                           
 16604                           
 16605                           ;psect for function _DimmerLights_Initialization
 16606  194E                     _DimmerLights_Initialization:	
 16607                           
 16608                           ;Dimmer_B1.c: 634: setDimmerLights_Initialization(1);
 16609                           
 16610                           ;incstack = 0
 16611                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 16612  194E  3001               	movlw	1
 16613  194F  3188  2001  3199   	fcall	_setDimmerLights_Initialization
 16614                           
 16615                           ;Dimmer_B1.c: 638: setDimmerLights_Initialization(2);
 16616  1952  3002               	movlw	2
 16617  1953  3188  2001  3199   	fcall	_setDimmerLights_Initialization
 16618                           
 16619                           ;Dimmer_B1.c: 644: DimmerIntr_Initialization();
 16620  1956  3189  213C         	fcall	_DimmerIntr_Initialization
 16621  1958  0008               	return
 16622  1959                     __end_of_DimmerLights_Initialization:	
 16623                           
 16624                           	psect	text112
 16625  0801                     __ptext112:	
 16626 ;; *************** function _setDimmerLights_Initialization *****************
 16627 ;; Defined at:
 16628 ;;		line 648 in file "../src/Dimmer_B1.c"
 16629 ;; Parameters:    Size  Location     Type
 16630 ;;  lights          1    wreg     unsigned char 
 16631 ;; Auto vars:     Size  Location     Type
 16632 ;;  lights          1    0[COMMON] unsigned char 
 16633 ;; Return value:  Size  Location     Type
 16634 ;;		None               void
 16635 ;; Registers used:
 16636 ;;		wreg
 16637 ;; Tracked objects:
 16638 ;;		On entry : 0/0
 16639 ;;		On exit  : 0/0
 16640 ;;		Unchanged: 0/0
 16641 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16645 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16646 ;;Total ram usage:        0 bytes
 16647 ;; Hardware stack levels used:    1
 16648 ;; Hardware stack levels required when called:    5
 16649 ;; This function calls:
 16650 ;;		Nothing
 16651 ;; This function is called by:
 16652 ;;		_DimmerLights_Initialization
 16653 ;; This function uses a non-reentrant model
 16654 ;;
 16655                           
 16656                           
 16657                           ;psect for function _setDimmerLights_Initialization
 16658  0801                     _setDimmerLights_Initialization:	
 16659                           
 16660                           ;incstack = 0
 16661                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 16662  0801  0008               	return
 16663  0802                     __end_of_setDimmerLights_Initialization:	
 16664                           
 16665                           	psect	text113
 16666  093C                     __ptext113:	
 16667 ;; *************** function _DimmerIntr_Initialization *****************
 16668 ;; Defined at:
 16669 ;;		line 7 in file "../src/Dimmer_B1.c"
 16670 ;; Parameters:    Size  Location     Type
 16671 ;;		None
 16672 ;; Auto vars:     Size  Location     Type
 16673 ;;		None
 16674 ;; Return value:  Size  Location     Type
 16675 ;;		None               void
 16676 ;; Registers used:
 16677 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16678 ;; Tracked objects:
 16679 ;;		On entry : 0/0
 16680 ;;		On exit  : 0/0
 16681 ;;		Unchanged: 0/0
 16682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16685 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16686 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16687 ;;Total ram usage:        1 bytes
 16688 ;; Hardware stack levels used:    1
 16689 ;; Hardware stack levels required when called:    8
 16690 ;; This function calls:
 16691 ;;		_getDimmerLights_PercentToValue
 16692 ;;		_getDimmerLights_ValueToPercent
 16693 ;;		_setMemory_Modify
 16694 ;; This function is called by:
 16695 ;;		_DimmerLights_Initialization
 16696 ;; This function uses a non-reentrant model
 16697 ;;
 16698                           
 16699                           
 16700                           ;psect for function _DimmerIntr_Initialization
 16701  093C                     _DimmerIntr_Initialization:	
 16702                           
 16703                           ;Dimmer_B1.c: 10: DimmerIntr1.TuneTimeValue = 7;
 16704                           
 16705                           ;incstack = 0
 16706                           ; Regs used in _DimmerIntr_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 16707  093C  3007               	movlw	7
 16708  093D  0020               	movlb	0	; select bank0
 16709  093E  00E2               	movwf	??_DimmerIntr_Initialization
 16710  093F  0862               	movf	??_DimmerIntr_Initialization,w
 16711  0940  0021               	movlb	1	; select bank1
 16712  0941  00BF               	movwf	(_DimmerIntr1^(0+128)+4)
 16713                           
 16714                           ;Dimmer_B1.c: 11: DimmerIntr1.MaxmumValue = ((char)(50*0.6));
 16715  0942  301E               	movlw	30
 16716  0943  0020               	movlb	0	; select bank0
 16717  0944  00E2               	movwf	??_DimmerIntr_Initialization
 16718  0945  0862               	movf	??_DimmerIntr_Initialization,w
 16719  0946  0021               	movlb	1	; select bank1
 16720  0947  00C1               	movwf	(_DimmerIntr1^(0+128)+6)
 16721                           
 16722                           ;Dimmer_B1.c: 12: DimmerIntr1.MinimumValue = ((char)(4*0.6));
 16723  0948  3002               	movlw	2
 16724  0949  0020               	movlb	0	; select bank0
 16725  094A  00E2               	movwf	??_DimmerIntr_Initialization
 16726  094B  0862               	movf	??_DimmerIntr_Initialization,w
 16727  094C  0021               	movlb	1	; select bank1
 16728  094D  00C2               	movwf	(_DimmerIntr1^(0+128)+7)
 16729                           
 16730                           ;Dimmer_B1.c: 15: if (myMain.InitDimmer == 1) {
 16731  094E  1E38               	btfss	(_myMain^(0+128)+10),4
 16732  094F  2960               	goto	l7841
 16733                           
 16734                           ;Dimmer_B1.c: 16: product->Data[21] = getDimmerLights_ValueToPercent(((char)(50*0.6)));
 16735  0950  301E               	movlw	30
 16736  0951  3195  2585  3189   	fcall	_getDimmerLights_ValueToPercent
 16737  0954  0020               	movlb	0	; select bank0
 16738  0955  00E2               	movwf	??_DimmerIntr_Initialization
 16739  0956  0021               	movlb	1	; select bank1
 16740  0957  086F               	movf	_product^(0+128),w
 16741  0958  3E15               	addlw	21
 16742  0959  0086               	movwf	6
 16743  095A  3002               	movlw	2	; select bank4/5
 16744  095B  0087               	movwf	7
 16745  095C  0020               	movlb	0	; select bank0
 16746  095D  0862               	movf	??_DimmerIntr_Initialization,w
 16747  095E  0081               	movwf	1
 16748                           
 16749                           ;Dimmer_B1.c: 17: } else {
 16750  095F  296F               	goto	l7843
 16751  0960                     l7841:	
 16752                           
 16753                           ;Dimmer_B1.c: 18: DimmerIntr1.DimmingValue = getDimmerLights_PercentToValue(product->Dat
      +                          a[21]);
 16754  0960  0021               	movlb	1	; select bank1
 16755  0961  086F               	movf	_product^(0+128),w
 16756  0962  3E15               	addlw	21
 16757  0963  0086               	movwf	6
 16758  0964  3002               	movlw	2	; select bank4/5
 16759  0965  0087               	movwf	7
 16760  0966  0801               	movf	1,w
 16761  0967  3195  2520  3189   	fcall	_getDimmerLights_PercentToValue
 16762  096A  0020               	movlb	0	; select bank0
 16763  096B  00E2               	movwf	??_DimmerIntr_Initialization
 16764  096C  0862               	movf	??_DimmerIntr_Initialization,w
 16765  096D  0021               	movlb	1	; select bank1
 16766  096E  00C0               	movwf	(_DimmerIntr1^(0+128)+5)
 16767  096F                     l7843:	
 16768                           
 16769                           ;Dimmer_B1.c: 19: }
 16770                           ;Dimmer_B1.c: 29: DimmerIntr2.TuneTimeValue = 7;
 16771  096F  3007               	movlw	7
 16772  0970  0020               	movlb	0	; select bank0
 16773  0971  00E2               	movwf	??_DimmerIntr_Initialization
 16774  0972  0862               	movf	??_DimmerIntr_Initialization,w
 16775  0973  0021               	movlb	1	; select bank1
 16776  0974  00CB               	movwf	(_DimmerIntr2^(0+128)+4)
 16777                           
 16778                           ;Dimmer_B1.c: 30: DimmerIntr2.MaxmumValue = ((char)(50*0.6));
 16779  0975  301E               	movlw	30
 16780  0976  0020               	movlb	0	; select bank0
 16781  0977  00E2               	movwf	??_DimmerIntr_Initialization
 16782  0978  0862               	movf	??_DimmerIntr_Initialization,w
 16783  0979  0021               	movlb	1	; select bank1
 16784  097A  00CD               	movwf	(_DimmerIntr2^(0+128)+6)
 16785                           
 16786                           ;Dimmer_B1.c: 31: DimmerIntr2.MinimumValue = ((char)(4*0.6));
 16787  097B  3002               	movlw	2
 16788  097C  0020               	movlb	0	; select bank0
 16789  097D  00E2               	movwf	??_DimmerIntr_Initialization
 16790  097E  0862               	movf	??_DimmerIntr_Initialization,w
 16791  097F  0021               	movlb	1	; select bank1
 16792  0980  00CE               	movwf	(_DimmerIntr2^(0+128)+7)
 16793                           
 16794                           ;Dimmer_B1.c: 33: if (myMain.InitDimmer == 1) {
 16795  0981  1E38               	btfss	(_myMain^(0+128)+10),4
 16796  0982  2993               	goto	l7853
 16797                           
 16798                           ;Dimmer_B1.c: 34: product->Data[22] = getDimmerLights_ValueToPercent(((char)(50*0.6)));
 16799  0983  301E               	movlw	30
 16800  0984  3195  2585  3189   	fcall	_getDimmerLights_ValueToPercent
 16801  0987  0020               	movlb	0	; select bank0
 16802  0988  00E2               	movwf	??_DimmerIntr_Initialization
 16803  0989  0021               	movlb	1	; select bank1
 16804  098A  086F               	movf	_product^(0+128),w
 16805  098B  3E16               	addlw	22
 16806  098C  0086               	movwf	6
 16807  098D  3002               	movlw	2	; select bank4/5
 16808  098E  0087               	movwf	7
 16809  098F  0020               	movlb	0	; select bank0
 16810  0990  0862               	movf	??_DimmerIntr_Initialization,w
 16811  0991  0081               	movwf	1
 16812                           
 16813                           ;Dimmer_B1.c: 35: } else {
 16814  0992  29A2               	goto	l7855
 16815  0993                     l7853:	
 16816                           
 16817                           ;Dimmer_B1.c: 36: DimmerIntr2.DimmingValue = getDimmerLights_PercentToValue(product->Dat
      +                          a[22]);
 16818  0993  0021               	movlb	1	; select bank1
 16819  0994  086F               	movf	_product^(0+128),w
 16820  0995  3E16               	addlw	22
 16821  0996  0086               	movwf	6
 16822  0997  3002               	movlw	2	; select bank4/5
 16823  0998  0087               	movwf	7
 16824  0999  0801               	movf	1,w
 16825  099A  3195  2520  3189   	fcall	_getDimmerLights_PercentToValue
 16826  099D  0020               	movlb	0	; select bank0
 16827  099E  00E2               	movwf	??_DimmerIntr_Initialization
 16828  099F  0862               	movf	??_DimmerIntr_Initialization,w
 16829  09A0  0021               	movlb	1	; select bank1
 16830  09A1  00CC               	movwf	(_DimmerIntr2^(0+128)+5)
 16831  09A2                     l7855:	
 16832                           
 16833                           ;Dimmer_B1.c: 37: }
 16834                           ;Dimmer_B1.c: 58: if (myMain.InitDimmer == 1) {
 16835  09A2  0021               	movlb	1	; select bank1
 16836  09A3  1E38               	btfss	(_myMain^(0+128)+10),4
 16837  09A4  0008               	return
 16838                           
 16839                           ;Dimmer_B1.c: 59: myMain.InitDimmer = 0;
 16840  09A5  1238               	bcf	(_myMain^(0+128)+10),4
 16841                           
 16842                           ;Dimmer_B1.c: 60: myMain.SaveDimmer = 1;
 16843  09A6  16B8               	bsf	(_myMain^(0+128)+10),5
 16844                           
 16845                           ;Dimmer_B1.c: 61: setMemory_Modify(1);
 16846  09A7  3001               	movlw	1
 16847  09A8  319A  22C3         	fcall	_setMemory_Modify
 16848  09AA  0008               	return
 16849  09AB                     __end_of_DimmerIntr_Initialization:	
 16850                           
 16851                           	psect	text114
 16852  1AC3                     __ptext114:	
 16853 ;; *************** function _setMemory_Modify *****************
 16854 ;; Defined at:
 16855 ;;		line 1083 in file "../src/MCU_B1.c"
 16856 ;; Parameters:    Size  Location     Type
 16857 ;;  command         1    wreg     unsigned char 
 16858 ;; Auto vars:     Size  Location     Type
 16859 ;;  command         1    1[BANK0 ] unsigned char 
 16860 ;; Return value:  Size  Location     Type
 16861 ;;		None               void
 16862 ;; Registers used:
 16863 ;;		wreg, status,2, status,0
 16864 ;; Tracked objects:
 16865 ;;		On entry : 0/0
 16866 ;;		On exit  : 0/0
 16867 ;;		Unchanged: 0/0
 16868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16870 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16871 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16872 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16873 ;;Total ram usage:        2 bytes
 16874 ;; Hardware stack levels used:    1
 16875 ;; Hardware stack levels required when called:    5
 16876 ;; This function calls:
 16877 ;;		Nothing
 16878 ;; This function is called by:
 16879 ;;		_DimmerIntr_Initialization
 16880 ;;		_setDimmerLights_Dimming
 16881 ;;		_setLog_Code
 16882 ;;		_setRFSW_AdjControl
 16883 ;; This function uses a non-reentrant model
 16884 ;;
 16885                           
 16886                           
 16887                           ;psect for function _setMemory_Modify
 16888  1AC3                     _setMemory_Modify:	
 16889                           
 16890                           ;incstack = 0
 16891                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
 16892                           ;setMemory_Modify@command stored from wreg
 16893  1AC3  0020               	movlb	0	; select bank0
 16894  1AC4  00A1               	movwf	setMemory_Modify@command
 16895                           
 16896                           ;MCU_B1.c: 1084: Memory.Modify = command == 1 ? 1 : 0;
 16897  1AC5  0821               	movf	setMemory_Modify@command,w
 16898  1AC6  3A01               	xorlw	1
 16899  1AC7  3000               	movlw	0
 16900  1AC8  1903               	skipnz
 16901  1AC9  3001               	movlw	1
 16902  1ACA  00A0               	movwf	??_setMemory_Modify
 16903  1ACB  0024               	movlb	4	; select bank4
 16904  1ACC  0844               	movf	(_Memory^(0+512)+36),w
 16905  1ACD  0020               	movlb	0	; select bank0
 16906  1ACE  0620               	xorwf	??_setMemory_Modify,w
 16907  1ACF  39FE               	andlw	-2
 16908  1AD0  0620               	xorwf	??_setMemory_Modify,w
 16909  1AD1  0024               	movlb	4	; select bank4
 16910  1AD2  00C4               	movwf	(_Memory^(0+512)+36)
 16911                           
 16912                           ;MCU_B1.c: 1085: Memory.Time = 0;
 16913  1AD3  01C2               	clrf	(_Memory^(0+512)+34)
 16914  1AD4  01C3               	clrf	((_Memory+1)^(0+512)+34)
 16915  1AD5  0008               	return
 16916  1AD6                     __end_of_setMemory_Modify:	
 16917                           
 16918                           	psect	text115
 16919  1585                     __ptext115:	
 16920 ;; *************** function _getDimmerLights_ValueToPercent *****************
 16921 ;; Defined at:
 16922 ;;		line 1119 in file "../src/Dimmer_B1.c"
 16923 ;; Parameters:    Size  Location     Type
 16924 ;;  value           1    wreg     unsigned char 
 16925 ;; Auto vars:     Size  Location     Type
 16926 ;;  value           1   62[BANK0 ] unsigned char 
 16927 ;;  i               3   63[BANK0 ] float 
 16928 ;; Return value:  Size  Location     Type
 16929 ;;                  1    wreg      unsigned char 
 16930 ;; Registers used:
 16931 ;;		wreg, status,2, status,0, pclath, cstack
 16932 ;; Tracked objects:
 16933 ;;		On entry : 0/0
 16934 ;;		On exit  : 0/0
 16935 ;;		Unchanged: 0/0
 16936 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16938 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16939 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16940 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16941 ;;Total ram usage:        6 bytes
 16942 ;; Hardware stack levels used:    1
 16943 ;; Hardware stack levels required when called:    7
 16944 ;; This function calls:
 16945 ;;		___awtoft
 16946 ;;		___ftadd
 16947 ;;		___ftdiv
 16948 ;;		___ftneg
 16949 ;;		___fttol
 16950 ;; This function is called by:
 16951 ;;		_DimmerIntr_Initialization
 16952 ;;		_setDimmerLights_Dimming
 16953 ;; This function uses a non-reentrant model
 16954 ;;
 16955                           
 16956                           
 16957                           ;psect for function _getDimmerLights_ValueToPercent
 16958  1585                     _getDimmerLights_ValueToPercent:	
 16959                           
 16960                           ;incstack = 0
 16961                           ; Regs used in _getDimmerLights_ValueToPercent: [wreg+status,2+status,0+pclath+cstack]
 16962                           ;getDimmerLights_ValueToPercent@value stored from wreg
 16963  1585  0020               	movlb	0	; select bank0
 16964  1586  00DE               	movwf	getDimmerLights_ValueToPercent@value
 16965                           
 16966                           ;Dimmer_B1.c: 1127: float i = ((char)(50*0.6)) - ((char)(4*0.6));
 16967  1587  3000               	movlw	0
 16968  1588  00DF               	movwf	getDimmerLights_ValueToPercent@i
 16969  1589  30E0               	movlw	224
 16970  158A  00E0               	movwf	getDimmerLights_ValueToPercent@i+1
 16971  158B  3041               	movlw	65
 16972  158C  00E1               	movwf	getDimmerLights_ValueToPercent@i+2
 16973                           
 16974                           ;Dimmer_B1.c: 1128: i /= 100;
 16975  158D  3000               	movlw	0
 16976  158E  00AE               	movwf	___ftdiv@f2
 16977  158F  30C8               	movlw	200
 16978  1590  00AF               	movwf	___ftdiv@f2+1
 16979  1591  3042               	movlw	66
 16980  1592  00B0               	movwf	___ftdiv@f2+2
 16981  1593  085F               	movf	getDimmerLights_ValueToPercent@i,w
 16982  1594  00B1               	movwf	___ftdiv@f1
 16983  1595  0860               	movf	getDimmerLights_ValueToPercent@i+1,w
 16984  1596  00B2               	movwf	___ftdiv@f1+1
 16985  1597  0861               	movf	getDimmerLights_ValueToPercent@i+2,w
 16986  1598  00B3               	movwf	___ftdiv@f1+2
 16987  1599  318D  2537  3195   	fcall	___ftdiv
 16988  159C  0020               	movlb	0	; select bank0
 16989  159D  082E               	movf	?___ftdiv,w
 16990  159E  00DF               	movwf	getDimmerLights_ValueToPercent@i
 16991  159F  082F               	movf	?___ftdiv+1,w
 16992  15A0  00E0               	movwf	getDimmerLights_ValueToPercent@i+1
 16993  15A1  0830               	movf	?___ftdiv+2,w
 16994  15A2  00E1               	movwf	getDimmerLights_ValueToPercent@i+2
 16995                           
 16996                           ;Dimmer_B1.c: 1130: return (char) (100 - ((((char)(50*0.6)) - value) / i));
 16997  15A3  085E               	movf	getDimmerLights_ValueToPercent@value,w
 16998  15A4  00DC               	movwf	??_getDimmerLights_ValueToPercent
 16999  15A5  01DD               	clrf	??_getDimmerLights_ValueToPercent+1
 17000  15A6  09DC               	comf	??_getDimmerLights_ValueToPercent,f
 17001  15A7  09DD               	comf	??_getDimmerLights_ValueToPercent+1,f
 17002  15A8  0ADC               	incf	??_getDimmerLights_ValueToPercent,f
 17003  15A9  1903               	skipnz
 17004  15AA  0ADD               	incf	??_getDimmerLights_ValueToPercent+1,f
 17005  15AB  085C               	movf	??_getDimmerLights_ValueToPercent,w
 17006  15AC  3E1E               	addlw	30
 17007  15AD  00A8               	movwf	___awtoft@c
 17008  15AE  3000               	movlw	0
 17009  15AF  3D5D               	addwfc	??_getDimmerLights_ValueToPercent+1,w
 17010  15B0  00A9               	movwf	___awtoft@c+1
 17011  15B1  319E  2659  3195   	fcall	___awtoft
 17012  15B4  0020               	movlb	0	; select bank0
 17013  15B5  0828               	movf	?___awtoft,w
 17014  15B6  00B1               	movwf	___ftdiv@f1
 17015  15B7  0829               	movf	?___awtoft+1,w
 17016  15B8  00B2               	movwf	___ftdiv@f1+1
 17017  15B9  082A               	movf	?___awtoft+2,w
 17018  15BA  00B3               	movwf	___ftdiv@f1+2
 17019  15BB  085F               	movf	getDimmerLights_ValueToPercent@i,w
 17020  15BC  00AE               	movwf	___ftdiv@f2
 17021  15BD  0860               	movf	getDimmerLights_ValueToPercent@i+1,w
 17022  15BE  00AF               	movwf	___ftdiv@f2+1
 17023  15BF  0861               	movf	getDimmerLights_ValueToPercent@i+2,w
 17024  15C0  00B0               	movwf	___ftdiv@f2+2
 17025  15C1  318D  2537  3195   	fcall	___ftdiv
 17026  15C4  0020               	movlb	0	; select bank0
 17027  15C5  082E               	movf	?___ftdiv,w
 17028  15C6  00BE               	movwf	___ftneg@f1
 17029  15C7  082F               	movf	?___ftdiv+1,w
 17030  15C8  00BF               	movwf	___ftneg@f1+1
 17031  15C9  0830               	movf	?___ftdiv+2,w
 17032  15CA  00C0               	movwf	___ftneg@f1+2
 17033  15CB  3199  213C  3195   	fcall	___ftneg
 17034  15CE  0020               	movlb	0	; select bank0
 17035  15CF  083E               	movf	?___ftneg,w
 17036  15D0  00C4               	movwf	___ftadd@f2
 17037  15D1  083F               	movf	?___ftneg+1,w
 17038  15D2  00C5               	movwf	___ftadd@f2+1
 17039  15D3  0840               	movf	?___ftneg+2,w
 17040  15D4  00C6               	movwf	___ftadd@f2+2
 17041  15D5  3000               	movlw	0
 17042  15D6  00C1               	movwf	___ftadd@f1
 17043  15D7  30C8               	movlw	200
 17044  15D8  00C2               	movwf	___ftadd@f1+1
 17045  15D9  3042               	movlw	66
 17046  15DA  00C3               	movwf	___ftadd@f1+2
 17047  15DB  3183  2388  3195   	fcall	___ftadd
 17048  15DE  0020               	movlb	0	; select bank0
 17049  15DF  0841               	movf	?___ftadd,w
 17050  15E0  00CE               	movwf	___fttol@f1
 17051  15E1  0842               	movf	?___ftadd+1,w
 17052  15E2  00CF               	movwf	___fttol@f1+1
 17053  15E3  0843               	movf	?___ftadd+2,w
 17054  15E4  00D0               	movwf	___fttol@f1+2
 17055  15E5  318B  2395         	fcall	___fttol
 17056  15E7  0020               	movlb	0	; select bank0
 17057  15E8  084E               	movf	?___fttol,w
 17058  15E9  0008               	return
 17059  15EA                     __end_of_getDimmerLights_ValueToPercent:	
 17060                           
 17061                           	psect	text116
 17062  1520                     __ptext116:	
 17063 ;; *************** function _getDimmerLights_PercentToValue *****************
 17064 ;; Defined at:
 17065 ;;		line 1103 in file "../src/Dimmer_B1.c"
 17066 ;; Parameters:    Size  Location     Type
 17067 ;;  value           1    wreg     unsigned char 
 17068 ;; Auto vars:     Size  Location     Type
 17069 ;;  value           1   62[BANK0 ] unsigned char 
 17070 ;;  i               3   63[BANK0 ] float 
 17071 ;; Return value:  Size  Location     Type
 17072 ;;                  1    wreg      unsigned char 
 17073 ;; Registers used:
 17074 ;;		wreg, status,2, status,0, pclath, cstack
 17075 ;; Tracked objects:
 17076 ;;		On entry : 0/0
 17077 ;;		On exit  : 0/0
 17078 ;;		Unchanged: 0/0
 17079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17081 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17082 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17083 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17084 ;;Total ram usage:        6 bytes
 17085 ;; Hardware stack levels used:    1
 17086 ;; Hardware stack levels required when called:    7
 17087 ;; This function calls:
 17088 ;;		___awtoft
 17089 ;;		___ftadd
 17090 ;;		___ftdiv
 17091 ;;		___ftmul
 17092 ;;		___ftneg
 17093 ;;		___fttol
 17094 ;; This function is called by:
 17095 ;;		_DimmerIntr_Initialization
 17096 ;;		_setDimmerLights_OnOff
 17097 ;;		_setRFSW_AdjControl
 17098 ;; This function uses a non-reentrant model
 17099 ;;
 17100                           
 17101                           
 17102                           ;psect for function _getDimmerLights_PercentToValue
 17103  1520                     _getDimmerLights_PercentToValue:	
 17104                           
 17105                           ;incstack = 0
 17106                           ; Regs used in _getDimmerLights_PercentToValue: [wreg+status,2+status,0+pclath+cstack]
 17107                           ;getDimmerLights_PercentToValue@value stored from wreg
 17108  1520  0020               	movlb	0	; select bank0
 17109  1521  00DE               	movwf	getDimmerLights_PercentToValue@value
 17110                           
 17111                           ;Dimmer_B1.c: 1111: float i = ((char)(50*0.6)) - ((char)(4*0.6));
 17112  1522  3000               	movlw	0
 17113  1523  00DF               	movwf	getDimmerLights_PercentToValue@i
 17114  1524  30E0               	movlw	224
 17115  1525  00E0               	movwf	getDimmerLights_PercentToValue@i+1
 17116  1526  3041               	movlw	65
 17117  1527  00E1               	movwf	getDimmerLights_PercentToValue@i+2
 17118                           
 17119                           ;Dimmer_B1.c: 1112: i /= 100;
 17120  1528  3000               	movlw	0
 17121  1529  00AE               	movwf	___ftdiv@f2
 17122  152A  30C8               	movlw	200
 17123  152B  00AF               	movwf	___ftdiv@f2+1
 17124  152C  3042               	movlw	66
 17125  152D  00B0               	movwf	___ftdiv@f2+2
 17126  152E  085F               	movf	getDimmerLights_PercentToValue@i,w
 17127  152F  00B1               	movwf	___ftdiv@f1
 17128  1530  0860               	movf	getDimmerLights_PercentToValue@i+1,w
 17129  1531  00B2               	movwf	___ftdiv@f1+1
 17130  1532  0861               	movf	getDimmerLights_PercentToValue@i+2,w
 17131  1533  00B3               	movwf	___ftdiv@f1+2
 17132  1534  318D  2537  3195   	fcall	___ftdiv
 17133  1537  0020               	movlb	0	; select bank0
 17134  1538  082E               	movf	?___ftdiv,w
 17135  1539  00DF               	movwf	getDimmerLights_PercentToValue@i
 17136  153A  082F               	movf	?___ftdiv+1,w
 17137  153B  00E0               	movwf	getDimmerLights_PercentToValue@i+1
 17138  153C  0830               	movf	?___ftdiv+2,w
 17139  153D  00E1               	movwf	getDimmerLights_PercentToValue@i+2
 17140                           
 17141                           ;Dimmer_B1.c: 1114: return (char) (((char)(50*0.6)) - ((100 - value) * i));
 17142  153E  085E               	movf	getDimmerLights_PercentToValue@value,w
 17143  153F  00DC               	movwf	??_getDimmerLights_PercentToValue
 17144  1540  01DD               	clrf	??_getDimmerLights_PercentToValue+1
 17145  1541  09DC               	comf	??_getDimmerLights_PercentToValue,f
 17146  1542  09DD               	comf	??_getDimmerLights_PercentToValue+1,f
 17147  1543  0ADC               	incf	??_getDimmerLights_PercentToValue,f
 17148  1544  1903               	skipnz
 17149  1545  0ADD               	incf	??_getDimmerLights_PercentToValue+1,f
 17150  1546  085C               	movf	??_getDimmerLights_PercentToValue,w
 17151  1547  3E64               	addlw	100
 17152  1548  00A8               	movwf	___awtoft@c
 17153  1549  3000               	movlw	0
 17154  154A  3D5D               	addwfc	??_getDimmerLights_PercentToValue+1,w
 17155  154B  00A9               	movwf	___awtoft@c+1
 17156  154C  319E  2659  3195   	fcall	___awtoft
 17157  154F  0020               	movlb	0	; select bank0
 17158  1550  0828               	movf	?___awtoft,w
 17159  1551  00B1               	movwf	___ftmul@f2
 17160  1552  0829               	movf	?___awtoft+1,w
 17161  1553  00B2               	movwf	___ftmul@f2+1
 17162  1554  082A               	movf	?___awtoft+2,w
 17163  1555  00B3               	movwf	___ftmul@f2+2
 17164  1556  085F               	movf	getDimmerLights_PercentToValue@i,w
 17165  1557  00AE               	movwf	___ftmul@f1
 17166  1558  0860               	movf	getDimmerLights_PercentToValue@i+1,w
 17167  1559  00AF               	movwf	___ftmul@f1+1
 17168  155A  0861               	movf	getDimmerLights_PercentToValue@i+2,w
 17169  155B  00B0               	movwf	___ftmul@f1+2
 17170  155C  318E  2691  3195   	fcall	___ftmul
 17171  155F  0020               	movlb	0	; select bank0
 17172  1560  082E               	movf	?___ftmul,w
 17173  1561  00BE               	movwf	___ftneg@f1
 17174  1562  082F               	movf	?___ftmul+1,w
 17175  1563  00BF               	movwf	___ftneg@f1+1
 17176  1564  0830               	movf	?___ftmul+2,w
 17177  1565  00C0               	movwf	___ftneg@f1+2
 17178  1566  3199  213C  3195   	fcall	___ftneg
 17179  1569  0020               	movlb	0	; select bank0
 17180  156A  083E               	movf	?___ftneg,w
 17181  156B  00C4               	movwf	___ftadd@f2
 17182  156C  083F               	movf	?___ftneg+1,w
 17183  156D  00C5               	movwf	___ftadd@f2+1
 17184  156E  0840               	movf	?___ftneg+2,w
 17185  156F  00C6               	movwf	___ftadd@f2+2
 17186  1570  3000               	movlw	0
 17187  1571  00C1               	movwf	___ftadd@f1
 17188  1572  30F0               	movlw	240
 17189  1573  00C2               	movwf	___ftadd@f1+1
 17190  1574  3041               	movlw	65
 17191  1575  00C3               	movwf	___ftadd@f1+2
 17192  1576  3183  2388  3195   	fcall	___ftadd
 17193  1579  0020               	movlb	0	; select bank0
 17194  157A  0841               	movf	?___ftadd,w
 17195  157B  00CE               	movwf	___fttol@f1
 17196  157C  0842               	movf	?___ftadd+1,w
 17197  157D  00CF               	movwf	___fttol@f1+1
 17198  157E  0843               	movf	?___ftadd+2,w
 17199  157F  00D0               	movwf	___fttol@f1+2
 17200  1580  318B  2395         	fcall	___fttol
 17201  1582  0020               	movlb	0	; select bank0
 17202  1583  084E               	movf	?___fttol,w
 17203  1584  0008               	return
 17204  1585                     __end_of_getDimmerLights_PercentToValue:	
 17205                           
 17206                           	psect	text117
 17207  0B95                     __ptext117:	
 17208 ;; *************** function ___fttol *****************
 17209 ;; Defined at:
 17210 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 17211 ;; Parameters:    Size  Location     Type
 17212 ;;  f1              3   46[BANK0 ] float 
 17213 ;; Auto vars:     Size  Location     Type
 17214 ;;  lval            4   55[BANK0 ] unsigned long 
 17215 ;;  exp1            1   59[BANK0 ] unsigned char 
 17216 ;;  sign1           1   54[BANK0 ] unsigned char 
 17217 ;; Return value:  Size  Location     Type
 17218 ;;                  4   46[BANK0 ] long 
 17219 ;; Registers used:
 17220 ;;		wreg, status,2, status,0
 17221 ;; Tracked objects:
 17222 ;;		On entry : 0/0
 17223 ;;		On exit  : 0/0
 17224 ;;		Unchanged: 0/0
 17225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17226 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17227 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17228 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17229 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17230 ;;Total ram usage:       14 bytes
 17231 ;; Hardware stack levels used:    1
 17232 ;; Hardware stack levels required when called:    5
 17233 ;; This function calls:
 17234 ;;		Nothing
 17235 ;; This function is called by:
 17236 ;;		_getDimmerLights_PercentToValue
 17237 ;;		_getDimmerLights_ValueToPercent
 17238 ;; This function uses a non-reentrant model
 17239 ;;
 17240                           
 17241                           
 17242                           ;psect for function ___fttol
 17243  0B95                     ___fttol:	
 17244                           
 17245                           ;incstack = 0
 17246                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 17247  0B95  0020               	movlb	0	; select bank0
 17248  0B96  084E               	movf	___fttol@f1,w
 17249  0B97  00D2               	movwf	??___fttol
 17250  0B98  084F               	movf	___fttol@f1+1,w
 17251  0B99  00D3               	movwf	??___fttol+1
 17252  0B9A  0850               	movf	___fttol@f1+2,w
 17253  0B9B  00D4               	movwf	??___fttol+2
 17254  0B9C  1003               	clrc
 17255  0B9D  0D53               	rlf	??___fttol+1,w
 17256  0B9E  0D54               	rlf	??___fttol+2,w
 17257  0B9F  00D5               	movwf	??___fttol+3
 17258  0BA0  0855               	movf	??___fttol+3,w
 17259  0BA1  00DB               	movwf	___fttol@exp1
 17260  0BA2  08DB               	movf	___fttol@exp1,f
 17261  0BA3  1D03               	skipz
 17262  0BA4  2BAE               	goto	l6641
 17263  0BA5  3000               	movlw	0
 17264  0BA6  00D1               	movwf	?___fttol+3
 17265  0BA7  3000               	movlw	0
 17266  0BA8  00D0               	movwf	?___fttol+2
 17267  0BA9  3000               	movlw	0
 17268  0BAA  00CF               	movwf	?___fttol+1
 17269  0BAB  3000               	movlw	0
 17270  0BAC  00CE               	movwf	?___fttol
 17271  0BAD  0008               	return
 17272  0BAE                     l6641:	
 17273  0BAE  084E               	movf	___fttol@f1,w
 17274  0BAF  00D2               	movwf	??___fttol
 17275  0BB0  084F               	movf	___fttol@f1+1,w
 17276  0BB1  00D3               	movwf	??___fttol+1
 17277  0BB2  0850               	movf	___fttol@f1+2,w
 17278  0BB3  00D4               	movwf	??___fttol+2
 17279  0BB4  3017               	movlw	23
 17280  0BB5                     u5875:	
 17281  0BB5  36D4               	lsrf	??___fttol+2,f
 17282  0BB6  0CD3               	rrf	??___fttol+1,f
 17283  0BB7  0CD2               	rrf	??___fttol,f
 17284  0BB8  0B89               	decfsz	9,f
 17285  0BB9  2BB5               	goto	u5875
 17286  0BBA  0852               	movf	??___fttol,w
 17287  0BBB  00D5               	movwf	??___fttol+3
 17288  0BBC  0855               	movf	??___fttol+3,w
 17289  0BBD  00D6               	movwf	___fttol@sign1
 17290  0BBE  17CF               	bsf	___fttol@f1+1,7
 17291  0BBF  30FF               	movlw	255
 17292  0BC0  05CE               	andwf	___fttol@f1,f
 17293  0BC1  30FF               	movlw	255
 17294  0BC2  05CF               	andwf	___fttol@f1+1,f
 17295  0BC3  3000               	movlw	0
 17296  0BC4  05D0               	andwf	___fttol@f1+2,f
 17297  0BC5  084E               	movf	___fttol@f1,w
 17298  0BC6  00D7               	movwf	___fttol@lval
 17299  0BC7  084F               	movf	___fttol@f1+1,w
 17300  0BC8  00D8               	movwf	___fttol@lval+1
 17301  0BC9  0850               	movf	___fttol@f1+2,w
 17302  0BCA  00D9               	movwf	___fttol@lval+2
 17303  0BCB  01DA               	clrf	___fttol@lval+3
 17304  0BCC  308E               	movlw	142
 17305  0BCD  02DB               	subwf	___fttol@exp1,f
 17306  0BCE  1FDB               	btfss	___fttol@exp1,7
 17307  0BCF  2BEC               	goto	l6661
 17308  0BD0  085B               	movf	___fttol@exp1,w
 17309  0BD1  3A80               	xorlw	128
 17310  0BD2  3E8F               	addlw	143
 17311  0BD3  1803               	skipnc
 17312  0BD4  2BDE               	goto	l6659
 17313  0BD5  3000               	movlw	0
 17314  0BD6  00D1               	movwf	?___fttol+3
 17315  0BD7  3000               	movlw	0
 17316  0BD8  00D0               	movwf	?___fttol+2
 17317  0BD9  3000               	movlw	0
 17318  0BDA  00CF               	movwf	?___fttol+1
 17319  0BDB  3000               	movlw	0
 17320  0BDC  00CE               	movwf	?___fttol
 17321  0BDD  0008               	return
 17322  0BDE                     l6659:	
 17323  0BDE  3001               	movlw	1
 17324  0BDF                     u5905:	
 17325  0BDF  36DA               	lsrf	___fttol@lval+3,f
 17326  0BE0  0CD9               	rrf	___fttol@lval+2,f
 17327  0BE1  0CD8               	rrf	___fttol@lval+1,f
 17328  0BE2  0CD7               	rrf	___fttol@lval,f
 17329  0BE3  0B89               	decfsz	9,f
 17330  0BE4  2BDF               	goto	u5905
 17331  0BE5  3001               	movlw	1
 17332  0BE6  00D2               	movwf	??___fttol
 17333  0BE7  0852               	movf	??___fttol,w
 17334  0BE8  07DB               	addwf	___fttol@exp1,f
 17335  0BE9  1903               	btfsc	3,2
 17336  0BEA  2C05               	goto	l6671
 17337  0BEB  2BDE               	goto	l6659
 17338  0BEC                     l6661:	
 17339  0BEC  3018               	movlw	24
 17340  0BED  025B               	subwf	___fttol@exp1,w
 17341  0BEE  1C03               	skipc
 17342  0BEF  2C02               	goto	l6669
 17343  0BF0  3000               	movlw	0
 17344  0BF1  00D1               	movwf	?___fttol+3
 17345  0BF2  3000               	movlw	0
 17346  0BF3  00D0               	movwf	?___fttol+2
 17347  0BF4  3000               	movlw	0
 17348  0BF5  00CF               	movwf	?___fttol+1
 17349  0BF6  3000               	movlw	0
 17350  0BF7  00CE               	movwf	?___fttol
 17351  0BF8  0008               	return
 17352  0BF9                     l6667:	
 17353  0BF9  3001               	movlw	1
 17354  0BFA                     u5935:	
 17355  0BFA  35D7               	lslf	___fttol@lval,f
 17356  0BFB  0DD8               	rlf	___fttol@lval+1,f
 17357  0BFC  0DD9               	rlf	___fttol@lval+2,f
 17358  0BFD  0DDA               	rlf	___fttol@lval+3,f
 17359  0BFE  0B89               	decfsz	9,f
 17360  0BFF  2BFA               	goto	u5935
 17361  0C00  3001               	movlw	1
 17362  0C01  02DB               	subwf	___fttol@exp1,f
 17363  0C02                     l6669:	
 17364  0C02  08DB               	movf	___fttol@exp1,f
 17365  0C03  1D03               	skipz
 17366  0C04  2BF9               	goto	l6667
 17367  0C05                     l6671:	
 17368  0C05  0856               	movf	___fttol@sign1,w
 17369  0C06  1903               	btfsc	3,2
 17370  0C07  2C13               	goto	l6675
 17371  0C08  09D7               	comf	___fttol@lval,f
 17372  0C09  09D8               	comf	___fttol@lval+1,f
 17373  0C0A  09D9               	comf	___fttol@lval+2,f
 17374  0C0B  09DA               	comf	___fttol@lval+3,f
 17375  0C0C  0AD7               	incf	___fttol@lval,f
 17376  0C0D  1903               	skipnz
 17377  0C0E  0AD8               	incf	___fttol@lval+1,f
 17378  0C0F  1903               	skipnz
 17379  0C10  0AD9               	incf	___fttol@lval+2,f
 17380  0C11  1903               	skipnz
 17381  0C12  0ADA               	incf	___fttol@lval+3,f
 17382  0C13                     l6675:	
 17383  0C13  085A               	movf	___fttol@lval+3,w
 17384  0C14  00D1               	movwf	?___fttol+3
 17385  0C15  0859               	movf	___fttol@lval+2,w
 17386  0C16  00D0               	movwf	?___fttol+2
 17387  0C17  0858               	movf	___fttol@lval+1,w
 17388  0C18  00CF               	movwf	?___fttol+1
 17389  0C19  0857               	movf	___fttol@lval,w
 17390  0C1A  00CE               	movwf	?___fttol
 17391  0C1B  0008               	return
 17392  0C1C                     __end_of___fttol:	
 17393                           
 17394                           	psect	text118
 17395  193C                     __ptext118:	
 17396 ;; *************** function ___ftneg *****************
 17397 ;; Defined at:
 17398 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 17399 ;; Parameters:    Size  Location     Type
 17400 ;;  f1              3   30[BANK0 ] float 
 17401 ;; Auto vars:     Size  Location     Type
 17402 ;;		None
 17403 ;; Return value:  Size  Location     Type
 17404 ;;                  3   30[BANK0 ] float 
 17405 ;; Registers used:
 17406 ;;		wreg
 17407 ;; Tracked objects:
 17408 ;;		On entry : 0/0
 17409 ;;		On exit  : 0/0
 17410 ;;		Unchanged: 0/0
 17411 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17412 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17413 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17414 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17415 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17416 ;;Total ram usage:        3 bytes
 17417 ;; Hardware stack levels used:    1
 17418 ;; Hardware stack levels required when called:    5
 17419 ;; This function calls:
 17420 ;;		Nothing
 17421 ;; This function is called by:
 17422 ;;		_getDimmerLights_PercentToValue
 17423 ;;		_getDimmerLights_ValueToPercent
 17424 ;; This function uses a non-reentrant model
 17425 ;;
 17426                           
 17427                           
 17428                           ;psect for function ___ftneg
 17429  193C                     ___ftneg:	
 17430                           
 17431                           ;incstack = 0
 17432                           ; Regs used in ___ftneg: [wreg]
 17433  193C  0020               	movlb	0	; select bank0
 17434  193D  0840               	movf	___ftneg@f1+2,w
 17435  193E  043F               	iorwf	___ftneg@f1+1,w
 17436  193F  043E               	iorwf	___ftneg@f1,w
 17437  1940  1903               	skipnz
 17438  1941  0008               	return
 17439  1942  3080               	movlw	128
 17440  1943  06C0               	xorwf	___ftneg@f1+2,f
 17441  1944  0008               	return
 17442  1945                     __end_of___ftneg:	
 17443                           
 17444                           	psect	text119
 17445  0E91                     __ptext119:	
 17446 ;; *************** function ___ftmul *****************
 17447 ;; Defined at:
 17448 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 17449 ;; Parameters:    Size  Location     Type
 17450 ;;  f1              3   14[BANK0 ] float 
 17451 ;;  f2              3   17[BANK0 ] float 
 17452 ;; Auto vars:     Size  Location     Type
 17453 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
 17454 ;;  sign            1   29[BANK0 ] unsigned char 
 17455 ;;  cntr            1   28[BANK0 ] unsigned char 
 17456 ;;  exp             1   24[BANK0 ] unsigned char 
 17457 ;; Return value:  Size  Location     Type
 17458 ;;                  3   14[BANK0 ] float 
 17459 ;; Registers used:
 17460 ;;		wreg, status,2, status,0, pclath, cstack
 17461 ;; Tracked objects:
 17462 ;;		On entry : 0/0
 17463 ;;		On exit  : 0/0
 17464 ;;		Unchanged: 0/0
 17465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17466 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17467 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17468 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17469 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17470 ;;Total ram usage:       16 bytes
 17471 ;; Hardware stack levels used:    1
 17472 ;; Hardware stack levels required when called:    6
 17473 ;; This function calls:
 17474 ;;		___ftpack
 17475 ;; This function is called by:
 17476 ;;		_getDimmerLights_PercentToValue
 17477 ;; This function uses a non-reentrant model
 17478 ;;
 17479                           
 17480                           
 17481                           ;psect for function ___ftmul
 17482  0E91                     ___ftmul:	
 17483                           
 17484                           ;incstack = 0
 17485                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 17486  0E91  0020               	movlb	0	; select bank0
 17487  0E92  082E               	movf	___ftmul@f1,w
 17488  0E93  00B4               	movwf	??___ftmul
 17489  0E94  082F               	movf	___ftmul@f1+1,w
 17490  0E95  00B5               	movwf	??___ftmul+1
 17491  0E96  0830               	movf	___ftmul@f1+2,w
 17492  0E97  00B6               	movwf	??___ftmul+2
 17493  0E98  1003               	clrc
 17494  0E99  0D35               	rlf	??___ftmul+1,w
 17495  0E9A  0D36               	rlf	??___ftmul+2,w
 17496  0E9B  00B7               	movwf	??___ftmul+3
 17497  0E9C  0837               	movf	??___ftmul+3,w
 17498  0E9D  00B8               	movwf	___ftmul@exp
 17499  0E9E  08B8               	movf	___ftmul@exp,f
 17500  0E9F  1D03               	skipz
 17501  0EA0  2EA8               	goto	l6583
 17502  0EA1  3000               	movlw	0
 17503  0EA2  00AE               	movwf	?___ftmul
 17504  0EA3  3000               	movlw	0
 17505  0EA4  00AF               	movwf	?___ftmul+1
 17506  0EA5  3000               	movlw	0
 17507  0EA6  00B0               	movwf	?___ftmul+2
 17508  0EA7  0008               	return
 17509  0EA8                     l6583:	
 17510  0EA8  0831               	movf	___ftmul@f2,w
 17511  0EA9  00B4               	movwf	??___ftmul
 17512  0EAA  0832               	movf	___ftmul@f2+1,w
 17513  0EAB  00B5               	movwf	??___ftmul+1
 17514  0EAC  0833               	movf	___ftmul@f2+2,w
 17515  0EAD  00B6               	movwf	??___ftmul+2
 17516  0EAE  1003               	clrc
 17517  0EAF  0D35               	rlf	??___ftmul+1,w
 17518  0EB0  0D36               	rlf	??___ftmul+2,w
 17519  0EB1  00B7               	movwf	??___ftmul+3
 17520  0EB2  0837               	movf	??___ftmul+3,w
 17521  0EB3  00BD               	movwf	___ftmul@sign
 17522  0EB4  08BD               	movf	___ftmul@sign,f
 17523  0EB5  1D03               	skipz
 17524  0EB6  2EBE               	goto	l6589
 17525  0EB7  3000               	movlw	0
 17526  0EB8  00AE               	movwf	?___ftmul
 17527  0EB9  3000               	movlw	0
 17528  0EBA  00AF               	movwf	?___ftmul+1
 17529  0EBB  3000               	movlw	0
 17530  0EBC  00B0               	movwf	?___ftmul+2
 17531  0EBD  0008               	return
 17532  0EBE                     l6589:	
 17533  0EBE  083D               	movf	___ftmul@sign,w
 17534  0EBF  3E7B               	addlw	123
 17535  0EC0  00B4               	movwf	??___ftmul
 17536  0EC1  0834               	movf	??___ftmul,w
 17537  0EC2  07B8               	addwf	___ftmul@exp,f
 17538  0EC3  082E               	movf	___ftmul@f1,w
 17539  0EC4  00B4               	movwf	??___ftmul
 17540  0EC5  082F               	movf	___ftmul@f1+1,w
 17541  0EC6  00B5               	movwf	??___ftmul+1
 17542  0EC7  0830               	movf	___ftmul@f1+2,w
 17543  0EC8  00B6               	movwf	??___ftmul+2
 17544  0EC9  3010               	movlw	16
 17545  0ECA                     u5755:	
 17546  0ECA  36B6               	lsrf	??___ftmul+2,f
 17547  0ECB  0CB5               	rrf	??___ftmul+1,f
 17548  0ECC  0CB4               	rrf	??___ftmul,f
 17549  0ECD  0B89               	decfsz	9,f
 17550  0ECE  2ECA               	goto	u5755
 17551  0ECF  0834               	movf	??___ftmul,w
 17552  0ED0  00B7               	movwf	??___ftmul+3
 17553  0ED1  0837               	movf	??___ftmul+3,w
 17554  0ED2  00BD               	movwf	___ftmul@sign
 17555  0ED3  0831               	movf	___ftmul@f2,w
 17556  0ED4  00B4               	movwf	??___ftmul
 17557  0ED5  0832               	movf	___ftmul@f2+1,w
 17558  0ED6  00B5               	movwf	??___ftmul+1
 17559  0ED7  0833               	movf	___ftmul@f2+2,w
 17560  0ED8  00B6               	movwf	??___ftmul+2
 17561  0ED9  3010               	movlw	16
 17562  0EDA                     u5765:	
 17563  0EDA  36B6               	lsrf	??___ftmul+2,f
 17564  0EDB  0CB5               	rrf	??___ftmul+1,f
 17565  0EDC  0CB4               	rrf	??___ftmul,f
 17566  0EDD  0B89               	decfsz	9,f
 17567  0EDE  2EDA               	goto	u5765
 17568  0EDF  0834               	movf	??___ftmul,w
 17569  0EE0  00B7               	movwf	??___ftmul+3
 17570  0EE1  0837               	movf	??___ftmul+3,w
 17571  0EE2  06BD               	xorwf	___ftmul@sign,f
 17572  0EE3  3080               	movlw	128
 17573  0EE4  00B4               	movwf	??___ftmul
 17574  0EE5  0834               	movf	??___ftmul,w
 17575  0EE6  05BD               	andwf	___ftmul@sign,f
 17576  0EE7  17AF               	bsf	___ftmul@f1+1,7
 17577  0EE8  17B2               	bsf	___ftmul@f2+1,7
 17578  0EE9  30FF               	movlw	255
 17579  0EEA  05B1               	andwf	___ftmul@f2,f
 17580  0EEB  30FF               	movlw	255
 17581  0EEC  05B2               	andwf	___ftmul@f2+1,f
 17582  0EED  3000               	movlw	0
 17583  0EEE  05B3               	andwf	___ftmul@f2+2,f
 17584  0EEF  3000               	movlw	0
 17585  0EF0  00B9               	movwf	___ftmul@f3_as_product
 17586  0EF1  3000               	movlw	0
 17587  0EF2  00BA               	movwf	___ftmul@f3_as_product+1
 17588  0EF3  3000               	movlw	0
 17589  0EF4  00BB               	movwf	___ftmul@f3_as_product+2
 17590  0EF5  3007               	movlw	7
 17591  0EF6  00B4               	movwf	??___ftmul
 17592  0EF7  0834               	movf	??___ftmul,w
 17593  0EF8  00BC               	movwf	___ftmul@cntr
 17594  0EF9                     l6601:	
 17595  0EF9  1C2E               	btfss	___ftmul@f1,0
 17596  0EFA  2F01               	goto	l6605
 17597  0EFB  0831               	movf	___ftmul@f2,w
 17598  0EFC  07B9               	addwf	___ftmul@f3_as_product,f
 17599  0EFD  0832               	movf	___ftmul@f2+1,w
 17600  0EFE  3DBA               	addwfc	___ftmul@f3_as_product+1,f
 17601  0EFF  0833               	movf	___ftmul@f2+2,w
 17602  0F00  3DBB               	addwfc	___ftmul@f3_as_product+2,f
 17603  0F01                     l6605:	
 17604  0F01  3001               	movlw	1
 17605  0F02                     u5785:	
 17606  0F02  36B0               	lsrf	___ftmul@f1+2,f
 17607  0F03  0CAF               	rrf	___ftmul@f1+1,f
 17608  0F04  0CAE               	rrf	___ftmul@f1,f
 17609  0F05  0B89               	decfsz	9,f
 17610  0F06  2F02               	goto	u5785
 17611  0F07  3001               	movlw	1
 17612  0F08                     u5795:	
 17613  0F08  35B1               	lslf	___ftmul@f2,f
 17614  0F09  0DB2               	rlf	___ftmul@f2+1,f
 17615  0F0A  0DB3               	rlf	___ftmul@f2+2,f
 17616  0F0B  0B89               	decfsz	9,f
 17617  0F0C  2F08               	goto	u5795
 17618  0F0D  3001               	movlw	1
 17619  0F0E  02BC               	subwf	___ftmul@cntr,f
 17620  0F0F  1D03               	btfss	3,2
 17621  0F10  2EF9               	goto	l6601
 17622  0F11  3009               	movlw	9
 17623  0F12  00B4               	movwf	??___ftmul
 17624  0F13  0834               	movf	??___ftmul,w
 17625  0F14  00BC               	movwf	___ftmul@cntr
 17626  0F15                     l6613:	
 17627  0F15  1C2E               	btfss	___ftmul@f1,0
 17628  0F16  2F1D               	goto	l6617
 17629  0F17  0831               	movf	___ftmul@f2,w
 17630  0F18  07B9               	addwf	___ftmul@f3_as_product,f
 17631  0F19  0832               	movf	___ftmul@f2+1,w
 17632  0F1A  3DBA               	addwfc	___ftmul@f3_as_product+1,f
 17633  0F1B  0833               	movf	___ftmul@f2+2,w
 17634  0F1C  3DBB               	addwfc	___ftmul@f3_as_product+2,f
 17635  0F1D                     l6617:	
 17636  0F1D  3001               	movlw	1
 17637  0F1E                     u5825:	
 17638  0F1E  36B0               	lsrf	___ftmul@f1+2,f
 17639  0F1F  0CAF               	rrf	___ftmul@f1+1,f
 17640  0F20  0CAE               	rrf	___ftmul@f1,f
 17641  0F21  0B89               	decfsz	9,f
 17642  0F22  2F1E               	goto	u5825
 17643  0F23  3001               	movlw	1
 17644  0F24                     u5835:	
 17645  0F24  36BB               	lsrf	___ftmul@f3_as_product+2,f
 17646  0F25  0CBA               	rrf	___ftmul@f3_as_product+1,f
 17647  0F26  0CB9               	rrf	___ftmul@f3_as_product,f
 17648  0F27  0B89               	decfsz	9,f
 17649  0F28  2F24               	goto	u5835
 17650  0F29  3001               	movlw	1
 17651  0F2A  02BC               	subwf	___ftmul@cntr,f
 17652  0F2B  1D03               	btfss	3,2
 17653  0F2C  2F15               	goto	l6613
 17654  0F2D  0839               	movf	___ftmul@f3_as_product,w
 17655  0F2E  00A0               	movwf	___ftpack@arg
 17656  0F2F  083A               	movf	___ftmul@f3_as_product+1,w
 17657  0F30  00A1               	movwf	___ftpack@arg+1
 17658  0F31  083B               	movf	___ftmul@f3_as_product+2,w
 17659  0F32  00A2               	movwf	___ftpack@arg+2
 17660  0F33  0838               	movf	___ftmul@exp,w
 17661  0F34  00B4               	movwf	??___ftmul
 17662  0F35  0834               	movf	??___ftmul,w
 17663  0F36  00A3               	movwf	___ftpack@exp
 17664  0F37  083D               	movf	___ftmul@sign,w
 17665  0F38  00B5               	movwf	??___ftmul+1
 17666  0F39  0835               	movf	??___ftmul+1,w
 17667  0F3A  00A4               	movwf	___ftpack@sign
 17668  0F3B  3194  24BF         	fcall	___ftpack
 17669  0F3D  0020               	movlb	0	; select bank0
 17670  0F3E  0820               	movf	?___ftpack,w
 17671  0F3F  00AE               	movwf	?___ftmul
 17672  0F40  0821               	movf	?___ftpack+1,w
 17673  0F41  00AF               	movwf	?___ftmul+1
 17674  0F42  0822               	movf	?___ftpack+2,w
 17675  0F43  00B0               	movwf	?___ftmul+2
 17676  0F44  0008               	return
 17677  0F45                     __end_of___ftmul:	
 17678                           
 17679                           	psect	text120
 17680  0D37                     __ptext120:	
 17681 ;; *************** function ___ftdiv *****************
 17682 ;; Defined at:
 17683 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 17684 ;; Parameters:    Size  Location     Type
 17685 ;;  f2              3   14[BANK0 ] float 
 17686 ;;  f1              3   17[BANK0 ] float 
 17687 ;; Auto vars:     Size  Location     Type
 17688 ;;  f3              3   25[BANK0 ] float 
 17689 ;;  sign            1   29[BANK0 ] unsigned char 
 17690 ;;  exp             1   28[BANK0 ] unsigned char 
 17691 ;;  cntr            1   24[BANK0 ] unsigned char 
 17692 ;; Return value:  Size  Location     Type
 17693 ;;                  3   14[BANK0 ] float 
 17694 ;; Registers used:
 17695 ;;		wreg, status,2, status,0, pclath, cstack
 17696 ;; Tracked objects:
 17697 ;;		On entry : 0/0
 17698 ;;		On exit  : 0/0
 17699 ;;		Unchanged: 0/0
 17700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17701 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17702 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17703 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17704 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17705 ;;Total ram usage:       16 bytes
 17706 ;; Hardware stack levels used:    1
 17707 ;; Hardware stack levels required when called:    6
 17708 ;; This function calls:
 17709 ;;		___ftpack
 17710 ;; This function is called by:
 17711 ;;		_getDimmerLights_PercentToValue
 17712 ;;		_getDimmerLights_ValueToPercent
 17713 ;; This function uses a non-reentrant model
 17714 ;;
 17715                           
 17716                           
 17717                           ;psect for function ___ftdiv
 17718  0D37                     ___ftdiv:	
 17719                           
 17720                           ;incstack = 0
 17721                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 17722  0D37  0020               	movlb	0	; select bank0
 17723  0D38  0831               	movf	___ftdiv@f1,w
 17724  0D39  00B4               	movwf	??___ftdiv
 17725  0D3A  0832               	movf	___ftdiv@f1+1,w
 17726  0D3B  00B5               	movwf	??___ftdiv+1
 17727  0D3C  0833               	movf	___ftdiv@f1+2,w
 17728  0D3D  00B6               	movwf	??___ftdiv+2
 17729  0D3E  1003               	clrc
 17730  0D3F  0D35               	rlf	??___ftdiv+1,w
 17731  0D40  0D36               	rlf	??___ftdiv+2,w
 17732  0D41  00B7               	movwf	??___ftdiv+3
 17733  0D42  0837               	movf	??___ftdiv+3,w
 17734  0D43  00BC               	movwf	___ftdiv@exp
 17735  0D44  08BC               	movf	___ftdiv@exp,f
 17736  0D45  1D03               	skipz
 17737  0D46  2D4E               	goto	l6541
 17738  0D47  3000               	movlw	0
 17739  0D48  00AE               	movwf	?___ftdiv
 17740  0D49  3000               	movlw	0
 17741  0D4A  00AF               	movwf	?___ftdiv+1
 17742  0D4B  3000               	movlw	0
 17743  0D4C  00B0               	movwf	?___ftdiv+2
 17744  0D4D  0008               	return
 17745  0D4E                     l6541:	
 17746  0D4E  082E               	movf	___ftdiv@f2,w
 17747  0D4F  00B4               	movwf	??___ftdiv
 17748  0D50  082F               	movf	___ftdiv@f2+1,w
 17749  0D51  00B5               	movwf	??___ftdiv+1
 17750  0D52  0830               	movf	___ftdiv@f2+2,w
 17751  0D53  00B6               	movwf	??___ftdiv+2
 17752  0D54  1003               	clrc
 17753  0D55  0D35               	rlf	??___ftdiv+1,w
 17754  0D56  0D36               	rlf	??___ftdiv+2,w
 17755  0D57  00B7               	movwf	??___ftdiv+3
 17756  0D58  0837               	movf	??___ftdiv+3,w
 17757  0D59  00BD               	movwf	___ftdiv@sign
 17758  0D5A  08BD               	movf	___ftdiv@sign,f
 17759  0D5B  1D03               	skipz
 17760  0D5C  2D64               	goto	l6547
 17761  0D5D  3000               	movlw	0
 17762  0D5E  00AE               	movwf	?___ftdiv
 17763  0D5F  3000               	movlw	0
 17764  0D60  00AF               	movwf	?___ftdiv+1
 17765  0D61  3000               	movlw	0
 17766  0D62  00B0               	movwf	?___ftdiv+2
 17767  0D63  0008               	return
 17768  0D64                     l6547:	
 17769  0D64  3000               	movlw	0
 17770  0D65  00B9               	movwf	___ftdiv@f3
 17771  0D66  3000               	movlw	0
 17772  0D67  00BA               	movwf	___ftdiv@f3+1
 17773  0D68  3000               	movlw	0
 17774  0D69  00BB               	movwf	___ftdiv@f3+2
 17775  0D6A  3089               	movlw	137
 17776  0D6B  073D               	addwf	___ftdiv@sign,w
 17777  0D6C  00B4               	movwf	??___ftdiv
 17778  0D6D  0834               	movf	??___ftdiv,w
 17779  0D6E  02BC               	subwf	___ftdiv@exp,f
 17780  0D6F  0831               	movf	___ftdiv@f1,w
 17781  0D70  00B4               	movwf	??___ftdiv
 17782  0D71  0832               	movf	___ftdiv@f1+1,w
 17783  0D72  00B5               	movwf	??___ftdiv+1
 17784  0D73  0833               	movf	___ftdiv@f1+2,w
 17785  0D74  00B6               	movwf	??___ftdiv+2
 17786  0D75  3010               	movlw	16
 17787  0D76                     u5675:	
 17788  0D76  36B6               	lsrf	??___ftdiv+2,f
 17789  0D77  0CB5               	rrf	??___ftdiv+1,f
 17790  0D78  0CB4               	rrf	??___ftdiv,f
 17791  0D79  0B89               	decfsz	9,f
 17792  0D7A  2D76               	goto	u5675
 17793  0D7B  0834               	movf	??___ftdiv,w
 17794  0D7C  00B7               	movwf	??___ftdiv+3
 17795  0D7D  0837               	movf	??___ftdiv+3,w
 17796  0D7E  00BD               	movwf	___ftdiv@sign
 17797  0D7F  082E               	movf	___ftdiv@f2,w
 17798  0D80  00B4               	movwf	??___ftdiv
 17799  0D81  082F               	movf	___ftdiv@f2+1,w
 17800  0D82  00B5               	movwf	??___ftdiv+1
 17801  0D83  0830               	movf	___ftdiv@f2+2,w
 17802  0D84  00B6               	movwf	??___ftdiv+2
 17803  0D85  3010               	movlw	16
 17804  0D86                     u5685:	
 17805  0D86  36B6               	lsrf	??___ftdiv+2,f
 17806  0D87  0CB5               	rrf	??___ftdiv+1,f
 17807  0D88  0CB4               	rrf	??___ftdiv,f
 17808  0D89  0B89               	decfsz	9,f
 17809  0D8A  2D86               	goto	u5685
 17810  0D8B  0834               	movf	??___ftdiv,w
 17811  0D8C  00B7               	movwf	??___ftdiv+3
 17812  0D8D  0837               	movf	??___ftdiv+3,w
 17813  0D8E  06BD               	xorwf	___ftdiv@sign,f
 17814  0D8F  3080               	movlw	128
 17815  0D90  00B4               	movwf	??___ftdiv
 17816  0D91  0834               	movf	??___ftdiv,w
 17817  0D92  05BD               	andwf	___ftdiv@sign,f
 17818  0D93  17B2               	bsf	___ftdiv@f1+1,7
 17819  0D94  30FF               	movlw	255
 17820  0D95  05B1               	andwf	___ftdiv@f1,f
 17821  0D96  30FF               	movlw	255
 17822  0D97  05B2               	andwf	___ftdiv@f1+1,f
 17823  0D98  3000               	movlw	0
 17824  0D99  05B3               	andwf	___ftdiv@f1+2,f
 17825  0D9A  17AF               	bsf	___ftdiv@f2+1,7
 17826  0D9B  30FF               	movlw	255
 17827  0D9C  05AE               	andwf	___ftdiv@f2,f
 17828  0D9D  30FF               	movlw	255
 17829  0D9E  05AF               	andwf	___ftdiv@f2+1,f
 17830  0D9F  3000               	movlw	0
 17831  0DA0  05B0               	andwf	___ftdiv@f2+2,f
 17832  0DA1  3018               	movlw	24
 17833  0DA2  00B4               	movwf	??___ftdiv
 17834  0DA3  0834               	movf	??___ftdiv,w
 17835  0DA4  00B8               	movwf	___ftdiv@cntr
 17836  0DA5                     l6561:	
 17837  0DA5  3001               	movlw	1
 17838  0DA6                     u5695:	
 17839  0DA6  35B9               	lslf	___ftdiv@f3,f
 17840  0DA7  0DBA               	rlf	___ftdiv@f3+1,f
 17841  0DA8  0DBB               	rlf	___ftdiv@f3+2,f
 17842  0DA9  0B89               	decfsz	9,f
 17843  0DAA  2DA6               	goto	u5695
 17844  0DAB  0830               	movf	___ftdiv@f2+2,w
 17845  0DAC  0233               	subwf	___ftdiv@f1+2,w
 17846  0DAD  1D03               	skipz
 17847  0DAE  2DB5               	goto	u5705
 17848  0DAF  082F               	movf	___ftdiv@f2+1,w
 17849  0DB0  0232               	subwf	___ftdiv@f1+1,w
 17850  0DB1  1D03               	skipz
 17851  0DB2  2DB5               	goto	u5705
 17852  0DB3  082E               	movf	___ftdiv@f2,w
 17853  0DB4  0231               	subwf	___ftdiv@f1,w
 17854  0DB5                     u5705:	
 17855  0DB5  1C03               	skipc
 17856  0DB6  2DBE               	goto	l6569
 17857  0DB7  082E               	movf	___ftdiv@f2,w
 17858  0DB8  02B1               	subwf	___ftdiv@f1,f
 17859  0DB9  082F               	movf	___ftdiv@f2+1,w
 17860  0DBA  3BB2               	subwfb	___ftdiv@f1+1,f
 17861  0DBB  0830               	movf	___ftdiv@f2+2,w
 17862  0DBC  3BB3               	subwfb	___ftdiv@f1+2,f
 17863  0DBD  1439               	bsf	___ftdiv@f3,0
 17864  0DBE                     l6569:	
 17865  0DBE  3001               	movlw	1
 17866  0DBF                     u5715:	
 17867  0DBF  35B1               	lslf	___ftdiv@f1,f
 17868  0DC0  0DB2               	rlf	___ftdiv@f1+1,f
 17869  0DC1  0DB3               	rlf	___ftdiv@f1+2,f
 17870  0DC2  0B89               	decfsz	9,f
 17871  0DC3  2DBF               	goto	u5715
 17872  0DC4  3001               	movlw	1
 17873  0DC5  02B8               	subwf	___ftdiv@cntr,f
 17874  0DC6  1D03               	btfss	3,2
 17875  0DC7  2DA5               	goto	l6561
 17876  0DC8  0839               	movf	___ftdiv@f3,w
 17877  0DC9  00A0               	movwf	___ftpack@arg
 17878  0DCA  083A               	movf	___ftdiv@f3+1,w
 17879  0DCB  00A1               	movwf	___ftpack@arg+1
 17880  0DCC  083B               	movf	___ftdiv@f3+2,w
 17881  0DCD  00A2               	movwf	___ftpack@arg+2
 17882  0DCE  083C               	movf	___ftdiv@exp,w
 17883  0DCF  00B4               	movwf	??___ftdiv
 17884  0DD0  0834               	movf	??___ftdiv,w
 17885  0DD1  00A3               	movwf	___ftpack@exp
 17886  0DD2  083D               	movf	___ftdiv@sign,w
 17887  0DD3  00B5               	movwf	??___ftdiv+1
 17888  0DD4  0835               	movf	??___ftdiv+1,w
 17889  0DD5  00A4               	movwf	___ftpack@sign
 17890  0DD6  3194  24BF         	fcall	___ftpack
 17891  0DD8  0020               	movlb	0	; select bank0
 17892  0DD9  0820               	movf	?___ftpack,w
 17893  0DDA  00AE               	movwf	?___ftdiv
 17894  0DDB  0821               	movf	?___ftpack+1,w
 17895  0DDC  00AF               	movwf	?___ftdiv+1
 17896  0DDD  0822               	movf	?___ftpack+2,w
 17897  0DDE  00B0               	movwf	?___ftdiv+2
 17898  0DDF  0008               	return
 17899  0DE0                     __end_of___ftdiv:	
 17900                           
 17901                           	psect	text121
 17902  0388                     __ptext121:	
 17903 ;; *************** function ___ftadd *****************
 17904 ;; Defined at:
 17905 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 17906 ;; Parameters:    Size  Location     Type
 17907 ;;  f1              3   33[BANK0 ] float 
 17908 ;;  f2              3   36[BANK0 ] float 
 17909 ;; Auto vars:     Size  Location     Type
 17910 ;;  exp1            1   45[BANK0 ] unsigned char 
 17911 ;;  exp2            1   44[BANK0 ] unsigned char 
 17912 ;;  sign            1   43[BANK0 ] unsigned char 
 17913 ;; Return value:  Size  Location     Type
 17914 ;;                  3   33[BANK0 ] float 
 17915 ;; Registers used:
 17916 ;;		wreg, status,2, status,0, pclath, cstack
 17917 ;; Tracked objects:
 17918 ;;		On entry : 0/0
 17919 ;;		On exit  : 0/0
 17920 ;;		Unchanged: 0/0
 17921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17922 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17923 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17924 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17925 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17926 ;;Total ram usage:       13 bytes
 17927 ;; Hardware stack levels used:    1
 17928 ;; Hardware stack levels required when called:    6
 17929 ;; This function calls:
 17930 ;;		___ftpack
 17931 ;; This function is called by:
 17932 ;;		_getDimmerLights_PercentToValue
 17933 ;;		_getDimmerLights_ValueToPercent
 17934 ;; This function uses a non-reentrant model
 17935 ;;
 17936                           
 17937                           
 17938                           ;psect for function ___ftadd
 17939  0388                     ___ftadd:	
 17940                           
 17941                           ;incstack = 0
 17942                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 17943  0388  0020               	movlb	0	; select bank0
 17944  0389  0841               	movf	___ftadd@f1,w
 17945  038A  00C7               	movwf	??___ftadd
 17946  038B  0842               	movf	___ftadd@f1+1,w
 17947  038C  00C8               	movwf	??___ftadd+1
 17948  038D  0843               	movf	___ftadd@f1+2,w
 17949  038E  00C9               	movwf	??___ftadd+2
 17950  038F  1003               	clrc
 17951  0390  0D48               	rlf	??___ftadd+1,w
 17952  0391  0D49               	rlf	??___ftadd+2,w
 17953  0392  00CA               	movwf	??___ftadd+3
 17954  0393  084A               	movf	??___ftadd+3,w
 17955  0394  00CD               	movwf	___ftadd@exp1
 17956  0395  0844               	movf	___ftadd@f2,w
 17957  0396  00C7               	movwf	??___ftadd
 17958  0397  0845               	movf	___ftadd@f2+1,w
 17959  0398  00C8               	movwf	??___ftadd+1
 17960  0399  0846               	movf	___ftadd@f2+2,w
 17961  039A  00C9               	movwf	??___ftadd+2
 17962  039B  1003               	clrc
 17963  039C  0D48               	rlf	??___ftadd+1,w
 17964  039D  0D49               	rlf	??___ftadd+2,w
 17965  039E  00CA               	movwf	??___ftadd+3
 17966  039F  084A               	movf	??___ftadd+3,w
 17967  03A0  00CC               	movwf	___ftadd@exp2
 17968  03A1  084D               	movf	___ftadd@exp1,w
 17969  03A2  1903               	btfsc	3,2
 17970  03A3  2BB0               	goto	l6471
 17971  03A4  084C               	movf	___ftadd@exp2,w
 17972  03A5  024D               	subwf	___ftadd@exp1,w
 17973  03A6  1803               	skipnc
 17974  03A7  2BB7               	goto	l6475
 17975  03A8  034D               	decf	___ftadd@exp1,w
 17976  03A9  3AFF               	xorlw	255
 17977  03AA  074C               	addwf	___ftadd@exp2,w
 17978  03AB  00C7               	movwf	??___ftadd
 17979  03AC  3019               	movlw	25
 17980  03AD  0247               	subwf	??___ftadd,w
 17981  03AE  1C03               	skipc
 17982  03AF  2BB7               	goto	l6475
 17983  03B0                     l6471:	
 17984  03B0  0844               	movf	___ftadd@f2,w
 17985  03B1  00C1               	movwf	?___ftadd
 17986  03B2  0845               	movf	___ftadd@f2+1,w
 17987  03B3  00C2               	movwf	?___ftadd+1
 17988  03B4  0846               	movf	___ftadd@f2+2,w
 17989  03B5  00C3               	movwf	?___ftadd+2
 17990  03B6  0008               	return
 17991  03B7                     l6475:	
 17992  03B7  084C               	movf	___ftadd@exp2,w
 17993  03B8  1903               	btfsc	3,2
 17994  03B9  0008               	return
 17995  03BA  084D               	movf	___ftadd@exp1,w
 17996  03BB  024C               	subwf	___ftadd@exp2,w
 17997  03BC  1803               	skipnc
 17998  03BD  2BC6               	goto	l6481
 17999  03BE  034C               	decf	___ftadd@exp2,w
 18000  03BF  3AFF               	xorlw	255
 18001  03C0  074D               	addwf	___ftadd@exp1,w
 18002  03C1  00C7               	movwf	??___ftadd
 18003  03C2  3019               	movlw	25
 18004  03C3  0247               	subwf	??___ftadd,w
 18005  03C4  1803               	btfsc	3,0
 18006  03C5  0008               	return
 18007  03C6                     l6481:	
 18008  03C6  3006               	movlw	6
 18009  03C7  00C7               	movwf	??___ftadd
 18010  03C8  0847               	movf	??___ftadd,w
 18011  03C9  00CB               	movwf	___ftadd@sign
 18012  03CA  1BC3               	btfsc	___ftadd@f1+2,7
 18013  03CB  17CB               	bsf	___ftadd@sign,7
 18014  03CC  1BC6               	btfsc	___ftadd@f2+2,7
 18015  03CD  174B               	bsf	___ftadd@sign,6
 18016  03CE  17C2               	bsf	___ftadd@f1+1,7
 18017  03CF  30FF               	movlw	255
 18018  03D0  05C1               	andwf	___ftadd@f1,f
 18019  03D1  30FF               	movlw	255
 18020  03D2  05C2               	andwf	___ftadd@f1+1,f
 18021  03D3  3000               	movlw	0
 18022  03D4  05C3               	andwf	___ftadd@f1+2,f
 18023  03D5  17C5               	bsf	___ftadd@f2+1,7
 18024  03D6  30FF               	movlw	255
 18025  03D7  05C4               	andwf	___ftadd@f2,f
 18026  03D8  30FF               	movlw	255
 18027  03D9  05C5               	andwf	___ftadd@f2+1,f
 18028  03DA  3000               	movlw	0
 18029  03DB  05C6               	andwf	___ftadd@f2+2,f
 18030  03DC  084C               	movf	___ftadd@exp2,w
 18031  03DD  024D               	subwf	___ftadd@exp1,w
 18032  03DE  1803               	skipnc
 18033  03DF  2C02               	goto	l6503
 18034  03E0                     l6493:	
 18035  03E0  3001               	movlw	1
 18036  03E1                     u5515:	
 18037  03E1  35C4               	lslf	___ftadd@f2,f
 18038  03E2  0DC5               	rlf	___ftadd@f2+1,f
 18039  03E3  0DC6               	rlf	___ftadd@f2+2,f
 18040  03E4  0B89               	decfsz	9,f
 18041  03E5  2BE1               	goto	u5515
 18042  03E6  3001               	movlw	1
 18043  03E7  02CC               	subwf	___ftadd@exp2,f
 18044  03E8  084C               	movf	___ftadd@exp2,w
 18045  03E9  064D               	xorwf	___ftadd@exp1,w
 18046  03EA  1903               	skipnz
 18047  03EB  2BFD               	goto	l6501
 18048  03EC  3001               	movlw	1
 18049  03ED  02CB               	subwf	___ftadd@sign,f
 18050  03EE  084B               	movf	___ftadd@sign,w
 18051  03EF  3907               	andlw	7
 18052  03F0  1903               	btfsc	3,2
 18053  03F1  2BFD               	goto	l6501
 18054  03F2  2BE0               	goto	l6493
 18055  03F3                     l6499:	
 18056  03F3  3001               	movlw	1
 18057  03F4                     u5545:	
 18058  03F4  36C3               	lsrf	___ftadd@f1+2,f
 18059  03F5  0CC2               	rrf	___ftadd@f1+1,f
 18060  03F6  0CC1               	rrf	___ftadd@f1,f
 18061  03F7  0B89               	decfsz	9,f
 18062  03F8  2BF4               	goto	u5545
 18063  03F9  3001               	movlw	1
 18064  03FA  00C7               	movwf	??___ftadd
 18065  03FB  0847               	movf	??___ftadd,w
 18066  03FC  07CD               	addwf	___ftadd@exp1,f
 18067  03FD                     l6501:	
 18068  03FD  084D               	movf	___ftadd@exp1,w
 18069  03FE  064C               	xorwf	___ftadd@exp2,w
 18070  03FF  1903               	btfsc	3,2
 18071  0400  2C27               	goto	l3212
 18072  0401  2BF3               	goto	l6499
 18073  0402                     l6503:	
 18074  0402  084D               	movf	___ftadd@exp1,w
 18075  0403  024C               	subwf	___ftadd@exp2,w
 18076  0404  1803               	skipnc
 18077  0405  2C27               	goto	l3212
 18078  0406                     l6505:	
 18079  0406  3001               	movlw	1
 18080  0407                     u5575:	
 18081  0407  35C1               	lslf	___ftadd@f1,f
 18082  0408  0DC2               	rlf	___ftadd@f1+1,f
 18083  0409  0DC3               	rlf	___ftadd@f1+2,f
 18084  040A  0B89               	decfsz	9,f
 18085  040B  2C07               	goto	u5575
 18086  040C  3001               	movlw	1
 18087  040D  02CD               	subwf	___ftadd@exp1,f
 18088  040E  084C               	movf	___ftadd@exp2,w
 18089  040F  064D               	xorwf	___ftadd@exp1,w
 18090  0410  1903               	skipnz
 18091  0411  2C23               	goto	l6513
 18092  0412  3001               	movlw	1
 18093  0413  02CB               	subwf	___ftadd@sign,f
 18094  0414  084B               	movf	___ftadd@sign,w
 18095  0415  3907               	andlw	7
 18096  0416  1903               	btfsc	3,2
 18097  0417  2C23               	goto	l6513
 18098  0418  2C06               	goto	l6505
 18099  0419                     l6511:	
 18100  0419  3001               	movlw	1
 18101  041A                     u5605:	
 18102  041A  36C6               	lsrf	___ftadd@f2+2,f
 18103  041B  0CC5               	rrf	___ftadd@f2+1,f
 18104  041C  0CC4               	rrf	___ftadd@f2,f
 18105  041D  0B89               	decfsz	9,f
 18106  041E  2C1A               	goto	u5605
 18107  041F  3001               	movlw	1
 18108  0420  00C7               	movwf	??___ftadd
 18109  0421  0847               	movf	??___ftadd,w
 18110  0422  07CC               	addwf	___ftadd@exp2,f
 18111  0423                     l6513:	
 18112  0423  084D               	movf	___ftadd@exp1,w
 18113  0424  064C               	xorwf	___ftadd@exp2,w
 18114  0425  1D03               	skipz
 18115  0426  2C19               	goto	l6511
 18116  0427                     l3212:	
 18117  0427  1FCB               	btfss	___ftadd@sign,7
 18118  0428  2C39               	goto	l6517
 18119  0429  30FF               	movlw	255
 18120  042A  06C1               	xorwf	___ftadd@f1,f
 18121  042B  30FF               	movlw	255
 18122  042C  06C2               	xorwf	___ftadd@f1+1,f
 18123  042D  30FF               	movlw	255
 18124  042E  06C3               	xorwf	___ftadd@f1+2,f
 18125  042F  3001               	movlw	1
 18126  0430  07C1               	addwf	___ftadd@f1,f
 18127  0431  3000               	movlw	0
 18128  0432  1803               	skipnc
 18129  0433  3001               	movlw	1
 18130  0434  07C2               	addwf	___ftadd@f1+1,f
 18131  0435  3000               	movlw	0
 18132  0436  1803               	skipnc
 18133  0437  3001               	movlw	1
 18134  0438  07C3               	addwf	___ftadd@f1+2,f
 18135  0439                     l6517:	
 18136  0439  1F4B               	btfss	___ftadd@sign,6
 18137  043A  2C4B               	goto	l6521
 18138  043B  30FF               	movlw	255
 18139  043C  06C4               	xorwf	___ftadd@f2,f
 18140  043D  30FF               	movlw	255
 18141  043E  06C5               	xorwf	___ftadd@f2+1,f
 18142  043F  30FF               	movlw	255
 18143  0440  06C6               	xorwf	___ftadd@f2+2,f
 18144  0441  3001               	movlw	1
 18145  0442  07C4               	addwf	___ftadd@f2,f
 18146  0443  3000               	movlw	0
 18147  0444  1803               	skipnc
 18148  0445  3001               	movlw	1
 18149  0446  07C5               	addwf	___ftadd@f2+1,f
 18150  0447  3000               	movlw	0
 18151  0448  1803               	skipnc
 18152  0449  3001               	movlw	1
 18153  044A  07C6               	addwf	___ftadd@f2+2,f
 18154  044B                     l6521:	
 18155  044B  01CB               	clrf	___ftadd@sign
 18156  044C  0841               	movf	___ftadd@f1,w
 18157  044D  07C4               	addwf	___ftadd@f2,f
 18158  044E  0842               	movf	___ftadd@f1+1,w
 18159  044F  3DC5               	addwfc	___ftadd@f2+1,f
 18160  0450  0843               	movf	___ftadd@f1+2,w
 18161  0451  3DC6               	addwfc	___ftadd@f2+2,f
 18162  0452  1FC6               	btfss	___ftadd@f2+2,7
 18163  0453  2C66               	goto	l6531
 18164  0454  30FF               	movlw	255
 18165  0455  06C4               	xorwf	___ftadd@f2,f
 18166  0456  30FF               	movlw	255
 18167  0457  06C5               	xorwf	___ftadd@f2+1,f
 18168  0458  30FF               	movlw	255
 18169  0459  06C6               	xorwf	___ftadd@f2+2,f
 18170  045A  3001               	movlw	1
 18171  045B  07C4               	addwf	___ftadd@f2,f
 18172  045C  3000               	movlw	0
 18173  045D  1803               	skipnc
 18174  045E  3001               	movlw	1
 18175  045F  07C5               	addwf	___ftadd@f2+1,f
 18176  0460  3000               	movlw	0
 18177  0461  1803               	skipnc
 18178  0462  3001               	movlw	1
 18179  0463  07C6               	addwf	___ftadd@f2+2,f
 18180  0464  01CB               	clrf	___ftadd@sign
 18181  0465  0ACB               	incf	___ftadd@sign,f
 18182  0466                     l6531:	
 18183  0466  0844               	movf	___ftadd@f2,w
 18184  0467  00A0               	movwf	___ftpack@arg
 18185  0468  0845               	movf	___ftadd@f2+1,w
 18186  0469  00A1               	movwf	___ftpack@arg+1
 18187  046A  0846               	movf	___ftadd@f2+2,w
 18188  046B  00A2               	movwf	___ftpack@arg+2
 18189  046C  084D               	movf	___ftadd@exp1,w
 18190  046D  00C7               	movwf	??___ftadd
 18191  046E  0847               	movf	??___ftadd,w
 18192  046F  00A3               	movwf	___ftpack@exp
 18193  0470  084B               	movf	___ftadd@sign,w
 18194  0471  00C8               	movwf	??___ftadd+1
 18195  0472  0848               	movf	??___ftadd+1,w
 18196  0473  00A4               	movwf	___ftpack@sign
 18197  0474  3194  24BF         	fcall	___ftpack
 18198  0476  0020               	movlb	0	; select bank0
 18199  0477  0820               	movf	?___ftpack,w
 18200  0478  00C1               	movwf	?___ftadd
 18201  0479  0821               	movf	?___ftpack+1,w
 18202  047A  00C2               	movwf	?___ftadd+1
 18203  047B  0822               	movf	?___ftpack+2,w
 18204  047C  00C3               	movwf	?___ftadd+2
 18205  047D  0008               	return
 18206  047E                     __end_of___ftadd:	
 18207                           
 18208                           	psect	text122
 18209  1E59                     __ptext122:	
 18210 ;; *************** function ___awtoft *****************
 18211 ;; Defined at:
 18212 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 18213 ;; Parameters:    Size  Location     Type
 18214 ;;  c               2    8[BANK0 ] int 
 18215 ;; Auto vars:     Size  Location     Type
 18216 ;;  sign            1   13[BANK0 ] unsigned char 
 18217 ;; Return value:  Size  Location     Type
 18218 ;;                  3    8[BANK0 ] float 
 18219 ;; Registers used:
 18220 ;;		wreg, status,2, status,0, pclath, cstack
 18221 ;; Tracked objects:
 18222 ;;		On entry : 0/0
 18223 ;;		On exit  : 0/0
 18224 ;;		Unchanged: 0/0
 18225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18226 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18227 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18228 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18229 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18230 ;;Total ram usage:        6 bytes
 18231 ;; Hardware stack levels used:    1
 18232 ;; Hardware stack levels required when called:    6
 18233 ;; This function calls:
 18234 ;;		___ftpack
 18235 ;; This function is called by:
 18236 ;;		_getDimmerLights_PercentToValue
 18237 ;;		_getDimmerLights_ValueToPercent
 18238 ;; This function uses a non-reentrant model
 18239 ;;
 18240                           
 18241                           
 18242                           ;psect for function ___awtoft
 18243  1E59                     ___awtoft:	
 18244                           
 18245                           ;incstack = 0
 18246                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 18247  1E59  0020               	movlb	0	; select bank0
 18248  1E5A  01AD               	clrf	___awtoft@sign
 18249  1E5B  1FA9               	btfss	___awtoft@c+1,7
 18250  1E5C  2E64               	goto	l6459
 18251  1E5D  09A8               	comf	___awtoft@c,f
 18252  1E5E  09A9               	comf	___awtoft@c+1,f
 18253  1E5F  0AA8               	incf	___awtoft@c,f
 18254  1E60  1903               	skipnz
 18255  1E61  0AA9               	incf	___awtoft@c+1,f
 18256  1E62  01AD               	clrf	___awtoft@sign
 18257  1E63  0AAD               	incf	___awtoft@sign,f
 18258  1E64                     l6459:	
 18259  1E64  0828               	movf	___awtoft@c,w
 18260  1E65  00A0               	movwf	___ftpack@arg
 18261  1E66  0829               	movf	___awtoft@c+1,w
 18262  1E67  00A1               	movwf	___ftpack@arg+1
 18263  1E68  01A2               	clrf	___ftpack@arg+2
 18264  1E69  308E               	movlw	142
 18265  1E6A  00AB               	movwf	??___awtoft
 18266  1E6B  082B               	movf	??___awtoft,w
 18267  1E6C  00A3               	movwf	___ftpack@exp
 18268  1E6D  082D               	movf	___awtoft@sign,w
 18269  1E6E  00AC               	movwf	??___awtoft+1
 18270  1E6F  082C               	movf	??___awtoft+1,w
 18271  1E70  00A4               	movwf	___ftpack@sign
 18272  1E71  3194  24BF         	fcall	___ftpack
 18273  1E73  0020               	movlb	0	; select bank0
 18274  1E74  0820               	movf	?___ftpack,w
 18275  1E75  00A8               	movwf	?___awtoft
 18276  1E76  0821               	movf	?___ftpack+1,w
 18277  1E77  00A9               	movwf	?___awtoft+1
 18278  1E78  0822               	movf	?___ftpack+2,w
 18279  1E79  00AA               	movwf	?___awtoft+2
 18280  1E7A  0008               	return
 18281  1E7B                     __end_of___awtoft:	
 18282                           
 18283                           	psect	text123
 18284  14BF                     __ptext123:	
 18285 ;; *************** function ___ftpack *****************
 18286 ;; Defined at:
 18287 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 18288 ;; Parameters:    Size  Location     Type
 18289 ;;  arg             3    0[BANK0 ] unsigned um
 18290 ;;  exp             1    3[BANK0 ] unsigned char 
 18291 ;;  sign            1    4[BANK0 ] unsigned char 
 18292 ;; Auto vars:     Size  Location     Type
 18293 ;;		None
 18294 ;; Return value:  Size  Location     Type
 18295 ;;                  3    0[BANK0 ] float 
 18296 ;; Registers used:
 18297 ;;		wreg, status,2, status,0
 18298 ;; Tracked objects:
 18299 ;;		On entry : 0/0
 18300 ;;		On exit  : 0/0
 18301 ;;		Unchanged: 0/0
 18302 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18303 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18305 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18306 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18307 ;;Total ram usage:        8 bytes
 18308 ;; Hardware stack levels used:    1
 18309 ;; Hardware stack levels required when called:    5
 18310 ;; This function calls:
 18311 ;;		Nothing
 18312 ;; This function is called by:
 18313 ;;		___awtoft
 18314 ;;		___ftadd
 18315 ;;		___ftdiv
 18316 ;;		___ftmul
 18317 ;; This function uses a non-reentrant model
 18318 ;;
 18319                           
 18320                           
 18321                           ;psect for function ___ftpack
 18322  14BF                     ___ftpack:	
 18323                           
 18324                           ;incstack = 0
 18325                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 18326  14BF  0020               	movlb	0	; select bank0
 18327  14C0  0823               	movf	___ftpack@exp,w
 18328  14C1  1903               	btfsc	3,2
 18329  14C2  2CC8               	goto	l6319
 18330  14C3  0822               	movf	___ftpack@arg+2,w
 18331  14C4  0421               	iorwf	___ftpack@arg+1,w
 18332  14C5  0420               	iorwf	___ftpack@arg,w
 18333  14C6  1D03               	skipz
 18334  14C7  2CD9               	goto	l6325
 18335  14C8                     l6319:	
 18336  14C8  3000               	movlw	0
 18337  14C9  00A0               	movwf	?___ftpack
 18338  14CA  3000               	movlw	0
 18339  14CB  00A1               	movwf	?___ftpack+1
 18340  14CC  3000               	movlw	0
 18341  14CD  00A2               	movwf	?___ftpack+2
 18342  14CE  0008               	return
 18343  14CF                     l6323:	
 18344  14CF  3001               	movlw	1
 18345  14D0  00A5               	movwf	??___ftpack
 18346  14D1  0825               	movf	??___ftpack,w
 18347  14D2  07A3               	addwf	___ftpack@exp,f
 18348  14D3  3001               	movlw	1
 18349  14D4                     u5125:	
 18350  14D4  36A2               	lsrf	___ftpack@arg+2,f
 18351  14D5  0CA1               	rrf	___ftpack@arg+1,f
 18352  14D6  0CA0               	rrf	___ftpack@arg,f
 18353  14D7  0B89               	decfsz	9,f
 18354  14D8  2CD4               	goto	u5125
 18355  14D9                     l6325:	
 18356  14D9  30FE               	movlw	254
 18357  14DA  0522               	andwf	___ftpack@arg+2,w
 18358  14DB  1903               	btfsc	3,2
 18359  14DC  2CF2               	goto	l3183
 18360  14DD  2CCF               	goto	l6323
 18361  14DE                     l6327:	
 18362  14DE  3001               	movlw	1
 18363  14DF  00A5               	movwf	??___ftpack
 18364  14E0  0825               	movf	??___ftpack,w
 18365  14E1  07A3               	addwf	___ftpack@exp,f
 18366  14E2  3001               	movlw	1
 18367  14E3  07A0               	addwf	___ftpack@arg,f
 18368  14E4  3000               	movlw	0
 18369  14E5  1803               	skipnc
 18370  14E6  3001               	movlw	1
 18371  14E7  07A1               	addwf	___ftpack@arg+1,f
 18372  14E8  3000               	movlw	0
 18373  14E9  1803               	skipnc
 18374  14EA  3001               	movlw	1
 18375  14EB  07A2               	addwf	___ftpack@arg+2,f
 18376  14EC  3001               	movlw	1
 18377  14ED                     u5145:	
 18378  14ED  36A2               	lsrf	___ftpack@arg+2,f
 18379  14EE  0CA1               	rrf	___ftpack@arg+1,f
 18380  14EF  0CA0               	rrf	___ftpack@arg,f
 18381  14F0  0B89               	decfsz	9,f
 18382  14F1  2CED               	goto	u5145
 18383  14F2                     l3183:	
 18384  14F2  30FF               	movlw	255
 18385  14F3  0522               	andwf	___ftpack@arg+2,w
 18386  14F4  1903               	btfsc	3,2
 18387  14F5  2CFF               	goto	l6335
 18388  14F6  2CDE               	goto	l6327
 18389  14F7                     l6333:	
 18390  14F7  3001               	movlw	1
 18391  14F8  02A3               	subwf	___ftpack@exp,f
 18392  14F9  3001               	movlw	1
 18393  14FA                     u5165:	
 18394  14FA  35A0               	lslf	___ftpack@arg,f
 18395  14FB  0DA1               	rlf	___ftpack@arg+1,f
 18396  14FC  0DA2               	rlf	___ftpack@arg+2,f
 18397  14FD  0B89               	decfsz	9,f
 18398  14FE  2CFA               	goto	u5165
 18399  14FF                     l6335:	
 18400  14FF  1FA1               	btfss	___ftpack@arg+1,7
 18401  1500  2CF7               	goto	l6333
 18402  1501  1823               	btfsc	___ftpack@exp,0
 18403  1502  2D09               	goto	l3189
 18404  1503  30FF               	movlw	255
 18405  1504  05A0               	andwf	___ftpack@arg,f
 18406  1505  307F               	movlw	127
 18407  1506  05A1               	andwf	___ftpack@arg+1,f
 18408  1507  30FF               	movlw	255
 18409  1508  05A2               	andwf	___ftpack@arg+2,f
 18410  1509                     l3189:	
 18411  1509  1003               	clrc
 18412  150A  0CA3               	rrf	___ftpack@exp,f
 18413  150B  0823               	movf	___ftpack@exp,w
 18414  150C  00A5               	movwf	??___ftpack
 18415  150D  01A6               	clrf	??___ftpack+1
 18416  150E  01A7               	clrf	??___ftpack+2
 18417  150F  3010               	movlw	16
 18418  1510                     u5195:	
 18419  1510  35A5               	lslf	??___ftpack,f
 18420  1511  0DA6               	rlf	??___ftpack+1,f
 18421  1512  0DA7               	rlf	??___ftpack+2,f
 18422  1513  0B89               	decfsz	9,f
 18423  1514  2D10               	goto	u5195
 18424  1515  0825               	movf	??___ftpack,w
 18425  1516  04A0               	iorwf	___ftpack@arg,f
 18426  1517  0826               	movf	??___ftpack+1,w
 18427  1518  04A1               	iorwf	___ftpack@arg+1,f
 18428  1519  0827               	movf	??___ftpack+2,w
 18429  151A  04A2               	iorwf	___ftpack@arg+2,f
 18430  151B  0824               	movf	___ftpack@sign,w
 18431  151C  1903               	btfsc	3,2
 18432  151D  0008               	return
 18433  151E  17A2               	bsf	___ftpack@arg+2,7
 18434  151F  0008               	return
 18435  1520                     __end_of___ftpack:	
 18436                           
 18437                           	psect	text124
 18438  190C                     __ptext124:	
 18439 ;; *************** function _DelayOff_Main *****************
 18440 ;; Defined at:
 18441 ;;		line 41 in file "../src/DelayOff_B1.c"
 18442 ;; Parameters:    Size  Location     Type
 18443 ;;		None
 18444 ;; Auto vars:     Size  Location     Type
 18445 ;;		None
 18446 ;; Return value:  Size  Location     Type
 18447 ;;		None               void
 18448 ;; Registers used:
 18449 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18450 ;; Tracked objects:
 18451 ;;		On entry : 0/0
 18452 ;;		On exit  : 0/0
 18453 ;;		Unchanged: 0/0
 18454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18458 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18459 ;;Total ram usage:        0 bytes
 18460 ;; Hardware stack levels used:    1
 18461 ;; Hardware stack levels required when called:    9
 18462 ;; This function calls:
 18463 ;;		_DlyOff_Main
 18464 ;; This function is called by:
 18465 ;;		_main
 18466 ;; This function uses a non-reentrant model
 18467 ;;
 18468                           
 18469                           
 18470                           ;psect for function _DelayOff_Main
 18471  190C                     _DelayOff_Main:	
 18472                           
 18473                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 18474                           
 18475                           ;incstack = 0
 18476                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18477  190C  3001               	movlw	1
 18478  190D  3188  20CD  3199   	fcall	_DlyOff_Main
 18479                           
 18480                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 18481  1910  3002               	movlw	2
 18482  1911  3188  20CD         	fcall	_DlyOff_Main
 18483  1913  0008               	return
 18484  1914                     __end_of_DelayOff_Main:	
 18485                           
 18486                           	psect	text125
 18487  08CD                     __ptext125:	
 18488 ;; *************** function _DlyOff_Main *****************
 18489 ;; Defined at:
 18490 ;;		line 61 in file "../src/DelayOff_B1.c"
 18491 ;; Parameters:    Size  Location     Type
 18492 ;;  sw              1    wreg     unsigned char 
 18493 ;; Auto vars:     Size  Location     Type
 18494 ;;  sw              1   71[BANK0 ] unsigned char 
 18495 ;; Return value:  Size  Location     Type
 18496 ;;		None               void
 18497 ;; Registers used:
 18498 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18499 ;; Tracked objects:
 18500 ;;		On entry : 0/0
 18501 ;;		On exit  : 0/0
 18502 ;;		Unchanged: 0/0
 18503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18505 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18506 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18507 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18508 ;;Total ram usage:        3 bytes
 18509 ;; Hardware stack levels used:    1
 18510 ;; Hardware stack levels required when called:    8
 18511 ;; This function calls:
 18512 ;;		_DelayOffPointSelect
 18513 ;;		_getDimmerLights_Status
 18514 ;;		_setDimmerLights_SwOff
 18515 ;;		_setDimmerLights_SwOn
 18516 ;;		_setProductData
 18517 ;; This function is called by:
 18518 ;;		_DelayOff_Main
 18519 ;; This function uses a non-reentrant model
 18520 ;;
 18521                           
 18522                           
 18523                           ;psect for function _DlyOff_Main
 18524  08CD                     _DlyOff_Main:	
 18525                           
 18526                           ;incstack = 0
 18527                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18528                           ;DlyOff_Main@sw stored from wreg
 18529  08CD  0020               	movlb	0	; select bank0
 18530  08CE  00E7               	movwf	DlyOff_Main@sw
 18531                           
 18532                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 18533  08CF  0867               	movf	DlyOff_Main@sw,w
 18534  08D0  319B  23B4  3188   	fcall	_DelayOffPointSelect
 18535                           
 18536                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 18537  08D3  0021               	movlb	1	; select bank1
 18538  08D4  0855               	movf	_DelayOff^(0+128),w
 18539  08D5  0086               	movwf	6
 18540  08D6  3001               	movlw	1	; select bank2/3
 18541  08D7  0087               	movwf	7
 18542  08D8  1C81               	btfss	1,1
 18543  08D9  0008               	return
 18544                           
 18545                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 18546  08DA  0855               	movf	_DelayOff^(0+128),w
 18547  08DB  3E02               	addlw	2
 18548  08DC  0086               	movwf	6
 18549  08DD  3001               	movlw	1	; select bank2/3
 18550  08DE  0087               	movwf	7
 18551  08DF  3001               	movlw	1
 18552  08E0  0781               	addwf	1,f
 18553  08E1  3141               	addfsr 1,1
 18554  08E2  1803               	skipnc
 18555  08E3  0A81               	incf	1,f
 18556                           
 18557                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 60000/20) {
 18558  08E4  0855               	movf	_DelayOff^(0+128),w
 18559  08E5  3E02               	addlw	2
 18560  08E6  0086               	movwf	6
 18561  08E7  3001               	movlw	1	; select bank2/3
 18562  08E8  0087               	movwf	7
 18563  08E9  3F40               	moviw [0]fsr1
 18564  08EA  0020               	movlb	0	; select bank0
 18565  08EB  00E5               	movwf	??_DlyOff_Main
 18566  08EC  3F41               	moviw [1]fsr1
 18567  08ED  00E6               	movwf	??_DlyOff_Main+1
 18568  08EE  300B               	movlw	11
 18569  08EF  0266               	subwf	??_DlyOff_Main+1,w
 18570  08F0  30B8               	movlw	184
 18571  08F1  1903               	skipnz
 18572  08F2  0265               	subwf	??_DlyOff_Main,w
 18573  08F3  1C03               	skipc
 18574  08F4  0008               	return
 18575                           
 18576                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 18577  08F5  0021               	movlb	1	; select bank1
 18578  08F6  0855               	movf	_DelayOff^(0+128),w
 18579  08F7  3E02               	addlw	2
 18580  08F8  0086               	movwf	6
 18581  08F9  3001               	movlw	1	; select bank2/3
 18582  08FA  0087               	movwf	7
 18583  08FB  3000               	movlw	0
 18584  08FC  3FC0               	movwi [0]fsr1
 18585  08FD  3FC1               	movwi [1]fsr1
 18586                           
 18587                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 18588  08FE  3001               	movlw	1
 18589  08FF  0020               	movlb	0	; select bank0
 18590  0900  00E5               	movwf	??_DlyOff_Main
 18591  0901  0021               	movlb	1	; select bank1
 18592  0902  0855               	movf	_DelayOff^(0+128),w
 18593  0903  3E04               	addlw	4
 18594  0904  0086               	movwf	6
 18595  0905  3001               	movlw	1	; select bank2/3
 18596  0906  0087               	movwf	7
 18597  0907  0020               	movlb	0	; select bank0
 18598  0908  0865               	movf	??_DlyOff_Main,w
 18599  0909  0781               	addwf	1,f
 18600                           
 18601                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 18602  090A  0021               	movlb	1	; select bank1
 18603  090B  0855               	movf	_DelayOff^(0+128),w
 18604  090C  3E04               	addlw	4
 18605  090D  0086               	movwf	6
 18606  090E  3001               	movlw	1	; select bank2/3
 18607  090F  0087               	movwf	7
 18608  0910  0A55               	incf	_DelayOff^(0+128),w
 18609  0911  0084               	movwf	4
 18610  0912  3001               	movlw	1	; select bank2/3
 18611  0913  0085               	movwf	5
 18612  0914  0800               	movf	0,w
 18613  0915  0201               	subwf	1,w
 18614  0916  1C03               	skipc
 18615  0917  0008               	return
 18616                           
 18617                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 18618  0918  0855               	movf	_DelayOff^(0+128),w
 18619  0919  3E04               	addlw	4
 18620  091A  0086               	movwf	6
 18621  091B  3001               	movlw	1	; select bank2/3
 18622  091C  0087               	movwf	7
 18623  091D  0181               	clrf	1
 18624                           
 18625                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 18626  091E  0855               	movf	_DelayOff^(0+128),w
 18627  091F  0086               	movwf	6
 18628  0920  3001               	movlw	1	; select bank2/3
 18629  0921  0087               	movwf	7
 18630  0922  1081               	bcf	1,1
 18631                           
 18632                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 18633  0923  0020               	movlb	0	; select bank0
 18634  0924  0867               	movf	DlyOff_Main@sw,w
 18635  0925  319A  2202  3188   	fcall	_getDimmerLights_Status
 18636  0928  3A01               	xorlw	1
 18637  0929  1D03               	skipz
 18638  092A  2935               	goto	l581
 18639                           
 18640                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 18641  092B  0020               	movlb	0	; select bank0
 18642  092C  0867               	movf	DlyOff_Main@sw,w
 18643  092D  3188  2002  3188   	fcall	_setDimmerLights_SwOn
 18644                           
 18645                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 18646  0930  0020               	movlb	0	; select bank0
 18647  0931  0867               	movf	DlyOff_Main@sw,w
 18648  0932  3190  20CB  3188   	fcall	_setDimmerLights_SwOff
 18649  0935                     l581:	
 18650                           
 18651                           ;DelayOff_B1.c: 78: }
 18652                           ;DelayOff_B1.c: 80: setProductData(26 + sw, 0);
 18653  0935  0020               	movlb	0	; select bank0
 18654  0936  01E2               	clrf	setProductData@value
 18655  0937  0867               	movf	DlyOff_Main@sw,w
 18656  0938  3E1A               	addlw	26
 18657  0939  3199  2186         	fcall	_setProductData
 18658  093B  0008               	return
 18659  093C                     __end_of_DlyOff_Main:	
 18660                           
 18661                           	psect	text126
 18662  1986                     __ptext126:	
 18663 ;; *************** function _setProductData *****************
 18664 ;; Defined at:
 18665 ;;		line 645 in file "../src/main_B1.c"
 18666 ;; Parameters:    Size  Location     Type
 18667 ;;  address         1    wreg     unsigned char 
 18668 ;;  value           1   66[BANK0 ] unsigned char 
 18669 ;; Auto vars:     Size  Location     Type
 18670 ;;  address         1   68[BANK0 ] unsigned char 
 18671 ;; Return value:  Size  Location     Type
 18672 ;;		None               void
 18673 ;; Registers used:
 18674 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18675 ;; Tracked objects:
 18676 ;;		On entry : 0/0
 18677 ;;		On exit  : 0/0
 18678 ;;		Unchanged: 0/0
 18679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18680 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18681 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18682 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18683 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18684 ;;Total ram usage:        3 bytes
 18685 ;; Hardware stack levels used:    1
 18686 ;; Hardware stack levels required when called:    5
 18687 ;; This function calls:
 18688 ;;		Nothing
 18689 ;; This function is called by:
 18690 ;;		_DlyOff_Main
 18691 ;;		_setDelayOff_GO
 18692 ;;		_setDimmerLights_OnOff
 18693 ;;		_setDimmerLights_Dimming
 18694 ;;		_setTemp_Main
 18695 ;;		_setLog_Code
 18696 ;;		_setControl_Lights_Table
 18697 ;;		_setRFSW_AdjControl
 18698 ;;		_setRF_DimmerLights
 18699 ;; This function uses a non-reentrant model
 18700 ;;
 18701                           
 18702                           
 18703                           ;psect for function _setProductData
 18704  1986                     _setProductData:	
 18705                           
 18706                           ;incstack = 0
 18707                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 18708                           ;setProductData@address stored from wreg
 18709  1986  0020               	movlb	0	; select bank0
 18710  1987  00E4               	movwf	setProductData@address
 18711                           
 18712                           ;main_B1.c: 646: _product.Data[address] = value;
 18713  1988  0862               	movf	setProductData@value,w
 18714  1989  00E3               	movwf	??_setProductData
 18715  198A  0864               	movf	setProductData@address,w
 18716  198B  3E45               	addlw	__product& (0+255)
 18717  198C  0086               	movwf	6
 18718  198D  3002               	movlw	2	; select bank4/5
 18719  198E  0087               	movwf	7
 18720  198F  0863               	movf	??_setProductData,w
 18721  1990  0081               	movwf	1
 18722  1991  0008               	return
 18723  1992                     __end_of_setProductData:	
 18724                           
 18725                           	psect	text127
 18726  0802                     __ptext127:	
 18727 ;; *************** function _setDimmerLights_SwOn *****************
 18728 ;; Defined at:
 18729 ;;		line 688 in file "../src/Dimmer_B1.c"
 18730 ;; Parameters:    Size  Location     Type
 18731 ;;  sw              1    wreg     unsigned char 
 18732 ;; Auto vars:     Size  Location     Type
 18733 ;;  sw              1   17[BANK0 ] unsigned char 
 18734 ;;  idle            1   16[BANK0 ] unsigned char 
 18735 ;; Return value:  Size  Location     Type
 18736 ;;		None               void
 18737 ;; Registers used:
 18738 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18739 ;; Tracked objects:
 18740 ;;		On entry : 0/0
 18741 ;;		On exit  : 0/0
 18742 ;;		Unchanged: 0/0
 18743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18745 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18746 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18747 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18748 ;;Total ram usage:        5 bytes
 18749 ;; Hardware stack levels used:    1
 18750 ;; Hardware stack levels required when called:    7
 18751 ;; This function calls:
 18752 ;;		_DimmerLights_SelectPointer
 18753 ;;		_setBuz
 18754 ;; This function is called by:
 18755 ;;		_DlyOff_Main
 18756 ;;		_setControl_Lights_Table
 18757 ;;		_setRFSW_Control
 18758 ;;		_setRFSW_AdjControl
 18759 ;;		_setSw_Main
 18760 ;; This function uses a non-reentrant model
 18761 ;;
 18762                           
 18763                           
 18764                           ;psect for function _setDimmerLights_SwOn
 18765  0802                     _setDimmerLights_SwOn:	
 18766                           
 18767                           ;incstack = 0
 18768                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18769                           ;setDimmerLights_SwOn@sw stored from wreg
 18770  0802  0020               	movlb	0	; select bank0
 18771  0803  00B1               	movwf	setDimmerLights_SwOn@sw
 18772                           
 18773                           ;Dimmer_B1.c: 689: char idle = 0;
 18774  0804  01B0               	clrf	setDimmerLights_SwOn@idle
 18775                           
 18776                           ;Dimmer_B1.c: 691: if (idle == 0) {
 18777  0805  08B0               	movf	setDimmerLights_SwOn@idle,f
 18778  0806  1D03               	skipz
 18779  0807  282C               	goto	l6737
 18780                           
 18781                           ;Dimmer_B1.c: 692: if (sw == 1) {
 18782  0808  0831               	movf	setDimmerLights_SwOn@sw,w
 18783  0809  3A01               	xorlw	1
 18784  080A  1D03               	skipz
 18785  080B  2819               	goto	l6727
 18786                           
 18787                           ;Dimmer_B1.c: 693: idle = DimmerLights2.DimmingTrigger == 1 || DimmerIntr2.Dimming_Sw ==
      +                           1 ? 1 : 0;
 18788  080C  01AE               	clrf	_setDimmerLights_SwOn$2340
 18789  080D  0AAE               	incf	_setDimmerLights_SwOn$2340,f
 18790  080E  0023               	movlb	3	; select bank3
 18791  080F  1A50               	btfsc	_DimmerLights2^(0+384),4
 18792  0810  2816               	goto	l6725
 18793  0811  0021               	movlb	1	; select bank1
 18794  0812  1A47               	btfsc	_DimmerIntr2^(0+128),4
 18795  0813  2816               	goto	l6725
 18796  0814  0020               	movlb	0	; select bank0
 18797  0815  01AE               	clrf	_setDimmerLights_SwOn$2340
 18798  0816                     l6725:	
 18799  0816  0020               	movlb	0	; select bank0
 18800  0817  082E               	movf	_setDimmerLights_SwOn$2340,w
 18801  0818  2829               	goto	L12
 18802  0819                     l6727:	
 18803                           ;Dimmer_B1.c: 694: } else if (sw == 2) {
 18804                           
 18805  0819  0831               	movf	setDimmerLights_SwOn@sw,w
 18806  081A  3A02               	xorlw	2
 18807  081B  1D03               	skipz
 18808  081C  282C               	goto	l6737
 18809                           
 18810                           ;Dimmer_B1.c: 695: idle = DimmerLights1.DimmingTrigger == 1 || DimmerIntr1.Dimming_Sw ==
      +                           1 ? 1 : 0;
 18811  081D  01AF               	clrf	_setDimmerLights_SwOn$2349
 18812  081E  0AAF               	incf	_setDimmerLights_SwOn$2349,f
 18813  081F  0022               	movlb	2	; select bank2
 18814  0820  1A67               	btfsc	_DimmerLights1^(0+256),4
 18815  0821  2827               	goto	l6735
 18816  0822  0021               	movlb	1	; select bank1
 18817  0823  1A3B               	btfsc	_DimmerIntr1^(0+128),4
 18818  0824  2827               	goto	l6735
 18819  0825  0020               	movlb	0	; select bank0
 18820  0826  01AF               	clrf	_setDimmerLights_SwOn$2349
 18821  0827                     l6735:	
 18822  0827  0020               	movlb	0	; select bank0
 18823  0828  082F               	movf	_setDimmerLights_SwOn$2349,w
 18824  0829                     L12:	
 18825  0829  00AD               	movwf	??_setDimmerLights_SwOn
 18826  082A  082D               	movf	??_setDimmerLights_SwOn,w
 18827  082B  00B0               	movwf	setDimmerLights_SwOn@idle
 18828  082C                     l6737:	
 18829                           
 18830                           ;Dimmer_B1.c: 696: }
 18831                           ;Dimmer_B1.c: 697: }
 18832                           ;Dimmer_B1.c: 714: DimmerLights_SelectPointer(sw);
 18833  082C  0831               	movf	setDimmerLights_SwOn@sw,w
 18834  082D  319B  23CB  3188   	fcall	_DimmerLights_SelectPointer
 18835                           
 18836                           ;Dimmer_B1.c: 715: if (idle == 0) {
 18837  0830  0020               	movlb	0	; select bank0
 18838  0831  08B0               	movf	setDimmerLights_SwOn@idle,f
 18839  0832  1D03               	skipz
 18840  0833  0008               	return
 18841                           
 18842                           ;Dimmer_B1.c: 716: DimmerLights->SwFlag = 1;
 18843  0834  0021               	movlb	1	; select bank1
 18844  0835  0856               	movf	_DimmerLights^(0+128),w
 18845  0836  0086               	movwf	6
 18846  0837  3001               	movlw	1	; select bank2/3
 18847  0838  0087               	movwf	7
 18848  0839  1401               	bsf	1,0
 18849                           
 18850                           ;Dimmer_B1.c: 717: if (DimmerLights->Status == 0) {
 18851  083A  0A56               	incf	_DimmerLights^(0+128),w
 18852  083B  0086               	movwf	6
 18853  083C  3001               	movlw	1	; select bank2/3
 18854  083D  0087               	movwf	7
 18855  083E  1801               	btfsc	1,0
 18856  083F  2850               	goto	l6745
 18857                           
 18858                           ;Dimmer_B1.c: 718: DimmerLights->Status = 1;
 18859  0840  0A56               	incf	_DimmerLights^(0+128),w
 18860  0841  0086               	movwf	6
 18861  0842  3001               	movlw	1	; select bank2/3
 18862  0843  0087               	movwf	7
 18863  0844  1401               	bsf	1,0
 18864                           
 18865                           ;Dimmer_B1.c: 719: DimmerLights->Trigger = 1;
 18866  0845  0856               	movf	_DimmerLights^(0+128),w
 18867  0846  0086               	movwf	6
 18868  0847  3001               	movlw	1	; select bank2/3
 18869  0848  0087               	movwf	7
 18870  0849  1481               	bsf	1,1
 18871                           
 18872                           ;Dimmer_B1.c: 720: DimmerLights->Switch = 1;
 18873  084A  0856               	movf	_DimmerLights^(0+128),w
 18874  084B  0086               	movwf	6
 18875  084C  3001               	movlw	1	; select bank2/3
 18876  084D  0087               	movwf	7
 18877  084E  1501               	bsf	1,2
 18878                           
 18879                           ;Dimmer_B1.c: 721: } else {
 18880  084F  2855               	goto	l6747
 18881  0850                     l6745:	
 18882                           
 18883                           ;Dimmer_B1.c: 722: DimmerLights->Status = 0;
 18884  0850  0A56               	incf	_DimmerLights^(0+128),w
 18885  0851  0086               	movwf	6
 18886  0852  3001               	movlw	1	; select bank2/3
 18887  0853  0087               	movwf	7
 18888  0854  1001               	bcf	1,0
 18889  0855                     l6747:	
 18890                           
 18891                           ;Dimmer_B1.c: 723: }
 18892                           ;Dimmer_B1.c: 724: setBuz(1, 100);
 18893  0855  3064               	movlw	100
 18894  0856  0020               	movlb	0	; select bank0
 18895  0857  00A9               	movwf	setBuz@time
 18896  0858  3000               	movlw	0
 18897  0859  00AA               	movwf	setBuz@time+1
 18898  085A  3001               	movlw	1
 18899  085B  3194  240B         	fcall	_setBuz
 18900  085D  0008               	return
 18901  085E                     __end_of_setDimmerLights_SwOn:	
 18902                           
 18903                           	psect	text128
 18904  140B                     __ptext128:	
 18905 ;; *************** function _setBuz *****************
 18906 ;; Defined at:
 18907 ;;		line 22 in file "../src/Buzzer_B1.c"
 18908 ;; Parameters:    Size  Location     Type
 18909 ;;  count           1    wreg     unsigned char 
 18910 ;;  time            2    9[BANK0 ] int 
 18911 ;; Auto vars:     Size  Location     Type
 18912 ;;  count           1   12[BANK0 ] unsigned char 
 18913 ;; Return value:  Size  Location     Type
 18914 ;;		None               void
 18915 ;; Registers used:
 18916 ;;		wreg, status,2, status,0, pclath, cstack
 18917 ;; Tracked objects:
 18918 ;;		On entry : 0/0
 18919 ;;		On exit  : 0/0
 18920 ;;		Unchanged: 0/0
 18921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18922 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18923 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18924 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18925 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18926 ;;Total ram usage:        4 bytes
 18927 ;; Hardware stack levels used:    1
 18928 ;; Hardware stack levels required when called:    6
 18929 ;; This function calls:
 18930 ;;		___awdiv
 18931 ;; This function is called by:
 18932 ;;		_setDimmerLights_SwOn
 18933 ;;		_setDimmerLights_Dimming
 18934 ;;		_setTemp_Main
 18935 ;;		_setLog_Code
 18936 ;;		_setRFSW_Control
 18937 ;;		_setSw_Main
 18938 ;;		_my_MainTimer
 18939 ;;		_Exception_Main
 18940 ;; This function uses a non-reentrant model
 18941 ;;
 18942                           
 18943                           
 18944                           ;psect for function _setBuz
 18945  140B                     _setBuz:	
 18946                           
 18947                           ;incstack = 0
 18948                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 18949                           ;setBuz@count stored from wreg
 18950  140B  0020               	movlb	0	; select bank0
 18951  140C  00AC               	movwf	setBuz@count
 18952                           
 18953                           ;Buzzer_B1.c: 23: time /= 20;
 18954  140D  3014               	movlw	20
 18955  140E  00A0               	movwf	___awdiv@divisor
 18956  140F  3000               	movlw	0
 18957  1410  00A1               	movwf	___awdiv@divisor+1
 18958  1411  082A               	movf	setBuz@time+1,w
 18959  1412  01A3               	clrf	___awdiv@dividend+1
 18960  1413  07A3               	addwf	___awdiv@dividend+1,f
 18961  1414  0829               	movf	setBuz@time,w
 18962  1415  01A2               	clrf	___awdiv@dividend
 18963  1416  07A2               	addwf	___awdiv@dividend,f
 18964  1417  3193  2361  3194   	fcall	___awdiv
 18965  141A  0020               	movlb	0	; select bank0
 18966  141B  0821               	movf	?___awdiv+1,w
 18967  141C  01AA               	clrf	setBuz@time+1
 18968  141D  07AA               	addwf	setBuz@time+1,f
 18969  141E  0820               	movf	?___awdiv,w
 18970  141F  01A9               	clrf	setBuz@time
 18971  1420  07A9               	addwf	setBuz@time,f
 18972                           
 18973                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 18974  1421  0022               	movlb	2	; select bank2
 18975  1422  1C20               	btfss	_Buz1^(0+256),0
 18976  1423  0008               	return
 18977                           
 18978                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 18979  1424  18A0               	btfsc	_Buz1^(0+256),1
 18980  1425  2C3C               	goto	l98
 18981                           
 18982                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 18983  1426  14A0               	bsf	_Buz1^(0+256),1
 18984                           
 18985                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 18986  1427  01A1               	clrf	(_Buz1^(0+256)+1)
 18987  1428  01A2               	clrf	((_Buz1+1)^(0+256)+1)
 18988                           
 18989                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 18990  1429  0020               	movlb	0	; select bank0
 18991  142A  082C               	movf	setBuz@count,w
 18992  142B  00AB               	movwf	??_setBuz
 18993  142C  082B               	movf	??_setBuz,w
 18994  142D  0022               	movlb	2	; select bank2
 18995  142E  00A3               	movwf	(_Buz1^(0+256)+3)
 18996                           
 18997                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 18998  142F  0020               	movlb	0	; select bank0
 18999  1430  082A               	movf	setBuz@time+1,w
 19000  1431  0022               	movlb	2	; select bank2
 19001  1432  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 19002  1433  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 19003  1434  0020               	movlb	0	; select bank0
 19004  1435  0829               	movf	setBuz@time,w
 19005  1436  0022               	movlb	2	; select bank2
 19006  1437  01A6               	clrf	(_Buz1^(0+256)+6)
 19007  1438  07A6               	addwf	(_Buz1^(0+256)+6),f
 19008                           
 19009                           ;Buzzer_B1.c: 30: RB3 = 1;
 19010  1439  0020               	movlb	0	; select bank0
 19011  143A  158D               	bsf	13,3	;volatile
 19012                           
 19013                           ;Buzzer_B1.c: 31: } else {
 19014  143B  0008               	return
 19015  143C                     l98:	
 19016                           
 19017                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 19018  143C  19A0               	btfsc	_Buz1^(0+256),3
 19019  143D  2C50               	goto	l100
 19020                           
 19021                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 19022  143E  15A0               	bsf	_Buz1^(0+256),3
 19023                           
 19024                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 19025  143F  0020               	movlb	0	; select bank0
 19026  1440  082C               	movf	setBuz@count,w
 19027  1441  00AB               	movwf	??_setBuz
 19028  1442  082B               	movf	??_setBuz,w
 19029  1443  0022               	movlb	2	; select bank2
 19030  1444  00A4               	movwf	(_Buz1^(0+256)+4)
 19031                           
 19032                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 19033  1445  0020               	movlb	0	; select bank0
 19034  1446  082A               	movf	setBuz@time+1,w
 19035  1447  0022               	movlb	2	; select bank2
 19036  1448  01A9               	clrf	((_Buz1+1)^(0+256)+8)
 19037  1449  07A9               	addwf	((_Buz1+1)^(0+256)+8),f
 19038  144A  0020               	movlb	0	; select bank0
 19039  144B  0829               	movf	setBuz@time,w
 19040  144C  0022               	movlb	2	; select bank2
 19041  144D  01A8               	clrf	(_Buz1^(0+256)+8)
 19042  144E  07A8               	addwf	(_Buz1^(0+256)+8),f
 19043                           
 19044                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 19045  144F  0008               	return
 19046  1450                     l100:	
 19047  1450  1A20               	btfsc	_Buz1^(0+256),4
 19048  1451  0008               	return
 19049                           
 19050                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 19051  1452  1620               	bsf	_Buz1^(0+256),4
 19052                           
 19053                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 19054  1453  0020               	movlb	0	; select bank0
 19055  1454  082C               	movf	setBuz@count,w
 19056  1455  00AB               	movwf	??_setBuz
 19057  1456  082B               	movf	??_setBuz,w
 19058  1457  0022               	movlb	2	; select bank2
 19059  1458  00A5               	movwf	(_Buz1^(0+256)+5)
 19060                           
 19061                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 19062  1459  0020               	movlb	0	; select bank0
 19063  145A  082A               	movf	setBuz@time+1,w
 19064  145B  0022               	movlb	2	; select bank2
 19065  145C  01AB               	clrf	((_Buz1+1)^(0+256)+10)
 19066  145D  07AB               	addwf	((_Buz1+1)^(0+256)+10),f
 19067  145E  0020               	movlb	0	; select bank0
 19068  145F  0829               	movf	setBuz@time,w
 19069  1460  0022               	movlb	2	; select bank2
 19070  1461  01AA               	clrf	(_Buz1^(0+256)+10)
 19071  1462  07AA               	addwf	(_Buz1^(0+256)+10),f
 19072  1463  0008               	return
 19073  1464                     __end_of_setBuz:	
 19074                           
 19075                           	psect	text129
 19076  1361                     __ptext129:	
 19077 ;; *************** function ___awdiv *****************
 19078 ;; Defined at:
 19079 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 19080 ;; Parameters:    Size  Location     Type
 19081 ;;  divisor         2    0[BANK0 ] int 
 19082 ;;  dividend        2    2[BANK0 ] int 
 19083 ;; Auto vars:     Size  Location     Type
 19084 ;;  quotient        2    7[BANK0 ] int 
 19085 ;;  sign            1    6[BANK0 ] unsigned char 
 19086 ;;  counter         1    5[BANK0 ] unsigned char 
 19087 ;; Return value:  Size  Location     Type
 19088 ;;                  2    0[BANK0 ] int 
 19089 ;; Registers used:
 19090 ;;		wreg, status,2, status,0
 19091 ;; Tracked objects:
 19092 ;;		On entry : 0/0
 19093 ;;		On exit  : 0/0
 19094 ;;		Unchanged: 0/0
 19095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19096 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19097 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19098 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19099 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19100 ;;Total ram usage:        9 bytes
 19101 ;; Hardware stack levels used:    1
 19102 ;; Hardware stack levels required when called:    5
 19103 ;; This function calls:
 19104 ;;		Nothing
 19105 ;; This function is called by:
 19106 ;;		_setBuz
 19107 ;; This function uses a non-reentrant model
 19108 ;;
 19109                           
 19110                           
 19111                           ;psect for function ___awdiv
 19112  1361                     ___awdiv:	
 19113                           
 19114                           ;incstack = 0
 19115                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 19116  1361  0020               	movlb	0	; select bank0
 19117  1362  01A6               	clrf	___awdiv@sign
 19118  1363  1FA1               	btfss	___awdiv@divisor+1,7
 19119  1364  2B6C               	goto	l6353
 19120  1365  09A0               	comf	___awdiv@divisor,f
 19121  1366  09A1               	comf	___awdiv@divisor+1,f
 19122  1367  0AA0               	incf	___awdiv@divisor,f
 19123  1368  1903               	skipnz
 19124  1369  0AA1               	incf	___awdiv@divisor+1,f
 19125  136A  01A6               	clrf	___awdiv@sign
 19126  136B  0AA6               	incf	___awdiv@sign,f
 19127  136C                     l6353:	
 19128  136C  1FA3               	btfss	___awdiv@dividend+1,7
 19129  136D  2B77               	goto	l6359
 19130  136E  09A2               	comf	___awdiv@dividend,f
 19131  136F  09A3               	comf	___awdiv@dividend+1,f
 19132  1370  0AA2               	incf	___awdiv@dividend,f
 19133  1371  1903               	skipnz
 19134  1372  0AA3               	incf	___awdiv@dividend+1,f
 19135  1373  3001               	movlw	1
 19136  1374  00A4               	movwf	??___awdiv
 19137  1375  0824               	movf	??___awdiv,w
 19138  1376  06A6               	xorwf	___awdiv@sign,f
 19139  1377                     l6359:	
 19140  1377  01A7               	clrf	___awdiv@quotient
 19141  1378  01A8               	clrf	___awdiv@quotient+1
 19142  1379  0821               	movf	___awdiv@divisor+1,w
 19143  137A  0420               	iorwf	___awdiv@divisor,w
 19144  137B  1903               	skipnz
 19145  137C  2BA6               	goto	l6381
 19146  137D  01A5               	clrf	___awdiv@counter
 19147  137E  0AA5               	incf	___awdiv@counter,f
 19148  137F                     l6369:	
 19149  137F  1BA1               	btfsc	___awdiv@divisor+1,7
 19150  1380  2B8B               	goto	l6371
 19151  1381  3001               	movlw	1
 19152  1382                     u5245:	
 19153  1382  35A0               	lslf	___awdiv@divisor,f
 19154  1383  0DA1               	rlf	___awdiv@divisor+1,f
 19155  1384  0B89               	decfsz	9,f
 19156  1385  2B82               	goto	u5245
 19157  1386  3001               	movlw	1
 19158  1387  00A4               	movwf	??___awdiv
 19159  1388  0824               	movf	??___awdiv,w
 19160  1389  07A5               	addwf	___awdiv@counter,f
 19161  138A  2B7F               	goto	l6369
 19162  138B                     l6371:	
 19163  138B  3001               	movlw	1
 19164  138C                     u5265:	
 19165  138C  35A7               	lslf	___awdiv@quotient,f
 19166  138D  0DA8               	rlf	___awdiv@quotient+1,f
 19167  138E  0B89               	decfsz	9,f
 19168  138F  2B8C               	goto	u5265
 19169  1390  0821               	movf	___awdiv@divisor+1,w
 19170  1391  0223               	subwf	___awdiv@dividend+1,w
 19171  1392  1D03               	skipz
 19172  1393  2B96               	goto	u5275
 19173  1394  0820               	movf	___awdiv@divisor,w
 19174  1395  0222               	subwf	___awdiv@dividend,w
 19175  1396                     u5275:	
 19176  1396  1C03               	skipc
 19177  1397  2B9D               	goto	l6377
 19178  1398  0820               	movf	___awdiv@divisor,w
 19179  1399  02A2               	subwf	___awdiv@dividend,f
 19180  139A  0821               	movf	___awdiv@divisor+1,w
 19181  139B  3BA3               	subwfb	___awdiv@dividend+1,f
 19182  139C  1427               	bsf	___awdiv@quotient,0
 19183  139D                     l6377:	
 19184  139D  3001               	movlw	1
 19185  139E                     u5285:	
 19186  139E  36A1               	lsrf	___awdiv@divisor+1,f
 19187  139F  0CA0               	rrf	___awdiv@divisor,f
 19188  13A0  0B89               	decfsz	9,f
 19189  13A1  2B9E               	goto	u5285
 19190  13A2  3001               	movlw	1
 19191  13A3  02A5               	subwf	___awdiv@counter,f
 19192  13A4  1D03               	btfss	3,2
 19193  13A5  2B8B               	goto	l6371
 19194  13A6                     l6381:	
 19195  13A6  0826               	movf	___awdiv@sign,w
 19196  13A7  1903               	btfsc	3,2
 19197  13A8  2BAE               	goto	l6385
 19198  13A9  09A7               	comf	___awdiv@quotient,f
 19199  13AA  09A8               	comf	___awdiv@quotient+1,f
 19200  13AB  0AA7               	incf	___awdiv@quotient,f
 19201  13AC  1903               	skipnz
 19202  13AD  0AA8               	incf	___awdiv@quotient+1,f
 19203  13AE                     l6385:	
 19204  13AE  0828               	movf	___awdiv@quotient+1,w
 19205  13AF  01A1               	clrf	?___awdiv+1
 19206  13B0  07A1               	addwf	?___awdiv+1,f
 19207  13B1  0827               	movf	___awdiv@quotient,w
 19208  13B2  01A0               	clrf	?___awdiv
 19209  13B3  07A0               	addwf	?___awdiv,f
 19210  13B4  0008               	return
 19211  13B5                     __end_of___awdiv:	
 19212                           
 19213                           	psect	text130
 19214  10CB                     __ptext130:	
 19215 ;; *************** function _setDimmerLights_SwOff *****************
 19216 ;; Defined at:
 19217 ;;		line 729 in file "../src/Dimmer_B1.c"
 19218 ;; Parameters:    Size  Location     Type
 19219 ;;  sw              1    wreg     unsigned char 
 19220 ;; Auto vars:     Size  Location     Type
 19221 ;;  sw              1    2[BANK0 ] unsigned char 
 19222 ;; Return value:  Size  Location     Type
 19223 ;;		None               void
 19224 ;; Registers used:
 19225 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19226 ;; Tracked objects:
 19227 ;;		On entry : 0/0
 19228 ;;		On exit  : 0/0
 19229 ;;		Unchanged: 0/0
 19230 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19232 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19234 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19235 ;;Total ram usage:        1 bytes
 19236 ;; Hardware stack levels used:    1
 19237 ;; Hardware stack levels required when called:    6
 19238 ;; This function calls:
 19239 ;;		_DimmerLights_SelectPointer
 19240 ;; This function is called by:
 19241 ;;		_DlyOff_Main
 19242 ;;		_setControl_Lights_Table
 19243 ;;		_setRFSW_Control
 19244 ;;		_setRFSW_AdjControl
 19245 ;;		_setSw_Main
 19246 ;;		_Exception_Main
 19247 ;; This function uses a non-reentrant model
 19248 ;;
 19249                           
 19250                           
 19251                           ;psect for function _setDimmerLights_SwOff
 19252  10CB                     _setDimmerLights_SwOff:	
 19253                           
 19254                           ;incstack = 0
 19255                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 19256                           ;setDimmerLights_SwOff@sw stored from wreg
 19257  10CB  0020               	movlb	0	; select bank0
 19258  10CC  00A2               	movwf	setDimmerLights_SwOff@sw
 19259                           
 19260                           ;Dimmer_B1.c: 730: DimmerLights_SelectPointer(sw);
 19261  10CD  0822               	movf	setDimmerLights_SwOff@sw,w
 19262  10CE  319B  23CB  3190   	fcall	_DimmerLights_SelectPointer
 19263                           
 19264                           ;Dimmer_B1.c: 732: if (DimmerLights->SwFlag == 1) {
 19265  10D1  0021               	movlb	1	; select bank1
 19266  10D2  0856               	movf	_DimmerLights^(0+128),w
 19267  10D3  0086               	movwf	6
 19268  10D4  3001               	movlw	1	; select bank2/3
 19269  10D5  0087               	movwf	7
 19270  10D6  1C01               	btfss	1,0
 19271  10D7  0008               	return
 19272                           
 19273                           ;Dimmer_B1.c: 733: DimmerLights->SwFlag = 0;
 19274  10D8  0856               	movf	_DimmerLights^(0+128),w
 19275  10D9  0086               	movwf	6
 19276  10DA  3001               	movlw	1	; select bank2/3
 19277  10DB  0087               	movwf	7
 19278  10DC  1001               	bcf	1,0
 19279                           
 19280                           ;Dimmer_B1.c: 734: if (DimmerLights->Status == 1) {
 19281  10DD  0A56               	incf	_DimmerLights^(0+128),w
 19282  10DE  0086               	movwf	6
 19283  10DF  3001               	movlw	1	; select bank2/3
 19284  10E0  0087               	movwf	7
 19285  10E1  1C01               	btfss	1,0
 19286  10E2  28F9               	goto	l6759
 19287                           
 19288                           ;Dimmer_B1.c: 735: if (DimmerLights->DimmingSwFlag == 1) {
 19289  10E3  0856               	movf	_DimmerLights^(0+128),w
 19290  10E4  0086               	movwf	6
 19291  10E5  3001               	movlw	1	; select bank2/3
 19292  10E6  0087               	movwf	7
 19293  10E7  1D81               	btfss	1,3
 19294  10E8  0008               	return
 19295                           
 19296                           ;Dimmer_B1.c: 736: DimmerLights->DimmingSwFlag = 0;
 19297  10E9  0856               	movf	_DimmerLights^(0+128),w
 19298  10EA  0086               	movwf	6
 19299  10EB  3001               	movlw	1	; select bank2/3
 19300  10EC  0087               	movwf	7
 19301  10ED  1181               	bcf	1,3
 19302                           
 19303                           ;Dimmer_B1.c: 738: DimmerLights->DimmingTrigger = 1;
 19304  10EE  0856               	movf	_DimmerLights^(0+128),w
 19305  10EF  0086               	movwf	6
 19306  10F0  3001               	movlw	1	; select bank2/3
 19307  10F1  0087               	movwf	7
 19308  10F2  1601               	bsf	1,4
 19309                           
 19310                           ;Dimmer_B1.c: 739: DimmerLights->DimmingSwitch = 0;
 19311  10F3  0856               	movf	_DimmerLights^(0+128),w
 19312  10F4  0086               	movwf	6
 19313  10F5  3001               	movlw	1	; select bank2/3
 19314  10F6  0087               	movwf	7
 19315  10F7  1281               	bcf	1,5
 19316                           
 19317                           ;Dimmer_B1.c: 740: }
 19318                           ;Dimmer_B1.c: 741: } else {
 19319  10F8  0008               	return
 19320  10F9                     l6759:	
 19321                           
 19322                           ;Dimmer_B1.c: 743: DimmerLights->Trigger = 1;
 19323  10F9  0856               	movf	_DimmerLights^(0+128),w
 19324  10FA  0086               	movwf	6
 19325  10FB  3001               	movlw	1	; select bank2/3
 19326  10FC  0087               	movwf	7
 19327  10FD  1481               	bsf	1,1
 19328                           
 19329                           ;Dimmer_B1.c: 744: DimmerLights->Switch = 0;
 19330  10FE  0856               	movf	_DimmerLights^(0+128),w
 19331  10FF  0086               	movwf	6
 19332  1100  3001               	movlw	1	; select bank2/3
 19333  1101  0087               	movwf	7
 19334  1102  1101               	bcf	1,2
 19335  1103  0008               	return
 19336  1104                     __end_of_setDimmerLights_SwOff:	
 19337                           
 19338                           	psect	text131
 19339  1A02                     __ptext131:	
 19340 ;; *************** function _getDimmerLights_Status *****************
 19341 ;; Defined at:
 19342 ;;		line 1070 in file "../src/Dimmer_B1.c"
 19343 ;; Parameters:    Size  Location     Type
 19344 ;;  lights          1    wreg     unsigned char 
 19345 ;; Auto vars:     Size  Location     Type
 19346 ;;  lights          1    2[BANK0 ] unsigned char 
 19347 ;;  status          1    3[BANK0 ] unsigned char 
 19348 ;; Return value:  Size  Location     Type
 19349 ;;                  1    wreg      unsigned char 
 19350 ;; Registers used:
 19351 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19352 ;; Tracked objects:
 19353 ;;		On entry : 0/0
 19354 ;;		On exit  : 0/0
 19355 ;;		Unchanged: 0/0
 19356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19358 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19360 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19361 ;;Total ram usage:        2 bytes
 19362 ;; Hardware stack levels used:    1
 19363 ;; Hardware stack levels required when called:    6
 19364 ;; This function calls:
 19365 ;;		_DimmerLights_SelectPointer
 19366 ;; This function is called by:
 19367 ;;		_DlyOff_Main
 19368 ;;		_setControl_Lights_Table
 19369 ;;		_setRFSW_Control
 19370 ;;		_setRFSW_AdjControl
 19371 ;;		_Exception_Main
 19372 ;; This function uses a non-reentrant model
 19373 ;;
 19374                           
 19375                           
 19376                           ;psect for function _getDimmerLights_Status
 19377  1A02                     _getDimmerLights_Status:	
 19378                           
 19379                           ;incstack = 0
 19380                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 19381                           ;getDimmerLights_Status@lights stored from wreg
 19382  1A02  0020               	movlb	0	; select bank0
 19383  1A03  00A2               	movwf	getDimmerLights_Status@lights
 19384                           
 19385                           ;Dimmer_B1.c: 1071: DimmerLights_SelectPointer(lights);
 19386  1A04  0822               	movf	getDimmerLights_Status@lights,w
 19387  1A05  319B  23CB         	fcall	_DimmerLights_SelectPointer
 19388                           
 19389                           ;Dimmer_B1.c: 1072: char status = DimmerLights->Status == 1 ? 1 : 0;
 19390  1A07  0021               	movlb	1	; select bank1
 19391  1A08  0A56               	incf	_DimmerLights^(0+128),w
 19392  1A09  0086               	movwf	6
 19393  1A0A  3001               	movlw	1	; select bank2/3
 19394  1A0B  0087               	movwf	7
 19395  1A0C  3000               	movlw	0
 19396  1A0D  1801               	btfsc	1,0
 19397  1A0E  3001               	movlw	1
 19398  1A0F  0020               	movlb	0	; select bank0
 19399  1A10  00A3               	movwf	getDimmerLights_Status@status
 19400                           
 19401                           ;Dimmer_B1.c: 1073: return status;
 19402  1A11  0823               	movf	getDimmerLights_Status@status,w
 19403  1A12  0008               	return
 19404  1A13                     __end_of_getDimmerLights_Status:	
 19405                           
 19406                           	psect	text132
 19407  1BCB                     __ptext132:	
 19408 ;; *************** function _DimmerLights_SelectPointer *****************
 19409 ;; Defined at:
 19410 ;;		line 611 in file "../src/Dimmer_B1.c"
 19411 ;; Parameters:    Size  Location     Type
 19412 ;;  lights          1    wreg     unsigned char 
 19413 ;; Auto vars:     Size  Location     Type
 19414 ;;  lights          1    1[BANK0 ] unsigned char 
 19415 ;; Return value:  Size  Location     Type
 19416 ;;		None               void
 19417 ;; Registers used:
 19418 ;;		wreg
 19419 ;; Tracked objects:
 19420 ;;		On entry : 0/0
 19421 ;;		On exit  : 0/0
 19422 ;;		Unchanged: 0/0
 19423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19425 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19426 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19427 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19428 ;;Total ram usage:        2 bytes
 19429 ;; Hardware stack levels used:    1
 19430 ;; Hardware stack levels required when called:    5
 19431 ;; This function calls:
 19432 ;;		Nothing
 19433 ;; This function is called by:
 19434 ;;		_setDimmerLights_SwOn
 19435 ;;		_setDimmerLights_SwOff
 19436 ;;		_setDimmerLights_DimmingOn
 19437 ;;		_setDimmerLights_Main
 19438 ;;		_getDimmerLights_Status
 19439 ;;		_setDimmerLights_DimmingRun
 19440 ;;		_setDimmerLights_Status
 19441 ;; This function uses a non-reentrant model
 19442 ;;
 19443                           
 19444                           
 19445                           ;psect for function _DimmerLights_SelectPointer
 19446  1BCB                     _DimmerLights_SelectPointer:	
 19447                           
 19448                           ;incstack = 0
 19449                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 19450                           ;DimmerLights_SelectPointer@lights stored from wreg
 19451  1BCB  0020               	movlb	0	; select bank0
 19452  1BCC  00A1               	movwf	DimmerLights_SelectPointer@lights
 19453                           
 19454                           ;Dimmer_B1.c: 613: if (lights == 1) {
 19455  1BCD  0821               	movf	DimmerLights_SelectPointer@lights,w
 19456  1BCE  3A01               	xorlw	1
 19457  1BCF  1D03               	skipz
 19458  1BD0  2BD7               	goto	l6431
 19459                           
 19460                           ;Dimmer_B1.c: 614: DimmerLights = &DimmerLights1;
 19461  1BD1  3067               	movlw	_DimmerLights1& (0+255)
 19462  1BD2  00A0               	movwf	??_DimmerLights_SelectPointer
 19463  1BD3  0820               	movf	??_DimmerLights_SelectPointer,w
 19464  1BD4  0021               	movlb	1	; select bank1
 19465  1BD5  00D6               	movwf	_DimmerLights^(0+128)
 19466                           
 19467                           ;Dimmer_B1.c: 615: }
 19468  1BD6  0008               	return
 19469  1BD7                     l6431:	
 19470                           
 19471                           ;Dimmer_B1.c: 618: else if (lights == 2) {
 19472  1BD7  0020               	movlb	0	; select bank0
 19473  1BD8  0821               	movf	DimmerLights_SelectPointer@lights,w
 19474  1BD9  3A02               	xorlw	2
 19475  1BDA  1D03               	skipz
 19476  1BDB  0008               	return
 19477                           
 19478                           ;Dimmer_B1.c: 619: DimmerLights = &DimmerLights2;
 19479  1BDC  30D0               	movlw	_DimmerLights2& (0+255)
 19480  1BDD  00A0               	movwf	??_DimmerLights_SelectPointer
 19481  1BDE  0820               	movf	??_DimmerLights_SelectPointer,w
 19482  1BDF  0021               	movlb	1	; select bank1
 19483  1BE0  00D6               	movwf	_DimmerLights^(0+128)
 19484  1BE1  0008               	return
 19485  1BE2                     __end_of_DimmerLights_SelectPointer:	
 19486                           
 19487                           	psect	text133
 19488  1904                     __ptext133:	
 19489 ;; *************** function _DelayOff_Initialization *****************
 19490 ;; Defined at:
 19491 ;;		line 26 in file "../src/DelayOff_B1.c"
 19492 ;; Parameters:    Size  Location     Type
 19493 ;;		None
 19494 ;; Auto vars:     Size  Location     Type
 19495 ;;		None
 19496 ;; Return value:  Size  Location     Type
 19497 ;;		None               void
 19498 ;; Registers used:
 19499 ;;		wreg, status,2, status,0, pclath, cstack
 19500 ;; Tracked objects:
 19501 ;;		On entry : 0/0
 19502 ;;		On exit  : 0/0
 19503 ;;		Unchanged: 0/0
 19504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19508 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19509 ;;Total ram usage:        0 bytes
 19510 ;; Hardware stack levels used:    1
 19511 ;; Hardware stack levels required when called:    7
 19512 ;; This function calls:
 19513 ;;		_DlyOff_Initialization
 19514 ;; This function is called by:
 19515 ;;		_main
 19516 ;; This function uses a non-reentrant model
 19517 ;;
 19518                           
 19519                           
 19520                           ;psect for function _DelayOff_Initialization
 19521  1904                     _DelayOff_Initialization:	
 19522                           
 19523                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 19524                           
 19525                           ;incstack = 0
 19526                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 19527  1904  3001               	movlw	1
 19528  1905  3198  20EB  3199   	fcall	_DlyOff_Initialization
 19529                           
 19530                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 19531  1908  3002               	movlw	2
 19532  1909  3198  20EB         	fcall	_DlyOff_Initialization
 19533  190B  0008               	return
 19534  190C                     __end_of_DelayOff_Initialization:	
 19535                           
 19536                           	psect	text134
 19537  18EB                     __ptext134:	
 19538 ;; *************** function _DlyOff_Initialization *****************
 19539 ;; Defined at:
 19540 ;;		line 56 in file "../src/DelayOff_B1.c"
 19541 ;; Parameters:    Size  Location     Type
 19542 ;;  sw              1    wreg     unsigned char 
 19543 ;; Auto vars:     Size  Location     Type
 19544 ;;  sw              1    2[BANK0 ] unsigned char 
 19545 ;; Return value:  Size  Location     Type
 19546 ;;		None               void
 19547 ;; Registers used:
 19548 ;;		wreg, status,2, status,0, pclath, cstack
 19549 ;; Tracked objects:
 19550 ;;		On entry : 0/0
 19551 ;;		On exit  : 0/0
 19552 ;;		Unchanged: 0/0
 19553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19554 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19555 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19556 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19557 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19558 ;;Total ram usage:        1 bytes
 19559 ;; Hardware stack levels used:    1
 19560 ;; Hardware stack levels required when called:    6
 19561 ;; This function calls:
 19562 ;;		_DelayOffPointSelect
 19563 ;; This function is called by:
 19564 ;;		_DelayOff_Initialization
 19565 ;; This function uses a non-reentrant model
 19566 ;;
 19567                           
 19568                           
 19569                           ;psect for function _DlyOff_Initialization
 19570  18EB                     _DlyOff_Initialization:	
 19571                           
 19572                           ;incstack = 0
 19573                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 19574                           ;DlyOff_Initialization@sw stored from wreg
 19575  18EB  0020               	movlb	0	; select bank0
 19576  18EC  00A2               	movwf	DlyOff_Initialization@sw
 19577                           
 19578                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 19579  18ED  0822               	movf	DlyOff_Initialization@sw,w
 19580  18EE  319B  23B4         	fcall	_DelayOffPointSelect
 19581  18F0  0008               	return
 19582  18F1                     __end_of_DlyOff_Initialization:	
 19583                           
 19584                           	psect	text135
 19585  1BB4                     __ptext135:	
 19586 ;; *************** function _DelayOffPointSelect *****************
 19587 ;; Defined at:
 19588 ;;		line 7 in file "../src/DelayOff_B1.c"
 19589 ;; Parameters:    Size  Location     Type
 19590 ;;  sw              1    wreg     unsigned char 
 19591 ;; Auto vars:     Size  Location     Type
 19592 ;;  sw              1    1[BANK0 ] unsigned char 
 19593 ;; Return value:  Size  Location     Type
 19594 ;;		None               void
 19595 ;; Registers used:
 19596 ;;		wreg
 19597 ;; Tracked objects:
 19598 ;;		On entry : 0/0
 19599 ;;		On exit  : 0/0
 19600 ;;		Unchanged: 0/0
 19601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19603 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19604 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19605 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19606 ;;Total ram usage:        2 bytes
 19607 ;; Hardware stack levels used:    1
 19608 ;; Hardware stack levels required when called:    5
 19609 ;; This function calls:
 19610 ;;		Nothing
 19611 ;; This function is called by:
 19612 ;;		_DlyOff_Initialization
 19613 ;;		_DlyOff_Main
 19614 ;;		_setDelayOff_GO
 19615 ;;		_getDelayOff_GO
 19616 ;; This function uses a non-reentrant model
 19617 ;;
 19618                           
 19619                           
 19620                           ;psect for function _DelayOffPointSelect
 19621  1BB4                     _DelayOffPointSelect:	
 19622                           
 19623                           ;incstack = 0
 19624                           ; Regs used in _DelayOffPointSelect: [wreg]
 19625                           ;DelayOffPointSelect@sw stored from wreg
 19626  1BB4  0020               	movlb	0	; select bank0
 19627  1BB5  00A1               	movwf	DelayOffPointSelect@sw
 19628                           
 19629                           ;DelayOff_B1.c: 9: if (sw == 1) {
 19630  1BB6  0821               	movf	DelayOffPointSelect@sw,w
 19631  1BB7  3A01               	xorlw	1
 19632  1BB8  1D03               	skipz
 19633  1BB9  2BC0               	goto	l6421
 19634                           
 19635                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 19636  1BBA  30D8               	movlw	_DlySw1& (0+255)
 19637  1BBB  00A0               	movwf	??_DelayOffPointSelect
 19638  1BBC  0820               	movf	??_DelayOffPointSelect,w
 19639  1BBD  0021               	movlb	1	; select bank1
 19640  1BBE  00D5               	movwf	_DelayOff^(0+128)
 19641                           
 19642                           ;DelayOff_B1.c: 11: }
 19643  1BBF  0008               	return
 19644  1BC0                     l6421:	
 19645                           
 19646                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 19647  1BC0  0020               	movlb	0	; select bank0
 19648  1BC1  0821               	movf	DelayOffPointSelect@sw,w
 19649  1BC2  3A02               	xorlw	2
 19650  1BC3  1D03               	skipz
 19651  1BC4  0008               	return
 19652                           
 19653                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 19654  1BC5  30DD               	movlw	_DlySw2& (0+255)
 19655  1BC6  00A0               	movwf	??_DelayOffPointSelect
 19656  1BC7  0820               	movf	??_DelayOffPointSelect,w
 19657  1BC8  0021               	movlb	1	; select bank1
 19658  1BC9  00D5               	movwf	_DelayOff^(0+128)
 19659  1BCA  0008               	return
 19660  1BCB                     __end_of_DelayOffPointSelect:	
 19661                           
 19662                           	psect	text136
 19663  12C4                     __ptext136:	
 19664 ;; *************** function _Buzzer_Main *****************
 19665 ;; Defined at:
 19666 ;;		line 46 in file "../src/Buzzer_B1.c"
 19667 ;; Parameters:    Size  Location     Type
 19668 ;;		None
 19669 ;; Auto vars:     Size  Location     Type
 19670 ;;		None
 19671 ;; Return value:  Size  Location     Type
 19672 ;;		None               void
 19673 ;; Registers used:
 19674 ;;		wreg, status,2, status,0
 19675 ;; Tracked objects:
 19676 ;;		On entry : 0/0
 19677 ;;		On exit  : 0/0
 19678 ;;		Unchanged: 0/0
 19679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19681 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19682 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19683 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19684 ;;Total ram usage:        1 bytes
 19685 ;; Hardware stack levels used:    1
 19686 ;; Hardware stack levels required when called:    5
 19687 ;; This function calls:
 19688 ;;		Nothing
 19689 ;; This function is called by:
 19690 ;;		_main
 19691 ;; This function uses a non-reentrant model
 19692 ;;
 19693                           
 19694                           
 19695                           ;psect for function _Buzzer_Main
 19696  12C4                     _Buzzer_Main:	
 19697                           
 19698                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 19699                           
 19700                           ;incstack = 0
 19701                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 19702  12C4  0022               	movlb	2	; select bank2
 19703  12C5  1CA0               	btfss	_Buz1^(0+256),1
 19704  12C6  0008               	return
 19705                           
 19706                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 19707  12C7  3001               	movlw	1
 19708  12C8  07A1               	addwf	(_Buz1^(0+256)+1),f
 19709  12C9  3000               	movlw	0
 19710  12CA  3DA2               	addwfc	((_Buz1+1)^(0+256)+1),f
 19711                           
 19712                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 19713  12CB  0827               	movf	((_Buz1+1)^(0+256)+6),w
 19714  12CC  0222               	subwf	((_Buz1+1)^(0+256)+1),w
 19715  12CD  1D03               	skipz
 19716  12CE  2AD1               	goto	u9125
 19717  12CF  0826               	movf	(_Buz1^(0+256)+6),w
 19718  12D0  0221               	subwf	(_Buz1^(0+256)+1),w
 19719  12D1                     u9125:	
 19720  12D1  1C03               	skipc
 19721  12D2  0008               	return
 19722                           
 19723                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 19724  12D3  01A1               	clrf	(_Buz1^(0+256)+1)
 19725  12D4  01A2               	clrf	((_Buz1+1)^(0+256)+1)
 19726                           
 19727                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 19728  12D5  12A0               	bcf	_Buz1^(0+256),5
 19729  12D6  0020               	movlb	0	; select bank0
 19730  12D7  1D8D               	btfss	13,3	;volatile
 19731  12D8  2ADB               	goto	l8561
 19732  12D9  0022               	movlb	2	; select bank2
 19733  12DA  16A0               	bsf	_Buz1^(0+256),5
 19734  12DB                     l8561:	
 19735                           
 19736                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 19737  12DB  0022               	movlb	2	; select bank2
 19738  12DC  1AA0               	btfsc	_Buz1^(0+256),5
 19739  12DD  2B07               	goto	l108
 19740                           
 19741                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 19742  12DE  08A3               	movf	(_Buz1^(0+256)+3),f
 19743  12DF  1D03               	skipz
 19744  12E0  2B03               	goto	l109
 19745                           
 19746                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 19747  12E1  1DA0               	btfss	_Buz1^(0+256),3
 19748  12E2  2AF1               	goto	l110
 19749                           
 19750                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 19751  12E3  11A0               	bcf	_Buz1^(0+256),3
 19752                           
 19753                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 19754  12E4  0824               	movf	(_Buz1^(0+256)+4),w
 19755  12E5  0020               	movlb	0	; select bank0
 19756  12E6  00A0               	movwf	??_Buzzer_Main
 19757  12E7  0820               	movf	??_Buzzer_Main,w
 19758  12E8  0022               	movlb	2	; select bank2
 19759  12E9  00A3               	movwf	(_Buz1^(0+256)+3)
 19760                           
 19761                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 19762  12EA  0829               	movf	((_Buz1+1)^(0+256)+8),w
 19763  12EB  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 19764  12EC  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 19765  12ED  0828               	movf	(_Buz1^(0+256)+8),w
 19766  12EE  01A6               	clrf	(_Buz1^(0+256)+6)
 19767  12EF  07A6               	addwf	(_Buz1^(0+256)+6),f
 19768                           
 19769                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 19770  12F0  0008               	return
 19771  12F1                     l110:	
 19772  12F1  1E20               	btfss	_Buz1^(0+256),4
 19773  12F2  2B01               	goto	l112
 19774                           
 19775                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 19776  12F3  1220               	bcf	_Buz1^(0+256),4
 19777                           
 19778                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 19779  12F4  0825               	movf	(_Buz1^(0+256)+5),w
 19780  12F5  0020               	movlb	0	; select bank0
 19781  12F6  00A0               	movwf	??_Buzzer_Main
 19782  12F7  0820               	movf	??_Buzzer_Main,w
 19783  12F8  0022               	movlb	2	; select bank2
 19784  12F9  00A3               	movwf	(_Buz1^(0+256)+3)
 19785                           
 19786                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 19787  12FA  082B               	movf	((_Buz1+1)^(0+256)+10),w
 19788  12FB  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 19789  12FC  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 19790  12FD  082A               	movf	(_Buz1^(0+256)+10),w
 19791  12FE  01A6               	clrf	(_Buz1^(0+256)+6)
 19792  12FF  07A6               	addwf	(_Buz1^(0+256)+6),f
 19793                           
 19794                           ;Buzzer_B1.c: 62: } else {
 19795  1300  0008               	return
 19796  1301                     l112:	
 19797                           
 19798                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 19799  1301  10A0               	bcf	_Buz1^(0+256),1
 19800                           
 19801                           ;Buzzer_B1.c: 64: }
 19802                           ;Buzzer_B1.c: 65: } else {
 19803  1302  0008               	return
 19804  1303                     l109:	
 19805                           
 19806                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 19807  1303  16A0               	bsf	_Buz1^(0+256),5
 19808                           
 19809                           ;Buzzer_B1.c: 68: RB3 = 1;
 19810  1304  0020               	movlb	0	; select bank0
 19811  1305  158D               	bsf	13,3	;volatile
 19812                           
 19813                           ;Buzzer_B1.c: 69: }
 19814                           ;Buzzer_B1.c: 70: } else {
 19815  1306  0008               	return
 19816  1307                     l108:	
 19817                           
 19818                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 19819  1307  12A0               	bcf	_Buz1^(0+256),5
 19820                           
 19821                           ;Buzzer_B1.c: 73: RB3 = 0;
 19822  1308  0020               	movlb	0	; select bank0
 19823  1309  118D               	bcf	13,3	;volatile
 19824                           
 19825                           ;Buzzer_B1.c: 75: Buz1.Count--;
 19826  130A  3001               	movlw	1
 19827  130B  0022               	movlb	2	; select bank2
 19828  130C  02A3               	subwf	(_Buz1^(0+256)+3),f
 19829  130D  0008               	return
 19830  130E                     __end_of_Buzzer_Main:	
 19831                           
 19832                           	psect	text137
 19833  18C0                     __ptext137:	
 19834 ;; *************** function _Buzzer_Initialization *****************
 19835 ;; Defined at:
 19836 ;;		line 11 in file "../src/Buzzer_B1.c"
 19837 ;; Parameters:    Size  Location     Type
 19838 ;;		None
 19839 ;; Auto vars:     Size  Location     Type
 19840 ;;		None
 19841 ;; Return value:  Size  Location     Type
 19842 ;;		None               void
 19843 ;; Registers used:
 19844 ;;		None
 19845 ;; Tracked objects:
 19846 ;;		On entry : 0/0
 19847 ;;		On exit  : 0/0
 19848 ;;		Unchanged: 0/0
 19849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19853 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19854 ;;Total ram usage:        0 bytes
 19855 ;; Hardware stack levels used:    1
 19856 ;; Hardware stack levels required when called:    5
 19857 ;; This function calls:
 19858 ;;		Nothing
 19859 ;; This function is called by:
 19860 ;;		_main
 19861 ;; This function uses a non-reentrant model
 19862 ;;
 19863                           
 19864                           
 19865                           ;psect for function _Buzzer_Initialization
 19866  18C0                     _Buzzer_Initialization:	
 19867                           
 19868                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 19869                           
 19870                           ;incstack = 0
 19871                           ; Regs used in _Buzzer_Initialization: []
 19872  18C0  0022               	movlb	2	; select bank2
 19873  18C1  1420               	bsf	_Buz1^(0+256),0
 19874  18C2  0008               	return
 19875  18C3                     __end_of_Buzzer_Initialization:	
 19876                           
 19877                           	psect	intentry
 19878  0004                     __pintentry:	
 19879 ;; *************** function _ISR *****************
 19880 ;; Defined at:
 19881 ;;		line 116 in file "../src/MCU_B1.c"
 19882 ;; Parameters:    Size  Location     Type
 19883 ;;		None
 19884 ;; Auto vars:     Size  Location     Type
 19885 ;;		None
 19886 ;; Return value:  Size  Location     Type
 19887 ;;		None               void
 19888 ;; Registers used:
 19889 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19890 ;; Tracked objects:
 19891 ;;		On entry : 0/0
 19892 ;;		On exit  : 0/0
 19893 ;;		Unchanged: 0/0
 19894 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19895 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19896 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19897 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19898 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19899 ;;Total ram usage:        1 bytes
 19900 ;; Hardware stack levels used:    1
 19901 ;; Hardware stack levels required when called:    4
 19902 ;; This function calls:
 19903 ;;		_IOC_ISR
 19904 ;;		_TMR1_ISR
 19905 ;; This function is called by:
 19906 ;;		Interrupt level 1
 19907 ;; This function uses a non-reentrant model
 19908 ;;
 19909                           
 19910  0004                     _ISR:	
 19911                           
 19912                           ;incstack = 0
 19913                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19914  0004  147E               	bsf	126,0	;set compiler interrupt flag
 19915  0005  3180               	pagesel	$
 19916  0006  0020               	movlb	0	; select bank0
 19917  0007  087F               	movf	127,w
 19918  0008  00FD               	movwf	??_ISR
 19919                           
 19920                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
 19921  0009  0021               	movlb	1	; select bank1
 19922  000A  1C11               	btfss	17,0	;volatile
 19923  000B  2812               	goto	i1l9147
 19924  000C  0020               	movlb	0	; select bank0
 19925  000D  1C11               	btfss	17,0	;volatile
 19926  000E  2812               	goto	i1l9147
 19927                           
 19928                           ;MCU_B1.c: 126: TMR1_ISR();
 19929  000F  319E  2637  3180   	fcall	_TMR1_ISR
 19930  0012                     i1l9147:	
 19931                           
 19932                           ;MCU_B1.c: 127: }
 19933                           ;MCU_B1.c: 138: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 19934  0012  198B               	btfsc	11,3	;volatile
 19935  0013  1C0B               	btfss	11,0	;volatile
 19936  0014  281A               	goto	i1l1408
 19937  0015  0027               	movlb	7	; select bank7
 19938  0016  1D16               	btfss	22,2	;volatile
 19939  0017  281A               	goto	i1l1408
 19940                           
 19941                           ;MCU_B1.c: 139: IOC_ISR();
 19942  0018  3199  217A         	fcall	_IOC_ISR
 19943  001A                     i1l1408:	
 19944                           ;MCU_B1.c: 140: }
 19945                           ;MCU_B1.c: 148: return;
 19946                           
 19947  001A  087D               	movf	??_ISR,w
 19948  001B  0020               	movlb	0	; select bank0
 19949  001C  00FF               	movwf	127
 19950  001D  107E               	bcf	126,0	;clear compiler interrupt flag
 19951  001E  0009               	retfie
 19952  001F                     __end_of_ISR:	
 19953                           
 19954                           	psect	text139
 19955  1E37                     __ptext139:	
 19956 ;; *************** function _TMR1_ISR *****************
 19957 ;; Defined at:
 19958 ;;		line 236 in file "../src/MCU_B1.c"
 19959 ;; Parameters:    Size  Location     Type
 19960 ;;		None
 19961 ;; Auto vars:     Size  Location     Type
 19962 ;;		None
 19963 ;; Return value:  Size  Location     Type
 19964 ;;		None               void
 19965 ;; Registers used:
 19966 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19967 ;; Tracked objects:
 19968 ;;		On entry : 0/0
 19969 ;;		On exit  : 0/0
 19970 ;;		Unchanged: 0/0
 19971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19972 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19973 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19974 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19975 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19976 ;;Total ram usage:        0 bytes
 19977 ;; Hardware stack levels used:    1
 19978 ;; Hardware stack levels required when called:    1
 19979 ;; This function calls:
 19980 ;;		_DimmerLights_TMR_1
 19981 ;;		_DimmerLights_TMR_2
 19982 ;; This function is called by:
 19983 ;;		_ISR
 19984 ;; This function uses a non-reentrant model
 19985 ;;
 19986                           
 19987                           
 19988                           ;psect for function _TMR1_ISR
 19989  1E37                     _TMR1_ISR:	
 19990                           
 19991                           ;MCU_B1.c: 254: DimmerLights_TMR_1();
 19992                           
 19993                           ;incstack = 0
 19994                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19995  1E37  3188  205E  319E   	fcall	_DimmerLights_TMR_1
 19996                           
 19997                           ;MCU_B1.c: 259: DimmerLights_TMR_2();
 19998  1E3A  3197  2792  319E   	fcall	_DimmerLights_TMR_2
 19999                           
 20000                           ;MCU_B1.c: 268: Timer1.Count++;
 20001  1E3D  3001               	movlw	1
 20002  1E3E  0022               	movlb	2	; select bank2
 20003  1E3F  07B2               	addwf	(_Timer1^(0+256)+1),f
 20004  1E40  3000               	movlw	0
 20005  1E41  3DB3               	addwfc	((_Timer1+1)^(0+256)+1),f
 20006                           
 20007                           ;MCU_B1.c: 269: if (Timer1.Count == (int)(20*10)) {
 20008  1E42  3001               	movlw	1
 20009  1E43  3E31               	addlw	_Timer1& (0+255)
 20010  1E44  0086               	movwf	6
 20011  1E45  3001               	movlw	1	; select bank2/3
 20012  1E46  0087               	movwf	7
 20013  1E47  3F40               	moviw [0]fsr1
 20014  1E48  3AC8               	xorlw	200
 20015  1E49  1D03               	skipz
 20016  1E4A  2E4D               	goto	u922_25
 20017  1E4B  3F41               	moviw [1]fsr1
 20018  1E4C  3A00               	xorlw	0
 20019  1E4D                     u922_25:	
 20020  1E4D  1D03               	skipz
 20021  1E4E  2E52               	goto	i1l8615
 20022                           
 20023                           ;MCU_B1.c: 270: Timer1.Count = 0;
 20024  1E4F  01B2               	clrf	(_Timer1^(0+256)+1)
 20025  1E50  01B3               	clrf	((_Timer1+1)^(0+256)+1)
 20026                           
 20027                           ;MCU_B1.c: 271: Timer1.Timeout = 1;
 20028  1E51  1431               	bsf	_Timer1^(0+256),0
 20029  1E52                     i1l8615:	
 20030                           
 20031                           ;MCU_B1.c: 272: }
 20032                           ;MCU_B1.c: 274: TMR1H = (int)((65536-1480)/256);
 20033  1E52  30FA               	movlw	250
 20034  1E53  0020               	movlb	0	; select bank0
 20035  1E54  0097               	movwf	23	;volatile
 20036                           
 20037                           ;MCU_B1.c: 275: TMR1L = (int)((65536-1480)%256);
 20038  1E55  3038               	movlw	56
 20039  1E56  0096               	movwf	22	;volatile
 20040                           
 20041                           ;MCU_B1.c: 276: TMR1IF = 0;
 20042  1E57  1011               	bcf	17,0	;volatile
 20043  1E58  0008               	return
 20044  1E59                     __end_of_TMR1_ISR:	
 20045                           
 20046                           	psect	text140
 20047  1792                     __ptext140:	
 20048 ;; *************** function _DimmerLights_TMR_2 *****************
 20049 ;; Defined at:
 20050 ;;		line 1547 in file "../src/Dimmer_B1.c"
 20051 ;; Parameters:    Size  Location     Type
 20052 ;;		None
 20053 ;; Auto vars:     Size  Location     Type
 20054 ;;		None
 20055 ;; Return value:  Size  Location     Type
 20056 ;;		None               void
 20057 ;; Registers used:
 20058 ;;		wreg, status,2, status,0
 20059 ;; Tracked objects:
 20060 ;;		On entry : 0/0
 20061 ;;		On exit  : 0/0
 20062 ;;		Unchanged: 0/0
 20063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20066 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20067 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20068 ;;Total ram usage:        1 bytes
 20069 ;; Hardware stack levels used:    1
 20070 ;; This function calls:
 20071 ;;		Nothing
 20072 ;; This function is called by:
 20073 ;;		_TMR1_ISR
 20074 ;; This function uses a non-reentrant model
 20075 ;;
 20076                           
 20077                           
 20078                           ;psect for function _DimmerLights_TMR_2
 20079  1792                     _DimmerLights_TMR_2:	
 20080                           
 20081                           ;Dimmer_B1.c: 1549: if (DimmerIntr2.Start == 1) {
 20082                           
 20083                           ;incstack = 0
 20084                           ; Regs used in _DimmerLights_TMR_2: [wreg+status,2+status,0]
 20085  1792  0021               	movlb	1	; select bank1
 20086  1793  1D47               	btfss	_DimmerIntr2^(0+128),2
 20087  1794  2FB5               	goto	i1l1001
 20088                           
 20089                           ;Dimmer_B1.c: 1550: DimmerIntr2.Count++;
 20090  1795  3001               	movlw	1
 20091  1796  00F0               	movwf	??_DimmerLights_TMR_2
 20092  1797  0870               	movf	??_DimmerLights_TMR_2,w
 20093  1798  07C9               	addwf	(_DimmerIntr2^(0+128)+2),f
 20094                           
 20095                           ;Dimmer_B1.c: 1569: if (DimmerIntr2.Count == DimmerIntr2.TuneValue2) {
 20096  1799  0849               	movf	(_DimmerIntr2^(0+128)+2),w
 20097  179A  064F               	xorwf	(_DimmerIntr2^(0+128)+8),w
 20098  179B  1903               	btfsc	3,2
 20099                           
 20100                           ;Dimmer_B1.c: 1572: if (DimmerIntr2.ControlStatus == 1) {
 20101  179C  1DC7               	btfss	_DimmerIntr2^(0+128),3
 20102  179D  2FA0               	goto	i1l8041
 20103                           
 20104                           ;Dimmer_B1.c: 1573: RA7 = 0;
 20105  179E  0020               	movlb	0	; select bank0
 20106  179F  138C               	bcf	12,7	;volatile
 20107  17A0                     i1l8041:	
 20108                           
 20109                           ;Dimmer_B1.c: 1574: }
 20110                           ;Dimmer_B1.c: 1575: }
 20111                           ;Dimmer_B1.c: 1579: if (DimmerIntr2.Count == DimmerIntr2.TuneValue3) {
 20112  17A0  0021               	movlb	1	; select bank1
 20113  17A1  0849               	movf	(_DimmerIntr2^(0+128)+2),w
 20114  17A2  0650               	xorwf	(_DimmerIntr2^(0+128)+9),w
 20115  17A3  1903               	btfsc	3,2
 20116                           
 20117                           ;Dimmer_B1.c: 1582: if (DimmerIntr2.ControlStatus == 1) {
 20118  17A4  1DC7               	btfss	_DimmerIntr2^(0+128),3
 20119  17A5  2FA8               	goto	i1l8047
 20120                           
 20121                           ;Dimmer_B1.c: 1583: RA7 = 1;
 20122  17A6  0020               	movlb	0	; select bank0
 20123  17A7  178C               	bsf	12,7	;volatile
 20124  17A8                     i1l8047:	
 20125                           
 20126                           ;Dimmer_B1.c: 1584: }
 20127                           ;Dimmer_B1.c: 1585: }
 20128                           ;Dimmer_B1.c: 1602: if (DimmerIntr2.Count == DimmerIntr2.TuneValue4) {
 20129  17A8  0021               	movlb	1	; select bank1
 20130  17A9  0849               	movf	(_DimmerIntr2^(0+128)+2),w
 20131  17AA  0651               	xorwf	(_DimmerIntr2^(0+128)+10),w
 20132  17AB  1D03               	skipz
 20133  17AC  2FC6               	goto	i1l1008
 20134                           
 20135                           ;Dimmer_B1.c: 1604: if (DimmerIntr2.ControlStatus == 1) {
 20136  17AD  1DC7               	btfss	_DimmerIntr2^(0+128),3
 20137  17AE  2FB1               	goto	i1l8053
 20138                           
 20139                           ;Dimmer_B1.c: 1605: RA7 = 0;
 20140  17AF  0020               	movlb	0	; select bank0
 20141  17B0  138C               	bcf	12,7	;volatile
 20142  17B1                     i1l8053:	
 20143                           
 20144                           ;Dimmer_B1.c: 1606: }
 20145                           ;Dimmer_B1.c: 1607: DimmerIntr2.Count = 0;
 20146  17B1  0021               	movlb	1	; select bank1
 20147  17B2  01C9               	clrf	(_DimmerIntr2^(0+128)+2)
 20148                           
 20149                           ;Dimmer_B1.c: 1608: DimmerIntr2.Start = 0;
 20150  17B3  1147               	bcf	_DimmerIntr2^(0+128),2
 20151                           
 20152                           ;Dimmer_B1.c: 1609: }
 20153                           ;Dimmer_B1.c: 1622: } else {
 20154  17B4  2FC6               	goto	i1l1008
 20155  17B5                     i1l1001:	
 20156                           
 20157                           ;Dimmer_B1.c: 1623: if (DimmerIntr2.GO == 1) {
 20158  17B5  1C47               	btfss	_DimmerIntr2^(0+128),0
 20159  17B6  2FC6               	goto	i1l1008
 20160                           
 20161                           ;Dimmer_B1.c: 1624: DimmerIntr2.Count++;
 20162  17B7  3001               	movlw	1
 20163  17B8  00F0               	movwf	??_DimmerLights_TMR_2
 20164  17B9  0870               	movf	??_DimmerLights_TMR_2,w
 20165  17BA  07C9               	addwf	(_DimmerIntr2^(0+128)+2),f
 20166                           
 20167                           ;Dimmer_B1.c: 1625: if (DimmerIntr2.Count == 2) {
 20168  17BB  0849               	movf	(_DimmerIntr2^(0+128)+2),w
 20169  17BC  3A02               	xorlw	2
 20170  17BD  1D03               	skipz
 20171  17BE  2FC6               	goto	i1l1008
 20172                           
 20173                           ;Dimmer_B1.c: 1626: DimmerIntr2.Count = 0;
 20174  17BF  01C9               	clrf	(_DimmerIntr2^(0+128)+2)
 20175                           
 20176                           ;Dimmer_B1.c: 1627: DimmerIntr2.Start = 1;
 20177  17C0  1547               	bsf	_DimmerIntr2^(0+128),2
 20178                           
 20179                           ;Dimmer_B1.c: 1628: DimmerIntr2.GO = 0;
 20180  17C1  1047               	bcf	_DimmerIntr2^(0+128),0
 20181                           
 20182                           ;Dimmer_B1.c: 1629: if (DimmerIntr2.ControlStatus == 1) {
 20183  17C2  1DC7               	btfss	_DimmerIntr2^(0+128),3
 20184  17C3  2FC6               	goto	i1l1008
 20185                           
 20186                           ;Dimmer_B1.c: 1630: RA7 = 1;
 20187  17C4  0020               	movlb	0	; select bank0
 20188  17C5  178C               	bsf	12,7	;volatile
 20189  17C6                     i1l1008:	
 20190                           
 20191                           ;Dimmer_B1.c: 1631: }
 20192                           ;Dimmer_B1.c: 1632: }
 20193                           ;Dimmer_B1.c: 1633: }
 20194                           ;Dimmer_B1.c: 1634: }
 20195                           ;Dimmer_B1.c: 1637: if (DimmerIntr2.Tune == 1) {
 20196  17C6  0021               	movlb	1	; select bank1
 20197  17C7  1CC7               	btfss	_DimmerIntr2^(0+128),1
 20198  17C8  0008               	return
 20199                           
 20200                           ;Dimmer_B1.c: 1638: DimmerIntr2.Tune = 0;
 20201  17C9  10C7               	bcf	_DimmerIntr2^(0+128),1
 20202                           
 20203                           ;Dimmer_B1.c: 1639: DimmerIntr2.TuneTime++;
 20204  17CA  3001               	movlw	1
 20205  17CB  00F0               	movwf	??_DimmerLights_TMR_2
 20206  17CC  0870               	movf	??_DimmerLights_TMR_2,w
 20207  17CD  07CA               	addwf	(_DimmerIntr2^(0+128)+3),f
 20208                           
 20209                           ;Dimmer_B1.c: 1640: if (DimmerIntr2.TuneTime >= DimmerIntr2.TuneTimeValue) {
 20210  17CE  084B               	movf	(_DimmerIntr2^(0+128)+4),w
 20211  17CF  024A               	subwf	(_DimmerIntr2^(0+128)+3),w
 20212  17D0  1C03               	skipc
 20213  17D1  0008               	return
 20214                           
 20215                           ;Dimmer_B1.c: 1641: DimmerIntr2.TuneTime = 0;
 20216  17D2  01CA               	clrf	(_DimmerIntr2^(0+128)+3)
 20217                           
 20218                           ;Dimmer_B1.c: 1642: DimmerIntr2.TuneGO = 1;
 20219  17D3  1748               	bsf	(_DimmerIntr2^(0+128)+1),6
 20220                           
 20221                           ;Dimmer_B1.c: 1643: if (DimmerIntr2.Dimming_Sw == 1) {
 20222  17D4  1E47               	btfss	_DimmerIntr2^(0+128),4
 20223  17D5  2FEC               	goto	i1l1014
 20224                           
 20225                           ;Dimmer_B1.c: 1644: if (DimmerIntr2.Dimming_Status == 0) {
 20226  17D6  1AC7               	btfsc	_DimmerIntr2^(0+128),5
 20227  17D7  2FE3               	goto	i1l8089
 20228                           
 20229                           ;Dimmer_B1.c: 1645: if (DimmerIntr2.DimmingValue < ((char)(50*0.6))) {
 20230  17D8  301E               	movlw	30
 20231  17D9  024C               	subwf	(_DimmerIntr2^(0+128)+5),w
 20232  17DA  1803               	skipnc
 20233  17DB  2FE1               	goto	i1l1016
 20234                           
 20235                           ;Dimmer_B1.c: 1646: DimmerIntr2.DimmingValue++;
 20236  17DC  3001               	movlw	1
 20237  17DD  00F0               	movwf	??_DimmerLights_TMR_2
 20238  17DE  0870               	movf	??_DimmerLights_TMR_2,w
 20239  17DF  07CC               	addwf	(_DimmerIntr2^(0+128)+5),f
 20240                           
 20241                           ;Dimmer_B1.c: 1647: } else {
 20242  17E0  0008               	return
 20243  17E1                     i1l1016:	
 20244                           
 20245                           ;Dimmer_B1.c: 1648: DimmerIntr2.Dimming_Status = 1;
 20246  17E1  16C7               	bsf	_DimmerIntr2^(0+128),5
 20247                           
 20248                           ;Dimmer_B1.c: 1649: }
 20249                           ;Dimmer_B1.c: 1650: } else {
 20250  17E2  0008               	return
 20251  17E3                     i1l8089:	
 20252                           
 20253                           ;Dimmer_B1.c: 1651: if (DimmerIntr2.DimmingValue > ((char)(4*0.6))) {
 20254  17E3  3003               	movlw	3
 20255  17E4  024C               	subwf	(_DimmerIntr2^(0+128)+5),w
 20256  17E5  1C03               	skipc
 20257  17E6  2FEA               	goto	i1l1019
 20258                           
 20259                           ;Dimmer_B1.c: 1652: DimmerIntr2.DimmingValue--;
 20260  17E7  3001               	movlw	1
 20261  17E8  02CC               	subwf	(_DimmerIntr2^(0+128)+5),f
 20262                           
 20263                           ;Dimmer_B1.c: 1653: } else {
 20264  17E9  0008               	return
 20265  17EA                     i1l1019:	
 20266                           
 20267                           ;Dimmer_B1.c: 1654: DimmerIntr2.Dimming_Status = 0;
 20268  17EA  12C7               	bcf	_DimmerIntr2^(0+128),5
 20269                           
 20270                           ;Dimmer_B1.c: 1655: }
 20271                           ;Dimmer_B1.c: 1656: }
 20272                           ;Dimmer_B1.c: 1657: } else if (DimmerIntr2.Dimming_RF == 1) {
 20273  17EB  0008               	return
 20274  17EC                     i1l1014:	
 20275  17EC  1F47               	btfss	_DimmerIntr2^(0+128),6
 20276  17ED  0008               	return
 20277                           
 20278                           ;Dimmer_B1.c: 1658: if (DimmerIntr2.DimmingValue < DimmerIntr2.MaxmumValue) {
 20279  17EE  084D               	movf	(_DimmerIntr2^(0+128)+6),w
 20280  17EF  024C               	subwf	(_DimmerIntr2^(0+128)+5),w
 20281  17F0  1803               	skipnc
 20282  17F1  2FF7               	goto	i1l8097
 20283                           
 20284                           ;Dimmer_B1.c: 1659: DimmerIntr2.DimmingValue++;
 20285  17F2  3001               	movlw	1
 20286  17F3  00F0               	movwf	??_DimmerLights_TMR_2
 20287  17F4  0870               	movf	??_DimmerLights_TMR_2,w
 20288  17F5  07CC               	addwf	(_DimmerIntr2^(0+128)+5),f
 20289                           
 20290                           ;Dimmer_B1.c: 1660: } else if (DimmerIntr2.DimmingValue > DimmerIntr2.MaxmumValue) {
 20291  17F6  0008               	return
 20292  17F7                     i1l8097:	
 20293  17F7  084C               	movf	(_DimmerIntr2^(0+128)+5),w
 20294  17F8  024D               	subwf	(_DimmerIntr2^(0+128)+6),w
 20295  17F9  1803               	skipnc
 20296  17FA  2FFE               	goto	i1l1025
 20297                           
 20298                           ;Dimmer_B1.c: 1661: DimmerIntr2.DimmingValue--;
 20299  17FB  3001               	movlw	1
 20300  17FC  02CC               	subwf	(_DimmerIntr2^(0+128)+5),f
 20301                           
 20302                           ;Dimmer_B1.c: 1662: } else {
 20303  17FD  0008               	return
 20304  17FE                     i1l1025:	
 20305                           
 20306                           ;Dimmer_B1.c: 1663: DimmerIntr2.Dimming_RF = 0;
 20307  17FE  1347               	bcf	_DimmerIntr2^(0+128),6
 20308  17FF  0008               	return
 20309  1800                     __end_of_DimmerLights_TMR_2:	
 20310                           
 20311                           	psect	text141
 20312  085E                     __ptext141:	
 20313 ;; *************** function _DimmerLights_TMR_1 *****************
 20314 ;; Defined at:
 20315 ;;		line 1377 in file "../src/Dimmer_B1.c"
 20316 ;; Parameters:    Size  Location     Type
 20317 ;;		None
 20318 ;; Auto vars:     Size  Location     Type
 20319 ;;		None
 20320 ;; Return value:  Size  Location     Type
 20321 ;;		None               void
 20322 ;; Registers used:
 20323 ;;		wreg, status,2, status,0
 20324 ;; Tracked objects:
 20325 ;;		On entry : 0/0
 20326 ;;		On exit  : 0/0
 20327 ;;		Unchanged: 0/0
 20328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20330 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20331 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20332 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20333 ;;Total ram usage:        1 bytes
 20334 ;; Hardware stack levels used:    1
 20335 ;; This function calls:
 20336 ;;		Nothing
 20337 ;; This function is called by:
 20338 ;;		_TMR1_ISR
 20339 ;; This function uses a non-reentrant model
 20340 ;;
 20341                           
 20342                           
 20343                           ;psect for function _DimmerLights_TMR_1
 20344  085E                     _DimmerLights_TMR_1:	
 20345                           
 20346                           ;Dimmer_B1.c: 1379: if (DimmerIntr1.Start == 1) {
 20347                           
 20348                           ;incstack = 0
 20349                           ; Regs used in _DimmerLights_TMR_1: [wreg+status,2+status,0]
 20350  085E  0021               	movlb	1	; select bank1
 20351  085F  1D3B               	btfss	_DimmerIntr1^(0+128),2
 20352  0860  2881               	goto	i1l960
 20353                           
 20354                           ;Dimmer_B1.c: 1380: DimmerIntr1.Count++;
 20355  0861  3001               	movlw	1
 20356  0862  00F0               	movwf	??_DimmerLights_TMR_1
 20357  0863  0870               	movf	??_DimmerLights_TMR_1,w
 20358  0864  07BD               	addwf	(_DimmerIntr1^(0+128)+2),f
 20359                           
 20360                           ;Dimmer_B1.c: 1382: if (DimmerIntr1.Count == 60) {
 20361  0865  083D               	movf	(_DimmerIntr1^(0+128)+2),w
 20362  0866  3A3C               	xorlw	60
 20363  0867  1D03               	skipz
 20364  0868  286B               	goto	i1l7947
 20365                           
 20366                           ;Dimmer_B1.c: 1383: DimmerIntr1.Count = 0;
 20367  0869  01BD               	clrf	(_DimmerIntr1^(0+128)+2)
 20368                           
 20369                           ;Dimmer_B1.c: 1384: DimmerIntr1.Start = 0;
 20370  086A  113B               	bcf	_DimmerIntr1^(0+128),2
 20371  086B                     i1l7947:	
 20372                           
 20373                           ;Dimmer_B1.c: 1386: }
 20374                           ;Dimmer_B1.c: 1400: if (DimmerIntr1.Count == DimmerIntr1.TuneValue2) {
 20375  086B  083D               	movf	(_DimmerIntr1^(0+128)+2),w
 20376  086C  0643               	xorwf	(_DimmerIntr1^(0+128)+8),w
 20377  086D  1903               	btfsc	3,2
 20378                           
 20379                           ;Dimmer_B1.c: 1401: if (DimmerIntr1.ControlStatus == 1) {
 20380  086E  1DBB               	btfss	_DimmerIntr1^(0+128),3
 20381  086F  2873               	goto	i1l7957
 20382                           
 20383                           ;Dimmer_B1.c: 1402: RB4 = 0;
 20384  0870  0020               	movlb	0	; select bank0
 20385  0871  120D               	bcf	13,4	;volatile
 20386                           
 20387                           ;Dimmer_B1.c: 1403: RB5 = 0;
 20388  0872  128D               	bcf	13,5	;volatile
 20389  0873                     i1l7957:	
 20390                           
 20391                           ;Dimmer_B1.c: 1412: }
 20392                           ;Dimmer_B1.c: 1413: }
 20393                           ;Dimmer_B1.c: 1416: if (DimmerIntr1.Count == DimmerIntr1.TuneValue4) {
 20394  0873  0021               	movlb	1	; select bank1
 20395  0874  083D               	movf	(_DimmerIntr1^(0+128)+2),w
 20396  0875  0645               	xorwf	(_DimmerIntr1^(0+128)+10),w
 20397  0876  1D03               	skipz
 20398  0877  2893               	goto	i1l971
 20399                           
 20400                           ;Dimmer_B1.c: 1417: if (DimmerIntr1.ControlStatus == 1) {
 20401  0878  19BB               	btfsc	_DimmerIntr1^(0+128),3
 20402  0879  287D               	goto	i1l968
 20403  087A  2893               	goto	i1l971
 20404  087B                     i1l969:	
 20405                           ;Dimmer_B1.c: 1418: while (RB4 == 1) {
 20406                           
 20407                           
 20408                           ;Dimmer_B1.c: 1419: RB4 = 0;
 20409  087B  120D               	bcf	13,4	;volatile
 20410                           
 20411                           ;Dimmer_B1.c: 1420: RB5 = 0;
 20412  087C  128D               	bcf	13,5	;volatile
 20413  087D                     i1l968:	
 20414  087D  0020               	movlb	0	; select bank0
 20415  087E  1E0D               	btfss	13,4	;volatile
 20416  087F  2893               	goto	i1l971
 20417  0880  287B               	goto	i1l969
 20418  0881                     i1l960:	
 20419                           ;Dimmer_B1.c: 1421: }
 20420                           ;Dimmer_B1.c: 1422: }
 20421                           ;Dimmer_B1.c: 1424: }
 20422                           ;Dimmer_B1.c: 1426: } else {
 20423                           
 20424                           
 20425                           ;Dimmer_B1.c: 1427: if (DimmerIntr1.GO == 1) {
 20426  0881  1C3B               	btfss	_DimmerIntr1^(0+128),0
 20427  0882  2893               	goto	i1l971
 20428                           
 20429                           ;Dimmer_B1.c: 1428: DimmerIntr1.Count++;
 20430  0883  3001               	movlw	1
 20431  0884  00F0               	movwf	??_DimmerLights_TMR_1
 20432  0885  0870               	movf	??_DimmerLights_TMR_1,w
 20433  0886  07BD               	addwf	(_DimmerIntr1^(0+128)+2),f
 20434                           
 20435                           ;Dimmer_B1.c: 1429: if (DimmerIntr1.Count == 2) {
 20436  0887  083D               	movf	(_DimmerIntr1^(0+128)+2),w
 20437  0888  3A02               	xorlw	2
 20438  0889  1D03               	skipz
 20439  088A  2893               	goto	i1l971
 20440                           
 20441                           ;Dimmer_B1.c: 1430: DimmerIntr1.Count = 0;
 20442  088B  01BD               	clrf	(_DimmerIntr1^(0+128)+2)
 20443                           
 20444                           ;Dimmer_B1.c: 1431: DimmerIntr1.GO = 0;
 20445  088C  103B               	bcf	_DimmerIntr1^(0+128),0
 20446                           
 20447                           ;Dimmer_B1.c: 1432: DimmerIntr1.Start = 1;
 20448  088D  153B               	bsf	_DimmerIntr1^(0+128),2
 20449                           
 20450                           ;Dimmer_B1.c: 1434: if (DimmerIntr1.ControlStatus == 1) {
 20451  088E  1DBB               	btfss	_DimmerIntr1^(0+128),3
 20452  088F  2893               	goto	i1l971
 20453                           
 20454                           ;Dimmer_B1.c: 1435: RB4 = 1;
 20455  0890  0020               	movlb	0	; select bank0
 20456  0891  160D               	bsf	13,4	;volatile
 20457                           
 20458                           ;Dimmer_B1.c: 1436: RB5 = 1;
 20459  0892  168D               	bsf	13,5	;volatile
 20460  0893                     i1l971:	
 20461                           
 20462                           ;Dimmer_B1.c: 1437: }
 20463                           ;Dimmer_B1.c: 1438: }
 20464                           ;Dimmer_B1.c: 1439: }
 20465                           ;Dimmer_B1.c: 1440: }
 20466                           ;Dimmer_B1.c: 1442: if (DimmerIntr1.Tune == 1) {
 20467  0893  0021               	movlb	1	; select bank1
 20468  0894  1CBB               	btfss	_DimmerIntr1^(0+128),1
 20469  0895  0008               	return
 20470                           
 20471                           ;Dimmer_B1.c: 1443: DimmerIntr1.Tune = 0;
 20472  0896  10BB               	bcf	_DimmerIntr1^(0+128),1
 20473                           
 20474                           ;Dimmer_B1.c: 1444: DimmerIntr1.TuneTime++;
 20475  0897  3001               	movlw	1
 20476  0898  00F0               	movwf	??_DimmerLights_TMR_1
 20477  0899  0870               	movf	??_DimmerLights_TMR_1,w
 20478  089A  07BE               	addwf	(_DimmerIntr1^(0+128)+3),f
 20479                           
 20480                           ;Dimmer_B1.c: 1445: if (DimmerIntr1.TuneTime >= DimmerIntr1.TuneTimeValue) {
 20481  089B  083F               	movf	(_DimmerIntr1^(0+128)+4),w
 20482  089C  023E               	subwf	(_DimmerIntr1^(0+128)+3),w
 20483  089D  1C03               	skipc
 20484  089E  0008               	return
 20485                           
 20486                           ;Dimmer_B1.c: 1446: DimmerIntr1.TuneTime = 0;
 20487  089F  01BE               	clrf	(_DimmerIntr1^(0+128)+3)
 20488                           
 20489                           ;Dimmer_B1.c: 1447: DimmerIntr1.TuneGO = 1;
 20490  08A0  173C               	bsf	(_DimmerIntr1^(0+128)+1),6
 20491                           
 20492                           ;Dimmer_B1.c: 1448: if (DimmerIntr1.Dimming_Sw == 1) {
 20493  08A1  1E3B               	btfss	_DimmerIntr1^(0+128),4
 20494  08A2  28B9               	goto	i1l977
 20495                           
 20496                           ;Dimmer_B1.c: 1449: if (DimmerIntr1.Dimming_Status == 0) {
 20497  08A3  1ABB               	btfsc	_DimmerIntr1^(0+128),5
 20498  08A4  28B0               	goto	i1l7995
 20499                           
 20500                           ;Dimmer_B1.c: 1450: if (DimmerIntr1.DimmingValue < ((char)(50*0.6))) {
 20501  08A5  301E               	movlw	30
 20502  08A6  0240               	subwf	(_DimmerIntr1^(0+128)+5),w
 20503  08A7  1803               	skipnc
 20504  08A8  28AE               	goto	i1l979
 20505                           
 20506                           ;Dimmer_B1.c: 1451: DimmerIntr1.DimmingValue++;
 20507  08A9  3001               	movlw	1
 20508  08AA  00F0               	movwf	??_DimmerLights_TMR_1
 20509  08AB  0870               	movf	??_DimmerLights_TMR_1,w
 20510  08AC  07C0               	addwf	(_DimmerIntr1^(0+128)+5),f
 20511                           
 20512                           ;Dimmer_B1.c: 1452: } else {
 20513  08AD  0008               	return
 20514  08AE                     i1l979:	
 20515                           
 20516                           ;Dimmer_B1.c: 1453: DimmerIntr1.Dimming_Status = 1;
 20517  08AE  16BB               	bsf	_DimmerIntr1^(0+128),5
 20518                           
 20519                           ;Dimmer_B1.c: 1454: }
 20520                           ;Dimmer_B1.c: 1455: } else {
 20521  08AF  0008               	return
 20522  08B0                     i1l7995:	
 20523                           
 20524                           ;Dimmer_B1.c: 1456: if (DimmerIntr1.DimmingValue > ((char)(4*0.6))) {
 20525  08B0  3003               	movlw	3
 20526  08B1  0240               	subwf	(_DimmerIntr1^(0+128)+5),w
 20527  08B2  1C03               	skipc
 20528  08B3  28B7               	goto	i1l982
 20529                           
 20530                           ;Dimmer_B1.c: 1457: DimmerIntr1.DimmingValue--;
 20531  08B4  3001               	movlw	1
 20532  08B5  02C0               	subwf	(_DimmerIntr1^(0+128)+5),f
 20533                           
 20534                           ;Dimmer_B1.c: 1458: } else {
 20535  08B6  0008               	return
 20536  08B7                     i1l982:	
 20537                           
 20538                           ;Dimmer_B1.c: 1459: DimmerIntr1.Dimming_Status = 0;
 20539  08B7  12BB               	bcf	_DimmerIntr1^(0+128),5
 20540                           
 20541                           ;Dimmer_B1.c: 1460: }
 20542                           ;Dimmer_B1.c: 1461: }
 20543                           ;Dimmer_B1.c: 1462: } else if (DimmerIntr1.Dimming_RF == 1) {
 20544  08B8  0008               	return
 20545  08B9                     i1l977:	
 20546  08B9  1F3B               	btfss	_DimmerIntr1^(0+128),6
 20547  08BA  0008               	return
 20548                           
 20549                           ;Dimmer_B1.c: 1463: if (DimmerIntr1.DimmingValue < DimmerIntr1.MaxmumValue) {
 20550  08BB  0841               	movf	(_DimmerIntr1^(0+128)+6),w
 20551  08BC  0240               	subwf	(_DimmerIntr1^(0+128)+5),w
 20552  08BD  1803               	skipnc
 20553  08BE  28C4               	goto	i1l8003
 20554                           
 20555                           ;Dimmer_B1.c: 1464: DimmerIntr1.DimmingValue++;
 20556  08BF  3001               	movlw	1
 20557  08C0  00F0               	movwf	??_DimmerLights_TMR_1
 20558  08C1  0870               	movf	??_DimmerLights_TMR_1,w
 20559  08C2  07C0               	addwf	(_DimmerIntr1^(0+128)+5),f
 20560                           
 20561                           ;Dimmer_B1.c: 1465: } else if (DimmerIntr1.DimmingValue > DimmerIntr1.MaxmumValue) {
 20562  08C3  0008               	return
 20563  08C4                     i1l8003:	
 20564  08C4  0840               	movf	(_DimmerIntr1^(0+128)+5),w
 20565  08C5  0241               	subwf	(_DimmerIntr1^(0+128)+6),w
 20566  08C6  1803               	skipnc
 20567  08C7  28CB               	goto	i1l988
 20568                           
 20569                           ;Dimmer_B1.c: 1466: DimmerIntr1.DimmingValue--;
 20570  08C8  3001               	movlw	1
 20571  08C9  02C0               	subwf	(_DimmerIntr1^(0+128)+5),f
 20572                           
 20573                           ;Dimmer_B1.c: 1467: } else {
 20574  08CA  0008               	return
 20575  08CB                     i1l988:	
 20576                           
 20577                           ;Dimmer_B1.c: 1468: DimmerIntr1.Dimming_RF = 0;
 20578  08CB  133B               	bcf	_DimmerIntr1^(0+128),6
 20579  08CC  0008               	return
 20580  08CD                     __end_of_DimmerLights_TMR_1:	
 20581                           
 20582                           	psect	text142
 20583  197A                     __ptext142:	
 20584 ;; *************** function _IOC_ISR *****************
 20585 ;; Defined at:
 20586 ;;		line 395 in file "../src/MCU_B1.c"
 20587 ;; Parameters:    Size  Location     Type
 20588 ;;		None
 20589 ;; Auto vars:     Size  Location     Type
 20590 ;;		None
 20591 ;; Return value:  Size  Location     Type
 20592 ;;		None               void
 20593 ;; Registers used:
 20594 ;;		wreg, status,2, status,0, pclath, cstack
 20595 ;; Tracked objects:
 20596 ;;		On entry : 0/0
 20597 ;;		On exit  : 0/0
 20598 ;;		Unchanged: 0/0
 20599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20603 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20604 ;;Total ram usage:        0 bytes
 20605 ;; Hardware stack levels used:    1
 20606 ;; Hardware stack levels required when called:    3
 20607 ;; This function calls:
 20608 ;;		_DimmerLights_IOC_1
 20609 ;;		_DimmerLights_IOC_2
 20610 ;; This function is called by:
 20611 ;;		_ISR
 20612 ;; This function uses a non-reentrant model
 20613 ;;
 20614                           
 20615                           
 20616                           ;psect for function _IOC_ISR
 20617  197A                     _IOC_ISR:	
 20618                           
 20619                           ;MCU_B1.c: 397: if (myMain.PowerON == 1) {
 20620                           
 20621                           ;incstack = 0
 20622                           ; Regs used in _IOC_ISR: [wreg+status,2+status,0+pclath+cstack]
 20623  197A  0021               	movlb	1	; select bank1
 20624  197B  1C2E               	btfss	_myMain^(0+128),0
 20625  197C  2982               	goto	i1l8625
 20626                           
 20627                           ;MCU_B1.c: 403: DimmerLights_IOC_1();
 20628  197D  3190  2092  3199   	fcall	_DimmerLights_IOC_1
 20629                           
 20630                           ;MCU_B1.c: 408: DimmerLights_IOC_2();
 20631  1980  3187  27C5         	fcall	_DimmerLights_IOC_2
 20632  1982                     i1l8625:	
 20633                           
 20634                           ;MCU_B1.c: 416: }
 20635                           ;MCU_B1.c: 418: IOCBF2 = 0;
 20636  1982  0027               	movlb	7	; select bank7
 20637  1983  1116               	bcf	22,2	;volatile
 20638                           
 20639                           ;MCU_B1.c: 419: IOCIF = 0;
 20640  1984  100B               	bcf	11,0	;volatile
 20641  1985  0008               	return
 20642  1986                     __end_of_IOC_ISR:	
 20643                           
 20644                           	psect	text143
 20645  07C5                     __ptext143:	
 20646 ;; *************** function _DimmerLights_IOC_2 *****************
 20647 ;; Defined at:
 20648 ;;		line 1670 in file "../src/Dimmer_B1.c"
 20649 ;; Parameters:    Size  Location     Type
 20650 ;;		None
 20651 ;; Auto vars:     Size  Location     Type
 20652 ;;  dimming         1   12[COMMON] unsigned char 
 20653 ;; Return value:  Size  Location     Type
 20654 ;;		None               void
 20655 ;; Registers used:
 20656 ;;		wreg, status,2, status,0, pclath, cstack
 20657 ;; Tracked objects:
 20658 ;;		On entry : 0/0
 20659 ;;		On exit  : 0/0
 20660 ;;		Unchanged: 0/0
 20661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20663 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20664 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20665 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20666 ;;Total ram usage:        3 bytes
 20667 ;; Hardware stack levels used:    1
 20668 ;; Hardware stack levels required when called:    2
 20669 ;; This function calls:
 20670 ;;		_Division
 20671 ;; This function is called by:
 20672 ;;		_IOC_ISR
 20673 ;; This function uses a non-reentrant model
 20674 ;;
 20675                           
 20676                           
 20677                           ;psect for function _DimmerLights_IOC_2
 20678  07C5                     _DimmerLights_IOC_2:	
 20679                           
 20680                           ;Dimmer_B1.c: 1685: if (DimmerIntr2.Start == 0) {
 20681                           
 20682                           ;incstack = 0
 20683                           ; Regs used in _DimmerLights_IOC_2: [wreg+status,2+status,0+pclath+cstack]
 20684  07C5  0021               	movlb	1	; select bank1
 20685  07C6  1947               	btfsc	_DimmerIntr2^(0+128),2
 20686  07C7  0008               	return
 20687                           
 20688                           ;Dimmer_B1.c: 1686: if (RB2 != DimmerIntr2.Status) {
 20689  07C8  0E48               	swapf	(_DimmerIntr2^(0+128)+1),w
 20690  07C9  0C89               	rrf	9,f
 20691  07CA  3901               	andlw	1
 20692  07CB  00FA               	movwf	??_DimmerLights_IOC_2
 20693  07CC  3000               	movlw	0
 20694  07CD  0020               	movlb	0	; select bank0
 20695  07CE  190D               	btfsc	13,2	;volatile
 20696  07CF  3001               	movlw	1
 20697  07D0  067A               	xorwf	??_DimmerLights_IOC_2,w
 20698  07D1  1903               	skipnz
 20699  07D2  0008               	return
 20700                           
 20701                           ;Dimmer_B1.c: 1688: DimmerIntr2.Count = 0;
 20702  07D3  0021               	movlb	1	; select bank1
 20703  07D4  01C9               	clrf	(_DimmerIntr2^(0+128)+2)
 20704                           
 20705                           ;Dimmer_B1.c: 1689: DimmerIntr2.GO = 1;
 20706  07D5  1447               	bsf	_DimmerIntr2^(0+128),0
 20707                           
 20708                           ;Dimmer_B1.c: 1691: if (DimmerIntr2.Dimming_Sw == 1 || DimmerIntr2.Dimming_RF == 1) {
 20709  07D6  1E47               	btfss	_DimmerIntr2^(0+128),4
 20710  07D7  1B47               	btfsc	_DimmerIntr2^(0+128),6
 20711                           
 20712                           ;Dimmer_B1.c: 1692: DimmerIntr2.Tune = 1;
 20713  07D8  14C7               	bsf	_DimmerIntr2^(0+128),1
 20714                           
 20715                           ;Dimmer_B1.c: 1693: }
 20716                           ;Dimmer_B1.c: 1695: if (DimmerIntr2.TuneGO == 1) {
 20717  07D9  1F48               	btfss	(_DimmerIntr2^(0+128)+1),6
 20718  07DA  2FF8               	goto	i1l8123
 20719                           
 20720                           ;Dimmer_B1.c: 1696: DimmerIntr2.TuneGO = 0;
 20721  07DB  1348               	bcf	(_DimmerIntr2^(0+128)+1),6
 20722                           
 20723                           ;Dimmer_B1.c: 1697: char dimming = Division(DimmerIntr2.DimmingValue, 2);
 20724  07DC  3002               	movlw	2
 20725  07DD  00FA               	movwf	??_DimmerLights_IOC_2
 20726  07DE  087A               	movf	??_DimmerLights_IOC_2,w
 20727  07DF  00F5               	movwf	Division@num
 20728  07E0  084C               	movf	(_DimmerIntr2^(0+128)+5),w
 20729  07E1  3199  21E6  3187   	fcall	_Division
 20730  07E4  00FB               	movwf	??_DimmerLights_IOC_2+1
 20731  07E5  087B               	movf	??_DimmerLights_IOC_2+1,w
 20732  07E6  00FC               	movwf	DimmerLights_IOC_2@dimming
 20733                           
 20734                           ;Dimmer_B1.c: 1699: DimmerIntr2.TuneValue2 = dimming;
 20735  07E7  087C               	movf	DimmerLights_IOC_2@dimming,w
 20736  07E8  00FA               	movwf	??_DimmerLights_IOC_2
 20737  07E9  087A               	movf	??_DimmerLights_IOC_2,w
 20738  07EA  0021               	movlb	1	; select bank1
 20739  07EB  00CF               	movwf	(_DimmerIntr2^(0+128)+8)
 20740                           
 20741                           ;Dimmer_B1.c: 1700: DimmerIntr2.TuneValue3 = DimmerIntr2.TuneValue2 + (60 - DimmerIntr2.
      +                          DimmingValue);
 20742  07EC  034C               	decf	(_DimmerIntr2^(0+128)+5),w
 20743  07ED  3AFF               	xorlw	255
 20744  07EE  074F               	addwf	(_DimmerIntr2^(0+128)+8),w
 20745  07EF  3E3C               	addlw	60
 20746  07F0  00FA               	movwf	??_DimmerLights_IOC_2
 20747  07F1  087A               	movf	??_DimmerLights_IOC_2,w
 20748  07F2  00D0               	movwf	(_DimmerIntr2^(0+128)+9)
 20749                           
 20750                           ;Dimmer_B1.c: 1701: DimmerIntr2.TuneValue4 = DimmerIntr2.TuneValue3 + dimming;
 20751  07F3  0850               	movf	(_DimmerIntr2^(0+128)+9),w
 20752  07F4  077C               	addwf	DimmerLights_IOC_2@dimming,w
 20753  07F5  00FA               	movwf	??_DimmerLights_IOC_2
 20754  07F6  087A               	movf	??_DimmerLights_IOC_2,w
 20755  07F7  00D1               	movwf	(_DimmerIntr2^(0+128)+10)
 20756  07F8                     i1l8123:	
 20757                           
 20758                           ;Dimmer_B1.c: 1702: }
 20759                           ;Dimmer_B1.c: 1712: DimmerIntr2.Status = RB2 == 1 ? 1 : 0;
 20760  07F8  12C8               	bcf	(_DimmerIntr2^(0+128)+1),5
 20761  07F9  0020               	movlb	0	; select bank0
 20762  07FA  1D0D               	btfss	13,2	;volatile
 20763  07FB  0008               	return
 20764  07FC  0021               	movlb	1	; select bank1
 20765  07FD  16C8               	bsf	(_DimmerIntr2^(0+128)+1),5
 20766  07FE  0008               	return
 20767  07FF                     __end_of_DimmerLights_IOC_2:	
 20768                           
 20769                           	psect	text144
 20770  1092                     __ptext144:	
 20771 ;; *************** function _DimmerLights_IOC_1 *****************
 20772 ;; Defined at:
 20773 ;;		line 1475 in file "../src/Dimmer_B1.c"
 20774 ;; Parameters:    Size  Location     Type
 20775 ;;		None
 20776 ;; Auto vars:     Size  Location     Type
 20777 ;;  dimming         1   12[COMMON] unsigned char 
 20778 ;; Return value:  Size  Location     Type
 20779 ;;		None               void
 20780 ;; Registers used:
 20781 ;;		wreg, status,2, status,0, pclath, cstack
 20782 ;; Tracked objects:
 20783 ;;		On entry : 0/0
 20784 ;;		On exit  : 0/0
 20785 ;;		Unchanged: 0/0
 20786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20788 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20789 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20790 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20791 ;;Total ram usage:        3 bytes
 20792 ;; Hardware stack levels used:    1
 20793 ;; Hardware stack levels required when called:    2
 20794 ;; This function calls:
 20795 ;;		_Division
 20796 ;; This function is called by:
 20797 ;;		_IOC_ISR
 20798 ;; This function uses a non-reentrant model
 20799 ;;
 20800                           
 20801                           
 20802                           ;psect for function _DimmerLights_IOC_1
 20803  1092                     _DimmerLights_IOC_1:	
 20804                           
 20805                           ;Dimmer_B1.c: 1489: if (DimmerIntr1.Start == 0 && DimmerIntr1.GO == 0) {
 20806                           
 20807                           ;incstack = 0
 20808                           ; Regs used in _DimmerLights_IOC_1: [wreg+status,2+status,0+pclath+cstack]
 20809  1092  0021               	movlb	1	; select bank1
 20810  1093  193B               	btfsc	_DimmerIntr1^(0+128),2
 20811  1094  0008               	return
 20812  1095  183B               	btfsc	_DimmerIntr1^(0+128),0
 20813  1096  0008               	return
 20814                           
 20815                           ;Dimmer_B1.c: 1490: if (RB2 != DimmerIntr1.Status) {
 20816  1097  0E3C               	swapf	(_DimmerIntr1^(0+128)+1),w
 20817  1098  0C89               	rrf	9,f
 20818  1099  3901               	andlw	1
 20819  109A  00FA               	movwf	??_DimmerLights_IOC_1
 20820  109B  3000               	movlw	0
 20821  109C  0020               	movlb	0	; select bank0
 20822  109D  190D               	btfsc	13,2	;volatile
 20823  109E  3001               	movlw	1
 20824  109F  067A               	xorwf	??_DimmerLights_IOC_1,w
 20825  10A0  1903               	skipnz
 20826  10A1  0008               	return
 20827                           
 20828                           ;Dimmer_B1.c: 1492: DimmerIntr1.Count = 0;
 20829  10A2  0021               	movlb	1	; select bank1
 20830  10A3  01BD               	clrf	(_DimmerIntr1^(0+128)+2)
 20831                           
 20832                           ;Dimmer_B1.c: 1493: DimmerIntr1.GO = 1;
 20833  10A4  143B               	bsf	_DimmerIntr1^(0+128),0
 20834                           
 20835                           ;Dimmer_B1.c: 1495: if (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr1.Dimming_RF == 1) {
 20836  10A5  1E3B               	btfss	_DimmerIntr1^(0+128),4
 20837  10A6  1B3B               	btfsc	_DimmerIntr1^(0+128),6
 20838                           
 20839                           ;Dimmer_B1.c: 1496: DimmerIntr1.Tune = 1;
 20840  10A7  14BB               	bsf	_DimmerIntr1^(0+128),1
 20841                           
 20842                           ;Dimmer_B1.c: 1497: }
 20843                           ;Dimmer_B1.c: 1501: char dimming = Division(DimmerIntr1.DimmingValue, 2);
 20844  10A8  3002               	movlw	2
 20845  10A9  00FA               	movwf	??_DimmerLights_IOC_1
 20846  10AA  087A               	movf	??_DimmerLights_IOC_1,w
 20847  10AB  00F5               	movwf	Division@num
 20848  10AC  0840               	movf	(_DimmerIntr1^(0+128)+5),w
 20849  10AD  3199  21E6  3190   	fcall	_Division
 20850  10B0  00FB               	movwf	??_DimmerLights_IOC_1+1
 20851  10B1  087B               	movf	??_DimmerLights_IOC_1+1,w
 20852  10B2  00FC               	movwf	DimmerLights_IOC_1@dimming
 20853                           
 20854                           ;Dimmer_B1.c: 1503: DimmerIntr1.TuneValue2 = dimming;
 20855  10B3  087C               	movf	DimmerLights_IOC_1@dimming,w
 20856  10B4  00FA               	movwf	??_DimmerLights_IOC_1
 20857  10B5  087A               	movf	??_DimmerLights_IOC_1,w
 20858  10B6  0021               	movlb	1	; select bank1
 20859  10B7  00C3               	movwf	(_DimmerIntr1^(0+128)+8)
 20860                           
 20861                           ;Dimmer_B1.c: 1504: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + (60 - DimmerIntr1.
      +                          DimmingValue);
 20862  10B8  0340               	decf	(_DimmerIntr1^(0+128)+5),w
 20863  10B9  3AFF               	xorlw	255
 20864  10BA  0743               	addwf	(_DimmerIntr1^(0+128)+8),w
 20865  10BB  3E3C               	addlw	60
 20866  10BC  00FA               	movwf	??_DimmerLights_IOC_1
 20867  10BD  087A               	movf	??_DimmerLights_IOC_1,w
 20868  10BE  00C4               	movwf	(_DimmerIntr1^(0+128)+9)
 20869                           
 20870                           ;Dimmer_B1.c: 1505: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + dimming;
 20871  10BF  0844               	movf	(_DimmerIntr1^(0+128)+9),w
 20872  10C0  077C               	addwf	DimmerLights_IOC_1@dimming,w
 20873  10C1  00FA               	movwf	??_DimmerLights_IOC_1
 20874  10C2  087A               	movf	??_DimmerLights_IOC_1,w
 20875  10C3  00C5               	movwf	(_DimmerIntr1^(0+128)+10)
 20876                           
 20877                           ;Dimmer_B1.c: 1514: DimmerIntr1.Status = RB2 == 1 ? 1 : 0;
 20878  10C4  12BC               	bcf	(_DimmerIntr1^(0+128)+1),5
 20879  10C5  0020               	movlb	0	; select bank0
 20880  10C6  1D0D               	btfss	13,2	;volatile
 20881  10C7  0008               	return
 20882  10C8  0021               	movlb	1	; select bank1
 20883  10C9  16BC               	bsf	(_DimmerIntr1^(0+128)+1),5
 20884  10CA  0008               	return
 20885  10CB                     __end_of_DimmerLights_IOC_1:	
 20886                           
 20887                           	psect	text145
 20888  19E6                     __ptext145:	
 20889 ;; *************** function _Division *****************
 20890 ;; Defined at:
 20891 ;;		line 1372 in file "../src/Dimmer_B1.c"
 20892 ;; Parameters:    Size  Location     Type
 20893 ;;  value           1    wreg     unsigned char 
 20894 ;;  num             1    5[COMMON] unsigned char 
 20895 ;; Auto vars:     Size  Location     Type
 20896 ;;  value           1    8[COMMON] unsigned char 
 20897 ;;  result          1    9[COMMON] unsigned char 
 20898 ;; Return value:  Size  Location     Type
 20899 ;;                  1    wreg      unsigned char 
 20900 ;; Registers used:
 20901 ;;		wreg, status,2, status,0, pclath, cstack
 20902 ;; Tracked objects:
 20903 ;;		On entry : 0/0
 20904 ;;		On exit  : 0/0
 20905 ;;		Unchanged: 0/0
 20906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20907 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20908 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20909 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20910 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20911 ;;Total ram usage:        5 bytes
 20912 ;; Hardware stack levels used:    1
 20913 ;; Hardware stack levels required when called:    1
 20914 ;; This function calls:
 20915 ;;		___lbdiv
 20916 ;; This function is called by:
 20917 ;;		_DimmerLights_IOC_1
 20918 ;;		_DimmerLights_IOC_2
 20919 ;; This function uses a non-reentrant model
 20920 ;;
 20921                           
 20922                           
 20923                           ;psect for function _Division
 20924  19E6                     _Division:	
 20925                           
 20926                           ;incstack = 0
 20927                           ; Regs used in _Division: [wreg+status,2+status,0+pclath+cstack]
 20928                           ;Division@value stored from wreg
 20929  19E6  00F8               	movwf	Division@value
 20930                           
 20931                           ;Dimmer_B1.c: 1373: char result = (char) (value / num);
 20932  19E7  0875               	movf	Division@num,w
 20933  19E8  00F6               	movwf	??_Division
 20934  19E9  0876               	movf	??_Division,w
 20935  19EA  00F0               	movwf	___lbdiv@divisor
 20936  19EB  0878               	movf	Division@value,w
 20937  19EC  319D  25F5         	fcall	___lbdiv
 20938  19EE  00F7               	movwf	??_Division+1
 20939  19EF  0877               	movf	??_Division+1,w
 20940  19F0  00F9               	movwf	Division@result
 20941                           
 20942                           ;Dimmer_B1.c: 1374: return result;
 20943  19F1  0879               	movf	Division@result,w
 20944  19F2  0008               	return
 20945  19F3                     __end_of_Division:	
 20946                           
 20947                           	psect	text146
 20948  1DF5                     __ptext146:	
 20949 ;; *************** function ___lbdiv *****************
 20950 ;; Defined at:
 20951 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 20952 ;; Parameters:    Size  Location     Type
 20953 ;;  dividend        1    wreg     unsigned char 
 20954 ;;  divisor         1    0[COMMON] unsigned char 
 20955 ;; Auto vars:     Size  Location     Type
 20956 ;;  dividend        1    2[COMMON] unsigned char 
 20957 ;;  quotient        1    4[COMMON] unsigned char 
 20958 ;;  counter         1    3[COMMON] unsigned char 
 20959 ;; Return value:  Size  Location     Type
 20960 ;;                  1    wreg      unsigned char 
 20961 ;; Registers used:
 20962 ;;		wreg, status,2, status,0
 20963 ;; Tracked objects:
 20964 ;;		On entry : 0/0
 20965 ;;		On exit  : 0/0
 20966 ;;		Unchanged: 0/0
 20967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20968 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20969 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20970 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20971 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20972 ;;Total ram usage:        5 bytes
 20973 ;; Hardware stack levels used:    1
 20974 ;; This function calls:
 20975 ;;		Nothing
 20976 ;; This function is called by:
 20977 ;;		_Division
 20978 ;; This function uses a non-reentrant model
 20979 ;;
 20980                           
 20981                           
 20982                           ;psect for function ___lbdiv
 20983  1DF5                     ___lbdiv:	
 20984                           
 20985                           ;incstack = 0
 20986                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
 20987                           ;___lbdiv@dividend stored from wreg
 20988  1DF5  00F2               	movwf	___lbdiv@dividend
 20989  1DF6  01F4               	clrf	___lbdiv@quotient
 20990  1DF7  0870               	movf	___lbdiv@divisor,w
 20991  1DF8  1903               	btfsc	3,2
 20992  1DF9  2E14               	goto	i1l7351
 20993  1DFA  01F3               	clrf	___lbdiv@counter
 20994  1DFB  0AF3               	incf	___lbdiv@counter,f
 20995  1DFC                     i1l7339:	
 20996  1DFC  1BF0               	btfsc	___lbdiv@divisor,7
 20997  1DFD  2E05               	goto	i1l7341
 20998  1DFE  1003               	clrc
 20999  1DFF  0DF0               	rlf	___lbdiv@divisor,f
 21000  1E00  3001               	movlw	1
 21001  1E01  00F1               	movwf	??___lbdiv
 21002  1E02  0871               	movf	??___lbdiv,w
 21003  1E03  07F3               	addwf	___lbdiv@counter,f
 21004  1E04  2DFC               	goto	i1l7339
 21005  1E05                     i1l7341:	
 21006  1E05  1003               	clrc
 21007  1E06  0DF4               	rlf	___lbdiv@quotient,f
 21008  1E07  0870               	movf	___lbdiv@divisor,w
 21009  1E08  0272               	subwf	___lbdiv@dividend,w
 21010  1E09  1C03               	skipc
 21011  1E0A  2E0F               	goto	L13
 21012  1E0B  0870               	movf	___lbdiv@divisor,w
 21013  1E0C  02F2               	subwf	___lbdiv@dividend,f
 21014  1E0D  1474               	bsf	___lbdiv@quotient,0
 21015  1E0E  1003               	clrc
 21016  1E0F                     L13:	
 21017  1E0F  0CF0               	rrf	___lbdiv@divisor,f
 21018  1E10  3001               	movlw	1
 21019  1E11  02F3               	subwf	___lbdiv@counter,f
 21020  1E12  1D03               	btfss	3,2
 21021  1E13  2E05               	goto	i1l7341
 21022  1E14                     i1l7351:	
 21023  1E14  0874               	movf	___lbdiv@quotient,w
 21024  1E15  0008               	return
 21025  1E16                     __end_of___lbdiv:	
 21026  007E                     btemp	set	126	;btemp
 21027  007E                     pic14e$flags	set	126
 21028  007E                     wtemp	set	126
 21029  007E                     wtemp0	set	126
 21030  0080                     wtemp1	set	128
 21031  0082                     wtemp2	set	130
 21032  0084                     wtemp3	set	132
 21033  0086                     wtemp4	set	134
 21034  0088                     wtemp5	set	136
 21035  007F                     wtemp6	set	127
 21036  007E                     ttemp	set	126
 21037  007E                     ttemp0	set	126
 21038  0081                     ttemp1	set	129
 21039  0084                     ttemp2	set	132
 21040  0087                     ttemp3	set	135
 21041  007F                     ttemp4	set	127
 21042  007E                     ltemp	set	126
 21043  007E                     ltemp0	set	126
 21044  0082                     ltemp1	set	130
 21045  0086                     ltemp2	set	134
 21046  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         264
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     80      80
    BANK1            80      8      80
    BANK2            80      0      79
    BANK3            80      0      78
    BANK4            80      0      69
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerIntr	PTR struct Dimmer_Interrupt size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK3[4]), VarLED2(BANK3[4]), VarLED1(BANK3[4]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 8
		 -> NULL(NULL[0]), DimmerLights2(BANK3[8]), DimmerLights1(BANK2[8]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK3[5]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_TMR_1
    _TMR1_ISR->_DimmerLights_TMR_2
    _IOC_ISR->_DimmerLights_IOC_1
    _IOC_ISR->_DimmerLights_IOC_2
    _DimmerLights_IOC_2->_Division
    _DimmerLights_IOC_1->_Division
    _Division->___lbdiv

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOn
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDelayOff_GO
    _setRFSW_AdjControl->_setDimmerIntr_MaxmumValue
    _setRFSW_AdjControl->_setProductData
    _setDimmerLights_DimmingRun->_DimmerLights_SelectPointer
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_Flash_Memory_Read
    _Exception_Main->_setBuz
    _setDimmerLights_Main->_setDimmerLights_OnOff
    _setDimmerLights_OnOff->_setDelayOff_GO
    _setLED->_LedPointSelect
    _setDimmerIntr_DimmingValue->_getDimmerLights_PercentToValue
    _setDelayOff_GO->_setProductData
    _getDelayOff_GO->_DelayOffPointSelect
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setDimmerIntr_MaxmumValue->_getDimmerLights_PercentToValue
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _DimmerIntr_Initialization->_getDimmerLights_PercentToValue
    _DimmerIntr_Initialization->_getDimmerLights_ValueToPercent
    _getDimmerLights_ValueToPercent->___fttol
    _getDimmerLights_PercentToValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftmul->___awtoft
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setProductData
    _setProductData->_getDimmerLights_ValueToPercent
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_DimmerLights_SelectPointer
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_OnOff

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  147340
                                              4 BANK1      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1434
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     424
                                              4 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     674
                                              4 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     311
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    4517
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         9     9      0    4517
                                             69 BANK0      9     9      0
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    3659
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    3659
                                             18 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      66
                                              2 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     117
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     930
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     930
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   43808
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   43808
                                              2 BANK1      2     2      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   40091
                                              0 BANK1      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    4192
                                             69 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   35715
             _getDimmerLights_Status
           _getMain_All_LightsStatus
                      _setCmd_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   10218
                                             77 BANK0      3     3      0
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   20720
                                             69 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
         _setDimmerLights_DimmingRun
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                   _setMemory_Modify
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setDimmerLights_DimmingRun                           3     2      1     177
                                              2 BANK0      3     2      1
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     160
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     320
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     114
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    1977
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     494
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     404
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     359
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     268
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     516
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     448
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      68
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      68
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    2084
                                              8 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
    _getAll_DimmerIntr_Dimming_Sw_RF
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerIntr_Dimming_Sw_RF                      4     4      0      95
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     270
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4    1052
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1018
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1018
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    3     3      0    1663
                                              6 BANK0      3     3      0
                _Flash_Memory_Modify
                _getAll_Sw_KeyStatus
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _getAll_Sw_KeyStatus                                  3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1520
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    1430
                                              4 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1    1290
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    3047
                                             13 BANK0      9     9      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 2     2      0      25
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   48762
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   48531
                                              1 BANK1      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
           _getMain_All_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                4     3      1   27800
                                             77 BANK0      3     2      1
                                              0 BANK1      1     1      0
                      _getCmd_Status
                     _getDelayOff_GO
     _getDimmerLights_PercentToValue
           _getMain_All_LightsStatus
                      _setCmd_Status
                     _setDelayOff_GO
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     908
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_Dimming_RF                             3     2      1     266
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     177
                                             66 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     266
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (6) _setDelayOff_GO                                       8     6      2    3719
                                             69 BANK0      8     6      2
                _DelayOffPointSelect
                             ___bmul
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) ___bmul                                               4     3      1     270
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setCmd_Status                                        3     2      1     222
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      47
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      89
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getCmd_Status                                        2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              4     3      1   20299
                                             74 BANK0      4     3      1
         _getDimmerIntr_DimmingValue
     _getDimmerLights_ValueToPercent
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                   _setMemory_Modify
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    3137
                                             69 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_MaxmumValue                            3     2      1     355
                                             66 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_Dimming_Sw                             3     2      1     266
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      69
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      6     6      0     187
                                              1 BANK0      6     6      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     161
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0   26941
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            1     1      0   26941
                                             66 BANK0      1     1      0
     _getDimmerLights_PercentToValue
     _getDimmerLights_ValueToPercent
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_ValueToPercent                       6     6      0   11771
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_PercentToValue                       6     6      0   15148
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     430
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     223
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    3377
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    3687
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    4221
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    3142
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2873
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    4662
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    4662
                                             69 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       3     2      1    2714
                                             66 BANK0      3     2      1
     _getDimmerLights_ValueToPercent (ARG)
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 5     5      0    1639
                                             13 BANK0      5     5      0
         _DimmerLights_SelectPointer
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1434
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     478
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0      66
                                              2 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      89
                                              2 BANK0      2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      66
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      66
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (7) _DelayOffPointSelect                                  2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  1     1      0    1082
                                             13 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0       0
                 _DimmerLights_TMR_1
                 _DimmerLights_TMR_2
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_2                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_1                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _IOC_ISR                                             0     0      0    1082
                 _DimmerLights_IOC_1
                 _DimmerLights_IOC_2
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_2                                  3     3      0     541
                                             10 COMMON     3     3      0
                           _Division
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_1                                  3     3      0     541
                                             10 COMMON     3     3      0
                           _Division
 ---------------------------------------------------------------------------------
 (12) _Division                                            5     4      1     496
                                              5 COMMON     5     4      1
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (13) ___lbdiv                                             5     4      1     251
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
       _getDimmerLights_PercentToValue
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _getDimmerLights_ValueToPercent
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setMemory_Modify
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_All_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setMemory_Modify
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _getCmd_Status
         _getDelayOff_GO
           _DelayOffPointSelect
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getMain_All_LightsStatus
         _setCmd_Status
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLights_SelectPointer
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLights_SelectPointer
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getAll_Sw_KeyStatus
     _getMain_All_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerIntr_Dimming_Sw_RF
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _getMain_All_LightsStatus
           _setCmd_Status
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_PercentToValue
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setDimmerIntr_Dimming_RF
             _setDimmerIntr_MaxmumValue
               _getDimmerLights_PercentToValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_DimmingRun
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setMemory_Modify
             _setProductData
               _getDimmerLights_ValueToPercent (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
       _setBuz
         ___awdiv
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_IOC_1
       _Division
         ___lbdiv
     _DimmerLights_IOC_2
       _Division
         ___lbdiv
   _TMR1_ISR
     _DimmerLights_TMR_1
     _DimmerLights_TMR_2

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       1       6        1.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      8      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4F       9       98.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4E      11       97.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      45      13       86.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     190      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     190      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Mon Feb 09 17:13:42 2015

                    __size_of_Switch_Main 000B                     ?_Flash_Memory_Erasing 0070  
                            _WDT_Clearing 0002                     __end_of_setCmd_Status 1C40  
                          ___bmul@product 0022                 getMain_Lights_Count@count 0020  
                                      l98 143C                                        _RD 0CA8  
                 __end_of_CC2500_WriteREG 1E9E                                        _WR 0CA9  
                            ___awdiv@sign 0026                                        _Sw 00D9  
                          setTemp_Main@AD 006C                       ___wmul@multiplicand 0022  
                    _getDimmerLights_Line 1B22                    __end_of_setDelayOff_GO 0CA8  
                            ___ftadd@exp1 004D                              ___ftadd@exp2 004C  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 164F  
                    _setDimmerLights_Line 1CDF                              ___ftadd@sign 004B  
                                     l100 1450                                       l110 12F1  
                                     l112 1301                                       l108 1307  
                                     l109 1303                      _setDimmerLights_SwOn 0802  
                                     l327 1C4C                                       l328 1C4E  
                                     l371 1006                                       l259 1769  
                                     l581 0935                                       l761 1BB2  
                                     l922 1B2B                                       l923 1B33  
                                     l917 1CEE                                       l861 1DAB  
                                     l888 06B5                                       _GIE 005F  
                                     _CRC 00D3                                       _RA0 0060  
                                     _RB0 0068      __size_of_DimmerLights_Initialization 000B  
                                     _RB1 0069                                       _RA3 0063  
                                     _RC0 0070                                       _RB2 006A  
                                     _RA4 0064                                       _LED 00D7  
                                     _RC1 0071                                       _RB3 006B  
                                     _RC2 0072                                       _RB4 006C  
                                     _RA6 0066                                       _RB5 006D  
                                     _RA7 0067                                       _RC4 0074  
                                     _RC5 0075                                       _RC7 0077  
                                     _RF1 00A0                                       _ISR 0004  
                                     _WDT 0136                                       _Cmd 00D4  
            getDimmerLights_Status@lights 0022                                       _Sw1 01BE  
                                     _Sw2 01C7                ??_setDimmerIntr_Dimming_RF 0021  
              ??_setDimmerIntr_Dimming_Sw 0021           setDimmerIntr_Dimming_RF@command 0020  
                __end_of_CC2500_WriteByte 1C59                     _Buzzer_Initialization 18C0  
                         __end_of_ADC_Set 1904                                       wreg 0009  
    setDimmerLights_Initialization@lights 0070              getDimmerLights_Status@status 0023  
     __end_of_setDimmerIntr_ControlStatus 1F6F               _setDimmerIntr_ControlStatus 1F40  
                       ??_getSw_KeyStatus 0020                                      ?_ISR 0070  
                            ___ftdiv@cntr 0038                           __end_of_IOC_ISR 1986  
                   _setDimmerLights_OnOff 062A          setDimmerLights_DimmingRun@lights 0024  
                              Load_Main@i 0030                              ___ftdiv@sign 003D  
                                    l1137 1D80                                      l1138 1D8A  
                                    l2211 1057                                      l1172 1279  
                                    l3022 1D22                                      l2151 0626  
                                    l2218 0CBE                                      l1611 008A  
                                    l2227 0D36                                      l2155 0575  
                                    l3212 0427                                      l1620 01D8  
                                    l1612 0086                                      l2156 05C6  
                                    l1445 1239                                      l1613 0081  
                                    l2181 19F8                                      l1609 01FE  
                                    l1459 1FC6                                      l1619 01DA  
                                    l2196 0A1B                                      l1469 0B8D  
                         __end_of_IOC_Set 1964                                      l3183 14F2  
                                    l2570 0380                                      l2548 1B90  
                                    l2572 024C                                      l3189 1509  
                                    l1783 0E8D                            _Load_Main$3690 002A  
                                    l7001 11B1                                      l1794 0E85  
                                    l2917 0554                                      l7013 0AA6  
                                    l1789 0E00                                      l2861 113E  
                                    l2926 1C3F                                      l7201 1FF5  
                                    l7041 1EB1                                      l7017 0AAB  
                                    l2890 1FFA                                      l6323 14CF  
                                    l7035 1EA8                                      l7027 0AFB  
                                    l6421 1BC0                                      l6333 14F7  
                                    l6325 14D9                                      l6501 03FD  
                                    l2885 1FE3                                      l7037 1EAB  
                                    l2886 1FFE                                      l6431 1BD7  
                                    l6335 14FF                                      l6327 14DE  
                                    l6319 14C8                                      l6511 0419  
                                    l6503 0402                                      l7143 1F58  
                                    l7151 1C05                                      l7063 12A5  
                                    l7311 0CCD                                      l7303 0CA9  
                                    l6353 136C                                      l6521 044B  
                                    l6513 0423                                      l6505 0406  
                                    l6601 0EF9                                      l7161 1BA8  
                                    l6441 1A72                                      l7241 132E  
                                    l7073 12B5                                      l7065 12A8  
                                    l7321 0D19                                      l7313 0CD4  
                                    l8201 1DC3                                      l6371 138B  
                                    l6531 0466                                      l7171 1F2B  
                                    l7227 131D                                      l7235 1325  
                                    l7075 12B8                                      l7403 1785  
                                    l7323 0D1D                                      l7315 0CEF  
                   _setDimmerLights_SwOff 10CB                                      l6381 13A6  
                                    l6517 0439                                      l6541 0D4E  
                                    l6613 0F15                                      l6605 0F01  
                                    l6437 1A6C                                      l7261 1352  
                                    l9013 0527                                      l7069 12AE  
                                    l7421 16CD                                      l7317 0D11  
                                    l8205 1DC8                                      l6359 1377  
                                    l6471 03B0                                      l7191 1FDE  
                                    l7271 1A5B                                      l9015 0502  
                                    l7079 12BE                                      l7423 16D0  
                                    l7319 0D15                                      l7327 0D21  
                                    l6385 13AE                                      l6377 139D  
                                    l6369 137F                                      l6481 03C6  
                                    l6561 0DA5                                      l6617 0F1D  
                                    l6641 0BAE                                      l7193 1FE7  
                                    l7505 1177                                      l7257 134E  
                                    l7265 1356                                      l7249 1336  
                                    l9017 052F                                      l9025 054A  
                                    l8225 1A2F                                      l8305 0E12  
                                    l6459 1E64                                      l6475 03B7  
                                    l6547 0D64                                      l7507 117C  
                                    l7275 1A62                                      l9019 0539  
                                    l8251 0B86                                      l8243 0B2B  
                                    l7443 16E8                                      l7427 16D6  
                                    l7371 173E                                      l8307 0E15  
                                    l6725 0816                                      l6493 03E0  
                                    l6661 0BEC                                      l7277 1A67  
                                    l7533 068F                                      l8237 0B16  
                                    l7445 1701                                      l7365 1735  
                                    l8413 0607                                      l8501 02F4  
                                    l6735 0827                                      l6727 0819  
                                    l6583 0EA8                                      l6671 0C05  
                                    l6815 1BEE                                      l6823 1F87  
                                    l7551 06C5                                      l7527 0671  
                                    l6903 1C85                                      l7391 1772  
                                    l7367 1738                                      l8511 0328  
                                    l6745 0850                                      l6737 082C  
                                    l6569 0DBE                                      l7529 0688  
                                    l7537 0695                                      l6921 1D0C  
                                    l7385 1750                                      l8337 0E5D  
                                    l6747 0855                                      l6499 03F3  
                                    l6675 0C13                                      l6667 0BF9  
                                    l6659 0BDE                                      l7483 1150  
                                    l7555 06CC                                      l7651 1FAE  
                                    l7803 1082                                      l6923 1D12  
                                    l7395 1778                                      l7731 09E2  
                                    l7715 09C1                                      l8427 061F  
                                    l8443 1B95                                      l8347 0E72  
                                    l6589 0EBE                                      l6669 0C02  
                                    l6781 0C5A                                      l8541 1D1C  
                                    l7397 177C                                      l7389 176F  
                                    l8461 0236                                      l8349 0E74  
                                    l6759 10F9                                      l7495 1166  
                                    l6839 1639                                      l7575 13CE  
                                    l6791 0C8A                                      l7911 16AD  
                                    l7807 108B                                      l6935 1017  
                                    l6943 1E84                                      l7399 177F  
                                    l7743 09F7                                      l7727 09D9  
                                    l8447 1B9B                                      l8199 1DC0  
                                    l9191 1493                                      l8561 12DB  
                                    l7841 0960                                      l7497 1169  
                                    l7569 06F8                                      l6937 1022  
                                    l6945 1E87                                      l8385 05C1  
                                    l8721 0A5B                                      l8713 0A3C  
                                    l7843 096F                                      l6971 1C2A  
                                    l6795 0C9E                                      l8643 077D  
                                    l7755 1C1C                                      l7771 1D65  
                                    l8299 0E03                                      l9187 1488  
                                    l7853 0993                                      l6965 1AFA  
                                    l7909 16A6                                      l6949 1E8D  
                                    l7781 1D73                                      l8477 027F  
                                    l8741 0A8A                                      l8725 0A63  
                   _myMain_Initialization 1B0F                                      l7855 09A2  
                                    l6975 1C39                                      l7871 1E20  
                                    l8831 0171                                      l7695 1A51  
                                    l8399 05D5                                      l8487 02B4  
                                    l7881 1E30                                      l8825 0162  
                                    l6897 1C7C                                      l7769 1D63  
                                    l7795 1064                                      l7883 1E35  
                                    l8835 018E                                      l6899 1C7F  
                                    l7779 1D6F                                      l8915 11EE  
                                    l8597 1DAD                                      l8669 1218  
                                    l7797 1070                                      l8845 01AA  
                                    l8855 01C0                                      l8839 019A  
                                    l8759 0068                                      l7897 1677  
                                    l8793 00AD                                      l8777 0089  
                                    l8945 111E                                      _CFGS 0CAE  
                                    l7899 167E                                      l8891 01ED  
                                    l8983 04AE                                      l8799 00DF  
                            __CFG_WDTE$ON 0000                                      l8977 049E  
                                    l8995 04E5                                      l8987 04BD  
                                    l8997 04C0                                      l8999 04ED  
                                    _FREE 0CAC                                      _LATA 010C  
                                    _LATB 010D                                      _LATC 010E  
                                    u5125 14D4                                      u5145 14ED  
                                    _PEIE 005E                                      u6220 15F4  
                                    u5245 1382                                      u5165 14FA  
                                    u5265 138C                                      u6225 15F2  
                                    u5275 1396                                      u5195 1510  
                                    u5515 03E1                                      u5285 139E  
                                    u5605 041A                                      u6165 0C66  
                                    u6325 100C                                      u5545 03F4  
                                    u5705 0DB5                                      u5715 0DBF  
                                    u7315 1B83                                      u5575 0407  
                                    u5825 0F1E                                      u5905 0BDF  
                                    u5675 0D76                                      u5835 0F24  
                                    u5755 0ECA                                      u9125 12D1  
                                    u5685 0D86                                      u5765 0EDA  
                                    u5695 0DA6                                      u5935 0BFA  
                                    u5785 0F02                                      u5795 0F08  
                                    u5875 0BB5                                      u9325 1230  
                                    u9085 1D23                                      u5965 1B59  
                                    u7655 1067                                      u9095 1D28  
                                    u7675 1071                                      u8715 0E64  
                                    u9435 0A7A                                      u7685 107B  
                                    u9605 0121                                      u8805 0599  
                                    u7695 1083                                      u9385 0A4B  
                                    u8835 05F6                                      u9900 04EB  
                                    u8695 0E46                                      u9905 04C9  
                                    u9585 00AB                                      u9930 052D  
                                    u9595 00DD                                      u9835 1136  
                                    _LWLO 0CAD                                      u9685 01A1  
                                    u9935 050B                                      u9795 11E2  
                                    _RSSI 013A                                      _WREN 0CAA  
                                    _WPUB 020D        __end_of_setDimmerLights_DimmingRun 1CC3  
              _setDimmerLights_DimmingRun 1CA8                                      _Buz1 0120  
                                    _Load 013F                                      _Temp 00DC  
                                    _main 1464                              ___ftpack@arg 0020  
                     __end_of_DlyOff_Main 093C                           __end_of_RF_Main 18CC  
                            ___ftpack@exp 0023                                      fsr0h 0005  
                                    fsr1h 0007                                      fsr0l 0004  
                                    indf0 0000                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                         __end_of_WDT_Set 19DA                                      ltemp 007E  
           __size_of_setRF_Initialization 000B                                      start 001F  
                                    ttemp 007E                                      wtemp 007E  
              __end_of_setRFSW_AdjControl 0B0F                         ___bmul@multiplier 0023  
                            ___ftmul@cntr 003C                              ___ftmul@sign 003D  
            __size_of_Temp_Initialization 0003      _getDimmerLights_Allow_Condition$2417 0022  
    _getDimmerLights_Allow_Condition$2418 0023      _getDimmerLights_Allow_Condition$2419 0024  
                       ?_getDimmer_LoadGO 0070                                     ??_ISR 007D  
                            ___fttol@exp1 005B                              ___fttol@lval 0057  
       setDimmerLights_DimmingRun@command 0022   __end_of_getDimmerLights_Allow_Condition 117E  
__size_of_getDimmerLights_Allow_Condition 003E         ??_getDimmerLights_Allow_Condition 0021  
        ?_getDimmerLights_Allow_Condition 0070           _getDimmerLights_Allow_Condition 1140  
                  _getDimmerLights_Status 1A02                        ??_getDimmer_LoadGO 0020  
                        __end_of_LED_Main 19C2                     ?_getDimmerLights_Line 0070  
                              _DimmerIntr 0138                     ?_setDimmerLights_Main 0070  
                   ?_setDimmerLights_Line 0070                           ?_setDelayOff_GO 0065  
                   ?_setDimmerLights_SwOn 0070                                     ?_main 00EA  
                         __end_of___awdiv 13B5                           __end_of___lbdiv 1E16  
                         __end_of___ftadd 047E                           __end_of___ftdiv 0DE0  
                         __end_of___ftneg 1945                           __end_of___ftmul 0F45  
                         ___awdiv@divisor 0020                                     _T1CON 0018  
                         __end_of___fttol 0C1C                                     _IOCBF 0396  
                                   _IOCBN 0395                                     _IOCBP 0394  
                                   _IOCIE 005B                                     _IOCIF 0058  
                         __end_of___lwdiv 1092                                     i1l960 0881  
                                   i1l971 0893                                     i1l982 08B7  
                                   i1l968 087D                                     i1l977 08B9  
                                   i1l969 087B                                     i1l979 08AE  
                                   i1l988 08CB                           ___awdiv@counter 0025  
           __size_of_CC2500_FrequencyCabr 000C                                     _TMR1H 0017  
                                   _TMR1L 0016                                     _PORTA 000C  
                                   _PORTB 000D                                     _PORTC 000E  
                            ?_setLED_Main 0070                        setRF_Learn@command 0021  
                                   _TRISA 008C                                     _TRISB 008D  
                                   _TRISC 008E                   __end_of_Timeout_Counter 1B89  
                           __CFG_WRT$HALF 0000    __end_of_getDimmerLights_ValueToPercent 15EA  
 __size_of_getDimmerLights_ValueToPercent 0065            _getDimmerLights_ValueToPercent 1585  
                                   _Light 0139                          __end_of_TMR1_ISR 1E59  
                 __size_of_setProductData 000C              __size_of_CC2500_WriteCommand 001A  
                        __end_of_TMR1_Set 19CE                                     _getAD 1DB5  
                           ___awtoft@sign 002D                             ___ftpack@sign 0024  
             __size_of_CC2500_ClearRXFIFO 0004                             ??_Buzzer_Main 0020  
                        __end_of_WDT_Main 1AC3               __size_of_CC2500_ClearTXFIFO 0004  
                     CC2500_RxData@loop_f 0025                            __CFG_BOREN$OFF 0000  
            __end_of_getMain_Lights_Count 1A9F                        Flash_Memory_Read@i 0021  
                        ?_CC2500_ReadByte 0070                                     ltemp0 007E  
                                   ltemp1 0082                                     ltemp2 0086  
                                   ltemp3 0080            __size_of_setLED_Initialization 0012  
           __end_of_setLED_Initialization 1A8D                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                            ?_setRF_Learn 0070                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F                       _getAll_Sw_KeyStatus 1A24  
                      _setRF_DimmerLights 15EA                           ___lbdiv@divisor 0070  
             __size_of_Flash_Memory_Write 002F                         ?_CC2500_SIDLEMode 0070  
                         ___lbdiv@counter 0073                __size_of_RF_Initialization 0003  
        __size_of_DelayOff_Initialization 0008                    ?_setLoad_AH_AL_Restore 0070  
                       setTemp_Main@error 0066               __size_of_setRF_TransceiveGO 0013  
                  ??_Flash_Memory_Erasing 0020               ??_setDimmerLights_DimmingOn 0022  
                      ??_CC2500_SIDLEMode 0024                           __initialization 0021  
                        ?_CC2500_PowerRST 0070                         ?_setMemory_Modify 0070  
                        __end_of_Division 19F3                   __size_of_getDelayOff_GO 0011  
                            __end_of_main 14BF                       ?_setRF_DimmerLights 0065  
                        __end_of_Fosc_Set 18D6            getMain_All_LightsStatus@status 0020  
                      ??_setMemory_Modify 0020              setDimmerLights_OnOff@command 006D  
                          _Exception_Main 047E                          ?_CC2500_WriteREG 0022  
                               ??_ADC_Set 0020                      _setSw_Initialization 192C  
                                  ??_main 0070                             ___fttol@sign1 0056  
                    ?_getAll_Sw_KeyStatus 0070                              ?_setLog_Code 0070  
             ?_setDimmerIntr_DimmingValue 0062              ??_DimmerLights_SelectPointer 0020  
                 _setControl_Lights_Table 0CA8                            _setMemory_Data 1992  
                  ?_Buzzer_Initialization 0070                   ??_DlyOff_Initialization 0022  
                              _Receive_OK 0770        setDimmerIntr_ControlStatus@command 0020  
                 _setDimmerLights_Dimming 13B5                                 ??_IOC_ISR 007D  
                               ??_IOC_Set 0020                               _DimmerIntr1 00BB  
                             _DimmerIntr2 00C7                  _getMain_All_LightsStatus 1AE9  
                __size_of_setRFSW_Control 0040                        _RF_Timeout_Counter 1B4A  
                 ??_Switch_Initialization 0025                    ?_setDimmerLights_OnOff 006D  
                    ??_setRF_DimmerLights 0066                                    ?_getAD 0020  
                       ??_getRF_KeyStatus 0020                    ?_setDimmerLights_SwOff 0070  
                             _DlyOff_Main 08CD                    ?_myMain_Initialization 0070  
                                  _ADCON0 009D                                    _ADCON1 009E  
                               ??_RF_Main 0070                                    _ADRESH 009C  
                                  _ADRESL 009B                          ___awdiv@dividend 0022  
                   _getDimmer_Load_Status 1924                                 ??_WDT_Set 0020  
                        __end_of___awtoft 1E7B                                    _ANSELA 018C  
                                  _ANSELB 018D                                    _ANSELC 018E  
                        __end_of___ftpack 1520                  _getMain_All_Error_Status 1FCD  
                                  _IOCBF2 1CB2                                    i1l1001 17B5  
                                  i1l1014 17EC                                    i1l1016 17E1  
                                  i1l1008 17C6                                    i1l1025 17FE  
                                  i1l1019 17EA                                    i1l1408 001A  
                                  i1l8003 08C4                                    i1l8041 17A0  
                                  i1l8123 07F8                                    i1l7341 1E05  
                                  i1l8053 17B1                                    i1l7351 1E14  
                                  i1l8047 17A8                                    i1l7339 1DFC  
                                  i1l8097 17F7                                    i1l8089 17E3  
                                  i1l9147 0012                                    i1l8615 1E52  
                                  i1l8625 1982                                    i1l7947 086B  
                                  i1l7957 0873                                    i1l7995 08B0  
                                  _FVRCON 0117      getDimmerLights_Allow_Condition@allow 0026  
                                  _PMADRH 0192                                    _PMADRL 0191  
                                  _PMDATH 0194                                    _PMDATL 0193  
                     ?_RF_Timeout_Counter 0070                                    _PMCON2 0196  
                                  _OSCCON 0099                        __size_of_Load_Main 01B2  
                                  u922_25 1E4D                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    _IO_Set 1C8D  
                                  _WDTCON 0097                        DelayTime_1us@count 0020  
                    Exception_Main@i_6926 0032            __size_of_CC2500_PowerOnInitial 0015  
             ??_setDimmerIntr_MaxmumValue 0063             __end_of_CC2500_PowerOnInitial 1B74  
                                  _Dimmer 012C                                    _DlySw1 01D8  
                                  _DlySw2 01DD             __size_of_setRF_TimeoutCleared 0004  
                   __end_of_getCmd_Status 1A69                __end_of_Mcu_Initialization 1AB1  
                     __end_of_Buzzer_Main 130E                                    _Memory 0220  
                                  _Timer1 0131                                    ___bmul 1A69  
                  __end_of_Exception_Main 0555                      Exception_Main@lights 0035  
                                  ___wmul 1D19                                 ??___awdiv 0024  
                               ??___lbdiv 0071                                 ??___ftadd 0047  
            __size_of_DelayOffPointSelect 0017                                 ??___ftdiv 0034  
                               ??___ftneg 0041                                 ??___ftmul 0034  
                               ??___fttol 0052              ?_Flash_Memory_Initialization 0070  
                  ??_getDimmerLights_Line 0020                                 ??___lwdiv 0024  
                  ??_setDimmerLights_Main 0070                    ??_setDimmerLights_Line 0020  
                                  _r_data 013E                      Exception_Main@status 002E  
 __end_of_getAll_DimmerIntr_Dimming_Sw_RF 1E37  __size_of_getAll_DimmerIntr_Dimming_Sw_RF 0021  
       ??_getAll_DimmerIntr_Dimming_Sw_RF 0020          ?_getAll_DimmerIntr_Dimming_Sw_RF 0070  
         _getAll_DimmerIntr_Dimming_Sw_RF 1E16                                    _s_data 00DB  
                  ??_setDimmerLights_SwOn 002D                                    _setLED 130E  
                                  _myMain 00AE                      ??_RF_Timeout_Counter 0020  
                  __end_of_setMemory_Data 199E                     ?_setSw_Initialization 0070  
                        ___awdiv@quotient 0027                                    _setBuz 140B  
                      __size_of_Temp_Main 0003                      Load_Main@LightsCount 002F  
             __end_of_Load_Initialization 18C6          ??_setDimmerLights_Initialization 0020  
         ?_setDimmerLights_Initialization 0070                     ??_getAll_Sw_KeyStatus 0020  
        __end_of_setDimmerIntr_Dimming_RF 1F9E          __end_of_setDimmerIntr_Dimming_Sw 1F40  
                   ___ftmul@f3_as_product 0039                 _setDimmerLights_DimmingOn 1EC3  
                Flash_Memory_Read@address 0022                          ?_Timeout_Counter 0070  
              __end_of_setMemory_LoopSave 1B0F               getMain_Lights_Count@status1 0021  
             getMain_Lights_Count@status2 0022               __size_of_DimmerLights_IOC_1 0039  
             __size_of_DimmerLights_IOC_2 003A                     __end_of_SwPointSelect 1C27  
             __size_of_DimmerLights_TMR_1 006F               __size_of_DimmerLights_TMR_2 006E  
            __size_of_Flash_Memory_Modify 0086                   __size_of_LedPointSelect 0020  
         setDimmerIntr_Dimming_Sw@command 0020                        setTemp_Main@TempGO 006B  
                        ___lbdiv@dividend 0072                       Flash_Memory_Write@i 0021  
            __size_of_Flash_Memory_Unlock 0009                                _TouchPower 1B89  
             __size_of_CC2500_InitPATable 001F                       CC2500_TxData@loop_e 0025  
        __end_of_CC2500_registers_address 182F                   __end_of__initialization 004E  
         setDimmerIntr_DimmingValue@value 0062           getDimmerIntr_DimmingValue@value 0021  
                               ?_LED_Main 0070                                ___ftadd@f1 0041  
                              ___ftadd@f2 0044                      _getRF_KeyStatus$5113 0022  
                           ?_my_MainTimer 0070                 _setDimmerLights_SwOn$2340 002E  
               _setDimmerLights_SwOn$2349 002F                                ___ftdiv@f1 0031  
                              ___ftdiv@f2 002E                                ___ftdiv@f3 0039  
                              ___ftneg@f1 003E                                ___awtoft@c 0028  
                     ___bmul@multiplicand 0020              ?_DimmerLights_Initialization 0070  
                              ___ftmul@f1 002E                                ___ftmul@f2 0031  
              ?_DimmerIntr_Initialization 0070                                ___fttol@f1 004E  
                          __pcstackCOMMON 0070                           ?_Exception_Main 0070  
                            __pidataBANK4 1DD5                             __end_of_getAD 1DD5  
                               ?_TMR1_ISR 0070                                 ?_TMR1_Set 0070  
                  setLoad_AH_AL_Restore@i 0021                 setMemory_LoopSave@command 0021  
                      _LED_Initialization 19AA                           _getSw_KeyStatus 1D56  
               ??_setControl_Lights_Table 0070                        getRF_KeyStatus@key 0021  
                         ?_setMemory_Data 0020          ??_getDimmerLights_PercentToValue 005C  
         ?_getDimmerLights_PercentToValue 0070                 ??_setDimmerLights_Dimming 006B  
           ??_Flash_Memory_Initialization 0024                          ___lbdiv@quotient 0074  
                    _getMain_Lights_Count 1A8D                                 ?_WDT_Main 0070  
                       __end_of_Load_Main 0204         setDimmerIntr_ControlStatus@lights 0022  
                      __size_of_getBuz_GO 0011                 _setDimmerIntr_MaxmumValue 1BE2  
              __end_of_set_TimeoutCleared 18EB           setDimmerIntr_MaxmumValue@lights 0064  
                      __size_of_getRxData 0072                       ?_LED_Initialization 0070  
                       ?_CC2500_WriteByte 0070                            _setProductData 1986  
                    __size_of_setLED_Main 0041                    ?_getDimmer_Load_Status 0070  
                                 ??_getAD 0023                       _Temp_Initialization 18CC  
                      ??_CC2500_WriteByte 0020                                 ?_Division 0075  
                              __pbssBANK1 00A0                                __pbssBANK2 0120  
                              __pbssBANK3 01A0                                __pbssBANK4 0220  
                               ?_Fosc_Set 0070                               _Buzzer_Main 12C4  
                       ??_setRFSW_Control 006D               ?_setDimmerLights_DimmingRun 0022  
                       __end_of_Temp_Main 18D2                                   ?_IO_Set 0070  
                          ??_my_MainTimer 002D                                ??_LED_Main 0025  
                         __CFG_VCAPEN$OFF 0000                   _DelayOff_Initialization 1904  
                           ??_Switch_Main 0035                            DelayTime_1us@i 0022  
                          DelayTime_1us@j 0024                      ??_LED_Initialization 0025  
                            _DimmerLights 00D6                         LedPointSelect@led 0021  
   getAll_DimmerIntr_Dimming_Sw_RF@status 0023                    __size_of_DelayOff_Main 0008  
                    __size_of_setRF_Learn 0014                               setBuz@count 002C  
                 ?_getDimmerLights_Status 0070                                __pmaintext 1464  
                          _getDelayOff_GO 1A13                       _CC2500_WriteCommand 1C73  
                    ?_Temp_Initialization 0070                                   ?___bmul 0020  
                        ??_setDelayOff_GO 0067         __end_of_DimmerIntr_Initialization 09AB  
           ??_DimmerLights_Initialization 0063                                   ?___wmul 0020  
                              ??_TMR1_ISR 0071                             ?_setTemp_Main 0070  
                              _getLoad_AD 0A1D                                ??_TMR1_Set 0020  
                              __pintentry 0004                    ??_setSw_Initialization 0024  
                              _getLoad_OK 1914                        __size_of_setTxData 00BB  
                                 ?_setLED 0022                    __size_of_DelayTime_1us 0026  
                   ?_getMain_Lights_Count 0070                                   _ADC_Set 18FD  
                                 ?_setBuz 0029                                 ?___awtoft 0028  
                               ?___ftpack 0020                                _getTemp_AD 11BE  
      __end_of_DimmerLights_SelectPointer 1BE2                _DimmerLights_SelectPointer 1BCB  
                              ??_WDT_Main 0020              __end_of_setRF_Initialization 196F  
                      _setRFSW_AdjControl 0A8F                    __end_of_setProductData 1992  
           setDimmerLights_Dimming@lights 006D                                   _IOC_ISR 197A  
                                 _IOC_Set 1959                      __size_of_setLog_Code 0034  
           setDimmerLights_Dimming@status 006A     getDimmerLights_Allow_Condition@lights 0025  
                    ?_CC2500_WriteCommand 0070                         _Flash_Memory_Main 11FE  
               __size_of_getDimmer_LoadGO 0008                         _Flash_Memory_Read 1C59  
                  __size_of_CC2500_RxData 006B                    __size_of_CC2500_TxData 006D  
                     ?_setRFSW_AdjControl 0070                                   _RF_Data 01A0  
                                 _RF_Main 18C9                        ?_Flash_Memory_Main 0070  
                      ?_Flash_Memory_Read 0070                                ??_Division 0076  
                                 _WDT_Set 19CE           __end_of_setControl_Lights_Table 0D37  
                         setRF_Main@error 00E9                    __size_of_setCmd_Status 0019  
                              ??_Fosc_Set 0020                               ?_TouchPower 0070  
         __end_of_setDimmerLights_Dimming 140B                   ??_setLoad_AH_AL_Restore 0020  
                     getCmd_Status@number 0020              __end_of_CC2500_FrequencyCabr 19E6  
                         __size_of_IO_Set 001B                       setCmd_Status@number 0022  
       __size_of_setDimmerIntr_Dimming_RF 002F         __size_of_setDimmerIntr_Dimming_Sw 002B  
                       __end_of_getBuz_GO 1A46                 ?_setDimmerIntr_Dimming_RF 0020  
                     ??_Flash_Memory_Main 0026                 ?_setDimmerIntr_Dimming_Sw 0020  
                     ??_Flash_Memory_Read 0020                    __end_of_getDelayOff_GO 1A24  
                                 _VarLED1 01E6                                   _VarLED2 01EA  
          __end_of_getDimmerLights_Status 1A13                         __end_of_getRxData 0A1D  
                 __end_of_getSw_KeyStatus 1D75                  _CC2500_registers_address 1800  
                   ??_Temp_Initialization 0020                      ??_setRFSW_AdjControl 0065  
                          ??_setTemp_Main 0065                           __size_of___bmul 0012  
                     setProductData@value 0062                                   ___awdiv 1361  
                                 ___lbdiv 1DF5                                   ___ftadd 0388  
                                 ___ftdiv 0D37                                   ___ftneg 193C  
                         __size_of___wmul 001E                                   ___ftmul 0E91  
                                 ___fttol 0B95                       __end_of_Switch_Main 197A  
                                 ___lwdiv 105B                ??_getMain_All_LightsStatus 0020  
                 ??_Buzzer_Initialization 0020                           _getRF_KeyStatus 1A46  
                              ??___awtoft 002B                                ??___ftpack 0025  
                         __size_of_setLED 0053                      setRFSW_AdjControl@sw 0068  
                         __size_of_setBuz 0059                                   __ptext1 1104  
                                 __ptext2 1B0F                                   __ptext3 11BE  
                                 __ptext4 0A1D                                   __ptext5 1DB5  
                                 __ptext6 1AB1                                   __ptext7 0002  
                                 __ptext8 18CF                                   __ptext9 0DE0  
               __size_of_CC2500_SIDLEMode 0004                              __size_of_ISR 001B  
              ??_getMain_All_Error_Status 0020                   ??_setDimmerLights_OnOff 006E  
                         ?_setProductData 0062                 __end_of_Flash_Memory_Main 123F  
               __end_of_Flash_Memory_Read 1C73                   ??_setDimmerLights_SwOff 0022  
                              _setRF_Main 0555                   ??_myMain_Initialization 0020  
                           _DelayOff_Main 190C                         _DimmerLights_Main 1D95  
          __size_of_DlyOff_Initialization 0006                     ??_CC2500_WriteCommand 0022  
               __size_of_setMemory_Modify 0013             __end_of_DlyOff_Initialization 18F1  
              __end_of_CC2500_ClearRXFIFO 18DE                  ??_setTemp_Initialization 0020  
              __end_of_CC2500_ClearTXFIFO 18E2                              ?_DlyOff_Main 0070  
                      ?_DimmerLights_Main 0070                                   _product 00EF  
                          _LedPointSelect 1D75                 getAll_Sw_KeyStatus@status 0021  
                         getTemp_AD@ADRES 0026                       _DelayOffPointSelect 1BB4  
                                 clrloop0 18F8            __size_of_Switch_Initialization 0008  
           __end_of_Switch_Initialization 193C                      end_of_initialization 004E  
               ??_DelayOff_Initialization 0023                         _CC2500_InitSetREG 1EEB  
                           _DelayTime_1us 1001                         __end_of_setTxData 1000  
              __end_of_Flash_Memory_Write 1FCD        __size_of_setDimmerLights_DimmingOn 0028  
                                 init_ram 18F1                __end_of_setRF_TransceiveGO 1AE9  
                      ?_CC2500_InitSetREG 0070                       ??_DimmerLights_Main 0070  
                    Flash_Memory_Read@ret 0023                                   initloop 18F2  
                              _setSw_Main 0204                     CC2500_ReadByte@loop_b 0021  
                  setDimmerLights_SwOn@sw 0031                         _CC2500_ReadStatus 1E9E  
                    Flash_Memory_Modify@i 0025                     _setLED_Initialization 1A7B  
                         ?_getDelayOff_GO 0070                                getBuz_GO@i 0024  
                      ?_CC2500_ReadStatus 0070                  __size_of_CC2500_ReadByte 001D  
                           _CC2500_RxData 16BA                             _CC2500_TxData 1725  
                     ??_CC2500_InitSetREG 0025             __size_of_Flash_Memory_Erasing 000C  
                    ?_DelayOffPointSelect 0070                       _Flash_Memory_Modify 0B0F  
                             ?_getLoad_AD 0070                               ?_getLoad_OK 0070  
                  ??_getMain_Lights_Count 0020                              __pstringtext 1800  
                           _setCmd_Status 1C27                       _Flash_Memory_Unlock 1945  
                     ??_CC2500_ReadStatus 0022                   CC2500_InitSetREG@loop_c 0028  
                             ?_getTemp_AD 0070                       __size_of_TouchPower 0015  
                setLED_Initialization@led 0024                   setTemp_Main@DangerValue 0069  
                  setSw_Initialization@sw 0024                 __end_of_DimmerLights_Main 1DB5  
                      _Mcu_Initialization 1A9F                  __size_of_CC2500_PowerRST 0044  
            __end_of_setRF_TimeoutCleared 18DA                      __end_of_my_MainTimer 1140  
                          ?_DelayOff_Main 0070                          __CFG_FOSC$INTOSC 0000  
                  __end_of_LedPointSelect 1D95                  __size_of_CC2500_WriteREG 0023  
                Load_Main@ErrorCountValue 002D          setDimmerIntr_DimmingValue@lights 0064  
        getDimmerIntr_DimmingValue@lights 0022                 __end_of_CC2500_InitSetREG 1F15  
                     ?_Mcu_Initialization 0070                      ?_Flash_Memory_Modify 0070  
             __size_of_setRF_DimmerLights 0065                            ?_DelayTime_1us 0020  
                    ?_Flash_Memory_Unlock 0070        __size_of_setDimmerIntr_MaxmumValue 0017  
               __end_of_CC2500_ReadStatus 1EC3                             ?_RF_RxDisable 0070  
          setDimmerIntr_Dimming_RF@lights 0022           getMain_All_Error_Status@command 0025  
                             ___ftdiv@exp 003C         __end_of_setDimmerLights_DimmingOn 1EEB  
                        ??_Exception_Main 002D                            __end_of_IO_Set 1CA8  
                    _setRF_Initialization 1964                        _setMemory_LoopSave 1AFC  
                             _Switch_Main 196F                         __size_of_LED_Main 000C  
                        ?_getSw_KeyStatus 0070                            ?_CC2500_RxData 0070  
                          ?_CC2500_TxData 0070                   __end_of_getRF_KeyStatus 1A57  
                        ??_setMemory_Data 0021                               ___ftmul@exp 0038  
                   _CC2500_PowerOnInitial 1B5F               ??_DimmerIntr_Initialization 0062  
                    ??_Mcu_Initialization 0021               __end_of_getAll_Sw_KeyStatus 1A35  
                   ??_DelayOffPointSelect 0020                             ?_WDT_Clearing 0070  
                          ?_setCmd_Status 0020                 DimmerLights_IOC_1@dimming 007C  
                     ?_setMemory_LoopSave 0070                            __end_of___bmul 1A7B  
     __size_of_getDimmerIntr_DimmingValue 0016                 DimmerLights_IOC_2@dimming 007C  
                    setRF_DimmerLights@on 0065                            __end_of___wmul 1D37  
                       getSw_KeyStatus@sw 0024               __size_of_RF_Timeout_Counter 0015  
                       __size_of_TMR1_ISR 0022             __size_of_getDimmerLights_Line 0014  
        DimmerLights_SelectPointer@lights 0021                         __size_of_TMR1_Set 000C  
           __size_of_setDimmerLights_Main 006B                            __end_of_setLED 1361  
                           __pbitbssBANK1 0770             __size_of_setDimmerLights_Line 001D  
           __size_of_setDimmerLights_SwOn 005C                            __end_of_setBuz 1464  
              __end_of_DimmerLights_IOC_1 10CB                __end_of_DimmerLights_IOC_2 07FF  
                    _CC2500_FrequencyCabr 19DA                   ??_getDimmer_Load_Status 0020  
              __size_of_Flash_Memory_Main 0041                __size_of_Flash_Memory_Read 001A  
                             ?_setRF_Main 0070                           _setRFSW_Control 117E  
                       __size_of_WDT_Main 0012                __end_of_DimmerLights_TMR_1 08CD  
              __end_of_DimmerLights_TMR_2 1800                       start_initialization 0021  
                         ?_LedPointSelect 0070                                 _Load_Main 0052  
                             __end_of_ISR 001F                    __size_of_getCmd_Status 0012  
                        _getDimmer_LoadGO 191C                     ??_Flash_Memory_Modify 0024  
            __size_of_Load_Initialization 0003              ?_setDimmerIntr_ControlStatus 0020  
              __end_of_CC2500_InitPATable 1D56           __size_of_setTemp_Initialization 0001  
                    ??_setMemory_LoopSave 0020                     ??_Flash_Memory_Unlock 0020  
                    __end_of_setTemp_Main 0E91                            ??_RF_RxDisable 0024  
  __end_of_getDimmerLights_PercentToValue 1585   __size_of_getDimmerLights_PercentToValue 0065  
          _getDimmerLights_PercentToValue 1520                       __size_of_getLoad_AD 0072  
                            ?_Buzzer_Main 0070       getDimmerLights_PercentToValue@value 005E  
                     __size_of_getLoad_OK 0008                        _set_TimeoutCleared 18E6  
       __end_of_setDimmerIntr_MaxmumValue 1BF9                                  ??_IO_Set 0020  
                __size_of_Timeout_Counter 0015                                 _VarErrLED 01E2  
                       __size_of_Division 000D                               ?_setSw_Main 0070  
                     __size_of_getTemp_AD 0040                    ?_setLED_Initialization 0070  
                   ?_setRF_Initialization 0070                         __size_of_Fosc_Set 0004  
               __size_of_CC2500_WriteByte 0019                                 _Temp_Main 18CF  
                     ?_set_TimeoutCleared 0070                            ??_WDT_Clearing 0020  
                               _Rx_Length 013B                     setProductData@address 0064  
                     Exception_Main@count 002F                       Exception_Main@error 0034  
                                ??___bmul 0021                                  ??___wmul 0024  
                  __size_of_SwPointSelect 0017          __end_of_getMain_All_LightsStatus 1AFC  
                               _Tx_Length 00DA                               __pdataBANK4 0245  
                                ??_setLED 0023                                  ?_ADC_Set 0070  
                                ??_setBuz 002B                           ??_DelayOff_Main 0068  
                       ??_CC2500_ReadByte 0020               ?_DimmerLights_SelectPointer 0070  
        __end_of_getMain_All_Error_Status 2000                          _CC2500_SIDLEMode 18E2  
              __size_of_DimmerLights_Main 0020                        setMemory_Data@data 0020  
                   ?_CC2500_FrequencyCabr 0070            setDimmerIntr_Dimming_Sw@lights 0022  
                           ??_setLED_Main 0022                         __size_of___awtoft 0022  
                       __size_of___ftpack 0061                                  ?_IOC_ISR 0070  
                                ?_IOC_Set 0070                   Load_Main@Load_RunStatus 002E  
                               ___latbits 0003                          _setMemory_Modify 1AC3  
                              ?_Load_Main 0070                             __pcstackBANK0 0020  
                           __pcstackBANK1 00E6                 setRF_TransceiveGO@command 0021  
                    ??_set_TimeoutCleared 0020                 _DimmerIntr_Initialization 093C  
                         ??_DelayTime_1us 0022                __size_of_CC2500_InitSetREG 002A  
                           DlyOff_Main@sw 0067                         ??_CC2500_PowerRST 0026  
                                ?_RF_Main 0070                                  ?_WDT_Set 0070  
           ??_setDimmerIntr_ControlStatus 0021                              ??_TouchPower 0020  
                    __size_of_DlyOff_Main 006F                __size_of_CC2500_ReadStatus 0025  
          setDimmerIntr_MaxmumValue@value 0062               setDimmerLights_DimmingOn@sw 0022  
                       ??_CC2500_WriteREG 0023                             ??_setRF_Learn 0020  
                           _DimmerLights1 0167                             _DimmerLights2 01D0  
                   CC2500_WriteREG@w_addr 0024                     setDelayOff_GO@command 0065  
          __size_of_setLoad_AH_AL_Restore 001C                           ??_CC2500_RxData 0024  
           __end_of_setLoad_AH_AL_Restore 1CDF                  setRFSW_AdjControl@status 0067  
                         ??_CC2500_TxData 0024                                 __pnvBANK1 00EF  
                          getRxData@error 00E7               __size_of_LED_Initialization 000C  
                    _setRF_TimeoutCleared 18D6                    ?_CC2500_PowerOnInitial 0070  
                         Exception_Main@i 0030                                ?_Temp_Main 0070  
                     __size_of_setRF_Main 00D5                          ___lwdiv@dividend 0022  
                   DelayOffPointSelect@sw 0021                             _getCmd_Status 1A57  
                              setBuz@time 0029                           ??_setCmd_Status 0021  
                     setDelayOff_GO@value 0066                  ?_setControl_Lights_Table 0070  
                        ?_getRF_KeyStatus 0070                            Load_Main@error 002C  
                  _setTemp_Initialization 07FF                                 _getBuz_GO 1A35  
                ?_setDimmerLights_Dimming 006A       __end_of_Flash_Memory_Initialization 07C5  
             _Flash_Memory_Initialization 06FB                                  ?___awdiv 0020  
                               __ptext100 13B5                                 __ptext101 0F45  
                                ?___lbdiv 0070                                 __ptext110 1FCD  
                               __ptext102 1AD6                                 __ptext111 194E  
                               __ptext103 15EA                                 __ptext120 0D37  
                               __ptext112 0801                                 __ptext104 1CDF  
                               __ptext121 0388                                 __ptext113 093C  
                               __ptext105 1BE2                                 __ptext130 10CB  
                               __ptext122 1E59                                 __ptext114 1AC3  
                               __ptext106 1F15                                 __ptext131 1A02  
                               __ptext123 14BF                                 __ptext115 1585  
                               __ptext107 1B9E                                 __ptext140 1792  
                               __ptext132 1BCB                                 __ptext124 190C  
                               __ptext116 1520                                 __ptext108 1140  
                               __ptext141 085E                                 __ptext133 1904  
                               __ptext125 08CD                                 __ptext117 0B95  
                               __ptext109 1914                                  ?___ftadd 0041  
                               __ptext142 197A                                 __ptext134 18EB  
                               __ptext126 1986                                 __ptext118 193C  
                               __ptext143 07C5                                 __ptext135 1BB4  
                               __ptext127 0802                                 __ptext119 0E91  
                               __ptext144 1092                                 __ptext136 12C4  
                               __ptext128 140B                                 __ptext145 19E6  
                               __ptext137 18C0                                 __ptext129 1361  
                               __ptext146 1DF5                                 __ptext139 1E37  
                               _getRxData 09AB                                  ?___ftdiv 002E  
                                ?___ftneg 003E                                  ?___ftmul 002E  
                                ?___fttol 004E                     __size_of_my_MainTimer 003C  
                                ?___lwdiv 0020                   __end_of_setRFSW_Control 11BE  
                        ??_setProductData 0063             __size_of_setSw_Initialization 0008  
          __size_of_Buzzer_Initialization 0003             __end_of_Buzzer_Initialization 18C3  
                           ??_setLog_Code 0065                  getDimmerLights_Line@line 0021  
                      __end_of_TouchPower 1B9E                       __size_of_setSw_Main 0184  
            CC2500_ReadStatus@status_addr 0023        __end_of_getDimmerIntr_DimmingValue 1BB4  
            ??_setDimmerIntr_DimmingValue 0063                _getDimmerIntr_DimmingValue 1B9E  
                  CC2500_WriteByte@loop_a 0021            __size_of_setDimmerLights_OnOff 00D1  
                               _r_address 013D             __end_of_setDimmerLights_OnOff 06FB  
          __size_of_setDimmerLights_SwOff 0039            __size_of_myMain_Initialization 0013  
           __end_of_setDimmerLights_SwOff 1104              __end_of_CC2500_patable_vaule 1866  
           __end_of_myMain_Initialization 1B22                            __size_of_getAD 0020  
                        ___lwdiv@quotient 0025                             _SwPointSelect 1C10  
                     __end_of_setLED_Main 1280                          ??_getDelayOff_GO 0022  
                  ??_setRF_Initialization 0020               __end_of_Temp_Initialization 18CF  
                       _CC2500_rfSettings 182F                            ___wmul@product 0024  
                                _LED_Main 19B6                           SwPointSelect@sw 0021  
                               clear_ram0 18F7                  CC2500_InitPATable@loop_d 0027  
                   ?_setRF_TimeoutCleared 0070                              _my_MainTimer 1104  
                               _setTxData 0F45       __end_of_DimmerLights_Initialization 1959  
             _DimmerLights_Initialization 194E                    _Flash_Memory_Main$3310 0028  
                      _CC2500_ClearRXFIFO 18DA                            ?_getCmd_Status 0070  
                      _CC2500_ClearTXFIFO 18DE                  setRF_DimmerLights@lights 0069  
                                _GO_nDONE 04E9                       __end_of_setRF_Learn 1B4A  
                       ??_Timeout_Counter 0020                                ?_getBuz_GO 0020  
                setRF_DimmerLights@status 0068      __size_of_setDimmerIntr_ControlStatus 002F  
             __size_of_setRFSW_AdjControl 0080       __size_of_setDimmerIntr_DimmingValue 0017  
                      _Flash_Memory_Write 1F9E                                ?_getRxData 0070  
                            ??_getLoad_AD 0024                                  _TMR1_ISR 1E37  
                  CC2500_InitSetREG@temp1 0026                    CC2500_InitSetREG@temp2 0027  
                            ??_getLoad_OK 0020                                  _TMR1_Set 19C2  
                     ?_CC2500_ClearRXFIFO 0070                       ?_CC2500_ClearTXFIFO 0070  
                      _setRF_TransceiveGO 1AD6                                  _RF_Count 0134  
                    __end_of_RF_RxDisable 1A02                              ??_getTemp_AD 0024  
             __end_of_CC2500_WriteCommand 1C8D                    ??_CC2500_FrequencyCabr 0026  
                                _WDT_Main 1AB1                   DlyOff_Initialization@sw 0022  
                   getSw_KeyStatus@status 0023                          __size_of_ADC_Set 0007  
                       ___wmul@multiplier 0020                       ?_Flash_Memory_Write 0070  
                   __size_of_setTemp_Main 00B1                       ?_setRF_TransceiveGO 0070  
                 __size_of_setDelayOff_GO 008C                                  _DelayOff 00D5  
                            setSw_Main@sw 0034                               ??_Load_Main 0028  
                        __size_of_IOC_ISR 000C            getMain_All_Error_Status@status 0026  
                        __size_of_IOC_Set 000B              __end_of_Flash_Memory_Erasing 19AA  
                          ?_SwPointSelect 0070                               getAD@adcon0 0023  
                             getAD@adcon1 0020                            setLED_Main@led 0024  
                    __end_of_WDT_Clearing 0004                       __end_of_setLog_Code 105B  
                   _DlyOff_Initialization 18EB         __size_of_getMain_All_LightsStatus 0013  
                    ??_CC2500_ClearRXFIFO 0024                                  _Division 19E6  
               ?_getMain_All_LightsStatus 0070                      ??_CC2500_ClearTXFIFO 0024  
               __end_of_CC2500_rfSettings 185E                          __size_of_RF_Main 0003  
                _setDimmerIntr_Dimming_RF 1F6F               setDimmerLights_OnOff@lights 00E6  
                _setDimmerIntr_Dimming_Sw 1F15                                  _Fosc_Set 18D2  
                        __size_of_WDT_Set 000C                     setRFSW_Control@status 006E  
                      __end_of_getLoad_AD 0A8F                        __end_of_getLoad_OK 191C  
                   _Switch_Initialization 1934         __size_of_getMain_All_Error_Status 0033  
                    ??_Flash_Memory_Write 0020                 ?_getMain_All_Error_Status 0070  
                    __size_of_Buzzer_Main 004A                        __end_of_getTemp_AD 11FE  
                              ?_setTxData 0070                              ?_Switch_Main 0070  
                        _CC2500_WriteByte 1C40                         getLoad_AD@channel 0026  
     __size_of_DimmerLights_SelectPointer 0017                      ??_setRF_TransceiveGO 0020  
                                _SwDetect 013C                               ??_Temp_Main 006E  
                        getCmd_Status@cmd 0021                          setCmd_Status@cmd 0020  
                       setRFSW_Control@sw 006F             _getMain_All_Error_Status$6913 0021  
           _getMain_All_Error_Status$6914 0023                  __end_of_getDimmer_LoadGO 1924  
                     _Load_Initialization 18C3          ??_getDimmerLights_ValueToPercent 005C  
         ?_getDimmerLights_ValueToPercent 0070                                 setLED@led 0023  
                            _setTemp_Main 0DE0                          __size_of___awdiv 0054  
                        __size_of___lbdiv 0021                          __size_of___ftadd 00F6  
                        ?_setRFSW_Control 0070                          __size_of___ftdiv 00A9  
                        __size_of___ftneg 0009                          __size_of___ftmul 00B4  
                        __size_of___fttol 0087                          __size_of___lwdiv 0037  
                setDimmerLights_SwOn@idle 0030                                  ___awtoft 1E59  
                        ??_LedPointSelect 0020                                  ___ftpack 14BF  
           __size_of_getMain_Lights_Count 0012                    getDimmer_LoadGO@loadgo 0020  
                       getTemp_AD@channel 0025                              ??_setRF_Main 00E8  
                    CC2500_WriteREG@value 0022                               _setLED_Main 123F  
              __end_of_setRF_DimmerLights 164F            __size_of_getDimmer_Load_Status 0008  
                ?_DelayOff_Initialization 0070                          getDelayOff_GO@go 0023  
                        getDelayOff_GO@sw 0022             __end_of_getDimmer_Load_Status 192C  
                        setDelayOff_GO@sw 006C                           ___lwdiv@divisor 0020  
                    ?_Load_Initialization 0070                           ___lwdiv@counter 0027  
                                __ptext10 18CC                                  __ptext11 07FF  
                                __ptext20 1B74                                  __ptext12 196F  
                                __ptext21 1934                                  __ptext13 0204  
                                __ptext30 0A8F                                  __ptext22 192C  
                                __ptext14 1B36                                  __ptext31 1CA8  
                                __ptext23 18C9                                  __ptext15 1EC3  
                                __ptext40 18E2                                  __ptext32 1A46  
                                __ptext24 0555                                  __ptext16 1D56  
                                __ptext41 1280                                  __ptext33 1A35  
                                __ptext25 09AB                                  __ptext17 1C10  
                                __ptext50 18D6                                  __ptext42 1EEB  
                                __ptext34 19F3                                  __ptext26 1027  
                                __ptext18 1B89                                  __ptext51 1B4A  
                                __ptext43 1D37                                  __ptext35 1725  
                                __ptext27 1AFC                                  __ptext19 18E6  
                                __ptext60 18D2                                  __ptext52 1C40  
                                __ptext44 1E7B                                  __ptext36 16BA  
                                __ptext28 0CA8                                  __ptext61 18FD  
                                __ptext53 18C6                                  __ptext45 19DA  
                                __ptext37 1E9E                                  __ptext29 117E  
                                __ptext70 1CC3                                  __ptext62 0052  
                                __ptext54 1964                                  __ptext46 1001  
                                __ptext38 1CFC                                  __ptext71 19B6  
                                __ptext63 1A8D                                  __ptext55 1A9F  
                                __ptext47 18DE                                  __ptext39 1B5F  
                                __ptext80 1992                                  __ptext72 123F  
                                __ptext64 1924                                  __ptext56 19CE  
                                __ptext48 18DA                                  __ptext81 1F9E  
                                __ptext73 19AA                                  __ptext65 191C  
                                __ptext57 19C2                                  __ptext49 1C73  
                                __ptext90 1D75                                  __ptext82 1945  
                                __ptext74 1A7B                                  __ptext66 1E16  
                                __ptext58 1C8D                                  __ptext91 1F6F  
                                __ptext83 1C59                                  __ptext75 11FE  
                                __ptext67 1D19                                  __ptext59 1959  
                                __ptext92 1BF9                                  __ptext84 047E  
                                __ptext76 1A24                                  __ptext68 105B  
                                __ptext93 1F40                                  __ptext85 1B22  
                                __ptext77 0B0F                                  __ptext69 18C3  
                                __ptext94 0C1C                                  __ptext86 1D95  
                                __ptext78 199E                                  __ptext95 1A69  
                                __ptext87 164F                                  __ptext79 06FB  
                                __ptext96 1C27                                  __ptext88 062A  
                                __ptext97 1AE9                                  __ptext89 130E  
                                __ptext98 1A13                                  __ptext99 1A57  
                                __product 0245                   ??_setLED_Initialization 0024  
                ??_getDimmerLights_Status 0022              __end_of_getDimmerLights_Line 1B36  
            __end_of_setDimmerLights_Main 16BA              __end_of_setDimmerLights_Line 1CFC  
                      _DimmerLights_IOC_1 1092                        _DimmerLights_IOC_2 07C5  
            __end_of_setDimmerLights_SwOn 085E                              ??_setSw_Main 0032  
                  ??_setRF_TimeoutCleared 0020              ??_setDimmerLights_DimmingRun 0023  
                           setLED@command 0022                             __size_of_main 005B  
                             _setRF_Learn 1B36        __size_of_DimmerIntr_Initialization 006F  
                         ??_getCmd_Status 0020                        _DimmerLights_TMR_1 085E  
                      _DimmerLights_TMR_2 1792                  __end_of_CC2500_SIDLEMode 18E6  
              setDimmerLights_Main@lights 00E7               __end_of_DelayOffPointSelect 1BCB  
              CC2500_WriteCommand@command 0023                           _CC2500_ReadByte 1CFC  
              ?_setDimmerLights_DimmingOn 0070                        _CC2500_InitPATable 1D37  
                __end_of_setMemory_Modify 1AD6      _getAll_DimmerIntr_Dimming_Sw_RF$2294 0021  
    _getAll_DimmerIntr_Dimming_Sw_RF$2295 0022                       ?_DimmerLights_IOC_1 0070  
                     ?_DimmerLights_IOC_2 0070                        __end_of_setRF_Main 062A  
                             ??_getBuz_GO 0022                       ?_DimmerLights_TMR_1 0070  
                     ?_DimmerLights_TMR_2 0070               __size_of_Mcu_Initialization 0012  
                    _CC2500_patable_vaule 185E                               ??_getRxData 00E6  
                            getLoad_OK@ok 0020                __end_of_RF_Timeout_Counter 1B5F  
             Flash_Memory_Main@key_Status 0027                  _getAll_Sw_KeyStatus$6173 0022  
                                main@argc 00EA                                  main@argv 00EC  
                     ?_CC2500_InitPATable 0070                      _getSw_KeyStatus$6170 0022  
                    _getSw_KeyStatus$6169 0021       getDimmerLights_ValueToPercent@value 005E  
                         _CC2500_PowerRST 1280                  __size_of_getSw_KeyStatus 001F  
            setDimmerLights_Dimming@value 006C        __end_of_setDimmerIntr_DimmingValue 1C10  
              _setDimmerIntr_DimmingValue 1BF9               __end_of_Flash_Memory_Modify 0B95  
            __size_of_getAll_Sw_KeyStatus 0011                               _setLog_Code 1027  
             __end_of_Flash_Memory_Unlock 194E                           ??_SwPointSelect 0020  
                         _CC2500_WriteREG 1E7B                        __end_of_setSw_Main 0388  
                   ??_Load_Initialization 0022                      ??_DimmerLights_IOC_1 007A  
                    ??_DimmerLights_IOC_2 007A           getDimmerLights_PercentToValue@i 005F  
     __size_of_setDimmerLights_DimmingRun 001B                             _Transceive_OK 0771  
                  ?_DlyOff_Initialization 0070                      ??_DimmerLights_TMR_1 0070  
                    ??_DimmerLights_TMR_2 0070                            Division@result 0079  
                             pic14e$flags 007E              ??_getDimmerIntr_DimmingValue 0020  
              setDimmerLights_Line@lights 0020                   setDimmerLights_SwOff@sw 0022  
             __size_of_setMemory_LoopSave 0013                                  intlevel1 0000  
                    ??_CC2500_InitPATable 0025                    ?_Switch_Initialization 0070  
                         setDelayOff_GO@i 0069                           setDelayOff_GO@j 006A  
                         setDelayOff_GO@k 006B                   ??_CC2500_PowerOnInitial 0029  
                   setTemp_Main@SafeValue 0067    __end_of_setDimmerLights_Initialization 0802  
 __size_of_setDimmerLights_Initialization 0001            _setDimmerLights_Initialization 0801  
              ?_setDimmerIntr_MaxmumValue 0062                   ?_setTemp_Initialization 0070  
                             ??_setTxData 0020                    CC2500_InitPATable@temp 0026  
                         getLoad_AD@ADRES 0029                     __size_of_RF_RxDisable 000F  
                       _RF_Initialization 18C6                               getLoad_AD@i 002B  
                             getLoad_AD@j 0028                               getLoad_AD@k 0027  
                    _Flash_Memory_Erasing 199E                        ?_RF_Initialization 0070  
                              _SPI0Buffer 00D8                   __size_of_Exception_Main 00D7  
                           Division@value 0078           __end_of_DelayOff_Initialization 190C  
                   __size_of_WDT_Clearing 0002                     __end_of_DelayOff_Main 1914  
                     ??_RF_Initialization 0021                   __size_of_setMemory_Data 000C  
                          _setDelayOff_GO 0C1C               ?_getDimmerIntr_DimmingValue 0070  
        __size_of_setControl_Lights_Table 008F          __size_of_setDimmerLights_Dimming 0056  
             getDimmer_Load_Status@status 0020      __size_of_Flash_Memory_Initialization 00CA  
             __size_of_set_TimeoutCleared 0005                             ??_DlyOff_Main 0065  
                   setMemory_Data@address 0022                     __end_of_DelayTime_1us 1027  
                 __end_of_CC2500_ReadByte 1D19              __end_of_setSw_Initialization 1934  
                         _Timeout_Counter 1B74           __size_of_getDimmerLights_Status 0011  
         getDimmerLights_ValueToPercent@i 005F                              _RF_RxDisable 19F3  
        Flash_Memory_Initialization@value 0025                __end_of_LED_Initialization 19B6  
          __end_of_setTemp_Initialization 0800                               Division@num 0075  
                 setMemory_Modify@command 0021                 __end_of_RF_Initialization 18C9  
                   __end_of_CC2500_RxData 1725                     __end_of_CC2500_TxData 1792  
                   _setLoad_AH_AL_Restore 1CC3                   __end_of_CC2500_PowerRST 12C4  
