

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Wed Mar 18 15:12:45 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bitbssBANK1,global,bit,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,inline,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,inline,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,inline,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,inline,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,inline,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,inline,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,inline,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,inline,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,inline,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,inline,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,inline,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,inline,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,inline,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,inline,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,inline,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,inline,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,inline,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,inline,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,delta=2
   146                           	psect	text126,local,class=CODE,merge=1,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,inline,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,inline,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,delta=2
   152                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text133,local,class=CODE,merge=1,delta=2
   154                           	psect	text134,local,class=CODE,merge=1,delta=2
   155                           	psect	text135,local,class=CODE,merge=1,delta=2
   156                           	psect	text136,local,class=CODE,merge=1,delta=2
   157                           	psect	text137,local,class=CODE,merge=1,delta=2
   158                           	psect	text138,local,class=CODE,merge=1,delta=2
   159                           	psect	text139,local,class=CODE,merge=1,inline,delta=2
   160                           	psect	text140,local,class=CODE,merge=1,inline,delta=2
   161                           	psect	text141,local,class=CODE,merge=1,delta=2
   162                           	psect	text142,local,class=CODE,merge=1,delta=2
   163                           	psect	text143,local,class=CODE,merge=1,inline,delta=2
   164                           	psect	text144,local,class=CODE,merge=1,inline,delta=2
   165                           	psect	intentry,global,class=CODE,delta=2
   166                           	psect	text146,local,class=CODE,merge=1,inline,delta=2
   167                           	psect	text147,local,class=CODE,merge=1,inline,delta=2
   168                           	psect	text148,local,class=CODE,merge=1,inline,delta=2
   169                           	psect	text149,local,class=CODE,merge=1,inline,delta=2
   170                           	psect	text150,local,class=CODE,merge=1,inline,delta=2
   171                           	psect	text151,local,class=CODE,merge=1,inline,delta=2
   172                           	psect	text152,local,class=CODE,merge=1,inline,delta=2
   173                           	psect	text153,local,class=CODE,merge=1,delta=2
   174                           	dabs	1,0x7E,2
   175  0000                     	;# 
   176  0001                     	;# 
   177  0002                     	;# 
   178  0003                     	;# 
   179  0004                     	;# 
   180  0005                     	;# 
   181  0006                     	;# 
   182  0007                     	;# 
   183  0008                     	;# 
   184  0009                     	;# 
   185  000A                     	;# 
   186  000B                     	;# 
   187  000C                     	;# 
   188  000D                     	;# 
   189  000E                     	;# 
   190  0010                     	;# 
   191  0011                     	;# 
   192  0012                     	;# 
   193  0015                     	;# 
   194  0016                     	;# 
   195  0016                     	;# 
   196  0017                     	;# 
   197  0018                     	;# 
   198  0019                     	;# 
   199  001A                     	;# 
   200  001B                     	;# 
   201  001C                     	;# 
   202  008C                     	;# 
   203  008D                     	;# 
   204  008E                     	;# 
   205  0090                     	;# 
   206  0091                     	;# 
   207  0092                     	;# 
   208  0095                     	;# 
   209  0096                     	;# 
   210  0097                     	;# 
   211  0099                     	;# 
   212  009A                     	;# 
   213  009B                     	;# 
   214  009B                     	;# 
   215  009C                     	;# 
   216  009D                     	;# 
   217  009E                     	;# 
   218  010C                     	;# 
   219  010D                     	;# 
   220  010E                     	;# 
   221  0116                     	;# 
   222  0117                     	;# 
   223  011D                     	;# 
   224  018C                     	;# 
   225  018D                     	;# 
   226  018E                     	;# 
   227  0191                     	;# 
   228  0191                     	;# 
   229  0192                     	;# 
   230  0193                     	;# 
   231  0193                     	;# 
   232  0194                     	;# 
   233  0195                     	;# 
   234  0196                     	;# 
   235  0197                     	;# 
   236  0199                     	;# 
   237  019A                     	;# 
   238  019B                     	;# 
   239  019B                     	;# 
   240  019B                     	;# 
   241  019B                     	;# 
   242  019C                     	;# 
   243  019C                     	;# 
   244  019D                     	;# 
   245  019E                     	;# 
   246  019F                     	;# 
   247  020D                     	;# 
   248  0210                     	;# 
   249  0211                     	;# 
   250  0211                     	;# 
   251  0212                     	;# 
   252  0212                     	;# 
   253  0213                     	;# 
   254  0213                     	;# 
   255  0214                     	;# 
   256  0214                     	;# 
   257  0215                     	;# 
   258  0215                     	;# 
   259  0215                     	;# 
   260  0216                     	;# 
   261  0216                     	;# 
   262  0217                     	;# 
   263  0217                     	;# 
   264  0291                     	;# 
   265  0291                     	;# 
   266  0292                     	;# 
   267  0293                     	;# 
   268  0298                     	;# 
   269  0298                     	;# 
   270  0299                     	;# 
   271  029A                     	;# 
   272  0394                     	;# 
   273  0395                     	;# 
   274  0396                     	;# 
   275  0FE4                     	;# 
   276  0FE5                     	;# 
   277  0FE6                     	;# 
   278  0FE7                     	;# 
   279  0FE8                     	;# 
   280  0FE9                     	;# 
   281  0FEA                     	;# 
   282  0FEB                     	;# 
   283  0FED                     	;# 
   284  0FEE                     	;# 
   285  0FEF                     	;# 
   286  0000                     	;# 
   287  0001                     	;# 
   288  0002                     	;# 
   289  0003                     	;# 
   290  0004                     	;# 
   291  0005                     	;# 
   292  0006                     	;# 
   293  0007                     	;# 
   294  0008                     	;# 
   295  0009                     	;# 
   296  000A                     	;# 
   297  000B                     	;# 
   298  000C                     	;# 
   299  000D                     	;# 
   300  000E                     	;# 
   301  0010                     	;# 
   302  0011                     	;# 
   303  0012                     	;# 
   304  0015                     	;# 
   305  0016                     	;# 
   306  0016                     	;# 
   307  0017                     	;# 
   308  0018                     	;# 
   309  0019                     	;# 
   310  001A                     	;# 
   311  001B                     	;# 
   312  001C                     	;# 
   313  008C                     	;# 
   314  008D                     	;# 
   315  008E                     	;# 
   316  0090                     	;# 
   317  0091                     	;# 
   318  0092                     	;# 
   319  0095                     	;# 
   320  0096                     	;# 
   321  0097                     	;# 
   322  0099                     	;# 
   323  009A                     	;# 
   324  009B                     	;# 
   325  009B                     	;# 
   326  009C                     	;# 
   327  009D                     	;# 
   328  009E                     	;# 
   329  010C                     	;# 
   330  010D                     	;# 
   331  010E                     	;# 
   332  0116                     	;# 
   333  0117                     	;# 
   334  011D                     	;# 
   335  018C                     	;# 
   336  018D                     	;# 
   337  018E                     	;# 
   338  0191                     	;# 
   339  0191                     	;# 
   340  0192                     	;# 
   341  0193                     	;# 
   342  0193                     	;# 
   343  0194                     	;# 
   344  0195                     	;# 
   345  0196                     	;# 
   346  0197                     	;# 
   347  0199                     	;# 
   348  019A                     	;# 
   349  019B                     	;# 
   350  019B                     	;# 
   351  019B                     	;# 
   352  019B                     	;# 
   353  019C                     	;# 
   354  019C                     	;# 
   355  019D                     	;# 
   356  019E                     	;# 
   357  019F                     	;# 
   358  020D                     	;# 
   359  0210                     	;# 
   360  0211                     	;# 
   361  0211                     	;# 
   362  0212                     	;# 
   363  0212                     	;# 
   364  0213                     	;# 
   365  0213                     	;# 
   366  0214                     	;# 
   367  0214                     	;# 
   368  0215                     	;# 
   369  0215                     	;# 
   370  0215                     	;# 
   371  0216                     	;# 
   372  0216                     	;# 
   373  0217                     	;# 
   374  0217                     	;# 
   375  0291                     	;# 
   376  0291                     	;# 
   377  0292                     	;# 
   378  0293                     	;# 
   379  0298                     	;# 
   380  0298                     	;# 
   381  0299                     	;# 
   382  029A                     	;# 
   383  0394                     	;# 
   384  0395                     	;# 
   385  0396                     	;# 
   386  0FE4                     	;# 
   387  0FE5                     	;# 
   388  0FE6                     	;# 
   389  0FE7                     	;# 
   390  0FE8                     	;# 
   391  0FE9                     	;# 
   392  0FEA                     	;# 
   393  0FEB                     	;# 
   394  0FED                     	;# 
   395  0FEE                     	;# 
   396  0FEF                     	;# 
   397  0000                     	;# 
   398  0001                     	;# 
   399  0002                     	;# 
   400  0003                     	;# 
   401  0004                     	;# 
   402  0005                     	;# 
   403  0006                     	;# 
   404  0007                     	;# 
   405  0008                     	;# 
   406  0009                     	;# 
   407  000A                     	;# 
   408  000B                     	;# 
   409  000C                     	;# 
   410  000D                     	;# 
   411  000E                     	;# 
   412  0010                     	;# 
   413  0011                     	;# 
   414  0012                     	;# 
   415  0015                     	;# 
   416  0016                     	;# 
   417  0016                     	;# 
   418  0017                     	;# 
   419  0018                     	;# 
   420  0019                     	;# 
   421  001A                     	;# 
   422  001B                     	;# 
   423  001C                     	;# 
   424  008C                     	;# 
   425  008D                     	;# 
   426  008E                     	;# 
   427  0090                     	;# 
   428  0091                     	;# 
   429  0092                     	;# 
   430  0095                     	;# 
   431  0096                     	;# 
   432  0097                     	;# 
   433  0099                     	;# 
   434  009A                     	;# 
   435  009B                     	;# 
   436  009B                     	;# 
   437  009C                     	;# 
   438  009D                     	;# 
   439  009E                     	;# 
   440  010C                     	;# 
   441  010D                     	;# 
   442  010E                     	;# 
   443  0116                     	;# 
   444  0117                     	;# 
   445  011D                     	;# 
   446  018C                     	;# 
   447  018D                     	;# 
   448  018E                     	;# 
   449  0191                     	;# 
   450  0191                     	;# 
   451  0192                     	;# 
   452  0193                     	;# 
   453  0193                     	;# 
   454  0194                     	;# 
   455  0195                     	;# 
   456  0196                     	;# 
   457  0197                     	;# 
   458  0199                     	;# 
   459  019A                     	;# 
   460  019B                     	;# 
   461  019B                     	;# 
   462  019B                     	;# 
   463  019B                     	;# 
   464  019C                     	;# 
   465  019C                     	;# 
   466  019D                     	;# 
   467  019E                     	;# 
   468  019F                     	;# 
   469  020D                     	;# 
   470  0210                     	;# 
   471  0211                     	;# 
   472  0211                     	;# 
   473  0212                     	;# 
   474  0212                     	;# 
   475  0213                     	;# 
   476  0213                     	;# 
   477  0214                     	;# 
   478  0214                     	;# 
   479  0215                     	;# 
   480  0215                     	;# 
   481  0215                     	;# 
   482  0216                     	;# 
   483  0216                     	;# 
   484  0217                     	;# 
   485  0217                     	;# 
   486  0291                     	;# 
   487  0291                     	;# 
   488  0292                     	;# 
   489  0293                     	;# 
   490  0298                     	;# 
   491  0298                     	;# 
   492  0299                     	;# 
   493  029A                     	;# 
   494  0394                     	;# 
   495  0395                     	;# 
   496  0396                     	;# 
   497  0FE4                     	;# 
   498  0FE5                     	;# 
   499  0FE6                     	;# 
   500  0FE7                     	;# 
   501  0FE8                     	;# 
   502  0FE9                     	;# 
   503  0FEA                     	;# 
   504  0FEB                     	;# 
   505  0FED                     	;# 
   506  0FEE                     	;# 
   507  0FEF                     	;# 
   508  0000                     	;# 
   509  0001                     	;# 
   510  0002                     	;# 
   511  0003                     	;# 
   512  0004                     	;# 
   513  0005                     	;# 
   514  0006                     	;# 
   515  0007                     	;# 
   516  0008                     	;# 
   517  0009                     	;# 
   518  000A                     	;# 
   519  000B                     	;# 
   520  000C                     	;# 
   521  000D                     	;# 
   522  000E                     	;# 
   523  0010                     	;# 
   524  0011                     	;# 
   525  0012                     	;# 
   526  0015                     	;# 
   527  0016                     	;# 
   528  0016                     	;# 
   529  0017                     	;# 
   530  0018                     	;# 
   531  0019                     	;# 
   532  001A                     	;# 
   533  001B                     	;# 
   534  001C                     	;# 
   535  008C                     	;# 
   536  008D                     	;# 
   537  008E                     	;# 
   538  0090                     	;# 
   539  0091                     	;# 
   540  0092                     	;# 
   541  0095                     	;# 
   542  0096                     	;# 
   543  0097                     	;# 
   544  0099                     	;# 
   545  009A                     	;# 
   546  009B                     	;# 
   547  009B                     	;# 
   548  009C                     	;# 
   549  009D                     	;# 
   550  009E                     	;# 
   551  010C                     	;# 
   552  010D                     	;# 
   553  010E                     	;# 
   554  0116                     	;# 
   555  0117                     	;# 
   556  011D                     	;# 
   557  018C                     	;# 
   558  018D                     	;# 
   559  018E                     	;# 
   560  0191                     	;# 
   561  0191                     	;# 
   562  0192                     	;# 
   563  0193                     	;# 
   564  0193                     	;# 
   565  0194                     	;# 
   566  0195                     	;# 
   567  0196                     	;# 
   568  0197                     	;# 
   569  0199                     	;# 
   570  019A                     	;# 
   571  019B                     	;# 
   572  019B                     	;# 
   573  019B                     	;# 
   574  019B                     	;# 
   575  019C                     	;# 
   576  019C                     	;# 
   577  019D                     	;# 
   578  019E                     	;# 
   579  019F                     	;# 
   580  020D                     	;# 
   581  0210                     	;# 
   582  0211                     	;# 
   583  0211                     	;# 
   584  0212                     	;# 
   585  0212                     	;# 
   586  0213                     	;# 
   587  0213                     	;# 
   588  0214                     	;# 
   589  0214                     	;# 
   590  0215                     	;# 
   591  0215                     	;# 
   592  0215                     	;# 
   593  0216                     	;# 
   594  0216                     	;# 
   595  0217                     	;# 
   596  0217                     	;# 
   597  0291                     	;# 
   598  0291                     	;# 
   599  0292                     	;# 
   600  0293                     	;# 
   601  0298                     	;# 
   602  0298                     	;# 
   603  0299                     	;# 
   604  029A                     	;# 
   605  0394                     	;# 
   606  0395                     	;# 
   607  0396                     	;# 
   608  0FE4                     	;# 
   609  0FE5                     	;# 
   610  0FE6                     	;# 
   611  0FE7                     	;# 
   612  0FE8                     	;# 
   613  0FE9                     	;# 
   614  0FEA                     	;# 
   615  0FEB                     	;# 
   616  0FED                     	;# 
   617  0FEE                     	;# 
   618  0FEF                     	;# 
   619  0000                     	;# 
   620  0001                     	;# 
   621  0002                     	;# 
   622  0003                     	;# 
   623  0004                     	;# 
   624  0005                     	;# 
   625  0006                     	;# 
   626  0007                     	;# 
   627  0008                     	;# 
   628  0009                     	;# 
   629  000A                     	;# 
   630  000B                     	;# 
   631  000C                     	;# 
   632  000D                     	;# 
   633  000E                     	;# 
   634  0010                     	;# 
   635  0011                     	;# 
   636  0012                     	;# 
   637  0015                     	;# 
   638  0016                     	;# 
   639  0016                     	;# 
   640  0017                     	;# 
   641  0018                     	;# 
   642  0019                     	;# 
   643  001A                     	;# 
   644  001B                     	;# 
   645  001C                     	;# 
   646  008C                     	;# 
   647  008D                     	;# 
   648  008E                     	;# 
   649  0090                     	;# 
   650  0091                     	;# 
   651  0092                     	;# 
   652  0095                     	;# 
   653  0096                     	;# 
   654  0097                     	;# 
   655  0099                     	;# 
   656  009A                     	;# 
   657  009B                     	;# 
   658  009B                     	;# 
   659  009C                     	;# 
   660  009D                     	;# 
   661  009E                     	;# 
   662  010C                     	;# 
   663  010D                     	;# 
   664  010E                     	;# 
   665  0116                     	;# 
   666  0117                     	;# 
   667  011D                     	;# 
   668  018C                     	;# 
   669  018D                     	;# 
   670  018E                     	;# 
   671  0191                     	;# 
   672  0191                     	;# 
   673  0192                     	;# 
   674  0193                     	;# 
   675  0193                     	;# 
   676  0194                     	;# 
   677  0195                     	;# 
   678  0196                     	;# 
   679  0197                     	;# 
   680  0199                     	;# 
   681  019A                     	;# 
   682  019B                     	;# 
   683  019B                     	;# 
   684  019B                     	;# 
   685  019B                     	;# 
   686  019C                     	;# 
   687  019C                     	;# 
   688  019D                     	;# 
   689  019E                     	;# 
   690  019F                     	;# 
   691  020D                     	;# 
   692  0210                     	;# 
   693  0211                     	;# 
   694  0211                     	;# 
   695  0212                     	;# 
   696  0212                     	;# 
   697  0213                     	;# 
   698  0213                     	;# 
   699  0214                     	;# 
   700  0214                     	;# 
   701  0215                     	;# 
   702  0215                     	;# 
   703  0215                     	;# 
   704  0216                     	;# 
   705  0216                     	;# 
   706  0217                     	;# 
   707  0217                     	;# 
   708  0291                     	;# 
   709  0291                     	;# 
   710  0292                     	;# 
   711  0293                     	;# 
   712  0298                     	;# 
   713  0298                     	;# 
   714  0299                     	;# 
   715  029A                     	;# 
   716  0394                     	;# 
   717  0395                     	;# 
   718  0396                     	;# 
   719  0FE4                     	;# 
   720  0FE5                     	;# 
   721  0FE6                     	;# 
   722  0FE7                     	;# 
   723  0FE8                     	;# 
   724  0FE9                     	;# 
   725  0FEA                     	;# 
   726  0FEB                     	;# 
   727  0FED                     	;# 
   728  0FEE                     	;# 
   729  0FEF                     	;# 
   730  0000                     	;# 
   731  0001                     	;# 
   732  0002                     	;# 
   733  0003                     	;# 
   734  0004                     	;# 
   735  0005                     	;# 
   736  0006                     	;# 
   737  0007                     	;# 
   738  0008                     	;# 
   739  0009                     	;# 
   740  000A                     	;# 
   741  000B                     	;# 
   742  000C                     	;# 
   743  000D                     	;# 
   744  000E                     	;# 
   745  0010                     	;# 
   746  0011                     	;# 
   747  0012                     	;# 
   748  0015                     	;# 
   749  0016                     	;# 
   750  0016                     	;# 
   751  0017                     	;# 
   752  0018                     	;# 
   753  0019                     	;# 
   754  001A                     	;# 
   755  001B                     	;# 
   756  001C                     	;# 
   757  008C                     	;# 
   758  008D                     	;# 
   759  008E                     	;# 
   760  0090                     	;# 
   761  0091                     	;# 
   762  0092                     	;# 
   763  0095                     	;# 
   764  0096                     	;# 
   765  0097                     	;# 
   766  0099                     	;# 
   767  009A                     	;# 
   768  009B                     	;# 
   769  009B                     	;# 
   770  009C                     	;# 
   771  009D                     	;# 
   772  009E                     	;# 
   773  010C                     	;# 
   774  010D                     	;# 
   775  010E                     	;# 
   776  0116                     	;# 
   777  0117                     	;# 
   778  011D                     	;# 
   779  018C                     	;# 
   780  018D                     	;# 
   781  018E                     	;# 
   782  0191                     	;# 
   783  0191                     	;# 
   784  0192                     	;# 
   785  0193                     	;# 
   786  0193                     	;# 
   787  0194                     	;# 
   788  0195                     	;# 
   789  0196                     	;# 
   790  0197                     	;# 
   791  0199                     	;# 
   792  019A                     	;# 
   793  019B                     	;# 
   794  019B                     	;# 
   795  019B                     	;# 
   796  019B                     	;# 
   797  019C                     	;# 
   798  019C                     	;# 
   799  019D                     	;# 
   800  019E                     	;# 
   801  019F                     	;# 
   802  020D                     	;# 
   803  0210                     	;# 
   804  0211                     	;# 
   805  0211                     	;# 
   806  0212                     	;# 
   807  0212                     	;# 
   808  0213                     	;# 
   809  0213                     	;# 
   810  0214                     	;# 
   811  0214                     	;# 
   812  0215                     	;# 
   813  0215                     	;# 
   814  0215                     	;# 
   815  0216                     	;# 
   816  0216                     	;# 
   817  0217                     	;# 
   818  0217                     	;# 
   819  0291                     	;# 
   820  0291                     	;# 
   821  0292                     	;# 
   822  0293                     	;# 
   823  0298                     	;# 
   824  0298                     	;# 
   825  0299                     	;# 
   826  029A                     	;# 
   827  0394                     	;# 
   828  0395                     	;# 
   829  0396                     	;# 
   830  0FE4                     	;# 
   831  0FE5                     	;# 
   832  0FE6                     	;# 
   833  0FE7                     	;# 
   834  0FE8                     	;# 
   835  0FE9                     	;# 
   836  0FEA                     	;# 
   837  0FEB                     	;# 
   838  0FED                     	;# 
   839  0FEE                     	;# 
   840  0FEF                     	;# 
   841  0000                     	;# 
   842  0001                     	;# 
   843  0002                     	;# 
   844  0003                     	;# 
   845  0004                     	;# 
   846  0005                     	;# 
   847  0006                     	;# 
   848  0007                     	;# 
   849  0008                     	;# 
   850  0009                     	;# 
   851  000A                     	;# 
   852  000B                     	;# 
   853  000C                     	;# 
   854  000D                     	;# 
   855  000E                     	;# 
   856  0010                     	;# 
   857  0011                     	;# 
   858  0012                     	;# 
   859  0015                     	;# 
   860  0016                     	;# 
   861  0016                     	;# 
   862  0017                     	;# 
   863  0018                     	;# 
   864  0019                     	;# 
   865  001A                     	;# 
   866  001B                     	;# 
   867  001C                     	;# 
   868  008C                     	;# 
   869  008D                     	;# 
   870  008E                     	;# 
   871  0090                     	;# 
   872  0091                     	;# 
   873  0092                     	;# 
   874  0095                     	;# 
   875  0096                     	;# 
   876  0097                     	;# 
   877  0099                     	;# 
   878  009A                     	;# 
   879  009B                     	;# 
   880  009B                     	;# 
   881  009C                     	;# 
   882  009D                     	;# 
   883  009E                     	;# 
   884  010C                     	;# 
   885  010D                     	;# 
   886  010E                     	;# 
   887  0116                     	;# 
   888  0117                     	;# 
   889  011D                     	;# 
   890  018C                     	;# 
   891  018D                     	;# 
   892  018E                     	;# 
   893  0191                     	;# 
   894  0191                     	;# 
   895  0192                     	;# 
   896  0193                     	;# 
   897  0193                     	;# 
   898  0194                     	;# 
   899  0195                     	;# 
   900  0196                     	;# 
   901  0197                     	;# 
   902  0199                     	;# 
   903  019A                     	;# 
   904  019B                     	;# 
   905  019B                     	;# 
   906  019B                     	;# 
   907  019B                     	;# 
   908  019C                     	;# 
   909  019C                     	;# 
   910  019D                     	;# 
   911  019E                     	;# 
   912  019F                     	;# 
   913  020D                     	;# 
   914  0210                     	;# 
   915  0211                     	;# 
   916  0211                     	;# 
   917  0212                     	;# 
   918  0212                     	;# 
   919  0213                     	;# 
   920  0213                     	;# 
   921  0214                     	;# 
   922  0214                     	;# 
   923  0215                     	;# 
   924  0215                     	;# 
   925  0215                     	;# 
   926  0216                     	;# 
   927  0216                     	;# 
   928  0217                     	;# 
   929  0217                     	;# 
   930  0291                     	;# 
   931  0291                     	;# 
   932  0292                     	;# 
   933  0293                     	;# 
   934  0298                     	;# 
   935  0298                     	;# 
   936  0299                     	;# 
   937  029A                     	;# 
   938  0394                     	;# 
   939  0395                     	;# 
   940  0396                     	;# 
   941  0FE4                     	;# 
   942  0FE5                     	;# 
   943  0FE6                     	;# 
   944  0FE7                     	;# 
   945  0FE8                     	;# 
   946  0FE9                     	;# 
   947  0FEA                     	;# 
   948  0FEB                     	;# 
   949  0FED                     	;# 
   950  0FEE                     	;# 
   951  0FEF                     	;# 
   952  0000                     	;# 
   953  0001                     	;# 
   954  0002                     	;# 
   955  0003                     	;# 
   956  0004                     	;# 
   957  0005                     	;# 
   958  0006                     	;# 
   959  0007                     	;# 
   960  0008                     	;# 
   961  0009                     	;# 
   962  000A                     	;# 
   963  000B                     	;# 
   964  000C                     	;# 
   965  000D                     	;# 
   966  000E                     	;# 
   967  0010                     	;# 
   968  0011                     	;# 
   969  0012                     	;# 
   970  0015                     	;# 
   971  0016                     	;# 
   972  0016                     	;# 
   973  0017                     	;# 
   974  0018                     	;# 
   975  0019                     	;# 
   976  001A                     	;# 
   977  001B                     	;# 
   978  001C                     	;# 
   979  008C                     	;# 
   980  008D                     	;# 
   981  008E                     	;# 
   982  0090                     	;# 
   983  0091                     	;# 
   984  0092                     	;# 
   985  0095                     	;# 
   986  0096                     	;# 
   987  0097                     	;# 
   988  0099                     	;# 
   989  009A                     	;# 
   990  009B                     	;# 
   991  009B                     	;# 
   992  009C                     	;# 
   993  009D                     	;# 
   994  009E                     	;# 
   995  010C                     	;# 
   996  010D                     	;# 
   997  010E                     	;# 
   998  0116                     	;# 
   999  0117                     	;# 
  1000  011D                     	;# 
  1001  018C                     	;# 
  1002  018D                     	;# 
  1003  018E                     	;# 
  1004  0191                     	;# 
  1005  0191                     	;# 
  1006  0192                     	;# 
  1007  0193                     	;# 
  1008  0193                     	;# 
  1009  0194                     	;# 
  1010  0195                     	;# 
  1011  0196                     	;# 
  1012  0197                     	;# 
  1013  0199                     	;# 
  1014  019A                     	;# 
  1015  019B                     	;# 
  1016  019B                     	;# 
  1017  019B                     	;# 
  1018  019B                     	;# 
  1019  019C                     	;# 
  1020  019C                     	;# 
  1021  019D                     	;# 
  1022  019E                     	;# 
  1023  019F                     	;# 
  1024  020D                     	;# 
  1025  0210                     	;# 
  1026  0211                     	;# 
  1027  0211                     	;# 
  1028  0212                     	;# 
  1029  0212                     	;# 
  1030  0213                     	;# 
  1031  0213                     	;# 
  1032  0214                     	;# 
  1033  0214                     	;# 
  1034  0215                     	;# 
  1035  0215                     	;# 
  1036  0215                     	;# 
  1037  0216                     	;# 
  1038  0216                     	;# 
  1039  0217                     	;# 
  1040  0217                     	;# 
  1041  0291                     	;# 
  1042  0291                     	;# 
  1043  0292                     	;# 
  1044  0293                     	;# 
  1045  0298                     	;# 
  1046  0298                     	;# 
  1047  0299                     	;# 
  1048  029A                     	;# 
  1049  0394                     	;# 
  1050  0395                     	;# 
  1051  0396                     	;# 
  1052  0FE4                     	;# 
  1053  0FE5                     	;# 
  1054  0FE6                     	;# 
  1055  0FE7                     	;# 
  1056  0FE8                     	;# 
  1057  0FE9                     	;# 
  1058  0FEA                     	;# 
  1059  0FEB                     	;# 
  1060  0FED                     	;# 
  1061  0FEE                     	;# 
  1062  0FEF                     	;# 
  1063  0000                     	;# 
  1064  0001                     	;# 
  1065  0002                     	;# 
  1066  0003                     	;# 
  1067  0004                     	;# 
  1068  0005                     	;# 
  1069  0006                     	;# 
  1070  0007                     	;# 
  1071  0008                     	;# 
  1072  0009                     	;# 
  1073  000A                     	;# 
  1074  000B                     	;# 
  1075  000C                     	;# 
  1076  000D                     	;# 
  1077  000E                     	;# 
  1078  0010                     	;# 
  1079  0011                     	;# 
  1080  0012                     	;# 
  1081  0015                     	;# 
  1082  0016                     	;# 
  1083  0016                     	;# 
  1084  0017                     	;# 
  1085  0018                     	;# 
  1086  0019                     	;# 
  1087  001A                     	;# 
  1088  001B                     	;# 
  1089  001C                     	;# 
  1090  008C                     	;# 
  1091  008D                     	;# 
  1092  008E                     	;# 
  1093  0090                     	;# 
  1094  0091                     	;# 
  1095  0092                     	;# 
  1096  0095                     	;# 
  1097  0096                     	;# 
  1098  0097                     	;# 
  1099  0099                     	;# 
  1100  009A                     	;# 
  1101  009B                     	;# 
  1102  009B                     	;# 
  1103  009C                     	;# 
  1104  009D                     	;# 
  1105  009E                     	;# 
  1106  010C                     	;# 
  1107  010D                     	;# 
  1108  010E                     	;# 
  1109  0116                     	;# 
  1110  0117                     	;# 
  1111  011D                     	;# 
  1112  018C                     	;# 
  1113  018D                     	;# 
  1114  018E                     	;# 
  1115  0191                     	;# 
  1116  0191                     	;# 
  1117  0192                     	;# 
  1118  0193                     	;# 
  1119  0193                     	;# 
  1120  0194                     	;# 
  1121  0195                     	;# 
  1122  0196                     	;# 
  1123  0197                     	;# 
  1124  0199                     	;# 
  1125  019A                     	;# 
  1126  019B                     	;# 
  1127  019B                     	;# 
  1128  019B                     	;# 
  1129  019B                     	;# 
  1130  019C                     	;# 
  1131  019C                     	;# 
  1132  019D                     	;# 
  1133  019E                     	;# 
  1134  019F                     	;# 
  1135  020D                     	;# 
  1136  0210                     	;# 
  1137  0211                     	;# 
  1138  0211                     	;# 
  1139  0212                     	;# 
  1140  0212                     	;# 
  1141  0213                     	;# 
  1142  0213                     	;# 
  1143  0214                     	;# 
  1144  0214                     	;# 
  1145  0215                     	;# 
  1146  0215                     	;# 
  1147  0215                     	;# 
  1148  0216                     	;# 
  1149  0216                     	;# 
  1150  0217                     	;# 
  1151  0217                     	;# 
  1152  0291                     	;# 
  1153  0291                     	;# 
  1154  0292                     	;# 
  1155  0293                     	;# 
  1156  0298                     	;# 
  1157  0298                     	;# 
  1158  0299                     	;# 
  1159  029A                     	;# 
  1160  0394                     	;# 
  1161  0395                     	;# 
  1162  0396                     	;# 
  1163  0FE4                     	;# 
  1164  0FE5                     	;# 
  1165  0FE6                     	;# 
  1166  0FE7                     	;# 
  1167  0FE8                     	;# 
  1168  0FE9                     	;# 
  1169  0FEA                     	;# 
  1170  0FEB                     	;# 
  1171  0FED                     	;# 
  1172  0FEE                     	;# 
  1173  0FEF                     	;# 
  1174  0000                     	;# 
  1175  0001                     	;# 
  1176  0002                     	;# 
  1177  0003                     	;# 
  1178  0004                     	;# 
  1179  0005                     	;# 
  1180  0006                     	;# 
  1181  0007                     	;# 
  1182  0008                     	;# 
  1183  0009                     	;# 
  1184  000A                     	;# 
  1185  000B                     	;# 
  1186  000C                     	;# 
  1187  000D                     	;# 
  1188  000E                     	;# 
  1189  0010                     	;# 
  1190  0011                     	;# 
  1191  0012                     	;# 
  1192  0015                     	;# 
  1193  0016                     	;# 
  1194  0016                     	;# 
  1195  0017                     	;# 
  1196  0018                     	;# 
  1197  0019                     	;# 
  1198  001A                     	;# 
  1199  001B                     	;# 
  1200  001C                     	;# 
  1201  008C                     	;# 
  1202  008D                     	;# 
  1203  008E                     	;# 
  1204  0090                     	;# 
  1205  0091                     	;# 
  1206  0092                     	;# 
  1207  0095                     	;# 
  1208  0096                     	;# 
  1209  0097                     	;# 
  1210  0099                     	;# 
  1211  009A                     	;# 
  1212  009B                     	;# 
  1213  009B                     	;# 
  1214  009C                     	;# 
  1215  009D                     	;# 
  1216  009E                     	;# 
  1217  010C                     	;# 
  1218  010D                     	;# 
  1219  010E                     	;# 
  1220  0116                     	;# 
  1221  0117                     	;# 
  1222  011D                     	;# 
  1223  018C                     	;# 
  1224  018D                     	;# 
  1225  018E                     	;# 
  1226  0191                     	;# 
  1227  0191                     	;# 
  1228  0192                     	;# 
  1229  0193                     	;# 
  1230  0193                     	;# 
  1231  0194                     	;# 
  1232  0195                     	;# 
  1233  0196                     	;# 
  1234  0197                     	;# 
  1235  0199                     	;# 
  1236  019A                     	;# 
  1237  019B                     	;# 
  1238  019B                     	;# 
  1239  019B                     	;# 
  1240  019B                     	;# 
  1241  019C                     	;# 
  1242  019C                     	;# 
  1243  019D                     	;# 
  1244  019E                     	;# 
  1245  019F                     	;# 
  1246  020D                     	;# 
  1247  0210                     	;# 
  1248  0211                     	;# 
  1249  0211                     	;# 
  1250  0212                     	;# 
  1251  0212                     	;# 
  1252  0213                     	;# 
  1253  0213                     	;# 
  1254  0214                     	;# 
  1255  0214                     	;# 
  1256  0215                     	;# 
  1257  0215                     	;# 
  1258  0215                     	;# 
  1259  0216                     	;# 
  1260  0216                     	;# 
  1261  0217                     	;# 
  1262  0217                     	;# 
  1263  0291                     	;# 
  1264  0291                     	;# 
  1265  0292                     	;# 
  1266  0293                     	;# 
  1267  0298                     	;# 
  1268  0298                     	;# 
  1269  0299                     	;# 
  1270  029A                     	;# 
  1271  0394                     	;# 
  1272  0395                     	;# 
  1273  0396                     	;# 
  1274  0FE4                     	;# 
  1275  0FE5                     	;# 
  1276  0FE6                     	;# 
  1277  0FE7                     	;# 
  1278  0FE8                     	;# 
  1279  0FE9                     	;# 
  1280  0FEA                     	;# 
  1281  0FEB                     	;# 
  1282  0FED                     	;# 
  1283  0FEE                     	;# 
  1284  0FEF                     	;# 
  1285  0000                     	;# 
  1286  0001                     	;# 
  1287  0002                     	;# 
  1288  0003                     	;# 
  1289  0004                     	;# 
  1290  0005                     	;# 
  1291  0006                     	;# 
  1292  0007                     	;# 
  1293  0008                     	;# 
  1294  0009                     	;# 
  1295  000A                     	;# 
  1296  000B                     	;# 
  1297  000C                     	;# 
  1298  000D                     	;# 
  1299  000E                     	;# 
  1300  0010                     	;# 
  1301  0011                     	;# 
  1302  0012                     	;# 
  1303  0015                     	;# 
  1304  0016                     	;# 
  1305  0016                     	;# 
  1306  0017                     	;# 
  1307  0018                     	;# 
  1308  0019                     	;# 
  1309  001A                     	;# 
  1310  001B                     	;# 
  1311  001C                     	;# 
  1312  008C                     	;# 
  1313  008D                     	;# 
  1314  008E                     	;# 
  1315  0090                     	;# 
  1316  0091                     	;# 
  1317  0092                     	;# 
  1318  0095                     	;# 
  1319  0096                     	;# 
  1320  0097                     	;# 
  1321  0099                     	;# 
  1322  009A                     	;# 
  1323  009B                     	;# 
  1324  009B                     	;# 
  1325  009C                     	;# 
  1326  009D                     	;# 
  1327  009E                     	;# 
  1328  010C                     	;# 
  1329  010D                     	;# 
  1330  010E                     	;# 
  1331  0116                     	;# 
  1332  0117                     	;# 
  1333  011D                     	;# 
  1334  018C                     	;# 
  1335  018D                     	;# 
  1336  018E                     	;# 
  1337  0191                     	;# 
  1338  0191                     	;# 
  1339  0192                     	;# 
  1340  0193                     	;# 
  1341  0193                     	;# 
  1342  0194                     	;# 
  1343  0195                     	;# 
  1344  0196                     	;# 
  1345  0197                     	;# 
  1346  0199                     	;# 
  1347  019A                     	;# 
  1348  019B                     	;# 
  1349  019B                     	;# 
  1350  019B                     	;# 
  1351  019B                     	;# 
  1352  019C                     	;# 
  1353  019C                     	;# 
  1354  019D                     	;# 
  1355  019E                     	;# 
  1356  019F                     	;# 
  1357  020D                     	;# 
  1358  0210                     	;# 
  1359  0211                     	;# 
  1360  0211                     	;# 
  1361  0212                     	;# 
  1362  0212                     	;# 
  1363  0213                     	;# 
  1364  0213                     	;# 
  1365  0214                     	;# 
  1366  0214                     	;# 
  1367  0215                     	;# 
  1368  0215                     	;# 
  1369  0215                     	;# 
  1370  0216                     	;# 
  1371  0216                     	;# 
  1372  0217                     	;# 
  1373  0217                     	;# 
  1374  0291                     	;# 
  1375  0291                     	;# 
  1376  0292                     	;# 
  1377  0293                     	;# 
  1378  0298                     	;# 
  1379  0298                     	;# 
  1380  0299                     	;# 
  1381  029A                     	;# 
  1382  0394                     	;# 
  1383  0395                     	;# 
  1384  0396                     	;# 
  1385  0FE4                     	;# 
  1386  0FE5                     	;# 
  1387  0FE6                     	;# 
  1388  0FE7                     	;# 
  1389  0FE8                     	;# 
  1390  0FE9                     	;# 
  1391  0FEA                     	;# 
  1392  0FEB                     	;# 
  1393  0FED                     	;# 
  1394  0FEE                     	;# 
  1395  0FEF                     	;# 
  1396  0000                     	;# 
  1397  0001                     	;# 
  1398  0002                     	;# 
  1399  0003                     	;# 
  1400  0004                     	;# 
  1401  0005                     	;# 
  1402  0006                     	;# 
  1403  0007                     	;# 
  1404  0008                     	;# 
  1405  0009                     	;# 
  1406  000A                     	;# 
  1407  000B                     	;# 
  1408  000C                     	;# 
  1409  000D                     	;# 
  1410  000E                     	;# 
  1411  0010                     	;# 
  1412  0011                     	;# 
  1413  0012                     	;# 
  1414  0015                     	;# 
  1415  0016                     	;# 
  1416  0016                     	;# 
  1417  0017                     	;# 
  1418  0018                     	;# 
  1419  0019                     	;# 
  1420  001A                     	;# 
  1421  001B                     	;# 
  1422  001C                     	;# 
  1423  008C                     	;# 
  1424  008D                     	;# 
  1425  008E                     	;# 
  1426  0090                     	;# 
  1427  0091                     	;# 
  1428  0092                     	;# 
  1429  0095                     	;# 
  1430  0096                     	;# 
  1431  0097                     	;# 
  1432  0099                     	;# 
  1433  009A                     	;# 
  1434  009B                     	;# 
  1435  009B                     	;# 
  1436  009C                     	;# 
  1437  009D                     	;# 
  1438  009E                     	;# 
  1439  010C                     	;# 
  1440  010D                     	;# 
  1441  010E                     	;# 
  1442  0116                     	;# 
  1443  0117                     	;# 
  1444  011D                     	;# 
  1445  018C                     	;# 
  1446  018D                     	;# 
  1447  018E                     	;# 
  1448  0191                     	;# 
  1449  0191                     	;# 
  1450  0192                     	;# 
  1451  0193                     	;# 
  1452  0193                     	;# 
  1453  0194                     	;# 
  1454  0195                     	;# 
  1455  0196                     	;# 
  1456  0197                     	;# 
  1457  0199                     	;# 
  1458  019A                     	;# 
  1459  019B                     	;# 
  1460  019B                     	;# 
  1461  019B                     	;# 
  1462  019B                     	;# 
  1463  019C                     	;# 
  1464  019C                     	;# 
  1465  019D                     	;# 
  1466  019E                     	;# 
  1467  019F                     	;# 
  1468  020D                     	;# 
  1469  0210                     	;# 
  1470  0211                     	;# 
  1471  0211                     	;# 
  1472  0212                     	;# 
  1473  0212                     	;# 
  1474  0213                     	;# 
  1475  0213                     	;# 
  1476  0214                     	;# 
  1477  0214                     	;# 
  1478  0215                     	;# 
  1479  0215                     	;# 
  1480  0215                     	;# 
  1481  0216                     	;# 
  1482  0216                     	;# 
  1483  0217                     	;# 
  1484  0217                     	;# 
  1485  0291                     	;# 
  1486  0291                     	;# 
  1487  0292                     	;# 
  1488  0293                     	;# 
  1489  0298                     	;# 
  1490  0298                     	;# 
  1491  0299                     	;# 
  1492  029A                     	;# 
  1493  0394                     	;# 
  1494  0395                     	;# 
  1495  0396                     	;# 
  1496  0FE4                     	;# 
  1497  0FE5                     	;# 
  1498  0FE6                     	;# 
  1499  0FE7                     	;# 
  1500  0FE8                     	;# 
  1501  0FE9                     	;# 
  1502  0FEA                     	;# 
  1503  0FEB                     	;# 
  1504  0FED                     	;# 
  1505  0FEE                     	;# 
  1506  0FEF                     	;# 
  1507  0000                     	;# 
  1508  0001                     	;# 
  1509  0002                     	;# 
  1510  0003                     	;# 
  1511  0004                     	;# 
  1512  0005                     	;# 
  1513  0006                     	;# 
  1514  0007                     	;# 
  1515  0008                     	;# 
  1516  0009                     	;# 
  1517  000A                     	;# 
  1518  000B                     	;# 
  1519  000C                     	;# 
  1520  000D                     	;# 
  1521  000E                     	;# 
  1522  0010                     	;# 
  1523  0011                     	;# 
  1524  0012                     	;# 
  1525  0015                     	;# 
  1526  0016                     	;# 
  1527  0016                     	;# 
  1528  0017                     	;# 
  1529  0018                     	;# 
  1530  0019                     	;# 
  1531  001A                     	;# 
  1532  001B                     	;# 
  1533  001C                     	;# 
  1534  008C                     	;# 
  1535  008D                     	;# 
  1536  008E                     	;# 
  1537  0090                     	;# 
  1538  0091                     	;# 
  1539  0092                     	;# 
  1540  0095                     	;# 
  1541  0096                     	;# 
  1542  0097                     	;# 
  1543  0099                     	;# 
  1544  009A                     	;# 
  1545  009B                     	;# 
  1546  009B                     	;# 
  1547  009C                     	;# 
  1548  009D                     	;# 
  1549  009E                     	;# 
  1550  010C                     	;# 
  1551  010D                     	;# 
  1552  010E                     	;# 
  1553  0116                     	;# 
  1554  0117                     	;# 
  1555  011D                     	;# 
  1556  018C                     	;# 
  1557  018D                     	;# 
  1558  018E                     	;# 
  1559  0191                     	;# 
  1560  0191                     	;# 
  1561  0192                     	;# 
  1562  0193                     	;# 
  1563  0193                     	;# 
  1564  0194                     	;# 
  1565  0195                     	;# 
  1566  0196                     	;# 
  1567  0197                     	;# 
  1568  0199                     	;# 
  1569  019A                     	;# 
  1570  019B                     	;# 
  1571  019B                     	;# 
  1572  019B                     	;# 
  1573  019B                     	;# 
  1574  019C                     	;# 
  1575  019C                     	;# 
  1576  019D                     	;# 
  1577  019E                     	;# 
  1578  019F                     	;# 
  1579  020D                     	;# 
  1580  0210                     	;# 
  1581  0211                     	;# 
  1582  0211                     	;# 
  1583  0212                     	;# 
  1584  0212                     	;# 
  1585  0213                     	;# 
  1586  0213                     	;# 
  1587  0214                     	;# 
  1588  0214                     	;# 
  1589  0215                     	;# 
  1590  0215                     	;# 
  1591  0215                     	;# 
  1592  0216                     	;# 
  1593  0216                     	;# 
  1594  0217                     	;# 
  1595  0217                     	;# 
  1596  0291                     	;# 
  1597  0291                     	;# 
  1598  0292                     	;# 
  1599  0293                     	;# 
  1600  0298                     	;# 
  1601  0298                     	;# 
  1602  0299                     	;# 
  1603  029A                     	;# 
  1604  0394                     	;# 
  1605  0395                     	;# 
  1606  0396                     	;# 
  1607  0FE4                     	;# 
  1608  0FE5                     	;# 
  1609  0FE6                     	;# 
  1610  0FE7                     	;# 
  1611  0FE8                     	;# 
  1612  0FE9                     	;# 
  1613  0FEA                     	;# 
  1614  0FEB                     	;# 
  1615  0FED                     	;# 
  1616  0FEE                     	;# 
  1617  0FEF                     	;# 
  1618  0000                     	;# 
  1619  0001                     	;# 
  1620  0002                     	;# 
  1621  0003                     	;# 
  1622  0004                     	;# 
  1623  0005                     	;# 
  1624  0006                     	;# 
  1625  0007                     	;# 
  1626  0008                     	;# 
  1627  0009                     	;# 
  1628  000A                     	;# 
  1629  000B                     	;# 
  1630  000C                     	;# 
  1631  000D                     	;# 
  1632  000E                     	;# 
  1633  0010                     	;# 
  1634  0011                     	;# 
  1635  0012                     	;# 
  1636  0015                     	;# 
  1637  0016                     	;# 
  1638  0016                     	;# 
  1639  0017                     	;# 
  1640  0018                     	;# 
  1641  0019                     	;# 
  1642  001A                     	;# 
  1643  001B                     	;# 
  1644  001C                     	;# 
  1645  008C                     	;# 
  1646  008D                     	;# 
  1647  008E                     	;# 
  1648  0090                     	;# 
  1649  0091                     	;# 
  1650  0092                     	;# 
  1651  0095                     	;# 
  1652  0096                     	;# 
  1653  0097                     	;# 
  1654  0099                     	;# 
  1655  009A                     	;# 
  1656  009B                     	;# 
  1657  009B                     	;# 
  1658  009C                     	;# 
  1659  009D                     	;# 
  1660  009E                     	;# 
  1661  010C                     	;# 
  1662  010D                     	;# 
  1663  010E                     	;# 
  1664  0116                     	;# 
  1665  0117                     	;# 
  1666  011D                     	;# 
  1667  018C                     	;# 
  1668  018D                     	;# 
  1669  018E                     	;# 
  1670  0191                     	;# 
  1671  0191                     	;# 
  1672  0192                     	;# 
  1673  0193                     	;# 
  1674  0193                     	;# 
  1675  0194                     	;# 
  1676  0195                     	;# 
  1677  0196                     	;# 
  1678  0197                     	;# 
  1679  0199                     	;# 
  1680  019A                     	;# 
  1681  019B                     	;# 
  1682  019B                     	;# 
  1683  019B                     	;# 
  1684  019B                     	;# 
  1685  019C                     	;# 
  1686  019C                     	;# 
  1687  019D                     	;# 
  1688  019E                     	;# 
  1689  019F                     	;# 
  1690  020D                     	;# 
  1691  0210                     	;# 
  1692  0211                     	;# 
  1693  0211                     	;# 
  1694  0212                     	;# 
  1695  0212                     	;# 
  1696  0213                     	;# 
  1697  0213                     	;# 
  1698  0214                     	;# 
  1699  0214                     	;# 
  1700  0215                     	;# 
  1701  0215                     	;# 
  1702  0215                     	;# 
  1703  0216                     	;# 
  1704  0216                     	;# 
  1705  0217                     	;# 
  1706  0217                     	;# 
  1707  0291                     	;# 
  1708  0291                     	;# 
  1709  0292                     	;# 
  1710  0293                     	;# 
  1711  0298                     	;# 
  1712  0298                     	;# 
  1713  0299                     	;# 
  1714  029A                     	;# 
  1715  0394                     	;# 
  1716  0395                     	;# 
  1717  0396                     	;# 
  1718  0FE4                     	;# 
  1719  0FE5                     	;# 
  1720  0FE6                     	;# 
  1721  0FE7                     	;# 
  1722  0FE8                     	;# 
  1723  0FE9                     	;# 
  1724  0FEA                     	;# 
  1725  0FEB                     	;# 
  1726  0FED                     	;# 
  1727  0FEE                     	;# 
  1728  0FEF                     	;# 
  1729  0000                     	;# 
  1730  0001                     	;# 
  1731  0002                     	;# 
  1732  0003                     	;# 
  1733  0004                     	;# 
  1734  0005                     	;# 
  1735  0006                     	;# 
  1736  0007                     	;# 
  1737  0008                     	;# 
  1738  0009                     	;# 
  1739  000A                     	;# 
  1740  000B                     	;# 
  1741  000C                     	;# 
  1742  000D                     	;# 
  1743  000E                     	;# 
  1744  0010                     	;# 
  1745  0011                     	;# 
  1746  0012                     	;# 
  1747  0015                     	;# 
  1748  0016                     	;# 
  1749  0016                     	;# 
  1750  0017                     	;# 
  1751  0018                     	;# 
  1752  0019                     	;# 
  1753  001A                     	;# 
  1754  001B                     	;# 
  1755  001C                     	;# 
  1756  008C                     	;# 
  1757  008D                     	;# 
  1758  008E                     	;# 
  1759  0090                     	;# 
  1760  0091                     	;# 
  1761  0092                     	;# 
  1762  0095                     	;# 
  1763  0096                     	;# 
  1764  0097                     	;# 
  1765  0099                     	;# 
  1766  009A                     	;# 
  1767  009B                     	;# 
  1768  009B                     	;# 
  1769  009C                     	;# 
  1770  009D                     	;# 
  1771  009E                     	;# 
  1772  010C                     	;# 
  1773  010D                     	;# 
  1774  010E                     	;# 
  1775  0116                     	;# 
  1776  0117                     	;# 
  1777  011D                     	;# 
  1778  018C                     	;# 
  1779  018D                     	;# 
  1780  018E                     	;# 
  1781  0191                     	;# 
  1782  0191                     	;# 
  1783  0192                     	;# 
  1784  0193                     	;# 
  1785  0193                     	;# 
  1786  0194                     	;# 
  1787  0195                     	;# 
  1788  0196                     	;# 
  1789  0197                     	;# 
  1790  0199                     	;# 
  1791  019A                     	;# 
  1792  019B                     	;# 
  1793  019B                     	;# 
  1794  019B                     	;# 
  1795  019B                     	;# 
  1796  019C                     	;# 
  1797  019C                     	;# 
  1798  019D                     	;# 
  1799  019E                     	;# 
  1800  019F                     	;# 
  1801  020D                     	;# 
  1802  0210                     	;# 
  1803  0211                     	;# 
  1804  0211                     	;# 
  1805  0212                     	;# 
  1806  0212                     	;# 
  1807  0213                     	;# 
  1808  0213                     	;# 
  1809  0214                     	;# 
  1810  0214                     	;# 
  1811  0215                     	;# 
  1812  0215                     	;# 
  1813  0215                     	;# 
  1814  0216                     	;# 
  1815  0216                     	;# 
  1816  0217                     	;# 
  1817  0217                     	;# 
  1818  0291                     	;# 
  1819  0291                     	;# 
  1820  0292                     	;# 
  1821  0293                     	;# 
  1822  0298                     	;# 
  1823  0298                     	;# 
  1824  0299                     	;# 
  1825  029A                     	;# 
  1826  0394                     	;# 
  1827  0395                     	;# 
  1828  0396                     	;# 
  1829  0FE4                     	;# 
  1830  0FE5                     	;# 
  1831  0FE6                     	;# 
  1832  0FE7                     	;# 
  1833  0FE8                     	;# 
  1834  0FE9                     	;# 
  1835  0FEA                     	;# 
  1836  0FEB                     	;# 
  1837  0FED                     	;# 
  1838  0FEE                     	;# 
  1839  0FEF                     	;# 
  1840  0000                     	;# 
  1841  0001                     	;# 
  1842  0002                     	;# 
  1843  0003                     	;# 
  1844  0004                     	;# 
  1845  0005                     	;# 
  1846  0006                     	;# 
  1847  0007                     	;# 
  1848  0008                     	;# 
  1849  0009                     	;# 
  1850  000A                     	;# 
  1851  000B                     	;# 
  1852  000C                     	;# 
  1853  000D                     	;# 
  1854  000E                     	;# 
  1855  0010                     	;# 
  1856  0011                     	;# 
  1857  0012                     	;# 
  1858  0015                     	;# 
  1859  0016                     	;# 
  1860  0016                     	;# 
  1861  0017                     	;# 
  1862  0018                     	;# 
  1863  0019                     	;# 
  1864  001A                     	;# 
  1865  001B                     	;# 
  1866  001C                     	;# 
  1867  008C                     	;# 
  1868  008D                     	;# 
  1869  008E                     	;# 
  1870  0090                     	;# 
  1871  0091                     	;# 
  1872  0092                     	;# 
  1873  0095                     	;# 
  1874  0096                     	;# 
  1875  0097                     	;# 
  1876  0099                     	;# 
  1877  009A                     	;# 
  1878  009B                     	;# 
  1879  009B                     	;# 
  1880  009C                     	;# 
  1881  009D                     	;# 
  1882  009E                     	;# 
  1883  010C                     	;# 
  1884  010D                     	;# 
  1885  010E                     	;# 
  1886  0116                     	;# 
  1887  0117                     	;# 
  1888  011D                     	;# 
  1889  018C                     	;# 
  1890  018D                     	;# 
  1891  018E                     	;# 
  1892  0191                     	;# 
  1893  0191                     	;# 
  1894  0192                     	;# 
  1895  0193                     	;# 
  1896  0193                     	;# 
  1897  0194                     	;# 
  1898  0195                     	;# 
  1899  0196                     	;# 
  1900  0197                     	;# 
  1901  0199                     	;# 
  1902  019A                     	;# 
  1903  019B                     	;# 
  1904  019B                     	;# 
  1905  019B                     	;# 
  1906  019B                     	;# 
  1907  019C                     	;# 
  1908  019C                     	;# 
  1909  019D                     	;# 
  1910  019E                     	;# 
  1911  019F                     	;# 
  1912  020D                     	;# 
  1913  0210                     	;# 
  1914  0211                     	;# 
  1915  0211                     	;# 
  1916  0212                     	;# 
  1917  0212                     	;# 
  1918  0213                     	;# 
  1919  0213                     	;# 
  1920  0214                     	;# 
  1921  0214                     	;# 
  1922  0215                     	;# 
  1923  0215                     	;# 
  1924  0215                     	;# 
  1925  0216                     	;# 
  1926  0216                     	;# 
  1927  0217                     	;# 
  1928  0217                     	;# 
  1929  0291                     	;# 
  1930  0291                     	;# 
  1931  0292                     	;# 
  1932  0293                     	;# 
  1933  0298                     	;# 
  1934  0298                     	;# 
  1935  0299                     	;# 
  1936  029A                     	;# 
  1937  0394                     	;# 
  1938  0395                     	;# 
  1939  0396                     	;# 
  1940  0FE4                     	;# 
  1941  0FE5                     	;# 
  1942  0FE6                     	;# 
  1943  0FE7                     	;# 
  1944  0FE8                     	;# 
  1945  0FE9                     	;# 
  1946  0FEA                     	;# 
  1947  0FEB                     	;# 
  1948  0FED                     	;# 
  1949  0FEE                     	;# 
  1950  0FEF                     	;# 
  1951  0000                     	;# 
  1952  0001                     	;# 
  1953  0002                     	;# 
  1954  0003                     	;# 
  1955  0004                     	;# 
  1956  0005                     	;# 
  1957  0006                     	;# 
  1958  0007                     	;# 
  1959  0008                     	;# 
  1960  0009                     	;# 
  1961  000A                     	;# 
  1962  000B                     	;# 
  1963  000C                     	;# 
  1964  000D                     	;# 
  1965  000E                     	;# 
  1966  0010                     	;# 
  1967  0011                     	;# 
  1968  0012                     	;# 
  1969  0015                     	;# 
  1970  0016                     	;# 
  1971  0016                     	;# 
  1972  0017                     	;# 
  1973  0018                     	;# 
  1974  0019                     	;# 
  1975  001A                     	;# 
  1976  001B                     	;# 
  1977  001C                     	;# 
  1978  008C                     	;# 
  1979  008D                     	;# 
  1980  008E                     	;# 
  1981  0090                     	;# 
  1982  0091                     	;# 
  1983  0092                     	;# 
  1984  0095                     	;# 
  1985  0096                     	;# 
  1986  0097                     	;# 
  1987  0099                     	;# 
  1988  009A                     	;# 
  1989  009B                     	;# 
  1990  009B                     	;# 
  1991  009C                     	;# 
  1992  009D                     	;# 
  1993  009E                     	;# 
  1994  010C                     	;# 
  1995  010D                     	;# 
  1996  010E                     	;# 
  1997  0116                     	;# 
  1998  0117                     	;# 
  1999  011D                     	;# 
  2000  018C                     	;# 
  2001  018D                     	;# 
  2002  018E                     	;# 
  2003  0191                     	;# 
  2004  0191                     	;# 
  2005  0192                     	;# 
  2006  0193                     	;# 
  2007  0193                     	;# 
  2008  0194                     	;# 
  2009  0195                     	;# 
  2010  0196                     	;# 
  2011  0197                     	;# 
  2012  0199                     	;# 
  2013  019A                     	;# 
  2014  019B                     	;# 
  2015  019B                     	;# 
  2016  019B                     	;# 
  2017  019B                     	;# 
  2018  019C                     	;# 
  2019  019C                     	;# 
  2020  019D                     	;# 
  2021  019E                     	;# 
  2022  019F                     	;# 
  2023  020D                     	;# 
  2024  0210                     	;# 
  2025  0211                     	;# 
  2026  0211                     	;# 
  2027  0212                     	;# 
  2028  0212                     	;# 
  2029  0213                     	;# 
  2030  0213                     	;# 
  2031  0214                     	;# 
  2032  0214                     	;# 
  2033  0215                     	;# 
  2034  0215                     	;# 
  2035  0215                     	;# 
  2036  0216                     	;# 
  2037  0216                     	;# 
  2038  0217                     	;# 
  2039  0217                     	;# 
  2040  0291                     	;# 
  2041  0291                     	;# 
  2042  0292                     	;# 
  2043  0293                     	;# 
  2044  0298                     	;# 
  2045  0298                     	;# 
  2046  0299                     	;# 
  2047  029A                     	;# 
  2048  0394                     	;# 
  2049  0395                     	;# 
  2050  0396                     	;# 
  2051  0FE4                     	;# 
  2052  0FE5                     	;# 
  2053  0FE6                     	;# 
  2054  0FE7                     	;# 
  2055  0FE8                     	;# 
  2056  0FE9                     	;# 
  2057  0FEA                     	;# 
  2058  0FEB                     	;# 
  2059  0FED                     	;# 
  2060  0FEE                     	;# 
  2061  0FEF                     	;# 
  2062  0000                     	;# 
  2063  0001                     	;# 
  2064  0002                     	;# 
  2065  0003                     	;# 
  2066  0004                     	;# 
  2067  0005                     	;# 
  2068  0006                     	;# 
  2069  0007                     	;# 
  2070  0008                     	;# 
  2071  0009                     	;# 
  2072  000A                     	;# 
  2073  000B                     	;# 
  2074  000C                     	;# 
  2075  000D                     	;# 
  2076  000E                     	;# 
  2077  0010                     	;# 
  2078  0011                     	;# 
  2079  0012                     	;# 
  2080  0015                     	;# 
  2081  0016                     	;# 
  2082  0016                     	;# 
  2083  0017                     	;# 
  2084  0018                     	;# 
  2085  0019                     	;# 
  2086  001A                     	;# 
  2087  001B                     	;# 
  2088  001C                     	;# 
  2089  008C                     	;# 
  2090  008D                     	;# 
  2091  008E                     	;# 
  2092  0090                     	;# 
  2093  0091                     	;# 
  2094  0092                     	;# 
  2095  0095                     	;# 
  2096  0096                     	;# 
  2097  0097                     	;# 
  2098  0099                     	;# 
  2099  009A                     	;# 
  2100  009B                     	;# 
  2101  009B                     	;# 
  2102  009C                     	;# 
  2103  009D                     	;# 
  2104  009E                     	;# 
  2105  010C                     	;# 
  2106  010D                     	;# 
  2107  010E                     	;# 
  2108  0116                     	;# 
  2109  0117                     	;# 
  2110  011D                     	;# 
  2111  018C                     	;# 
  2112  018D                     	;# 
  2113  018E                     	;# 
  2114  0191                     	;# 
  2115  0191                     	;# 
  2116  0192                     	;# 
  2117  0193                     	;# 
  2118  0193                     	;# 
  2119  0194                     	;# 
  2120  0195                     	;# 
  2121  0196                     	;# 
  2122  0197                     	;# 
  2123  0199                     	;# 
  2124  019A                     	;# 
  2125  019B                     	;# 
  2126  019B                     	;# 
  2127  019B                     	;# 
  2128  019B                     	;# 
  2129  019C                     	;# 
  2130  019C                     	;# 
  2131  019D                     	;# 
  2132  019E                     	;# 
  2133  019F                     	;# 
  2134  020D                     	;# 
  2135  0210                     	;# 
  2136  0211                     	;# 
  2137  0211                     	;# 
  2138  0212                     	;# 
  2139  0212                     	;# 
  2140  0213                     	;# 
  2141  0213                     	;# 
  2142  0214                     	;# 
  2143  0214                     	;# 
  2144  0215                     	;# 
  2145  0215                     	;# 
  2146  0215                     	;# 
  2147  0216                     	;# 
  2148  0216                     	;# 
  2149  0217                     	;# 
  2150  0217                     	;# 
  2151  0291                     	;# 
  2152  0291                     	;# 
  2153  0292                     	;# 
  2154  0293                     	;# 
  2155  0298                     	;# 
  2156  0298                     	;# 
  2157  0299                     	;# 
  2158  029A                     	;# 
  2159  0394                     	;# 
  2160  0395                     	;# 
  2161  0396                     	;# 
  2162  0FE4                     	;# 
  2163  0FE5                     	;# 
  2164  0FE6                     	;# 
  2165  0FE7                     	;# 
  2166  0FE8                     	;# 
  2167  0FE9                     	;# 
  2168  0FEA                     	;# 
  2169  0FEB                     	;# 
  2170  0FED                     	;# 
  2171  0FEE                     	;# 
  2172  0FEF                     	;# 
  2173                           
  2174                           	psect	idataBANK4
  2175  1C34                     __pidataBANK4:	
  2176                           
  2177                           ;initializer for __product
  2178  1C34  3463               	retlw	99
  2179  1C35  3402               	retlw	2
  2180  1C36  3400               	retlw	0
  2181  1C37  3400               	retlw	0
  2182  1C38  3400               	retlw	0
  2183  1C39  3400               	retlw	0
  2184  1C3A  3400               	retlw	0
  2185  1C3B  3400               	retlw	0
  2186  1C3C  3400               	retlw	0
  2187  1C3D  3400               	retlw	0
  2188  1C3E  3400               	retlw	0
  2189  1C3F  3400               	retlw	0
  2190  1C40  34FF               	retlw	255
  2191  1C41  34FF               	retlw	255
  2192  1C42  34FF               	retlw	255
  2193  1C43  3400               	retlw	0
  2194  1C44  3400               	retlw	0
  2195  1C45  3400               	retlw	0
  2196  1C46  3400               	retlw	0
  2197  1C47  3400               	retlw	0
  2198  1C48  3400               	retlw	0
  2199  1C49  3400               	retlw	0
  2200  1C4A  3400               	retlw	0
  2201  1C4B  3400               	retlw	0
  2202  1C4C  3400               	retlw	0
  2203  1C4D  3400               	retlw	0
  2204  1C4E  3400               	retlw	0
  2205  1C4F  3400               	retlw	0
  2206  1C50  3400               	retlw	0
  2207  1C51  3400               	retlw	0
  2208  1C52  3400               	retlw	0
  2209  1C53  3400               	retlw	0
  2210                           
  2211                           	psect	stringtext
  2212  1800                     __pstringtext:	
  2213  1800                     _CC2500_registers_address:	
  2214  1800  3403               	retlw	3
  2215  1801  3416               	retlw	22
  2216  1802  3417               	retlw	23
  2217  1803  341E               	retlw	30
  2218  1804  341F               	retlw	31
  2219  1805  3420               	retlw	32
  2220  1806  342A               	retlw	42
  2221  1807  342B               	retlw	43
  2222  1808  340B               	retlw	11
  2223  1809  340C               	retlw	12
  2224  180A  340D               	retlw	13
  2225  180B  340E               	retlw	14
  2226  180C  340F               	retlw	15
  2227  180D  3410               	retlw	16
  2228  180E  3411               	retlw	17
  2229  180F  3412               	retlw	18
  2230  1810  3413               	retlw	19
  2231  1811  3414               	retlw	20
  2232  1812  340A               	retlw	10
  2233  1813  3415               	retlw	21
  2234  1814  3421               	retlw	33
  2235  1815  3422               	retlw	34
  2236  1816  3418               	retlw	24
  2237  1817  3419               	retlw	25
  2238  1818  341A               	retlw	26
  2239  1819  341B               	retlw	27
  2240  181A  341C               	retlw	28
  2241  181B  341D               	retlw	29
  2242  181C  3423               	retlw	35
  2243  181D  3424               	retlw	36
  2244  181E  3425               	retlw	37
  2245  181F  3426               	retlw	38
  2246  1820  3429               	retlw	41
  2247  1821  342C               	retlw	44
  2248  1822  342D               	retlw	45
  2249  1823  342E               	retlw	46
  2250  1824  3400               	retlw	0
  2251  1825  3401               	retlw	1
  2252  1826  3402               	retlw	2
  2253  1827  3407               	retlw	7
  2254  1828  3408               	retlw	8
  2255  1829  3409               	retlw	9
  2256  182A  3406               	retlw	6
  2257  182B  3404               	retlw	4
  2258  182C  3405               	retlw	5
  2259  182D  3427               	retlw	39
  2260  182E  3428               	retlw	40
  2261  182F                     __end_of_CC2500_registers_address:	
  2262  182F                     _CC2500_rfSettings:	
  2263  182F  3407               	retlw	7
  2264  1830  3407               	retlw	7
  2265  1831  3430               	retlw	48
  2266  1832  3487               	retlw	135
  2267  1833  346B               	retlw	107
  2268  1834  34F8               	retlw	248
  2269  1835  347F               	retlw	127
  2270  1836  343F               	retlw	63
  2271  1837  3409               	retlw	9
  2272  1838  3400               	retlw	0
  2273  1839  345C               	retlw	92
  2274  183A  34A7               	retlw	167
  2275  183B  3462               	retlw	98
  2276  183C  3486               	retlw	134
  2277  183D  3483               	retlw	131
  2278  183E  3403               	retlw	3
  2279  183F  3422               	retlw	34
  2280  1840  34F8               	retlw	248
  2281  1841  3400               	retlw	0
  2282  1842  3444               	retlw	68
  2283  1843  34B6               	retlw	182
  2284  1844  3410               	retlw	16
  2285  1845  3418               	retlw	24
  2286  1846  341D               	retlw	29
  2287  1847  341C               	retlw	28
  2288  1848  34C7               	retlw	199
  2289  1849  3400               	retlw	0
  2290  184A  34B2               	retlw	178
  2291  184B  34EA               	retlw	234
  2292  184C  340A               	retlw	10
  2293  184D  3400               	retlw	0
  2294  184E  3411               	retlw	17
  2295  184F  3459               	retlw	89
  2296  1850  3488               	retlw	136
  2297  1851  3431               	retlw	49
  2298  1852  340B               	retlw	11
  2299  1853  342F               	retlw	47
  2300  1854  342E               	retlw	46
  2301  1855  3406               	retlw	6
  2302  1856  3404               	retlw	4
  2303  1857  3405               	retlw	5
  2304  1858  3400               	retlw	0
  2305  1859  3430               	retlw	48
  2306  185A  34D3               	retlw	211
  2307  185B  3491               	retlw	145
  2308  185C  3441               	retlw	65
  2309  185D  3400               	retlw	0
  2310  185E                     __end_of_CC2500_rfSettings:	
  2311  185E                     _CC2500_patable_vaule:	
  2312  185E  34FE               	retlw	254
  2313  185F  34FE               	retlw	254
  2314  1860  34FE               	retlw	254
  2315  1861  34FE               	retlw	254
  2316  1862  34FE               	retlw	254
  2317  1863  34FE               	retlw	254
  2318  1864  34FE               	retlw	254
  2319  1865  34FE               	retlw	254
  2320  1866                     __end_of_CC2500_patable_vaule:	
  2321                           
  2322                           	psect	nvBANK1
  2323  00EE                     __pnvBANK1:	
  2324  00EE                     _product:	
  2325  00EE                     	ds	1
  2326  000C                     _PORTA	set	12
  2327  000D                     _PORTB	set	13
  2328  000E                     _PORTC	set	14
  2329  0018                     _T1CON	set	24
  2330  0017                     _TMR1H	set	23
  2331  0016                     _TMR1L	set	22
  2332  005F                     _GIE	set	95
  2333  005B                     _IOCIE	set	91
  2334  0058                     _IOCIF	set	88
  2335  005E                     _PEIE	set	94
  2336  0060                     _RA0	set	96
  2337  0063                     _RA3	set	99
  2338  0064                     _RA4	set	100
  2339  0066                     _RA6	set	102
  2340  0067                     _RA7	set	103
  2341  0068                     _RB0	set	104
  2342  0069                     _RB1	set	105
  2343  006A                     _RB2	set	106
  2344  006B                     _RB3	set	107
  2345  006C                     _RB4	set	108
  2346  006D                     _RB5	set	109
  2347  0070                     _RC0	set	112
  2348  0071                     _RC1	set	113
  2349  0072                     _RC2	set	114
  2350  0074                     _RC4	set	116
  2351  0075                     _RC5	set	117
  2352  0077                     _RC7	set	119
  2353  0088                     _TMR1IF	set	136
  2354  009D                     _ADCON0	set	157
  2355  009E                     _ADCON1	set	158
  2356  009C                     _ADRESH	set	156
  2357  009B                     _ADRESL	set	155
  2358  0099                     _OSCCON	set	153
  2359  008C                     _TRISA	set	140
  2360  008D                     _TRISB	set	141
  2361  008E                     _TRISC	set	142
  2362  0097                     _WDTCON	set	151
  2363  04E9                     _GO_nDONE	set	1257
  2364  0488                     _TMR1IE	set	1160
  2365  0117                     _FVRCON	set	279
  2366  010C                     _LATA	set	268
  2367  010D                     _LATB	set	269
  2368  010E                     _LATC	set	270
  2369  018C                     _ANSELA	set	396
  2370  018D                     _ANSELB	set	397
  2371  018E                     _ANSELC	set	398
  2372  0192                     _PMADRH	set	402
  2373  0191                     _PMADRL	set	401
  2374  0196                     _PMCON2	set	406
  2375  0194                     _PMDATH	set	404
  2376  0193                     _PMDATL	set	403
  2377  0CAE                     _CFGS	set	3246
  2378  0CAC                     _FREE	set	3244
  2379  0CAD                     _LWLO	set	3245
  2380  0CA8                     _RD	set	3240
  2381  0CA9                     _WR	set	3241
  2382  0CAA                     _WREN	set	3242
  2383  020D                     _WPUB	set	525
  2384  0396                     _IOCBF	set	918
  2385  0395                     _IOCBN	set	917
  2386  0394                     _IOCBP	set	916
  2387  1CB2                     _IOCBF2	set	7346
  2388                           
  2389                           ; #config settings
  2390  0000                     
  2391                           	psect	cinit
  2392  0021                     start_initialization:	
  2393  0021                     __initialization:	
  2394                           
  2395                           ; Clear objects allocated to BITCOMMON
  2396  0021  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2397                           
  2398                           ; Clear objects allocated to BITBANK1
  2399  0022  0021               	movlb	1	; select bank1
  2400  0023  01EF               	clrf	(__pbitbssBANK1/(0+8))& (0+127)
  2401                           
  2402                           ; Clear objects allocated to BANK1
  2403  0024  30A0               	movlw	low __pbssBANK1
  2404  0025  0084               	movwf	4
  2405  0026  3000               	movlw	high __pbssBANK1
  2406  0027  0085               	movwf	5
  2407  0028  3045               	movlw	69
  2408  0029  31A6  26D1  3180   	fcall	clear_ram0
  2409                           
  2410                           ; Clear objects allocated to BANK2
  2411  002C  3020               	movlw	low __pbssBANK2
  2412  002D  0084               	movwf	4
  2413  002E  3001               	movlw	high __pbssBANK2
  2414  002F  0085               	movwf	5
  2415  0030  304E               	movlw	78
  2416  0031  31A6  26D1  3180   	fcall	clear_ram0
  2417                           
  2418                           ; Clear objects allocated to BANK3
  2419  0034  30A0               	movlw	low __pbssBANK3
  2420  0035  0084               	movwf	4
  2421  0036  3001               	movlw	high __pbssBANK3
  2422  0037  0085               	movwf	5
  2423  0038  304D               	movlw	77
  2424  0039  31A6  26D1  3180   	fcall	clear_ram0
  2425                           
  2426                           ; Clear objects allocated to BANK4
  2427  003C  3020               	movlw	low __pbssBANK4
  2428  003D  0084               	movwf	4
  2429  003E  3002               	movlw	high __pbssBANK4
  2430  003F  0085               	movwf	5
  2431  0040  302E               	movlw	46
  2432  0041  31A6  26D1  3180   	fcall	clear_ram0
  2433                           
  2434                           ; Initialize objects allocated to BANK4
  2435  0044  3034               	movlw	low __pidataBANK4
  2436  0045  0084               	movwf	4
  2437  0046  309C               	movlw	(high __pidataBANK4)| (0+128)
  2438  0047  0085               	movwf	5
  2439  0048  304E               	movlw	low __pdataBANK4
  2440  0049  0086               	movwf	6
  2441  004A  3002               	movlw	high __pdataBANK4
  2442  004B  0087               	movwf	7
  2443  004C  3020               	movlw	32
  2444  004D  31A6  26CB         	fcall	init_ram
  2445  004F                     end_of_initialization:	
  2446                           ;End of C runtime variable initialization code
  2447                           
  2448  004F                     __end_of__initialization:	
  2449  004F  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2450  0050  0020               	movlb	0
  2451  0051  3193  2B2D         	ljmp	_main	;jump to C main() function
  2452                           
  2453                           	psect	bitbssCOMMON
  2454  03E8                     __pbitbssCOMMON:	
  2455  03E8                     _Transceive_OK:	
  2456  03E8                     	ds	1
  2457                           
  2458                           	psect	bitbssBANK1
  2459  0778                     __pbitbssBANK1:	
  2460  0778                     _Receive_OK:	
  2461  0778                     	ds	1
  2462                           
  2463                           	psect	bssBANK1
  2464  00A0                     __pbssBANK1:	
  2465  00A0                     _RF1:	
  2466  00A0                     	ds	15
  2467  00AF                     _myMain:	
  2468  00AF                     	ds	13
  2469  00BC                     _DimmerIntr1:	
  2470  00BC                     	ds	12
  2471  00C8                     _DimmerIntr2:	
  2472  00C8                     	ds	12
  2473  00D4                     _Sw:	
  2474  00D4                     	ds	2
  2475  00D6                     _CRC:	
  2476  00D6                     	ds	1
  2477  00D7                     _Cmd:	
  2478  00D7                     	ds	1
  2479  00D8                     _DelayOff:	
  2480  00D8                     	ds	1
  2481  00D9                     _DimmerIntr:	
  2482  00D9                     	ds	1
  2483  00DA                     _DimmerLights:	
  2484  00DA                     	ds	1
  2485  00DB                     _LED:	
  2486  00DB                     	ds	1
  2487  00DC                     _Light:	
  2488  00DC                     	ds	1
  2489  00DD                     _RSSI:	
  2490  00DD                     	ds	1
  2491  00DE                     _Rx_Length:	
  2492  00DE                     	ds	1
  2493  00DF                     _SPI0Buffer:	
  2494  00DF                     	ds	1
  2495  00E0                     _SwDetect:	
  2496  00E0                     	ds	1
  2497  00E1                     _Tx_Length:	
  2498  00E1                     	ds	1
  2499  00E2                     _r_address:	
  2500  00E2                     	ds	1
  2501  00E3                     _r_data:	
  2502  00E3                     	ds	1
  2503  00E4                     _s_data:	
  2504  00E4                     	ds	1
  2505                           
  2506                           	psect	bssBANK2
  2507  0120                     __pbssBANK2:	
  2508  0120                     _Buz1:	
  2509  0120                     	ds	12
  2510  012C                     _Dimmer:	
  2511  012C                     	ds	5
  2512  0131                     _Timer1:	
  2513  0131                     	ds	3
  2514  0134                     _RF_Count:	
  2515  0134                     	ds	2
  2516  0136                     _WDT:	
  2517  0136                     	ds	2
  2518  0138                     _Load:	
  2519  0138                     	ds	40
  2520  0160                     _Temp:	
  2521  0160                     	ds	14
  2522                           
  2523                           	psect	bssBANK3
  2524  01A0                     __pbssBANK3:	
  2525  01A0                     _RF_Data:	
  2526  01A0                     	ds	30
  2527  01BE                     _Sw1:	
  2528  01BE                     	ds	9
  2529  01C7                     _DimmerLights1:	
  2530  01C7                     	ds	8
  2531  01CF                     _DimmerLights2:	
  2532  01CF                     	ds	8
  2533  01D7                     _DlySw1:	
  2534  01D7                     	ds	5
  2535  01DC                     _DlySw2:	
  2536  01DC                     	ds	5
  2537  01E1                     _VarErrLED:	
  2538  01E1                     	ds	4
  2539  01E5                     _VarLED1:	
  2540  01E5                     	ds	4
  2541  01E9                     _VarLED2:	
  2542  01E9                     	ds	4
  2543                           
  2544                           	psect	bssBANK4
  2545  0220                     __pbssBANK4:	
  2546  0220                     _Memory:	
  2547  0220                     	ds	37
  2548  0245                     _Sw2:	
  2549  0245                     	ds	9
  2550                           
  2551                           	psect	dataBANK4
  2552  024E                     __pdataBANK4:	
  2553  024E                     __product:	
  2554  024E                     	ds	32
  2555                           
  2556                           	psect	clrtext
  2557  26D1                     clear_ram0:	
  2558                           ;	Called with FSR0 containing the base address, and
  2559                           ;	WREG with the size to clear
  2560                           
  2561  26D1  0064               	clrwdt	;clear the watchdog before getting into this loop
  2562  26D2                     clrloop0:	
  2563  26D2  0180               	clrf	0	;clear RAM location pointed to by FSR
  2564  26D3  3101               	addfsr 0,1
  2565  26D4  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2566  26D5  2ED2               	goto	clrloop0	;have we reached the end yet?
  2567  26D6  3400               	retlw	0	;all done for this memory range, return
  2568                           
  2569                           	psect	inittext
  2570  26CB                     init_ram:	
  2571  26CB  00FE               	movwf	126
  2572  26CC                     initloop:	
  2573  26CC  0012               	moviw fsr0++
  2574  26CD  001E               	movwi fsr1++
  2575  26CE  0BFE               	decfsz	126,f
  2576  26CF  2ECC               	goto	initloop
  2577  26D0  3400               	retlw	0
  2578                           
  2579                           	psect	cstackBANK1
  2580  00E5                     __pcstackBANK1:	
  2581  00E5                     setDimmerLights_OnOff@lights:	
  2582  00E5                     setRFSW_Control@status:	
  2583                           ; 1 bytes @ 0x0
  2584                           
  2585                           
  2586                           ; 1 bytes @ 0x0
  2587  00E5                     	ds	1
  2588  00E6                     setDimmerLights_Main@lights:	
  2589  00E6                     setRFSW_Control@rfDimming:	
  2590                           ; 1 bytes @ 0x1
  2591                           
  2592                           
  2593                           ; 1 bytes @ 0x1
  2594  00E6                     	ds	1
  2595  00E7                     setRFSW_Control@sw:	
  2596                           
  2597                           ; 1 bytes @ 0x2
  2598  00E7                     	ds	1
  2599  00E8                     ??_setRF_Main:	
  2600                           
  2601                           ; 0 bytes @ 0x3
  2602  00E8                     	ds	1
  2603  00E9                     setRF_Main@error:	
  2604                           
  2605                           ; 1 bytes @ 0x4
  2606  00E9                     	ds	1
  2607  00EA                     ?_main:	
  2608  00EA                     main@argc:	
  2609                           ; 2 bytes @ 0x5
  2610                           
  2611                           
  2612                           ; 2 bytes @ 0x5
  2613  00EA                     	ds	2
  2614  00EC                     main@argv:	
  2615                           
  2616                           ; 2 bytes @ 0x7
  2617  00EC                     	ds	2
  2618                           
  2619                           	psect	cstackCOMMON
  2620  0070                     __pcstackCOMMON:	
  2621  0070                     ?_CC2500_WriteCommand:	
  2622  0070                     ?_RF_Timeout_Counter:	
  2623                           ; 0 bytes @ 0x0
  2624                           
  2625  0070                     ?_setRF_TimeoutCleared:	
  2626                           ; 0 bytes @ 0x0
  2627                           
  2628  0070                     ?_CC2500_WriteByte:	
  2629                           ; 0 bytes @ 0x0
  2630                           
  2631  0070                     ?_CC2500_ReadStatus:	
  2632                           ; 0 bytes @ 0x0
  2633                           
  2634  0070                     ?_CC2500_ReadByte:	
  2635                           ; 0 bytes @ 0x0
  2636                           
  2637  0070                     ?_CC2500_PowerRST:	
  2638                           ; 0 bytes @ 0x0
  2639                           
  2640  0070                     ?_CC2500_InitSetREG:	
  2641                           ; 0 bytes @ 0x0
  2642                           
  2643  0070                     ?_CC2500_InitPATable:	
  2644                           ; 0 bytes @ 0x0
  2645                           
  2646  0070                     ?_CC2500_ClearTXFIFO:	
  2647                           ; 0 bytes @ 0x0
  2648                           
  2649  0070                     ?_CC2500_ClearRXFIFO:	
  2650                           ; 0 bytes @ 0x0
  2651                           
  2652  0070                     ?_CC2500_FrequencyCabr:	
  2653                           ; 0 bytes @ 0x0
  2654                           
  2655  0070                     ?_CC2500_SIDLEMode:	
  2656                           ; 0 bytes @ 0x0
  2657                           
  2658  0070                     ?_DlyOff_Initialization:	
  2659                           ; 0 bytes @ 0x0
  2660                           
  2661  0070                     ?_DlyOff_Main:	
  2662                           ; 0 bytes @ 0x0
  2663                           
  2664  0070                     ?_setDimmerLights_SwOn:	
  2665                           ; 0 bytes @ 0x0
  2666                           
  2667  0070                     ?_setDimmerLights_SwOff:	
  2668                           ; 0 bytes @ 0x0
  2669                           
  2670  0070                     ?_setMemory_Modify:	
  2671                           ; 0 bytes @ 0x0
  2672                           
  2673  0070                     ?_setDimmerLights_Initialization:	
  2674                           ; 0 bytes @ 0x0
  2675                           
  2676  0070                     ?_setDimmerLights_Main:	
  2677                           ; 0 bytes @ 0x0
  2678                           
  2679  0070                     ?_DimmerLights_DimmingFunction:	
  2680                           ; 0 bytes @ 0x0
  2681                           
  2682  0070                     ?_setDimmerLights_Line:	
  2683                           ; 0 bytes @ 0x0
  2684                           
  2685  0070                     ?_setDimmerLights_DimmingClose:	
  2686                           ; 0 bytes @ 0x0
  2687                           
  2688  0070                     ?_setTxData:	
  2689                           ; 0 bytes @ 0x0
  2690                           
  2691  0070                     ?_setRF_TransceiveGO:	
  2692                           ; 0 bytes @ 0x0
  2693                           
  2694  0070                     ?_setLED_Initialization:	
  2695                           ; 0 bytes @ 0x0
  2696                           
  2697  0070                     ?_setLED_Main:	
  2698                           ; 0 bytes @ 0x0
  2699                           
  2700  0070                     ?_Fosc_Set:	
  2701                           ; 0 bytes @ 0x0
  2702                           
  2703  0070                     ?_IO_Set:	
  2704                           ; 0 bytes @ 0x0
  2705                           
  2706  0070                     ?_TMR1_Set:	
  2707                           ; 0 bytes @ 0x0
  2708                           
  2709  0070                     ?_ADC_Set:	
  2710                           ; 0 bytes @ 0x0
  2711                           
  2712  0070                     ?_IOC_Set:	
  2713                           ; 0 bytes @ 0x0
  2714                           
  2715  0070                     ?_WDT_Set:	
  2716                           ; 0 bytes @ 0x0
  2717                           
  2718  0070                     ?_TMR1_ISR:	
  2719                           ; 0 bytes @ 0x0
  2720                           
  2721  0070                     ?_IOC_ISR:	
  2722                           ; 0 bytes @ 0x0
  2723                           
  2724  0070                     ?_Timeout_Counter:	
  2725                           ; 0 bytes @ 0x0
  2726                           
  2727  0070                     ?_set_TimeoutCleared:	
  2728                           ; 0 bytes @ 0x0
  2729                           
  2730  0070                     ?_Flash_Memory_Write:	
  2731                           ; 0 bytes @ 0x0
  2732                           
  2733  0070                     ?_Flash_Memory_Modify:	
  2734                           ; 0 bytes @ 0x0
  2735                           
  2736  0070                     ?_WDT_Clearing:	
  2737                           ; 0 bytes @ 0x0
  2738                           
  2739  0070                     ?_setLoad_AH_AL_Restore:	
  2740                           ; 0 bytes @ 0x0
  2741                           
  2742  0070                     ?_setTemp_Initialization:	
  2743                           ; 0 bytes @ 0x0
  2744                           
  2745  0070                     ?_setTemp_Main:	
  2746                           ; 0 bytes @ 0x0
  2747                           
  2748  0070                     ?_setOverTemp_ADV_Restore:	
  2749                           ; 0 bytes @ 0x0
  2750                           
  2751  0070                     ?_setRF_Initialization:	
  2752                           ; 0 bytes @ 0x0
  2753                           
  2754  0070                     ?_setRF_Main:	
  2755                           ; 0 bytes @ 0x0
  2756                           
  2757  0070                     ?_RF_RxDisable:	
  2758                           ; 0 bytes @ 0x0
  2759                           
  2760  0070                     ?_getRxData:	
  2761                           ; 0 bytes @ 0x0
  2762                           
  2763  0070                     ?_setLog_Code:	
  2764                           ; 0 bytes @ 0x0
  2765                           
  2766  0070                     ?_setControl_Lights_Table:	
  2767                           ; 0 bytes @ 0x0
  2768                           
  2769  0070                     ?_setRFSW_Control:	
  2770                           ; 0 bytes @ 0x0
  2771                           
  2772  0070                     ?_setRFSW_AdjControl:	
  2773                           ; 0 bytes @ 0x0
  2774                           
  2775  0070                     ?_setRF_AdjControl:	
  2776                           ; 0 bytes @ 0x0
  2777                           
  2778  0070                     ?_setSw_Initialization:	
  2779                           ; 0 bytes @ 0x0
  2780                           
  2781  0070                     ?_setSw_Main:	
  2782                           ; 0 bytes @ 0x0
  2783                           
  2784  0070                     ?_myMain_Initialization:	
  2785                           ; 0 bytes @ 0x0
  2786                           
  2787  0070                     ?_my_MainTimer:	
  2788                           ; 0 bytes @ 0x0
  2789                           
  2790  0070                     ?_Exception_Main:	
  2791                           ; 0 bytes @ 0x0
  2792                           
  2793  0070                     ?_Buzzer_Initialization:	
  2794                           ; 0 bytes @ 0x0
  2795                           
  2796  0070                     ?_Buzzer_Main:	
  2797                           ; 0 bytes @ 0x0
  2798                           
  2799  0070                     ?_CC2500_TxData:	
  2800                           ; 0 bytes @ 0x0
  2801                           
  2802  0070                     ?_CC2500_RxData:	
  2803                           ; 0 bytes @ 0x0
  2804                           
  2805  0070                     ?_CC2500_PowerOnInitial:	
  2806                           ; 0 bytes @ 0x0
  2807                           
  2808  0070                     ?_DelayOffPointSelect:	
  2809                           ; 0 bytes @ 0x0
  2810                           
  2811  0070                     ?_DelayOff_Initialization:	
  2812                           ; 0 bytes @ 0x0
  2813                           
  2814  0070                     ?_DelayOff_Main:	
  2815                           ; 0 bytes @ 0x0
  2816                           
  2817  0070                     ?_DimmerIntr_Initialization:	
  2818                           ; 0 bytes @ 0x0
  2819                           
  2820  0070                     ?_DimmerLights_SelectPointer:	
  2821                           ; 0 bytes @ 0x0
  2822                           
  2823  0070                     ?_DimmerLights_Initialization:	
  2824                           ; 0 bytes @ 0x0
  2825                           
  2826  0070                     ?_setDimmerLights_DimmingOn:	
  2827                           ; 0 bytes @ 0x0
  2828                           
  2829  0070                     ?_DimmerLights_Main:	
  2830                           ; 0 bytes @ 0x0
  2831                           
  2832  0070                     ?_DimmerLights_TMR_1:	
  2833                           ; 0 bytes @ 0x0
  2834                           
  2835  0070                     ??_DimmerLights_TMR_1:	
  2836                           ; 0 bytes @ 0x0
  2837                           
  2838  0070                     ?_DimmerLights_IOC_1:	
  2839                           ; 0 bytes @ 0x0
  2840                           
  2841  0070                     ?_DimmerLights_TMR_2:	
  2842                           ; 0 bytes @ 0x0
  2843                           
  2844  0070                     ??_DimmerLights_TMR_2:	
  2845                           ; 0 bytes @ 0x0
  2846                           
  2847  0070                     ?_DimmerLights_IOC_2:	
  2848                           ; 0 bytes @ 0x0
  2849                           
  2850  0070                     ?_LedPointSelect:	
  2851                           ; 0 bytes @ 0x0
  2852                           
  2853  0070                     ?_LED_Initialization:	
  2854                           ; 0 bytes @ 0x0
  2855                           
  2856  0070                     ?_LED_Main:	
  2857                           ; 0 bytes @ 0x0
  2858                           
  2859  0070                     ?_Mcu_Initialization:	
  2860                           ; 0 bytes @ 0x0
  2861                           
  2862  0070                     ?_ISR:	
  2863                           ; 0 bytes @ 0x0
  2864                           
  2865  0070                     ?_Flash_Memory_Initialization:	
  2866                           ; 0 bytes @ 0x0
  2867                           
  2868  0070                     ?_Flash_Memory_Main:	
  2869                           ; 0 bytes @ 0x0
  2870                           
  2871  0070                     ?_Flash_Memory_Unlock:	
  2872                           ; 0 bytes @ 0x0
  2873                           
  2874  0070                     ?_Flash_Memory_Erasing:	
  2875                           ; 0 bytes @ 0x0
  2876                           
  2877  0070                     ?_setMemory_LoopSave:	
  2878                           ; 0 bytes @ 0x0
  2879                           
  2880  0070                     ?_WDT_Main:	
  2881                           ; 0 bytes @ 0x0
  2882                           
  2883  0070                     ?_Load_Initialization:	
  2884                           ; 0 bytes @ 0x0
  2885                           
  2886  0070                     ?_getLoad_AD:	
  2887                           ; 0 bytes @ 0x0
  2888                           
  2889  0070                     ?_Load_Main:	
  2890                           ; 0 bytes @ 0x0
  2891                           
  2892  0070                     ?_Temp_Initialization:	
  2893                           ; 0 bytes @ 0x0
  2894                           
  2895  0070                     ?_getTemp_AD:	
  2896                           ; 0 bytes @ 0x0
  2897                           
  2898  0070                     ?_Temp_Main:	
  2899                           ; 0 bytes @ 0x0
  2900                           
  2901  0070                     ?_RF_Initialization:	
  2902                           ; 0 bytes @ 0x0
  2903                           
  2904  0070                     ?_RF_Main:	
  2905                           ; 0 bytes @ 0x0
  2906                           
  2907  0070                     ?_setRF_Learn:	
  2908                           ; 0 bytes @ 0x0
  2909                           
  2910  0070                     ?_TouchPower:	
  2911                           ; 0 bytes @ 0x0
  2912                           
  2913  0070                     ?_SwPointSelect:	
  2914                           ; 0 bytes @ 0x0
  2915                           
  2916  0070                     ?_Switch_Initialization:	
  2917                           ; 0 bytes @ 0x0
  2918                           
  2919  0070                     ?_Switch_Main:	
  2920                           ; 0 bytes @ 0x0
  2921                           
  2922  0070                     ?_getDimmerLights_Status:	
  2923                           ; 0 bytes @ 0x0
  2924                           
  2925  0070                     ?_getDimmerLights_ValueToPercent:	
  2926                           ; 1 bytes @ 0x0
  2927                           
  2928  0070                     ?_getDimmerLights_PercentToValue:	
  2929                           ; 1 bytes @ 0x0
  2930                           
  2931  0070                     ?_getLoad_OK:	
  2932                           ; 1 bytes @ 0x0
  2933                           
  2934  0070                     ?_getMain_All_Error_Status:	
  2935                           ; 1 bytes @ 0x0
  2936                           
  2937  0070                     ?_getMain_All_LightsStatus:	
  2938                           ; 1 bytes @ 0x0
  2939                           
  2940  0070                     ?_getDimmerLights_Allow_Condition:	
  2941                           ; 1 bytes @ 0x0
  2942                           
  2943  0070                     ?_getCmd_Status:	
  2944                           ; 1 bytes @ 0x0
  2945                           
  2946  0070                     ?_Flash_Memory_Read:	
  2947                           ; 1 bytes @ 0x0
  2948                           
  2949  0070                     ?_getAll_Sw_KeyStatus:	
  2950                           ; 1 bytes @ 0x0
  2951                           
  2952  0070                     ?_getMain_Lights_Count:	
  2953                           ; 1 bytes @ 0x0
  2954                           
  2955  0070                     ?_getRF_KeyStatus:	
  2956                           ; 1 bytes @ 0x0
  2957                           
  2958  0070                     ?_getSw_KeyStatus:	
  2959                           ; 1 bytes @ 0x0
  2960                           
  2961  0070                     ?_getDelayOff_GO:	
  2962                           ; 1 bytes @ 0x0
  2963                           
  2964  0070                     ?_getDimmerIntr_DimmingValue:	
  2965                           ; 1 bytes @ 0x0
  2966                           
  2967  0070                     ?_getDimmerIntr_Dimming_Sw:	
  2968                           ; 1 bytes @ 0x0
  2969                           
  2970  0070                     ?_getAll_DimmerIntr_Dimming_Sw_RF:	
  2971                           ; 1 bytes @ 0x0
  2972                           
  2973  0070                     ?_getDimmerLights_Line:	
  2974                           ; 1 bytes @ 0x0
  2975                           
  2976  0070                     ?_getDimmer_LoadGO:	
  2977                           ; 1 bytes @ 0x0
  2978                           
  2979  0070                     ?_getDimmer_Load_Status:	
  2980                           ; 1 bytes @ 0x0
  2981                           
  2982  0070                     ?i1___lbdiv:	
  2983                           ; 1 bytes @ 0x0
  2984                           
  2985  0070                     setDimmerLights_Initialization@lights:	
  2986                           ; 1 bytes @ 0x0
  2987                           
  2988  0070                     i1___lbdiv@divisor:	
  2989                           ; 1 bytes @ 0x0
  2990                           
  2991                           
  2992                           ; 1 bytes @ 0x0
  2993  0070                     	ds	1
  2994  0071                     ??_TMR1_ISR:	
  2995  0071                     ??i1___lbdiv:	
  2996                           ; 0 bytes @ 0x1
  2997                           
  2998                           
  2999                           ; 0 bytes @ 0x1
  3000  0071                     	ds	1
  3001  0072                     i1___lbdiv@dividend:	
  3002                           
  3003                           ; 1 bytes @ 0x2
  3004  0072                     	ds	1
  3005  0073                     i1___lbdiv@counter:	
  3006                           
  3007                           ; 1 bytes @ 0x3
  3008  0073                     	ds	1
  3009  0074                     i1___lbdiv@quotient:	
  3010                           
  3011                           ; 1 bytes @ 0x4
  3012  0074                     	ds	1
  3013  0075                     ?i1_Division:	
  3014  0075                     i1Division@num:	
  3015                           ; 1 bytes @ 0x5
  3016                           
  3017                           
  3018                           ; 1 bytes @ 0x5
  3019  0075                     	ds	1
  3020  0076                     ??i1_Division:	
  3021                           
  3022                           ; 0 bytes @ 0x6
  3023  0076                     	ds	2
  3024  0078                     i1Division@value:	
  3025                           
  3026                           ; 1 bytes @ 0x8
  3027  0078                     	ds	1
  3028  0079                     i1Division@result:	
  3029                           
  3030                           ; 1 bytes @ 0x9
  3031  0079                     	ds	1
  3032  007A                     ??_DimmerLights_IOC_1:	
  3033  007A                     ??_DimmerLights_IOC_2:	
  3034                           ; 0 bytes @ 0xA
  3035                           
  3036                           
  3037                           ; 0 bytes @ 0xA
  3038  007A                     	ds	2
  3039  007C                     ??_IOC_ISR:	
  3040  007C                     ??_ISR:	
  3041                           ; 0 bytes @ 0xC
  3042                           
  3043                           
  3044                           ; 0 bytes @ 0xC
  3045  007C                     	ds	1
  3046                           
  3047                           	psect	cstackBANK0
  3048  0020                     __pcstackBANK0:	
  3049  0020                     ??_RF_Timeout_Counter:	
  3050  0020                     ??_setRF_TimeoutCleared:	
  3051                           ; 0 bytes @ 0x0
  3052                           
  3053  0020                     ??_CC2500_WriteByte:	
  3054                           ; 0 bytes @ 0x0
  3055                           
  3056  0020                     ??_CC2500_ReadByte:	
  3057                           ; 0 bytes @ 0x0
  3058                           
  3059  0020                     ?_DelayTime_1us:	
  3060                           ; 0 bytes @ 0x0
  3061                           
  3062  0020                     ??_setMemory_Modify:	
  3063                           ; 0 bytes @ 0x0
  3064                           
  3065  0020                     ??_setDimmerLights_Initialization:	
  3066                           ; 0 bytes @ 0x0
  3067                           
  3068  0020                     ??_getLoad_OK:	
  3069                           ; 0 bytes @ 0x0
  3070                           
  3071  0020                     ??_getMain_All_Error_Status:	
  3072                           ; 0 bytes @ 0x0
  3073                           
  3074  0020                     ??_getMain_All_LightsStatus:	
  3075                           ; 0 bytes @ 0x0
  3076                           
  3077  0020                     ??_DimmerLights_DimmingFunction:	
  3078                           ; 0 bytes @ 0x0
  3079                           
  3080  0020                     ??_setDimmerLights_Line:	
  3081                           ; 0 bytes @ 0x0
  3082                           
  3083  0020                     ??_getCmd_Status:	
  3084                           ; 0 bytes @ 0x0
  3085                           
  3086  0020                     ?_setCmd_Status:	
  3087                           ; 0 bytes @ 0x0
  3088                           
  3089  0020                     ??_setTxData:	
  3090                           ; 0 bytes @ 0x0
  3091                           
  3092  0020                     ??_setRF_TransceiveGO:	
  3093                           ; 0 bytes @ 0x0
  3094                           
  3095  0020                     ??_Fosc_Set:	
  3096                           ; 0 bytes @ 0x0
  3097                           
  3098  0020                     ??_IO_Set:	
  3099                           ; 0 bytes @ 0x0
  3100                           
  3101  0020                     ??_TMR1_Set:	
  3102                           ; 0 bytes @ 0x0
  3103                           
  3104  0020                     ??_ADC_Set:	
  3105                           ; 0 bytes @ 0x0
  3106                           
  3107  0020                     ??_IOC_Set:	
  3108                           ; 0 bytes @ 0x0
  3109                           
  3110  0020                     ??_WDT_Set:	
  3111                           ; 0 bytes @ 0x0
  3112                           
  3113  0020                     ??_Timeout_Counter:	
  3114                           ; 0 bytes @ 0x0
  3115                           
  3116  0020                     ??_set_TimeoutCleared:	
  3117                           ; 0 bytes @ 0x0
  3118                           
  3119  0020                     ??_Flash_Memory_Read:	
  3120                           ; 0 bytes @ 0x0
  3121                           
  3122  0020                     ?_setMemory_Data:	
  3123                           ; 0 bytes @ 0x0
  3124                           
  3125  0020                     ??_Flash_Memory_Write:	
  3126                           ; 0 bytes @ 0x0
  3127                           
  3128  0020                     ??_getAll_Sw_KeyStatus:	
  3129                           ; 0 bytes @ 0x0
  3130                           
  3131  0020                     ??_WDT_Clearing:	
  3132                           ; 0 bytes @ 0x0
  3133                           
  3134  0020                     ??_setLoad_AH_AL_Restore:	
  3135                           ; 0 bytes @ 0x0
  3136                           
  3137  0020                     ??_getMain_Lights_Count:	
  3138                           ; 0 bytes @ 0x0
  3139                           
  3140  0020                     ??_setTemp_Initialization:	
  3141                           ; 0 bytes @ 0x0
  3142                           
  3143  0020                     ??_setOverTemp_ADV_Restore:	
  3144                           ; 0 bytes @ 0x0
  3145                           
  3146  0020                     ??_setRF_Initialization:	
  3147                           ; 0 bytes @ 0x0
  3148                           
  3149  0020                     ??_getRF_KeyStatus:	
  3150                           ; 0 bytes @ 0x0
  3151                           
  3152  0020                     ??_getSw_KeyStatus:	
  3153                           ; 0 bytes @ 0x0
  3154                           
  3155  0020                     ??_myMain_Initialization:	
  3156                           ; 0 bytes @ 0x0
  3157                           
  3158  0020                     ??_Buzzer_Initialization:	
  3159                           ; 0 bytes @ 0x0
  3160                           
  3161  0020                     ??_Buzzer_Main:	
  3162                           ; 0 bytes @ 0x0
  3163                           
  3164  0020                     ??_DelayOffPointSelect:	
  3165                           ; 0 bytes @ 0x0
  3166                           
  3167  0020                     ?_setDimmerIntr_ControlStatus:	
  3168                           ; 0 bytes @ 0x0
  3169                           
  3170  0020                     ??_getDimmerIntr_DimmingValue:	
  3171                           ; 0 bytes @ 0x0
  3172                           
  3173  0020                     ?_setDimmerIntr_Dimming_Sw:	
  3174                           ; 0 bytes @ 0x0
  3175                           
  3176  0020                     ??_getDimmerIntr_Dimming_Sw:	
  3177                           ; 0 bytes @ 0x0
  3178                           
  3179  0020                     ?_setDimmerIntr_Dimming_RF:	
  3180                           ; 0 bytes @ 0x0
  3181                           
  3182  0020                     ??_getAll_DimmerIntr_Dimming_Sw_RF:	
  3183                           ; 0 bytes @ 0x0
  3184                           
  3185  0020                     ??_DimmerLights_SelectPointer:	
  3186                           ; 0 bytes @ 0x0
  3187                           
  3188  0020                     ??_getDimmerLights_Line:	
  3189                           ; 0 bytes @ 0x0
  3190                           
  3191  0020                     ??_getDimmer_LoadGO:	
  3192                           ; 0 bytes @ 0x0
  3193                           
  3194  0020                     ??_getDimmer_Load_Status:	
  3195                           ; 0 bytes @ 0x0
  3196                           
  3197  0020                     ??_LedPointSelect:	
  3198                           ; 0 bytes @ 0x0
  3199                           
  3200  0020                     ??_Flash_Memory_Unlock:	
  3201                           ; 0 bytes @ 0x0
  3202                           
  3203  0020                     ??_Flash_Memory_Erasing:	
  3204                           ; 0 bytes @ 0x0
  3205                           
  3206  0020                     ??_setMemory_LoopSave:	
  3207                           ; 0 bytes @ 0x0
  3208                           
  3209  0020                     ??_WDT_Main:	
  3210                           ; 0 bytes @ 0x0
  3211                           
  3212  0020                     ??_Temp_Initialization:	
  3213                           ; 0 bytes @ 0x0
  3214                           
  3215  0020                     ??_setRF_Learn:	
  3216                           ; 0 bytes @ 0x0
  3217                           
  3218  0020                     ??_TouchPower:	
  3219                           ; 0 bytes @ 0x0
  3220                           
  3221  0020                     ??_SwPointSelect:	
  3222                           ; 0 bytes @ 0x0
  3223                           
  3224  0020                     ?___bmul:	
  3225                           ; 0 bytes @ 0x0
  3226                           
  3227  0020                     ?___lbdiv:	
  3228                           ; 1 bytes @ 0x0
  3229                           
  3230  0020                     ?_getBuz_GO:	
  3231                           ; 1 bytes @ 0x0
  3232                           
  3233  0020                     ?_getAD:	
  3234                           ; 2 bytes @ 0x0
  3235                           
  3236  0020                     ?___wmul:	
  3237                           ; 2 bytes @ 0x0
  3238                           
  3239  0020                     ?___awdiv:	
  3240                           ; 2 bytes @ 0x0
  3241                           
  3242  0020                     ?___lwdiv:	
  3243                           ; 2 bytes @ 0x0
  3244                           
  3245  0020                     ?___ftpack:	
  3246                           ; 2 bytes @ 0x0
  3247                           
  3248  0020                     setDimmerIntr_ControlStatus@command:	
  3249                           ; 3 bytes @ 0x0
  3250                           
  3251  0020                     setDimmerIntr_Dimming_Sw@command:	
  3252                           ; 1 bytes @ 0x0
  3253                           
  3254  0020                     getDimmerIntr_Dimming_Sw@status:	
  3255                           ; 1 bytes @ 0x0
  3256                           
  3257  0020                     setDimmerIntr_Dimming_RF@command:	
  3258                           ; 1 bytes @ 0x0
  3259                           
  3260  0020                     setDimmerLights_Line@lights:	
  3261                           ; 1 bytes @ 0x0
  3262                           
  3263  0020                     getDimmer_LoadGO@loadgo:	
  3264                           ; 1 bytes @ 0x0
  3265                           
  3266  0020                     getDimmer_Load_Status@status:	
  3267                           ; 1 bytes @ 0x0
  3268                           
  3269  0020                     getAD@adcon1:	
  3270                           ; 1 bytes @ 0x0
  3271                           
  3272  0020                     setMemory_Data@data:	
  3273                           ; 1 bytes @ 0x0
  3274                           
  3275  0020                     getLoad_OK@ok:	
  3276                           ; 1 bytes @ 0x0
  3277                           
  3278  0020                     SwPointSelect@sw:	
  3279                           ; 1 bytes @ 0x0
  3280                           
  3281  0020                     getMain_All_LightsStatus@status:	
  3282                           ; 1 bytes @ 0x0
  3283                           
  3284  0020                     getMain_Lights_Count@count:	
  3285                           ; 1 bytes @ 0x0
  3286                           
  3287  0020                     setCmd_Status@cmd:	
  3288                           ; 1 bytes @ 0x0
  3289                           
  3290  0020                     getCmd_Status@number:	
  3291                           ; 1 bytes @ 0x0
  3292                           
  3293  0020                     ___bmul@multiplicand:	
  3294                           ; 1 bytes @ 0x0
  3295                           
  3296  0020                     ___lbdiv@divisor:	
  3297                           ; 1 bytes @ 0x0
  3298                           
  3299  0020                     DelayTime_1us@count:	
  3300                           ; 1 bytes @ 0x0
  3301                           
  3302  0020                     ___wmul@multiplier:	
  3303                           ; 2 bytes @ 0x0
  3304                           
  3305  0020                     ___awdiv@divisor:	
  3306                           ; 2 bytes @ 0x0
  3307                           
  3308  0020                     ___lwdiv@divisor:	
  3309                           ; 2 bytes @ 0x0
  3310                           
  3311  0020                     ___ftpack@arg:	
  3312                           ; 2 bytes @ 0x0
  3313                           
  3314                           
  3315                           ; 3 bytes @ 0x0
  3316  0020                     	ds	1
  3317  0021                     ??_getDimmerLights_Allow_Condition:	
  3318  0021                     ??_setCmd_Status:	
  3319                           ; 0 bytes @ 0x1
  3320                           
  3321  0021                     ??_setMemory_Data:	
  3322                           ; 0 bytes @ 0x1
  3323                           
  3324  0021                     ??_setDimmerIntr_ControlStatus:	
  3325                           ; 0 bytes @ 0x1
  3326                           
  3327  0021                     ??_setDimmerIntr_Dimming_Sw:	
  3328                           ; 0 bytes @ 0x1
  3329                           
  3330  0021                     ??_setDimmerIntr_Dimming_RF:	
  3331                           ; 0 bytes @ 0x1
  3332                           
  3333  0021                     ??_Mcu_Initialization:	
  3334                           ; 0 bytes @ 0x1
  3335                           
  3336  0021                     ??_RF_Initialization:	
  3337                           ; 0 bytes @ 0x1
  3338                           
  3339  0021                     ??___bmul:	
  3340                           ; 0 bytes @ 0x1
  3341                           
  3342  0021                     ??___lbdiv:	
  3343                           ; 0 bytes @ 0x1
  3344                           
  3345  0021                     CC2500_WriteByte@loop_a:	
  3346                           ; 0 bytes @ 0x1
  3347                           
  3348  0021                     CC2500_ReadByte@loop_b:	
  3349                           ; 1 bytes @ 0x1
  3350                           
  3351  0021                     DelayOffPointSelect@sw:	
  3352                           ; 1 bytes @ 0x1
  3353                           
  3354  0021                     getDimmerIntr_DimmingValue@value:	
  3355                           ; 1 bytes @ 0x1
  3356                           
  3357  0021                     getDimmerIntr_Dimming_Sw@lights:	
  3358                           ; 1 bytes @ 0x1
  3359                           
  3360  0021                     _getAll_DimmerIntr_Dimming_Sw_RF$2329:	
  3361                           ; 1 bytes @ 0x1
  3362                           
  3363  0021                     DimmerLights_SelectPointer@lights:	
  3364                           ; 1 bytes @ 0x1
  3365                           
  3366  0021                     getDimmerLights_Line@line:	
  3367                           ; 1 bytes @ 0x1
  3368                           
  3369  0021                     DimmerLights_DimmingFunction@lights:	
  3370                           ; 1 bytes @ 0x1
  3371                           
  3372  0021                     LedPointSelect@led:	
  3373                           ; 1 bytes @ 0x1
  3374                           
  3375  0021                     Flash_Memory_Read@i:	
  3376                           ; 1 bytes @ 0x1
  3377                           
  3378  0021                     Flash_Memory_Write@i:	
  3379                           ; 1 bytes @ 0x1
  3380                           
  3381  0021                     setMemory_Modify@command:	
  3382                           ; 1 bytes @ 0x1
  3383                           
  3384  0021                     setMemory_LoopSave@command:	
  3385                           ; 1 bytes @ 0x1
  3386                           
  3387  0021                     setLoad_AH_AL_Restore@i:	
  3388                           ; 1 bytes @ 0x1
  3389                           
  3390  0021                     setRF_Learn@command:	
  3391                           ; 1 bytes @ 0x1
  3392                           
  3393  0021                     getRF_KeyStatus@key:	
  3394                           ; 1 bytes @ 0x1
  3395                           
  3396  0021                     setRF_TransceiveGO@command:	
  3397                           ; 1 bytes @ 0x1
  3398                           
  3399  0021                     _getSw_KeyStatus$6258:	
  3400                           ; 1 bytes @ 0x1
  3401                           
  3402  0021                     getAll_Sw_KeyStatus@status:	
  3403                           ; 1 bytes @ 0x1
  3404                           
  3405  0021                     getMain_Lights_Count@status1:	
  3406                           ; 1 bytes @ 0x1
  3407                           
  3408  0021                     getCmd_Status@cmd:	
  3409                           ; 1 bytes @ 0x1
  3410                           
  3411  0021                     setOverTemp_ADV_Restore@i:	
  3412                           ; 1 bytes @ 0x1
  3413                           
  3414  0021                     _getMain_All_Error_Status$7008:	
  3415                           ; 2 bytes @ 0x1
  3416                           
  3417                           
  3418                           ; 2 bytes @ 0x1
  3419  0021                     	ds	1
  3420  0022                     ??_CC2500_WriteCommand:	
  3421  0022                     ??_CC2500_ReadStatus:	
  3422                           ; 0 bytes @ 0x2
  3423                           
  3424  0022                     ??_DelayTime_1us:	
  3425                           ; 0 bytes @ 0x2
  3426                           
  3427  0022                     ?_CC2500_WriteREG:	
  3428                           ; 0 bytes @ 0x2
  3429                           
  3430  0022                     ??_DlyOff_Initialization:	
  3431                           ; 0 bytes @ 0x2
  3432                           
  3433  0022                     ??_getDimmerLights_Status:	
  3434                           ; 0 bytes @ 0x2
  3435                           
  3436  0022                     ??_setDimmerLights_SwOff:	
  3437                           ; 0 bytes @ 0x2
  3438                           
  3439  0022                     ?_setLED:	
  3440                           ; 0 bytes @ 0x2
  3441                           
  3442  0022                     ??_setLED_Main:	
  3443                           ; 0 bytes @ 0x2
  3444                           
  3445  0022                     ??_getBuz_GO:	
  3446                           ; 0 bytes @ 0x2
  3447                           
  3448  0022                     ??_getDelayOff_GO:	
  3449                           ; 0 bytes @ 0x2
  3450                           
  3451  0022                     ??_setDimmerLights_DimmingOn:	
  3452                           ; 0 bytes @ 0x2
  3453                           
  3454  0022                     ?_setDimmerLights_DimmingRun:	
  3455                           ; 0 bytes @ 0x2
  3456                           
  3457  0022                     ??_Load_Initialization:	
  3458                           ; 0 bytes @ 0x2
  3459                           
  3460  0022                     CC2500_WriteREG@value:	
  3461                           ; 0 bytes @ 0x2
  3462                           
  3463  0022                     DlyOff_Initialization@sw:	
  3464                           ; 1 bytes @ 0x2
  3465                           
  3466  0022                     getDelayOff_GO@sw:	
  3467                           ; 1 bytes @ 0x2
  3468                           
  3469  0022                     setDimmerIntr_ControlStatus@lights:	
  3470                           ; 1 bytes @ 0x2
  3471                           
  3472  0022                     getDimmerIntr_DimmingValue@lights:	
  3473                           ; 1 bytes @ 0x2
  3474                           
  3475  0022                     setDimmerIntr_Dimming_Sw@lights:	
  3476                           ; 1 bytes @ 0x2
  3477                           
  3478  0022                     setDimmerIntr_Dimming_RF@lights:	
  3479                           ; 1 bytes @ 0x2
  3480                           
  3481  0022                     _getAll_DimmerIntr_Dimming_Sw_RF$2330:	
  3482                           ; 1 bytes @ 0x2
  3483                           
  3484  0022                     setDimmerLights_SwOff@sw:	
  3485                           ; 1 bytes @ 0x2
  3486                           
  3487  0022                     setDimmerLights_DimmingOn@sw:	
  3488                           ; 1 bytes @ 0x2
  3489                           
  3490  0022                     _getDimmerLights_Allow_Condition$2454:	
  3491                           ; 1 bytes @ 0x2
  3492                           
  3493  0022                     getDimmerLights_Status@lights:	
  3494                           ; 1 bytes @ 0x2
  3495                           
  3496  0022                     setDimmerLights_DimmingRun@command:	
  3497                           ; 1 bytes @ 0x2
  3498                           
  3499  0022                     setLED@command:	
  3500                           ; 1 bytes @ 0x2
  3501                           
  3502  0022                     Flash_Memory_Read@address:	
  3503                           ; 1 bytes @ 0x2
  3504                           
  3505  0022                     setMemory_Data@address:	
  3506                           ; 1 bytes @ 0x2
  3507                           
  3508  0022                     _getRF_KeyStatus$5184:	
  3509                           ; 1 bytes @ 0x2
  3510                           
  3511  0022                     _getSw_KeyStatus$6259:	
  3512                           ; 1 bytes @ 0x2
  3513                           
  3514  0022                     _getAll_Sw_KeyStatus$6262:	
  3515                           ; 1 bytes @ 0x2
  3516                           
  3517  0022                     getMain_Lights_Count@status2:	
  3518                           ; 1 bytes @ 0x2
  3519                           
  3520  0022                     setCmd_Status@number:	
  3521                           ; 1 bytes @ 0x2
  3522                           
  3523  0022                     ___bmul@product:	
  3524                           ; 1 bytes @ 0x2
  3525                           
  3526  0022                     ___lbdiv@dividend:	
  3527                           ; 1 bytes @ 0x2
  3528                           
  3529  0022                     DelayTime_1us@i:	
  3530                           ; 1 bytes @ 0x2
  3531                           
  3532  0022                     ___wmul@multiplicand:	
  3533                           ; 2 bytes @ 0x2
  3534                           
  3535  0022                     ___awdiv@dividend:	
  3536                           ; 2 bytes @ 0x2
  3537                           
  3538  0022                     ___lwdiv@dividend:	
  3539                           ; 2 bytes @ 0x2
  3540                           
  3541                           
  3542                           ; 2 bytes @ 0x2
  3543  0022                     	ds	1
  3544  0023                     ??_CC2500_WriteREG:	
  3545  0023                     ??_setLED:	
  3546                           ; 0 bytes @ 0x3
  3547                           
  3548  0023                     ??_setDimmerLights_DimmingClose:	
  3549                           ; 0 bytes @ 0x3
  3550                           
  3551  0023                     ??_DelayOff_Initialization:	
  3552                           ; 0 bytes @ 0x3
  3553                           
  3554  0023                     ??_setDimmerLights_DimmingRun:	
  3555                           ; 0 bytes @ 0x3
  3556                           
  3557  0023                     ??_getAD:	
  3558                           ; 0 bytes @ 0x3
  3559                           
  3560  0023                     CC2500_WriteCommand@command:	
  3561                           ; 0 bytes @ 0x3
  3562                           
  3563  0023                     CC2500_ReadStatus@status_addr:	
  3564                           ; 1 bytes @ 0x3
  3565                           
  3566  0023                     getDelayOff_GO@go:	
  3567                           ; 1 bytes @ 0x3
  3568                           
  3569  0023                     getAll_DimmerIntr_Dimming_Sw_RF@status:	
  3570                           ; 1 bytes @ 0x3
  3571                           
  3572  0023                     _getDimmerLights_Allow_Condition$2455:	
  3573                           ; 1 bytes @ 0x3
  3574                           
  3575  0023                     getDimmerLights_Status@status:	
  3576                           ; 1 bytes @ 0x3
  3577                           
  3578  0023                     setLED@led:	
  3579                           ; 1 bytes @ 0x3
  3580                           
  3581  0023                     getAD@adcon0:	
  3582                           ; 1 bytes @ 0x3
  3583                           
  3584  0023                     Flash_Memory_Read@ret:	
  3585                           ; 1 bytes @ 0x3
  3586                           
  3587  0023                     getSw_KeyStatus@status:	
  3588                           ; 1 bytes @ 0x3
  3589                           
  3590  0023                     ___bmul@multiplier:	
  3591                           ; 1 bytes @ 0x3
  3592                           
  3593  0023                     ___ftpack@exp:	
  3594                           ; 1 bytes @ 0x3
  3595                           
  3596  0023                     ___lbdiv@counter:	
  3597                           ; 1 bytes @ 0x3
  3598                           
  3599  0023                     _getMain_All_Error_Status$7009:	
  3600                           ; 1 bytes @ 0x3
  3601                           
  3602                           
  3603                           ; 2 bytes @ 0x3
  3604  0023                     	ds	1
  3605  0024                     ??_CC2500_ClearTXFIFO:	
  3606  0024                     ??_CC2500_ClearRXFIFO:	
  3607                           ; 0 bytes @ 0x4
  3608                           
  3609  0024                     ??_CC2500_SIDLEMode:	
  3610                           ; 0 bytes @ 0x4
  3611                           
  3612  0024                     ??_setLED_Initialization:	
  3613                           ; 0 bytes @ 0x4
  3614                           
  3615  0024                     ??_Flash_Memory_Modify:	
  3616                           ; 0 bytes @ 0x4
  3617                           
  3618  0024                     ??_RF_RxDisable:	
  3619                           ; 0 bytes @ 0x4
  3620                           
  3621  0024                     ??_setRF_AdjControl:	
  3622                           ; 0 bytes @ 0x4
  3623                           
  3624  0024                     ??_setSw_Initialization:	
  3625                           ; 0 bytes @ 0x4
  3626                           
  3627  0024                     ??_CC2500_TxData:	
  3628                           ; 0 bytes @ 0x4
  3629                           
  3630  0024                     ??_CC2500_RxData:	
  3631                           ; 0 bytes @ 0x4
  3632                           
  3633  0024                     ??_Flash_Memory_Initialization:	
  3634                           ; 0 bytes @ 0x4
  3635                           
  3636  0024                     ??_getLoad_AD:	
  3637                           ; 0 bytes @ 0x4
  3638                           
  3639  0024                     ??_getTemp_AD:	
  3640                           ; 0 bytes @ 0x4
  3641                           
  3642  0024                     ??___wmul:	
  3643                           ; 0 bytes @ 0x4
  3644                           
  3645  0024                     ??___awdiv:	
  3646                           ; 0 bytes @ 0x4
  3647                           
  3648  0024                     ??___lwdiv:	
  3649                           ; 0 bytes @ 0x4
  3650                           
  3651  0024                     CC2500_WriteREG@w_addr:	
  3652                           ; 0 bytes @ 0x4
  3653                           
  3654  0024                     _getDimmerLights_Allow_Condition$2456:	
  3655                           ; 1 bytes @ 0x4
  3656                           
  3657  0024                     setDimmerLights_DimmingRun@lights:	
  3658                           ; 1 bytes @ 0x4
  3659                           
  3660  0024                     setLED_Initialization@led:	
  3661                           ; 1 bytes @ 0x4
  3662                           
  3663  0024                     setLED_Main@led:	
  3664                           ; 1 bytes @ 0x4
  3665                           
  3666  0024                     setSw_Initialization@sw:	
  3667                           ; 1 bytes @ 0x4
  3668                           
  3669  0024                     getSw_KeyStatus@sw:	
  3670                           ; 1 bytes @ 0x4
  3671                           
  3672  0024                     ___ftpack@sign:	
  3673                           ; 1 bytes @ 0x4
  3674                           
  3675  0024                     ___lbdiv@quotient:	
  3676                           ; 1 bytes @ 0x4
  3677                           
  3678  0024                     getBuz_GO@i:	
  3679                           ; 1 bytes @ 0x4
  3680                           
  3681  0024                     DelayTime_1us@j:	
  3682                           ; 2 bytes @ 0x4
  3683                           
  3684  0024                     ___wmul@product:	
  3685                           ; 2 bytes @ 0x4
  3686                           
  3687                           
  3688                           ; 2 bytes @ 0x4
  3689  0024                     	ds	1
  3690  0025                     ??_CC2500_InitSetREG:	
  3691  0025                     ??_CC2500_InitPATable:	
  3692                           ; 0 bytes @ 0x5
  3693                           
  3694  0025                     ??___ftpack:	
  3695                           ; 0 bytes @ 0x5
  3696                           
  3697  0025                     ??_LED_Initialization:	
  3698                           ; 0 bytes @ 0x5
  3699                           
  3700  0025                     ??_LED_Main:	
  3701                           ; 0 bytes @ 0x5
  3702                           
  3703  0025                     ??_Switch_Initialization:	
  3704                           ; 0 bytes @ 0x5
  3705                           
  3706  0025                     ?_Division:	
  3707                           ; 0 bytes @ 0x5
  3708                           
  3709  0025                     CC2500_TxData@loop_e:	
  3710                           ; 1 bytes @ 0x5
  3711                           
  3712  0025                     CC2500_RxData@loop_f:	
  3713                           ; 1 bytes @ 0x5
  3714                           
  3715  0025                     getDimmerLights_Allow_Condition@lights:	
  3716                           ; 1 bytes @ 0x5
  3717                           
  3718  0025                     Division@num:	
  3719                           ; 1 bytes @ 0x5
  3720                           
  3721  0025                     Flash_Memory_Initialization@value:	
  3722                           ; 1 bytes @ 0x5
  3723                           
  3724  0025                     Flash_Memory_Modify@i:	
  3725                           ; 1 bytes @ 0x5
  3726                           
  3727  0025                     getTemp_AD@channel:	
  3728                           ; 1 bytes @ 0x5
  3729                           
  3730  0025                     setRF_AdjControl@status:	
  3731                           ; 1 bytes @ 0x5
  3732                           
  3733  0025                     getMain_All_Error_Status@command:	
  3734                           ; 1 bytes @ 0x5
  3735                           
  3736  0025                     ___awdiv@counter:	
  3737                           ; 1 bytes @ 0x5
  3738                           
  3739  0025                     ___lwdiv@quotient:	
  3740                           ; 1 bytes @ 0x5
  3741                           
  3742                           
  3743                           ; 2 bytes @ 0x5
  3744  0025                     	ds	1
  3745  0026                     ??_CC2500_PowerRST:	
  3746  0026                     ??_CC2500_FrequencyCabr:	
  3747                           ; 0 bytes @ 0x6
  3748                           
  3749  0026                     ??_Division:	
  3750                           ; 0 bytes @ 0x6
  3751                           
  3752  0026                     ??_Flash_Memory_Main:	
  3753                           ; 0 bytes @ 0x6
  3754                           
  3755  0026                     CC2500_InitSetREG@temp1:	
  3756                           ; 0 bytes @ 0x6
  3757                           
  3758  0026                     CC2500_InitPATable@temp:	
  3759                           ; 1 bytes @ 0x6
  3760                           
  3761  0026                     getDimmerLights_Allow_Condition@allow:	
  3762                           ; 1 bytes @ 0x6
  3763                           
  3764  0026                     getLoad_AD@channel:	
  3765                           ; 1 bytes @ 0x6
  3766                           
  3767  0026                     setRF_AdjControl@dimmingStatus:	
  3768                           ; 1 bytes @ 0x6
  3769                           
  3770  0026                     getMain_All_Error_Status@status:	
  3771                           ; 1 bytes @ 0x6
  3772                           
  3773  0026                     ___awdiv@sign:	
  3774                           ; 1 bytes @ 0x6
  3775                           
  3776  0026                     getTemp_AD@ADRES:	
  3777                           ; 1 bytes @ 0x6
  3778                           
  3779                           
  3780                           ; 2 bytes @ 0x6
  3781  0026                     	ds	1
  3782  0027                     CC2500_InitSetREG@temp2:	
  3783  0027                     CC2500_InitPATable@loop_d:	
  3784                           ; 1 bytes @ 0x7
  3785                           
  3786  0027                     Flash_Memory_Main@key_Status:	
  3787                           ; 1 bytes @ 0x7
  3788                           
  3789  0027                     getLoad_AD@k:	
  3790                           ; 1 bytes @ 0x7
  3791                           
  3792  0027                     setRF_AdjControl@sw:	
  3793                           ; 1 bytes @ 0x7
  3794                           
  3795  0027                     ___lwdiv@counter:	
  3796                           ; 1 bytes @ 0x7
  3797                           
  3798  0027                     ___awdiv@quotient:	
  3799                           ; 1 bytes @ 0x7
  3800                           
  3801                           
  3802                           ; 2 bytes @ 0x7
  3803  0027                     	ds	1
  3804  0028                     ??_Load_Main:	
  3805  0028                     ?___awtoft:	
  3806                           ; 0 bytes @ 0x8
  3807                           
  3808  0028                     CC2500_InitSetREG@loop_c:	
  3809                           ; 3 bytes @ 0x8
  3810                           
  3811  0028                     Division@value:	
  3812                           ; 1 bytes @ 0x8
  3813                           
  3814  0028                     _Flash_Memory_Main$3352:	
  3815                           ; 1 bytes @ 0x8
  3816                           
  3817  0028                     getLoad_AD@j:	
  3818                           ; 1 bytes @ 0x8
  3819                           
  3820  0028                     ___awtoft@c:	
  3821                           ; 1 bytes @ 0x8
  3822                           
  3823                           
  3824                           ; 2 bytes @ 0x8
  3825  0028                     	ds	1
  3826  0029                     ?_setBuz:	
  3827  0029                     ??_CC2500_PowerOnInitial:	
  3828                           ; 0 bytes @ 0x9
  3829                           
  3830  0029                     Division@result:	
  3831                           ; 0 bytes @ 0x9
  3832                           
  3833  0029                     setBuz@time:	
  3834                           ; 1 bytes @ 0x9
  3835                           
  3836  0029                     getLoad_AD@ADRES:	
  3837                           ; 2 bytes @ 0x9
  3838                           
  3839                           
  3840                           ; 2 bytes @ 0x9
  3841  0029                     	ds	1
  3842  002A                     _Load_Main$3735:	
  3843                           
  3844                           ; 2 bytes @ 0xA
  3845  002A                     	ds	1
  3846  002B                     ??_setBuz:	
  3847  002B                     ??___awtoft:	
  3848                           ; 0 bytes @ 0xB
  3849                           
  3850  002B                     getLoad_AD@i:	
  3851                           ; 0 bytes @ 0xB
  3852                           
  3853                           
  3854                           ; 1 bytes @ 0xB
  3855  002B                     	ds	1
  3856  002C                     setBuz@count:	
  3857  002C                     Load_Main@error:	
  3858                           ; 1 bytes @ 0xC
  3859                           
  3860                           
  3861                           ; 1 bytes @ 0xC
  3862  002C                     	ds	1
  3863  002D                     ??_setDimmerLights_SwOn:	
  3864  002D                     ??_my_MainTimer:	
  3865                           ; 0 bytes @ 0xD
  3866                           
  3867  002D                     ??_Exception_Main:	
  3868                           ; 0 bytes @ 0xD
  3869                           
  3870  002D                     Load_Main@ErrorCountValue:	
  3871                           ; 0 bytes @ 0xD
  3872                           
  3873  002D                     ___awtoft@sign:	
  3874                           ; 1 bytes @ 0xD
  3875                           
  3876                           
  3877                           ; 1 bytes @ 0xD
  3878  002D                     	ds	1
  3879  002E                     ?___ftdiv:	
  3880  002E                     ?___ftmul:	
  3881                           ; 3 bytes @ 0xE
  3882                           
  3883  002E                     setDimmerLights_SwOn@dimmingStatus:	
  3884                           ; 3 bytes @ 0xE
  3885                           
  3886  002E                     Load_Main@Load_RunStatus:	
  3887                           ; 1 bytes @ 0xE
  3888                           
  3889  002E                     Exception_Main@status:	
  3890                           ; 1 bytes @ 0xE
  3891                           
  3892  002E                     ___ftdiv@f2:	
  3893                           ; 1 bytes @ 0xE
  3894                           
  3895  002E                     ___ftmul@f1:	
  3896                           ; 3 bytes @ 0xE
  3897                           
  3898                           
  3899                           ; 3 bytes @ 0xE
  3900  002E                     	ds	1
  3901  002F                     _setDimmerLights_SwOn$2377:	
  3902  002F                     Load_Main@LightsCount:	
  3903                           ; 1 bytes @ 0xF
  3904                           
  3905  002F                     Exception_Main@count:	
  3906                           ; 1 bytes @ 0xF
  3907                           
  3908                           
  3909                           ; 1 bytes @ 0xF
  3910  002F                     	ds	1
  3911  0030                     _setDimmerLights_SwOn$2386:	
  3912  0030                     Exception_Main@error:	
  3913                           ; 1 bytes @ 0x10
  3914                           
  3915  0030                     Load_Main@i:	
  3916                           ; 1 bytes @ 0x10
  3917                           
  3918                           
  3919                           ; 2 bytes @ 0x10
  3920  0030                     	ds	1
  3921  0031                     setDimmerLights_SwOn@idle:	
  3922  0031                     Exception_Main@i:	
  3923                           ; 1 bytes @ 0x11
  3924                           
  3925  0031                     ___ftdiv@f1:	
  3926                           ; 2 bytes @ 0x11
  3927                           
  3928  0031                     ___ftmul@f2:	
  3929                           ; 3 bytes @ 0x11
  3930                           
  3931                           
  3932                           ; 3 bytes @ 0x11
  3933  0031                     	ds	1
  3934  0032                     setDimmerLights_SwOn@sw:	
  3935                           
  3936                           ; 1 bytes @ 0x12
  3937  0032                     	ds	1
  3938  0033                     ??_setSw_Main:	
  3939  0033                     Exception_Main@i_7021:	
  3940                           ; 0 bytes @ 0x13
  3941                           
  3942                           
  3943                           ; 2 bytes @ 0x13
  3944  0033                     	ds	1
  3945  0034                     ??___ftdiv:	
  3946  0034                     ??___ftmul:	
  3947                           ; 0 bytes @ 0x14
  3948                           
  3949                           
  3950                           ; 0 bytes @ 0x14
  3951  0034                     	ds	1
  3952  0035                     setSw_Main@sw:	
  3953  0035                     Exception_Main@lights:	
  3954                           ; 1 bytes @ 0x15
  3955                           
  3956                           
  3957                           ; 1 bytes @ 0x15
  3958  0035                     	ds	1
  3959  0036                     ??_Switch_Main:	
  3960                           
  3961                           ; 0 bytes @ 0x16
  3962  0036                     	ds	2
  3963  0038                     ___ftdiv@cntr:	
  3964  0038                     ___ftmul@exp:	
  3965                           ; 1 bytes @ 0x18
  3966                           
  3967                           
  3968                           ; 1 bytes @ 0x18
  3969  0038                     	ds	1
  3970  0039                     ___ftdiv@f3:	
  3971  0039                     ___ftmul@f3_as_product:	
  3972                           ; 3 bytes @ 0x19
  3973                           
  3974                           
  3975                           ; 3 bytes @ 0x19
  3976  0039                     	ds	3
  3977  003C                     ___ftdiv@exp:	
  3978  003C                     ___ftmul@cntr:	
  3979                           ; 1 bytes @ 0x1C
  3980                           
  3981                           
  3982                           ; 1 bytes @ 0x1C
  3983  003C                     	ds	1
  3984  003D                     ___ftdiv@sign:	
  3985  003D                     ___ftmul@sign:	
  3986                           ; 1 bytes @ 0x1D
  3987                           
  3988                           
  3989                           ; 1 bytes @ 0x1D
  3990  003D                     	ds	1
  3991  003E                     ?___ftneg:	
  3992  003E                     ___ftneg@f1:	
  3993                           ; 3 bytes @ 0x1E
  3994                           
  3995                           
  3996                           ; 3 bytes @ 0x1E
  3997  003E                     	ds	3
  3998  0041                     ??___ftneg:	
  3999  0041                     ?___ftadd:	
  4000                           ; 0 bytes @ 0x21
  4001                           
  4002  0041                     ___ftadd@f1:	
  4003                           ; 3 bytes @ 0x21
  4004                           
  4005                           
  4006                           ; 3 bytes @ 0x21
  4007  0041                     	ds	3
  4008  0044                     ___ftadd@f2:	
  4009                           
  4010                           ; 3 bytes @ 0x24
  4011  0044                     	ds	3
  4012  0047                     ??___ftadd:	
  4013                           
  4014                           ; 0 bytes @ 0x27
  4015  0047                     	ds	4
  4016  004B                     ___ftadd@sign:	
  4017                           
  4018                           ; 1 bytes @ 0x2B
  4019  004B                     	ds	1
  4020  004C                     ___ftadd@exp2:	
  4021                           
  4022                           ; 1 bytes @ 0x2C
  4023  004C                     	ds	1
  4024  004D                     ___ftadd@exp1:	
  4025                           
  4026                           ; 1 bytes @ 0x2D
  4027  004D                     	ds	1
  4028  004E                     ?___fttol:	
  4029  004E                     ___fttol@f1:	
  4030                           ; 4 bytes @ 0x2E
  4031                           
  4032                           
  4033                           ; 3 bytes @ 0x2E
  4034  004E                     	ds	4
  4035  0052                     ??___fttol:	
  4036                           
  4037                           ; 0 bytes @ 0x32
  4038  0052                     	ds	4
  4039  0056                     ___fttol@sign1:	
  4040                           
  4041                           ; 1 bytes @ 0x36
  4042  0056                     	ds	1
  4043  0057                     ___fttol@lval:	
  4044                           
  4045                           ; 4 bytes @ 0x37
  4046  0057                     	ds	4
  4047  005B                     ___fttol@exp1:	
  4048                           
  4049                           ; 1 bytes @ 0x3B
  4050  005B                     	ds	1
  4051  005C                     ??_getDimmerLights_ValueToPercent:	
  4052  005C                     ??_getDimmerLights_PercentToValue:	
  4053                           ; 0 bytes @ 0x3C
  4054                           
  4055                           
  4056                           ; 0 bytes @ 0x3C
  4057  005C                     	ds	2
  4058  005E                     getDimmerLights_PercentToValue@value:	
  4059  005E                     getDimmerLights_ValueToPercent@value:	
  4060                           ; 1 bytes @ 0x3E
  4061                           
  4062                           
  4063                           ; 1 bytes @ 0x3E
  4064  005E                     	ds	1
  4065  005F                     getDimmerLights_PercentToValue@i:	
  4066  005F                     getDimmerLights_ValueToPercent@i:	
  4067                           ; 3 bytes @ 0x3F
  4068                           
  4069                           
  4070                           ; 3 bytes @ 0x3F
  4071  005F                     	ds	3
  4072  0062                     ?_setProductData:	
  4073  0062                     ??_DimmerIntr_Initialization:	
  4074                           ; 0 bytes @ 0x42
  4075                           
  4076  0062                     ?_setDimmerIntr_DimmingValue:	
  4077                           ; 0 bytes @ 0x42
  4078                           
  4079  0062                     ?_setDimmerIntr_MaxmumValue:	
  4080                           ; 0 bytes @ 0x42
  4081                           
  4082  0062                     setDimmerIntr_DimmingValue@value:	
  4083                           ; 0 bytes @ 0x42
  4084                           
  4085  0062                     setDimmerIntr_MaxmumValue@value:	
  4086                           ; 1 bytes @ 0x42
  4087                           
  4088  0062                     setProductData@value:	
  4089                           ; 1 bytes @ 0x42
  4090                           
  4091                           
  4092                           ; 1 bytes @ 0x42
  4093  0062                     	ds	1
  4094  0063                     ??_setProductData:	
  4095  0063                     ??_setDimmerIntr_DimmingValue:	
  4096                           ; 0 bytes @ 0x43
  4097                           
  4098  0063                     ??_setDimmerIntr_MaxmumValue:	
  4099                           ; 0 bytes @ 0x43
  4100                           
  4101                           
  4102                           ; 0 bytes @ 0x43
  4103  0063                     	ds	1
  4104  0064                     ??_DimmerLights_Initialization:	
  4105  0064                     setDimmerIntr_DimmingValue@lights:	
  4106                           ; 0 bytes @ 0x44
  4107                           
  4108  0064                     setDimmerIntr_MaxmumValue@lights:	
  4109                           ; 1 bytes @ 0x44
  4110                           
  4111  0064                     setProductData@address:	
  4112                           ; 1 bytes @ 0x44
  4113                           
  4114                           
  4115                           ; 1 bytes @ 0x44
  4116  0064                     	ds	1
  4117  0065                     ??_DlyOff_Main:	
  4118  0065                     ?_setRF_DimmerLights:	
  4119                           ; 0 bytes @ 0x45
  4120                           
  4121  0065                     ??_setTemp_Main:	
  4122                           ; 0 bytes @ 0x45
  4123                           
  4124  0065                     ??_setLog_Code:	
  4125                           ; 0 bytes @ 0x45
  4126                           
  4127  0065                     ??_setRFSW_AdjControl:	
  4128                           ; 0 bytes @ 0x45
  4129                           
  4130  0065                     ?_setDelayOff_GO:	
  4131                           ; 0 bytes @ 0x45
  4132                           
  4133  0065                     setDelayOff_GO@command:	
  4134                           ; 0 bytes @ 0x45
  4135                           
  4136  0065                     setRF_DimmerLights@on:	
  4137                           ; 1 bytes @ 0x45
  4138                           
  4139                           
  4140                           ; 1 bytes @ 0x45
  4141  0065                     	ds	1
  4142  0066                     ??_setRF_DimmerLights:	
  4143  0066                     setDelayOff_GO@value:	
  4144                           ; 0 bytes @ 0x46
  4145                           
  4146                           
  4147                           ; 1 bytes @ 0x46
  4148  0066                     	ds	1
  4149  0067                     ??_setDelayOff_GO:	
  4150  0067                     DlyOff_Main@sw:	
  4151                           ; 0 bytes @ 0x47
  4152                           
  4153  0067                     setTemp_Main@error:	
  4154                           ; 1 bytes @ 0x47
  4155                           
  4156  0067                     setRFSW_AdjControl@status:	
  4157                           ; 1 bytes @ 0x47
  4158                           
  4159                           
  4160                           ; 1 bytes @ 0x47
  4161  0067                     	ds	1
  4162  0068                     ??_DelayOff_Main:	
  4163  0068                     setRFSW_AdjControl@sw:	
  4164                           ; 0 bytes @ 0x48
  4165                           
  4166  0068                     setRF_DimmerLights@status:	
  4167                           ; 1 bytes @ 0x48
  4168                           
  4169  0068                     setTemp_Main@SafeValue:	
  4170                           ; 1 bytes @ 0x48
  4171                           
  4172                           
  4173                           ; 2 bytes @ 0x48
  4174  0068                     	ds	1
  4175  0069                     setDelayOff_GO@i:	
  4176  0069                     setRF_DimmerLights@lights:	
  4177                           ; 1 bytes @ 0x49
  4178                           
  4179                           
  4180                           ; 1 bytes @ 0x49
  4181  0069                     	ds	1
  4182  006A                     ?_setDimmerLights_Dimming:	
  4183  006A                     setDelayOff_GO@j:	
  4184                           ; 0 bytes @ 0x4A
  4185                           
  4186  006A                     setDimmerLights_Dimming@status:	
  4187                           ; 1 bytes @ 0x4A
  4188                           
  4189  006A                     setTemp_Main@DangerValue:	
  4190                           ; 1 bytes @ 0x4A
  4191                           
  4192                           
  4193                           ; 2 bytes @ 0x4A
  4194  006A                     	ds	1
  4195  006B                     ??_setDimmerLights_Dimming:	
  4196  006B                     setDelayOff_GO@k:	
  4197                           ; 0 bytes @ 0x4B
  4198                           
  4199                           
  4200                           ; 1 bytes @ 0x4B
  4201  006B                     	ds	1
  4202  006C                     setDelayOff_GO@sw:	
  4203  006C                     setDimmerLights_Dimming@value:	
  4204                           ; 1 bytes @ 0x4C
  4205                           
  4206  006C                     setTemp_Main@TempGO:	
  4207                           ; 1 bytes @ 0x4C
  4208                           
  4209                           
  4210                           ; 1 bytes @ 0x4C
  4211  006C                     	ds	1
  4212  006D                     ?_setDimmerLights_OnOff:	
  4213  006D                     ??_setRFSW_Control:	
  4214                           ; 0 bytes @ 0x4D
  4215                           
  4216  006D                     setDimmerLights_OnOff@command:	
  4217                           ; 0 bytes @ 0x4D
  4218                           
  4219  006D                     setDimmerLights_Dimming@lights:	
  4220                           ; 1 bytes @ 0x4D
  4221                           
  4222  006D                     setTemp_Main@AD:	
  4223                           ; 1 bytes @ 0x4D
  4224                           
  4225                           
  4226                           ; 2 bytes @ 0x4D
  4227  006D                     	ds	1
  4228  006E                     ??_setDimmerLights_OnOff:	
  4229  006E                     ??_getRxData:	
  4230                           ; 0 bytes @ 0x4E
  4231                           
  4232  006E                     ??_setControl_Lights_Table:	
  4233                           ; 0 bytes @ 0x4E
  4234                           
  4235                           
  4236                           ; 0 bytes @ 0x4E
  4237  006E                     	ds	1
  4238  006F                     ??_Temp_Main:	
  4239  006F                     getRxData@error:	
  4240                           ; 0 bytes @ 0x4F
  4241                           
  4242                           
  4243                           ; 1 bytes @ 0x4F
  4244  006F                     	ds	1
  4245  0070                     ??_setDimmerLights_Main:	
  4246  0070                     ??_DimmerLights_Main:	
  4247                           ; 0 bytes @ 0x50
  4248                           
  4249  0070                     ??_RF_Main:	
  4250                           ; 0 bytes @ 0x50
  4251                           
  4252  0070                     ??_main:	
  4253                           ; 0 bytes @ 0x50
  4254                           
  4255                           
  4256                           	psect	maintext
  4257  132D                     __pmaintext:	
  4258                           ; 0 bytes @ 0x50
  4259 ;;
  4260 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4261 ;;
  4262 ;; *************** function _main *****************
  4263 ;; Defined at:
  4264 ;;		line 7 in file "../src/main_B1.c"
  4265 ;; Parameters:    Size  Location     Type
  4266 ;;  argc            2    5[BANK1 ] int 
  4267 ;;  argv            2    7[BANK1 ] PTR PTR unsigned char 
  4268 ;; Auto vars:     Size  Location     Type
  4269 ;;		None
  4270 ;; Return value:  Size  Location     Type
  4271 ;;                  2    5[BANK1 ] int 
  4272 ;; Registers used:
  4273 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4274 ;; Tracked objects:
  4275 ;;		On entry : 17F/0
  4276 ;;		On exit  : 0/0
  4277 ;;		Unchanged: 0/0
  4278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4279 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4280 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4282 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4283 ;;Total ram usage:        4 bytes
  4284 ;; Hardware stack levels required when called:   13
  4285 ;; This function calls:
  4286 ;;		_Buzzer_Initialization
  4287 ;;		_Buzzer_Main
  4288 ;;		_CC2500_PowerOnInitial
  4289 ;;		_DelayOff_Initialization
  4290 ;;		_DelayOff_Main
  4291 ;;		_DimmerLights_Initialization
  4292 ;;		_DimmerLights_Main
  4293 ;;		_Exception_Main
  4294 ;;		_Flash_Memory_Initialization
  4295 ;;		_Flash_Memory_Main
  4296 ;;		_LED_Initialization
  4297 ;;		_LED_Main
  4298 ;;		_Load_Initialization
  4299 ;;		_Load_Main
  4300 ;;		_Mcu_Initialization
  4301 ;;		_RF_Initialization
  4302 ;;		_RF_Main
  4303 ;;		_Switch_Initialization
  4304 ;;		_Switch_Main
  4305 ;;		_Temp_Initialization
  4306 ;;		_Temp_Main
  4307 ;;		_WDT_Main
  4308 ;;		_getLoad_AD
  4309 ;;		_getTemp_AD
  4310 ;;		_myMain_Initialization
  4311 ;;		_my_MainTimer
  4312 ;; This function is called by:
  4313 ;;		Startup code after reset
  4314 ;; This function uses a non-reentrant model
  4315 ;;
  4316                           
  4317                           
  4318                           ;psect for function _main
  4319  132D                     _main:	
  4320                           
  4321                           ;main_B1.c: 8: myMain_Initialization();
  4322                           
  4323                           ;incstack = 0
  4324                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4325  132D  3199  216C  3193   	fcall	_myMain_Initialization
  4326                           
  4327                           ;main_B1.c: 9: Mcu_Initialization();
  4328  1330  3198  20E9  3193   	fcall	_Mcu_Initialization
  4329                           
  4330                           ;main_B1.c: 10: Flash_Memory_Initialization();
  4331  1333  318F  2736  3193   	fcall	_Flash_Memory_Initialization
  4332                           
  4333                           ;main_B1.c: 11: LED_Initialization();
  4334  1336  31A7  2788  3193   	fcall	_LED_Initialization
  4335                           
  4336                           ;main_B1.c: 12: Buzzer_Initialization();
  4337  1339  31A6  269A  3193   	fcall	_Buzzer_Initialization
  4338                           
  4339                           ;main_B1.c: 14: ;;
  4340                           ;main_B1.c: 15: Temp_Initialization();
  4341  133C  31A6  26A6  3193   	fcall	_Temp_Initialization
  4342                           
  4343                           ;main_B1.c: 16: Load_Initialization();
  4344  133F  31A6  269D  3193   	fcall	_Load_Initialization
  4345                           
  4346                           ;main_B1.c: 17: ;;
  4347                           ;main_B1.c: 18: DelayOff_Initialization();
  4348  1342  31A6  26DE  3193   	fcall	_DelayOff_Initialization
  4349                           
  4350                           ;main_B1.c: 20: DimmerLights_Initialization();
  4351  1345  31A7  2720  3193   	fcall	_DimmerLights_Initialization
  4352                           
  4353                           ;main_B1.c: 21: ;;
  4354                           ;main_B1.c: 22: ;;
  4355                           ;main_B1.c: 23: ;;
  4356                           ;main_B1.c: 24: Switch_Initialization();
  4357  1348  3198  2066  3193   	fcall	_Switch_Initialization
  4358                           
  4359                           ;main_B1.c: 25: RF_Initialization();
  4360  134B  31A6  26A0  3193   	fcall	_RF_Initialization
  4361                           
  4362                           ;main_B1.c: 26: CC2500_PowerOnInitial();
  4363  134E  3199  21A8  3193   	fcall	_CC2500_PowerOnInitial
  4364  1351                     l10264:	
  4365                           ;main_B1.c: 27: ;;
  4366                           ;main_B1.c: 28: ;;
  4367                           ;main_B1.c: 30: while (1) {
  4368                           
  4369                           
  4370                           ;main_B1.c: 32: if (myMain.PowerON == 1) {
  4371  1351  0021               	movlb	1	; select bank1
  4372  1352  1C2F               	btfss	_myMain^(0+128),0
  4373  1353  2B5C               	goto	l10268
  4374                           
  4375                           ;main_B1.c: 38: getLoad_AD(0x05);
  4376  1354  3005               	movlw	5
  4377  1355  3197  278E  3193   	fcall	_getLoad_AD
  4378                           
  4379                           ;main_B1.c: 42: getTemp_AD(0x09);
  4380  1358  3009               	movlw	9
  4381  1359  318B  2340  3193   	fcall	_getTemp_AD
  4382  135C                     l10268:	
  4383                           
  4384                           ;main_B1.c: 57: }
  4385                           ;main_B1.c: 93: if (Timer1.Timeout == 1) {
  4386  135C  0022               	movlb	2	; select bank2
  4387  135D  1C31               	btfss	_Timer1^(0+256),0
  4388  135E  2B51               	goto	l10264
  4389                           
  4390                           ;main_B1.c: 94: Timer1.Timeout = 0;
  4391  135F  1031               	bcf	_Timer1^(0+256),0
  4392                           
  4393                           ;main_B1.c: 96: my_MainTimer();
  4394  1360  319F  27C4  3193   	fcall	_my_MainTimer
  4395                           
  4396                           ;main_B1.c: 97: WDT_Main();
  4397  1363  3198  20FB  3193   	fcall	_WDT_Main
  4398                           
  4399                           ;main_B1.c: 98: ;;
  4400                           ;main_B1.c: 99: ;;
  4401                           ;main_B1.c: 100: if (myMain.PowerON == 1) {
  4402  1366  0021               	movlb	1	; select bank1
  4403  1367  1C2F               	btfss	_myMain^(0+128),0
  4404  1368  2B51               	goto	l10264
  4405                           
  4406                           ;main_B1.c: 101: Flash_Memory_Main();
  4407  1369  3190  20C9  3193   	fcall	_Flash_Memory_Main
  4408                           
  4409                           ;main_B1.c: 103: LED_Main();
  4410  136C  31A7  2794  3193   	fcall	_LED_Main
  4411                           
  4412                           ;main_B1.c: 104: Buzzer_Main();
  4413  136F  3191  218F  3193   	fcall	_Buzzer_Main
  4414                           
  4415                           ;main_B1.c: 106: ;;
  4416                           ;main_B1.c: 107: Temp_Main();
  4417  1372  31A6  26A9  3193   	fcall	_Temp_Main
  4418                           
  4419                           ;main_B1.c: 108: Load_Main();
  4420  1375  3180  2053  3193   	fcall	_Load_Main
  4421                           
  4422                           ;main_B1.c: 109: ;;
  4423                           ;main_B1.c: 111: ;;
  4424                           ;main_B1.c: 112: DimmerLights_Main();
  4425  1378  319D  2544  3193   	fcall	_DimmerLights_Main
  4426                           
  4427                           ;main_B1.c: 113: Switch_Main();
  4428  137B  31A7  2741  3193   	fcall	_Switch_Main
  4429                           
  4430                           ;main_B1.c: 114: ;;
  4431                           ;main_B1.c: 115: ;;
  4432                           ;main_B1.c: 117: RF_Main();
  4433  137E  31A6  26A3  3193   	fcall	_RF_Main
  4434                           
  4435                           ;main_B1.c: 118: DelayOff_Main();
  4436  1381  31A6  26E6  3193   	fcall	_DelayOff_Main
  4437                           
  4438                           ;main_B1.c: 119: ;;
  4439                           ;main_B1.c: 120: ;;
  4440                           ;main_B1.c: 121: Exception_Main();
  4441  1384  3185  2559  3193   	fcall	_Exception_Main
  4442  1387  2B51               	goto	l10264
  4443  1388                     __end_of_main:	
  4444                           ;main_B1.c: 128: }
  4445                           ;main_B1.c: 129: }
  4446                           ;main_B1.c: 163: }
  4447                           ;main_B1.c: 164: return (0);
  4448                           ;	Return value of _main is never used
  4449                           
  4450                           
  4451                           	psect	text1
  4452  1FC4                     __ptext1:	
  4453 ;; *************** function _my_MainTimer *****************
  4454 ;; Defined at:
  4455 ;;		line 185 in file "../src/main_B1.c"
  4456 ;; Parameters:    Size  Location     Type
  4457 ;;		None
  4458 ;; Auto vars:     Size  Location     Type
  4459 ;;		None
  4460 ;; Return value:  Size  Location     Type
  4461 ;;		None               void
  4462 ;; Registers used:
  4463 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4464 ;; Tracked objects:
  4465 ;;		On entry : 0/0
  4466 ;;		On exit  : 0/0
  4467 ;;		Unchanged: 0/0
  4468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4471 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4472 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4473 ;;Total ram usage:        1 bytes
  4474 ;; Hardware stack levels used:    1
  4475 ;; Hardware stack levels required when called:    7
  4476 ;; This function calls:
  4477 ;;		_setBuz
  4478 ;; This function is called by:
  4479 ;;		_main
  4480 ;; This function uses a non-reentrant model
  4481 ;;
  4482                           
  4483                           
  4484                           ;psect for function _my_MainTimer
  4485  1FC4                     _my_MainTimer:	
  4486                           
  4487                           ;main_B1.c: 187: if (myMain.PowerON == 0) {
  4488                           
  4489                           ;incstack = 0
  4490                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4491  1FC4  0021               	movlb	1	; select bank1
  4492  1FC5  182F               	btfsc	_myMain^(0+128),0
  4493  1FC6  2FDE               	goto	l9306
  4494                           
  4495                           ;main_B1.c: 188: myMain.PowerCount++;
  4496  1FC7  3001               	movlw	1
  4497  1FC8  0020               	movlb	0	; select bank0
  4498  1FC9  00AD               	movwf	??_my_MainTimer
  4499  1FCA  082D               	movf	??_my_MainTimer,w
  4500  1FCB  0021               	movlb	1	; select bank1
  4501  1FCC  07B0               	addwf	(_myMain^(0+128)+1),f
  4502                           
  4503                           ;main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  4504  1FCD  0830               	movf	(_myMain^(0+128)+1),w
  4505  1FCE  3A4B               	xorlw	75
  4506  1FCF  1D03               	skipz
  4507  1FD0  0008               	return
  4508                           
  4509                           ;main_B1.c: 190: myMain.PowerCount = 0;
  4510  1FD1  01B0               	clrf	(_myMain^(0+128)+1)
  4511                           
  4512                           ;main_B1.c: 191: myMain.PowerON = 1;
  4513  1FD2  142F               	bsf	_myMain^(0+128),0
  4514                           
  4515                           ;main_B1.c: 196: setBuz(3, 50);
  4516  1FD3  3032               	movlw	50
  4517  1FD4  0020               	movlb	0	; select bank0
  4518  1FD5  00A9               	movwf	setBuz@time
  4519  1FD6  3000               	movlw	0
  4520  1FD7  00AA               	movwf	setBuz@time+1
  4521  1FD8  3003               	movlw	3
  4522  1FD9  3192  22D4         	fcall	_setBuz
  4523                           
  4524                           ;main_B1.c: 197: myMain.SelfTest = 1;
  4525  1FDB  0021               	movlb	1	; select bank1
  4526  1FDC  162F               	bsf	_myMain^(0+128),4
  4527                           
  4528                           ;main_B1.c: 206: }
  4529                           ;main_B1.c: 207: } else {
  4530  1FDD  0008               	return
  4531  1FDE                     l9306:	
  4532                           
  4533                           ;main_B1.c: 208: myMain.PowerCount++;
  4534  1FDE  3001               	movlw	1
  4535  1FDF  0020               	movlb	0	; select bank0
  4536  1FE0  00AD               	movwf	??_my_MainTimer
  4537  1FE1  082D               	movf	??_my_MainTimer,w
  4538  1FE2  0021               	movlb	1	; select bank1
  4539  1FE3  07B0               	addwf	(_myMain^(0+128)+1),f
  4540                           
  4541                           ;main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  4542  1FE4  0830               	movf	(_myMain^(0+128)+1),w
  4543  1FE5  3A32               	xorlw	50
  4544  1FE6  1903               	btfsc	3,2
  4545                           
  4546                           ;main_B1.c: 210: myMain.PowerCount = 0;
  4547  1FE7  01B0               	clrf	(_myMain^(0+128)+1)
  4548                           
  4549                           ;main_B1.c: 226: }
  4550                           ;main_B1.c: 228: myMain.Count1++;
  4551  1FE8  3001               	movlw	1
  4552  1FE9  07B3               	addwf	(_myMain^(0+128)+4),f
  4553  1FEA  3000               	movlw	0
  4554  1FEB  3DB4               	addwfc	((_myMain+1)^(0+128)+4),f
  4555                           
  4556                           ;main_B1.c: 229: if (myMain.Count1 == (1000 / 20)) {
  4557  1FEC  3004               	movlw	4
  4558  1FED  3EAF               	addlw	_myMain& (0+255)
  4559  1FEE  0086               	movwf	6
  4560  1FEF  0187               	clrf	7
  4561  1FF0  3F40               	moviw [0]fsr1
  4562  1FF1  3A32               	xorlw	50
  4563  1FF2  1D03               	skipz
  4564  1FF3  2FF6               	goto	u10215
  4565  1FF4  3F41               	moviw [1]fsr1
  4566  1FF5  3A00               	xorlw	0
  4567  1FF6                     u10215:	
  4568  1FF6  1D03               	skipz
  4569  1FF7  0008               	return
  4570                           
  4571                           ;main_B1.c: 230: myMain.Count1 = 0;
  4572  1FF8  01B3               	clrf	(_myMain^(0+128)+4)
  4573  1FF9  01B4               	clrf	((_myMain+1)^(0+128)+4)
  4574                           
  4575                           ;main_B1.c: 242: if (myMain.Flag) {
  4576  1FFA  1CAF               	btfss	_myMain^(0+128),1
  4577  1FFB  2FFE               	goto	l2912
  4578                           
  4579                           ;main_B1.c: 243: myMain.Flag = 0;
  4580  1FFC  10AF               	bcf	_myMain^(0+128),1
  4581                           
  4582                           ;main_B1.c: 252: } else {
  4583  1FFD  0008               	return
  4584  1FFE                     l2912:	
  4585                           
  4586                           ;main_B1.c: 253: myMain.Flag = 1;
  4587  1FFE  14AF               	bsf	_myMain^(0+128),1
  4588  1FFF  0008               	return
  4589  2000                     __end_of_my_MainTimer:	
  4590                           
  4591                           	psect	text2
  4592  196C                     __ptext2:	
  4593 ;; *************** function _myMain_Initialization *****************
  4594 ;; Defined at:
  4595 ;;		line 170 in file "../src/main_B1.c"
  4596 ;; Parameters:    Size  Location     Type
  4597 ;;		None
  4598 ;; Auto vars:     Size  Location     Type
  4599 ;;		None
  4600 ;; Return value:  Size  Location     Type
  4601 ;;		None               void
  4602 ;; Registers used:
  4603 ;;		wreg, fsr1l, fsr1h
  4604 ;; Tracked objects:
  4605 ;;		On entry : 0/0
  4606 ;;		On exit  : 0/0
  4607 ;;		Unchanged: 0/0
  4608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4610 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4611 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4612 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4613 ;;Total ram usage:        1 bytes
  4614 ;; Hardware stack levels used:    1
  4615 ;; Hardware stack levels required when called:    5
  4616 ;; This function calls:
  4617 ;;		Nothing
  4618 ;; This function is called by:
  4619 ;;		_main
  4620 ;; This function uses a non-reentrant model
  4621 ;;
  4622                           
  4623                           
  4624                           ;psect for function _myMain_Initialization
  4625  196C                     _myMain_Initialization:	
  4626                           
  4627                           ;main_B1.c: 173: product = &_product;
  4628                           
  4629                           ;incstack = 0
  4630                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4631  196C  304E               	movlw	__product& (0+255)
  4632  196D  0020               	movlb	0	; select bank0
  4633  196E  00A0               	movwf	??_myMain_Initialization
  4634  196F  0820               	movf	??_myMain_Initialization,w
  4635  1970  0021               	movlb	1	; select bank1
  4636  1971  00EE               	movwf	_product^(0+128)
  4637                           
  4638                           ;main_B1.c: 174: product->Data[20] = 210;
  4639  1972  30D2               	movlw	210
  4640  1973  0020               	movlb	0	; select bank0
  4641  1974  00A0               	movwf	??_myMain_Initialization
  4642  1975  0021               	movlb	1	; select bank1
  4643  1976  086E               	movf	_product^(0+128),w
  4644  1977  3E14               	addlw	20
  4645  1978  0086               	movwf	6
  4646  1979  3002               	movlw	2	; select bank4/5
  4647  197A  0087               	movwf	7
  4648  197B  0020               	movlb	0	; select bank0
  4649  197C  0820               	movf	??_myMain_Initialization,w
  4650  197D  0081               	movwf	1
  4651  197E  0008               	return
  4652  197F                     __end_of_myMain_Initialization:	
  4653                           
  4654                           	psect	text3
  4655  0B40                     __ptext3:	
  4656 ;; *************** function _getTemp_AD *****************
  4657 ;; Defined at:
  4658 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4659 ;; Parameters:    Size  Location     Type
  4660 ;;  channel         1    wreg     unsigned char 
  4661 ;; Auto vars:     Size  Location     Type
  4662 ;;  channel         1    5[BANK0 ] unsigned char 
  4663 ;;  ADRES           2    6[BANK0 ] unsigned int 
  4664 ;; Return value:  Size  Location     Type
  4665 ;;		None               void
  4666 ;; Registers used:
  4667 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4668 ;; Tracked objects:
  4669 ;;		On entry : 0/0
  4670 ;;		On exit  : 0/0
  4671 ;;		Unchanged: 0/0
  4672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4674 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4675 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4676 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4677 ;;Total ram usage:        4 bytes
  4678 ;; Hardware stack levels used:    1
  4679 ;; Hardware stack levels required when called:    7
  4680 ;; This function calls:
  4681 ;;		_getAD
  4682 ;; This function is called by:
  4683 ;;		_main
  4684 ;; This function uses a non-reentrant model
  4685 ;;
  4686                           
  4687                           
  4688                           ;psect for function _getTemp_AD
  4689  0B40                     _getTemp_AD:	
  4690                           
  4691                           ;incstack = 0
  4692                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4693                           ;getTemp_AD@channel stored from wreg
  4694  0B40  0020               	movlb	0	; select bank0
  4695  0B41  00A5               	movwf	getTemp_AD@channel
  4696                           
  4697                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  4698  0B42  01A6               	clrf	getTemp_AD@ADRES
  4699  0B43  01A7               	clrf	getTemp_AD@ADRES+1
  4700                           
  4701                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  4702  0B44  0022               	movlb	2	; select bank2
  4703  0B45  1D60               	btfss	_Temp^(0+256),2
  4704  0B46  0008               	return
  4705                           
  4706                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0xf0);
  4707  0B47  30F0               	movlw	240
  4708  0B48  0020               	movlb	0	; select bank0
  4709  0B49  00A4               	movwf	??_getTemp_AD
  4710  0B4A  0824               	movf	??_getTemp_AD,w
  4711  0B4B  00A0               	movwf	getAD@adcon1
  4712  0B4C  0825               	movf	getTemp_AD@channel,w
  4713  0B4D  319C  2414  318B   	fcall	_getAD
  4714  0B50  0020               	movlb	0	; select bank0
  4715  0B51  0821               	movf	?_getAD+1,w
  4716  0B52  01A7               	clrf	getTemp_AD@ADRES+1
  4717  0B53  07A7               	addwf	getTemp_AD@ADRES+1,f
  4718  0B54  0820               	movf	?_getAD,w
  4719  0B55  01A6               	clrf	getTemp_AD@ADRES
  4720  0B56  07A6               	addwf	getTemp_AD@ADRES,f
  4721                           
  4722                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  4723  0B57  0827               	movf	getTemp_AD@ADRES+1,w
  4724  0B58  0426               	iorwf	getTemp_AD@ADRES,w
  4725  0B59  1903               	skipnz
  4726  0B5A  0008               	return
  4727                           
  4728                           ;OverTemperature_B1.c: 30: if (Temp.ADV[0] < ADRES) {
  4729  0B5B  0827               	movf	getTemp_AD@ADRES+1,w
  4730  0B5C  0022               	movlb	2	; select bank2
  4731  0B5D  0265               	subwf	((_Temp+1)^(0+256)+4),w
  4732  0B5E  1D03               	skipz
  4733  0B5F  2B64               	goto	u10135
  4734  0B60  0020               	movlb	0	; select bank0
  4735  0B61  0826               	movf	getTemp_AD@ADRES,w
  4736  0B62  0022               	movlb	2	; select bank2
  4737  0B63  0264               	subwf	(_Temp^(0+256)+4),w
  4738  0B64                     u10135:	
  4739  0B64  1803               	skipnc
  4740  0B65  2B71               	goto	l9262
  4741                           
  4742                           ;OverTemperature_B1.c: 31: Temp.ADV[0] = ADRES;
  4743  0B66  0020               	movlb	0	; select bank0
  4744  0B67  0827               	movf	getTemp_AD@ADRES+1,w
  4745  0B68  0022               	movlb	2	; select bank2
  4746  0B69  01E5               	clrf	((_Temp+1)^(0+256)+4)
  4747  0B6A  07E5               	addwf	((_Temp+1)^(0+256)+4),f
  4748  0B6B  0020               	movlb	0	; select bank0
  4749  0B6C  0826               	movf	getTemp_AD@ADRES,w
  4750  0B6D  0022               	movlb	2	; select bank2
  4751  0B6E  01E4               	clrf	(_Temp^(0+256)+4)
  4752  0B6F  07E4               	addwf	(_Temp^(0+256)+4),f
  4753                           
  4754                           ;OverTemperature_B1.c: 32: } else if (Temp.ADV[1] < ADRES) {
  4755  0B70  0008               	return
  4756  0B71                     l9262:	
  4757  0B71  0020               	movlb	0	; select bank0
  4758  0B72  0827               	movf	getTemp_AD@ADRES+1,w
  4759  0B73  0022               	movlb	2	; select bank2
  4760  0B74  0267               	subwf	((_Temp+1)^(0+256)+6),w
  4761  0B75  1D03               	skipz
  4762  0B76  2B7B               	goto	u10145
  4763  0B77  0020               	movlb	0	; select bank0
  4764  0B78  0826               	movf	getTemp_AD@ADRES,w
  4765  0B79  0022               	movlb	2	; select bank2
  4766  0B7A  0266               	subwf	(_Temp^(0+256)+6),w
  4767  0B7B                     u10145:	
  4768  0B7B  1803               	skipnc
  4769  0B7C  2B88               	goto	l9266
  4770                           
  4771                           ;OverTemperature_B1.c: 33: Temp.ADV[1] = ADRES;
  4772  0B7D  0020               	movlb	0	; select bank0
  4773  0B7E  0827               	movf	getTemp_AD@ADRES+1,w
  4774  0B7F  0022               	movlb	2	; select bank2
  4775  0B80  01E7               	clrf	((_Temp+1)^(0+256)+6)
  4776  0B81  07E7               	addwf	((_Temp+1)^(0+256)+6),f
  4777  0B82  0020               	movlb	0	; select bank0
  4778  0B83  0826               	movf	getTemp_AD@ADRES,w
  4779  0B84  0022               	movlb	2	; select bank2
  4780  0B85  01E6               	clrf	(_Temp^(0+256)+6)
  4781  0B86  07E6               	addwf	(_Temp^(0+256)+6),f
  4782                           
  4783                           ;OverTemperature_B1.c: 34: } else if (Temp.ADV[2] < ADRES) {
  4784  0B87  0008               	return
  4785  0B88                     l9266:	
  4786  0B88  0020               	movlb	0	; select bank0
  4787  0B89  0827               	movf	getTemp_AD@ADRES+1,w
  4788  0B8A  0022               	movlb	2	; select bank2
  4789  0B8B  0269               	subwf	((_Temp+1)^(0+256)+8),w
  4790  0B8C  1D03               	skipz
  4791  0B8D  2B92               	goto	u10155
  4792  0B8E  0020               	movlb	0	; select bank0
  4793  0B8F  0826               	movf	getTemp_AD@ADRES,w
  4794  0B90  0022               	movlb	2	; select bank2
  4795  0B91  0268               	subwf	(_Temp^(0+256)+8),w
  4796  0B92                     u10155:	
  4797  0B92  1803               	skipnc
  4798  0B93  2B9F               	goto	l9270
  4799                           
  4800                           ;OverTemperature_B1.c: 35: Temp.ADV[2] = ADRES;
  4801  0B94  0020               	movlb	0	; select bank0
  4802  0B95  0827               	movf	getTemp_AD@ADRES+1,w
  4803  0B96  0022               	movlb	2	; select bank2
  4804  0B97  01E9               	clrf	((_Temp+1)^(0+256)+8)
  4805  0B98  07E9               	addwf	((_Temp+1)^(0+256)+8),f
  4806  0B99  0020               	movlb	0	; select bank0
  4807  0B9A  0826               	movf	getTemp_AD@ADRES,w
  4808  0B9B  0022               	movlb	2	; select bank2
  4809  0B9C  01E8               	clrf	(_Temp^(0+256)+8)
  4810  0B9D  07E8               	addwf	(_Temp^(0+256)+8),f
  4811                           
  4812                           ;OverTemperature_B1.c: 36: } else if (Temp.ADV[3] < ADRES) {
  4813  0B9E  0008               	return
  4814  0B9F                     l9270:	
  4815  0B9F  0020               	movlb	0	; select bank0
  4816  0BA0  0827               	movf	getTemp_AD@ADRES+1,w
  4817  0BA1  0022               	movlb	2	; select bank2
  4818  0BA2  026B               	subwf	((_Temp+1)^(0+256)+10),w
  4819  0BA3  1D03               	skipz
  4820  0BA4  2BA9               	goto	u10165
  4821  0BA5  0020               	movlb	0	; select bank0
  4822  0BA6  0826               	movf	getTemp_AD@ADRES,w
  4823  0BA7  0022               	movlb	2	; select bank2
  4824  0BA8  026A               	subwf	(_Temp^(0+256)+10),w
  4825  0BA9                     u10165:	
  4826  0BA9  1803               	skipnc
  4827  0BAA  2BB6               	goto	l9274
  4828                           
  4829                           ;OverTemperature_B1.c: 37: Temp.ADV[3] = ADRES;
  4830  0BAB  0020               	movlb	0	; select bank0
  4831  0BAC  0827               	movf	getTemp_AD@ADRES+1,w
  4832  0BAD  0022               	movlb	2	; select bank2
  4833  0BAE  01EB               	clrf	((_Temp+1)^(0+256)+10)
  4834  0BAF  07EB               	addwf	((_Temp+1)^(0+256)+10),f
  4835  0BB0  0020               	movlb	0	; select bank0
  4836  0BB1  0826               	movf	getTemp_AD@ADRES,w
  4837  0BB2  0022               	movlb	2	; select bank2
  4838  0BB3  01EA               	clrf	(_Temp^(0+256)+10)
  4839  0BB4  07EA               	addwf	(_Temp^(0+256)+10),f
  4840                           
  4841                           ;OverTemperature_B1.c: 38: } else if (Temp.ADV[4] < ADRES) {
  4842  0BB5  0008               	return
  4843  0BB6                     l9274:	
  4844  0BB6  0020               	movlb	0	; select bank0
  4845  0BB7  0827               	movf	getTemp_AD@ADRES+1,w
  4846  0BB8  0022               	movlb	2	; select bank2
  4847  0BB9  026D               	subwf	((_Temp+1)^(0+256)+12),w
  4848  0BBA  1D03               	skipz
  4849  0BBB  2BC0               	goto	u10175
  4850  0BBC  0020               	movlb	0	; select bank0
  4851  0BBD  0826               	movf	getTemp_AD@ADRES,w
  4852  0BBE  0022               	movlb	2	; select bank2
  4853  0BBF  026C               	subwf	(_Temp^(0+256)+12),w
  4854  0BC0                     u10175:	
  4855  0BC0  1803               	skipnc
  4856  0BC1  0008               	return
  4857                           
  4858                           ;OverTemperature_B1.c: 39: Temp.ADV[4] = ADRES;
  4859  0BC2  0020               	movlb	0	; select bank0
  4860  0BC3  0827               	movf	getTemp_AD@ADRES+1,w
  4861  0BC4  0022               	movlb	2	; select bank2
  4862  0BC5  01ED               	clrf	((_Temp+1)^(0+256)+12)
  4863  0BC6  07ED               	addwf	((_Temp+1)^(0+256)+12),f
  4864  0BC7  0020               	movlb	0	; select bank0
  4865  0BC8  0826               	movf	getTemp_AD@ADRES,w
  4866  0BC9  0022               	movlb	2	; select bank2
  4867  0BCA  01EC               	clrf	(_Temp^(0+256)+12)
  4868  0BCB  07EC               	addwf	(_Temp^(0+256)+12),f
  4869  0BCC  0008               	return
  4870  0BCD                     __end_of_getTemp_AD:	
  4871                           
  4872                           	psect	text4
  4873  178E                     __ptext4:	
  4874 ;; *************** function _getLoad_AD *****************
  4875 ;; Defined at:
  4876 ;;		line 16 in file "../src/OverLoad_B1.c"
  4877 ;; Parameters:    Size  Location     Type
  4878 ;;  channel         1    wreg     unsigned char 
  4879 ;; Auto vars:     Size  Location     Type
  4880 ;;  channel         1    6[BANK0 ] unsigned char 
  4881 ;;  ADRES           2    9[BANK0 ] unsigned int 
  4882 ;;  i               1   11[BANK0 ] unsigned char 
  4883 ;;  j               1    8[BANK0 ] unsigned char 
  4884 ;;  k               1    7[BANK0 ] unsigned char 
  4885 ;; Return value:  Size  Location     Type
  4886 ;;		None               void
  4887 ;; Registers used:
  4888 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4889 ;; Tracked objects:
  4890 ;;		On entry : 0/0
  4891 ;;		On exit  : 0/0
  4892 ;;		Unchanged: 0/0
  4893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4895 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4896 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4897 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4898 ;;Total ram usage:        8 bytes
  4899 ;; Hardware stack levels used:    1
  4900 ;; Hardware stack levels required when called:    7
  4901 ;; This function calls:
  4902 ;;		_getAD
  4903 ;; This function is called by:
  4904 ;;		_main
  4905 ;; This function uses a non-reentrant model
  4906 ;;
  4907                           
  4908                           
  4909                           ;psect for function _getLoad_AD
  4910  178E                     _getLoad_AD:	
  4911                           
  4912                           ;incstack = 0
  4913                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4914                           ;getLoad_AD@channel stored from wreg
  4915  178E  0020               	movlb	0	; select bank0
  4916  178F  00A6               	movwf	getLoad_AD@channel
  4917                           
  4918                           ;OverLoad_B1.c: 17: char i = 0, j = 0, k = 0;
  4919  1790  01AB               	clrf	getLoad_AD@i
  4920  1791  01A8               	clrf	getLoad_AD@j
  4921  1792  01A7               	clrf	getLoad_AD@k
  4922                           
  4923                           ;OverLoad_B1.c: 18: ADtype ADRES = 0;
  4924  1793  01A9               	clrf	getLoad_AD@ADRES
  4925  1794  01AA               	clrf	getLoad_AD@ADRES+1
  4926                           
  4927                           ;OverLoad_B1.c: 19: if (Load.ADtoGO == 1) {
  4928  1795  0022               	movlb	2	; select bank2
  4929  1796  1E38               	btfss	_Load^(0+256),4
  4930  1797  0008               	return
  4931                           
  4932                           ;OverLoad_B1.c: 21: ADRES = getAD(channel, 0xf3);
  4933  1798  30F3               	movlw	243
  4934  1799  0020               	movlb	0	; select bank0
  4935  179A  00A4               	movwf	??_getLoad_AD
  4936  179B  0824               	movf	??_getLoad_AD,w
  4937  179C  00A0               	movwf	getAD@adcon1
  4938  179D  0826               	movf	getLoad_AD@channel,w
  4939  179E  319C  2414  3197   	fcall	_getAD
  4940  17A1  0020               	movlb	0	; select bank0
  4941  17A2  0821               	movf	?_getAD+1,w
  4942  17A3  01AA               	clrf	getLoad_AD@ADRES+1
  4943  17A4  07AA               	addwf	getLoad_AD@ADRES+1,f
  4944  17A5  0820               	movf	?_getAD,w
  4945  17A6  01A9               	clrf	getLoad_AD@ADRES
  4946  17A7  07A9               	addwf	getLoad_AD@ADRES,f
  4947                           
  4948                           ;OverLoad_B1.c: 22: for (i = 0; i < 4; i++) {
  4949  17A8  01AB               	clrf	getLoad_AD@i
  4950  17A9  3004               	movlw	4
  4951  17AA  022B               	subwf	getLoad_AD@i,w
  4952  17AB  1803               	btfsc	3,0
  4953  17AC  2FD4               	goto	l9072
  4954  17AD                     l9060:	
  4955                           
  4956                           ;OverLoad_B1.c: 23: if (Load.AH[i] < ADRES && j == 0) {
  4957  17AD  352B               	lslf	getLoad_AD@i,w
  4958  17AE  3E43               	addlw	(_Load+11)& (0+255)
  4959  17AF  0086               	movwf	6
  4960  17B0  3001               	movlw	1	; select bank2/3
  4961  17B1  0087               	movwf	7
  4962  17B2  3F40               	moviw [0]fsr1
  4963  17B3  00A4               	movwf	??_getLoad_AD
  4964  17B4  3F41               	moviw [1]fsr1
  4965  17B5  00A5               	movwf	??_getLoad_AD+1
  4966  17B6  082A               	movf	getLoad_AD@ADRES+1,w
  4967  17B7  0225               	subwf	??_getLoad_AD+1,w
  4968  17B8  1D03               	skipz
  4969  17B9  2FBC               	goto	u9725
  4970  17BA  0829               	movf	getLoad_AD@ADRES,w
  4971  17BB  0224               	subwf	??_getLoad_AD,w
  4972  17BC                     u9725:	
  4973  17BC  1803               	skipnc
  4974  17BD  2FCC               	goto	l9068
  4975  17BE  08A8               	movf	getLoad_AD@j,f
  4976  17BF  1D03               	skipz
  4977  17C0  2FCC               	goto	l9068
  4978                           
  4979                           ;OverLoad_B1.c: 24: Load.AH[i] = ADRES;
  4980  17C1  352B               	lslf	getLoad_AD@i,w
  4981  17C2  3E43               	addlw	(_Load+11)& (0+255)
  4982  17C3  0086               	movwf	6
  4983  17C4  3001               	movlw	1	; select bank2/3
  4984  17C5  0087               	movwf	7
  4985  17C6  0829               	movf	getLoad_AD@ADRES,w
  4986  17C7  3FC0               	movwi [0]fsr1
  4987  17C8  082A               	movf	getLoad_AD@ADRES+1,w
  4988  17C9  3FC1               	movwi [1]fsr1
  4989                           
  4990                           ;OverLoad_B1.c: 25: j = 1;
  4991  17CA  01A8               	clrf	getLoad_AD@j
  4992  17CB  0AA8               	incf	getLoad_AD@j,f
  4993  17CC                     l9068:	
  4994  17CC  3001               	movlw	1
  4995  17CD  00A4               	movwf	??_getLoad_AD
  4996  17CE  0824               	movf	??_getLoad_AD,w
  4997  17CF  07AB               	addwf	getLoad_AD@i,f
  4998  17D0  3004               	movlw	4
  4999  17D1  022B               	subwf	getLoad_AD@i,w
  5000  17D2  1C03               	skipc
  5001  17D3  2FAD               	goto	l9060
  5002  17D4                     l9072:	
  5003                           
  5004                           ;OverLoad_B1.c: 26: }
  5005                           ;OverLoad_B1.c: 27: }
  5006                           ;OverLoad_B1.c: 28: if (j == 0) {
  5007  17D4  08A8               	movf	getLoad_AD@j,f
  5008  17D5  1D03               	skipz
  5009  17D6  0008               	return
  5010                           
  5011                           ;OverLoad_B1.c: 29: for (i = 0; i < 4; i++) {
  5012  17D7  01AB               	clrf	getLoad_AD@i
  5013  17D8                     L1:	
  5014  17D8  3004               	movlw	4
  5015  17D9  022B               	subwf	getLoad_AD@i,w
  5016  17DA  1803               	btfsc	3,0
  5017  17DB  0008               	return
  5018                           
  5019                           ;OverLoad_B1.c: 30: if (Load.AL[i] > ADRES && k == 0) {
  5020  17DC  352B               	lslf	getLoad_AD@i,w
  5021  17DD  3E4D               	addlw	(_Load+21)& (0+255)
  5022  17DE  0086               	movwf	6
  5023  17DF  3001               	movlw	1	; select bank2/3
  5024  17E0  0087               	movwf	7
  5025  17E1  3F40               	moviw [0]fsr1
  5026  17E2  00A4               	movwf	??_getLoad_AD
  5027  17E3  3F41               	moviw [1]fsr1
  5028  17E4  00A5               	movwf	??_getLoad_AD+1
  5029  17E5  0825               	movf	??_getLoad_AD+1,w
  5030  17E6  022A               	subwf	getLoad_AD@ADRES+1,w
  5031  17E7  1D03               	skipz
  5032  17E8  2FEB               	goto	u9775
  5033  17E9  0824               	movf	??_getLoad_AD,w
  5034  17EA  0229               	subwf	getLoad_AD@ADRES,w
  5035  17EB                     u9775:	
  5036  17EB  1803               	skipnc
  5037  17EC  2FFB               	goto	l9088
  5038  17ED  08A7               	movf	getLoad_AD@k,f
  5039  17EE  1D03               	skipz
  5040  17EF  2FFB               	goto	l9088
  5041                           
  5042                           ;OverLoad_B1.c: 31: Load.AL[i] = ADRES;
  5043  17F0  352B               	lslf	getLoad_AD@i,w
  5044  17F1  3E4D               	addlw	(_Load+21)& (0+255)
  5045  17F2  0086               	movwf	6
  5046  17F3  3001               	movlw	1	; select bank2/3
  5047  17F4  0087               	movwf	7
  5048  17F5  0829               	movf	getLoad_AD@ADRES,w
  5049  17F6  3FC0               	movwi [0]fsr1
  5050  17F7  082A               	movf	getLoad_AD@ADRES+1,w
  5051  17F8  3FC1               	movwi [1]fsr1
  5052                           
  5053                           ;OverLoad_B1.c: 32: k = 1;
  5054  17F9  01A7               	clrf	getLoad_AD@k
  5055  17FA  0AA7               	incf	getLoad_AD@k,f
  5056  17FB                     l9088:	
  5057  17FB  3001               	movlw	1
  5058  17FC  00A4               	movwf	??_getLoad_AD
  5059  17FD  0824               	movf	??_getLoad_AD,w
  5060  17FE  07AB               	addwf	getLoad_AD@i,f
  5061  17FF  2FD8               	goto	L1
  5062  1800                     __end_of_getLoad_AD:	
  5063                           
  5064                           	psect	text5
  5065  1C14                     __ptext5:	
  5066 ;; *************** function _getAD *****************
  5067 ;; Defined at:
  5068 ;;		line 461 in file "../src/MCU_B1.c"
  5069 ;; Parameters:    Size  Location     Type
  5070 ;;  adcon0          1    wreg     unsigned char 
  5071 ;;  adcon1          1    0[BANK0 ] unsigned char 
  5072 ;; Auto vars:     Size  Location     Type
  5073 ;;  adcon0          1    3[BANK0 ] unsigned char 
  5074 ;; Return value:  Size  Location     Type
  5075 ;;                  2    0[BANK0 ] int 
  5076 ;; Registers used:
  5077 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5078 ;; Tracked objects:
  5079 ;;		On entry : 0/0
  5080 ;;		On exit  : 0/0
  5081 ;;		Unchanged: 0/0
  5082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5083 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5084 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5085 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5086 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5087 ;;Total ram usage:        4 bytes
  5088 ;; Hardware stack levels used:    1
  5089 ;; Hardware stack levels required when called:    6
  5090 ;; This function calls:
  5091 ;;		_Timeout_Counter
  5092 ;;		_set_TimeoutCleared
  5093 ;; This function is called by:
  5094 ;;		_getLoad_AD
  5095 ;;		_getTemp_AD
  5096 ;; This function uses a non-reentrant model
  5097 ;;
  5098                           
  5099                           
  5100                           ;psect for function _getAD
  5101  1C14                     _getAD:	
  5102                           
  5103                           ;incstack = 0
  5104                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5105                           ;getAD@adcon0 stored from wreg
  5106  1C14  0020               	movlb	0	; select bank0
  5107  1C15  00A3               	movwf	getAD@adcon0
  5108                           
  5109                           ;MCU_B1.c: 462: ADCON0 = adcon0;
  5110  1C16  0823               	movf	getAD@adcon0,w
  5111  1C17  0021               	movlb	1	; select bank1
  5112  1C18  009D               	movwf	29	;volatile
  5113                           
  5114                           ;MCU_B1.c: 463: ADCON1 = adcon1;
  5115  1C19  0020               	movlb	0	; select bank0
  5116  1C1A  0820               	movf	getAD@adcon1,w
  5117  1C1B  0021               	movlb	1	; select bank1
  5118  1C1C  009E               	movwf	30	;volatile
  5119                           
  5120                           ;MCU_B1.c: 464: GO_nDONE = 1;
  5121  1C1D  149D               	bsf	29,1	;volatile
  5122                           
  5123                           ;MCU_B1.c: 465: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  5124  1C1E  2C22               	goto	l8540
  5125  1C1F                     l8538:	
  5126                           
  5127                           ;MCU_B1.c: 466: Timeout_Counter();
  5128  1C1F  3199  21BD  319C   	fcall	_Timeout_Counter
  5129  1C22                     l8540:	
  5130  1C22  0021               	movlb	1	; select bank1
  5131  1C23  1C9D               	btfss	29,1	;volatile
  5132  1C24  2C27               	goto	l8544
  5133  1C25  1D39               	btfss	(_myMain^(0+128)+10),2
  5134  1C26  2C1F               	goto	l8538
  5135  1C27                     l8544:	
  5136                           
  5137                           ;MCU_B1.c: 467: };
  5138                           ;MCU_B1.c: 468: set_TimeoutCleared();
  5139  1C27  31A6  26C0         	fcall	_set_TimeoutCleared
  5140                           
  5141                           ;MCU_B1.c: 469: return ((ADRESH*256)+ADRESL);
  5142  1C29  0021               	movlb	1	; select bank1
  5143  1C2A  081C               	movf	28,w	;volatile
  5144  1C2B  0020               	movlb	0	; select bank0
  5145  1C2C  01A1               	clrf	?_getAD+1
  5146  1C2D  07A1               	addwf	?_getAD+1,f
  5147  1C2E  0021               	movlb	1	; select bank1
  5148  1C2F  081B               	movf	27,w	;volatile
  5149  1C30  0020               	movlb	0	; select bank0
  5150  1C31  01A0               	clrf	?_getAD
  5151  1C32  07A0               	addwf	?_getAD,f
  5152  1C33  0008               	return
  5153  1C34                     __end_of_getAD:	
  5154                           
  5155                           	psect	text6
  5156  18FB                     __ptext6:	
  5157 ;; *************** function _WDT_Main *****************
  5158 ;; Defined at:
  5159 ;;		line 1116 in file "../src/MCU_B1.c"
  5160 ;; Parameters:    Size  Location     Type
  5161 ;;		None
  5162 ;; Auto vars:     Size  Location     Type
  5163 ;;		None
  5164 ;; Return value:  Size  Location     Type
  5165 ;;		None               void
  5166 ;; Registers used:
  5167 ;;		wreg, status,2, status,0, pclath, cstack
  5168 ;; Tracked objects:
  5169 ;;		On entry : 0/0
  5170 ;;		On exit  : 0/0
  5171 ;;		Unchanged: 0/0
  5172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5174 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5175 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5176 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5177 ;;Total ram usage:        1 bytes
  5178 ;; Hardware stack levels used:    1
  5179 ;; Hardware stack levels required when called:    6
  5180 ;; This function calls:
  5181 ;;		_WDT_Clearing
  5182 ;; This function is called by:
  5183 ;;		_main
  5184 ;; This function uses a non-reentrant model
  5185 ;;
  5186                           
  5187                           
  5188                           ;psect for function _WDT_Main
  5189  18FB                     _WDT_Main:	
  5190                           
  5191                           ;MCU_B1.c: 1117: if (WDT.Enable == 1) {
  5192                           
  5193                           ;incstack = 0
  5194                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  5195  18FB  0022               	movlb	2	; select bank2
  5196  18FC  1C36               	btfss	_WDT^(0+256),0
  5197  18FD  0008               	return
  5198                           
  5199                           ;MCU_B1.c: 1118: if (WDT.Timer-- > 0) {
  5200  18FE  3001               	movlw	1
  5201  18FF  02B7               	subwf	(_WDT^(0+256)+1),f
  5202  1900  0837               	movf	(_WDT^(0+256)+1),w
  5203  1901  3AFF               	xorlw	255
  5204  1902  1903               	skipnz
  5205  1903  0008               	return
  5206                           
  5207                           ;MCU_B1.c: 1119: WDT.Timer = 100;
  5208  1904  3064               	movlw	100
  5209  1905  0020               	movlb	0	; select bank0
  5210  1906  00A0               	movwf	??_WDT_Main
  5211  1907  0820               	movf	??_WDT_Main,w
  5212  1908  0022               	movlb	2	; select bank2
  5213  1909  00B7               	movwf	(_WDT^(0+256)+1)
  5214                           
  5215                           ;MCU_B1.c: 1120: WDT_Clearing();
  5216  190A  3180  2002         	fcall	_WDT_Clearing
  5217  190C  0008               	return
  5218  190D                     __end_of_WDT_Main:	
  5219                           
  5220                           	psect	text7
  5221  0002                     __ptext7:	
  5222 ;; *************** function _WDT_Clearing *****************
  5223 ;; Defined at:
  5224 ;;		line 1126 in file "../src/MCU_B1.c"
  5225 ;; Parameters:    Size  Location     Type
  5226 ;;		None
  5227 ;; Auto vars:     Size  Location     Type
  5228 ;;		None
  5229 ;; Return value:  Size  Location     Type
  5230 ;;		None               void
  5231 ;; Registers used:
  5232 ;;		None
  5233 ;; Tracked objects:
  5234 ;;		On entry : 0/0
  5235 ;;		On exit  : 0/0
  5236 ;;		Unchanged: 0/0
  5237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5239 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5241 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5242 ;;Total ram usage:        0 bytes
  5243 ;; Hardware stack levels used:    1
  5244 ;; Hardware stack levels required when called:    5
  5245 ;; This function calls:
  5246 ;;		Nothing
  5247 ;; This function is called by:
  5248 ;;		_WDT_Main
  5249 ;; This function uses a non-reentrant model
  5250 ;;
  5251                           
  5252                           
  5253                           ;psect for function _WDT_Clearing
  5254  0002                     _WDT_Clearing:	
  5255                           
  5256                           ;incstack = 0
  5257                           ; Regs used in _WDT_Clearing: []
  5258  0002  0064               	clrwdt	;# 
  5259  0003  0008               	return
  5260  0004                     __end_of_WDT_Clearing:	
  5261                           
  5262                           	psect	text8
  5263  26A9                     __ptext8:	
  5264 ;; *************** function _Temp_Main *****************
  5265 ;; Defined at:
  5266 ;;		line 65 in file "../src/OverTemperature_B1.c"
  5267 ;; Parameters:    Size  Location     Type
  5268 ;;		None
  5269 ;; Auto vars:     Size  Location     Type
  5270 ;;		None
  5271 ;; Return value:  Size  Location     Type
  5272 ;;		None               void
  5273 ;; Registers used:
  5274 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5275 ;; Tracked objects:
  5276 ;;		On entry : 0/0
  5277 ;;		On exit  : 0/0
  5278 ;;		Unchanged: 0/0
  5279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5283 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5284 ;;Total ram usage:        0 bytes
  5285 ;; Hardware stack levels used:    1
  5286 ;; Hardware stack levels required when called:    8
  5287 ;; This function calls:
  5288 ;;		_setTemp_Main
  5289 ;; This function is called by:
  5290 ;;		_main
  5291 ;; This function uses a non-reentrant model
  5292 ;;
  5293                           
  5294                           
  5295                           ;psect for function _Temp_Main
  5296  26A9                     _Temp_Main:	
  5297                           
  5298                           ;OverTemperature_B1.c: 67: setTemp_Main();
  5299                           
  5300                           ;incstack = 0
  5301                           ; Regs used in _Temp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5302  26A9  3184  2482         	fcall	_setTemp_Main
  5303  26AB  0008               	return
  5304  26AC                     __end_of_Temp_Main:	
  5305                           
  5306                           	psect	text9
  5307  0482                     __ptext9:	
  5308 ;; *************** function _setTemp_Main *****************
  5309 ;; Defined at:
  5310 ;;		line 72 in file "../src/OverTemperature_B1.c"
  5311 ;; Parameters:    Size  Location     Type
  5312 ;;		None
  5313 ;; Auto vars:     Size  Location     Type
  5314 ;;  AD              2   77[BANK0 ] int 
  5315 ;;  DangerValue     2   74[BANK0 ] unsigned int 
  5316 ;;  SafeValue       2   72[BANK0 ] unsigned int 
  5317 ;;  TempGO          1   76[BANK0 ] unsigned char 
  5318 ;;  error           1   71[BANK0 ] unsigned char 
  5319 ;; Return value:  Size  Location     Type
  5320 ;;		None               void
  5321 ;; Registers used:
  5322 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5323 ;; Tracked objects:
  5324 ;;		On entry : 0/0
  5325 ;;		On exit  : 0/0
  5326 ;;		Unchanged: 0/0
  5327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5329 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5330 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5331 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5332 ;;Total ram usage:       10 bytes
  5333 ;; Hardware stack levels used:    1
  5334 ;; Hardware stack levels required when called:    7
  5335 ;; This function calls:
  5336 ;;		___lwdiv
  5337 ;;		_getMain_All_Error_Status
  5338 ;;		_getMain_All_LightsStatus
  5339 ;;		_setBuz
  5340 ;;		_setOverTemp_ADV_Restore
  5341 ;;		_setProductData
  5342 ;; This function is called by:
  5343 ;;		_Temp_Main
  5344 ;; This function uses a non-reentrant model
  5345 ;;
  5346                           
  5347                           
  5348                           ;psect for function _setTemp_Main
  5349  0482                     _setTemp_Main:	
  5350                           
  5351                           ;OverTemperature_B1.c: 73: char error = getMain_All_Error_Status(0);
  5352                           
  5353                           ;incstack = 0
  5354                           ; Regs used in _setTemp_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5355  0482  3000               	movlw	0
  5356  0483  3188  2000  3184   	fcall	_getMain_All_Error_Status
  5357  0486  0020               	movlb	0	; select bank0
  5358  0487  00E5               	movwf	??_setTemp_Main
  5359  0488  0865               	movf	??_setTemp_Main,w
  5360  0489  00E7               	movwf	setTemp_Main@error
  5361                           
  5362                           ;OverTemperature_B1.c: 74: ADtype SafeValue = 0, DangerValue = 0;
  5363  048A  01E8               	clrf	setTemp_Main@SafeValue
  5364  048B  01E9               	clrf	setTemp_Main@SafeValue+1
  5365  048C  01EA               	clrf	setTemp_Main@DangerValue
  5366  048D  01EB               	clrf	setTemp_Main@DangerValue+1
  5367                           
  5368                           ;OverTemperature_B1.c: 75: int AD = 0;
  5369  048E  01ED               	clrf	setTemp_Main@AD
  5370  048F  01EE               	clrf	setTemp_Main@AD+1
  5371                           
  5372                           ;OverTemperature_B1.c: 76: char TempGO = getMain_All_LightsStatus();
  5373  0490  3199  2133  3184   	fcall	_getMain_All_LightsStatus
  5374  0493  0020               	movlb	0	; select bank0
  5375  0494  00E5               	movwf	??_setTemp_Main
  5376  0495  0865               	movf	??_setTemp_Main,w
  5377  0496  00EC               	movwf	setTemp_Main@TempGO
  5378                           
  5379                           ;OverTemperature_B1.c: 78: if (Temp.Enable == 1) {
  5380  0497  0022               	movlb	2	; select bank2
  5381  0498  1C60               	btfss	_Temp^(0+256),0
  5382  0499  2D53               	goto	l1809
  5383                           
  5384                           ;OverTemperature_B1.c: 86: if (Temp.ADtoGO == 0) {
  5385  049A  1960               	btfsc	_Temp^(0+256),2
  5386  049B  2CB9               	goto	l8650
  5387                           
  5388                           ;OverTemperature_B1.c: 87: if ((TempGO == 1 && Temp.ERROR == 0) || Temp.ERROR == 1) {
  5389  049C  0020               	movlb	0	; select bank0
  5390  049D  086C               	movf	setTemp_Main@TempGO,w
  5391  049E  3A01               	xorlw	1
  5392  049F  1D03               	skipz
  5393  04A0  2CA4               	goto	l1815
  5394  04A1  0022               	movlb	2	; select bank2
  5395  04A2  1CE0               	btfss	_Temp^(0+256),1
  5396  04A3  2CA7               	goto	l8642
  5397  04A4                     l1815:	
  5398  04A4  0022               	movlb	2	; select bank2
  5399  04A5  1CE0               	btfss	_Temp^(0+256),1
  5400  04A6  2CB6               	goto	l8648
  5401  04A7                     l8642:	
  5402                           
  5403                           ;OverTemperature_B1.c: 88: Temp.Time++;
  5404  04A7  3001               	movlw	1
  5405  04A8  07E1               	addwf	(_Temp^(0+256)+1),f
  5406  04A9  3000               	movlw	0
  5407  04AA  3DE2               	addwfc	((_Temp+1)^(0+256)+1),f
  5408                           
  5409                           ;OverTemperature_B1.c: 89: if (Temp.Time >= (5000 / 20)) {
  5410  04AB  3000               	movlw	0
  5411  04AC  0262               	subwf	((_Temp+1)^(0+256)+1),w
  5412  04AD  30FA               	movlw	250
  5413  04AE  1903               	skipnz
  5414  04AF  0261               	subwf	(_Temp^(0+256)+1),w
  5415  04B0  1C03               	skipc
  5416  04B1  0008               	return
  5417                           
  5418                           ;OverTemperature_B1.c: 90: Temp.Time = 0;
  5419  04B2  01E1               	clrf	(_Temp^(0+256)+1)
  5420  04B3  01E2               	clrf	((_Temp+1)^(0+256)+1)
  5421                           
  5422                           ;OverTemperature_B1.c: 91: Temp.ADtoGO = 1;
  5423  04B4  1560               	bsf	_Temp^(0+256),2
  5424                           
  5425                           ;OverTemperature_B1.c: 92: }
  5426                           ;OverTemperature_B1.c: 93: } else {
  5427  04B5  0008               	return
  5428  04B6                     l8648:	
  5429                           
  5430                           ;OverTemperature_B1.c: 94: Temp.Time = 0;
  5431  04B6  01E1               	clrf	(_Temp^(0+256)+1)
  5432  04B7  01E2               	clrf	((_Temp+1)^(0+256)+1)
  5433                           
  5434                           ;OverTemperature_B1.c: 95: }
  5435                           ;OverTemperature_B1.c: 96: } else {
  5436  04B8  0008               	return
  5437  04B9                     l8650:	
  5438                           
  5439                           ;OverTemperature_B1.c: 97: Temp.Time++;
  5440  04B9  3001               	movlw	1
  5441  04BA  07E1               	addwf	(_Temp^(0+256)+1),f
  5442  04BB  3000               	movlw	0
  5443  04BC  3DE2               	addwfc	((_Temp+1)^(0+256)+1),f
  5444                           
  5445                           ;OverTemperature_B1.c: 98: if (Temp.Time >= (100 / 20)) {
  5446  04BD  3000               	movlw	0
  5447  04BE  0262               	subwf	((_Temp+1)^(0+256)+1),w
  5448  04BF  3005               	movlw	5
  5449  04C0  1903               	skipnz
  5450  04C1  0261               	subwf	(_Temp^(0+256)+1),w
  5451  04C2  1C03               	skipc
  5452  04C3  0008               	return
  5453                           
  5454                           ;OverTemperature_B1.c: 99: Temp.Time = 0;
  5455  04C4  01E1               	clrf	(_Temp^(0+256)+1)
  5456  04C5  01E2               	clrf	((_Temp+1)^(0+256)+1)
  5457                           
  5458                           ;OverTemperature_B1.c: 104: AD = (Temp.ADV[1] + Temp.ADV[2] + Temp.ADV[3]) / 3;
  5459  04C6  3003               	movlw	3
  5460  04C7  0020               	movlb	0	; select bank0
  5461  04C8  00A0               	movwf	___lwdiv@divisor
  5462  04C9  3000               	movlw	0
  5463  04CA  00A1               	movwf	___lwdiv@divisor+1
  5464  04CB  300A               	movlw	10
  5465  04CC  3E60               	addlw	_Temp& (0+255)
  5466  04CD  0086               	movwf	6
  5467  04CE  3001               	movlw	1	; select bank2/3
  5468  04CF  0087               	movwf	7
  5469  04D0  3008               	movlw	8
  5470  04D1  3E60               	addlw	_Temp& (0+255)
  5471  04D2  0084               	movwf	4
  5472  04D3  3001               	movlw	1	; select bank2/3
  5473  04D4  0085               	movwf	5
  5474  04D5  3F00               	moviw [0]fsr0
  5475  04D6  0022               	movlb	2	; select bank2
  5476  04D7  0766               	addwf	(_Temp^(0+256)+6),w
  5477  04D8  0020               	movlb	0	; select bank0
  5478  04D9  00E5               	movwf	??_setTemp_Main
  5479  04DA  3F01               	moviw [1]fsr0
  5480  04DB  0022               	movlb	2	; select bank2
  5481  04DC  3D67               	addwfc	((_Temp+1)^(0+256)+6),w
  5482  04DD  0020               	movlb	0	; select bank0
  5483  04DE  00E6               	movwf	??_setTemp_Main+1
  5484  04DF  3F40               	moviw [0]fsr1
  5485  04E0  0765               	addwf	??_setTemp_Main,w
  5486  04E1  00A2               	movwf	___lwdiv@dividend
  5487  04E2  3F41               	moviw [1]fsr1
  5488  04E3  3D66               	addwfc	??_setTemp_Main+1,w
  5489  04E4  00A3               	movwf	___lwdiv@dividend+1
  5490  04E5  319E  26AA  3184   	fcall	___lwdiv
  5491  04E8  0020               	movlb	0	; select bank0
  5492  04E9  0821               	movf	?___lwdiv+1,w
  5493  04EA  01EE               	clrf	setTemp_Main@AD+1
  5494  04EB  07EE               	addwf	setTemp_Main@AD+1,f
  5495  04EC  0820               	movf	?___lwdiv,w
  5496  04ED  01ED               	clrf	setTemp_Main@AD
  5497  04EE  07ED               	addwf	setTemp_Main@AD,f
  5498                           
  5499                           ;OverTemperature_B1.c: 105: setOverTemp_ADV_Restore();
  5500  04EF  319B  2341  3184   	fcall	_setOverTemp_ADV_Restore
  5501                           
  5502                           ;OverTemperature_B1.c: 106: if (AD > 0) {
  5503  04F2  0020               	movlb	0	; select bank0
  5504  04F3  086E               	movf	setTemp_Main@AD+1,w
  5505  04F4  3A80               	xorlw	128
  5506  04F5  00E5               	movwf	??_setTemp_Main
  5507  04F6  3080               	movlw	128
  5508  04F7  0265               	subwf	??_setTemp_Main,w
  5509  04F8  1D03               	skipz
  5510  04F9  2CFC               	goto	u9015
  5511  04FA  3001               	movlw	1
  5512  04FB  026D               	subwf	setTemp_Main@AD,w
  5513  04FC                     u9015:	
  5514  04FC  1C03               	skipc
  5515  04FD  0008               	return
  5516                           
  5517                           ;OverTemperature_B1.c: 107: Temp.ADtoGO = 0;
  5518  04FE  0022               	movlb	2	; select bank2
  5519  04FF  1160               	bcf	_Temp^(0+256),2
  5520                           
  5521                           ;OverTemperature_B1.c: 123: SafeValue = 420;
  5522  0500  30A4               	movlw	164
  5523  0501  0020               	movlb	0	; select bank0
  5524  0502  00E8               	movwf	setTemp_Main@SafeValue
  5525  0503  3001               	movlw	1
  5526  0504  00E9               	movwf	setTemp_Main@SafeValue+1
  5527                           
  5528                           ;OverTemperature_B1.c: 124: DangerValue = 365;
  5529  0505  306D               	movlw	109
  5530  0506  00EA               	movwf	setTemp_Main@DangerValue
  5531  0507  3001               	movlw	1
  5532  0508  00EB               	movwf	setTemp_Main@DangerValue+1
  5533                           
  5534                           ;OverTemperature_B1.c: 130: if (Temp.ERROR == 1) {
  5535  0509  0022               	movlb	2	; select bank2
  5536  050A  1CE0               	btfss	_Temp^(0+256),1
  5537  050B  2D2A               	goto	l8680
  5538                           
  5539                           ;OverTemperature_B1.c: 131: if (AD >= SafeValue) {
  5540  050C  0020               	movlb	0	; select bank0
  5541  050D  0869               	movf	setTemp_Main@SafeValue+1,w
  5542  050E  026E               	subwf	setTemp_Main@AD+1,w
  5543  050F  1D03               	skipz
  5544  0510  2D13               	goto	u9035
  5545  0511  0868               	movf	setTemp_Main@SafeValue,w
  5546  0512  026D               	subwf	setTemp_Main@AD,w
  5547  0513                     u9035:	
  5548  0513  1C03               	skipc
  5549  0514  2D3F               	goto	l8690
  5550                           
  5551                           ;OverTemperature_B1.c: 132: Temp.Count++;
  5552  0515  3001               	movlw	1
  5553  0516  00E5               	movwf	??_setTemp_Main
  5554  0517  0865               	movf	??_setTemp_Main,w
  5555  0518  0022               	movlb	2	; select bank2
  5556  0519  07E3               	addwf	(_Temp^(0+256)+3),f
  5557                           
  5558                           ;OverTemperature_B1.c: 133: if (Temp.Count >= 3) {
  5559  051A  3003               	movlw	3
  5560  051B  0263               	subwf	(_Temp^(0+256)+3),w
  5561  051C  1C03               	skipc
  5562  051D  2D41               	goto	l8692
  5563                           
  5564                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  5565  051E  01E3               	clrf	(_Temp^(0+256)+3)
  5566                           
  5567                           ;OverTemperature_B1.c: 135: Temp.ERROR = 0;
  5568  051F  10E0               	bcf	_Temp^(0+256),1
  5569                           
  5570                           ;OverTemperature_B1.c: 136: setBuz(2, 100);
  5571  0520  3064               	movlw	100
  5572  0521  0020               	movlb	0	; select bank0
  5573  0522  00A9               	movwf	setBuz@time
  5574  0523  3000               	movlw	0
  5575  0524  00AA               	movwf	setBuz@time+1
  5576  0525  3002               	movlw	2
  5577  0526  3192  22D4  3184   	fcall	_setBuz
  5578                           
  5579                           ;OverTemperature_B1.c: 137: }
  5580                           ;OverTemperature_B1.c: 138: } else {
  5581  0529  2D41               	goto	l8692
  5582  052A                     l8680:	
  5583                           ;OverTemperature_B1.c: 140: }
  5584                           ;OverTemperature_B1.c: 141: } else {
  5585                           
  5586                           ;OverTemperature_B1.c: 139: Temp.Count = 0;
  5587                           
  5588                           
  5589                           ;OverTemperature_B1.c: 142: if (AD <= DangerValue) {
  5590  052A  0020               	movlb	0	; select bank0
  5591  052B  086E               	movf	setTemp_Main@AD+1,w
  5592  052C  026B               	subwf	setTemp_Main@DangerValue+1,w
  5593  052D  1D03               	skipz
  5594  052E  2D31               	goto	u9055
  5595  052F  086D               	movf	setTemp_Main@AD,w
  5596  0530  026A               	subwf	setTemp_Main@DangerValue,w
  5597  0531                     u9055:	
  5598  0531  1C03               	skipc
  5599  0532  2D3F               	goto	l8690
  5600                           
  5601                           ;OverTemperature_B1.c: 143: Temp.Count++;
  5602  0533  3001               	movlw	1
  5603  0534  00E5               	movwf	??_setTemp_Main
  5604  0535  0865               	movf	??_setTemp_Main,w
  5605  0536  0022               	movlb	2	; select bank2
  5606  0537  07E3               	addwf	(_Temp^(0+256)+3),f
  5607                           
  5608                           ;OverTemperature_B1.c: 144: if (Temp.Count >= 3) {
  5609  0538  3003               	movlw	3
  5610  0539  0263               	subwf	(_Temp^(0+256)+3),w
  5611  053A  1C03               	skipc
  5612  053B  2D41               	goto	l8692
  5613                           
  5614                           ;OverTemperature_B1.c: 145: Temp.Count = 0;
  5615  053C  01E3               	clrf	(_Temp^(0+256)+3)
  5616                           
  5617                           ;OverTemperature_B1.c: 146: Temp.ERROR = 1;
  5618  053D  14E0               	bsf	_Temp^(0+256),1
  5619                           
  5620                           ;OverTemperature_B1.c: 147: }
  5621                           ;OverTemperature_B1.c: 148: } else {
  5622  053E  2D41               	goto	l8692
  5623  053F                     l8690:	
  5624                           
  5625                           ;OverTemperature_B1.c: 149: Temp.Count = 0;
  5626  053F  0022               	movlb	2	; select bank2
  5627  0540  01E3               	clrf	(_Temp^(0+256)+3)
  5628  0541                     l8692:	
  5629                           
  5630                           ;OverTemperature_B1.c: 150: }
  5631                           ;OverTemperature_B1.c: 151: }
  5632                           ;OverTemperature_B1.c: 152: setProductData(24, AD >> 8);
  5633  0541  0020               	movlb	0	; select bank0
  5634  0542  086E               	movf	setTemp_Main@AD+1,w
  5635  0543  00E5               	movwf	??_setTemp_Main
  5636  0544  0865               	movf	??_setTemp_Main,w
  5637  0545  00E2               	movwf	setProductData@value
  5638  0546  3018               	movlw	24
  5639  0547  31A7  2758  3184   	fcall	_setProductData
  5640                           
  5641                           ;OverTemperature_B1.c: 153: setProductData(25, AD);
  5642  054A  0020               	movlb	0	; select bank0
  5643  054B  086D               	movf	setTemp_Main@AD,w
  5644  054C  00E5               	movwf	??_setTemp_Main
  5645  054D  0865               	movf	??_setTemp_Main,w
  5646  054E  00E2               	movwf	setProductData@value
  5647  054F  3019               	movlw	25
  5648  0550  31A7  2758         	fcall	_setProductData
  5649                           
  5650                           ;OverTemperature_B1.c: 169: }
  5651                           ;OverTemperature_B1.c: 170: }
  5652                           ;OverTemperature_B1.c: 171: }
  5653                           ;OverTemperature_B1.c: 174: } else {
  5654  0552  0008               	return
  5655  0553                     l1809:	
  5656                           
  5657                           ;OverTemperature_B1.c: 175: if (myMain.PowerON == 1) {
  5658  0553  0021               	movlb	1	; select bank1
  5659  0554  1C2F               	btfss	_myMain^(0+128),0
  5660  0555  0008               	return
  5661                           
  5662                           ;OverTemperature_B1.c: 176: Temp.Enable = 1;
  5663  0556  0022               	movlb	2	; select bank2
  5664  0557  1460               	bsf	_Temp^(0+256),0
  5665  0558  0008               	return
  5666  0559                     __end_of_setTemp_Main:	
  5667                           
  5668                           	psect	text10
  5669  1B41                     __ptext10:	
  5670 ;; *************** function _setOverTemp_ADV_Restore *****************
  5671 ;; Defined at:
  5672 ;;		line 182 in file "../src/OverTemperature_B1.c"
  5673 ;; Parameters:    Size  Location     Type
  5674 ;;		None
  5675 ;; Auto vars:     Size  Location     Type
  5676 ;;  i               2    1[BANK0 ] int 
  5677 ;; Return value:  Size  Location     Type
  5678 ;;		None               void
  5679 ;; Registers used:
  5680 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5681 ;; Tracked objects:
  5682 ;;		On entry : 0/0
  5683 ;;		On exit  : 0/0
  5684 ;;		Unchanged: 0/0
  5685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5687 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5688 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5689 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5690 ;;Total ram usage:        3 bytes
  5691 ;; Hardware stack levels used:    1
  5692 ;; Hardware stack levels required when called:    5
  5693 ;; This function calls:
  5694 ;;		Nothing
  5695 ;; This function is called by:
  5696 ;;		_setTemp_Main
  5697 ;; This function uses a non-reentrant model
  5698 ;;
  5699                           
  5700                           
  5701                           ;psect for function _setOverTemp_ADV_Restore
  5702  1B41                     _setOverTemp_ADV_Restore:	
  5703                           
  5704                           ;OverTemperature_B1.c: 183: for (int i = 0; i < 5; i++) {
  5705                           
  5706                           ;incstack = 0
  5707                           ; Regs used in _setOverTemp_ADV_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
  5708  1B41  0020               	movlb	0	; select bank0
  5709  1B42  01A1               	clrf	setOverTemp_ADV_Restore@i
  5710  1B43  01A2               	clrf	setOverTemp_ADV_Restore@i+1
  5711  1B44                     L2:	
  5712  1B44  0822               	movf	setOverTemp_ADV_Restore@i+1,w
  5713  1B45  3A80               	xorlw	128
  5714  1B46  00A0               	movwf	??_setOverTemp_ADV_Restore
  5715  1B47  3080               	movlw	128
  5716  1B48  0220               	subwf	??_setOverTemp_ADV_Restore,w
  5717  1B49  1D03               	skipz
  5718  1B4A  2B4D               	goto	u7635
  5719  1B4B  3005               	movlw	5
  5720  1B4C  0221               	subwf	setOverTemp_ADV_Restore@i,w
  5721  1B4D                     u7635:	
  5722  1B4D  1803               	btfsc	3,0
  5723  1B4E  0008               	return
  5724                           
  5725                           ;OverTemperature_B1.c: 184: Temp.ADV[i] = 0;
  5726  1B4F  0020               	movlb	0	; select bank0
  5727  1B50  3521               	lslf	setOverTemp_ADV_Restore@i,w
  5728  1B51  3E64               	addlw	(_Temp+4)& (0+255)
  5729  1B52  0086               	movwf	6
  5730  1B53  3001               	movlw	1	; select bank2/3
  5731  1B54  0087               	movwf	7
  5732  1B55  3000               	movlw	0
  5733  1B56  3FC0               	movwi [0]fsr1
  5734  1B57  3FC1               	movwi [1]fsr1
  5735  1B58  3001               	movlw	1
  5736  1B59  07A1               	addwf	setOverTemp_ADV_Restore@i,f
  5737  1B5A  3000               	movlw	0
  5738  1B5B  3DA2               	addwfc	setOverTemp_ADV_Restore@i+1,f
  5739  1B5C  2B44               	goto	L2
  5740  1B5D                     __end_of_setOverTemp_ADV_Restore:	
  5741                           
  5742                           	psect	text11
  5743  26A6                     __ptext11:	
  5744 ;; *************** function _Temp_Initialization *****************
  5745 ;; Defined at:
  5746 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5747 ;; Parameters:    Size  Location     Type
  5748 ;;		None
  5749 ;; Auto vars:     Size  Location     Type
  5750 ;;		None
  5751 ;; Return value:  Size  Location     Type
  5752 ;;		None               void
  5753 ;; Registers used:
  5754 ;;		status,2, status,0, pclath, cstack
  5755 ;; Tracked objects:
  5756 ;;		On entry : 0/0
  5757 ;;		On exit  : 0/0
  5758 ;;		Unchanged: 0/0
  5759 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5763 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5764 ;;Total ram usage:        0 bytes
  5765 ;; Hardware stack levels used:    1
  5766 ;; Hardware stack levels required when called:    6
  5767 ;; This function calls:
  5768 ;;		_setTemp_Initialization
  5769 ;; This function is called by:
  5770 ;;		_main
  5771 ;; This function uses a non-reentrant model
  5772 ;;
  5773                           
  5774                           
  5775                           ;psect for function _Temp_Initialization
  5776  26A6                     _Temp_Initialization:	
  5777                           
  5778                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5779                           
  5780                           ;incstack = 0
  5781                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5782  26A6  3187  27FF         	fcall	_setTemp_Initialization
  5783  26A8  0008               	return
  5784  26A9                     __end_of_Temp_Initialization:	
  5785                           
  5786                           	psect	text12
  5787  07FF                     __ptext12:	
  5788 ;; *************** function _setTemp_Initialization *****************
  5789 ;; Defined at:
  5790 ;;		line 60 in file "../src/OverTemperature_B1.c"
  5791 ;; Parameters:    Size  Location     Type
  5792 ;;		None
  5793 ;; Auto vars:     Size  Location     Type
  5794 ;;		None
  5795 ;; Return value:  Size  Location     Type
  5796 ;;		None               void
  5797 ;; Registers used:
  5798 ;;		None
  5799 ;; Tracked objects:
  5800 ;;		On entry : 0/0
  5801 ;;		On exit  : 0/0
  5802 ;;		Unchanged: 0/0
  5803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5807 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5808 ;;Total ram usage:        0 bytes
  5809 ;; Hardware stack levels used:    1
  5810 ;; Hardware stack levels required when called:    5
  5811 ;; This function calls:
  5812 ;;		Nothing
  5813 ;; This function is called by:
  5814 ;;		_Temp_Initialization
  5815 ;; This function uses a non-reentrant model
  5816 ;;
  5817                           
  5818                           
  5819                           ;psect for function _setTemp_Initialization
  5820  07FF                     _setTemp_Initialization:	
  5821                           
  5822                           ;incstack = 0
  5823                           ; Regs used in _setTemp_Initialization: []
  5824  07FF  0008               	return
  5825  0800                     __end_of_setTemp_Initialization:	
  5826                           
  5827                           	psect	text13
  5828  2741                     __ptext13:	
  5829 ;; *************** function _Switch_Main *****************
  5830 ;; Defined at:
  5831 ;;		line 76 in file "../src/Switch_B1.c"
  5832 ;; Parameters:    Size  Location     Type
  5833 ;;		None
  5834 ;; Auto vars:     Size  Location     Type
  5835 ;;		None
  5836 ;; Return value:  Size  Location     Type
  5837 ;;		None               void
  5838 ;; Registers used:
  5839 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5840 ;; Tracked objects:
  5841 ;;		On entry : 0/0
  5842 ;;		On exit  : 0/0
  5843 ;;		Unchanged: 0/0
  5844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5846 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5848 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5849 ;;Total ram usage:        0 bytes
  5850 ;; Hardware stack levels used:    1
  5851 ;; Hardware stack levels required when called:    9
  5852 ;; This function calls:
  5853 ;;		_TouchPower
  5854 ;;		_setSw_Main
  5855 ;; This function is called by:
  5856 ;;		_main
  5857 ;; This function uses a non-reentrant model
  5858 ;;
  5859                           
  5860                           
  5861                           ;psect for function _Switch_Main
  5862  2741                     _Switch_Main:	
  5863                           
  5864                           ;Switch_B1.c: 79: setSw_Main(1);
  5865                           
  5866                           ;incstack = 0
  5867                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5868  2741  3001               	movlw	1
  5869  2742  3182  2205  31A7   	fcall	_setSw_Main
  5870                           
  5871                           ;Switch_B1.c: 83: setSw_Main(2);
  5872  2745  3002               	movlw	2
  5873  2746  3182  2205  31A7   	fcall	_setSw_Main
  5874                           
  5875                           ;Switch_B1.c: 91: TouchPower();
  5876  2749  3199  21D2         	fcall	_TouchPower
  5877  274B  0008               	return
  5878  274C                     __end_of_Switch_Main:	
  5879                           
  5880                           	psect	text14
  5881  0205                     __ptext14:	
  5882 ;; *************** function _setSw_Main *****************
  5883 ;; Defined at:
  5884 ;;		line 117 in file "../src/Switch_B1.c"
  5885 ;; Parameters:    Size  Location     Type
  5886 ;;  sw              1    wreg     unsigned char 
  5887 ;; Auto vars:     Size  Location     Type
  5888 ;;  sw              1   21[BANK0 ] unsigned char 
  5889 ;; Return value:  Size  Location     Type
  5890 ;;		None               void
  5891 ;; Registers used:
  5892 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5893 ;; Tracked objects:
  5894 ;;		On entry : 0/0
  5895 ;;		On exit  : 0/0
  5896 ;;		Unchanged: 0/0
  5897 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5898 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5899 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5900 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5901 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5902 ;;Total ram usage:        3 bytes
  5903 ;; Hardware stack levels used:    1
  5904 ;; Hardware stack levels required when called:    8
  5905 ;; This function calls:
  5906 ;;		_SwPointSelect
  5907 ;;		_getMain_All_Error_Status
  5908 ;;		_getSw_KeyStatus
  5909 ;;		_setBuz
  5910 ;;		_setDimmerLights_DimmingOn
  5911 ;;		_setDimmerLights_SwOff
  5912 ;;		_setDimmerLights_SwOn
  5913 ;;		_setRF_Learn
  5914 ;; This function is called by:
  5915 ;;		_Switch_Main
  5916 ;; This function uses a non-reentrant model
  5917 ;;
  5918                           
  5919                           
  5920                           ;psect for function _setSw_Main
  5921  0205                     _setSw_Main:	
  5922                           
  5923                           ;incstack = 0
  5924                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5925                           ;setSw_Main@sw stored from wreg
  5926  0205  0020               	movlb	0	; select bank0
  5927  0206  00B5               	movwf	setSw_Main@sw
  5928                           
  5929                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5930  0207  0835               	movf	setSw_Main@sw,w
  5931  0208  319A  2259  3182   	fcall	_SwPointSelect
  5932                           
  5933                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5934  020B  0021               	movlb	1	; select bank1
  5935  020C  0854               	movf	_Sw^(0+128),w
  5936  020D  0086               	movwf	6
  5937  020E  0855               	movf	(_Sw+1)^(0+128),w
  5938  020F  0087               	movwf	7
  5939  0210  1C01               	btfss	1,0
  5940  0211  2B84               	goto	l2621
  5941                           
  5942                           ;Switch_B1.c: 121: if (getMain_All_Error_Status(0) == 0) {
  5943  0212  3000               	movlw	0
  5944  0213  3188  2000  3182   	fcall	_getMain_All_Error_Status
  5945  0216  3800               	iorlw	0
  5946  0217  1D03               	skipz
  5947  0218  2A38               	goto	l8804
  5948                           
  5949                           ;Switch_B1.c: 122: Sw->Detect = 0;
  5950  0219  0021               	movlb	1	; select bank1
  5951  021A  0854               	movf	_Sw^(0+128),w
  5952  021B  0086               	movwf	6
  5953  021C  0855               	movf	(_Sw+1)^(0+128),w
  5954  021D  0087               	movwf	7
  5955  021E  3141               	addfsr 1,1
  5956  021F  1081               	bcf	1,1
  5957                           
  5958                           ;Switch_B1.c: 123: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5959  0220  0020               	movlb	0	; select bank0
  5960  0221  0835               	movf	setSw_Main@sw,w
  5961  0222  319B  23D5  3182   	fcall	_getSw_KeyStatus
  5962  0225  3A01               	xorlw	1
  5963  0226  3000               	movlw	0
  5964  0227  1903               	skipnz
  5965  0228  3001               	movlw	1
  5966  0229  0020               	movlb	0	; select bank0
  5967  022A  00B3               	movwf	??_setSw_Main
  5968  022B  0021               	movlb	1	; select bank1
  5969  022C  0854               	movf	_Sw^(0+128),w
  5970  022D  0086               	movwf	6
  5971  022E  0855               	movf	(_Sw+1)^(0+128),w
  5972  022F  0087               	movwf	7
  5973  0230  0020               	movlb	0	; select bank0
  5974  0231  0DB3               	rlf	??_setSw_Main,f
  5975  0232  0801               	movf	1,w
  5976  0233  0633               	xorwf	??_setSw_Main,w
  5977  0234  39FD               	andlw	-3
  5978  0235  0633               	xorwf	??_setSw_Main,w
  5979  0236  0081               	movwf	1
  5980                           
  5981                           ;Switch_B1.c: 124: } else {
  5982  0237  2A50               	goto	l2623
  5983  0238                     l8804:	
  5984                           
  5985                           ;Switch_B1.c: 125: if (Sw->Detect == 0) {
  5986  0238  0021               	movlb	1	; select bank1
  5987  0239  0854               	movf	_Sw^(0+128),w
  5988  023A  0086               	movwf	6
  5989  023B  0855               	movf	(_Sw+1)^(0+128),w
  5990  023C  0087               	movwf	7
  5991  023D  3141               	addfsr 1,1
  5992  023E  1881               	btfsc	1,1
  5993  023F  2A50               	goto	l2623
  5994                           
  5995                           ;Switch_B1.c: 126: Sw->Detect = 1;
  5996  0240  0854               	movf	_Sw^(0+128),w
  5997  0241  0086               	movwf	6
  5998  0242  0855               	movf	(_Sw+1)^(0+128),w
  5999  0243  0087               	movwf	7
  6000  0244  3141               	addfsr 1,1
  6001  0245  1481               	bsf	1,1
  6002                           
  6003                           ;Switch_B1.c: 128: Sw->Touch = 0;
  6004  0246  0854               	movf	_Sw^(0+128),w
  6005  0247  0086               	movwf	6
  6006  0248  0855               	movf	(_Sw+1)^(0+128),w
  6007  0249  0087               	movwf	7
  6008  024A  1081               	bcf	1,1
  6009                           
  6010                           ;Switch_B1.c: 129: Sw->Debounce = 1;
  6011  024B  0854               	movf	_Sw^(0+128),w
  6012  024C  0086               	movwf	6
  6013  024D  0855               	movf	(_Sw+1)^(0+128),w
  6014  024E  0087               	movwf	7
  6015  024F  1501               	bsf	1,2
  6016  0250                     l2623:	
  6017                           
  6018                           ;Switch_B1.c: 130: }
  6019                           ;Switch_B1.c: 131: }
  6020                           ;Switch_B1.c: 133: if (Sw->Touch == 1) {
  6021  0250  0021               	movlb	1	; select bank1
  6022  0251  0854               	movf	_Sw^(0+128),w
  6023  0252  0086               	movwf	6
  6024  0253  0855               	movf	(_Sw+1)^(0+128),w
  6025  0254  0087               	movwf	7
  6026  0255  1C81               	btfss	1,1
  6027  0256  2B2C               	goto	l8854
  6028                           
  6029                           ;Switch_B1.c: 134: if (Sw->Debounce == 0) {
  6030  0257  0854               	movf	_Sw^(0+128),w
  6031  0258  0086               	movwf	6
  6032  0259  0855               	movf	(_Sw+1)^(0+128),w
  6033  025A  0087               	movwf	7
  6034  025B  1901               	btfsc	1,2
  6035  025C  2A83               	goto	l8820
  6036                           
  6037                           ;Switch_B1.c: 135: Sw->DebounceTime++;
  6038  025D  3001               	movlw	1
  6039  025E  0020               	movlb	0	; select bank0
  6040  025F  00B3               	movwf	??_setSw_Main
  6041  0260  0021               	movlb	1	; select bank1
  6042  0261  0854               	movf	_Sw^(0+128),w
  6043  0262  0086               	movwf	6
  6044  0263  0855               	movf	(_Sw+1)^(0+128),w
  6045  0264  0087               	movwf	7
  6046  0265  3142               	addfsr 1,2
  6047  0266  0020               	movlb	0	; select bank0
  6048  0267  0833               	movf	??_setSw_Main,w
  6049  0268  0781               	addwf	1,f
  6050                           
  6051                           ;Switch_B1.c: 136: if (Sw->DebounceTime >= (60 / 20)) {
  6052  0269  0021               	movlb	1	; select bank1
  6053  026A  0854               	movf	_Sw^(0+128),w
  6054  026B  0086               	movwf	6
  6055  026C  0855               	movf	(_Sw+1)^(0+128),w
  6056  026D  0087               	movwf	7
  6057  026E  3142               	addfsr 1,2
  6058  026F  3003               	movlw	3
  6059  0270  0201               	subwf	1,w
  6060  0271  1C03               	skipc
  6061  0272  0008               	return
  6062                           
  6063                           ;Switch_B1.c: 137: Sw->DebounceTime = 0;
  6064  0273  0854               	movf	_Sw^(0+128),w
  6065  0274  0086               	movwf	6
  6066  0275  0855               	movf	(_Sw+1)^(0+128),w
  6067  0276  0087               	movwf	7
  6068  0277  3142               	addfsr 1,2
  6069  0278  0181               	clrf	1
  6070                           
  6071                           ;Switch_B1.c: 138: Sw->Debounce = 1;
  6072  0279  0854               	movf	_Sw^(0+128),w
  6073  027A  0086               	movwf	6
  6074  027B  0855               	movf	(_Sw+1)^(0+128),w
  6075  027C  0087               	movwf	7
  6076  027D  1501               	bsf	1,2
  6077                           
  6078                           ;Switch_B1.c: 144: setDimmerLights_SwOn(sw);
  6079  027E  0020               	movlb	0	; select bank0
  6080  027F  0835               	movf	setSw_Main@sw,w
  6081  0280  3188  2033         	fcall	_setDimmerLights_SwOn
  6082                           
  6083                           ;Switch_B1.c: 147: }
  6084                           ;Switch_B1.c: 148: } else {
  6085  0282  0008               	return
  6086  0283                     l8820:	
  6087                           
  6088                           ;Switch_B1.c: 149: if (Sw->Hold1 == 0) {
  6089  0283  0021               	movlb	1	; select bank1
  6090  0284  0854               	movf	_Sw^(0+128),w
  6091  0285  0086               	movwf	6
  6092  0286  0855               	movf	(_Sw+1)^(0+128),w
  6093  0287  0087               	movwf	7
  6094  0288  1981               	btfsc	1,3
  6095  0289  2AB8               	goto	l8830
  6096                           
  6097                           ;Switch_B1.c: 150: Sw->Hold1Time++;
  6098  028A  0854               	movf	_Sw^(0+128),w
  6099  028B  0086               	movwf	6
  6100  028C  0855               	movf	(_Sw+1)^(0+128),w
  6101  028D  0087               	movwf	7
  6102  028E  3143               	addfsr 1,3
  6103  028F  3001               	movlw	1
  6104  0290  0781               	addwf	1,f
  6105  0291  3141               	addfsr 1,1
  6106  0292  1803               	skipnc
  6107  0293  0A81               	incf	1,f
  6108                           
  6109                           ;Switch_B1.c: 151: if (Sw->Hold1Time >= (1500 / 20)) {
  6110  0294  0854               	movf	_Sw^(0+128),w
  6111  0295  0086               	movwf	6
  6112  0296  0855               	movf	(_Sw+1)^(0+128),w
  6113  0297  0087               	movwf	7
  6114  0298  3143               	addfsr 1,3
  6115  0299  3F40               	moviw [0]fsr1
  6116  029A  0020               	movlb	0	; select bank0
  6117  029B  00B3               	movwf	??_setSw_Main
  6118  029C  3F41               	moviw [1]fsr1
  6119  029D  00B4               	movwf	??_setSw_Main+1
  6120  029E  3000               	movlw	0
  6121  029F  0234               	subwf	??_setSw_Main+1,w
  6122  02A0  304B               	movlw	75
  6123  02A1  1903               	skipnz
  6124  02A2  0233               	subwf	??_setSw_Main,w
  6125  02A3  1C03               	skipc
  6126  02A4  0008               	return
  6127                           
  6128                           ;Switch_B1.c: 152: Sw->Hold1Time = 0;
  6129  02A5  0021               	movlb	1	; select bank1
  6130  02A6  0854               	movf	_Sw^(0+128),w
  6131  02A7  0086               	movwf	6
  6132  02A8  0855               	movf	(_Sw+1)^(0+128),w
  6133  02A9  0087               	movwf	7
  6134  02AA  3143               	addfsr 1,3
  6135  02AB  3000               	movlw	0
  6136  02AC  3FC0               	movwi [0]fsr1
  6137  02AD  3FC1               	movwi [1]fsr1
  6138                           
  6139                           ;Switch_B1.c: 153: Sw->Hold1 = 1;
  6140  02AE  0854               	movf	_Sw^(0+128),w
  6141  02AF  0086               	movwf	6
  6142  02B0  0855               	movf	(_Sw+1)^(0+128),w
  6143  02B1  0087               	movwf	7
  6144  02B2  1581               	bsf	1,3
  6145                           
  6146                           ;Switch_B1.c: 159: setDimmerLights_DimmingOn(sw);
  6147  02B3  0020               	movlb	0	; select bank0
  6148  02B4  0835               	movf	setSw_Main@sw,w
  6149  02B5  319D  256C         	fcall	_setDimmerLights_DimmingOn
  6150                           
  6151                           ;Switch_B1.c: 162: }
  6152                           ;Switch_B1.c: 163: } else {
  6153  02B7  0008               	return
  6154  02B8                     l8830:	
  6155                           
  6156                           ;Switch_B1.c: 165: if (Sw->Hold2 == 0) {
  6157  02B8  0021               	movlb	1	; select bank1
  6158  02B9  0854               	movf	_Sw^(0+128),w
  6159  02BA  0086               	movwf	6
  6160  02BB  0855               	movf	(_Sw+1)^(0+128),w
  6161  02BC  0087               	movwf	7
  6162  02BD  1A01               	btfsc	1,4
  6163  02BE  2AF8               	goto	l8844
  6164                           
  6165                           ;Switch_B1.c: 166: Sw->Hold2Time++;
  6166  02BF  0854               	movf	_Sw^(0+128),w
  6167  02C0  0086               	movwf	6
  6168  02C1  0855               	movf	(_Sw+1)^(0+128),w
  6169  02C2  0087               	movwf	7
  6170  02C3  3145               	addfsr 1,5
  6171  02C4  3001               	movlw	1
  6172  02C5  0781               	addwf	1,f
  6173  02C6  3141               	addfsr 1,1
  6174  02C7  1803               	skipnc
  6175  02C8  0A81               	incf	1,f
  6176                           
  6177                           ;Switch_B1.c: 167: if (Sw->Hold2Time >= (1500 / 20)) {
  6178  02C9  0854               	movf	_Sw^(0+128),w
  6179  02CA  0086               	movwf	6
  6180  02CB  0855               	movf	(_Sw+1)^(0+128),w
  6181  02CC  0087               	movwf	7
  6182  02CD  3145               	addfsr 1,5
  6183  02CE  3F40               	moviw [0]fsr1
  6184  02CF  0020               	movlb	0	; select bank0
  6185  02D0  00B3               	movwf	??_setSw_Main
  6186  02D1  3F41               	moviw [1]fsr1
  6187  02D2  00B4               	movwf	??_setSw_Main+1
  6188  02D3  3000               	movlw	0
  6189  02D4  0234               	subwf	??_setSw_Main+1,w
  6190  02D5  304B               	movlw	75
  6191  02D6  1903               	skipnz
  6192  02D7  0233               	subwf	??_setSw_Main,w
  6193  02D8  1C03               	skipc
  6194  02D9  0008               	return
  6195                           
  6196                           ;Switch_B1.c: 168: Sw->Hold2Time = 0;
  6197  02DA  0021               	movlb	1	; select bank1
  6198  02DB  0854               	movf	_Sw^(0+128),w
  6199  02DC  0086               	movwf	6
  6200  02DD  0855               	movf	(_Sw+1)^(0+128),w
  6201  02DE  0087               	movwf	7
  6202  02DF  3145               	addfsr 1,5
  6203  02E0  3000               	movlw	0
  6204  02E1  3FC0               	movwi [0]fsr1
  6205  02E2  3FC1               	movwi [1]fsr1
  6206                           
  6207                           ;Switch_B1.c: 169: Sw->Hold2 = 1;
  6208  02E3  0854               	movf	_Sw^(0+128),w
  6209  02E4  0086               	movwf	6
  6210  02E5  0855               	movf	(_Sw+1)^(0+128),w
  6211  02E6  0087               	movwf	7
  6212  02E7  1601               	bsf	1,4
  6213                           
  6214                           ;Switch_B1.c: 172: setRF_Learn(1);
  6215  02E8  3001               	movlw	1
  6216  02E9  3199  217F  3182   	fcall	_setRF_Learn
  6217                           
  6218                           ;Switch_B1.c: 173: if (myMain.First == 1) {
  6219  02EC  0021               	movlb	1	; select bank1
  6220  02ED  1EAF               	btfss	_myMain^(0+128),5
  6221  02EE  0008               	return
  6222                           
  6223                           ;Switch_B1.c: 174: setBuz(2, 100);
  6224  02EF  3064               	movlw	100
  6225  02F0  0020               	movlb	0	; select bank0
  6226  02F1  00A9               	movwf	setBuz@time
  6227  02F2  3000               	movlw	0
  6228  02F3  00AA               	movwf	setBuz@time+1
  6229  02F4  3002               	movlw	2
  6230  02F5  3192  22D4         	fcall	_setBuz
  6231                           
  6232                           ;Switch_B1.c: 175: }
  6233                           ;Switch_B1.c: 179: }
  6234                           ;Switch_B1.c: 180: } else {
  6235  02F7  0008               	return
  6236  02F8                     l8844:	
  6237                           
  6238                           ;Switch_B1.c: 181: if (Sw->Hold3 == 0) {
  6239  02F8  0021               	movlb	1	; select bank1
  6240  02F9  0854               	movf	_Sw^(0+128),w
  6241  02FA  0086               	movwf	6
  6242  02FB  0855               	movf	(_Sw+1)^(0+128),w
  6243  02FC  0087               	movwf	7
  6244  02FD  1A81               	btfsc	1,5
  6245  02FE  0008               	return
  6246                           
  6247                           ;Switch_B1.c: 182: Sw->Hold3Time++;
  6248  02FF  0854               	movf	_Sw^(0+128),w
  6249  0300  0086               	movwf	6
  6250  0301  0855               	movf	(_Sw+1)^(0+128),w
  6251  0302  0087               	movwf	7
  6252  0303  3147               	addfsr 1,7
  6253  0304  3001               	movlw	1
  6254  0305  0781               	addwf	1,f
  6255  0306  3141               	addfsr 1,1
  6256  0307  1803               	skipnc
  6257  0308  0A81               	incf	1,f
  6258                           
  6259                           ;Switch_B1.c: 183: if (Sw->Hold3Time >= (3000 / 20)) {
  6260  0309  0854               	movf	_Sw^(0+128),w
  6261  030A  0086               	movwf	6
  6262  030B  0855               	movf	(_Sw+1)^(0+128),w
  6263  030C  0087               	movwf	7
  6264  030D  3147               	addfsr 1,7
  6265  030E  3F40               	moviw [0]fsr1
  6266  030F  0020               	movlb	0	; select bank0
  6267  0310  00B3               	movwf	??_setSw_Main
  6268  0311  3F41               	moviw [1]fsr1
  6269  0312  00B4               	movwf	??_setSw_Main+1
  6270  0313  3000               	movlw	0
  6271  0314  0234               	subwf	??_setSw_Main+1,w
  6272  0315  3096               	movlw	150
  6273  0316  1903               	skipnz
  6274  0317  0233               	subwf	??_setSw_Main,w
  6275  0318  1C03               	skipc
  6276  0319  0008               	return
  6277                           
  6278                           ;Switch_B1.c: 184: Sw->Hold3Time = 0;
  6279  031A  0021               	movlb	1	; select bank1
  6280  031B  0854               	movf	_Sw^(0+128),w
  6281  031C  0086               	movwf	6
  6282  031D  0855               	movf	(_Sw+1)^(0+128),w
  6283  031E  0087               	movwf	7
  6284  031F  3147               	addfsr 1,7
  6285  0320  3000               	movlw	0
  6286  0321  3FC0               	movwi [0]fsr1
  6287  0322  3FC1               	movwi [1]fsr1
  6288                           
  6289                           ;Switch_B1.c: 185: Sw->Hold3 = 1;
  6290  0323  0854               	movf	_Sw^(0+128),w
  6291  0324  0086               	movwf	6
  6292  0325  0855               	movf	(_Sw+1)^(0+128),w
  6293  0326  0087               	movwf	7
  6294  0327  1681               	bsf	1,5
  6295                           
  6296                           ;Switch_B1.c: 188: setRF_Learn(0);
  6297  0328  3000               	movlw	0
  6298  0329  3199  217F         	fcall	_setRF_Learn
  6299                           
  6300                           ;Switch_B1.c: 191: }
  6301                           ;Switch_B1.c: 192: }
  6302                           ;Switch_B1.c: 193: }
  6303                           ;Switch_B1.c: 195: }
  6304                           ;Switch_B1.c: 196: }
  6305                           ;Switch_B1.c: 197: } else {
  6306  032B  0008               	return
  6307  032C                     l8854:	
  6308                           
  6309                           ;Switch_B1.c: 198: if (Sw->Debounce == 1) {
  6310  032C  0021               	movlb	1	; select bank1
  6311  032D  0854               	movf	_Sw^(0+128),w
  6312  032E  0086               	movwf	6
  6313  032F  0855               	movf	(_Sw+1)^(0+128),w
  6314  0330  0087               	movwf	7
  6315  0331  1D01               	btfss	1,2
  6316  0332  0008               	return
  6317                           
  6318                           ;Switch_B1.c: 199: Sw->DebounceTime++;
  6319  0333  3001               	movlw	1
  6320  0334  0020               	movlb	0	; select bank0
  6321  0335  00B3               	movwf	??_setSw_Main
  6322  0336  0021               	movlb	1	; select bank1
  6323  0337  0854               	movf	_Sw^(0+128),w
  6324  0338  0086               	movwf	6
  6325  0339  0855               	movf	(_Sw+1)^(0+128),w
  6326  033A  0087               	movwf	7
  6327  033B  3142               	addfsr 1,2
  6328  033C  0020               	movlb	0	; select bank0
  6329  033D  0833               	movf	??_setSw_Main,w
  6330  033E  0781               	addwf	1,f
  6331                           
  6332                           ;Switch_B1.c: 200: if (Sw->DebounceTime >= (60 / 20)) {
  6333  033F  0021               	movlb	1	; select bank1
  6334  0340  0854               	movf	_Sw^(0+128),w
  6335  0341  0086               	movwf	6
  6336  0342  0855               	movf	(_Sw+1)^(0+128),w
  6337  0343  0087               	movwf	7
  6338  0344  3142               	addfsr 1,2
  6339  0345  3003               	movlw	3
  6340  0346  0201               	subwf	1,w
  6341  0347  1C03               	skipc
  6342  0348  0008               	return
  6343                           
  6344                           ;Switch_B1.c: 201: Sw->DebounceTime = 0;
  6345  0349  0854               	movf	_Sw^(0+128),w
  6346  034A  0086               	movwf	6
  6347  034B  0855               	movf	(_Sw+1)^(0+128),w
  6348  034C  0087               	movwf	7
  6349  034D  3142               	addfsr 1,2
  6350  034E  0181               	clrf	1
  6351                           
  6352                           ;Switch_B1.c: 202: Sw->Debounce = 0;
  6353  034F  0854               	movf	_Sw^(0+128),w
  6354  0350  0086               	movwf	6
  6355  0351  0855               	movf	(_Sw+1)^(0+128),w
  6356  0352  0087               	movwf	7
  6357  0353  1101               	bcf	1,2
  6358                           
  6359                           ;Switch_B1.c: 203: Sw->Hold1Time = 0;
  6360  0354  0854               	movf	_Sw^(0+128),w
  6361  0355  0086               	movwf	6
  6362  0356  0855               	movf	(_Sw+1)^(0+128),w
  6363  0357  0087               	movwf	7
  6364  0358  3143               	addfsr 1,3
  6365  0359  3000               	movlw	0
  6366  035A  3FC0               	movwi [0]fsr1
  6367  035B  3FC1               	movwi [1]fsr1
  6368                           
  6369                           ;Switch_B1.c: 204: Sw->Hold1 = 0;
  6370  035C  0854               	movf	_Sw^(0+128),w
  6371  035D  0086               	movwf	6
  6372  035E  0855               	movf	(_Sw+1)^(0+128),w
  6373  035F  0087               	movwf	7
  6374  0360  1181               	bcf	1,3
  6375                           
  6376                           ;Switch_B1.c: 206: Sw->Hold2 = 0;
  6377  0361  0854               	movf	_Sw^(0+128),w
  6378  0362  0086               	movwf	6
  6379  0363  0855               	movf	(_Sw+1)^(0+128),w
  6380  0364  0087               	movwf	7
  6381  0365  1201               	bcf	1,4
  6382                           
  6383                           ;Switch_B1.c: 207: Sw->Hold3 = 0;
  6384  0366  0854               	movf	_Sw^(0+128),w
  6385  0367  0086               	movwf	6
  6386  0368  0855               	movf	(_Sw+1)^(0+128),w
  6387  0369  0087               	movwf	7
  6388  036A  1281               	bcf	1,5
  6389                           
  6390                           ;Switch_B1.c: 208: Sw->Hold2Time = 0;
  6391  036B  0854               	movf	_Sw^(0+128),w
  6392  036C  0086               	movwf	6
  6393  036D  0855               	movf	(_Sw+1)^(0+128),w
  6394  036E  0087               	movwf	7
  6395  036F  3145               	addfsr 1,5
  6396  0370  3000               	movlw	0
  6397  0371  3FC0               	movwi [0]fsr1
  6398  0372  3FC1               	movwi [1]fsr1
  6399                           
  6400                           ;Switch_B1.c: 209: Sw->Hold3Time = 0;
  6401  0373  0854               	movf	_Sw^(0+128),w
  6402  0374  0086               	movwf	6
  6403  0375  0855               	movf	(_Sw+1)^(0+128),w
  6404  0376  0087               	movwf	7
  6405  0377  3147               	addfsr 1,7
  6406  0378  3000               	movlw	0
  6407  0379  3FC0               	movwi [0]fsr1
  6408  037A  3FC1               	movwi [1]fsr1
  6409                           
  6410                           ;Switch_B1.c: 216: setDimmerLights_SwOff(sw);
  6411  037B  0020               	movlb	0	; select bank0
  6412  037C  0835               	movf	setSw_Main@sw,w
  6413  037D  319F  2751  3182   	fcall	_setDimmerLights_SwOff
  6414                           
  6415                           ;Switch_B1.c: 220: setRF_Learn(0);
  6416  0380  3000               	movlw	0
  6417  0381  3199  217F         	fcall	_setRF_Learn
  6418                           
  6419                           ;Switch_B1.c: 222: }
  6420                           ;Switch_B1.c: 223: }
  6421                           ;Switch_B1.c: 224: }
  6422                           ;Switch_B1.c: 225: } else {
  6423  0383  0008               	return
  6424  0384                     l2621:	
  6425                           
  6426                           ;Switch_B1.c: 226: if (myMain.PowerON == 1) {
  6427  0384  1C2F               	btfss	_myMain^(0+128),0
  6428  0385  0008               	return
  6429                           
  6430                           ;Switch_B1.c: 227: Sw->Enable = 1;
  6431  0386  0854               	movf	_Sw^(0+128),w
  6432  0387  0086               	movwf	6
  6433  0388  0855               	movf	(_Sw+1)^(0+128),w
  6434  0389  0087               	movwf	7
  6435  038A  1401               	bsf	1,0
  6436  038B  0008               	return
  6437  038C                     __end_of_setSw_Main:	
  6438                           
  6439                           	psect	text15
  6440  197F                     __ptext15:	
  6441 ;; *************** function _setRF_Learn *****************
  6442 ;; Defined at:
  6443 ;;		line 33 in file "../src/RF_Control_B1.c"
  6444 ;; Parameters:    Size  Location     Type
  6445 ;;  command         1    wreg     unsigned char 
  6446 ;; Auto vars:     Size  Location     Type
  6447 ;;  command         1    1[BANK0 ] unsigned char 
  6448 ;; Return value:  Size  Location     Type
  6449 ;;		None               void
  6450 ;; Registers used:
  6451 ;;		wreg, status,2, status,0
  6452 ;; Tracked objects:
  6453 ;;		On entry : 0/0
  6454 ;;		On exit  : 0/0
  6455 ;;		Unchanged: 0/0
  6456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6458 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6459 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6460 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6461 ;;Total ram usage:        2 bytes
  6462 ;; Hardware stack levels used:    1
  6463 ;; Hardware stack levels required when called:    5
  6464 ;; This function calls:
  6465 ;;		Nothing
  6466 ;; This function is called by:
  6467 ;;		_setSw_Main
  6468 ;; This function uses a non-reentrant model
  6469 ;;
  6470                           
  6471                           
  6472                           ;psect for function _setRF_Learn
  6473  197F                     _setRF_Learn:	
  6474                           
  6475                           ;incstack = 0
  6476                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6477                           ;setRF_Learn@command stored from wreg
  6478  197F  0020               	movlb	0	; select bank0
  6479  1980  00A1               	movwf	setRF_Learn@command
  6480                           
  6481                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  6482  1981  0821               	movf	setRF_Learn@command,w
  6483  1982  3A01               	xorlw	1
  6484  1983  3000               	movlw	0
  6485  1984  1903               	skipnz
  6486  1985  3001               	movlw	1
  6487  1986  00A0               	movwf	??_setRF_Learn
  6488  1987  0EA0               	swapf	??_setRF_Learn,f
  6489  1988  0DA0               	rlf	??_setRF_Learn,f
  6490  1989  0DA0               	rlf	??_setRF_Learn,f
  6491  198A  0021               	movlb	1	; select bank1
  6492  198B  0820               	movf	_RF1^(0+128),w
  6493  198C  0020               	movlb	0	; select bank0
  6494  198D  0620               	xorwf	??_setRF_Learn,w
  6495  198E  39BF               	andlw	-65
  6496  198F  0620               	xorwf	??_setRF_Learn,w
  6497  1990  0021               	movlb	1	; select bank1
  6498  1991  00A0               	movwf	_RF1^(0+128)
  6499  1992  0008               	return
  6500  1993                     __end_of_setRF_Learn:	
  6501                           
  6502                           	psect	text16
  6503  1D6C                     __ptext16:	
  6504 ;; *************** function _setDimmerLights_DimmingOn *****************
  6505 ;; Defined at:
  6506 ;;		line 805 in file "../src/Dimmer_B1.c"
  6507 ;; Parameters:    Size  Location     Type
  6508 ;;  sw              1    wreg     unsigned char 
  6509 ;; Auto vars:     Size  Location     Type
  6510 ;;  sw              1    2[BANK0 ] unsigned char 
  6511 ;; Return value:  Size  Location     Type
  6512 ;;		None               void
  6513 ;; Registers used:
  6514 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6515 ;; Tracked objects:
  6516 ;;		On entry : 0/0
  6517 ;;		On exit  : 0/0
  6518 ;;		Unchanged: 0/0
  6519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6520 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6521 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6523 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6524 ;;Total ram usage:        1 bytes
  6525 ;; Hardware stack levels used:    1
  6526 ;; Hardware stack levels required when called:    6
  6527 ;; This function calls:
  6528 ;;		_DimmerLights_SelectPointer
  6529 ;; This function is called by:
  6530 ;;		_setSw_Main
  6531 ;; This function uses a non-reentrant model
  6532 ;;
  6533                           
  6534                           
  6535                           ;psect for function _setDimmerLights_DimmingOn
  6536  1D6C                     _setDimmerLights_DimmingOn:	
  6537                           
  6538                           ;incstack = 0
  6539                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6540                           ;setDimmerLights_DimmingOn@sw stored from wreg
  6541  1D6C  0020               	movlb	0	; select bank0
  6542  1D6D  00A2               	movwf	setDimmerLights_DimmingOn@sw
  6543                           
  6544                           ;Dimmer_B1.c: 811: DimmerLights_SelectPointer(sw);
  6545  1D6E  0822               	movf	setDimmerLights_DimmingOn@sw,w
  6546  1D6F  319A  2214  319D   	fcall	_DimmerLights_SelectPointer
  6547                           
  6548                           ;Dimmer_B1.c: 812: if (DimmerLights->Trigger == 0) {
  6549  1D72  0021               	movlb	1	; select bank1
  6550  1D73  085A               	movf	_DimmerLights^(0+128),w
  6551  1D74  0086               	movwf	6
  6552  1D75  3001               	movlw	1	; select bank2/3
  6553  1D76  0087               	movwf	7
  6554  1D77  1881               	btfsc	1,1
  6555  1D78  0008               	return
  6556                           
  6557                           ;Dimmer_B1.c: 813: if (DimmerLights->SwFlag == 1) {
  6558  1D79  085A               	movf	_DimmerLights^(0+128),w
  6559  1D7A  0086               	movwf	6
  6560  1D7B  3001               	movlw	1	; select bank2/3
  6561  1D7C  0087               	movwf	7
  6562  1D7D  1C01               	btfss	1,0
  6563  1D7E  0008               	return
  6564                           
  6565                           ;Dimmer_B1.c: 814: DimmerLights->Status = 1;
  6566  1D7F  0A5A               	incf	_DimmerLights^(0+128),w
  6567  1D80  0086               	movwf	6
  6568  1D81  3001               	movlw	1	; select bank2/3
  6569  1D82  0087               	movwf	7
  6570  1D83  1401               	bsf	1,0
  6571                           
  6572                           ;Dimmer_B1.c: 816: DimmerLights->DimmingSwFlag = 1;
  6573  1D84  085A               	movf	_DimmerLights^(0+128),w
  6574  1D85  0086               	movwf	6
  6575  1D86  3001               	movlw	1	; select bank2/3
  6576  1D87  0087               	movwf	7
  6577  1D88  1581               	bsf	1,3
  6578                           
  6579                           ;Dimmer_B1.c: 817: DimmerLights->DimmingTrigger = 1;
  6580  1D89  085A               	movf	_DimmerLights^(0+128),w
  6581  1D8A  0086               	movwf	6
  6582  1D8B  3001               	movlw	1	; select bank2/3
  6583  1D8C  0087               	movwf	7
  6584  1D8D  1601               	bsf	1,4
  6585                           
  6586                           ;Dimmer_B1.c: 818: DimmerLights->DimmingSwitch = 1;
  6587  1D8E  085A               	movf	_DimmerLights^(0+128),w
  6588  1D8F  0086               	movwf	6
  6589  1D90  3001               	movlw	1	; select bank2/3
  6590  1D91  0087               	movwf	7
  6591  1D92  1681               	bsf	1,5
  6592  1D93  0008               	return
  6593  1D94                     __end_of_setDimmerLights_DimmingOn:	
  6594                           
  6595                           	psect	text17
  6596  1BD5                     __ptext17:	
  6597 ;; *************** function _getSw_KeyStatus *****************
  6598 ;; Defined at:
  6599 ;;		line 238 in file "../src/Switch_B1.c"
  6600 ;; Parameters:    Size  Location     Type
  6601 ;;  sw              1    wreg     unsigned char 
  6602 ;; Auto vars:     Size  Location     Type
  6603 ;;  sw              1    4[BANK0 ] unsigned char 
  6604 ;;  status          1    3[BANK0 ] unsigned char 
  6605 ;; Return value:  Size  Location     Type
  6606 ;;                  1    wreg      unsigned char 
  6607 ;; Registers used:
  6608 ;;		wreg, status,2
  6609 ;; Tracked objects:
  6610 ;;		On entry : 0/0
  6611 ;;		On exit  : 0/0
  6612 ;;		Unchanged: 0/0
  6613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6615 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6616 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6617 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6618 ;;Total ram usage:        5 bytes
  6619 ;; Hardware stack levels used:    1
  6620 ;; Hardware stack levels required when called:    5
  6621 ;; This function calls:
  6622 ;;		Nothing
  6623 ;; This function is called by:
  6624 ;;		_setSw_Main
  6625 ;; This function uses a non-reentrant model
  6626 ;;
  6627                           
  6628                           
  6629                           ;psect for function _getSw_KeyStatus
  6630  1BD5                     _getSw_KeyStatus:	
  6631                           
  6632                           ;incstack = 0
  6633                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6634                           ;getSw_KeyStatus@sw stored from wreg
  6635  1BD5  0020               	movlb	0	; select bank0
  6636  1BD6  00A4               	movwf	getSw_KeyStatus@sw
  6637                           
  6638                           ;Switch_B1.c: 239: char status = 0;
  6639  1BD7  01A3               	clrf	getSw_KeyStatus@status
  6640                           
  6641                           ;Switch_B1.c: 259: if (sw == 1) {
  6642  1BD8  0824               	movf	getSw_KeyStatus@sw,w
  6643  1BD9  3A01               	xorlw	1
  6644  1BDA  1D03               	skipz
  6645  1BDB  2BE4               	goto	l8072
  6646                           
  6647                           ;Switch_B1.c: 260: status = RA0 == 1 || RB1 == 1 ? 1 : 0;
  6648  1BDC  01A1               	clrf	_getSw_KeyStatus$6258
  6649  1BDD  0AA1               	incf	_getSw_KeyStatus$6258,f
  6650  1BDE  1C0C               	btfss	12,0	;volatile
  6651  1BDF  188D               	btfsc	13,1	;volatile
  6652  1BE0  2BE2               	goto	l8070
  6653  1BE1  01A1               	clrf	_getSw_KeyStatus$6258
  6654  1BE2                     l8070:	
  6655  1BE2  0821               	movf	_getSw_KeyStatus$6258,w
  6656  1BE3  2BEF               	goto	L3
  6657  1BE4                     l8072:	
  6658                           ;Switch_B1.c: 261: } else if (sw == 2) {
  6659                           
  6660  1BE4  0824               	movf	getSw_KeyStatus@sw,w
  6661  1BE5  3A02               	xorlw	2
  6662  1BE6  1D03               	skipz
  6663  1BE7  2BF2               	goto	l8082
  6664                           
  6665                           ;Switch_B1.c: 262: status = RA6 == 1 || RA4 == 1 ? 1 : 0;
  6666  1BE8  01A2               	clrf	_getSw_KeyStatus$6259
  6667  1BE9  0AA2               	incf	_getSw_KeyStatus$6259,f
  6668  1BEA  1F0C               	btfss	12,6	;volatile
  6669  1BEB  1A0C               	btfsc	12,4	;volatile
  6670  1BEC  2BEE               	goto	l8080
  6671  1BED  01A2               	clrf	_getSw_KeyStatus$6259
  6672  1BEE                     l8080:	
  6673  1BEE  0822               	movf	_getSw_KeyStatus$6259,w
  6674  1BEF                     L3:	
  6675  1BEF  00A0               	movwf	??_getSw_KeyStatus
  6676  1BF0  0820               	movf	??_getSw_KeyStatus,w
  6677  1BF1  00A3               	movwf	getSw_KeyStatus@status
  6678  1BF2                     l8082:	
  6679                           
  6680                           ;Switch_B1.c: 263: }
  6681                           ;Switch_B1.c: 276: return status;
  6682  1BF2  0823               	movf	getSw_KeyStatus@status,w
  6683  1BF3  0008               	return
  6684  1BF4                     __end_of_getSw_KeyStatus:	
  6685                           
  6686                           	psect	text18
  6687  1A59                     __ptext18:	
  6688 ;; *************** function _SwPointSelect *****************
  6689 ;; Defined at:
  6690 ;;		line 25 in file "../src/Switch_B1.c"
  6691 ;; Parameters:    Size  Location     Type
  6692 ;;  sw              1    wreg     unsigned char 
  6693 ;; Auto vars:     Size  Location     Type
  6694 ;;  sw              1    0[BANK0 ] unsigned char 
  6695 ;; Return value:  Size  Location     Type
  6696 ;;		None               void
  6697 ;; Registers used:
  6698 ;;		wreg, status,2, status,0
  6699 ;; Tracked objects:
  6700 ;;		On entry : 0/0
  6701 ;;		On exit  : 0/0
  6702 ;;		Unchanged: 0/0
  6703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6705 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6707 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6708 ;;Total ram usage:        1 bytes
  6709 ;; Hardware stack levels used:    1
  6710 ;; Hardware stack levels required when called:    5
  6711 ;; This function calls:
  6712 ;;		Nothing
  6713 ;; This function is called by:
  6714 ;;		_setSw_Main
  6715 ;; This function uses a non-reentrant model
  6716 ;;
  6717                           
  6718                           
  6719                           ;psect for function _SwPointSelect
  6720  1A59                     _SwPointSelect:	
  6721                           
  6722                           ;incstack = 0
  6723                           ; Regs used in _SwPointSelect: [wreg+status,2+status,0]
  6724                           ;SwPointSelect@sw stored from wreg
  6725  1A59  0020               	movlb	0	; select bank0
  6726  1A5A  00A0               	movwf	SwPointSelect@sw
  6727                           
  6728                           ;Switch_B1.c: 28: if (sw == 1) {
  6729  1A5B  0820               	movf	SwPointSelect@sw,w
  6730  1A5C  3A01               	xorlw	1
  6731  1A5D  1D03               	skipz
  6732  1A5E  2A65               	goto	l8056
  6733                           
  6734                           ;Switch_B1.c: 29: Sw = &Sw1;
  6735  1A5F  30BE               	movlw	low _Sw1
  6736  1A60  0021               	movlb	1	; select bank1
  6737  1A61  00D4               	movwf	_Sw^(0+128)
  6738  1A62  3001               	movlw	high _Sw1
  6739  1A63  00D5               	movwf	(_Sw+1)^(0+128)
  6740                           
  6741                           ;Switch_B1.c: 30: }
  6742  1A64  0008               	return
  6743  1A65                     l8056:	
  6744                           
  6745                           ;Switch_B1.c: 33: else if (sw == 2) {
  6746  1A65  0020               	movlb	0	; select bank0
  6747  1A66  0820               	movf	SwPointSelect@sw,w
  6748  1A67  3A02               	xorlw	2
  6749  1A68  1D03               	skipz
  6750  1A69  0008               	return
  6751                           
  6752                           ;Switch_B1.c: 34: Sw = &Sw2;
  6753  1A6A  3045               	movlw	low _Sw2
  6754  1A6B  0021               	movlb	1	; select bank1
  6755  1A6C  00D4               	movwf	_Sw^(0+128)
  6756  1A6D  3002               	movlw	high _Sw2
  6757  1A6E  00D5               	movwf	(_Sw+1)^(0+128)
  6758  1A6F  0008               	return
  6759  1A70                     __end_of_SwPointSelect:	
  6760                           
  6761                           	psect	text19
  6762  19D2                     __ptext19:	
  6763 ;; *************** function _TouchPower *****************
  6764 ;; Defined at:
  6765 ;;		line 10 in file "../src/Switch_B1.c"
  6766 ;; Parameters:    Size  Location     Type
  6767 ;;		None
  6768 ;; Auto vars:     Size  Location     Type
  6769 ;;		None
  6770 ;; Return value:  Size  Location     Type
  6771 ;;		None               void
  6772 ;; Registers used:
  6773 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6774 ;; Tracked objects:
  6775 ;;		On entry : 0/0
  6776 ;;		On exit  : 0/0
  6777 ;;		Unchanged: 0/0
  6778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6780 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6782 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6783 ;;Total ram usage:        0 bytes
  6784 ;; Hardware stack levels used:    1
  6785 ;; Hardware stack levels required when called:    6
  6786 ;; This function calls:
  6787 ;;		_Timeout_Counter
  6788 ;;		_set_TimeoutCleared
  6789 ;; This function is called by:
  6790 ;;		_Switch_Main
  6791 ;; This function uses a non-reentrant model
  6792 ;;
  6793                           
  6794                           
  6795                           ;psect for function _TouchPower
  6796  19D2                     _TouchPower:	
  6797                           
  6798                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6799                           
  6800                           ;incstack = 0
  6801                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6802  19D2  0021               	movlb	1	; select bank1
  6803  19D3  1C2F               	btfss	_myMain^(0+128),0
  6804  19D4  0008               	return
  6805                           
  6806                           ;Switch_B1.c: 12: if (RC5 == 0) {
  6807  19D5  0020               	movlb	0	; select bank0
  6808  19D6  1A8E               	btfsc	14,5	;volatile
  6809  19D7  0008               	return
  6810  19D8  29DE               	goto	l8786
  6811  19D9                     l2599:	
  6812                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6813                           
  6814                           
  6815                           ;Switch_B1.c: 14: RC5 = 1;
  6816  19D9  0020               	movlb	0	; select bank0
  6817  19DA  168E               	bsf	14,5	;volatile
  6818                           
  6819                           ;Switch_B1.c: 15: Timeout_Counter();
  6820  19DB  3199  21BD  3199   	fcall	_Timeout_Counter
  6821  19DE                     l8786:	
  6822  19DE  0020               	movlb	0	; select bank0
  6823  19DF  1A8E               	btfsc	14,5	;volatile
  6824  19E0  29E4               	goto	l8790
  6825  19E1  0021               	movlb	1	; select bank1
  6826  19E2  1D39               	btfss	(_myMain^(0+128)+10),2
  6827  19E3  29D9               	goto	l2599
  6828  19E4                     l8790:	
  6829                           
  6830                           ;Switch_B1.c: 16: }
  6831                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6832  19E4  31A6  26C0         	fcall	_set_TimeoutCleared
  6833  19E6  0008               	return
  6834  19E7                     __end_of_TouchPower:	
  6835                           
  6836                           	psect	text20
  6837  26C0                     __ptext20:	
  6838 ;; *************** function _set_TimeoutCleared *****************
  6839 ;; Defined at:
  6840 ;;		line 281 in file "../src/main_B1.c"
  6841 ;; Parameters:    Size  Location     Type
  6842 ;;		None
  6843 ;; Auto vars:     Size  Location     Type
  6844 ;;		None
  6845 ;; Return value:  Size  Location     Type
  6846 ;;		None               void
  6847 ;; Registers used:
  6848 ;;		status,2
  6849 ;; Tracked objects:
  6850 ;;		On entry : 0/0
  6851 ;;		On exit  : 0/0
  6852 ;;		Unchanged: 0/0
  6853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6855 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6857 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6858 ;;Total ram usage:        0 bytes
  6859 ;; Hardware stack levels used:    1
  6860 ;; Hardware stack levels required when called:    5
  6861 ;; This function calls:
  6862 ;;		Nothing
  6863 ;; This function is called by:
  6864 ;;		_getAD
  6865 ;;		_TouchPower
  6866 ;; This function uses a non-reentrant model
  6867 ;;
  6868                           
  6869                           
  6870                           ;psect for function _set_TimeoutCleared
  6871  26C0                     _set_TimeoutCleared:	
  6872                           
  6873                           ;main_B1.c: 282: myMain.Timeout = 0;
  6874                           
  6875                           ;incstack = 0
  6876                           ; Regs used in _set_TimeoutCleared: [status,2]
  6877  26C0  0021               	movlb	1	; select bank1
  6878  26C1  1139               	bcf	(_myMain^(0+128)+10),2
  6879                           
  6880                           ;main_B1.c: 283: myMain.Timeout_Counter = 0;
  6881  26C2  01BA               	clrf	(_myMain^(0+128)+11)
  6882  26C3  01BB               	clrf	((_myMain+1)^(0+128)+11)
  6883  26C4  0008               	return
  6884  26C5                     __end_of_set_TimeoutCleared:	
  6885                           
  6886                           	psect	text21
  6887  19BD                     __ptext21:	
  6888 ;; *************** function _Timeout_Counter *****************
  6889 ;; Defined at:
  6890 ;;		line 272 in file "../src/main_B1.c"
  6891 ;; Parameters:    Size  Location     Type
  6892 ;;		None
  6893 ;; Auto vars:     Size  Location     Type
  6894 ;;		None
  6895 ;; Return value:  Size  Location     Type
  6896 ;;		None               void
  6897 ;; Registers used:
  6898 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6899 ;; Tracked objects:
  6900 ;;		On entry : 0/0
  6901 ;;		On exit  : 0/0
  6902 ;;		Unchanged: 0/0
  6903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6904 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6905 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6906 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6907 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6908 ;;Total ram usage:        0 bytes
  6909 ;; Hardware stack levels used:    1
  6910 ;; Hardware stack levels required when called:    5
  6911 ;; This function calls:
  6912 ;;		Nothing
  6913 ;; This function is called by:
  6914 ;;		_getAD
  6915 ;;		_TouchPower
  6916 ;; This function uses a non-reentrant model
  6917 ;;
  6918                           
  6919                           
  6920                           ;psect for function _Timeout_Counter
  6921  19BD                     _Timeout_Counter:	
  6922                           
  6923                           ;main_B1.c: 273: myMain.Timeout_Counter++;
  6924                           
  6925                           ;incstack = 0
  6926                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6927  19BD  3001               	movlw	1
  6928  19BE  0021               	movlb	1	; select bank1
  6929  19BF  07BA               	addwf	(_myMain^(0+128)+11),f
  6930  19C0  3000               	movlw	0
  6931  19C1  3DBB               	addwfc	((_myMain+1)^(0+128)+11),f
  6932                           
  6933                           ;main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  6934  19C2  300B               	movlw	11
  6935  19C3  3EAF               	addlw	_myMain& (0+255)
  6936  19C4  0086               	movwf	6
  6937  19C5  0187               	clrf	7
  6938  19C6  3F40               	moviw [0]fsr1
  6939  19C7  3AA8               	xorlw	168
  6940  19C8  1D03               	skipz
  6941  19C9  29CC               	goto	u7605
  6942  19CA  3F41               	moviw [1]fsr1
  6943  19CB  3A61               	xorlw	97
  6944  19CC                     u7605:	
  6945  19CC  1D03               	skipz
  6946  19CD  0008               	return
  6947                           
  6948                           ;main_B1.c: 275: myMain.Timeout_Counter = 0;
  6949  19CE  01BA               	clrf	(_myMain^(0+128)+11)
  6950  19CF  01BB               	clrf	((_myMain+1)^(0+128)+11)
  6951                           
  6952                           ;main_B1.c: 276: myMain.Timeout = 1;
  6953  19D0  1539               	bsf	(_myMain^(0+128)+10),2
  6954  19D1  0008               	return
  6955  19D2                     __end_of_Timeout_Counter:	
  6956                           
  6957                           	psect	text22
  6958  1866                     __ptext22:	
  6959 ;; *************** function _Switch_Initialization *****************
  6960 ;; Defined at:
  6961 ;;		line 46 in file "../src/Switch_B1.c"
  6962 ;; Parameters:    Size  Location     Type
  6963 ;;		None
  6964 ;; Auto vars:     Size  Location     Type
  6965 ;;		None
  6966 ;; Return value:  Size  Location     Type
  6967 ;;		None               void
  6968 ;; Registers used:
  6969 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6970 ;; Tracked objects:
  6971 ;;		On entry : 0/0
  6972 ;;		On exit  : 0/0
  6973 ;;		Unchanged: 0/0
  6974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6975 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6976 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6977 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6978 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6979 ;;Total ram usage:        0 bytes
  6980 ;; Hardware stack levels used:    1
  6981 ;; Hardware stack levels required when called:    8
  6982 ;; This function calls:
  6983 ;;		_setSw_Initialization
  6984 ;; This function is called by:
  6985 ;;		_main
  6986 ;; This function uses a non-reentrant model
  6987 ;;
  6988                           
  6989                           
  6990                           ;psect for function _Switch_Initialization
  6991  1866                     _Switch_Initialization:	
  6992                           
  6993                           ;Switch_B1.c: 52: setSw_Initialization(1);
  6994                           
  6995                           ;incstack = 0
  6996                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6997  1866  3001               	movlw	1
  6998  1867  31A7  2706  3198   	fcall	_setSw_Initialization
  6999                           
  7000                           ;Switch_B1.c: 56: setSw_Initialization(2);
  7001  186A  3002               	movlw	2
  7002  186B  31A7  2706         	fcall	_setSw_Initialization
  7003  186D  0008               	return
  7004  186E                     __end_of_Switch_Initialization:	
  7005                           
  7006                           	psect	text23
  7007  2706                     __ptext23:	
  7008 ;; *************** function _setSw_Initialization *****************
  7009 ;; Defined at:
  7010 ;;		line 66 in file "../src/Switch_B1.c"
  7011 ;; Parameters:    Size  Location     Type
  7012 ;;  sw              1    wreg     unsigned char 
  7013 ;; Auto vars:     Size  Location     Type
  7014 ;;  sw              1    4[BANK0 ] unsigned char 
  7015 ;; Return value:  Size  Location     Type
  7016 ;;		None               void
  7017 ;; Registers used:
  7018 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7019 ;; Tracked objects:
  7020 ;;		On entry : 0/0
  7021 ;;		On exit  : 0/0
  7022 ;;		Unchanged: 0/0
  7023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7025 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7027 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7028 ;;Total ram usage:        1 bytes
  7029 ;; Hardware stack levels used:    1
  7030 ;; Hardware stack levels required when called:    7
  7031 ;; This function calls:
  7032 ;;		_setLED
  7033 ;; This function is called by:
  7034 ;;		_Switch_Initialization
  7035 ;; This function uses a non-reentrant model
  7036 ;;
  7037                           
  7038                           
  7039                           ;psect for function _setSw_Initialization
  7040  2706                     _setSw_Initialization:	
  7041                           
  7042                           ;incstack = 0
  7043                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7044                           ;setSw_Initialization@sw stored from wreg
  7045  2706  0020               	movlb	0	; select bank0
  7046  2707  00A4               	movwf	setSw_Initialization@sw
  7047                           
  7048                           ;Switch_B1.c: 68: setLED(sw, 1);
  7049  2708  01A2               	clrf	setLED@command
  7050  2709  0AA2               	incf	setLED@command,f
  7051  270A  0824               	movf	setSw_Initialization@sw,w
  7052  270B  3191  21D9         	fcall	_setLED
  7053  270D  0008               	return
  7054  270E                     __end_of_setSw_Initialization:	
  7055                           
  7056                           	psect	text24
  7057  26A3                     __ptext24:	
  7058 ;; *************** function _RF_Main *****************
  7059 ;; Defined at:
  7060 ;;		line 26 in file "../src/RF_Control_B1.c"
  7061 ;; Parameters:    Size  Location     Type
  7062 ;;		None
  7063 ;; Auto vars:     Size  Location     Type
  7064 ;;		None
  7065 ;; Return value:  Size  Location     Type
  7066 ;;		None               void
  7067 ;; Registers used:
  7068 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7069 ;; Tracked objects:
  7070 ;;		On entry : 0/0
  7071 ;;		On exit  : 0/0
  7072 ;;		Unchanged: 0/0
  7073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7074 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7075 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7077 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7078 ;;Total ram usage:        0 bytes
  7079 ;; Hardware stack levels used:    1
  7080 ;; Hardware stack levels required when called:   12
  7081 ;; This function calls:
  7082 ;;		_setRF_Main
  7083 ;; This function is called by:
  7084 ;;		_main
  7085 ;; This function uses a non-reentrant model
  7086 ;;
  7087                           
  7088                           
  7089                           ;psect for function _RF_Main
  7090  26A3                     _RF_Main:	
  7091                           
  7092                           ;RF_Control_B1.c: 28: setRF_Main();
  7093                           
  7094                           ;incstack = 0
  7095                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7096  26A3  3186  2630         	fcall	_setRF_Main
  7097  26A5  0008               	return
  7098  26A6                     __end_of_RF_Main:	
  7099                           
  7100                           	psect	text25
  7101  0630                     __ptext25:	
  7102 ;; *************** function _setRF_Main *****************
  7103 ;; Defined at:
  7104 ;;		line 53 in file "../src/RF_Control_B1.c"
  7105 ;; Parameters:    Size  Location     Type
  7106 ;;		None
  7107 ;; Auto vars:     Size  Location     Type
  7108 ;;  error           1    4[BANK1 ] unsigned char 
  7109 ;; Return value:  Size  Location     Type
  7110 ;;		None               void
  7111 ;; Registers used:
  7112 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7113 ;; Tracked objects:
  7114 ;;		On entry : 0/0
  7115 ;;		On exit  : 0/0
  7116 ;;		Unchanged: 0/0
  7117 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7119 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7120 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7121 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7122 ;;Total ram usage:        2 bytes
  7123 ;; Hardware stack levels used:    1
  7124 ;; Hardware stack levels required when called:   11
  7125 ;; This function calls:
  7126 ;;		_CC2500_PowerOnInitial
  7127 ;;		_CC2500_RxData
  7128 ;;		_CC2500_TxData
  7129 ;;		_CC2500_WriteCommand
  7130 ;;		_RF_RxDisable
  7131 ;;		___lwdiv
  7132 ;;		_getBuz_GO
  7133 ;;		_getRF_KeyStatus
  7134 ;;		_getRxData
  7135 ;; This function is called by:
  7136 ;;		_RF_Main
  7137 ;; This function uses a non-reentrant model
  7138 ;;
  7139                           
  7140                           
  7141                           ;psect for function _setRF_Main
  7142  0630                     _setRF_Main:	
  7143                           
  7144                           ;RF_Control_B1.c: 54: char error = 0;
  7145                           
  7146                           ;incstack = 0
  7147                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7148  0630  0021               	movlb	1	; select bank1
  7149  0631  01E9               	clrf	setRF_Main@error^(0+128)
  7150                           
  7151                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  7152  0632  1C20               	btfss	_RF1^(0+128),0
  7153  0633  2F01               	goto	l2188
  7154                           
  7155                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  7156  0634  3198  2090  3186   	fcall	_getBuz_GO
  7157  0637  0020               	movlb	0	; select bank0
  7158  0638  0821               	movf	?_getBuz_GO+1,w
  7159  0639  0420               	iorwf	?_getBuz_GO,w
  7160  063A  1D03               	skipz
  7161  063B  2EE2               	goto	l10102
  7162                           
  7163                           ;RF_Control_B1.c: 59: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  7164  063C  3190  2000  3186   	fcall	_getRF_KeyStatus
  7165  063F  3A01               	xorlw	1
  7166  0640  3000               	movlw	0
  7167  0641  1903               	skipnz
  7168  0642  3001               	movlw	1
  7169  0643  0021               	movlb	1	; select bank1
  7170  0644  00E8               	movwf	??_setRF_Main^(0+128)
  7171  0645  0CE8               	rrf	??_setRF_Main^(0+128),f
  7172  0646  0CE8               	rrf	??_setRF_Main^(0+128),f
  7173  0647  0820               	movf	_RF1^(0+128),w
  7174  0648  0668               	xorwf	??_setRF_Main^(0+128),w
  7175  0649  397F               	andlw	-129
  7176  064A  0668               	xorwf	??_setRF_Main^(0+128),w
  7177  064B  00A0               	movwf	_RF1^(0+128)
  7178                           
  7179                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  7180  064C  1FA0               	btfss	_RF1^(0+128),7
  7181  064D  2E50               	goto	l2192
  7182  064E  1F20               	btfss	_RF1^(0+128),6
  7183  064F  2EE2               	goto	l10102
  7184  0650                     l2192:	
  7185                           
  7186                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  7187  0650  1D20               	btfss	_RF1^(0+128),2
  7188  0651  2EA1               	goto	l2193
  7189                           
  7190                           ;RF_Control_B1.c: 67: if (RF1.Learn == 0) {
  7191  0652  1B20               	btfsc	_RF1^(0+128),6
  7192  0653  2E9C               	goto	l10074
  7193                           
  7194                           ;RF_Control_B1.c: 68: RF1.Count++;
  7195  0654  3001               	movlw	1
  7196  0655  07A3               	addwf	(_RF1^(0+128)+3),f
  7197  0656  3000               	movlw	0
  7198  0657  3DA4               	addwfc	((_RF1+1)^(0+128)+3),f
  7199                           
  7200                           ;RF_Control_B1.c: 69: if (RF1.Count >= (RF1.RunTime / 20)) {
  7201  0658  3014               	movlw	20
  7202  0659  0020               	movlb	0	; select bank0
  7203  065A  00A0               	movwf	___lwdiv@divisor
  7204  065B  3000               	movlw	0
  7205  065C  00A1               	movwf	___lwdiv@divisor+1
  7206  065D  0021               	movlb	1	; select bank1
  7207  065E  0829               	movf	((_RF1+1)^(0+128)+8),w
  7208  065F  0020               	movlb	0	; select bank0
  7209  0660  01A3               	clrf	___lwdiv@dividend+1
  7210  0661  07A3               	addwf	___lwdiv@dividend+1,f
  7211  0662  0021               	movlb	1	; select bank1
  7212  0663  0828               	movf	(_RF1^(0+128)+8),w
  7213  0664  0020               	movlb	0	; select bank0
  7214  0665  01A2               	clrf	___lwdiv@dividend
  7215  0666  07A2               	addwf	___lwdiv@dividend,f
  7216  0667  319E  26AA  3186   	fcall	___lwdiv
  7217  066A  0020               	movlb	0	; select bank0
  7218  066B  0821               	movf	?___lwdiv+1,w
  7219  066C  0021               	movlb	1	; select bank1
  7220  066D  0224               	subwf	((_RF1+1)^(0+128)+3),w
  7221  066E  1D03               	skipz
  7222  066F  2E74               	goto	u11385
  7223  0670  0020               	movlb	0	; select bank0
  7224  0671  0820               	movf	?___lwdiv,w
  7225  0672  0021               	movlb	1	; select bank1
  7226  0673  0223               	subwf	(_RF1^(0+128)+3),w
  7227  0674                     u11385:	
  7228  0674  1C03               	skipc
  7229  0675  2EE2               	goto	l10102
  7230                           
  7231                           ;RF_Control_B1.c: 70: RF1.Count = (RF1.RunTime / 20);
  7232  0676  3014               	movlw	20
  7233  0677  0020               	movlb	0	; select bank0
  7234  0678  00A0               	movwf	___lwdiv@divisor
  7235  0679  3000               	movlw	0
  7236  067A  00A1               	movwf	___lwdiv@divisor+1
  7237  067B  0021               	movlb	1	; select bank1
  7238  067C  0829               	movf	((_RF1+1)^(0+128)+8),w
  7239  067D  0020               	movlb	0	; select bank0
  7240  067E  01A3               	clrf	___lwdiv@dividend+1
  7241  067F  07A3               	addwf	___lwdiv@dividend+1,f
  7242  0680  0021               	movlb	1	; select bank1
  7243  0681  0828               	movf	(_RF1^(0+128)+8),w
  7244  0682  0020               	movlb	0	; select bank0
  7245  0683  01A2               	clrf	___lwdiv@dividend
  7246  0684  07A2               	addwf	___lwdiv@dividend,f
  7247  0685  319E  26AA  3186   	fcall	___lwdiv
  7248  0688  0020               	movlb	0	; select bank0
  7249  0689  0821               	movf	?___lwdiv+1,w
  7250  068A  0021               	movlb	1	; select bank1
  7251  068B  01A4               	clrf	((_RF1+1)^(0+128)+3)
  7252  068C  07A4               	addwf	((_RF1+1)^(0+128)+3),f
  7253  068D  0020               	movlb	0	; select bank0
  7254  068E  0820               	movf	?___lwdiv,w
  7255  068F  0021               	movlb	1	; select bank1
  7256  0690  01A3               	clrf	(_RF1^(0+128)+3)
  7257  0691  07A3               	addwf	(_RF1^(0+128)+3),f
  7258                           
  7259                           ;RF_Control_B1.c: 72: RF1.TransceiveGO = 0;
  7260  0692  1120               	bcf	_RF1^(0+128),2
  7261                           
  7262                           ;RF_Control_B1.c: 73: RF1.CorrectionCounter = 0;
  7263  0693  01AB               	clrf	(_RF1^(0+128)+11)
  7264  0694  01AC               	clrf	((_RF1+1)^(0+128)+11)
  7265                           
  7266                           ;RF_Control_B1.c: 74: RF_RxDisable();
  7267  0695  31A7  27E0  3186   	fcall	_RF_RxDisable
  7268                           
  7269                           ;RF_Control_B1.c: 75: CC2500_TxData();
  7270  0698  3196  26B3  3186   	fcall	_CC2500_TxData
  7271                           
  7272                           ;RF_Control_B1.c: 77: }
  7273                           ;RF_Control_B1.c: 78: } else {
  7274  069B  2EE2               	goto	l10102
  7275  069C                     l10074:	
  7276                           
  7277                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  7278  069C  0021               	movlb	1	; select bank1
  7279  069D  01A3               	clrf	(_RF1^(0+128)+3)
  7280  069E  01A4               	clrf	((_RF1+1)^(0+128)+3)
  7281                           
  7282                           ;RF_Control_B1.c: 80: RF1.TransceiveGO = 0;
  7283  069F  1120               	bcf	_RF1^(0+128),2
  7284                           
  7285                           ;RF_Control_B1.c: 81: }
  7286                           ;RF_Control_B1.c: 82: } else {
  7287  06A0  2EE2               	goto	l10102
  7288  06A1                     l2193:	
  7289                           
  7290                           ;RF_Control_B1.c: 83: if (RF1.RxStatus == 1) {
  7291  06A1  1DA0               	btfss	_RF1^(0+128),3
  7292  06A2  2EB0               	goto	l10088
  7293                           
  7294                           ;RF_Control_B1.c: 85: CC2500_RxData();
  7295  06A3  3196  2648  3186   	fcall	_CC2500_RxData
  7296                           
  7297                           ;RF_Control_B1.c: 87: if (RF1.ReceiveGO == 1) {
  7298  06A6  0021               	movlb	1	; select bank1
  7299  06A7  1CA0               	btfss	_RF1^(0+128),1
  7300  06A8  2EE2               	goto	l10102
  7301                           
  7302                           ;RF_Control_B1.c: 88: RF1.ReceiveGO = 0;
  7303  06A9  10A0               	bcf	_RF1^(0+128),1
  7304                           
  7305                           ;RF_Control_B1.c: 89: RF1.CorrectionCounter = 0;
  7306  06AA  01AB               	clrf	(_RF1^(0+128)+11)
  7307  06AB  01AC               	clrf	((_RF1+1)^(0+128)+11)
  7308                           
  7309                           ;RF_Control_B1.c: 97: getRxData();
  7310  06AC  3195  2576  3186   	fcall	_getRxData
  7311                           
  7312                           ;RF_Control_B1.c: 100: }
  7313                           ;RF_Control_B1.c: 101: } else {
  7314  06AF  2EE2               	goto	l10102
  7315  06B0                     l10088:	
  7316                           
  7317                           ;RF_Control_B1.c: 102: RF1.Count++;
  7318  06B0  3001               	movlw	1
  7319  06B1  0021               	movlb	1	; select bank1
  7320  06B2  07A3               	addwf	(_RF1^(0+128)+3),f
  7321  06B3  3000               	movlw	0
  7322  06B4  3DA4               	addwfc	((_RF1+1)^(0+128)+3),f
  7323                           
  7324                           ;RF_Control_B1.c: 103: if (RF1.Count >= (RF1.RunTime / 20)) {
  7325  06B5  3014               	movlw	20
  7326  06B6  0020               	movlb	0	; select bank0
  7327  06B7  00A0               	movwf	___lwdiv@divisor
  7328  06B8  3000               	movlw	0
  7329  06B9  00A1               	movwf	___lwdiv@divisor+1
  7330  06BA  0021               	movlb	1	; select bank1
  7331  06BB  0829               	movf	((_RF1+1)^(0+128)+8),w
  7332  06BC  0020               	movlb	0	; select bank0
  7333  06BD  01A3               	clrf	___lwdiv@dividend+1
  7334  06BE  07A3               	addwf	___lwdiv@dividend+1,f
  7335  06BF  0021               	movlb	1	; select bank1
  7336  06C0  0828               	movf	(_RF1^(0+128)+8),w
  7337  06C1  0020               	movlb	0	; select bank0
  7338  06C2  01A2               	clrf	___lwdiv@dividend
  7339  06C3  07A2               	addwf	___lwdiv@dividend,f
  7340  06C4  319E  26AA  3186   	fcall	___lwdiv
  7341  06C7  0020               	movlb	0	; select bank0
  7342  06C8  0821               	movf	?___lwdiv+1,w
  7343  06C9  0021               	movlb	1	; select bank1
  7344  06CA  0224               	subwf	((_RF1+1)^(0+128)+3),w
  7345  06CB  1D03               	skipz
  7346  06CC  2ED1               	goto	u11415
  7347  06CD  0020               	movlb	0	; select bank0
  7348  06CE  0820               	movf	?___lwdiv,w
  7349  06CF  0021               	movlb	1	; select bank1
  7350  06D0  0223               	subwf	(_RF1^(0+128)+3),w
  7351  06D1                     u11415:	
  7352  06D1  1C03               	skipc
  7353  06D2  2EE2               	goto	l10102
  7354                           
  7355                           ;RF_Control_B1.c: 104: RF1.Count = 0;
  7356  06D3  01A3               	clrf	(_RF1^(0+128)+3)
  7357  06D4  01A4               	clrf	((_RF1+1)^(0+128)+3)
  7358                           
  7359                           ;RF_Control_B1.c: 106: RF1.RxStatus = 1;
  7360  06D5  15A0               	bsf	_RF1^(0+128),3
  7361                           
  7362                           ;RF_Control_B1.c: 107: CC2500_WriteCommand(0x36);
  7363  06D6  3036               	movlw	54
  7364  06D7  319A  22D5  3186   	fcall	_CC2500_WriteCommand
  7365                           
  7366                           ;RF_Control_B1.c: 108: CC2500_WriteCommand(0x3A);
  7367  06DA  303A               	movlw	58
  7368  06DB  319A  22D5  3186   	fcall	_CC2500_WriteCommand
  7369                           
  7370                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x34);
  7371  06DE  3034               	movlw	52
  7372  06DF  319A  22D5  3186   	fcall	_CC2500_WriteCommand
  7373  06E2                     l10102:	
  7374                           
  7375                           ;RF_Control_B1.c: 111: }
  7376                           ;RF_Control_B1.c: 112: }
  7377                           ;RF_Control_B1.c: 113: }
  7378                           ;RF_Control_B1.c: 114: }
  7379                           ;RF_Control_B1.c: 115: }
  7380                           ;RF_Control_B1.c: 117: RF1.CorrectionCounter++;
  7381  06E2  3001               	movlw	1
  7382  06E3  0021               	movlb	1	; select bank1
  7383  06E4  07AB               	addwf	(_RF1^(0+128)+11),f
  7384  06E5  3000               	movlw	0
  7385  06E6  3DAC               	addwfc	((_RF1+1)^(0+128)+11),f
  7386                           
  7387                           ;RF_Control_B1.c: 118: if (RF1.CorrectionCounter > (60000 / 20)) {
  7388  06E7  300B               	movlw	11
  7389  06E8  022C               	subwf	((_RF1+1)^(0+128)+11),w
  7390  06E9  30B9               	movlw	185
  7391  06EA  1903               	skipnz
  7392  06EB  022B               	subwf	(_RF1^(0+128)+11),w
  7393  06EC  1C03               	skipc
  7394  06ED  2EFA               	goto	l10116
  7395                           
  7396                           ;RF_Control_B1.c: 119: RF1.CorrectionCounter = 0;
  7397  06EE  01AB               	clrf	(_RF1^(0+128)+11)
  7398  06EF  01AC               	clrf	((_RF1+1)^(0+128)+11)
  7399                           
  7400                           ;RF_Control_B1.c: 121: RF1.RxStatus = 0;
  7401  06F0  11A0               	bcf	_RF1^(0+128),3
  7402                           
  7403                           ;RF_Control_B1.c: 122: RF1.ReceiveGO = 0;
  7404  06F1  10A0               	bcf	_RF1^(0+128),1
  7405                           
  7406                           ;RF_Control_B1.c: 123: CC2500_WriteCommand(0x36);
  7407  06F2  3036               	movlw	54
  7408  06F3  319A  22D5  3186   	fcall	_CC2500_WriteCommand
  7409                           
  7410                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x3A);
  7411  06F6  303A               	movlw	58
  7412  06F7  319A  22D5  3186   	fcall	_CC2500_WriteCommand
  7413  06FA                     l10116:	
  7414                           
  7415                           ;RF_Control_B1.c: 125: }
  7416                           ;RF_Control_B1.c: 127: if (RF1.Timeout == 1) {
  7417  06FA  0021               	movlb	1	; select bank1
  7418  06FB  1F21               	btfss	(_RF1^(0+128)+1),6
  7419  06FC  0008               	return
  7420                           
  7421                           ;RF_Control_B1.c: 128: RF1.Timeout = 0;
  7422  06FD  1321               	bcf	(_RF1^(0+128)+1),6
  7423                           
  7424                           ;RF_Control_B1.c: 129: CC2500_PowerOnInitial();
  7425  06FE  3199  21A8         	fcall	_CC2500_PowerOnInitial
  7426                           
  7427                           ;RF_Control_B1.c: 130: }
  7428                           ;RF_Control_B1.c: 132: } else {
  7429  0700  0008               	return
  7430  0701                     l2188:	
  7431                           
  7432                           ;RF_Control_B1.c: 133: if (myMain.PowerON == 1) {
  7433  0701  1C2F               	btfss	_myMain^(0+128),0
  7434  0702  0008               	return
  7435                           
  7436                           ;RF_Control_B1.c: 134: RF1.Enable = 1;
  7437  0703  1420               	bsf	_RF1^(0+128),0
  7438  0704  0008               	return
  7439  0705                     __end_of_setRF_Main:	
  7440                           
  7441                           	psect	text26
  7442  1576                     __ptext26:	
  7443 ;; *************** function _getRxData *****************
  7444 ;; Defined at:
  7445 ;;		line 227 in file "../src/RF_Control_B1.c"
  7446 ;; Parameters:    Size  Location     Type
  7447 ;;		None
  7448 ;; Auto vars:     Size  Location     Type
  7449 ;;  error           1   79[BANK0 ] unsigned char 
  7450 ;; Return value:  Size  Location     Type
  7451 ;;		None               void
  7452 ;; Registers used:
  7453 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7454 ;; Tracked objects:
  7455 ;;		On entry : 0/0
  7456 ;;		On exit  : 0/0
  7457 ;;		Unchanged: 0/0
  7458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7460 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7461 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7462 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7463 ;;Total ram usage:        2 bytes
  7464 ;; Hardware stack levels used:    1
  7465 ;; Hardware stack levels required when called:   10
  7466 ;; This function calls:
  7467 ;;		_getMain_All_Error_Status
  7468 ;;		_setControl_Lights_Table
  7469 ;;		_setLog_Code
  7470 ;;		_setTxData
  7471 ;; This function is called by:
  7472 ;;		_setRF_Main
  7473 ;; This function uses a non-reentrant model
  7474 ;;
  7475                           
  7476                           
  7477                           ;psect for function _getRxData
  7478  1576                     _getRxData:	
  7479                           
  7480                           ;RF_Control_B1.c: 229: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7481                           
  7482                           ;incstack = 0
  7483                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7484  1576  0023               	movlb	3	; select bank3
  7485  1577  0820               	movf	_RF_Data^(0+384),w
  7486  1578  3AAA               	xorlw	170
  7487  1579  1D03               	skipz
  7488  157A  2D8E               	goto	l8024
  7489  157B  0821               	movf	(_RF_Data^(0+384)+1),w
  7490  157C  3A01               	xorlw	1
  7491  157D  1D03               	skipz
  7492  157E  2D8E               	goto	l8024
  7493                           
  7494                           ;RF_Control_B1.c: 230: product->Data[2] = 0x55;
  7495  157F  3055               	movlw	85
  7496  1580  0020               	movlb	0	; select bank0
  7497  1581  00EE               	movwf	??_getRxData
  7498  1582  0021               	movlb	1	; select bank1
  7499  1583  086E               	movf	_product^(0+128),w
  7500  1584  3E02               	addlw	2
  7501  1585  0086               	movwf	6
  7502  1586  3002               	movlw	2	; select bank4/5
  7503  1587  0087               	movwf	7
  7504  1588  0020               	movlb	0	; select bank0
  7505  1589  086E               	movf	??_getRxData,w
  7506  158A  0081               	movwf	1
  7507                           
  7508                           ;RF_Control_B1.c: 231: setTxData();
  7509  158B  318E  267B         	fcall	_setTxData
  7510                           
  7511                           ;RF_Control_B1.c: 235: } else {
  7512  158D  0008               	return
  7513  158E                     l8024:	
  7514                           
  7515                           ;RF_Control_B1.c: 236: char error = getMain_All_Error_Status(0);
  7516  158E  3000               	movlw	0
  7517  158F  3188  2000  3195   	fcall	_getMain_All_Error_Status
  7518  1592  0020               	movlb	0	; select bank0
  7519  1593  00EE               	movwf	??_getRxData
  7520  1594  086E               	movf	??_getRxData,w
  7521  1595  00EF               	movwf	getRxData@error
  7522                           
  7523                           ;RF_Control_B1.c: 237: if (error == 0) {
  7524  1596  08EF               	movf	getRxData@error,f
  7525  1597  1D03               	skipz
  7526  1598  2DDB               	goto	l2233
  7527                           
  7528                           ;RF_Control_B1.c: 238: if (RF1.Learn == 1) {
  7529  1599  0021               	movlb	1	; select bank1
  7530  159A  1F20               	btfss	_RF1^(0+128),6
  7531  159B  2DA7               	goto	l8036
  7532                           
  7533                           ;RF_Control_B1.c: 240: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  7534  159C  0023               	movlb	3	; select bank3
  7535  159D  08A0               	movf	_RF_Data^(0+384),f
  7536  159E  1D03               	skipz
  7537  159F  0008               	return
  7538  15A0  0821               	movf	(_RF_Data^(0+384)+1),w
  7539  15A1  3A64               	xorlw	100
  7540  15A2  1D03               	skipz
  7541  15A3  0008               	return
  7542                           
  7543                           ;RF_Control_B1.c: 241: setLog_Code();
  7544  15A4  319E  2676         	fcall	_setLog_Code
  7545                           
  7546                           ;RF_Control_B1.c: 242: }
  7547                           ;RF_Control_B1.c: 243: } else {
  7548  15A6  0008               	return
  7549  15A7                     l8036:	
  7550                           
  7551                           ;RF_Control_B1.c: 244: if (RF_Data[20] == 210 || RF_Data[20] == 0x0a) {
  7552  15A7  0023               	movlb	3	; select bank3
  7553  15A8  0834               	movf	(_RF_Data^(0+384)+20),w
  7554  15A9  3AD2               	xorlw	210
  7555  15AA  1903               	skipnz
  7556  15AB  2DB0               	goto	l8040
  7557  15AC  0834               	movf	(_RF_Data^(0+384)+20),w
  7558  15AD  3A0A               	xorlw	10
  7559  15AE  1D03               	skipz
  7560  15AF  0008               	return
  7561  15B0                     l8040:	
  7562                           
  7563                           ;RF_Control_B1.c: 246: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7564  15B0  08A0               	movf	_RF_Data^(0+384),f
  7565  15B1  1D03               	skipz
  7566  15B2  0008               	return
  7567  15B3  0821               	movf	(_RF_Data^(0+384)+1),w
  7568  15B4  3A02               	xorlw	2
  7569  15B5  1D03               	skipz
  7570  15B6  0008               	return
  7571                           
  7572                           ;RF_Control_B1.c: 248: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7573  15B7  0021               	movlb	1	; select bank1
  7574  15B8  086E               	movf	_product^(0+128),w
  7575  15B9  3E0C               	addlw	12
  7576  15BA  0086               	movwf	6
  7577  15BB  3002               	movlw	2	; select bank4/5
  7578  15BC  0087               	movwf	7
  7579  15BD  0023               	movlb	3	; select bank3
  7580  15BE  082C               	movf	(_RF_Data^(0+384)+12),w
  7581  15BF  0601               	xorwf	1,w
  7582  15C0  1D03               	skipz
  7583  15C1  0008               	return
  7584  15C2  0021               	movlb	1	; select bank1
  7585  15C3  086E               	movf	_product^(0+128),w
  7586  15C4  3E0D               	addlw	13
  7587  15C5  0086               	movwf	6
  7588  15C6  3002               	movlw	2	; select bank4/5
  7589  15C7  0087               	movwf	7
  7590  15C8  0023               	movlb	3	; select bank3
  7591  15C9  082D               	movf	(_RF_Data^(0+384)+13),w
  7592  15CA  0601               	xorwf	1,w
  7593  15CB  1D03               	skipz
  7594  15CC  0008               	return
  7595  15CD  0021               	movlb	1	; select bank1
  7596  15CE  086E               	movf	_product^(0+128),w
  7597  15CF  3E0E               	addlw	14
  7598  15D0  0086               	movwf	6
  7599  15D1  3002               	movlw	2	; select bank4/5
  7600  15D2  0087               	movwf	7
  7601  15D3  0023               	movlb	3	; select bank3
  7602  15D4  082E               	movf	(_RF_Data^(0+384)+14),w
  7603  15D5  0601               	xorwf	1,w
  7604  15D6  1D03               	skipz
  7605  15D7  0008               	return
  7606                           
  7607                           ;RF_Control_B1.c: 249: setControl_Lights_Table();
  7608  15D8  318B  23CD         	fcall	_setControl_Lights_Table
  7609                           
  7610                           ;RF_Control_B1.c: 250: }
  7611                           ;RF_Control_B1.c: 253: }
  7612                           ;RF_Control_B1.c: 264: }
  7613                           ;RF_Control_B1.c: 265: }
  7614                           ;RF_Control_B1.c: 266: } else {
  7615  15DA  0008               	return
  7616  15DB                     l2233:	
  7617                           
  7618                           ;RF_Control_B1.c: 267: __nop();
  7619  15DB  0000               	nop
  7620  15DC  0008               	return
  7621  15DD                     __end_of_getRxData:	
  7622                           
  7623                           	psect	text27
  7624  1E76                     __ptext27:	
  7625 ;; *************** function _setLog_Code *****************
  7626 ;; Defined at:
  7627 ;;		line 273 in file "../src/RF_Control_B1.c"
  7628 ;; Parameters:    Size  Location     Type
  7629 ;;		None
  7630 ;; Auto vars:     Size  Location     Type
  7631 ;;		None
  7632 ;; Return value:  Size  Location     Type
  7633 ;;		None               void
  7634 ;; Registers used:
  7635 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7636 ;; Tracked objects:
  7637 ;;		On entry : 0/0
  7638 ;;		On exit  : 0/0
  7639 ;;		Unchanged: 0/0
  7640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7643 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7644 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7645 ;;Total ram usage:        1 bytes
  7646 ;; Hardware stack levels used:    1
  7647 ;; Hardware stack levels required when called:    7
  7648 ;; This function calls:
  7649 ;;		_setBuz
  7650 ;;		_setMemory_LoopSave
  7651 ;;		_setMemory_Modify
  7652 ;;		_setProductData
  7653 ;; This function is called by:
  7654 ;;		_getRxData
  7655 ;; This function uses a non-reentrant model
  7656 ;;
  7657                           
  7658                           
  7659                           ;psect for function _setLog_Code
  7660  1E76                     _setLog_Code:	
  7661                           
  7662                           ;RF_Control_B1.c: 274: RF1.Learn = 0;
  7663                           
  7664                           ;incstack = 0
  7665                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7666  1E76  0021               	movlb	1	; select bank1
  7667  1E77  1320               	bcf	_RF1^(0+128),6
  7668                           
  7669                           ;RF_Control_B1.c: 275: setProductData(12, RF_Data[12]);
  7670  1E78  0023               	movlb	3	; select bank3
  7671  1E79  082C               	movf	(_RF_Data^(0+384)+12),w
  7672  1E7A  0020               	movlb	0	; select bank0
  7673  1E7B  00E5               	movwf	??_setLog_Code
  7674  1E7C  0865               	movf	??_setLog_Code,w
  7675  1E7D  00E2               	movwf	setProductData@value
  7676  1E7E  300C               	movlw	12
  7677  1E7F  31A7  2758  319E   	fcall	_setProductData
  7678                           
  7679                           ;RF_Control_B1.c: 276: setProductData(13, RF_Data[13]);
  7680  1E82  0023               	movlb	3	; select bank3
  7681  1E83  082D               	movf	(_RF_Data^(0+384)+13),w
  7682  1E84  0020               	movlb	0	; select bank0
  7683  1E85  00E5               	movwf	??_setLog_Code
  7684  1E86  0865               	movf	??_setLog_Code,w
  7685  1E87  00E2               	movwf	setProductData@value
  7686  1E88  300D               	movlw	13
  7687  1E89  31A7  2758  319E   	fcall	_setProductData
  7688                           
  7689                           ;RF_Control_B1.c: 277: setProductData(14, RF_Data[14]);
  7690  1E8C  0023               	movlb	3	; select bank3
  7691  1E8D  082E               	movf	(_RF_Data^(0+384)+14),w
  7692  1E8E  0020               	movlb	0	; select bank0
  7693  1E8F  00E5               	movwf	??_setLog_Code
  7694  1E90  0865               	movf	??_setLog_Code,w
  7695  1E91  00E2               	movwf	setProductData@value
  7696  1E92  300E               	movlw	14
  7697  1E93  31A7  2758  319E   	fcall	_setProductData
  7698                           
  7699                           ;RF_Control_B1.c: 278: setBuz(1, 100);
  7700  1E96  3064               	movlw	100
  7701  1E97  0020               	movlb	0	; select bank0
  7702  1E98  00A9               	movwf	setBuz@time
  7703  1E99  3000               	movlw	0
  7704  1E9A  00AA               	movwf	setBuz@time+1
  7705  1E9B  3001               	movlw	1
  7706  1E9C  3192  22D4  319E   	fcall	_setBuz
  7707                           
  7708                           ;RF_Control_B1.c: 279: if (myMain.First == 1) {
  7709  1E9F  0021               	movlb	1	; select bank1
  7710  1EA0  1EAF               	btfss	_myMain^(0+128),5
  7711  1EA1  2EA6               	goto	l2246
  7712                           
  7713                           ;RF_Control_B1.c: 280: setMemory_LoopSave(1);
  7714  1EA2  3001               	movlw	1
  7715  1EA3  3199  2159  319E   	fcall	_setMemory_LoopSave
  7716  1EA6                     l2246:	
  7717                           
  7718                           ;RF_Control_B1.c: 281: }
  7719                           ;RF_Control_B1.c: 282: setMemory_Modify(1);
  7720  1EA6  3001               	movlw	1
  7721  1EA7  3199  210D         	fcall	_setMemory_Modify
  7722  1EA9  0008               	return
  7723  1EAA                     __end_of_setLog_Code:	
  7724                           
  7725                           	psect	text28
  7726  1959                     __ptext28:	
  7727 ;; *************** function _setMemory_LoopSave *****************
  7728 ;; Defined at:
  7729 ;;		line 1089 in file "../src/MCU_B1.c"
  7730 ;; Parameters:    Size  Location     Type
  7731 ;;  command         1    wreg     unsigned char 
  7732 ;; Auto vars:     Size  Location     Type
  7733 ;;  command         1    1[BANK0 ] unsigned char 
  7734 ;; Return value:  Size  Location     Type
  7735 ;;		None               void
  7736 ;; Registers used:
  7737 ;;		wreg, status,2, status,0
  7738 ;; Tracked objects:
  7739 ;;		On entry : 0/0
  7740 ;;		On exit  : 0/0
  7741 ;;		Unchanged: 0/0
  7742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7744 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7745 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7746 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7747 ;;Total ram usage:        2 bytes
  7748 ;; Hardware stack levels used:    1
  7749 ;; Hardware stack levels required when called:    5
  7750 ;; This function calls:
  7751 ;;		Nothing
  7752 ;; This function is called by:
  7753 ;;		_setLog_Code
  7754 ;; This function uses a non-reentrant model
  7755 ;;
  7756                           
  7757                           
  7758                           ;psect for function _setMemory_LoopSave
  7759  1959                     _setMemory_LoopSave:	
  7760                           
  7761                           ;incstack = 0
  7762                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7763                           ;setMemory_LoopSave@command stored from wreg
  7764  1959  0020               	movlb	0	; select bank0
  7765  195A  00A1               	movwf	setMemory_LoopSave@command
  7766                           
  7767                           ;MCU_B1.c: 1090: Memory.LoopSave = command == 1 ? 1 : 0;
  7768  195B  0821               	movf	setMemory_LoopSave@command,w
  7769  195C  3A01               	xorlw	1
  7770  195D  3000               	movlw	0
  7771  195E  1903               	skipnz
  7772  195F  3001               	movlw	1
  7773  1960  00A0               	movwf	??_setMemory_LoopSave
  7774  1961  0DA0               	rlf	??_setMemory_LoopSave,f
  7775  1962  0DA0               	rlf	??_setMemory_LoopSave,f
  7776  1963  0024               	movlb	4	; select bank4
  7777  1964  0844               	movf	(_Memory^(0+512)+36),w
  7778  1965  0020               	movlb	0	; select bank0
  7779  1966  0620               	xorwf	??_setMemory_LoopSave,w
  7780  1967  39FB               	andlw	-5
  7781  1968  0620               	xorwf	??_setMemory_LoopSave,w
  7782  1969  0024               	movlb	4	; select bank4
  7783  196A  00C4               	movwf	(_Memory^(0+512)+36)
  7784  196B  0008               	return
  7785  196C                     __end_of_setMemory_LoopSave:	
  7786                           
  7787                           	psect	text29
  7788  0BCD                     __ptext29:	
  7789 ;; *************** function _setControl_Lights_Table *****************
  7790 ;; Defined at:
  7791 ;;		line 286 in file "../src/RF_Control_B1.c"
  7792 ;; Parameters:    Size  Location     Type
  7793 ;;		None
  7794 ;; Auto vars:     Size  Location     Type
  7795 ;;		None
  7796 ;; Return value:  Size  Location     Type
  7797 ;;		None               void
  7798 ;; Registers used:
  7799 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7800 ;; Tracked objects:
  7801 ;;		On entry : 0/0
  7802 ;;		On exit  : 0/0
  7803 ;;		Unchanged: 0/0
  7804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7805 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7806 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7807 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7808 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7809 ;;Total ram usage:        0 bytes
  7810 ;; Hardware stack levels used:    1
  7811 ;; Hardware stack levels required when called:    9
  7812 ;; This function calls:
  7813 ;;		_getDimmerLights_Status
  7814 ;;		_getMain_All_LightsStatus
  7815 ;;		_setCmd_Status
  7816 ;;		_setDimmerLights_SwOff
  7817 ;;		_setDimmerLights_SwOn
  7818 ;;		_setProductData
  7819 ;;		_setRFSW_AdjControl
  7820 ;;		_setRFSW_Control
  7821 ;;		_setRF_AdjControl
  7822 ;;		_setTxData
  7823 ;; This function is called by:
  7824 ;;		_getRxData
  7825 ;; This function uses a non-reentrant model
  7826 ;;
  7827                           
  7828                           
  7829                           ;psect for function _setControl_Lights_Table
  7830  0BCD                     _setControl_Lights_Table:	
  7831                           
  7832                           ;RF_Control_B1.c: 288: switch (RF_Data[15]) {
  7833                           
  7834                           ;incstack = 0
  7835                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7836  0BCD  2C4E               	goto	l7594
  7837  0BCE                     l7566:	
  7838                           ;RF_Control_B1.c: 290: case 0x00:
  7839                           
  7840                           
  7841                           ;RF_Control_B1.c: 291: if (getMain_All_LightsStatus() == 1) {
  7842  0BCE  3199  2133  318B   	fcall	_getMain_All_LightsStatus
  7843  0BD1  3A01               	xorlw	1
  7844  0BD2  1D03               	skipz
  7845  0BD3  2BF9               	goto	l7576
  7846                           
  7847                           ;RF_Control_B1.c: 294: if (getDimmerLights_Status(1) == 1) {
  7848  0BD4  3001               	movlw	1
  7849  0BD5  31A7  27EF  318B   	fcall	_getDimmerLights_Status
  7850  0BD8  3A01               	xorlw	1
  7851  0BD9  1D03               	skipz
  7852  0BDA  2BE3               	goto	l2253
  7853                           
  7854                           ;RF_Control_B1.c: 295: setDimmerLights_SwOn(1);
  7855  0BDB  3001               	movlw	1
  7856  0BDC  3188  2033  318B   	fcall	_setDimmerLights_SwOn
  7857                           
  7858                           ;RF_Control_B1.c: 296: setDimmerLights_SwOff(1);
  7859  0BDF  3001               	movlw	1
  7860  0BE0  319F  2751  318B   	fcall	_setDimmerLights_SwOff
  7861  0BE3                     l2253:	
  7862                           
  7863                           ;RF_Control_B1.c: 297: }
  7864                           ;RF_Control_B1.c: 300: if (getDimmerLights_Status(2) == 1) {
  7865  0BE3  3002               	movlw	2
  7866  0BE4  31A7  27EF  318B   	fcall	_getDimmerLights_Status
  7867  0BE7  3A01               	xorlw	1
  7868  0BE8  1D03               	skipz
  7869  0BE9  2BF2               	goto	l7574
  7870                           
  7871                           ;RF_Control_B1.c: 301: setDimmerLights_SwOn(2);
  7872  0BEA  3002               	movlw	2
  7873  0BEB  3188  2033  318B   	fcall	_setDimmerLights_SwOn
  7874                           
  7875                           ;RF_Control_B1.c: 302: setDimmerLights_SwOff(2);
  7876  0BEE  3002               	movlw	2
  7877  0BEF  319F  2751  318B   	fcall	_setDimmerLights_SwOff
  7878  0BF2                     l7574:	
  7879                           
  7880                           ;RF_Control_B1.c: 303: }
  7881                           ;RF_Control_B1.c: 312: setCmd_Status(1, 1);
  7882  0BF2  0020               	movlb	0	; select bank0
  7883  0BF3  01A0               	clrf	setCmd_Status@cmd
  7884  0BF4  0AA0               	incf	setCmd_Status@cmd,f
  7885  0BF5  3001               	movlw	1
  7886  0BF6  319A  2289         	fcall	_setCmd_Status
  7887                           
  7888                           ;RF_Control_B1.c: 313: } else {
  7889  0BF8  0008               	return
  7890  0BF9                     l7576:	
  7891                           
  7892                           ;RF_Control_B1.c: 314: setProductData(9, 0);
  7893  0BF9  0020               	movlb	0	; select bank0
  7894  0BFA  01E2               	clrf	setProductData@value
  7895  0BFB  3009               	movlw	9
  7896  0BFC  31A7  2758  318B   	fcall	_setProductData
  7897                           
  7898                           ;RF_Control_B1.c: 315: setProductData(11, 0);
  7899  0BFF  0020               	movlb	0	; select bank0
  7900  0C00  01E2               	clrf	setProductData@value
  7901  0C01  300B               	movlw	11
  7902  0C02  31A7  2758  318B   	fcall	_setProductData
  7903                           
  7904                           ;RF_Control_B1.c: 316: setProductData(15, 0);
  7905  0C05  0020               	movlb	0	; select bank0
  7906  0C06  01E2               	clrf	setProductData@value
  7907  0C07  300F               	movlw	15
  7908  0C08  31A7  2758  318B   	fcall	_setProductData
  7909                           
  7910                           ;RF_Control_B1.c: 317: setProductData(17, 0);
  7911  0C0B  0020               	movlb	0	; select bank0
  7912  0C0C  01E2               	clrf	setProductData@value
  7913  0C0D  3011               	movlw	17
  7914  0C0E  31A7  2758  318B   	fcall	_setProductData
  7915                           
  7916                           ;RF_Control_B1.c: 318: setTxData();
  7917  0C11  318E  267B         	fcall	_setTxData
  7918                           
  7919                           ;RF_Control_B1.c: 319: }
  7920                           ;RF_Control_B1.c: 320: break;
  7921  0C13  0008               	return
  7922  0C14                     l7578:	
  7923                           ;RF_Control_B1.c: 322: case 0x20:
  7924                           
  7925                           
  7926                           ;RF_Control_B1.c: 323: setProductData(9, 0);
  7927  0C14  0020               	movlb	0	; select bank0
  7928  0C15  01E2               	clrf	setProductData@value
  7929  0C16  3009               	movlw	9
  7930  0C17  31A7  2758  318B   	fcall	_setProductData
  7931                           
  7932                           ;RF_Control_B1.c: 324: setProductData(11, 0);
  7933  0C1A  0020               	movlb	0	; select bank0
  7934  0C1B  01E2               	clrf	setProductData@value
  7935  0C1C  300B               	movlw	11
  7936  0C1D  31A7  2758  318B   	fcall	_setProductData
  7937                           
  7938                           ;RF_Control_B1.c: 325: setProductData(15, product->Data[15]);
  7939  0C20  0021               	movlb	1	; select bank1
  7940  0C21  086E               	movf	_product^(0+128),w
  7941  0C22  0086               	movwf	6
  7942  0C23  3002               	movlw	2	; select bank4/5
  7943  0C24  0087               	movwf	7
  7944  0C25  3002               	movlw	2	; select bank4/5
  7945  0C26  3F4F               	moviw [15]fsr1
  7946  0C27  0020               	movlb	0	; select bank0
  7947  0C28  00E2               	movwf	setProductData@value
  7948  0C29  300F               	movlw	15
  7949  0C2A  31A7  2758  318B   	fcall	_setProductData
  7950                           
  7951                           ;RF_Control_B1.c: 326: setProductData(17, 0);
  7952  0C2D  0020               	movlb	0	; select bank0
  7953  0C2E  01E2               	clrf	setProductData@value
  7954  0C2F  3011               	movlw	17
  7955  0C30  31A7  2758  318B   	fcall	_setProductData
  7956                           
  7957                           ;RF_Control_B1.c: 327: setTxData();
  7958  0C33  318E  267B         	fcall	_setTxData
  7959                           
  7960                           ;RF_Control_B1.c: 328: break;
  7961  0C35  0008               	return
  7962  0C36                     l7580:	
  7963                           ;RF_Control_B1.c: 331: case 0x01:
  7964                           
  7965                           
  7966                           ;RF_Control_B1.c: 332: setRFSW_Control(1);
  7967  0C36  3001               	movlw	1
  7968  0C37  3193  2388         	fcall	_setRFSW_Control
  7969                           
  7970                           ;RF_Control_B1.c: 333: break;
  7971  0C39  0008               	return
  7972  0C3A                     l7582:	
  7973                           ;RF_Control_B1.c: 337: case 0x11:
  7974                           
  7975                           
  7976                           ;RF_Control_B1.c: 338: setRFSW_AdjControl(1);
  7977  0C3A  3001               	movlw	1
  7978  0C3B  3189  2127         	fcall	_setRFSW_AdjControl
  7979                           
  7980                           ;RF_Control_B1.c: 339: break;
  7981  0C3D  0008               	return
  7982  0C3E                     l7584:	
  7983                           ;RF_Control_B1.c: 341: case 0xd1:
  7984                           
  7985                           
  7986                           ;RF_Control_B1.c: 342: setRF_AdjControl(1);
  7987  0C3E  3001               	movlw	1
  7988  0C3F  319F  278A         	fcall	_setRF_AdjControl
  7989                           
  7990                           ;RF_Control_B1.c: 343: break;
  7991  0C41  0008               	return
  7992  0C42                     l7586:	
  7993                           ;RF_Control_B1.c: 348: case 0x02:
  7994                           
  7995                           
  7996                           ;RF_Control_B1.c: 349: setRFSW_Control(2);
  7997  0C42  3002               	movlw	2
  7998  0C43  3193  2388         	fcall	_setRFSW_Control
  7999                           
  8000                           ;RF_Control_B1.c: 350: break;
  8001  0C45  0008               	return
  8002  0C46                     l7588:	
  8003                           ;RF_Control_B1.c: 353: case 0x21:
  8004                           
  8005                           
  8006                           ;RF_Control_B1.c: 354: setRFSW_AdjControl(2);
  8007  0C46  3002               	movlw	2
  8008  0C47  3189  2127         	fcall	_setRFSW_AdjControl
  8009                           
  8010                           ;RF_Control_B1.c: 355: break;
  8011  0C49  0008               	return
  8012  0C4A                     l7590:	
  8013                           ;RF_Control_B1.c: 357: case 0xd2:
  8014                           
  8015                           
  8016                           ;RF_Control_B1.c: 358: setRF_AdjControl(2);
  8017  0C4A  3002               	movlw	2
  8018  0C4B  319F  278A         	fcall	_setRF_AdjControl
  8019                           
  8020                           ;RF_Control_B1.c: 376: }
  8021                           
  8022                           ;RF_Control_B1.c: 359: break;
  8023  0C4D  0008               	return
  8024  0C4E                     l7594:	
  8025  0C4E  0023               	movlb	3	; select bank3
  8026  0C4F  082F               	movf	(_RF_Data^(0+384)+15),w
  8027                           
  8028                           ; Switch size 1, requested type "space"
  8029                           ; Number of cases is 8, Range of values is 0 to 210
  8030                           ; switch strategies available:
  8031                           ; Name         Instructions Cycles
  8032                           ; simple_byte           25    13 (average)
  8033                           ; jumptable            260     6 (fixed)
  8034                           ;	Chosen strategy is simple_byte
  8035  0C50  3A00               	xorlw	0	; case 0
  8036  0C51  1903               	skipnz
  8037  0C52  2BCE               	goto	l7566
  8038  0C53  3A01               	xorlw	1	; case 1
  8039  0C54  1903               	skipnz
  8040  0C55  2C36               	goto	l7580
  8041  0C56  3A03               	xorlw	3	; case 2
  8042  0C57  1903               	skipnz
  8043  0C58  2C42               	goto	l7586
  8044  0C59  3A13               	xorlw	19	; case 17
  8045  0C5A  1903               	skipnz
  8046  0C5B  2C3A               	goto	l7582
  8047  0C5C  3A31               	xorlw	49	; case 32
  8048  0C5D  1903               	skipnz
  8049  0C5E  2C14               	goto	l7578
  8050  0C5F  3A01               	xorlw	1	; case 33
  8051  0C60  1903               	skipnz
  8052  0C61  2C46               	goto	l7588
  8053  0C62  3AF0               	xorlw	240	; case 209
  8054  0C63  1903               	skipnz
  8055  0C64  2C3E               	goto	l7584
  8056  0C65  3A03               	xorlw	3	; case 210
  8057  0C66  1903               	skipnz
  8058  0C67  2C4A               	goto	l7590
  8059  0C68  2C69               	goto	l2264
  8060  0C69                     l2264:	
  8061  0C69  0008               	return
  8062  0C6A                     __end_of_setControl_Lights_Table:	
  8063                           
  8064                           	psect	text30
  8065  1F8A                     __ptext30:	
  8066 ;; *************** function _setRF_AdjControl *****************
  8067 ;; Defined at:
  8068 ;;		line 457 in file "../src/RF_Control_B1.c"
  8069 ;; Parameters:    Size  Location     Type
  8070 ;;  sw              1    wreg     unsigned char 
  8071 ;; Auto vars:     Size  Location     Type
  8072 ;;  sw              1    7[BANK0 ] unsigned char 
  8073 ;;  dimmingStatu    1    6[BANK0 ] unsigned char 
  8074 ;;  status          1    5[BANK0 ] unsigned char 
  8075 ;; Return value:  Size  Location     Type
  8076 ;;		None               void
  8077 ;; Registers used:
  8078 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8079 ;; Tracked objects:
  8080 ;;		On entry : 0/0
  8081 ;;		On exit  : 0/0
  8082 ;;		Unchanged: 0/0
  8083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8085 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8086 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8087 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8088 ;;Total ram usage:        4 bytes
  8089 ;; Hardware stack levels used:    1
  8090 ;; Hardware stack levels required when called:    7
  8091 ;; This function calls:
  8092 ;;		_DimmerLights_SelectPointer
  8093 ;;		_getDimmerIntr_Dimming_Sw
  8094 ;;		_getDimmerLights_Status
  8095 ;; This function is called by:
  8096 ;;		_setControl_Lights_Table
  8097 ;; This function uses a non-reentrant model
  8098 ;;
  8099                           
  8100                           
  8101                           ;psect for function _setRF_AdjControl
  8102  1F8A                     _setRF_AdjControl:	
  8103                           
  8104                           ;incstack = 0
  8105                           ; Regs used in _setRF_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8106                           ;setRF_AdjControl@sw stored from wreg
  8107  1F8A  0020               	movlb	0	; select bank0
  8108  1F8B  00A7               	movwf	setRF_AdjControl@sw
  8109                           
  8110                           ;RF_Control_B1.c: 458: char status = 0;
  8111  1F8C  01A5               	clrf	setRF_AdjControl@status
  8112                           
  8113                           ;RF_Control_B1.c: 460: status = getDimmerLights_Status(sw);
  8114  1F8D  0827               	movf	setRF_AdjControl@sw,w
  8115  1F8E  31A7  27EF  319F   	fcall	_getDimmerLights_Status
  8116  1F91  0020               	movlb	0	; select bank0
  8117  1F92  00A4               	movwf	??_setRF_AdjControl
  8118  1F93  0824               	movf	??_setRF_AdjControl,w
  8119  1F94  00A5               	movwf	setRF_AdjControl@status
  8120                           
  8121                           ;RF_Control_B1.c: 461: char dimmingStatus = 0;
  8122  1F95  01A6               	clrf	setRF_AdjControl@dimmingStatus
  8123                           
  8124                           ;RF_Control_B1.c: 462: dimmingStatus = getDimmerIntr_Dimming_Sw(sw);
  8125  1F96  0827               	movf	setRF_AdjControl@sw,w
  8126  1F97  319A  2270  319F   	fcall	_getDimmerIntr_Dimming_Sw
  8127  1F9A  0020               	movlb	0	; select bank0
  8128  1F9B  00A4               	movwf	??_setRF_AdjControl
  8129  1F9C  0824               	movf	??_setRF_AdjControl,w
  8130  1F9D  00A6               	movwf	setRF_AdjControl@dimmingStatus
  8131                           
  8132                           ;RF_Control_B1.c: 464: if (status == 1) {
  8133  1F9E  0825               	movf	setRF_AdjControl@status,w
  8134  1F9F  3A01               	xorlw	1
  8135  1FA0  1D03               	skipz
  8136  1FA1  0008               	return
  8137                           
  8138                           ;RF_Control_B1.c: 465: if (dimmingStatus == 0) {
  8139  1FA2  08A6               	movf	setRF_AdjControl@dimmingStatus,f
  8140  1FA3  1D03               	skipz
  8141  1FA4  2FB4               	goto	l7294
  8142                           
  8143                           ;RF_Control_B1.c: 466: DimmerLights_SelectPointer(sw);
  8144  1FA5  0827               	movf	setRF_AdjControl@sw,w
  8145  1FA6  319A  2214         	fcall	_DimmerLights_SelectPointer
  8146                           
  8147                           ;RF_Control_B1.c: 467: DimmerLights->DimmingTrigger = 1;
  8148  1FA8  0021               	movlb	1	; select bank1
  8149  1FA9  085A               	movf	_DimmerLights^(0+128),w
  8150  1FAA  0086               	movwf	6
  8151  1FAB  3001               	movlw	1	; select bank2/3
  8152  1FAC  0087               	movwf	7
  8153  1FAD  1601               	bsf	1,4
  8154                           
  8155                           ;RF_Control_B1.c: 468: DimmerLights->DimmingSwitch = 1;
  8156  1FAE  085A               	movf	_DimmerLights^(0+128),w
  8157  1FAF  0086               	movwf	6
  8158  1FB0  3001               	movlw	1	; select bank2/3
  8159  1FB1  0087               	movwf	7
  8160  1FB2  1681               	bsf	1,5
  8161                           
  8162                           ;RF_Control_B1.c: 470: } else {
  8163  1FB3  0008               	return
  8164  1FB4                     l7294:	
  8165                           
  8166                           ;RF_Control_B1.c: 471: DimmerLights_SelectPointer(sw);
  8167  1FB4  0020               	movlb	0	; select bank0
  8168  1FB5  0827               	movf	setRF_AdjControl@sw,w
  8169  1FB6  319A  2214         	fcall	_DimmerLights_SelectPointer
  8170                           
  8171                           ;RF_Control_B1.c: 472: DimmerLights->DimmingTrigger = 1;
  8172  1FB8  0021               	movlb	1	; select bank1
  8173  1FB9  085A               	movf	_DimmerLights^(0+128),w
  8174  1FBA  0086               	movwf	6
  8175  1FBB  3001               	movlw	1	; select bank2/3
  8176  1FBC  0087               	movwf	7
  8177  1FBD  1601               	bsf	1,4
  8178                           
  8179                           ;RF_Control_B1.c: 473: DimmerLights->DimmingSwitch = 0;
  8180  1FBE  085A               	movf	_DimmerLights^(0+128),w
  8181  1FBF  0086               	movwf	6
  8182  1FC0  3001               	movlw	1	; select bank2/3
  8183  1FC1  0087               	movwf	7
  8184  1FC2  1281               	bcf	1,5
  8185  1FC3  0008               	return
  8186  1FC4                     __end_of_setRF_AdjControl:	
  8187                           
  8188                           	psect	text31
  8189  1388                     __ptext31:	
  8190 ;; *************** function _setRFSW_Control *****************
  8191 ;; Defined at:
  8192 ;;		line 384 in file "../src/RF_Control_B1.c"
  8193 ;; Parameters:    Size  Location     Type
  8194 ;;  sw              1    wreg     unsigned char 
  8195 ;; Auto vars:     Size  Location     Type
  8196 ;;  sw              1    2[BANK1 ] unsigned char 
  8197 ;;  rfDimming       1    1[BANK1 ] unsigned char 
  8198 ;;  status          1    0[BANK1 ] unsigned char 
  8199 ;; Return value:  Size  Location     Type
  8200 ;;		None               void
  8201 ;; Registers used:
  8202 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8203 ;; Tracked objects:
  8204 ;;		On entry : 0/0
  8205 ;;		On exit  : 0/0
  8206 ;;		Unchanged: 0/0
  8207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8209 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8210 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8211 ;;      Totals:         0       1       3       0       0       0       0       0       0       0       0       0       
      +0       0
  8212 ;;Total ram usage:        4 bytes
  8213 ;; Hardware stack levels used:    1
  8214 ;; Hardware stack levels required when called:    8
  8215 ;; This function calls:
  8216 ;;		_getDimmerLights_Status
  8217 ;;		_setBuz
  8218 ;;		_setDelayOff_GO
  8219 ;;		_setDimmerLights_SwOff
  8220 ;;		_setDimmerLights_SwOn
  8221 ;;		_setRF_DimmerLights
  8222 ;;		_setTxData
  8223 ;; This function is called by:
  8224 ;;		_setControl_Lights_Table
  8225 ;; This function uses a non-reentrant model
  8226 ;;
  8227                           
  8228                           
  8229                           ;psect for function _setRFSW_Control
  8230  1388                     _setRFSW_Control:	
  8231                           
  8232                           ;incstack = 0
  8233                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8234                           ;setRFSW_Control@sw stored from wreg
  8235  1388  0021               	movlb	1	; select bank1
  8236  1389  00E7               	movwf	setRFSW_Control@sw^(0+128)
  8237                           
  8238                           ;RF_Control_B1.c: 385: char status = 0;
  8239  138A  01E5               	clrf	setRFSW_Control@status^(0+128)
  8240                           
  8241                           ;RF_Control_B1.c: 386: char rfDimming = 0;
  8242  138B  01E6               	clrf	setRFSW_Control@rfDimming^(0+128)
  8243                           
  8244                           ;RF_Control_B1.c: 387: rfDimming = RF1.flagDimming == 1 ? 1 : 0;
  8245  138C  3000               	movlw	0
  8246  138D  1822               	btfsc	(_RF1^(0+128)+2),0
  8247  138E  3001               	movlw	1
  8248  138F  00E6               	movwf	setRFSW_Control@rfDimming^(0+128)
  8249                           
  8250                           ;RF_Control_B1.c: 389: if (rfDimming == 0) {
  8251  1390  08E6               	movf	setRFSW_Control@rfDimming^(0+128),f
  8252  1391  1D03               	skipz
  8253  1392  2BD2               	goto	l2267
  8254                           
  8255                           ;RF_Control_B1.c: 390: if (RF_Data[16] == 0x80) {
  8256  1393  0023               	movlb	3	; select bank3
  8257  1394  0830               	movf	(_RF_Data^(0+384)+16),w
  8258  1395  3A80               	xorlw	128
  8259  1396  1D03               	skipz
  8260  1397  2BC5               	goto	l7242
  8261                           
  8262                           ;RF_Control_B1.c: 391: setDelayOff_GO(sw, 1, RF_Data[17]);
  8263  1398  0020               	movlb	0	; select bank0
  8264  1399  01E5               	clrf	setDelayOff_GO@command
  8265  139A  0AE5               	incf	setDelayOff_GO@command,f
  8266  139B  0023               	movlb	3	; select bank3
  8267  139C  0831               	movf	(_RF_Data^(0+384)+17),w
  8268  139D  0020               	movlb	0	; select bank0
  8269  139E  00ED               	movwf	??_setRFSW_Control
  8270  139F  086D               	movf	??_setRFSW_Control,w
  8271  13A0  00E6               	movwf	setDelayOff_GO@value
  8272  13A1  0021               	movlb	1	; select bank1
  8273  13A2  0867               	movf	setRFSW_Control@sw^(0+128),w
  8274  13A3  318A  22B4  3193   	fcall	_setDelayOff_GO
  8275                           
  8276                           ;RF_Control_B1.c: 392: if (getDimmerLights_Status(sw) == 1) {
  8277  13A6  0021               	movlb	1	; select bank1
  8278  13A7  0867               	movf	setRFSW_Control@sw^(0+128),w
  8279  13A8  31A7  27EF  3193   	fcall	_getDimmerLights_Status
  8280  13AB  3A01               	xorlw	1
  8281  13AC  1D03               	skipz
  8282  13AD  2BC5               	goto	l7242
  8283                           
  8284                           ;RF_Control_B1.c: 393: setBuz(1, 100);
  8285  13AE  3064               	movlw	100
  8286  13AF  0020               	movlb	0	; select bank0
  8287  13B0  00A9               	movwf	setBuz@time
  8288  13B1  3000               	movlw	0
  8289  13B2  00AA               	movwf	setBuz@time+1
  8290  13B3  3001               	movlw	1
  8291  13B4  3192  22D4  3193   	fcall	_setBuz
  8292                           
  8293                           ;RF_Control_B1.c: 394: setRF_DimmerLights(sw, 1);
  8294  13B7  0020               	movlb	0	; select bank0
  8295  13B8  01E5               	clrf	setRF_DimmerLights@on
  8296  13B9  0AE5               	incf	setRF_DimmerLights@on,f
  8297  13BA  0021               	movlb	1	; select bank1
  8298  13BB  0867               	movf	setRFSW_Control@sw^(0+128),w
  8299  13BC  3195  2511  3193   	fcall	_setRF_DimmerLights
  8300                           
  8301                           ;RF_Control_B1.c: 395: setTxData();
  8302  13BF  318E  267B  3193   	fcall	_setTxData
  8303                           
  8304                           ;RF_Control_B1.c: 396: status = 1;
  8305  13C2  0021               	movlb	1	; select bank1
  8306  13C3  01E5               	clrf	setRFSW_Control@status^(0+128)
  8307  13C4  0AE5               	incf	setRFSW_Control@status^(0+128),f
  8308  13C5                     l7242:	
  8309                           
  8310                           ;RF_Control_B1.c: 397: }
  8311                           ;RF_Control_B1.c: 398: }
  8312                           ;RF_Control_B1.c: 400: if (status == 0) {
  8313  13C5  0021               	movlb	1	; select bank1
  8314  13C6  08E5               	movf	setRFSW_Control@status^(0+128),f
  8315  13C7  1D03               	skipz
  8316  13C8  0008               	return
  8317                           
  8318                           ;RF_Control_B1.c: 402: setDimmerLights_SwOn(sw);
  8319  13C9  0867               	movf	setRFSW_Control@sw^(0+128),w
  8320  13CA  3188  2033  3193   	fcall	_setDimmerLights_SwOn
  8321                           
  8322                           ;RF_Control_B1.c: 403: setDimmerLights_SwOff(sw);
  8323  13CD  0021               	movlb	1	; select bank1
  8324  13CE  0867               	movf	setRFSW_Control@sw^(0+128),w
  8325  13CF  319F  2751         	fcall	_setDimmerLights_SwOff
  8326                           
  8327                           ;RF_Control_B1.c: 405: }
  8328                           ;RF_Control_B1.c: 406: } else {
  8329  13D1  0008               	return
  8330  13D2                     l2267:	
  8331                           
  8332                           ;RF_Control_B1.c: 408: RF1.flagDimming = 0;
  8333  13D2  1022               	bcf	(_RF1^(0+128)+2),0
  8334                           
  8335                           ;RF_Control_B1.c: 409: DimmerLights->DimmingTrigger = 1;
  8336  13D3  085A               	movf	_DimmerLights^(0+128),w
  8337  13D4  0086               	movwf	6
  8338  13D5  3001               	movlw	1	; select bank2/3
  8339  13D6  0087               	movwf	7
  8340  13D7  1601               	bsf	1,4
  8341                           
  8342                           ;RF_Control_B1.c: 410: DimmerLights->DimmingSwitch = 0;
  8343  13D8  085A               	movf	_DimmerLights^(0+128),w
  8344  13D9  0086               	movwf	6
  8345  13DA  3001               	movlw	1	; select bank2/3
  8346  13DB  0087               	movwf	7
  8347  13DC  1281               	bcf	1,5
  8348                           
  8349                           ;RF_Control_B1.c: 411: setBuz(1, 100);
  8350  13DD  3064               	movlw	100
  8351  13DE  0020               	movlb	0	; select bank0
  8352  13DF  00A9               	movwf	setBuz@time
  8353  13E0  3000               	movlw	0
  8354  13E1  00AA               	movwf	setBuz@time+1
  8355  13E2  3001               	movlw	1
  8356  13E3  3192  22D4         	fcall	_setBuz
  8357  13E5  0008               	return
  8358  13E6                     __end_of_setRFSW_Control:	
  8359                           
  8360                           	psect	text32
  8361  0927                     __ptext32:	
  8362 ;; *************** function _setRFSW_AdjControl *****************
  8363 ;; Defined at:
  8364 ;;		line 416 in file "../src/RF_Control_B1.c"
  8365 ;; Parameters:    Size  Location     Type
  8366 ;;  sw              1    wreg     unsigned char 
  8367 ;; Auto vars:     Size  Location     Type
  8368 ;;  sw              1   72[BANK0 ] unsigned char 
  8369 ;;  status          1   71[BANK0 ] unsigned char 
  8370 ;; Return value:  Size  Location     Type
  8371 ;;		None               void
  8372 ;; Registers used:
  8373 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8374 ;; Tracked objects:
  8375 ;;		On entry : 0/0
  8376 ;;		On exit  : 0/0
  8377 ;;		Unchanged: 0/0
  8378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8379 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8380 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8381 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8382 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8383 ;;Total ram usage:        4 bytes
  8384 ;; Hardware stack levels used:    1
  8385 ;; Hardware stack levels required when called:    8
  8386 ;; This function calls:
  8387 ;;		_getDimmerLights_PercentToValue
  8388 ;;		_getDimmerLights_Status
  8389 ;;		_setDimmerIntr_Dimming_RF
  8390 ;;		_setDimmerIntr_MaxmumValue
  8391 ;;		_setDimmerLights_DimmingRun
  8392 ;;		_setDimmerLights_SwOff
  8393 ;;		_setDimmerLights_SwOn
  8394 ;;		_setMemory_Modify
  8395 ;;		_setProductData
  8396 ;;		_setTxData
  8397 ;; This function is called by:
  8398 ;;		_setControl_Lights_Table
  8399 ;; This function uses a non-reentrant model
  8400 ;;
  8401                           
  8402                           
  8403                           ;psect for function _setRFSW_AdjControl
  8404  0927                     _setRFSW_AdjControl:	
  8405                           
  8406                           ;incstack = 0
  8407                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8408                           ;setRFSW_AdjControl@sw stored from wreg
  8409  0927  0020               	movlb	0	; select bank0
  8410  0928  00E8               	movwf	setRFSW_AdjControl@sw
  8411                           
  8412                           ;RF_Control_B1.c: 417: char status = 0;
  8413  0929  01E7               	clrf	setRFSW_AdjControl@status
  8414                           
  8415                           ;RF_Control_B1.c: 419: status = getDimmerLights_Status(sw);
  8416  092A  0868               	movf	setRFSW_AdjControl@sw,w
  8417  092B  31A7  27EF  3189   	fcall	_getDimmerLights_Status
  8418  092E  0020               	movlb	0	; select bank0
  8419  092F  00E5               	movwf	??_setRFSW_AdjControl
  8420  0930  0865               	movf	??_setRFSW_AdjControl,w
  8421  0931  00E7               	movwf	setRFSW_AdjControl@status
  8422                           
  8423                           ;RF_Control_B1.c: 421: if (RF_Data[9] > 0x64) {
  8424  0932  3065               	movlw	101
  8425  0933  0023               	movlb	3	; select bank3
  8426  0934  0229               	subwf	(_RF_Data^(0+384)+9),w
  8427  0935  1C03               	skipc
  8428  0936  293E               	goto	l7258
  8429                           
  8430                           ;RF_Control_B1.c: 422: RF_Data[9] = 0x64;
  8431  0937  3064               	movlw	100
  8432  0938  0020               	movlb	0	; select bank0
  8433  0939  00E5               	movwf	??_setRFSW_AdjControl
  8434  093A  0865               	movf	??_setRFSW_AdjControl,w
  8435  093B  0023               	movlb	3	; select bank3
  8436  093C  00A9               	movwf	(_RF_Data^(0+384)+9)
  8437                           
  8438                           ;RF_Control_B1.c: 423: } else if (RF_Data[9] < 0x01) {
  8439  093D  2943               	goto	l7262
  8440  093E                     l7258:	
  8441  093E  08A9               	movf	(_RF_Data^(0+384)+9),f
  8442  093F  1D03               	skipz
  8443  0940  2943               	goto	l7262
  8444                           
  8445                           ;RF_Control_B1.c: 424: RF_Data[9] = 0x01;
  8446  0941  01A9               	clrf	(_RF_Data^(0+384)+9)
  8447  0942  0AA9               	incf	(_RF_Data^(0+384)+9),f
  8448  0943                     l7262:	
  8449                           
  8450                           ;RF_Control_B1.c: 425: }
  8451                           ;RF_Control_B1.c: 426: setProductData(9, RF_Data[9]);
  8452  0943  0829               	movf	(_RF_Data^(0+384)+9),w
  8453  0944  0020               	movlb	0	; select bank0
  8454  0945  00E5               	movwf	??_setRFSW_AdjControl
  8455  0946  0865               	movf	??_setRFSW_AdjControl,w
  8456  0947  00E2               	movwf	setProductData@value
  8457  0948  3009               	movlw	9
  8458  0949  31A7  2758  3189   	fcall	_setProductData
  8459                           
  8460                           ;RF_Control_B1.c: 427: setProductData(11, sw);
  8461  094C  0020               	movlb	0	; select bank0
  8462  094D  0868               	movf	setRFSW_AdjControl@sw,w
  8463  094E  00E5               	movwf	??_setRFSW_AdjControl
  8464  094F  0865               	movf	??_setRFSW_AdjControl,w
  8465  0950  00E2               	movwf	setProductData@value
  8466  0951  300B               	movlw	11
  8467  0952  31A7  2758  3189   	fcall	_setProductData
  8468                           
  8469                           ;RF_Control_B1.c: 428: setProductData(17, product->Data[26 + sw]);
  8470  0955  0020               	movlb	0	; select bank0
  8471  0956  0868               	movf	setRFSW_AdjControl@sw,w
  8472  0957  3E1A               	addlw	26
  8473  0958  0021               	movlb	1	; select bank1
  8474  0959  076E               	addwf	_product^(0+128),w
  8475  095A  0020               	movlb	0	; select bank0
  8476  095B  00E5               	movwf	??_setRFSW_AdjControl
  8477  095C  0865               	movf	??_setRFSW_AdjControl,w
  8478  095D  0086               	movwf	6
  8479  095E  3002               	movlw	2	; select bank4/5
  8480  095F  0087               	movwf	7
  8481  0960  0801               	movf	1,w
  8482  0961  00E6               	movwf	??_setRFSW_AdjControl+1
  8483  0962  0866               	movf	??_setRFSW_AdjControl+1,w
  8484  0963  00E2               	movwf	setProductData@value
  8485  0964  3011               	movlw	17
  8486  0965  31A7  2758  3189   	fcall	_setProductData
  8487                           
  8488                           ;RF_Control_B1.c: 429: setProductData((20 + sw), RF_Data[9]);
  8489  0968  0023               	movlb	3	; select bank3
  8490  0969  0829               	movf	(_RF_Data^(0+384)+9),w
  8491  096A  0020               	movlb	0	; select bank0
  8492  096B  00E5               	movwf	??_setRFSW_AdjControl
  8493  096C  0865               	movf	??_setRFSW_AdjControl,w
  8494  096D  00E2               	movwf	setProductData@value
  8495  096E  0868               	movf	setRFSW_AdjControl@sw,w
  8496  096F  3E14               	addlw	20
  8497  0970  31A7  2758  3189   	fcall	_setProductData
  8498                           
  8499                           ;RF_Control_B1.c: 437: setMemory_Modify(1);
  8500  0973  3001               	movlw	1
  8501  0974  3199  210D  3189   	fcall	_setMemory_Modify
  8502                           
  8503                           ;RF_Control_B1.c: 441: if (status == 1) {
  8504  0977  0020               	movlb	0	; select bank0
  8505  0978  0867               	movf	setRFSW_AdjControl@status,w
  8506  0979  3A01               	xorlw	1
  8507  097A  1D03               	skipz
  8508  097B  2993               	goto	l7272
  8509                           
  8510                           ;RF_Control_B1.c: 442: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(RF_D
      +                          ata[9]));
  8511  097C  0023               	movlb	3	; select bank3
  8512  097D  0829               	movf	(_RF_Data^(0+384)+9),w
  8513  097E  3194  2447  3189   	fcall	_getDimmerLights_PercentToValue
  8514  0981  0020               	movlb	0	; select bank0
  8515  0982  00E5               	movwf	??_setRFSW_AdjControl
  8516  0983  0865               	movf	??_setRFSW_AdjControl,w
  8517  0984  00E2               	movwf	setDimmerIntr_MaxmumValue@value
  8518  0985  0868               	movf	setRFSW_AdjControl@sw,w
  8519  0986  319A  222B  3189   	fcall	_setDimmerIntr_MaxmumValue
  8520                           
  8521                           ;RF_Control_B1.c: 443: setDimmerIntr_Dimming_RF(sw, 1);
  8522  0989  0020               	movlb	0	; select bank0
  8523  098A  01A0               	clrf	setDimmerIntr_Dimming_RF@command
  8524  098B  0AA0               	incf	setDimmerIntr_Dimming_RF@command,f
  8525  098C  0868               	movf	setRFSW_AdjControl@sw,w
  8526  098D  319E  2618  3189   	fcall	_setDimmerIntr_Dimming_RF
  8527                           
  8528                           ;RF_Control_B1.c: 444: setTxData();
  8529  0990  318E  267B         	fcall	_setTxData
  8530                           
  8531                           ;RF_Control_B1.c: 446: } else if (status == 0) {
  8532  0992  0008               	return
  8533  0993                     l7272:	
  8534  0993  0020               	movlb	0	; select bank0
  8535  0994  08E7               	movf	setRFSW_AdjControl@status,f
  8536  0995  1D03               	skipz
  8537  0996  0008               	return
  8538                           
  8539                           ;RF_Control_B1.c: 450: setDimmerLights_DimmingRun(sw, 1);
  8540  0997  01A2               	clrf	setDimmerLights_DimmingRun@command
  8541  0998  0AA2               	incf	setDimmerLights_DimmingRun@command,f
  8542  0999  0868               	movf	setRFSW_AdjControl@sw,w
  8543  099A  319B  230A  3189   	fcall	_setDimmerLights_DimmingRun
  8544                           
  8545                           ;RF_Control_B1.c: 451: setDimmerLights_SwOn(sw);
  8546  099D  0020               	movlb	0	; select bank0
  8547  099E  0868               	movf	setRFSW_AdjControl@sw,w
  8548  099F  3188  2033  3189   	fcall	_setDimmerLights_SwOn
  8549                           
  8550                           ;RF_Control_B1.c: 452: setDimmerLights_SwOff(sw);
  8551  09A2  0020               	movlb	0	; select bank0
  8552  09A3  0868               	movf	setRFSW_AdjControl@sw,w
  8553  09A4  319F  2751         	fcall	_setDimmerLights_SwOff
  8554  09A6  0008               	return
  8555  09A7                     __end_of_setRFSW_AdjControl:	
  8556                           
  8557                           	psect	text33
  8558  1B0A                     __ptext33:	
  8559 ;; *************** function _setDimmerLights_DimmingRun *****************
  8560 ;; Defined at:
  8561 ;;		line 1141 in file "../src/Dimmer_B1.c"
  8562 ;; Parameters:    Size  Location     Type
  8563 ;;  lights          1    wreg     unsigned char 
  8564 ;;  command         1    2[BANK0 ] unsigned char 
  8565 ;; Auto vars:     Size  Location     Type
  8566 ;;  lights          1    4[BANK0 ] unsigned char 
  8567 ;; Return value:  Size  Location     Type
  8568 ;;		None               void
  8569 ;; Registers used:
  8570 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8571 ;; Tracked objects:
  8572 ;;		On entry : 0/0
  8573 ;;		On exit  : 0/0
  8574 ;;		Unchanged: 0/0
  8575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8576 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8577 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8578 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8579 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8580 ;;Total ram usage:        3 bytes
  8581 ;; Hardware stack levels used:    1
  8582 ;; Hardware stack levels required when called:    6
  8583 ;; This function calls:
  8584 ;;		_DimmerLights_SelectPointer
  8585 ;; This function is called by:
  8586 ;;		_setRFSW_AdjControl
  8587 ;; This function uses a non-reentrant model
  8588 ;;
  8589                           
  8590                           
  8591                           ;psect for function _setDimmerLights_DimmingRun
  8592  1B0A                     _setDimmerLights_DimmingRun:	
  8593                           
  8594                           ;incstack = 0
  8595                           ; Regs used in _setDimmerLights_DimmingRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  8596                           ;setDimmerLights_DimmingRun@lights stored from wreg
  8597  1B0A  0020               	movlb	0	; select bank0
  8598  1B0B  00A4               	movwf	setDimmerLights_DimmingRun@lights
  8599                           
  8600                           ;Dimmer_B1.c: 1142: DimmerLights_SelectPointer(lights);
  8601  1B0C  0824               	movf	setDimmerLights_DimmingRun@lights,w
  8602  1B0D  319A  2214         	fcall	_DimmerLights_SelectPointer
  8603                           
  8604                           ;Dimmer_B1.c: 1143: DimmerLights->DimmingRun = command == 1 ? 1 : 0;
  8605  1B0F  0020               	movlb	0	; select bank0
  8606  1B10  0822               	movf	setDimmerLights_DimmingRun@command,w
  8607  1B11  3A01               	xorlw	1
  8608  1B12  3000               	movlw	0
  8609  1B13  1903               	skipnz
  8610  1B14  3001               	movlw	1
  8611  1B15  00A3               	movwf	??_setDimmerLights_DimmingRun
  8612  1B16  0021               	movlb	1	; select bank1
  8613  1B17  0A5A               	incf	_DimmerLights^(0+128),w
  8614  1B18  0086               	movwf	6
  8615  1B19  3001               	movlw	1	; select bank2/3
  8616  1B1A  0087               	movwf	7
  8617  1B1B  0020               	movlb	0	; select bank0
  8618  1B1C  0EA3               	swapf	??_setDimmerLights_DimmingRun,f
  8619  1B1D  0DA3               	rlf	??_setDimmerLights_DimmingRun,f
  8620  1B1E  0DA3               	rlf	??_setDimmerLights_DimmingRun,f
  8621  1B1F  0801               	movf	1,w
  8622  1B20  0623               	xorwf	??_setDimmerLights_DimmingRun,w
  8623  1B21  39BF               	andlw	-65
  8624  1B22  0623               	xorwf	??_setDimmerLights_DimmingRun,w
  8625  1B23  0081               	movwf	1
  8626  1B24  0008               	return
  8627  1B25                     __end_of_setDimmerLights_DimmingRun:	
  8628                           
  8629                           	psect	text34
  8630  1000                     __ptext34:	
  8631 ;; *************** function _getRF_KeyStatus *****************
  8632 ;; Defined at:
  8633 ;;		line 166 in file "../src/RF_Control_B1.c"
  8634 ;; Parameters:    Size  Location     Type
  8635 ;;		None
  8636 ;; Auto vars:     Size  Location     Type
  8637 ;;  key             1    1[BANK0 ] unsigned char 
  8638 ;; Return value:  Size  Location     Type
  8639 ;;                  1    wreg      unsigned char 
  8640 ;; Registers used:
  8641 ;;		wreg, status,2
  8642 ;; Tracked objects:
  8643 ;;		On entry : 0/0
  8644 ;;		On exit  : 0/0
  8645 ;;		Unchanged: 0/0
  8646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8648 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8649 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8650 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8651 ;;Total ram usage:        3 bytes
  8652 ;; Hardware stack levels used:    1
  8653 ;; Hardware stack levels required when called:    5
  8654 ;; This function calls:
  8655 ;;		Nothing
  8656 ;; This function is called by:
  8657 ;;		_setRF_Main
  8658 ;; This function uses a non-reentrant model
  8659 ;;
  8660                           
  8661                           
  8662                           ;psect for function _getRF_KeyStatus
  8663  1000                     _getRF_KeyStatus:	
  8664                           
  8665                           ;RF_Control_B1.c: 167: char key = 0;
  8666                           
  8667                           ;incstack = 0
  8668                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8669  1000  0020               	movlb	0	; select bank0
  8670  1001  01A1               	clrf	getRF_KeyStatus@key
  8671                           
  8672                           ;RF_Control_B1.c: 173: key = (RA0 == 1 || RB1 == 1 || RA6 == 1 || RA4 == 1) ? 1 : 0;
  8673  1002  01A2               	clrf	_getRF_KeyStatus$5184
  8674  1003  0AA2               	incf	_getRF_KeyStatus$5184,f
  8675  1004  1C0C               	btfss	12,0	;volatile
  8676  1005  188D               	btfsc	13,1	;volatile
  8677  1006  280B               	goto	l8004
  8678  1007  1F0C               	btfss	12,6	;volatile
  8679  1008  1A0C               	btfsc	12,4	;volatile
  8680  1009  280B               	goto	l8004
  8681  100A  01A2               	clrf	_getRF_KeyStatus$5184
  8682  100B                     l8004:	
  8683  100B  0822               	movf	_getRF_KeyStatus$5184,w
  8684  100C  00A0               	movwf	??_getRF_KeyStatus
  8685  100D  0820               	movf	??_getRF_KeyStatus,w
  8686  100E  00A1               	movwf	getRF_KeyStatus@key
  8687                           
  8688                           ;RF_Control_B1.c: 179: return key;
  8689  100F  0821               	movf	getRF_KeyStatus@key,w
  8690  1010  0008               	return
  8691  1011                     __end_of_getRF_KeyStatus:	
  8692                           
  8693                           	psect	text35
  8694  1890                     __ptext35:	
  8695 ;; *************** function _getBuz_GO *****************
  8696 ;; Defined at:
  8697 ;;		line 82 in file "../src/Buzzer_B1.c"
  8698 ;; Parameters:    Size  Location     Type
  8699 ;;		None
  8700 ;; Auto vars:     Size  Location     Type
  8701 ;;  i               2    4[BANK0 ] int 
  8702 ;; Return value:  Size  Location     Type
  8703 ;;                  2    0[BANK0 ] int 
  8704 ;; Registers used:
  8705 ;;		wreg, status,2, status,0
  8706 ;; Tracked objects:
  8707 ;;		On entry : 0/0
  8708 ;;		On exit  : 0/0
  8709 ;;		Unchanged: 0/0
  8710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8711 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8712 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8713 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8714 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8715 ;;Total ram usage:        6 bytes
  8716 ;; Hardware stack levels used:    1
  8717 ;; Hardware stack levels required when called:    5
  8718 ;; This function calls:
  8719 ;;		Nothing
  8720 ;; This function is called by:
  8721 ;;		_setRF_Main
  8722 ;; This function uses a non-reentrant model
  8723 ;;
  8724                           
  8725                           
  8726                           ;psect for function _getBuz_GO
  8727  1890                     _getBuz_GO:	
  8728                           
  8729                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8730                           
  8731                           ;incstack = 0
  8732                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8733  1890  0022               	movlb	2	; select bank2
  8734  1891  0C20               	rrf	_Buz1^(0+256),w
  8735  1892  3901               	andlw	1
  8736  1893  0020               	movlb	0	; select bank0
  8737  1894  00A2               	movwf	??_getBuz_GO
  8738  1895  01A3               	clrf	??_getBuz_GO+1
  8739  1896  0822               	movf	??_getBuz_GO,w
  8740  1897  00A4               	movwf	getBuz_GO@i
  8741  1898  0823               	movf	??_getBuz_GO+1,w
  8742  1899  00A5               	movwf	getBuz_GO@i+1
  8743                           
  8744                           ;Buzzer_B1.c: 84: return i;
  8745  189A  0825               	movf	getBuz_GO@i+1,w
  8746  189B  01A1               	clrf	?_getBuz_GO+1
  8747  189C  07A1               	addwf	?_getBuz_GO+1,f
  8748  189D  0824               	movf	getBuz_GO@i,w
  8749  189E  01A0               	clrf	?_getBuz_GO
  8750  189F  07A0               	addwf	?_getBuz_GO,f
  8751  18A0  0008               	return
  8752  18A1                     __end_of_getBuz_GO:	
  8753                           
  8754                           	psect	text36
  8755  27E0                     __ptext36:	
  8756 ;; *************** function _RF_RxDisable *****************
  8757 ;; Defined at:
  8758 ;;		line 154 in file "../src/RF_Control_B1.c"
  8759 ;; Parameters:    Size  Location     Type
  8760 ;;		None
  8761 ;; Auto vars:     Size  Location     Type
  8762 ;;		None
  8763 ;; Return value:  Size  Location     Type
  8764 ;;		None               void
  8765 ;; Registers used:
  8766 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8767 ;; Tracked objects:
  8768 ;;		On entry : 0/0
  8769 ;;		On exit  : 0/0
  8770 ;;		Unchanged: 0/0
  8771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8775 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8776 ;;Total ram usage:        0 bytes
  8777 ;; Hardware stack levels used:    1
  8778 ;; Hardware stack levels required when called:    7
  8779 ;; This function calls:
  8780 ;;		_CC2500_WriteCommand
  8781 ;; This function is called by:
  8782 ;;		_setRF_Main
  8783 ;; This function uses a non-reentrant model
  8784 ;;
  8785                           
  8786                           
  8787                           ;psect for function _RF_RxDisable
  8788  27E0                     _RF_RxDisable:	
  8789                           
  8790                           ;RF_Control_B1.c: 155: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8791                           
  8792                           ;incstack = 0
  8793                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8794  27E0  0021               	movlb	1	; select bank1
  8795  27E1  18A0               	btfsc	_RF1^(0+128),1
  8796  27E2  2FE5               	goto	l2218
  8797  27E3  1DA0               	btfss	_RF1^(0+128),3
  8798  27E4  0008               	return
  8799  27E5                     l2218:	
  8800                           
  8801                           ;RF_Control_B1.c: 156: RF1.RxStatus = 0;
  8802  27E5  11A0               	bcf	_RF1^(0+128),3
  8803                           
  8804                           ;RF_Control_B1.c: 157: RF1.ReceiveGO = 0;
  8805  27E6  10A0               	bcf	_RF1^(0+128),1
  8806                           
  8807                           ;RF_Control_B1.c: 158: CC2500_WriteCommand(0x36);
  8808  27E7  3036               	movlw	54
  8809  27E8  319A  22D5  31A7   	fcall	_CC2500_WriteCommand
  8810                           
  8811                           ;RF_Control_B1.c: 159: CC2500_WriteCommand(0x3A);
  8812  27EB  303A               	movlw	58
  8813  27EC  319A  22D5         	fcall	_CC2500_WriteCommand
  8814  27EE  0008               	return
  8815  27EF                     __end_of_RF_RxDisable:	
  8816                           
  8817                           	psect	text37
  8818  16B3                     __ptext37:	
  8819 ;; *************** function _CC2500_TxData *****************
  8820 ;; Defined at:
  8821 ;;		line 32 in file "../src/CC2500_B1.c"
  8822 ;; Parameters:    Size  Location     Type
  8823 ;;		None
  8824 ;; Auto vars:     Size  Location     Type
  8825 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8826 ;; Return value:  Size  Location     Type
  8827 ;;		None               void
  8828 ;; Registers used:
  8829 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8830 ;; Tracked objects:
  8831 ;;		On entry : 0/0
  8832 ;;		On exit  : 0/0
  8833 ;;		Unchanged: 0/0
  8834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8835 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8836 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8837 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8838 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8839 ;;Total ram usage:        2 bytes
  8840 ;; Hardware stack levels used:    1
  8841 ;; Hardware stack levels required when called:    7
  8842 ;; This function calls:
  8843 ;;		_CC2500_WriteByte
  8844 ;;		_CC2500_WriteCommand
  8845 ;;		_RF_Timeout_Counter
  8846 ;;		_setRF_TimeoutCleared
  8847 ;; This function is called by:
  8848 ;;		_setRF_Main
  8849 ;; This function uses a non-reentrant model
  8850 ;;
  8851                           
  8852                           
  8853                           ;psect for function _CC2500_TxData
  8854  16B3                     _CC2500_TxData:	
  8855                           
  8856                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8857                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8858                           
  8859                           ;incstack = 0
  8860                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8861  16B3  3036               	movlw	54
  8862  16B4  319A  22D5  3196   	fcall	_CC2500_WriteCommand
  8863                           
  8864                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8865  16B7  303B               	movlw	59
  8866  16B8  319A  22D5  3196   	fcall	_CC2500_WriteCommand
  8867                           
  8868                           ;CC2500_B1.c: 38: RC4 = 0;
  8869  16BB  0020               	movlb	0	; select bank0
  8870  16BC  120E               	bcf	14,4	;volatile
  8871                           
  8872                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8873  16BD  307F               	movlw	127
  8874  16BE  00A4               	movwf	??_CC2500_TxData
  8875  16BF  0824               	movf	??_CC2500_TxData,w
  8876  16C0  0021               	movlb	1	; select bank1
  8877  16C1  00DF               	movwf	_SPI0Buffer^(0+128)
  8878                           
  8879                           ;CC2500_B1.c: 40: while (RC2 == 1 && RF1.Timeout == 0) {
  8880  16C2  2EC6               	goto	l9822
  8881  16C3                     l9820:	
  8882                           
  8883                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8884  16C3  3199  2193  3196   	fcall	_RF_Timeout_Counter
  8885  16C6                     l9822:	
  8886  16C6  0020               	movlb	0	; select bank0
  8887  16C7  1D0E               	btfss	14,2	;volatile
  8888  16C8  2ECC               	goto	l9826
  8889  16C9  0021               	movlb	1	; select bank1
  8890  16CA  1F21               	btfss	(_RF1^(0+128)+1),6
  8891  16CB  2EC3               	goto	l9820
  8892  16CC                     l9826:	
  8893                           
  8894                           ;CC2500_B1.c: 42: };
  8895                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8896  16CC  31A6  26B0  3196   	fcall	_setRF_TimeoutCleared
  8897                           
  8898                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8899  16CF  319A  22A2  3196   	fcall	_CC2500_WriteByte
  8900                           
  8901                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8902  16D2  0021               	movlb	1	; select bank1
  8903  16D3  0861               	movf	_Tx_Length^(0+128),w
  8904  16D4  0020               	movlb	0	; select bank0
  8905  16D5  00A4               	movwf	??_CC2500_TxData
  8906  16D6  0824               	movf	??_CC2500_TxData,w
  8907  16D7  0021               	movlb	1	; select bank1
  8908  16D8  00DF               	movwf	_SPI0Buffer^(0+128)
  8909                           
  8910                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8911  16D9  319A  22A2  3196   	fcall	_CC2500_WriteByte
  8912                           
  8913                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8914  16DC  0020               	movlb	0	; select bank0
  8915  16DD  01A5               	clrf	CC2500_TxData@loop_e
  8916  16DE                     l9840:	
  8917  16DE  0021               	movlb	1	; select bank1
  8918  16DF  0861               	movf	_Tx_Length^(0+128),w
  8919  16E0  0020               	movlb	0	; select bank0
  8920  16E1  0225               	subwf	CC2500_TxData@loop_e,w
  8921  16E2  1803               	btfsc	3,0
  8922  16E3  2EF7               	goto	l259
  8923                           
  8924                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8925  16E4  0825               	movf	CC2500_TxData@loop_e,w
  8926  16E5  3EA0               	addlw	_RF_Data& (0+255)
  8927  16E6  0086               	movwf	6
  8928  16E7  3001               	movlw	1	; select bank3/4
  8929  16E8  0087               	movwf	7
  8930  16E9  0801               	movf	1,w
  8931  16EA  00A4               	movwf	??_CC2500_TxData
  8932  16EB  0824               	movf	??_CC2500_TxData,w
  8933  16EC  0021               	movlb	1	; select bank1
  8934  16ED  00DF               	movwf	_SPI0Buffer^(0+128)
  8935                           
  8936                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8937  16EE  319A  22A2  3196   	fcall	_CC2500_WriteByte
  8938  16F1  3001               	movlw	1
  8939  16F2  0020               	movlb	0	; select bank0
  8940  16F3  00A4               	movwf	??_CC2500_TxData
  8941  16F4  0824               	movf	??_CC2500_TxData,w
  8942  16F5  07A5               	addwf	CC2500_TxData@loop_e,f
  8943  16F6  2EDE               	goto	l9840
  8944  16F7                     l259:	
  8945                           
  8946                           ;CC2500_B1.c: 51: }
  8947                           ;CC2500_B1.c: 52: RC4 = 1;
  8948  16F7  160E               	bsf	14,4	;volatile
  8949                           
  8950                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8951  16F8  3035               	movlw	53
  8952  16F9  319A  22D5  3196   	fcall	_CC2500_WriteCommand
  8953                           
  8954                           ;CC2500_B1.c: 54: while (RB0 == 0 && RF1.Timeout == 0) {
  8955  16FC  2F00               	goto	l9846
  8956  16FD                     l9844:	
  8957                           
  8958                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8959  16FD  3199  2193  3196   	fcall	_RF_Timeout_Counter
  8960  1700                     l9846:	
  8961  1700  0020               	movlb	0	; select bank0
  8962  1701  180D               	btfsc	13,0	;volatile
  8963  1702  2F06               	goto	l9850
  8964  1703  0021               	movlb	1	; select bank1
  8965  1704  1F21               	btfss	(_RF1^(0+128)+1),6
  8966  1705  2EFD               	goto	l9844
  8967  1706                     l9850:	
  8968                           
  8969                           ;CC2500_B1.c: 56: };
  8970                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8971  1706  31A6  26B0  3196   	fcall	_setRF_TimeoutCleared
  8972                           
  8973                           ;CC2500_B1.c: 59: while (RB0 == 1 && RF1.Timeout == 0) {
  8974  1709  2F0D               	goto	l9854
  8975  170A                     l9852:	
  8976                           
  8977                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8978  170A  3199  2193  3196   	fcall	_RF_Timeout_Counter
  8979  170D                     l9854:	
  8980  170D  0020               	movlb	0	; select bank0
  8981  170E  1C0D               	btfss	13,0	;volatile
  8982  170F  2F13               	goto	l9858
  8983  1710  0021               	movlb	1	; select bank1
  8984  1711  1F21               	btfss	(_RF1^(0+128)+1),6
  8985  1712  2F0A               	goto	l9852
  8986  1713                     l9858:	
  8987                           
  8988                           ;CC2500_B1.c: 61: };
  8989                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8990  1713  31A6  26B0  3196   	fcall	_setRF_TimeoutCleared
  8991                           
  8992                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8993  1716  3036               	movlw	54
  8994  1717  319A  22D5  3196   	fcall	_CC2500_WriteCommand
  8995                           
  8996                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8997  171A  303B               	movlw	59
  8998  171B  319A  22D5         	fcall	_CC2500_WriteCommand
  8999                           
  9000                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  9001  171D  147D               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  9002  171E  0008               	return
  9003  171F                     __end_of_CC2500_TxData:	
  9004                           
  9005                           	psect	text38
  9006  1648                     __ptext38:	
  9007 ;; *************** function _CC2500_RxData *****************
  9008 ;; Defined at:
  9009 ;;		line 73 in file "../src/CC2500_B1.c"
  9010 ;; Parameters:    Size  Location     Type
  9011 ;;		None
  9012 ;; Auto vars:     Size  Location     Type
  9013 ;;  loop_f          1    5[BANK0 ] unsigned char 
  9014 ;; Return value:  Size  Location     Type
  9015 ;;		None               void
  9016 ;; Registers used:
  9017 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9018 ;; Tracked objects:
  9019 ;;		On entry : 0/0
  9020 ;;		On exit  : 0/0
  9021 ;;		Unchanged: 0/0
  9022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9024 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9025 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9026 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9027 ;;Total ram usage:        2 bytes
  9028 ;; Hardware stack levels used:    1
  9029 ;; Hardware stack levels required when called:    7
  9030 ;; This function calls:
  9031 ;;		_CC2500_ReadByte
  9032 ;;		_CC2500_ReadStatus
  9033 ;;		_CC2500_WriteByte
  9034 ;;		_CC2500_WriteCommand
  9035 ;;		_RF_Timeout_Counter
  9036 ;;		_setRF_TimeoutCleared
  9037 ;; This function is called by:
  9038 ;;		_setRF_Main
  9039 ;; This function uses a non-reentrant model
  9040 ;;
  9041                           
  9042                           
  9043                           ;psect for function _CC2500_RxData
  9044  1648                     _CC2500_RxData:	
  9045                           
  9046                           ;CC2500_B1.c: 74: unsigned char loop_f;
  9047                           ;CC2500_B1.c: 78: if (RB0 == 0) {
  9048                           
  9049                           ;incstack = 0
  9050                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9051  1648  0020               	movlb	0	; select bank0
  9052  1649  180D               	btfsc	13,0	;volatile
  9053  164A  0008               	return
  9054                           
  9055                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  9056  164B  303B               	movlw	59
  9057  164C  319D  251F  3196   	fcall	_CC2500_ReadStatus
  9058                           
  9059                           ;CC2500_B1.c: 89: if (s_data != 0) {
  9060  164F  0021               	movlb	1	; select bank1
  9061  1650  0864               	movf	_s_data^(0+128),w
  9062  1651  1903               	btfsc	3,2
  9063  1652  0008               	return
  9064                           
  9065                           ;CC2500_B1.c: 90: RC4 = 0;
  9066  1653  0020               	movlb	0	; select bank0
  9067  1654  120E               	bcf	14,4	;volatile
  9068                           
  9069                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  9070  1655  30FF               	movlw	255
  9071  1656  00A4               	movwf	??_CC2500_RxData
  9072  1657  0824               	movf	??_CC2500_RxData,w
  9073  1658  0021               	movlb	1	; select bank1
  9074  1659  00DF               	movwf	_SPI0Buffer^(0+128)
  9075                           
  9076                           ;CC2500_B1.c: 93: while (RC2 == 1 && RF1.Timeout == 0) {
  9077  165A  2E5E               	goto	l9878
  9078  165B                     l9876:	
  9079                           
  9080                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  9081  165B  3199  2193  3196   	fcall	_RF_Timeout_Counter
  9082  165E                     l9878:	
  9083  165E  0020               	movlb	0	; select bank0
  9084  165F  1D0E               	btfss	14,2	;volatile
  9085  1660  2E64               	goto	l9882
  9086  1661  0021               	movlb	1	; select bank1
  9087  1662  1F21               	btfss	(_RF1^(0+128)+1),6
  9088  1663  2E5B               	goto	l9876
  9089  1664                     l9882:	
  9090                           
  9091                           ;CC2500_B1.c: 95: };
  9092                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  9093  1664  31A6  26B0  3196   	fcall	_setRF_TimeoutCleared
  9094                           
  9095                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  9096  1667  319A  22A2  3196   	fcall	_CC2500_WriteByte
  9097                           
  9098                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  9099  166A  319B  235D  3196   	fcall	_CC2500_ReadByte
  9100                           
  9101                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  9102  166D  0021               	movlb	1	; select bank1
  9103  166E  085F               	movf	_SPI0Buffer^(0+128),w
  9104  166F  0020               	movlb	0	; select bank0
  9105  1670  00A4               	movwf	??_CC2500_RxData
  9106  1671  0824               	movf	??_CC2500_RxData,w
  9107  1672  0021               	movlb	1	; select bank1
  9108  1673  00DE               	movwf	_Rx_Length^(0+128)
  9109                           
  9110                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  9111  1674  0020               	movlb	0	; select bank0
  9112  1675  01A5               	clrf	CC2500_RxData@loop_f
  9113  1676                     l9898:	
  9114  1676  0021               	movlb	1	; select bank1
  9115  1677  085E               	movf	_Rx_Length^(0+128),w
  9116  1678  0020               	movlb	0	; select bank0
  9117  1679  0225               	subwf	CC2500_RxData@loop_f,w
  9118  167A  1803               	btfsc	3,0
  9119  167B  2E8F               	goto	l9900
  9120                           
  9121                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  9122  167C  319B  235D  3196   	fcall	_CC2500_ReadByte
  9123                           
  9124                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  9125  167F  0021               	movlb	1	; select bank1
  9126  1680  085F               	movf	_SPI0Buffer^(0+128),w
  9127  1681  0020               	movlb	0	; select bank0
  9128  1682  00A4               	movwf	??_CC2500_RxData
  9129  1683  0825               	movf	CC2500_RxData@loop_f,w
  9130  1684  3EA0               	addlw	_RF_Data& (0+255)
  9131  1685  0086               	movwf	6
  9132  1686  3001               	movlw	1	; select bank3/4
  9133  1687  0087               	movwf	7
  9134  1688  0824               	movf	??_CC2500_RxData,w
  9135  1689  0081               	movwf	1
  9136  168A  3001               	movlw	1
  9137  168B  00A4               	movwf	??_CC2500_RxData
  9138  168C  0824               	movf	??_CC2500_RxData,w
  9139  168D  07A5               	addwf	CC2500_RxData@loop_f,f
  9140  168E  2E76               	goto	l9898
  9141  168F                     l9900:	
  9142                           
  9143                           ;CC2500_B1.c: 104: }
  9144                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  9145  168F  319B  235D  3196   	fcall	_CC2500_ReadByte
  9146                           
  9147                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  9148  1692  0021               	movlb	1	; select bank1
  9149  1693  085F               	movf	_SPI0Buffer^(0+128),w
  9150  1694  0020               	movlb	0	; select bank0
  9151  1695  00A4               	movwf	??_CC2500_RxData
  9152  1696  0824               	movf	??_CC2500_RxData,w
  9153  1697  0021               	movlb	1	; select bank1
  9154  1698  00DD               	movwf	_RSSI^(0+128)
  9155                           
  9156                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  9157  1699  319B  235D  3196   	fcall	_CC2500_ReadByte
  9158                           
  9159                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  9160  169C  0021               	movlb	1	; select bank1
  9161  169D  085F               	movf	_SPI0Buffer^(0+128),w
  9162  169E  0020               	movlb	0	; select bank0
  9163  169F  00A4               	movwf	??_CC2500_RxData
  9164  16A0  0824               	movf	??_CC2500_RxData,w
  9165  16A1  0021               	movlb	1	; select bank1
  9166  16A2  00D6               	movwf	_CRC^(0+128)
  9167                           
  9168                           ;CC2500_B1.c: 109: RC4 = 1;
  9169  16A3  0020               	movlb	0	; select bank0
  9170  16A4  160E               	bsf	14,4	;volatile
  9171                           
  9172                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  9173  16A5  0021               	movlb	1	; select bank1
  9174  16A6  1BD6               	btfsc	_CRC^(0+128),7
  9175                           
  9176                           ;CC2500_B1.c: 111: Receive_OK = 1;
  9177  16A7  146F               	bsf	(_Receive_OK/(0+8))^(0+128),_Receive_OK& (0+7)
  9178                           
  9179                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  9180  16A8  11A0               	bcf	_RF1^(0+128),3
  9181                           
  9182                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  9183  16A9  14A0               	bsf	_RF1^(0+128),1
  9184                           
  9185                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  9186  16AA  3036               	movlw	54
  9187  16AB  319A  22D5  3196   	fcall	_CC2500_WriteCommand
  9188                           
  9189                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  9190  16AE  303A               	movlw	58
  9191  16AF  319A  22D5         	fcall	_CC2500_WriteCommand
  9192  16B1  0021               	movlb	1	; select bank1
  9193  16B2  0008               	return
  9194  16B3                     __end_of_CC2500_RxData:	
  9195                           
  9196                           	psect	text39
  9197  1D1F                     __ptext39:	
  9198 ;; *************** function _CC2500_ReadStatus *****************
  9199 ;; Defined at:
  9200 ;;		line 308 in file "../src/CC2500_B1.c"
  9201 ;; Parameters:    Size  Location     Type
  9202 ;;  status_addr     1    wreg     unsigned char 
  9203 ;; Auto vars:     Size  Location     Type
  9204 ;;  status_addr     1    3[BANK0 ] unsigned char 
  9205 ;; Return value:  Size  Location     Type
  9206 ;;		None               void
  9207 ;; Registers used:
  9208 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9209 ;; Tracked objects:
  9210 ;;		On entry : 0/0
  9211 ;;		On exit  : 0/0
  9212 ;;		Unchanged: 0/0
  9213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9215 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9216 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9217 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9218 ;;Total ram usage:        2 bytes
  9219 ;; Hardware stack levels used:    1
  9220 ;; Hardware stack levels required when called:    6
  9221 ;; This function calls:
  9222 ;;		_CC2500_ReadByte
  9223 ;;		_CC2500_WriteByte
  9224 ;;		_RF_Timeout_Counter
  9225 ;;		_setRF_TimeoutCleared
  9226 ;; This function is called by:
  9227 ;;		_CC2500_RxData
  9228 ;; This function uses a non-reentrant model
  9229 ;;
  9230                           
  9231                           
  9232                           ;psect for function _CC2500_ReadStatus
  9233  1D1F                     _CC2500_ReadStatus:	
  9234                           
  9235                           ;incstack = 0
  9236                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9237                           ;CC2500_ReadStatus@status_addr stored from wreg
  9238  1D1F  0020               	movlb	0	; select bank0
  9239  1D20  00A3               	movwf	CC2500_ReadStatus@status_addr
  9240                           
  9241                           ;CC2500_B1.c: 309: RC4 = 0;
  9242  1D21  120E               	bcf	14,4	;volatile
  9243                           
  9244                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  9245  1D22  0823               	movf	CC2500_ReadStatus@status_addr,w
  9246  1D23  3EC0               	addlw	192
  9247  1D24  00A2               	movwf	??_CC2500_ReadStatus
  9248  1D25  0822               	movf	??_CC2500_ReadStatus,w
  9249  1D26  0021               	movlb	1	; select bank1
  9250  1D27  00DF               	movwf	_SPI0Buffer^(0+128)
  9251                           
  9252                           ;CC2500_B1.c: 312: while (RC2 == 1 && RF1.Timeout == 0) {
  9253  1D28  2D2C               	goto	l9678
  9254  1D29                     l9676:	
  9255                           
  9256                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  9257  1D29  3199  2193  319D   	fcall	_RF_Timeout_Counter
  9258  1D2C                     l9678:	
  9259  1D2C  0020               	movlb	0	; select bank0
  9260  1D2D  1D0E               	btfss	14,2	;volatile
  9261  1D2E  2D32               	goto	l9682
  9262  1D2F  0021               	movlb	1	; select bank1
  9263  1D30  1F21               	btfss	(_RF1^(0+128)+1),6
  9264  1D31  2D29               	goto	l9676
  9265  1D32                     l9682:	
  9266                           
  9267                           ;CC2500_B1.c: 314: };
  9268                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  9269  1D32  31A6  26B0  319D   	fcall	_setRF_TimeoutCleared
  9270                           
  9271                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  9272  1D35  319A  22A2  319D   	fcall	_CC2500_WriteByte
  9273                           
  9274                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  9275  1D38  319B  235D         	fcall	_CC2500_ReadByte
  9276                           
  9277                           ;CC2500_B1.c: 319: RC4 = 1;
  9278  1D3A  0020               	movlb	0	; select bank0
  9279  1D3B  160E               	bsf	14,4	;volatile
  9280                           
  9281                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  9282  1D3C  0021               	movlb	1	; select bank1
  9283  1D3D  085F               	movf	_SPI0Buffer^(0+128),w
  9284  1D3E  0020               	movlb	0	; select bank0
  9285  1D3F  00A2               	movwf	??_CC2500_ReadStatus
  9286  1D40  0822               	movf	??_CC2500_ReadStatus,w
  9287  1D41  0021               	movlb	1	; select bank1
  9288  1D42  00E4               	movwf	_s_data^(0+128)
  9289  1D43  0008               	return
  9290  1D44                     __end_of_CC2500_ReadStatus:	
  9291                           
  9292                           	psect	text40
  9293  1B5D                     __ptext40:	
  9294 ;; *************** function _CC2500_ReadByte *****************
  9295 ;; Defined at:
  9296 ;;		line 242 in file "../src/CC2500_B1.c"
  9297 ;; Parameters:    Size  Location     Type
  9298 ;;		None
  9299 ;; Auto vars:     Size  Location     Type
  9300 ;;  loop_b          1    1[BANK0 ] unsigned char 
  9301 ;; Return value:  Size  Location     Type
  9302 ;;		None               void
  9303 ;; Registers used:
  9304 ;;		wreg, status,2, status,0
  9305 ;; Tracked objects:
  9306 ;;		On entry : 0/0
  9307 ;;		On exit  : 0/0
  9308 ;;		Unchanged: 0/0
  9309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9310 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9311 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9312 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9313 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9314 ;;Total ram usage:        2 bytes
  9315 ;; Hardware stack levels used:    1
  9316 ;; Hardware stack levels required when called:    5
  9317 ;; This function calls:
  9318 ;;		Nothing
  9319 ;; This function is called by:
  9320 ;;		_CC2500_RxData
  9321 ;;		_CC2500_ReadStatus
  9322 ;;		_CC2500_ReadREG
  9323 ;; This function uses a non-reentrant model
  9324 ;;
  9325                           
  9326                           
  9327                           ;psect for function _CC2500_ReadByte
  9328  1B5D                     _CC2500_ReadByte:	
  9329                           
  9330                           ;CC2500_B1.c: 243: unsigned char loop_b;
  9331                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  9332                           
  9333                           ;incstack = 0
  9334                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  9335  1B5D  0020               	movlb	0	; select bank0
  9336  1B5E  01A1               	clrf	CC2500_ReadByte@loop_b
  9337  1B5F                     L4:	
  9338  1B5F  3008               	movlw	8
  9339  1B60  0221               	subwf	CC2500_ReadByte@loop_b,w
  9340  1B61  1803               	btfsc	3,0
  9341  1B62  0008               	return
  9342                           
  9343                           ;CC2500_B1.c: 245: RC1 = 1;
  9344  1B63  148E               	bsf	14,1	;volatile
  9345                           
  9346                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  9347  1B64  1003               	clrc
  9348  1B65  0021               	movlb	1	; select bank1
  9349  1B66  0DDF               	rlf	_SPI0Buffer^(0+128),f
  9350                           
  9351                           ;CC2500_B1.c: 247: if (RC2 == 1)
  9352  1B67  0020               	movlb	0	; select bank0
  9353  1B68  1D0E               	btfss	14,2	;volatile
  9354  1B69  2B6D               	goto	l9640
  9355                           
  9356                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  9357  1B6A  0021               	movlb	1	; select bank1
  9358  1B6B  145F               	bsf	_SPI0Buffer^(0+128),0
  9359  1B6C  2B73               	goto	l9642
  9360  1B6D                     l9640:	
  9361                           
  9362                           ;CC2500_B1.c: 249: else
  9363                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  9364  1B6D  30FE               	movlw	254
  9365  1B6E  0020               	movlb	0	; select bank0
  9366  1B6F  00A0               	movwf	??_CC2500_ReadByte
  9367  1B70  0820               	movf	??_CC2500_ReadByte,w
  9368  1B71  0021               	movlb	1	; select bank1
  9369  1B72  05DF               	andwf	_SPI0Buffer^(0+128),f
  9370  1B73                     l9642:	
  9371                           
  9372                           ;CC2500_B1.c: 251: RC1 = 0;
  9373  1B73  0020               	movlb	0	; select bank0
  9374  1B74  108E               	bcf	14,1	;volatile
  9375  1B75  3001               	movlw	1
  9376  1B76  00A0               	movwf	??_CC2500_ReadByte
  9377  1B77  0820               	movf	??_CC2500_ReadByte,w
  9378  1B78  07A1               	addwf	CC2500_ReadByte@loop_b,f
  9379  1B79  2B5F               	goto	L4
  9380  1B7A                     __end_of_CC2500_ReadByte:	
  9381                           
  9382                           	psect	text41
  9383  19A8                     __ptext41:	
  9384 ;; *************** function _CC2500_PowerOnInitial *****************
  9385 ;; Defined at:
  9386 ;;		line 126 in file "../src/CC2500_B1.c"
  9387 ;; Parameters:    Size  Location     Type
  9388 ;;		None
  9389 ;; Auto vars:     Size  Location     Type
  9390 ;;		None
  9391 ;; Return value:  Size  Location     Type
  9392 ;;		None               void
  9393 ;; Registers used:
  9394 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9395 ;; Tracked objects:
  9396 ;;		On entry : 0/0
  9397 ;;		On exit  : 0/0
  9398 ;;		Unchanged: 0/0
  9399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9403 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9404 ;;Total ram usage:        0 bytes
  9405 ;; Hardware stack levels used:    1
  9406 ;; Hardware stack levels required when called:    8
  9407 ;; This function calls:
  9408 ;;		_CC2500_ClearRXFIFO
  9409 ;;		_CC2500_ClearTXFIFO
  9410 ;;		_CC2500_FrequencyCabr
  9411 ;;		_CC2500_InitPATable
  9412 ;;		_CC2500_InitSetREG
  9413 ;;		_CC2500_PowerRST
  9414 ;;		_CC2500_SIDLEMode
  9415 ;; This function is called by:
  9416 ;;		_setRF_Main
  9417 ;;		_main
  9418 ;; This function uses a non-reentrant model
  9419 ;;
  9420                           
  9421                           
  9422                           ;psect for function _CC2500_PowerOnInitial
  9423  19A8                     _CC2500_PowerOnInitial:	
  9424                           
  9425                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  9426                           
  9427                           ;incstack = 0
  9428                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9429  19A8  3191  214B  3199   	fcall	_CC2500_PowerRST
  9430                           
  9431                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  9432  19AB  319D  2594  3199   	fcall	_CC2500_InitSetREG
  9433                           
  9434                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  9435  19AE  319B  23B6  3199   	fcall	_CC2500_InitPATable
  9436                           
  9437                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  9438  19B1  31A6  26B8  3199   	fcall	_CC2500_ClearTXFIFO
  9439                           
  9440                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  9441  19B4  31A6  26B4  3199   	fcall	_CC2500_ClearRXFIFO
  9442                           
  9443                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  9444  19B7  31A7  27B8  3199   	fcall	_CC2500_FrequencyCabr
  9445                           
  9446                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  9447  19BA  31A6  26BC         	fcall	_CC2500_SIDLEMode
  9448  19BC  0008               	return
  9449  19BD                     __end_of_CC2500_PowerOnInitial:	
  9450                           
  9451                           	psect	text42
  9452  26BC                     __ptext42:	
  9453 ;; *************** function _CC2500_SIDLEMode *****************
  9454 ;; Defined at:
  9455 ;;		line 216 in file "../src/CC2500_B1.c"
  9456 ;; Parameters:    Size  Location     Type
  9457 ;;		None
  9458 ;; Auto vars:     Size  Location     Type
  9459 ;;		None
  9460 ;; Return value:  Size  Location     Type
  9461 ;;		None               void
  9462 ;; Registers used:
  9463 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9464 ;; Tracked objects:
  9465 ;;		On entry : 0/0
  9466 ;;		On exit  : 0/0
  9467 ;;		Unchanged: 0/0
  9468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9470 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9472 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9473 ;;Total ram usage:        0 bytes
  9474 ;; Hardware stack levels used:    1
  9475 ;; Hardware stack levels required when called:    7
  9476 ;; This function calls:
  9477 ;;		_CC2500_WriteCommand
  9478 ;; This function is called by:
  9479 ;;		_CC2500_PowerOnInitial
  9480 ;; This function uses a non-reentrant model
  9481 ;;
  9482                           
  9483                           
  9484                           ;psect for function _CC2500_SIDLEMode
  9485  26BC                     _CC2500_SIDLEMode:	
  9486                           
  9487                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  9488                           
  9489                           ;incstack = 0
  9490                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9491  26BC  3036               	movlw	54
  9492  26BD  319A  22D5         	fcall	_CC2500_WriteCommand
  9493  26BF  0008               	return
  9494  26C0                     __end_of_CC2500_SIDLEMode:	
  9495                           
  9496                           	psect	text43
  9497  114B                     __ptext43:	
  9498 ;; *************** function _CC2500_PowerRST *****************
  9499 ;; Defined at:
  9500 ;;		line 139 in file "../src/CC2500_B1.c"
  9501 ;; Parameters:    Size  Location     Type
  9502 ;;		None
  9503 ;; Auto vars:     Size  Location     Type
  9504 ;;		None
  9505 ;; Return value:  Size  Location     Type
  9506 ;;		None               void
  9507 ;; Registers used:
  9508 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9509 ;; Tracked objects:
  9510 ;;		On entry : 0/0
  9511 ;;		On exit  : 0/0
  9512 ;;		Unchanged: 0/0
  9513 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9516 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9517 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9518 ;;Total ram usage:        1 bytes
  9519 ;; Hardware stack levels used:    1
  9520 ;; Hardware stack levels required when called:    6
  9521 ;; This function calls:
  9522 ;;		_CC2500_WriteByte
  9523 ;;		_DelayTime_1us
  9524 ;;		_RF_Timeout_Counter
  9525 ;;		_setRF_TimeoutCleared
  9526 ;; This function is called by:
  9527 ;;		_CC2500_PowerOnInitial
  9528 ;; This function uses a non-reentrant model
  9529 ;;
  9530                           
  9531                           
  9532                           ;psect for function _CC2500_PowerRST
  9533  114B                     _CC2500_PowerRST:	
  9534                           
  9535                           ;CC2500_B1.c: 140: RC1 = 0;
  9536                           
  9537                           ;incstack = 0
  9538                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9539  114B  0020               	movlb	0	; select bank0
  9540  114C  108E               	bcf	14,1	;volatile
  9541                           
  9542                           ;CC2500_B1.c: 141: RC0 = 0;
  9543  114D  100E               	bcf	14,0	;volatile
  9544                           
  9545                           ;CC2500_B1.c: 142: RC4 = 1;
  9546  114E  160E               	bsf	14,4	;volatile
  9547                           
  9548                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  9549  114F  300A               	movlw	10
  9550  1150  00A0               	movwf	DelayTime_1us@count
  9551  1151  3000               	movlw	0
  9552  1152  00A1               	movwf	DelayTime_1us@count+1
  9553  1153  3187  27D9  3191   	fcall	_DelayTime_1us
  9554                           
  9555                           ;CC2500_B1.c: 144: RC4 = 0;
  9556  1156  0020               	movlb	0	; select bank0
  9557  1157  120E               	bcf	14,4	;volatile
  9558                           
  9559                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  9560  1158  300A               	movlw	10
  9561  1159  00A0               	movwf	DelayTime_1us@count
  9562  115A  3000               	movlw	0
  9563  115B  00A1               	movwf	DelayTime_1us@count+1
  9564  115C  3187  27D9  3191   	fcall	_DelayTime_1us
  9565                           
  9566                           ;CC2500_B1.c: 146: RC4 = 1;
  9567  115F  0020               	movlb	0	; select bank0
  9568  1160  160E               	bsf	14,4	;volatile
  9569                           
  9570                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  9571  1161  3028               	movlw	40
  9572  1162  00A0               	movwf	DelayTime_1us@count
  9573  1163  3000               	movlw	0
  9574  1164  00A1               	movwf	DelayTime_1us@count+1
  9575  1165  3187  27D9  3191   	fcall	_DelayTime_1us
  9576                           
  9577                           ;CC2500_B1.c: 148: RC4 = 0;
  9578  1168  0020               	movlb	0	; select bank0
  9579  1169  120E               	bcf	14,4	;volatile
  9580                           
  9581                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  9582  116A  3030               	movlw	48
  9583  116B  00A6               	movwf	??_CC2500_PowerRST
  9584  116C  0826               	movf	??_CC2500_PowerRST,w
  9585  116D  0021               	movlb	1	; select bank1
  9586  116E  00DF               	movwf	_SPI0Buffer^(0+128)
  9587                           
  9588                           ;CC2500_B1.c: 150: while (RC2 == 1 && RF1.Timeout == 0) {
  9589  116F  2973               	goto	l9706
  9590  1170                     l9704:	
  9591                           
  9592                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  9593  1170  3199  2193  3191   	fcall	_RF_Timeout_Counter
  9594  1173                     l9706:	
  9595  1173  0020               	movlb	0	; select bank0
  9596  1174  1D0E               	btfss	14,2	;volatile
  9597  1175  2979               	goto	l9710
  9598  1176  0021               	movlb	1	; select bank1
  9599  1177  1F21               	btfss	(_RF1^(0+128)+1),6
  9600  1178  2970               	goto	l9704
  9601  1179                     l9710:	
  9602                           
  9603                           ;CC2500_B1.c: 152: };
  9604                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  9605  1179  31A6  26B0  3191   	fcall	_setRF_TimeoutCleared
  9606                           
  9607                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  9608  117C  319A  22A2  3191   	fcall	_CC2500_WriteByte
  9609                           
  9610                           ;CC2500_B1.c: 155: while (RC2 == 1 && RF1.Timeout == 0) {
  9611  117F  2983               	goto	l9716
  9612  1180                     l9714:	
  9613                           
  9614                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  9615  1180  3199  2193  3191   	fcall	_RF_Timeout_Counter
  9616  1183                     l9716:	
  9617  1183  0020               	movlb	0	; select bank0
  9618  1184  1D0E               	btfss	14,2	;volatile
  9619  1185  2989               	goto	l9720
  9620  1186  0021               	movlb	1	; select bank1
  9621  1187  1F21               	btfss	(_RF1^(0+128)+1),6
  9622  1188  2980               	goto	l9714
  9623  1189                     l9720:	
  9624                           
  9625                           ;CC2500_B1.c: 157: };
  9626                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  9627  1189  31A6  26B0         	fcall	_setRF_TimeoutCleared
  9628                           
  9629                           ;CC2500_B1.c: 159: RC0 = 0;
  9630  118B  0020               	movlb	0	; select bank0
  9631  118C  100E               	bcf	14,0	;volatile
  9632                           
  9633                           ;CC2500_B1.c: 160: RC4 = 1;
  9634  118D  160E               	bsf	14,4	;volatile
  9635  118E  0008               	return
  9636  118F                     __end_of_CC2500_PowerRST:	
  9637                           
  9638                           	psect	text44
  9639  1D94                     __ptext44:	
  9640 ;; *************** function _CC2500_InitSetREG *****************
  9641 ;; Defined at:
  9642 ;;		line 166 in file "../src/CC2500_B1.c"
  9643 ;; Parameters:    Size  Location     Type
  9644 ;;		None
  9645 ;; Auto vars:     Size  Location     Type
  9646 ;;  loop_c          1    8[BANK0 ] unsigned char 
  9647 ;;  temp2           1    7[BANK0 ] unsigned char 
  9648 ;;  temp1           1    6[BANK0 ] unsigned char 
  9649 ;; Return value:  Size  Location     Type
  9650 ;;		None               void
  9651 ;; Registers used:
  9652 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9653 ;; Tracked objects:
  9654 ;;		On entry : 0/0
  9655 ;;		On exit  : 0/0
  9656 ;;		Unchanged: 0/0
  9657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9659 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9660 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9661 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9662 ;;Total ram usage:        4 bytes
  9663 ;; Hardware stack levels used:    1
  9664 ;; Hardware stack levels required when called:    7
  9665 ;; This function calls:
  9666 ;;		_CC2500_WriteREG
  9667 ;; This function is called by:
  9668 ;;		_CC2500_PowerOnInitial
  9669 ;; This function uses a non-reentrant model
  9670 ;;
  9671                           
  9672                           
  9673                           ;psect for function _CC2500_InitSetREG
  9674  1D94                     _CC2500_InitSetREG:	
  9675                           
  9676                           ;CC2500_B1.c: 167: unsigned char loop_c;
  9677                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  9678                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  9679                           
  9680                           ;incstack = 0
  9681                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9682  1D94  0020               	movlb	0	; select bank0
  9683  1D95  01A8               	clrf	CC2500_InitSetREG@loop_c
  9684  1D96                     L5:	
  9685  1D96  302F               	movlw	47
  9686  1D97  0228               	subwf	CC2500_InitSetREG@loop_c,w
  9687  1D98  1803               	btfsc	3,0
  9688  1D99  0008               	return
  9689                           
  9690                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  9691  1D9A  0828               	movf	CC2500_InitSetREG@loop_c,w
  9692  1D9B  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  9693  1D9C  0084               	movwf	4
  9694  1D9D  3098               	movlw	high (_CC2500_registers_address| (0+32768))
  9695  1D9E  1803               	skipnc
  9696  1D9F  3E01               	addlw	1
  9697  1DA0  0085               	movwf	5
  9698  1DA1  0800               	movf	0,w	;code access
  9699  1DA2  00A5               	movwf	??_CC2500_InitSetREG
  9700  1DA3  0825               	movf	??_CC2500_InitSetREG,w
  9701  1DA4  00A6               	movwf	CC2500_InitSetREG@temp1
  9702                           
  9703                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9704  1DA5  0828               	movf	CC2500_InitSetREG@loop_c,w
  9705  1DA6  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9706  1DA7  0084               	movwf	4
  9707  1DA8  3098               	movlw	high (_CC2500_rfSettings| (0+32768))
  9708  1DA9  1803               	skipnc
  9709  1DAA  3E01               	addlw	1
  9710  1DAB  0085               	movwf	5
  9711  1DAC  0800               	movf	0,w	;code access
  9712  1DAD  00A5               	movwf	??_CC2500_InitSetREG
  9713  1DAE  0825               	movf	??_CC2500_InitSetREG,w
  9714  1DAF  00A7               	movwf	CC2500_InitSetREG@temp2
  9715                           
  9716                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9717  1DB0  0827               	movf	CC2500_InitSetREG@temp2,w
  9718  1DB1  00A5               	movwf	??_CC2500_InitSetREG
  9719  1DB2  0825               	movf	??_CC2500_InitSetREG,w
  9720  1DB3  00A2               	movwf	CC2500_WriteREG@value
  9721  1DB4  0826               	movf	CC2500_InitSetREG@temp1,w
  9722  1DB5  319C  24FC  319D   	fcall	_CC2500_WriteREG
  9723  1DB8  3001               	movlw	1
  9724  1DB9  0020               	movlb	0	; select bank0
  9725  1DBA  00A5               	movwf	??_CC2500_InitSetREG
  9726  1DBB  0825               	movf	??_CC2500_InitSetREG,w
  9727  1DBC  07A8               	addwf	CC2500_InitSetREG@loop_c,f
  9728  1DBD  2D96               	goto	L5
  9729  1DBE                     __end_of_CC2500_InitSetREG:	
  9730                           
  9731                           	psect	text45
  9732  1BB6                     __ptext45:	
  9733 ;; *************** function _CC2500_InitPATable *****************
  9734 ;; Defined at:
  9735 ;;		line 181 in file "../src/CC2500_B1.c"
  9736 ;; Parameters:    Size  Location     Type
  9737 ;;		None
  9738 ;; Auto vars:     Size  Location     Type
  9739 ;;  loop_d          1    7[BANK0 ] unsigned char 
  9740 ;;  temp            1    6[BANK0 ] unsigned char 
  9741 ;; Return value:  Size  Location     Type
  9742 ;;		None               void
  9743 ;; Registers used:
  9744 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9745 ;; Tracked objects:
  9746 ;;		On entry : 0/0
  9747 ;;		On exit  : 0/0
  9748 ;;		Unchanged: 0/0
  9749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9751 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9752 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9753 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9754 ;;Total ram usage:        3 bytes
  9755 ;; Hardware stack levels used:    1
  9756 ;; Hardware stack levels required when called:    7
  9757 ;; This function calls:
  9758 ;;		_CC2500_WriteREG
  9759 ;; This function is called by:
  9760 ;;		_CC2500_PowerOnInitial
  9761 ;; This function uses a non-reentrant model
  9762 ;;
  9763                           
  9764                           
  9765                           ;psect for function _CC2500_InitPATable
  9766  1BB6                     _CC2500_InitPATable:	
  9767                           
  9768                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9769                           ;CC2500_B1.c: 183: unsigned char temp;
  9770                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9771                           
  9772                           ;incstack = 0
  9773                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9774  1BB6  0020               	movlb	0	; select bank0
  9775  1BB7  01A7               	clrf	CC2500_InitPATable@loop_d
  9776  1BB8                     L6:	
  9777  1BB8  3008               	movlw	8
  9778  1BB9  0227               	subwf	CC2500_InitPATable@loop_d,w
  9779  1BBA  1803               	btfsc	3,0
  9780  1BBB  0008               	return
  9781                           
  9782                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9783  1BBC  0827               	movf	CC2500_InitPATable@loop_d,w
  9784  1BBD  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9785  1BBE  0084               	movwf	4
  9786  1BBF  3098               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9787  1BC0  1803               	skipnc
  9788  1BC1  3E01               	addlw	1
  9789  1BC2  0085               	movwf	5
  9790  1BC3  0800               	movf	0,w	;code access
  9791  1BC4  00A5               	movwf	??_CC2500_InitPATable
  9792  1BC5  0825               	movf	??_CC2500_InitPATable,w
  9793  1BC6  00A6               	movwf	CC2500_InitPATable@temp
  9794                           
  9795                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9796  1BC7  0826               	movf	CC2500_InitPATable@temp,w
  9797  1BC8  00A5               	movwf	??_CC2500_InitPATable
  9798  1BC9  0825               	movf	??_CC2500_InitPATable,w
  9799  1BCA  00A2               	movwf	CC2500_WriteREG@value
  9800  1BCB  303E               	movlw	62
  9801  1BCC  319C  24FC  319B   	fcall	_CC2500_WriteREG
  9802  1BCF  3001               	movlw	1
  9803  1BD0  0020               	movlb	0	; select bank0
  9804  1BD1  00A5               	movwf	??_CC2500_InitPATable
  9805  1BD2  0825               	movf	??_CC2500_InitPATable,w
  9806  1BD3  07A7               	addwf	CC2500_InitPATable@loop_d,f
  9807  1BD4  2BB8               	goto	L6
  9808  1BD5                     __end_of_CC2500_InitPATable:	
  9809                           
  9810                           	psect	text46
  9811  1CFC                     __ptext46:	
  9812 ;; *************** function _CC2500_WriteREG *****************
  9813 ;; Defined at:
  9814 ;;		line 258 in file "../src/CC2500_B1.c"
  9815 ;; Parameters:    Size  Location     Type
  9816 ;;  w_addr          1    wreg     unsigned char 
  9817 ;;  value           1    2[BANK0 ] unsigned char 
  9818 ;; Auto vars:     Size  Location     Type
  9819 ;;  w_addr          1    4[BANK0 ] unsigned char 
  9820 ;; Return value:  Size  Location     Type
  9821 ;;		None               void
  9822 ;; Registers used:
  9823 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9824 ;; Tracked objects:
  9825 ;;		On entry : 0/0
  9826 ;;		On exit  : 0/0
  9827 ;;		Unchanged: 0/0
  9828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9829 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9830 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9831 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9832 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9833 ;;Total ram usage:        3 bytes
  9834 ;; Hardware stack levels used:    1
  9835 ;; Hardware stack levels required when called:    6
  9836 ;; This function calls:
  9837 ;;		_CC2500_WriteByte
  9838 ;;		_RF_Timeout_Counter
  9839 ;;		_setRF_TimeoutCleared
  9840 ;; This function is called by:
  9841 ;;		_CC2500_InitSetREG
  9842 ;;		_CC2500_InitPATable
  9843 ;; This function uses a non-reentrant model
  9844 ;;
  9845                           
  9846                           
  9847                           ;psect for function _CC2500_WriteREG
  9848  1CFC                     _CC2500_WriteREG:	
  9849                           
  9850                           ;incstack = 0
  9851                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9852                           ;CC2500_WriteREG@w_addr stored from wreg
  9853  1CFC  0020               	movlb	0	; select bank0
  9854  1CFD  00A4               	movwf	CC2500_WriteREG@w_addr
  9855                           
  9856                           ;CC2500_B1.c: 259: RC4 = 0;
  9857  1CFE  120E               	bcf	14,4	;volatile
  9858                           
  9859                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9860  1CFF  0824               	movf	CC2500_WriteREG@w_addr,w
  9861  1D00  00A3               	movwf	??_CC2500_WriteREG
  9862  1D01  0823               	movf	??_CC2500_WriteREG,w
  9863  1D02  0021               	movlb	1	; select bank1
  9864  1D03  00DF               	movwf	_SPI0Buffer^(0+128)
  9865                           
  9866                           ;CC2500_B1.c: 261: while (RC2 == 1 && RF1.Timeout == 0) {
  9867  1D04  2D08               	goto	l9652
  9868  1D05                     l9650:	
  9869                           
  9870                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9871  1D05  3199  2193  319C   	fcall	_RF_Timeout_Counter
  9872  1D08                     l9652:	
  9873  1D08  0020               	movlb	0	; select bank0
  9874  1D09  1D0E               	btfss	14,2	;volatile
  9875  1D0A  2D0E               	goto	l9656
  9876  1D0B  0021               	movlb	1	; select bank1
  9877  1D0C  1F21               	btfss	(_RF1^(0+128)+1),6
  9878  1D0D  2D05               	goto	l9650
  9879  1D0E                     l9656:	
  9880                           
  9881                           ;CC2500_B1.c: 263: };
  9882                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9883  1D0E  31A6  26B0  319C   	fcall	_setRF_TimeoutCleared
  9884                           
  9885                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9886  1D11  319A  22A2  319C   	fcall	_CC2500_WriteByte
  9887                           
  9888                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9889  1D14  0020               	movlb	0	; select bank0
  9890  1D15  0822               	movf	CC2500_WriteREG@value,w
  9891  1D16  00A3               	movwf	??_CC2500_WriteREG
  9892  1D17  0823               	movf	??_CC2500_WriteREG,w
  9893  1D18  0021               	movlb	1	; select bank1
  9894  1D19  00DF               	movwf	_SPI0Buffer^(0+128)
  9895                           
  9896                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9897  1D1A  319A  22A2         	fcall	_CC2500_WriteByte
  9898                           
  9899                           ;CC2500_B1.c: 269: RC4 = 1;
  9900  1D1C  0020               	movlb	0	; select bank0
  9901  1D1D  160E               	bsf	14,4	;volatile
  9902  1D1E  0008               	return
  9903  1D1F                     __end_of_CC2500_WriteREG:	
  9904                           
  9905                           	psect	text47
  9906  27B8                     __ptext47:	
  9907 ;; *************** function _CC2500_FrequencyCabr *****************
  9908 ;; Defined at:
  9909 ;;		line 208 in file "../src/CC2500_B1.c"
  9910 ;; Parameters:    Size  Location     Type
  9911 ;;		None
  9912 ;; Auto vars:     Size  Location     Type
  9913 ;;		None
  9914 ;; Return value:  Size  Location     Type
  9915 ;;		None               void
  9916 ;; Registers used:
  9917 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9918 ;; Tracked objects:
  9919 ;;		On entry : 0/0
  9920 ;;		On exit  : 0/0
  9921 ;;		Unchanged: 0/0
  9922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9924 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9926 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9927 ;;Total ram usage:        0 bytes
  9928 ;; Hardware stack levels used:    1
  9929 ;; Hardware stack levels required when called:    7
  9930 ;; This function calls:
  9931 ;;		_CC2500_WriteCommand
  9932 ;;		_DelayTime_1us
  9933 ;; This function is called by:
  9934 ;;		_CC2500_PowerOnInitial
  9935 ;; This function uses a non-reentrant model
  9936 ;;
  9937                           
  9938                           
  9939                           ;psect for function _CC2500_FrequencyCabr
  9940  27B8                     _CC2500_FrequencyCabr:	
  9941                           
  9942                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9943                           
  9944                           ;incstack = 0
  9945                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9946  27B8  3033               	movlw	51
  9947  27B9  319A  22D5  31A7   	fcall	_CC2500_WriteCommand
  9948                           
  9949                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9950  27BC  30E8               	movlw	232
  9951  27BD  0020               	movlb	0	; select bank0
  9952  27BE  00A0               	movwf	DelayTime_1us@count
  9953  27BF  3003               	movlw	3
  9954  27C0  00A1               	movwf	DelayTime_1us@count+1
  9955  27C1  3187  27D9         	fcall	_DelayTime_1us
  9956  27C3  0008               	return
  9957  27C4                     __end_of_CC2500_FrequencyCabr:	
  9958                           
  9959                           	psect	text48
  9960  07D9                     __ptext48:	
  9961 ;; *************** function _DelayTime_1us *****************
  9962 ;; Defined at:
  9963 ;;		line 327 in file "../src/CC2500_B1.c"
  9964 ;; Parameters:    Size  Location     Type
  9965 ;;  count           2    0[BANK0 ] int 
  9966 ;; Auto vars:     Size  Location     Type
  9967 ;;  j               2    4[BANK0 ] unsigned int 
  9968 ;;  i               2    2[BANK0 ] unsigned int 
  9969 ;; Return value:  Size  Location     Type
  9970 ;;		None               void
  9971 ;; Registers used:
  9972 ;;		wreg, status,2
  9973 ;; Tracked objects:
  9974 ;;		On entry : 0/0
  9975 ;;		On exit  : 0/0
  9976 ;;		Unchanged: 0/0
  9977 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9978 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9979 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9981 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9982 ;;Total ram usage:        6 bytes
  9983 ;; Hardware stack levels used:    1
  9984 ;; Hardware stack levels required when called:    5
  9985 ;; This function calls:
  9986 ;;		Nothing
  9987 ;; This function is called by:
  9988 ;;		_CC2500_PowerRST
  9989 ;;		_CC2500_FrequencyCabr
  9990 ;; This function uses a non-reentrant model
  9991 ;;
  9992                           
  9993                           
  9994                           ;psect for function _DelayTime_1us
  9995  07D9                     _DelayTime_1us:	
  9996                           
  9997                           ;CC2500_B1.c: 328: unsigned int i, j;
  9998                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9999                           
 10000                           ;incstack = 0
 10001                           ; Regs used in _DelayTime_1us: [wreg+status,2]
 10002  07D9  3001               	movlw	1
 10003  07DA  0020               	movlb	0	; select bank0
 10004  07DB  00A2               	movwf	DelayTime_1us@i
 10005  07DC  3000               	movlw	0
 10006  07DD  00A3               	movwf	DelayTime_1us@i+1
 10007  07DE                     l371:	
 10008  07DE  0821               	movf	DelayTime_1us@count+1,w
 10009  07DF  0223               	subwf	DelayTime_1us@i+1,w
 10010  07E0  1D03               	skipz
 10011  07E1  2FE4               	goto	u6545
 10012  07E2  0820               	movf	DelayTime_1us@count,w
 10013  07E3  0222               	subwf	DelayTime_1us@i,w
 10014  07E4                     u6545:	
 10015  07E4  1803               	btfsc	3,0
 10016  07E5  0008               	return
 10017                           
 10018                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
 10019  07E6  01A4               	clrf	DelayTime_1us@j
 10020  07E7  01A5               	clrf	DelayTime_1us@j+1
 10021  07E8  3000               	movlw	0
 10022  07E9  0225               	subwf	DelayTime_1us@j+1,w
 10023  07EA  3002               	movlw	2
 10024  07EB  1903               	skipnz
 10025  07EC  0224               	subwf	DelayTime_1us@j,w
 10026  07ED  1803               	btfsc	3,0
 10027  07EE  2FFA               	goto	l7166
 10028  07EF                     l7164:	
 10029  07EF  3001               	movlw	1
 10030  07F0  07A4               	addwf	DelayTime_1us@j,f
 10031  07F1  3000               	movlw	0
 10032  07F2  3DA5               	addwfc	DelayTime_1us@j+1,f
 10033  07F3  3000               	movlw	0
 10034  07F4  0225               	subwf	DelayTime_1us@j+1,w
 10035  07F5  3002               	movlw	2
 10036  07F6  1903               	skipnz
 10037  07F7  0224               	subwf	DelayTime_1us@j,w
 10038  07F8  1C03               	skipc
 10039  07F9  2FEF               	goto	l7164
 10040  07FA                     l7166:	
 10041  07FA  3001               	movlw	1
 10042  07FB  07A2               	addwf	DelayTime_1us@i,f
 10043  07FC  3000               	movlw	0
 10044  07FD  3DA3               	addwfc	DelayTime_1us@i+1,f
 10045  07FE  2FDE               	goto	l371
 10046  07FF                     __end_of_DelayTime_1us:	
 10047                           
 10048                           	psect	text49
 10049  26B8                     __ptext49:	
 10050 ;; *************** function _CC2500_ClearTXFIFO *****************
 10051 ;; Defined at:
 10052 ;;		line 194 in file "../src/CC2500_B1.c"
 10053 ;; Parameters:    Size  Location     Type
 10054 ;;		None
 10055 ;; Auto vars:     Size  Location     Type
 10056 ;;		None
 10057 ;; Return value:  Size  Location     Type
 10058 ;;		None               void
 10059 ;; Registers used:
 10060 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10061 ;; Tracked objects:
 10062 ;;		On entry : 0/0
 10063 ;;		On exit  : 0/0
 10064 ;;		Unchanged: 0/0
 10065 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10066 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10067 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10068 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10069 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10070 ;;Total ram usage:        0 bytes
 10071 ;; Hardware stack levels used:    1
 10072 ;; Hardware stack levels required when called:    7
 10073 ;; This function calls:
 10074 ;;		_CC2500_WriteCommand
 10075 ;; This function is called by:
 10076 ;;		_CC2500_PowerOnInitial
 10077 ;; This function uses a non-reentrant model
 10078 ;;
 10079                           
 10080                           
 10081                           ;psect for function _CC2500_ClearTXFIFO
 10082  26B8                     _CC2500_ClearTXFIFO:	
 10083                           
 10084                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
 10085                           
 10086                           ;incstack = 0
 10087                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10088  26B8  303B               	movlw	59
 10089  26B9  319A  22D5         	fcall	_CC2500_WriteCommand
 10090  26BB  0008               	return
 10091  26BC                     __end_of_CC2500_ClearTXFIFO:	
 10092                           
 10093                           	psect	text50
 10094  26B4                     __ptext50:	
 10095 ;; *************** function _CC2500_ClearRXFIFO *****************
 10096 ;; Defined at:
 10097 ;;		line 201 in file "../src/CC2500_B1.c"
 10098 ;; Parameters:    Size  Location     Type
 10099 ;;		None
 10100 ;; Auto vars:     Size  Location     Type
 10101 ;;		None
 10102 ;; Return value:  Size  Location     Type
 10103 ;;		None               void
 10104 ;; Registers used:
 10105 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10106 ;; Tracked objects:
 10107 ;;		On entry : 0/0
 10108 ;;		On exit  : 0/0
 10109 ;;		Unchanged: 0/0
 10110 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10112 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10114 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10115 ;;Total ram usage:        0 bytes
 10116 ;; Hardware stack levels used:    1
 10117 ;; Hardware stack levels required when called:    7
 10118 ;; This function calls:
 10119 ;;		_CC2500_WriteCommand
 10120 ;; This function is called by:
 10121 ;;		_CC2500_PowerOnInitial
 10122 ;; This function uses a non-reentrant model
 10123 ;;
 10124                           
 10125                           
 10126                           ;psect for function _CC2500_ClearRXFIFO
 10127  26B4                     _CC2500_ClearRXFIFO:	
 10128                           
 10129                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
 10130                           
 10131                           ;incstack = 0
 10132                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10133  26B4  303A               	movlw	58
 10134  26B5  319A  22D5         	fcall	_CC2500_WriteCommand
 10135  26B7  0008               	return
 10136  26B8                     __end_of_CC2500_ClearRXFIFO:	
 10137                           
 10138                           	psect	text51
 10139  1AD5                     __ptext51:	
 10140 ;; *************** function _CC2500_WriteCommand *****************
 10141 ;; Defined at:
 10142 ;;		line 292 in file "../src/CC2500_B1.c"
 10143 ;; Parameters:    Size  Location     Type
 10144 ;;  command         1    wreg     unsigned char 
 10145 ;; Auto vars:     Size  Location     Type
 10146 ;;  command         1    3[BANK0 ] unsigned char 
 10147 ;; Return value:  Size  Location     Type
 10148 ;;		None               void
 10149 ;; Registers used:
 10150 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10151 ;; Tracked objects:
 10152 ;;		On entry : 0/0
 10153 ;;		On exit  : 0/0
 10154 ;;		Unchanged: 0/0
 10155 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10157 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10158 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10159 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10160 ;;Total ram usage:        2 bytes
 10161 ;; Hardware stack levels used:    1
 10162 ;; Hardware stack levels required when called:    6
 10163 ;; This function calls:
 10164 ;;		_CC2500_WriteByte
 10165 ;;		_RF_Timeout_Counter
 10166 ;;		_setRF_TimeoutCleared
 10167 ;; This function is called by:
 10168 ;;		_CC2500_TxData
 10169 ;;		_CC2500_RxData
 10170 ;;		_CC2500_ClearTXFIFO
 10171 ;;		_CC2500_ClearRXFIFO
 10172 ;;		_CC2500_FrequencyCabr
 10173 ;;		_CC2500_SIDLEMode
 10174 ;;		_setRF_Main
 10175 ;;		_RF_RxDisable
 10176 ;; This function uses a non-reentrant model
 10177 ;;
 10178                           
 10179                           
 10180                           ;psect for function _CC2500_WriteCommand
 10181  1AD5                     _CC2500_WriteCommand:	
 10182                           
 10183                           ;incstack = 0
 10184                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10185                           ;CC2500_WriteCommand@command stored from wreg
 10186  1AD5  0020               	movlb	0	; select bank0
 10187  1AD6  00A3               	movwf	CC2500_WriteCommand@command
 10188                           
 10189                           ;CC2500_B1.c: 293: RC4 = 0;
 10190  1AD7  120E               	bcf	14,4	;volatile
 10191                           
 10192                           ;CC2500_B1.c: 294: SPI0Buffer = command;
 10193  1AD8  0823               	movf	CC2500_WriteCommand@command,w
 10194  1AD9  00A2               	movwf	??_CC2500_WriteCommand
 10195  1ADA  0822               	movf	??_CC2500_WriteCommand,w
 10196  1ADB  0021               	movlb	1	; select bank1
 10197  1ADC  00DF               	movwf	_SPI0Buffer^(0+128)
 10198                           
 10199                           ;CC2500_B1.c: 296: while (RC2 == 1 && RF1.Timeout == 0) {
 10200  1ADD  2AE1               	goto	l9618
 10201  1ADE                     l9616:	
 10202                           
 10203                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
 10204  1ADE  3199  2193  319A   	fcall	_RF_Timeout_Counter
 10205  1AE1                     l9618:	
 10206  1AE1  0020               	movlb	0	; select bank0
 10207  1AE2  1D0E               	btfss	14,2	;volatile
 10208  1AE3  2AE7               	goto	l9622
 10209  1AE4  0021               	movlb	1	; select bank1
 10210  1AE5  1F21               	btfss	(_RF1^(0+128)+1),6
 10211  1AE6  2ADE               	goto	l9616
 10212  1AE7                     l9622:	
 10213                           
 10214                           ;CC2500_B1.c: 298: };
 10215                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
 10216  1AE7  31A6  26B0  319A   	fcall	_setRF_TimeoutCleared
 10217                           
 10218                           ;CC2500_B1.c: 301: CC2500_WriteByte();
 10219  1AEA  319A  22A2         	fcall	_CC2500_WriteByte
 10220                           
 10221                           ;CC2500_B1.c: 302: RC4 = 1;
 10222  1AEC  0020               	movlb	0	; select bank0
 10223  1AED  160E               	bsf	14,4	;volatile
 10224  1AEE  0008               	return
 10225  1AEF                     __end_of_CC2500_WriteCommand:	
 10226                           
 10227                           	psect	text52
 10228  26B0                     __ptext52:	
 10229 ;; *************** function _setRF_TimeoutCleared *****************
 10230 ;; Defined at:
 10231 ;;		line 149 in file "../src/RF_Control_B1.c"
 10232 ;; Parameters:    Size  Location     Type
 10233 ;;		None
 10234 ;; Auto vars:     Size  Location     Type
 10235 ;;		None
 10236 ;; Return value:  Size  Location     Type
 10237 ;;		None               void
 10238 ;; Registers used:
 10239 ;;		status,2
 10240 ;; Tracked objects:
 10241 ;;		On entry : 0/0
 10242 ;;		On exit  : 0/0
 10243 ;;		Unchanged: 0/0
 10244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10248 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10249 ;;Total ram usage:        0 bytes
 10250 ;; Hardware stack levels used:    1
 10251 ;; Hardware stack levels required when called:    5
 10252 ;; This function calls:
 10253 ;;		Nothing
 10254 ;; This function is called by:
 10255 ;;		_CC2500_TxData
 10256 ;;		_CC2500_RxData
 10257 ;;		_CC2500_PowerRST
 10258 ;;		_CC2500_WriteREG
 10259 ;;		_CC2500_WriteCommand
 10260 ;;		_CC2500_ReadStatus
 10261 ;;		_CC2500_ReadREG
 10262 ;; This function uses a non-reentrant model
 10263 ;;
 10264                           
 10265                           
 10266                           ;psect for function _setRF_TimeoutCleared
 10267  26B0                     _setRF_TimeoutCleared:	
 10268                           
 10269                           ;RF_Control_B1.c: 150: RF1.TimeoutCount = 0;
 10270                           
 10271                           ;incstack = 0
 10272                           ; Regs used in _setRF_TimeoutCleared: [status,2]
 10273  26B0  0021               	movlb	1	; select bank1
 10274  26B1  01AD               	clrf	(_RF1^(0+128)+13)
 10275  26B2  01AE               	clrf	((_RF1+1)^(0+128)+13)
 10276  26B3  0008               	return
 10277  26B4                     __end_of_setRF_TimeoutCleared:	
 10278                           
 10279                           	psect	text53
 10280  1993                     __ptext53:	
 10281 ;; *************** function _RF_Timeout_Counter *****************
 10282 ;; Defined at:
 10283 ;;		line 141 in file "../src/RF_Control_B1.c"
 10284 ;; Parameters:    Size  Location     Type
 10285 ;;		None
 10286 ;; Auto vars:     Size  Location     Type
 10287 ;;		None
 10288 ;; Return value:  Size  Location     Type
 10289 ;;		None               void
 10290 ;; Registers used:
 10291 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 10292 ;; Tracked objects:
 10293 ;;		On entry : 0/0
 10294 ;;		On exit  : 0/0
 10295 ;;		Unchanged: 0/0
 10296 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10297 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10298 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10299 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10300 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10301 ;;Total ram usage:        0 bytes
 10302 ;; Hardware stack levels used:    1
 10303 ;; Hardware stack levels required when called:    5
 10304 ;; This function calls:
 10305 ;;		Nothing
 10306 ;; This function is called by:
 10307 ;;		_CC2500_TxData
 10308 ;;		_CC2500_RxData
 10309 ;;		_CC2500_PowerRST
 10310 ;;		_CC2500_WriteREG
 10311 ;;		_CC2500_WriteCommand
 10312 ;;		_CC2500_ReadStatus
 10313 ;;		_CC2500_ReadREG
 10314 ;; This function uses a non-reentrant model
 10315 ;;
 10316                           
 10317                           
 10318                           ;psect for function _RF_Timeout_Counter
 10319  1993                     _RF_Timeout_Counter:	
 10320                           
 10321                           ;RF_Control_B1.c: 142: RF1.TimeoutCount++;
 10322                           
 10323                           ;incstack = 0
 10324                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
 10325  1993  3001               	movlw	1
 10326  1994  0021               	movlb	1	; select bank1
 10327  1995  07AD               	addwf	(_RF1^(0+128)+13),f
 10328  1996  3000               	movlw	0
 10329  1997  3DAE               	addwfc	((_RF1+1)^(0+128)+13),f
 10330                           
 10331                           ;RF_Control_B1.c: 143: if (RF1.TimeoutCount == 25000) {
 10332  1998  300D               	movlw	13
 10333  1999  3EA0               	addlw	_RF1& (0+255)
 10334  199A  0086               	movwf	6
 10335  199B  0187               	clrf	7
 10336  199C  3F40               	moviw [0]fsr1
 10337  199D  3AA8               	xorlw	168
 10338  199E  1D03               	skipz
 10339  199F  29A2               	goto	u10575
 10340  19A0  3F41               	moviw [1]fsr1
 10341  19A1  3A61               	xorlw	97
 10342  19A2                     u10575:	
 10343  19A2  1D03               	skipz
 10344  19A3  0008               	return
 10345                           
 10346                           ;RF_Control_B1.c: 144: RF1.TimeoutCount = 0;
 10347  19A4  01AD               	clrf	(_RF1^(0+128)+13)
 10348  19A5  01AE               	clrf	((_RF1+1)^(0+128)+13)
 10349                           
 10350                           ;RF_Control_B1.c: 145: RF1.Timeout = 1;
 10351  19A6  1721               	bsf	(_RF1^(0+128)+1),6
 10352  19A7  0008               	return
 10353  19A8                     __end_of_RF_Timeout_Counter:	
 10354                           
 10355                           	psect	text54
 10356  1AA2                     __ptext54:	
 10357 ;; *************** function _CC2500_WriteByte *****************
 10358 ;; Defined at:
 10359 ;;		line 226 in file "../src/CC2500_B1.c"
 10360 ;; Parameters:    Size  Location     Type
 10361 ;;		None
 10362 ;; Auto vars:     Size  Location     Type
 10363 ;;  loop_a          1    1[BANK0 ] unsigned char 
 10364 ;; Return value:  Size  Location     Type
 10365 ;;		None               void
 10366 ;; Registers used:
 10367 ;;		wreg, status,2, status,0
 10368 ;; Tracked objects:
 10369 ;;		On entry : 0/0
 10370 ;;		On exit  : 0/0
 10371 ;;		Unchanged: 0/0
 10372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10374 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10375 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10376 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10377 ;;Total ram usage:        2 bytes
 10378 ;; Hardware stack levels used:    1
 10379 ;; Hardware stack levels required when called:    5
 10380 ;; This function calls:
 10381 ;;		Nothing
 10382 ;; This function is called by:
 10383 ;;		_CC2500_TxData
 10384 ;;		_CC2500_RxData
 10385 ;;		_CC2500_PowerRST
 10386 ;;		_CC2500_WriteREG
 10387 ;;		_CC2500_WriteCommand
 10388 ;;		_CC2500_ReadStatus
 10389 ;;		_CC2500_ReadREG
 10390 ;; This function uses a non-reentrant model
 10391 ;;
 10392                           
 10393                           
 10394                           ;psect for function _CC2500_WriteByte
 10395  1AA2                     _CC2500_WriteByte:	
 10396                           
 10397                           ;CC2500_B1.c: 227: unsigned char loop_a;
 10398                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
 10399                           
 10400                           ;incstack = 0
 10401                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
 10402  1AA2  0020               	movlb	0	; select bank0
 10403  1AA3  01A1               	clrf	CC2500_WriteByte@loop_a
 10404  1AA4                     L7:	
 10405  1AA4  3008               	movlw	8
 10406  1AA5  0221               	subwf	CC2500_WriteByte@loop_a,w
 10407  1AA6  1803               	btfsc	3,0
 10408  1AA7  0008               	return
 10409                           
 10410                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
 10411  1AA8  0021               	movlb	1	; select bank1
 10412  1AA9  1FDF               	btfss	_SPI0Buffer^(0+128),7
 10413  1AAA  2AAE               	goto	l327
 10414                           
 10415                           ;CC2500_B1.c: 230: RC0 = 1;
 10416  1AAB  0020               	movlb	0	; select bank0
 10417  1AAC  140E               	bsf	14,0	;volatile
 10418  1AAD  2AB0               	goto	l328
 10419  1AAE                     l327:	
 10420                           
 10421                           ;CC2500_B1.c: 231: else
 10422                           ;CC2500_B1.c: 232: RC0 = 0;
 10423  1AAE  0020               	movlb	0	; select bank0
 10424  1AAF  100E               	bcf	14,0	;volatile
 10425  1AB0                     l328:	
 10426                           
 10427                           ;CC2500_B1.c: 233: RC1 = 1;
 10428  1AB0  148E               	bsf	14,1	;volatile
 10429                           
 10430                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
 10431  1AB1  1003               	clrc
 10432  1AB2  0021               	movlb	1	; select bank1
 10433  1AB3  0DDF               	rlf	_SPI0Buffer^(0+128),f
 10434                           
 10435                           ;CC2500_B1.c: 235: RC1 = 0;
 10436  1AB4  0020               	movlb	0	; select bank0
 10437  1AB5  108E               	bcf	14,1	;volatile
 10438  1AB6  3001               	movlw	1
 10439  1AB7  00A0               	movwf	??_CC2500_WriteByte
 10440  1AB8  0820               	movf	??_CC2500_WriteByte,w
 10441  1AB9  07A1               	addwf	CC2500_WriteByte@loop_a,f
 10442  1ABA  2AA4               	goto	L7
 10443  1ABB                     __end_of_CC2500_WriteByte:	
 10444                           
 10445                           	psect	text55
 10446  26A0                     __ptext55:	
 10447 ;; *************** function _RF_Initialization *****************
 10448 ;; Defined at:
 10449 ;;		line 9 in file "../src/RF_Control_B1.c"
 10450 ;; Parameters:    Size  Location     Type
 10451 ;;		None
 10452 ;; Auto vars:     Size  Location     Type
 10453 ;;		None
 10454 ;; Return value:  Size  Location     Type
 10455 ;;		None               void
 10456 ;; Registers used:
 10457 ;;		wreg, status,2, status,0, pclath, cstack
 10458 ;; Tracked objects:
 10459 ;;		On entry : 0/0
 10460 ;;		On exit  : 0/0
 10461 ;;		Unchanged: 0/0
 10462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10466 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10467 ;;Total ram usage:        0 bytes
 10468 ;; Hardware stack levels used:    1
 10469 ;; Hardware stack levels required when called:    6
 10470 ;; This function calls:
 10471 ;;		_setRF_Initialization
 10472 ;; This function is called by:
 10473 ;;		_main
 10474 ;; This function uses a non-reentrant model
 10475 ;;
 10476                           
 10477                           
 10478                           ;psect for function _RF_Initialization
 10479  26A0                     _RF_Initialization:	
 10480                           
 10481                           ;RF_Control_B1.c: 11: setRF_Initialization();
 10482                           
 10483                           ;incstack = 0
 10484                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10485  26A0  31A7  2736         	fcall	_setRF_Initialization
 10486  26A2  0008               	return
 10487  26A3                     __end_of_RF_Initialization:	
 10488                           
 10489                           	psect	text56
 10490  2736                     __ptext56:	
 10491 ;; *************** function _setRF_Initialization *****************
 10492 ;; Defined at:
 10493 ;;		line 17 in file "../src/RF_Control_B1.c"
 10494 ;; Parameters:    Size  Location     Type
 10495 ;;		None
 10496 ;; Auto vars:     Size  Location     Type
 10497 ;;		None
 10498 ;; Return value:  Size  Location     Type
 10499 ;;		None               void
 10500 ;; Registers used:
 10501 ;;		wreg
 10502 ;; Tracked objects:
 10503 ;;		On entry : 0/0
 10504 ;;		On exit  : 0/0
 10505 ;;		Unchanged: 0/0
 10506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10509 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10510 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10511 ;;Total ram usage:        1 bytes
 10512 ;; Hardware stack levels used:    1
 10513 ;; Hardware stack levels required when called:    5
 10514 ;; This function calls:
 10515 ;;		Nothing
 10516 ;; This function is called by:
 10517 ;;		_RF_Initialization
 10518 ;; This function uses a non-reentrant model
 10519 ;;
 10520                           
 10521                           
 10522                           ;psect for function _setRF_Initialization
 10523  2736                     _setRF_Initialization:	
 10524                           
 10525                           ;RF_Control_B1.c: 19: Tx_Length = 21;
 10526                           
 10527                           ;incstack = 0
 10528                           ; Regs used in _setRF_Initialization: [wreg]
 10529  2736  3015               	movlw	21
 10530  2737  0020               	movlb	0	; select bank0
 10531  2738  00A0               	movwf	??_setRF_Initialization
 10532  2739  0820               	movf	??_setRF_Initialization,w
 10533  273A  0021               	movlb	1	; select bank1
 10534  273B  00E1               	movwf	_Tx_Length^(0+128)
 10535                           
 10536                           ;RF_Control_B1.c: 20: RF1.RunTime = 200;
 10537  273C  30C8               	movlw	200
 10538  273D  00A8               	movwf	(_RF1^(0+128)+8)
 10539  273E  3000               	movlw	0
 10540  273F  00A9               	movwf	(_RF1^(0+128)+9)
 10541  2740  0008               	return
 10542  2741                     __end_of_setRF_Initialization:	
 10543                           
 10544                           	psect	text57
 10545  18E9                     __ptext57:	
 10546 ;; *************** function _Mcu_Initialization *****************
 10547 ;; Defined at:
 10548 ;;		line 30 in file "../src/MCU_B1.c"
 10549 ;; Parameters:    Size  Location     Type
 10550 ;;		None
 10551 ;; Auto vars:     Size  Location     Type
 10552 ;;		None
 10553 ;; Return value:  Size  Location     Type
 10554 ;;		None               void
 10555 ;; Registers used:
 10556 ;;		wreg, status,2, status,0, pclath, cstack
 10557 ;; Tracked objects:
 10558 ;;		On entry : 0/0
 10559 ;;		On exit  : 0/0
 10560 ;;		Unchanged: 0/0
 10561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10562 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10563 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10564 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10565 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10566 ;;Total ram usage:        0 bytes
 10567 ;; Hardware stack levels used:    1
 10568 ;; Hardware stack levels required when called:    6
 10569 ;; This function calls:
 10570 ;;		_ADC_Set
 10571 ;;		_Fosc_Set
 10572 ;;		_IOC_Set
 10573 ;;		_IO_Set
 10574 ;;		_TMR1_Set
 10575 ;;		_WDT_Set
 10576 ;; This function is called by:
 10577 ;;		_main
 10578 ;; This function uses a non-reentrant model
 10579 ;;
 10580                           
 10581                           
 10582                           ;psect for function _Mcu_Initialization
 10583  18E9                     _Mcu_Initialization:	
 10584                           
 10585                           ;MCU_B1.c: 32: Fosc_Set();
 10586                           
 10587                           ;incstack = 0
 10588                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10589  18E9  31A6  26AC  3198   	fcall	_Fosc_Set
 10590                           
 10591                           ;MCU_B1.c: 34: IO_Set();
 10592  18EC  319A  22EF  3198   	fcall	_IO_Set
 10593                           
 10594                           ;MCU_B1.c: 36: ;;
 10595                           ;MCU_B1.c: 38: TMR1_Set();
 10596  18EF  31A7  27A0  3198   	fcall	_TMR1_Set
 10597                           
 10598                           ;MCU_B1.c: 40: ADC_Set();
 10599  18F2  31A6  26D7  3198   	fcall	_ADC_Set
 10600                           
 10601                           ;MCU_B1.c: 42: ;;
 10602                           ;MCU_B1.c: 44: ;;
 10603                           ;MCU_B1.c: 46: IOC_Set();
 10604  18F5  31A7  272B  3198   	fcall	_IOC_Set
 10605                           
 10606                           ;MCU_B1.c: 48: ;;
 10607                           ;MCU_B1.c: 50: ;;
 10608                           ;MCU_B1.c: 52: WDT_Set();
 10609  18F8  31A7  27AC         	fcall	_WDT_Set
 10610  18FA  0008               	return
 10611  18FB                     __end_of_Mcu_Initialization:	
 10612                           
 10613                           	psect	text58
 10614  27AC                     __ptext58:	
 10615 ;; *************** function _WDT_Set *****************
 10616 ;; Defined at:
 10617 ;;		line 1102 in file "../src/MCU_B1.c"
 10618 ;; Parameters:    Size  Location     Type
 10619 ;;		None
 10620 ;; Auto vars:     Size  Location     Type
 10621 ;;		None
 10622 ;; Return value:  Size  Location     Type
 10623 ;;		None               void
 10624 ;; Registers used:
 10625 ;;		wreg
 10626 ;; Tracked objects:
 10627 ;;		On entry : 0/0
 10628 ;;		On exit  : 0/0
 10629 ;;		Unchanged: 0/0
 10630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10632 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10633 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10634 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10635 ;;Total ram usage:        1 bytes
 10636 ;; Hardware stack levels used:    1
 10637 ;; Hardware stack levels required when called:    5
 10638 ;; This function calls:
 10639 ;;		Nothing
 10640 ;; This function is called by:
 10641 ;;		_Mcu_Initialization
 10642 ;; This function uses a non-reentrant model
 10643 ;;
 10644                           
 10645                           
 10646                           ;psect for function _WDT_Set
 10647  27AC                     _WDT_Set:	
 10648                           
 10649                           ;MCU_B1.c: 1109: WDTCON = 0b00010111;;
 10650                           
 10651                           ;incstack = 0
 10652                           ; Regs used in _WDT_Set: [wreg]
 10653  27AC  3017               	movlw	23
 10654  27AD  0021               	movlb	1	; select bank1
 10655  27AE  0097               	movwf	23	;volatile
 10656                           
 10657                           ;MCU_B1.c: 1111: WDT.Enable = 1;
 10658  27AF  0022               	movlb	2	; select bank2
 10659  27B0  1436               	bsf	_WDT^(0+256),0
 10660                           
 10661                           ;MCU_B1.c: 1112: WDT.Timer = 10;
 10662  27B1  300A               	movlw	10
 10663  27B2  0020               	movlb	0	; select bank0
 10664  27B3  00A0               	movwf	??_WDT_Set
 10665  27B4  0820               	movf	??_WDT_Set,w
 10666  27B5  0022               	movlb	2	; select bank2
 10667  27B6  00B7               	movwf	(_WDT^(0+256)+1)
 10668  27B7  0008               	return
 10669  27B8                     __end_of_WDT_Set:	
 10670                           
 10671                           	psect	text59
 10672  27A0                     __ptext59:	
 10673 ;; *************** function _TMR1_Set *****************
 10674 ;; Defined at:
 10675 ;;		line 226 in file "../src/MCU_B1.c"
 10676 ;; Parameters:    Size  Location     Type
 10677 ;;		None
 10678 ;; Auto vars:     Size  Location     Type
 10679 ;;		None
 10680 ;; Return value:  Size  Location     Type
 10681 ;;		None               void
 10682 ;; Registers used:
 10683 ;;		wreg
 10684 ;; Tracked objects:
 10685 ;;		On entry : 0/0
 10686 ;;		On exit  : 0/0
 10687 ;;		Unchanged: 0/0
 10688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10689 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10690 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10691 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10692 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10693 ;;Total ram usage:        0 bytes
 10694 ;; Hardware stack levels used:    1
 10695 ;; Hardware stack levels required when called:    5
 10696 ;; This function calls:
 10697 ;;		Nothing
 10698 ;; This function is called by:
 10699 ;;		_Mcu_Initialization
 10700 ;; This function uses a non-reentrant model
 10701 ;;
 10702                           
 10703                           
 10704                           ;psect for function _TMR1_Set
 10705  27A0                     _TMR1_Set:	
 10706                           
 10707                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
 10708                           
 10709                           ;incstack = 0
 10710                           ; Regs used in _TMR1_Set: [wreg]
 10711  27A0  3041               	movlw	65
 10712  27A1  0020               	movlb	0	; select bank0
 10713  27A2  0098               	movwf	24	;volatile
 10714                           
 10715                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
 10716  27A3  30FA               	movlw	250
 10717  27A4  0097               	movwf	23	;volatile
 10718                           
 10719                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
 10720  27A5  3038               	movlw	56
 10721  27A6  0096               	movwf	22	;volatile
 10722                           
 10723                           ;MCU_B1.c: 230: TMR1IE = 1;
 10724  27A7  0021               	movlb	1	; select bank1
 10725  27A8  1411               	bsf	17,0	;volatile
 10726                           
 10727                           ;MCU_B1.c: 231: PEIE = 1;
 10728  27A9  170B               	bsf	11,6	;volatile
 10729                           
 10730                           ;MCU_B1.c: 232: GIE = 1;
 10731  27AA  178B               	bsf	11,7	;volatile
 10732  27AB  0008               	return
 10733  27AC                     __end_of_TMR1_Set:	
 10734                           
 10735                           	psect	text60
 10736  1AEF                     __ptext60:	
 10737 ;; *************** function _IO_Set *****************
 10738 ;; Defined at:
 10739 ;;		line 60 in file "../src/MCU_B1.c"
 10740 ;; Parameters:    Size  Location     Type
 10741 ;;		None
 10742 ;; Auto vars:     Size  Location     Type
 10743 ;;		None
 10744 ;; Return value:  Size  Location     Type
 10745 ;;		None               void
 10746 ;; Registers used:
 10747 ;;		wreg, status,2
 10748 ;; Tracked objects:
 10749 ;;		On entry : 0/0
 10750 ;;		On exit  : 0/0
 10751 ;;		Unchanged: 0/0
 10752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10754 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10756 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10757 ;;Total ram usage:        0 bytes
 10758 ;; Hardware stack levels used:    1
 10759 ;; Hardware stack levels required when called:    5
 10760 ;; This function calls:
 10761 ;;		Nothing
 10762 ;; This function is called by:
 10763 ;;		_Mcu_Initialization
 10764 ;; This function uses a non-reentrant model
 10765 ;;
 10766                           
 10767                           
 10768                           ;psect for function _IO_Set
 10769  1AEF                     _IO_Set:	
 10770                           
 10771                           ;MCU_B1.c: 92: TRISA = 0b01110111;;
 10772                           
 10773                           ;incstack = 0
 10774                           ; Regs used in _IO_Set: [wreg+status,2]
 10775  1AEF  3077               	movlw	119
 10776  1AF0  0021               	movlb	1	; select bank1
 10777  1AF1  008C               	movwf	12	;volatile
 10778                           
 10779                           ;MCU_B1.c: 93: TRISB = 0b00000111;;
 10780  1AF2  3007               	movlw	7
 10781  1AF3  008D               	movwf	13	;volatile
 10782                           
 10783                           ;MCU_B1.c: 94: TRISC = 0b00001100;;
 10784  1AF4  300C               	movlw	12
 10785  1AF5  008E               	movwf	14	;volatile
 10786                           
 10787                           ;MCU_B1.c: 96: LATA = 0b00000000;;
 10788  1AF6  0022               	movlb	2	; select bank2
 10789  1AF7  018C               	clrf	12	;volatile
 10790                           
 10791                           ;MCU_B1.c: 97: LATB = 0b00000010;;
 10792  1AF8  3002               	movlw	2
 10793  1AF9  008D               	movwf	13	;volatile
 10794                           
 10795                           ;MCU_B1.c: 98: LATC = 0b00000000;;
 10796  1AFA  018E               	clrf	14	;volatile
 10797                           
 10798                           ;MCU_B1.c: 100: ANSELA = 0b00100010;;
 10799  1AFB  3022               	movlw	34
 10800  1AFC  0023               	movlb	3	; select bank3
 10801  1AFD  008C               	movwf	12	;volatile
 10802                           
 10803                           ;MCU_B1.c: 101: ANSELB = 0b00000000;;
 10804  1AFE  018D               	clrf	13	;volatile
 10805                           
 10806                           ;MCU_B1.c: 102: ANSELC = 0b00000000;;
 10807  1AFF  018E               	clrf	14	;volatile
 10808                           
 10809                           ;MCU_B1.c: 104: PORTA = 0b01110111;;
 10810  1B00  3077               	movlw	119
 10811  1B01  0020               	movlb	0	; select bank0
 10812  1B02  008C               	movwf	12	;volatile
 10813                           
 10814                           ;MCU_B1.c: 105: PORTB = 0b00000111;;
 10815  1B03  3007               	movlw	7
 10816  1B04  008D               	movwf	13	;volatile
 10817                           
 10818                           ;MCU_B1.c: 106: PORTC = 0b00001100;;
 10819  1B05  300C               	movlw	12
 10820  1B06  008E               	movwf	14	;volatile
 10821                           
 10822                           ;MCU_B1.c: 108: WPUB = 0b00000000;;
 10823  1B07  0024               	movlb	4	; select bank4
 10824  1B08  018D               	clrf	13	;volatile
 10825  1B09  0008               	return
 10826  1B0A                     __end_of_IO_Set:	
 10827                           
 10828                           	psect	text61
 10829  272B                     __ptext61:	
 10830 ;; *************** function _IOC_Set *****************
 10831 ;; Defined at:
 10832 ;;		line 380 in file "../src/MCU_B1.c"
 10833 ;; Parameters:    Size  Location     Type
 10834 ;;		None
 10835 ;; Auto vars:     Size  Location     Type
 10836 ;;		None
 10837 ;; Return value:  Size  Location     Type
 10838 ;;		None               void
 10839 ;; Registers used:
 10840 ;;		wreg, status,2
 10841 ;; Tracked objects:
 10842 ;;		On entry : 0/0
 10843 ;;		On exit  : 0/0
 10844 ;;		Unchanged: 0/0
 10845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10846 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10848 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10849 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10850 ;;Total ram usage:        0 bytes
 10851 ;; Hardware stack levels used:    1
 10852 ;; Hardware stack levels required when called:    5
 10853 ;; This function calls:
 10854 ;;		Nothing
 10855 ;; This function is called by:
 10856 ;;		_Mcu_Initialization
 10857 ;; This function uses a non-reentrant model
 10858 ;;
 10859                           
 10860                           
 10861                           ;psect for function _IOC_Set
 10862  272B                     _IOC_Set:	
 10863                           
 10864                           ;MCU_B1.c: 382: IOCBP = 0b00000100;;
 10865                           
 10866                           ;incstack = 0
 10867                           ; Regs used in _IOC_Set: [wreg+status,2]
 10868  272B  3004               	movlw	4
 10869  272C  0027               	movlb	7	; select bank7
 10870  272D  0094               	movwf	20	;volatile
 10871                           
 10872                           ;MCU_B1.c: 383: IOCBN = 0b00000100;;
 10873  272E  3004               	movlw	4
 10874  272F  0095               	movwf	21	;volatile
 10875                           
 10876                           ;MCU_B1.c: 385: IOCBF = 0b00000000;
 10877  2730  0196               	clrf	22	;volatile
 10878                           
 10879                           ;MCU_B1.c: 387: IOCIE = 1;
 10880  2731  158B               	bsf	11,3	;volatile
 10881                           
 10882                           ;MCU_B1.c: 388: IOCIF = 0;
 10883  2732  100B               	bcf	11,0	;volatile
 10884                           
 10885                           ;MCU_B1.c: 389: PEIE = 1;
 10886  2733  170B               	bsf	11,6	;volatile
 10887                           
 10888                           ;MCU_B1.c: 390: GIE = 1;
 10889  2734  178B               	bsf	11,7	;volatile
 10890  2735  0008               	return
 10891  2736                     __end_of_IOC_Set:	
 10892                           
 10893                           	psect	text62
 10894  26AC                     __ptext62:	
 10895 ;; *************** function _Fosc_Set *****************
 10896 ;; Defined at:
 10897 ;;		line 56 in file "../src/MCU_B1.c"
 10898 ;; Parameters:    Size  Location     Type
 10899 ;;		None
 10900 ;; Auto vars:     Size  Location     Type
 10901 ;;		None
 10902 ;; Return value:  Size  Location     Type
 10903 ;;		None               void
 10904 ;; Registers used:
 10905 ;;		wreg
 10906 ;; Tracked objects:
 10907 ;;		On entry : 0/0
 10908 ;;		On exit  : 0/0
 10909 ;;		Unchanged: 0/0
 10910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10914 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10915 ;;Total ram usage:        0 bytes
 10916 ;; Hardware stack levels used:    1
 10917 ;; Hardware stack levels required when called:    5
 10918 ;; This function calls:
 10919 ;;		Nothing
 10920 ;; This function is called by:
 10921 ;;		_Mcu_Initialization
 10922 ;; This function uses a non-reentrant model
 10923 ;;
 10924                           
 10925                           
 10926                           ;psect for function _Fosc_Set
 10927  26AC                     _Fosc_Set:	
 10928                           
 10929                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10930                           
 10931                           ;incstack = 0
 10932                           ; Regs used in _Fosc_Set: [wreg]
 10933  26AC  3078               	movlw	120
 10934  26AD  0021               	movlb	1	; select bank1
 10935  26AE  0099               	movwf	25	;volatile
 10936  26AF  0008               	return
 10937  26B0                     __end_of_Fosc_Set:	
 10938                           
 10939                           	psect	text63
 10940  26D7                     __ptext63:	
 10941 ;; *************** function _ADC_Set *****************
 10942 ;; Defined at:
 10943 ;;		line 427 in file "../src/MCU_B1.c"
 10944 ;; Parameters:    Size  Location     Type
 10945 ;;		None
 10946 ;; Auto vars:     Size  Location     Type
 10947 ;;		None
 10948 ;; Return value:  Size  Location     Type
 10949 ;;		None               void
 10950 ;; Registers used:
 10951 ;;		wreg
 10952 ;; Tracked objects:
 10953 ;;		On entry : 0/0
 10954 ;;		On exit  : 0/0
 10955 ;;		Unchanged: 0/0
 10956 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10957 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10960 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10961 ;;Total ram usage:        0 bytes
 10962 ;; Hardware stack levels used:    1
 10963 ;; Hardware stack levels required when called:    5
 10964 ;; This function calls:
 10965 ;;		Nothing
 10966 ;; This function is called by:
 10967 ;;		_Mcu_Initialization
 10968 ;; This function uses a non-reentrant model
 10969 ;;
 10970                           
 10971                           
 10972                           ;psect for function _ADC_Set
 10973  26D7                     _ADC_Set:	
 10974                           
 10975                           ;MCU_B1.c: 428: ADCON1 = 0xf3;
 10976                           
 10977                           ;incstack = 0
 10978                           ; Regs used in _ADC_Set: [wreg]
 10979  26D7  30F3               	movlw	243
 10980  26D8  0021               	movlb	1	; select bank1
 10981  26D9  009E               	movwf	30	;volatile
 10982                           
 10983                           ;MCU_B1.c: 429: FVRCON = 0xc1;
 10984  26DA  30C1               	movlw	193
 10985  26DB  0022               	movlb	2	; select bank2
 10986  26DC  0097               	movwf	23	;volatile
 10987  26DD  0008               	return
 10988  26DE                     __end_of_ADC_Set:	
 10989                           
 10990                           	psect	text64
 10991  0053                     __ptext64:	
 10992 ;; *************** function _Load_Main *****************
 10993 ;; Defined at:
 10994 ;;		line 40 in file "../src/OverLoad_B1.c"
 10995 ;; Parameters:    Size  Location     Type
 10996 ;;		None
 10997 ;; Auto vars:     Size  Location     Type
 10998 ;;  i               2   16[BANK0 ] int 
 10999 ;;  LightsCount     1   15[BANK0 ] unsigned char 
 11000 ;;  Load_RunStat    1   14[BANK0 ] unsigned char 
 11001 ;;  ErrorCountVa    1   13[BANK0 ] unsigned char 
 11002 ;;  error           1   12[BANK0 ] unsigned char 
 11003 ;; Return value:  Size  Location     Type
 11004 ;;		None               void
 11005 ;; Registers used:
 11006 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11007 ;; Tracked objects:
 11008 ;;		On entry : 0/0
 11009 ;;		On exit  : 0/0
 11010 ;;		Unchanged: 0/0
 11011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11013 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11014 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11015 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11016 ;;Total ram usage:       10 bytes
 11017 ;; Hardware stack levels used:    1
 11018 ;; Hardware stack levels required when called:    6
 11019 ;; This function calls:
 11020 ;;		___lwdiv
 11021 ;;		___wmul
 11022 ;;		_getAll_DimmerIntr_Dimming_Sw_RF
 11023 ;;		_getDimmer_LoadGO
 11024 ;;		_getDimmer_Load_Status
 11025 ;;		_getMain_All_Error_Status
 11026 ;;		_getMain_All_LightsStatus
 11027 ;;		_getMain_Lights_Count
 11028 ;;		_setLoad_AH_AL_Restore
 11029 ;; This function is called by:
 11030 ;;		_main
 11031 ;; This function uses a non-reentrant model
 11032 ;;
 11033                           
 11034                           
 11035                           ;psect for function _Load_Main
 11036  0053                     _Load_Main:	
 11037                           
 11038                           ;OverLoad_B1.c: 41: char error = getMain_All_Error_Status(0);
 11039                           
 11040                           ;incstack = 0
 11041                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11042  0053  3000               	movlw	0
 11043  0054  3188  2000  3180   	fcall	_getMain_All_Error_Status
 11044  0057  0020               	movlb	0	; select bank0
 11045  0058  00A8               	movwf	??_Load_Main
 11046  0059  0828               	movf	??_Load_Main,w
 11047  005A  00AC               	movwf	Load_Main@error
 11048                           
 11049                           ;OverLoad_B1.c: 42: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount = 0;
 11050  005B  01AE               	clrf	Load_Main@Load_RunStatus
 11051  005C  01AD               	clrf	Load_Main@ErrorCountValue
 11052  005D  01AF               	clrf	Load_Main@LightsCount
 11053                           
 11054                           ;OverLoad_B1.c: 43: if (Load.Enable == 1) {
 11055  005E  0022               	movlb	2	; select bank2
 11056  005F  1C38               	btfss	_Load^(0+256),0
 11057  0060  29FF               	goto	l1625
 11058                           
 11059                           ;OverLoad_B1.c: 45: if (getMain_All_LightsStatus() == 0) {
 11060  0061  3199  2133  3180   	fcall	_getMain_All_LightsStatus
 11061  0064  3800               	iorlw	0
 11062  0065  1D03               	skipz
 11063  0066  2869               	goto	l9106
 11064                           
 11065                           ;OverLoad_B1.c: 46: Load.GO = 0;
 11066  0067  0022               	movlb	2	; select bank2
 11067  0068  288A               	goto	l9124
 11068  0069                     l9106:	
 11069                           ;OverLoad_B1.c: 47: } else {
 11070                           
 11071                           
 11072                           ;OverLoad_B1.c: 50: if (error == 0 && getAll_DimmerIntr_Dimming_Sw_RF() == 0) {
 11073  0069  0020               	movlb	0	; select bank0
 11074  006A  08AC               	movf	Load_Main@error,f
 11075  006B  1D03               	skipz
 11076  006C  2887               	goto	l1628
 11077  006D  319C  2475  3180   	fcall	_getAll_DimmerIntr_Dimming_Sw_RF
 11078  0070  3800               	iorlw	0
 11079  0071  1D03               	skipz
 11080  0072  2887               	goto	l1628
 11081                           
 11082                           ;OverLoad_B1.c: 51: Load.GO = 1;
 11083  0073  0022               	movlb	2	; select bank2
 11084  0074  14B8               	bsf	_Load^(0+256),1
 11085                           
 11086                           ;OverLoad_B1.c: 53: if (getDimmer_LoadGO() == 1) {
 11087  0075  31A6  26F6  3180   	fcall	_getDimmer_LoadGO
 11088  0078  3A01               	xorlw	1
 11089  0079  1D03               	skipz
 11090  007A  2882               	goto	l1629
 11091                           
 11092                           ;OverLoad_B1.c: 54: if (Load.Run == 0 && Load.OK == 0) {
 11093  007B  0022               	movlb	2	; select bank2
 11094  007C  1DB8               	btfss	_Load^(0+256),3
 11095  007D  1BB8               	btfsc	_Load^(0+256),7
 11096  007E  288B               	goto	l1627
 11097                           
 11098                           ;OverLoad_B1.c: 55: Load.Run = 1;
 11099  007F  15B8               	bsf	_Load^(0+256),3
 11100                           
 11101                           ;OverLoad_B1.c: 56: Load.Count = 0;
 11102  0080  01DD               	clrf	(_Load^(0+256)+37)
 11103                           
 11104                           ;OverLoad_B1.c: 57: }
 11105                           ;OverLoad_B1.c: 58: } else {
 11106  0081  288B               	goto	l1627
 11107  0082                     l1629:	
 11108                           
 11109                           ;OverLoad_B1.c: 59: if (Load.OK == 1) {
 11110  0082  0022               	movlb	2	; select bank2
 11111  0083  1FB8               	btfss	_Load^(0+256),7
 11112  0084  288B               	goto	l1627
 11113                           
 11114                           ;OverLoad_B1.c: 60: Load.OK = 0;
 11115  0085  13B8               	bcf	_Load^(0+256),7
 11116                           
 11117                           ;OverLoad_B1.c: 61: }
 11118                           ;OverLoad_B1.c: 62: }
 11119                           ;OverLoad_B1.c: 63: } else {
 11120  0086  288B               	goto	l1627
 11121  0087                     l1628:	
 11122                           
 11123                           ;OverLoad_B1.c: 64: if (Load.GO == 1) {
 11124  0087  0022               	movlb	2	; select bank2
 11125  0088  1CB8               	btfss	_Load^(0+256),1
 11126  0089  288B               	goto	l1627
 11127  008A                     l9124:	
 11128                           
 11129                           ;OverLoad_B1.c: 65: Load.GO = 0;
 11130  008A  10B8               	bcf	_Load^(0+256),1
 11131  008B                     l1627:	
 11132                           
 11133                           ;OverLoad_B1.c: 66: }
 11134                           ;OverLoad_B1.c: 67: }
 11135                           ;OverLoad_B1.c: 89: }
 11136                           ;OverLoad_B1.c: 92: if (Load.GO == 1) {
 11137  008B  1CB8               	btfss	_Load^(0+256),1
 11138  008C  29DB               	goto	l1635
 11139                           
 11140                           ;OverLoad_B1.c: 93: Load.LightsON = 1;
 11141  008D  1538               	bsf	_Load^(0+256),2
 11142                           
 11143                           ;OverLoad_B1.c: 95: if (Load.ADtoGO == 1) {
 11144  008E  1E38               	btfss	_Load^(0+256),4
 11145  008F  29D9               	goto	l1636
 11146                           
 11147                           ;OverLoad_B1.c: 96: Load.Time++;
 11148  0090  3001               	movlw	1
 11149  0091  07B9               	addwf	(_Load^(0+256)+1),f
 11150  0092  3000               	movlw	0
 11151  0093  3DBA               	addwfc	((_Load+1)^(0+256)+1),f
 11152                           
 11153                           ;OverLoad_B1.c: 97: if (Load.Time >= (40 / 20)) {
 11154  0094  3000               	movlw	0
 11155  0095  023A               	subwf	((_Load+1)^(0+256)+1),w
 11156  0096  3002               	movlw	2
 11157  0097  1903               	skipnz
 11158  0098  0239               	subwf	(_Load^(0+256)+1),w
 11159  0099  1C03               	skipc
 11160  009A  0008               	return
 11161                           
 11162                           ;OverLoad_B1.c: 98: Load.Time = 0;
 11163  009B  01B9               	clrf	(_Load^(0+256)+1)
 11164  009C  01BA               	clrf	((_Load+1)^(0+256)+1)
 11165                           
 11166                           ;OverLoad_B1.c: 99: Load.ADtoGO = 0;
 11167  009D  1238               	bcf	_Load^(0+256),4
 11168                           
 11169                           ;OverLoad_B1.c: 101: for (int i = 1; i < 4; i++) {
 11170  009E  3001               	movlw	1
 11171  009F  0020               	movlb	0	; select bank0
 11172  00A0  00B0               	movwf	Load_Main@i
 11173  00A1  3000               	movlw	0
 11174  00A2  00B1               	movwf	Load_Main@i+1
 11175  00A3  0831               	movf	Load_Main@i+1,w
 11176  00A4  3A80               	xorlw	128
 11177  00A5  00A8               	movwf	??_Load_Main
 11178  00A6  3080               	movlw	128
 11179  00A7  0228               	subwf	??_Load_Main,w
 11180  00A8  1D03               	skipz
 11181  00A9  28AC               	goto	u9925
 11182  00AA  3004               	movlw	4
 11183  00AB  0230               	subwf	Load_Main@i,w
 11184  00AC                     u9925:	
 11185  00AC  1803               	btfsc	3,0
 11186  00AD  28E0               	goto	l9146
 11187  00AE                     l9140:	
 11188                           
 11189                           ;OverLoad_B1.c: 102: Load.ADH += Load.AH[i];
 11190  00AE  0020               	movlb	0	; select bank0
 11191  00AF  3530               	lslf	Load_Main@i,w
 11192  00B0  3E43               	addlw	(_Load+11)& (0+255)
 11193  00B1  0086               	movwf	6
 11194  00B2  3001               	movlw	1	; select bank2/3
 11195  00B3  0087               	movwf	7
 11196  00B4  3F40               	moviw [0]fsr1
 11197  00B5  00A8               	movwf	??_Load_Main
 11198  00B6  3F41               	moviw [1]fsr1
 11199  00B7  00A9               	movwf	??_Load_Main+1
 11200  00B8  0828               	movf	??_Load_Main,w
 11201  00B9  0022               	movlb	2	; select bank2
 11202  00BA  07BD               	addwf	(_Load^(0+256)+5),f
 11203  00BB  0020               	movlb	0	; select bank0
 11204  00BC  0829               	movf	??_Load_Main+1,w
 11205  00BD  0022               	movlb	2	; select bank2
 11206  00BE  3DBE               	addwfc	((_Load+1)^(0+256)+5),f
 11207                           
 11208                           ;OverLoad_B1.c: 103: Load.ADL += Load.AL[i];
 11209  00BF  0020               	movlb	0	; select bank0
 11210  00C0  3530               	lslf	Load_Main@i,w
 11211  00C1  3E4D               	addlw	(_Load+21)& (0+255)
 11212  00C2  0086               	movwf	6
 11213  00C3  3001               	movlw	1	; select bank2/3
 11214  00C4  0087               	movwf	7
 11215  00C5  3F40               	moviw [0]fsr1
 11216  00C6  00A8               	movwf	??_Load_Main
 11217  00C7  3F41               	moviw [1]fsr1
 11218  00C8  00A9               	movwf	??_Load_Main+1
 11219  00C9  0828               	movf	??_Load_Main,w
 11220  00CA  0022               	movlb	2	; select bank2
 11221  00CB  07BF               	addwf	(_Load^(0+256)+7),f
 11222  00CC  0020               	movlb	0	; select bank0
 11223  00CD  0829               	movf	??_Load_Main+1,w
 11224  00CE  0022               	movlb	2	; select bank2
 11225  00CF  3DC0               	addwfc	((_Load+1)^(0+256)+7),f
 11226  00D0  3001               	movlw	1
 11227  00D1  0020               	movlb	0	; select bank0
 11228  00D2  07B0               	addwf	Load_Main@i,f
 11229  00D3  3000               	movlw	0
 11230  00D4  3DB1               	addwfc	Load_Main@i+1,f
 11231  00D5  0831               	movf	Load_Main@i+1,w
 11232  00D6  3A80               	xorlw	128
 11233  00D7  00A8               	movwf	??_Load_Main
 11234  00D8  3080               	movlw	128
 11235  00D9  0228               	subwf	??_Load_Main,w
 11236  00DA  1D03               	skipz
 11237  00DB  28DE               	goto	u9935
 11238  00DC  3004               	movlw	4
 11239  00DD  0230               	subwf	Load_Main@i,w
 11240  00DE                     u9935:	
 11241  00DE  1C03               	skipc
 11242  00DF  28AE               	goto	l9140
 11243  00E0                     l9146:	
 11244                           
 11245                           ;OverLoad_B1.c: 104: }
 11246                           ;OverLoad_B1.c: 105: Load.ADH /= 3;
 11247  00E0  3003               	movlw	3
 11248  00E1  0020               	movlb	0	; select bank0
 11249  00E2  00A0               	movwf	___lwdiv@divisor
 11250  00E3  3000               	movlw	0
 11251  00E4  00A1               	movwf	___lwdiv@divisor+1
 11252  00E5  0022               	movlb	2	; select bank2
 11253  00E6  083E               	movf	((_Load+1)^(0+256)+5),w
 11254  00E7  0020               	movlb	0	; select bank0
 11255  00E8  01A3               	clrf	___lwdiv@dividend+1
 11256  00E9  07A3               	addwf	___lwdiv@dividend+1,f
 11257  00EA  0022               	movlb	2	; select bank2
 11258  00EB  083D               	movf	(_Load^(0+256)+5),w
 11259  00EC  0020               	movlb	0	; select bank0
 11260  00ED  01A2               	clrf	___lwdiv@dividend
 11261  00EE  07A2               	addwf	___lwdiv@dividend,f
 11262  00EF  319E  26AA  3180   	fcall	___lwdiv
 11263  00F2  0020               	movlb	0	; select bank0
 11264  00F3  0821               	movf	?___lwdiv+1,w
 11265  00F4  0022               	movlb	2	; select bank2
 11266  00F5  01BE               	clrf	((_Load+1)^(0+256)+5)
 11267  00F6  07BE               	addwf	((_Load+1)^(0+256)+5),f
 11268  00F7  0020               	movlb	0	; select bank0
 11269  00F8  0820               	movf	?___lwdiv,w
 11270  00F9  0022               	movlb	2	; select bank2
 11271  00FA  01BD               	clrf	(_Load^(0+256)+5)
 11272  00FB  07BD               	addwf	(_Load^(0+256)+5),f
 11273                           
 11274                           ;OverLoad_B1.c: 106: Load.ADL /= 3;
 11275  00FC  3003               	movlw	3
 11276  00FD  0020               	movlb	0	; select bank0
 11277  00FE  00A0               	movwf	___lwdiv@divisor
 11278  00FF  3000               	movlw	0
 11279  0100  00A1               	movwf	___lwdiv@divisor+1
 11280  0101  0022               	movlb	2	; select bank2
 11281  0102  0840               	movf	((_Load+1)^(0+256)+7),w
 11282  0103  0020               	movlb	0	; select bank0
 11283  0104  01A3               	clrf	___lwdiv@dividend+1
 11284  0105  07A3               	addwf	___lwdiv@dividend+1,f
 11285  0106  0022               	movlb	2	; select bank2
 11286  0107  083F               	movf	(_Load^(0+256)+7),w
 11287  0108  0020               	movlb	0	; select bank0
 11288  0109  01A2               	clrf	___lwdiv@dividend
 11289  010A  07A2               	addwf	___lwdiv@dividend,f
 11290  010B  319E  26AA  3180   	fcall	___lwdiv
 11291  010E  0020               	movlb	0	; select bank0
 11292  010F  0821               	movf	?___lwdiv+1,w
 11293  0110  0022               	movlb	2	; select bank2
 11294  0111  01C0               	clrf	((_Load+1)^(0+256)+7)
 11295  0112  07C0               	addwf	((_Load+1)^(0+256)+7),f
 11296  0113  0020               	movlb	0	; select bank0
 11297  0114  0820               	movf	?___lwdiv,w
 11298  0115  0022               	movlb	2	; select bank2
 11299  0116  01BF               	clrf	(_Load^(0+256)+7)
 11300  0117  07BF               	addwf	(_Load^(0+256)+7),f
 11301                           
 11302                           ;OverLoad_B1.c: 108: setLoad_AH_AL_Restore();
 11303  0118  319B  2325  3180   	fcall	_setLoad_AH_AL_Restore
 11304                           
 11305                           ;OverLoad_B1.c: 110: if (Load.ADH >= Load.ADL) {
 11306  011B  0022               	movlb	2	; select bank2
 11307  011C  0840               	movf	((_Load+1)^(0+256)+7),w
 11308  011D  023E               	subwf	((_Load+1)^(0+256)+5),w
 11309  011E  1D03               	skipz
 11310  011F  2922               	goto	u9945
 11311  0120  083F               	movf	(_Load^(0+256)+7),w
 11312  0121  023D               	subwf	(_Load^(0+256)+5),w
 11313  0122                     u9945:	
 11314  0122  1C03               	skipc
 11315  0123  0008               	return
 11316                           
 11317                           ;OverLoad_B1.c: 111: Load.AD = Load.ADH - Load.ADL;
 11318  0124  3005               	movlw	5
 11319  0125  3E38               	addlw	_Load& (0+255)
 11320  0126  0086               	movwf	6
 11321  0127  3001               	movlw	1	; select bank2/3
 11322  0128  0087               	movwf	7
 11323  0129  093F               	comf	(_Load^(0+256)+7),w
 11324  012A  0020               	movlb	0	; select bank0
 11325  012B  00A8               	movwf	??_Load_Main
 11326  012C  0022               	movlb	2	; select bank2
 11327  012D  0940               	comf	((_Load+1)^(0+256)+7),w
 11328  012E  0020               	movlb	0	; select bank0
 11329  012F  00A9               	movwf	??_Load_Main+1
 11330  0130  0AA8               	incf	??_Load_Main,f
 11331  0131  1903               	skipnz
 11332  0132  0AA9               	incf	??_Load_Main+1,f
 11333  0133  3F40               	moviw [0]fsr1
 11334  0134  0728               	addwf	??_Load_Main,w
 11335  0135  0022               	movlb	2	; select bank2
 11336  0136  00D7               	movwf	(_Load^(0+256)+31)
 11337  0137  3F41               	moviw [1]fsr1
 11338  0138  0020               	movlb	0	; select bank0
 11339  0139  3D29               	addwfc	??_Load_Main+1,w
 11340  013A  0022               	movlb	2	; select bank2
 11341  013B  00D8               	movwf	(_Load^(0+256)+32)
 11342                           
 11343                           ;OverLoad_B1.c: 112: Load.ADH = 0;
 11344  013C  01BD               	clrf	(_Load^(0+256)+5)
 11345  013D  01BE               	clrf	((_Load+1)^(0+256)+5)
 11346                           
 11347                           ;OverLoad_B1.c: 113: Load.ADL = 0;
 11348  013E  01BF               	clrf	(_Load^(0+256)+7)
 11349  013F  01C0               	clrf	((_Load+1)^(0+256)+7)
 11350                           
 11351                           ;OverLoad_B1.c: 115: if (Load.Run == 1) {
 11352  0140  1DB8               	btfss	_Load^(0+256),3
 11353  0141  299B               	goto	l9186
 11354                           
 11355                           ;OverLoad_B1.c: 116: if (Load.Count < 2) {
 11356  0142  3002               	movlw	2
 11357  0143  025D               	subwf	(_Load^(0+256)+37),w
 11358  0144  1803               	skipnc
 11359  0145  299B               	goto	l9186
 11360                           
 11361                           ;OverLoad_B1.c: 117: Load.Count++;
 11362  0146  3001               	movlw	1
 11363  0147  0020               	movlb	0	; select bank0
 11364  0148  00A8               	movwf	??_Load_Main
 11365  0149  0828               	movf	??_Load_Main,w
 11366  014A  0022               	movlb	2	; select bank2
 11367  014B  07DD               	addwf	(_Load^(0+256)+37),f
 11368                           
 11369                           ;OverLoad_B1.c: 119: Load_RunStatus = getDimmer_Load_Status();
 11370  014C  31A6  26FE  3180   	fcall	_getDimmer_Load_Status
 11371  014F  0020               	movlb	0	; select bank0
 11372  0150  00A8               	movwf	??_Load_Main
 11373  0151  0828               	movf	??_Load_Main,w
 11374  0152  00AE               	movwf	Load_Main@Load_RunStatus
 11375                           
 11376                           ;OverLoad_B1.c: 124: LightsCount = getMain_Lights_Count();
 11377  0153  3198  20D7  3180   	fcall	_getMain_Lights_Count
 11378  0156  0020               	movlb	0	; select bank0
 11379  0157  00A8               	movwf	??_Load_Main
 11380  0158  0828               	movf	??_Load_Main,w
 11381  0159  00AF               	movwf	Load_Main@LightsCount
 11382                           
 11383                           ;OverLoad_B1.c: 126: if (Load.Count == 1) {
 11384  015A  0022               	movlb	2	; select bank2
 11385  015B  085D               	movf	(_Load^(0+256)+37),w
 11386  015C  3A01               	xorlw	1
 11387  015D  1D03               	skipz
 11388  015E  2963               	goto	l9172
 11389                           
 11390                           ;OverLoad_B1.c: 128: Load.JudgeValue = (20*85);
 11391  015F  30A4               	movlw	164
 11392  0160  00DB               	movwf	(_Load^(0+256)+35)
 11393  0161  3006               	movlw	6
 11394  0162  2970               	goto	L8
 11395  0163                     l9172:	
 11396                           ;OverLoad_B1.c: 129: } else if (Load.Count == 2) {
 11397                           
 11398  0163  085D               	movf	(_Load^(0+256)+37),w
 11399  0164  3A02               	xorlw	2
 11400  0165  1D03               	skipz
 11401  0166  299B               	goto	l9186
 11402                           
 11403                           ;OverLoad_B1.c: 130: if (LightsCount == 1) {
 11404  0167  0020               	movlb	0	; select bank0
 11405  0168  082F               	movf	Load_Main@LightsCount,w
 11406  0169  3A01               	xorlw	1
 11407  016A  1D03               	skipz
 11408  016B  2972               	goto	l9178
 11409                           
 11410                           ;OverLoad_B1.c: 131: Load.JudgeValue = (int)(1.1*85);
 11411  016C  305D               	movlw	93
 11412  016D  0022               	movlb	2	; select bank2
 11413  016E  00DB               	movwf	(_Load^(0+256)+35)
 11414  016F  3000               	movlw	0
 11415  0170                     L8:	
 11416  0170  00DC               	movwf	(_Load^(0+256)+36)
 11417                           
 11418                           ;OverLoad_B1.c: 132: } else {
 11419  0171  299B               	goto	l9186
 11420  0172                     l9178:	
 11421                           
 11422                           ;OverLoad_B1.c: 133: if (Load_RunStatus == 0) {
 11423  0172  0020               	movlb	0	; select bank0
 11424  0173  08AE               	movf	Load_Main@Load_RunStatus,f
 11425  0174  1D03               	skipz
 11426  0175  298F               	goto	l9182
 11427                           
 11428                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(1.1*85) * LightsCount;
 11429  0176  082F               	movf	Load_Main@LightsCount,w
 11430  0177  00A8               	movwf	??_Load_Main
 11431  0178  01A9               	clrf	??_Load_Main+1
 11432  0179  0828               	movf	??_Load_Main,w
 11433  017A  00A0               	movwf	___wmul@multiplier
 11434  017B  0829               	movf	??_Load_Main+1,w
 11435  017C  00A1               	movwf	___wmul@multiplier+1
 11436  017D  305D               	movlw	93
 11437  017E  00A2               	movwf	___wmul@multiplicand
 11438  017F  3000               	movlw	0
 11439  0180  00A3               	movwf	___wmul@multiplicand+1
 11440  0181  319B  2398  3180   	fcall	___wmul
 11441  0184  0020               	movlb	0	; select bank0
 11442  0185  0821               	movf	?___wmul+1,w
 11443  0186  0022               	movlb	2	; select bank2
 11444  0187  01DC               	clrf	((_Load+1)^(0+256)+35)
 11445  0188  07DC               	addwf	((_Load+1)^(0+256)+35),f
 11446  0189  0020               	movlb	0	; select bank0
 11447  018A  0820               	movf	?___wmul,w
 11448  018B  0022               	movlb	2	; select bank2
 11449  018C  01DB               	clrf	(_Load^(0+256)+35)
 11450  018D  07DB               	addwf	(_Load^(0+256)+35),f
 11451                           
 11452                           ;OverLoad_B1.c: 135: } else if (Load_RunStatus == 1) {
 11453  018E  299B               	goto	l9186
 11454  018F                     l9182:	
 11455  018F  0020               	movlb	0	; select bank0
 11456  0190  082E               	movf	Load_Main@Load_RunStatus,w
 11457  0191  3A01               	xorlw	1
 11458  0192  1D03               	skipz
 11459  0193  299B               	goto	l9186
 11460                           
 11461                           ;OverLoad_B1.c: 136: Load.JudgeValue = (int)(1.1*85) + Load.TotalLoad;
 11462  0194  0022               	movlb	2	; select bank2
 11463  0195  0841               	movf	(_Load^(0+256)+9),w
 11464  0196  3E5D               	addlw	93
 11465  0197  00DB               	movwf	(_Load^(0+256)+35)
 11466  0198  3000               	movlw	0
 11467  0199  3D42               	addwfc	((_Load+1)^(0+256)+9),w
 11468  019A  00DC               	movwf	((_Load+1)^(0+256)+35)
 11469  019B                     l9186:	
 11470                           
 11471                           ;OverLoad_B1.c: 137: }
 11472                           ;OverLoad_B1.c: 138: }
 11473                           ;OverLoad_B1.c: 139: }
 11474                           ;OverLoad_B1.c: 140: }
 11475                           ;OverLoad_B1.c: 141: }
 11476                           ;OverLoad_B1.c: 143: if (Load.AD >= Load.JudgeValue) {
 11477  019B  0022               	movlb	2	; select bank2
 11478  019C  085C               	movf	((_Load+1)^(0+256)+35),w
 11479  019D  0258               	subwf	((_Load+1)^(0+256)+31),w
 11480  019E  1D03               	skipz
 11481  019F  29A2               	goto	u10025
 11482  01A0  085B               	movf	(_Load^(0+256)+35),w
 11483  01A1  0257               	subwf	(_Load^(0+256)+31),w
 11484  01A2                     u10025:	
 11485  01A2  1C03               	skipc
 11486  01A3  29C1               	goto	l9202
 11487                           
 11488                           ;OverLoad_B1.c: 144: ErrorCountValue = LightsCount == 1 ? 2 : 3;
 11489  01A4  0020               	movlb	0	; select bank0
 11490  01A5  082F               	movf	Load_Main@LightsCount,w
 11491  01A6  3A01               	xorlw	1
 11492  01A7  1903               	skipnz
 11493  01A8  29AB               	goto	l9192
 11494  01A9  3003               	movlw	3
 11495  01AA  29AC               	goto	L9
 11496  01AB                     l9192:	
 11497  01AB  3002               	movlw	2
 11498  01AC                     L9:	
 11499  01AC  00AA               	movwf	_Load_Main$3735
 11500  01AD  3000               	movlw	0
 11501  01AE  00AB               	movwf	_Load_Main$3735+1
 11502  01AF  082A               	movf	_Load_Main$3735,w
 11503  01B0  00A8               	movwf	??_Load_Main
 11504  01B1  0828               	movf	??_Load_Main,w
 11505  01B2  00AD               	movwf	Load_Main@ErrorCountValue
 11506                           
 11507                           ;OverLoad_B1.c: 145: Load.ErrorCount++;
 11508  01B3  3001               	movlw	1
 11509  01B4  00A8               	movwf	??_Load_Main
 11510  01B5  0828               	movf	??_Load_Main,w
 11511  01B6  0022               	movlb	2	; select bank2
 11512  01B7  07DE               	addwf	(_Load^(0+256)+38),f
 11513                           
 11514                           ;OverLoad_B1.c: 146: if (Load.ErrorCount > ErrorCountValue) {
 11515  01B8  085E               	movf	(_Load^(0+256)+38),w
 11516  01B9  0020               	movlb	0	; select bank0
 11517  01BA  022D               	subwf	Load_Main@ErrorCountValue,w
 11518  01BB  1803               	skipnc
 11519  01BC  0008               	return
 11520                           
 11521                           ;OverLoad_B1.c: 147: Load.ErrorCount = 0;
 11522  01BD  0022               	movlb	2	; select bank2
 11523  01BE  01DE               	clrf	(_Load^(0+256)+38)
 11524                           
 11525                           ;OverLoad_B1.c: 148: Load.ERROR = 1;
 11526  01BF  16B8               	bsf	_Load^(0+256),5
 11527                           
 11528                           ;OverLoad_B1.c: 170: }
 11529                           ;OverLoad_B1.c: 171: } else {
 11530  01C0  0008               	return
 11531  01C1                     l9202:	
 11532                           
 11533                           ;OverLoad_B1.c: 172: Load.ErrorCount = 0;
 11534  01C1  01DE               	clrf	(_Load^(0+256)+38)
 11535                           
 11536                           ;OverLoad_B1.c: 173: if (Load.Run == 1) {
 11537  01C2  1DB8               	btfss	_Load^(0+256),3
 11538  01C3  0008               	return
 11539                           
 11540                           ;OverLoad_B1.c: 174: Load.SafeCount++;
 11541  01C4  3001               	movlw	1
 11542  01C5  0020               	movlb	0	; select bank0
 11543  01C6  00A8               	movwf	??_Load_Main
 11544  01C7  0828               	movf	??_Load_Main,w
 11545  01C8  0022               	movlb	2	; select bank2
 11546  01C9  07DF               	addwf	(_Load^(0+256)+39),f
 11547                           
 11548                           ;OverLoad_B1.c: 175: if (Load.SafeCount >= 3) {
 11549  01CA  3003               	movlw	3
 11550  01CB  025F               	subwf	(_Load^(0+256)+39),w
 11551  01CC  1C03               	skipc
 11552  01CD  0008               	return
 11553                           
 11554                           ;OverLoad_B1.c: 176: Load.SafeCount = 0;
 11555  01CE  01DF               	clrf	(_Load^(0+256)+39)
 11556                           
 11557                           ;OverLoad_B1.c: 177: Load.OK = 1;
 11558  01CF  17B8               	bsf	_Load^(0+256),7
 11559                           
 11560                           ;OverLoad_B1.c: 178: Load.Run = 0;
 11561  01D0  11B8               	bcf	_Load^(0+256),3
 11562                           
 11563                           ;OverLoad_B1.c: 179: Load.Count = 0;
 11564  01D1  01DD               	clrf	(_Load^(0+256)+37)
 11565                           
 11566                           ;OverLoad_B1.c: 180: Load.TotalLoad = Load.AD;
 11567  01D2  0858               	movf	((_Load+1)^(0+256)+31),w
 11568  01D3  01C2               	clrf	((_Load+1)^(0+256)+9)
 11569  01D4  07C2               	addwf	((_Load+1)^(0+256)+9),f
 11570  01D5  0857               	movf	(_Load^(0+256)+31),w
 11571  01D6  01C1               	clrf	(_Load^(0+256)+9)
 11572  01D7  07C1               	addwf	(_Load^(0+256)+9),f
 11573                           
 11574                           ;OverLoad_B1.c: 184: }
 11575                           ;OverLoad_B1.c: 185: }
 11576                           ;OverLoad_B1.c: 208: }
 11577                           ;OverLoad_B1.c: 209: }
 11578                           ;OverLoad_B1.c: 210: }
 11579                           ;OverLoad_B1.c: 211: } else {
 11580  01D8  0008               	return
 11581  01D9                     l1636:	
 11582                           
 11583                           ;OverLoad_B1.c: 212: Load.ADtoGO = 1;
 11584  01D9  1638               	bsf	_Load^(0+256),4
 11585                           
 11586                           ;OverLoad_B1.c: 213: }
 11587                           ;OverLoad_B1.c: 214: } else {
 11588  01DA  0008               	return
 11589  01DB                     l1635:	
 11590                           
 11591                           ;OverLoad_B1.c: 216: if (Load.LightsON == 1) {
 11592  01DB  1D38               	btfss	_Load^(0+256),2
 11593  01DC  29EE               	goto	l9238
 11594                           
 11595                           ;OverLoad_B1.c: 217: Load.LightsON = 0;
 11596  01DD  1138               	bcf	_Load^(0+256),2
 11597                           
 11598                           ;OverLoad_B1.c: 219: Load.ADtoGO = 0;
 11599  01DE  1238               	bcf	_Load^(0+256),4
 11600                           
 11601                           ;OverLoad_B1.c: 220: Load.Time = 0;
 11602  01DF  01B9               	clrf	(_Load^(0+256)+1)
 11603  01E0  01BA               	clrf	((_Load+1)^(0+256)+1)
 11604                           
 11605                           ;OverLoad_B1.c: 221: setLoad_AH_AL_Restore();
 11606  01E1  319B  2325  3180   	fcall	_setLoad_AH_AL_Restore
 11607                           
 11608                           ;OverLoad_B1.c: 223: Load.ErrorCount = 0;
 11609  01E4  0022               	movlb	2	; select bank2
 11610  01E5  01DE               	clrf	(_Load^(0+256)+38)
 11611                           
 11612                           ;OverLoad_B1.c: 224: Load.SafeCount = 0;
 11613  01E6  01DF               	clrf	(_Load^(0+256)+39)
 11614                           
 11615                           ;OverLoad_B1.c: 226: Load.ADH = 0;
 11616  01E7  01BD               	clrf	(_Load^(0+256)+5)
 11617  01E8  01BE               	clrf	((_Load+1)^(0+256)+5)
 11618                           
 11619                           ;OverLoad_B1.c: 227: Load.ADL = 0;
 11620  01E9  01BF               	clrf	(_Load^(0+256)+7)
 11621  01EA  01C0               	clrf	((_Load+1)^(0+256)+7)
 11622                           
 11623                           ;OverLoad_B1.c: 233: Load.Run = 0;
 11624  01EB  11B8               	bcf	_Load^(0+256),3
 11625                           
 11626                           ;OverLoad_B1.c: 234: Load.Count = 0;
 11627  01EC  01DD               	clrf	(_Load^(0+256)+37)
 11628                           
 11629                           ;OverLoad_B1.c: 235: Load.OK = 0;
 11630  01ED  13B8               	bcf	_Load^(0+256),7
 11631  01EE                     l9238:	
 11632                           
 11633                           ;OverLoad_B1.c: 257: }
 11634                           ;OverLoad_B1.c: 258: if (Load.ERROR == 1) {
 11635  01EE  1EB8               	btfss	_Load^(0+256),5
 11636  01EF  0008               	return
 11637                           
 11638                           ;OverLoad_B1.c: 259: Load.ErrorTime++;
 11639  01F0  3001               	movlw	1
 11640  01F1  07BB               	addwf	(_Load^(0+256)+3),f
 11641  01F2  3000               	movlw	0
 11642  01F3  3DBC               	addwfc	((_Load+1)^(0+256)+3),f
 11643                           
 11644                           ;OverLoad_B1.c: 260: if (Load.ErrorTime >= (10000 / 20)) {
 11645  01F4  3001               	movlw	1
 11646  01F5  023C               	subwf	((_Load+1)^(0+256)+3),w
 11647  01F6  30F4               	movlw	244
 11648  01F7  1903               	skipnz
 11649  01F8  023B               	subwf	(_Load^(0+256)+3),w
 11650  01F9  1C03               	skipc
 11651  01FA  0008               	return
 11652                           
 11653                           ;OverLoad_B1.c: 261: Load.ErrorTime = 0;
 11654  01FB  01BB               	clrf	(_Load^(0+256)+3)
 11655  01FC  01BC               	clrf	((_Load+1)^(0+256)+3)
 11656                           
 11657                           ;OverLoad_B1.c: 262: Load.ERROR = 0;
 11658  01FD  12B8               	bcf	_Load^(0+256),5
 11659                           
 11660                           ;OverLoad_B1.c: 263: }
 11661                           ;OverLoad_B1.c: 264: }
 11662                           ;OverLoad_B1.c: 265: }
 11663                           ;OverLoad_B1.c: 266: } else {
 11664  01FE  0008               	return
 11665  01FF                     l1625:	
 11666                           
 11667                           ;OverLoad_B1.c: 267: if (myMain.PowerON == 1) {
 11668  01FF  0021               	movlb	1	; select bank1
 11669  0200  1C2F               	btfss	_myMain^(0+128),0
 11670  0201  0008               	return
 11671                           
 11672                           ;OverLoad_B1.c: 268: Load.Enable = 1;
 11673  0202  0022               	movlb	2	; select bank2
 11674  0203  1438               	bsf	_Load^(0+256),0
 11675  0204  0008               	return
 11676  0205                     __end_of_Load_Main:	
 11677                           
 11678                           	psect	text65
 11679  18D7                     __ptext65:	
 11680 ;; *************** function _getMain_Lights_Count *****************
 11681 ;; Defined at:
 11682 ;;		line 459 in file "../src/main_B1.c"
 11683 ;; Parameters:    Size  Location     Type
 11684 ;;		None
 11685 ;; Auto vars:     Size  Location     Type
 11686 ;;  status2         1    2[BANK0 ] unsigned char 
 11687 ;;  status1         1    1[BANK0 ] unsigned char 
 11688 ;;  count           1    0[BANK0 ] unsigned char 
 11689 ;; Return value:  Size  Location     Type
 11690 ;;                  1    wreg      unsigned char 
 11691 ;; Registers used:
 11692 ;;		wreg, status,2, status,0
 11693 ;; Tracked objects:
 11694 ;;		On entry : 0/0
 11695 ;;		On exit  : 0/0
 11696 ;;		Unchanged: 0/0
 11697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11699 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11701 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11702 ;;Total ram usage:        3 bytes
 11703 ;; Hardware stack levels used:    1
 11704 ;; Hardware stack levels required when called:    5
 11705 ;; This function calls:
 11706 ;;		Nothing
 11707 ;; This function is called by:
 11708 ;;		_Load_Main
 11709 ;; This function uses a non-reentrant model
 11710 ;;
 11711                           
 11712                           
 11713                           ;psect for function _getMain_Lights_Count
 11714  18D7                     _getMain_Lights_Count:	
 11715                           
 11716                           ;main_B1.c: 460: char count = 0;
 11717                           
 11718                           ;incstack = 0
 11719                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 11720  18D7  0020               	movlb	0	; select bank0
 11721  18D8  01A0               	clrf	getMain_Lights_Count@count
 11722                           
 11723                           ;main_B1.c: 464: char status1 = DimmerIntr1.ControlStatus == 1 ? 1 : 0;
 11724  18D9  3000               	movlw	0
 11725  18DA  0021               	movlb	1	; select bank1
 11726  18DB  19BC               	btfsc	_DimmerIntr1^(0+128),3
 11727  18DC  3001               	movlw	1
 11728  18DD  0020               	movlb	0	; select bank0
 11729  18DE  00A1               	movwf	getMain_Lights_Count@status1
 11730                           
 11731                           ;main_B1.c: 467: char status2 = DimmerIntr2.ControlStatus == 1 ? 1 : 0;
 11732  18DF  3000               	movlw	0
 11733  18E0  0021               	movlb	1	; select bank1
 11734  18E1  19C8               	btfsc	_DimmerIntr2^(0+128),3
 11735  18E2  3001               	movlw	1
 11736  18E3  0020               	movlb	0	; select bank0
 11737  18E4  00A2               	movwf	getMain_Lights_Count@status2
 11738                           
 11739                           ;main_B1.c: 490: return count = (status1 + status2);
 11740  18E5  0821               	movf	getMain_Lights_Count@status1,w
 11741  18E6  0722               	addwf	getMain_Lights_Count@status2,w
 11742  18E7  00A0               	movwf	getMain_Lights_Count@count
 11743  18E8  0008               	return
 11744  18E9                     __end_of_getMain_Lights_Count:	
 11745                           
 11746                           	psect	text66
 11747  26FE                     __ptext66:	
 11748 ;; *************** function _getDimmer_Load_Status *****************
 11749 ;; Defined at:
 11750 ;;		line 1213 in file "../src/Dimmer_B1.c"
 11751 ;; Parameters:    Size  Location     Type
 11752 ;;		None
 11753 ;; Auto vars:     Size  Location     Type
 11754 ;;  status          1    0[BANK0 ] unsigned char 
 11755 ;; Return value:  Size  Location     Type
 11756 ;;                  1    wreg      unsigned char 
 11757 ;; Registers used:
 11758 ;;		wreg, status,2
 11759 ;; Tracked objects:
 11760 ;;		On entry : 0/0
 11761 ;;		On exit  : 0/0
 11762 ;;		Unchanged: 0/0
 11763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11765 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11767 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11768 ;;Total ram usage:        1 bytes
 11769 ;; Hardware stack levels used:    1
 11770 ;; Hardware stack levels required when called:    5
 11771 ;; This function calls:
 11772 ;;		Nothing
 11773 ;; This function is called by:
 11774 ;;		_Load_Main
 11775 ;; This function uses a non-reentrant model
 11776 ;;
 11777                           
 11778                           
 11779                           ;psect for function _getDimmer_Load_Status
 11780  26FE                     _getDimmer_Load_Status:	
 11781                           
 11782                           ;Dimmer_B1.c: 1214: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11783                           
 11784                           ;incstack = 0
 11785                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11786  26FE  3000               	movlw	0
 11787  26FF  0022               	movlb	2	; select bank2
 11788  2700  192C               	btfsc	_Dimmer^(0+256),2
 11789  2701  3001               	movlw	1
 11790  2702  0020               	movlb	0	; select bank0
 11791  2703  00A0               	movwf	getDimmer_Load_Status@status
 11792                           
 11793                           ;Dimmer_B1.c: 1215: return status;
 11794  2704  0820               	movf	getDimmer_Load_Status@status,w
 11795  2705  0008               	return
 11796  2706                     __end_of_getDimmer_Load_Status:	
 11797                           
 11798                           	psect	text67
 11799  26F6                     __ptext67:	
 11800 ;; *************** function _getDimmer_LoadGO *****************
 11801 ;; Defined at:
 11802 ;;		line 1207 in file "../src/Dimmer_B1.c"
 11803 ;; Parameters:    Size  Location     Type
 11804 ;;		None
 11805 ;; Auto vars:     Size  Location     Type
 11806 ;;  loadgo          1    0[BANK0 ] unsigned char 
 11807 ;; Return value:  Size  Location     Type
 11808 ;;                  1    wreg      unsigned char 
 11809 ;; Registers used:
 11810 ;;		wreg, status,2
 11811 ;; Tracked objects:
 11812 ;;		On entry : 0/0
 11813 ;;		On exit  : 0/0
 11814 ;;		Unchanged: 0/0
 11815 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11816 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11817 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11818 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11819 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11820 ;;Total ram usage:        1 bytes
 11821 ;; Hardware stack levels used:    1
 11822 ;; Hardware stack levels required when called:    5
 11823 ;; This function calls:
 11824 ;;		Nothing
 11825 ;; This function is called by:
 11826 ;;		_Load_Main
 11827 ;; This function uses a non-reentrant model
 11828 ;;
 11829                           
 11830                           
 11831                           ;psect for function _getDimmer_LoadGO
 11832  26F6                     _getDimmer_LoadGO:	
 11833                           
 11834                           ;Dimmer_B1.c: 1208: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11835                           
 11836                           ;incstack = 0
 11837                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11838  26F6  3000               	movlw	0
 11839  26F7  0022               	movlb	2	; select bank2
 11840  26F8  18AC               	btfsc	_Dimmer^(0+256),1
 11841  26F9  3001               	movlw	1
 11842  26FA  0020               	movlb	0	; select bank0
 11843  26FB  00A0               	movwf	getDimmer_LoadGO@loadgo
 11844                           
 11845                           ;Dimmer_B1.c: 1209: return loadgo;
 11846  26FC  0820               	movf	getDimmer_LoadGO@loadgo,w
 11847  26FD  0008               	return
 11848  26FE                     __end_of_getDimmer_LoadGO:	
 11849                           
 11850                           	psect	text68
 11851  1C75                     __ptext68:	
 11852 ;; *************** function _getAll_DimmerIntr_Dimming_Sw_RF *****************
 11853 ;; Defined at:
 11854 ;;		line 321 in file "../src/Dimmer_B1.c"
 11855 ;; Parameters:    Size  Location     Type
 11856 ;;		None
 11857 ;; Auto vars:     Size  Location     Type
 11858 ;;  status          1    3[BANK0 ] unsigned char 
 11859 ;; Return value:  Size  Location     Type
 11860 ;;                  1    wreg      unsigned char 
 11861 ;; Registers used:
 11862 ;;		wreg, status,2, status,0
 11863 ;; Tracked objects:
 11864 ;;		On entry : 0/0
 11865 ;;		On exit  : 0/0
 11866 ;;		Unchanged: 0/0
 11867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11869 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11870 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11871 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11872 ;;Total ram usage:        4 bytes
 11873 ;; Hardware stack levels used:    1
 11874 ;; Hardware stack levels required when called:    5
 11875 ;; This function calls:
 11876 ;;		Nothing
 11877 ;; This function is called by:
 11878 ;;		_Load_Main
 11879 ;; This function uses a non-reentrant model
 11880 ;;
 11881                           
 11882                           
 11883                           ;psect for function _getAll_DimmerIntr_Dimming_Sw_RF
 11884  1C75                     _getAll_DimmerIntr_Dimming_Sw_RF:	
 11885                           
 11886                           ;Dimmer_B1.c: 322: char status = 0;
 11887                           
 11888                           ;incstack = 0
 11889                           ; Regs used in _getAll_DimmerIntr_Dimming_Sw_RF: [wreg+status,2+status,0]
 11890  1C75  0020               	movlb	0	; select bank0
 11891  1C76  01A3               	clrf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11892                           
 11893                           ;Dimmer_B1.c: 329: status = (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr2.Dimming_Sw == 1)
      +                           ? 1 : 0;
 11894  1C77  01A1               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2329
 11895  1C78  0AA1               	incf	_getAll_DimmerIntr_Dimming_Sw_RF$2329,f
 11896  1C79  0021               	movlb	1	; select bank1
 11897  1C7A  1E3C               	btfss	_DimmerIntr1^(0+128),4
 11898  1C7B  1A48               	btfsc	_DimmerIntr2^(0+128),4
 11899  1C7C  2C7F               	goto	l8194
 11900  1C7D  0020               	movlb	0	; select bank0
 11901  1C7E  01A1               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2329
 11902  1C7F                     l8194:	
 11903  1C7F  0020               	movlb	0	; select bank0
 11904  1C80  0821               	movf	_getAll_DimmerIntr_Dimming_Sw_RF$2329,w
 11905  1C81  00A0               	movwf	??_getAll_DimmerIntr_Dimming_Sw_RF
 11906  1C82  0820               	movf	??_getAll_DimmerIntr_Dimming_Sw_RF,w
 11907  1C83  00A3               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11908                           
 11909                           ;Dimmer_B1.c: 337: if (status == 0) {
 11910  1C84  08A3               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,f
 11911  1C85  1D03               	skipz
 11912  1C86  2C94               	goto	l8206
 11913                           
 11914                           ;Dimmer_B1.c: 343: status = (DimmerIntr1.Dimming_RF == 1 || DimmerIntr2.Dimming_RF == 1)
      +                           ? 1 : 0;
 11915  1C87  01A2               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2330
 11916  1C88  0AA2               	incf	_getAll_DimmerIntr_Dimming_Sw_RF$2330,f
 11917  1C89  0021               	movlb	1	; select bank1
 11918  1C8A  1F3C               	btfss	_DimmerIntr1^(0+128),6
 11919  1C8B  1B48               	btfsc	_DimmerIntr2^(0+128),6
 11920  1C8C  2C8F               	goto	l8204
 11921  1C8D  0020               	movlb	0	; select bank0
 11922  1C8E  01A2               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2330
 11923  1C8F                     l8204:	
 11924  1C8F  0020               	movlb	0	; select bank0
 11925  1C90  0822               	movf	_getAll_DimmerIntr_Dimming_Sw_RF$2330,w
 11926  1C91  00A0               	movwf	??_getAll_DimmerIntr_Dimming_Sw_RF
 11927  1C92  0820               	movf	??_getAll_DimmerIntr_Dimming_Sw_RF,w
 11928  1C93  00A3               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11929  1C94                     l8206:	
 11930                           
 11931                           ;Dimmer_B1.c: 349: }
 11932                           ;Dimmer_B1.c: 351: return status;
 11933  1C94  0823               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,w
 11934  1C95  0008               	return
 11935  1C96                     __end_of_getAll_DimmerIntr_Dimming_Sw_RF:	
 11936                           
 11937                           	psect	text69
 11938  1B98                     __ptext69:	
 11939 ;; *************** function ___wmul *****************
 11940 ;; Defined at:
 11941 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11942 ;; Parameters:    Size  Location     Type
 11943 ;;  multiplier      2    0[BANK0 ] unsigned int 
 11944 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 11945 ;; Auto vars:     Size  Location     Type
 11946 ;;  product         2    4[BANK0 ] unsigned int 
 11947 ;; Return value:  Size  Location     Type
 11948 ;;                  2    0[BANK0 ] unsigned int 
 11949 ;; Registers used:
 11950 ;;		wreg, status,2, status,0
 11951 ;; Tracked objects:
 11952 ;;		On entry : 0/0
 11953 ;;		On exit  : 0/0
 11954 ;;		Unchanged: 0/0
 11955 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11956 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11957 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11959 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11960 ;;Total ram usage:        6 bytes
 11961 ;; Hardware stack levels used:    1
 11962 ;; Hardware stack levels required when called:    5
 11963 ;; This function calls:
 11964 ;;		Nothing
 11965 ;; This function is called by:
 11966 ;;		_Load_Main
 11967 ;; This function uses a non-reentrant model
 11968 ;;
 11969                           
 11970                           
 11971                           ;psect for function ___wmul
 11972  1B98                     ___wmul:	
 11973                           
 11974                           ;incstack = 0
 11975                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11976  1B98  0020               	movlb	0	; select bank0
 11977  1B99  01A4               	clrf	___wmul@product
 11978  1B9A  01A5               	clrf	___wmul@product+1
 11979  1B9B                     l8884:	
 11980  1B9B  1C20               	btfss	___wmul@multiplier,0
 11981  1B9C  2BA1               	goto	l3073
 11982  1B9D  0822               	movf	___wmul@multiplicand,w
 11983  1B9E  07A4               	addwf	___wmul@product,f
 11984  1B9F  0823               	movf	___wmul@multiplicand+1,w
 11985  1BA0  3DA5               	addwfc	___wmul@product+1,f
 11986  1BA1                     l3073:	
 11987  1BA1  3001               	movlw	1
 11988  1BA2                     u9425:	
 11989  1BA2  35A2               	lslf	___wmul@multiplicand,f
 11990  1BA3  0DA3               	rlf	___wmul@multiplicand+1,f
 11991  1BA4  0B89               	decfsz	9,f
 11992  1BA5  2BA2               	goto	u9425
 11993  1BA6  3001               	movlw	1
 11994  1BA7                     u9435:	
 11995  1BA7  36A1               	lsrf	___wmul@multiplier+1,f
 11996  1BA8  0CA0               	rrf	___wmul@multiplier,f
 11997  1BA9  0B89               	decfsz	9,f
 11998  1BAA  2BA7               	goto	u9435
 11999  1BAB  0821               	movf	___wmul@multiplier+1,w
 12000  1BAC  0420               	iorwf	___wmul@multiplier,w
 12001  1BAD  1D03               	skipz
 12002  1BAE  2B9B               	goto	l8884
 12003  1BAF  0825               	movf	___wmul@product+1,w
 12004  1BB0  01A1               	clrf	?___wmul+1
 12005  1BB1  07A1               	addwf	?___wmul+1,f
 12006  1BB2  0824               	movf	___wmul@product,w
 12007  1BB3  01A0               	clrf	?___wmul
 12008  1BB4  07A0               	addwf	?___wmul,f
 12009  1BB5  0008               	return
 12010  1BB6                     __end_of___wmul:	
 12011                           
 12012                           	psect	text70
 12013  1EAA                     __ptext70:	
 12014 ;; *************** function ___lwdiv *****************
 12015 ;; Defined at:
 12016 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 12017 ;; Parameters:    Size  Location     Type
 12018 ;;  divisor         2    0[BANK0 ] unsigned int 
 12019 ;;  dividend        2    2[BANK0 ] unsigned int 
 12020 ;; Auto vars:     Size  Location     Type
 12021 ;;  quotient        2    5[BANK0 ] unsigned int 
 12022 ;;  counter         1    7[BANK0 ] unsigned char 
 12023 ;; Return value:  Size  Location     Type
 12024 ;;                  2    0[BANK0 ] unsigned int 
 12025 ;; Registers used:
 12026 ;;		wreg, status,2, status,0
 12027 ;; Tracked objects:
 12028 ;;		On entry : 0/0
 12029 ;;		On exit  : 0/0
 12030 ;;		Unchanged: 0/0
 12031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12032 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12033 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12034 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12035 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12036 ;;Total ram usage:        8 bytes
 12037 ;; Hardware stack levels used:    1
 12038 ;; Hardware stack levels required when called:    5
 12039 ;; This function calls:
 12040 ;;		Nothing
 12041 ;; This function is called by:
 12042 ;;		_Load_Main
 12043 ;;		_setTemp_Main
 12044 ;;		_setRF_Main
 12045 ;; This function uses a non-reentrant model
 12046 ;;
 12047                           
 12048                           
 12049                           ;psect for function ___lwdiv
 12050  1EAA                     ___lwdiv:	
 12051                           
 12052                           ;incstack = 0
 12053                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 12054  1EAA  0020               	movlb	0	; select bank0
 12055  1EAB  01A5               	clrf	___lwdiv@quotient
 12056  1EAC  01A6               	clrf	___lwdiv@quotient+1
 12057  1EAD  0821               	movf	___lwdiv@divisor+1,w
 12058  1EAE  0420               	iorwf	___lwdiv@divisor,w
 12059  1EAF  1903               	skipnz
 12060  1EB0  2EDA               	goto	l8108
 12061  1EB1  01A7               	clrf	___lwdiv@counter
 12062  1EB2  0AA7               	incf	___lwdiv@counter,f
 12063  1EB3                     l8096:	
 12064  1EB3  1BA1               	btfsc	___lwdiv@divisor+1,7
 12065  1EB4  2EBF               	goto	l8098
 12066  1EB5  3001               	movlw	1
 12067  1EB6                     u7935:	
 12068  1EB6  35A0               	lslf	___lwdiv@divisor,f
 12069  1EB7  0DA1               	rlf	___lwdiv@divisor+1,f
 12070  1EB8  0B89               	decfsz	9,f
 12071  1EB9  2EB6               	goto	u7935
 12072  1EBA  3001               	movlw	1
 12073  1EBB  00A4               	movwf	??___lwdiv
 12074  1EBC  0824               	movf	??___lwdiv,w
 12075  1EBD  07A7               	addwf	___lwdiv@counter,f
 12076  1EBE  2EB3               	goto	l8096
 12077  1EBF                     l8098:	
 12078  1EBF  3001               	movlw	1
 12079  1EC0                     u7955:	
 12080  1EC0  35A5               	lslf	___lwdiv@quotient,f
 12081  1EC1  0DA6               	rlf	___lwdiv@quotient+1,f
 12082  1EC2  0B89               	decfsz	9,f
 12083  1EC3  2EC0               	goto	u7955
 12084  1EC4  0821               	movf	___lwdiv@divisor+1,w
 12085  1EC5  0223               	subwf	___lwdiv@dividend+1,w
 12086  1EC6  1D03               	skipz
 12087  1EC7  2ECA               	goto	u7965
 12088  1EC8  0820               	movf	___lwdiv@divisor,w
 12089  1EC9  0222               	subwf	___lwdiv@dividend,w
 12090  1ECA                     u7965:	
 12091  1ECA  1C03               	skipc
 12092  1ECB  2ED1               	goto	l8104
 12093  1ECC  0820               	movf	___lwdiv@divisor,w
 12094  1ECD  02A2               	subwf	___lwdiv@dividend,f
 12095  1ECE  0821               	movf	___lwdiv@divisor+1,w
 12096  1ECF  3BA3               	subwfb	___lwdiv@dividend+1,f
 12097  1ED0  1425               	bsf	___lwdiv@quotient,0
 12098  1ED1                     l8104:	
 12099  1ED1  3001               	movlw	1
 12100  1ED2                     u7975:	
 12101  1ED2  36A1               	lsrf	___lwdiv@divisor+1,f
 12102  1ED3  0CA0               	rrf	___lwdiv@divisor,f
 12103  1ED4  0B89               	decfsz	9,f
 12104  1ED5  2ED2               	goto	u7975
 12105  1ED6  3001               	movlw	1
 12106  1ED7  02A7               	subwf	___lwdiv@counter,f
 12107  1ED8  1D03               	btfss	3,2
 12108  1ED9  2EBF               	goto	l8098
 12109  1EDA                     l8108:	
 12110  1EDA  0826               	movf	___lwdiv@quotient+1,w
 12111  1EDB  01A1               	clrf	?___lwdiv+1
 12112  1EDC  07A1               	addwf	?___lwdiv+1,f
 12113  1EDD  0825               	movf	___lwdiv@quotient,w
 12114  1EDE  01A0               	clrf	?___lwdiv
 12115  1EDF  07A0               	addwf	?___lwdiv,f
 12116  1EE0  0008               	return
 12117  1EE1                     __end_of___lwdiv:	
 12118                           
 12119                           	psect	text71
 12120  269D                     __ptext71:	
 12121 ;; *************** function _Load_Initialization *****************
 12122 ;; Defined at:
 12123 ;;		line 9 in file "../src/OverLoad_B1.c"
 12124 ;; Parameters:    Size  Location     Type
 12125 ;;		None
 12126 ;; Auto vars:     Size  Location     Type
 12127 ;;		None
 12128 ;; Return value:  Size  Location     Type
 12129 ;;		None               void
 12130 ;; Registers used:
 12131 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12132 ;; Tracked objects:
 12133 ;;		On entry : 0/0
 12134 ;;		On exit  : 0/0
 12135 ;;		Unchanged: 0/0
 12136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12137 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12138 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12139 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12140 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12141 ;;Total ram usage:        0 bytes
 12142 ;; Hardware stack levels used:    1
 12143 ;; Hardware stack levels required when called:    6
 12144 ;; This function calls:
 12145 ;;		_setLoad_AH_AL_Restore
 12146 ;; This function is called by:
 12147 ;;		_main
 12148 ;; This function uses a non-reentrant model
 12149 ;;
 12150                           
 12151                           
 12152                           ;psect for function _Load_Initialization
 12153  269D                     _Load_Initialization:	
 12154                           
 12155                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 12156                           
 12157                           ;incstack = 0
 12158                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12159  269D  319B  2325         	fcall	_setLoad_AH_AL_Restore
 12160  269F  0008               	return
 12161  26A0                     __end_of_Load_Initialization:	
 12162                           
 12163                           	psect	text72
 12164  1B25                     __ptext72:	
 12165 ;; *************** function _setLoad_AH_AL_Restore *****************
 12166 ;; Defined at:
 12167 ;;		line 294 in file "../src/OverLoad_B1.c"
 12168 ;; Parameters:    Size  Location     Type
 12169 ;;		None
 12170 ;; Auto vars:     Size  Location     Type
 12171 ;;  i               1    1[BANK0 ] unsigned char 
 12172 ;; Return value:  Size  Location     Type
 12173 ;;		None               void
 12174 ;; Registers used:
 12175 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12176 ;; Tracked objects:
 12177 ;;		On entry : 0/0
 12178 ;;		On exit  : 0/0
 12179 ;;		Unchanged: 0/0
 12180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12181 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12182 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12183 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12184 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12185 ;;Total ram usage:        2 bytes
 12186 ;; Hardware stack levels used:    1
 12187 ;; Hardware stack levels required when called:    5
 12188 ;; This function calls:
 12189 ;;		Nothing
 12190 ;; This function is called by:
 12191 ;;		_Load_Initialization
 12192 ;;		_Load_Main
 12193 ;; This function uses a non-reentrant model
 12194 ;;
 12195                           
 12196                           
 12197                           ;psect for function _setLoad_AH_AL_Restore
 12198  1B25                     _setLoad_AH_AL_Restore:	
 12199                           
 12200                           ;OverLoad_B1.c: 295: char i;
 12201                           ;OverLoad_B1.c: 296: for (i = 0; i < 5; i++) {
 12202                           
 12203                           ;incstack = 0
 12204                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 12205  1B25  0020               	movlb	0	; select bank0
 12206  1B26  01A1               	clrf	setLoad_AH_AL_Restore@i
 12207  1B27                     L10:	
 12208  1B27  3005               	movlw	5
 12209  1B28  0221               	subwf	setLoad_AH_AL_Restore@i,w
 12210  1B29  1803               	btfsc	3,0
 12211  1B2A  0008               	return
 12212                           
 12213                           ;OverLoad_B1.c: 297: Load.AH[i] = 0;
 12214  1B2B  3521               	lslf	setLoad_AH_AL_Restore@i,w
 12215  1B2C  3E43               	addlw	(_Load+11)& (0+255)
 12216  1B2D  0086               	movwf	6
 12217  1B2E  3001               	movlw	1	; select bank2/3
 12218  1B2F  0087               	movwf	7
 12219  1B30  3000               	movlw	0
 12220  1B31  3FC0               	movwi [0]fsr1
 12221  1B32  3FC1               	movwi [1]fsr1
 12222                           
 12223                           ;OverLoad_B1.c: 298: Load.AL[i] = 0xffff;
 12224  1B33  3521               	lslf	setLoad_AH_AL_Restore@i,w
 12225  1B34  3E4D               	addlw	(_Load+21)& (0+255)
 12226  1B35  0086               	movwf	6
 12227  1B36  3001               	movlw	1	; select bank2/3
 12228  1B37  0087               	movwf	7
 12229  1B38  30FF               	movlw	255
 12230  1B39  3FC0               	movwi [0]fsr1
 12231  1B3A  30FF               	movlw	255
 12232  1B3B  3FC1               	movwi [1]fsr1
 12233  1B3C  3001               	movlw	1
 12234  1B3D  00A0               	movwf	??_setLoad_AH_AL_Restore
 12235  1B3E  0820               	movf	??_setLoad_AH_AL_Restore,w
 12236  1B3F  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 12237  1B40  2B27               	goto	L10
 12238  1B41                     __end_of_setLoad_AH_AL_Restore:	
 12239                           
 12240                           	psect	text73
 12241  2794                     __ptext73:	
 12242 ;; *************** function _LED_Main *****************
 12243 ;; Defined at:
 12244 ;;		line 47 in file "../src/LED_B1.c"
 12245 ;; Parameters:    Size  Location     Type
 12246 ;;		None
 12247 ;; Auto vars:     Size  Location     Type
 12248 ;;		None
 12249 ;; Return value:  Size  Location     Type
 12250 ;;		None               void
 12251 ;; Registers used:
 12252 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12253 ;; Tracked objects:
 12254 ;;		On entry : 0/0
 12255 ;;		On exit  : 0/0
 12256 ;;		Unchanged: 0/0
 12257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12258 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12259 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12260 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12261 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12262 ;;Total ram usage:        0 bytes
 12263 ;; Hardware stack levels used:    1
 12264 ;; Hardware stack levels required when called:    7
 12265 ;; This function calls:
 12266 ;;		_setLED_Main
 12267 ;; This function is called by:
 12268 ;;		_main
 12269 ;; This function uses a non-reentrant model
 12270 ;;
 12271                           
 12272                           
 12273                           ;psect for function _LED_Main
 12274  2794                     _LED_Main:	
 12275                           
 12276                           ;LED_B1.c: 58: setLED_Main(1);
 12277                           
 12278                           ;incstack = 0
 12279                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12280  2794  3001               	movlw	1
 12281  2795  3191  210A  31A7   	fcall	_setLED_Main
 12282                           
 12283                           ;LED_B1.c: 61: setLED_Main(2);
 12284  2798  3002               	movlw	2
 12285  2799  3191  210A  31A7   	fcall	_setLED_Main
 12286                           
 12287                           ;LED_B1.c: 67: setLED_Main(99);
 12288  279C  3063               	movlw	99
 12289  279D  3191  210A         	fcall	_setLED_Main
 12290  279F  0008               	return
 12291  27A0                     __end_of_LED_Main:	
 12292                           
 12293                           	psect	text74
 12294  110A                     __ptext74:	
 12295 ;; *************** function _setLED_Main *****************
 12296 ;; Defined at:
 12297 ;;		line 229 in file "../src/LED_B1.c"
 12298 ;; Parameters:    Size  Location     Type
 12299 ;;  led             1    wreg     unsigned char 
 12300 ;; Auto vars:     Size  Location     Type
 12301 ;;  led             1    4[BANK0 ] unsigned char 
 12302 ;; Return value:  Size  Location     Type
 12303 ;;		None               void
 12304 ;; Registers used:
 12305 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12306 ;; Tracked objects:
 12307 ;;		On entry : 0/0
 12308 ;;		On exit  : 0/0
 12309 ;;		Unchanged: 0/0
 12310 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12312 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12313 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12314 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12315 ;;Total ram usage:        3 bytes
 12316 ;; Hardware stack levels used:    1
 12317 ;; Hardware stack levels required when called:    6
 12318 ;; This function calls:
 12319 ;;		_LedPointSelect
 12320 ;; This function is called by:
 12321 ;;		_LED_Main
 12322 ;; This function uses a non-reentrant model
 12323 ;;
 12324                           
 12325                           
 12326                           ;psect for function _setLED_Main
 12327  110A                     _setLED_Main:	
 12328                           
 12329                           ;incstack = 0
 12330                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12331                           ;setLED_Main@led stored from wreg
 12332  110A  0020               	movlb	0	; select bank0
 12333  110B  00A4               	movwf	setLED_Main@led
 12334                           
 12335                           ;LED_B1.c: 230: LedPointSelect(led);
 12336  110C  0824               	movf	setLED_Main@led,w
 12337  110D  319B  23F4  3191   	fcall	_LedPointSelect
 12338                           
 12339                           ;LED_B1.c: 231: if (LED->GO == 1) {
 12340  1110  0021               	movlb	1	; select bank1
 12341  1111  085B               	movf	_LED^(0+128),w
 12342  1112  0086               	movwf	6
 12343  1113  3001               	movlw	1	; select bank2/3
 12344  1114  0087               	movwf	7
 12345  1115  1C81               	btfss	1,1
 12346  1116  0008               	return
 12347                           
 12348                           ;LED_B1.c: 232: LED->Time++;
 12349  1117  0A5B               	incf	_LED^(0+128),w
 12350  1118  0086               	movwf	6
 12351  1119  3001               	movlw	1	; select bank2/3
 12352  111A  0087               	movwf	7
 12353  111B  3001               	movlw	1
 12354  111C  0781               	addwf	1,f
 12355  111D  3141               	addfsr 1,1
 12356  111E  1803               	skipnc
 12357  111F  0A81               	incf	1,f
 12358                           
 12359                           ;LED_B1.c: 233: if (LED->Time >= (500 / 20)) {
 12360  1120  0A5B               	incf	_LED^(0+128),w
 12361  1121  0086               	movwf	6
 12362  1122  3001               	movlw	1	; select bank2/3
 12363  1123  0087               	movwf	7
 12364  1124  3F40               	moviw [0]fsr1
 12365  1125  0020               	movlb	0	; select bank0
 12366  1126  00A2               	movwf	??_setLED_Main
 12367  1127  3F41               	moviw [1]fsr1
 12368  1128  00A3               	movwf	??_setLED_Main+1
 12369  1129  3000               	movlw	0
 12370  112A  0223               	subwf	??_setLED_Main+1,w
 12371  112B  3019               	movlw	25
 12372  112C  1903               	skipnz
 12373  112D  0222               	subwf	??_setLED_Main,w
 12374  112E  1C03               	skipc
 12375  112F  0008               	return
 12376                           
 12377                           ;LED_B1.c: 234: LED->Time = 0;
 12378  1130  0021               	movlb	1	; select bank1
 12379  1131  0A5B               	incf	_LED^(0+128),w
 12380  1132  0086               	movwf	6
 12381  1133  3001               	movlw	1	; select bank2/3
 12382  1134  0087               	movwf	7
 12383  1135  3000               	movlw	0
 12384  1136  3FC0               	movwi [0]fsr1
 12385  1137  3FC1               	movwi [1]fsr1
 12386                           
 12387                           ;LED_B1.c: 237: if (led == 1) {
 12388  1138  0020               	movlb	0	; select bank0
 12389  1139  0824               	movf	setLED_Main@led,w
 12390  113A  3A01               	xorlw	1
 12391  113B  1D03               	skipz
 12392  113C  293F               	goto	l1187
 12393                           
 12394                           ;LED_B1.c: 238: RC7 = RC7 == 1 ? 0 : 1;
 12395  113D  3080               	movlw	128
 12396  113E  068E               	xorwf	14,f
 12397  113F                     l1187:	
 12398                           
 12399                           ;LED_B1.c: 239: }
 12400                           ;LED_B1.c: 242: if (led == 2) {
 12401  113F  0824               	movf	setLED_Main@led,w
 12402  1140  3A02               	xorlw	2
 12403                           
 12404                           ;LED_B1.c: 243: RA3 = RA3 == 1 ? 0 : 1;
 12405  1141  3008               	movlw	8
 12406  1142  1903               	btfsc	3,2
 12407  1143  068C               	xorwf	12,f
 12408                           
 12409                           ;LED_B1.c: 244: }
 12410                           ;LED_B1.c: 252: if (led == 99) {
 12411  1144  0824               	movf	setLED_Main@led,w
 12412  1145  3A63               	xorlw	99
 12413  1146  1D03               	skipz
 12414  1147  0008               	return
 12415                           
 12416                           ;LED_B1.c: 253: RB5 = RB5 == 1 ? 0 : 1;
 12417  1148  3020               	movlw	32
 12418  1149  068D               	xorwf	13,f
 12419  114A  0008               	return
 12420  114B                     __end_of_setLED_Main:	
 12421                           
 12422                           	psect	text75
 12423  2788                     __ptext75:	
 12424 ;; *************** function _LED_Initialization *****************
 12425 ;; Defined at:
 12426 ;;		line 31 in file "../src/LED_B1.c"
 12427 ;; Parameters:    Size  Location     Type
 12428 ;;		None
 12429 ;; Auto vars:     Size  Location     Type
 12430 ;;		None
 12431 ;; Return value:  Size  Location     Type
 12432 ;;		None               void
 12433 ;; Registers used:
 12434 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12435 ;; Tracked objects:
 12436 ;;		On entry : 0/0
 12437 ;;		On exit  : 0/0
 12438 ;;		Unchanged: 0/0
 12439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12441 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12442 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12443 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12444 ;;Total ram usage:        0 bytes
 12445 ;; Hardware stack levels used:    1
 12446 ;; Hardware stack levels required when called:    8
 12447 ;; This function calls:
 12448 ;;		_setLED_Initialization
 12449 ;; This function is called by:
 12450 ;;		_main
 12451 ;; This function uses a non-reentrant model
 12452 ;;
 12453                           
 12454                           
 12455                           ;psect for function _LED_Initialization
 12456  2788                     _LED_Initialization:	
 12457                           
 12458                           ;LED_B1.c: 33: setLED_Initialization(1);
 12459                           
 12460                           ;incstack = 0
 12461                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12462  2788  3001               	movlw	1
 12463  2789  3198  20C5  31A7   	fcall	_setLED_Initialization
 12464                           
 12465                           ;LED_B1.c: 36: setLED_Initialization(2);
 12466  278C  3002               	movlw	2
 12467  278D  3198  20C5  31A7   	fcall	_setLED_Initialization
 12468                           
 12469                           ;LED_B1.c: 42: setLED_Initialization(99);
 12470  2790  3063               	movlw	99
 12471  2791  3198  20C5         	fcall	_setLED_Initialization
 12472  2793  0008               	return
 12473  2794                     __end_of_LED_Initialization:	
 12474                           
 12475                           	psect	text76
 12476  18C5                     __ptext76:	
 12477 ;; *************** function _setLED_Initialization *****************
 12478 ;; Defined at:
 12479 ;;		line 74 in file "../src/LED_B1.c"
 12480 ;; Parameters:    Size  Location     Type
 12481 ;;  led             1    wreg     unsigned char 
 12482 ;; Auto vars:     Size  Location     Type
 12483 ;;  led             1    4[BANK0 ] unsigned char 
 12484 ;; Return value:  Size  Location     Type
 12485 ;;		None               void
 12486 ;; Registers used:
 12487 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12488 ;; Tracked objects:
 12489 ;;		On entry : 0/0
 12490 ;;		On exit  : 0/0
 12491 ;;		Unchanged: 0/0
 12492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12494 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12496 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12497 ;;Total ram usage:        1 bytes
 12498 ;; Hardware stack levels used:    1
 12499 ;; Hardware stack levels required when called:    7
 12500 ;; This function calls:
 12501 ;;		_LedPointSelect
 12502 ;;		_setLED
 12503 ;; This function is called by:
 12504 ;;		_LED_Initialization
 12505 ;; This function uses a non-reentrant model
 12506 ;;
 12507                           
 12508                           
 12509                           ;psect for function _setLED_Initialization
 12510  18C5                     _setLED_Initialization:	
 12511                           
 12512                           ;incstack = 0
 12513                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12514                           ;setLED_Initialization@led stored from wreg
 12515  18C5  0020               	movlb	0	; select bank0
 12516  18C6  00A4               	movwf	setLED_Initialization@led
 12517                           
 12518                           ;LED_B1.c: 75: LedPointSelect(led);
 12519  18C7  0824               	movf	setLED_Initialization@led,w
 12520  18C8  319B  23F4  3198   	fcall	_LedPointSelect
 12521                           
 12522                           ;LED_B1.c: 76: LED->Enable = 1;
 12523  18CB  0021               	movlb	1	; select bank1
 12524  18CC  085B               	movf	_LED^(0+128),w
 12525  18CD  0086               	movwf	6
 12526  18CE  3001               	movlw	1	; select bank2/3
 12527  18CF  0087               	movwf	7
 12528  18D0  1401               	bsf	1,0
 12529                           
 12530                           ;LED_B1.c: 77: setLED(led, 0);
 12531  18D1  0020               	movlb	0	; select bank0
 12532  18D2  01A2               	clrf	setLED@command
 12533  18D3  0824               	movf	setLED_Initialization@led,w
 12534  18D4  3191  21D9         	fcall	_setLED
 12535  18D6  0008               	return
 12536  18D7                     __end_of_setLED_Initialization:	
 12537                           
 12538                           	psect	text77
 12539  10C9                     __ptext77:	
 12540 ;; *************** function _Flash_Memory_Main *****************
 12541 ;; Defined at:
 12542 ;;		line 976 in file "../src/MCU_B1.c"
 12543 ;; Parameters:    Size  Location     Type
 12544 ;;		None
 12545 ;; Auto vars:     Size  Location     Type
 12546 ;;  key_Status      1    7[BANK0 ] unsigned char 
 12547 ;; Return value:  Size  Location     Type
 12548 ;;		None               void
 12549 ;; Registers used:
 12550 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12551 ;; Tracked objects:
 12552 ;;		On entry : 0/0
 12553 ;;		On exit  : 0/0
 12554 ;;		Unchanged: 0/0
 12555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12557 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12558 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12559 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12560 ;;Total ram usage:        3 bytes
 12561 ;; Hardware stack levels used:    1
 12562 ;; Hardware stack levels required when called:    8
 12563 ;; This function calls:
 12564 ;;		_Flash_Memory_Modify
 12565 ;;		_getAll_Sw_KeyStatus
 12566 ;;		_getMain_All_LightsStatus
 12567 ;; This function is called by:
 12568 ;;		_main
 12569 ;; This function uses a non-reentrant model
 12570 ;;
 12571                           
 12572                           
 12573                           ;psect for function _Flash_Memory_Main
 12574  10C9                     _Flash_Memory_Main:	
 12575                           
 12576                           ;MCU_B1.c: 977: char key_Status = 0;
 12577                           
 12578                           ;incstack = 0
 12579                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12580  10C9  0020               	movlb	0	; select bank0
 12581  10CA  01A7               	clrf	Flash_Memory_Main@key_Status
 12582                           
 12583                           ;MCU_B1.c: 979: key_Status = getAll_Sw_KeyStatus();
 12584  10CB  3198  207F  3190   	fcall	_getAll_Sw_KeyStatus
 12585  10CE  0020               	movlb	0	; select bank0
 12586  10CF  00A6               	movwf	??_Flash_Memory_Main
 12587  10D0  0826               	movf	??_Flash_Memory_Main,w
 12588  10D1  00A7               	movwf	Flash_Memory_Main@key_Status
 12589                           
 12590                           ;MCU_B1.c: 981: if (Memory.Modify == 1) {
 12591  10D2  0024               	movlb	4	; select bank4
 12592  10D3  1C44               	btfss	(_Memory^(0+512)+36),0
 12593  10D4  0008               	return
 12594                           
 12595                           ;MCU_B1.c: 982: Memory.GO = getMain_All_LightsStatus() == 0 && key_Status == 0 ? 1 : 0;
 12596  10D5  0020               	movlb	0	; select bank0
 12597  10D6  01A8               	clrf	_Flash_Memory_Main$3352
 12598  10D7  3199  2133  3190   	fcall	_getMain_All_LightsStatus
 12599  10DA  3800               	iorlw	0
 12600  10DB  1D03               	skipz
 12601  10DC  28E3               	goto	l9016
 12602  10DD  0020               	movlb	0	; select bank0
 12603  10DE  08A7               	movf	Flash_Memory_Main@key_Status,f
 12604  10DF  1D03               	skipz
 12605  10E0  28E3               	goto	l9016
 12606  10E1  01A8               	clrf	_Flash_Memory_Main$3352
 12607  10E2  0AA8               	incf	_Flash_Memory_Main$3352,f
 12608  10E3                     l9016:	
 12609  10E3  0020               	movlb	0	; select bank0
 12610  10E4  0828               	movf	_Flash_Memory_Main$3352,w
 12611  10E5  0024               	movlb	4	; select bank4
 12612  10E6  10C4               	bcf	(_Memory^(0+512)+36),1
 12613  10E7  1D03               	skipz
 12614  10E8  14C4               	bsf	(_Memory^(0+512)+36),1
 12615                           
 12616                           ;MCU_B1.c: 983: if (Memory.GO == 1) {
 12617  10E9  1CC4               	btfss	(_Memory^(0+512)+36),1
 12618  10EA  2904               	goto	l1461
 12619                           
 12620                           ;MCU_B1.c: 984: Memory.Runtime = 1;
 12621  10EB  15C4               	bsf	(_Memory^(0+512)+36),3
 12622                           
 12623                           ;MCU_B1.c: 985: Memory.Time++;
 12624  10EC  3001               	movlw	1
 12625  10ED  07C2               	addwf	(_Memory^(0+512)+34),f
 12626  10EE  3000               	movlw	0
 12627  10EF  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 12628                           
 12629                           ;MCU_B1.c: 986: if (Memory.Time == (200 / 20)) {
 12630  10F0  3022               	movlw	34
 12631  10F1  3E20               	addlw	_Memory& (0+255)
 12632  10F2  0086               	movwf	6
 12633  10F3  3002               	movlw	2	; select bank4/5
 12634  10F4  0087               	movwf	7
 12635  10F5  3F40               	moviw [0]fsr1
 12636  10F6  3A0A               	xorlw	10
 12637  10F7  1D03               	skipz
 12638  10F8  28FB               	goto	u9665
 12639  10F9  3F41               	moviw [1]fsr1
 12640  10FA  3A00               	xorlw	0
 12641  10FB                     u9665:	
 12642  10FB  1D03               	skipz
 12643  10FC  0008               	return
 12644                           
 12645                           ;MCU_B1.c: 987: Memory.Time = 0;
 12646  10FD  01C2               	clrf	(_Memory^(0+512)+34)
 12647  10FE  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12648                           
 12649                           ;MCU_B1.c: 988: Memory.Modify = 0;
 12650  10FF  1044               	bcf	(_Memory^(0+512)+36),0
 12651                           
 12652                           ;MCU_B1.c: 989: Memory.GO = 0;
 12653  1100  10C4               	bcf	(_Memory^(0+512)+36),1
 12654                           
 12655                           ;MCU_B1.c: 990: Flash_Memory_Modify();
 12656  1101  3189  21A7         	fcall	_Flash_Memory_Modify
 12657                           
 12658                           ;MCU_B1.c: 991: }
 12659                           ;MCU_B1.c: 992: } else {
 12660  1103  0008               	return
 12661  1104                     l1461:	
 12662                           
 12663                           ;MCU_B1.c: 993: if (Memory.Runtime == 1) {
 12664  1104  1DC4               	btfss	(_Memory^(0+512)+36),3
 12665  1105  0008               	return
 12666                           
 12667                           ;MCU_B1.c: 994: Memory.Runtime = 0;
 12668  1106  11C4               	bcf	(_Memory^(0+512)+36),3
 12669                           
 12670                           ;MCU_B1.c: 995: Memory.Time = 0;
 12671  1107  01C2               	clrf	(_Memory^(0+512)+34)
 12672  1108  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12673  1109  0008               	return
 12674  110A                     __end_of_Flash_Memory_Main:	
 12675                           
 12676                           	psect	text78
 12677  187F                     __ptext78:	
 12678 ;; *************** function _getAll_Sw_KeyStatus *****************
 12679 ;; Defined at:
 12680 ;;		line 279 in file "../src/Switch_B1.c"
 12681 ;; Parameters:    Size  Location     Type
 12682 ;;		None
 12683 ;; Auto vars:     Size  Location     Type
 12684 ;;  status          1    1[BANK0 ] unsigned char 
 12685 ;; Return value:  Size  Location     Type
 12686 ;;                  1    wreg      unsigned char 
 12687 ;; Registers used:
 12688 ;;		wreg, status,2
 12689 ;; Tracked objects:
 12690 ;;		On entry : 0/0
 12691 ;;		On exit  : 0/0
 12692 ;;		Unchanged: 0/0
 12693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12695 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12696 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12697 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12698 ;;Total ram usage:        3 bytes
 12699 ;; Hardware stack levels used:    1
 12700 ;; Hardware stack levels required when called:    5
 12701 ;; This function calls:
 12702 ;;		Nothing
 12703 ;; This function is called by:
 12704 ;;		_Flash_Memory_Main
 12705 ;; This function uses a non-reentrant model
 12706 ;;
 12707                           
 12708                           
 12709                           ;psect for function _getAll_Sw_KeyStatus
 12710  187F                     _getAll_Sw_KeyStatus:	
 12711                           
 12712                           ;Switch_B1.c: 280: char status = 0;
 12713                           
 12714                           ;incstack = 0
 12715                           ; Regs used in _getAll_Sw_KeyStatus: [wreg+status,2]
 12716  187F  0020               	movlb	0	; select bank0
 12717  1880  01A1               	clrf	getAll_Sw_KeyStatus@status
 12718                           
 12719                           ;Switch_B1.c: 290: status = RA0 == 1 || RB1 == 1 || RA6 == 1 || RA4 == 1 ? 1 : 0;
 12720  1881  01A2               	clrf	_getAll_Sw_KeyStatus$6262
 12721  1882  0AA2               	incf	_getAll_Sw_KeyStatus$6262,f
 12722  1883  1C0C               	btfss	12,0	;volatile
 12723  1884  188D               	btfsc	13,1	;volatile
 12724  1885  288A               	goto	l8564
 12725  1886  1F0C               	btfss	12,6	;volatile
 12726  1887  1A0C               	btfsc	12,4	;volatile
 12727  1888  288A               	goto	l8564
 12728  1889  01A2               	clrf	_getAll_Sw_KeyStatus$6262
 12729  188A                     l8564:	
 12730  188A  0822               	movf	_getAll_Sw_KeyStatus$6262,w
 12731  188B  00A0               	movwf	??_getAll_Sw_KeyStatus
 12732  188C  0820               	movf	??_getAll_Sw_KeyStatus,w
 12733  188D  00A1               	movwf	getAll_Sw_KeyStatus@status
 12734                           
 12735                           ;Switch_B1.c: 303: return status;
 12736  188E  0821               	movf	getAll_Sw_KeyStatus@status,w
 12737  188F  0008               	return
 12738  1890                     __end_of_getAll_Sw_KeyStatus:	
 12739                           
 12740                           	psect	text79
 12741  09A7                     __ptext79:	
 12742 ;; *************** function _Flash_Memory_Modify *****************
 12743 ;; Defined at:
 12744 ;;		line 1053 in file "../src/MCU_B1.c"
 12745 ;; Parameters:    Size  Location     Type
 12746 ;;		None
 12747 ;; Auto vars:     Size  Location     Type
 12748 ;;  i               1    5[BANK0 ] unsigned char 
 12749 ;; Return value:  Size  Location     Type
 12750 ;;		None               void
 12751 ;; Registers used:
 12752 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12753 ;; Tracked objects:
 12754 ;;		On entry : 0/0
 12755 ;;		On exit  : 0/0
 12756 ;;		Unchanged: 0/0
 12757 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12758 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12759 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12760 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12761 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12762 ;;Total ram usage:        2 bytes
 12763 ;; Hardware stack levels used:    1
 12764 ;; Hardware stack levels required when called:    7
 12765 ;; This function calls:
 12766 ;;		_Flash_Memory_Erasing
 12767 ;;		_Flash_Memory_Read
 12768 ;;		_Flash_Memory_Write
 12769 ;;		_setMemory_Data
 12770 ;; This function is called by:
 12771 ;;		_Flash_Memory_Main
 12772 ;; This function uses a non-reentrant model
 12773 ;;
 12774                           
 12775                           
 12776                           ;psect for function _Flash_Memory_Modify
 12777  09A7                     _Flash_Memory_Modify:	
 12778                           
 12779                           ;MCU_B1.c: 1054: char i = 0;
 12780                           
 12781                           ;incstack = 0
 12782                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12783  09A7  0020               	movlb	0	; select bank0
 12784  09A8  01A5               	clrf	Flash_Memory_Modify@i
 12785                           
 12786                           ;MCU_B1.c: 1055: for (i = 0; i < 32; i++) {
 12787  09A9  01A5               	clrf	Flash_Memory_Modify@i
 12788  09AA  3020               	movlw	32
 12789  09AB  0225               	subwf	Flash_Memory_Modify@i,w
 12790  09AC  1803               	btfsc	3,0
 12791  09AD  29C3               	goto	l8582
 12792  09AE                     l8576:	
 12793                           
 12794                           ;MCU_B1.c: 1056: Memory.Data[i] = Flash_Memory_Read(i);
 12795  09AE  0825               	movf	Flash_Memory_Modify@i,w
 12796  09AF  319A  22BB  3189   	fcall	_Flash_Memory_Read
 12797  09B2  0020               	movlb	0	; select bank0
 12798  09B3  00A4               	movwf	??_Flash_Memory_Modify
 12799  09B4  0825               	movf	Flash_Memory_Modify@i,w
 12800  09B5  3E20               	addlw	_Memory& (0+255)
 12801  09B6  0086               	movwf	6
 12802  09B7  3002               	movlw	2	; select bank4/5
 12803  09B8  0087               	movwf	7
 12804  09B9  0824               	movf	??_Flash_Memory_Modify,w
 12805  09BA  0081               	movwf	1
 12806  09BB  3001               	movlw	1
 12807  09BC  00A4               	movwf	??_Flash_Memory_Modify
 12808  09BD  0824               	movf	??_Flash_Memory_Modify,w
 12809  09BE  07A5               	addwf	Flash_Memory_Modify@i,f
 12810  09BF  3020               	movlw	32
 12811  09C0  0225               	subwf	Flash_Memory_Modify@i,w
 12812  09C1  1C03               	skipc
 12813  09C2  29AE               	goto	l8576
 12814  09C3                     l8582:	
 12815                           
 12816                           ;MCU_B1.c: 1057: }
 12817                           ;MCU_B1.c: 1058: setMemory_Data(0, product->Data[12]);
 12818  09C3  0021               	movlb	1	; select bank1
 12819  09C4  086E               	movf	_product^(0+128),w
 12820  09C5  0086               	movwf	6
 12821  09C6  3002               	movlw	2	; select bank4/5
 12822  09C7  0087               	movwf	7
 12823  09C8  3002               	movlw	2	; select bank4/5
 12824  09C9  3F4C               	moviw [12]fsr1
 12825  09CA  0020               	movlb	0	; select bank0
 12826  09CB  00A0               	movwf	setMemory_Data@data
 12827  09CC  3000               	movlw	0
 12828  09CD  31A7  2770  3189   	fcall	_setMemory_Data
 12829                           
 12830                           ;MCU_B1.c: 1059: setMemory_Data(1, product->Data[13]);
 12831  09D0  0021               	movlb	1	; select bank1
 12832  09D1  086E               	movf	_product^(0+128),w
 12833  09D2  0086               	movwf	6
 12834  09D3  3002               	movlw	2	; select bank4/5
 12835  09D4  0087               	movwf	7
 12836  09D5  3002               	movlw	2	; select bank4/5
 12837  09D6  3F4D               	moviw [13]fsr1
 12838  09D7  0020               	movlb	0	; select bank0
 12839  09D8  00A0               	movwf	setMemory_Data@data
 12840  09D9  3001               	movlw	1
 12841  09DA  31A7  2770  3189   	fcall	_setMemory_Data
 12842                           
 12843                           ;MCU_B1.c: 1060: setMemory_Data(2, product->Data[14]);
 12844  09DD  0021               	movlb	1	; select bank1
 12845  09DE  086E               	movf	_product^(0+128),w
 12846  09DF  0086               	movwf	6
 12847  09E0  3002               	movlw	2	; select bank4/5
 12848  09E1  0087               	movwf	7
 12849  09E2  3002               	movlw	2	; select bank4/5
 12850  09E3  3F4E               	moviw [14]fsr1
 12851  09E4  0020               	movlb	0	; select bank0
 12852  09E5  00A0               	movwf	setMemory_Data@data
 12853  09E6  3002               	movlw	2
 12854  09E7  31A7  2770  3189   	fcall	_setMemory_Data
 12855                           
 12856                           ;MCU_B1.c: 1062: setMemory_Data(3, product->Data[21]);
 12857  09EA  0021               	movlb	1	; select bank1
 12858  09EB  086E               	movf	_product^(0+128),w
 12859  09EC  0086               	movwf	6
 12860  09ED  3002               	movlw	2	; select bank4/5
 12861  09EE  0087               	movwf	7
 12862  09EF  3002               	movlw	2	; select bank4/5
 12863  09F0  3F55               	moviw [21]fsr1
 12864  09F1  0020               	movlb	0	; select bank0
 12865  09F2  00A0               	movwf	setMemory_Data@data
 12866  09F3  3003               	movlw	3
 12867  09F4  31A7  2770  3189   	fcall	_setMemory_Data
 12868                           
 12869                           ;MCU_B1.c: 1063: setMemory_Data(4, product->Data[22]);
 12870  09F7  0021               	movlb	1	; select bank1
 12871  09F8  086E               	movf	_product^(0+128),w
 12872  09F9  0086               	movwf	6
 12873  09FA  3002               	movlw	2	; select bank4/5
 12874  09FB  0087               	movwf	7
 12875  09FC  3002               	movlw	2	; select bank4/5
 12876  09FD  3F56               	moviw [22]fsr1
 12877  09FE  0020               	movlb	0	; select bank0
 12878  09FF  00A0               	movwf	setMemory_Data@data
 12879  0A00  3004               	movlw	4
 12880  0A01  31A7  2770  3189   	fcall	_setMemory_Data
 12881                           
 12882                           ;MCU_B1.c: 1064: setMemory_Data(5, product->Data[23]);
 12883  0A04  0021               	movlb	1	; select bank1
 12884  0A05  086E               	movf	_product^(0+128),w
 12885  0A06  0086               	movwf	6
 12886  0A07  3002               	movlw	2	; select bank4/5
 12887  0A08  0087               	movwf	7
 12888  0A09  3002               	movlw	2	; select bank4/5
 12889  0A0A  3F57               	moviw [23]fsr1
 12890  0A0B  0020               	movlb	0	; select bank0
 12891  0A0C  00A0               	movwf	setMemory_Data@data
 12892  0A0D  3005               	movlw	5
 12893  0A0E  31A7  2770  3189   	fcall	_setMemory_Data
 12894                           
 12895                           ;MCU_B1.c: 1065: if (myMain.SaveDimmer == 1) {
 12896  0A11  0021               	movlb	1	; select bank1
 12897  0A12  1EB9               	btfss	(_myMain^(0+128)+10),5
 12898  0A13  2A1E               	goto	l8590
 12899                           
 12900                           ;MCU_B1.c: 1066: myMain.SaveDimmer = 0;
 12901  0A14  12B9               	bcf	(_myMain^(0+128)+10),5
 12902                           
 12903                           ;MCU_B1.c: 1067: setMemory_Data(30, 0xaa);
 12904  0A15  30AA               	movlw	170
 12905  0A16  0020               	movlb	0	; select bank0
 12906  0A17  00A4               	movwf	??_Flash_Memory_Modify
 12907  0A18  0824               	movf	??_Flash_Memory_Modify,w
 12908  0A19  00A0               	movwf	setMemory_Data@data
 12909  0A1A  301E               	movlw	30
 12910  0A1B  31A7  2770  3189   	fcall	_setMemory_Data
 12911  0A1E                     l8590:	
 12912                           
 12913                           ;MCU_B1.c: 1068: }
 12914                           ;MCU_B1.c: 1070: if (Memory.LoopSave == 1) {
 12915  0A1E  0024               	movlb	4	; select bank4
 12916  0A1F  1D44               	btfss	(_Memory^(0+512)+36),2
 12917  0A20  2A25               	goto	l1485
 12918                           
 12919                           ;MCU_B1.c: 1071: Memory.LoopSave = 0;
 12920  0A21  1144               	bcf	(_Memory^(0+512)+36),2
 12921                           
 12922                           ;MCU_B1.c: 1072: myMain.FirstOpen = 0;
 12923  0A22  0021               	movlb	1	; select bank1
 12924  0A23  11AF               	bcf	_myMain^(0+128),3
 12925                           
 12926                           ;MCU_B1.c: 1073: myMain.First = 0;
 12927  0A24  12AF               	bcf	_myMain^(0+128),5
 12928  0A25                     l1485:	
 12929                           
 12930                           ;MCU_B1.c: 1075: }
 12931                           ;MCU_B1.c: 1076: GIE = 0;
 12932  0A25  138B               	bcf	11,7	;volatile
 12933                           
 12934                           ;MCU_B1.c: 1077: Flash_Memory_Erasing();
 12935  0A26  31A7  277C  3189   	fcall	_Flash_Memory_Erasing
 12936                           
 12937                           ;MCU_B1.c: 1078: Flash_Memory_Write();
 12938  0A29  319E  2647         	fcall	_Flash_Memory_Write
 12939                           
 12940                           ;MCU_B1.c: 1079: GIE = 1;
 12941  0A2B  178B               	bsf	11,7	;volatile
 12942  0A2C  0008               	return
 12943  0A2D                     __end_of_Flash_Memory_Modify:	
 12944                           
 12945                           	psect	text80
 12946  277C                     __ptext80:	
 12947 ;; *************** function _Flash_Memory_Erasing *****************
 12948 ;; Defined at:
 12949 ;;		line 1042 in file "../src/MCU_B1.c"
 12950 ;; Parameters:    Size  Location     Type
 12951 ;;		None
 12952 ;; Auto vars:     Size  Location     Type
 12953 ;;		None
 12954 ;; Return value:  Size  Location     Type
 12955 ;;		None               void
 12956 ;; Registers used:
 12957 ;;		wreg, status,2, status,0, pclath, cstack
 12958 ;; Tracked objects:
 12959 ;;		On entry : 0/0
 12960 ;;		On exit  : 0/0
 12961 ;;		Unchanged: 0/0
 12962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12964 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12965 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12966 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12967 ;;Total ram usage:        0 bytes
 12968 ;; Hardware stack levels used:    1
 12969 ;; Hardware stack levels required when called:    6
 12970 ;; This function calls:
 12971 ;;		_Flash_Memory_Unlock
 12972 ;; This function is called by:
 12973 ;;		_Flash_Memory_Modify
 12974 ;; This function uses a non-reentrant model
 12975 ;;
 12976                           
 12977                           
 12978                           ;psect for function _Flash_Memory_Erasing
 12979  277C                     _Flash_Memory_Erasing:	
 12980                           
 12981                           ;MCU_B1.c: 1043: CFGS = 0;
 12982                           
 12983                           ;incstack = 0
 12984                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12985  277C  0023               	movlb	3	; select bank3
 12986  277D  1315               	bcf	21,6	;volatile
 12987                           
 12988                           ;MCU_B1.c: 1044: PMADRH = 0x30;
 12989  277E  3030               	movlw	48
 12990  277F  0092               	movwf	18	;volatile
 12991                           
 12992                           ;MCU_B1.c: 1045: PMADRL = 0x00;
 12993  2780  0191               	clrf	17	;volatile
 12994                           
 12995                           ;MCU_B1.c: 1046: FREE = 1;
 12996  2781  1615               	bsf	21,4	;volatile
 12997                           
 12998                           ;MCU_B1.c: 1047: WREN = 1;
 12999  2782  1515               	bsf	21,2	;volatile
 13000                           
 13001                           ;MCU_B1.c: 1048: Flash_Memory_Unlock();
 13002  2783  31A7  2717         	fcall	_Flash_Memory_Unlock
 13003                           
 13004                           ;MCU_B1.c: 1049: WREN = 0;
 13005  2785  0023               	movlb	3	; select bank3
 13006  2786  1115               	bcf	21,2	;volatile
 13007  2787  0008               	return
 13008  2788                     __end_of_Flash_Memory_Erasing:	
 13009                           
 13010                           	psect	text81
 13011  0F36                     __ptext81:	
 13012 ;; *************** function _Flash_Memory_Initialization *****************
 13013 ;; Defined at:
 13014 ;;		line 932 in file "../src/MCU_B1.c"
 13015 ;; Parameters:    Size  Location     Type
 13016 ;;		None
 13017 ;; Auto vars:     Size  Location     Type
 13018 ;;  value           1    5[BANK0 ] unsigned char 
 13019 ;; Return value:  Size  Location     Type
 13020 ;;		None               void
 13021 ;; Registers used:
 13022 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13023 ;; Tracked objects:
 13024 ;;		On entry : 0/0
 13025 ;;		On exit  : 0/0
 13026 ;;		Unchanged: 0/0
 13027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13029 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13030 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13031 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13032 ;;Total ram usage:        2 bytes
 13033 ;; Hardware stack levels used:    1
 13034 ;; Hardware stack levels required when called:    7
 13035 ;; This function calls:
 13036 ;;		_Flash_Memory_Read
 13037 ;;		_Flash_Memory_Write
 13038 ;;		_setMemory_Data
 13039 ;; This function is called by:
 13040 ;;		_main
 13041 ;; This function uses a non-reentrant model
 13042 ;;
 13043                           
 13044                           
 13045                           ;psect for function _Flash_Memory_Initialization
 13046  0F36                     _Flash_Memory_Initialization:	
 13047                           
 13048                           ;MCU_B1.c: 933: char value = 0;
 13049                           
 13050                           ;incstack = 0
 13051                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 13052  0F36  0020               	movlb	0	; select bank0
 13053  0F37  01A5               	clrf	Flash_Memory_Initialization@value
 13054                           
 13055                           ;MCU_B1.c: 934: if (Flash_Memory_Read(31) == 0xaa) {
 13056  0F38  301F               	movlw	31
 13057  0F39  319A  22BB  318F   	fcall	_Flash_Memory_Read
 13058  0F3C  3AAA               	xorlw	170
 13059  0F3D  1D03               	skipz
 13060  0F3E  2FB8               	goto	l8990
 13061                           
 13062                           ;MCU_B1.c: 935: product->Data[12] = Flash_Memory_Read(0);
 13063  0F3F  3000               	movlw	0
 13064  0F40  319A  22BB  318F   	fcall	_Flash_Memory_Read
 13065  0F43  0020               	movlb	0	; select bank0
 13066  0F44  00A4               	movwf	??_Flash_Memory_Initialization
 13067  0F45  0021               	movlb	1	; select bank1
 13068  0F46  086E               	movf	_product^(0+128),w
 13069  0F47  3E0C               	addlw	12
 13070  0F48  0086               	movwf	6
 13071  0F49  3002               	movlw	2	; select bank4/5
 13072  0F4A  0087               	movwf	7
 13073  0F4B  0020               	movlb	0	; select bank0
 13074  0F4C  0824               	movf	??_Flash_Memory_Initialization,w
 13075  0F4D  0081               	movwf	1
 13076                           
 13077                           ;MCU_B1.c: 936: product->Data[13] = Flash_Memory_Read(1);
 13078  0F4E  3001               	movlw	1
 13079  0F4F  319A  22BB  318F   	fcall	_Flash_Memory_Read
 13080  0F52  0020               	movlb	0	; select bank0
 13081  0F53  00A4               	movwf	??_Flash_Memory_Initialization
 13082  0F54  0021               	movlb	1	; select bank1
 13083  0F55  086E               	movf	_product^(0+128),w
 13084  0F56  3E0D               	addlw	13
 13085  0F57  0086               	movwf	6
 13086  0F58  3002               	movlw	2	; select bank4/5
 13087  0F59  0087               	movwf	7
 13088  0F5A  0020               	movlb	0	; select bank0
 13089  0F5B  0824               	movf	??_Flash_Memory_Initialization,w
 13090  0F5C  0081               	movwf	1
 13091                           
 13092                           ;MCU_B1.c: 937: product->Data[14] = Flash_Memory_Read(2);
 13093  0F5D  3002               	movlw	2
 13094  0F5E  319A  22BB  318F   	fcall	_Flash_Memory_Read
 13095  0F61  0020               	movlb	0	; select bank0
 13096  0F62  00A4               	movwf	??_Flash_Memory_Initialization
 13097  0F63  0021               	movlb	1	; select bank1
 13098  0F64  086E               	movf	_product^(0+128),w
 13099  0F65  3E0E               	addlw	14
 13100  0F66  0086               	movwf	6
 13101  0F67  3002               	movlw	2	; select bank4/5
 13102  0F68  0087               	movwf	7
 13103  0F69  0020               	movlb	0	; select bank0
 13104  0F6A  0824               	movf	??_Flash_Memory_Initialization,w
 13105  0F6B  0081               	movwf	1
 13106                           
 13107                           ;MCU_B1.c: 940: product->Data[21] = Flash_Memory_Read(3);
 13108  0F6C  3003               	movlw	3
 13109  0F6D  319A  22BB  318F   	fcall	_Flash_Memory_Read
 13110  0F70  0020               	movlb	0	; select bank0
 13111  0F71  00A4               	movwf	??_Flash_Memory_Initialization
 13112  0F72  0021               	movlb	1	; select bank1
 13113  0F73  086E               	movf	_product^(0+128),w
 13114  0F74  3E15               	addlw	21
 13115  0F75  0086               	movwf	6
 13116  0F76  3002               	movlw	2	; select bank4/5
 13117  0F77  0087               	movwf	7
 13118  0F78  0020               	movlb	0	; select bank0
 13119  0F79  0824               	movf	??_Flash_Memory_Initialization,w
 13120  0F7A  0081               	movwf	1
 13121                           
 13122                           ;MCU_B1.c: 941: product->Data[22] = Flash_Memory_Read(4);
 13123  0F7B  3004               	movlw	4
 13124  0F7C  319A  22BB  318F   	fcall	_Flash_Memory_Read
 13125  0F7F  0020               	movlb	0	; select bank0
 13126  0F80  00A4               	movwf	??_Flash_Memory_Initialization
 13127  0F81  0021               	movlb	1	; select bank1
 13128  0F82  086E               	movf	_product^(0+128),w
 13129  0F83  3E16               	addlw	22
 13130  0F84  0086               	movwf	6
 13131  0F85  3002               	movlw	2	; select bank4/5
 13132  0F86  0087               	movwf	7
 13133  0F87  0020               	movlb	0	; select bank0
 13134  0F88  0824               	movf	??_Flash_Memory_Initialization,w
 13135  0F89  0081               	movwf	1
 13136                           
 13137                           ;MCU_B1.c: 942: product->Data[23] = Flash_Memory_Read(5);
 13138  0F8A  3005               	movlw	5
 13139  0F8B  319A  22BB  318F   	fcall	_Flash_Memory_Read
 13140  0F8E  0020               	movlb	0	; select bank0
 13141  0F8F  00A4               	movwf	??_Flash_Memory_Initialization
 13142  0F90  0021               	movlb	1	; select bank1
 13143  0F91  086E               	movf	_product^(0+128),w
 13144  0F92  3E17               	addlw	23
 13145  0F93  0086               	movwf	6
 13146  0F94  3002               	movlw	2	; select bank4/5
 13147  0F95  0087               	movwf	7
 13148  0F96  0020               	movlb	0	; select bank0
 13149  0F97  0824               	movf	??_Flash_Memory_Initialization,w
 13150  0F98  0081               	movwf	1
 13151                           
 13152                           ;MCU_B1.c: 949: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 13153  0F99  0021               	movlb	1	; select bank1
 13154  0F9A  086E               	movf	_product^(0+128),w
 13155  0F9B  3E0C               	addlw	12
 13156  0F9C  0086               	movwf	6
 13157  0F9D  3002               	movlw	2	; select bank4/5
 13158  0F9E  0087               	movwf	7
 13159  0F9F  0801               	movf	1,w
 13160  0FA0  3AFF               	xorlw	255
 13161  0FA1  1D03               	skipz
 13162  0FA2  0008               	return
 13163  0FA3  086E               	movf	_product^(0+128),w
 13164  0FA4  3E0D               	addlw	13
 13165  0FA5  0086               	movwf	6
 13166  0FA6  3002               	movlw	2	; select bank4/5
 13167  0FA7  0087               	movwf	7
 13168  0FA8  0801               	movf	1,w
 13169  0FA9  3AFF               	xorlw	255
 13170  0FAA  1D03               	skipz
 13171  0FAB  0008               	return
 13172  0FAC  086E               	movf	_product^(0+128),w
 13173  0FAD  3E0E               	addlw	14
 13174  0FAE  0086               	movwf	6
 13175  0FAF  3002               	movlw	2	; select bank4/5
 13176  0FB0  0087               	movwf	7
 13177  0FB1  0801               	movf	1,w
 13178  0FB2  3AFF               	xorlw	255
 13179  0FB3  1D03               	skipz
 13180  0FB4  0008               	return
 13181                           
 13182                           ;MCU_B1.c: 950: myMain.FirstOpen = 1;
 13183  0FB5  15AF               	bsf	_myMain^(0+128),3
 13184                           
 13185                           ;MCU_B1.c: 951: myMain.First = 1;
 13186  0FB6  16AF               	bsf	_myMain^(0+128),5
 13187                           
 13188                           ;MCU_B1.c: 952: }
 13189                           ;MCU_B1.c: 953: } else {
 13190  0FB7  0008               	return
 13191  0FB8                     l8990:	
 13192                           
 13193                           ;MCU_B1.c: 955: setMemory_Data(0, 0xff);
 13194  0FB8  30FF               	movlw	255
 13195  0FB9  0020               	movlb	0	; select bank0
 13196  0FBA  00A4               	movwf	??_Flash_Memory_Initialization
 13197  0FBB  0824               	movf	??_Flash_Memory_Initialization,w
 13198  0FBC  00A0               	movwf	setMemory_Data@data
 13199  0FBD  3000               	movlw	0
 13200  0FBE  31A7  2770  318F   	fcall	_setMemory_Data
 13201                           
 13202                           ;MCU_B1.c: 956: setMemory_Data(1, 0xff);
 13203  0FC1  30FF               	movlw	255
 13204  0FC2  0020               	movlb	0	; select bank0
 13205  0FC3  00A4               	movwf	??_Flash_Memory_Initialization
 13206  0FC4  0824               	movf	??_Flash_Memory_Initialization,w
 13207  0FC5  00A0               	movwf	setMemory_Data@data
 13208  0FC6  3001               	movlw	1
 13209  0FC7  31A7  2770  318F   	fcall	_setMemory_Data
 13210                           
 13211                           ;MCU_B1.c: 957: setMemory_Data(2, 0xff);
 13212  0FCA  30FF               	movlw	255
 13213  0FCB  0020               	movlb	0	; select bank0
 13214  0FCC  00A4               	movwf	??_Flash_Memory_Initialization
 13215  0FCD  0824               	movf	??_Flash_Memory_Initialization,w
 13216  0FCE  00A0               	movwf	setMemory_Data@data
 13217  0FCF  3002               	movlw	2
 13218  0FD0  31A7  2770  318F   	fcall	_setMemory_Data
 13219                           
 13220                           ;MCU_B1.c: 958: setMemory_Data(3, 0xff);
 13221  0FD3  30FF               	movlw	255
 13222  0FD4  0020               	movlb	0	; select bank0
 13223  0FD5  00A4               	movwf	??_Flash_Memory_Initialization
 13224  0FD6  0824               	movf	??_Flash_Memory_Initialization,w
 13225  0FD7  00A0               	movwf	setMemory_Data@data
 13226  0FD8  3003               	movlw	3
 13227  0FD9  31A7  2770  318F   	fcall	_setMemory_Data
 13228                           
 13229                           ;MCU_B1.c: 959: setMemory_Data(4, 0xff);
 13230  0FDC  30FF               	movlw	255
 13231  0FDD  0020               	movlb	0	; select bank0
 13232  0FDE  00A4               	movwf	??_Flash_Memory_Initialization
 13233  0FDF  0824               	movf	??_Flash_Memory_Initialization,w
 13234  0FE0  00A0               	movwf	setMemory_Data@data
 13235  0FE1  3004               	movlw	4
 13236  0FE2  31A7  2770  318F   	fcall	_setMemory_Data
 13237                           
 13238                           ;MCU_B1.c: 960: setMemory_Data(5, 0xff);
 13239  0FE5  30FF               	movlw	255
 13240  0FE6  0020               	movlb	0	; select bank0
 13241  0FE7  00A4               	movwf	??_Flash_Memory_Initialization
 13242  0FE8  0824               	movf	??_Flash_Memory_Initialization,w
 13243  0FE9  00A0               	movwf	setMemory_Data@data
 13244  0FEA  3005               	movlw	5
 13245  0FEB  31A7  2770  318F   	fcall	_setMemory_Data
 13246                           
 13247                           ;MCU_B1.c: 961: setMemory_Data(31, 0xaa);
 13248  0FEE  30AA               	movlw	170
 13249  0FEF  0020               	movlb	0	; select bank0
 13250  0FF0  00A4               	movwf	??_Flash_Memory_Initialization
 13251  0FF1  0824               	movf	??_Flash_Memory_Initialization,w
 13252  0FF2  00A0               	movwf	setMemory_Data@data
 13253  0FF3  301F               	movlw	31
 13254  0FF4  31A7  2770  318F   	fcall	_setMemory_Data
 13255                           
 13256                           ;MCU_B1.c: 966: GIE = 0;
 13257  0FF7  138B               	bcf	11,7	;volatile
 13258                           
 13259                           ;MCU_B1.c: 967: Flash_Memory_Write();
 13260  0FF8  319E  2647         	fcall	_Flash_Memory_Write
 13261                           
 13262                           ;MCU_B1.c: 968: GIE = 1;
 13263  0FFA  178B               	bsf	11,7	;volatile
 13264                           
 13265                           ;MCU_B1.c: 969: myMain.FirstOpen = 1;
 13266  0FFB  0021               	movlb	1	; select bank1
 13267  0FFC  15AF               	bsf	_myMain^(0+128),3
 13268                           
 13269                           ;MCU_B1.c: 970: myMain.First = 1;
 13270  0FFD  16AF               	bsf	_myMain^(0+128),5
 13271                           
 13272                           ;MCU_B1.c: 971: myMain.InitDimmer = 1;
 13273  0FFE  1639               	bsf	(_myMain^(0+128)+10),4
 13274  0FFF  0008               	return
 13275  1000                     __end_of_Flash_Memory_Initialization:	
 13276                           
 13277                           	psect	text82
 13278  2770                     __ptext82:	
 13279 ;; *************** function _setMemory_Data *****************
 13280 ;; Defined at:
 13281 ;;		line 1094 in file "../src/MCU_B1.c"
 13282 ;; Parameters:    Size  Location     Type
 13283 ;;  address         1    wreg     unsigned char 
 13284 ;;  data            1    0[BANK0 ] unsigned char 
 13285 ;; Auto vars:     Size  Location     Type
 13286 ;;  address         1    2[BANK0 ] unsigned char 
 13287 ;; Return value:  Size  Location     Type
 13288 ;;		None               void
 13289 ;; Registers used:
 13290 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13291 ;; Tracked objects:
 13292 ;;		On entry : 0/0
 13293 ;;		On exit  : 0/0
 13294 ;;		Unchanged: 0/0
 13295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13296 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13297 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13298 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13299 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13300 ;;Total ram usage:        3 bytes
 13301 ;; Hardware stack levels used:    1
 13302 ;; Hardware stack levels required when called:    5
 13303 ;; This function calls:
 13304 ;;		Nothing
 13305 ;; This function is called by:
 13306 ;;		_Flash_Memory_Initialization
 13307 ;;		_Flash_Memory_Modify
 13308 ;; This function uses a non-reentrant model
 13309 ;;
 13310                           
 13311                           
 13312                           ;psect for function _setMemory_Data
 13313  2770                     _setMemory_Data:	
 13314                           
 13315                           ;incstack = 0
 13316                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 13317                           ;setMemory_Data@address stored from wreg
 13318  2770  0020               	movlb	0	; select bank0
 13319  2771  00A2               	movwf	setMemory_Data@address
 13320                           
 13321                           ;MCU_B1.c: 1095: Memory.Data[address] = data;
 13322  2772  0820               	movf	setMemory_Data@data,w
 13323  2773  00A1               	movwf	??_setMemory_Data
 13324  2774  0822               	movf	setMemory_Data@address,w
 13325  2775  3E20               	addlw	_Memory& (0+255)
 13326  2776  0086               	movwf	6
 13327  2777  3002               	movlw	2	; select bank4/5
 13328  2778  0087               	movwf	7
 13329  2779  0821               	movf	??_setMemory_Data,w
 13330  277A  0081               	movwf	1
 13331  277B  0008               	return
 13332  277C                     __end_of_setMemory_Data:	
 13333                           
 13334                           	psect	text83
 13335  1E47                     __ptext83:	
 13336 ;; *************** function _Flash_Memory_Write *****************
 13337 ;; Defined at:
 13338 ;;		line 1023 in file "../src/MCU_B1.c"
 13339 ;; Parameters:    Size  Location     Type
 13340 ;;		None
 13341 ;; Auto vars:     Size  Location     Type
 13342 ;;  i               1    1[BANK0 ] unsigned char 
 13343 ;; Return value:  Size  Location     Type
 13344 ;;		None               void
 13345 ;; Registers used:
 13346 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13347 ;; Tracked objects:
 13348 ;;		On entry : 0/0
 13349 ;;		On exit  : 0/0
 13350 ;;		Unchanged: 0/0
 13351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13352 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13353 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13354 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13355 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13356 ;;Total ram usage:        2 bytes
 13357 ;; Hardware stack levels used:    1
 13358 ;; Hardware stack levels required when called:    6
 13359 ;; This function calls:
 13360 ;;		_Flash_Memory_Unlock
 13361 ;; This function is called by:
 13362 ;;		_Flash_Memory_Initialization
 13363 ;;		_Flash_Memory_Modify
 13364 ;; This function uses a non-reentrant model
 13365 ;;
 13366                           
 13367                           
 13368                           ;psect for function _Flash_Memory_Write
 13369  1E47                     _Flash_Memory_Write:	
 13370                           
 13371                           ;MCU_B1.c: 1024: char i = 0;
 13372                           
 13373                           ;incstack = 0
 13374                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13375  1E47  0020               	movlb	0	; select bank0
 13376  1E48  01A1               	clrf	Flash_Memory_Write@i
 13377                           
 13378                           ;MCU_B1.c: 1025: CFGS = 0;
 13379  1E49  0023               	movlb	3	; select bank3
 13380  1E4A  1315               	bcf	21,6	;volatile
 13381                           
 13382                           ;MCU_B1.c: 1026: PMADRH = 0x30;
 13383  1E4B  3030               	movlw	48
 13384  1E4C  0092               	movwf	18	;volatile
 13385                           
 13386                           ;MCU_B1.c: 1027: PMDATH = 0;
 13387  1E4D  0194               	clrf	20	;volatile
 13388                           
 13389                           ;MCU_B1.c: 1028: FREE = 0;
 13390  1E4E  1215               	bcf	21,4	;volatile
 13391                           
 13392                           ;MCU_B1.c: 1029: LWLO = 1;
 13393  1E4F  1695               	bsf	21,5	;volatile
 13394                           
 13395                           ;MCU_B1.c: 1030: WREN = 1;
 13396  1E50  1515               	bsf	21,2	;volatile
 13397                           
 13398                           ;MCU_B1.c: 1031: for (i = 0; i < 32; i++) {
 13399  1E51  0020               	movlb	0	; select bank0
 13400  1E52  01A1               	clrf	Flash_Memory_Write@i
 13401  1E53  3020               	movlw	32
 13402  1E54  0221               	subwf	Flash_Memory_Write@i,w
 13403  1E55  1803               	btfsc	3,0
 13404  1E56  2E6F               	goto	l1475
 13405  1E57                     l7948:	
 13406                           
 13407                           ;MCU_B1.c: 1032: PMADRL = i;
 13408  1E57  0821               	movf	Flash_Memory_Write@i,w
 13409  1E58  0023               	movlb	3	; select bank3
 13410  1E59  0091               	movwf	17	;volatile
 13411                           
 13412                           ;MCU_B1.c: 1033: PMDATL = Memory.Data[i];
 13413  1E5A  0020               	movlb	0	; select bank0
 13414  1E5B  0821               	movf	Flash_Memory_Write@i,w
 13415  1E5C  3E20               	addlw	_Memory& (0+255)
 13416  1E5D  0086               	movwf	6
 13417  1E5E  3002               	movlw	2	; select bank4/5
 13418  1E5F  0087               	movwf	7
 13419  1E60  0801               	movf	1,w
 13420  1E61  0023               	movlb	3	; select bank3
 13421  1E62  0093               	movwf	19	;volatile
 13422                           
 13423                           ;MCU_B1.c: 1034: Flash_Memory_Unlock();
 13424  1E63  31A7  2717  319E   	fcall	_Flash_Memory_Unlock
 13425  1E66  3001               	movlw	1
 13426  1E67  0020               	movlb	0	; select bank0
 13427  1E68  00A0               	movwf	??_Flash_Memory_Write
 13428  1E69  0820               	movf	??_Flash_Memory_Write,w
 13429  1E6A  07A1               	addwf	Flash_Memory_Write@i,f
 13430  1E6B  3020               	movlw	32
 13431  1E6C  0221               	subwf	Flash_Memory_Write@i,w
 13432  1E6D  1C03               	skipc
 13433  1E6E  2E57               	goto	l7948
 13434  1E6F                     l1475:	
 13435                           
 13436                           ;MCU_B1.c: 1035: }
 13437                           ;MCU_B1.c: 1036: LWLO = 0;
 13438  1E6F  0023               	movlb	3	; select bank3
 13439  1E70  1295               	bcf	21,5	;volatile
 13440                           
 13441                           ;MCU_B1.c: 1037: Flash_Memory_Unlock();
 13442  1E71  31A7  2717         	fcall	_Flash_Memory_Unlock
 13443                           
 13444                           ;MCU_B1.c: 1038: WREN = 0;
 13445  1E73  0023               	movlb	3	; select bank3
 13446  1E74  1115               	bcf	21,2	;volatile
 13447  1E75  0008               	return
 13448  1E76                     __end_of_Flash_Memory_Write:	
 13449                           
 13450                           	psect	text84
 13451  2717                     __ptext84:	
 13452 ;; *************** function _Flash_Memory_Unlock *****************
 13453 ;; Defined at:
 13454 ;;		line 1002 in file "../src/MCU_B1.c"
 13455 ;; Parameters:    Size  Location     Type
 13456 ;;		None
 13457 ;; Auto vars:     Size  Location     Type
 13458 ;;		None
 13459 ;; Return value:  Size  Location     Type
 13460 ;;		None               void
 13461 ;; Registers used:
 13462 ;;		wreg
 13463 ;; Tracked objects:
 13464 ;;		On entry : 0/0
 13465 ;;		On exit  : 0/0
 13466 ;;		Unchanged: 0/0
 13467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13469 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13471 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13472 ;;Total ram usage:        0 bytes
 13473 ;; Hardware stack levels used:    1
 13474 ;; Hardware stack levels required when called:    5
 13475 ;; This function calls:
 13476 ;;		Nothing
 13477 ;; This function is called by:
 13478 ;;		_Flash_Memory_Write
 13479 ;;		_Flash_Memory_Erasing
 13480 ;; This function uses a non-reentrant model
 13481 ;;
 13482                           
 13483                           
 13484                           ;psect for function _Flash_Memory_Unlock
 13485  2717                     _Flash_Memory_Unlock:	
 13486                           
 13487                           ;MCU_B1.c: 1003: PMCON2 = 0x55;
 13488                           
 13489                           ;incstack = 0
 13490                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 13491  2717  3055               	movlw	85
 13492  2718  0023               	movlb	3	; select bank3
 13493  2719  0096               	movwf	22	;volatile
 13494                           
 13495                           ;MCU_B1.c: 1004: PMCON2 = 0xaa;
 13496  271A  30AA               	movlw	170
 13497  271B  0096               	movwf	22	;volatile
 13498                           
 13499                           ;MCU_B1.c: 1005: WR = 1;
 13500  271C  1495               	bsf	21,1	;volatile
 13501                           
 13502                           ;MCU_B1.c: 1006: __nop();
 13503  271D  0000               	nop
 13504                           
 13505                           ;MCU_B1.c: 1007: __nop();
 13506  271E  0000               	nop
 13507  271F  0008               	return
 13508  2720                     __end_of_Flash_Memory_Unlock:	
 13509                           
 13510                           	psect	text85
 13511  1ABB                     __ptext85:	
 13512 ;; *************** function _Flash_Memory_Read *****************
 13513 ;; Defined at:
 13514 ;;		line 1011 in file "../src/MCU_B1.c"
 13515 ;; Parameters:    Size  Location     Type
 13516 ;;  address         1    wreg     unsigned char 
 13517 ;; Auto vars:     Size  Location     Type
 13518 ;;  address         1    2[BANK0 ] unsigned char 
 13519 ;;  ret             1    3[BANK0 ] unsigned char 
 13520 ;;  i               1    1[BANK0 ] unsigned char 
 13521 ;; Return value:  Size  Location     Type
 13522 ;;                  1    wreg      unsigned char 
 13523 ;; Registers used:
 13524 ;;		wreg, status,2
 13525 ;; Tracked objects:
 13526 ;;		On entry : 0/0
 13527 ;;		On exit  : 0/0
 13528 ;;		Unchanged: 0/0
 13529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13531 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13532 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13533 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13534 ;;Total ram usage:        4 bytes
 13535 ;; Hardware stack levels used:    1
 13536 ;; Hardware stack levels required when called:    5
 13537 ;; This function calls:
 13538 ;;		Nothing
 13539 ;; This function is called by:
 13540 ;;		_Flash_Memory_Initialization
 13541 ;;		_Flash_Memory_Modify
 13542 ;; This function uses a non-reentrant model
 13543 ;;
 13544                           
 13545                           
 13546                           ;psect for function _Flash_Memory_Read
 13547  1ABB                     _Flash_Memory_Read:	
 13548                           
 13549                           ;incstack = 0
 13550                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 13551                           ;Flash_Memory_Read@address stored from wreg
 13552  1ABB  0020               	movlb	0	; select bank0
 13553  1ABC  00A2               	movwf	Flash_Memory_Read@address
 13554                           
 13555                           ;MCU_B1.c: 1012: char i = 0, ret = 0;
 13556  1ABD  01A1               	clrf	Flash_Memory_Read@i
 13557  1ABE  01A3               	clrf	Flash_Memory_Read@ret
 13558                           
 13559                           ;MCU_B1.c: 1013: PMADRH = 0x30;
 13560  1ABF  3030               	movlw	48
 13561  1AC0  0023               	movlb	3	; select bank3
 13562  1AC1  0092               	movwf	18	;volatile
 13563                           
 13564                           ;MCU_B1.c: 1014: PMADRL = address;
 13565  1AC2  0020               	movlb	0	; select bank0
 13566  1AC3  0822               	movf	Flash_Memory_Read@address,w
 13567  1AC4  0023               	movlb	3	; select bank3
 13568  1AC5  0091               	movwf	17	;volatile
 13569                           
 13570                           ;MCU_B1.c: 1015: CFGS = 0;
 13571  1AC6  1315               	bcf	21,6	;volatile
 13572                           
 13573                           ;MCU_B1.c: 1016: RD = 1;
 13574  1AC7  1415               	bsf	21,0	;volatile
 13575                           
 13576                           ;MCU_B1.c: 1017: i = PMDATH;
 13577  1AC8  0814               	movf	20,w	;volatile
 13578  1AC9  0020               	movlb	0	; select bank0
 13579  1ACA  00A0               	movwf	??_Flash_Memory_Read
 13580  1ACB  0820               	movf	??_Flash_Memory_Read,w
 13581  1ACC  00A1               	movwf	Flash_Memory_Read@i
 13582                           
 13583                           ;MCU_B1.c: 1018: ret = PMDATL;
 13584  1ACD  0023               	movlb	3	; select bank3
 13585  1ACE  0813               	movf	19,w	;volatile
 13586  1ACF  0020               	movlb	0	; select bank0
 13587  1AD0  00A0               	movwf	??_Flash_Memory_Read
 13588  1AD1  0820               	movf	??_Flash_Memory_Read,w
 13589  1AD2  00A3               	movwf	Flash_Memory_Read@ret
 13590                           
 13591                           ;MCU_B1.c: 1019: return ret;
 13592  1AD3  0823               	movf	Flash_Memory_Read@ret,w
 13593  1AD4  0008               	return
 13594  1AD5                     __end_of_Flash_Memory_Read:	
 13595                           
 13596                           	psect	text86
 13597  0559                     __ptext86:	
 13598 ;; *************** function _Exception_Main *****************
 13599 ;; Defined at:
 13600 ;;		line 499 in file "../src/main_B1.c"
 13601 ;; Parameters:    Size  Location     Type
 13602 ;;		None
 13603 ;; Auto vars:     Size  Location     Type
 13604 ;;  i               2   19[BANK0 ] int 
 13605 ;;  i               2   17[BANK0 ] int 
 13606 ;;  lights          1   21[BANK0 ] unsigned char 
 13607 ;;  error           1   16[BANK0 ] unsigned char 
 13608 ;;  count           1   15[BANK0 ] unsigned char 
 13609 ;;  status          1   14[BANK0 ] unsigned char 
 13610 ;; Return value:  Size  Location     Type
 13611 ;;		None               void
 13612 ;; Registers used:
 13613 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13614 ;; Tracked objects:
 13615 ;;		On entry : 0/0
 13616 ;;		On exit  : 0/0
 13617 ;;		Unchanged: 0/0
 13618 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13619 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13620 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13621 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13622 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13623 ;;Total ram usage:        9 bytes
 13624 ;; Hardware stack levels used:    1
 13625 ;; Hardware stack levels required when called:    7
 13626 ;; This function calls:
 13627 ;;		_getDimmerLights_Line
 13628 ;;		_getDimmerLights_Status
 13629 ;;		_getMain_All_Error_Status
 13630 ;;		_getMain_All_LightsStatus
 13631 ;;		_setBuz
 13632 ;;		_setDimmerLights_SwOff
 13633 ;;		_setLED
 13634 ;; This function is called by:
 13635 ;;		_main
 13636 ;; This function uses a non-reentrant model
 13637 ;;
 13638                           
 13639                           
 13640                           ;psect for function _Exception_Main
 13641  0559                     _Exception_Main:	
 13642                           
 13643                           ;main_B1.c: 500: char error = getMain_All_Error_Status(0);
 13644                           
 13645                           ;incstack = 0
 13646                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13647  0559  3000               	movlw	0
 13648  055A  3188  2000  3185   	fcall	_getMain_All_Error_Status
 13649  055D  0020               	movlb	0	; select bank0
 13650  055E  00AD               	movwf	??_Exception_Main
 13651  055F  082D               	movf	??_Exception_Main,w
 13652  0560  00B0               	movwf	Exception_Main@error
 13653                           
 13654                           ;main_B1.c: 501: char lights = 0, count = 2;
 13655  0561  01B5               	clrf	Exception_Main@lights
 13656  0562  3002               	movlw	2
 13657  0563  00AD               	movwf	??_Exception_Main
 13658  0564  082D               	movf	??_Exception_Main,w
 13659  0565  00AF               	movwf	Exception_Main@count
 13660                           
 13661                           ;main_B1.c: 502: char status = 0;
 13662  0566  01AE               	clrf	Exception_Main@status
 13663                           
 13664                           ;main_B1.c: 504: if (myMain.Error_Run == 1) {
 13665  0567  0021               	movlb	1	; select bank1
 13666  0568  1DB9               	btfss	(_myMain^(0+128)+10),3
 13667  0569  2D79               	goto	l10174
 13668                           
 13669                           ;main_B1.c: 505: if (error == 0) {
 13670  056A  0020               	movlb	0	; select bank0
 13671  056B  08B0               	movf	Exception_Main@error,f
 13672  056C  1D03               	skipz
 13673  056D  0008               	return
 13674                           
 13675                           ;main_B1.c: 506: myMain.Error_Run = 0;
 13676  056E  0021               	movlb	1	; select bank1
 13677  056F  11B9               	bcf	(_myMain^(0+128)+10),3
 13678                           
 13679                           ;main_B1.c: 509: setLED(99, 10);
 13680  0570  300A               	movlw	10
 13681  0571  0020               	movlb	0	; select bank0
 13682  0572  00AD               	movwf	??_Exception_Main
 13683  0573  082D               	movf	??_Exception_Main,w
 13684  0574  00A2               	movwf	setLED@command
 13685  0575  3063               	movlw	99
 13686  0576  3191  21D9         	fcall	_setLED
 13687                           
 13688                           ;main_B1.c: 522: }
 13689                           ;main_B1.c: 523: } else {
 13690  0578  0008               	return
 13691  0579                     l10174:	
 13692                           
 13693                           ;main_B1.c: 524: if (error != 0) {
 13694  0579  0020               	movlb	0	; select bank0
 13695  057A  0830               	movf	Exception_Main@error,w
 13696  057B  1903               	btfsc	3,2
 13697  057C  0008               	return
 13698                           
 13699                           ;main_B1.c: 525: myMain.Error_Run = 1;
 13700  057D  0021               	movlb	1	; select bank1
 13701  057E  15B9               	bsf	(_myMain^(0+128)+10),3
 13702                           
 13703                           ;main_B1.c: 527: setLED(99, 11);
 13704  057F  300B               	movlw	11
 13705  0580  0020               	movlb	0	; select bank0
 13706  0581  00AD               	movwf	??_Exception_Main
 13707  0582  082D               	movf	??_Exception_Main,w
 13708  0583  00A2               	movwf	setLED@command
 13709  0584  3063               	movlw	99
 13710  0585  3191  21D9  3185   	fcall	_setLED
 13711                           
 13712                           ;main_B1.c: 538: switch (error) {
 13713  0588  2E25               	goto	l10222
 13714  0589                     l10180:	
 13715                           ;main_B1.c: 539: case 2:
 13716                           
 13717                           
 13718                           ;main_B1.c: 546: if (getMain_All_LightsStatus() == 1) {
 13719  0589  3199  2133  3185   	fcall	_getMain_All_LightsStatus
 13720  058C  3A01               	xorlw	1
 13721  058D  1D03               	skipz
 13722  058E  2D98               	goto	l10184
 13723                           
 13724                           ;main_B1.c: 547: setBuz(10, 300);
 13725  058F  302C               	movlw	44
 13726  0590  0020               	movlb	0	; select bank0
 13727  0591  00A9               	movwf	setBuz@time
 13728  0592  3001               	movlw	1
 13729  0593  00AA               	movwf	setBuz@time+1
 13730  0594  300A               	movlw	10
 13731  0595  3192  22D4  3185   	fcall	_setBuz
 13732  0598                     l10184:	
 13733                           
 13734                           ;main_B1.c: 548: }
 13735                           ;main_B1.c: 550: for (int i = 0; i < count; i++) {
 13736  0598  0020               	movlb	0	; select bank0
 13737  0599  01B1               	clrf	Exception_Main@i
 13738  059A  01B2               	clrf	Exception_Main@i+1
 13739  059B                     l10194:	
 13740  059B  0832               	movf	Exception_Main@i+1,w
 13741  059C  3A80               	xorlw	128
 13742  059D  00AD               	movwf	??_Exception_Main
 13743  059E  3080               	movlw	128
 13744  059F  022D               	subwf	??_Exception_Main,w
 13745  05A0  1D03               	skipz
 13746  05A1  2DA4               	goto	u11565
 13747  05A2  082F               	movf	Exception_Main@count,w
 13748  05A3  0231               	subwf	Exception_Main@i,w
 13749  05A4                     u11565:	
 13750  05A4  1803               	btfsc	3,0
 13751  05A5  2DC6               	goto	u11560
 13752                           
 13753                           ;main_B1.c: 552: if (getDimmerLights_Status(i + 1) == 1) {
 13754  05A6  0020               	movlb	0	; select bank0
 13755  05A7  0831               	movf	Exception_Main@i,w
 13756  05A8  3E01               	addlw	1
 13757  05A9  31A7  27EF  3185   	fcall	_getDimmerLights_Status
 13758  05AC  3A01               	xorlw	1
 13759  05AD  1D03               	skipz
 13760  05AE  2DC0               	goto	l10192
 13761                           
 13762                           ;main_B1.c: 553: DimmerLights->SwFlag = 1;
 13763  05AF  0021               	movlb	1	; select bank1
 13764  05B0  085A               	movf	_DimmerLights^(0+128),w
 13765  05B1  0086               	movwf	6
 13766  05B2  3001               	movlw	1	; select bank2/3
 13767  05B3  0087               	movwf	7
 13768  05B4  1401               	bsf	1,0
 13769                           
 13770                           ;main_B1.c: 554: DimmerLights->Status = 0;
 13771  05B5  0A5A               	incf	_DimmerLights^(0+128),w
 13772  05B6  0086               	movwf	6
 13773  05B7  3001               	movlw	1	; select bank2/3
 13774  05B8  0087               	movwf	7
 13775  05B9  1001               	bcf	1,0
 13776                           
 13777                           ;main_B1.c: 555: setDimmerLights_SwOff(i + 1);
 13778  05BA  0020               	movlb	0	; select bank0
 13779  05BB  0831               	movf	Exception_Main@i,w
 13780  05BC  3E01               	addlw	1
 13781  05BD  319F  2751  3185   	fcall	_setDimmerLights_SwOff
 13782  05C0                     l10192:	
 13783  05C0  3001               	movlw	1
 13784  05C1  0020               	movlb	0	; select bank0
 13785  05C2  07B1               	addwf	Exception_Main@i,f
 13786  05C3  3000               	movlw	0
 13787  05C4  3DB2               	addwfc	Exception_Main@i+1,f
 13788  05C5  2D9B               	goto	l10194
 13789  05C6                     u11560:	
 13790  05C6  0020               	movlb	0	; select bank0
 13791  05C7  0008               	return
 13792  05C8                     l10196:	
 13793                           ;main_B1.c: 561: case 3:
 13794                           
 13795                           ;main_B1.c: 556: }
 13796                           ;main_B1.c: 557: }
 13797                           ;main_B1.c: 560: break;
 13798                           
 13799                           
 13800                           ;main_B1.c: 563: setBuz(5, 300);
 13801  05C8  302C               	movlw	44
 13802  05C9  0020               	movlb	0	; select bank0
 13803  05CA  00A9               	movwf	setBuz@time
 13804  05CB  3001               	movlw	1
 13805  05CC  00AA               	movwf	setBuz@time+1
 13806  05CD  3005               	movlw	5
 13807  05CE  3192  22D4  3185   	fcall	_setBuz
 13808                           
 13809                           ;main_B1.c: 564: lights = getDimmerLights_Line();
 13810  05D1  3199  2146  3185   	fcall	_getDimmerLights_Line
 13811  05D4  0020               	movlb	0	; select bank0
 13812  05D5  00AD               	movwf	??_Exception_Main
 13813  05D6  082D               	movf	??_Exception_Main,w
 13814  05D7  00B5               	movwf	Exception_Main@lights
 13815                           
 13816                           ;main_B1.c: 565: if (lights == 0) {
 13817  05D8  08B5               	movf	Exception_Main@lights,f
 13818  05D9  1D03               	skipz
 13819  05DA  2E0A               	goto	l10214
 13820                           
 13821                           ;main_B1.c: 567: for (int i = 0; i < count; i++) {
 13822  05DB  01B3               	clrf	Exception_Main@i_7021
 13823  05DC  01B4               	clrf	Exception_Main@i_7021+1
 13824  05DD                     l10212:	
 13825  05DD  0834               	movf	Exception_Main@i_7021+1,w
 13826  05DE  3A80               	xorlw	128
 13827  05DF  00AD               	movwf	??_Exception_Main
 13828  05E0  3080               	movlw	128
 13829  05E1  022D               	subwf	??_Exception_Main,w
 13830  05E2  1D03               	skipz
 13831  05E3  2DE6               	goto	u11595
 13832  05E4  082F               	movf	Exception_Main@count,w
 13833  05E5  0233               	subwf	Exception_Main@i_7021,w
 13834  05E6                     u11595:	
 13835  05E6  1803               	btfsc	3,0
 13836  05E7  2E08               	goto	u11590
 13837                           
 13838                           ;main_B1.c: 569: if (getDimmerLights_Status(i + 1) == 1) {
 13839  05E8  0020               	movlb	0	; select bank0
 13840  05E9  0833               	movf	Exception_Main@i_7021,w
 13841  05EA  3E01               	addlw	1
 13842  05EB  31A7  27EF  3185   	fcall	_getDimmerLights_Status
 13843  05EE  3A01               	xorlw	1
 13844  05EF  1D03               	skipz
 13845  05F0  2E02               	goto	l10210
 13846                           
 13847                           ;main_B1.c: 570: DimmerLights->SwFlag = 1;
 13848  05F1  0021               	movlb	1	; select bank1
 13849  05F2  085A               	movf	_DimmerLights^(0+128),w
 13850  05F3  0086               	movwf	6
 13851  05F4  3001               	movlw	1	; select bank2/3
 13852  05F5  0087               	movwf	7
 13853  05F6  1401               	bsf	1,0
 13854                           
 13855                           ;main_B1.c: 571: DimmerLights->Status = 0;
 13856  05F7  0A5A               	incf	_DimmerLights^(0+128),w
 13857  05F8  0086               	movwf	6
 13858  05F9  3001               	movlw	1	; select bank2/3
 13859  05FA  0087               	movwf	7
 13860  05FB  1001               	bcf	1,0
 13861                           
 13862                           ;main_B1.c: 572: setDimmerLights_SwOff(i + 1);
 13863  05FC  0020               	movlb	0	; select bank0
 13864  05FD  0833               	movf	Exception_Main@i_7021,w
 13865  05FE  3E01               	addlw	1
 13866  05FF  319F  2751  3185   	fcall	_setDimmerLights_SwOff
 13867  0602                     l10210:	
 13868  0602  3001               	movlw	1
 13869  0603  0020               	movlb	0	; select bank0
 13870  0604  07B3               	addwf	Exception_Main@i_7021,f
 13871  0605  3000               	movlw	0
 13872  0606  3DB4               	addwfc	Exception_Main@i_7021+1,f
 13873  0607  2DDD               	goto	l10212
 13874  0608                     u11590:	
 13875  0608  0020               	movlb	0	; select bank0
 13876  0609  0008               	return
 13877  060A                     l10214:	
 13878                           ;main_B1.c: 573: }
 13879                           ;main_B1.c: 574: }
 13880                           ;main_B1.c: 575: } else {
 13881                           
 13882                           
 13883                           ;main_B1.c: 577: if (getDimmerLights_Status(lights) == 1) {
 13884  060A  0020               	movlb	0	; select bank0
 13885  060B  0835               	movf	Exception_Main@lights,w
 13886  060C  31A7  27EF  3185   	fcall	_getDimmerLights_Status
 13887  060F  3A01               	xorlw	1
 13888  0610  1903               	btfsc	3,2
 13889  0611  2E14               	goto	l10216
 13890  0612  0020               	movlb	0	; select bank0
 13891  0613  0008               	return
 13892  0614                     l10216:	
 13893                           
 13894                           ;main_B1.c: 579: DimmerLights->SwFlag = 1;
 13895  0614  0021               	movlb	1	; select bank1
 13896  0615  085A               	movf	_DimmerLights^(0+128),w
 13897  0616  0086               	movwf	6
 13898  0617  3001               	movlw	1	; select bank2/3
 13899  0618  0087               	movwf	7
 13900  0619  1401               	bsf	1,0
 13901                           
 13902                           ;main_B1.c: 580: DimmerLights->Status = 0;
 13903  061A  0A5A               	incf	_DimmerLights^(0+128),w
 13904  061B  0086               	movwf	6
 13905  061C  3001               	movlw	1	; select bank2/3
 13906  061D  0087               	movwf	7
 13907  061E  1001               	bcf	1,0
 13908                           
 13909                           ;main_B1.c: 581: setDimmerLights_SwOff(lights);
 13910  061F  0020               	movlb	0	; select bank0
 13911  0620  0835               	movf	Exception_Main@lights,w
 13912  0621  319F  2751         	fcall	_setDimmerLights_SwOff
 13913  0623  0020               	movlb	0	; select bank0
 13914  0624  0008               	return
 13915  0625                     l10222:	
 13916                           ;main_B1.c: 586: }
 13917                           
 13918                           ;main_B1.c: 582: }
 13919                           ;main_B1.c: 583: }
 13920                           ;main_B1.c: 585: break;
 13921                           
 13922  0625  0020               	movlb	0	; select bank0
 13923  0626  0830               	movf	Exception_Main@error,w
 13924                           
 13925                           ; Switch size 1, requested type "space"
 13926                           ; Number of cases is 2, Range of values is 2 to 3
 13927                           ; switch strategies available:
 13928                           ; Name         Instructions Cycles
 13929                           ; simple_byte            7     4 (average)
 13930                           ; direct_byte           13     9 (fixed)
 13931                           ; jumptable            263     9 (fixed)
 13932                           ;	Chosen strategy is simple_byte
 13933  0627  3A02               	xorlw	2	; case 2
 13934  0628  1903               	skipnz
 13935  0629  2D89               	goto	l10180
 13936  062A  3A01               	xorlw	1	; case 3
 13937  062B  1903               	skipnz
 13938  062C  2DC8               	goto	l10196
 13939  062D  2E2F               	goto	l2968
 13940  062E  0008               	return
 13941  062F                     l2968:	
 13942  062F  0008               	return
 13943  0630                     __end_of_Exception_Main:	
 13944                           
 13945                           	psect	text87
 13946  1946                     __ptext87:	
 13947 ;; *************** function _getDimmerLights_Line *****************
 13948 ;; Defined at:
 13949 ;;		line 1107 in file "../src/Dimmer_B1.c"
 13950 ;; Parameters:    Size  Location     Type
 13951 ;;		None
 13952 ;; Auto vars:     Size  Location     Type
 13953 ;;  line            1    1[BANK0 ] unsigned char 
 13954 ;; Return value:  Size  Location     Type
 13955 ;;                  1    wreg      unsigned char 
 13956 ;; Registers used:
 13957 ;;		wreg, status,2
 13958 ;; Tracked objects:
 13959 ;;		On entry : 0/0
 13960 ;;		On exit  : 0/0
 13961 ;;		Unchanged: 0/0
 13962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13963 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13964 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13965 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13966 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13967 ;;Total ram usage:        2 bytes
 13968 ;; Hardware stack levels used:    1
 13969 ;; Hardware stack levels required when called:    5
 13970 ;; This function calls:
 13971 ;;		Nothing
 13972 ;; This function is called by:
 13973 ;;		_Exception_Main
 13974 ;; This function uses a non-reentrant model
 13975 ;;
 13976                           
 13977                           
 13978                           ;psect for function _getDimmerLights_Line
 13979  1946                     _getDimmerLights_Line:	
 13980                           
 13981                           ;Dimmer_B1.c: 1108: char line = 0;
 13982                           
 13983                           ;incstack = 0
 13984                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 13985  1946  0020               	movlb	0	; select bank0
 13986  1947  01A1               	clrf	getDimmerLights_Line@line
 13987                           
 13988                           ;Dimmer_B1.c: 1110: if (DimmerLights1.Line == 1) {
 13989  1948  0023               	movlb	3	; select bank3
 13990  1949  1CC8               	btfss	(_DimmerLights1^(0+384)+1),1
 13991  194A  294F               	goto	l931
 13992                           
 13993                           ;Dimmer_B1.c: 1111: line = 1;
 13994  194B  0020               	movlb	0	; select bank0
 13995  194C  01A1               	clrf	getDimmerLights_Line@line
 13996  194D  0AA1               	incf	getDimmerLights_Line@line,f
 13997                           
 13998                           ;Dimmer_B1.c: 1112: }
 13999  194E  2956               	goto	l932
 14000  194F                     l931:	
 14001                           
 14002                           ;Dimmer_B1.c: 1115: else if (DimmerLights2.Line == 1) {
 14003  194F  1CD0               	btfss	(_DimmerLights2^(0+384)+1),1
 14004  1950  2956               	goto	l932
 14005                           
 14006                           ;Dimmer_B1.c: 1116: line = 2;
 14007  1951  3002               	movlw	2
 14008  1952  0020               	movlb	0	; select bank0
 14009  1953  00A0               	movwf	??_getDimmerLights_Line
 14010  1954  0820               	movf	??_getDimmerLights_Line,w
 14011  1955  00A1               	movwf	getDimmerLights_Line@line
 14012  1956                     l932:	
 14013                           
 14014                           ;Dimmer_B1.c: 1117: }
 14015                           ;Dimmer_B1.c: 1124: return line;
 14016  1956  0020               	movlb	0	; select bank0
 14017  1957  0821               	movf	getDimmerLights_Line@line,w
 14018  1958  0008               	return
 14019  1959                     __end_of_getDimmerLights_Line:	
 14020                           
 14021                           	psect	text88
 14022  1D44                     __ptext88:	
 14023 ;; *************** function _DimmerLights_Main *****************
 14024 ;; Defined at:
 14025 ;;		line 826 in file "../src/Dimmer_B1.c"
 14026 ;; Parameters:    Size  Location     Type
 14027 ;;		None
 14028 ;; Auto vars:     Size  Location     Type
 14029 ;;		None
 14030 ;; Return value:  Size  Location     Type
 14031 ;;		None               void
 14032 ;; Registers used:
 14033 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14034 ;; Tracked objects:
 14035 ;;		On entry : 0/0
 14036 ;;		On exit  : 0/0
 14037 ;;		Unchanged: 0/0
 14038 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14039 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14040 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14041 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14042 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14043 ;;Total ram usage:        0 bytes
 14044 ;; Hardware stack levels used:    1
 14045 ;; Hardware stack levels required when called:   10
 14046 ;; This function calls:
 14047 ;;		_DimmerLights_DimmingFunction
 14048 ;;		_getLoad_OK
 14049 ;;		_getMain_All_Error_Status
 14050 ;;		_getMain_All_LightsStatus
 14051 ;;		_setDimmerLights_Main
 14052 ;; This function is called by:
 14053 ;;		_main
 14054 ;; This function uses a non-reentrant model
 14055 ;;
 14056                           
 14057                           
 14058                           ;psect for function _DimmerLights_Main
 14059  1D44                     _DimmerLights_Main:	
 14060                           
 14061                           ;Dimmer_B1.c: 829: if (Dimmer.LoadGO == 1) {
 14062                           
 14063                           ;incstack = 0
 14064                           ; Regs used in _DimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14065  1D44  0022               	movlb	2	; select bank2
 14066  1D45  1CAC               	btfss	_Dimmer^(0+256),1
 14067  1D46  2D5C               	goto	l10134
 14068                           
 14069                           ;Dimmer_B1.c: 830: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          All_LightsStatus() == 0) {
 14070  1D47  31A6  26EE  319D   	fcall	_getLoad_OK
 14071  1D4A  3A01               	xorlw	1
 14072  1D4B  1903               	skipnz
 14073  1D4C  2D5A               	goto	l870
 14074  1D4D  3000               	movlw	0
 14075  1D4E  3188  2000  319D   	fcall	_getMain_All_Error_Status
 14076  1D51  3800               	iorlw	0
 14077  1D52  1D03               	skipz
 14078  1D53  2D5A               	goto	l870
 14079  1D54  3199  2133  319D   	fcall	_getMain_All_LightsStatus
 14080  1D57  3800               	iorlw	0
 14081  1D58  1D03               	skipz
 14082  1D59  2D5C               	goto	l10134
 14083  1D5A                     l870:	
 14084                           
 14085                           ;Dimmer_B1.c: 831: Dimmer.LoadGO = 0;
 14086  1D5A  0022               	movlb	2	; select bank2
 14087  1D5B  10AC               	bcf	_Dimmer^(0+256),1
 14088  1D5C                     l10134:	
 14089                           
 14090                           ;Dimmer_B1.c: 832: }
 14091                           ;Dimmer_B1.c: 833: }
 14092                           ;Dimmer_B1.c: 838: setDimmerLights_Main(1);
 14093  1D5C  3001               	movlw	1
 14094  1D5D  3195  25DD  319D   	fcall	_setDimmerLights_Main
 14095                           
 14096                           ;Dimmer_B1.c: 841: DimmerLights_DimmingFunction(1);
 14097  1D60  3001               	movlw	1
 14098  1D61  3188  20A7  319D   	fcall	_DimmerLights_DimmingFunction
 14099                           
 14100                           ;Dimmer_B1.c: 847: setDimmerLights_Main(2);
 14101  1D64  3002               	movlw	2
 14102  1D65  3195  25DD  319D   	fcall	_setDimmerLights_Main
 14103                           
 14104                           ;Dimmer_B1.c: 849: DimmerLights_DimmingFunction(2);
 14105  1D68  3002               	movlw	2
 14106  1D69  3188  20A7         	fcall	_DimmerLights_DimmingFunction
 14107  1D6B  0008               	return
 14108  1D6C                     __end_of_DimmerLights_Main:	
 14109                           
 14110                           	psect	text89
 14111  15DD                     __ptext89:	
 14112 ;; *************** function _setDimmerLights_Main *****************
 14113 ;; Defined at:
 14114 ;;		line 864 in file "../src/Dimmer_B1.c"
 14115 ;; Parameters:    Size  Location     Type
 14116 ;;  lights          1    wreg     unsigned char 
 14117 ;; Auto vars:     Size  Location     Type
 14118 ;;  lights          1    1[BANK1 ] unsigned char 
 14119 ;; Return value:  Size  Location     Type
 14120 ;;		None               void
 14121 ;; Registers used:
 14122 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14123 ;; Tracked objects:
 14124 ;;		On entry : 0/0
 14125 ;;		On exit  : 0/0
 14126 ;;		Unchanged: 0/0
 14127 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14128 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14129 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 14130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14131 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 14132 ;;Total ram usage:        1 bytes
 14133 ;; Hardware stack levels used:    1
 14134 ;; Hardware stack levels required when called:    9
 14135 ;; This function calls:
 14136 ;;		_DimmerLights_SelectPointer
 14137 ;;		_getDimmerLights_Allow_Condition
 14138 ;;		_getMain_All_LightsStatus
 14139 ;;		_setDimmerLights_Dimming
 14140 ;;		_setDimmerLights_OnOff
 14141 ;; This function is called by:
 14142 ;;		_DimmerLights_Main
 14143 ;; This function uses a non-reentrant model
 14144 ;;
 14145                           
 14146                           
 14147                           ;psect for function _setDimmerLights_Main
 14148  15DD                     _setDimmerLights_Main:	
 14149                           
 14150                           ;incstack = 0
 14151                           ; Regs used in _setDimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14152                           ;setDimmerLights_Main@lights stored from wreg
 14153  15DD  0021               	movlb	1	; select bank1
 14154  15DE  00E6               	movwf	setDimmerLights_Main@lights^(0+128)
 14155                           
 14156                           ;Dimmer_B1.c: 866: DimmerLights_SelectPointer(lights);
 14157  15DF  0866               	movf	setDimmerLights_Main@lights^(0+128),w
 14158  15E0  319A  2214  3195   	fcall	_DimmerLights_SelectPointer
 14159                           
 14160                           ;Dimmer_B1.c: 867: if (DimmerLights->Trigger == 1) {
 14161  15E3  0021               	movlb	1	; select bank1
 14162  15E4  085A               	movf	_DimmerLights^(0+128),w
 14163  15E5  0086               	movwf	6
 14164  15E6  3001               	movlw	1	; select bank2/3
 14165  15E7  0087               	movwf	7
 14166  15E8  1C81               	btfss	1,1
 14167  15E9  2E0C               	goto	l10000
 14168                           
 14169                           ;Dimmer_B1.c: 868: if (getDimmerLights_Allow_Condition(lights) == 0) {
 14170  15EA  0866               	movf	setDimmerLights_Main@lights^(0+128),w
 14171  15EB  3190  208B  3195   	fcall	_getDimmerLights_Allow_Condition
 14172  15EE  3800               	iorlw	0
 14173  15EF  1D03               	skipz
 14174  15F0  0008               	return
 14175                           
 14176                           ;Dimmer_B1.c: 869: DimmerLights->Trigger = 0;
 14177  15F1  0021               	movlb	1	; select bank1
 14178  15F2  085A               	movf	_DimmerLights^(0+128),w
 14179  15F3  0086               	movwf	6
 14180  15F4  3001               	movlw	1	; select bank2/3
 14181  15F5  0087               	movwf	7
 14182  15F6  1081               	bcf	1,1
 14183                           
 14184                           ;Dimmer_B1.c: 870: if (DimmerLights->Switch == 1) {
 14185  15F7  085A               	movf	_DimmerLights^(0+128),w
 14186  15F8  0086               	movwf	6
 14187  15F9  3001               	movlw	1	; select bank2/3
 14188  15FA  0087               	movwf	7
 14189  15FB  1D01               	btfss	1,2
 14190  15FC  2E05               	goto	l9998
 14191                           
 14192                           ;Dimmer_B1.c: 871: setDimmerLights_OnOff(lights, 1);
 14193  15FD  0020               	movlb	0	; select bank0
 14194  15FE  01ED               	clrf	setDimmerLights_OnOff@command
 14195  15FF  0AED               	incf	setDimmerLights_OnOff@command,f
 14196  1600  0021               	movlb	1	; select bank1
 14197  1601  0866               	movf	setDimmerLights_Main@lights^(0+128),w
 14198  1602  3187  2705         	fcall	_setDimmerLights_OnOff
 14199                           
 14200                           ;Dimmer_B1.c: 872: } else {
 14201  1604  0008               	return
 14202  1605                     l9998:	
 14203                           
 14204                           ;Dimmer_B1.c: 873: setDimmerLights_OnOff(lights, 0);
 14205  1605  0020               	movlb	0	; select bank0
 14206  1606  01ED               	clrf	setDimmerLights_OnOff@command
 14207  1607  0021               	movlb	1	; select bank1
 14208  1608  0866               	movf	setDimmerLights_Main@lights^(0+128),w
 14209  1609  3187  2705         	fcall	_setDimmerLights_OnOff
 14210                           
 14211                           ;Dimmer_B1.c: 874: }
 14212                           ;Dimmer_B1.c: 875: }
 14213                           ;Dimmer_B1.c: 876: } else {
 14214  160B  0008               	return
 14215  160C                     l10000:	
 14216                           
 14217                           ;Dimmer_B1.c: 877: if (getMain_All_LightsStatus() == 1) {
 14218  160C  3199  2133  3195   	fcall	_getMain_All_LightsStatus
 14219  160F  3A01               	xorlw	1
 14220  1610  1D03               	skipz
 14221  1611  2E3B               	goto	l10012
 14222                           
 14223                           ;Dimmer_B1.c: 878: if (DimmerLights->DimmingTrigger == 1) {
 14224  1612  0021               	movlb	1	; select bank1
 14225  1613  085A               	movf	_DimmerLights^(0+128),w
 14226  1614  0086               	movwf	6
 14227  1615  3001               	movlw	1	; select bank2/3
 14228  1616  0087               	movwf	7
 14229  1617  1E01               	btfss	1,4
 14230  1618  0008               	return
 14231                           
 14232                           ;Dimmer_B1.c: 879: if (getDimmerLights_Allow_Condition(lights) == 0) {
 14233  1619  0866               	movf	setDimmerLights_Main@lights^(0+128),w
 14234  161A  3190  208B  3195   	fcall	_getDimmerLights_Allow_Condition
 14235  161D  3800               	iorlw	0
 14236  161E  1D03               	skipz
 14237  161F  0008               	return
 14238                           
 14239                           ;Dimmer_B1.c: 880: DimmerLights->DimmingTrigger = 0;
 14240  1620  0021               	movlb	1	; select bank1
 14241  1621  085A               	movf	_DimmerLights^(0+128),w
 14242  1622  0086               	movwf	6
 14243  1623  3001               	movlw	1	; select bank2/3
 14244  1624  0087               	movwf	7
 14245  1625  1201               	bcf	1,4
 14246                           
 14247                           ;Dimmer_B1.c: 881: if (DimmerLights->DimmingSwitch == 1) {
 14248  1626  085A               	movf	_DimmerLights^(0+128),w
 14249  1627  0086               	movwf	6
 14250  1628  3001               	movlw	1	; select bank2/3
 14251  1629  0087               	movwf	7
 14252  162A  1E81               	btfss	1,5
 14253  162B  2E34               	goto	l10010
 14254                           
 14255                           ;Dimmer_B1.c: 882: setDimmerLights_Dimming(lights, 1);
 14256  162C  0020               	movlb	0	; select bank0
 14257  162D  01EA               	clrf	setDimmerLights_Dimming@status
 14258  162E  0AEA               	incf	setDimmerLights_Dimming@status,f
 14259  162F  0021               	movlb	1	; select bank1
 14260  1630  0866               	movf	setDimmerLights_Main@lights^(0+128),w
 14261  1631  3192  2280         	fcall	_setDimmerLights_Dimming
 14262                           
 14263                           ;Dimmer_B1.c: 883: } else {
 14264  1633  0008               	return
 14265  1634                     l10010:	
 14266                           
 14267                           ;Dimmer_B1.c: 884: setDimmerLights_Dimming(lights, 0);
 14268  1634  0020               	movlb	0	; select bank0
 14269  1635  01EA               	clrf	setDimmerLights_Dimming@status
 14270  1636  0021               	movlb	1	; select bank1
 14271  1637  0866               	movf	setDimmerLights_Main@lights^(0+128),w
 14272  1638  3192  2280         	fcall	_setDimmerLights_Dimming
 14273                           
 14274                           ;Dimmer_B1.c: 885: }
 14275                           ;Dimmer_B1.c: 886: }
 14276                           ;Dimmer_B1.c: 887: }
 14277                           ;Dimmer_B1.c: 888: } else {
 14278  163A  0008               	return
 14279  163B                     l10012:	
 14280                           
 14281                           ;Dimmer_B1.c: 889: if (DimmerLights->DimmingTrigger == 1) {
 14282  163B  0021               	movlb	1	; select bank1
 14283  163C  085A               	movf	_DimmerLights^(0+128),w
 14284  163D  0086               	movwf	6
 14285  163E  3001               	movlw	1	; select bank2/3
 14286  163F  0087               	movwf	7
 14287  1640  1E01               	btfss	1,4
 14288  1641  0008               	return
 14289                           
 14290                           ;Dimmer_B1.c: 890: DimmerLights->DimmingTrigger = 0;
 14291  1642  085A               	movf	_DimmerLights^(0+128),w
 14292  1643  0086               	movwf	6
 14293  1644  3001               	movlw	1	; select bank2/3
 14294  1645  0087               	movwf	7
 14295  1646  1201               	bcf	1,4
 14296  1647  0008               	return
 14297  1648                     __end_of_setDimmerLights_Main:	
 14298                           
 14299                           	psect	text90
 14300  0705                     __ptext90:	
 14301 ;; *************** function _setDimmerLights_OnOff *****************
 14302 ;; Defined at:
 14303 ;;		line 898 in file "../src/Dimmer_B1.c"
 14304 ;; Parameters:    Size  Location     Type
 14305 ;;  lights          1    wreg     unsigned char 
 14306 ;;  command         1   77[BANK0 ] unsigned char 
 14307 ;; Auto vars:     Size  Location     Type
 14308 ;;  lights          1    0[BANK1 ] unsigned char 
 14309 ;; Return value:  Size  Location     Type
 14310 ;;		None               void
 14311 ;; Registers used:
 14312 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14313 ;; Tracked objects:
 14314 ;;		On entry : 0/0
 14315 ;;		On exit  : 0/0
 14316 ;;		Unchanged: 0/0
 14317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14318 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14319 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 14320 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14321 ;;      Totals:         0       3       1       0       0       0       0       0       0       0       0       0       
      +0       0
 14322 ;;Total ram usage:        4 bytes
 14323 ;; Hardware stack levels used:    1
 14324 ;; Hardware stack levels required when called:    8
 14325 ;; This function calls:
 14326 ;;		_getCmd_Status
 14327 ;;		_getDelayOff_GO
 14328 ;;		_getDimmerLights_PercentToValue
 14329 ;;		_getMain_All_LightsStatus
 14330 ;;		_setCmd_Status
 14331 ;;		_setDelayOff_GO
 14332 ;;		_setDimmerIntr_ControlStatus
 14333 ;;		_setDimmerIntr_DimmingValue
 14334 ;;		_setDimmerIntr_Dimming_RF
 14335 ;;		_setDimmerIntr_MaxmumValue
 14336 ;;		_setDimmerLights_DimmingClose
 14337 ;;		_setDimmerLights_Line
 14338 ;;		_setLED
 14339 ;;		_setProductData
 14340 ;;		_setRF_DimmerLights
 14341 ;;		_setTxData
 14342 ;; This function is called by:
 14343 ;;		_setDimmerLights_Main
 14344 ;; This function uses a non-reentrant model
 14345 ;;
 14346                           
 14347                           
 14348                           ;psect for function _setDimmerLights_OnOff
 14349  0705                     _setDimmerLights_OnOff:	
 14350                           
 14351                           ;incstack = 0
 14352                           ; Regs used in _setDimmerLights_OnOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14353                           ;setDimmerLights_OnOff@lights stored from wreg
 14354  0705  0021               	movlb	1	; select bank1
 14355  0706  00E5               	movwf	setDimmerLights_OnOff@lights^(0+128)
 14356                           
 14357                           ;Dimmer_B1.c: 900: if (command == 1) {
 14358  0707  0020               	movlb	0	; select bank0
 14359  0708  086D               	movf	setDimmerLights_OnOff@command,w
 14360  0709  3A01               	xorlw	1
 14361  070A  1D03               	skipz
 14362  070B  2F70               	goto	l9946
 14363                           
 14364                           ;Dimmer_B1.c: 902: setDimmerIntr_ControlStatus(lights, 1);
 14365  070C  01A0               	clrf	setDimmerIntr_ControlStatus@command
 14366  070D  0AA0               	incf	setDimmerIntr_ControlStatus@command,f
 14367  070E  0021               	movlb	1	; select bank1
 14368  070F  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14369  0710  319D  25E9  3187   	fcall	_setDimmerIntr_ControlStatus
 14370                           
 14371                           ;Dimmer_B1.c: 905: Dimmer.Load_Status = 1;
 14372  0713  0022               	movlb	2	; select bank2
 14373  0714  152C               	bsf	_Dimmer^(0+256),2
 14374                           
 14375                           ;Dimmer_B1.c: 906: setDimmerLights_Line(lights);
 14376  0715  0021               	movlb	1	; select bank1
 14377  0716  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14378  0717  319B  237A  3187   	fcall	_setDimmerLights_Line
 14379                           
 14380                           ;Dimmer_B1.c: 912: setLED(lights, 0);
 14381  071A  0020               	movlb	0	; select bank0
 14382  071B  01A2               	clrf	setLED@command
 14383  071C  0021               	movlb	1	; select bank1
 14384  071D  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14385  071E  3191  21D9  3187   	fcall	_setLED
 14386                           
 14387                           ;Dimmer_B1.c: 933: if (DimmerLights->DimmingRun == 1) {
 14388  0721  0021               	movlb	1	; select bank1
 14389  0722  0A5A               	incf	_DimmerLights^(0+128),w
 14390  0723  0086               	movwf	6
 14391  0724  3001               	movlw	1	; select bank2/3
 14392  0725  0087               	movwf	7
 14393  0726  1F01               	btfss	1,6
 14394  0727  2F4C               	goto	l9936
 14395                           
 14396                           ;Dimmer_B1.c: 934: DimmerLights->DimmingRun = 0;
 14397  0728  0A5A               	incf	_DimmerLights^(0+128),w
 14398  0729  0086               	movwf	6
 14399  072A  3001               	movlw	1	; select bank2/3
 14400  072B  0087               	movwf	7
 14401  072C  1301               	bcf	1,6
 14402                           
 14403                           ;Dimmer_B1.c: 935: setDimmerIntr_MaxmumValue(lights, getDimmerLights_PercentToValue(prod
      +                          uct->Data[20 + lights]));
 14404  072D  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14405  072E  3E14               	addlw	20
 14406  072F  076E               	addwf	_product^(0+128),w
 14407  0730  0020               	movlb	0	; select bank0
 14408  0731  00EE               	movwf	??_setDimmerLights_OnOff
 14409  0732  086E               	movf	??_setDimmerLights_OnOff,w
 14410  0733  0086               	movwf	6
 14411  0734  3002               	movlw	2	; select bank4/5
 14412  0735  0087               	movwf	7
 14413  0736  0801               	movf	1,w
 14414  0737  3194  2447  3187   	fcall	_getDimmerLights_PercentToValue
 14415  073A  0020               	movlb	0	; select bank0
 14416  073B  00EF               	movwf	??_setDimmerLights_OnOff+1
 14417  073C  086F               	movf	??_setDimmerLights_OnOff+1,w
 14418  073D  00E2               	movwf	setDimmerIntr_MaxmumValue@value
 14419  073E  0021               	movlb	1	; select bank1
 14420  073F  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14421  0740  319A  222B  3187   	fcall	_setDimmerIntr_MaxmumValue
 14422                           
 14423                           ;Dimmer_B1.c: 936: setDimmerIntr_Dimming_RF(lights, 1);
 14424  0743  0020               	movlb	0	; select bank0
 14425  0744  01A0               	clrf	setDimmerIntr_Dimming_RF@command
 14426  0745  0AA0               	incf	setDimmerIntr_Dimming_RF@command,f
 14427  0746  0021               	movlb	1	; select bank1
 14428  0747  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14429  0748  319E  2618  3187   	fcall	_setDimmerIntr_Dimming_RF
 14430                           
 14431                           ;Dimmer_B1.c: 937: } else {
 14432  074B  2F63               	goto	l9938
 14433  074C                     l9936:	
 14434                           
 14435                           ;Dimmer_B1.c: 938: setDimmerIntr_DimmingValue(lights, getDimmerLights_PercentToValue(pro
      +                          duct->Data[20 + lights]));
 14436  074C  0021               	movlb	1	; select bank1
 14437  074D  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14438  074E  3E14               	addlw	20
 14439  074F  076E               	addwf	_product^(0+128),w
 14440  0750  0020               	movlb	0	; select bank0
 14441  0751  00EE               	movwf	??_setDimmerLights_OnOff
 14442  0752  086E               	movf	??_setDimmerLights_OnOff,w
 14443  0753  0086               	movwf	6
 14444  0754  3002               	movlw	2	; select bank4/5
 14445  0755  0087               	movwf	7
 14446  0756  0801               	movf	1,w
 14447  0757  3194  2447  3187   	fcall	_getDimmerLights_PercentToValue
 14448  075A  0020               	movlb	0	; select bank0
 14449  075B  00EF               	movwf	??_setDimmerLights_OnOff+1
 14450  075C  086F               	movf	??_setDimmerLights_OnOff+1,w
 14451  075D  00E2               	movwf	setDimmerIntr_DimmingValue@value
 14452  075E  0021               	movlb	1	; select bank1
 14453  075F  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14454  0760  319A  2242  3187   	fcall	_setDimmerIntr_DimmingValue
 14455  0763                     l9938:	
 14456                           
 14457                           ;Dimmer_B1.c: 941: }
 14458                           ;Dimmer_B1.c: 943: if (lights == 1) {
 14459  0763  0021               	movlb	1	; select bank1
 14460  0764  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14461  0765  3A01               	xorlw	1
 14462  0766  1D03               	skipz
 14463  0767  2F6A               	goto	l9942
 14464                           
 14465                           ;Dimmer_B1.c: 945: DimmerIntr1.TuneGO = 1;
 14466  0768  173D               	bsf	(_DimmerIntr1^(0+128)+1),6
 14467                           
 14468                           ;Dimmer_B1.c: 947: } else if (lights == 2) {
 14469  0769  2FA7               	goto	l9964
 14470  076A                     l9942:	
 14471  076A  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14472  076B  3A02               	xorlw	2
 14473  076C  1D03               	skipz
 14474  076D  2FA7               	goto	l9964
 14475                           
 14476                           ;Dimmer_B1.c: 949: DimmerIntr2.TuneGO = 1;
 14477  076E  1749               	bsf	(_DimmerIntr2^(0+128)+1),6
 14478                           
 14479                           ;Dimmer_B1.c: 951: }
 14480                           ;Dimmer_B1.c: 957: } else if (command == 0) {
 14481  076F  2FA7               	goto	l9964
 14482  0770                     l9946:	
 14483  0770  0020               	movlb	0	; select bank0
 14484  0771  08ED               	movf	setDimmerLights_OnOff@command,f
 14485  0772  1D03               	skipz
 14486  0773  2FA7               	goto	l9964
 14487                           
 14488                           ;Dimmer_B1.c: 959: setDimmerIntr_ControlStatus(lights, 0);
 14489  0774  01A0               	clrf	setDimmerIntr_ControlStatus@command
 14490  0775  0021               	movlb	1	; select bank1
 14491  0776  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14492  0777  319D  25E9  3187   	fcall	_setDimmerIntr_ControlStatus
 14493                           
 14494                           ;Dimmer_B1.c: 961: Dimmer.Load_Status = 0;
 14495  077A  0022               	movlb	2	; select bank2
 14496  077B  112C               	bcf	_Dimmer^(0+256),2
 14497                           
 14498                           ;Dimmer_B1.c: 962: setDimmerLights_Line(0);
 14499  077C  3000               	movlw	0
 14500  077D  319B  237A  3187   	fcall	_setDimmerLights_Line
 14501                           
 14502                           ;Dimmer_B1.c: 966: if (getDelayOff_GO(lights) == 1) {
 14503  0780  0021               	movlb	1	; select bank1
 14504  0781  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14505  0782  3198  206E  3187   	fcall	_getDelayOff_GO
 14506  0785  3A01               	xorlw	1
 14507  0786  1D03               	skipz
 14508  0787  2F90               	goto	l897
 14509                           
 14510                           ;Dimmer_B1.c: 967: setDelayOff_GO(lights, 0, 0);
 14511  0788  0020               	movlb	0	; select bank0
 14512  0789  01E5               	clrf	setDelayOff_GO@command
 14513  078A  01E6               	clrf	setDelayOff_GO@value
 14514  078B  0021               	movlb	1	; select bank1
 14515  078C  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14516  078D  318A  22B4  3187   	fcall	_setDelayOff_GO
 14517  0790                     l897:	
 14518                           
 14519                           ;Dimmer_B1.c: 968: }
 14520                           ;Dimmer_B1.c: 973: setLED(lights, 1);
 14521  0790  0020               	movlb	0	; select bank0
 14522  0791  01A2               	clrf	setLED@command
 14523  0792  0AA2               	incf	setLED@command,f
 14524  0793  0021               	movlb	1	; select bank1
 14525  0794  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14526  0795  3191  21D9  3187   	fcall	_setLED
 14527                           
 14528                           ;Dimmer_B1.c: 978: if (lights == 1) {
 14529  0798  0021               	movlb	1	; select bank1
 14530  0799  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14531  079A  3A01               	xorlw	1
 14532  079B  1D03               	skipz
 14533  079C  2FA0               	goto	l9960
 14534                           
 14535                           ;Dimmer_B1.c: 979: RB4 = 0;
 14536  079D  0020               	movlb	0	; select bank0
 14537  079E  120D               	bcf	13,4	;volatile
 14538                           
 14539                           ;Dimmer_B1.c: 981: }
 14540  079F  2FA7               	goto	l9964
 14541  07A0                     l9960:	
 14542                           
 14543                           ;Dimmer_B1.c: 984: else if (lights == 2) {
 14544  07A0  0021               	movlb	1	; select bank1
 14545  07A1  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14546  07A2  3A02               	xorlw	2
 14547  07A3  1D03               	skipz
 14548  07A4  2FA7               	goto	l9964
 14549                           
 14550                           ;Dimmer_B1.c: 985: RA7 = 0;
 14551  07A5  0020               	movlb	0	; select bank0
 14552  07A6  138C               	bcf	12,7	;volatile
 14553  07A7                     l9964:	
 14554                           
 14555                           ;Dimmer_B1.c: 986: }
 14556                           ;Dimmer_B1.c: 992: }
 14557                           ;Dimmer_B1.c: 994: setDimmerLights_DimmingClose();
 14558  07A7  31A7  2764  3187   	fcall	_setDimmerLights_DimmingClose
 14559                           
 14560                           ;Dimmer_B1.c: 996: setRF_DimmerLights(lights, command);
 14561  07AA  0020               	movlb	0	; select bank0
 14562  07AB  086D               	movf	setDimmerLights_OnOff@command,w
 14563  07AC  00EE               	movwf	??_setDimmerLights_OnOff
 14564  07AD  086E               	movf	??_setDimmerLights_OnOff,w
 14565  07AE  00E5               	movwf	setRF_DimmerLights@on
 14566  07AF  0021               	movlb	1	; select bank1
 14567  07B0  0865               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14568  07B1  3195  2511  3187   	fcall	_setRF_DimmerLights
 14569                           
 14570                           ;Dimmer_B1.c: 998: if (getCmd_Status(1) == 1) {
 14571  07B4  3001               	movlw	1
 14572  07B5  3198  20A1  3187   	fcall	_getCmd_Status
 14573  07B8  3A01               	xorlw	1
 14574  07B9  1D03               	skipz
 14575  07BA  2FD6               	goto	l9980
 14576                           
 14577                           ;Dimmer_B1.c: 999: if (getMain_All_LightsStatus() == 0) {
 14578  07BB  3199  2133  3187   	fcall	_getMain_All_LightsStatus
 14579  07BE  3800               	iorlw	0
 14580  07BF  1D03               	skipz
 14581  07C0  0008               	return
 14582                           
 14583                           ;Dimmer_B1.c: 1000: setCmd_Status(1, 0);
 14584  07C1  0020               	movlb	0	; select bank0
 14585  07C2  01A0               	clrf	setCmd_Status@cmd
 14586  07C3  3001               	movlw	1
 14587  07C4  319A  2289  3187   	fcall	_setCmd_Status
 14588                           
 14589                           ;Dimmer_B1.c: 1001: setProductData(11, 0);
 14590  07C7  0020               	movlb	0	; select bank0
 14591  07C8  01E2               	clrf	setProductData@value
 14592  07C9  300B               	movlw	11
 14593  07CA  31A7  2758  3187   	fcall	_setProductData
 14594                           
 14595                           ;Dimmer_B1.c: 1002: setProductData(17, 0);
 14596  07CD  0020               	movlb	0	; select bank0
 14597  07CE  01E2               	clrf	setProductData@value
 14598  07CF  3011               	movlw	17
 14599  07D0  31A7  2758  3187   	fcall	_setProductData
 14600                           
 14601                           ;Dimmer_B1.c: 1003: setTxData();
 14602  07D3  318E  267B         	fcall	_setTxData
 14603                           
 14604                           ;Dimmer_B1.c: 1004: }
 14605                           ;Dimmer_B1.c: 1005: } else {
 14606  07D5  0008               	return
 14607  07D6                     l9980:	
 14608                           
 14609                           ;Dimmer_B1.c: 1006: setTxData();
 14610  07D6  318E  267B         	fcall	_setTxData
 14611  07D8  0008               	return
 14612  07D9                     __end_of_setDimmerLights_OnOff:	
 14613                           
 14614                           	psect	text91
 14615  11D9                     __ptext91:	
 14616 ;; *************** function _setLED *****************
 14617 ;; Defined at:
 14618 ;;		line 81 in file "../src/LED_B1.c"
 14619 ;; Parameters:    Size  Location     Type
 14620 ;;  led             1    wreg     unsigned char 
 14621 ;;  command         1    2[BANK0 ] unsigned char 
 14622 ;; Auto vars:     Size  Location     Type
 14623 ;;  led             1    3[BANK0 ] unsigned char 
 14624 ;; Return value:  Size  Location     Type
 14625 ;;		None               void
 14626 ;; Registers used:
 14627 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14628 ;; Tracked objects:
 14629 ;;		On entry : 0/0
 14630 ;;		On exit  : 0/0
 14631 ;;		Unchanged: 0/0
 14632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14633 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14634 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14636 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14637 ;;Total ram usage:        2 bytes
 14638 ;; Hardware stack levels used:    1
 14639 ;; Hardware stack levels required when called:    6
 14640 ;; This function calls:
 14641 ;;		_LedPointSelect
 14642 ;; This function is called by:
 14643 ;;		_setDimmerLights_OnOff
 14644 ;;		_setLED_Initialization
 14645 ;;		_setSw_Initialization
 14646 ;;		_Exception_Main
 14647 ;; This function uses a non-reentrant model
 14648 ;;
 14649                           
 14650                           
 14651                           ;psect for function _setLED
 14652  11D9                     _setLED:	
 14653                           
 14654                           ;incstack = 0
 14655                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14656                           ;setLED@led stored from wreg
 14657  11D9  0020               	movlb	0	; select bank0
 14658  11DA  00A3               	movwf	setLED@led
 14659                           
 14660                           ;LED_B1.c: 82: LedPointSelect(led);
 14661  11DB  0823               	movf	setLED@led,w
 14662  11DC  319B  23F4  3191   	fcall	_LedPointSelect
 14663                           
 14664                           ;LED_B1.c: 83: if (command == 0) {
 14665  11DF  0020               	movlb	0	; select bank0
 14666  11E0  08A2               	movf	setLED@command,f
 14667  11E1  1D03               	skipz
 14668  11E2  29F0               	goto	l9780
 14669                           
 14670                           ;LED_B1.c: 85: if (led == 1) {
 14671  11E3  0823               	movf	setLED@led,w
 14672  11E4  3A01               	xorlw	1
 14673  11E5  1D03               	skipz
 14674  11E6  29E8               	goto	l9772
 14675                           
 14676                           ;LED_B1.c: 89: RC7 = 1;
 14677  11E7  178E               	bsf	14,7	;volatile
 14678  11E8                     l9772:	
 14679                           
 14680                           ;LED_B1.c: 91: }
 14681                           ;LED_B1.c: 94: if (led == 2) {
 14682  11E8  0823               	movf	setLED@led,w
 14683  11E9  3A02               	xorlw	2
 14684  11EA  1903               	btfsc	3,2
 14685                           
 14686                           ;LED_B1.c: 98: RA3 = 1;
 14687  11EB  158C               	bsf	12,3	;volatile
 14688                           
 14689                           ;LED_B1.c: 100: }
 14690                           ;LED_B1.c: 112: if (led == 99) {
 14691  11EC  0823               	movf	setLED@led,w
 14692  11ED  3A63               	xorlw	99
 14693  11EE  1903               	btfsc	3,2
 14694                           
 14695                           ;LED_B1.c: 116: RB5 = 1;
 14696  11EF  168D               	bsf	13,5	;volatile
 14697  11F0                     l9780:	
 14698                           
 14699                           ;LED_B1.c: 118: }
 14700                           ;LED_B1.c: 120: }
 14701                           ;LED_B1.c: 121: if (command == 1) {
 14702  11F0  0822               	movf	setLED@command,w
 14703  11F1  3A01               	xorlw	1
 14704  11F2  1D03               	skipz
 14705  11F3  2A01               	goto	l9794
 14706                           
 14707                           ;LED_B1.c: 123: if (led == 1) {
 14708  11F4  0823               	movf	setLED@led,w
 14709  11F5  3A01               	xorlw	1
 14710  11F6  1D03               	skipz
 14711  11F7  29F9               	goto	l9786
 14712                           
 14713                           ;LED_B1.c: 127: RC7 = 0;
 14714  11F8  138E               	bcf	14,7	;volatile
 14715  11F9                     l9786:	
 14716                           
 14717                           ;LED_B1.c: 129: }
 14718                           ;LED_B1.c: 132: if (led == 2) {
 14719  11F9  0823               	movf	setLED@led,w
 14720  11FA  3A02               	xorlw	2
 14721  11FB  1903               	btfsc	3,2
 14722                           
 14723                           ;LED_B1.c: 136: RA3 = 0;
 14724  11FC  118C               	bcf	12,3	;volatile
 14725                           
 14726                           ;LED_B1.c: 138: }
 14727                           ;LED_B1.c: 150: if (led == 99) {
 14728  11FD  0823               	movf	setLED@led,w
 14729  11FE  3A63               	xorlw	99
 14730  11FF  1903               	btfsc	3,2
 14731                           
 14732                           ;LED_B1.c: 154: RB5 = 0;
 14733  1200  128D               	bcf	13,5	;volatile
 14734  1201                     l9794:	
 14735                           
 14736                           ;LED_B1.c: 156: }
 14737                           ;LED_B1.c: 158: }
 14738                           ;LED_B1.c: 159: if (command == 10) {
 14739  1201  0822               	movf	setLED@command,w
 14740  1202  3A0A               	xorlw	10
 14741  1203  1D03               	skipz
 14742  1204  2A21               	goto	l9810
 14743                           
 14744                           ;LED_B1.c: 160: LED->GO = 0;
 14745  1205  0021               	movlb	1	; select bank1
 14746  1206  085B               	movf	_LED^(0+128),w
 14747  1207  0086               	movwf	6
 14748  1208  3001               	movlw	1	; select bank2/3
 14749  1209  0087               	movwf	7
 14750  120A  1081               	bcf	1,1
 14751                           
 14752                           ;LED_B1.c: 161: LED->Time = 0;
 14753  120B  0A5B               	incf	_LED^(0+128),w
 14754  120C  0086               	movwf	6
 14755  120D  3001               	movlw	1	; select bank2/3
 14756  120E  0087               	movwf	7
 14757  120F  3000               	movlw	0
 14758  1210  3FC0               	movwi [0]fsr1
 14759  1211  3FC1               	movwi [1]fsr1
 14760                           
 14761                           ;LED_B1.c: 163: if (led == 1) {
 14762  1212  0020               	movlb	0	; select bank0
 14763  1213  0823               	movf	setLED@led,w
 14764  1214  3A01               	xorlw	1
 14765  1215  1D03               	skipz
 14766  1216  2A19               	goto	l9802
 14767                           
 14768                           ;LED_B1.c: 167: RC7 = 1;
 14769  1217  178E               	bsf	14,7	;volatile
 14770                           
 14771                           ;LED_B1.c: 169: }
 14772  1218  2A1D               	goto	l9806
 14773  1219                     l9802:	
 14774                           
 14775                           ;LED_B1.c: 172: else if (led == 2) {
 14776  1219  0823               	movf	setLED@led,w
 14777  121A  3A02               	xorlw	2
 14778  121B  1903               	btfsc	3,2
 14779                           
 14780                           ;LED_B1.c: 176: RA3 = 1;
 14781  121C  158C               	bsf	12,3	;volatile
 14782  121D                     l9806:	
 14783                           
 14784                           ;LED_B1.c: 178: }
 14785                           ;LED_B1.c: 190: if (led == 99) {
 14786  121D  0823               	movf	setLED@led,w
 14787  121E  3A63               	xorlw	99
 14788  121F  1903               	btfsc	3,2
 14789                           
 14790                           ;LED_B1.c: 194: RB5 = 1;
 14791  1220  168D               	bsf	13,5	;volatile
 14792  1221                     l9810:	
 14793                           
 14794                           ;LED_B1.c: 196: }
 14795                           ;LED_B1.c: 198: }
 14796                           ;LED_B1.c: 199: if (command == 11) {
 14797  1221  0822               	movf	setLED@command,w
 14798  1222  3A0B               	xorlw	11
 14799  1223  1D03               	skipz
 14800  1224  0008               	return
 14801                           
 14802                           ;LED_B1.c: 200: LED->GO = 1;
 14803  1225  0021               	movlb	1	; select bank1
 14804  1226  085B               	movf	_LED^(0+128),w
 14805  1227  0086               	movwf	6
 14806  1228  3001               	movlw	1	; select bank2/3
 14807  1229  0087               	movwf	7
 14808  122A  1481               	bsf	1,1
 14809  122B  0008               	return
 14810  122C                     __end_of_setLED:	
 14811                           
 14812                           	psect	text92
 14813  1BF4                     __ptext92:	
 14814 ;; *************** function _LedPointSelect *****************
 14815 ;; Defined at:
 14816 ;;		line 7 in file "../src/LED_B1.c"
 14817 ;; Parameters:    Size  Location     Type
 14818 ;;  led             1    wreg     unsigned char 
 14819 ;; Auto vars:     Size  Location     Type
 14820 ;;  led             1    1[BANK0 ] unsigned char 
 14821 ;; Return value:  Size  Location     Type
 14822 ;;		None               void
 14823 ;; Registers used:
 14824 ;;		wreg
 14825 ;; Tracked objects:
 14826 ;;		On entry : 0/0
 14827 ;;		On exit  : 0/0
 14828 ;;		Unchanged: 0/0
 14829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14831 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14832 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14833 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14834 ;;Total ram usage:        2 bytes
 14835 ;; Hardware stack levels used:    1
 14836 ;; Hardware stack levels required when called:    5
 14837 ;; This function calls:
 14838 ;;		Nothing
 14839 ;; This function is called by:
 14840 ;;		_setLED_Initialization
 14841 ;;		_setLED
 14842 ;;		_setLED_Main
 14843 ;; This function uses a non-reentrant model
 14844 ;;
 14845                           
 14846                           
 14847                           ;psect for function _LedPointSelect
 14848  1BF4                     _LedPointSelect:	
 14849                           
 14850                           ;incstack = 0
 14851                           ; Regs used in _LedPointSelect: [wreg]
 14852                           ;LedPointSelect@led stored from wreg
 14853  1BF4  0020               	movlb	0	; select bank0
 14854  1BF5  00A1               	movwf	LedPointSelect@led
 14855                           
 14856                           ;LED_B1.c: 9: if (led == 1) {
 14857  1BF6  0821               	movf	LedPointSelect@led,w
 14858  1BF7  3A01               	xorlw	1
 14859  1BF8  1D03               	skipz
 14860  1BF9  2BFF               	goto	l1153
 14861                           
 14862                           ;LED_B1.c: 10: LED = &VarLED1;
 14863  1BFA  30E5               	movlw	_VarLED1& (0+255)
 14864  1BFB  00A0               	movwf	??_LedPointSelect
 14865  1BFC  0820               	movf	??_LedPointSelect,w
 14866  1BFD  0021               	movlb	1	; select bank1
 14867  1BFE  00DB               	movwf	_LED^(0+128)
 14868  1BFF                     l1153:	
 14869                           
 14870                           ;LED_B1.c: 11: }
 14871                           ;LED_B1.c: 14: if (led == 2) {
 14872  1BFF  0020               	movlb	0	; select bank0
 14873  1C00  0821               	movf	LedPointSelect@led,w
 14874  1C01  3A02               	xorlw	2
 14875  1C02  1D03               	skipz
 14876  1C03  2C09               	goto	l1154
 14877                           
 14878                           ;LED_B1.c: 15: LED = &VarLED2;
 14879  1C04  30E9               	movlw	_VarLED2& (0+255)
 14880  1C05  00A0               	movwf	??_LedPointSelect
 14881  1C06  0820               	movf	??_LedPointSelect,w
 14882  1C07  0021               	movlb	1	; select bank1
 14883  1C08  00DB               	movwf	_LED^(0+128)
 14884  1C09                     l1154:	
 14885                           
 14886                           ;LED_B1.c: 16: }
 14887                           ;LED_B1.c: 24: if (led == 99) {
 14888  1C09  0020               	movlb	0	; select bank0
 14889  1C0A  0821               	movf	LedPointSelect@led,w
 14890  1C0B  3A63               	xorlw	99
 14891  1C0C  1D03               	skipz
 14892  1C0D  0008               	return
 14893                           
 14894                           ;LED_B1.c: 25: LED = &VarErrLED;
 14895  1C0E  30E1               	movlw	_VarErrLED& (0+255)
 14896  1C0F  00A0               	movwf	??_LedPointSelect
 14897  1C10  0820               	movf	??_LedPointSelect,w
 14898  1C11  0021               	movlb	1	; select bank1
 14899  1C12  00DB               	movwf	_LED^(0+128)
 14900  1C13  0008               	return
 14901  1C14                     __end_of_LedPointSelect:	
 14902                           
 14903                           	psect	text93
 14904  2764                     __ptext93:	
 14905 ;; *************** function _setDimmerLights_DimmingClose *****************
 14906 ;; Defined at:
 14907 ;;		line 1775 in file "../src/Dimmer_B1.c"
 14908 ;; Parameters:    Size  Location     Type
 14909 ;;		None
 14910 ;; Auto vars:     Size  Location     Type
 14911 ;;		None
 14912 ;; Return value:  Size  Location     Type
 14913 ;;		None               void
 14914 ;; Registers used:
 14915 ;;		wreg, status,2, status,0, pclath, cstack
 14916 ;; Tracked objects:
 14917 ;;		On entry : 0/0
 14918 ;;		On exit  : 0/0
 14919 ;;		Unchanged: 0/0
 14920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14922 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14924 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14925 ;;Total ram usage:        0 bytes
 14926 ;; Hardware stack levels used:    1
 14927 ;; Hardware stack levels required when called:    6
 14928 ;; This function calls:
 14929 ;;		_setDimmerIntr_Dimming_Sw
 14930 ;; This function is called by:
 14931 ;;		_setDimmerLights_OnOff
 14932 ;; This function uses a non-reentrant model
 14933 ;;
 14934                           
 14935                           
 14936                           ;psect for function _setDimmerLights_DimmingClose
 14937  2764                     _setDimmerLights_DimmingClose:	
 14938                           
 14939                           ;Dimmer_B1.c: 1777: setDimmerIntr_Dimming_Sw(1, 0);
 14940                           
 14941                           ;incstack = 0
 14942                           ; Regs used in _setDimmerLights_DimmingClose: [wreg+status,2+status,0+pclath+cstack]
 14943  2764  0020               	movlb	0	; select bank0
 14944  2765  01A0               	clrf	setDimmerIntr_Dimming_Sw@command
 14945  2766  3001               	movlw	1
 14946  2767  319D  25BE  31A7   	fcall	_setDimmerIntr_Dimming_Sw
 14947                           
 14948                           ;Dimmer_B1.c: 1781: setDimmerIntr_Dimming_Sw(2, 0);
 14949  276A  0020               	movlb	0	; select bank0
 14950  276B  01A0               	clrf	setDimmerIntr_Dimming_Sw@command
 14951  276C  3002               	movlw	2
 14952  276D  319D  25BE         	fcall	_setDimmerIntr_Dimming_Sw
 14953  276F  0008               	return
 14954  2770                     __end_of_setDimmerLights_DimmingClose:	
 14955                           
 14956                           	psect	text94
 14957  1E18                     __ptext94:	
 14958 ;; *************** function _setDimmerIntr_Dimming_RF *****************
 14959 ;; Defined at:
 14960 ;;		line 263 in file "../src/Dimmer_B1.c"
 14961 ;; Parameters:    Size  Location     Type
 14962 ;;  lights          1    wreg     unsigned char 
 14963 ;;  command         1    0[BANK0 ] unsigned char 
 14964 ;; Auto vars:     Size  Location     Type
 14965 ;;  lights          1    2[BANK0 ] unsigned char 
 14966 ;; Return value:  Size  Location     Type
 14967 ;;		None               void
 14968 ;; Registers used:
 14969 ;;		wreg, status,2, status,0
 14970 ;; Tracked objects:
 14971 ;;		On entry : 0/0
 14972 ;;		On exit  : 0/0
 14973 ;;		Unchanged: 0/0
 14974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14975 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14976 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14977 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14978 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14979 ;;Total ram usage:        3 bytes
 14980 ;; Hardware stack levels used:    1
 14981 ;; Hardware stack levels required when called:    5
 14982 ;; This function calls:
 14983 ;;		Nothing
 14984 ;; This function is called by:
 14985 ;;		_setDimmerLights_OnOff
 14986 ;;		_setRFSW_AdjControl
 14987 ;; This function uses a non-reentrant model
 14988 ;;
 14989                           
 14990                           
 14991                           ;psect for function _setDimmerIntr_Dimming_RF
 14992  1E18                     _setDimmerIntr_Dimming_RF:	
 14993                           
 14994                           ;incstack = 0
 14995                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
 14996                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
 14997  1E18  0020               	movlb	0	; select bank0
 14998  1E19  00A2               	movwf	setDimmerIntr_Dimming_RF@lights
 14999                           
 15000                           ;Dimmer_B1.c: 265: if (lights == 1) {
 15001  1E1A  0822               	movf	setDimmerIntr_Dimming_RF@lights,w
 15002  1E1B  3A01               	xorlw	1
 15003  1E1C  1D03               	skipz
 15004  1E1D  2E30               	goto	l7052
 15005                           
 15006                           ;Dimmer_B1.c: 266: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
 15007  1E1E  0820               	movf	setDimmerIntr_Dimming_RF@command,w
 15008  1E1F  3A01               	xorlw	1
 15009  1E20  3000               	movlw	0
 15010  1E21  1903               	skipnz
 15011  1E22  3001               	movlw	1
 15012  1E23  00A1               	movwf	??_setDimmerIntr_Dimming_RF
 15013  1E24  0EA1               	swapf	??_setDimmerIntr_Dimming_RF,f
 15014  1E25  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 15015  1E26  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 15016  1E27  0021               	movlb	1	; select bank1
 15017  1E28  083C               	movf	_DimmerIntr1^(0+128),w
 15018  1E29  0020               	movlb	0	; select bank0
 15019  1E2A  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 15020  1E2B  39BF               	andlw	-65
 15021  1E2C  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 15022  1E2D  0021               	movlb	1	; select bank1
 15023  1E2E  00BC               	movwf	_DimmerIntr1^(0+128)
 15024                           
 15025                           ;Dimmer_B1.c: 267: }
 15026  1E2F  0008               	return
 15027  1E30                     l7052:	
 15028                           
 15029                           ;Dimmer_B1.c: 270: else if (lights == 2) {
 15030  1E30  0020               	movlb	0	; select bank0
 15031  1E31  0822               	movf	setDimmerIntr_Dimming_RF@lights,w
 15032  1E32  3A02               	xorlw	2
 15033  1E33  1D03               	skipz
 15034  1E34  0008               	return
 15035                           
 15036                           ;Dimmer_B1.c: 271: DimmerIntr2.Dimming_RF = command == 1 ? 1 : 0;
 15037  1E35  0820               	movf	setDimmerIntr_Dimming_RF@command,w
 15038  1E36  3A01               	xorlw	1
 15039  1E37  3000               	movlw	0
 15040  1E38  1903               	skipnz
 15041  1E39  3001               	movlw	1
 15042  1E3A  00A1               	movwf	??_setDimmerIntr_Dimming_RF
 15043  1E3B  0EA1               	swapf	??_setDimmerIntr_Dimming_RF,f
 15044  1E3C  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 15045  1E3D  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 15046  1E3E  0021               	movlb	1	; select bank1
 15047  1E3F  0848               	movf	_DimmerIntr2^(0+128),w
 15048  1E40  0020               	movlb	0	; select bank0
 15049  1E41  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 15050  1E42  39BF               	andlw	-65
 15051  1E43  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 15052  1E44  0021               	movlb	1	; select bank1
 15053  1E45  00C8               	movwf	_DimmerIntr2^(0+128)
 15054  1E46  0008               	return
 15055  1E47                     __end_of_setDimmerIntr_Dimming_RF:	
 15056                           
 15057                           	psect	text95
 15058  1A42                     __ptext95:	
 15059 ;; *************** function _setDimmerIntr_DimmingValue *****************
 15060 ;; Defined at:
 15061 ;;		line 107 in file "../src/Dimmer_B1.c"
 15062 ;; Parameters:    Size  Location     Type
 15063 ;;  lights          1    wreg     unsigned char 
 15064 ;;  value           1   66[BANK0 ] unsigned char 
 15065 ;; Auto vars:     Size  Location     Type
 15066 ;;  lights          1   68[BANK0 ] unsigned char 
 15067 ;; Return value:  Size  Location     Type
 15068 ;;		None               void
 15069 ;; Registers used:
 15070 ;;		wreg
 15071 ;; Tracked objects:
 15072 ;;		On entry : 0/0
 15073 ;;		On exit  : 0/0
 15074 ;;		Unchanged: 0/0
 15075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15076 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15077 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15078 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15079 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15080 ;;Total ram usage:        3 bytes
 15081 ;; Hardware stack levels used:    1
 15082 ;; Hardware stack levels required when called:    5
 15083 ;; This function calls:
 15084 ;;		Nothing
 15085 ;; This function is called by:
 15086 ;;		_setDimmerLights_OnOff
 15087 ;; This function uses a non-reentrant model
 15088 ;;
 15089                           
 15090                           
 15091                           ;psect for function _setDimmerIntr_DimmingValue
 15092  1A42                     _setDimmerIntr_DimmingValue:	
 15093                           
 15094                           ;incstack = 0
 15095                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 15096                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 15097  1A42  0020               	movlb	0	; select bank0
 15098  1A43  00E4               	movwf	setDimmerIntr_DimmingValue@lights
 15099                           
 15100                           ;Dimmer_B1.c: 109: if (lights == 1) {
 15101  1A44  0864               	movf	setDimmerIntr_DimmingValue@lights,w
 15102  1A45  3A01               	xorlw	1
 15103  1A46  1D03               	skipz
 15104  1A47  2A4E               	goto	l7420
 15105                           
 15106                           ;Dimmer_B1.c: 110: DimmerIntr1.DimmingValue = value;
 15107  1A48  0862               	movf	setDimmerIntr_DimmingValue@value,w
 15108  1A49  00E3               	movwf	??_setDimmerIntr_DimmingValue
 15109  1A4A  0863               	movf	??_setDimmerIntr_DimmingValue,w
 15110  1A4B  0021               	movlb	1	; select bank1
 15111  1A4C  00C1               	movwf	(_DimmerIntr1^(0+128)+5)
 15112                           
 15113                           ;Dimmer_B1.c: 111: }
 15114  1A4D  0008               	return
 15115  1A4E                     l7420:	
 15116                           
 15117                           ;Dimmer_B1.c: 114: else if (lights == 2) {
 15118  1A4E  0020               	movlb	0	; select bank0
 15119  1A4F  0864               	movf	setDimmerIntr_DimmingValue@lights,w
 15120  1A50  3A02               	xorlw	2
 15121  1A51  1D03               	skipz
 15122  1A52  0008               	return
 15123                           
 15124                           ;Dimmer_B1.c: 115: DimmerIntr2.DimmingValue = value;
 15125  1A53  0862               	movf	setDimmerIntr_DimmingValue@value,w
 15126  1A54  00E3               	movwf	??_setDimmerIntr_DimmingValue
 15127  1A55  0863               	movf	??_setDimmerIntr_DimmingValue,w
 15128  1A56  0021               	movlb	1	; select bank1
 15129  1A57  00CD               	movwf	(_DimmerIntr2^(0+128)+5)
 15130  1A58  0008               	return
 15131  1A59                     __end_of_setDimmerIntr_DimmingValue:	
 15132                           
 15133                           	psect	text96
 15134  1DE9                     __ptext96:	
 15135 ;; *************** function _setDimmerIntr_ControlStatus *****************
 15136 ;; Defined at:
 15137 ;;		line 89 in file "../src/Dimmer_B1.c"
 15138 ;; Parameters:    Size  Location     Type
 15139 ;;  lights          1    wreg     unsigned char 
 15140 ;;  command         1    0[BANK0 ] unsigned char 
 15141 ;; Auto vars:     Size  Location     Type
 15142 ;;  lights          1    2[BANK0 ] unsigned char 
 15143 ;; Return value:  Size  Location     Type
 15144 ;;		None               void
 15145 ;; Registers used:
 15146 ;;		wreg, status,2, status,0
 15147 ;; Tracked objects:
 15148 ;;		On entry : 0/0
 15149 ;;		On exit  : 0/0
 15150 ;;		Unchanged: 0/0
 15151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15152 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15153 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15154 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15155 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15156 ;;Total ram usage:        3 bytes
 15157 ;; Hardware stack levels used:    1
 15158 ;; Hardware stack levels required when called:    5
 15159 ;; This function calls:
 15160 ;;		Nothing
 15161 ;; This function is called by:
 15162 ;;		_setDimmerLights_OnOff
 15163 ;; This function uses a non-reentrant model
 15164 ;;
 15165                           
 15166                           
 15167                           ;psect for function _setDimmerIntr_ControlStatus
 15168  1DE9                     _setDimmerIntr_ControlStatus:	
 15169                           
 15170                           ;incstack = 0
 15171                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 15172                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 15173  1DE9  0020               	movlb	0	; select bank0
 15174  1DEA  00A2               	movwf	setDimmerIntr_ControlStatus@lights
 15175                           
 15176                           ;Dimmer_B1.c: 91: if (lights == 1) {
 15177  1DEB  0822               	movf	setDimmerIntr_ControlStatus@lights,w
 15178  1DEC  3A01               	xorlw	1
 15179  1DED  1D03               	skipz
 15180  1DEE  2E01               	goto	l7412
 15181                           
 15182                           ;Dimmer_B1.c: 92: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 15183  1DEF  0820               	movf	setDimmerIntr_ControlStatus@command,w
 15184  1DF0  3A01               	xorlw	1
 15185  1DF1  3000               	movlw	0
 15186  1DF2  1903               	skipnz
 15187  1DF3  3001               	movlw	1
 15188  1DF4  00A1               	movwf	??_setDimmerIntr_ControlStatus
 15189  1DF5  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 15190  1DF6  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 15191  1DF7  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 15192  1DF8  0021               	movlb	1	; select bank1
 15193  1DF9  083C               	movf	_DimmerIntr1^(0+128),w
 15194  1DFA  0020               	movlb	0	; select bank0
 15195  1DFB  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 15196  1DFC  39F7               	andlw	-9
 15197  1DFD  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 15198  1DFE  0021               	movlb	1	; select bank1
 15199  1DFF  00BC               	movwf	_DimmerIntr1^(0+128)
 15200                           
 15201                           ;Dimmer_B1.c: 93: }
 15202  1E00  0008               	return
 15203  1E01                     l7412:	
 15204                           
 15205                           ;Dimmer_B1.c: 96: else if (lights == 2) {
 15206  1E01  0020               	movlb	0	; select bank0
 15207  1E02  0822               	movf	setDimmerIntr_ControlStatus@lights,w
 15208  1E03  3A02               	xorlw	2
 15209  1E04  1D03               	skipz
 15210  1E05  0008               	return
 15211                           
 15212                           ;Dimmer_B1.c: 97: DimmerIntr2.ControlStatus = command == 1 ? 1 : 0;
 15213  1E06  0820               	movf	setDimmerIntr_ControlStatus@command,w
 15214  1E07  3A01               	xorlw	1
 15215  1E08  3000               	movlw	0
 15216  1E09  1903               	skipnz
 15217  1E0A  3001               	movlw	1
 15218  1E0B  00A1               	movwf	??_setDimmerIntr_ControlStatus
 15219  1E0C  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 15220  1E0D  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 15221  1E0E  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 15222  1E0F  0021               	movlb	1	; select bank1
 15223  1E10  0848               	movf	_DimmerIntr2^(0+128),w
 15224  1E11  0020               	movlb	0	; select bank0
 15225  1E12  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 15226  1E13  39F7               	andlw	-9
 15227  1E14  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 15228  1E15  0021               	movlb	1	; select bank1
 15229  1E16  00C8               	movwf	_DimmerIntr2^(0+128)
 15230  1E17  0008               	return
 15231  1E18                     __end_of_setDimmerIntr_ControlStatus:	
 15232                           
 15233                           	psect	text97
 15234  0AB4                     __ptext97:	
 15235 ;; *************** function _setDelayOff_GO *****************
 15236 ;; Defined at:
 15237 ;;		line 87 in file "../src/DelayOff_B1.c"
 15238 ;; Parameters:    Size  Location     Type
 15239 ;;  sw              1    wreg     unsigned char 
 15240 ;;  command         1   69[BANK0 ] unsigned char 
 15241 ;;  value           1   70[BANK0 ] unsigned char 
 15242 ;; Auto vars:     Size  Location     Type
 15243 ;;  sw              1   76[BANK0 ] unsigned char 
 15244 ;;  k               1   75[BANK0 ] unsigned char 
 15245 ;;  j               1   74[BANK0 ] unsigned char 
 15246 ;;  i               1   73[BANK0 ] unsigned char 
 15247 ;; Return value:  Size  Location     Type
 15248 ;;		None               void
 15249 ;; Registers used:
 15250 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15251 ;; Tracked objects:
 15252 ;;		On entry : 0/0
 15253 ;;		On exit  : 0/0
 15254 ;;		Unchanged: 0/0
 15255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15256 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15257 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15258 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15259 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15260 ;;Total ram usage:        8 bytes
 15261 ;; Hardware stack levels used:    1
 15262 ;; Hardware stack levels required when called:    6
 15263 ;; This function calls:
 15264 ;;		_DelayOffPointSelect
 15265 ;;		___bmul
 15266 ;;		_setProductData
 15267 ;; This function is called by:
 15268 ;;		_setDimmerLights_OnOff
 15269 ;;		_setRFSW_Control
 15270 ;; This function uses a non-reentrant model
 15271 ;;
 15272                           
 15273                           
 15274                           ;psect for function _setDelayOff_GO
 15275  0AB4                     _setDelayOff_GO:	
 15276                           
 15277                           ;incstack = 0
 15278                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15279                           ;setDelayOff_GO@sw stored from wreg
 15280  0AB4  0020               	movlb	0	; select bank0
 15281  0AB5  00EC               	movwf	setDelayOff_GO@sw
 15282                           
 15283                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 15284  0AB6  086C               	movf	setDelayOff_GO@sw,w
 15285  0AB7  3199  21FD  318A   	fcall	_DelayOffPointSelect
 15286                           
 15287                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 15288  0ABA  0020               	movlb	0	; select bank0
 15289  0ABB  0865               	movf	setDelayOff_GO@command,w
 15290  0ABC  3A01               	xorlw	1
 15291  0ABD  3000               	movlw	0
 15292  0ABE  1903               	skipnz
 15293  0ABF  3001               	movlw	1
 15294  0AC0  00E7               	movwf	??_setDelayOff_GO
 15295  0AC1  0021               	movlb	1	; select bank1
 15296  0AC2  0858               	movf	_DelayOff^(0+128),w
 15297  0AC3  0086               	movwf	6
 15298  0AC4  3001               	movlw	1	; select bank2/3
 15299  0AC5  0087               	movwf	7
 15300  0AC6  0020               	movlb	0	; select bank0
 15301  0AC7  0DE7               	rlf	??_setDelayOff_GO,f
 15302  0AC8  0801               	movf	1,w
 15303  0AC9  0667               	xorwf	??_setDelayOff_GO,w
 15304  0ACA  39FD               	andlw	-3
 15305  0ACB  0667               	xorwf	??_setDelayOff_GO,w
 15306  0ACC  0081               	movwf	1
 15307                           
 15308                           ;DelayOff_B1.c: 91: DelayOff->SecondTime = 0;
 15309  0ACD  0021               	movlb	1	; select bank1
 15310  0ACE  0858               	movf	_DelayOff^(0+128),w
 15311  0ACF  3E02               	addlw	2
 15312  0AD0  0086               	movwf	6
 15313  0AD1  3001               	movlw	1	; select bank2/3
 15314  0AD2  0087               	movwf	7
 15315  0AD3  3000               	movlw	0
 15316  0AD4  3FC0               	movwi [0]fsr1
 15317  0AD5  3FC1               	movwi [1]fsr1
 15318                           
 15319                           ;DelayOff_B1.c: 92: DelayOff->MinuteTime = 0;
 15320  0AD6  0858               	movf	_DelayOff^(0+128),w
 15321  0AD7  3E04               	addlw	4
 15322  0AD8  0086               	movwf	6
 15323  0AD9  3001               	movlw	1	; select bank2/3
 15324  0ADA  0087               	movwf	7
 15325  0ADB  0181               	clrf	1
 15326                           
 15327                           ;DelayOff_B1.c: 94: if (command == 1) {
 15328  0ADC  0020               	movlb	0	; select bank0
 15329  0ADD  0865               	movf	setDelayOff_GO@command,w
 15330  0ADE  3A01               	xorlw	1
 15331  0ADF  1D03               	skipz
 15332  0AE0  2B36               	goto	l7024
 15333                           
 15334                           ;DelayOff_B1.c: 96: char i = 5, j = 0, k = 0;
 15335  0AE1  3005               	movlw	5
 15336  0AE2  00E7               	movwf	??_setDelayOff_GO
 15337  0AE3  0867               	movf	??_setDelayOff_GO,w
 15338  0AE4  00E9               	movwf	setDelayOff_GO@i
 15339  0AE5  01EA               	clrf	setDelayOff_GO@j
 15340  0AE6  01EB               	clrf	setDelayOff_GO@k
 15341                           
 15342                           ;DelayOff_B1.c: 97: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x30) {
 15343  0AE7  300F               	movlw	15
 15344  0AE8  0566               	andwf	setDelayOff_GO@value,w
 15345  0AE9  00E7               	movwf	??_setDelayOff_GO
 15346  0AEA  0867               	movf	??_setDelayOff_GO,w
 15347  0AEB  3A05               	xorlw	5
 15348  0AEC  1903               	skipnz
 15349  0AED  2AF2               	goto	l7010
 15350  0AEE  0866               	movf	setDelayOff_GO@value,w
 15351  0AEF  390F               	andlw	15
 15352  0AF0  1D03               	btfss	3,2
 15353  0AF1  2B22               	goto	l7020
 15354  0AF2                     l7010:	
 15355  0AF2  3031               	movlw	49
 15356  0AF3  0266               	subwf	setDelayOff_GO@value,w
 15357  0AF4  1803               	skipnc
 15358  0AF5  2B22               	goto	l7020
 15359                           
 15360                           ;DelayOff_B1.c: 98: j = value & 0x0f;
 15361  0AF6  0866               	movf	setDelayOff_GO@value,w
 15362  0AF7  390F               	andlw	15
 15363  0AF8  00E7               	movwf	??_setDelayOff_GO
 15364  0AF9  0867               	movf	??_setDelayOff_GO,w
 15365  0AFA  00EA               	movwf	setDelayOff_GO@j
 15366                           
 15367                           ;DelayOff_B1.c: 99: k = (value >> 4) & 0x0f;
 15368  0AFB  0866               	movf	setDelayOff_GO@value,w
 15369  0AFC  00E7               	movwf	??_setDelayOff_GO
 15370  0AFD  3004               	movlw	4
 15371  0AFE                     u6385:	
 15372  0AFE  36E7               	lsrf	??_setDelayOff_GO,f
 15373  0AFF  0B89               	decfsz	9,f
 15374  0B00  2AFE               	goto	u6385
 15375  0B01  0867               	movf	??_setDelayOff_GO,w
 15376  0B02  390F               	andlw	15
 15377  0B03  00E8               	movwf	??_setDelayOff_GO+1
 15378  0B04  0868               	movf	??_setDelayOff_GO+1,w
 15379  0B05  00EB               	movwf	setDelayOff_GO@k
 15380                           
 15381                           ;DelayOff_B1.c: 100: DelayOff->Value = j + (k * 10);
 15382  0B06  300A               	movlw	10
 15383  0B07  00E7               	movwf	??_setDelayOff_GO
 15384  0B08  0867               	movf	??_setDelayOff_GO,w
 15385  0B09  00A0               	movwf	___bmul@multiplicand
 15386  0B0A  086B               	movf	setDelayOff_GO@k,w
 15387  0B0B  3198  20B3  318A   	fcall	___bmul
 15388  0B0E  0020               	movlb	0	; select bank0
 15389  0B0F  076A               	addwf	setDelayOff_GO@j,w
 15390  0B10  00E8               	movwf	??_setDelayOff_GO+1
 15391  0B11  0021               	movlb	1	; select bank1
 15392  0B12  0A58               	incf	_DelayOff^(0+128),w
 15393  0B13  0086               	movwf	6
 15394  0B14  3001               	movlw	1	; select bank2/3
 15395  0B15  0087               	movwf	7
 15396  0B16  0020               	movlb	0	; select bank0
 15397  0B17  0868               	movf	??_setDelayOff_GO+1,w
 15398  0B18  0081               	movwf	1
 15399                           
 15400                           ;DelayOff_B1.c: 102: setProductData(26 + sw, value);
 15401  0B19  0866               	movf	setDelayOff_GO@value,w
 15402  0B1A  00E7               	movwf	??_setDelayOff_GO
 15403  0B1B  0867               	movf	??_setDelayOff_GO,w
 15404  0B1C  00E2               	movwf	setProductData@value
 15405  0B1D  086C               	movf	setDelayOff_GO@sw,w
 15406  0B1E  3E1A               	addlw	26
 15407  0B1F  31A7  2758         	fcall	_setProductData
 15408                           
 15409                           ;DelayOff_B1.c: 103: } else {
 15410  0B21  0008               	return
 15411  0B22                     l7020:	
 15412                           
 15413                           ;DelayOff_B1.c: 104: DelayOff->Value = 0x05;
 15414  0B22  3005               	movlw	5
 15415  0B23  0020               	movlb	0	; select bank0
 15416  0B24  00E7               	movwf	??_setDelayOff_GO
 15417  0B25  0021               	movlb	1	; select bank1
 15418  0B26  0A58               	incf	_DelayOff^(0+128),w
 15419  0B27  0086               	movwf	6
 15420  0B28  3001               	movlw	1	; select bank2/3
 15421  0B29  0087               	movwf	7
 15422  0B2A  0020               	movlb	0	; select bank0
 15423  0B2B  0867               	movf	??_setDelayOff_GO,w
 15424  0B2C  0081               	movwf	1
 15425                           
 15426                           ;DelayOff_B1.c: 105: setProductData(26 + sw, 0x05);
 15427  0B2D  3005               	movlw	5
 15428  0B2E  00E7               	movwf	??_setDelayOff_GO
 15429  0B2F  0867               	movf	??_setDelayOff_GO,w
 15430  0B30  00E2               	movwf	setProductData@value
 15431  0B31  086C               	movf	setDelayOff_GO@sw,w
 15432  0B32  3E1A               	addlw	26
 15433  0B33  31A7  2758         	fcall	_setProductData
 15434                           
 15435                           ;DelayOff_B1.c: 106: }
 15436                           ;DelayOff_B1.c: 108: } else if (command == 0) {
 15437  0B35  0008               	return
 15438  0B36                     l7024:	
 15439  0B36  0020               	movlb	0	; select bank0
 15440  0B37  08E5               	movf	setDelayOff_GO@command,f
 15441  0B38  1D03               	skipz
 15442  0B39  0008               	return
 15443                           
 15444                           ;DelayOff_B1.c: 109: setProductData(26 + sw, 0);
 15445  0B3A  01E2               	clrf	setProductData@value
 15446  0B3B  086C               	movf	setDelayOff_GO@sw,w
 15447  0B3C  3E1A               	addlw	26
 15448  0B3D  31A7  2758         	fcall	_setProductData
 15449  0B3F  0008               	return
 15450  0B40                     __end_of_setDelayOff_GO:	
 15451                           
 15452                           	psect	text98
 15453  18B3                     __ptext98:	
 15454 ;; *************** function ___bmul *****************
 15455 ;; Defined at:
 15456 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 15457 ;; Parameters:    Size  Location     Type
 15458 ;;  multiplier      1    wreg     unsigned char 
 15459 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 15460 ;; Auto vars:     Size  Location     Type
 15461 ;;  multiplier      1    3[BANK0 ] unsigned char 
 15462 ;;  product         1    2[BANK0 ] unsigned char 
 15463 ;; Return value:  Size  Location     Type
 15464 ;;                  1    wreg      unsigned char 
 15465 ;; Registers used:
 15466 ;;		wreg, status,2, status,0
 15467 ;; Tracked objects:
 15468 ;;		On entry : 0/0
 15469 ;;		On exit  : 0/0
 15470 ;;		Unchanged: 0/0
 15471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15472 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15473 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15474 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15475 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15476 ;;Total ram usage:        4 bytes
 15477 ;; Hardware stack levels used:    1
 15478 ;; Hardware stack levels required when called:    5
 15479 ;; This function calls:
 15480 ;;		Nothing
 15481 ;; This function is called by:
 15482 ;;		_setDelayOff_GO
 15483 ;;		_DelayTimejudge
 15484 ;; This function uses a non-reentrant model
 15485 ;;
 15486                           
 15487                           
 15488                           ;psect for function ___bmul
 15489  18B3                     ___bmul:	
 15490                           
 15491                           ;incstack = 0
 15492                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 15493                           ;___bmul@multiplier stored from wreg
 15494  18B3  0020               	movlb	0	; select bank0
 15495  18B4  00A3               	movwf	___bmul@multiplier
 15496  18B5  01A2               	clrf	___bmul@product
 15497  18B6                     l6660:	
 15498  18B6  1C23               	btfss	___bmul@multiplier,0
 15499  18B7  28BC               	goto	l6664
 15500  18B8  0820               	movf	___bmul@multiplicand,w
 15501  18B9  00A1               	movwf	??___bmul
 15502  18BA  0821               	movf	??___bmul,w
 15503  18BB  07A2               	addwf	___bmul@product,f
 15504  18BC                     l6664:	
 15505  18BC  1003               	clrc
 15506  18BD  0DA0               	rlf	___bmul@multiplicand,f
 15507  18BE  1003               	clrc
 15508  18BF  0CA3               	rrf	___bmul@multiplier,f
 15509  18C0  08A3               	movf	___bmul@multiplier,f
 15510  18C1  1D03               	skipz
 15511  18C2  28B6               	goto	l6660
 15512  18C3  0822               	movf	___bmul@product,w
 15513  18C4  0008               	return
 15514  18C5                     __end_of___bmul:	
 15515                           
 15516                           	psect	text99
 15517  1A89                     __ptext99:	
 15518 ;; *************** function _setCmd_Status *****************
 15519 ;; Defined at:
 15520 ;;		line 651 in file "../src/main_B1.c"
 15521 ;; Parameters:    Size  Location     Type
 15522 ;;  number          1    wreg     unsigned char 
 15523 ;;  cmd             1    0[BANK0 ] unsigned char 
 15524 ;; Auto vars:     Size  Location     Type
 15525 ;;  number          1    2[BANK0 ] unsigned char 
 15526 ;; Return value:  Size  Location     Type
 15527 ;;		None               void
 15528 ;; Registers used:
 15529 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15530 ;; Tracked objects:
 15531 ;;		On entry : 0/0
 15532 ;;		On exit  : 0/0
 15533 ;;		Unchanged: 0/0
 15534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15535 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15536 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15537 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15538 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15539 ;;Total ram usage:        3 bytes
 15540 ;; Hardware stack levels used:    1
 15541 ;; Hardware stack levels required when called:    5
 15542 ;; This function calls:
 15543 ;;		Nothing
 15544 ;; This function is called by:
 15545 ;;		_setDimmerLights_OnOff
 15546 ;;		_setControl_Lights_Table
 15547 ;; This function uses a non-reentrant model
 15548 ;;
 15549                           
 15550                           
 15551                           ;psect for function _setCmd_Status
 15552  1A89                     _setCmd_Status:	
 15553                           
 15554                           ;incstack = 0
 15555                           ; Regs used in _setCmd_Status: [wreg-fsr0h+status,2+status,0]
 15556                           ;setCmd_Status@number stored from wreg
 15557  1A89  0020               	movlb	0	; select bank0
 15558  1A8A  00A2               	movwf	setCmd_Status@number
 15559                           
 15560                           ;main_B1.c: 652: switch (number) {
 15561  1A8B  2A9B               	goto	l7212
 15562  1A8C                     l7208:	
 15563                           ;main_B1.c: 653: case 1:
 15564                           
 15565                           
 15566                           ;main_B1.c: 654: Cmd.all_off = cmd == 1 ? 1 : 0;
 15567  1A8C  0820               	movf	setCmd_Status@cmd,w
 15568  1A8D  3A01               	xorlw	1
 15569  1A8E  3000               	movlw	0
 15570  1A8F  1903               	skipnz
 15571  1A90  3001               	movlw	1
 15572  1A91  00A1               	movwf	??_setCmd_Status
 15573  1A92  0021               	movlb	1	; select bank1
 15574  1A93  0857               	movf	_Cmd^(0+128),w
 15575  1A94  0020               	movlb	0	; select bank0
 15576  1A95  0621               	xorwf	??_setCmd_Status,w
 15577  1A96  39FE               	andlw	-2
 15578  1A97  0621               	xorwf	??_setCmd_Status,w
 15579  1A98  0021               	movlb	1	; select bank1
 15580  1A99  00D7               	movwf	_Cmd^(0+128)
 15581                           
 15582                           ;main_B1.c: 656: }
 15583                           
 15584                           ;main_B1.c: 655: break;
 15585  1A9A  0008               	return
 15586  1A9B                     l7212:	
 15587  1A9B  0020               	movlb	0	; select bank0
 15588  1A9C  0822               	movf	setCmd_Status@number,w
 15589                           
 15590                           ; Switch size 1, requested type "space"
 15591                           ; Number of cases is 1, Range of values is 1 to 1
 15592                           ; switch strategies available:
 15593                           ; Name         Instructions Cycles
 15594                           ; simple_byte            4     3 (average)
 15595                           ; direct_byte           11     9 (fixed)
 15596                           ; jumptable            263     9 (fixed)
 15597                           ;	Chosen strategy is simple_byte
 15598  1A9D  3A01               	xorlw	1	; case 1
 15599  1A9E  1903               	skipnz
 15600  1A9F  2A8C               	goto	l7208
 15601  1AA0  2AA1               	goto	l2977
 15602  1AA1                     l2977:	
 15603  1AA1  0008               	return
 15604  1AA2                     __end_of_setCmd_Status:	
 15605                           
 15606                           	psect	text100
 15607  1933                     __ptext100:	
 15608 ;; *************** function _getMain_All_LightsStatus *****************
 15609 ;; Defined at:
 15610 ;;		line 373 in file "../src/main_B1.c"
 15611 ;; Parameters:    Size  Location     Type
 15612 ;;		None
 15613 ;; Auto vars:     Size  Location     Type
 15614 ;;  status          1    0[BANK0 ] unsigned char 
 15615 ;; Return value:  Size  Location     Type
 15616 ;;                  1    wreg      unsigned char 
 15617 ;; Registers used:
 15618 ;;		wreg, status,2, status,0
 15619 ;; Tracked objects:
 15620 ;;		On entry : 0/0
 15621 ;;		On exit  : 0/0
 15622 ;;		Unchanged: 0/0
 15623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15624 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15625 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15626 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15627 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15628 ;;Total ram usage:        1 bytes
 15629 ;; Hardware stack levels used:    1
 15630 ;; Hardware stack levels required when called:    5
 15631 ;; This function calls:
 15632 ;;		Nothing
 15633 ;; This function is called by:
 15634 ;;		_DimmerLights_Main
 15635 ;;		_setDimmerLights_Main
 15636 ;;		_setDimmerLights_OnOff
 15637 ;;		_Flash_Memory_Main
 15638 ;;		_Load_Main
 15639 ;;		_setTemp_Main
 15640 ;;		_setControl_Lights_Table
 15641 ;;		_Exception_Main
 15642 ;; This function uses a non-reentrant model
 15643 ;;
 15644                           
 15645                           
 15646                           ;psect for function _getMain_All_LightsStatus
 15647  1933                     _getMain_All_LightsStatus:	
 15648                           
 15649                           ;main_B1.c: 374: char status = 0;
 15650                           
 15651                           ;incstack = 0
 15652                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2+status,0]
 15653  1933  0020               	movlb	0	; select bank0
 15654  1934  01A0               	clrf	getMain_All_LightsStatus@status
 15655                           
 15656                           ;main_B1.c: 393: status = DimmerLights1.Status == 1 ? 1 : 0;
 15657  1935  3000               	movlw	0
 15658  1936  0023               	movlb	3	; select bank3
 15659  1937  1848               	btfsc	(_DimmerLights1^(0+384)+1),0
 15660  1938  3001               	movlw	1
 15661  1939  0020               	movlb	0	; select bank0
 15662  193A  00A0               	movwf	getMain_All_LightsStatus@status
 15663                           
 15664                           ;main_B1.c: 394: if (status == 0) {
 15665  193B  08A0               	movf	getMain_All_LightsStatus@status,f
 15666  193C  1D03               	skipz
 15667  193D  2944               	goto	l7202
 15668                           
 15669                           ;main_B1.c: 395: status = DimmerLights2.Status == 1 ? 1 : 0;
 15670  193E  3000               	movlw	0
 15671  193F  0023               	movlb	3	; select bank3
 15672  1940  1850               	btfsc	(_DimmerLights2^(0+384)+1),0
 15673  1941  3001               	movlw	1
 15674  1942  0020               	movlb	0	; select bank0
 15675  1943  00A0               	movwf	getMain_All_LightsStatus@status
 15676  1944                     l7202:	
 15677                           
 15678                           ;main_B1.c: 396: }
 15679                           ;main_B1.c: 420: return status;
 15680  1944  0820               	movf	getMain_All_LightsStatus@status,w
 15681  1945  0008               	return
 15682  1946                     __end_of_getMain_All_LightsStatus:	
 15683                           
 15684                           	psect	text101
 15685  186E                     __ptext101:	
 15686 ;; *************** function _getDelayOff_GO *****************
 15687 ;; Defined at:
 15688 ;;		line 114 in file "../src/DelayOff_B1.c"
 15689 ;; Parameters:    Size  Location     Type
 15690 ;;  sw              1    wreg     unsigned char 
 15691 ;; Auto vars:     Size  Location     Type
 15692 ;;  sw              1    2[BANK0 ] unsigned char 
 15693 ;;  go              1    3[BANK0 ] unsigned char 
 15694 ;; Return value:  Size  Location     Type
 15695 ;;                  1    wreg      unsigned char 
 15696 ;; Registers used:
 15697 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15698 ;; Tracked objects:
 15699 ;;		On entry : 0/0
 15700 ;;		On exit  : 0/0
 15701 ;;		Unchanged: 0/0
 15702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15703 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15704 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15705 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15706 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15707 ;;Total ram usage:        2 bytes
 15708 ;; Hardware stack levels used:    1
 15709 ;; Hardware stack levels required when called:    6
 15710 ;; This function calls:
 15711 ;;		_DelayOffPointSelect
 15712 ;; This function is called by:
 15713 ;;		_setDimmerLights_OnOff
 15714 ;; This function uses a non-reentrant model
 15715 ;;
 15716                           
 15717                           
 15718                           ;psect for function _getDelayOff_GO
 15719  186E                     _getDelayOff_GO:	
 15720                           
 15721                           ;incstack = 0
 15722                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15723                           ;getDelayOff_GO@sw stored from wreg
 15724  186E  0020               	movlb	0	; select bank0
 15725  186F  00A2               	movwf	getDelayOff_GO@sw
 15726                           
 15727                           ;DelayOff_B1.c: 115: DelayOffPointSelect(sw);
 15728  1870  0822               	movf	getDelayOff_GO@sw,w
 15729  1871  3199  21FD         	fcall	_DelayOffPointSelect
 15730                           
 15731                           ;DelayOff_B1.c: 116: char go = DelayOff->GO == 1 ? 1 : 0;
 15732  1873  0021               	movlb	1	; select bank1
 15733  1874  0858               	movf	_DelayOff^(0+128),w
 15734  1875  0086               	movwf	6
 15735  1876  3001               	movlw	1	; select bank2/3
 15736  1877  0087               	movwf	7
 15737  1878  3000               	movlw	0
 15738  1879  1881               	btfsc	1,1
 15739  187A  3001               	movlw	1
 15740  187B  0020               	movlb	0	; select bank0
 15741  187C  00A3               	movwf	getDelayOff_GO@go
 15742                           
 15743                           ;DelayOff_B1.c: 117: return go;
 15744  187D  0823               	movf	getDelayOff_GO@go,w
 15745  187E  0008               	return
 15746  187F                     __end_of_getDelayOff_GO:	
 15747                           
 15748                           	psect	text102
 15749  18A1                     __ptext102:	
 15750 ;; *************** function _getCmd_Status *****************
 15751 ;; Defined at:
 15752 ;;		line 659 in file "../src/main_B1.c"
 15753 ;; Parameters:    Size  Location     Type
 15754 ;;  number          1    wreg     unsigned char 
 15755 ;; Auto vars:     Size  Location     Type
 15756 ;;  number          1    0[BANK0 ] unsigned char 
 15757 ;;  cmd             1    1[BANK0 ] unsigned char 
 15758 ;; Return value:  Size  Location     Type
 15759 ;;                  1    wreg      unsigned char 
 15760 ;; Registers used:
 15761 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15762 ;; Tracked objects:
 15763 ;;		On entry : 0/0
 15764 ;;		On exit  : 0/0
 15765 ;;		Unchanged: 0/0
 15766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15768 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15770 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15771 ;;Total ram usage:        2 bytes
 15772 ;; Hardware stack levels used:    1
 15773 ;; Hardware stack levels required when called:    5
 15774 ;; This function calls:
 15775 ;;		Nothing
 15776 ;; This function is called by:
 15777 ;;		_setDimmerLights_OnOff
 15778 ;; This function uses a non-reentrant model
 15779 ;;
 15780                           
 15781                           
 15782                           ;psect for function _getCmd_Status
 15783  18A1                     _getCmd_Status:	
 15784                           
 15785                           ;incstack = 0
 15786                           ; Regs used in _getCmd_Status: [wreg-fsr0h+status,2+status,0]
 15787                           ;getCmd_Status@number stored from wreg
 15788  18A1  0020               	movlb	0	; select bank0
 15789  18A2  00A0               	movwf	getCmd_Status@number
 15790                           
 15791                           ;main_B1.c: 660: char cmd = 0;
 15792  18A3  01A1               	clrf	getCmd_Status@cmd
 15793                           
 15794                           ;main_B1.c: 661: switch (number) {
 15795  18A4  28AC               	goto	l7538
 15796  18A5                     l7534:	
 15797                           ;main_B1.c: 662: case 1:
 15798                           
 15799                           
 15800                           ;main_B1.c: 663: cmd = Cmd.all_off == 1 ? 1 : 0;
 15801  18A5  3000               	movlw	0
 15802  18A6  0021               	movlb	1	; select bank1
 15803  18A7  1857               	btfsc	_Cmd^(0+128),0
 15804  18A8  3001               	movlw	1
 15805  18A9  0020               	movlb	0	; select bank0
 15806  18AA  00A1               	movwf	getCmd_Status@cmd
 15807                           
 15808                           ;main_B1.c: 665: }
 15809                           
 15810                           ;main_B1.c: 664: break;
 15811  18AB  28B1               	goto	l7540
 15812  18AC                     l7538:	
 15813  18AC  0820               	movf	getCmd_Status@number,w
 15814                           
 15815                           ; Switch size 1, requested type "space"
 15816                           ; Number of cases is 1, Range of values is 1 to 1
 15817                           ; switch strategies available:
 15818                           ; Name         Instructions Cycles
 15819                           ; simple_byte            4     3 (average)
 15820                           ; direct_byte           11     9 (fixed)
 15821                           ; jumptable            263     9 (fixed)
 15822                           ;	Chosen strategy is simple_byte
 15823  18AD  3A01               	xorlw	1	; case 1
 15824  18AE  1903               	skipnz
 15825  18AF  28A5               	goto	l7534
 15826  18B0  28B1               	goto	l7540
 15827  18B1                     l7540:	
 15828                           
 15829                           ;main_B1.c: 666: return cmd;
 15830  18B1  0821               	movf	getCmd_Status@cmd,w
 15831  18B2  0008               	return
 15832  18B3                     __end_of_getCmd_Status:	
 15833                           
 15834                           	psect	text103
 15835  1280                     __ptext103:	
 15836 ;; *************** function _setDimmerLights_Dimming *****************
 15837 ;; Defined at:
 15838 ;;		line 1012 in file "../src/Dimmer_B1.c"
 15839 ;; Parameters:    Size  Location     Type
 15840 ;;  lights          1    wreg     unsigned char 
 15841 ;;  status          1   74[BANK0 ] unsigned char 
 15842 ;; Auto vars:     Size  Location     Type
 15843 ;;  lights          1   77[BANK0 ] unsigned char 
 15844 ;;  value           1   76[BANK0 ] unsigned char 
 15845 ;; Return value:  Size  Location     Type
 15846 ;;		None               void
 15847 ;; Registers used:
 15848 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15849 ;; Tracked objects:
 15850 ;;		On entry : 0/0
 15851 ;;		On exit  : 0/0
 15852 ;;		Unchanged: 0/0
 15853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15854 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15855 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15856 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15857 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15858 ;;Total ram usage:        4 bytes
 15859 ;; Hardware stack levels used:    1
 15860 ;; Hardware stack levels required when called:    8
 15861 ;; This function calls:
 15862 ;;		_getDimmerIntr_DimmingValue
 15863 ;;		_getDimmerLights_ValueToPercent
 15864 ;;		_setBuz
 15865 ;;		_setDimmerIntr_Dimming_Sw
 15866 ;;		_setDimmerIntr_MaxmumValue
 15867 ;;		_setDimmerLights_Line
 15868 ;;		_setMemory_Modify
 15869 ;;		_setProductData
 15870 ;;		_setRF_DimmerLights
 15871 ;;		_setRF_TransceiveGO
 15872 ;;		_setTxData
 15873 ;; This function is called by:
 15874 ;;		_setDimmerLights_Main
 15875 ;; This function uses a non-reentrant model
 15876 ;;
 15877                           
 15878                           
 15879                           ;psect for function _setDimmerLights_Dimming
 15880  1280                     _setDimmerLights_Dimming:	
 15881                           
 15882                           ;incstack = 0
 15883                           ; Regs used in _setDimmerLights_Dimming: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15884                           ;setDimmerLights_Dimming@lights stored from wreg
 15885  1280  0020               	movlb	0	; select bank0
 15886  1281  00ED               	movwf	setDimmerLights_Dimming@lights
 15887                           
 15888                           ;Dimmer_B1.c: 1013: setDimmerIntr_Dimming_Sw(lights, status);
 15889  1282  086A               	movf	setDimmerLights_Dimming@status,w
 15890  1283  00EB               	movwf	??_setDimmerLights_Dimming
 15891  1284  086B               	movf	??_setDimmerLights_Dimming,w
 15892  1285  00A0               	movwf	setDimmerIntr_Dimming_Sw@command
 15893  1286  086D               	movf	setDimmerLights_Dimming@lights,w
 15894  1287  319D  25BE  3192   	fcall	_setDimmerIntr_Dimming_Sw
 15895                           
 15896                           ;Dimmer_B1.c: 1014: if (status == 1) {
 15897  128A  0020               	movlb	0	; select bank0
 15898  128B  086A               	movf	setDimmerLights_Dimming@status,w
 15899  128C  3A01               	xorlw	1
 15900  128D  1D03               	skipz
 15901  128E  2A9C               	goto	l7878
 15902                           
 15903                           ;Dimmer_B1.c: 1016: setRF_TransceiveGO(0);
 15904  128F  3000               	movlw	0
 15905  1290  3199  2120  3192   	fcall	_setRF_TransceiveGO
 15906                           
 15907                           ;Dimmer_B1.c: 1018: setBuz(1, 100);
 15908  1293  3064               	movlw	100
 15909  1294  0020               	movlb	0	; select bank0
 15910  1295  00A9               	movwf	setBuz@time
 15911  1296  3000               	movlw	0
 15912  1297  00AA               	movwf	setBuz@time+1
 15913  1298  3001               	movlw	1
 15914  1299  3192  22D4         	fcall	_setBuz
 15915                           
 15916                           ;Dimmer_B1.c: 1019: } else if (status == 0) {
 15917  129B  0008               	return
 15918  129C                     l7878:	
 15919  129C  0020               	movlb	0	; select bank0
 15920  129D  08EA               	movf	setDimmerLights_Dimming@status,f
 15921  129E  1D03               	skipz
 15922  129F  0008               	return
 15923                           
 15924                           ;Dimmer_B1.c: 1022: Dimmer.Load_Status = 0;
 15925  12A0  0022               	movlb	2	; select bank2
 15926  12A1  112C               	bcf	_Dimmer^(0+256),2
 15927                           
 15928                           ;Dimmer_B1.c: 1023: setDimmerLights_Line(lights);
 15929  12A2  0020               	movlb	0	; select bank0
 15930  12A3  086D               	movf	setDimmerLights_Dimming@lights,w
 15931  12A4  319B  237A  3192   	fcall	_setDimmerLights_Line
 15932                           
 15933                           ;Dimmer_B1.c: 1025: char value = getDimmerIntr_DimmingValue(lights);
 15934  12A7  0020               	movlb	0	; select bank0
 15935  12A8  086D               	movf	setDimmerLights_Dimming@lights,w
 15936  12A9  3199  21E7  3192   	fcall	_getDimmerIntr_DimmingValue
 15937  12AC  0020               	movlb	0	; select bank0
 15938  12AD  00EB               	movwf	??_setDimmerLights_Dimming
 15939  12AE  086B               	movf	??_setDimmerLights_Dimming,w
 15940  12AF  00EC               	movwf	setDimmerLights_Dimming@value
 15941                           
 15942                           ;Dimmer_B1.c: 1026: setDimmerIntr_MaxmumValue(lights, value);
 15943  12B0  086C               	movf	setDimmerLights_Dimming@value,w
 15944  12B1  00EB               	movwf	??_setDimmerLights_Dimming
 15945  12B2  086B               	movf	??_setDimmerLights_Dimming,w
 15946  12B3  00E2               	movwf	setDimmerIntr_MaxmumValue@value
 15947  12B4  086D               	movf	setDimmerLights_Dimming@lights,w
 15948  12B5  319A  222B  3192   	fcall	_setDimmerIntr_MaxmumValue
 15949                           
 15950                           ;Dimmer_B1.c: 1027: setProductData((20 + lights), getDimmerLights_ValueToPercent(value))
      +                          ;
 15951  12B8  0020               	movlb	0	; select bank0
 15952  12B9  086C               	movf	setDimmerLights_Dimming@value,w
 15953  12BA  3194  24AC  3192   	fcall	_getDimmerLights_ValueToPercent
 15954  12BD  0020               	movlb	0	; select bank0
 15955  12BE  00EB               	movwf	??_setDimmerLights_Dimming
 15956  12BF  086B               	movf	??_setDimmerLights_Dimming,w
 15957  12C0  00E2               	movwf	setProductData@value
 15958  12C1  086D               	movf	setDimmerLights_Dimming@lights,w
 15959  12C2  3E14               	addlw	20
 15960  12C3  31A7  2758  3192   	fcall	_setProductData
 15961                           
 15962                           ;Dimmer_B1.c: 1034: setMemory_Modify(1);
 15963  12C6  3001               	movlw	1
 15964  12C7  3199  210D  3192   	fcall	_setMemory_Modify
 15965                           
 15966                           ;Dimmer_B1.c: 1038: setRF_DimmerLights(lights, 1);
 15967  12CA  0020               	movlb	0	; select bank0
 15968  12CB  01E5               	clrf	setRF_DimmerLights@on
 15969  12CC  0AE5               	incf	setRF_DimmerLights@on,f
 15970  12CD  086D               	movf	setDimmerLights_Dimming@lights,w
 15971  12CE  3195  2511  3192   	fcall	_setRF_DimmerLights
 15972                           
 15973                           ;Dimmer_B1.c: 1039: setTxData();
 15974  12D1  318E  267B         	fcall	_setTxData
 15975  12D3  0008               	return
 15976  12D4                     __end_of_setDimmerLights_Dimming:	
 15977                           
 15978                           	psect	text104
 15979  0E7B                     __ptext104:	
 15980 ;; *************** function _setTxData *****************
 15981 ;; Defined at:
 15982 ;;		line 183 in file "../src/RF_Control_B1.c"
 15983 ;; Parameters:    Size  Location     Type
 15984 ;;		None
 15985 ;; Auto vars:     Size  Location     Type
 15986 ;;  i               1    0        unsigned char 
 15987 ;; Return value:  Size  Location     Type
 15988 ;;		None               void
 15989 ;; Registers used:
 15990 ;;		wreg, fsr1l, fsr1h, status,2
 15991 ;; Tracked objects:
 15992 ;;		On entry : 0/0
 15993 ;;		On exit  : 0/0
 15994 ;;		Unchanged: 0/0
 15995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15998 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15999 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16000 ;;Total ram usage:        1 bytes
 16001 ;; Hardware stack levels used:    1
 16002 ;; Hardware stack levels required when called:    5
 16003 ;; This function calls:
 16004 ;;		Nothing
 16005 ;; This function is called by:
 16006 ;;		_setDimmerLights_OnOff
 16007 ;;		_setDimmerLights_Dimming
 16008 ;;		_getRxData
 16009 ;;		_setControl_Lights_Table
 16010 ;;		_setRFSW_Control
 16011 ;;		_setRFSW_AdjControl
 16012 ;; This function uses a non-reentrant model
 16013 ;;
 16014                           
 16015                           
 16016                           ;psect for function _setTxData
 16017  0E7B                     _setTxData:	
 16018                           
 16019                           ;RF_Control_B1.c: 184: char i;
 16020                           ;RF_Control_B1.c: 185: if (RF1.Enable == 1) {
 16021                           
 16022                           ;incstack = 0
 16023                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2]
 16024  0E7B  0021               	movlb	1	; select bank1
 16025  0E7C  1C20               	btfss	_RF1^(0+128),0
 16026  0E7D  0008               	return
 16027                           
 16028                           ;RF_Control_B1.c: 187: RF1.TransceiveGO = 1;
 16029  0E7E  1520               	bsf	_RF1^(0+128),2
 16030                           
 16031                           ;RF_Control_B1.c: 188: RF1.Count = 0;
 16032  0E7F  01A3               	clrf	(_RF1^(0+128)+3)
 16033  0E80  01A4               	clrf	((_RF1+1)^(0+128)+3)
 16034                           
 16035                           ;RF_Control_B1.c: 200: RF_Data[0] = 0x63;
 16036  0E81  3063               	movlw	99
 16037  0E82  0020               	movlb	0	; select bank0
 16038  0E83  00A0               	movwf	??_setTxData
 16039  0E84  0820               	movf	??_setTxData,w
 16040  0E85  0023               	movlb	3	; select bank3
 16041  0E86  00A0               	movwf	_RF_Data^(0+384)
 16042                           
 16043                           ;RF_Control_B1.c: 201: RF_Data[1] = 0x02;
 16044  0E87  3002               	movlw	2
 16045  0E88  0020               	movlb	0	; select bank0
 16046  0E89  00A0               	movwf	??_setTxData
 16047  0E8A  0820               	movf	??_setTxData,w
 16048  0E8B  0023               	movlb	3	; select bank3
 16049  0E8C  00A1               	movwf	(_RF_Data^(0+384)+1)
 16050                           
 16051                           ;RF_Control_B1.c: 203: RF_Data[2] = product->Data[2];
 16052  0E8D  0021               	movlb	1	; select bank1
 16053  0E8E  086E               	movf	_product^(0+128),w
 16054  0E8F  0086               	movwf	6
 16055  0E90  3002               	movlw	2	; select bank4/5
 16056  0E91  0087               	movwf	7
 16057  0E92  3002               	movlw	2	; select bank4/5
 16058  0E93  3F42               	moviw [2]fsr1
 16059  0E94  0023               	movlb	3	; select bank3
 16060  0E95  00A2               	movwf	(_RF_Data^(0+384)+2)
 16061                           
 16062                           ;RF_Control_B1.c: 204: RF_Data[3] = product->Data[3];
 16063  0E96  0021               	movlb	1	; select bank1
 16064  0E97  086E               	movf	_product^(0+128),w
 16065  0E98  0086               	movwf	6
 16066  0E99  3002               	movlw	2	; select bank4/5
 16067  0E9A  0087               	movwf	7
 16068  0E9B  3002               	movlw	2	; select bank4/5
 16069  0E9C  3F43               	moviw [3]fsr1
 16070  0E9D  0023               	movlb	3	; select bank3
 16071  0E9E  00A3               	movwf	(_RF_Data^(0+384)+3)
 16072                           
 16073                           ;RF_Control_B1.c: 205: RF_Data[4] = product->Data[4];
 16074  0E9F  0021               	movlb	1	; select bank1
 16075  0EA0  086E               	movf	_product^(0+128),w
 16076  0EA1  0086               	movwf	6
 16077  0EA2  3002               	movlw	2	; select bank4/5
 16078  0EA3  0087               	movwf	7
 16079  0EA4  3002               	movlw	2	; select bank4/5
 16080  0EA5  3F44               	moviw [4]fsr1
 16081  0EA6  0023               	movlb	3	; select bank3
 16082  0EA7  00A4               	movwf	(_RF_Data^(0+384)+4)
 16083                           
 16084                           ;RF_Control_B1.c: 206: RF_Data[5] = product->Data[5];
 16085  0EA8  0021               	movlb	1	; select bank1
 16086  0EA9  086E               	movf	_product^(0+128),w
 16087  0EAA  0086               	movwf	6
 16088  0EAB  3002               	movlw	2	; select bank4/5
 16089  0EAC  0087               	movwf	7
 16090  0EAD  3002               	movlw	2	; select bank4/5
 16091  0EAE  3F45               	moviw [5]fsr1
 16092  0EAF  0023               	movlb	3	; select bank3
 16093  0EB0  00A5               	movwf	(_RF_Data^(0+384)+5)
 16094                           
 16095                           ;RF_Control_B1.c: 207: RF_Data[6] = product->Data[6];
 16096  0EB1  0021               	movlb	1	; select bank1
 16097  0EB2  086E               	movf	_product^(0+128),w
 16098  0EB3  0086               	movwf	6
 16099  0EB4  3002               	movlw	2	; select bank4/5
 16100  0EB5  0087               	movwf	7
 16101  0EB6  3002               	movlw	2	; select bank4/5
 16102  0EB7  3F46               	moviw [6]fsr1
 16103  0EB8  0023               	movlb	3	; select bank3
 16104  0EB9  00A6               	movwf	(_RF_Data^(0+384)+6)
 16105                           
 16106                           ;RF_Control_B1.c: 208: RF_Data[7] = product->Data[7];
 16107  0EBA  0021               	movlb	1	; select bank1
 16108  0EBB  086E               	movf	_product^(0+128),w
 16109  0EBC  0086               	movwf	6
 16110  0EBD  3002               	movlw	2	; select bank4/5
 16111  0EBE  0087               	movwf	7
 16112  0EBF  3002               	movlw	2	; select bank4/5
 16113  0EC0  3F47               	moviw [7]fsr1
 16114  0EC1  0023               	movlb	3	; select bank3
 16115  0EC2  00A7               	movwf	(_RF_Data^(0+384)+7)
 16116                           
 16117                           ;RF_Control_B1.c: 209: RF_Data[8] = product->Data[8];
 16118  0EC3  0021               	movlb	1	; select bank1
 16119  0EC4  086E               	movf	_product^(0+128),w
 16120  0EC5  0086               	movwf	6
 16121  0EC6  3002               	movlw	2	; select bank4/5
 16122  0EC7  0087               	movwf	7
 16123  0EC8  3002               	movlw	2	; select bank4/5
 16124  0EC9  3F48               	moviw [8]fsr1
 16125  0ECA  0023               	movlb	3	; select bank3
 16126  0ECB  00A8               	movwf	(_RF_Data^(0+384)+8)
 16127                           
 16128                           ;RF_Control_B1.c: 210: RF_Data[9] = product->Data[9];
 16129  0ECC  0021               	movlb	1	; select bank1
 16130  0ECD  086E               	movf	_product^(0+128),w
 16131  0ECE  0086               	movwf	6
 16132  0ECF  3002               	movlw	2	; select bank4/5
 16133  0ED0  0087               	movwf	7
 16134  0ED1  3002               	movlw	2	; select bank4/5
 16135  0ED2  3F49               	moviw [9]fsr1
 16136  0ED3  0023               	movlb	3	; select bank3
 16137  0ED4  00A9               	movwf	(_RF_Data^(0+384)+9)
 16138                           
 16139                           ;RF_Control_B1.c: 211: RF_Data[10] = product->Data[10];
 16140  0ED5  0021               	movlb	1	; select bank1
 16141  0ED6  086E               	movf	_product^(0+128),w
 16142  0ED7  0086               	movwf	6
 16143  0ED8  3002               	movlw	2	; select bank4/5
 16144  0ED9  0087               	movwf	7
 16145  0EDA  3002               	movlw	2	; select bank4/5
 16146  0EDB  3F4A               	moviw [10]fsr1
 16147  0EDC  0023               	movlb	3	; select bank3
 16148  0EDD  00AA               	movwf	(_RF_Data^(0+384)+10)
 16149                           
 16150                           ;RF_Control_B1.c: 212: RF_Data[11] = product->Data[11];
 16151  0EDE  0021               	movlb	1	; select bank1
 16152  0EDF  086E               	movf	_product^(0+128),w
 16153  0EE0  0086               	movwf	6
 16154  0EE1  3002               	movlw	2	; select bank4/5
 16155  0EE2  0087               	movwf	7
 16156  0EE3  3002               	movlw	2	; select bank4/5
 16157  0EE4  3F4B               	moviw [11]fsr1
 16158  0EE5  0023               	movlb	3	; select bank3
 16159  0EE6  00AB               	movwf	(_RF_Data^(0+384)+11)
 16160                           
 16161                           ;RF_Control_B1.c: 213: RF_Data[12] = product->Data[12];
 16162  0EE7  0021               	movlb	1	; select bank1
 16163  0EE8  086E               	movf	_product^(0+128),w
 16164  0EE9  0086               	movwf	6
 16165  0EEA  3002               	movlw	2	; select bank4/5
 16166  0EEB  0087               	movwf	7
 16167  0EEC  3002               	movlw	2	; select bank4/5
 16168  0EED  3F4C               	moviw [12]fsr1
 16169  0EEE  0023               	movlb	3	; select bank3
 16170  0EEF  00AC               	movwf	(_RF_Data^(0+384)+12)
 16171                           
 16172                           ;RF_Control_B1.c: 214: RF_Data[13] = product->Data[13];
 16173  0EF0  0021               	movlb	1	; select bank1
 16174  0EF1  086E               	movf	_product^(0+128),w
 16175  0EF2  0086               	movwf	6
 16176  0EF3  3002               	movlw	2	; select bank4/5
 16177  0EF4  0087               	movwf	7
 16178  0EF5  3002               	movlw	2	; select bank4/5
 16179  0EF6  3F4D               	moviw [13]fsr1
 16180  0EF7  0023               	movlb	3	; select bank3
 16181  0EF8  00AD               	movwf	(_RF_Data^(0+384)+13)
 16182                           
 16183                           ;RF_Control_B1.c: 215: RF_Data[14] = product->Data[14];
 16184  0EF9  0021               	movlb	1	; select bank1
 16185  0EFA  086E               	movf	_product^(0+128),w
 16186  0EFB  0086               	movwf	6
 16187  0EFC  3002               	movlw	2	; select bank4/5
 16188  0EFD  0087               	movwf	7
 16189  0EFE  3002               	movlw	2	; select bank4/5
 16190  0EFF  3F4E               	moviw [14]fsr1
 16191  0F00  0023               	movlb	3	; select bank3
 16192  0F01  00AE               	movwf	(_RF_Data^(0+384)+14)
 16193                           
 16194                           ;RF_Control_B1.c: 216: RF_Data[15] = product->Data[15];
 16195  0F02  0021               	movlb	1	; select bank1
 16196  0F03  086E               	movf	_product^(0+128),w
 16197  0F04  0086               	movwf	6
 16198  0F05  3002               	movlw	2	; select bank4/5
 16199  0F06  0087               	movwf	7
 16200  0F07  3002               	movlw	2	; select bank4/5
 16201  0F08  3F4F               	moviw [15]fsr1
 16202  0F09  0023               	movlb	3	; select bank3
 16203  0F0A  00AF               	movwf	(_RF_Data^(0+384)+15)
 16204                           
 16205                           ;RF_Control_B1.c: 217: RF_Data[16] = product->Data[16];
 16206  0F0B  0021               	movlb	1	; select bank1
 16207  0F0C  086E               	movf	_product^(0+128),w
 16208  0F0D  0086               	movwf	6
 16209  0F0E  3002               	movlw	2	; select bank4/5
 16210  0F0F  0087               	movwf	7
 16211  0F10  3002               	movlw	2	; select bank4/5
 16212  0F11  3F50               	moviw [16]fsr1
 16213  0F12  0023               	movlb	3	; select bank3
 16214  0F13  00B0               	movwf	(_RF_Data^(0+384)+16)
 16215                           
 16216                           ;RF_Control_B1.c: 218: RF_Data[17] = product->Data[17];
 16217  0F14  0021               	movlb	1	; select bank1
 16218  0F15  086E               	movf	_product^(0+128),w
 16219  0F16  0086               	movwf	6
 16220  0F17  3002               	movlw	2	; select bank4/5
 16221  0F18  0087               	movwf	7
 16222  0F19  3002               	movlw	2	; select bank4/5
 16223  0F1A  3F51               	moviw [17]fsr1
 16224  0F1B  0023               	movlb	3	; select bank3
 16225  0F1C  00B1               	movwf	(_RF_Data^(0+384)+17)
 16226                           
 16227                           ;RF_Control_B1.c: 219: RF_Data[18] = product->Data[18];
 16228  0F1D  0021               	movlb	1	; select bank1
 16229  0F1E  086E               	movf	_product^(0+128),w
 16230  0F1F  0086               	movwf	6
 16231  0F20  3002               	movlw	2	; select bank4/5
 16232  0F21  0087               	movwf	7
 16233  0F22  3002               	movlw	2	; select bank4/5
 16234  0F23  3F52               	moviw [18]fsr1
 16235  0F24  0023               	movlb	3	; select bank3
 16236  0F25  00B2               	movwf	(_RF_Data^(0+384)+18)
 16237                           
 16238                           ;RF_Control_B1.c: 220: RF_Data[19] = product->Data[19];
 16239  0F26  0021               	movlb	1	; select bank1
 16240  0F27  086E               	movf	_product^(0+128),w
 16241  0F28  0086               	movwf	6
 16242  0F29  3002               	movlw	2	; select bank4/5
 16243  0F2A  0087               	movwf	7
 16244  0F2B  3002               	movlw	2	; select bank4/5
 16245  0F2C  3F53               	moviw [19]fsr1
 16246  0F2D  0023               	movlb	3	; select bank3
 16247  0F2E  00B3               	movwf	(_RF_Data^(0+384)+19)
 16248                           
 16249                           ;RF_Control_B1.c: 221: RF_Data[20] = 210;
 16250  0F2F  30D2               	movlw	210
 16251  0F30  0020               	movlb	0	; select bank0
 16252  0F31  00A0               	movwf	??_setTxData
 16253  0F32  0820               	movf	??_setTxData,w
 16254  0F33  0023               	movlb	3	; select bank3
 16255  0F34  00B4               	movwf	(_RF_Data^(0+384)+20)
 16256  0F35  0008               	return
 16257  0F36                     __end_of_setTxData:	
 16258                           
 16259                           	psect	text105
 16260  1920                     __ptext105:	
 16261 ;; *************** function _setRF_TransceiveGO *****************
 16262 ;; Defined at:
 16263 ;;		line 518 in file "../src/RF_Control_B1.c"
 16264 ;; Parameters:    Size  Location     Type
 16265 ;;  command         1    wreg     unsigned char 
 16266 ;; Auto vars:     Size  Location     Type
 16267 ;;  command         1    1[BANK0 ] unsigned char 
 16268 ;; Return value:  Size  Location     Type
 16269 ;;		None               void
 16270 ;; Registers used:
 16271 ;;		wreg, status,2, status,0
 16272 ;; Tracked objects:
 16273 ;;		On entry : 0/0
 16274 ;;		On exit  : 0/0
 16275 ;;		Unchanged: 0/0
 16276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16278 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16279 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16280 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16281 ;;Total ram usage:        2 bytes
 16282 ;; Hardware stack levels used:    1
 16283 ;; Hardware stack levels required when called:    5
 16284 ;; This function calls:
 16285 ;;		Nothing
 16286 ;; This function is called by:
 16287 ;;		_setDimmerLights_Dimming
 16288 ;; This function uses a non-reentrant model
 16289 ;;
 16290                           
 16291                           
 16292                           ;psect for function _setRF_TransceiveGO
 16293  1920                     _setRF_TransceiveGO:	
 16294                           
 16295                           ;incstack = 0
 16296                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 16297                           ;setRF_TransceiveGO@command stored from wreg
 16298  1920  0020               	movlb	0	; select bank0
 16299  1921  00A1               	movwf	setRF_TransceiveGO@command
 16300                           
 16301                           ;RF_Control_B1.c: 519: RF1.TransceiveGO = command == 1 ? 1 : 0;
 16302  1922  0821               	movf	setRF_TransceiveGO@command,w
 16303  1923  3A01               	xorlw	1
 16304  1924  3000               	movlw	0
 16305  1925  1903               	skipnz
 16306  1926  3001               	movlw	1
 16307  1927  00A0               	movwf	??_setRF_TransceiveGO
 16308  1928  0DA0               	rlf	??_setRF_TransceiveGO,f
 16309  1929  0DA0               	rlf	??_setRF_TransceiveGO,f
 16310  192A  0021               	movlb	1	; select bank1
 16311  192B  0820               	movf	_RF1^(0+128),w
 16312  192C  0020               	movlb	0	; select bank0
 16313  192D  0620               	xorwf	??_setRF_TransceiveGO,w
 16314  192E  39FB               	andlw	-5
 16315  192F  0620               	xorwf	??_setRF_TransceiveGO,w
 16316  1930  0021               	movlb	1	; select bank1
 16317  1931  00A0               	movwf	_RF1^(0+128)
 16318  1932  0008               	return
 16319  1933                     __end_of_setRF_TransceiveGO:	
 16320                           
 16321                           	psect	text106
 16322  1511                     __ptext106:	
 16323 ;; *************** function _setRF_DimmerLights *****************
 16324 ;; Defined at:
 16325 ;;		line 503 in file "../src/RF_Control_B1.c"
 16326 ;; Parameters:    Size  Location     Type
 16327 ;;  lights          1    wreg     unsigned char 
 16328 ;;  on              1   69[BANK0 ] unsigned char 
 16329 ;; Auto vars:     Size  Location     Type
 16330 ;;  lights          1   73[BANK0 ] unsigned char 
 16331 ;;  status          1   72[BANK0 ] unsigned char 
 16332 ;; Return value:  Size  Location     Type
 16333 ;;		None               void
 16334 ;; Registers used:
 16335 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16336 ;; Tracked objects:
 16337 ;;		On entry : 0/0
 16338 ;;		On exit  : 0/0
 16339 ;;		Unchanged: 0/0
 16340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16341 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16342 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16343 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16344 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16345 ;;Total ram usage:        5 bytes
 16346 ;; Hardware stack levels used:    1
 16347 ;; Hardware stack levels required when called:    6
 16348 ;; This function calls:
 16349 ;;		_setProductData
 16350 ;; This function is called by:
 16351 ;;		_setDimmerLights_OnOff
 16352 ;;		_setDimmerLights_Dimming
 16353 ;;		_setRFSW_Control
 16354 ;; This function uses a non-reentrant model
 16355 ;;
 16356                           
 16357                           
 16358                           ;psect for function _setRF_DimmerLights
 16359  1511                     _setRF_DimmerLights:	
 16360                           
 16361                           ;incstack = 0
 16362                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16363                           ;setRF_DimmerLights@lights stored from wreg
 16364  1511  0020               	movlb	0	; select bank0
 16365  1512  00E9               	movwf	setRF_DimmerLights@lights
 16366                           
 16367                           ;RF_Control_B1.c: 504: char status = 1;
 16368  1513  01E8               	clrf	setRF_DimmerLights@status
 16369  1514  0AE8               	incf	setRF_DimmerLights@status,f
 16370                           
 16371                           ;RF_Control_B1.c: 505: status <<= (lights - 1);
 16372  1515  0869               	movf	setRF_DimmerLights@lights,w
 16373  1516  3EFF               	addlw	-1
 16374  1517  0A89               	incf	9,f
 16375  1518  2D1B               	goto	u6440
 16376  1519                     u6445:	
 16377  1519  1003               	clrc
 16378  151A  0DE8               	rlf	setRF_DimmerLights@status,f
 16379  151B                     u6440:	
 16380  151B  3EFF               	addlw	-1
 16381  151C  1D03               	skipz
 16382  151D  2D19               	goto	u6445
 16383                           
 16384                           ;RF_Control_B1.c: 506: setProductData(11, lights);
 16385  151E  0869               	movf	setRF_DimmerLights@lights,w
 16386  151F  00E6               	movwf	??_setRF_DimmerLights
 16387  1520  0866               	movf	??_setRF_DimmerLights,w
 16388  1521  00E2               	movwf	setProductData@value
 16389  1522  300B               	movlw	11
 16390  1523  31A7  2758  3195   	fcall	_setProductData
 16391                           
 16392                           ;RF_Control_B1.c: 507: setProductData(17, product->Data[26 + lights]);
 16393  1526  0020               	movlb	0	; select bank0
 16394  1527  0869               	movf	setRF_DimmerLights@lights,w
 16395  1528  3E1A               	addlw	26
 16396  1529  0021               	movlb	1	; select bank1
 16397  152A  076E               	addwf	_product^(0+128),w
 16398  152B  0020               	movlb	0	; select bank0
 16399  152C  00E6               	movwf	??_setRF_DimmerLights
 16400  152D  0866               	movf	??_setRF_DimmerLights,w
 16401  152E  0086               	movwf	6
 16402  152F  3002               	movlw	2	; select bank4/5
 16403  1530  0087               	movwf	7
 16404  1531  0801               	movf	1,w
 16405  1532  00E7               	movwf	??_setRF_DimmerLights+1
 16406  1533  0867               	movf	??_setRF_DimmerLights+1,w
 16407  1534  00E2               	movwf	setProductData@value
 16408  1535  3011               	movlw	17
 16409  1536  31A7  2758  3195   	fcall	_setProductData
 16410                           
 16411                           ;RF_Control_B1.c: 508: if (on == 1) {
 16412  1539  0020               	movlb	0	; select bank0
 16413  153A  0865               	movf	setRF_DimmerLights@on,w
 16414  153B  3A01               	xorlw	1
 16415  153C  1D03               	skipz
 16416  153D  2D60               	goto	l7068
 16417                           
 16418                           ;RF_Control_B1.c: 509: setProductData(9, product->Data[20 + lights]);
 16419  153E  0869               	movf	setRF_DimmerLights@lights,w
 16420  153F  3E14               	addlw	20
 16421  1540  0021               	movlb	1	; select bank1
 16422  1541  076E               	addwf	_product^(0+128),w
 16423  1542  0020               	movlb	0	; select bank0
 16424  1543  00E6               	movwf	??_setRF_DimmerLights
 16425  1544  0866               	movf	??_setRF_DimmerLights,w
 16426  1545  0086               	movwf	6
 16427  1546  3002               	movlw	2	; select bank4/5
 16428  1547  0087               	movwf	7
 16429  1548  0801               	movf	1,w
 16430  1549  00E7               	movwf	??_setRF_DimmerLights+1
 16431  154A  0867               	movf	??_setRF_DimmerLights+1,w
 16432  154B  00E2               	movwf	setProductData@value
 16433  154C  3009               	movlw	9
 16434  154D  31A7  2758  3195   	fcall	_setProductData
 16435                           
 16436                           ;RF_Control_B1.c: 510: setProductData(15, (product->Data[15] | status));
 16437  1550  0021               	movlb	1	; select bank1
 16438  1551  086E               	movf	_product^(0+128),w
 16439  1552  3E0F               	addlw	15
 16440  1553  0086               	movwf	6
 16441  1554  3002               	movlw	2	; select bank4/5
 16442  1555  0087               	movwf	7
 16443  1556  0801               	movf	1,w
 16444  1557  0020               	movlb	0	; select bank0
 16445  1558  0468               	iorwf	setRF_DimmerLights@status,w
 16446  1559  00E6               	movwf	??_setRF_DimmerLights
 16447  155A  0866               	movf	??_setRF_DimmerLights,w
 16448  155B  00E2               	movwf	setProductData@value
 16449  155C  300F               	movlw	15
 16450  155D  31A7  2758         	fcall	_setProductData
 16451                           
 16452                           ;RF_Control_B1.c: 511: } else {
 16453  155F  0008               	return
 16454  1560                     l7068:	
 16455                           
 16456                           ;RF_Control_B1.c: 512: setProductData(9, 0x00);
 16457  1560  0020               	movlb	0	; select bank0
 16458  1561  01E2               	clrf	setProductData@value
 16459  1562  3009               	movlw	9
 16460  1563  31A7  2758  3195   	fcall	_setProductData
 16461                           
 16462                           ;RF_Control_B1.c: 513: setProductData(15, (product->Data[15]&(~status)));
 16463  1566  0021               	movlb	1	; select bank1
 16464  1567  086E               	movf	_product^(0+128),w
 16465  1568  3E0F               	addlw	15
 16466  1569  0086               	movwf	6
 16467  156A  3002               	movlw	2	; select bank4/5
 16468  156B  0087               	movwf	7
 16469  156C  0020               	movlb	0	; select bank0
 16470  156D  0968               	comf	setRF_DimmerLights@status,w
 16471  156E  0501               	andwf	1,w
 16472  156F  00E6               	movwf	??_setRF_DimmerLights
 16473  1570  0866               	movf	??_setRF_DimmerLights,w
 16474  1571  00E2               	movwf	setProductData@value
 16475  1572  300F               	movlw	15
 16476  1573  31A7  2758         	fcall	_setProductData
 16477  1575  0008               	return
 16478  1576                     __end_of_setRF_DimmerLights:	
 16479                           
 16480                           	psect	text107
 16481  1B7A                     __ptext107:	
 16482 ;; *************** function _setDimmerLights_Line *****************
 16483 ;; Defined at:
 16484 ;;		line 1084 in file "../src/Dimmer_B1.c"
 16485 ;; Parameters:    Size  Location     Type
 16486 ;;  lights          1    wreg     unsigned char 
 16487 ;; Auto vars:     Size  Location     Type
 16488 ;;  lights          1    0[BANK0 ] unsigned char 
 16489 ;; Return value:  Size  Location     Type
 16490 ;;		None               void
 16491 ;; Registers used:
 16492 ;;		wreg
 16493 ;; Tracked objects:
 16494 ;;		On entry : 0/0
 16495 ;;		On exit  : 0/0
 16496 ;;		Unchanged: 0/0
 16497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16499 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16500 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16501 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16502 ;;Total ram usage:        1 bytes
 16503 ;; Hardware stack levels used:    1
 16504 ;; Hardware stack levels required when called:    5
 16505 ;; This function calls:
 16506 ;;		Nothing
 16507 ;; This function is called by:
 16508 ;;		_setDimmerLights_OnOff
 16509 ;;		_setDimmerLights_Dimming
 16510 ;; This function uses a non-reentrant model
 16511 ;;
 16512                           
 16513                           
 16514                           ;psect for function _setDimmerLights_Line
 16515  1B7A                     _setDimmerLights_Line:	
 16516                           
 16517                           ;incstack = 0
 16518                           ; Regs used in _setDimmerLights_Line: [wreg]
 16519                           ;setDimmerLights_Line@lights stored from wreg
 16520  1B7A  0020               	movlb	0	; select bank0
 16521  1B7B  00A0               	movwf	setDimmerLights_Line@lights
 16522                           
 16523                           ;Dimmer_B1.c: 1085: Dimmer.LoadGO = 1;
 16524  1B7C  0022               	movlb	2	; select bank2
 16525  1B7D  14AC               	bsf	_Dimmer^(0+256),1
 16526                           
 16527                           ;Dimmer_B1.c: 1087: DimmerLights1.Line = 0;
 16528  1B7E  0023               	movlb	3	; select bank3
 16529  1B7F  10C8               	bcf	(_DimmerLights1^(0+384)+1),1
 16530                           
 16531                           ;Dimmer_B1.c: 1088: if (lights == 1 && lights != 0) {
 16532  1B80  0020               	movlb	0	; select bank0
 16533  1B81  0820               	movf	setDimmerLights_Line@lights,w
 16534  1B82  3A01               	xorlw	1
 16535  1B83  1D03               	skipz
 16536  1B84  2B8A               	goto	l926
 16537  1B85  0820               	movf	setDimmerLights_Line@lights,w
 16538  1B86  1903               	btfsc	3,2
 16539  1B87  2B8A               	goto	l926
 16540                           
 16541                           ;Dimmer_B1.c: 1089: DimmerLights1.Line = 1;
 16542  1B88  0023               	movlb	3	; select bank3
 16543  1B89  14C8               	bsf	(_DimmerLights1^(0+384)+1),1
 16544  1B8A                     l926:	
 16545                           
 16546                           ;Dimmer_B1.c: 1090: }
 16547                           ;Dimmer_B1.c: 1093: DimmerLights2.Line = 0;
 16548  1B8A  0023               	movlb	3	; select bank3
 16549  1B8B  10D0               	bcf	(_DimmerLights2^(0+384)+1),1
 16550                           
 16551                           ;Dimmer_B1.c: 1094: if (lights == 2 && lights != 0) {
 16552  1B8C  0020               	movlb	0	; select bank0
 16553  1B8D  0820               	movf	setDimmerLights_Line@lights,w
 16554  1B8E  3A02               	xorlw	2
 16555  1B8F  1D03               	skipz
 16556  1B90  0008               	return
 16557  1B91  0820               	movf	setDimmerLights_Line@lights,w
 16558  1B92  1903               	btfsc	3,2
 16559  1B93  0008               	return
 16560                           
 16561                           ;Dimmer_B1.c: 1095: DimmerLights2.Line = 1;
 16562  1B94  0023               	movlb	3	; select bank3
 16563  1B95  14D0               	bsf	(_DimmerLights2^(0+384)+1),1
 16564  1B96  0020               	movlb	0	; select bank0
 16565  1B97  0008               	return
 16566  1B98                     __end_of_setDimmerLights_Line:	
 16567                           
 16568                           	psect	text108
 16569  1A2B                     __ptext108:	
 16570 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 16571 ;; Defined at:
 16572 ;;		line 147 in file "../src/Dimmer_B1.c"
 16573 ;; Parameters:    Size  Location     Type
 16574 ;;  lights          1    wreg     unsigned char 
 16575 ;;  value           1   66[BANK0 ] unsigned char 
 16576 ;; Auto vars:     Size  Location     Type
 16577 ;;  lights          1   68[BANK0 ] unsigned char 
 16578 ;; Return value:  Size  Location     Type
 16579 ;;		None               void
 16580 ;; Registers used:
 16581 ;;		wreg
 16582 ;; Tracked objects:
 16583 ;;		On entry : 0/0
 16584 ;;		On exit  : 0/0
 16585 ;;		Unchanged: 0/0
 16586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16587 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16588 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16589 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16590 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16591 ;;Total ram usage:        3 bytes
 16592 ;; Hardware stack levels used:    1
 16593 ;; Hardware stack levels required when called:    5
 16594 ;; This function calls:
 16595 ;;		Nothing
 16596 ;; This function is called by:
 16597 ;;		_setDimmerLights_OnOff
 16598 ;;		_setDimmerLights_Dimming
 16599 ;;		_setRFSW_AdjControl
 16600 ;; This function uses a non-reentrant model
 16601 ;;
 16602                           
 16603                           
 16604                           ;psect for function _setDimmerIntr_MaxmumValue
 16605  1A2B                     _setDimmerIntr_MaxmumValue:	
 16606                           
 16607                           ;incstack = 0
 16608                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 16609                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 16610  1A2B  0020               	movlb	0	; select bank0
 16611  1A2C  00E4               	movwf	setDimmerIntr_MaxmumValue@lights
 16612                           
 16613                           ;Dimmer_B1.c: 149: if (lights == 1) {
 16614  1A2D  0864               	movf	setDimmerIntr_MaxmumValue@lights,w
 16615  1A2E  3A01               	xorlw	1
 16616  1A2F  1D03               	skipz
 16617  1A30  2A37               	goto	l7044
 16618                           
 16619                           ;Dimmer_B1.c: 150: DimmerIntr1.MaxmumValue = value;
 16620  1A31  0862               	movf	setDimmerIntr_MaxmumValue@value,w
 16621  1A32  00E3               	movwf	??_setDimmerIntr_MaxmumValue
 16622  1A33  0863               	movf	??_setDimmerIntr_MaxmumValue,w
 16623  1A34  0021               	movlb	1	; select bank1
 16624  1A35  00C2               	movwf	(_DimmerIntr1^(0+128)+6)
 16625                           
 16626                           ;Dimmer_B1.c: 151: }
 16627  1A36  0008               	return
 16628  1A37                     l7044:	
 16629                           
 16630                           ;Dimmer_B1.c: 154: else if (lights == 2) {
 16631  1A37  0020               	movlb	0	; select bank0
 16632  1A38  0864               	movf	setDimmerIntr_MaxmumValue@lights,w
 16633  1A39  3A02               	xorlw	2
 16634  1A3A  1D03               	skipz
 16635  1A3B  0008               	return
 16636                           
 16637                           ;Dimmer_B1.c: 155: DimmerIntr2.MaxmumValue = value;
 16638  1A3C  0862               	movf	setDimmerIntr_MaxmumValue@value,w
 16639  1A3D  00E3               	movwf	??_setDimmerIntr_MaxmumValue
 16640  1A3E  0863               	movf	??_setDimmerIntr_MaxmumValue,w
 16641  1A3F  0021               	movlb	1	; select bank1
 16642  1A40  00CE               	movwf	(_DimmerIntr2^(0+128)+6)
 16643  1A41  0008               	return
 16644  1A42                     __end_of_setDimmerIntr_MaxmumValue:	
 16645                           
 16646                           	psect	text109
 16647  1DBE                     __ptext109:	
 16648 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 16649 ;; Defined at:
 16650 ;;		line 224 in file "../src/Dimmer_B1.c"
 16651 ;; Parameters:    Size  Location     Type
 16652 ;;  lights          1    wreg     unsigned char 
 16653 ;;  command         1    0[BANK0 ] unsigned char 
 16654 ;; Auto vars:     Size  Location     Type
 16655 ;;  lights          1    2[BANK0 ] unsigned char 
 16656 ;; Return value:  Size  Location     Type
 16657 ;;		None               void
 16658 ;; Registers used:
 16659 ;;		wreg, status,2, status,0
 16660 ;; Tracked objects:
 16661 ;;		On entry : 0/0
 16662 ;;		On exit  : 0/0
 16663 ;;		Unchanged: 0/0
 16664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16665 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16666 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16667 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16668 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16669 ;;Total ram usage:        3 bytes
 16670 ;; Hardware stack levels used:    1
 16671 ;; Hardware stack levels required when called:    5
 16672 ;; This function calls:
 16673 ;;		Nothing
 16674 ;; This function is called by:
 16675 ;;		_setDimmerLights_Dimming
 16676 ;;		_setDimmerLights_DimmingClose
 16677 ;; This function uses a non-reentrant model
 16678 ;;
 16679                           
 16680                           
 16681                           ;psect for function _setDimmerIntr_Dimming_Sw
 16682  1DBE                     _setDimmerIntr_Dimming_Sw:	
 16683                           
 16684                           ;incstack = 0
 16685                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 16686                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 16687  1DBE  0020               	movlb	0	; select bank0
 16688  1DBF  00A2               	movwf	setDimmerIntr_Dimming_Sw@lights
 16689                           
 16690                           ;Dimmer_B1.c: 226: if (lights == 1) {
 16691  1DC0  0822               	movf	setDimmerIntr_Dimming_Sw@lights,w
 16692  1DC1  3A01               	xorlw	1
 16693  1DC2  1D03               	skipz
 16694  1DC3  2DD4               	goto	l7190
 16695                           
 16696                           ;Dimmer_B1.c: 227: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 16697  1DC4  0820               	movf	setDimmerIntr_Dimming_Sw@command,w
 16698  1DC5  3A01               	xorlw	1
 16699  1DC6  3000               	movlw	0
 16700  1DC7  1903               	skipnz
 16701  1DC8  3001               	movlw	1
 16702  1DC9  00A1               	movwf	??_setDimmerIntr_Dimming_Sw
 16703  1DCA  0EA1               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16704  1DCB  0021               	movlb	1	; select bank1
 16705  1DCC  083C               	movf	_DimmerIntr1^(0+128),w
 16706  1DCD  0020               	movlb	0	; select bank0
 16707  1DCE  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16708  1DCF  39EF               	andlw	-17
 16709  1DD0  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16710  1DD1  0021               	movlb	1	; select bank1
 16711  1DD2  00BC               	movwf	_DimmerIntr1^(0+128)
 16712                           
 16713                           ;Dimmer_B1.c: 228: }
 16714  1DD3  0008               	return
 16715  1DD4                     l7190:	
 16716                           
 16717                           ;Dimmer_B1.c: 231: else if (lights == 2) {
 16718  1DD4  0020               	movlb	0	; select bank0
 16719  1DD5  0822               	movf	setDimmerIntr_Dimming_Sw@lights,w
 16720  1DD6  3A02               	xorlw	2
 16721  1DD7  1D03               	skipz
 16722  1DD8  0008               	return
 16723                           
 16724                           ;Dimmer_B1.c: 232: DimmerIntr2.Dimming_Sw = command == 1 ? 1 : 0;
 16725  1DD9  0820               	movf	setDimmerIntr_Dimming_Sw@command,w
 16726  1DDA  3A01               	xorlw	1
 16727  1DDB  3000               	movlw	0
 16728  1DDC  1903               	skipnz
 16729  1DDD  3001               	movlw	1
 16730  1DDE  00A1               	movwf	??_setDimmerIntr_Dimming_Sw
 16731  1DDF  0EA1               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16732  1DE0  0021               	movlb	1	; select bank1
 16733  1DE1  0848               	movf	_DimmerIntr2^(0+128),w
 16734  1DE2  0020               	movlb	0	; select bank0
 16735  1DE3  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16736  1DE4  39EF               	andlw	-17
 16737  1DE5  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16738  1DE6  0021               	movlb	1	; select bank1
 16739  1DE7  00C8               	movwf	_DimmerIntr2^(0+128)
 16740  1DE8  0008               	return
 16741  1DE9                     __end_of_setDimmerIntr_Dimming_Sw:	
 16742                           
 16743                           	psect	text110
 16744  19E7                     __ptext110:	
 16745 ;; *************** function _getDimmerIntr_DimmingValue *****************
 16746 ;; Defined at:
 16747 ;;		line 125 in file "../src/Dimmer_B1.c"
 16748 ;; Parameters:    Size  Location     Type
 16749 ;;  lights          1    wreg     unsigned char 
 16750 ;; Auto vars:     Size  Location     Type
 16751 ;;  lights          1    2[BANK0 ] unsigned char 
 16752 ;;  value           1    1[BANK0 ] unsigned char 
 16753 ;; Return value:  Size  Location     Type
 16754 ;;                  1    wreg      unsigned char 
 16755 ;; Registers used:
 16756 ;;		wreg, status,2
 16757 ;; Tracked objects:
 16758 ;;		On entry : 0/0
 16759 ;;		On exit  : 0/0
 16760 ;;		Unchanged: 0/0
 16761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16762 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16763 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16764 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16765 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16766 ;;Total ram usage:        3 bytes
 16767 ;; Hardware stack levels used:    1
 16768 ;; Hardware stack levels required when called:    5
 16769 ;; This function calls:
 16770 ;;		Nothing
 16771 ;; This function is called by:
 16772 ;;		_setDimmerLights_Dimming
 16773 ;; This function uses a non-reentrant model
 16774 ;;
 16775                           
 16776                           
 16777                           ;psect for function _getDimmerIntr_DimmingValue
 16778  19E7                     _getDimmerIntr_DimmingValue:	
 16779                           
 16780                           ;incstack = 0
 16781                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 16782                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 16783  19E7  0020               	movlb	0	; select bank0
 16784  19E8  00A2               	movwf	getDimmerIntr_DimmingValue@lights
 16785                           
 16786                           ;Dimmer_B1.c: 126: char value = 0;
 16787  19E9  01A1               	clrf	getDimmerIntr_DimmingValue@value
 16788                           
 16789                           ;Dimmer_B1.c: 128: if (lights == 1) {
 16790  19EA  0822               	movf	getDimmerIntr_DimmingValue@lights,w
 16791  19EB  3A01               	xorlw	1
 16792  19EC  1D03               	skipz
 16793  19ED  29F1               	goto	l7430
 16794                           
 16795                           ;Dimmer_B1.c: 129: value = DimmerIntr1.DimmingValue;
 16796  19EE  0021               	movlb	1	; select bank1
 16797  19EF  0841               	movf	(_DimmerIntr1^(0+128)+5),w
 16798  19F0  29F7               	goto	L11
 16799  19F1                     l7430:	
 16800                           ;Dimmer_B1.c: 130: }
 16801                           
 16802                           
 16803                           ;Dimmer_B1.c: 133: else if (lights == 2) {
 16804  19F1  0822               	movf	getDimmerIntr_DimmingValue@lights,w
 16805  19F2  3A02               	xorlw	2
 16806  19F3  1D03               	skipz
 16807  19F4  29FB               	goto	l763
 16808                           
 16809                           ;Dimmer_B1.c: 134: value = DimmerIntr2.DimmingValue;
 16810  19F5  0021               	movlb	1	; select bank1
 16811  19F6  084D               	movf	(_DimmerIntr2^(0+128)+5),w
 16812  19F7                     L11:	
 16813  19F7  0020               	movlb	0	; select bank0
 16814  19F8  00A0               	movwf	??_getDimmerIntr_DimmingValue
 16815  19F9  0820               	movf	??_getDimmerIntr_DimmingValue,w
 16816  19FA  00A1               	movwf	getDimmerIntr_DimmingValue@value
 16817  19FB                     l763:	
 16818                           
 16819                           ;Dimmer_B1.c: 135: }
 16820                           ;Dimmer_B1.c: 142: return value;
 16821  19FB  0821               	movf	getDimmerIntr_DimmingValue@value,w
 16822  19FC  0008               	return
 16823  19FD                     __end_of_getDimmerIntr_DimmingValue:	
 16824                           
 16825                           	psect	text111
 16826  108B                     __ptext111:	
 16827 ;; *************** function _getDimmerLights_Allow_Condition *****************
 16828 ;; Defined at:
 16829 ;;		line 1045 in file "../src/Dimmer_B1.c"
 16830 ;; Parameters:    Size  Location     Type
 16831 ;;  lights          1    wreg     unsigned char 
 16832 ;; Auto vars:     Size  Location     Type
 16833 ;;  lights          1    5[BANK0 ] unsigned char 
 16834 ;;  allow           1    6[BANK0 ] unsigned char 
 16835 ;; Return value:  Size  Location     Type
 16836 ;;                  1    wreg      unsigned char 
 16837 ;; Registers used:
 16838 ;;		wreg, status,2, status,0, pclath, cstack
 16839 ;; Tracked objects:
 16840 ;;		On entry : 0/0
 16841 ;;		On exit  : 0/0
 16842 ;;		Unchanged: 0/0
 16843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16845 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16846 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16847 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16848 ;;Total ram usage:        6 bytes
 16849 ;; Hardware stack levels used:    1
 16850 ;; Hardware stack levels required when called:    6
 16851 ;; This function calls:
 16852 ;;		_getLoad_OK
 16853 ;; This function is called by:
 16854 ;;		_setDimmerLights_Main
 16855 ;; This function uses a non-reentrant model
 16856 ;;
 16857                           
 16858                           
 16859                           ;psect for function _getDimmerLights_Allow_Condition
 16860  108B                     _getDimmerLights_Allow_Condition:	
 16861                           
 16862                           ;incstack = 0
 16863                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+status,0+pclath+cstack]
 16864                           ;getDimmerLights_Allow_Condition@lights stored from wreg
 16865  108B  0020               	movlb	0	; select bank0
 16866  108C  00A5               	movwf	getDimmerLights_Allow_Condition@lights
 16867                           
 16868                           ;Dimmer_B1.c: 1046: char allow = 0;
 16869  108D  01A6               	clrf	getDimmerLights_Allow_Condition@allow
 16870                           
 16871                           ;Dimmer_B1.c: 1052: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 16872  108E  01A2               	clrf	_getDimmerLights_Allow_Condition$2454
 16873  108F  0AA2               	incf	_getDimmerLights_Allow_Condition$2454,f
 16874  1090  31A6  26EE  3190   	fcall	_getLoad_OK
 16875  1093  3800               	iorlw	0
 16876  1094  1D03               	skipz
 16877  1095  289B               	goto	l7782
 16878  1096  0022               	movlb	2	; select bank2
 16879  1097  18AC               	btfsc	_Dimmer^(0+256),1
 16880  1098  289B               	goto	l7782
 16881  1099  0020               	movlb	0	; select bank0
 16882  109A  01A2               	clrf	_getDimmerLights_Allow_Condition$2454
 16883  109B                     l7782:	
 16884  109B  0020               	movlb	0	; select bank0
 16885  109C  0822               	movf	_getDimmerLights_Allow_Condition$2454,w
 16886  109D  00A1               	movwf	??_getDimmerLights_Allow_Condition
 16887  109E  0821               	movf	??_getDimmerLights_Allow_Condition,w
 16888  109F  00A6               	movwf	getDimmerLights_Allow_Condition@allow
 16889                           
 16890                           ;Dimmer_B1.c: 1056: if (allow == 0) {
 16891  10A0  08A6               	movf	getDimmerLights_Allow_Condition@allow,f
 16892  10A1  1D03               	skipz
 16893  10A2  28C7               	goto	l7806
 16894                           
 16895                           ;Dimmer_B1.c: 1057: if (lights == 1) {
 16896  10A3  0825               	movf	getDimmerLights_Allow_Condition@lights,w
 16897  10A4  3A01               	xorlw	1
 16898  10A5  1D03               	skipz
 16899  10A6  28B4               	goto	l7796
 16900                           
 16901                           ;Dimmer_B1.c: 1058: allow = DimmerLights2.DimmingTrigger == 1 || DimmerIntr2.Dimming_Sw 
      +                          == 1 ? 1 : 0;
 16902  10A7  01A3               	clrf	_getDimmerLights_Allow_Condition$2455
 16903  10A8  0AA3               	incf	_getDimmerLights_Allow_Condition$2455,f
 16904  10A9  0023               	movlb	3	; select bank3
 16905  10AA  1A4F               	btfsc	_DimmerLights2^(0+384),4
 16906  10AB  28B1               	goto	l7794
 16907  10AC  0021               	movlb	1	; select bank1
 16908  10AD  1A48               	btfsc	_DimmerIntr2^(0+128),4
 16909  10AE  28B1               	goto	l7794
 16910  10AF  0020               	movlb	0	; select bank0
 16911  10B0  01A3               	clrf	_getDimmerLights_Allow_Condition$2455
 16912  10B1                     l7794:	
 16913  10B1  0020               	movlb	0	; select bank0
 16914  10B2  0823               	movf	_getDimmerLights_Allow_Condition$2455,w
 16915  10B3  28C4               	goto	L12
 16916  10B4                     l7796:	
 16917                           ;Dimmer_B1.c: 1059: } else if (lights == 2) {
 16918                           
 16919  10B4  0825               	movf	getDimmerLights_Allow_Condition@lights,w
 16920  10B5  3A02               	xorlw	2
 16921  10B6  1D03               	skipz
 16922  10B7  28C7               	goto	l7806
 16923                           
 16924                           ;Dimmer_B1.c: 1060: allow = DimmerLights1.DimmingTrigger == 1 || DimmerIntr1.Dimming_Sw 
      +                          == 1 ? 1 : 0;
 16925  10B8  01A4               	clrf	_getDimmerLights_Allow_Condition$2456
 16926  10B9  0AA4               	incf	_getDimmerLights_Allow_Condition$2456,f
 16927  10BA  0023               	movlb	3	; select bank3
 16928  10BB  1A47               	btfsc	_DimmerLights1^(0+384),4
 16929  10BC  28C2               	goto	l7804
 16930  10BD  0021               	movlb	1	; select bank1
 16931  10BE  1A3C               	btfsc	_DimmerIntr1^(0+128),4
 16932  10BF  28C2               	goto	l7804
 16933  10C0  0020               	movlb	0	; select bank0
 16934  10C1  01A4               	clrf	_getDimmerLights_Allow_Condition$2456
 16935  10C2                     l7804:	
 16936  10C2  0020               	movlb	0	; select bank0
 16937  10C3  0824               	movf	_getDimmerLights_Allow_Condition$2456,w
 16938  10C4                     L12:	
 16939  10C4  00A1               	movwf	??_getDimmerLights_Allow_Condition
 16940  10C5  0821               	movf	??_getDimmerLights_Allow_Condition,w
 16941  10C6  00A6               	movwf	getDimmerLights_Allow_Condition@allow
 16942  10C7                     l7806:	
 16943                           
 16944                           ;Dimmer_B1.c: 1061: }
 16945                           ;Dimmer_B1.c: 1062: }
 16946                           ;Dimmer_B1.c: 1079: return allow;
 16947  10C7  0826               	movf	getDimmerLights_Allow_Condition@allow,w
 16948  10C8  0008               	return
 16949  10C9                     __end_of_getDimmerLights_Allow_Condition:	
 16950                           
 16951                           	psect	text112
 16952  26EE                     __ptext112:	
 16953 ;; *************** function _getLoad_OK *****************
 16954 ;; Defined at:
 16955 ;;		line 274 in file "../src/OverLoad_B1.c"
 16956 ;; Parameters:    Size  Location     Type
 16957 ;;		None
 16958 ;; Auto vars:     Size  Location     Type
 16959 ;;  ok              1    0[BANK0 ] unsigned char 
 16960 ;; Return value:  Size  Location     Type
 16961 ;;                  1    wreg      unsigned char 
 16962 ;; Registers used:
 16963 ;;		wreg, status,2
 16964 ;; Tracked objects:
 16965 ;;		On entry : 0/0
 16966 ;;		On exit  : 0/0
 16967 ;;		Unchanged: 0/0
 16968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16970 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16972 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16973 ;;Total ram usage:        1 bytes
 16974 ;; Hardware stack levels used:    1
 16975 ;; Hardware stack levels required when called:    5
 16976 ;; This function calls:
 16977 ;;		Nothing
 16978 ;; This function is called by:
 16979 ;;		_DimmerLights_Main
 16980 ;;		_getDimmerLights_Allow_Condition
 16981 ;; This function uses a non-reentrant model
 16982 ;;
 16983                           
 16984                           
 16985                           ;psect for function _getLoad_OK
 16986  26EE                     _getLoad_OK:	
 16987                           
 16988                           ;OverLoad_B1.c: 275: char ok = Load.OK == 1 ? 1 : 0;
 16989                           
 16990                           ;incstack = 0
 16991                           ; Regs used in _getLoad_OK: [wreg+status,2]
 16992  26EE  3000               	movlw	0
 16993  26EF  0022               	movlb	2	; select bank2
 16994  26F0  1BB8               	btfsc	_Load^(0+256),7
 16995  26F1  3001               	movlw	1
 16996  26F2  0020               	movlb	0	; select bank0
 16997  26F3  00A0               	movwf	getLoad_OK@ok
 16998                           
 16999                           ;OverLoad_B1.c: 276: return ok;
 17000  26F4  0820               	movf	getLoad_OK@ok,w
 17001  26F5  0008               	return
 17002  26F6                     __end_of_getLoad_OK:	
 17003                           
 17004                           	psect	text113
 17005  0800                     __ptext113:	
 17006 ;; *************** function _getMain_All_Error_Status *****************
 17007 ;; Defined at:
 17008 ;;		line 424 in file "../src/main_B1.c"
 17009 ;; Parameters:    Size  Location     Type
 17010 ;;  command         1    wreg     unsigned char 
 17011 ;; Auto vars:     Size  Location     Type
 17012 ;;  command         1    5[BANK0 ] unsigned char 
 17013 ;;  status          1    6[BANK0 ] unsigned char 
 17014 ;; Return value:  Size  Location     Type
 17015 ;;                  1    wreg      unsigned char 
 17016 ;; Registers used:
 17017 ;;		wreg, status,2, status,0
 17018 ;; Tracked objects:
 17019 ;;		On entry : 0/0
 17020 ;;		On exit  : 0/0
 17021 ;;		Unchanged: 0/0
 17022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17024 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17025 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17026 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17027 ;;Total ram usage:        7 bytes
 17028 ;; Hardware stack levels used:    1
 17029 ;; Hardware stack levels required when called:    5
 17030 ;; This function calls:
 17031 ;;		Nothing
 17032 ;; This function is called by:
 17033 ;;		_DimmerLights_Main
 17034 ;;		_Load_Main
 17035 ;;		_setTemp_Main
 17036 ;;		_getRxData
 17037 ;;		_setSw_Main
 17038 ;;		_Exception_Main
 17039 ;; This function uses a non-reentrant model
 17040 ;;
 17041                           
 17042                           
 17043                           ;psect for function _getMain_All_Error_Status
 17044  0800                     _getMain_All_Error_Status:	
 17045                           
 17046                           ;incstack = 0
 17047                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 17048                           ;getMain_All_Error_Status@command stored from wreg
 17049  0800  0020               	movlb	0	; select bank0
 17050  0801  00A5               	movwf	getMain_All_Error_Status@command
 17051                           
 17052                           ;main_B1.c: 425: char status = 0;
 17053  0802  01A6               	clrf	getMain_All_Error_Status@status
 17054                           
 17055                           ;main_B1.c: 436: if (status == 0 && command != 2) {
 17056  0803  08A6               	movf	getMain_All_Error_Status@status,f
 17057  0804  1D03               	skipz
 17058  0805  281A               	goto	l7454
 17059  0806  0825               	movf	getMain_All_Error_Status@command,w
 17060  0807  3A02               	xorlw	2
 17061  0808  1903               	skipnz
 17062  0809  281A               	goto	l7454
 17063                           
 17064                           ;main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
 17065  080A  0022               	movlb	2	; select bank2
 17066  080B  18E0               	btfsc	_Temp^(0+256),1
 17067  080C  2811               	goto	l7452
 17068  080D  0020               	movlb	0	; select bank0
 17069  080E  01A1               	clrf	_getMain_All_Error_Status$7008
 17070  080F  01A2               	clrf	_getMain_All_Error_Status$7008+1
 17071  0810  2816               	goto	l2936
 17072  0811                     l7452:	
 17073  0811  3002               	movlw	2
 17074  0812  0020               	movlb	0	; select bank0
 17075  0813  00A1               	movwf	_getMain_All_Error_Status$7008
 17076  0814  3000               	movlw	0
 17077  0815  00A2               	movwf	_getMain_All_Error_Status$7008+1
 17078  0816                     l2936:	
 17079  0816  0821               	movf	_getMain_All_Error_Status$7008,w
 17080  0817  00A0               	movwf	??_getMain_All_Error_Status
 17081  0818  0820               	movf	??_getMain_All_Error_Status,w
 17082  0819  00A6               	movwf	getMain_All_Error_Status@status
 17083  081A                     l7454:	
 17084                           
 17085                           ;main_B1.c: 438: }
 17086                           ;main_B1.c: 443: if (status == 0 && command != 3) {
 17087  081A  08A6               	movf	getMain_All_Error_Status@status,f
 17088  081B  1D03               	skipz
 17089  081C  2831               	goto	l2937
 17090  081D  0825               	movf	getMain_All_Error_Status@command,w
 17091  081E  3A03               	xorlw	3
 17092  081F  1903               	skipnz
 17093  0820  2831               	goto	l2937
 17094                           
 17095                           ;main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
 17096  0821  0022               	movlb	2	; select bank2
 17097  0822  1AB8               	btfsc	_Load^(0+256),5
 17098  0823  2828               	goto	l7462
 17099  0824  0020               	movlb	0	; select bank0
 17100  0825  01A3               	clrf	_getMain_All_Error_Status$7009
 17101  0826  01A4               	clrf	_getMain_All_Error_Status$7009+1
 17102  0827  282D               	goto	l2941
 17103  0828                     l7462:	
 17104  0828  3003               	movlw	3
 17105  0829  0020               	movlb	0	; select bank0
 17106  082A  00A3               	movwf	_getMain_All_Error_Status$7009
 17107  082B  3000               	movlw	0
 17108  082C  00A4               	movwf	_getMain_All_Error_Status$7009+1
 17109  082D                     l2941:	
 17110  082D  0823               	movf	_getMain_All_Error_Status$7009,w
 17111  082E  00A0               	movwf	??_getMain_All_Error_Status
 17112  082F  0820               	movf	??_getMain_All_Error_Status,w
 17113  0830  00A6               	movwf	getMain_All_Error_Status@status
 17114  0831                     l2937:	
 17115                           
 17116                           ;main_B1.c: 445: }
 17117                           ;main_B1.c: 455: return status;
 17118  0831  0826               	movf	getMain_All_Error_Status@status,w
 17119  0832  0008               	return
 17120  0833                     __end_of_getMain_All_Error_Status:	
 17121                           
 17122                           	psect	text114
 17123  08A7                     __ptext114:	
 17124 ;; *************** function _DimmerLights_DimmingFunction *****************
 17125 ;; Defined at:
 17126 ;;		line 1790 in file "../src/Dimmer_B1.c"
 17127 ;; Parameters:    Size  Location     Type
 17128 ;;  lights          1    wreg     unsigned char 
 17129 ;; Auto vars:     Size  Location     Type
 17130 ;;  lights          1    1[BANK0 ] unsigned char 
 17131 ;; Return value:  Size  Location     Type
 17132 ;;		None               void
 17133 ;; Registers used:
 17134 ;;		wreg, status,2, status,0
 17135 ;; Tracked objects:
 17136 ;;		On entry : 0/0
 17137 ;;		On exit  : 0/0
 17138 ;;		Unchanged: 0/0
 17139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17141 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17142 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17143 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17144 ;;Total ram usage:        2 bytes
 17145 ;; Hardware stack levels used:    1
 17146 ;; Hardware stack levels required when called:    5
 17147 ;; This function calls:
 17148 ;;		Nothing
 17149 ;; This function is called by:
 17150 ;;		_DimmerLights_Main
 17151 ;; This function uses a non-reentrant model
 17152 ;;
 17153                           
 17154                           
 17155                           ;psect for function _DimmerLights_DimmingFunction
 17156  08A7                     _DimmerLights_DimmingFunction:	
 17157                           
 17158                           ;incstack = 0
 17159                           ; Regs used in _DimmerLights_DimmingFunction: [wreg+status,2+status,0]
 17160                           ;DimmerLights_DimmingFunction@lights stored from wreg
 17161  08A7  0020               	movlb	0	; select bank0
 17162  08A8  00A1               	movwf	DimmerLights_DimmingFunction@lights
 17163                           
 17164                           ;Dimmer_B1.c: 1792: if (lights == 1) {
 17165  08A9  0821               	movf	DimmerLights_DimmingFunction@lights,w
 17166  08AA  3A01               	xorlw	1
 17167  08AB  1D03               	skipz
 17168  08AC  28E2               	goto	l8272
 17169                           
 17170                           ;Dimmer_B1.c: 1793: if (DimmerIntr1.Tune == 1) {
 17171  08AD  0021               	movlb	1	; select bank1
 17172  08AE  1CBC               	btfss	_DimmerIntr1^(0+128),1
 17173  08AF  28E2               	goto	l8272
 17174                           
 17175                           ;Dimmer_B1.c: 1794: DimmerIntr1.Tune = 0;
 17176  08B0  10BC               	bcf	_DimmerIntr1^(0+128),1
 17177                           
 17178                           ;Dimmer_B1.c: 1795: DimmerIntr1.TuneTime++;
 17179  08B1  3001               	movlw	1
 17180  08B2  0020               	movlb	0	; select bank0
 17181  08B3  00A0               	movwf	??_DimmerLights_DimmingFunction
 17182  08B4  0820               	movf	??_DimmerLights_DimmingFunction,w
 17183  08B5  0021               	movlb	1	; select bank1
 17184  08B6  07BF               	addwf	(_DimmerIntr1^(0+128)+3),f
 17185                           
 17186                           ;Dimmer_B1.c: 1796: if (DimmerIntr1.TuneTime >= DimmerIntr1.TuneTimeValue) {
 17187  08B7  0840               	movf	(_DimmerIntr1^(0+128)+4),w
 17188  08B8  023F               	subwf	(_DimmerIntr1^(0+128)+3),w
 17189  08B9  1C03               	skipc
 17190  08BA  28E2               	goto	l8272
 17191                           
 17192                           ;Dimmer_B1.c: 1797: DimmerIntr1.TuneTime = 0;
 17193  08BB  01BF               	clrf	(_DimmerIntr1^(0+128)+3)
 17194                           
 17195                           ;Dimmer_B1.c: 1798: DimmerIntr1.TuneGO = 1;
 17196  08BC  173D               	bsf	(_DimmerIntr1^(0+128)+1),6
 17197                           
 17198                           ;Dimmer_B1.c: 1799: if (DimmerIntr1.Dimming_Sw == 1) {
 17199  08BD  1E3C               	btfss	_DimmerIntr1^(0+128),4
 17200  08BE  28CD               	goto	l1023
 17201                           
 17202                           ;Dimmer_B1.c: 1800: if (DimmerIntr1.Dimming_Status == 0) {
 17203  08BF  1ABC               	btfsc	_DimmerIntr1^(0+128),5
 17204  08C0  28C7               	goto	l8260
 17205                           
 17206                           ;Dimmer_B1.c: 1801: if (DimmerIntr1.DimmingValue < ((char)(77*0.55))) {
 17207  08C1  302A               	movlw	42
 17208  08C2  0241               	subwf	(_DimmerIntr1^(0+128)+5),w
 17209  08C3  1C03               	btfss	3,0
 17210  08C4  28D3               	goto	l8266
 17211                           
 17212                           ;Dimmer_B1.c: 1804: DimmerIntr1.Dimming_Status = 1;
 17213                           
 17214                           ;Dimmer_B1.c: 1803: } else {
 17215                           
 17216                           ;Dimmer_B1.c: 1802: DimmerIntr1.DimmingValue++;
 17217  08C5  16BC               	bsf	_DimmerIntr1^(0+128),5
 17218                           
 17219                           ;Dimmer_B1.c: 1805: }
 17220                           ;Dimmer_B1.c: 1806: } else {
 17221  08C6  28E2               	goto	l8272
 17222  08C7                     l8260:	
 17223                           
 17224                           ;Dimmer_B1.c: 1807: if (DimmerIntr1.DimmingValue > ((char)(5*0.55))) {
 17225  08C7  3003               	movlw	3
 17226  08C8  0241               	subwf	(_DimmerIntr1^(0+128)+5),w
 17227  08C9  1803               	btfsc	3,0
 17228  08CA  28DE               	goto	l8270
 17229                           
 17230                           ;Dimmer_B1.c: 1810: DimmerIntr1.Dimming_Status = 0;
 17231                           
 17232                           ;Dimmer_B1.c: 1809: } else {
 17233                           
 17234                           ;Dimmer_B1.c: 1808: DimmerIntr1.DimmingValue--;
 17235  08CB  12BC               	bcf	_DimmerIntr1^(0+128),5
 17236                           
 17237                           ;Dimmer_B1.c: 1811: }
 17238                           ;Dimmer_B1.c: 1812: }
 17239                           ;Dimmer_B1.c: 1813: } else if (DimmerIntr1.Dimming_RF == 1) {
 17240  08CC  28E2               	goto	l8272
 17241  08CD                     l1023:	
 17242  08CD  1F3C               	btfss	_DimmerIntr1^(0+128),6
 17243  08CE  28E2               	goto	l8272
 17244                           
 17245                           ;Dimmer_B1.c: 1814: if (DimmerIntr1.DimmingValue < DimmerIntr1.MaxmumValue) {
 17246  08CF  0842               	movf	(_DimmerIntr1^(0+128)+6),w
 17247  08D0  0241               	subwf	(_DimmerIntr1^(0+128)+5),w
 17248  08D1  1803               	skipnc
 17249  08D2  28DA               	goto	l8268
 17250  08D3                     l8266:	
 17251                           
 17252                           ;Dimmer_B1.c: 1815: DimmerIntr1.DimmingValue++;
 17253  08D3  3001               	movlw	1
 17254  08D4  0020               	movlb	0	; select bank0
 17255  08D5  00A0               	movwf	??_DimmerLights_DimmingFunction
 17256  08D6  0820               	movf	??_DimmerLights_DimmingFunction,w
 17257  08D7  0021               	movlb	1	; select bank1
 17258  08D8  07C1               	addwf	(_DimmerIntr1^(0+128)+5),f
 17259                           
 17260                           ;Dimmer_B1.c: 1816: } else if (DimmerIntr1.DimmingValue > DimmerIntr1.MaxmumValue) {
 17261  08D9  28E2               	goto	l8272
 17262  08DA                     l8268:	
 17263  08DA  0841               	movf	(_DimmerIntr1^(0+128)+5),w
 17264  08DB  0242               	subwf	(_DimmerIntr1^(0+128)+6),w
 17265  08DC  1803               	skipnc
 17266  08DD  28E1               	goto	l1034
 17267  08DE                     l8270:	
 17268                           
 17269                           ;Dimmer_B1.c: 1817: DimmerIntr1.DimmingValue--;
 17270  08DE  3001               	movlw	1
 17271  08DF  02C1               	subwf	(_DimmerIntr1^(0+128)+5),f
 17272                           
 17273                           ;Dimmer_B1.c: 1818: } else {
 17274  08E0  28E2               	goto	l8272
 17275  08E1                     l1034:	
 17276                           
 17277                           ;Dimmer_B1.c: 1819: DimmerIntr1.Dimming_RF = 0;
 17278  08E1  133C               	bcf	_DimmerIntr1^(0+128),6
 17279  08E2                     l8272:	
 17280                           
 17281                           ;Dimmer_B1.c: 1820: }
 17282                           ;Dimmer_B1.c: 1821: }
 17283                           ;Dimmer_B1.c: 1822: }
 17284                           ;Dimmer_B1.c: 1823: }
 17285                           ;Dimmer_B1.c: 1824: }
 17286                           ;Dimmer_B1.c: 1828: if (lights == 2) {
 17287  08E2  0020               	movlb	0	; select bank0
 17288  08E3  0821               	movf	DimmerLights_DimmingFunction@lights,w
 17289  08E4  3A02               	xorlw	2
 17290  08E5  1D03               	skipz
 17291  08E6  0008               	return
 17292                           
 17293                           ;Dimmer_B1.c: 1829: if (DimmerIntr2.Tune == 1) {
 17294  08E7  0021               	movlb	1	; select bank1
 17295  08E8  1CC8               	btfss	_DimmerIntr2^(0+128),1
 17296  08E9  0008               	return
 17297                           
 17298                           ;Dimmer_B1.c: 1830: DimmerIntr2.Tune = 0;
 17299  08EA  10C8               	bcf	_DimmerIntr2^(0+128),1
 17300                           
 17301                           ;Dimmer_B1.c: 1831: DimmerIntr2.TuneTime++;
 17302  08EB  3001               	movlw	1
 17303  08EC  0020               	movlb	0	; select bank0
 17304  08ED  00A0               	movwf	??_DimmerLights_DimmingFunction
 17305  08EE  0820               	movf	??_DimmerLights_DimmingFunction,w
 17306  08EF  0021               	movlb	1	; select bank1
 17307  08F0  07CB               	addwf	(_DimmerIntr2^(0+128)+3),f
 17308                           
 17309                           ;Dimmer_B1.c: 1832: if (DimmerIntr2.TuneTime >= DimmerIntr2.TuneTimeValue) {
 17310  08F1  084C               	movf	(_DimmerIntr2^(0+128)+4),w
 17311  08F2  024B               	subwf	(_DimmerIntr2^(0+128)+3),w
 17312  08F3  1C03               	skipc
 17313  08F4  0008               	return
 17314                           
 17315                           ;Dimmer_B1.c: 1833: DimmerIntr2.TuneTime = 0;
 17316  08F5  01CB               	clrf	(_DimmerIntr2^(0+128)+3)
 17317                           
 17318                           ;Dimmer_B1.c: 1834: DimmerIntr2.TuneGO = 1;
 17319  08F6  1749               	bsf	(_DimmerIntr2^(0+128)+1),6
 17320                           
 17321                           ;Dimmer_B1.c: 1835: if (DimmerIntr2.Dimming_Sw == 1) {
 17322  08F7  1E48               	btfss	_DimmerIntr2^(0+128),4
 17323  08F8  2911               	goto	l1039
 17324                           
 17325                           ;Dimmer_B1.c: 1836: if (DimmerIntr2.Dimming_Status == 0) {
 17326  08F9  1AC8               	btfsc	_DimmerIntr2^(0+128),5
 17327  08FA  2908               	goto	l8294
 17328                           
 17329                           ;Dimmer_B1.c: 1837: if (DimmerIntr2.DimmingValue < ((char)(77*0.55))) {
 17330  08FB  302A               	movlw	42
 17331  08FC  024D               	subwf	(_DimmerIntr2^(0+128)+5),w
 17332  08FD  1803               	skipnc
 17333  08FE  2906               	goto	l1041
 17334                           
 17335                           ;Dimmer_B1.c: 1838: DimmerIntr2.DimmingValue++;
 17336  08FF  3001               	movlw	1
 17337  0900  0020               	movlb	0	; select bank0
 17338  0901  00A0               	movwf	??_DimmerLights_DimmingFunction
 17339  0902  0820               	movf	??_DimmerLights_DimmingFunction,w
 17340  0903  0021               	movlb	1	; select bank1
 17341  0904  07CD               	addwf	(_DimmerIntr2^(0+128)+5),f
 17342                           
 17343                           ;Dimmer_B1.c: 1839: } else {
 17344  0905  0008               	return
 17345  0906                     l1041:	
 17346                           
 17347                           ;Dimmer_B1.c: 1840: DimmerIntr2.Dimming_Status = 1;
 17348  0906  16C8               	bsf	_DimmerIntr2^(0+128),5
 17349                           
 17350                           ;Dimmer_B1.c: 1841: }
 17351                           ;Dimmer_B1.c: 1842: } else {
 17352  0907  0008               	return
 17353  0908                     l8294:	
 17354                           
 17355                           ;Dimmer_B1.c: 1843: if (DimmerIntr2.DimmingValue > ((char)(5*0.55))) {
 17356  0908  3003               	movlw	3
 17357  0909  024D               	subwf	(_DimmerIntr2^(0+128)+5),w
 17358  090A  1C03               	skipc
 17359  090B  290F               	goto	l1044
 17360                           
 17361                           ;Dimmer_B1.c: 1844: DimmerIntr2.DimmingValue--;
 17362  090C  3001               	movlw	1
 17363  090D  02CD               	subwf	(_DimmerIntr2^(0+128)+5),f
 17364                           
 17365                           ;Dimmer_B1.c: 1845: } else {
 17366  090E  0008               	return
 17367  090F                     l1044:	
 17368                           
 17369                           ;Dimmer_B1.c: 1846: DimmerIntr2.Dimming_Status = 0;
 17370  090F  12C8               	bcf	_DimmerIntr2^(0+128),5
 17371                           
 17372                           ;Dimmer_B1.c: 1847: }
 17373                           ;Dimmer_B1.c: 1848: }
 17374                           ;Dimmer_B1.c: 1849: } else if (DimmerIntr2.Dimming_RF == 1) {
 17375  0910  0008               	return
 17376  0911                     l1039:	
 17377  0911  1F48               	btfss	_DimmerIntr2^(0+128),6
 17378  0912  0008               	return
 17379                           
 17380                           ;Dimmer_B1.c: 1850: if (DimmerIntr2.DimmingValue < DimmerIntr2.MaxmumValue) {
 17381  0913  084E               	movf	(_DimmerIntr2^(0+128)+6),w
 17382  0914  024D               	subwf	(_DimmerIntr2^(0+128)+5),w
 17383  0915  1803               	skipnc
 17384  0916  291E               	goto	l8302
 17385                           
 17386                           ;Dimmer_B1.c: 1851: DimmerIntr2.DimmingValue++;
 17387  0917  3001               	movlw	1
 17388  0918  0020               	movlb	0	; select bank0
 17389  0919  00A0               	movwf	??_DimmerLights_DimmingFunction
 17390  091A  0820               	movf	??_DimmerLights_DimmingFunction,w
 17391  091B  0021               	movlb	1	; select bank1
 17392  091C  07CD               	addwf	(_DimmerIntr2^(0+128)+5),f
 17393                           
 17394                           ;Dimmer_B1.c: 1852: } else if (DimmerIntr2.DimmingValue > DimmerIntr2.MaxmumValue) {
 17395  091D  0008               	return
 17396  091E                     l8302:	
 17397  091E  084D               	movf	(_DimmerIntr2^(0+128)+5),w
 17398  091F  024E               	subwf	(_DimmerIntr2^(0+128)+6),w
 17399  0920  1803               	skipnc
 17400  0921  2925               	goto	l1050
 17401                           
 17402                           ;Dimmer_B1.c: 1853: DimmerIntr2.DimmingValue--;
 17403  0922  3001               	movlw	1
 17404  0923  02CD               	subwf	(_DimmerIntr2^(0+128)+5),f
 17405                           
 17406                           ;Dimmer_B1.c: 1854: } else {
 17407  0924  0008               	return
 17408  0925                     l1050:	
 17409                           
 17410                           ;Dimmer_B1.c: 1855: DimmerIntr2.Dimming_RF = 0;
 17411  0925  1348               	bcf	_DimmerIntr2^(0+128),6
 17412  0926  0008               	return
 17413  0927                     __end_of_DimmerLights_DimmingFunction:	
 17414                           
 17415                           	psect	text115
 17416  2720                     __ptext115:	
 17417 ;; *************** function _DimmerLights_Initialization *****************
 17418 ;; Defined at:
 17419 ;;		line 676 in file "../src/Dimmer_B1.c"
 17420 ;; Parameters:    Size  Location     Type
 17421 ;;		None
 17422 ;; Auto vars:     Size  Location     Type
 17423 ;;		None
 17424 ;; Return value:  Size  Location     Type
 17425 ;;		None               void
 17426 ;; Registers used:
 17427 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17428 ;; Tracked objects:
 17429 ;;		On entry : 0/0
 17430 ;;		On exit  : 0/0
 17431 ;;		Unchanged: 0/0
 17432 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17436 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17437 ;;Total ram usage:        0 bytes
 17438 ;; Hardware stack levels used:    1
 17439 ;; Hardware stack levels required when called:    9
 17440 ;; This function calls:
 17441 ;;		_DimmerIntr_Initialization
 17442 ;;		_setDimmerLights_Initialization
 17443 ;; This function is called by:
 17444 ;;		_main
 17445 ;; This function uses a non-reentrant model
 17446 ;;
 17447                           
 17448                           
 17449                           ;psect for function _DimmerLights_Initialization
 17450  2720                     _DimmerLights_Initialization:	
 17451                           
 17452                           ;Dimmer_B1.c: 678: setDimmerLights_Initialization(1);
 17453                           
 17454                           ;incstack = 0
 17455                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 17456  2720  3001               	movlw	1
 17457  2721  31A6  2699  31A7   	fcall	_setDimmerLights_Initialization
 17458                           
 17459                           ;Dimmer_B1.c: 682: setDimmerLights_Initialization(2);
 17460  2724  3002               	movlw	2
 17461  2725  31A6  2699  31A7   	fcall	_setDimmerLights_Initialization
 17462                           
 17463                           ;Dimmer_B1.c: 688: DimmerIntr_Initialization();
 17464  2728  318D  25C7         	fcall	_DimmerIntr_Initialization
 17465  272A  0008               	return
 17466  272B                     __end_of_DimmerLights_Initialization:	
 17467                           
 17468                           	psect	text116
 17469  2699                     __ptext116:	
 17470 ;; *************** function _setDimmerLights_Initialization *****************
 17471 ;; Defined at:
 17472 ;;		line 692 in file "../src/Dimmer_B1.c"
 17473 ;; Parameters:    Size  Location     Type
 17474 ;;  lights          1    wreg     unsigned char 
 17475 ;; Auto vars:     Size  Location     Type
 17476 ;;  lights          1    0[COMMON] unsigned char 
 17477 ;; Return value:  Size  Location     Type
 17478 ;;		None               void
 17479 ;; Registers used:
 17480 ;;		wreg
 17481 ;; Tracked objects:
 17482 ;;		On entry : 0/0
 17483 ;;		On exit  : 0/0
 17484 ;;		Unchanged: 0/0
 17485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17489 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17490 ;;Total ram usage:        0 bytes
 17491 ;; Hardware stack levels used:    1
 17492 ;; Hardware stack levels required when called:    5
 17493 ;; This function calls:
 17494 ;;		Nothing
 17495 ;; This function is called by:
 17496 ;;		_DimmerLights_Initialization
 17497 ;; This function uses a non-reentrant model
 17498 ;;
 17499                           
 17500                           
 17501                           ;psect for function _setDimmerLights_Initialization
 17502  2699                     _setDimmerLights_Initialization:	
 17503                           
 17504                           ;incstack = 0
 17505                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 17506  2699  0008               	return
 17507  269A                     __end_of_setDimmerLights_Initialization:	
 17508                           
 17509                           	psect	text117
 17510  0DC7                     __ptext117:	
 17511 ;; *************** function _DimmerIntr_Initialization *****************
 17512 ;; Defined at:
 17513 ;;		line 7 in file "../src/Dimmer_B1.c"
 17514 ;; Parameters:    Size  Location     Type
 17515 ;;		None
 17516 ;; Auto vars:     Size  Location     Type
 17517 ;;		None
 17518 ;; Return value:  Size  Location     Type
 17519 ;;		None               void
 17520 ;; Registers used:
 17521 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17522 ;; Tracked objects:
 17523 ;;		On entry : 0/0
 17524 ;;		On exit  : 0/0
 17525 ;;		Unchanged: 0/0
 17526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17529 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17530 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17531 ;;Total ram usage:        2 bytes
 17532 ;; Hardware stack levels used:    1
 17533 ;; Hardware stack levels required when called:    8
 17534 ;; This function calls:
 17535 ;;		_Division
 17536 ;;		_getDimmerLights_PercentToValue
 17537 ;;		_getDimmerLights_ValueToPercent
 17538 ;;		_setMemory_Modify
 17539 ;; This function is called by:
 17540 ;;		_DimmerLights_Initialization
 17541 ;; This function uses a non-reentrant model
 17542 ;;
 17543                           
 17544                           
 17545                           ;psect for function _DimmerIntr_Initialization
 17546  0DC7                     _DimmerIntr_Initialization:	
 17547                           
 17548                           ;Dimmer_B1.c: 10: DimmerIntr1.TuneTimeValue = 3;
 17549                           
 17550                           ;incstack = 0
 17551                           ; Regs used in _DimmerIntr_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 17552  0DC7  3003               	movlw	3
 17553  0DC8  0020               	movlb	0	; select bank0
 17554  0DC9  00E2               	movwf	??_DimmerIntr_Initialization
 17555  0DCA  0862               	movf	??_DimmerIntr_Initialization,w
 17556  0DCB  0021               	movlb	1	; select bank1
 17557  0DCC  00C0               	movwf	(_DimmerIntr1^(0+128)+4)
 17558                           
 17559                           ;Dimmer_B1.c: 11: DimmerIntr1.MaxmumValue = ((char)(77*0.55));
 17560  0DCD  302A               	movlw	42
 17561  0DCE  0020               	movlb	0	; select bank0
 17562  0DCF  00E2               	movwf	??_DimmerIntr_Initialization
 17563  0DD0  0862               	movf	??_DimmerIntr_Initialization,w
 17564  0DD1  0021               	movlb	1	; select bank1
 17565  0DD2  00C2               	movwf	(_DimmerIntr1^(0+128)+6)
 17566                           
 17567                           ;Dimmer_B1.c: 12: DimmerIntr1.MinimumValue = ((char)(5*0.55));
 17568  0DD3  3002               	movlw	2
 17569  0DD4  0020               	movlb	0	; select bank0
 17570  0DD5  00E2               	movwf	??_DimmerIntr_Initialization
 17571  0DD6  0862               	movf	??_DimmerIntr_Initialization,w
 17572  0DD7  0021               	movlb	1	; select bank1
 17573  0DD8  00C3               	movwf	(_DimmerIntr1^(0+128)+7)
 17574                           
 17575                           ;Dimmer_B1.c: 13: DimmerIntr1.Tune = 0;
 17576  0DD9  10BC               	bcf	_DimmerIntr1^(0+128),1
 17577                           
 17578                           ;Dimmer_B1.c: 17: if (myMain.InitDimmer == 1) {
 17579  0DDA  1E39               	btfss	(_myMain^(0+128)+10),4
 17580  0DDB  2DEB               	goto	l744
 17581                           
 17582                           ;Dimmer_B1.c: 18: product->Data[21] = getDimmerLights_ValueToPercent(((char)(77*0.55)));
 17583  0DDC  302A               	movlw	42
 17584  0DDD  3194  24AC  318D   	fcall	_getDimmerLights_ValueToPercent
 17585  0DE0  0020               	movlb	0	; select bank0
 17586  0DE1  00E2               	movwf	??_DimmerIntr_Initialization
 17587  0DE2  0021               	movlb	1	; select bank1
 17588  0DE3  086E               	movf	_product^(0+128),w
 17589  0DE4  3E15               	addlw	21
 17590  0DE5  0086               	movwf	6
 17591  0DE6  3002               	movlw	2	; select bank4/5
 17592  0DE7  0087               	movwf	7
 17593  0DE8  0020               	movlb	0	; select bank0
 17594  0DE9  0862               	movf	??_DimmerIntr_Initialization,w
 17595  0DEA  0081               	movwf	1
 17596  0DEB                     l744:	
 17597                           
 17598                           ;Dimmer_B1.c: 19: }
 17599                           ;Dimmer_B1.c: 21: DimmerIntr1.DimmingValue = getDimmerLights_PercentToValue(product->Dat
      +                          a[21]);
 17600  0DEB  0021               	movlb	1	; select bank1
 17601  0DEC  086E               	movf	_product^(0+128),w
 17602  0DED  3E15               	addlw	21
 17603  0DEE  0086               	movwf	6
 17604  0DEF  3002               	movlw	2	; select bank4/5
 17605  0DF0  0087               	movwf	7
 17606  0DF1  0801               	movf	1,w
 17607  0DF2  3194  2447  318D   	fcall	_getDimmerLights_PercentToValue
 17608  0DF5  0020               	movlb	0	; select bank0
 17609  0DF6  00E2               	movwf	??_DimmerIntr_Initialization
 17610  0DF7  0862               	movf	??_DimmerIntr_Initialization,w
 17611  0DF8  0021               	movlb	1	; select bank1
 17612  0DF9  00C1               	movwf	(_DimmerIntr1^(0+128)+5)
 17613                           
 17614                           ;Dimmer_B1.c: 28: DimmerIntr1.TuneValue2 = Division(((char)(77*0.55)), 2);
 17615  0DFA  3002               	movlw	2
 17616  0DFB  0020               	movlb	0	; select bank0
 17617  0DFC  00E2               	movwf	??_DimmerIntr_Initialization
 17618  0DFD  0862               	movf	??_DimmerIntr_Initialization,w
 17619  0DFE  00A5               	movwf	Division@num
 17620  0DFF  302A               	movlw	42
 17621  0E00  31A7  27D1  318D   	fcall	_Division
 17622  0E03  0020               	movlb	0	; select bank0
 17623  0E04  00E3               	movwf	??_DimmerIntr_Initialization+1
 17624  0E05  0863               	movf	??_DimmerIntr_Initialization+1,w
 17625  0E06  0021               	movlb	1	; select bank1
 17626  0E07  00C4               	movwf	(_DimmerIntr1^(0+128)+8)
 17627                           
 17628                           ;Dimmer_B1.c: 29: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + (55 - ((char)(77*0.5
      +                          5)));
 17629  0E08  0844               	movf	(_DimmerIntr1^(0+128)+8),w
 17630  0E09  3E0D               	addlw	13
 17631  0E0A  0020               	movlb	0	; select bank0
 17632  0E0B  00E2               	movwf	??_DimmerIntr_Initialization
 17633  0E0C  0862               	movf	??_DimmerIntr_Initialization,w
 17634  0E0D  0021               	movlb	1	; select bank1
 17635  0E0E  00C5               	movwf	(_DimmerIntr1^(0+128)+9)
 17636                           
 17637                           ;Dimmer_B1.c: 30: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + DimmerIntr1.TuneValu
      +                          e2;
 17638  0E0F  0845               	movf	(_DimmerIntr1^(0+128)+9),w
 17639  0E10  0744               	addwf	(_DimmerIntr1^(0+128)+8),w
 17640  0E11  0020               	movlb	0	; select bank0
 17641  0E12  00E2               	movwf	??_DimmerIntr_Initialization
 17642  0E13  0862               	movf	??_DimmerIntr_Initialization,w
 17643  0E14  0021               	movlb	1	; select bank1
 17644  0E15  00C6               	movwf	(_DimmerIntr1^(0+128)+10)
 17645                           
 17646                           ;Dimmer_B1.c: 31: DimmerIntr1.TuneEnd = DimmerIntr1.TuneValue4 + 1;
 17647  0E16  0846               	movf	(_DimmerIntr1^(0+128)+10),w
 17648  0E17  3E01               	addlw	1
 17649  0E18  0020               	movlb	0	; select bank0
 17650  0E19  00E2               	movwf	??_DimmerIntr_Initialization
 17651  0E1A  0862               	movf	??_DimmerIntr_Initialization,w
 17652  0E1B  0021               	movlb	1	; select bank1
 17653  0E1C  00C7               	movwf	(_DimmerIntr1^(0+128)+11)
 17654                           
 17655                           ;Dimmer_B1.c: 37: DimmerIntr2.TuneTimeValue = 3;
 17656  0E1D  3003               	movlw	3
 17657  0E1E  0020               	movlb	0	; select bank0
 17658  0E1F  00E2               	movwf	??_DimmerIntr_Initialization
 17659  0E20  0862               	movf	??_DimmerIntr_Initialization,w
 17660  0E21  0021               	movlb	1	; select bank1
 17661  0E22  00CC               	movwf	(_DimmerIntr2^(0+128)+4)
 17662                           
 17663                           ;Dimmer_B1.c: 38: DimmerIntr2.MaxmumValue = ((char)(77*0.55));
 17664  0E23  302A               	movlw	42
 17665  0E24  0020               	movlb	0	; select bank0
 17666  0E25  00E2               	movwf	??_DimmerIntr_Initialization
 17667  0E26  0862               	movf	??_DimmerIntr_Initialization,w
 17668  0E27  0021               	movlb	1	; select bank1
 17669  0E28  00CE               	movwf	(_DimmerIntr2^(0+128)+6)
 17670                           
 17671                           ;Dimmer_B1.c: 39: DimmerIntr2.MinimumValue = ((char)(5*0.55));
 17672  0E29  3002               	movlw	2
 17673  0E2A  0020               	movlb	0	; select bank0
 17674  0E2B  00E2               	movwf	??_DimmerIntr_Initialization
 17675  0E2C  0862               	movf	??_DimmerIntr_Initialization,w
 17676  0E2D  0021               	movlb	1	; select bank1
 17677  0E2E  00CF               	movwf	(_DimmerIntr2^(0+128)+7)
 17678                           
 17679                           ;Dimmer_B1.c: 40: DimmerIntr2.Tune = 0;
 17680  0E2F  10C8               	bcf	_DimmerIntr2^(0+128),1
 17681                           
 17682                           ;Dimmer_B1.c: 44: if (myMain.InitDimmer == 1) {
 17683  0E30  1E39               	btfss	(_myMain^(0+128)+10),4
 17684  0E31  2E41               	goto	l745
 17685                           
 17686                           ;Dimmer_B1.c: 45: product->Data[22] = getDimmerLights_ValueToPercent(((char)(77*0.55)));
 17687  0E32  302A               	movlw	42
 17688  0E33  3194  24AC  318D   	fcall	_getDimmerLights_ValueToPercent
 17689  0E36  0020               	movlb	0	; select bank0
 17690  0E37  00E2               	movwf	??_DimmerIntr_Initialization
 17691  0E38  0021               	movlb	1	; select bank1
 17692  0E39  086E               	movf	_product^(0+128),w
 17693  0E3A  3E16               	addlw	22
 17694  0E3B  0086               	movwf	6
 17695  0E3C  3002               	movlw	2	; select bank4/5
 17696  0E3D  0087               	movwf	7
 17697  0E3E  0020               	movlb	0	; select bank0
 17698  0E3F  0862               	movf	??_DimmerIntr_Initialization,w
 17699  0E40  0081               	movwf	1
 17700  0E41                     l745:	
 17701                           
 17702                           ;Dimmer_B1.c: 46: }
 17703                           ;Dimmer_B1.c: 48: DimmerIntr2.DimmingValue = getDimmerLights_PercentToValue(product->Dat
      +                          a[22]);
 17704  0E41  0021               	movlb	1	; select bank1
 17705  0E42  086E               	movf	_product^(0+128),w
 17706  0E43  3E16               	addlw	22
 17707  0E44  0086               	movwf	6
 17708  0E45  3002               	movlw	2	; select bank4/5
 17709  0E46  0087               	movwf	7
 17710  0E47  0801               	movf	1,w
 17711  0E48  3194  2447  318D   	fcall	_getDimmerLights_PercentToValue
 17712  0E4B  0020               	movlb	0	; select bank0
 17713  0E4C  00E2               	movwf	??_DimmerIntr_Initialization
 17714  0E4D  0862               	movf	??_DimmerIntr_Initialization,w
 17715  0E4E  0021               	movlb	1	; select bank1
 17716  0E4F  00CD               	movwf	(_DimmerIntr2^(0+128)+5)
 17717                           
 17718                           ;Dimmer_B1.c: 55: DimmerIntr2.TuneValue2 = Division(((char)(77*0.55)), 2);
 17719  0E50  3002               	movlw	2
 17720  0E51  0020               	movlb	0	; select bank0
 17721  0E52  00E2               	movwf	??_DimmerIntr_Initialization
 17722  0E53  0862               	movf	??_DimmerIntr_Initialization,w
 17723  0E54  00A5               	movwf	Division@num
 17724  0E55  302A               	movlw	42
 17725  0E56  31A7  27D1  318D   	fcall	_Division
 17726  0E59  0020               	movlb	0	; select bank0
 17727  0E5A  00E3               	movwf	??_DimmerIntr_Initialization+1
 17728  0E5B  0863               	movf	??_DimmerIntr_Initialization+1,w
 17729  0E5C  0021               	movlb	1	; select bank1
 17730  0E5D  00D0               	movwf	(_DimmerIntr2^(0+128)+8)
 17731                           
 17732                           ;Dimmer_B1.c: 56: DimmerIntr2.TuneValue3 = DimmerIntr2.TuneValue2 + (55 - ((char)(77*0.5
      +                          5)));
 17733  0E5E  0850               	movf	(_DimmerIntr2^(0+128)+8),w
 17734  0E5F  3E0D               	addlw	13
 17735  0E60  0020               	movlb	0	; select bank0
 17736  0E61  00E2               	movwf	??_DimmerIntr_Initialization
 17737  0E62  0862               	movf	??_DimmerIntr_Initialization,w
 17738  0E63  0021               	movlb	1	; select bank1
 17739  0E64  00D1               	movwf	(_DimmerIntr2^(0+128)+9)
 17740                           
 17741                           ;Dimmer_B1.c: 57: DimmerIntr2.TuneValue4 = DimmerIntr2.TuneValue3 + DimmerIntr2.TuneValu
      +                          e2;
 17742  0E65  0851               	movf	(_DimmerIntr2^(0+128)+9),w
 17743  0E66  0750               	addwf	(_DimmerIntr2^(0+128)+8),w
 17744  0E67  0020               	movlb	0	; select bank0
 17745  0E68  00E2               	movwf	??_DimmerIntr_Initialization
 17746  0E69  0862               	movf	??_DimmerIntr_Initialization,w
 17747  0E6A  0021               	movlb	1	; select bank1
 17748  0E6B  00D2               	movwf	(_DimmerIntr2^(0+128)+10)
 17749                           
 17750                           ;Dimmer_B1.c: 58: DimmerIntr2.TuneEnd = DimmerIntr2.TuneValue4 + 1;
 17751  0E6C  0852               	movf	(_DimmerIntr2^(0+128)+10),w
 17752  0E6D  3E01               	addlw	1
 17753  0E6E  0020               	movlb	0	; select bank0
 17754  0E6F  00E2               	movwf	??_DimmerIntr_Initialization
 17755  0E70  0862               	movf	??_DimmerIntr_Initialization,w
 17756  0E71  0021               	movlb	1	; select bank1
 17757  0E72  00D3               	movwf	(_DimmerIntr2^(0+128)+11)
 17758                           
 17759                           ;Dimmer_B1.c: 81: if (myMain.InitDimmer == 1) {
 17760  0E73  1E39               	btfss	(_myMain^(0+128)+10),4
 17761  0E74  0008               	return
 17762                           
 17763                           ;Dimmer_B1.c: 82: myMain.InitDimmer = 0;
 17764  0E75  1239               	bcf	(_myMain^(0+128)+10),4
 17765                           
 17766                           ;Dimmer_B1.c: 83: myMain.SaveDimmer = 1;
 17767  0E76  16B9               	bsf	(_myMain^(0+128)+10),5
 17768                           
 17769                           ;Dimmer_B1.c: 84: setMemory_Modify(1);
 17770  0E77  3001               	movlw	1
 17771  0E78  3199  210D         	fcall	_setMemory_Modify
 17772  0E7A  0008               	return
 17773  0E7B                     __end_of_DimmerIntr_Initialization:	
 17774                           
 17775                           	psect	text118
 17776  190D                     __ptext118:	
 17777 ;; *************** function _setMemory_Modify *****************
 17778 ;; Defined at:
 17779 ;;		line 1083 in file "../src/MCU_B1.c"
 17780 ;; Parameters:    Size  Location     Type
 17781 ;;  command         1    wreg     unsigned char 
 17782 ;; Auto vars:     Size  Location     Type
 17783 ;;  command         1    1[BANK0 ] unsigned char 
 17784 ;; Return value:  Size  Location     Type
 17785 ;;		None               void
 17786 ;; Registers used:
 17787 ;;		wreg, status,2, status,0
 17788 ;; Tracked objects:
 17789 ;;		On entry : 0/0
 17790 ;;		On exit  : 0/0
 17791 ;;		Unchanged: 0/0
 17792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17794 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17795 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17796 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17797 ;;Total ram usage:        2 bytes
 17798 ;; Hardware stack levels used:    1
 17799 ;; Hardware stack levels required when called:    5
 17800 ;; This function calls:
 17801 ;;		Nothing
 17802 ;; This function is called by:
 17803 ;;		_DimmerIntr_Initialization
 17804 ;;		_setDimmerLights_Dimming
 17805 ;;		_setLog_Code
 17806 ;;		_setRFSW_AdjControl
 17807 ;; This function uses a non-reentrant model
 17808 ;;
 17809                           
 17810                           
 17811                           ;psect for function _setMemory_Modify
 17812  190D                     _setMemory_Modify:	
 17813                           
 17814                           ;incstack = 0
 17815                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
 17816                           ;setMemory_Modify@command stored from wreg
 17817  190D  0020               	movlb	0	; select bank0
 17818  190E  00A1               	movwf	setMemory_Modify@command
 17819                           
 17820                           ;MCU_B1.c: 1084: Memory.Modify = command == 1 ? 1 : 0;
 17821  190F  0821               	movf	setMemory_Modify@command,w
 17822  1910  3A01               	xorlw	1
 17823  1911  3000               	movlw	0
 17824  1912  1903               	skipnz
 17825  1913  3001               	movlw	1
 17826  1914  00A0               	movwf	??_setMemory_Modify
 17827  1915  0024               	movlb	4	; select bank4
 17828  1916  0844               	movf	(_Memory^(0+512)+36),w
 17829  1917  0020               	movlb	0	; select bank0
 17830  1918  0620               	xorwf	??_setMemory_Modify,w
 17831  1919  39FE               	andlw	-2
 17832  191A  0620               	xorwf	??_setMemory_Modify,w
 17833  191B  0024               	movlb	4	; select bank4
 17834  191C  00C4               	movwf	(_Memory^(0+512)+36)
 17835                           
 17836                           ;MCU_B1.c: 1085: Memory.Time = 0;
 17837  191D  01C2               	clrf	(_Memory^(0+512)+34)
 17838  191E  01C3               	clrf	((_Memory+1)^(0+512)+34)
 17839  191F  0008               	return
 17840  1920                     __end_of_setMemory_Modify:	
 17841                           
 17842                           	psect	text119
 17843  14AC                     __ptext119:	
 17844 ;; *************** function _getDimmerLights_ValueToPercent *****************
 17845 ;; Defined at:
 17846 ;;		line 1184 in file "../src/Dimmer_B1.c"
 17847 ;; Parameters:    Size  Location     Type
 17848 ;;  value           1    wreg     unsigned char 
 17849 ;; Auto vars:     Size  Location     Type
 17850 ;;  value           1   62[BANK0 ] unsigned char 
 17851 ;;  i               3   63[BANK0 ] float 
 17852 ;; Return value:  Size  Location     Type
 17853 ;;                  1    wreg      unsigned char 
 17854 ;; Registers used:
 17855 ;;		wreg, status,2, status,0, pclath, cstack
 17856 ;; Tracked objects:
 17857 ;;		On entry : 0/0
 17858 ;;		On exit  : 0/0
 17859 ;;		Unchanged: 0/0
 17860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17862 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17863 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17864 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17865 ;;Total ram usage:        6 bytes
 17866 ;; Hardware stack levels used:    1
 17867 ;; Hardware stack levels required when called:    7
 17868 ;; This function calls:
 17869 ;;		___awtoft
 17870 ;;		___ftadd
 17871 ;;		___ftdiv
 17872 ;;		___ftneg
 17873 ;;		___fttol
 17874 ;; This function is called by:
 17875 ;;		_DimmerIntr_Initialization
 17876 ;;		_setDimmerLights_Dimming
 17877 ;; This function uses a non-reentrant model
 17878 ;;
 17879                           
 17880                           
 17881                           ;psect for function _getDimmerLights_ValueToPercent
 17882  14AC                     _getDimmerLights_ValueToPercent:	
 17883                           
 17884                           ;incstack = 0
 17885                           ; Regs used in _getDimmerLights_ValueToPercent: [wreg+status,2+status,0+pclath+cstack]
 17886                           ;getDimmerLights_ValueToPercent@value stored from wreg
 17887  14AC  0020               	movlb	0	; select bank0
 17888  14AD  00DE               	movwf	getDimmerLights_ValueToPercent@value
 17889                           
 17890                           ;Dimmer_B1.c: 1192: float i = ((char)(77*0.55)) - ((char)(5*0.55));
 17891  14AE  3000               	movlw	0
 17892  14AF  00DF               	movwf	getDimmerLights_ValueToPercent@i
 17893  14B0  3020               	movlw	32
 17894  14B1  00E0               	movwf	getDimmerLights_ValueToPercent@i+1
 17895  14B2  3042               	movlw	66
 17896  14B3  00E1               	movwf	getDimmerLights_ValueToPercent@i+2
 17897                           
 17898                           ;Dimmer_B1.c: 1193: i /= 100;
 17899  14B4  3000               	movlw	0
 17900  14B5  00AE               	movwf	___ftdiv@f2
 17901  14B6  30C8               	movlw	200
 17902  14B7  00AF               	movwf	___ftdiv@f2+1
 17903  14B8  3042               	movlw	66
 17904  14B9  00B0               	movwf	___ftdiv@f2+2
 17905  14BA  085F               	movf	getDimmerLights_ValueToPercent@i,w
 17906  14BB  00B1               	movwf	___ftdiv@f1
 17907  14BC  0860               	movf	getDimmerLights_ValueToPercent@i+1,w
 17908  14BD  00B2               	movwf	___ftdiv@f1+1
 17909  14BE  0861               	movf	getDimmerLights_ValueToPercent@i+2,w
 17910  14BF  00B3               	movwf	___ftdiv@f1+2
 17911  14C0  318C  246A  3194   	fcall	___ftdiv
 17912  14C3  0020               	movlb	0	; select bank0
 17913  14C4  082E               	movf	?___ftdiv,w
 17914  14C5  00DF               	movwf	getDimmerLights_ValueToPercent@i
 17915  14C6  082F               	movf	?___ftdiv+1,w
 17916  14C7  00E0               	movwf	getDimmerLights_ValueToPercent@i+1
 17917  14C8  0830               	movf	?___ftdiv+2,w
 17918  14C9  00E1               	movwf	getDimmerLights_ValueToPercent@i+2
 17919                           
 17920                           ;Dimmer_B1.c: 1195: return (char) (100 - ((((char)(77*0.55)) - value) / i));
 17921  14CA  085E               	movf	getDimmerLights_ValueToPercent@value,w
 17922  14CB  00DC               	movwf	??_getDimmerLights_ValueToPercent
 17923  14CC  01DD               	clrf	??_getDimmerLights_ValueToPercent+1
 17924  14CD  09DC               	comf	??_getDimmerLights_ValueToPercent,f
 17925  14CE  09DD               	comf	??_getDimmerLights_ValueToPercent+1,f
 17926  14CF  0ADC               	incf	??_getDimmerLights_ValueToPercent,f
 17927  14D0  1903               	skipnz
 17928  14D1  0ADD               	incf	??_getDimmerLights_ValueToPercent+1,f
 17929  14D2  085C               	movf	??_getDimmerLights_ValueToPercent,w
 17930  14D3  3E2A               	addlw	42
 17931  14D4  00A8               	movwf	___awtoft@c
 17932  14D5  3000               	movlw	0
 17933  14D6  3D5D               	addwfc	??_getDimmerLights_ValueToPercent+1,w
 17934  14D7  00A9               	movwf	___awtoft@c+1
 17935  14D8  319C  24DA  3194   	fcall	___awtoft
 17936  14DB  0020               	movlb	0	; select bank0
 17937  14DC  0828               	movf	?___awtoft,w
 17938  14DD  00B1               	movwf	___ftdiv@f1
 17939  14DE  0829               	movf	?___awtoft+1,w
 17940  14DF  00B2               	movwf	___ftdiv@f1+1
 17941  14E0  082A               	movf	?___awtoft+2,w
 17942  14E1  00B3               	movwf	___ftdiv@f1+2
 17943  14E2  085F               	movf	getDimmerLights_ValueToPercent@i,w
 17944  14E3  00AE               	movwf	___ftdiv@f2
 17945  14E4  0860               	movf	getDimmerLights_ValueToPercent@i+1,w
 17946  14E5  00AF               	movwf	___ftdiv@f2+1
 17947  14E6  0861               	movf	getDimmerLights_ValueToPercent@i+2,w
 17948  14E7  00B0               	movwf	___ftdiv@f2+2
 17949  14E8  318C  246A  3194   	fcall	___ftdiv
 17950  14EB  0020               	movlb	0	; select bank0
 17951  14EC  082E               	movf	?___ftdiv,w
 17952  14ED  00BE               	movwf	___ftneg@f1
 17953  14EE  082F               	movf	?___ftdiv+1,w
 17954  14EF  00BF               	movwf	___ftneg@f1+1
 17955  14F0  0830               	movf	?___ftdiv+2,w
 17956  14F1  00C0               	movwf	___ftneg@f1+2
 17957  14F2  31A7  270E  3194   	fcall	___ftneg
 17958  14F5  0020               	movlb	0	; select bank0
 17959  14F6  083E               	movf	?___ftneg,w
 17960  14F7  00C4               	movwf	___ftadd@f2
 17961  14F8  083F               	movf	?___ftneg+1,w
 17962  14F9  00C5               	movwf	___ftadd@f2+1
 17963  14FA  0840               	movf	?___ftneg+2,w
 17964  14FB  00C6               	movwf	___ftadd@f2+2
 17965  14FC  3000               	movlw	0
 17966  14FD  00C1               	movwf	___ftadd@f1
 17967  14FE  30C8               	movlw	200
 17968  14FF  00C2               	movwf	___ftadd@f1+1
 17969  1500  3042               	movlw	66
 17970  1501  00C3               	movwf	___ftadd@f1+2
 17971  1502  3183  238C  3194   	fcall	___ftadd
 17972  1505  0020               	movlb	0	; select bank0
 17973  1506  0841               	movf	?___ftadd,w
 17974  1507  00CE               	movwf	___fttol@f1
 17975  1508  0842               	movf	?___ftadd+1,w
 17976  1509  00CF               	movwf	___fttol@f1+1
 17977  150A  0843               	movf	?___ftadd+2,w
 17978  150B  00D0               	movwf	___fttol@f1+2
 17979  150C  318A  222D         	fcall	___fttol
 17980  150E  0020               	movlb	0	; select bank0
 17981  150F  084E               	movf	?___fttol,w
 17982  1510  0008               	return
 17983  1511                     __end_of_getDimmerLights_ValueToPercent:	
 17984                           
 17985                           	psect	text120
 17986  1447                     __ptext120:	
 17987 ;; *************** function _getDimmerLights_PercentToValue *****************
 17988 ;; Defined at:
 17989 ;;		line 1168 in file "../src/Dimmer_B1.c"
 17990 ;; Parameters:    Size  Location     Type
 17991 ;;  value           1    wreg     unsigned char 
 17992 ;; Auto vars:     Size  Location     Type
 17993 ;;  value           1   62[BANK0 ] unsigned char 
 17994 ;;  i               3   63[BANK0 ] float 
 17995 ;; Return value:  Size  Location     Type
 17996 ;;                  1    wreg      unsigned char 
 17997 ;; Registers used:
 17998 ;;		wreg, status,2, status,0, pclath, cstack
 17999 ;; Tracked objects:
 18000 ;;		On entry : 0/0
 18001 ;;		On exit  : 0/0
 18002 ;;		Unchanged: 0/0
 18003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18005 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18006 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18007 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18008 ;;Total ram usage:        6 bytes
 18009 ;; Hardware stack levels used:    1
 18010 ;; Hardware stack levels required when called:    7
 18011 ;; This function calls:
 18012 ;;		___awtoft
 18013 ;;		___ftadd
 18014 ;;		___ftdiv
 18015 ;;		___ftmul
 18016 ;;		___ftneg
 18017 ;;		___fttol
 18018 ;; This function is called by:
 18019 ;;		_DimmerIntr_Initialization
 18020 ;;		_setDimmerLights_OnOff
 18021 ;;		_setRFSW_AdjControl
 18022 ;; This function uses a non-reentrant model
 18023 ;;
 18024                           
 18025                           
 18026                           ;psect for function _getDimmerLights_PercentToValue
 18027  1447                     _getDimmerLights_PercentToValue:	
 18028                           
 18029                           ;incstack = 0
 18030                           ; Regs used in _getDimmerLights_PercentToValue: [wreg+status,2+status,0+pclath+cstack]
 18031                           ;getDimmerLights_PercentToValue@value stored from wreg
 18032  1447  0020               	movlb	0	; select bank0
 18033  1448  00DE               	movwf	getDimmerLights_PercentToValue@value
 18034                           
 18035                           ;Dimmer_B1.c: 1176: float i = ((char)(77*0.55)) - ((char)(5*0.55));
 18036  1449  3000               	movlw	0
 18037  144A  00DF               	movwf	getDimmerLights_PercentToValue@i
 18038  144B  3020               	movlw	32
 18039  144C  00E0               	movwf	getDimmerLights_PercentToValue@i+1
 18040  144D  3042               	movlw	66
 18041  144E  00E1               	movwf	getDimmerLights_PercentToValue@i+2
 18042                           
 18043                           ;Dimmer_B1.c: 1177: i /= 100;
 18044  144F  3000               	movlw	0
 18045  1450  00AE               	movwf	___ftdiv@f2
 18046  1451  30C8               	movlw	200
 18047  1452  00AF               	movwf	___ftdiv@f2+1
 18048  1453  3042               	movlw	66
 18049  1454  00B0               	movwf	___ftdiv@f2+2
 18050  1455  085F               	movf	getDimmerLights_PercentToValue@i,w
 18051  1456  00B1               	movwf	___ftdiv@f1
 18052  1457  0860               	movf	getDimmerLights_PercentToValue@i+1,w
 18053  1458  00B2               	movwf	___ftdiv@f1+1
 18054  1459  0861               	movf	getDimmerLights_PercentToValue@i+2,w
 18055  145A  00B3               	movwf	___ftdiv@f1+2
 18056  145B  318C  246A  3194   	fcall	___ftdiv
 18057  145E  0020               	movlb	0	; select bank0
 18058  145F  082E               	movf	?___ftdiv,w
 18059  1460  00DF               	movwf	getDimmerLights_PercentToValue@i
 18060  1461  082F               	movf	?___ftdiv+1,w
 18061  1462  00E0               	movwf	getDimmerLights_PercentToValue@i+1
 18062  1463  0830               	movf	?___ftdiv+2,w
 18063  1464  00E1               	movwf	getDimmerLights_PercentToValue@i+2
 18064                           
 18065                           ;Dimmer_B1.c: 1179: return (char) (((char)(77*0.55)) - ((100 - value) * i));
 18066  1465  085E               	movf	getDimmerLights_PercentToValue@value,w
 18067  1466  00DC               	movwf	??_getDimmerLights_PercentToValue
 18068  1467  01DD               	clrf	??_getDimmerLights_PercentToValue+1
 18069  1468  09DC               	comf	??_getDimmerLights_PercentToValue,f
 18070  1469  09DD               	comf	??_getDimmerLights_PercentToValue+1,f
 18071  146A  0ADC               	incf	??_getDimmerLights_PercentToValue,f
 18072  146B  1903               	skipnz
 18073  146C  0ADD               	incf	??_getDimmerLights_PercentToValue+1,f
 18074  146D  085C               	movf	??_getDimmerLights_PercentToValue,w
 18075  146E  3E64               	addlw	100
 18076  146F  00A8               	movwf	___awtoft@c
 18077  1470  3000               	movlw	0
 18078  1471  3D5D               	addwfc	??_getDimmerLights_PercentToValue+1,w
 18079  1472  00A9               	movwf	___awtoft@c+1
 18080  1473  319C  24DA  3194   	fcall	___awtoft
 18081  1476  0020               	movlb	0	; select bank0
 18082  1477  0828               	movf	?___awtoft,w
 18083  1478  00B1               	movwf	___ftmul@f2
 18084  1479  0829               	movf	?___awtoft+1,w
 18085  147A  00B2               	movwf	___ftmul@f2+1
 18086  147B  082A               	movf	?___awtoft+2,w
 18087  147C  00B3               	movwf	___ftmul@f2+2
 18088  147D  085F               	movf	getDimmerLights_PercentToValue@i,w
 18089  147E  00AE               	movwf	___ftmul@f1
 18090  147F  0860               	movf	getDimmerLights_PercentToValue@i+1,w
 18091  1480  00AF               	movwf	___ftmul@f1+1
 18092  1481  0861               	movf	getDimmerLights_PercentToValue@i+2,w
 18093  1482  00B0               	movwf	___ftmul@f1+2
 18094  1483  318D  2513  3194   	fcall	___ftmul
 18095  1486  0020               	movlb	0	; select bank0
 18096  1487  082E               	movf	?___ftmul,w
 18097  1488  00BE               	movwf	___ftneg@f1
 18098  1489  082F               	movf	?___ftmul+1,w
 18099  148A  00BF               	movwf	___ftneg@f1+1
 18100  148B  0830               	movf	?___ftmul+2,w
 18101  148C  00C0               	movwf	___ftneg@f1+2
 18102  148D  31A7  270E  3194   	fcall	___ftneg
 18103  1490  0020               	movlb	0	; select bank0
 18104  1491  083E               	movf	?___ftneg,w
 18105  1492  00C4               	movwf	___ftadd@f2
 18106  1493  083F               	movf	?___ftneg+1,w
 18107  1494  00C5               	movwf	___ftadd@f2+1
 18108  1495  0840               	movf	?___ftneg+2,w
 18109  1496  00C6               	movwf	___ftadd@f2+2
 18110  1497  3000               	movlw	0
 18111  1498  00C1               	movwf	___ftadd@f1
 18112  1499  3028               	movlw	40
 18113  149A  00C2               	movwf	___ftadd@f1+1
 18114  149B  3042               	movlw	66
 18115  149C  00C3               	movwf	___ftadd@f1+2
 18116  149D  3183  238C  3194   	fcall	___ftadd
 18117  14A0  0020               	movlb	0	; select bank0
 18118  14A1  0841               	movf	?___ftadd,w
 18119  14A2  00CE               	movwf	___fttol@f1
 18120  14A3  0842               	movf	?___ftadd+1,w
 18121  14A4  00CF               	movwf	___fttol@f1+1
 18122  14A5  0843               	movf	?___ftadd+2,w
 18123  14A6  00D0               	movwf	___fttol@f1+2
 18124  14A7  318A  222D         	fcall	___fttol
 18125  14A9  0020               	movlb	0	; select bank0
 18126  14AA  084E               	movf	?___fttol,w
 18127  14AB  0008               	return
 18128  14AC                     __end_of_getDimmerLights_PercentToValue:	
 18129                           
 18130                           	psect	text121
 18131  0A2D                     __ptext121:	
 18132 ;; *************** function ___fttol *****************
 18133 ;; Defined at:
 18134 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 18135 ;; Parameters:    Size  Location     Type
 18136 ;;  f1              3   46[BANK0 ] float 
 18137 ;; Auto vars:     Size  Location     Type
 18138 ;;  lval            4   55[BANK0 ] unsigned long 
 18139 ;;  exp1            1   59[BANK0 ] unsigned char 
 18140 ;;  sign1           1   54[BANK0 ] unsigned char 
 18141 ;; Return value:  Size  Location     Type
 18142 ;;                  4   46[BANK0 ] long 
 18143 ;; Registers used:
 18144 ;;		wreg, status,2, status,0
 18145 ;; Tracked objects:
 18146 ;;		On entry : 0/0
 18147 ;;		On exit  : 0/0
 18148 ;;		Unchanged: 0/0
 18149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18150 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18151 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18152 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18153 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18154 ;;Total ram usage:       14 bytes
 18155 ;; Hardware stack levels used:    1
 18156 ;; Hardware stack levels required when called:    5
 18157 ;; This function calls:
 18158 ;;		Nothing
 18159 ;; This function is called by:
 18160 ;;		_getDimmerLights_PercentToValue
 18161 ;;		_getDimmerLights_ValueToPercent
 18162 ;; This function uses a non-reentrant model
 18163 ;;
 18164                           
 18165                           
 18166                           ;psect for function ___fttol
 18167  0A2D                     ___fttol:	
 18168                           
 18169                           ;incstack = 0
 18170                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 18171  0A2D  0020               	movlb	0	; select bank0
 18172  0A2E  084E               	movf	___fttol@f1,w
 18173  0A2F  00D2               	movwf	??___fttol
 18174  0A30  084F               	movf	___fttol@f1+1,w
 18175  0A31  00D3               	movwf	??___fttol+1
 18176  0A32  0850               	movf	___fttol@f1+2,w
 18177  0A33  00D4               	movwf	??___fttol+2
 18178  0A34  1003               	clrc
 18179  0A35  0D53               	rlf	??___fttol+1,w
 18180  0A36  0D54               	rlf	??___fttol+2,w
 18181  0A37  00D5               	movwf	??___fttol+3
 18182  0A38  0855               	movf	??___fttol+3,w
 18183  0A39  00DB               	movwf	___fttol@exp1
 18184  0A3A  08DB               	movf	___fttol@exp1,f
 18185  0A3B  1D03               	skipz
 18186  0A3C  2A46               	goto	l6864
 18187  0A3D  3000               	movlw	0
 18188  0A3E  00D1               	movwf	?___fttol+3
 18189  0A3F  3000               	movlw	0
 18190  0A40  00D0               	movwf	?___fttol+2
 18191  0A41  3000               	movlw	0
 18192  0A42  00CF               	movwf	?___fttol+1
 18193  0A43  3000               	movlw	0
 18194  0A44  00CE               	movwf	?___fttol
 18195  0A45  0008               	return
 18196  0A46                     l6864:	
 18197  0A46  084E               	movf	___fttol@f1,w
 18198  0A47  00D2               	movwf	??___fttol
 18199  0A48  084F               	movf	___fttol@f1+1,w
 18200  0A49  00D3               	movwf	??___fttol+1
 18201  0A4A  0850               	movf	___fttol@f1+2,w
 18202  0A4B  00D4               	movwf	??___fttol+2
 18203  0A4C  3017               	movlw	23
 18204  0A4D                     u6085:	
 18205  0A4D  36D4               	lsrf	??___fttol+2,f
 18206  0A4E  0CD3               	rrf	??___fttol+1,f
 18207  0A4F  0CD2               	rrf	??___fttol,f
 18208  0A50  0B89               	decfsz	9,f
 18209  0A51  2A4D               	goto	u6085
 18210  0A52  0852               	movf	??___fttol,w
 18211  0A53  00D5               	movwf	??___fttol+3
 18212  0A54  0855               	movf	??___fttol+3,w
 18213  0A55  00D6               	movwf	___fttol@sign1
 18214  0A56  17CF               	bsf	___fttol@f1+1,7
 18215  0A57  30FF               	movlw	255
 18216  0A58  05CE               	andwf	___fttol@f1,f
 18217  0A59  30FF               	movlw	255
 18218  0A5A  05CF               	andwf	___fttol@f1+1,f
 18219  0A5B  3000               	movlw	0
 18220  0A5C  05D0               	andwf	___fttol@f1+2,f
 18221  0A5D  084E               	movf	___fttol@f1,w
 18222  0A5E  00D7               	movwf	___fttol@lval
 18223  0A5F  084F               	movf	___fttol@f1+1,w
 18224  0A60  00D8               	movwf	___fttol@lval+1
 18225  0A61  0850               	movf	___fttol@f1+2,w
 18226  0A62  00D9               	movwf	___fttol@lval+2
 18227  0A63  01DA               	clrf	___fttol@lval+3
 18228  0A64  308E               	movlw	142
 18229  0A65  02DB               	subwf	___fttol@exp1,f
 18230  0A66  1FDB               	btfss	___fttol@exp1,7
 18231  0A67  2A84               	goto	l6884
 18232  0A68  085B               	movf	___fttol@exp1,w
 18233  0A69  3A80               	xorlw	128
 18234  0A6A  3E8F               	addlw	143
 18235  0A6B  1803               	skipnc
 18236  0A6C  2A76               	goto	l6882
 18237  0A6D  3000               	movlw	0
 18238  0A6E  00D1               	movwf	?___fttol+3
 18239  0A6F  3000               	movlw	0
 18240  0A70  00D0               	movwf	?___fttol+2
 18241  0A71  3000               	movlw	0
 18242  0A72  00CF               	movwf	?___fttol+1
 18243  0A73  3000               	movlw	0
 18244  0A74  00CE               	movwf	?___fttol
 18245  0A75  0008               	return
 18246  0A76                     l6882:	
 18247  0A76  3001               	movlw	1
 18248  0A77                     u6115:	
 18249  0A77  36DA               	lsrf	___fttol@lval+3,f
 18250  0A78  0CD9               	rrf	___fttol@lval+2,f
 18251  0A79  0CD8               	rrf	___fttol@lval+1,f
 18252  0A7A  0CD7               	rrf	___fttol@lval,f
 18253  0A7B  0B89               	decfsz	9,f
 18254  0A7C  2A77               	goto	u6115
 18255  0A7D  3001               	movlw	1
 18256  0A7E  00D2               	movwf	??___fttol
 18257  0A7F  0852               	movf	??___fttol,w
 18258  0A80  07DB               	addwf	___fttol@exp1,f
 18259  0A81  1903               	btfsc	3,2
 18260  0A82  2A9D               	goto	l6894
 18261  0A83  2A76               	goto	l6882
 18262  0A84                     l6884:	
 18263  0A84  3018               	movlw	24
 18264  0A85  025B               	subwf	___fttol@exp1,w
 18265  0A86  1C03               	skipc
 18266  0A87  2A9A               	goto	l6892
 18267  0A88  3000               	movlw	0
 18268  0A89  00D1               	movwf	?___fttol+3
 18269  0A8A  3000               	movlw	0
 18270  0A8B  00D0               	movwf	?___fttol+2
 18271  0A8C  3000               	movlw	0
 18272  0A8D  00CF               	movwf	?___fttol+1
 18273  0A8E  3000               	movlw	0
 18274  0A8F  00CE               	movwf	?___fttol
 18275  0A90  0008               	return
 18276  0A91                     l6890:	
 18277  0A91  3001               	movlw	1
 18278  0A92                     u6145:	
 18279  0A92  35D7               	lslf	___fttol@lval,f
 18280  0A93  0DD8               	rlf	___fttol@lval+1,f
 18281  0A94  0DD9               	rlf	___fttol@lval+2,f
 18282  0A95  0DDA               	rlf	___fttol@lval+3,f
 18283  0A96  0B89               	decfsz	9,f
 18284  0A97  2A92               	goto	u6145
 18285  0A98  3001               	movlw	1
 18286  0A99  02DB               	subwf	___fttol@exp1,f
 18287  0A9A                     l6892:	
 18288  0A9A  08DB               	movf	___fttol@exp1,f
 18289  0A9B  1D03               	skipz
 18290  0A9C  2A91               	goto	l6890
 18291  0A9D                     l6894:	
 18292  0A9D  0856               	movf	___fttol@sign1,w
 18293  0A9E  1903               	btfsc	3,2
 18294  0A9F  2AAB               	goto	l6898
 18295  0AA0  09D7               	comf	___fttol@lval,f
 18296  0AA1  09D8               	comf	___fttol@lval+1,f
 18297  0AA2  09D9               	comf	___fttol@lval+2,f
 18298  0AA3  09DA               	comf	___fttol@lval+3,f
 18299  0AA4  0AD7               	incf	___fttol@lval,f
 18300  0AA5  1903               	skipnz
 18301  0AA6  0AD8               	incf	___fttol@lval+1,f
 18302  0AA7  1903               	skipnz
 18303  0AA8  0AD9               	incf	___fttol@lval+2,f
 18304  0AA9  1903               	skipnz
 18305  0AAA  0ADA               	incf	___fttol@lval+3,f
 18306  0AAB                     l6898:	
 18307  0AAB  085A               	movf	___fttol@lval+3,w
 18308  0AAC  00D1               	movwf	?___fttol+3
 18309  0AAD  0859               	movf	___fttol@lval+2,w
 18310  0AAE  00D0               	movwf	?___fttol+2
 18311  0AAF  0858               	movf	___fttol@lval+1,w
 18312  0AB0  00CF               	movwf	?___fttol+1
 18313  0AB1  0857               	movf	___fttol@lval,w
 18314  0AB2  00CE               	movwf	?___fttol
 18315  0AB3  0008               	return
 18316  0AB4                     __end_of___fttol:	
 18317                           
 18318                           	psect	text122
 18319  270E                     __ptext122:	
 18320 ;; *************** function ___ftneg *****************
 18321 ;; Defined at:
 18322 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 18323 ;; Parameters:    Size  Location     Type
 18324 ;;  f1              3   30[BANK0 ] float 
 18325 ;; Auto vars:     Size  Location     Type
 18326 ;;		None
 18327 ;; Return value:  Size  Location     Type
 18328 ;;                  3   30[BANK0 ] float 
 18329 ;; Registers used:
 18330 ;;		wreg
 18331 ;; Tracked objects:
 18332 ;;		On entry : 0/0
 18333 ;;		On exit  : 0/0
 18334 ;;		Unchanged: 0/0
 18335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18336 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18339 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18340 ;;Total ram usage:        3 bytes
 18341 ;; Hardware stack levels used:    1
 18342 ;; Hardware stack levels required when called:    5
 18343 ;; This function calls:
 18344 ;;		Nothing
 18345 ;; This function is called by:
 18346 ;;		_getDimmerLights_PercentToValue
 18347 ;;		_getDimmerLights_ValueToPercent
 18348 ;; This function uses a non-reentrant model
 18349 ;;
 18350                           
 18351                           
 18352                           ;psect for function ___ftneg
 18353  270E                     ___ftneg:	
 18354                           
 18355                           ;incstack = 0
 18356                           ; Regs used in ___ftneg: [wreg]
 18357  270E  0020               	movlb	0	; select bank0
 18358  270F  0840               	movf	___ftneg@f1+2,w
 18359  2710  043F               	iorwf	___ftneg@f1+1,w
 18360  2711  043E               	iorwf	___ftneg@f1,w
 18361  2712  1903               	skipnz
 18362  2713  0008               	return
 18363  2714  3080               	movlw	128
 18364  2715  06C0               	xorwf	___ftneg@f1+2,f
 18365  2716  0008               	return
 18366  2717                     __end_of___ftneg:	
 18367                           
 18368                           	psect	text123
 18369  0D13                     __ptext123:	
 18370 ;; *************** function ___ftmul *****************
 18371 ;; Defined at:
 18372 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 18373 ;; Parameters:    Size  Location     Type
 18374 ;;  f1              3   14[BANK0 ] float 
 18375 ;;  f2              3   17[BANK0 ] float 
 18376 ;; Auto vars:     Size  Location     Type
 18377 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
 18378 ;;  sign            1   29[BANK0 ] unsigned char 
 18379 ;;  cntr            1   28[BANK0 ] unsigned char 
 18380 ;;  exp             1   24[BANK0 ] unsigned char 
 18381 ;; Return value:  Size  Location     Type
 18382 ;;                  3   14[BANK0 ] float 
 18383 ;; Registers used:
 18384 ;;		wreg, status,2, status,0, pclath, cstack
 18385 ;; Tracked objects:
 18386 ;;		On entry : 0/0
 18387 ;;		On exit  : 0/0
 18388 ;;		Unchanged: 0/0
 18389 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18390 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18391 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18392 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18393 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18394 ;;Total ram usage:       16 bytes
 18395 ;; Hardware stack levels used:    1
 18396 ;; Hardware stack levels required when called:    6
 18397 ;; This function calls:
 18398 ;;		___ftpack
 18399 ;; This function is called by:
 18400 ;;		_getDimmerLights_PercentToValue
 18401 ;; This function uses a non-reentrant model
 18402 ;;
 18403                           
 18404                           
 18405                           ;psect for function ___ftmul
 18406  0D13                     ___ftmul:	
 18407                           
 18408                           ;incstack = 0
 18409                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 18410  0D13  0020               	movlb	0	; select bank0
 18411  0D14  082E               	movf	___ftmul@f1,w
 18412  0D15  00B4               	movwf	??___ftmul
 18413  0D16  082F               	movf	___ftmul@f1+1,w
 18414  0D17  00B5               	movwf	??___ftmul+1
 18415  0D18  0830               	movf	___ftmul@f1+2,w
 18416  0D19  00B6               	movwf	??___ftmul+2
 18417  0D1A  1003               	clrc
 18418  0D1B  0D35               	rlf	??___ftmul+1,w
 18419  0D1C  0D36               	rlf	??___ftmul+2,w
 18420  0D1D  00B7               	movwf	??___ftmul+3
 18421  0D1E  0837               	movf	??___ftmul+3,w
 18422  0D1F  00B8               	movwf	___ftmul@exp
 18423  0D20  08B8               	movf	___ftmul@exp,f
 18424  0D21  1D03               	skipz
 18425  0D22  2D2A               	goto	l6806
 18426  0D23  3000               	movlw	0
 18427  0D24  00AE               	movwf	?___ftmul
 18428  0D25  3000               	movlw	0
 18429  0D26  00AF               	movwf	?___ftmul+1
 18430  0D27  3000               	movlw	0
 18431  0D28  00B0               	movwf	?___ftmul+2
 18432  0D29  0008               	return
 18433  0D2A                     l6806:	
 18434  0D2A  0831               	movf	___ftmul@f2,w
 18435  0D2B  00B4               	movwf	??___ftmul
 18436  0D2C  0832               	movf	___ftmul@f2+1,w
 18437  0D2D  00B5               	movwf	??___ftmul+1
 18438  0D2E  0833               	movf	___ftmul@f2+2,w
 18439  0D2F  00B6               	movwf	??___ftmul+2
 18440  0D30  1003               	clrc
 18441  0D31  0D35               	rlf	??___ftmul+1,w
 18442  0D32  0D36               	rlf	??___ftmul+2,w
 18443  0D33  00B7               	movwf	??___ftmul+3
 18444  0D34  0837               	movf	??___ftmul+3,w
 18445  0D35  00BD               	movwf	___ftmul@sign
 18446  0D36  08BD               	movf	___ftmul@sign,f
 18447  0D37  1D03               	skipz
 18448  0D38  2D40               	goto	l6812
 18449  0D39  3000               	movlw	0
 18450  0D3A  00AE               	movwf	?___ftmul
 18451  0D3B  3000               	movlw	0
 18452  0D3C  00AF               	movwf	?___ftmul+1
 18453  0D3D  3000               	movlw	0
 18454  0D3E  00B0               	movwf	?___ftmul+2
 18455  0D3F  0008               	return
 18456  0D40                     l6812:	
 18457  0D40  083D               	movf	___ftmul@sign,w
 18458  0D41  3E7B               	addlw	123
 18459  0D42  00B4               	movwf	??___ftmul
 18460  0D43  0834               	movf	??___ftmul,w
 18461  0D44  07B8               	addwf	___ftmul@exp,f
 18462  0D45  082E               	movf	___ftmul@f1,w
 18463  0D46  00B4               	movwf	??___ftmul
 18464  0D47  082F               	movf	___ftmul@f1+1,w
 18465  0D48  00B5               	movwf	??___ftmul+1
 18466  0D49  0830               	movf	___ftmul@f1+2,w
 18467  0D4A  00B6               	movwf	??___ftmul+2
 18468  0D4B  3010               	movlw	16
 18469  0D4C                     u5965:	
 18470  0D4C  36B6               	lsrf	??___ftmul+2,f
 18471  0D4D  0CB5               	rrf	??___ftmul+1,f
 18472  0D4E  0CB4               	rrf	??___ftmul,f
 18473  0D4F  0B89               	decfsz	9,f
 18474  0D50  2D4C               	goto	u5965
 18475  0D51  0834               	movf	??___ftmul,w
 18476  0D52  00B7               	movwf	??___ftmul+3
 18477  0D53  0837               	movf	??___ftmul+3,w
 18478  0D54  00BD               	movwf	___ftmul@sign
 18479  0D55  0831               	movf	___ftmul@f2,w
 18480  0D56  00B4               	movwf	??___ftmul
 18481  0D57  0832               	movf	___ftmul@f2+1,w
 18482  0D58  00B5               	movwf	??___ftmul+1
 18483  0D59  0833               	movf	___ftmul@f2+2,w
 18484  0D5A  00B6               	movwf	??___ftmul+2
 18485  0D5B  3010               	movlw	16
 18486  0D5C                     u5975:	
 18487  0D5C  36B6               	lsrf	??___ftmul+2,f
 18488  0D5D  0CB5               	rrf	??___ftmul+1,f
 18489  0D5E  0CB4               	rrf	??___ftmul,f
 18490  0D5F  0B89               	decfsz	9,f
 18491  0D60  2D5C               	goto	u5975
 18492  0D61  0834               	movf	??___ftmul,w
 18493  0D62  00B7               	movwf	??___ftmul+3
 18494  0D63  0837               	movf	??___ftmul+3,w
 18495  0D64  06BD               	xorwf	___ftmul@sign,f
 18496  0D65  3080               	movlw	128
 18497  0D66  00B4               	movwf	??___ftmul
 18498  0D67  0834               	movf	??___ftmul,w
 18499  0D68  05BD               	andwf	___ftmul@sign,f
 18500  0D69  17AF               	bsf	___ftmul@f1+1,7
 18501  0D6A  17B2               	bsf	___ftmul@f2+1,7
 18502  0D6B  30FF               	movlw	255
 18503  0D6C  05B1               	andwf	___ftmul@f2,f
 18504  0D6D  30FF               	movlw	255
 18505  0D6E  05B2               	andwf	___ftmul@f2+1,f
 18506  0D6F  3000               	movlw	0
 18507  0D70  05B3               	andwf	___ftmul@f2+2,f
 18508  0D71  3000               	movlw	0
 18509  0D72  00B9               	movwf	___ftmul@f3_as_product
 18510  0D73  3000               	movlw	0
 18511  0D74  00BA               	movwf	___ftmul@f3_as_product+1
 18512  0D75  3000               	movlw	0
 18513  0D76  00BB               	movwf	___ftmul@f3_as_product+2
 18514  0D77  3007               	movlw	7
 18515  0D78  00B4               	movwf	??___ftmul
 18516  0D79  0834               	movf	??___ftmul,w
 18517  0D7A  00BC               	movwf	___ftmul@cntr
 18518  0D7B                     l6824:	
 18519  0D7B  1C2E               	btfss	___ftmul@f1,0
 18520  0D7C  2D83               	goto	l6828
 18521  0D7D  0831               	movf	___ftmul@f2,w
 18522  0D7E  07B9               	addwf	___ftmul@f3_as_product,f
 18523  0D7F  0832               	movf	___ftmul@f2+1,w
 18524  0D80  3DBA               	addwfc	___ftmul@f3_as_product+1,f
 18525  0D81  0833               	movf	___ftmul@f2+2,w
 18526  0D82  3DBB               	addwfc	___ftmul@f3_as_product+2,f
 18527  0D83                     l6828:	
 18528  0D83  3001               	movlw	1
 18529  0D84                     u5995:	
 18530  0D84  36B0               	lsrf	___ftmul@f1+2,f
 18531  0D85  0CAF               	rrf	___ftmul@f1+1,f
 18532  0D86  0CAE               	rrf	___ftmul@f1,f
 18533  0D87  0B89               	decfsz	9,f
 18534  0D88  2D84               	goto	u5995
 18535  0D89  3001               	movlw	1
 18536  0D8A                     u6005:	
 18537  0D8A  35B1               	lslf	___ftmul@f2,f
 18538  0D8B  0DB2               	rlf	___ftmul@f2+1,f
 18539  0D8C  0DB3               	rlf	___ftmul@f2+2,f
 18540  0D8D  0B89               	decfsz	9,f
 18541  0D8E  2D8A               	goto	u6005
 18542  0D8F  3001               	movlw	1
 18543  0D90  02BC               	subwf	___ftmul@cntr,f
 18544  0D91  1D03               	btfss	3,2
 18545  0D92  2D7B               	goto	l6824
 18546  0D93  3009               	movlw	9
 18547  0D94  00B4               	movwf	??___ftmul
 18548  0D95  0834               	movf	??___ftmul,w
 18549  0D96  00BC               	movwf	___ftmul@cntr
 18550  0D97                     l6836:	
 18551  0D97  1C2E               	btfss	___ftmul@f1,0
 18552  0D98  2D9F               	goto	l6840
 18553  0D99  0831               	movf	___ftmul@f2,w
 18554  0D9A  07B9               	addwf	___ftmul@f3_as_product,f
 18555  0D9B  0832               	movf	___ftmul@f2+1,w
 18556  0D9C  3DBA               	addwfc	___ftmul@f3_as_product+1,f
 18557  0D9D  0833               	movf	___ftmul@f2+2,w
 18558  0D9E  3DBB               	addwfc	___ftmul@f3_as_product+2,f
 18559  0D9F                     l6840:	
 18560  0D9F  3001               	movlw	1
 18561  0DA0                     u6035:	
 18562  0DA0  36B0               	lsrf	___ftmul@f1+2,f
 18563  0DA1  0CAF               	rrf	___ftmul@f1+1,f
 18564  0DA2  0CAE               	rrf	___ftmul@f1,f
 18565  0DA3  0B89               	decfsz	9,f
 18566  0DA4  2DA0               	goto	u6035
 18567  0DA5  3001               	movlw	1
 18568  0DA6                     u6045:	
 18569  0DA6  36BB               	lsrf	___ftmul@f3_as_product+2,f
 18570  0DA7  0CBA               	rrf	___ftmul@f3_as_product+1,f
 18571  0DA8  0CB9               	rrf	___ftmul@f3_as_product,f
 18572  0DA9  0B89               	decfsz	9,f
 18573  0DAA  2DA6               	goto	u6045
 18574  0DAB  3001               	movlw	1
 18575  0DAC  02BC               	subwf	___ftmul@cntr,f
 18576  0DAD  1D03               	btfss	3,2
 18577  0DAE  2D97               	goto	l6836
 18578  0DAF  0839               	movf	___ftmul@f3_as_product,w
 18579  0DB0  00A0               	movwf	___ftpack@arg
 18580  0DB1  083A               	movf	___ftmul@f3_as_product+1,w
 18581  0DB2  00A1               	movwf	___ftpack@arg+1
 18582  0DB3  083B               	movf	___ftmul@f3_as_product+2,w
 18583  0DB4  00A2               	movwf	___ftpack@arg+2
 18584  0DB5  0838               	movf	___ftmul@exp,w
 18585  0DB6  00B4               	movwf	??___ftmul
 18586  0DB7  0834               	movf	??___ftmul,w
 18587  0DB8  00A3               	movwf	___ftpack@exp
 18588  0DB9  083D               	movf	___ftmul@sign,w
 18589  0DBA  00B5               	movwf	??___ftmul+1
 18590  0DBB  0835               	movf	??___ftmul+1,w
 18591  0DBC  00A4               	movwf	___ftpack@sign
 18592  0DBD  3193  23E6         	fcall	___ftpack
 18593  0DBF  0020               	movlb	0	; select bank0
 18594  0DC0  0820               	movf	?___ftpack,w
 18595  0DC1  00AE               	movwf	?___ftmul
 18596  0DC2  0821               	movf	?___ftpack+1,w
 18597  0DC3  00AF               	movwf	?___ftmul+1
 18598  0DC4  0822               	movf	?___ftpack+2,w
 18599  0DC5  00B0               	movwf	?___ftmul+2
 18600  0DC6  0008               	return
 18601  0DC7                     __end_of___ftmul:	
 18602                           
 18603                           	psect	text124
 18604  0C6A                     __ptext124:	
 18605 ;; *************** function ___ftdiv *****************
 18606 ;; Defined at:
 18607 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 18608 ;; Parameters:    Size  Location     Type
 18609 ;;  f2              3   14[BANK0 ] float 
 18610 ;;  f1              3   17[BANK0 ] float 
 18611 ;; Auto vars:     Size  Location     Type
 18612 ;;  f3              3   25[BANK0 ] float 
 18613 ;;  sign            1   29[BANK0 ] unsigned char 
 18614 ;;  exp             1   28[BANK0 ] unsigned char 
 18615 ;;  cntr            1   24[BANK0 ] unsigned char 
 18616 ;; Return value:  Size  Location     Type
 18617 ;;                  3   14[BANK0 ] float 
 18618 ;; Registers used:
 18619 ;;		wreg, status,2, status,0, pclath, cstack
 18620 ;; Tracked objects:
 18621 ;;		On entry : 0/0
 18622 ;;		On exit  : 0/0
 18623 ;;		Unchanged: 0/0
 18624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18625 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18626 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18627 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18628 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18629 ;;Total ram usage:       16 bytes
 18630 ;; Hardware stack levels used:    1
 18631 ;; Hardware stack levels required when called:    6
 18632 ;; This function calls:
 18633 ;;		___ftpack
 18634 ;; This function is called by:
 18635 ;;		_getDimmerLights_PercentToValue
 18636 ;;		_getDimmerLights_ValueToPercent
 18637 ;; This function uses a non-reentrant model
 18638 ;;
 18639                           
 18640                           
 18641                           ;psect for function ___ftdiv
 18642  0C6A                     ___ftdiv:	
 18643                           
 18644                           ;incstack = 0
 18645                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 18646  0C6A  0020               	movlb	0	; select bank0
 18647  0C6B  0831               	movf	___ftdiv@f1,w
 18648  0C6C  00B4               	movwf	??___ftdiv
 18649  0C6D  0832               	movf	___ftdiv@f1+1,w
 18650  0C6E  00B5               	movwf	??___ftdiv+1
 18651  0C6F  0833               	movf	___ftdiv@f1+2,w
 18652  0C70  00B6               	movwf	??___ftdiv+2
 18653  0C71  1003               	clrc
 18654  0C72  0D35               	rlf	??___ftdiv+1,w
 18655  0C73  0D36               	rlf	??___ftdiv+2,w
 18656  0C74  00B7               	movwf	??___ftdiv+3
 18657  0C75  0837               	movf	??___ftdiv+3,w
 18658  0C76  00BC               	movwf	___ftdiv@exp
 18659  0C77  08BC               	movf	___ftdiv@exp,f
 18660  0C78  1D03               	skipz
 18661  0C79  2C81               	goto	l6764
 18662  0C7A  3000               	movlw	0
 18663  0C7B  00AE               	movwf	?___ftdiv
 18664  0C7C  3000               	movlw	0
 18665  0C7D  00AF               	movwf	?___ftdiv+1
 18666  0C7E  3000               	movlw	0
 18667  0C7F  00B0               	movwf	?___ftdiv+2
 18668  0C80  0008               	return
 18669  0C81                     l6764:	
 18670  0C81  082E               	movf	___ftdiv@f2,w
 18671  0C82  00B4               	movwf	??___ftdiv
 18672  0C83  082F               	movf	___ftdiv@f2+1,w
 18673  0C84  00B5               	movwf	??___ftdiv+1
 18674  0C85  0830               	movf	___ftdiv@f2+2,w
 18675  0C86  00B6               	movwf	??___ftdiv+2
 18676  0C87  1003               	clrc
 18677  0C88  0D35               	rlf	??___ftdiv+1,w
 18678  0C89  0D36               	rlf	??___ftdiv+2,w
 18679  0C8A  00B7               	movwf	??___ftdiv+3
 18680  0C8B  0837               	movf	??___ftdiv+3,w
 18681  0C8C  00BD               	movwf	___ftdiv@sign
 18682  0C8D  08BD               	movf	___ftdiv@sign,f
 18683  0C8E  1D03               	skipz
 18684  0C8F  2C97               	goto	l6770
 18685  0C90  3000               	movlw	0
 18686  0C91  00AE               	movwf	?___ftdiv
 18687  0C92  3000               	movlw	0
 18688  0C93  00AF               	movwf	?___ftdiv+1
 18689  0C94  3000               	movlw	0
 18690  0C95  00B0               	movwf	?___ftdiv+2
 18691  0C96  0008               	return
 18692  0C97                     l6770:	
 18693  0C97  3000               	movlw	0
 18694  0C98  00B9               	movwf	___ftdiv@f3
 18695  0C99  3000               	movlw	0
 18696  0C9A  00BA               	movwf	___ftdiv@f3+1
 18697  0C9B  3000               	movlw	0
 18698  0C9C  00BB               	movwf	___ftdiv@f3+2
 18699  0C9D  3089               	movlw	137
 18700  0C9E  073D               	addwf	___ftdiv@sign,w
 18701  0C9F  00B4               	movwf	??___ftdiv
 18702  0CA0  0834               	movf	??___ftdiv,w
 18703  0CA1  02BC               	subwf	___ftdiv@exp,f
 18704  0CA2  0831               	movf	___ftdiv@f1,w
 18705  0CA3  00B4               	movwf	??___ftdiv
 18706  0CA4  0832               	movf	___ftdiv@f1+1,w
 18707  0CA5  00B5               	movwf	??___ftdiv+1
 18708  0CA6  0833               	movf	___ftdiv@f1+2,w
 18709  0CA7  00B6               	movwf	??___ftdiv+2
 18710  0CA8  3010               	movlw	16
 18711  0CA9                     u5885:	
 18712  0CA9  36B6               	lsrf	??___ftdiv+2,f
 18713  0CAA  0CB5               	rrf	??___ftdiv+1,f
 18714  0CAB  0CB4               	rrf	??___ftdiv,f
 18715  0CAC  0B89               	decfsz	9,f
 18716  0CAD  2CA9               	goto	u5885
 18717  0CAE  0834               	movf	??___ftdiv,w
 18718  0CAF  00B7               	movwf	??___ftdiv+3
 18719  0CB0  0837               	movf	??___ftdiv+3,w
 18720  0CB1  00BD               	movwf	___ftdiv@sign
 18721  0CB2  082E               	movf	___ftdiv@f2,w
 18722  0CB3  00B4               	movwf	??___ftdiv
 18723  0CB4  082F               	movf	___ftdiv@f2+1,w
 18724  0CB5  00B5               	movwf	??___ftdiv+1
 18725  0CB6  0830               	movf	___ftdiv@f2+2,w
 18726  0CB7  00B6               	movwf	??___ftdiv+2
 18727  0CB8  3010               	movlw	16
 18728  0CB9                     u5895:	
 18729  0CB9  36B6               	lsrf	??___ftdiv+2,f
 18730  0CBA  0CB5               	rrf	??___ftdiv+1,f
 18731  0CBB  0CB4               	rrf	??___ftdiv,f
 18732  0CBC  0B89               	decfsz	9,f
 18733  0CBD  2CB9               	goto	u5895
 18734  0CBE  0834               	movf	??___ftdiv,w
 18735  0CBF  00B7               	movwf	??___ftdiv+3
 18736  0CC0  0837               	movf	??___ftdiv+3,w
 18737  0CC1  06BD               	xorwf	___ftdiv@sign,f
 18738  0CC2  3080               	movlw	128
 18739  0CC3  00B4               	movwf	??___ftdiv
 18740  0CC4  0834               	movf	??___ftdiv,w
 18741  0CC5  05BD               	andwf	___ftdiv@sign,f
 18742  0CC6  17B2               	bsf	___ftdiv@f1+1,7
 18743  0CC7  30FF               	movlw	255
 18744  0CC8  05B1               	andwf	___ftdiv@f1,f
 18745  0CC9  30FF               	movlw	255
 18746  0CCA  05B2               	andwf	___ftdiv@f1+1,f
 18747  0CCB  3000               	movlw	0
 18748  0CCC  05B3               	andwf	___ftdiv@f1+2,f
 18749  0CCD  17AF               	bsf	___ftdiv@f2+1,7
 18750  0CCE  30FF               	movlw	255
 18751  0CCF  05AE               	andwf	___ftdiv@f2,f
 18752  0CD0  30FF               	movlw	255
 18753  0CD1  05AF               	andwf	___ftdiv@f2+1,f
 18754  0CD2  3000               	movlw	0
 18755  0CD3  05B0               	andwf	___ftdiv@f2+2,f
 18756  0CD4  3018               	movlw	24
 18757  0CD5  00B4               	movwf	??___ftdiv
 18758  0CD6  0834               	movf	??___ftdiv,w
 18759  0CD7  00B8               	movwf	___ftdiv@cntr
 18760  0CD8                     l6784:	
 18761  0CD8  3001               	movlw	1
 18762  0CD9                     u5905:	
 18763  0CD9  35B9               	lslf	___ftdiv@f3,f
 18764  0CDA  0DBA               	rlf	___ftdiv@f3+1,f
 18765  0CDB  0DBB               	rlf	___ftdiv@f3+2,f
 18766  0CDC  0B89               	decfsz	9,f
 18767  0CDD  2CD9               	goto	u5905
 18768  0CDE  0830               	movf	___ftdiv@f2+2,w
 18769  0CDF  0233               	subwf	___ftdiv@f1+2,w
 18770  0CE0  1D03               	skipz
 18771  0CE1  2CE8               	goto	u5915
 18772  0CE2  082F               	movf	___ftdiv@f2+1,w
 18773  0CE3  0232               	subwf	___ftdiv@f1+1,w
 18774  0CE4  1D03               	skipz
 18775  0CE5  2CE8               	goto	u5915
 18776  0CE6  082E               	movf	___ftdiv@f2,w
 18777  0CE7  0231               	subwf	___ftdiv@f1,w
 18778  0CE8                     u5915:	
 18779  0CE8  1C03               	skipc
 18780  0CE9  2CF1               	goto	l6792
 18781  0CEA  082E               	movf	___ftdiv@f2,w
 18782  0CEB  02B1               	subwf	___ftdiv@f1,f
 18783  0CEC  082F               	movf	___ftdiv@f2+1,w
 18784  0CED  3BB2               	subwfb	___ftdiv@f1+1,f
 18785  0CEE  0830               	movf	___ftdiv@f2+2,w
 18786  0CEF  3BB3               	subwfb	___ftdiv@f1+2,f
 18787  0CF0  1439               	bsf	___ftdiv@f3,0
 18788  0CF1                     l6792:	
 18789  0CF1  3001               	movlw	1
 18790  0CF2                     u5925:	
 18791  0CF2  35B1               	lslf	___ftdiv@f1,f
 18792  0CF3  0DB2               	rlf	___ftdiv@f1+1,f
 18793  0CF4  0DB3               	rlf	___ftdiv@f1+2,f
 18794  0CF5  0B89               	decfsz	9,f
 18795  0CF6  2CF2               	goto	u5925
 18796  0CF7  3001               	movlw	1
 18797  0CF8  02B8               	subwf	___ftdiv@cntr,f
 18798  0CF9  1D03               	btfss	3,2
 18799  0CFA  2CD8               	goto	l6784
 18800  0CFB  0839               	movf	___ftdiv@f3,w
 18801  0CFC  00A0               	movwf	___ftpack@arg
 18802  0CFD  083A               	movf	___ftdiv@f3+1,w
 18803  0CFE  00A1               	movwf	___ftpack@arg+1
 18804  0CFF  083B               	movf	___ftdiv@f3+2,w
 18805  0D00  00A2               	movwf	___ftpack@arg+2
 18806  0D01  083C               	movf	___ftdiv@exp,w
 18807  0D02  00B4               	movwf	??___ftdiv
 18808  0D03  0834               	movf	??___ftdiv,w
 18809  0D04  00A3               	movwf	___ftpack@exp
 18810  0D05  083D               	movf	___ftdiv@sign,w
 18811  0D06  00B5               	movwf	??___ftdiv+1
 18812  0D07  0835               	movf	??___ftdiv+1,w
 18813  0D08  00A4               	movwf	___ftpack@sign
 18814  0D09  3193  23E6         	fcall	___ftpack
 18815  0D0B  0020               	movlb	0	; select bank0
 18816  0D0C  0820               	movf	?___ftpack,w
 18817  0D0D  00AE               	movwf	?___ftdiv
 18818  0D0E  0821               	movf	?___ftpack+1,w
 18819  0D0F  00AF               	movwf	?___ftdiv+1
 18820  0D10  0822               	movf	?___ftpack+2,w
 18821  0D11  00B0               	movwf	?___ftdiv+2
 18822  0D12  0008               	return
 18823  0D13                     __end_of___ftdiv:	
 18824                           
 18825                           	psect	text125
 18826  038C                     __ptext125:	
 18827 ;; *************** function ___ftadd *****************
 18828 ;; Defined at:
 18829 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 18830 ;; Parameters:    Size  Location     Type
 18831 ;;  f1              3   33[BANK0 ] float 
 18832 ;;  f2              3   36[BANK0 ] float 
 18833 ;; Auto vars:     Size  Location     Type
 18834 ;;  exp1            1   45[BANK0 ] unsigned char 
 18835 ;;  exp2            1   44[BANK0 ] unsigned char 
 18836 ;;  sign            1   43[BANK0 ] unsigned char 
 18837 ;; Return value:  Size  Location     Type
 18838 ;;                  3   33[BANK0 ] float 
 18839 ;; Registers used:
 18840 ;;		wreg, status,2, status,0, pclath, cstack
 18841 ;; Tracked objects:
 18842 ;;		On entry : 0/0
 18843 ;;		On exit  : 0/0
 18844 ;;		Unchanged: 0/0
 18845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18846 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18847 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18848 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18849 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18850 ;;Total ram usage:       13 bytes
 18851 ;; Hardware stack levels used:    1
 18852 ;; Hardware stack levels required when called:    6
 18853 ;; This function calls:
 18854 ;;		___ftpack
 18855 ;; This function is called by:
 18856 ;;		_getDimmerLights_PercentToValue
 18857 ;;		_getDimmerLights_ValueToPercent
 18858 ;; This function uses a non-reentrant model
 18859 ;;
 18860                           
 18861                           
 18862                           ;psect for function ___ftadd
 18863  038C                     ___ftadd:	
 18864                           
 18865                           ;incstack = 0
 18866                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 18867  038C  0020               	movlb	0	; select bank0
 18868  038D  0841               	movf	___ftadd@f1,w
 18869  038E  00C7               	movwf	??___ftadd
 18870  038F  0842               	movf	___ftadd@f1+1,w
 18871  0390  00C8               	movwf	??___ftadd+1
 18872  0391  0843               	movf	___ftadd@f1+2,w
 18873  0392  00C9               	movwf	??___ftadd+2
 18874  0393  1003               	clrc
 18875  0394  0D48               	rlf	??___ftadd+1,w
 18876  0395  0D49               	rlf	??___ftadd+2,w
 18877  0396  00CA               	movwf	??___ftadd+3
 18878  0397  084A               	movf	??___ftadd+3,w
 18879  0398  00CD               	movwf	___ftadd@exp1
 18880  0399  0844               	movf	___ftadd@f2,w
 18881  039A  00C7               	movwf	??___ftadd
 18882  039B  0845               	movf	___ftadd@f2+1,w
 18883  039C  00C8               	movwf	??___ftadd+1
 18884  039D  0846               	movf	___ftadd@f2+2,w
 18885  039E  00C9               	movwf	??___ftadd+2
 18886  039F  1003               	clrc
 18887  03A0  0D48               	rlf	??___ftadd+1,w
 18888  03A1  0D49               	rlf	??___ftadd+2,w
 18889  03A2  00CA               	movwf	??___ftadd+3
 18890  03A3  084A               	movf	??___ftadd+3,w
 18891  03A4  00CC               	movwf	___ftadd@exp2
 18892  03A5  084D               	movf	___ftadd@exp1,w
 18893  03A6  1903               	btfsc	3,2
 18894  03A7  2BB4               	goto	l6694
 18895  03A8  084C               	movf	___ftadd@exp2,w
 18896  03A9  024D               	subwf	___ftadd@exp1,w
 18897  03AA  1803               	skipnc
 18898  03AB  2BBB               	goto	l6698
 18899  03AC  034D               	decf	___ftadd@exp1,w
 18900  03AD  3AFF               	xorlw	255
 18901  03AE  074C               	addwf	___ftadd@exp2,w
 18902  03AF  00C7               	movwf	??___ftadd
 18903  03B0  3019               	movlw	25
 18904  03B1  0247               	subwf	??___ftadd,w
 18905  03B2  1C03               	skipc
 18906  03B3  2BBB               	goto	l6698
 18907  03B4                     l6694:	
 18908  03B4  0844               	movf	___ftadd@f2,w
 18909  03B5  00C1               	movwf	?___ftadd
 18910  03B6  0845               	movf	___ftadd@f2+1,w
 18911  03B7  00C2               	movwf	?___ftadd+1
 18912  03B8  0846               	movf	___ftadd@f2+2,w
 18913  03B9  00C3               	movwf	?___ftadd+2
 18914  03BA  0008               	return
 18915  03BB                     l6698:	
 18916  03BB  084C               	movf	___ftadd@exp2,w
 18917  03BC  1903               	btfsc	3,2
 18918  03BD  0008               	return
 18919  03BE  084D               	movf	___ftadd@exp1,w
 18920  03BF  024C               	subwf	___ftadd@exp2,w
 18921  03C0  1803               	skipnc
 18922  03C1  2BCA               	goto	l6704
 18923  03C2  034C               	decf	___ftadd@exp2,w
 18924  03C3  3AFF               	xorlw	255
 18925  03C4  074D               	addwf	___ftadd@exp1,w
 18926  03C5  00C7               	movwf	??___ftadd
 18927  03C6  3019               	movlw	25
 18928  03C7  0247               	subwf	??___ftadd,w
 18929  03C8  1803               	btfsc	3,0
 18930  03C9  0008               	return
 18931  03CA                     l6704:	
 18932  03CA  3006               	movlw	6
 18933  03CB  00C7               	movwf	??___ftadd
 18934  03CC  0847               	movf	??___ftadd,w
 18935  03CD  00CB               	movwf	___ftadd@sign
 18936  03CE  1BC3               	btfsc	___ftadd@f1+2,7
 18937  03CF  17CB               	bsf	___ftadd@sign,7
 18938  03D0  1BC6               	btfsc	___ftadd@f2+2,7
 18939  03D1  174B               	bsf	___ftadd@sign,6
 18940  03D2  17C2               	bsf	___ftadd@f1+1,7
 18941  03D3  30FF               	movlw	255
 18942  03D4  05C1               	andwf	___ftadd@f1,f
 18943  03D5  30FF               	movlw	255
 18944  03D6  05C2               	andwf	___ftadd@f1+1,f
 18945  03D7  3000               	movlw	0
 18946  03D8  05C3               	andwf	___ftadd@f1+2,f
 18947  03D9  17C5               	bsf	___ftadd@f2+1,7
 18948  03DA  30FF               	movlw	255
 18949  03DB  05C4               	andwf	___ftadd@f2,f
 18950  03DC  30FF               	movlw	255
 18951  03DD  05C5               	andwf	___ftadd@f2+1,f
 18952  03DE  3000               	movlw	0
 18953  03DF  05C6               	andwf	___ftadd@f2+2,f
 18954  03E0  084C               	movf	___ftadd@exp2,w
 18955  03E1  024D               	subwf	___ftadd@exp1,w
 18956  03E2  1803               	skipnc
 18957  03E3  2C06               	goto	l6726
 18958  03E4                     l6716:	
 18959  03E4  3001               	movlw	1
 18960  03E5                     u5725:	
 18961  03E5  35C4               	lslf	___ftadd@f2,f
 18962  03E6  0DC5               	rlf	___ftadd@f2+1,f
 18963  03E7  0DC6               	rlf	___ftadd@f2+2,f
 18964  03E8  0B89               	decfsz	9,f
 18965  03E9  2BE5               	goto	u5725
 18966  03EA  3001               	movlw	1
 18967  03EB  02CC               	subwf	___ftadd@exp2,f
 18968  03EC  084C               	movf	___ftadd@exp2,w
 18969  03ED  064D               	xorwf	___ftadd@exp1,w
 18970  03EE  1903               	skipnz
 18971  03EF  2C01               	goto	l6724
 18972  03F0  3001               	movlw	1
 18973  03F1  02CB               	subwf	___ftadd@sign,f
 18974  03F2  084B               	movf	___ftadd@sign,w
 18975  03F3  3907               	andlw	7
 18976  03F4  1903               	btfsc	3,2
 18977  03F5  2C01               	goto	l6724
 18978  03F6  2BE4               	goto	l6716
 18979  03F7                     l6722:	
 18980  03F7  3001               	movlw	1
 18981  03F8                     u5755:	
 18982  03F8  36C3               	lsrf	___ftadd@f1+2,f
 18983  03F9  0CC2               	rrf	___ftadd@f1+1,f
 18984  03FA  0CC1               	rrf	___ftadd@f1,f
 18985  03FB  0B89               	decfsz	9,f
 18986  03FC  2BF8               	goto	u5755
 18987  03FD  3001               	movlw	1
 18988  03FE  00C7               	movwf	??___ftadd
 18989  03FF  0847               	movf	??___ftadd,w
 18990  0400  07CD               	addwf	___ftadd@exp1,f
 18991  0401                     l6724:	
 18992  0401  084D               	movf	___ftadd@exp1,w
 18993  0402  064C               	xorwf	___ftadd@exp2,w
 18994  0403  1903               	btfsc	3,2
 18995  0404  2C2B               	goto	l3263
 18996  0405  2BF7               	goto	l6722
 18997  0406                     l6726:	
 18998  0406  084D               	movf	___ftadd@exp1,w
 18999  0407  024C               	subwf	___ftadd@exp2,w
 19000  0408  1803               	skipnc
 19001  0409  2C2B               	goto	l3263
 19002  040A                     l6728:	
 19003  040A  3001               	movlw	1
 19004  040B                     u5785:	
 19005  040B  35C1               	lslf	___ftadd@f1,f
 19006  040C  0DC2               	rlf	___ftadd@f1+1,f
 19007  040D  0DC3               	rlf	___ftadd@f1+2,f
 19008  040E  0B89               	decfsz	9,f
 19009  040F  2C0B               	goto	u5785
 19010  0410  3001               	movlw	1
 19011  0411  02CD               	subwf	___ftadd@exp1,f
 19012  0412  084C               	movf	___ftadd@exp2,w
 19013  0413  064D               	xorwf	___ftadd@exp1,w
 19014  0414  1903               	skipnz
 19015  0415  2C27               	goto	l6736
 19016  0416  3001               	movlw	1
 19017  0417  02CB               	subwf	___ftadd@sign,f
 19018  0418  084B               	movf	___ftadd@sign,w
 19019  0419  3907               	andlw	7
 19020  041A  1903               	btfsc	3,2
 19021  041B  2C27               	goto	l6736
 19022  041C  2C0A               	goto	l6728
 19023  041D                     l6734:	
 19024  041D  3001               	movlw	1
 19025  041E                     u5815:	
 19026  041E  36C6               	lsrf	___ftadd@f2+2,f
 19027  041F  0CC5               	rrf	___ftadd@f2+1,f
 19028  0420  0CC4               	rrf	___ftadd@f2,f
 19029  0421  0B89               	decfsz	9,f
 19030  0422  2C1E               	goto	u5815
 19031  0423  3001               	movlw	1
 19032  0424  00C7               	movwf	??___ftadd
 19033  0425  0847               	movf	??___ftadd,w
 19034  0426  07CC               	addwf	___ftadd@exp2,f
 19035  0427                     l6736:	
 19036  0427  084D               	movf	___ftadd@exp1,w
 19037  0428  064C               	xorwf	___ftadd@exp2,w
 19038  0429  1D03               	skipz
 19039  042A  2C1D               	goto	l6734
 19040  042B                     l3263:	
 19041  042B  1FCB               	btfss	___ftadd@sign,7
 19042  042C  2C3D               	goto	l6740
 19043  042D  30FF               	movlw	255
 19044  042E  06C1               	xorwf	___ftadd@f1,f
 19045  042F  30FF               	movlw	255
 19046  0430  06C2               	xorwf	___ftadd@f1+1,f
 19047  0431  30FF               	movlw	255
 19048  0432  06C3               	xorwf	___ftadd@f1+2,f
 19049  0433  3001               	movlw	1
 19050  0434  07C1               	addwf	___ftadd@f1,f
 19051  0435  3000               	movlw	0
 19052  0436  1803               	skipnc
 19053  0437  3001               	movlw	1
 19054  0438  07C2               	addwf	___ftadd@f1+1,f
 19055  0439  3000               	movlw	0
 19056  043A  1803               	skipnc
 19057  043B  3001               	movlw	1
 19058  043C  07C3               	addwf	___ftadd@f1+2,f
 19059  043D                     l6740:	
 19060  043D  1F4B               	btfss	___ftadd@sign,6
 19061  043E  2C4F               	goto	l6744
 19062  043F  30FF               	movlw	255
 19063  0440  06C4               	xorwf	___ftadd@f2,f
 19064  0441  30FF               	movlw	255
 19065  0442  06C5               	xorwf	___ftadd@f2+1,f
 19066  0443  30FF               	movlw	255
 19067  0444  06C6               	xorwf	___ftadd@f2+2,f
 19068  0445  3001               	movlw	1
 19069  0446  07C4               	addwf	___ftadd@f2,f
 19070  0447  3000               	movlw	0
 19071  0448  1803               	skipnc
 19072  0449  3001               	movlw	1
 19073  044A  07C5               	addwf	___ftadd@f2+1,f
 19074  044B  3000               	movlw	0
 19075  044C  1803               	skipnc
 19076  044D  3001               	movlw	1
 19077  044E  07C6               	addwf	___ftadd@f2+2,f
 19078  044F                     l6744:	
 19079  044F  01CB               	clrf	___ftadd@sign
 19080  0450  0841               	movf	___ftadd@f1,w
 19081  0451  07C4               	addwf	___ftadd@f2,f
 19082  0452  0842               	movf	___ftadd@f1+1,w
 19083  0453  3DC5               	addwfc	___ftadd@f2+1,f
 19084  0454  0843               	movf	___ftadd@f1+2,w
 19085  0455  3DC6               	addwfc	___ftadd@f2+2,f
 19086  0456  1FC6               	btfss	___ftadd@f2+2,7
 19087  0457  2C6A               	goto	l6754
 19088  0458  30FF               	movlw	255
 19089  0459  06C4               	xorwf	___ftadd@f2,f
 19090  045A  30FF               	movlw	255
 19091  045B  06C5               	xorwf	___ftadd@f2+1,f
 19092  045C  30FF               	movlw	255
 19093  045D  06C6               	xorwf	___ftadd@f2+2,f
 19094  045E  3001               	movlw	1
 19095  045F  07C4               	addwf	___ftadd@f2,f
 19096  0460  3000               	movlw	0
 19097  0461  1803               	skipnc
 19098  0462  3001               	movlw	1
 19099  0463  07C5               	addwf	___ftadd@f2+1,f
 19100  0464  3000               	movlw	0
 19101  0465  1803               	skipnc
 19102  0466  3001               	movlw	1
 19103  0467  07C6               	addwf	___ftadd@f2+2,f
 19104  0468  01CB               	clrf	___ftadd@sign
 19105  0469  0ACB               	incf	___ftadd@sign,f
 19106  046A                     l6754:	
 19107  046A  0844               	movf	___ftadd@f2,w
 19108  046B  00A0               	movwf	___ftpack@arg
 19109  046C  0845               	movf	___ftadd@f2+1,w
 19110  046D  00A1               	movwf	___ftpack@arg+1
 19111  046E  0846               	movf	___ftadd@f2+2,w
 19112  046F  00A2               	movwf	___ftpack@arg+2
 19113  0470  084D               	movf	___ftadd@exp1,w
 19114  0471  00C7               	movwf	??___ftadd
 19115  0472  0847               	movf	??___ftadd,w
 19116  0473  00A3               	movwf	___ftpack@exp
 19117  0474  084B               	movf	___ftadd@sign,w
 19118  0475  00C8               	movwf	??___ftadd+1
 19119  0476  0848               	movf	??___ftadd+1,w
 19120  0477  00A4               	movwf	___ftpack@sign
 19121  0478  3193  23E6         	fcall	___ftpack
 19122  047A  0020               	movlb	0	; select bank0
 19123  047B  0820               	movf	?___ftpack,w
 19124  047C  00C1               	movwf	?___ftadd
 19125  047D  0821               	movf	?___ftpack+1,w
 19126  047E  00C2               	movwf	?___ftadd+1
 19127  047F  0822               	movf	?___ftpack+2,w
 19128  0480  00C3               	movwf	?___ftadd+2
 19129  0481  0008               	return
 19130  0482                     __end_of___ftadd:	
 19131                           
 19132                           	psect	text126
 19133  1CDA                     __ptext126:	
 19134 ;; *************** function ___awtoft *****************
 19135 ;; Defined at:
 19136 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 19137 ;; Parameters:    Size  Location     Type
 19138 ;;  c               2    8[BANK0 ] int 
 19139 ;; Auto vars:     Size  Location     Type
 19140 ;;  sign            1   13[BANK0 ] unsigned char 
 19141 ;; Return value:  Size  Location     Type
 19142 ;;                  3    8[BANK0 ] float 
 19143 ;; Registers used:
 19144 ;;		wreg, status,2, status,0, pclath, cstack
 19145 ;; Tracked objects:
 19146 ;;		On entry : 0/0
 19147 ;;		On exit  : 0/0
 19148 ;;		Unchanged: 0/0
 19149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19150 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19151 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19152 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19153 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19154 ;;Total ram usage:        6 bytes
 19155 ;; Hardware stack levels used:    1
 19156 ;; Hardware stack levels required when called:    6
 19157 ;; This function calls:
 19158 ;;		___ftpack
 19159 ;; This function is called by:
 19160 ;;		_getDimmerLights_PercentToValue
 19161 ;;		_getDimmerLights_ValueToPercent
 19162 ;; This function uses a non-reentrant model
 19163 ;;
 19164                           
 19165                           
 19166                           ;psect for function ___awtoft
 19167  1CDA                     ___awtoft:	
 19168                           
 19169                           ;incstack = 0
 19170                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 19171  1CDA  0020               	movlb	0	; select bank0
 19172  1CDB  01AD               	clrf	___awtoft@sign
 19173  1CDC  1FA9               	btfss	___awtoft@c+1,7
 19174  1CDD  2CE5               	goto	l6682
 19175  1CDE  09A8               	comf	___awtoft@c,f
 19176  1CDF  09A9               	comf	___awtoft@c+1,f
 19177  1CE0  0AA8               	incf	___awtoft@c,f
 19178  1CE1  1903               	skipnz
 19179  1CE2  0AA9               	incf	___awtoft@c+1,f
 19180  1CE3  01AD               	clrf	___awtoft@sign
 19181  1CE4  0AAD               	incf	___awtoft@sign,f
 19182  1CE5                     l6682:	
 19183  1CE5  0828               	movf	___awtoft@c,w
 19184  1CE6  00A0               	movwf	___ftpack@arg
 19185  1CE7  0829               	movf	___awtoft@c+1,w
 19186  1CE8  00A1               	movwf	___ftpack@arg+1
 19187  1CE9  01A2               	clrf	___ftpack@arg+2
 19188  1CEA  308E               	movlw	142
 19189  1CEB  00AB               	movwf	??___awtoft
 19190  1CEC  082B               	movf	??___awtoft,w
 19191  1CED  00A3               	movwf	___ftpack@exp
 19192  1CEE  082D               	movf	___awtoft@sign,w
 19193  1CEF  00AC               	movwf	??___awtoft+1
 19194  1CF0  082C               	movf	??___awtoft+1,w
 19195  1CF1  00A4               	movwf	___ftpack@sign
 19196  1CF2  3193  23E6         	fcall	___ftpack
 19197  1CF4  0020               	movlb	0	; select bank0
 19198  1CF5  0820               	movf	?___ftpack,w
 19199  1CF6  00A8               	movwf	?___awtoft
 19200  1CF7  0821               	movf	?___ftpack+1,w
 19201  1CF8  00A9               	movwf	?___awtoft+1
 19202  1CF9  0822               	movf	?___ftpack+2,w
 19203  1CFA  00AA               	movwf	?___awtoft+2
 19204  1CFB  0008               	return
 19205  1CFC                     __end_of___awtoft:	
 19206                           
 19207                           	psect	text127
 19208  13E6                     __ptext127:	
 19209 ;; *************** function ___ftpack *****************
 19210 ;; Defined at:
 19211 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 19212 ;; Parameters:    Size  Location     Type
 19213 ;;  arg             3    0[BANK0 ] unsigned um
 19214 ;;  exp             1    3[BANK0 ] unsigned char 
 19215 ;;  sign            1    4[BANK0 ] unsigned char 
 19216 ;; Auto vars:     Size  Location     Type
 19217 ;;		None
 19218 ;; Return value:  Size  Location     Type
 19219 ;;                  3    0[BANK0 ] float 
 19220 ;; Registers used:
 19221 ;;		wreg, status,2, status,0
 19222 ;; Tracked objects:
 19223 ;;		On entry : 0/0
 19224 ;;		On exit  : 0/0
 19225 ;;		Unchanged: 0/0
 19226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19227 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19228 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19229 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19230 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19231 ;;Total ram usage:        8 bytes
 19232 ;; Hardware stack levels used:    1
 19233 ;; Hardware stack levels required when called:    5
 19234 ;; This function calls:
 19235 ;;		Nothing
 19236 ;; This function is called by:
 19237 ;;		___awtoft
 19238 ;;		___ftadd
 19239 ;;		___ftdiv
 19240 ;;		___ftmul
 19241 ;; This function uses a non-reentrant model
 19242 ;;
 19243                           
 19244                           
 19245                           ;psect for function ___ftpack
 19246  13E6                     ___ftpack:	
 19247                           
 19248                           ;incstack = 0
 19249                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 19250  13E6  0020               	movlb	0	; select bank0
 19251  13E7  0823               	movf	___ftpack@exp,w
 19252  13E8  1903               	btfsc	3,2
 19253  13E9  2BEF               	goto	l6528
 19254  13EA  0822               	movf	___ftpack@arg+2,w
 19255  13EB  0421               	iorwf	___ftpack@arg+1,w
 19256  13EC  0420               	iorwf	___ftpack@arg,w
 19257  13ED  1D03               	skipz
 19258  13EE  2C00               	goto	l6534
 19259  13EF                     l6528:	
 19260  13EF  3000               	movlw	0
 19261  13F0  00A0               	movwf	?___ftpack
 19262  13F1  3000               	movlw	0
 19263  13F2  00A1               	movwf	?___ftpack+1
 19264  13F3  3000               	movlw	0
 19265  13F4  00A2               	movwf	?___ftpack+2
 19266  13F5  0008               	return
 19267  13F6                     l6532:	
 19268  13F6  3001               	movlw	1
 19269  13F7  00A5               	movwf	??___ftpack
 19270  13F8  0825               	movf	??___ftpack,w
 19271  13F9  07A3               	addwf	___ftpack@exp,f
 19272  13FA  3001               	movlw	1
 19273  13FB                     u5315:	
 19274  13FB  36A2               	lsrf	___ftpack@arg+2,f
 19275  13FC  0CA1               	rrf	___ftpack@arg+1,f
 19276  13FD  0CA0               	rrf	___ftpack@arg,f
 19277  13FE  0B89               	decfsz	9,f
 19278  13FF  2BFB               	goto	u5315
 19279  1400                     l6534:	
 19280  1400  30FE               	movlw	254
 19281  1401  0522               	andwf	___ftpack@arg+2,w
 19282  1402  1903               	btfsc	3,2
 19283  1403  2C19               	goto	l3234
 19284  1404  2BF6               	goto	l6532
 19285  1405                     l6536:	
 19286  1405  3001               	movlw	1
 19287  1406  00A5               	movwf	??___ftpack
 19288  1407  0825               	movf	??___ftpack,w
 19289  1408  07A3               	addwf	___ftpack@exp,f
 19290  1409  3001               	movlw	1
 19291  140A  07A0               	addwf	___ftpack@arg,f
 19292  140B  3000               	movlw	0
 19293  140C  1803               	skipnc
 19294  140D  3001               	movlw	1
 19295  140E  07A1               	addwf	___ftpack@arg+1,f
 19296  140F  3000               	movlw	0
 19297  1410  1803               	skipnc
 19298  1411  3001               	movlw	1
 19299  1412  07A2               	addwf	___ftpack@arg+2,f
 19300  1413  3001               	movlw	1
 19301  1414                     u5335:	
 19302  1414  36A2               	lsrf	___ftpack@arg+2,f
 19303  1415  0CA1               	rrf	___ftpack@arg+1,f
 19304  1416  0CA0               	rrf	___ftpack@arg,f
 19305  1417  0B89               	decfsz	9,f
 19306  1418  2C14               	goto	u5335
 19307  1419                     l3234:	
 19308  1419  30FF               	movlw	255
 19309  141A  0522               	andwf	___ftpack@arg+2,w
 19310  141B  1903               	btfsc	3,2
 19311  141C  2C26               	goto	l6544
 19312  141D  2C05               	goto	l6536
 19313  141E                     l6542:	
 19314  141E  3001               	movlw	1
 19315  141F  02A3               	subwf	___ftpack@exp,f
 19316  1420  3001               	movlw	1
 19317  1421                     u5355:	
 19318  1421  35A0               	lslf	___ftpack@arg,f
 19319  1422  0DA1               	rlf	___ftpack@arg+1,f
 19320  1423  0DA2               	rlf	___ftpack@arg+2,f
 19321  1424  0B89               	decfsz	9,f
 19322  1425  2C21               	goto	u5355
 19323  1426                     l6544:	
 19324  1426  1FA1               	btfss	___ftpack@arg+1,7
 19325  1427  2C1E               	goto	l6542
 19326  1428  1823               	btfsc	___ftpack@exp,0
 19327  1429  2C30               	goto	l3240
 19328  142A  30FF               	movlw	255
 19329  142B  05A0               	andwf	___ftpack@arg,f
 19330  142C  307F               	movlw	127
 19331  142D  05A1               	andwf	___ftpack@arg+1,f
 19332  142E  30FF               	movlw	255
 19333  142F  05A2               	andwf	___ftpack@arg+2,f
 19334  1430                     l3240:	
 19335  1430  1003               	clrc
 19336  1431  0CA3               	rrf	___ftpack@exp,f
 19337  1432  0823               	movf	___ftpack@exp,w
 19338  1433  00A5               	movwf	??___ftpack
 19339  1434  01A6               	clrf	??___ftpack+1
 19340  1435  01A7               	clrf	??___ftpack+2
 19341  1436  3010               	movlw	16
 19342  1437                     u5385:	
 19343  1437  35A5               	lslf	??___ftpack,f
 19344  1438  0DA6               	rlf	??___ftpack+1,f
 19345  1439  0DA7               	rlf	??___ftpack+2,f
 19346  143A  0B89               	decfsz	9,f
 19347  143B  2C37               	goto	u5385
 19348  143C  0825               	movf	??___ftpack,w
 19349  143D  04A0               	iorwf	___ftpack@arg,f
 19350  143E  0826               	movf	??___ftpack+1,w
 19351  143F  04A1               	iorwf	___ftpack@arg+1,f
 19352  1440  0827               	movf	??___ftpack+2,w
 19353  1441  04A2               	iorwf	___ftpack@arg+2,f
 19354  1442  0824               	movf	___ftpack@sign,w
 19355  1443  1903               	btfsc	3,2
 19356  1444  0008               	return
 19357  1445  17A2               	bsf	___ftpack@arg+2,7
 19358  1446  0008               	return
 19359  1447                     __end_of___ftpack:	
 19360                           
 19361                           	psect	text128
 19362  27D1                     __ptext128:	
 19363 ;; *************** function _Division *****************
 19364 ;; Defined at:
 19365 ;;		line 1437 in file "../src/Dimmer_B1.c"
 19366 ;; Parameters:    Size  Location     Type
 19367 ;;  value           1    wreg     unsigned char 
 19368 ;;  num             1    5[BANK0 ] unsigned char 
 19369 ;; Auto vars:     Size  Location     Type
 19370 ;;  value           1    8[BANK0 ] unsigned char 
 19371 ;;  result          1    9[BANK0 ] unsigned char 
 19372 ;; Return value:  Size  Location     Type
 19373 ;;                  1    wreg      unsigned char 
 19374 ;; Registers used:
 19375 ;;		wreg, status,2, status,0, pclath, cstack
 19376 ;; Tracked objects:
 19377 ;;		On entry : 0/0
 19378 ;;		On exit  : 0/0
 19379 ;;		Unchanged: 0/0
 19380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19381 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19382 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19383 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19384 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19385 ;;Total ram usage:        5 bytes
 19386 ;; Hardware stack levels used:    1
 19387 ;; Hardware stack levels required when called:    6
 19388 ;; This function calls:
 19389 ;;		___lbdiv
 19390 ;; This function is called by:
 19391 ;;		_DimmerIntr_Initialization
 19392 ;; This function uses a non-reentrant model
 19393 ;;
 19394                           
 19395                           
 19396                           ;psect for function _Division
 19397  27D1                     _Division:	
 19398                           
 19399                           ;incstack = 0
 19400                           ; Regs used in _Division: [wreg+status,2+status,0+pclath+cstack]
 19401                           ;Division@value stored from wreg
 19402  27D1  0020               	movlb	0	; select bank0
 19403  27D2  00A8               	movwf	Division@value
 19404                           
 19405                           ;Dimmer_B1.c: 1438: char result = (char) (value / num);
 19406  27D3  0825               	movf	Division@num,w
 19407  27D4  00A6               	movwf	??_Division
 19408  27D5  0826               	movf	??_Division,w
 19409  27D6  00A0               	movwf	___lbdiv@divisor
 19410  27D7  0828               	movf	Division@value,w
 19411  27D8  319C  24B8         	fcall	___lbdiv
 19412  27DA  0020               	movlb	0	; select bank0
 19413  27DB  00A7               	movwf	??_Division+1
 19414  27DC  0827               	movf	??_Division+1,w
 19415  27DD  00A9               	movwf	Division@result
 19416                           
 19417                           ;Dimmer_B1.c: 1439: return result;
 19418  27DE  0829               	movf	Division@result,w
 19419  27DF  0008               	return
 19420  27E0                     __end_of_Division:	
 19421                           
 19422                           	psect	text129
 19423  1CB8                     __ptext129:	
 19424 ;; *************** function ___lbdiv *****************
 19425 ;; Defined at:
 19426 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 19427 ;; Parameters:    Size  Location     Type
 19428 ;;  dividend        1    wreg     unsigned char 
 19429 ;;  divisor         1    0[BANK0 ] unsigned char 
 19430 ;; Auto vars:     Size  Location     Type
 19431 ;;  dividend        1    2[BANK0 ] unsigned char 
 19432 ;;  quotient        1    4[BANK0 ] unsigned char 
 19433 ;;  counter         1    3[BANK0 ] unsigned char 
 19434 ;; Return value:  Size  Location     Type
 19435 ;;                  1    wreg      unsigned char 
 19436 ;; Registers used:
 19437 ;;		wreg, status,2, status,0
 19438 ;; Tracked objects:
 19439 ;;		On entry : 0/0
 19440 ;;		On exit  : 0/0
 19441 ;;		Unchanged: 0/0
 19442 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19443 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19444 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19445 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19446 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19447 ;;Total ram usage:        5 bytes
 19448 ;; Hardware stack levels used:    1
 19449 ;; Hardware stack levels required when called:    5
 19450 ;; This function calls:
 19451 ;;		Nothing
 19452 ;; This function is called by:
 19453 ;;		_Division
 19454 ;; This function uses a non-reentrant model
 19455 ;;
 19456                           
 19457                           
 19458                           ;psect for function ___lbdiv
 19459  1CB8                     ___lbdiv:	
 19460                           
 19461                           ;incstack = 0
 19462                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
 19463                           ;___lbdiv@dividend stored from wreg
 19464  1CB8  0020               	movlb	0	; select bank0
 19465  1CB9  00A2               	movwf	___lbdiv@dividend
 19466  1CBA  01A4               	clrf	___lbdiv@quotient
 19467  1CBB  0820               	movf	___lbdiv@divisor,w
 19468  1CBC  1903               	btfsc	3,2
 19469  1CBD  2CD8               	goto	l7618
 19470  1CBE  01A3               	clrf	___lbdiv@counter
 19471  1CBF  0AA3               	incf	___lbdiv@counter,f
 19472  1CC0                     l7606:	
 19473  1CC0  1BA0               	btfsc	___lbdiv@divisor,7
 19474  1CC1  2CC9               	goto	l7608
 19475  1CC2  1003               	clrc
 19476  1CC3  0DA0               	rlf	___lbdiv@divisor,f
 19477  1CC4  3001               	movlw	1
 19478  1CC5  00A1               	movwf	??___lbdiv
 19479  1CC6  0821               	movf	??___lbdiv,w
 19480  1CC7  07A3               	addwf	___lbdiv@counter,f
 19481  1CC8  2CC0               	goto	l7606
 19482  1CC9                     l7608:	
 19483  1CC9  1003               	clrc
 19484  1CCA  0DA4               	rlf	___lbdiv@quotient,f
 19485  1CCB  0820               	movf	___lbdiv@divisor,w
 19486  1CCC  0222               	subwf	___lbdiv@dividend,w
 19487  1CCD  1C03               	skipc
 19488  1CCE  2CD3               	goto	L13
 19489  1CCF  0820               	movf	___lbdiv@divisor,w
 19490  1CD0  02A2               	subwf	___lbdiv@dividend,f
 19491  1CD1  1424               	bsf	___lbdiv@quotient,0
 19492  1CD2  1003               	clrc
 19493  1CD3                     L13:	
 19494  1CD3  0CA0               	rrf	___lbdiv@divisor,f
 19495  1CD4  3001               	movlw	1
 19496  1CD5  02A3               	subwf	___lbdiv@counter,f
 19497  1CD6  1D03               	btfss	3,2
 19498  1CD7  2CC9               	goto	l7608
 19499  1CD8                     l7618:	
 19500  1CD8  0824               	movf	___lbdiv@quotient,w
 19501  1CD9  0008               	return
 19502  1CDA                     __end_of___lbdiv:	
 19503                           
 19504                           	psect	text130
 19505  26E6                     __ptext130:	
 19506 ;; *************** function _DelayOff_Main *****************
 19507 ;; Defined at:
 19508 ;;		line 41 in file "../src/DelayOff_B1.c"
 19509 ;; Parameters:    Size  Location     Type
 19510 ;;		None
 19511 ;; Auto vars:     Size  Location     Type
 19512 ;;		None
 19513 ;; Return value:  Size  Location     Type
 19514 ;;		None               void
 19515 ;; Registers used:
 19516 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19517 ;; Tracked objects:
 19518 ;;		On entry : 0/0
 19519 ;;		On exit  : 0/0
 19520 ;;		Unchanged: 0/0
 19521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19522 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19523 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19524 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19525 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19526 ;;Total ram usage:        0 bytes
 19527 ;; Hardware stack levels used:    1
 19528 ;; Hardware stack levels required when called:    9
 19529 ;; This function calls:
 19530 ;;		_DlyOff_Main
 19531 ;; This function is called by:
 19532 ;;		_main
 19533 ;; This function uses a non-reentrant model
 19534 ;;
 19535                           
 19536                           
 19537                           ;psect for function _DelayOff_Main
 19538  26E6                     _DelayOff_Main:	
 19539                           
 19540                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 19541                           
 19542                           ;incstack = 0
 19543                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19544  26E6  3001               	movlw	1
 19545  26E7  3197  271F  31A6   	fcall	_DlyOff_Main
 19546                           
 19547                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 19548  26EA  3002               	movlw	2
 19549  26EB  3197  271F         	fcall	_DlyOff_Main
 19550  26ED  0008               	return
 19551  26EE                     __end_of_DelayOff_Main:	
 19552                           
 19553                           	psect	text131
 19554  171F                     __ptext131:	
 19555 ;; *************** function _DlyOff_Main *****************
 19556 ;; Defined at:
 19557 ;;		line 61 in file "../src/DelayOff_B1.c"
 19558 ;; Parameters:    Size  Location     Type
 19559 ;;  sw              1    wreg     unsigned char 
 19560 ;; Auto vars:     Size  Location     Type
 19561 ;;  sw              1   71[BANK0 ] unsigned char 
 19562 ;; Return value:  Size  Location     Type
 19563 ;;		None               void
 19564 ;; Registers used:
 19565 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19566 ;; Tracked objects:
 19567 ;;		On entry : 0/0
 19568 ;;		On exit  : 0/0
 19569 ;;		Unchanged: 0/0
 19570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19572 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19573 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19574 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19575 ;;Total ram usage:        3 bytes
 19576 ;; Hardware stack levels used:    1
 19577 ;; Hardware stack levels required when called:    8
 19578 ;; This function calls:
 19579 ;;		_DelayOffPointSelect
 19580 ;;		_getDimmerLights_Status
 19581 ;;		_setDimmerLights_SwOff
 19582 ;;		_setDimmerLights_SwOn
 19583 ;;		_setProductData
 19584 ;; This function is called by:
 19585 ;;		_DelayOff_Main
 19586 ;; This function uses a non-reentrant model
 19587 ;;
 19588                           
 19589                           
 19590                           ;psect for function _DlyOff_Main
 19591  171F                     _DlyOff_Main:	
 19592                           
 19593                           ;incstack = 0
 19594                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19595                           ;DlyOff_Main@sw stored from wreg
 19596  171F  0020               	movlb	0	; select bank0
 19597  1720  00E7               	movwf	DlyOff_Main@sw
 19598                           
 19599                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 19600  1721  0867               	movf	DlyOff_Main@sw,w
 19601  1722  3199  21FD  3197   	fcall	_DelayOffPointSelect
 19602                           
 19603                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 19604  1725  0021               	movlb	1	; select bank1
 19605  1726  0858               	movf	_DelayOff^(0+128),w
 19606  1727  0086               	movwf	6
 19607  1728  3001               	movlw	1	; select bank2/3
 19608  1729  0087               	movwf	7
 19609  172A  1C81               	btfss	1,1
 19610  172B  0008               	return
 19611                           
 19612                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 19613  172C  0858               	movf	_DelayOff^(0+128),w
 19614  172D  3E02               	addlw	2
 19615  172E  0086               	movwf	6
 19616  172F  3001               	movlw	1	; select bank2/3
 19617  1730  0087               	movwf	7
 19618  1731  3001               	movlw	1
 19619  1732  0781               	addwf	1,f
 19620  1733  3141               	addfsr 1,1
 19621  1734  1803               	skipnc
 19622  1735  0A81               	incf	1,f
 19623                           
 19624                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 60000/20) {
 19625  1736  0858               	movf	_DelayOff^(0+128),w
 19626  1737  3E02               	addlw	2
 19627  1738  0086               	movwf	6
 19628  1739  3001               	movlw	1	; select bank2/3
 19629  173A  0087               	movwf	7
 19630  173B  3F40               	moviw [0]fsr1
 19631  173C  0020               	movlb	0	; select bank0
 19632  173D  00E5               	movwf	??_DlyOff_Main
 19633  173E  3F41               	moviw [1]fsr1
 19634  173F  00E6               	movwf	??_DlyOff_Main+1
 19635  1740  300B               	movlw	11
 19636  1741  0266               	subwf	??_DlyOff_Main+1,w
 19637  1742  30B8               	movlw	184
 19638  1743  1903               	skipnz
 19639  1744  0265               	subwf	??_DlyOff_Main,w
 19640  1745  1C03               	skipc
 19641  1746  0008               	return
 19642                           
 19643                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 19644  1747  0021               	movlb	1	; select bank1
 19645  1748  0858               	movf	_DelayOff^(0+128),w
 19646  1749  3E02               	addlw	2
 19647  174A  0086               	movwf	6
 19648  174B  3001               	movlw	1	; select bank2/3
 19649  174C  0087               	movwf	7
 19650  174D  3000               	movlw	0
 19651  174E  3FC0               	movwi [0]fsr1
 19652  174F  3FC1               	movwi [1]fsr1
 19653                           
 19654                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 19655  1750  3001               	movlw	1
 19656  1751  0020               	movlb	0	; select bank0
 19657  1752  00E5               	movwf	??_DlyOff_Main
 19658  1753  0021               	movlb	1	; select bank1
 19659  1754  0858               	movf	_DelayOff^(0+128),w
 19660  1755  3E04               	addlw	4
 19661  1756  0086               	movwf	6
 19662  1757  3001               	movlw	1	; select bank2/3
 19663  1758  0087               	movwf	7
 19664  1759  0020               	movlb	0	; select bank0
 19665  175A  0865               	movf	??_DlyOff_Main,w
 19666  175B  0781               	addwf	1,f
 19667                           
 19668                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 19669  175C  0021               	movlb	1	; select bank1
 19670  175D  0858               	movf	_DelayOff^(0+128),w
 19671  175E  3E04               	addlw	4
 19672  175F  0086               	movwf	6
 19673  1760  3001               	movlw	1	; select bank2/3
 19674  1761  0087               	movwf	7
 19675  1762  0A58               	incf	_DelayOff^(0+128),w
 19676  1763  0084               	movwf	4
 19677  1764  3001               	movlw	1	; select bank2/3
 19678  1765  0085               	movwf	5
 19679  1766  0800               	movf	0,w
 19680  1767  0201               	subwf	1,w
 19681  1768  1C03               	skipc
 19682  1769  0008               	return
 19683                           
 19684                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 19685  176A  0858               	movf	_DelayOff^(0+128),w
 19686  176B  3E04               	addlw	4
 19687  176C  0086               	movwf	6
 19688  176D  3001               	movlw	1	; select bank2/3
 19689  176E  0087               	movwf	7
 19690  176F  0181               	clrf	1
 19691                           
 19692                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 19693  1770  0858               	movf	_DelayOff^(0+128),w
 19694  1771  0086               	movwf	6
 19695  1772  3001               	movlw	1	; select bank2/3
 19696  1773  0087               	movwf	7
 19697  1774  1081               	bcf	1,1
 19698                           
 19699                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 19700  1775  0020               	movlb	0	; select bank0
 19701  1776  0867               	movf	DlyOff_Main@sw,w
 19702  1777  31A7  27EF  3197   	fcall	_getDimmerLights_Status
 19703  177A  3A01               	xorlw	1
 19704  177B  1D03               	skipz
 19705  177C  2F87               	goto	l581
 19706                           
 19707                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 19708  177D  0020               	movlb	0	; select bank0
 19709  177E  0867               	movf	DlyOff_Main@sw,w
 19710  177F  3188  2033  3197   	fcall	_setDimmerLights_SwOn
 19711                           
 19712                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 19713  1782  0020               	movlb	0	; select bank0
 19714  1783  0867               	movf	DlyOff_Main@sw,w
 19715  1784  319F  2751  3197   	fcall	_setDimmerLights_SwOff
 19716  1787                     l581:	
 19717                           
 19718                           ;DelayOff_B1.c: 78: }
 19719                           ;DelayOff_B1.c: 80: setProductData(26 + sw, 0);
 19720  1787  0020               	movlb	0	; select bank0
 19721  1788  01E2               	clrf	setProductData@value
 19722  1789  0867               	movf	DlyOff_Main@sw,w
 19723  178A  3E1A               	addlw	26
 19724  178B  31A7  2758         	fcall	_setProductData
 19725  178D  0008               	return
 19726  178E                     __end_of_DlyOff_Main:	
 19727                           
 19728                           	psect	text132
 19729  2758                     __ptext132:	
 19730 ;; *************** function _setProductData *****************
 19731 ;; Defined at:
 19732 ;;		line 645 in file "../src/main_B1.c"
 19733 ;; Parameters:    Size  Location     Type
 19734 ;;  address         1    wreg     unsigned char 
 19735 ;;  value           1   66[BANK0 ] unsigned char 
 19736 ;; Auto vars:     Size  Location     Type
 19737 ;;  address         1   68[BANK0 ] unsigned char 
 19738 ;; Return value:  Size  Location     Type
 19739 ;;		None               void
 19740 ;; Registers used:
 19741 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 19742 ;; Tracked objects:
 19743 ;;		On entry : 0/0
 19744 ;;		On exit  : 0/0
 19745 ;;		Unchanged: 0/0
 19746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19747 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19748 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19749 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19750 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19751 ;;Total ram usage:        3 bytes
 19752 ;; Hardware stack levels used:    1
 19753 ;; Hardware stack levels required when called:    5
 19754 ;; This function calls:
 19755 ;;		Nothing
 19756 ;; This function is called by:
 19757 ;;		_DlyOff_Main
 19758 ;;		_setDelayOff_GO
 19759 ;;		_setDimmerLights_OnOff
 19760 ;;		_setDimmerLights_Dimming
 19761 ;;		_setTemp_Main
 19762 ;;		_setLog_Code
 19763 ;;		_setControl_Lights_Table
 19764 ;;		_setRFSW_AdjControl
 19765 ;;		_setRF_DimmerLights
 19766 ;; This function uses a non-reentrant model
 19767 ;;
 19768                           
 19769                           
 19770                           ;psect for function _setProductData
 19771  2758                     _setProductData:	
 19772                           
 19773                           ;incstack = 0
 19774                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 19775                           ;setProductData@address stored from wreg
 19776  2758  0020               	movlb	0	; select bank0
 19777  2759  00E4               	movwf	setProductData@address
 19778                           
 19779                           ;main_B1.c: 646: _product.Data[address] = value;
 19780  275A  0862               	movf	setProductData@value,w
 19781  275B  00E3               	movwf	??_setProductData
 19782  275C  0864               	movf	setProductData@address,w
 19783  275D  3E4E               	addlw	__product& (0+255)
 19784  275E  0086               	movwf	6
 19785  275F  3002               	movlw	2	; select bank4/5
 19786  2760  0087               	movwf	7
 19787  2761  0863               	movf	??_setProductData,w
 19788  2762  0081               	movwf	1
 19789  2763  0008               	return
 19790  2764                     __end_of_setProductData:	
 19791                           
 19792                           	psect	text133
 19793  0833                     __ptext133:	
 19794 ;; *************** function _setDimmerLights_SwOn *****************
 19795 ;; Defined at:
 19796 ;;		line 732 in file "../src/Dimmer_B1.c"
 19797 ;; Parameters:    Size  Location     Type
 19798 ;;  sw              1    wreg     unsigned char 
 19799 ;; Auto vars:     Size  Location     Type
 19800 ;;  sw              1   18[BANK0 ] unsigned char 
 19801 ;;  idle            1   17[BANK0 ] unsigned char 
 19802 ;;  dimmingStatu    1   14[BANK0 ] unsigned char 
 19803 ;; Return value:  Size  Location     Type
 19804 ;;		None               void
 19805 ;; Registers used:
 19806 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19807 ;; Tracked objects:
 19808 ;;		On entry : 0/0
 19809 ;;		On exit  : 0/0
 19810 ;;		Unchanged: 0/0
 19811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19812 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19813 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19814 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19815 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19816 ;;Total ram usage:        6 bytes
 19817 ;; Hardware stack levels used:    1
 19818 ;; Hardware stack levels required when called:    7
 19819 ;; This function calls:
 19820 ;;		_DimmerLights_SelectPointer
 19821 ;;		_getDimmerIntr_Dimming_Sw
 19822 ;;		_setBuz
 19823 ;; This function is called by:
 19824 ;;		_DlyOff_Main
 19825 ;;		_setControl_Lights_Table
 19826 ;;		_setRFSW_Control
 19827 ;;		_setRFSW_AdjControl
 19828 ;;		_setSw_Main
 19829 ;; This function uses a non-reentrant model
 19830 ;;
 19831                           
 19832                           
 19833                           ;psect for function _setDimmerLights_SwOn
 19834  0833                     _setDimmerLights_SwOn:	
 19835                           
 19836                           ;incstack = 0
 19837                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19838                           ;setDimmerLights_SwOn@sw stored from wreg
 19839  0833  0020               	movlb	0	; select bank0
 19840  0834  00B2               	movwf	setDimmerLights_SwOn@sw
 19841                           
 19842                           ;Dimmer_B1.c: 733: char idle = 0;
 19843  0835  01B1               	clrf	setDimmerLights_SwOn@idle
 19844                           
 19845                           ;Dimmer_B1.c: 735: char dimmingStatus = 0;
 19846  0836  01AE               	clrf	setDimmerLights_SwOn@dimmingStatus
 19847                           
 19848                           ;Dimmer_B1.c: 736: dimmingStatus = getDimmerIntr_Dimming_Sw(sw);
 19849  0837  0832               	movf	setDimmerLights_SwOn@sw,w
 19850  0838  319A  2270  3188   	fcall	_getDimmerIntr_Dimming_Sw
 19851  083B  0020               	movlb	0	; select bank0
 19852  083C  00AD               	movwf	??_setDimmerLights_SwOn
 19853  083D  082D               	movf	??_setDimmerLights_SwOn,w
 19854  083E  00AE               	movwf	setDimmerLights_SwOn@dimmingStatus
 19855                           
 19856                           ;Dimmer_B1.c: 740: if (idle == 0) {
 19857  083F  08B1               	movf	setDimmerLights_SwOn@idle,f
 19858  0840  1D03               	skipz
 19859  0841  2866               	goto	l6962
 19860                           
 19861                           ;Dimmer_B1.c: 741: if (sw == 1) {
 19862  0842  0832               	movf	setDimmerLights_SwOn@sw,w
 19863  0843  3A01               	xorlw	1
 19864  0844  1D03               	skipz
 19865  0845  2853               	goto	l6952
 19866                           
 19867                           ;Dimmer_B1.c: 742: idle = DimmerLights2.DimmingTrigger == 1 || DimmerIntr2.Dimming_Sw ==
      +                           1 ? 1 : 0;
 19868  0846  01AF               	clrf	_setDimmerLights_SwOn$2377
 19869  0847  0AAF               	incf	_setDimmerLights_SwOn$2377,f
 19870  0848  0023               	movlb	3	; select bank3
 19871  0849  1A4F               	btfsc	_DimmerLights2^(0+384),4
 19872  084A  2850               	goto	l6950
 19873  084B  0021               	movlb	1	; select bank1
 19874  084C  1A48               	btfsc	_DimmerIntr2^(0+128),4
 19875  084D  2850               	goto	l6950
 19876  084E  0020               	movlb	0	; select bank0
 19877  084F  01AF               	clrf	_setDimmerLights_SwOn$2377
 19878  0850                     l6950:	
 19879  0850  0020               	movlb	0	; select bank0
 19880  0851  082F               	movf	_setDimmerLights_SwOn$2377,w
 19881  0852  2863               	goto	L14
 19882  0853                     l6952:	
 19883                           ;Dimmer_B1.c: 743: } else if (sw == 2) {
 19884                           
 19885  0853  0832               	movf	setDimmerLights_SwOn@sw,w
 19886  0854  3A02               	xorlw	2
 19887  0855  1D03               	skipz
 19888  0856  2866               	goto	l6962
 19889                           
 19890                           ;Dimmer_B1.c: 744: idle = DimmerLights1.DimmingTrigger == 1 || DimmerIntr1.Dimming_Sw ==
      +                           1 ? 1 : 0;
 19891  0857  01B0               	clrf	_setDimmerLights_SwOn$2386
 19892  0858  0AB0               	incf	_setDimmerLights_SwOn$2386,f
 19893  0859  0023               	movlb	3	; select bank3
 19894  085A  1A47               	btfsc	_DimmerLights1^(0+384),4
 19895  085B  2861               	goto	l6960
 19896  085C  0021               	movlb	1	; select bank1
 19897  085D  1A3C               	btfsc	_DimmerIntr1^(0+128),4
 19898  085E  2861               	goto	l6960
 19899  085F  0020               	movlb	0	; select bank0
 19900  0860  01B0               	clrf	_setDimmerLights_SwOn$2386
 19901  0861                     l6960:	
 19902  0861  0020               	movlb	0	; select bank0
 19903  0862  0830               	movf	_setDimmerLights_SwOn$2386,w
 19904  0863                     L14:	
 19905  0863  00AD               	movwf	??_setDimmerLights_SwOn
 19906  0864  082D               	movf	??_setDimmerLights_SwOn,w
 19907  0865  00B1               	movwf	setDimmerLights_SwOn@idle
 19908  0866                     l6962:	
 19909                           
 19910                           ;Dimmer_B1.c: 745: }
 19911                           ;Dimmer_B1.c: 746: }
 19912                           ;Dimmer_B1.c: 763: DimmerLights_SelectPointer(sw);
 19913  0866  0832               	movf	setDimmerLights_SwOn@sw,w
 19914  0867  319A  2214  3188   	fcall	_DimmerLights_SelectPointer
 19915                           
 19916                           ;Dimmer_B1.c: 764: if (idle == 0) {
 19917  086A  0020               	movlb	0	; select bank0
 19918  086B  08B1               	movf	setDimmerLights_SwOn@idle,f
 19919  086C  1D03               	skipz
 19920  086D  0008               	return
 19921                           
 19922                           ;Dimmer_B1.c: 766: if (dimmingStatus == 0) {
 19923  086E  08AE               	movf	setDimmerLights_SwOn@dimmingStatus,f
 19924  086F  1D03               	skipz
 19925  0870  2893               	goto	l6974
 19926                           
 19927                           ;Dimmer_B1.c: 767: DimmerLights->SwFlag = 1;
 19928  0871  0021               	movlb	1	; select bank1
 19929  0872  085A               	movf	_DimmerLights^(0+128),w
 19930  0873  0086               	movwf	6
 19931  0874  3001               	movlw	1	; select bank2/3
 19932  0875  0087               	movwf	7
 19933  0876  1401               	bsf	1,0
 19934                           
 19935                           ;Dimmer_B1.c: 768: if (DimmerLights->Status == 0) {
 19936  0877  0A5A               	incf	_DimmerLights^(0+128),w
 19937  0878  0086               	movwf	6
 19938  0879  3001               	movlw	1	; select bank2/3
 19939  087A  0087               	movwf	7
 19940  087B  1801               	btfsc	1,0
 19941  087C  288D               	goto	l6972
 19942                           
 19943                           ;Dimmer_B1.c: 769: DimmerLights->Status = 1;
 19944  087D  0A5A               	incf	_DimmerLights^(0+128),w
 19945  087E  0086               	movwf	6
 19946  087F  3001               	movlw	1	; select bank2/3
 19947  0880  0087               	movwf	7
 19948  0881  1401               	bsf	1,0
 19949                           
 19950                           ;Dimmer_B1.c: 770: DimmerLights->Trigger = 1;
 19951  0882  085A               	movf	_DimmerLights^(0+128),w
 19952  0883  0086               	movwf	6
 19953  0884  3001               	movlw	1	; select bank2/3
 19954  0885  0087               	movwf	7
 19955  0886  1481               	bsf	1,1
 19956                           
 19957                           ;Dimmer_B1.c: 771: DimmerLights->Switch = 1;
 19958  0887  085A               	movf	_DimmerLights^(0+128),w
 19959  0888  0086               	movwf	6
 19960  0889  3001               	movlw	1	; select bank2/3
 19961  088A  0087               	movwf	7
 19962  088B  1501               	bsf	1,2
 19963                           
 19964                           ;Dimmer_B1.c: 772: } else {
 19965  088C  289E               	goto	l6976
 19966  088D                     l6972:	
 19967                           
 19968                           ;Dimmer_B1.c: 773: DimmerLights->Status = 0;
 19969  088D  0A5A               	incf	_DimmerLights^(0+128),w
 19970  088E  0086               	movwf	6
 19971  088F  3001               	movlw	1	; select bank2/3
 19972  0890  0087               	movwf	7
 19973  0891  1001               	bcf	1,0
 19974                           
 19975                           ;Dimmer_B1.c: 774: }
 19976                           ;Dimmer_B1.c: 775: } else {
 19977  0892  289E               	goto	l6976
 19978  0893                     l6974:	
 19979                           
 19980                           ;Dimmer_B1.c: 776: DimmerLights->DimmingTrigger = 1;
 19981  0893  0021               	movlb	1	; select bank1
 19982  0894  085A               	movf	_DimmerLights^(0+128),w
 19983  0895  0086               	movwf	6
 19984  0896  3001               	movlw	1	; select bank2/3
 19985  0897  0087               	movwf	7
 19986  0898  1601               	bsf	1,4
 19987                           
 19988                           ;Dimmer_B1.c: 777: DimmerLights->DimmingSwitch = 0;
 19989  0899  085A               	movf	_DimmerLights^(0+128),w
 19990  089A  0086               	movwf	6
 19991  089B  3001               	movlw	1	; select bank2/3
 19992  089C  0087               	movwf	7
 19993  089D  1281               	bcf	1,5
 19994  089E                     l6976:	
 19995                           
 19996                           ;Dimmer_B1.c: 778: }
 19997                           ;Dimmer_B1.c: 779: setBuz(1, 100);
 19998  089E  3064               	movlw	100
 19999  089F  0020               	movlb	0	; select bank0
 20000  08A0  00A9               	movwf	setBuz@time
 20001  08A1  3000               	movlw	0
 20002  08A2  00AA               	movwf	setBuz@time+1
 20003  08A3  3001               	movlw	1
 20004  08A4  3192  22D4         	fcall	_setBuz
 20005  08A6  0008               	return
 20006  08A7                     __end_of_setDimmerLights_SwOn:	
 20007                           
 20008                           	psect	text134
 20009  12D4                     __ptext134:	
 20010 ;; *************** function _setBuz *****************
 20011 ;; Defined at:
 20012 ;;		line 22 in file "../src/Buzzer_B1.c"
 20013 ;; Parameters:    Size  Location     Type
 20014 ;;  count           1    wreg     unsigned char 
 20015 ;;  time            2    9[BANK0 ] int 
 20016 ;; Auto vars:     Size  Location     Type
 20017 ;;  count           1   12[BANK0 ] unsigned char 
 20018 ;; Return value:  Size  Location     Type
 20019 ;;		None               void
 20020 ;; Registers used:
 20021 ;;		wreg, status,2, status,0, pclath, cstack
 20022 ;; Tracked objects:
 20023 ;;		On entry : 0/0
 20024 ;;		On exit  : 0/0
 20025 ;;		Unchanged: 0/0
 20026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20027 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20028 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20029 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20030 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20031 ;;Total ram usage:        4 bytes
 20032 ;; Hardware stack levels used:    1
 20033 ;; Hardware stack levels required when called:    6
 20034 ;; This function calls:
 20035 ;;		___awdiv
 20036 ;; This function is called by:
 20037 ;;		_setDimmerLights_SwOn
 20038 ;;		_setDimmerLights_Dimming
 20039 ;;		_setTemp_Main
 20040 ;;		_setLog_Code
 20041 ;;		_setRFSW_Control
 20042 ;;		_setSw_Main
 20043 ;;		_my_MainTimer
 20044 ;;		_Exception_Main
 20045 ;; This function uses a non-reentrant model
 20046 ;;
 20047                           
 20048                           
 20049                           ;psect for function _setBuz
 20050  12D4                     _setBuz:	
 20051                           
 20052                           ;incstack = 0
 20053                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 20054                           ;setBuz@count stored from wreg
 20055  12D4  0020               	movlb	0	; select bank0
 20056  12D5  00AC               	movwf	setBuz@count
 20057                           
 20058                           ;Buzzer_B1.c: 23: time /= 20;
 20059  12D6  3014               	movlw	20
 20060  12D7  00A0               	movwf	___awdiv@divisor
 20061  12D8  3000               	movlw	0
 20062  12D9  00A1               	movwf	___awdiv@divisor+1
 20063  12DA  082A               	movf	setBuz@time+1,w
 20064  12DB  01A3               	clrf	___awdiv@dividend+1
 20065  12DC  07A3               	addwf	___awdiv@dividend+1,f
 20066  12DD  0829               	movf	setBuz@time,w
 20067  12DE  01A2               	clrf	___awdiv@dividend
 20068  12DF  07A2               	addwf	___awdiv@dividend,f
 20069  12E0  3192  222C  3192   	fcall	___awdiv
 20070  12E3  0020               	movlb	0	; select bank0
 20071  12E4  0821               	movf	?___awdiv+1,w
 20072  12E5  01AA               	clrf	setBuz@time+1
 20073  12E6  07AA               	addwf	setBuz@time+1,f
 20074  12E7  0820               	movf	?___awdiv,w
 20075  12E8  01A9               	clrf	setBuz@time
 20076  12E9  07A9               	addwf	setBuz@time,f
 20077                           
 20078                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 20079  12EA  0022               	movlb	2	; select bank2
 20080  12EB  1C20               	btfss	_Buz1^(0+256),0
 20081  12EC  0008               	return
 20082                           
 20083                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 20084  12ED  18A0               	btfsc	_Buz1^(0+256),1
 20085  12EE  2B05               	goto	l98
 20086                           
 20087                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 20088  12EF  14A0               	bsf	_Buz1^(0+256),1
 20089                           
 20090                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 20091  12F0  01A1               	clrf	(_Buz1^(0+256)+1)
 20092  12F1  01A2               	clrf	((_Buz1+1)^(0+256)+1)
 20093                           
 20094                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 20095  12F2  0020               	movlb	0	; select bank0
 20096  12F3  082C               	movf	setBuz@count,w
 20097  12F4  00AB               	movwf	??_setBuz
 20098  12F5  082B               	movf	??_setBuz,w
 20099  12F6  0022               	movlb	2	; select bank2
 20100  12F7  00A3               	movwf	(_Buz1^(0+256)+3)
 20101                           
 20102                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 20103  12F8  0020               	movlb	0	; select bank0
 20104  12F9  082A               	movf	setBuz@time+1,w
 20105  12FA  0022               	movlb	2	; select bank2
 20106  12FB  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 20107  12FC  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 20108  12FD  0020               	movlb	0	; select bank0
 20109  12FE  0829               	movf	setBuz@time,w
 20110  12FF  0022               	movlb	2	; select bank2
 20111  1300  01A6               	clrf	(_Buz1^(0+256)+6)
 20112  1301  07A6               	addwf	(_Buz1^(0+256)+6),f
 20113                           
 20114                           ;Buzzer_B1.c: 30: RB3 = 1;
 20115  1302  0020               	movlb	0	; select bank0
 20116  1303  158D               	bsf	13,3	;volatile
 20117                           
 20118                           ;Buzzer_B1.c: 31: } else {
 20119  1304  0008               	return
 20120  1305                     l98:	
 20121                           
 20122                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 20123  1305  19A0               	btfsc	_Buz1^(0+256),3
 20124  1306  2B19               	goto	l100
 20125                           
 20126                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 20127  1307  15A0               	bsf	_Buz1^(0+256),3
 20128                           
 20129                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 20130  1308  0020               	movlb	0	; select bank0
 20131  1309  082C               	movf	setBuz@count,w
 20132  130A  00AB               	movwf	??_setBuz
 20133  130B  082B               	movf	??_setBuz,w
 20134  130C  0022               	movlb	2	; select bank2
 20135  130D  00A4               	movwf	(_Buz1^(0+256)+4)
 20136                           
 20137                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 20138  130E  0020               	movlb	0	; select bank0
 20139  130F  082A               	movf	setBuz@time+1,w
 20140  1310  0022               	movlb	2	; select bank2
 20141  1311  01A9               	clrf	((_Buz1+1)^(0+256)+8)
 20142  1312  07A9               	addwf	((_Buz1+1)^(0+256)+8),f
 20143  1313  0020               	movlb	0	; select bank0
 20144  1314  0829               	movf	setBuz@time,w
 20145  1315  0022               	movlb	2	; select bank2
 20146  1316  01A8               	clrf	(_Buz1^(0+256)+8)
 20147  1317  07A8               	addwf	(_Buz1^(0+256)+8),f
 20148                           
 20149                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 20150  1318  0008               	return
 20151  1319                     l100:	
 20152  1319  1A20               	btfsc	_Buz1^(0+256),4
 20153  131A  0008               	return
 20154                           
 20155                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 20156  131B  1620               	bsf	_Buz1^(0+256),4
 20157                           
 20158                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 20159  131C  0020               	movlb	0	; select bank0
 20160  131D  082C               	movf	setBuz@count,w
 20161  131E  00AB               	movwf	??_setBuz
 20162  131F  082B               	movf	??_setBuz,w
 20163  1320  0022               	movlb	2	; select bank2
 20164  1321  00A5               	movwf	(_Buz1^(0+256)+5)
 20165                           
 20166                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 20167  1322  0020               	movlb	0	; select bank0
 20168  1323  082A               	movf	setBuz@time+1,w
 20169  1324  0022               	movlb	2	; select bank2
 20170  1325  01AB               	clrf	((_Buz1+1)^(0+256)+10)
 20171  1326  07AB               	addwf	((_Buz1+1)^(0+256)+10),f
 20172  1327  0020               	movlb	0	; select bank0
 20173  1328  0829               	movf	setBuz@time,w
 20174  1329  0022               	movlb	2	; select bank2
 20175  132A  01AA               	clrf	(_Buz1^(0+256)+10)
 20176  132B  07AA               	addwf	(_Buz1^(0+256)+10),f
 20177  132C  0008               	return
 20178  132D                     __end_of_setBuz:	
 20179                           
 20180                           	psect	text135
 20181  122C                     __ptext135:	
 20182 ;; *************** function ___awdiv *****************
 20183 ;; Defined at:
 20184 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 20185 ;; Parameters:    Size  Location     Type
 20186 ;;  divisor         2    0[BANK0 ] int 
 20187 ;;  dividend        2    2[BANK0 ] int 
 20188 ;; Auto vars:     Size  Location     Type
 20189 ;;  quotient        2    7[BANK0 ] int 
 20190 ;;  sign            1    6[BANK0 ] unsigned char 
 20191 ;;  counter         1    5[BANK0 ] unsigned char 
 20192 ;; Return value:  Size  Location     Type
 20193 ;;                  2    0[BANK0 ] int 
 20194 ;; Registers used:
 20195 ;;		wreg, status,2, status,0
 20196 ;; Tracked objects:
 20197 ;;		On entry : 0/0
 20198 ;;		On exit  : 0/0
 20199 ;;		Unchanged: 0/0
 20200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20201 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20202 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20203 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20204 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20205 ;;Total ram usage:        9 bytes
 20206 ;; Hardware stack levels used:    1
 20207 ;; Hardware stack levels required when called:    5
 20208 ;; This function calls:
 20209 ;;		Nothing
 20210 ;; This function is called by:
 20211 ;;		_setBuz
 20212 ;; This function uses a non-reentrant model
 20213 ;;
 20214                           
 20215                           
 20216                           ;psect for function ___awdiv
 20217  122C                     ___awdiv:	
 20218                           
 20219                           ;incstack = 0
 20220                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 20221  122C  0020               	movlb	0	; select bank0
 20222  122D  01A6               	clrf	___awdiv@sign
 20223  122E  1FA1               	btfss	___awdiv@divisor+1,7
 20224  122F  2A37               	goto	l6562
 20225  1230  09A0               	comf	___awdiv@divisor,f
 20226  1231  09A1               	comf	___awdiv@divisor+1,f
 20227  1232  0AA0               	incf	___awdiv@divisor,f
 20228  1233  1903               	skipnz
 20229  1234  0AA1               	incf	___awdiv@divisor+1,f
 20230  1235  01A6               	clrf	___awdiv@sign
 20231  1236  0AA6               	incf	___awdiv@sign,f
 20232  1237                     l6562:	
 20233  1237  1FA3               	btfss	___awdiv@dividend+1,7
 20234  1238  2A42               	goto	l6568
 20235  1239  09A2               	comf	___awdiv@dividend,f
 20236  123A  09A3               	comf	___awdiv@dividend+1,f
 20237  123B  0AA2               	incf	___awdiv@dividend,f
 20238  123C  1903               	skipnz
 20239  123D  0AA3               	incf	___awdiv@dividend+1,f
 20240  123E  3001               	movlw	1
 20241  123F  00A4               	movwf	??___awdiv
 20242  1240  0824               	movf	??___awdiv,w
 20243  1241  06A6               	xorwf	___awdiv@sign,f
 20244  1242                     l6568:	
 20245  1242  01A7               	clrf	___awdiv@quotient
 20246  1243  01A8               	clrf	___awdiv@quotient+1
 20247  1244  0821               	movf	___awdiv@divisor+1,w
 20248  1245  0420               	iorwf	___awdiv@divisor,w
 20249  1246  1903               	skipnz
 20250  1247  2A71               	goto	l6590
 20251  1248  01A5               	clrf	___awdiv@counter
 20252  1249  0AA5               	incf	___awdiv@counter,f
 20253  124A                     l6578:	
 20254  124A  1BA1               	btfsc	___awdiv@divisor+1,7
 20255  124B  2A56               	goto	l6580
 20256  124C  3001               	movlw	1
 20257  124D                     u5435:	
 20258  124D  35A0               	lslf	___awdiv@divisor,f
 20259  124E  0DA1               	rlf	___awdiv@divisor+1,f
 20260  124F  0B89               	decfsz	9,f
 20261  1250  2A4D               	goto	u5435
 20262  1251  3001               	movlw	1
 20263  1252  00A4               	movwf	??___awdiv
 20264  1253  0824               	movf	??___awdiv,w
 20265  1254  07A5               	addwf	___awdiv@counter,f
 20266  1255  2A4A               	goto	l6578
 20267  1256                     l6580:	
 20268  1256  3001               	movlw	1
 20269  1257                     u5455:	
 20270  1257  35A7               	lslf	___awdiv@quotient,f
 20271  1258  0DA8               	rlf	___awdiv@quotient+1,f
 20272  1259  0B89               	decfsz	9,f
 20273  125A  2A57               	goto	u5455
 20274  125B  0821               	movf	___awdiv@divisor+1,w
 20275  125C  0223               	subwf	___awdiv@dividend+1,w
 20276  125D  1D03               	skipz
 20277  125E  2A61               	goto	u5465
 20278  125F  0820               	movf	___awdiv@divisor,w
 20279  1260  0222               	subwf	___awdiv@dividend,w
 20280  1261                     u5465:	
 20281  1261  1C03               	skipc
 20282  1262  2A68               	goto	l6586
 20283  1263  0820               	movf	___awdiv@divisor,w
 20284  1264  02A2               	subwf	___awdiv@dividend,f
 20285  1265  0821               	movf	___awdiv@divisor+1,w
 20286  1266  3BA3               	subwfb	___awdiv@dividend+1,f
 20287  1267  1427               	bsf	___awdiv@quotient,0
 20288  1268                     l6586:	
 20289  1268  3001               	movlw	1
 20290  1269                     u5475:	
 20291  1269  36A1               	lsrf	___awdiv@divisor+1,f
 20292  126A  0CA0               	rrf	___awdiv@divisor,f
 20293  126B  0B89               	decfsz	9,f
 20294  126C  2A69               	goto	u5475
 20295  126D  3001               	movlw	1
 20296  126E  02A5               	subwf	___awdiv@counter,f
 20297  126F  1D03               	btfss	3,2
 20298  1270  2A56               	goto	l6580
 20299  1271                     l6590:	
 20300  1271  0826               	movf	___awdiv@sign,w
 20301  1272  1903               	btfsc	3,2
 20302  1273  2A79               	goto	l6594
 20303  1274  09A7               	comf	___awdiv@quotient,f
 20304  1275  09A8               	comf	___awdiv@quotient+1,f
 20305  1276  0AA7               	incf	___awdiv@quotient,f
 20306  1277  1903               	skipnz
 20307  1278  0AA8               	incf	___awdiv@quotient+1,f
 20308  1279                     l6594:	
 20309  1279  0828               	movf	___awdiv@quotient+1,w
 20310  127A  01A1               	clrf	?___awdiv+1
 20311  127B  07A1               	addwf	?___awdiv+1,f
 20312  127C  0827               	movf	___awdiv@quotient,w
 20313  127D  01A0               	clrf	?___awdiv
 20314  127E  07A0               	addwf	?___awdiv,f
 20315  127F  0008               	return
 20316  1280                     __end_of___awdiv:	
 20317                           
 20318                           	psect	text136
 20319  1A70                     __ptext136:	
 20320 ;; *************** function _getDimmerIntr_Dimming_Sw *****************
 20321 ;; Defined at:
 20322 ;;		line 242 in file "../src/Dimmer_B1.c"
 20323 ;; Parameters:    Size  Location     Type
 20324 ;;  lights          1    wreg     unsigned char 
 20325 ;; Auto vars:     Size  Location     Type
 20326 ;;  lights          1    1[BANK0 ] unsigned char 
 20327 ;;  status          1    0[BANK0 ] unsigned char 
 20328 ;; Return value:  Size  Location     Type
 20329 ;;                  1    wreg      unsigned char 
 20330 ;; Registers used:
 20331 ;;		wreg, status,2
 20332 ;; Tracked objects:
 20333 ;;		On entry : 0/0
 20334 ;;		On exit  : 0/0
 20335 ;;		Unchanged: 0/0
 20336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20337 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20338 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20339 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20340 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20341 ;;Total ram usage:        2 bytes
 20342 ;; Hardware stack levels used:    1
 20343 ;; Hardware stack levels required when called:    5
 20344 ;; This function calls:
 20345 ;;		Nothing
 20346 ;; This function is called by:
 20347 ;;		_setDimmerLights_SwOn
 20348 ;;		_setRF_AdjControl
 20349 ;; This function uses a non-reentrant model
 20350 ;;
 20351                           
 20352                           
 20353                           ;psect for function _getDimmerIntr_Dimming_Sw
 20354  1A70                     _getDimmerIntr_Dimming_Sw:	
 20355                           
 20356                           ;incstack = 0
 20357                           ; Regs used in _getDimmerIntr_Dimming_Sw: [wreg+status,2]
 20358                           ;getDimmerIntr_Dimming_Sw@lights stored from wreg
 20359  1A70  0020               	movlb	0	; select bank0
 20360  1A71  00A1               	movwf	getDimmerIntr_Dimming_Sw@lights
 20361                           
 20362                           ;Dimmer_B1.c: 243: char status = 0;
 20363  1A72  01A0               	clrf	getDimmerIntr_Dimming_Sw@status
 20364                           
 20365                           ;Dimmer_B1.c: 245: if (lights == 1) {
 20366  1A73  0821               	movf	getDimmerIntr_Dimming_Sw@lights,w
 20367  1A74  3A01               	xorlw	1
 20368  1A75  1D03               	skipz
 20369  1A76  2A7D               	goto	l6642
 20370                           
 20371                           ;Dimmer_B1.c: 246: status = DimmerIntr1.Dimming_Sw == 1 ? 1 : 0;
 20372  1A77  3000               	movlw	0
 20373  1A78  0021               	movlb	1	; select bank1
 20374  1A79  1A3C               	btfsc	_DimmerIntr1^(0+128),4
 20375  1A7A  3001               	movlw	1
 20376  1A7B  0020               	movlb	0	; select bank0
 20377  1A7C  00A0               	movwf	getDimmerIntr_Dimming_Sw@status
 20378  1A7D                     l6642:	
 20379                           
 20380                           ;Dimmer_B1.c: 247: }
 20381                           ;Dimmer_B1.c: 250: if (lights == 2) {
 20382  1A7D  0821               	movf	getDimmerIntr_Dimming_Sw@lights,w
 20383  1A7E  3A02               	xorlw	2
 20384  1A7F  1D03               	skipz
 20385  1A80  2A87               	goto	l6646
 20386                           
 20387                           ;Dimmer_B1.c: 251: status = DimmerIntr2.Dimming_Sw == 1 ? 1 : 0;
 20388  1A81  3000               	movlw	0
 20389  1A82  0021               	movlb	1	; select bank1
 20390  1A83  1A48               	btfsc	_DimmerIntr2^(0+128),4
 20391  1A84  3001               	movlw	1
 20392  1A85  0020               	movlb	0	; select bank0
 20393  1A86  00A0               	movwf	getDimmerIntr_Dimming_Sw@status
 20394  1A87                     l6646:	
 20395                           
 20396                           ;Dimmer_B1.c: 252: }
 20397                           ;Dimmer_B1.c: 260: return status;
 20398  1A87  0820               	movf	getDimmerIntr_Dimming_Sw@status,w
 20399  1A88  0008               	return
 20400  1A89                     __end_of_getDimmerIntr_Dimming_Sw:	
 20401                           
 20402                           	psect	text137
 20403  1F51                     __ptext137:	
 20404 ;; *************** function _setDimmerLights_SwOff *****************
 20405 ;; Defined at:
 20406 ;;		line 784 in file "../src/Dimmer_B1.c"
 20407 ;; Parameters:    Size  Location     Type
 20408 ;;  sw              1    wreg     unsigned char 
 20409 ;; Auto vars:     Size  Location     Type
 20410 ;;  sw              1    2[BANK0 ] unsigned char 
 20411 ;; Return value:  Size  Location     Type
 20412 ;;		None               void
 20413 ;; Registers used:
 20414 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20415 ;; Tracked objects:
 20416 ;;		On entry : 0/0
 20417 ;;		On exit  : 0/0
 20418 ;;		Unchanged: 0/0
 20419 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20421 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20423 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20424 ;;Total ram usage:        1 bytes
 20425 ;; Hardware stack levels used:    1
 20426 ;; Hardware stack levels required when called:    6
 20427 ;; This function calls:
 20428 ;;		_DimmerLights_SelectPointer
 20429 ;; This function is called by:
 20430 ;;		_DlyOff_Main
 20431 ;;		_setControl_Lights_Table
 20432 ;;		_setRFSW_Control
 20433 ;;		_setRFSW_AdjControl
 20434 ;;		_setSw_Main
 20435 ;;		_Exception_Main
 20436 ;; This function uses a non-reentrant model
 20437 ;;
 20438                           
 20439                           
 20440                           ;psect for function _setDimmerLights_SwOff
 20441  1F51                     _setDimmerLights_SwOff:	
 20442                           
 20443                           ;incstack = 0
 20444                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 20445                           ;setDimmerLights_SwOff@sw stored from wreg
 20446  1F51  0020               	movlb	0	; select bank0
 20447  1F52  00A2               	movwf	setDimmerLights_SwOff@sw
 20448                           
 20449                           ;Dimmer_B1.c: 786: DimmerLights_SelectPointer(sw);
 20450  1F53  0822               	movf	setDimmerLights_SwOff@sw,w
 20451  1F54  319A  2214  319F   	fcall	_DimmerLights_SelectPointer
 20452                           
 20453                           ;Dimmer_B1.c: 788: if (DimmerLights->SwFlag == 1) {
 20454  1F57  0021               	movlb	1	; select bank1
 20455  1F58  085A               	movf	_DimmerLights^(0+128),w
 20456  1F59  0086               	movwf	6
 20457  1F5A  3001               	movlw	1	; select bank2/3
 20458  1F5B  0087               	movwf	7
 20459  1F5C  1C01               	btfss	1,0
 20460  1F5D  0008               	return
 20461                           
 20462                           ;Dimmer_B1.c: 789: DimmerLights->SwFlag = 0;
 20463  1F5E  085A               	movf	_DimmerLights^(0+128),w
 20464  1F5F  0086               	movwf	6
 20465  1F60  3001               	movlw	1	; select bank2/3
 20466  1F61  0087               	movwf	7
 20467  1F62  1001               	bcf	1,0
 20468                           
 20469                           ;Dimmer_B1.c: 790: if (DimmerLights->Status == 1) {
 20470  1F63  0A5A               	incf	_DimmerLights^(0+128),w
 20471  1F64  0086               	movwf	6
 20472  1F65  3001               	movlw	1	; select bank2/3
 20473  1F66  0087               	movwf	7
 20474  1F67  1C01               	btfss	1,0
 20475  1F68  2F7F               	goto	l6988
 20476                           
 20477                           ;Dimmer_B1.c: 791: if (DimmerLights->DimmingSwFlag == 1) {
 20478  1F69  085A               	movf	_DimmerLights^(0+128),w
 20479  1F6A  0086               	movwf	6
 20480  1F6B  3001               	movlw	1	; select bank2/3
 20481  1F6C  0087               	movwf	7
 20482  1F6D  1D81               	btfss	1,3
 20483  1F6E  0008               	return
 20484                           
 20485                           ;Dimmer_B1.c: 792: DimmerLights->DimmingSwFlag = 0;
 20486  1F6F  085A               	movf	_DimmerLights^(0+128),w
 20487  1F70  0086               	movwf	6
 20488  1F71  3001               	movlw	1	; select bank2/3
 20489  1F72  0087               	movwf	7
 20490  1F73  1181               	bcf	1,3
 20491                           
 20492                           ;Dimmer_B1.c: 794: DimmerLights->DimmingTrigger = 1;
 20493  1F74  085A               	movf	_DimmerLights^(0+128),w
 20494  1F75  0086               	movwf	6
 20495  1F76  3001               	movlw	1	; select bank2/3
 20496  1F77  0087               	movwf	7
 20497  1F78  1601               	bsf	1,4
 20498                           
 20499                           ;Dimmer_B1.c: 795: DimmerLights->DimmingSwitch = 0;
 20500  1F79  085A               	movf	_DimmerLights^(0+128),w
 20501  1F7A  0086               	movwf	6
 20502  1F7B  3001               	movlw	1	; select bank2/3
 20503  1F7C  0087               	movwf	7
 20504  1F7D  1281               	bcf	1,5
 20505                           
 20506                           ;Dimmer_B1.c: 796: }
 20507                           ;Dimmer_B1.c: 797: } else {
 20508  1F7E  0008               	return
 20509  1F7F                     l6988:	
 20510                           
 20511                           ;Dimmer_B1.c: 798: DimmerLights->Trigger = 1;
 20512  1F7F  085A               	movf	_DimmerLights^(0+128),w
 20513  1F80  0086               	movwf	6
 20514  1F81  3001               	movlw	1	; select bank2/3
 20515  1F82  0087               	movwf	7
 20516  1F83  1481               	bsf	1,1
 20517                           
 20518                           ;Dimmer_B1.c: 799: DimmerLights->Switch = 0;
 20519  1F84  085A               	movf	_DimmerLights^(0+128),w
 20520  1F85  0086               	movwf	6
 20521  1F86  3001               	movlw	1	; select bank2/3
 20522  1F87  0087               	movwf	7
 20523  1F88  1101               	bcf	1,2
 20524  1F89  0008               	return
 20525  1F8A                     __end_of_setDimmerLights_SwOff:	
 20526                           
 20527                           	psect	text138
 20528  27EF                     __ptext138:	
 20529 ;; *************** function _getDimmerLights_Status *****************
 20530 ;; Defined at:
 20531 ;;		line 1135 in file "../src/Dimmer_B1.c"
 20532 ;; Parameters:    Size  Location     Type
 20533 ;;  lights          1    wreg     unsigned char 
 20534 ;; Auto vars:     Size  Location     Type
 20535 ;;  lights          1    2[BANK0 ] unsigned char 
 20536 ;;  status          1    3[BANK0 ] unsigned char 
 20537 ;; Return value:  Size  Location     Type
 20538 ;;                  1    wreg      unsigned char 
 20539 ;; Registers used:
 20540 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20541 ;; Tracked objects:
 20542 ;;		On entry : 0/0
 20543 ;;		On exit  : 0/0
 20544 ;;		Unchanged: 0/0
 20545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20547 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20549 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20550 ;;Total ram usage:        2 bytes
 20551 ;; Hardware stack levels used:    1
 20552 ;; Hardware stack levels required when called:    6
 20553 ;; This function calls:
 20554 ;;		_DimmerLights_SelectPointer
 20555 ;; This function is called by:
 20556 ;;		_DlyOff_Main
 20557 ;;		_setControl_Lights_Table
 20558 ;;		_setRFSW_Control
 20559 ;;		_setRFSW_AdjControl
 20560 ;;		_setRF_AdjControl
 20561 ;;		_Exception_Main
 20562 ;; This function uses a non-reentrant model
 20563 ;;
 20564                           
 20565                           
 20566                           ;psect for function _getDimmerLights_Status
 20567  27EF                     _getDimmerLights_Status:	
 20568                           
 20569                           ;incstack = 0
 20570                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 20571                           ;getDimmerLights_Status@lights stored from wreg
 20572  27EF  0020               	movlb	0	; select bank0
 20573  27F0  00A2               	movwf	getDimmerLights_Status@lights
 20574                           
 20575                           ;Dimmer_B1.c: 1136: DimmerLights_SelectPointer(lights);
 20576  27F1  0822               	movf	getDimmerLights_Status@lights,w
 20577  27F2  319A  2214         	fcall	_DimmerLights_SelectPointer
 20578                           
 20579                           ;Dimmer_B1.c: 1137: char status = DimmerLights->Status == 1 ? 1 : 0;
 20580  27F4  0021               	movlb	1	; select bank1
 20581  27F5  0A5A               	incf	_DimmerLights^(0+128),w
 20582  27F6  0086               	movwf	6
 20583  27F7  3001               	movlw	1	; select bank2/3
 20584  27F8  0087               	movwf	7
 20585  27F9  3000               	movlw	0
 20586  27FA  1801               	btfsc	1,0
 20587  27FB  3001               	movlw	1
 20588  27FC  0020               	movlb	0	; select bank0
 20589  27FD  00A3               	movwf	getDimmerLights_Status@status
 20590                           
 20591                           ;Dimmer_B1.c: 1138: return status;
 20592  27FE  0823               	movf	getDimmerLights_Status@status,w
 20593  27FF  0008               	return
 20594  2800                     __end_of_getDimmerLights_Status:	
 20595                           
 20596                           	psect	text139
 20597  1A14                     __ptext139:	
 20598 ;; *************** function _DimmerLights_SelectPointer *****************
 20599 ;; Defined at:
 20600 ;;		line 655 in file "../src/Dimmer_B1.c"
 20601 ;; Parameters:    Size  Location     Type
 20602 ;;  lights          1    wreg     unsigned char 
 20603 ;; Auto vars:     Size  Location     Type
 20604 ;;  lights          1    1[BANK0 ] unsigned char 
 20605 ;; Return value:  Size  Location     Type
 20606 ;;		None               void
 20607 ;; Registers used:
 20608 ;;		wreg
 20609 ;; Tracked objects:
 20610 ;;		On entry : 0/0
 20611 ;;		On exit  : 0/0
 20612 ;;		Unchanged: 0/0
 20613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20615 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20616 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20617 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20618 ;;Total ram usage:        2 bytes
 20619 ;; Hardware stack levels used:    1
 20620 ;; Hardware stack levels required when called:    5
 20621 ;; This function calls:
 20622 ;;		Nothing
 20623 ;; This function is called by:
 20624 ;;		_setDimmerLights_SwOn
 20625 ;;		_setDimmerLights_SwOff
 20626 ;;		_setDimmerLights_DimmingOn
 20627 ;;		_setDimmerLights_Main
 20628 ;;		_getDimmerLights_Status
 20629 ;;		_setDimmerLights_DimmingRun
 20630 ;;		_setRF_AdjControl
 20631 ;;		_setDimmerLights_Status
 20632 ;; This function uses a non-reentrant model
 20633 ;;
 20634                           
 20635                           
 20636                           ;psect for function _DimmerLights_SelectPointer
 20637  1A14                     _DimmerLights_SelectPointer:	
 20638                           
 20639                           ;incstack = 0
 20640                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 20641                           ;DimmerLights_SelectPointer@lights stored from wreg
 20642  1A14  0020               	movlb	0	; select bank0
 20643  1A15  00A1               	movwf	DimmerLights_SelectPointer@lights
 20644                           
 20645                           ;Dimmer_B1.c: 657: if (lights == 1) {
 20646  1A16  0821               	movf	DimmerLights_SelectPointer@lights,w
 20647  1A17  3A01               	xorlw	1
 20648  1A18  1D03               	skipz
 20649  1A19  2A20               	goto	l6654
 20650                           
 20651                           ;Dimmer_B1.c: 658: DimmerLights = &DimmerLights1;
 20652  1A1A  30C7               	movlw	_DimmerLights1& (0+255)
 20653  1A1B  00A0               	movwf	??_DimmerLights_SelectPointer
 20654  1A1C  0820               	movf	??_DimmerLights_SelectPointer,w
 20655  1A1D  0021               	movlb	1	; select bank1
 20656  1A1E  00DA               	movwf	_DimmerLights^(0+128)
 20657                           
 20658                           ;Dimmer_B1.c: 659: }
 20659  1A1F  0008               	return
 20660  1A20                     l6654:	
 20661                           
 20662                           ;Dimmer_B1.c: 662: else if (lights == 2) {
 20663  1A20  0020               	movlb	0	; select bank0
 20664  1A21  0821               	movf	DimmerLights_SelectPointer@lights,w
 20665  1A22  3A02               	xorlw	2
 20666  1A23  1D03               	skipz
 20667  1A24  0008               	return
 20668                           
 20669                           ;Dimmer_B1.c: 663: DimmerLights = &DimmerLights2;
 20670  1A25  30CF               	movlw	_DimmerLights2& (0+255)
 20671  1A26  00A0               	movwf	??_DimmerLights_SelectPointer
 20672  1A27  0820               	movf	??_DimmerLights_SelectPointer,w
 20673  1A28  0021               	movlb	1	; select bank1
 20674  1A29  00DA               	movwf	_DimmerLights^(0+128)
 20675  1A2A  0008               	return
 20676  1A2B                     __end_of_DimmerLights_SelectPointer:	
 20677                           
 20678                           	psect	text140
 20679  26DE                     __ptext140:	
 20680 ;; *************** function _DelayOff_Initialization *****************
 20681 ;; Defined at:
 20682 ;;		line 26 in file "../src/DelayOff_B1.c"
 20683 ;; Parameters:    Size  Location     Type
 20684 ;;		None
 20685 ;; Auto vars:     Size  Location     Type
 20686 ;;		None
 20687 ;; Return value:  Size  Location     Type
 20688 ;;		None               void
 20689 ;; Registers used:
 20690 ;;		wreg, status,2, status,0, pclath, cstack
 20691 ;; Tracked objects:
 20692 ;;		On entry : 0/0
 20693 ;;		On exit  : 0/0
 20694 ;;		Unchanged: 0/0
 20695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20696 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20697 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20699 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20700 ;;Total ram usage:        0 bytes
 20701 ;; Hardware stack levels used:    1
 20702 ;; Hardware stack levels required when called:    7
 20703 ;; This function calls:
 20704 ;;		_DlyOff_Initialization
 20705 ;; This function is called by:
 20706 ;;		_main
 20707 ;; This function uses a non-reentrant model
 20708 ;;
 20709                           
 20710                           
 20711                           ;psect for function _DelayOff_Initialization
 20712  26DE                     _DelayOff_Initialization:	
 20713                           
 20714                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 20715                           
 20716                           ;incstack = 0
 20717                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 20718  26DE  3001               	movlw	1
 20719  26DF  31A6  26C5  31A6   	fcall	_DlyOff_Initialization
 20720                           
 20721                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 20722  26E2  3002               	movlw	2
 20723  26E3  31A6  26C5         	fcall	_DlyOff_Initialization
 20724  26E5  0008               	return
 20725  26E6                     __end_of_DelayOff_Initialization:	
 20726                           
 20727                           	psect	text141
 20728  26C5                     __ptext141:	
 20729 ;; *************** function _DlyOff_Initialization *****************
 20730 ;; Defined at:
 20731 ;;		line 56 in file "../src/DelayOff_B1.c"
 20732 ;; Parameters:    Size  Location     Type
 20733 ;;  sw              1    wreg     unsigned char 
 20734 ;; Auto vars:     Size  Location     Type
 20735 ;;  sw              1    2[BANK0 ] unsigned char 
 20736 ;; Return value:  Size  Location     Type
 20737 ;;		None               void
 20738 ;; Registers used:
 20739 ;;		wreg, status,2, status,0, pclath, cstack
 20740 ;; Tracked objects:
 20741 ;;		On entry : 0/0
 20742 ;;		On exit  : 0/0
 20743 ;;		Unchanged: 0/0
 20744 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20745 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20746 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20747 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20748 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20749 ;;Total ram usage:        1 bytes
 20750 ;; Hardware stack levels used:    1
 20751 ;; Hardware stack levels required when called:    6
 20752 ;; This function calls:
 20753 ;;		_DelayOffPointSelect
 20754 ;; This function is called by:
 20755 ;;		_DelayOff_Initialization
 20756 ;; This function uses a non-reentrant model
 20757 ;;
 20758                           
 20759                           
 20760                           ;psect for function _DlyOff_Initialization
 20761  26C5                     _DlyOff_Initialization:	
 20762                           
 20763                           ;incstack = 0
 20764                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 20765                           ;DlyOff_Initialization@sw stored from wreg
 20766  26C5  0020               	movlb	0	; select bank0
 20767  26C6  00A2               	movwf	DlyOff_Initialization@sw
 20768                           
 20769                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 20770  26C7  0822               	movf	DlyOff_Initialization@sw,w
 20771  26C8  3199  21FD         	fcall	_DelayOffPointSelect
 20772  26CA  0008               	return
 20773  26CB                     __end_of_DlyOff_Initialization:	
 20774                           
 20775                           	psect	text142
 20776  19FD                     __ptext142:	
 20777 ;; *************** function _DelayOffPointSelect *****************
 20778 ;; Defined at:
 20779 ;;		line 7 in file "../src/DelayOff_B1.c"
 20780 ;; Parameters:    Size  Location     Type
 20781 ;;  sw              1    wreg     unsigned char 
 20782 ;; Auto vars:     Size  Location     Type
 20783 ;;  sw              1    1[BANK0 ] unsigned char 
 20784 ;; Return value:  Size  Location     Type
 20785 ;;		None               void
 20786 ;; Registers used:
 20787 ;;		wreg
 20788 ;; Tracked objects:
 20789 ;;		On entry : 0/0
 20790 ;;		On exit  : 0/0
 20791 ;;		Unchanged: 0/0
 20792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20794 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20795 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20796 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20797 ;;Total ram usage:        2 bytes
 20798 ;; Hardware stack levels used:    1
 20799 ;; Hardware stack levels required when called:    5
 20800 ;; This function calls:
 20801 ;;		Nothing
 20802 ;; This function is called by:
 20803 ;;		_DlyOff_Initialization
 20804 ;;		_DlyOff_Main
 20805 ;;		_setDelayOff_GO
 20806 ;;		_getDelayOff_GO
 20807 ;; This function uses a non-reentrant model
 20808 ;;
 20809                           
 20810                           
 20811                           ;psect for function _DelayOffPointSelect
 20812  19FD                     _DelayOffPointSelect:	
 20813                           
 20814                           ;incstack = 0
 20815                           ; Regs used in _DelayOffPointSelect: [wreg]
 20816                           ;DelayOffPointSelect@sw stored from wreg
 20817  19FD  0020               	movlb	0	; select bank0
 20818  19FE  00A1               	movwf	DelayOffPointSelect@sw
 20819                           
 20820                           ;DelayOff_B1.c: 9: if (sw == 1) {
 20821  19FF  0821               	movf	DelayOffPointSelect@sw,w
 20822  1A00  3A01               	xorlw	1
 20823  1A01  1D03               	skipz
 20824  1A02  2A09               	goto	l6630
 20825                           
 20826                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 20827  1A03  30D7               	movlw	_DlySw1& (0+255)
 20828  1A04  00A0               	movwf	??_DelayOffPointSelect
 20829  1A05  0820               	movf	??_DelayOffPointSelect,w
 20830  1A06  0021               	movlb	1	; select bank1
 20831  1A07  00D8               	movwf	_DelayOff^(0+128)
 20832                           
 20833                           ;DelayOff_B1.c: 11: }
 20834  1A08  0008               	return
 20835  1A09                     l6630:	
 20836                           
 20837                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 20838  1A09  0020               	movlb	0	; select bank0
 20839  1A0A  0821               	movf	DelayOffPointSelect@sw,w
 20840  1A0B  3A02               	xorlw	2
 20841  1A0C  1D03               	skipz
 20842  1A0D  0008               	return
 20843                           
 20844                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 20845  1A0E  30DC               	movlw	_DlySw2& (0+255)
 20846  1A0F  00A0               	movwf	??_DelayOffPointSelect
 20847  1A10  0820               	movf	??_DelayOffPointSelect,w
 20848  1A11  0021               	movlb	1	; select bank1
 20849  1A12  00D8               	movwf	_DelayOff^(0+128)
 20850  1A13  0008               	return
 20851  1A14                     __end_of_DelayOffPointSelect:	
 20852                           
 20853                           	psect	text143
 20854  118F                     __ptext143:	
 20855 ;; *************** function _Buzzer_Main *****************
 20856 ;; Defined at:
 20857 ;;		line 46 in file "../src/Buzzer_B1.c"
 20858 ;; Parameters:    Size  Location     Type
 20859 ;;		None
 20860 ;; Auto vars:     Size  Location     Type
 20861 ;;		None
 20862 ;; Return value:  Size  Location     Type
 20863 ;;		None               void
 20864 ;; Registers used:
 20865 ;;		wreg, status,2, status,0
 20866 ;; Tracked objects:
 20867 ;;		On entry : 0/0
 20868 ;;		On exit  : 0/0
 20869 ;;		Unchanged: 0/0
 20870 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20872 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20873 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20874 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20875 ;;Total ram usage:        1 bytes
 20876 ;; Hardware stack levels used:    1
 20877 ;; Hardware stack levels required when called:    5
 20878 ;; This function calls:
 20879 ;;		Nothing
 20880 ;; This function is called by:
 20881 ;;		_main
 20882 ;; This function uses a non-reentrant model
 20883 ;;
 20884                           
 20885                           
 20886                           ;psect for function _Buzzer_Main
 20887  118F                     _Buzzer_Main:	
 20888                           
 20889                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 20890                           
 20891                           ;incstack = 0
 20892                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 20893  118F  0022               	movlb	2	; select bank2
 20894  1190  1CA0               	btfss	_Buz1^(0+256),1
 20895  1191  0008               	return
 20896                           
 20897                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 20898  1192  3001               	movlw	1
 20899  1193  07A1               	addwf	(_Buz1^(0+256)+1),f
 20900  1194  3000               	movlw	0
 20901  1195  3DA2               	addwfc	((_Buz1+1)^(0+256)+1),f
 20902                           
 20903                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 20904  1196  0827               	movf	((_Buz1+1)^(0+256)+6),w
 20905  1197  0222               	subwf	((_Buz1+1)^(0+256)+1),w
 20906  1198  1D03               	skipz
 20907  1199  299C               	goto	u9465
 20908  119A  0826               	movf	(_Buz1^(0+256)+6),w
 20909  119B  0221               	subwf	(_Buz1^(0+256)+1),w
 20910  119C                     u9465:	
 20911  119C  1C03               	skipc
 20912  119D  0008               	return
 20913                           
 20914                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 20915  119E  01A1               	clrf	(_Buz1^(0+256)+1)
 20916  119F  01A2               	clrf	((_Buz1+1)^(0+256)+1)
 20917                           
 20918                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 20919  11A0  12A0               	bcf	_Buz1^(0+256),5
 20920  11A1  0020               	movlb	0	; select bank0
 20921  11A2  1D8D               	btfss	13,3	;volatile
 20922  11A3  29A6               	goto	l8904
 20923  11A4  0022               	movlb	2	; select bank2
 20924  11A5  16A0               	bsf	_Buz1^(0+256),5
 20925  11A6                     l8904:	
 20926                           
 20927                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 20928  11A6  0022               	movlb	2	; select bank2
 20929  11A7  1AA0               	btfsc	_Buz1^(0+256),5
 20930  11A8  29D2               	goto	l108
 20931                           
 20932                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 20933  11A9  08A3               	movf	(_Buz1^(0+256)+3),f
 20934  11AA  1D03               	skipz
 20935  11AB  29CE               	goto	l109
 20936                           
 20937                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 20938  11AC  1DA0               	btfss	_Buz1^(0+256),3
 20939  11AD  29BC               	goto	l110
 20940                           
 20941                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 20942  11AE  11A0               	bcf	_Buz1^(0+256),3
 20943                           
 20944                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 20945  11AF  0824               	movf	(_Buz1^(0+256)+4),w
 20946  11B0  0020               	movlb	0	; select bank0
 20947  11B1  00A0               	movwf	??_Buzzer_Main
 20948  11B2  0820               	movf	??_Buzzer_Main,w
 20949  11B3  0022               	movlb	2	; select bank2
 20950  11B4  00A3               	movwf	(_Buz1^(0+256)+3)
 20951                           
 20952                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 20953  11B5  0829               	movf	((_Buz1+1)^(0+256)+8),w
 20954  11B6  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 20955  11B7  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 20956  11B8  0828               	movf	(_Buz1^(0+256)+8),w
 20957  11B9  01A6               	clrf	(_Buz1^(0+256)+6)
 20958  11BA  07A6               	addwf	(_Buz1^(0+256)+6),f
 20959                           
 20960                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 20961  11BB  0008               	return
 20962  11BC                     l110:	
 20963  11BC  1E20               	btfss	_Buz1^(0+256),4
 20964  11BD  29CC               	goto	l112
 20965                           
 20966                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 20967  11BE  1220               	bcf	_Buz1^(0+256),4
 20968                           
 20969                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 20970  11BF  0825               	movf	(_Buz1^(0+256)+5),w
 20971  11C0  0020               	movlb	0	; select bank0
 20972  11C1  00A0               	movwf	??_Buzzer_Main
 20973  11C2  0820               	movf	??_Buzzer_Main,w
 20974  11C3  0022               	movlb	2	; select bank2
 20975  11C4  00A3               	movwf	(_Buz1^(0+256)+3)
 20976                           
 20977                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 20978  11C5  082B               	movf	((_Buz1+1)^(0+256)+10),w
 20979  11C6  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 20980  11C7  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 20981  11C8  082A               	movf	(_Buz1^(0+256)+10),w
 20982  11C9  01A6               	clrf	(_Buz1^(0+256)+6)
 20983  11CA  07A6               	addwf	(_Buz1^(0+256)+6),f
 20984                           
 20985                           ;Buzzer_B1.c: 62: } else {
 20986  11CB  0008               	return
 20987  11CC                     l112:	
 20988                           
 20989                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 20990  11CC  10A0               	bcf	_Buz1^(0+256),1
 20991                           
 20992                           ;Buzzer_B1.c: 64: }
 20993                           ;Buzzer_B1.c: 65: } else {
 20994  11CD  0008               	return
 20995  11CE                     l109:	
 20996                           
 20997                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 20998  11CE  16A0               	bsf	_Buz1^(0+256),5
 20999                           
 21000                           ;Buzzer_B1.c: 68: RB3 = 1;
 21001  11CF  0020               	movlb	0	; select bank0
 21002  11D0  158D               	bsf	13,3	;volatile
 21003                           
 21004                           ;Buzzer_B1.c: 69: }
 21005                           ;Buzzer_B1.c: 70: } else {
 21006  11D1  0008               	return
 21007  11D2                     l108:	
 21008                           
 21009                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 21010  11D2  12A0               	bcf	_Buz1^(0+256),5
 21011                           
 21012                           ;Buzzer_B1.c: 73: RB3 = 0;
 21013  11D3  0020               	movlb	0	; select bank0
 21014  11D4  118D               	bcf	13,3	;volatile
 21015                           
 21016                           ;Buzzer_B1.c: 75: Buz1.Count--;
 21017  11D5  3001               	movlw	1
 21018  11D6  0022               	movlb	2	; select bank2
 21019  11D7  02A3               	subwf	(_Buz1^(0+256)+3),f
 21020  11D8  0008               	return
 21021  11D9                     __end_of_Buzzer_Main:	
 21022                           
 21023                           	psect	text144
 21024  269A                     __ptext144:	
 21025 ;; *************** function _Buzzer_Initialization *****************
 21026 ;; Defined at:
 21027 ;;		line 11 in file "../src/Buzzer_B1.c"
 21028 ;; Parameters:    Size  Location     Type
 21029 ;;		None
 21030 ;; Auto vars:     Size  Location     Type
 21031 ;;		None
 21032 ;; Return value:  Size  Location     Type
 21033 ;;		None               void
 21034 ;; Registers used:
 21035 ;;		None
 21036 ;; Tracked objects:
 21037 ;;		On entry : 0/0
 21038 ;;		On exit  : 0/0
 21039 ;;		Unchanged: 0/0
 21040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21043 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21044 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21045 ;;Total ram usage:        0 bytes
 21046 ;; Hardware stack levels used:    1
 21047 ;; Hardware stack levels required when called:    5
 21048 ;; This function calls:
 21049 ;;		Nothing
 21050 ;; This function is called by:
 21051 ;;		_main
 21052 ;; This function uses a non-reentrant model
 21053 ;;
 21054                           
 21055                           
 21056                           ;psect for function _Buzzer_Initialization
 21057  269A                     _Buzzer_Initialization:	
 21058                           
 21059                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 21060                           
 21061                           ;incstack = 0
 21062                           ; Regs used in _Buzzer_Initialization: []
 21063  269A  0022               	movlb	2	; select bank2
 21064  269B  1420               	bsf	_Buz1^(0+256),0
 21065  269C  0008               	return
 21066  269D                     __end_of_Buzzer_Initialization:	
 21067                           
 21068                           	psect	intentry
 21069  0004                     __pintentry:	
 21070 ;; *************** function _ISR *****************
 21071 ;; Defined at:
 21072 ;;		line 116 in file "../src/MCU_B1.c"
 21073 ;; Parameters:    Size  Location     Type
 21074 ;;		None
 21075 ;; Auto vars:     Size  Location     Type
 21076 ;;		None
 21077 ;; Return value:  Size  Location     Type
 21078 ;;		None               void
 21079 ;; Registers used:
 21080 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21081 ;; Tracked objects:
 21082 ;;		On entry : 0/0
 21083 ;;		On exit  : 0/0
 21084 ;;		Unchanged: 0/0
 21085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21086 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21087 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21088 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21089 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21090 ;;Total ram usage:        1 bytes
 21091 ;; Hardware stack levels used:    1
 21092 ;; Hardware stack levels required when called:    4
 21093 ;; This function calls:
 21094 ;;		_IOC_ISR
 21095 ;;		_TMR1_ISR
 21096 ;; This function is called by:
 21097 ;;		Interrupt level 1
 21098 ;; This function uses a non-reentrant model
 21099 ;;
 21100                           
 21101  0004                     _ISR:	
 21102                           
 21103                           ;incstack = 0
 21104                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 21105  0004  147E               	bsf	126,0	;set compiler interrupt flag
 21106  0005  3180               	pagesel	$
 21107  0006  0020               	movlb	0	; select bank0
 21108  0007  087F               	movf	127,w
 21109  0008  00FC               	movwf	??_ISR
 21110                           
 21111                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
 21112  0009  0021               	movlb	1	; select bank1
 21113  000A  1C11               	btfss	17,0	;volatile
 21114  000B  2812               	goto	i1l9508
 21115  000C  0020               	movlb	0	; select bank0
 21116  000D  1C11               	btfss	17,0	;volatile
 21117  000E  2812               	goto	i1l9508
 21118                           
 21119                           ;MCU_B1.c: 126: TMR1_ISR();
 21120  000F  319C  2496  3180   	fcall	_TMR1_ISR
 21121  0012                     i1l9508:	
 21122                           
 21123                           ;MCU_B1.c: 127: }
 21124                           ;MCU_B1.c: 138: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 21125  0012  198B               	btfsc	11,3	;volatile
 21126  0013  1C0B               	btfss	11,0	;volatile
 21127  0014  281A               	goto	i1l1424
 21128  0015  0027               	movlb	7	; select bank7
 21129  0016  1D16               	btfss	22,2	;volatile
 21130  0017  281A               	goto	i1l1424
 21131                           
 21132                           ;MCU_B1.c: 139: IOC_ISR();
 21133  0018  31A7  274C         	fcall	_IOC_ISR
 21134  001A                     i1l1424:	
 21135                           ;MCU_B1.c: 140: }
 21136                           ;MCU_B1.c: 148: return;
 21137                           
 21138  001A  087C               	movf	??_ISR,w
 21139  001B  0020               	movlb	0	; select bank0
 21140  001C  00FF               	movwf	127
 21141  001D  107E               	bcf	126,0	;clear compiler interrupt flag
 21142  001E  0009               	retfie
 21143  001F                     __end_of_ISR:	
 21144                           
 21145                           	psect	text146
 21146  1C96                     __ptext146:	
 21147 ;; *************** function _TMR1_ISR *****************
 21148 ;; Defined at:
 21149 ;;		line 236 in file "../src/MCU_B1.c"
 21150 ;; Parameters:    Size  Location     Type
 21151 ;;		None
 21152 ;; Auto vars:     Size  Location     Type
 21153 ;;		None
 21154 ;; Return value:  Size  Location     Type
 21155 ;;		None               void
 21156 ;; Registers used:
 21157 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21158 ;; Tracked objects:
 21159 ;;		On entry : 0/0
 21160 ;;		On exit  : 0/0
 21161 ;;		Unchanged: 0/0
 21162 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21164 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21166 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21167 ;;Total ram usage:        0 bytes
 21168 ;; Hardware stack levels used:    1
 21169 ;; Hardware stack levels required when called:    1
 21170 ;; This function calls:
 21171 ;;		_DimmerLights_TMR_1
 21172 ;;		_DimmerLights_TMR_2
 21173 ;; This function is called by:
 21174 ;;		_ISR
 21175 ;; This function uses a non-reentrant model
 21176 ;;
 21177                           
 21178                           
 21179                           ;psect for function _TMR1_ISR
 21180  1C96                     _TMR1_ISR:	
 21181                           
 21182                           ;MCU_B1.c: 254: DimmerLights_TMR_1();
 21183                           
 21184                           ;incstack = 0
 21185                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 21186  1C96  319E  26E1  319C   	fcall	_DimmerLights_TMR_1
 21187                           
 21188                           ;MCU_B1.c: 259: DimmerLights_TMR_2();
 21189  1C99  319F  2719  319C   	fcall	_DimmerLights_TMR_2
 21190                           
 21191                           ;MCU_B1.c: 268: Timer1.Count++;
 21192  1C9C  3001               	movlw	1
 21193  1C9D  0022               	movlb	2	; select bank2
 21194  1C9E  07B2               	addwf	(_Timer1^(0+256)+1),f
 21195  1C9F  3000               	movlw	0
 21196  1CA0  3DB3               	addwfc	((_Timer1+1)^(0+256)+1),f
 21197                           
 21198                           ;MCU_B1.c: 269: if (Timer1.Count == (int)(20*10)) {
 21199  1CA1  3001               	movlw	1
 21200  1CA2  3E31               	addlw	_Timer1& (0+255)
 21201  1CA3  0086               	movwf	6
 21202  1CA4  3001               	movlw	1	; select bank2/3
 21203  1CA5  0087               	movwf	7
 21204  1CA6  3F40               	moviw [0]fsr1
 21205  1CA7  3AC8               	xorlw	200
 21206  1CA8  1D03               	skipz
 21207  1CA9  2CAC               	goto	u956_25
 21208  1CAA  3F41               	moviw [1]fsr1
 21209  1CAB  3A00               	xorlw	0
 21210  1CAC                     u956_25:	
 21211  1CAC  1D03               	skipz
 21212  1CAD  2CB1               	goto	i1l8962
 21213                           
 21214                           ;MCU_B1.c: 270: Timer1.Count = 0;
 21215  1CAE  01B2               	clrf	(_Timer1^(0+256)+1)
 21216  1CAF  01B3               	clrf	((_Timer1+1)^(0+256)+1)
 21217                           
 21218                           ;MCU_B1.c: 271: Timer1.Timeout = 1;
 21219  1CB0  1431               	bsf	_Timer1^(0+256),0
 21220  1CB1                     i1l8962:	
 21221                           
 21222                           ;MCU_B1.c: 272: }
 21223                           ;MCU_B1.c: 274: TMR1H = (int)((65536-1480)/256);
 21224  1CB1  30FA               	movlw	250
 21225  1CB2  0020               	movlb	0	; select bank0
 21226  1CB3  0097               	movwf	23	;volatile
 21227                           
 21228                           ;MCU_B1.c: 275: TMR1L = (int)((65536-1480)%256);
 21229  1CB4  3038               	movlw	56
 21230  1CB5  0096               	movwf	22	;volatile
 21231                           
 21232                           ;MCU_B1.c: 276: TMR1IF = 0;
 21233  1CB6  1011               	bcf	17,0	;volatile
 21234  1CB7  0008               	return
 21235  1CB8                     __end_of_TMR1_ISR:	
 21236                           
 21237                           	psect	text147
 21238  1F19                     __ptext147:	
 21239 ;; *************** function _DimmerLights_TMR_2 *****************
 21240 ;; Defined at:
 21241 ;;		line 1613 in file "../src/Dimmer_B1.c"
 21242 ;; Parameters:    Size  Location     Type
 21243 ;;		None
 21244 ;; Auto vars:     Size  Location     Type
 21245 ;;		None
 21246 ;; Return value:  Size  Location     Type
 21247 ;;		None               void
 21248 ;; Registers used:
 21249 ;;		wreg, status,2, status,0
 21250 ;; Tracked objects:
 21251 ;;		On entry : 0/0
 21252 ;;		On exit  : 0/0
 21253 ;;		Unchanged: 0/0
 21254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21256 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21257 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21258 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21259 ;;Total ram usage:        1 bytes
 21260 ;; Hardware stack levels used:    1
 21261 ;; This function calls:
 21262 ;;		Nothing
 21263 ;; This function is called by:
 21264 ;;		_TMR1_ISR
 21265 ;; This function uses a non-reentrant model
 21266 ;;
 21267                           
 21268                           
 21269                           ;psect for function _DimmerLights_TMR_2
 21270  1F19                     _DimmerLights_TMR_2:	
 21271                           
 21272                           ;Dimmer_B1.c: 1615: if (DimmerIntr2.Start == 1) {
 21273                           
 21274                           ;incstack = 0
 21275                           ; Regs used in _DimmerLights_TMR_2: [wreg+status,2+status,0]
 21276  1F19  0021               	movlb	1	; select bank1
 21277  1F1A  1D48               	btfss	_DimmerIntr2^(0+128),2
 21278  1F1B  2F3F               	goto	i1l993
 21279                           
 21280                           ;Dimmer_B1.c: 1616: DimmerIntr2.Count++;
 21281  1F1C  3001               	movlw	1
 21282  1F1D  00F0               	movwf	??_DimmerLights_TMR_2
 21283  1F1E  0870               	movf	??_DimmerLights_TMR_2,w
 21284  1F1F  07CA               	addwf	(_DimmerIntr2^(0+128)+2),f
 21285                           
 21286                           ;Dimmer_B1.c: 1618: if (DimmerIntr2.Count == DimmerIntr2.TuneEnd) {
 21287  1F20  084A               	movf	(_DimmerIntr2^(0+128)+2),w
 21288  1F21  0653               	xorwf	(_DimmerIntr2^(0+128)+11),w
 21289  1F22  1D03               	skipz
 21290  1F23  2F26               	goto	i1l8406
 21291                           
 21292                           ;Dimmer_B1.c: 1619: DimmerIntr2.Count = 0;
 21293  1F24  01CA               	clrf	(_DimmerIntr2^(0+128)+2)
 21294                           
 21295                           ;Dimmer_B1.c: 1620: DimmerIntr2.Start = 0;
 21296  1F25  1148               	bcf	_DimmerIntr2^(0+128),2
 21297  1F26                     i1l8406:	
 21298                           
 21299                           ;Dimmer_B1.c: 1621: }
 21300                           ;Dimmer_B1.c: 1635: if (DimmerIntr2.Count == DimmerIntr2.TuneValue2) {
 21301  1F26  084A               	movf	(_DimmerIntr2^(0+128)+2),w
 21302  1F27  0650               	xorwf	(_DimmerIntr2^(0+128)+8),w
 21303  1F28  1903               	btfsc	3,2
 21304                           
 21305                           ;Dimmer_B1.c: 1636: if (DimmerIntr2.ControlStatus == 1) {
 21306  1F29  1DC8               	btfss	_DimmerIntr2^(0+128),3
 21307  1F2A  2F2D               	goto	i1l8412
 21308                           
 21309                           ;Dimmer_B1.c: 1637: RA7 = 0;
 21310  1F2B  0020               	movlb	0	; select bank0
 21311  1F2C  138C               	bcf	12,7	;volatile
 21312  1F2D                     i1l8412:	
 21313                           
 21314                           ;Dimmer_B1.c: 1638: }
 21315                           ;Dimmer_B1.c: 1639: }
 21316                           ;Dimmer_B1.c: 1642: if (DimmerIntr2.Count == DimmerIntr2.TuneValue3) {
 21317  1F2D  0021               	movlb	1	; select bank1
 21318  1F2E  084A               	movf	(_DimmerIntr2^(0+128)+2),w
 21319  1F2F  0651               	xorwf	(_DimmerIntr2^(0+128)+9),w
 21320  1F30  1903               	btfsc	3,2
 21321                           
 21322                           ;Dimmer_B1.c: 1643: if (DimmerIntr2.ControlStatus == 1) {
 21323  1F31  1DC8               	btfss	_DimmerIntr2^(0+128),3
 21324  1F32  2F35               	goto	i1l8418
 21325                           
 21326                           ;Dimmer_B1.c: 1644: RA7 = 1;
 21327  1F33  0020               	movlb	0	; select bank0
 21328  1F34  178C               	bsf	12,7	;volatile
 21329  1F35                     i1l8418:	
 21330                           
 21331                           ;Dimmer_B1.c: 1645: }
 21332                           ;Dimmer_B1.c: 1646: }
 21333                           ;Dimmer_B1.c: 1649: if (DimmerIntr2.Count == DimmerIntr2.TuneValue4) {
 21334  1F35  0021               	movlb	1	; select bank1
 21335  1F36  084A               	movf	(_DimmerIntr2^(0+128)+2),w
 21336  1F37  0652               	xorwf	(_DimmerIntr2^(0+128)+10),w
 21337  1F38  1D03               	skipz
 21338  1F39  0008               	return
 21339                           
 21340                           ;Dimmer_B1.c: 1650: if (DimmerIntr2.ControlStatus == 1) {
 21341  1F3A  1DC8               	btfss	_DimmerIntr2^(0+128),3
 21342  1F3B  0008               	return
 21343                           
 21344                           ;Dimmer_B1.c: 1651: RA7 = 0;
 21345  1F3C  0020               	movlb	0	; select bank0
 21346  1F3D  138C               	bcf	12,7	;volatile
 21347                           
 21348                           ;Dimmer_B1.c: 1652: }
 21349                           ;Dimmer_B1.c: 1655: }
 21350                           ;Dimmer_B1.c: 1657: } else {
 21351  1F3E  0008               	return
 21352  1F3F                     i1l993:	
 21353                           
 21354                           ;Dimmer_B1.c: 1658: if (DimmerIntr2.GO == 1) {
 21355  1F3F  1C48               	btfss	_DimmerIntr2^(0+128),0
 21356  1F40  0008               	return
 21357                           
 21358                           ;Dimmer_B1.c: 1659: DimmerIntr2.Count++;
 21359  1F41  3001               	movlw	1
 21360  1F42  00F0               	movwf	??_DimmerLights_TMR_2
 21361  1F43  0870               	movf	??_DimmerLights_TMR_2,w
 21362  1F44  07CA               	addwf	(_DimmerIntr2^(0+128)+2),f
 21363                           
 21364                           ;Dimmer_B1.c: 1660: if (DimmerIntr2.Count == 4) {
 21365  1F45  084A               	movf	(_DimmerIntr2^(0+128)+2),w
 21366  1F46  3A04               	xorlw	4
 21367  1F47  1D03               	skipz
 21368  1F48  0008               	return
 21369                           
 21370                           ;Dimmer_B1.c: 1661: DimmerIntr2.Count = 0;
 21371  1F49  01CA               	clrf	(_DimmerIntr2^(0+128)+2)
 21372                           
 21373                           ;Dimmer_B1.c: 1662: DimmerIntr2.GO = 0;
 21374  1F4A  1048               	bcf	_DimmerIntr2^(0+128),0
 21375                           
 21376                           ;Dimmer_B1.c: 1663: DimmerIntr2.Start = 1;
 21377  1F4B  1548               	bsf	_DimmerIntr2^(0+128),2
 21378                           
 21379                           ;Dimmer_B1.c: 1665: if (DimmerIntr2.ControlStatus == 1) {
 21380  1F4C  1DC8               	btfss	_DimmerIntr2^(0+128),3
 21381  1F4D  0008               	return
 21382                           
 21383                           ;Dimmer_B1.c: 1666: RA7 = 1;
 21384  1F4E  0020               	movlb	0	; select bank0
 21385  1F4F  178C               	bsf	12,7	;volatile
 21386  1F50  0008               	return
 21387  1F51                     __end_of_DimmerLights_TMR_2:	
 21388                           
 21389                           	psect	text148
 21390  1EE1                     __ptext148:	
 21391 ;; *************** function _DimmerLights_TMR_1 *****************
 21392 ;; Defined at:
 21393 ;;		line 1442 in file "../src/Dimmer_B1.c"
 21394 ;; Parameters:    Size  Location     Type
 21395 ;;		None
 21396 ;; Auto vars:     Size  Location     Type
 21397 ;;		None
 21398 ;; Return value:  Size  Location     Type
 21399 ;;		None               void
 21400 ;; Registers used:
 21401 ;;		wreg, status,2, status,0
 21402 ;; Tracked objects:
 21403 ;;		On entry : 0/0
 21404 ;;		On exit  : 0/0
 21405 ;;		Unchanged: 0/0
 21406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21407 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21408 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21409 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21410 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21411 ;;Total ram usage:        1 bytes
 21412 ;; Hardware stack levels used:    1
 21413 ;; This function calls:
 21414 ;;		Nothing
 21415 ;; This function is called by:
 21416 ;;		_TMR1_ISR
 21417 ;; This function uses a non-reentrant model
 21418 ;;
 21419                           
 21420                           
 21421                           ;psect for function _DimmerLights_TMR_1
 21422  1EE1                     _DimmerLights_TMR_1:	
 21423                           
 21424                           ;Dimmer_B1.c: 1444: if (DimmerIntr1.Start == 1) {
 21425                           
 21426                           ;incstack = 0
 21427                           ; Regs used in _DimmerLights_TMR_1: [wreg+status,2+status,0]
 21428  1EE1  0021               	movlb	1	; select bank1
 21429  1EE2  1D3C               	btfss	_DimmerIntr1^(0+128),2
 21430  1EE3  2F07               	goto	i1l969
 21431                           
 21432                           ;Dimmer_B1.c: 1445: DimmerIntr1.Count++;
 21433  1EE4  3001               	movlw	1
 21434  1EE5  00F0               	movwf	??_DimmerLights_TMR_1
 21435  1EE6  0870               	movf	??_DimmerLights_TMR_1,w
 21436  1EE7  07BE               	addwf	(_DimmerIntr1^(0+128)+2),f
 21437                           
 21438                           ;Dimmer_B1.c: 1447: if (DimmerIntr1.Count == DimmerIntr1.TuneEnd) {
 21439  1EE8  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 21440  1EE9  0647               	xorwf	(_DimmerIntr1^(0+128)+11),w
 21441  1EEA  1D03               	skipz
 21442  1EEB  2EEE               	goto	i1l8338
 21443                           
 21444                           ;Dimmer_B1.c: 1448: DimmerIntr1.Count = 0;
 21445  1EEC  01BE               	clrf	(_DimmerIntr1^(0+128)+2)
 21446                           
 21447                           ;Dimmer_B1.c: 1449: DimmerIntr1.Start = 0;
 21448  1EED  113C               	bcf	_DimmerIntr1^(0+128),2
 21449  1EEE                     i1l8338:	
 21450                           
 21451                           ;Dimmer_B1.c: 1450: }
 21452                           ;Dimmer_B1.c: 1464: if (DimmerIntr1.Count == DimmerIntr1.TuneValue2) {
 21453  1EEE  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 21454  1EEF  0644               	xorwf	(_DimmerIntr1^(0+128)+8),w
 21455  1EF0  1903               	btfsc	3,2
 21456                           
 21457                           ;Dimmer_B1.c: 1465: if (DimmerIntr1.ControlStatus == 1) {
 21458  1EF1  1DBC               	btfss	_DimmerIntr1^(0+128),3
 21459  1EF2  2EF5               	goto	i1l8344
 21460                           
 21461                           ;Dimmer_B1.c: 1466: RB4 = 0;
 21462  1EF3  0020               	movlb	0	; select bank0
 21463  1EF4  120D               	bcf	13,4	;volatile
 21464  1EF5                     i1l8344:	
 21465                           
 21466                           ;Dimmer_B1.c: 1467: }
 21467                           ;Dimmer_B1.c: 1468: }
 21468                           ;Dimmer_B1.c: 1471: if (DimmerIntr1.Count == DimmerIntr1.TuneValue3) {
 21469  1EF5  0021               	movlb	1	; select bank1
 21470  1EF6  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 21471  1EF7  0645               	xorwf	(_DimmerIntr1^(0+128)+9),w
 21472  1EF8  1903               	btfsc	3,2
 21473                           
 21474                           ;Dimmer_B1.c: 1472: if (DimmerIntr1.ControlStatus == 1) {
 21475  1EF9  1DBC               	btfss	_DimmerIntr1^(0+128),3
 21476  1EFA  2EFD               	goto	i1l8350
 21477                           
 21478                           ;Dimmer_B1.c: 1473: RB4 = 1;
 21479  1EFB  0020               	movlb	0	; select bank0
 21480  1EFC  160D               	bsf	13,4	;volatile
 21481  1EFD                     i1l8350:	
 21482                           
 21483                           ;Dimmer_B1.c: 1474: }
 21484                           ;Dimmer_B1.c: 1475: }
 21485                           ;Dimmer_B1.c: 1478: if (DimmerIntr1.Count == DimmerIntr1.TuneValue4) {
 21486  1EFD  0021               	movlb	1	; select bank1
 21487  1EFE  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 21488  1EFF  0646               	xorwf	(_DimmerIntr1^(0+128)+10),w
 21489  1F00  1D03               	skipz
 21490  1F01  0008               	return
 21491                           
 21492                           ;Dimmer_B1.c: 1479: if (DimmerIntr1.ControlStatus == 1) {
 21493  1F02  1DBC               	btfss	_DimmerIntr1^(0+128),3
 21494  1F03  0008               	return
 21495                           
 21496                           ;Dimmer_B1.c: 1480: RB4 = 0;
 21497  1F04  0020               	movlb	0	; select bank0
 21498  1F05  120D               	bcf	13,4	;volatile
 21499                           
 21500                           ;Dimmer_B1.c: 1481: }
 21501                           ;Dimmer_B1.c: 1484: }
 21502                           ;Dimmer_B1.c: 1486: } else {
 21503  1F06  0008               	return
 21504  1F07                     i1l969:	
 21505                           
 21506                           ;Dimmer_B1.c: 1487: if (DimmerIntr1.GO == 1) {
 21507  1F07  1C3C               	btfss	_DimmerIntr1^(0+128),0
 21508  1F08  0008               	return
 21509                           
 21510                           ;Dimmer_B1.c: 1488: DimmerIntr1.Count++;
 21511  1F09  3001               	movlw	1
 21512  1F0A  00F0               	movwf	??_DimmerLights_TMR_1
 21513  1F0B  0870               	movf	??_DimmerLights_TMR_1,w
 21514  1F0C  07BE               	addwf	(_DimmerIntr1^(0+128)+2),f
 21515                           
 21516                           ;Dimmer_B1.c: 1489: if (DimmerIntr1.Count == 4) {
 21517  1F0D  083E               	movf	(_DimmerIntr1^(0+128)+2),w
 21518  1F0E  3A04               	xorlw	4
 21519  1F0F  1D03               	skipz
 21520  1F10  0008               	return
 21521                           
 21522                           ;Dimmer_B1.c: 1490: DimmerIntr1.Count = 0;
 21523  1F11  01BE               	clrf	(_DimmerIntr1^(0+128)+2)
 21524                           
 21525                           ;Dimmer_B1.c: 1491: DimmerIntr1.GO = 0;
 21526  1F12  103C               	bcf	_DimmerIntr1^(0+128),0
 21527                           
 21528                           ;Dimmer_B1.c: 1492: DimmerIntr1.Start = 1;
 21529  1F13  153C               	bsf	_DimmerIntr1^(0+128),2
 21530                           
 21531                           ;Dimmer_B1.c: 1494: if (DimmerIntr1.ControlStatus == 1) {
 21532  1F14  1DBC               	btfss	_DimmerIntr1^(0+128),3
 21533  1F15  0008               	return
 21534                           
 21535                           ;Dimmer_B1.c: 1495: RB4 = 1;
 21536  1F16  0020               	movlb	0	; select bank0
 21537  1F17  160D               	bsf	13,4	;volatile
 21538  1F18  0008               	return
 21539  1F19                     __end_of_DimmerLights_TMR_1:	
 21540                           
 21541                           	psect	text149
 21542  274C                     __ptext149:	
 21543 ;; *************** function _IOC_ISR *****************
 21544 ;; Defined at:
 21545 ;;		line 395 in file "../src/MCU_B1.c"
 21546 ;; Parameters:    Size  Location     Type
 21547 ;;		None
 21548 ;; Auto vars:     Size  Location     Type
 21549 ;;		None
 21550 ;; Return value:  Size  Location     Type
 21551 ;;		None               void
 21552 ;; Registers used:
 21553 ;;		wreg, status,2, status,0, pclath, cstack
 21554 ;; Tracked objects:
 21555 ;;		On entry : 0/0
 21556 ;;		On exit  : 0/0
 21557 ;;		Unchanged: 0/0
 21558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21560 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21562 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21563 ;;Total ram usage:        0 bytes
 21564 ;; Hardware stack levels used:    1
 21565 ;; Hardware stack levels required when called:    3
 21566 ;; This function calls:
 21567 ;;		_DimmerLights_IOC_1
 21568 ;;		_DimmerLights_IOC_2
 21569 ;; This function is called by:
 21570 ;;		_ISR
 21571 ;; This function uses a non-reentrant model
 21572 ;;
 21573                           
 21574                           
 21575                           ;psect for function _IOC_ISR
 21576  274C                     _IOC_ISR:	
 21577                           
 21578                           ;MCU_B1.c: 397: if (myMain.PowerON == 1) {
 21579                           
 21580                           ;incstack = 0
 21581                           ; Regs used in _IOC_ISR: [wreg+status,2+status,0+pclath+cstack]
 21582  274C  0021               	movlb	1	; select bank1
 21583  274D  1C2F               	btfss	_myMain^(0+128),0
 21584  274E  2F54               	goto	i1l8972
 21585                           
 21586                           ;MCU_B1.c: 403: DimmerLights_IOC_1();
 21587  274F  3190  2011  31A7   	fcall	_DimmerLights_IOC_1
 21588                           
 21589                           ;MCU_B1.c: 408: DimmerLights_IOC_2();
 21590  2752  3190  204E         	fcall	_DimmerLights_IOC_2
 21591  2754                     i1l8972:	
 21592                           
 21593                           ;MCU_B1.c: 416: }
 21594                           ;MCU_B1.c: 418: IOCBF2 = 0;
 21595  2754  0027               	movlb	7	; select bank7
 21596  2755  1116               	bcf	22,2	;volatile
 21597                           
 21598                           ;MCU_B1.c: 419: IOCIF = 0;
 21599  2756  100B               	bcf	11,0	;volatile
 21600  2757  0008               	return
 21601  2758                     __end_of_IOC_ISR:	
 21602                           
 21603                           	psect	text150
 21604  104E                     __ptext150:	
 21605 ;; *************** function _DimmerLights_IOC_2 *****************
 21606 ;; Defined at:
 21607 ;;		line 1706 in file "../src/Dimmer_B1.c"
 21608 ;; Parameters:    Size  Location     Type
 21609 ;;		None
 21610 ;; Auto vars:     Size  Location     Type
 21611 ;;		None
 21612 ;; Return value:  Size  Location     Type
 21613 ;;		None               void
 21614 ;; Registers used:
 21615 ;;		wreg, status,2, status,0, pclath, cstack
 21616 ;; Tracked objects:
 21617 ;;		On entry : 0/0
 21618 ;;		On exit  : 0/0
 21619 ;;		Unchanged: 0/0
 21620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21623 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21624 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21625 ;;Total ram usage:        2 bytes
 21626 ;; Hardware stack levels used:    1
 21627 ;; Hardware stack levels required when called:    2
 21628 ;; This function calls:
 21629 ;;		i1_Division
 21630 ;; This function is called by:
 21631 ;;		_IOC_ISR
 21632 ;; This function uses a non-reentrant model
 21633 ;;
 21634                           
 21635                           
 21636                           ;psect for function _DimmerLights_IOC_2
 21637  104E                     _DimmerLights_IOC_2:	
 21638                           
 21639                           ;Dimmer_B1.c: 1721: if (DimmerIntr2.Start == 0 && DimmerIntr2.GO == 0) {
 21640                           
 21641                           ;incstack = 0
 21642                           ; Regs used in _DimmerLights_IOC_2: [wreg+status,2+status,0+pclath+cstack]
 21643  104E  0021               	movlb	1	; select bank1
 21644  104F  1948               	btfsc	_DimmerIntr2^(0+128),2
 21645  1050  0008               	return
 21646  1051  1848               	btfsc	_DimmerIntr2^(0+128),0
 21647  1052  0008               	return
 21648                           
 21649                           ;Dimmer_B1.c: 1723: if (RB2 != DimmerIntr2.Status) {
 21650  1053  0E49               	swapf	(_DimmerIntr2^(0+128)+1),w
 21651  1054  0C89               	rrf	9,f
 21652  1055  3901               	andlw	1
 21653  1056  00FA               	movwf	??_DimmerLights_IOC_2
 21654  1057  3000               	movlw	0
 21655  1058  0020               	movlb	0	; select bank0
 21656  1059  190D               	btfsc	13,2	;volatile
 21657  105A  3001               	movlw	1
 21658  105B  067A               	xorwf	??_DimmerLights_IOC_2,w
 21659  105C  1903               	skipnz
 21660  105D  0008               	return
 21661                           
 21662                           ;Dimmer_B1.c: 1726: DimmerIntr2.Count = 0;
 21663  105E  0021               	movlb	1	; select bank1
 21664  105F  01CA               	clrf	(_DimmerIntr2^(0+128)+2)
 21665                           
 21666                           ;Dimmer_B1.c: 1727: DimmerIntr2.GO = 1;
 21667  1060  1448               	bsf	_DimmerIntr2^(0+128),0
 21668                           
 21669                           ;Dimmer_B1.c: 1729: if (DimmerIntr2.Dimming_Sw == 1 || DimmerIntr2.Dimming_RF == 1) {
 21670  1061  1E48               	btfss	_DimmerIntr2^(0+128),4
 21671  1062  1B48               	btfsc	_DimmerIntr2^(0+128),6
 21672                           
 21673                           ;Dimmer_B1.c: 1730: DimmerIntr2.Tune = 1;
 21674  1063  14C8               	bsf	_DimmerIntr2^(0+128),1
 21675                           
 21676                           ;Dimmer_B1.c: 1731: }
 21677                           ;Dimmer_B1.c: 1733: if (DimmerIntr2.TuneGO == 1) {
 21678  1064  1F49               	btfss	(_DimmerIntr2^(0+128)+1),6
 21679  1065  2884               	goto	i1l8462
 21680                           
 21681                           ;Dimmer_B1.c: 1734: DimmerIntr2.TuneGO = 0;
 21682  1066  1349               	bcf	(_DimmerIntr2^(0+128)+1),6
 21683                           
 21684                           ;Dimmer_B1.c: 1737: DimmerIntr2.TuneValue2 = Division(DimmerIntr2.DimmingValue, 2);
 21685  1067  3002               	movlw	2
 21686  1068  00FA               	movwf	??_DimmerLights_IOC_2
 21687  1069  087A               	movf	??_DimmerLights_IOC_2,w
 21688  106A  00F5               	movwf	i1Division@num
 21689  106B  084D               	movf	(_DimmerIntr2^(0+128)+5),w
 21690  106C  31A7  27C4  3190   	fcall	i1_Division
 21691  106F  00FB               	movwf	??_DimmerLights_IOC_2+1
 21692  1070  087B               	movf	??_DimmerLights_IOC_2+1,w
 21693  1071  0021               	movlb	1	; select bank1
 21694  1072  00D0               	movwf	(_DimmerIntr2^(0+128)+8)
 21695                           
 21696                           ;Dimmer_B1.c: 1738: DimmerIntr2.TuneValue3 = DimmerIntr2.TuneValue2 + (55 - DimmerIntr2.
      +                          DimmingValue);
 21697  1073  034D               	decf	(_DimmerIntr2^(0+128)+5),w
 21698  1074  3AFF               	xorlw	255
 21699  1075  0750               	addwf	(_DimmerIntr2^(0+128)+8),w
 21700  1076  3E37               	addlw	55
 21701  1077  00FA               	movwf	??_DimmerLights_IOC_2
 21702  1078  087A               	movf	??_DimmerLights_IOC_2,w
 21703  1079  00D1               	movwf	(_DimmerIntr2^(0+128)+9)
 21704                           
 21705                           ;Dimmer_B1.c: 1739: DimmerIntr2.TuneValue4 = DimmerIntr2.TuneValue3 + DimmerIntr2.TuneVa
      +                          lue2;
 21706  107A  0851               	movf	(_DimmerIntr2^(0+128)+9),w
 21707  107B  0750               	addwf	(_DimmerIntr2^(0+128)+8),w
 21708  107C  00FA               	movwf	??_DimmerLights_IOC_2
 21709  107D  087A               	movf	??_DimmerLights_IOC_2,w
 21710  107E  00D2               	movwf	(_DimmerIntr2^(0+128)+10)
 21711                           
 21712                           ;Dimmer_B1.c: 1740: DimmerIntr2.TuneEnd = DimmerIntr2.TuneValue4 + 5;
 21713  107F  0852               	movf	(_DimmerIntr2^(0+128)+10),w
 21714  1080  3E05               	addlw	5
 21715  1081  00FA               	movwf	??_DimmerLights_IOC_2
 21716  1082  087A               	movf	??_DimmerLights_IOC_2,w
 21717  1083  00D3               	movwf	(_DimmerIntr2^(0+128)+11)
 21718  1084                     i1l8462:	
 21719                           
 21720                           ;Dimmer_B1.c: 1741: }
 21721                           ;Dimmer_B1.c: 1750: DimmerIntr2.Status = RB2 == 1 ? 1 : 0;
 21722  1084  12C9               	bcf	(_DimmerIntr2^(0+128)+1),5
 21723  1085  0020               	movlb	0	; select bank0
 21724  1086  1D0D               	btfss	13,2	;volatile
 21725  1087  0008               	return
 21726  1088  0021               	movlb	1	; select bank1
 21727  1089  16C9               	bsf	(_DimmerIntr2^(0+128)+1),5
 21728  108A  0008               	return
 21729  108B                     __end_of_DimmerLights_IOC_2:	
 21730                           
 21731                           	psect	text151
 21732  1011                     __ptext151:	
 21733 ;; *************** function _DimmerLights_IOC_1 *****************
 21734 ;; Defined at:
 21735 ;;		line 1537 in file "../src/Dimmer_B1.c"
 21736 ;; Parameters:    Size  Location     Type
 21737 ;;		None
 21738 ;; Auto vars:     Size  Location     Type
 21739 ;;		None
 21740 ;; Return value:  Size  Location     Type
 21741 ;;		None               void
 21742 ;; Registers used:
 21743 ;;		wreg, status,2, status,0, pclath, cstack
 21744 ;; Tracked objects:
 21745 ;;		On entry : 0/0
 21746 ;;		On exit  : 0/0
 21747 ;;		Unchanged: 0/0
 21748 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21749 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21750 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21751 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21752 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21753 ;;Total ram usage:        2 bytes
 21754 ;; Hardware stack levels used:    1
 21755 ;; Hardware stack levels required when called:    2
 21756 ;; This function calls:
 21757 ;;		i1_Division
 21758 ;; This function is called by:
 21759 ;;		_IOC_ISR
 21760 ;; This function uses a non-reentrant model
 21761 ;;
 21762                           
 21763                           
 21764                           ;psect for function _DimmerLights_IOC_1
 21765  1011                     _DimmerLights_IOC_1:	
 21766                           
 21767                           ;Dimmer_B1.c: 1551: if (DimmerIntr1.Start == 0 && DimmerIntr1.GO == 0) {
 21768                           
 21769                           ;incstack = 0
 21770                           ; Regs used in _DimmerLights_IOC_1: [wreg+status,2+status,0+pclath+cstack]
 21771  1011  0021               	movlb	1	; select bank1
 21772  1012  193C               	btfsc	_DimmerIntr1^(0+128),2
 21773  1013  0008               	return
 21774  1014  183C               	btfsc	_DimmerIntr1^(0+128),0
 21775  1015  0008               	return
 21776                           
 21777                           ;Dimmer_B1.c: 1553: if (RB2 != DimmerIntr1.Status) {
 21778  1016  0E3D               	swapf	(_DimmerIntr1^(0+128)+1),w
 21779  1017  0C89               	rrf	9,f
 21780  1018  3901               	andlw	1
 21781  1019  00FA               	movwf	??_DimmerLights_IOC_1
 21782  101A  3000               	movlw	0
 21783  101B  0020               	movlb	0	; select bank0
 21784  101C  190D               	btfsc	13,2	;volatile
 21785  101D  3001               	movlw	1
 21786  101E  067A               	xorwf	??_DimmerLights_IOC_1,w
 21787  101F  1903               	skipnz
 21788  1020  0008               	return
 21789                           
 21790                           ;Dimmer_B1.c: 1556: DimmerIntr1.Count = 0;
 21791  1021  0021               	movlb	1	; select bank1
 21792  1022  01BE               	clrf	(_DimmerIntr1^(0+128)+2)
 21793                           
 21794                           ;Dimmer_B1.c: 1557: DimmerIntr1.GO = 1;
 21795  1023  143C               	bsf	_DimmerIntr1^(0+128),0
 21796                           
 21797                           ;Dimmer_B1.c: 1559: if (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr1.Dimming_RF == 1) {
 21798  1024  1E3C               	btfss	_DimmerIntr1^(0+128),4
 21799  1025  1B3C               	btfsc	_DimmerIntr1^(0+128),6
 21800                           
 21801                           ;Dimmer_B1.c: 1560: DimmerIntr1.Tune = 1;
 21802  1026  14BC               	bsf	_DimmerIntr1^(0+128),1
 21803                           
 21804                           ;Dimmer_B1.c: 1561: }
 21805                           ;Dimmer_B1.c: 1563: if (DimmerIntr1.TuneGO == 1) {
 21806  1027  1F3D               	btfss	(_DimmerIntr1^(0+128)+1),6
 21807  1028  2847               	goto	i1l8394
 21808                           
 21809                           ;Dimmer_B1.c: 1564: DimmerIntr1.TuneGO = 0;
 21810  1029  133D               	bcf	(_DimmerIntr1^(0+128)+1),6
 21811                           
 21812                           ;Dimmer_B1.c: 1567: DimmerIntr1.TuneValue2 = Division(DimmerIntr1.DimmingValue, 2);
 21813  102A  3002               	movlw	2
 21814  102B  00FA               	movwf	??_DimmerLights_IOC_1
 21815  102C  087A               	movf	??_DimmerLights_IOC_1,w
 21816  102D  00F5               	movwf	i1Division@num
 21817  102E  0841               	movf	(_DimmerIntr1^(0+128)+5),w
 21818  102F  31A7  27C4  3190   	fcall	i1_Division
 21819  1032  00FB               	movwf	??_DimmerLights_IOC_1+1
 21820  1033  087B               	movf	??_DimmerLights_IOC_1+1,w
 21821  1034  0021               	movlb	1	; select bank1
 21822  1035  00C4               	movwf	(_DimmerIntr1^(0+128)+8)
 21823                           
 21824                           ;Dimmer_B1.c: 1568: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + (55 - DimmerIntr1.
      +                          DimmingValue);
 21825  1036  0341               	decf	(_DimmerIntr1^(0+128)+5),w
 21826  1037  3AFF               	xorlw	255
 21827  1038  0744               	addwf	(_DimmerIntr1^(0+128)+8),w
 21828  1039  3E37               	addlw	55
 21829  103A  00FA               	movwf	??_DimmerLights_IOC_1
 21830  103B  087A               	movf	??_DimmerLights_IOC_1,w
 21831  103C  00C5               	movwf	(_DimmerIntr1^(0+128)+9)
 21832                           
 21833                           ;Dimmer_B1.c: 1569: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + DimmerIntr1.TuneVa
      +                          lue2;
 21834  103D  0845               	movf	(_DimmerIntr1^(0+128)+9),w
 21835  103E  0744               	addwf	(_DimmerIntr1^(0+128)+8),w
 21836  103F  00FA               	movwf	??_DimmerLights_IOC_1
 21837  1040  087A               	movf	??_DimmerLights_IOC_1,w
 21838  1041  00C6               	movwf	(_DimmerIntr1^(0+128)+10)
 21839                           
 21840                           ;Dimmer_B1.c: 1570: DimmerIntr1.TuneEnd = DimmerIntr1.TuneValue4 + 5;
 21841  1042  0846               	movf	(_DimmerIntr1^(0+128)+10),w
 21842  1043  3E05               	addlw	5
 21843  1044  00FA               	movwf	??_DimmerLights_IOC_1
 21844  1045  087A               	movf	??_DimmerLights_IOC_1,w
 21845  1046  00C7               	movwf	(_DimmerIntr1^(0+128)+11)
 21846  1047                     i1l8394:	
 21847                           
 21848                           ;Dimmer_B1.c: 1571: }
 21849                           ;Dimmer_B1.c: 1580: DimmerIntr1.Status = RB2 == 1 ? 1 : 0;
 21850  1047  12BD               	bcf	(_DimmerIntr1^(0+128)+1),5
 21851  1048  0020               	movlb	0	; select bank0
 21852  1049  1D0D               	btfss	13,2	;volatile
 21853  104A  0008               	return
 21854  104B  0021               	movlb	1	; select bank1
 21855  104C  16BD               	bsf	(_DimmerIntr1^(0+128)+1),5
 21856  104D  0008               	return
 21857  104E                     __end_of_DimmerLights_IOC_1:	
 21858                           
 21859                           	psect	text152
 21860  27C4                     __ptext152:	
 21861 ;; *************** function i1_Division *****************
 21862 ;; Defined at:
 21863 ;;		line 1437 in file "../src/Dimmer_B1.c"
 21864 ;; Parameters:    Size  Location     Type
 21865 ;;  value           1    wreg     unsigned char 
 21866 ;;  num             1    5[COMMON] unsigned char 
 21867 ;; Auto vars:     Size  Location     Type
 21868 ;;  value           1    8[COMMON] unsigned char 
 21869 ;;  Division        1    9[COMMON] unsigned char 
 21870 ;; Return value:  Size  Location     Type
 21871 ;;                  1    wreg      unsigned char 
 21872 ;; Registers used:
 21873 ;;		wreg, status,2, status,0, pclath, cstack
 21874 ;; Tracked objects:
 21875 ;;		On entry : 0/0
 21876 ;;		On exit  : 0/0
 21877 ;;		Unchanged: 0/0
 21878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21879 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21880 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21881 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21882 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21883 ;;Total ram usage:        5 bytes
 21884 ;; Hardware stack levels used:    1
 21885 ;; Hardware stack levels required when called:    1
 21886 ;; This function calls:
 21887 ;;		i1___lbdiv
 21888 ;; This function is called by:
 21889 ;;		_DimmerLights_IOC_1
 21890 ;;		_DimmerLights_IOC_2
 21891 ;; This function uses a non-reentrant model
 21892 ;;
 21893                           
 21894                           
 21895                           ;psect for function i1_Division
 21896  27C4                     i1_Division:	
 21897                           
 21898                           ;incstack = 0
 21899                           ; Regs used in i1_Division: [wreg+status,2+status,0+pclath+cstack]
 21900                           ;i1Division@value stored from wreg
 21901  27C4  00F8               	movwf	i1Division@value
 21902                           
 21903                           ;Dimmer_B1.c: 1438: char result = (char) (value / num);
 21904  27C5  0875               	movf	i1Division@num,w
 21905  27C6  00F6               	movwf	??i1_Division
 21906  27C7  0876               	movf	??i1_Division,w
 21907  27C8  00F0               	movwf	i1___lbdiv@divisor
 21908  27C9  0878               	movf	i1Division@value,w
 21909  27CA  319C  2454         	fcall	i1___lbdiv
 21910  27CC  00F7               	movwf	??i1_Division+1
 21911  27CD  0877               	movf	??i1_Division+1,w
 21912  27CE  00F9               	movwf	i1Division@result
 21913                           
 21914                           ;Dimmer_B1.c: 1439: return result;
 21915  27CF  0879               	movf	i1Division@result,w
 21916  27D0  0008               	return
 21917  27D1                     __end_ofi1_Division:	
 21918                           
 21919                           	psect	text153
 21920  1C54                     __ptext153:	
 21921 ;; *************** function i1___lbdiv *****************
 21922 ;; Defined at:
 21923 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 21924 ;; Parameters:    Size  Location     Type
 21925 ;;  dividend        1    wreg     unsigned char 
 21926 ;;  divisor         1    0[COMMON] unsigned char 
 21927 ;; Auto vars:     Size  Location     Type
 21928 ;;  dividend        1    2[COMMON] unsigned char 
 21929 ;;  __lbdiv         1    4[COMMON] unsigned char 
 21930 ;;  __lbdiv         1    3[COMMON] unsigned char 
 21931 ;; Return value:  Size  Location     Type
 21932 ;;                  1    wreg      unsigned char 
 21933 ;; Registers used:
 21934 ;;		wreg, status,2, status,0
 21935 ;; Tracked objects:
 21936 ;;		On entry : 0/0
 21937 ;;		On exit  : 0/0
 21938 ;;		Unchanged: 0/0
 21939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 21940 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21941 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21942 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21943 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 21944 ;;Total ram usage:        5 bytes
 21945 ;; Hardware stack levels used:    1
 21946 ;; This function calls:
 21947 ;;		Nothing
 21948 ;; This function is called by:
 21949 ;;		i1_Division
 21950 ;; This function uses a non-reentrant model
 21951 ;;
 21952                           
 21953                           
 21954                           ;psect for function i1___lbdiv
 21955  1C54                     i1___lbdiv:	
 21956                           
 21957                           ;incstack = 0
 21958                           ; Regs used in i1___lbdiv: [wreg+status,2+status,0]
 21959                           ;i1___lbdiv@dividend stored from wreg
 21960  1C54  00F2               	movwf	i1___lbdiv@dividend
 21961  1C55  01F4               	clrf	i1___lbdiv@quotient
 21962  1C56  0870               	movf	i1___lbdiv@divisor,w
 21963  1C57  1903               	btfsc	3,2
 21964  1C58  2C73               	goto	i1l7644
 21965  1C59  01F3               	clrf	i1___lbdiv@counter
 21966  1C5A  0AF3               	incf	i1___lbdiv@counter,f
 21967  1C5B                     i1l7632:	
 21968  1C5B  1BF0               	btfsc	i1___lbdiv@divisor,7
 21969  1C5C  2C64               	goto	i1l7634
 21970  1C5D  1003               	clrc
 21971  1C5E  0DF0               	rlf	i1___lbdiv@divisor,f
 21972  1C5F  3001               	movlw	1
 21973  1C60  00F1               	movwf	??i1___lbdiv
 21974  1C61  0871               	movf	??i1___lbdiv,w
 21975  1C62  07F3               	addwf	i1___lbdiv@counter,f
 21976  1C63  2C5B               	goto	i1l7632
 21977  1C64                     i1l7634:	
 21978  1C64  1003               	clrc
 21979  1C65  0DF4               	rlf	i1___lbdiv@quotient,f
 21980  1C66  0870               	movf	i1___lbdiv@divisor,w
 21981  1C67  0272               	subwf	i1___lbdiv@dividend,w
 21982  1C68  1C03               	skipc
 21983  1C69  2C6E               	goto	L15
 21984  1C6A  0870               	movf	i1___lbdiv@divisor,w
 21985  1C6B  02F2               	subwf	i1___lbdiv@dividend,f
 21986  1C6C  1474               	bsf	i1___lbdiv@quotient,0
 21987  1C6D  1003               	clrc
 21988  1C6E                     L15:	
 21989  1C6E  0CF0               	rrf	i1___lbdiv@divisor,f
 21990  1C6F  3001               	movlw	1
 21991  1C70  02F3               	subwf	i1___lbdiv@counter,f
 21992  1C71  1D03               	btfss	3,2
 21993  1C72  2C64               	goto	i1l7634
 21994  1C73                     i1l7644:	
 21995  1C73  0874               	movf	i1___lbdiv@quotient,w
 21996  1C74  0008               	return
 21997  1C75                     __end_ofi1___lbdiv:	
 21998  007E                     btemp	set	126	;btemp
 21999  007E                     pic14e$flags	set	126
 22000  007E                     wtemp	set	126
 22001  007E                     wtemp0	set	126
 22002  0080                     wtemp1	set	128
 22003  0082                     wtemp2	set	130
 22004  0084                     wtemp3	set	132
 22005  0086                     wtemp4	set	134
 22006  0088                     wtemp5	set	136
 22007  007F                     wtemp6	set	127
 22008  007E                     ttemp	set	126
 22009  007E                     ttemp0	set	126
 22010  0081                     ttemp1	set	129
 22011  0084                     ttemp2	set	132
 22012  0087                     ttemp3	set	135
 22013  007F                     ttemp4	set	127
 22014  007E                     ltemp	set	126
 22015  007E                     ltemp0	set	126
 22016  0082                     ltemp1	set	130
 22017  0086                     ltemp2	set	134
 22018  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         270
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     80      80
    BANK1            80      9      80
    BANK2            80      0      78
    BANK3            80      0      77
    BANK4            80      0      78
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerIntr	PTR struct Dimmer_Interrupt size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(2) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK4[9]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK3[4]), VarLED2(BANK3[4]), VarLED1(BANK3[4]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 8
		 -> NULL(NULL[0]), DimmerLights2(BANK3[8]), DimmerLights1(BANK3[8]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK3[5]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_TMR_1
    _TMR1_ISR->_DimmerLights_TMR_2
    _IOC_ISR->_DimmerLights_IOC_1
    _IOC_ISR->_DimmerLights_IOC_2
    _DimmerLights_IOC_2->i1_Division
    _DimmerLights_IOC_1->i1_Division
    i1_Division->i1___lbdiv

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOn
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setRF_Main->_getRxData
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRF_AdjControl->_getDimmerLights_Status
    _setRFSW_Control->_setDelayOff_GO
    _setRFSW_AdjControl->_setDimmerIntr_MaxmumValue
    _setRFSW_AdjControl->_setProductData
    _setDimmerLights_DimmingRun->_DimmerLights_SelectPointer
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_Flash_Memory_Read
    _Exception_Main->_setBuz
    _setDimmerLights_Main->_setDimmerLights_OnOff
    _setDimmerLights_OnOff->_setDelayOff_GO
    _setLED->_LedPointSelect
    _setDimmerLights_DimmingClose->_setDimmerIntr_Dimming_Sw
    _setDimmerIntr_DimmingValue->_getDimmerLights_PercentToValue
    _setDelayOff_GO->_setProductData
    _getDelayOff_GO->_DelayOffPointSelect
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setDimmerIntr_MaxmumValue->_getDimmerLights_PercentToValue
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _DimmerIntr_Initialization->_getDimmerLights_PercentToValue
    _DimmerIntr_Initialization->_getDimmerLights_ValueToPercent
    _getDimmerLights_ValueToPercent->___fttol
    _getDimmerLights_PercentToValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftmul->___awtoft
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _Division->___lbdiv
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setProductData
    _setProductData->_getDimmerLights_ValueToPercent
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_DimmerLights_SelectPointer
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main
    _setControl_Lights_Table->_setRFSW_Control
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_OnOff

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  154682
                                              5 BANK1      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1523
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     488
                                              4 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     585
                                              4 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     222
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    5927
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                        10    10      0    5927
                                             69 BANK0     10    10      0
                            ___lwdiv
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
            _setOverTemp_ADV_Restore
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setOverTemp_ADV_Restore                              3     3      0      68
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    3952
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    3952
                                             19 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      66
                                              2 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     117
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0    1182
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0    1182
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   45817
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   45817
                                              3 BANK1      2     2      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   41243
                                             78 BANK0      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    4281
                                             69 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   36778
             _getDimmerLights_Status
           _getMain_All_LightsStatus
                      _setCmd_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                   _setRF_AdjControl
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRF_AdjControl                                     4     4      0     338
                                              4 BANK0      4     4      0
         _DimmerLights_SelectPointer
           _getDimmerIntr_Dimming_Sw
             _getDimmerLights_Status
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      4     4      0   10535
                                             77 BANK0      1     1      0
                                              0 BANK1      3     3      0
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   20924
                                             69 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
         _setDimmerLights_DimmingRun
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                   _setMemory_Modify
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setDimmerLights_DimmingRun                           3     2      1     177
                                              2 BANK0      3     2      1
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     470
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    2367
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     516
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     536
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     471
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     338
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     547
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     448
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    2262
                                              8 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
    _getAll_DimmerIntr_Dimming_Sw_RF
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerIntr_Dimming_Sw_RF                      4     4      0      95
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     270
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4    1230
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     217
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     217
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1306
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1306
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    3     3      0    1663
                                              6 BANK0      3     3      0
                _Flash_Memory_Modify
                _getAll_Sw_KeyStatus
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _getAll_Sw_KeyStatus                                  3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1520
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    1430
                                              4 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1    1290
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    3523
                                             13 BANK0      9     9      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 2     2      0      25
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   49855
       _DimmerLights_DimmingFunction
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   49580
                                              1 BANK1      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
           _getMain_All_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                4     3      1   28608
                                             77 BANK0      3     2      1
                                              0 BANK1      1     1      0
                      _getCmd_Status
                     _getDelayOff_GO
     _getDimmerLights_PercentToValue
           _getMain_All_LightsStatus
                      _setCmd_Status
                     _setDelayOff_GO
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
       _setDimmerLights_DimmingClose
               _setDimmerLights_Line
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1    1151
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      93
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_DimmingClose                         0     0      0     355
           _setDimmerIntr_Dimming_Sw
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_Dimming_RF                             3     2      1     266
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     177
                                             66 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     266
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (6) _setDelayOff_GO                                       8     6      2    3719
                                             69 BANK0      8     6      2
                _DelayOffPointSelect
                             ___bmul
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) ___bmul                                               4     3      1     270
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setCmd_Status                                        3     2      1     222
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      47
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      89
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getCmd_Status                                        2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              4     3      1   20477
                                             74 BANK0      4     3      1
         _getDimmerIntr_DimmingValue
     _getDimmerLights_ValueToPercent
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                   _setMemory_Modify
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    3137
                                             69 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_MaxmumValue                            3     2      1     355
                                             66 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (5) _setDimmerIntr_Dimming_Sw                             3     2      1     355
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      69
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      6     6      0     187
                                              1 BANK0      6     6      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     161
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (2) _DimmerLights_DimmingFunction                         2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0   27563
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            2     2      0   27563
                                             66 BANK0      2     2      0
                           _Division
     _getDimmerLights_PercentToValue
     _getDimmerLights_ValueToPercent
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_ValueToPercent                       6     6      0   11771
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_PercentToValue                       6     6      0   15148
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     430
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     223
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    3377
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    3687
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    4221
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    3142
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2873
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (3) _Division                                             5     4      1     622
                                              5 BANK0      5     4      1
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (4) ___lbdiv                                              5     4      1     251
                                              0 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    4866
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    4866
                                             69 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       3     2      1    2714
                                             66 BANK0      3     2      1
     _getDimmerLights_ValueToPercent (ARG)
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 6     6      0    1843
                                             13 BANK0      6     6      0
         _DimmerLights_SelectPointer
           _getDimmerIntr_Dimming_Sw
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1523
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     478
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_Dimming_Sw                             2     2      0      69
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0      66
                                              2 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      89
                                              2 BANK0      2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      66
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      66
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (7) _DelayOffPointSelect                                  2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  1     1      0     614
                                             12 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0       0
                 _DimmerLights_TMR_1
                 _DimmerLights_TMR_2
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_2                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_1                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _IOC_ISR                                             0     0      0     614
                 _DimmerLights_IOC_1
                 _DimmerLights_IOC_2
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_2                                  2     2      0     307
                                             10 COMMON     2     2      0
                         i1_Division
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_1                                  2     2      0     307
                                             10 COMMON     2     2      0
                         i1_Division
 ---------------------------------------------------------------------------------
 (12) i1_Division                                          5     4      1     307
                                              5 COMMON     5     4      1
                          i1___lbdiv
 ---------------------------------------------------------------------------------
 (13) i1___lbdiv                                           5     4      1     188
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _getDimmerIntr_Dimming_Sw
         _setBuz
           ___awdiv
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
       _Division
         ___lbdiv
       _getDimmerLights_PercentToValue
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _getDimmerLights_ValueToPercent
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setMemory_Modify
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _DimmerLights_DimmingFunction
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_All_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setMemory_Modify
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _getCmd_Status
         _getDelayOff_GO
           _DelayOffPointSelect
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getMain_All_LightsStatus
         _setCmd_Status
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_DimmingClose
           _setDimmerIntr_Dimming_Sw
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLights_SelectPointer
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLights_SelectPointer
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getAll_Sw_KeyStatus
     _getMain_All_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerIntr_Dimming_Sw_RF
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _getMain_All_LightsStatus
           _setCmd_Status
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _getDimmerIntr_Dimming_Sw
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_PercentToValue
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setDimmerIntr_Dimming_RF
             _setDimmerIntr_MaxmumValue
               _getDimmerLights_PercentToValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_DimmingRun
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _getDimmerIntr_Dimming_Sw
               _setBuz
                 ___awdiv
             _setMemory_Modify
             _setProductData
               _getDimmerLights_ValueToPercent (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _getDimmerIntr_Dimming_Sw
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setRF_AdjControl
             _DimmerLights_SelectPointer
             _getDimmerIntr_Dimming_Sw
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _getDimmerIntr_Dimming_Sw
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       ___lwdiv
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
       _setBuz
         ___awdiv
       _setOverTemp_ADV_Restore
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_IOC_1
       i1_Division
         i1___lbdiv
     _DimmerLights_IOC_2
       i1_Division
         i1___lbdiv
   _TMR1_ISR
     _DimmerLights_TMR_1
     _DimmerLights_TMR_2

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       1       6        1.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      9      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4E       9       97.5%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4D      11       96.3%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      4E      13       97.5%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     197      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     197      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Wed Mar 18 15:12:45 2015

                    __size_of_Switch_Main 000B                     ?_Flash_Memory_Erasing 0070  
                              __CFG_CP$ON 0000                              _WDT_Clearing 0002  
                   __end_of_setCmd_Status 1AA2                            ___bmul@product 0022  
               getMain_Lights_Count@count 0020                                        l98 1305  
                                      _RD 0CA8                   __end_of_CC2500_WriteREG 1D1F  
                                      _WR 0CA9                              ___awdiv@sign 0026  
                                      _Sw 00D4                            setTemp_Main@AD 006D  
                     ___wmul@multiplicand 0022                      _getDimmerLights_Line 1946  
                  __end_of_setDelayOff_GO 0B40                              ___ftadd@exp1 004D  
                            ___ftadd@exp2 004C                    setRF_AdjControl@status 0025  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 15DD  
                    _setDimmerLights_Line 1B7A                              ___ftadd@sign 004B  
                                     l100 1319                                       l110 11BC  
                                     l112 11CC                                       l108 11D2  
                                     l109 11CE                      _setDimmerLights_SwOn 0833  
                                     l327 1AAE                                       l328 1AB0  
                                     l371 07DE                                       l259 16F7  
                                     l581 1787                                       l744 0DEB  
                                     l745 0E41                                       l763 19FB  
                                     l931 194F                                       l932 1956  
                                     l926 1B8A                                       l870 1D5A  
                                     l897 0790                                       _GIE 005F  
                                     _CRC 00D6                                       _RA0 0060  
                                     _RB0 0068      __size_of_DimmerLights_Initialization 000B  
                                     _RB1 0069                                       _RA3 0063  
                                     _RC0 0070                                       _RB2 006A  
                                     _RA4 0064                                       _LED 00DB  
                                     _RC1 0071                                       _RB3 006B  
                                     _RC2 0072                                       _RB4 006C  
                                     _RA6 0066                                       _RB5 006D  
                                     _RA7 0067                                       _RC4 0074  
                                     _RC5 0075                                       _RC7 0077  
                                     _RF1 00A0                                       _ISR 0004  
                                     _WDT 0136                                       _Cmd 00D7  
            getDimmerLights_Status@lights 0022                                       _Sw1 01BE  
                                     _Sw2 0245                ??_setDimmerIntr_Dimming_RF 0021  
              ??_setDimmerIntr_Dimming_Sw 0021           setDimmerIntr_Dimming_RF@command 0020  
                __end_of_CC2500_WriteByte 1ABB                     _Buzzer_Initialization 269A  
                         __end_of_ADC_Set 26DE                                       wreg 0009  
    setDimmerLights_Initialization@lights 0070              getDimmerLights_Status@status 0023  
     __end_of_setDimmerIntr_ControlStatus 1E18               _setDimmerIntr_ControlStatus 1DE9  
                       ??_getSw_KeyStatus 0020                                      ?_ISR 0070  
                            ___ftdiv@cntr 0038                           __end_of_IOC_ISR 2758  
                   _setDimmerLights_OnOff 0705          setDimmerLights_DimmingRun@lights 0024  
                              Load_Main@i 0030                              ___ftdiv@sign 003D  
                                    l1023 08CD                                      l1041 0906  
                                    l1050 0925                                      l1034 08E1  
                                    l1044 090F                                      l1039 0911  
                                    l1153 1BFF                                      l1154 1C09  
                                    l2233 15DB                                      l2218 27E5  
                                    l1187 113F                                      l1461 1104  
                                    l2253 0BE3                                      l2246 1EA6  
                                    l3240 1430                                      l2264 0C69  
                                    l2192 0650                                      l3073 1BA1  
                                    l1625 01FF                                      l2193 06A1  
                                    l3234 1419                                      l1475 1E6F  
                                    l1635 01DB                                      l1627 008B  
                                    l2267 13D2                                      l1636 01D9  
                                    l1628 0087                                      l2188 0701  
                                    l1485 0A25                                      l1629 0082  
                         __end_of_IOC_Set 2736                                      l2621 0384  
                                    l3263 042B                                      l2623 0250  
                                    l1815 04A4                                      l1809 0553  
                          _Load_Main$3735 002A                                      l2912 1FFE  
                                    l7010 0AF2                                      l7020 0B22  
                                    l2941 082D                                      l2599 19D9  
                                    l2936 0816                                      l7024 0B36  
                                    l2937 0831                                      l7202 1944  
                                    l7044 1A37                                      l7212 1A9B  
                                    l7052 1E30                                      l8004 100B  
                                    l7208 1A8C                                      l2968 062F  
                                    l8104 1ED1                                      l8040 15B0  
                                    l8024 158E                                      l2977 1AA1  
                                    l7242 13C5                                      l6532 13F6  
                                    l7068 1560                                      l7412 1E01  
                                    l7420 1A4E                                      l8108 1EDA  
                                    l8204 1C8F                                      l7164 07EF  
                                    l8036 15A7                     _setDimmerLights_SwOff 1F51  
                                    l6630 1A09                                      l6542 141E  
                                    l6534 1400                                      l8302 091E  
                                    l7430 19F1                                      l7190 1DD4  
                                    l8206 1C94                                      l7166 07FA  
                                    l7262 0943                                      l8070 1BE2  
                                    l6544 1426                                      l6536 1405  
                                    l6528 13EF                                      l6704 03CA  
                                    l9016 10E3                                      l7272 0993  
                                    l8056 1A65                                      l8080 1BEE  
                                    l8072 1BE4                                      l6642 1A7D  
                                    l6562 1237                                      l6722 03F7  
                                    l9202 01C1                                      l9106 0069  
                                    l7258 093E                                      l8082 1BF2  
                                    l6580 1256                                      l6740 043D  
                                    l6724 0401                                      l6716 03E4  
                                    l6812 0D40                                      l8260 08C7  
                                    l7452 0811                                      l7540 18B1  
                                    l6660 18B6                                      l9140 00AE  
                                    l9124 008A                                      l9060 17AD  
                                    l6654 1A20                                      l6646 1A87  
                                    l6590 1271                                      l7606 1CC0  
                                    l6734 041D                                      l6726 0406  
                                    l6806 0D2A                                      l8270 08DE  
                                    l7462 0828                                      l7454 081A  
                                    l7534 18A5                                      l7294 1FB4  
                                    l6568 1242                                      l7608 1CC9  
                                    l6744 044F                                      l6736 0427  
                                    l6728 040A                                      l6840 0D9F  
                                    l6824 0D7B                                      l8272 08E2  
                                    l6664 18BC                                      l8096 1EB3  
                                    l9072 17D4                                      l6594 1279  
                                    l6586 1268                                      l6578 124A  
                                    l7618 1CD8                                      l6682 1CE5  
                                    l6754 046A                                      l6770 0C97  
                                    l8266 08D3                                      l7538 18AC  
                                    l8098 1EBF                                      l8194 1C7F  
                                    l9146 00E0                                      l9306 1FDE  
                                    l6764 0C81                                      l6836 0D97  
                                    l6828 0D83                                      l8268 08DA  
                                    l7804 10C2                                      l9172 0163  
                                    l7580 0C36                                      l8540 1C22  
                                    l9068 17CC                                      l6950 0850  
                                    l6694 03B4                                      l8294 0908  
                                    l7806 10C7                                      l9238 01EE  
                                    l9182 018F                                      l7590 0C4A  
                                    l7582 0C3A                                      l7574 0BF2  
                                    l7566 0BCE                                      l9270 0B9F  
                                    l9262 0B71                                      l6960 0861  
                                    l6952 0853                                      l6792 0CF1  
                                    l6784 0CD8                                      l6864 0A46  
                                    l9192 01AB                                      l7584 0C3E  
                                    l7576 0BF9                                      l8544 1C27  
                                    l9088 17FB                                      l6962 0866  
                                    l6698 03BB                                      l6890 0A91  
                                    l6882 0A76                                      l9178 0172  
                                    l9186 019B                                      l7586 0C42  
                                    l7578 0C14                                      l7594 0C4E  
                                    l8642 04A7                                      l8650 04B9  
                                    l8538 1C1F                                      l9274 0BB6  
                                    l9266 0B88                                      l6972 088D  
                                    l6892 0A9A                                      l6884 0A84  
                                    l8564 188A                                      l7588 0C46  
                                    l8820 0283                                      l8804 0238  
                   _myMain_Initialization 196C                                      l6974 0893  
                                    l6894 0A9D                                      l7782 109B  
                                    l8590 0A1E                                      l8582 09C3  
                                    l9622 1AE7                                      l9710 1179  
                                    l8830 02B8                                      l8904 11A6  
                                    l6976 089E                                      l8576 09AE  
                                    l9616 1ADE                                      l9720 1189  
                                    l9704 1170                                      l9640 1B6D  
                                    l8680 052A                                      l8648 04B6  
                                    l6898 0AAB                                      l7794 10B1  
                                    l9802 1219                                      l9810 1221  
                                    l9618 1AE1                                      l9650 1D05  
                                    l9714 1180                                      l9706 1173  
                                    l9642 1B73                                      l8690 053F  
                                    l6988 1F7F                                      l7796 10B4  
                                    l7948 1E57                                      l9652 1D08  
                                    l9716 1183                                      l9900 168F  
                                    l9820 16C3                                      l8844 02F8  
                                    l8692 0541                                      l7878 129C  
                                    l9806 121D                                      l9822 16C6  
                                    l8790 19E4                                      l8854 032C  
                                    l9656 1D0E                                      l9840 16DE  
                                    _CFGS 0CAE                                      l9682 1D32  
                                    l9850 1706                                      l9826 16CC  
                                    l8786 19DE                                      l9772 11E8  
                                    l9780 11F0                                      l8884 1B9B  
                                    l9676 1D29                                      l9852 170A  
                                    l9844 16FD                                      l9942 076A  
                                    l8990 0FB8                                      l9678 1D2C  
                                    l9854 170D                                      l9846 1700  
                                    l9960 07A0                                      l9936 074C  
                            __CFG_WDTE$ON 0000                                      l9786 11F9  
                                    l9794 1201                                      l9938 0763  
                                    l9946 0770                                      l9882 1664  
                                    l9858 1713                                      l9980 07D6  
                                    l9964 07A7                                      l9876 165B  
                                    l9878 165E                                      l9898 1676  
                                    l9998 1605                                      _FREE 0CAC  
                                    _LATA 010C                                      _LATB 010D  
                                    _LATC 010E                                      u6005 0D8A  
                                    u5315 13FB                                      u6035 0DA0  
                                    u6115 0A77                                      _PEIE 005E  
                                    u6045 0DA6                                      u5335 1414  
                                    u6145 0A92                                      u5435 124D  
                                    u5355 1421                                      u6085 0A4D  
                                    u5455 1257                                      u6440 151B  
                                    u5465 1261                                      u5385 1437  
                                    u5475 1269                                      u5725 03E5  
                                    u6445 1519                                      u5815 041E  
                                    u9015 04FC                                      u5905 0CD9  
                                    u6385 0AFE                                      u6545 07E4  
                                    u5755 03F8                                      u5915 0CE8  
                                    u9035 0513                                      u5925 0CF2  
                                    u7605 19CC                                      u9055 0531  
                                    u5785 040B                                      u7635 1B4D  
                                    u5885 0CA9                                      u5965 0D4C  
                                    u5895 0CB9                                      u5975 0D5C  
                                    u9425 1BA2                                      u5995 0D84  
                                    u9435 1BA7                                      u7935 1EB6  
                                    u9465 119C                                      u7955 1EC0  
                                    u7965 1ECA                                      u9725 17BC  
                                    u7975 1ED2                                      u9665 10FB  
                                    _LWLO 0CAD                                      u9925 00AC  
                                    u9935 00DE                                      u9775 17EB  
                                    u9945 0122                                      _RSSI 00DD  
                                    _WREN 0CAA                                      _WPUB 020D  
      __end_of_setDimmerLights_DimmingRun 1B25                _setDimmerLights_DimmingRun 1B0A  
                                    _Buz1 0120                                      _Load 0138  
                                    _Temp 0160                                      _main 132D  
                            ___ftpack@arg 0020                       __end_of_DlyOff_Main 178E  
                         __end_of_RF_Main 26A6                              ___ftpack@exp 0023  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                           __end_of_WDT_Set 27B8  
                                    ltemp 007E             __size_of_setRF_Initialization 000B  
                                    start 001F                                      ttemp 007E  
                                    wtemp 007E         setDimmerLights_SwOn@dimmingStatus 002E  
    __end_of_DimmerLights_DimmingFunction 0927     __size_of_DimmerLights_DimmingFunction 0080  
            _DimmerLights_DimmingFunction 08A7                __end_of_setRFSW_AdjControl 09A7  
                       ___bmul@multiplier 0023                              ___ftmul@cntr 003C  
                            ___ftmul@sign 003D              __size_of_Temp_Initialization 0003  
    _getDimmerLights_Allow_Condition$2454 0022      _getDimmerLights_Allow_Condition$2455 0023  
    _getDimmerLights_Allow_Condition$2456 0024                         ?_getDimmer_LoadGO 0070  
                                   ??_ISR 007C                              ___fttol@exp1 005B  
                            ___fttol@lval 0057         setDimmerLights_DimmingRun@command 0022  
 __end_of_getDimmerLights_Allow_Condition 10C9  __size_of_getDimmerLights_Allow_Condition 003E  
       ??_getDimmerLights_Allow_Condition 0021          ?_getDimmerLights_Allow_Condition 0070  
         _getDimmerLights_Allow_Condition 108B                    _getDimmerLights_Status 27EF  
                      ??_getDimmer_LoadGO 0020                          __end_of_LED_Main 27A0  
                   ?_getDimmerLights_Line 0070                                _DimmerIntr 00D9  
                                   l10000 160C                                     l10010 1634  
                                   l10012 163B                                     l10102 06E2  
                                   l10210 0602                                     l10212 05DD  
                                   l10116 06FA                                     l10134 1D5C  
                                   l10214 060A                                     l10222 0625  
                                   l10216 0614                                     l10074 069C  
                                   l10180 0589                                     l10174 0579  
                                   l10192 05C0                                     l10184 0598  
                                   l10088 06B0                                     l10264 1351  
                                   l10194 059B                                     l10196 05C8  
                                   l10268 135C                     ?_setDimmerLights_Main 0070  
                   ?_setDimmerLights_Line 0070                           ?_setDelayOff_GO 0065  
                   ?_setDimmerLights_SwOn 0070                                     ?_main 00EA  
                         __end_of___awdiv 1280                           __end_of___lbdiv 1CDA  
                         __end_of___ftadd 0482                           __end_of___ftdiv 0D13  
                         __end_of___ftneg 2717                                     u10025 01A2  
                                   u10135 0B64                                     u10215 1FF6  
                                   u10145 0B7B                                     u10155 0B92  
                         __end_of___ftmul 0DC7                                     u10165 0BA9  
                                   u10175 0BC0                           ___awdiv@divisor 0020  
                                   u11415 06D1                                     _T1CON 0018  
                         __end_of___fttol 0AB4                                     u10575 19A2  
                                   u11560 05C6                                     u11385 0674  
                                   u11565 05A4                                     u11590 0608  
                                   u11595 05E6                                     _IOCBF 0396  
                                   _IOCBN 0395                                     _IOCBP 0394  
                                   _IOCIE 005B                                     _IOCIF 0058  
                         __end_of___lwdiv 1EE1                                     i1l969 1F07  
                                   i1l993 1F3F                           ___awdiv@counter 0025  
           __size_of_CC2500_FrequencyCabr 000C                                     _TMR1H 0017  
                                   _TMR1L 0016                                     _PORTA 000C  
                                   _PORTB 000D                                     _PORTC 000E  
                            ?_setLED_Main 0070                        setRF_Learn@command 0021  
                                   _TRISA 008C                                     _TRISB 008D  
                                   _TRISC 008E                   __end_of_Timeout_Counter 19D2  
                           __CFG_WRT$HALF 0000    __end_of_getDimmerLights_ValueToPercent 1511  
 __size_of_getDimmerLights_ValueToPercent 0065            _getDimmerLights_ValueToPercent 14AC  
                                   _Light 00DC                           i1Division@value 0078  
                        __end_of_TMR1_ISR 1CB8                               ?i1_Division 0075  
                 __size_of_setProductData 000C              __size_of_CC2500_WriteCommand 001A  
                        __end_of_TMR1_Set 27AC        DimmerLights_DimmingFunction@lights 0021  
                                   _getAD 1C14                             ___awtoft@sign 002D  
                           ___ftpack@sign 0024               __size_of_CC2500_ClearRXFIFO 0004  
                           ??_Buzzer_Main 0020                          __end_of_WDT_Main 190D  
             __size_of_CC2500_ClearTXFIFO 0004                       CC2500_RxData@loop_f 0025  
                          __pbitbssCOMMON 03E8                            __CFG_BOREN$OFF 0000  
            __end_of_getMain_Lights_Count 18E9                        Flash_Memory_Read@i 0021  
                        ?_CC2500_ReadByte 0070                                     ltemp0 007E  
                                   ltemp1 0082                                     ltemp2 0086  
                                   ltemp3 0080            __size_of_setLED_Initialization 0012  
           __end_of_setLED_Initialization 18D7                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                            ?_setRF_Learn 0070                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F                        __size_ofi1___lbdiv 0021  
                     _getAll_Sw_KeyStatus 187F                        _setRF_DimmerLights 1511  
                         ___lbdiv@divisor 0020               __size_of_Flash_Memory_Write 002F  
                       ?_CC2500_SIDLEMode 0070                           ___lbdiv@counter 0023  
              __size_of_RF_Initialization 0003          __size_of_DelayOff_Initialization 0008  
                  ?_setLoad_AH_AL_Restore 0070                         setTemp_Main@error 0067  
             __size_of_setRF_TransceiveGO 0013                    ??_Flash_Memory_Erasing 0020  
             ??_setDimmerLights_DimmingOn 0022                        ??_CC2500_SIDLEMode 0024  
                         __initialization 0021                          ?_CC2500_PowerRST 0070  
           ?_DimmerLights_DimmingFunction 0070                         ?_setMemory_Modify 0070  
                        __end_of_Division 27E0                   __size_of_getDelayOff_GO 0011  
                            __end_of_main 1388                       ?_setRF_DimmerLights 0065  
                        __end_of_Fosc_Set 26B0            getMain_All_LightsStatus@status 0020  
                      ??_setMemory_Modify 0020              setDimmerLights_OnOff@command 006D  
                          _Exception_Main 0559                          ?_CC2500_WriteREG 0022  
                               ??_ADC_Set 0020                      _setSw_Initialization 2706  
                                  ??_main 0070                             ___fttol@sign1 0056  
                    ?_getAll_Sw_KeyStatus 0070                              ?_setLog_Code 0070  
             ?_setDimmerIntr_DimmingValue 0062              ??_DimmerLights_SelectPointer 0020  
                 _setControl_Lights_Table 0BCD                            _setMemory_Data 2770  
                  ?_Buzzer_Initialization 0070                   ??_DlyOff_Initialization 0022  
                              _Receive_OK 0778        setDimmerIntr_ControlStatus@command 0020  
                 _setDimmerLights_Dimming 1280                                 ??_IOC_ISR 007C  
                               ??_IOC_Set 0020                               _DimmerIntr1 00BC  
                             _DimmerIntr2 00C8                  _getMain_All_LightsStatus 1933  
                __size_of_setRFSW_Control 005E                        _RF_Timeout_Counter 1993  
                 ??_Switch_Initialization 0025                    ?_setDimmerLights_OnOff 006D  
                    ??_setRF_DimmerLights 0066                                    ?_getAD 0020  
                       ??_getRF_KeyStatus 0020                    ?_setDimmerLights_SwOff 0070  
                             _DlyOff_Main 171F                    ?_myMain_Initialization 0070  
                                  _ADCON0 009D                                    _ADCON1 009E  
        __end_of_getDimmerIntr_Dimming_Sw 1A89                                 ??_RF_Main 0070  
                                  _ADRESH 009C                                    _ADRESL 009B  
                        ___awdiv@dividend 0022                     _getDimmer_Load_Status 26FE  
                               ??_WDT_Set 0020                          __end_of___awtoft 1CFC  
                                  _ANSELA 018C                                    _ANSELB 018D  
                                  _ANSELC 018E                          __end_of___ftpack 1447  
                _getMain_All_Error_Status 0800                  setRFSW_Control@rfDimming 00E6  
                                  _IOCBF2 1CB2                                    i1l1424 001A  
                                  i1l8412 1F2D                                    i1l8350 1EFD  
                                  i1l8406 1F26                                    i1l7632 1C5B  
                                  i1l8344 1EF5                                    i1l7634 1C64  
                                  i1l8338 1EEE                                    i1l8418 1F35  
                                  i1l7644 1C73                                    i1l8462 1084  
                                  i1l8394 1047                                    i1l9508 0012  
                                  i1l8962 1CB1                                    i1l8972 2754  
                                  _FVRCON 0117      getDimmerLights_Allow_Condition@allow 0026  
                                  _PMADRH 0192                                    _PMADRL 0191  
                                  _PMDATH 0194                                    _PMDATL 0193  
                     ?_RF_Timeout_Counter 0070                                    _PMCON2 0196  
                                  _OSCCON 0099                        __size_of_Load_Main 01B2  
                                  _TMR1IE 0488                                    _TMR1IF 0088  
                                  _IO_Set 1AEF                                    u956_25 1CAC  
                                  _WDTCON 0097      __end_of_setDimmerLights_DimmingClose 2770  
   __size_of_setDimmerLights_DimmingClose 000C              _setDimmerLights_DimmingClose 2764  
                      DelayTime_1us@count 0020                      Exception_Main@i_7021 0033  
                      setRF_AdjControl@sw 0027            __size_of_CC2500_PowerOnInitial 0015  
             ??_setDimmerIntr_MaxmumValue 0063             __end_of_CC2500_PowerOnInitial 19BD  
                                  _Dimmer 012C                                    _DlySw1 01D7  
                                  _DlySw2 01DC                          _setRF_AdjControl 1F8A  
                ?_setOverTemp_ADV_Restore 0070             __size_of_setRF_TimeoutCleared 0004  
                   __end_of_getCmd_Status 18B3                __end_of_Mcu_Initialization 18FB  
                     __end_of_Buzzer_Main 11D9                                    _Memory 0220  
                        i1Division@result 0079                                    _Timer1 0131  
                                  ___bmul 18B3                    __end_of_Exception_Main 0630  
                    Exception_Main@lights 0035                                    ___wmul 1B98  
                     __size_ofi1_Division 000D                                 ??___awdiv 0024  
                               ??___lbdiv 0021                                 ??___ftadd 0047  
            __size_of_DelayOffPointSelect 0017                                 ??___ftdiv 0034  
                               ??___ftneg 0041                                 ??___ftmul 0034  
                               ??___fttol 0052              ?_Flash_Memory_Initialization 0070  
                  ??_getDimmerLights_Line 0020                                 ??___lwdiv 0024  
                  ??_setDimmerLights_Main 0070                    ??_setDimmerLights_Line 0020  
                                  _r_data 00E3                      Exception_Main@status 002E  
 __end_of_getAll_DimmerIntr_Dimming_Sw_RF 1C96  __size_of_getAll_DimmerIntr_Dimming_Sw_RF 0021  
       ??_getAll_DimmerIntr_Dimming_Sw_RF 0020          ?_getAll_DimmerIntr_Dimming_Sw_RF 0070  
         _getAll_DimmerIntr_Dimming_Sw_RF 1C75                                    _s_data 00E4  
                  ??_setDimmerLights_SwOn 002D                                    _setLED 11D9  
                                  _myMain 00AF                      ??_RF_Timeout_Counter 0020  
                  __end_of_setMemory_Data 277C                     ?_setSw_Initialization 0070  
                        ___awdiv@quotient 0027                                    _setBuz 12D4  
                      __size_of_Temp_Main 0003                      Load_Main@LightsCount 002F  
             __end_of_Load_Initialization 26A0          ??_setDimmerLights_Initialization 0020  
         ?_setDimmerLights_Initialization 0070                     ??_getAll_Sw_KeyStatus 0020  
        __end_of_setDimmerIntr_Dimming_RF 1E47          __end_of_setDimmerIntr_Dimming_Sw 1DE9  
                   ___ftmul@f3_as_product 0039                         __end_ofi1___lbdiv 1C75  
               _setDimmerLights_DimmingOn 1D6C                  Flash_Memory_Read@address 0022  
                        ?_Timeout_Counter 0070                __end_of_setMemory_LoopSave 196C  
             getMain_Lights_Count@status1 0021               getMain_Lights_Count@status2 0022  
             __size_of_DimmerLights_IOC_1 003D               __size_of_DimmerLights_IOC_2 003D  
                   __end_of_SwPointSelect 1A70               __size_of_DimmerLights_TMR_1 0038  
             __size_of_DimmerLights_TMR_2 0038              __size_of_Flash_Memory_Modify 0086  
                 __size_of_LedPointSelect 0020           setDimmerIntr_Dimming_Sw@command 0020  
                      setTemp_Main@TempGO 006C                          ___lbdiv@dividend 0022  
                     Flash_Memory_Write@i 0021              __size_of_Flash_Memory_Unlock 0009  
                              _TouchPower 19D2               __size_of_CC2500_InitPATable 001F  
                     CC2500_TxData@loop_e 0025          __end_of_CC2500_registers_address 182F  
                 __end_of__initialization 004F           setDimmerIntr_DimmingValue@value 0062  
         getDimmerIntr_DimmingValue@value 0021                                 ?_LED_Main 0070  
                              ___ftadd@f1 0041                                ___ftadd@f2 0044  
                    _getRF_KeyStatus$5184 0022                             ?_my_MainTimer 0070  
               _setDimmerLights_SwOn$2377 002F                 _setDimmerLights_SwOn$2386 0030  
                              ___ftdiv@f1 0031                                ___ftdiv@f2 002E  
                              ___ftdiv@f3 0039             ?_setDimmerLights_DimmingClose 0070  
                              ___ftneg@f1 003E                                ___awtoft@c 0028  
                     ___bmul@multiplicand 0020              ?_DimmerLights_Initialization 0070  
                              ___ftmul@f1 002E                                ___ftmul@f2 0031  
              ?_DimmerIntr_Initialization 0070                                ___fttol@f1 004E  
                          __pcstackCOMMON 0070                           ?_Exception_Main 0070  
                            __pidataBANK4 1C34                             __end_of_getAD 1C34  
                               ?_TMR1_ISR 0070                                 ?_TMR1_Set 0070  
                  setLoad_AH_AL_Restore@i 0021                 setMemory_LoopSave@command 0021  
                      _LED_Initialization 2788                           _getSw_KeyStatus 1BD5  
               ??_setControl_Lights_Table 006E                        getRF_KeyStatus@key 0021  
                         ?_setMemory_Data 0020            ??_DimmerLights_DimmingFunction 0020  
        ??_getDimmerLights_PercentToValue 005C           ?_getDimmerLights_PercentToValue 0070  
               ??_setDimmerLights_Dimming 006B             ??_Flash_Memory_Initialization 0024  
                        ___lbdiv@quotient 0024                      _getMain_Lights_Count 18D7  
                               ?_WDT_Main 0070                         __end_of_Load_Main 0205  
       setDimmerIntr_ControlStatus@lights 0022                        __size_of_getBuz_GO 0011  
               _setDimmerIntr_MaxmumValue 1A2B                __end_of_set_TimeoutCleared 26C5  
         setDimmerIntr_MaxmumValue@lights 0064                        __size_of_getRxData 0067  
                     ?_LED_Initialization 0070                         ?_CC2500_WriteByte 0070  
                          _setProductData 2758                      __size_of_setLED_Main 0041  
                  ?_getDimmer_Load_Status 0070                                   ??_getAD 0023  
                     _Temp_Initialization 26A6                        ??_CC2500_WriteByte 0020  
                               ?_Division 0025                                __pbssBANK1 00A0  
                              __pbssBANK2 0120                                __pbssBANK3 01A0  
                              __pbssBANK4 0220                                 ?_Fosc_Set 0070  
                             _Buzzer_Main 118F                         ??_setRFSW_Control 006D  
             ?_setDimmerLights_DimmingRun 0022                         __end_of_Temp_Main 26AC  
                                 ?_IO_Set 0070                            ??_my_MainTimer 002D  
                              ??_LED_Main 0025                           __CFG_VCAPEN$OFF 0000  
                 _DelayOff_Initialization 26DE                             ??_Switch_Main 0036  
                          DelayTime_1us@i 0022                            DelayTime_1us@j 0024  
                    ??_LED_Initialization 0025                              _DimmerLights 00DA  
                       LedPointSelect@led 0021     getAll_DimmerIntr_Dimming_Sw_RF@status 0023  
                  __size_of_DelayOff_Main 0008                      __size_of_setRF_Learn 0014  
                             setBuz@count 002C                   ?_getDimmerLights_Status 0070  
                              __pmaintext 132D                            _getDelayOff_GO 186E  
                     _CC2500_WriteCommand 1AD5                      ?_Temp_Initialization 0070  
                                 ?___bmul 0020                          ??_setDelayOff_GO 0067  
       __end_of_DimmerIntr_Initialization 0E7B             ??_DimmerLights_Initialization 0064  
                                 ?___wmul 0020                                ??_TMR1_ISR 0071  
                           ?_setTemp_Main 0070         __size_of_getDimmerIntr_Dimming_Sw 0019  
                              _getLoad_AD 178E                                ??_TMR1_Set 0020  
                              __pintentry 0004                    ??_setSw_Initialization 0024  
                              _getLoad_OK 26EE                 ?_getDimmerIntr_Dimming_Sw 0070  
                      __size_of_setTxData 00BB                                   ?_setLED 0022  
                  __size_of_DelayTime_1us 0026                     ?_getMain_Lights_Count 0070  
                                 _ADC_Set 26D7                                   ?_setBuz 0029  
                               ?___awtoft 0028                                 ?___ftpack 0020  
                              _getTemp_AD 0B40        __end_of_DimmerLights_SelectPointer 1A2B  
              _DimmerLights_SelectPointer 1A14                                ??_WDT_Main 0020  
            __end_of_setRF_Initialization 2741                        _setRFSW_AdjControl 0927  
                  __end_of_setProductData 2764             setDimmerLights_Dimming@lights 006D  
                                 _IOC_ISR 274C                                   _IOC_Set 272B  
                    __size_of_setLog_Code 0034             setDimmerLights_Dimming@status 006A  
   getDimmerLights_Allow_Condition@lights 0025                      ?_CC2500_WriteCommand 0070  
                            ??i1_Division 0076                         _Flash_Memory_Main 10C9  
               __size_of_getDimmer_LoadGO 0008                         _Flash_Memory_Read 1ABB  
                  __size_of_CC2500_RxData 006B                    __size_of_CC2500_TxData 006C  
                     ?_setRFSW_AdjControl 0070                                   _RF_Data 01A0  
                                 _RF_Main 26A3                        ?_Flash_Memory_Main 0070  
                      ?_Flash_Memory_Read 0070                                ??_Division 0026  
                                 _WDT_Set 27AC           __end_of_setControl_Lights_Table 0C6A  
                         setRF_Main@error 00E9                    __size_of_setCmd_Status 0019  
                              ??_Fosc_Set 0020                               ?_TouchPower 0070  
         __end_of_setDimmerLights_Dimming 12D4                   ??_setLoad_AH_AL_Restore 0020  
                     getCmd_Status@number 0020              __end_of_CC2500_FrequencyCabr 27C4  
                         __size_of_IO_Set 001B                       setCmd_Status@number 0022  
       __size_of_setDimmerIntr_Dimming_RF 002F         __size_of_setDimmerIntr_Dimming_Sw 002B  
                       __end_of_getBuz_GO 18A1                 ?_setDimmerIntr_Dimming_RF 0020  
                     ??_Flash_Memory_Main 0026                 ?_setDimmerIntr_Dimming_Sw 0020  
                     ??_Flash_Memory_Read 0020                    __end_of_getDelayOff_GO 187F  
                                 _VarLED1 01E5                                   _VarLED2 01E9  
          __end_of_getDimmerLights_Status 2800                         __end_of_getRxData 15DD  
                 __end_of_getSw_KeyStatus 1BF4                  _CC2500_registers_address 1800  
                   ??_Temp_Initialization 0020                      ??_setRFSW_AdjControl 0065  
                          ??_setTemp_Main 0065                           __size_of___bmul 0012  
                     setProductData@value 0062                                   ___awdiv 122C  
          ??_setDimmerLights_DimmingClose 0023                                   ___lbdiv 1CB8  
                                 ___ftadd 038C                                   ___ftdiv 0C6A  
                                 ___ftneg 270E                           __size_of___wmul 001E  
                                 ___ftmul 0D13                                   ___fttol 0A2D  
                     __end_of_Switch_Main 274C                        __end_ofi1_Division 27D1  
                                 ___lwdiv 1EAA                ??_getMain_All_LightsStatus 0020  
                 ??_Buzzer_Initialization 0020                           _getRF_KeyStatus 1000  
                              ??___awtoft 002B                                ??___ftpack 0025  
                         __size_of_setLED 0053                      setRFSW_AdjControl@sw 0068  
                         __size_of_setBuz 0059                                   __ptext1 1FC4  
                                 __ptext2 196C                                   __ptext3 0B40  
                                 __ptext4 178E                                   __ptext5 1C14  
                                 __ptext6 18FB                                   __ptext7 0002  
                                 __ptext8 26A9                                   __ptext9 0482  
               __size_of_CC2500_SIDLEMode 0004                              __size_of_ISR 001B  
              ??_getMain_All_Error_Status 0020                   ??_setDimmerLights_OnOff 006E  
                         ?_setProductData 0062                        i1___lbdiv@dividend 0072  
               __end_of_Flash_Memory_Main 110A                 __end_of_Flash_Memory_Read 1AD5  
                 ??_setDimmerLights_SwOff 0022                                _setRF_Main 0630  
                 ??_myMain_Initialization 0020                             _DelayOff_Main 26E6  
                __end_of_setRF_AdjControl 1FC4                         _DimmerLights_Main 1D44  
          __size_of_DlyOff_Initialization 0006                     ??_CC2500_WriteCommand 0022  
               __size_of_setMemory_Modify 0013             __end_of_DlyOff_Initialization 26CB  
              __end_of_CC2500_ClearRXFIFO 26B8                  ??_setTemp_Initialization 0020  
              __end_of_CC2500_ClearTXFIFO 26BC                              ?_DlyOff_Main 0070  
                      ?_DimmerLights_Main 0070                                   _product 00EE  
                          _LedPointSelect 1BF4                 getAll_Sw_KeyStatus@status 0021  
                         getTemp_AD@ADRES 0026                       _DelayOffPointSelect 19FD  
                                 clrloop0 26D2            __size_of_Switch_Initialization 0008  
           __end_of_Switch_Initialization 186E                      end_of_initialization 004F  
               ??_DelayOff_Initialization 0023                         _CC2500_InitSetREG 1D94  
                           _DelayTime_1us 07D9                         __end_of_setTxData 0F36  
              __end_of_Flash_Memory_Write 1E76        __size_of_setDimmerLights_DimmingOn 0028  
                                 init_ram 26CB                __end_of_setRF_TransceiveGO 1933  
                      ?_CC2500_InitSetREG 0070                       ??_DimmerLights_Main 0070  
                    Flash_Memory_Read@ret 0023                                   initloop 26CC  
                              _setSw_Main 0205                     CC2500_ReadByte@loop_b 0021  
                  setDimmerLights_SwOn@sw 0032                         _CC2500_ReadStatus 1D1F  
                    Flash_Memory_Modify@i 0025                     _setLED_Initialization 18C5  
                         ?_getDelayOff_GO 0070                                getBuz_GO@i 0024  
                      ?_CC2500_ReadStatus 0070                        i1___lbdiv@quotient 0074  
                __size_of_CC2500_ReadByte 001D                             _CC2500_RxData 1648  
                           _CC2500_TxData 16B3                       ??_CC2500_InitSetREG 0025  
           __size_of_Flash_Memory_Erasing 000C                      ?_DelayOffPointSelect 0070  
                     _Flash_Memory_Modify 09A7                               ?_getLoad_AD 0070  
                             ?_getLoad_OK 0070                    ??_getMain_Lights_Count 0020  
                            __pstringtext 1800                             _setCmd_Status 1A89  
                     _Flash_Memory_Unlock 2717                       ??_CC2500_ReadStatus 0022  
                 CC2500_InitSetREG@loop_c 0028                               ?_getTemp_AD 0070  
                     __size_of_TouchPower 0015                  setLED_Initialization@led 0024  
                 setTemp_Main@DangerValue 006A                    setSw_Initialization@sw 0024  
               __end_of_DimmerLights_Main 1D6C                        _Mcu_Initialization 18E9  
                __size_of_CC2500_PowerRST 0044          __size_of_setOverTemp_ADV_Restore 001C  
            __end_of_setRF_TimeoutCleared 26B4                      __end_of_my_MainTimer 2000  
                          ?_DelayOff_Main 0070                          __CFG_FOSC$INTOSC 0000  
                  __end_of_LedPointSelect 1C14                  __size_of_CC2500_WriteREG 0023  
                Load_Main@ErrorCountValue 002D          setDimmerIntr_DimmingValue@lights 0064  
        getDimmerIntr_DimmingValue@lights 0022                                 i1___lbdiv 1C54  
               __end_of_CC2500_InitSetREG 1DBE                       ?_Mcu_Initialization 0070  
                    ?_Flash_Memory_Modify 0070               __size_of_setRF_DimmerLights 0065  
                          ?_DelayTime_1us 0020                      ?_Flash_Memory_Unlock 0070  
      __size_of_setDimmerIntr_MaxmumValue 0017                 __end_of_CC2500_ReadStatus 1D44  
                           ?_RF_RxDisable 0070            setDimmerIntr_Dimming_RF@lights 0022  
         getMain_All_Error_Status@command 0025                               ___ftdiv@exp 003C  
       __end_of_setDimmerLights_DimmingOn 1D94                          ??_Exception_Main 002D  
                           i1Division@num 0075                            __end_of_IO_Set 1B0A  
                    _setRF_Initialization 2736                        _setMemory_LoopSave 1959  
                             _Switch_Main 2741                         __size_of_LED_Main 000C  
                        ?_getSw_KeyStatus 0070                            ?_CC2500_RxData 0070  
                          ?_CC2500_TxData 0070                   __end_of_getRF_KeyStatus 1011  
                        ??_setMemory_Data 0021                               ___ftmul@exp 0038  
                   _CC2500_PowerOnInitial 19A8               ??_DimmerIntr_Initialization 0062  
                    ??_Mcu_Initialization 0021               __end_of_getAll_Sw_KeyStatus 1890  
                   ??_DelayOffPointSelect 0020                             ?_WDT_Clearing 0070  
                          ?_setCmd_Status 0020                       ?_setMemory_LoopSave 0070  
                          __end_of___bmul 18C5       __size_of_getDimmerIntr_DimmingValue 0016  
                    setRF_DimmerLights@on 0065                            __end_of___wmul 1BB6  
                       getSw_KeyStatus@sw 0024               __size_of_RF_Timeout_Counter 0015  
                       __size_of_TMR1_ISR 0022             __size_of_getDimmerLights_Line 0013  
        DimmerLights_SelectPointer@lights 0021                         __size_of_TMR1_Set 000C  
           __size_of_setDimmerLights_Main 006B                            __end_of_setLED 122C  
                           __pbitbssBANK1 0778             __size_of_setDimmerLights_Line 001E  
           __size_of_setDimmerLights_SwOn 0074                            __end_of_setBuz 132D  
              __end_of_DimmerLights_IOC_1 104E                __end_of_DimmerLights_IOC_2 108B  
                    _CC2500_FrequencyCabr 27B8                   ??_getDimmer_Load_Status 0020  
              __size_of_Flash_Memory_Main 0041                __size_of_Flash_Memory_Read 001A  
                             ?_setRF_Main 0070                           _setRFSW_Control 1388  
                       __size_of_WDT_Main 0012                __end_of_DimmerLights_TMR_1 1F19  
              __end_of_DimmerLights_TMR_2 1F51                       start_initialization 0021  
                         ?_LedPointSelect 0070                                 _Load_Main 0053  
                             __end_of_ISR 001F                    __size_of_getCmd_Status 0012  
                        _getDimmer_LoadGO 26F6                     ??_Flash_Memory_Modify 0024  
            __size_of_Load_Initialization 0003                                ?i1___lbdiv 0070  
            ?_setDimmerIntr_ControlStatus 0020                __end_of_CC2500_InitPATable 1BD5  
         __size_of_setTemp_Initialization 0001                      ??_setMemory_LoopSave 0020  
                   ??_Flash_Memory_Unlock 0020                      __end_of_setTemp_Main 0559  
                          ??_RF_RxDisable 0024    __end_of_getDimmerLights_PercentToValue 14AC  
 __size_of_getDimmerLights_PercentToValue 0065            _getDimmerLights_PercentToValue 1447  
                     __size_of_getLoad_AD 0072                              ?_Buzzer_Main 0070  
     getDimmerLights_PercentToValue@value 005E                       __size_of_getLoad_OK 0008  
           setRF_AdjControl@dimmingStatus 0026                        _set_TimeoutCleared 26C0  
       __end_of_setDimmerIntr_MaxmumValue 1A42                                  ??_IO_Set 0020  
                __size_of_Timeout_Counter 0015                                 _VarErrLED 01E1  
                       __size_of_Division 000F                               ?_setSw_Main 0070  
                     __size_of_getTemp_AD 008D                    ?_setLED_Initialization 0070  
                   ?_setRF_Initialization 0070                         __size_of_Fosc_Set 0004  
               __size_of_CC2500_WriteByte 0019                                 _Temp_Main 26A9  
                     ?_set_TimeoutCleared 0070                            ??_WDT_Clearing 0020  
                               _Rx_Length 00DE                     setProductData@address 0064  
                     Exception_Main@count 002F                       Exception_Main@error 0030  
                                ??___bmul 0021                                  ??___wmul 0024  
                  __size_of_SwPointSelect 0017          __end_of_getMain_All_LightsStatus 1946  
                               _Tx_Length 00E1                               __pdataBANK4 024E  
                                ??_setLED 0023                                  ?_ADC_Set 0070  
                                ??_setBuz 002B                           ??_DelayOff_Main 0068  
                       ??_CC2500_ReadByte 0020               ?_DimmerLights_SelectPointer 0070  
        __end_of_getMain_All_Error_Status 0833                          _CC2500_SIDLEMode 26BC  
              __size_of_DimmerLights_Main 0028                        setMemory_Data@data 0020  
                   ?_CC2500_FrequencyCabr 0070            setDimmerIntr_Dimming_Sw@lights 0022  
          getDimmerIntr_Dimming_Sw@lights 0021                             ??_setLED_Main 0022  
                       __size_of___awtoft 0022                         __size_of___ftpack 0061  
                                ?_IOC_ISR 0070                                  ?_IOC_Set 0070  
                 Load_Main@Load_RunStatus 002E            getDimmerIntr_Dimming_Sw@status 0020  
                               ___latbits 0003                          _setMemory_Modify 190D  
                              ?_Load_Main 0070                             __pcstackBANK0 0020  
                           __pcstackBANK1 00E5                 setRF_TransceiveGO@command 0021  
                    ??_set_TimeoutCleared 0020                 _DimmerIntr_Initialization 0DC7  
                         ??_DelayTime_1us 0022                __size_of_CC2500_InitSetREG 002A  
                           DlyOff_Main@sw 0067                         ??_CC2500_PowerRST 0026  
                                ?_RF_Main 0070                                  ?_WDT_Set 0070  
           ??_setDimmerIntr_ControlStatus 0021                              ??_TouchPower 0020  
                    __size_of_DlyOff_Main 006F                __size_of_CC2500_ReadStatus 0025  
          setDimmerIntr_MaxmumValue@value 0062               setDimmerLights_DimmingOn@sw 0022  
                       ??_CC2500_WriteREG 0023                             ??_setRF_Learn 0020  
                           _DimmerLights1 01C7                             _DimmerLights2 01CF  
                   CC2500_WriteREG@w_addr 0024                     setDelayOff_GO@command 0065  
          __size_of_setLoad_AH_AL_Restore 001C                           ??_CC2500_RxData 0024  
           __end_of_setLoad_AH_AL_Restore 1B41                  setRFSW_AdjControl@status 0067  
                         ??_CC2500_TxData 0024                                 __pnvBANK1 00EE  
                          getRxData@error 006F               __size_of_LED_Initialization 000C  
                    _setRF_TimeoutCleared 26B0                    ?_CC2500_PowerOnInitial 0070  
                         Exception_Main@i 0031                                ?_Temp_Main 0070  
                     __size_of_setRF_Main 00D5                          ___lwdiv@dividend 0022  
                   DelayOffPointSelect@sw 0021                             _getCmd_Status 18A1  
                              setBuz@time 0029                           ??_setCmd_Status 0021  
                     setDelayOff_GO@value 0066                  ?_setControl_Lights_Table 0070  
                        ?_getRF_KeyStatus 0070                            Load_Main@error 002C  
                  _setTemp_Initialization 07FF                                 _getBuz_GO 1890  
                ?_setDimmerLights_Dimming 006A       __end_of_Flash_Memory_Initialization 1000  
             _Flash_Memory_Initialization 0F36                                  ?___awdiv 0020  
                               __ptext100 1933                                 __ptext101 186E  
                                ?___lbdiv 0020                                 __ptext110 19E7  
                               __ptext102 18A1                                 __ptext111 108B  
                               __ptext103 1280                                 __ptext120 1447  
                               __ptext112 26EE                                 __ptext104 0E7B  
                               __ptext121 0A2D                                 __ptext113 0800  
                               __ptext105 1920                                 __ptext130 26E6  
                               __ptext122 270E                                 __ptext114 08A7  
                               __ptext106 1511                                 __ptext131 171F  
                               __ptext123 0D13                                 __ptext115 2720  
                               __ptext107 1B7A                                 __ptext140 26DE  
                               __ptext132 2758                                 __ptext124 0C6A  
                               __ptext116 2699                                 __ptext108 1A2B  
                               __ptext141 26C5                                 __ptext133 0833  
                               __ptext125 038C                                 __ptext117 0DC7  
                               __ptext109 1DBE                                  ?___ftadd 0041  
                               __ptext150 104E                                 __ptext142 19FD  
                               __ptext134 12D4                                 __ptext126 1CDA  
                               __ptext118 190D                                 __ptext151 1011  
                               __ptext143 118F                                 __ptext135 122C  
                               __ptext127 13E6                                 __ptext119 14AC  
                               __ptext152 27C4                                 __ptext144 269A  
                               __ptext136 1A70                                 __ptext128 27D1  
                               __ptext153 1C54                                 __ptext137 1F51  
                               __ptext129 1CB8                                 __ptext146 1C96  
                               __ptext138 27EF                                 __ptext147 1F19  
                               __ptext139 1A14                                 __ptext148 1EE1  
                               __ptext149 274C                                 _getRxData 1576  
                                ?___ftdiv 002E                                  ?___ftneg 003E  
                                ?___ftmul 002E                                  ?___fttol 004E  
                   __size_of_my_MainTimer 003C                                  ?___lwdiv 0020  
                 __end_of_setRFSW_Control 13E6                          ??_setProductData 0063  
                 _setOverTemp_ADV_Restore 1B41             __size_of_setSw_Initialization 0008  
          __size_of_Buzzer_Initialization 0003             __end_of_Buzzer_Initialization 269D  
                           ??_setLog_Code 0065                  getDimmerLights_Line@line 0021  
                      __end_of_TouchPower 19E7                       __size_of_setSw_Main 0187  
            CC2500_ReadStatus@status_addr 0023        __end_of_getDimmerIntr_DimmingValue 19FD  
            ??_setDimmerIntr_DimmingValue 0063                _getDimmerIntr_DimmingValue 19E7  
                  CC2500_WriteByte@loop_a 0021            __size_of_setDimmerLights_OnOff 00D4  
                       ?_setRF_AdjControl 0070                                 _r_address 00E2  
           __end_of_setDimmerLights_OnOff 07D9            __size_of_setDimmerLights_SwOff 0039  
          __size_of_myMain_Initialization 0013             __end_of_setDimmerLights_SwOff 1F8A  
            __end_of_CC2500_patable_vaule 1866             __end_of_myMain_Initialization 197F  
                             ??i1___lbdiv 0071                            __size_of_getAD 0020  
                        ___lwdiv@quotient 0025                        ??_setRF_AdjControl 0024  
                           _SwPointSelect 1A59                       __end_of_setLED_Main 114B  
                        ??_getDelayOff_GO 0022                         i1___lbdiv@divisor 0070  
                       i1___lbdiv@counter 0073                    ??_setRF_Initialization 0020  
             __end_of_Temp_Initialization 26A9                         _CC2500_rfSettings 182F  
                          ___wmul@product 0024                                  _LED_Main 2794  
                         SwPointSelect@sw 0020                                 clear_ram0 26D1  
                CC2500_InitPATable@loop_d 0027                     ?_setRF_TimeoutCleared 0070  
                            _my_MainTimer 1FC4                                 _setTxData 0E7B  
     __end_of_DimmerLights_Initialization 272B               _DimmerLights_Initialization 2720  
                  _Flash_Memory_Main$3352 0028                        _CC2500_ClearRXFIFO 26B4  
                          ?_getCmd_Status 0070                        _CC2500_ClearTXFIFO 26B8  
                _getDimmerIntr_Dimming_Sw 1A70                  setRF_DimmerLights@lights 0069  
                                _GO_nDONE 04E9                       __end_of_setRF_Learn 1993  
                       ??_Timeout_Counter 0020                                ?_getBuz_GO 0020  
                setRF_DimmerLights@status 0068      __size_of_setDimmerIntr_ControlStatus 002F  
             __size_of_setRFSW_AdjControl 0080       __size_of_setDimmerIntr_DimmingValue 0017  
                      _Flash_Memory_Write 1E47                                ?_getRxData 0070  
                            ??_getLoad_AD 0024                                  _TMR1_ISR 1C96  
                  CC2500_InitSetREG@temp1 0026                    CC2500_InitSetREG@temp2 0027  
                            ??_getLoad_OK 0020                                  _TMR1_Set 27A0  
                     ?_CC2500_ClearRXFIFO 0070                       ?_CC2500_ClearTXFIFO 0070  
                      _setRF_TransceiveGO 1920                                  _RF_Count 0134  
                    __end_of_RF_RxDisable 27EF                              ??_getTemp_AD 0024  
             __end_of_CC2500_WriteCommand 1AEF                    ??_CC2500_FrequencyCabr 0026  
                                _WDT_Main 18FB                   DlyOff_Initialization@sw 0022  
                   getSw_KeyStatus@status 0023                          __size_of_ADC_Set 0007  
                       ___wmul@multiplier 0020                       ?_Flash_Memory_Write 0070  
                   __size_of_setTemp_Main 00D7                       ?_setRF_TransceiveGO 0070  
                 __size_of_setDelayOff_GO 008C                                  _DelayOff 00D8  
                            setSw_Main@sw 0035                               ??_Load_Main 0028  
                        __size_of_IOC_ISR 000C            getMain_All_Error_Status@status 0026  
                        __size_of_IOC_Set 000B              __end_of_Flash_Memory_Erasing 2788  
                          ?_SwPointSelect 0070                               getAD@adcon0 0023  
                             getAD@adcon1 0020                            setLED_Main@led 0024  
                    __end_of_WDT_Clearing 0004                       __end_of_setLog_Code 1EAA  
                   _DlyOff_Initialization 26C5         __size_of_getMain_All_LightsStatus 0013  
                    ??_CC2500_ClearRXFIFO 0024                                  _Division 27D1  
               ?_getMain_All_LightsStatus 0070                      ??_CC2500_ClearTXFIFO 0024  
               __end_of_CC2500_rfSettings 185E                          __size_of_RF_Main 0003  
                _setDimmerIntr_Dimming_RF 1E18               setDimmerLights_OnOff@lights 00E5  
                _setDimmerIntr_Dimming_Sw 1DBE                                  _Fosc_Set 26AC  
                        __size_of_WDT_Set 000C                     setRFSW_Control@status 00E5  
                      __end_of_getLoad_AD 1800                        __end_of_getLoad_OK 26F6  
                   _Switch_Initialization 1866         __size_of_getMain_All_Error_Status 0033  
                    ??_Flash_Memory_Write 0020                 ?_getMain_All_Error_Status 0070  
                    __size_of_Buzzer_Main 004A                        __end_of_getTemp_AD 0BCD  
                              ?_setTxData 0070                              ?_Switch_Main 0070  
                        _CC2500_WriteByte 1AA2                         getLoad_AD@channel 0026  
     __size_of_DimmerLights_SelectPointer 0017                      ??_setRF_TransceiveGO 0020  
                                _SwDetect 00E0                               ??_Temp_Main 006F  
                        getCmd_Status@cmd 0021                          setCmd_Status@cmd 0020  
                       setRFSW_Control@sw 00E7             _getMain_All_Error_Status$7008 0021  
           _getMain_All_Error_Status$7009 0023                  __end_of_getDimmer_LoadGO 26FE  
                     _Load_Initialization 269D          ??_getDimmerLights_ValueToPercent 005C  
         ?_getDimmerLights_ValueToPercent 0070                                 setLED@led 0023  
               ??_setOverTemp_ADV_Restore 0020                              _setTemp_Main 0482  
                        __size_of___awdiv 0054                          __size_of___lbdiv 0022  
                        __size_of___ftadd 00F6                          ?_setRFSW_Control 0070  
                        __size_of___ftdiv 00A9                          __size_of___ftneg 0009  
                        __size_of___ftmul 00B4                          __size_of___fttol 0087  
                        __size_of___lwdiv 0037                  setDimmerLights_SwOn@idle 0031  
                                ___awtoft 1CDA                          ??_LedPointSelect 0020  
                                ___ftpack 13E6             __size_of_getMain_Lights_Count 0012  
                  getDimmer_LoadGO@loadgo 0020                         getTemp_AD@channel 0025  
                            ??_setRF_Main 00E8                      CC2500_WriteREG@value 0022  
                             _setLED_Main 110A                __end_of_setRF_DimmerLights 1576  
          __size_of_getDimmer_Load_Status 0008                  ?_DelayOff_Initialization 0070  
                        getDelayOff_GO@go 0023                          getDelayOff_GO@sw 0022  
           __end_of_getDimmer_Load_Status 2706                          setDelayOff_GO@sw 006C  
                         ___lwdiv@divisor 0020                      ?_Load_Initialization 0070  
                         ___lwdiv@counter 0027                                  __ptext10 1B41  
                                __ptext11 26A6                                  __ptext20 26C0  
                                __ptext12 07FF                                  __ptext21 19BD  
                                __ptext13 2741                                  __ptext30 1F8A  
                                __ptext22 1866                                  __ptext14 0205  
                                __ptext31 1388                                  __ptext23 2706  
                                __ptext15 197F                                  __ptext40 1B5D  
                                __ptext32 0927                                  __ptext24 26A3  
                                __ptext16 1D6C                                  __ptext41 19A8  
                                __ptext33 1B0A                                  __ptext25 0630  
                                __ptext17 1BD5                                  __ptext50 26B4  
                                __ptext42 26BC                                  __ptext34 1000  
                                __ptext26 1576                                  __ptext18 1A59  
                                __ptext51 1AD5                                  __ptext43 114B  
                                __ptext35 1890                                  __ptext27 1E76  
                                __ptext19 19D2                                  __ptext60 1AEF  
                                __ptext52 26B0                                  __ptext44 1D94  
                                __ptext36 27E0                                  __ptext28 1959  
                                __ptext61 272B                                  __ptext53 1993  
                                __ptext45 1BB6                                  __ptext37 16B3  
                                __ptext29 0BCD                                  __ptext70 1EAA  
                                __ptext62 26AC                                  __ptext54 1AA2  
                                __ptext46 1CFC                                  __ptext38 1648  
                                __ptext71 269D                                  __ptext63 26D7  
                                __ptext55 26A0                                  __ptext47 27B8  
                                __ptext39 1D1F                                  __ptext80 277C  
                                __ptext72 1B25                                  __ptext64 0053  
                                __ptext56 2736                                  __ptext48 07D9  
                                __ptext81 0F36                                  __ptext73 2794  
                                __ptext65 18D7                                  __ptext57 18E9  
                                __ptext49 26B8                                  __ptext90 0705  
                                __ptext82 2770                                  __ptext74 110A  
                                __ptext66 26FE                                  __ptext58 27AC  
                                __ptext91 11D9                                  __ptext83 1E47  
                                __ptext75 2788                                  __ptext67 26F6  
                                __ptext59 27A0                                  __ptext92 1BF4  
                                __ptext84 2717                                  __ptext76 18C5  
                                __ptext68 1C75                                  __ptext93 2764  
                                __ptext85 1ABB                                  __ptext77 10C9  
                                __ptext69 1B98                                  __ptext94 1E18  
                                __ptext86 0559                                  __ptext78 187F  
                                __ptext95 1A42                                  __ptext87 1946  
                                __ptext79 09A7                                  __ptext96 1DE9  
                                __ptext88 1D44                                  __ptext97 0AB4  
                                __ptext89 15DD                                  __ptext98 18B3  
                                __ptext99 1A89                                  __product 024E  
                 ??_setLED_Initialization 0024                  ??_getDimmerLights_Status 0022  
            __end_of_getDimmerLights_Line 1959              __end_of_setDimmerLights_Main 1648  
            __end_of_setDimmerLights_Line 1B98                        _DimmerLights_IOC_1 1011  
                      _DimmerLights_IOC_2 104E              __end_of_setDimmerLights_SwOn 08A7  
                            ??_setSw_Main 0033                    ??_setRF_TimeoutCleared 0020  
            ??_setDimmerLights_DimmingRun 0023                             setLED@command 0022  
                           __size_of_main 005B                               _setRF_Learn 197F  
      __size_of_DimmerIntr_Initialization 00B4                           ??_getCmd_Status 0020  
                      _DimmerLights_TMR_1 1EE1                        _DimmerLights_TMR_2 1F19  
                __end_of_CC2500_SIDLEMode 26C0                setDimmerLights_Main@lights 00E6  
             __end_of_DelayOffPointSelect 1A14                  setOverTemp_ADV_Restore@i 0021  
              CC2500_WriteCommand@command 0023                           _CC2500_ReadByte 1B5D  
              ?_setDimmerLights_DimmingOn 0070                        _CC2500_InitPATable 1BB6  
                __end_of_setMemory_Modify 1920      _getAll_DimmerIntr_Dimming_Sw_RF$2330 0022  
    _getAll_DimmerIntr_Dimming_Sw_RF$2329 0021                       ?_DimmerLights_IOC_1 0070  
                     ?_DimmerLights_IOC_2 0070                        __end_of_setRF_Main 0705  
                             ??_getBuz_GO 0022                       ?_DimmerLights_TMR_1 0070  
                     ?_DimmerLights_TMR_2 0070               __size_of_Mcu_Initialization 0012  
                    _CC2500_patable_vaule 185E                               ??_getRxData 006E  
                            getLoad_OK@ok 0020                __end_of_RF_Timeout_Counter 19A8  
             Flash_Memory_Main@key_Status 0027                  _getAll_Sw_KeyStatus$6262 0022  
                                main@argc 00EA                                  main@argv 00EC  
                     ?_CC2500_InitPATable 0070                      _getSw_KeyStatus$6258 0021  
                    _getSw_KeyStatus$6259 0022       getDimmerLights_ValueToPercent@value 005E  
                         _CC2500_PowerRST 114B                  __size_of_getSw_KeyStatus 001F  
            setDimmerLights_Dimming@value 006C        __end_of_setDimmerIntr_DimmingValue 1A59  
              _setDimmerIntr_DimmingValue 1A42               __end_of_Flash_Memory_Modify 0A2D  
            __size_of_getAll_Sw_KeyStatus 0011                               _setLog_Code 1E76  
             __end_of_Flash_Memory_Unlock 2720                           ??_SwPointSelect 0020  
                         _CC2500_WriteREG 1CFC                        __end_of_setSw_Main 038C  
                   ??_Load_Initialization 0022                      ??_DimmerLights_IOC_1 007A  
                    ??_DimmerLights_IOC_2 007A           getDimmerLights_PercentToValue@i 005F  
     __size_of_setDimmerLights_DimmingRun 001B                             _Transceive_OK 03E8  
                  ?_DlyOff_Initialization 0070                      ??_DimmerLights_TMR_1 0070  
                    ??_DimmerLights_TMR_2 0070                            Division@result 0029  
         __end_of_setOverTemp_ADV_Restore 1B5D                               pic14e$flags 007E  
            ??_getDimmerIntr_DimmingValue 0020                setDimmerLights_Line@lights 0020  
                 setDimmerLights_SwOff@sw 0022               __size_of_setMemory_LoopSave 0013  
                                intlevel1 0000                      ??_CC2500_InitPATable 0025  
                  ?_Switch_Initialization 0070                           setDelayOff_GO@i 0069  
                         setDelayOff_GO@j 006A                           setDelayOff_GO@k 006B  
                 ??_CC2500_PowerOnInitial 0029                     setTemp_Main@SafeValue 0068  
  __end_of_setDimmerLights_Initialization 269A   __size_of_setDimmerLights_Initialization 0001  
          _setDimmerLights_Initialization 2699                ?_setDimmerIntr_MaxmumValue 0062  
                 ?_setTemp_Initialization 0070                               ??_setTxData 0020  
                  CC2500_InitPATable@temp 0026                           getLoad_AD@ADRES 0029  
                   __size_of_RF_RxDisable 000F                         _RF_Initialization 26A0  
                             getLoad_AD@i 002B                               getLoad_AD@j 0028  
                             getLoad_AD@k 0027                      _Flash_Memory_Erasing 277C  
                      ?_RF_Initialization 0070                                _SPI0Buffer 00DF  
                 __size_of_Exception_Main 00D7                             Division@value 0028  
         __end_of_DelayOff_Initialization 26E6                     __size_of_WDT_Clearing 0002  
                   __end_of_DelayOff_Main 26EE                       ??_RF_Initialization 0021  
                 __size_of_setMemory_Data 000C                            _setDelayOff_GO 0AB4  
             ?_getDimmerIntr_DimmingValue 0070          __size_of_setControl_Lights_Table 009D  
        __size_of_setDimmerLights_Dimming 0054               getDimmer_Load_Status@status 0020  
    __size_of_Flash_Memory_Initialization 00CA               __size_of_set_TimeoutCleared 0005  
                           ??_DlyOff_Main 0065                                i1_Division 27C4  
                   setMemory_Data@address 0022                     __end_of_DelayTime_1us 07FF  
              ??_getDimmerIntr_Dimming_Sw 0020                   __end_of_CC2500_ReadByte 1B7A  
            __end_of_setSw_Initialization 270E                           _Timeout_Counter 19BD  
         __size_of_getDimmerLights_Status 0011           getDimmerLights_ValueToPercent@i 005F  
                            _RF_RxDisable 27E0          Flash_Memory_Initialization@value 0025  
              __end_of_LED_Initialization 2794            __end_of_setTemp_Initialization 0800  
                             Division@num 0025                   setMemory_Modify@command 0021  
               __end_of_RF_Initialization 26A3                 __size_of_setRF_AdjControl 003A  
                   __end_of_CC2500_RxData 16B3                     __end_of_CC2500_TxData 171F  
                   _setLoad_AH_AL_Restore 1B25                   __end_of_CC2500_PowerRST 118F  
