

Microchip Technology PIC LITE Macro Assembler V1.32 build 58300 
                                                                                               Tue Feb 24 17:09:15 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 58300
     1                           	processor	16F1518
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK4,global,class=CODE,delta=2
     5                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     6                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bitbssBANK1,global,bit,class=BANK1,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    14                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    15                           	psect	clrtext,global,class=CODE,delta=2
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    20                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,inline,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,inline,delta=2
    24                           	psect	text4,local,class=CODE,merge=1,inline,delta=2
    25                           	psect	text5,local,class=CODE,merge=1,inline,delta=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2
    27                           	psect	text7,local,class=CODE,merge=1,delta=2
    28                           	psect	text8,local,class=CODE,merge=1,inline,delta=2
    29                           	psect	text9,local,class=CODE,merge=1,delta=2
    30                           	psect	text10,local,class=CODE,merge=1,inline,delta=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2
    32                           	psect	text12,local,class=CODE,merge=1,inline,delta=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2
    34                           	psect	text14,local,class=CODE,merge=1,inline,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2
    37                           	psect	text17,local,class=CODE,merge=1,delta=2
    38                           	psect	text18,local,class=CODE,merge=1,delta=2
    39                           	psect	text19,local,class=CODE,merge=1,inline,delta=2
    40                           	psect	text20,local,class=CODE,merge=1,inline,delta=2
    41                           	psect	text21,local,class=CODE,merge=1,inline,delta=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,inline,delta=2
    44                           	psect	text24,local,class=CODE,merge=1,inline,delta=2
    45                           	psect	text25,local,class=CODE,merge=1,inline,delta=2
    46                           	psect	text26,local,class=CODE,merge=1,inline,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,inline,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,inline,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,inline,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	text43,local,class=CODE,merge=1,delta=2
    64                           	psect	text44,local,class=CODE,merge=1,delta=2
    65                           	psect	text45,local,class=CODE,merge=1,delta=2
    66                           	psect	text46,local,class=CODE,merge=1,delta=2
    67                           	psect	text47,local,class=CODE,merge=1,delta=2
    68                           	psect	text48,local,class=CODE,merge=1,delta=2
    69                           	psect	text49,local,class=CODE,merge=1,delta=2
    70                           	psect	text50,local,class=CODE,merge=1,inline,delta=2
    71                           	psect	text51,local,class=CODE,merge=1,inline,delta=2
    72                           	psect	text52,local,class=CODE,merge=1,delta=2
    73                           	psect	text53,local,class=CODE,merge=1,inline,delta=2
    74                           	psect	text54,local,class=CODE,merge=1,inline,delta=2
    75                           	psect	text55,local,class=CODE,merge=1,delta=2
    76                           	psect	text56,local,class=CODE,merge=1,delta=2
    77                           	psect	text57,local,class=CODE,merge=1,inline,delta=2
    78                           	psect	text58,local,class=CODE,merge=1,delta=2
    79                           	psect	text59,local,class=CODE,merge=1,delta=2
    80                           	psect	text60,local,class=CODE,merge=1,delta=2
    81                           	psect	text61,local,class=CODE,merge=1,delta=2
    82                           	psect	text62,local,class=CODE,merge=1,inline,delta=2
    83                           	psect	text63,local,class=CODE,merge=1,delta=2
    84                           	psect	text64,local,class=CODE,merge=1,delta=2
    85                           	psect	text65,local,class=CODE,merge=1,delta=2
    86                           	psect	text66,local,class=CODE,merge=1,delta=2
    87                           	psect	text67,local,class=CODE,merge=1,delta=2
    88                           	psect	text68,local,class=CODE,merge=1,delta=2
    89                           	psect	text69,local,class=CODE,merge=1,inline,delta=2
    90                           	psect	text70,local,class=CODE,merge=1,delta=2
    91                           	psect	text71,local,class=CODE,merge=1,inline,delta=2
    92                           	psect	text72,local,class=CODE,merge=1,delta=2
    93                           	psect	text73,local,class=CODE,merge=1,inline,delta=2
    94                           	psect	text74,local,class=CODE,merge=1,delta=2
    95                           	psect	text75,local,class=CODE,merge=1,delta=2
    96                           	psect	text76,local,class=CODE,merge=1,delta=2
    97                           	psect	text77,local,class=CODE,merge=1,delta=2
    98                           	psect	text78,local,class=CODE,merge=1,delta=2
    99                           	psect	text79,local,class=CODE,merge=1,delta=2
   100                           	psect	text80,local,class=CODE,merge=1,delta=2
   101                           	psect	text81,local,class=CODE,merge=1,delta=2
   102                           	psect	text82,local,class=CODE,merge=1,delta=2
   103                           	psect	text83,local,class=CODE,merge=1,delta=2
   104                           	psect	text84,local,class=CODE,merge=1,delta=2
   105                           	psect	text85,local,class=CODE,merge=1,delta=2
   106                           	psect	text86,local,class=CODE,merge=1,delta=2
   107                           	psect	text87,local,class=CODE,merge=1,delta=2
   108                           	psect	text88,local,class=CODE,merge=1,delta=2
   109                           	psect	text89,local,class=CODE,merge=1,delta=2
   110                           	psect	text90,local,class=CODE,merge=1,delta=2
   111                           	psect	text91,local,class=CODE,merge=1,delta=2
   112                           	psect	text92,local,class=CODE,merge=1,delta=2
   113                           	psect	text93,local,class=CODE,merge=1,delta=2
   114                           	psect	text94,local,class=CODE,merge=1,delta=2
   115                           	psect	text95,local,class=CODE,merge=1,delta=2
   116                           	psect	text96,local,class=CODE,merge=1,delta=2
   117                           	psect	text97,local,class=CODE,merge=1,delta=2
   118                           	psect	text98,local,class=CODE,merge=1,delta=2
   119                           	psect	text99,local,class=CODE,merge=1,delta=2
   120                           	psect	text100,local,class=CODE,merge=1,delta=2
   121                           	psect	text101,local,class=CODE,merge=1,inline,delta=2
   122                           	psect	text102,local,class=CODE,merge=1,inline,delta=2
   123                           	psect	text103,local,class=CODE,merge=1,inline,delta=2
   124                           	psect	text104,local,class=CODE,merge=1,delta=2
   125                           	psect	text105,local,class=CODE,merge=1,delta=2
   126                           	psect	text106,local,class=CODE,merge=1,delta=2
   127                           	psect	text107,local,class=CODE,merge=1,delta=2
   128                           	psect	text108,local,class=CODE,merge=1,delta=2
   129                           	psect	text109,local,class=CODE,merge=1,delta=2
   130                           	psect	text110,local,class=CODE,merge=1,delta=2
   131                           	psect	text111,local,class=CODE,merge=1,delta=2
   132                           	psect	text112,local,class=CODE,merge=1,delta=2
   133                           	psect	text113,local,class=CODE,merge=1,delta=2
   134                           	psect	text114,local,class=CODE,merge=1,delta=2
   135                           	psect	text115,local,class=CODE,merge=1,delta=2
   136                           	psect	text116,local,class=CODE,merge=1,delta=2
   137                           	psect	text117,local,class=CODE,merge=1,delta=2
   138                           	psect	text118,local,class=CODE,merge=1,delta=2
   139                           	psect	text119,local,class=CODE,merge=1,delta=2
   140                           	psect	text120,local,class=CODE,merge=1,delta=2
   141                           	psect	text121,local,class=CODE,merge=1,delta=2
   142                           	psect	text122,local,class=CODE,merge=1,delta=2
   143                           	psect	text123,local,class=CODE,merge=1,delta=2
   144                           	psect	text124,local,class=CODE,merge=1,inline,delta=2
   145                           	psect	text125,local,class=CODE,merge=1,delta=2
   146                           	psect	text126,local,class=CODE,merge=1,inline,delta=2
   147                           	psect	text127,local,class=CODE,merge=1,delta=2
   148                           	psect	text128,local,class=CODE,merge=1,delta=2
   149                           	psect	text129,local,class=CODE,merge=1,delta=2
   150                           	psect	text130,local,class=CODE,merge=1,delta=2
   151                           	psect	text131,local,class=CODE,merge=1,delta=2
   152                           	psect	text132,local,class=CODE,merge=1,inline,delta=2
   153                           	psect	text133,local,class=CODE,merge=1,inline,delta=2
   154                           	psect	text134,local,class=CODE,merge=1,delta=2
   155                           	psect	text135,local,class=CODE,merge=1,delta=2
   156                           	psect	text136,local,class=CODE,merge=1,inline,delta=2
   157                           	psect	text137,local,class=CODE,merge=1,inline,delta=2
   158                           	psect	intentry,global,class=CODE,delta=2
   159                           	psect	text139,local,class=CODE,merge=1,inline,delta=2
   160                           	psect	text140,local,class=CODE,merge=1,inline,delta=2
   161                           	psect	text141,local,class=CODE,merge=1,inline,delta=2
   162                           	psect	text142,local,class=CODE,merge=1,inline,delta=2
   163                           	psect	text143,local,class=CODE,merge=1,inline,delta=2
   164                           	psect	text144,local,class=CODE,merge=1,inline,delta=2
   165                           	psect	text145,local,class=CODE,merge=1,inline,delta=2
   166                           	psect	text146,local,class=CODE,merge=1,delta=2
   167                           	dabs	1,0x7E,2
   168  0000                     	;# 
   169  0001                     	;# 
   170  0002                     	;# 
   171  0003                     	;# 
   172  0004                     	;# 
   173  0005                     	;# 
   174  0006                     	;# 
   175  0007                     	;# 
   176  0008                     	;# 
   177  0009                     	;# 
   178  000A                     	;# 
   179  000B                     	;# 
   180  000C                     	;# 
   181  000D                     	;# 
   182  000E                     	;# 
   183  0010                     	;# 
   184  0011                     	;# 
   185  0012                     	;# 
   186  0015                     	;# 
   187  0016                     	;# 
   188  0016                     	;# 
   189  0017                     	;# 
   190  0018                     	;# 
   191  0019                     	;# 
   192  001A                     	;# 
   193  001B                     	;# 
   194  001C                     	;# 
   195  008C                     	;# 
   196  008D                     	;# 
   197  008E                     	;# 
   198  0090                     	;# 
   199  0091                     	;# 
   200  0092                     	;# 
   201  0095                     	;# 
   202  0096                     	;# 
   203  0097                     	;# 
   204  0099                     	;# 
   205  009A                     	;# 
   206  009B                     	;# 
   207  009B                     	;# 
   208  009C                     	;# 
   209  009D                     	;# 
   210  009E                     	;# 
   211  010C                     	;# 
   212  010D                     	;# 
   213  010E                     	;# 
   214  0116                     	;# 
   215  0117                     	;# 
   216  011D                     	;# 
   217  018C                     	;# 
   218  018D                     	;# 
   219  018E                     	;# 
   220  0191                     	;# 
   221  0191                     	;# 
   222  0192                     	;# 
   223  0193                     	;# 
   224  0193                     	;# 
   225  0194                     	;# 
   226  0195                     	;# 
   227  0196                     	;# 
   228  0197                     	;# 
   229  0199                     	;# 
   230  019A                     	;# 
   231  019B                     	;# 
   232  019B                     	;# 
   233  019B                     	;# 
   234  019B                     	;# 
   235  019C                     	;# 
   236  019C                     	;# 
   237  019D                     	;# 
   238  019E                     	;# 
   239  019F                     	;# 
   240  020D                     	;# 
   241  0210                     	;# 
   242  0211                     	;# 
   243  0211                     	;# 
   244  0212                     	;# 
   245  0212                     	;# 
   246  0213                     	;# 
   247  0213                     	;# 
   248  0214                     	;# 
   249  0214                     	;# 
   250  0215                     	;# 
   251  0215                     	;# 
   252  0215                     	;# 
   253  0216                     	;# 
   254  0216                     	;# 
   255  0217                     	;# 
   256  0217                     	;# 
   257  0291                     	;# 
   258  0291                     	;# 
   259  0292                     	;# 
   260  0293                     	;# 
   261  0298                     	;# 
   262  0298                     	;# 
   263  0299                     	;# 
   264  029A                     	;# 
   265  0394                     	;# 
   266  0395                     	;# 
   267  0396                     	;# 
   268  0FE4                     	;# 
   269  0FE5                     	;# 
   270  0FE6                     	;# 
   271  0FE7                     	;# 
   272  0FE8                     	;# 
   273  0FE9                     	;# 
   274  0FEA                     	;# 
   275  0FEB                     	;# 
   276  0FED                     	;# 
   277  0FEE                     	;# 
   278  0FEF                     	;# 
   279  0000                     	;# 
   280  0001                     	;# 
   281  0002                     	;# 
   282  0003                     	;# 
   283  0004                     	;# 
   284  0005                     	;# 
   285  0006                     	;# 
   286  0007                     	;# 
   287  0008                     	;# 
   288  0009                     	;# 
   289  000A                     	;# 
   290  000B                     	;# 
   291  000C                     	;# 
   292  000D                     	;# 
   293  000E                     	;# 
   294  0010                     	;# 
   295  0011                     	;# 
   296  0012                     	;# 
   297  0015                     	;# 
   298  0016                     	;# 
   299  0016                     	;# 
   300  0017                     	;# 
   301  0018                     	;# 
   302  0019                     	;# 
   303  001A                     	;# 
   304  001B                     	;# 
   305  001C                     	;# 
   306  008C                     	;# 
   307  008D                     	;# 
   308  008E                     	;# 
   309  0090                     	;# 
   310  0091                     	;# 
   311  0092                     	;# 
   312  0095                     	;# 
   313  0096                     	;# 
   314  0097                     	;# 
   315  0099                     	;# 
   316  009A                     	;# 
   317  009B                     	;# 
   318  009B                     	;# 
   319  009C                     	;# 
   320  009D                     	;# 
   321  009E                     	;# 
   322  010C                     	;# 
   323  010D                     	;# 
   324  010E                     	;# 
   325  0116                     	;# 
   326  0117                     	;# 
   327  011D                     	;# 
   328  018C                     	;# 
   329  018D                     	;# 
   330  018E                     	;# 
   331  0191                     	;# 
   332  0191                     	;# 
   333  0192                     	;# 
   334  0193                     	;# 
   335  0193                     	;# 
   336  0194                     	;# 
   337  0195                     	;# 
   338  0196                     	;# 
   339  0197                     	;# 
   340  0199                     	;# 
   341  019A                     	;# 
   342  019B                     	;# 
   343  019B                     	;# 
   344  019B                     	;# 
   345  019B                     	;# 
   346  019C                     	;# 
   347  019C                     	;# 
   348  019D                     	;# 
   349  019E                     	;# 
   350  019F                     	;# 
   351  020D                     	;# 
   352  0210                     	;# 
   353  0211                     	;# 
   354  0211                     	;# 
   355  0212                     	;# 
   356  0212                     	;# 
   357  0213                     	;# 
   358  0213                     	;# 
   359  0214                     	;# 
   360  0214                     	;# 
   361  0215                     	;# 
   362  0215                     	;# 
   363  0215                     	;# 
   364  0216                     	;# 
   365  0216                     	;# 
   366  0217                     	;# 
   367  0217                     	;# 
   368  0291                     	;# 
   369  0291                     	;# 
   370  0292                     	;# 
   371  0293                     	;# 
   372  0298                     	;# 
   373  0298                     	;# 
   374  0299                     	;# 
   375  029A                     	;# 
   376  0394                     	;# 
   377  0395                     	;# 
   378  0396                     	;# 
   379  0FE4                     	;# 
   380  0FE5                     	;# 
   381  0FE6                     	;# 
   382  0FE7                     	;# 
   383  0FE8                     	;# 
   384  0FE9                     	;# 
   385  0FEA                     	;# 
   386  0FEB                     	;# 
   387  0FED                     	;# 
   388  0FEE                     	;# 
   389  0FEF                     	;# 
   390  0000                     	;# 
   391  0001                     	;# 
   392  0002                     	;# 
   393  0003                     	;# 
   394  0004                     	;# 
   395  0005                     	;# 
   396  0006                     	;# 
   397  0007                     	;# 
   398  0008                     	;# 
   399  0009                     	;# 
   400  000A                     	;# 
   401  000B                     	;# 
   402  000C                     	;# 
   403  000D                     	;# 
   404  000E                     	;# 
   405  0010                     	;# 
   406  0011                     	;# 
   407  0012                     	;# 
   408  0015                     	;# 
   409  0016                     	;# 
   410  0016                     	;# 
   411  0017                     	;# 
   412  0018                     	;# 
   413  0019                     	;# 
   414  001A                     	;# 
   415  001B                     	;# 
   416  001C                     	;# 
   417  008C                     	;# 
   418  008D                     	;# 
   419  008E                     	;# 
   420  0090                     	;# 
   421  0091                     	;# 
   422  0092                     	;# 
   423  0095                     	;# 
   424  0096                     	;# 
   425  0097                     	;# 
   426  0099                     	;# 
   427  009A                     	;# 
   428  009B                     	;# 
   429  009B                     	;# 
   430  009C                     	;# 
   431  009D                     	;# 
   432  009E                     	;# 
   433  010C                     	;# 
   434  010D                     	;# 
   435  010E                     	;# 
   436  0116                     	;# 
   437  0117                     	;# 
   438  011D                     	;# 
   439  018C                     	;# 
   440  018D                     	;# 
   441  018E                     	;# 
   442  0191                     	;# 
   443  0191                     	;# 
   444  0192                     	;# 
   445  0193                     	;# 
   446  0193                     	;# 
   447  0194                     	;# 
   448  0195                     	;# 
   449  0196                     	;# 
   450  0197                     	;# 
   451  0199                     	;# 
   452  019A                     	;# 
   453  019B                     	;# 
   454  019B                     	;# 
   455  019B                     	;# 
   456  019B                     	;# 
   457  019C                     	;# 
   458  019C                     	;# 
   459  019D                     	;# 
   460  019E                     	;# 
   461  019F                     	;# 
   462  020D                     	;# 
   463  0210                     	;# 
   464  0211                     	;# 
   465  0211                     	;# 
   466  0212                     	;# 
   467  0212                     	;# 
   468  0213                     	;# 
   469  0213                     	;# 
   470  0214                     	;# 
   471  0214                     	;# 
   472  0215                     	;# 
   473  0215                     	;# 
   474  0215                     	;# 
   475  0216                     	;# 
   476  0216                     	;# 
   477  0217                     	;# 
   478  0217                     	;# 
   479  0291                     	;# 
   480  0291                     	;# 
   481  0292                     	;# 
   482  0293                     	;# 
   483  0298                     	;# 
   484  0298                     	;# 
   485  0299                     	;# 
   486  029A                     	;# 
   487  0394                     	;# 
   488  0395                     	;# 
   489  0396                     	;# 
   490  0FE4                     	;# 
   491  0FE5                     	;# 
   492  0FE6                     	;# 
   493  0FE7                     	;# 
   494  0FE8                     	;# 
   495  0FE9                     	;# 
   496  0FEA                     	;# 
   497  0FEB                     	;# 
   498  0FED                     	;# 
   499  0FEE                     	;# 
   500  0FEF                     	;# 
   501  0000                     	;# 
   502  0001                     	;# 
   503  0002                     	;# 
   504  0003                     	;# 
   505  0004                     	;# 
   506  0005                     	;# 
   507  0006                     	;# 
   508  0007                     	;# 
   509  0008                     	;# 
   510  0009                     	;# 
   511  000A                     	;# 
   512  000B                     	;# 
   513  000C                     	;# 
   514  000D                     	;# 
   515  000E                     	;# 
   516  0010                     	;# 
   517  0011                     	;# 
   518  0012                     	;# 
   519  0015                     	;# 
   520  0016                     	;# 
   521  0016                     	;# 
   522  0017                     	;# 
   523  0018                     	;# 
   524  0019                     	;# 
   525  001A                     	;# 
   526  001B                     	;# 
   527  001C                     	;# 
   528  008C                     	;# 
   529  008D                     	;# 
   530  008E                     	;# 
   531  0090                     	;# 
   532  0091                     	;# 
   533  0092                     	;# 
   534  0095                     	;# 
   535  0096                     	;# 
   536  0097                     	;# 
   537  0099                     	;# 
   538  009A                     	;# 
   539  009B                     	;# 
   540  009B                     	;# 
   541  009C                     	;# 
   542  009D                     	;# 
   543  009E                     	;# 
   544  010C                     	;# 
   545  010D                     	;# 
   546  010E                     	;# 
   547  0116                     	;# 
   548  0117                     	;# 
   549  011D                     	;# 
   550  018C                     	;# 
   551  018D                     	;# 
   552  018E                     	;# 
   553  0191                     	;# 
   554  0191                     	;# 
   555  0192                     	;# 
   556  0193                     	;# 
   557  0193                     	;# 
   558  0194                     	;# 
   559  0195                     	;# 
   560  0196                     	;# 
   561  0197                     	;# 
   562  0199                     	;# 
   563  019A                     	;# 
   564  019B                     	;# 
   565  019B                     	;# 
   566  019B                     	;# 
   567  019B                     	;# 
   568  019C                     	;# 
   569  019C                     	;# 
   570  019D                     	;# 
   571  019E                     	;# 
   572  019F                     	;# 
   573  020D                     	;# 
   574  0210                     	;# 
   575  0211                     	;# 
   576  0211                     	;# 
   577  0212                     	;# 
   578  0212                     	;# 
   579  0213                     	;# 
   580  0213                     	;# 
   581  0214                     	;# 
   582  0214                     	;# 
   583  0215                     	;# 
   584  0215                     	;# 
   585  0215                     	;# 
   586  0216                     	;# 
   587  0216                     	;# 
   588  0217                     	;# 
   589  0217                     	;# 
   590  0291                     	;# 
   591  0291                     	;# 
   592  0292                     	;# 
   593  0293                     	;# 
   594  0298                     	;# 
   595  0298                     	;# 
   596  0299                     	;# 
   597  029A                     	;# 
   598  0394                     	;# 
   599  0395                     	;# 
   600  0396                     	;# 
   601  0FE4                     	;# 
   602  0FE5                     	;# 
   603  0FE6                     	;# 
   604  0FE7                     	;# 
   605  0FE8                     	;# 
   606  0FE9                     	;# 
   607  0FEA                     	;# 
   608  0FEB                     	;# 
   609  0FED                     	;# 
   610  0FEE                     	;# 
   611  0FEF                     	;# 
   612  0000                     	;# 
   613  0001                     	;# 
   614  0002                     	;# 
   615  0003                     	;# 
   616  0004                     	;# 
   617  0005                     	;# 
   618  0006                     	;# 
   619  0007                     	;# 
   620  0008                     	;# 
   621  0009                     	;# 
   622  000A                     	;# 
   623  000B                     	;# 
   624  000C                     	;# 
   625  000D                     	;# 
   626  000E                     	;# 
   627  0010                     	;# 
   628  0011                     	;# 
   629  0012                     	;# 
   630  0015                     	;# 
   631  0016                     	;# 
   632  0016                     	;# 
   633  0017                     	;# 
   634  0018                     	;# 
   635  0019                     	;# 
   636  001A                     	;# 
   637  001B                     	;# 
   638  001C                     	;# 
   639  008C                     	;# 
   640  008D                     	;# 
   641  008E                     	;# 
   642  0090                     	;# 
   643  0091                     	;# 
   644  0092                     	;# 
   645  0095                     	;# 
   646  0096                     	;# 
   647  0097                     	;# 
   648  0099                     	;# 
   649  009A                     	;# 
   650  009B                     	;# 
   651  009B                     	;# 
   652  009C                     	;# 
   653  009D                     	;# 
   654  009E                     	;# 
   655  010C                     	;# 
   656  010D                     	;# 
   657  010E                     	;# 
   658  0116                     	;# 
   659  0117                     	;# 
   660  011D                     	;# 
   661  018C                     	;# 
   662  018D                     	;# 
   663  018E                     	;# 
   664  0191                     	;# 
   665  0191                     	;# 
   666  0192                     	;# 
   667  0193                     	;# 
   668  0193                     	;# 
   669  0194                     	;# 
   670  0195                     	;# 
   671  0196                     	;# 
   672  0197                     	;# 
   673  0199                     	;# 
   674  019A                     	;# 
   675  019B                     	;# 
   676  019B                     	;# 
   677  019B                     	;# 
   678  019B                     	;# 
   679  019C                     	;# 
   680  019C                     	;# 
   681  019D                     	;# 
   682  019E                     	;# 
   683  019F                     	;# 
   684  020D                     	;# 
   685  0210                     	;# 
   686  0211                     	;# 
   687  0211                     	;# 
   688  0212                     	;# 
   689  0212                     	;# 
   690  0213                     	;# 
   691  0213                     	;# 
   692  0214                     	;# 
   693  0214                     	;# 
   694  0215                     	;# 
   695  0215                     	;# 
   696  0215                     	;# 
   697  0216                     	;# 
   698  0216                     	;# 
   699  0217                     	;# 
   700  0217                     	;# 
   701  0291                     	;# 
   702  0291                     	;# 
   703  0292                     	;# 
   704  0293                     	;# 
   705  0298                     	;# 
   706  0298                     	;# 
   707  0299                     	;# 
   708  029A                     	;# 
   709  0394                     	;# 
   710  0395                     	;# 
   711  0396                     	;# 
   712  0FE4                     	;# 
   713  0FE5                     	;# 
   714  0FE6                     	;# 
   715  0FE7                     	;# 
   716  0FE8                     	;# 
   717  0FE9                     	;# 
   718  0FEA                     	;# 
   719  0FEB                     	;# 
   720  0FED                     	;# 
   721  0FEE                     	;# 
   722  0FEF                     	;# 
   723  0000                     	;# 
   724  0001                     	;# 
   725  0002                     	;# 
   726  0003                     	;# 
   727  0004                     	;# 
   728  0005                     	;# 
   729  0006                     	;# 
   730  0007                     	;# 
   731  0008                     	;# 
   732  0009                     	;# 
   733  000A                     	;# 
   734  000B                     	;# 
   735  000C                     	;# 
   736  000D                     	;# 
   737  000E                     	;# 
   738  0010                     	;# 
   739  0011                     	;# 
   740  0012                     	;# 
   741  0015                     	;# 
   742  0016                     	;# 
   743  0016                     	;# 
   744  0017                     	;# 
   745  0018                     	;# 
   746  0019                     	;# 
   747  001A                     	;# 
   748  001B                     	;# 
   749  001C                     	;# 
   750  008C                     	;# 
   751  008D                     	;# 
   752  008E                     	;# 
   753  0090                     	;# 
   754  0091                     	;# 
   755  0092                     	;# 
   756  0095                     	;# 
   757  0096                     	;# 
   758  0097                     	;# 
   759  0099                     	;# 
   760  009A                     	;# 
   761  009B                     	;# 
   762  009B                     	;# 
   763  009C                     	;# 
   764  009D                     	;# 
   765  009E                     	;# 
   766  010C                     	;# 
   767  010D                     	;# 
   768  010E                     	;# 
   769  0116                     	;# 
   770  0117                     	;# 
   771  011D                     	;# 
   772  018C                     	;# 
   773  018D                     	;# 
   774  018E                     	;# 
   775  0191                     	;# 
   776  0191                     	;# 
   777  0192                     	;# 
   778  0193                     	;# 
   779  0193                     	;# 
   780  0194                     	;# 
   781  0195                     	;# 
   782  0196                     	;# 
   783  0197                     	;# 
   784  0199                     	;# 
   785  019A                     	;# 
   786  019B                     	;# 
   787  019B                     	;# 
   788  019B                     	;# 
   789  019B                     	;# 
   790  019C                     	;# 
   791  019C                     	;# 
   792  019D                     	;# 
   793  019E                     	;# 
   794  019F                     	;# 
   795  020D                     	;# 
   796  0210                     	;# 
   797  0211                     	;# 
   798  0211                     	;# 
   799  0212                     	;# 
   800  0212                     	;# 
   801  0213                     	;# 
   802  0213                     	;# 
   803  0214                     	;# 
   804  0214                     	;# 
   805  0215                     	;# 
   806  0215                     	;# 
   807  0215                     	;# 
   808  0216                     	;# 
   809  0216                     	;# 
   810  0217                     	;# 
   811  0217                     	;# 
   812  0291                     	;# 
   813  0291                     	;# 
   814  0292                     	;# 
   815  0293                     	;# 
   816  0298                     	;# 
   817  0298                     	;# 
   818  0299                     	;# 
   819  029A                     	;# 
   820  0394                     	;# 
   821  0395                     	;# 
   822  0396                     	;# 
   823  0FE4                     	;# 
   824  0FE5                     	;# 
   825  0FE6                     	;# 
   826  0FE7                     	;# 
   827  0FE8                     	;# 
   828  0FE9                     	;# 
   829  0FEA                     	;# 
   830  0FEB                     	;# 
   831  0FED                     	;# 
   832  0FEE                     	;# 
   833  0FEF                     	;# 
   834  0000                     	;# 
   835  0001                     	;# 
   836  0002                     	;# 
   837  0003                     	;# 
   838  0004                     	;# 
   839  0005                     	;# 
   840  0006                     	;# 
   841  0007                     	;# 
   842  0008                     	;# 
   843  0009                     	;# 
   844  000A                     	;# 
   845  000B                     	;# 
   846  000C                     	;# 
   847  000D                     	;# 
   848  000E                     	;# 
   849  0010                     	;# 
   850  0011                     	;# 
   851  0012                     	;# 
   852  0015                     	;# 
   853  0016                     	;# 
   854  0016                     	;# 
   855  0017                     	;# 
   856  0018                     	;# 
   857  0019                     	;# 
   858  001A                     	;# 
   859  001B                     	;# 
   860  001C                     	;# 
   861  008C                     	;# 
   862  008D                     	;# 
   863  008E                     	;# 
   864  0090                     	;# 
   865  0091                     	;# 
   866  0092                     	;# 
   867  0095                     	;# 
   868  0096                     	;# 
   869  0097                     	;# 
   870  0099                     	;# 
   871  009A                     	;# 
   872  009B                     	;# 
   873  009B                     	;# 
   874  009C                     	;# 
   875  009D                     	;# 
   876  009E                     	;# 
   877  010C                     	;# 
   878  010D                     	;# 
   879  010E                     	;# 
   880  0116                     	;# 
   881  0117                     	;# 
   882  011D                     	;# 
   883  018C                     	;# 
   884  018D                     	;# 
   885  018E                     	;# 
   886  0191                     	;# 
   887  0191                     	;# 
   888  0192                     	;# 
   889  0193                     	;# 
   890  0193                     	;# 
   891  0194                     	;# 
   892  0195                     	;# 
   893  0196                     	;# 
   894  0197                     	;# 
   895  0199                     	;# 
   896  019A                     	;# 
   897  019B                     	;# 
   898  019B                     	;# 
   899  019B                     	;# 
   900  019B                     	;# 
   901  019C                     	;# 
   902  019C                     	;# 
   903  019D                     	;# 
   904  019E                     	;# 
   905  019F                     	;# 
   906  020D                     	;# 
   907  0210                     	;# 
   908  0211                     	;# 
   909  0211                     	;# 
   910  0212                     	;# 
   911  0212                     	;# 
   912  0213                     	;# 
   913  0213                     	;# 
   914  0214                     	;# 
   915  0214                     	;# 
   916  0215                     	;# 
   917  0215                     	;# 
   918  0215                     	;# 
   919  0216                     	;# 
   920  0216                     	;# 
   921  0217                     	;# 
   922  0217                     	;# 
   923  0291                     	;# 
   924  0291                     	;# 
   925  0292                     	;# 
   926  0293                     	;# 
   927  0298                     	;# 
   928  0298                     	;# 
   929  0299                     	;# 
   930  029A                     	;# 
   931  0394                     	;# 
   932  0395                     	;# 
   933  0396                     	;# 
   934  0FE4                     	;# 
   935  0FE5                     	;# 
   936  0FE6                     	;# 
   937  0FE7                     	;# 
   938  0FE8                     	;# 
   939  0FE9                     	;# 
   940  0FEA                     	;# 
   941  0FEB                     	;# 
   942  0FED                     	;# 
   943  0FEE                     	;# 
   944  0FEF                     	;# 
   945  0000                     	;# 
   946  0001                     	;# 
   947  0002                     	;# 
   948  0003                     	;# 
   949  0004                     	;# 
   950  0005                     	;# 
   951  0006                     	;# 
   952  0007                     	;# 
   953  0008                     	;# 
   954  0009                     	;# 
   955  000A                     	;# 
   956  000B                     	;# 
   957  000C                     	;# 
   958  000D                     	;# 
   959  000E                     	;# 
   960  0010                     	;# 
   961  0011                     	;# 
   962  0012                     	;# 
   963  0015                     	;# 
   964  0016                     	;# 
   965  0016                     	;# 
   966  0017                     	;# 
   967  0018                     	;# 
   968  0019                     	;# 
   969  001A                     	;# 
   970  001B                     	;# 
   971  001C                     	;# 
   972  008C                     	;# 
   973  008D                     	;# 
   974  008E                     	;# 
   975  0090                     	;# 
   976  0091                     	;# 
   977  0092                     	;# 
   978  0095                     	;# 
   979  0096                     	;# 
   980  0097                     	;# 
   981  0099                     	;# 
   982  009A                     	;# 
   983  009B                     	;# 
   984  009B                     	;# 
   985  009C                     	;# 
   986  009D                     	;# 
   987  009E                     	;# 
   988  010C                     	;# 
   989  010D                     	;# 
   990  010E                     	;# 
   991  0116                     	;# 
   992  0117                     	;# 
   993  011D                     	;# 
   994  018C                     	;# 
   995  018D                     	;# 
   996  018E                     	;# 
   997  0191                     	;# 
   998  0191                     	;# 
   999  0192                     	;# 
  1000  0193                     	;# 
  1001  0193                     	;# 
  1002  0194                     	;# 
  1003  0195                     	;# 
  1004  0196                     	;# 
  1005  0197                     	;# 
  1006  0199                     	;# 
  1007  019A                     	;# 
  1008  019B                     	;# 
  1009  019B                     	;# 
  1010  019B                     	;# 
  1011  019B                     	;# 
  1012  019C                     	;# 
  1013  019C                     	;# 
  1014  019D                     	;# 
  1015  019E                     	;# 
  1016  019F                     	;# 
  1017  020D                     	;# 
  1018  0210                     	;# 
  1019  0211                     	;# 
  1020  0211                     	;# 
  1021  0212                     	;# 
  1022  0212                     	;# 
  1023  0213                     	;# 
  1024  0213                     	;# 
  1025  0214                     	;# 
  1026  0214                     	;# 
  1027  0215                     	;# 
  1028  0215                     	;# 
  1029  0215                     	;# 
  1030  0216                     	;# 
  1031  0216                     	;# 
  1032  0217                     	;# 
  1033  0217                     	;# 
  1034  0291                     	;# 
  1035  0291                     	;# 
  1036  0292                     	;# 
  1037  0293                     	;# 
  1038  0298                     	;# 
  1039  0298                     	;# 
  1040  0299                     	;# 
  1041  029A                     	;# 
  1042  0394                     	;# 
  1043  0395                     	;# 
  1044  0396                     	;# 
  1045  0FE4                     	;# 
  1046  0FE5                     	;# 
  1047  0FE6                     	;# 
  1048  0FE7                     	;# 
  1049  0FE8                     	;# 
  1050  0FE9                     	;# 
  1051  0FEA                     	;# 
  1052  0FEB                     	;# 
  1053  0FED                     	;# 
  1054  0FEE                     	;# 
  1055  0FEF                     	;# 
  1056  0000                     	;# 
  1057  0001                     	;# 
  1058  0002                     	;# 
  1059  0003                     	;# 
  1060  0004                     	;# 
  1061  0005                     	;# 
  1062  0006                     	;# 
  1063  0007                     	;# 
  1064  0008                     	;# 
  1065  0009                     	;# 
  1066  000A                     	;# 
  1067  000B                     	;# 
  1068  000C                     	;# 
  1069  000D                     	;# 
  1070  000E                     	;# 
  1071  0010                     	;# 
  1072  0011                     	;# 
  1073  0012                     	;# 
  1074  0015                     	;# 
  1075  0016                     	;# 
  1076  0016                     	;# 
  1077  0017                     	;# 
  1078  0018                     	;# 
  1079  0019                     	;# 
  1080  001A                     	;# 
  1081  001B                     	;# 
  1082  001C                     	;# 
  1083  008C                     	;# 
  1084  008D                     	;# 
  1085  008E                     	;# 
  1086  0090                     	;# 
  1087  0091                     	;# 
  1088  0092                     	;# 
  1089  0095                     	;# 
  1090  0096                     	;# 
  1091  0097                     	;# 
  1092  0099                     	;# 
  1093  009A                     	;# 
  1094  009B                     	;# 
  1095  009B                     	;# 
  1096  009C                     	;# 
  1097  009D                     	;# 
  1098  009E                     	;# 
  1099  010C                     	;# 
  1100  010D                     	;# 
  1101  010E                     	;# 
  1102  0116                     	;# 
  1103  0117                     	;# 
  1104  011D                     	;# 
  1105  018C                     	;# 
  1106  018D                     	;# 
  1107  018E                     	;# 
  1108  0191                     	;# 
  1109  0191                     	;# 
  1110  0192                     	;# 
  1111  0193                     	;# 
  1112  0193                     	;# 
  1113  0194                     	;# 
  1114  0195                     	;# 
  1115  0196                     	;# 
  1116  0197                     	;# 
  1117  0199                     	;# 
  1118  019A                     	;# 
  1119  019B                     	;# 
  1120  019B                     	;# 
  1121  019B                     	;# 
  1122  019B                     	;# 
  1123  019C                     	;# 
  1124  019C                     	;# 
  1125  019D                     	;# 
  1126  019E                     	;# 
  1127  019F                     	;# 
  1128  020D                     	;# 
  1129  0210                     	;# 
  1130  0211                     	;# 
  1131  0211                     	;# 
  1132  0212                     	;# 
  1133  0212                     	;# 
  1134  0213                     	;# 
  1135  0213                     	;# 
  1136  0214                     	;# 
  1137  0214                     	;# 
  1138  0215                     	;# 
  1139  0215                     	;# 
  1140  0215                     	;# 
  1141  0216                     	;# 
  1142  0216                     	;# 
  1143  0217                     	;# 
  1144  0217                     	;# 
  1145  0291                     	;# 
  1146  0291                     	;# 
  1147  0292                     	;# 
  1148  0293                     	;# 
  1149  0298                     	;# 
  1150  0298                     	;# 
  1151  0299                     	;# 
  1152  029A                     	;# 
  1153  0394                     	;# 
  1154  0395                     	;# 
  1155  0396                     	;# 
  1156  0FE4                     	;# 
  1157  0FE5                     	;# 
  1158  0FE6                     	;# 
  1159  0FE7                     	;# 
  1160  0FE8                     	;# 
  1161  0FE9                     	;# 
  1162  0FEA                     	;# 
  1163  0FEB                     	;# 
  1164  0FED                     	;# 
  1165  0FEE                     	;# 
  1166  0FEF                     	;# 
  1167  0000                     	;# 
  1168  0001                     	;# 
  1169  0002                     	;# 
  1170  0003                     	;# 
  1171  0004                     	;# 
  1172  0005                     	;# 
  1173  0006                     	;# 
  1174  0007                     	;# 
  1175  0008                     	;# 
  1176  0009                     	;# 
  1177  000A                     	;# 
  1178  000B                     	;# 
  1179  000C                     	;# 
  1180  000D                     	;# 
  1181  000E                     	;# 
  1182  0010                     	;# 
  1183  0011                     	;# 
  1184  0012                     	;# 
  1185  0015                     	;# 
  1186  0016                     	;# 
  1187  0016                     	;# 
  1188  0017                     	;# 
  1189  0018                     	;# 
  1190  0019                     	;# 
  1191  001A                     	;# 
  1192  001B                     	;# 
  1193  001C                     	;# 
  1194  008C                     	;# 
  1195  008D                     	;# 
  1196  008E                     	;# 
  1197  0090                     	;# 
  1198  0091                     	;# 
  1199  0092                     	;# 
  1200  0095                     	;# 
  1201  0096                     	;# 
  1202  0097                     	;# 
  1203  0099                     	;# 
  1204  009A                     	;# 
  1205  009B                     	;# 
  1206  009B                     	;# 
  1207  009C                     	;# 
  1208  009D                     	;# 
  1209  009E                     	;# 
  1210  010C                     	;# 
  1211  010D                     	;# 
  1212  010E                     	;# 
  1213  0116                     	;# 
  1214  0117                     	;# 
  1215  011D                     	;# 
  1216  018C                     	;# 
  1217  018D                     	;# 
  1218  018E                     	;# 
  1219  0191                     	;# 
  1220  0191                     	;# 
  1221  0192                     	;# 
  1222  0193                     	;# 
  1223  0193                     	;# 
  1224  0194                     	;# 
  1225  0195                     	;# 
  1226  0196                     	;# 
  1227  0197                     	;# 
  1228  0199                     	;# 
  1229  019A                     	;# 
  1230  019B                     	;# 
  1231  019B                     	;# 
  1232  019B                     	;# 
  1233  019B                     	;# 
  1234  019C                     	;# 
  1235  019C                     	;# 
  1236  019D                     	;# 
  1237  019E                     	;# 
  1238  019F                     	;# 
  1239  020D                     	;# 
  1240  0210                     	;# 
  1241  0211                     	;# 
  1242  0211                     	;# 
  1243  0212                     	;# 
  1244  0212                     	;# 
  1245  0213                     	;# 
  1246  0213                     	;# 
  1247  0214                     	;# 
  1248  0214                     	;# 
  1249  0215                     	;# 
  1250  0215                     	;# 
  1251  0215                     	;# 
  1252  0216                     	;# 
  1253  0216                     	;# 
  1254  0217                     	;# 
  1255  0217                     	;# 
  1256  0291                     	;# 
  1257  0291                     	;# 
  1258  0292                     	;# 
  1259  0293                     	;# 
  1260  0298                     	;# 
  1261  0298                     	;# 
  1262  0299                     	;# 
  1263  029A                     	;# 
  1264  0394                     	;# 
  1265  0395                     	;# 
  1266  0396                     	;# 
  1267  0FE4                     	;# 
  1268  0FE5                     	;# 
  1269  0FE6                     	;# 
  1270  0FE7                     	;# 
  1271  0FE8                     	;# 
  1272  0FE9                     	;# 
  1273  0FEA                     	;# 
  1274  0FEB                     	;# 
  1275  0FED                     	;# 
  1276  0FEE                     	;# 
  1277  0FEF                     	;# 
  1278  0000                     	;# 
  1279  0001                     	;# 
  1280  0002                     	;# 
  1281  0003                     	;# 
  1282  0004                     	;# 
  1283  0005                     	;# 
  1284  0006                     	;# 
  1285  0007                     	;# 
  1286  0008                     	;# 
  1287  0009                     	;# 
  1288  000A                     	;# 
  1289  000B                     	;# 
  1290  000C                     	;# 
  1291  000D                     	;# 
  1292  000E                     	;# 
  1293  0010                     	;# 
  1294  0011                     	;# 
  1295  0012                     	;# 
  1296  0015                     	;# 
  1297  0016                     	;# 
  1298  0016                     	;# 
  1299  0017                     	;# 
  1300  0018                     	;# 
  1301  0019                     	;# 
  1302  001A                     	;# 
  1303  001B                     	;# 
  1304  001C                     	;# 
  1305  008C                     	;# 
  1306  008D                     	;# 
  1307  008E                     	;# 
  1308  0090                     	;# 
  1309  0091                     	;# 
  1310  0092                     	;# 
  1311  0095                     	;# 
  1312  0096                     	;# 
  1313  0097                     	;# 
  1314  0099                     	;# 
  1315  009A                     	;# 
  1316  009B                     	;# 
  1317  009B                     	;# 
  1318  009C                     	;# 
  1319  009D                     	;# 
  1320  009E                     	;# 
  1321  010C                     	;# 
  1322  010D                     	;# 
  1323  010E                     	;# 
  1324  0116                     	;# 
  1325  0117                     	;# 
  1326  011D                     	;# 
  1327  018C                     	;# 
  1328  018D                     	;# 
  1329  018E                     	;# 
  1330  0191                     	;# 
  1331  0191                     	;# 
  1332  0192                     	;# 
  1333  0193                     	;# 
  1334  0193                     	;# 
  1335  0194                     	;# 
  1336  0195                     	;# 
  1337  0196                     	;# 
  1338  0197                     	;# 
  1339  0199                     	;# 
  1340  019A                     	;# 
  1341  019B                     	;# 
  1342  019B                     	;# 
  1343  019B                     	;# 
  1344  019B                     	;# 
  1345  019C                     	;# 
  1346  019C                     	;# 
  1347  019D                     	;# 
  1348  019E                     	;# 
  1349  019F                     	;# 
  1350  020D                     	;# 
  1351  0210                     	;# 
  1352  0211                     	;# 
  1353  0211                     	;# 
  1354  0212                     	;# 
  1355  0212                     	;# 
  1356  0213                     	;# 
  1357  0213                     	;# 
  1358  0214                     	;# 
  1359  0214                     	;# 
  1360  0215                     	;# 
  1361  0215                     	;# 
  1362  0215                     	;# 
  1363  0216                     	;# 
  1364  0216                     	;# 
  1365  0217                     	;# 
  1366  0217                     	;# 
  1367  0291                     	;# 
  1368  0291                     	;# 
  1369  0292                     	;# 
  1370  0293                     	;# 
  1371  0298                     	;# 
  1372  0298                     	;# 
  1373  0299                     	;# 
  1374  029A                     	;# 
  1375  0394                     	;# 
  1376  0395                     	;# 
  1377  0396                     	;# 
  1378  0FE4                     	;# 
  1379  0FE5                     	;# 
  1380  0FE6                     	;# 
  1381  0FE7                     	;# 
  1382  0FE8                     	;# 
  1383  0FE9                     	;# 
  1384  0FEA                     	;# 
  1385  0FEB                     	;# 
  1386  0FED                     	;# 
  1387  0FEE                     	;# 
  1388  0FEF                     	;# 
  1389  0000                     	;# 
  1390  0001                     	;# 
  1391  0002                     	;# 
  1392  0003                     	;# 
  1393  0004                     	;# 
  1394  0005                     	;# 
  1395  0006                     	;# 
  1396  0007                     	;# 
  1397  0008                     	;# 
  1398  0009                     	;# 
  1399  000A                     	;# 
  1400  000B                     	;# 
  1401  000C                     	;# 
  1402  000D                     	;# 
  1403  000E                     	;# 
  1404  0010                     	;# 
  1405  0011                     	;# 
  1406  0012                     	;# 
  1407  0015                     	;# 
  1408  0016                     	;# 
  1409  0016                     	;# 
  1410  0017                     	;# 
  1411  0018                     	;# 
  1412  0019                     	;# 
  1413  001A                     	;# 
  1414  001B                     	;# 
  1415  001C                     	;# 
  1416  008C                     	;# 
  1417  008D                     	;# 
  1418  008E                     	;# 
  1419  0090                     	;# 
  1420  0091                     	;# 
  1421  0092                     	;# 
  1422  0095                     	;# 
  1423  0096                     	;# 
  1424  0097                     	;# 
  1425  0099                     	;# 
  1426  009A                     	;# 
  1427  009B                     	;# 
  1428  009B                     	;# 
  1429  009C                     	;# 
  1430  009D                     	;# 
  1431  009E                     	;# 
  1432  010C                     	;# 
  1433  010D                     	;# 
  1434  010E                     	;# 
  1435  0116                     	;# 
  1436  0117                     	;# 
  1437  011D                     	;# 
  1438  018C                     	;# 
  1439  018D                     	;# 
  1440  018E                     	;# 
  1441  0191                     	;# 
  1442  0191                     	;# 
  1443  0192                     	;# 
  1444  0193                     	;# 
  1445  0193                     	;# 
  1446  0194                     	;# 
  1447  0195                     	;# 
  1448  0196                     	;# 
  1449  0197                     	;# 
  1450  0199                     	;# 
  1451  019A                     	;# 
  1452  019B                     	;# 
  1453  019B                     	;# 
  1454  019B                     	;# 
  1455  019B                     	;# 
  1456  019C                     	;# 
  1457  019C                     	;# 
  1458  019D                     	;# 
  1459  019E                     	;# 
  1460  019F                     	;# 
  1461  020D                     	;# 
  1462  0210                     	;# 
  1463  0211                     	;# 
  1464  0211                     	;# 
  1465  0212                     	;# 
  1466  0212                     	;# 
  1467  0213                     	;# 
  1468  0213                     	;# 
  1469  0214                     	;# 
  1470  0214                     	;# 
  1471  0215                     	;# 
  1472  0215                     	;# 
  1473  0215                     	;# 
  1474  0216                     	;# 
  1475  0216                     	;# 
  1476  0217                     	;# 
  1477  0217                     	;# 
  1478  0291                     	;# 
  1479  0291                     	;# 
  1480  0292                     	;# 
  1481  0293                     	;# 
  1482  0298                     	;# 
  1483  0298                     	;# 
  1484  0299                     	;# 
  1485  029A                     	;# 
  1486  0394                     	;# 
  1487  0395                     	;# 
  1488  0396                     	;# 
  1489  0FE4                     	;# 
  1490  0FE5                     	;# 
  1491  0FE6                     	;# 
  1492  0FE7                     	;# 
  1493  0FE8                     	;# 
  1494  0FE9                     	;# 
  1495  0FEA                     	;# 
  1496  0FEB                     	;# 
  1497  0FED                     	;# 
  1498  0FEE                     	;# 
  1499  0FEF                     	;# 
  1500  0000                     	;# 
  1501  0001                     	;# 
  1502  0002                     	;# 
  1503  0003                     	;# 
  1504  0004                     	;# 
  1505  0005                     	;# 
  1506  0006                     	;# 
  1507  0007                     	;# 
  1508  0008                     	;# 
  1509  0009                     	;# 
  1510  000A                     	;# 
  1511  000B                     	;# 
  1512  000C                     	;# 
  1513  000D                     	;# 
  1514  000E                     	;# 
  1515  0010                     	;# 
  1516  0011                     	;# 
  1517  0012                     	;# 
  1518  0015                     	;# 
  1519  0016                     	;# 
  1520  0016                     	;# 
  1521  0017                     	;# 
  1522  0018                     	;# 
  1523  0019                     	;# 
  1524  001A                     	;# 
  1525  001B                     	;# 
  1526  001C                     	;# 
  1527  008C                     	;# 
  1528  008D                     	;# 
  1529  008E                     	;# 
  1530  0090                     	;# 
  1531  0091                     	;# 
  1532  0092                     	;# 
  1533  0095                     	;# 
  1534  0096                     	;# 
  1535  0097                     	;# 
  1536  0099                     	;# 
  1537  009A                     	;# 
  1538  009B                     	;# 
  1539  009B                     	;# 
  1540  009C                     	;# 
  1541  009D                     	;# 
  1542  009E                     	;# 
  1543  010C                     	;# 
  1544  010D                     	;# 
  1545  010E                     	;# 
  1546  0116                     	;# 
  1547  0117                     	;# 
  1548  011D                     	;# 
  1549  018C                     	;# 
  1550  018D                     	;# 
  1551  018E                     	;# 
  1552  0191                     	;# 
  1553  0191                     	;# 
  1554  0192                     	;# 
  1555  0193                     	;# 
  1556  0193                     	;# 
  1557  0194                     	;# 
  1558  0195                     	;# 
  1559  0196                     	;# 
  1560  0197                     	;# 
  1561  0199                     	;# 
  1562  019A                     	;# 
  1563  019B                     	;# 
  1564  019B                     	;# 
  1565  019B                     	;# 
  1566  019B                     	;# 
  1567  019C                     	;# 
  1568  019C                     	;# 
  1569  019D                     	;# 
  1570  019E                     	;# 
  1571  019F                     	;# 
  1572  020D                     	;# 
  1573  0210                     	;# 
  1574  0211                     	;# 
  1575  0211                     	;# 
  1576  0212                     	;# 
  1577  0212                     	;# 
  1578  0213                     	;# 
  1579  0213                     	;# 
  1580  0214                     	;# 
  1581  0214                     	;# 
  1582  0215                     	;# 
  1583  0215                     	;# 
  1584  0215                     	;# 
  1585  0216                     	;# 
  1586  0216                     	;# 
  1587  0217                     	;# 
  1588  0217                     	;# 
  1589  0291                     	;# 
  1590  0291                     	;# 
  1591  0292                     	;# 
  1592  0293                     	;# 
  1593  0298                     	;# 
  1594  0298                     	;# 
  1595  0299                     	;# 
  1596  029A                     	;# 
  1597  0394                     	;# 
  1598  0395                     	;# 
  1599  0396                     	;# 
  1600  0FE4                     	;# 
  1601  0FE5                     	;# 
  1602  0FE6                     	;# 
  1603  0FE7                     	;# 
  1604  0FE8                     	;# 
  1605  0FE9                     	;# 
  1606  0FEA                     	;# 
  1607  0FEB                     	;# 
  1608  0FED                     	;# 
  1609  0FEE                     	;# 
  1610  0FEF                     	;# 
  1611  0000                     	;# 
  1612  0001                     	;# 
  1613  0002                     	;# 
  1614  0003                     	;# 
  1615  0004                     	;# 
  1616  0005                     	;# 
  1617  0006                     	;# 
  1618  0007                     	;# 
  1619  0008                     	;# 
  1620  0009                     	;# 
  1621  000A                     	;# 
  1622  000B                     	;# 
  1623  000C                     	;# 
  1624  000D                     	;# 
  1625  000E                     	;# 
  1626  0010                     	;# 
  1627  0011                     	;# 
  1628  0012                     	;# 
  1629  0015                     	;# 
  1630  0016                     	;# 
  1631  0016                     	;# 
  1632  0017                     	;# 
  1633  0018                     	;# 
  1634  0019                     	;# 
  1635  001A                     	;# 
  1636  001B                     	;# 
  1637  001C                     	;# 
  1638  008C                     	;# 
  1639  008D                     	;# 
  1640  008E                     	;# 
  1641  0090                     	;# 
  1642  0091                     	;# 
  1643  0092                     	;# 
  1644  0095                     	;# 
  1645  0096                     	;# 
  1646  0097                     	;# 
  1647  0099                     	;# 
  1648  009A                     	;# 
  1649  009B                     	;# 
  1650  009B                     	;# 
  1651  009C                     	;# 
  1652  009D                     	;# 
  1653  009E                     	;# 
  1654  010C                     	;# 
  1655  010D                     	;# 
  1656  010E                     	;# 
  1657  0116                     	;# 
  1658  0117                     	;# 
  1659  011D                     	;# 
  1660  018C                     	;# 
  1661  018D                     	;# 
  1662  018E                     	;# 
  1663  0191                     	;# 
  1664  0191                     	;# 
  1665  0192                     	;# 
  1666  0193                     	;# 
  1667  0193                     	;# 
  1668  0194                     	;# 
  1669  0195                     	;# 
  1670  0196                     	;# 
  1671  0197                     	;# 
  1672  0199                     	;# 
  1673  019A                     	;# 
  1674  019B                     	;# 
  1675  019B                     	;# 
  1676  019B                     	;# 
  1677  019B                     	;# 
  1678  019C                     	;# 
  1679  019C                     	;# 
  1680  019D                     	;# 
  1681  019E                     	;# 
  1682  019F                     	;# 
  1683  020D                     	;# 
  1684  0210                     	;# 
  1685  0211                     	;# 
  1686  0211                     	;# 
  1687  0212                     	;# 
  1688  0212                     	;# 
  1689  0213                     	;# 
  1690  0213                     	;# 
  1691  0214                     	;# 
  1692  0214                     	;# 
  1693  0215                     	;# 
  1694  0215                     	;# 
  1695  0215                     	;# 
  1696  0216                     	;# 
  1697  0216                     	;# 
  1698  0217                     	;# 
  1699  0217                     	;# 
  1700  0291                     	;# 
  1701  0291                     	;# 
  1702  0292                     	;# 
  1703  0293                     	;# 
  1704  0298                     	;# 
  1705  0298                     	;# 
  1706  0299                     	;# 
  1707  029A                     	;# 
  1708  0394                     	;# 
  1709  0395                     	;# 
  1710  0396                     	;# 
  1711  0FE4                     	;# 
  1712  0FE5                     	;# 
  1713  0FE6                     	;# 
  1714  0FE7                     	;# 
  1715  0FE8                     	;# 
  1716  0FE9                     	;# 
  1717  0FEA                     	;# 
  1718  0FEB                     	;# 
  1719  0FED                     	;# 
  1720  0FEE                     	;# 
  1721  0FEF                     	;# 
  1722  0000                     	;# 
  1723  0001                     	;# 
  1724  0002                     	;# 
  1725  0003                     	;# 
  1726  0004                     	;# 
  1727  0005                     	;# 
  1728  0006                     	;# 
  1729  0007                     	;# 
  1730  0008                     	;# 
  1731  0009                     	;# 
  1732  000A                     	;# 
  1733  000B                     	;# 
  1734  000C                     	;# 
  1735  000D                     	;# 
  1736  000E                     	;# 
  1737  0010                     	;# 
  1738  0011                     	;# 
  1739  0012                     	;# 
  1740  0015                     	;# 
  1741  0016                     	;# 
  1742  0016                     	;# 
  1743  0017                     	;# 
  1744  0018                     	;# 
  1745  0019                     	;# 
  1746  001A                     	;# 
  1747  001B                     	;# 
  1748  001C                     	;# 
  1749  008C                     	;# 
  1750  008D                     	;# 
  1751  008E                     	;# 
  1752  0090                     	;# 
  1753  0091                     	;# 
  1754  0092                     	;# 
  1755  0095                     	;# 
  1756  0096                     	;# 
  1757  0097                     	;# 
  1758  0099                     	;# 
  1759  009A                     	;# 
  1760  009B                     	;# 
  1761  009B                     	;# 
  1762  009C                     	;# 
  1763  009D                     	;# 
  1764  009E                     	;# 
  1765  010C                     	;# 
  1766  010D                     	;# 
  1767  010E                     	;# 
  1768  0116                     	;# 
  1769  0117                     	;# 
  1770  011D                     	;# 
  1771  018C                     	;# 
  1772  018D                     	;# 
  1773  018E                     	;# 
  1774  0191                     	;# 
  1775  0191                     	;# 
  1776  0192                     	;# 
  1777  0193                     	;# 
  1778  0193                     	;# 
  1779  0194                     	;# 
  1780  0195                     	;# 
  1781  0196                     	;# 
  1782  0197                     	;# 
  1783  0199                     	;# 
  1784  019A                     	;# 
  1785  019B                     	;# 
  1786  019B                     	;# 
  1787  019B                     	;# 
  1788  019B                     	;# 
  1789  019C                     	;# 
  1790  019C                     	;# 
  1791  019D                     	;# 
  1792  019E                     	;# 
  1793  019F                     	;# 
  1794  020D                     	;# 
  1795  0210                     	;# 
  1796  0211                     	;# 
  1797  0211                     	;# 
  1798  0212                     	;# 
  1799  0212                     	;# 
  1800  0213                     	;# 
  1801  0213                     	;# 
  1802  0214                     	;# 
  1803  0214                     	;# 
  1804  0215                     	;# 
  1805  0215                     	;# 
  1806  0215                     	;# 
  1807  0216                     	;# 
  1808  0216                     	;# 
  1809  0217                     	;# 
  1810  0217                     	;# 
  1811  0291                     	;# 
  1812  0291                     	;# 
  1813  0292                     	;# 
  1814  0293                     	;# 
  1815  0298                     	;# 
  1816  0298                     	;# 
  1817  0299                     	;# 
  1818  029A                     	;# 
  1819  0394                     	;# 
  1820  0395                     	;# 
  1821  0396                     	;# 
  1822  0FE4                     	;# 
  1823  0FE5                     	;# 
  1824  0FE6                     	;# 
  1825  0FE7                     	;# 
  1826  0FE8                     	;# 
  1827  0FE9                     	;# 
  1828  0FEA                     	;# 
  1829  0FEB                     	;# 
  1830  0FED                     	;# 
  1831  0FEE                     	;# 
  1832  0FEF                     	;# 
  1833  0000                     	;# 
  1834  0001                     	;# 
  1835  0002                     	;# 
  1836  0003                     	;# 
  1837  0004                     	;# 
  1838  0005                     	;# 
  1839  0006                     	;# 
  1840  0007                     	;# 
  1841  0008                     	;# 
  1842  0009                     	;# 
  1843  000A                     	;# 
  1844  000B                     	;# 
  1845  000C                     	;# 
  1846  000D                     	;# 
  1847  000E                     	;# 
  1848  0010                     	;# 
  1849  0011                     	;# 
  1850  0012                     	;# 
  1851  0015                     	;# 
  1852  0016                     	;# 
  1853  0016                     	;# 
  1854  0017                     	;# 
  1855  0018                     	;# 
  1856  0019                     	;# 
  1857  001A                     	;# 
  1858  001B                     	;# 
  1859  001C                     	;# 
  1860  008C                     	;# 
  1861  008D                     	;# 
  1862  008E                     	;# 
  1863  0090                     	;# 
  1864  0091                     	;# 
  1865  0092                     	;# 
  1866  0095                     	;# 
  1867  0096                     	;# 
  1868  0097                     	;# 
  1869  0099                     	;# 
  1870  009A                     	;# 
  1871  009B                     	;# 
  1872  009B                     	;# 
  1873  009C                     	;# 
  1874  009D                     	;# 
  1875  009E                     	;# 
  1876  010C                     	;# 
  1877  010D                     	;# 
  1878  010E                     	;# 
  1879  0116                     	;# 
  1880  0117                     	;# 
  1881  011D                     	;# 
  1882  018C                     	;# 
  1883  018D                     	;# 
  1884  018E                     	;# 
  1885  0191                     	;# 
  1886  0191                     	;# 
  1887  0192                     	;# 
  1888  0193                     	;# 
  1889  0193                     	;# 
  1890  0194                     	;# 
  1891  0195                     	;# 
  1892  0196                     	;# 
  1893  0197                     	;# 
  1894  0199                     	;# 
  1895  019A                     	;# 
  1896  019B                     	;# 
  1897  019B                     	;# 
  1898  019B                     	;# 
  1899  019B                     	;# 
  1900  019C                     	;# 
  1901  019C                     	;# 
  1902  019D                     	;# 
  1903  019E                     	;# 
  1904  019F                     	;# 
  1905  020D                     	;# 
  1906  0210                     	;# 
  1907  0211                     	;# 
  1908  0211                     	;# 
  1909  0212                     	;# 
  1910  0212                     	;# 
  1911  0213                     	;# 
  1912  0213                     	;# 
  1913  0214                     	;# 
  1914  0214                     	;# 
  1915  0215                     	;# 
  1916  0215                     	;# 
  1917  0215                     	;# 
  1918  0216                     	;# 
  1919  0216                     	;# 
  1920  0217                     	;# 
  1921  0217                     	;# 
  1922  0291                     	;# 
  1923  0291                     	;# 
  1924  0292                     	;# 
  1925  0293                     	;# 
  1926  0298                     	;# 
  1927  0298                     	;# 
  1928  0299                     	;# 
  1929  029A                     	;# 
  1930  0394                     	;# 
  1931  0395                     	;# 
  1932  0396                     	;# 
  1933  0FE4                     	;# 
  1934  0FE5                     	;# 
  1935  0FE6                     	;# 
  1936  0FE7                     	;# 
  1937  0FE8                     	;# 
  1938  0FE9                     	;# 
  1939  0FEA                     	;# 
  1940  0FEB                     	;# 
  1941  0FED                     	;# 
  1942  0FEE                     	;# 
  1943  0FEF                     	;# 
  1944  0000                     	;# 
  1945  0001                     	;# 
  1946  0002                     	;# 
  1947  0003                     	;# 
  1948  0004                     	;# 
  1949  0005                     	;# 
  1950  0006                     	;# 
  1951  0007                     	;# 
  1952  0008                     	;# 
  1953  0009                     	;# 
  1954  000A                     	;# 
  1955  000B                     	;# 
  1956  000C                     	;# 
  1957  000D                     	;# 
  1958  000E                     	;# 
  1959  0010                     	;# 
  1960  0011                     	;# 
  1961  0012                     	;# 
  1962  0015                     	;# 
  1963  0016                     	;# 
  1964  0016                     	;# 
  1965  0017                     	;# 
  1966  0018                     	;# 
  1967  0019                     	;# 
  1968  001A                     	;# 
  1969  001B                     	;# 
  1970  001C                     	;# 
  1971  008C                     	;# 
  1972  008D                     	;# 
  1973  008E                     	;# 
  1974  0090                     	;# 
  1975  0091                     	;# 
  1976  0092                     	;# 
  1977  0095                     	;# 
  1978  0096                     	;# 
  1979  0097                     	;# 
  1980  0099                     	;# 
  1981  009A                     	;# 
  1982  009B                     	;# 
  1983  009B                     	;# 
  1984  009C                     	;# 
  1985  009D                     	;# 
  1986  009E                     	;# 
  1987  010C                     	;# 
  1988  010D                     	;# 
  1989  010E                     	;# 
  1990  0116                     	;# 
  1991  0117                     	;# 
  1992  011D                     	;# 
  1993  018C                     	;# 
  1994  018D                     	;# 
  1995  018E                     	;# 
  1996  0191                     	;# 
  1997  0191                     	;# 
  1998  0192                     	;# 
  1999  0193                     	;# 
  2000  0193                     	;# 
  2001  0194                     	;# 
  2002  0195                     	;# 
  2003  0196                     	;# 
  2004  0197                     	;# 
  2005  0199                     	;# 
  2006  019A                     	;# 
  2007  019B                     	;# 
  2008  019B                     	;# 
  2009  019B                     	;# 
  2010  019B                     	;# 
  2011  019C                     	;# 
  2012  019C                     	;# 
  2013  019D                     	;# 
  2014  019E                     	;# 
  2015  019F                     	;# 
  2016  020D                     	;# 
  2017  0210                     	;# 
  2018  0211                     	;# 
  2019  0211                     	;# 
  2020  0212                     	;# 
  2021  0212                     	;# 
  2022  0213                     	;# 
  2023  0213                     	;# 
  2024  0214                     	;# 
  2025  0214                     	;# 
  2026  0215                     	;# 
  2027  0215                     	;# 
  2028  0215                     	;# 
  2029  0216                     	;# 
  2030  0216                     	;# 
  2031  0217                     	;# 
  2032  0217                     	;# 
  2033  0291                     	;# 
  2034  0291                     	;# 
  2035  0292                     	;# 
  2036  0293                     	;# 
  2037  0298                     	;# 
  2038  0298                     	;# 
  2039  0299                     	;# 
  2040  029A                     	;# 
  2041  0394                     	;# 
  2042  0395                     	;# 
  2043  0396                     	;# 
  2044  0FE4                     	;# 
  2045  0FE5                     	;# 
  2046  0FE6                     	;# 
  2047  0FE7                     	;# 
  2048  0FE8                     	;# 
  2049  0FE9                     	;# 
  2050  0FEA                     	;# 
  2051  0FEB                     	;# 
  2052  0FED                     	;# 
  2053  0FEE                     	;# 
  2054  0FEF                     	;# 
  2055  0000                     	;# 
  2056  0001                     	;# 
  2057  0002                     	;# 
  2058  0003                     	;# 
  2059  0004                     	;# 
  2060  0005                     	;# 
  2061  0006                     	;# 
  2062  0007                     	;# 
  2063  0008                     	;# 
  2064  0009                     	;# 
  2065  000A                     	;# 
  2066  000B                     	;# 
  2067  000C                     	;# 
  2068  000D                     	;# 
  2069  000E                     	;# 
  2070  0010                     	;# 
  2071  0011                     	;# 
  2072  0012                     	;# 
  2073  0015                     	;# 
  2074  0016                     	;# 
  2075  0016                     	;# 
  2076  0017                     	;# 
  2077  0018                     	;# 
  2078  0019                     	;# 
  2079  001A                     	;# 
  2080  001B                     	;# 
  2081  001C                     	;# 
  2082  008C                     	;# 
  2083  008D                     	;# 
  2084  008E                     	;# 
  2085  0090                     	;# 
  2086  0091                     	;# 
  2087  0092                     	;# 
  2088  0095                     	;# 
  2089  0096                     	;# 
  2090  0097                     	;# 
  2091  0099                     	;# 
  2092  009A                     	;# 
  2093  009B                     	;# 
  2094  009B                     	;# 
  2095  009C                     	;# 
  2096  009D                     	;# 
  2097  009E                     	;# 
  2098  010C                     	;# 
  2099  010D                     	;# 
  2100  010E                     	;# 
  2101  0116                     	;# 
  2102  0117                     	;# 
  2103  011D                     	;# 
  2104  018C                     	;# 
  2105  018D                     	;# 
  2106  018E                     	;# 
  2107  0191                     	;# 
  2108  0191                     	;# 
  2109  0192                     	;# 
  2110  0193                     	;# 
  2111  0193                     	;# 
  2112  0194                     	;# 
  2113  0195                     	;# 
  2114  0196                     	;# 
  2115  0197                     	;# 
  2116  0199                     	;# 
  2117  019A                     	;# 
  2118  019B                     	;# 
  2119  019B                     	;# 
  2120  019B                     	;# 
  2121  019B                     	;# 
  2122  019C                     	;# 
  2123  019C                     	;# 
  2124  019D                     	;# 
  2125  019E                     	;# 
  2126  019F                     	;# 
  2127  020D                     	;# 
  2128  0210                     	;# 
  2129  0211                     	;# 
  2130  0211                     	;# 
  2131  0212                     	;# 
  2132  0212                     	;# 
  2133  0213                     	;# 
  2134  0213                     	;# 
  2135  0214                     	;# 
  2136  0214                     	;# 
  2137  0215                     	;# 
  2138  0215                     	;# 
  2139  0215                     	;# 
  2140  0216                     	;# 
  2141  0216                     	;# 
  2142  0217                     	;# 
  2143  0217                     	;# 
  2144  0291                     	;# 
  2145  0291                     	;# 
  2146  0292                     	;# 
  2147  0293                     	;# 
  2148  0298                     	;# 
  2149  0298                     	;# 
  2150  0299                     	;# 
  2151  029A                     	;# 
  2152  0394                     	;# 
  2153  0395                     	;# 
  2154  0396                     	;# 
  2155  0FE4                     	;# 
  2156  0FE5                     	;# 
  2157  0FE6                     	;# 
  2158  0FE7                     	;# 
  2159  0FE8                     	;# 
  2160  0FE9                     	;# 
  2161  0FEA                     	;# 
  2162  0FEB                     	;# 
  2163  0FED                     	;# 
  2164  0FEE                     	;# 
  2165  0FEF                     	;# 
  2166                           
  2167                           	psect	idataBANK4
  2168  1DD0                     __pidataBANK4:	
  2169                           
  2170                           ;initializer for __product
  2171  1DD0  3463               	retlw	99
  2172  1DD1  3402               	retlw	2
  2173  1DD2  3400               	retlw	0
  2174  1DD3  3400               	retlw	0
  2175  1DD4  3400               	retlw	0
  2176  1DD5  3400               	retlw	0
  2177  1DD6  3400               	retlw	0
  2178  1DD7  3400               	retlw	0
  2179  1DD8  3400               	retlw	0
  2180  1DD9  3400               	retlw	0
  2181  1DDA  3400               	retlw	0
  2182  1DDB  3400               	retlw	0
  2183  1DDC  34FF               	retlw	255
  2184  1DDD  34FF               	retlw	255
  2185  1DDE  34FF               	retlw	255
  2186  1DDF  3400               	retlw	0
  2187  1DE0  3400               	retlw	0
  2188  1DE1  3400               	retlw	0
  2189  1DE2  3400               	retlw	0
  2190  1DE3  3400               	retlw	0
  2191  1DE4  3400               	retlw	0
  2192  1DE5  3400               	retlw	0
  2193  1DE6  3400               	retlw	0
  2194  1DE7  3400               	retlw	0
  2195  1DE8  3400               	retlw	0
  2196  1DE9  3400               	retlw	0
  2197  1DEA  3400               	retlw	0
  2198  1DEB  3400               	retlw	0
  2199  1DEC  3400               	retlw	0
  2200  1DED  3400               	retlw	0
  2201  1DEE  3400               	retlw	0
  2202  1DEF  3400               	retlw	0
  2203                           
  2204                           	psect	stringtext
  2205  1800                     __pstringtext:	
  2206  1800                     _CC2500_registers_address:	
  2207  1800  3403               	retlw	3
  2208  1801  3416               	retlw	22
  2209  1802  3417               	retlw	23
  2210  1803  341E               	retlw	30
  2211  1804  341F               	retlw	31
  2212  1805  3420               	retlw	32
  2213  1806  342A               	retlw	42
  2214  1807  342B               	retlw	43
  2215  1808  340B               	retlw	11
  2216  1809  340C               	retlw	12
  2217  180A  340D               	retlw	13
  2218  180B  340E               	retlw	14
  2219  180C  340F               	retlw	15
  2220  180D  3410               	retlw	16
  2221  180E  3411               	retlw	17
  2222  180F  3412               	retlw	18
  2223  1810  3413               	retlw	19
  2224  1811  3414               	retlw	20
  2225  1812  340A               	retlw	10
  2226  1813  3415               	retlw	21
  2227  1814  3421               	retlw	33
  2228  1815  3422               	retlw	34
  2229  1816  3418               	retlw	24
  2230  1817  3419               	retlw	25
  2231  1818  341A               	retlw	26
  2232  1819  341B               	retlw	27
  2233  181A  341C               	retlw	28
  2234  181B  341D               	retlw	29
  2235  181C  3423               	retlw	35
  2236  181D  3424               	retlw	36
  2237  181E  3425               	retlw	37
  2238  181F  3426               	retlw	38
  2239  1820  3429               	retlw	41
  2240  1821  342C               	retlw	44
  2241  1822  342D               	retlw	45
  2242  1823  342E               	retlw	46
  2243  1824  3400               	retlw	0
  2244  1825  3401               	retlw	1
  2245  1826  3402               	retlw	2
  2246  1827  3407               	retlw	7
  2247  1828  3408               	retlw	8
  2248  1829  3409               	retlw	9
  2249  182A  3406               	retlw	6
  2250  182B  3404               	retlw	4
  2251  182C  3405               	retlw	5
  2252  182D  3427               	retlw	39
  2253  182E  3428               	retlw	40
  2254  182F                     __end_of_CC2500_registers_address:	
  2255  182F                     _CC2500_rfSettings:	
  2256  182F  3407               	retlw	7
  2257  1830  3407               	retlw	7
  2258  1831  3430               	retlw	48
  2259  1832  3487               	retlw	135
  2260  1833  346B               	retlw	107
  2261  1834  34F8               	retlw	248
  2262  1835  347F               	retlw	127
  2263  1836  343F               	retlw	63
  2264  1837  3409               	retlw	9
  2265  1838  3400               	retlw	0
  2266  1839  345C               	retlw	92
  2267  183A  34A7               	retlw	167
  2268  183B  3462               	retlw	98
  2269  183C  3486               	retlw	134
  2270  183D  3483               	retlw	131
  2271  183E  3403               	retlw	3
  2272  183F  3422               	retlw	34
  2273  1840  34F8               	retlw	248
  2274  1841  3400               	retlw	0
  2275  1842  3444               	retlw	68
  2276  1843  34B6               	retlw	182
  2277  1844  3410               	retlw	16
  2278  1845  3418               	retlw	24
  2279  1846  341D               	retlw	29
  2280  1847  341C               	retlw	28
  2281  1848  34C7               	retlw	199
  2282  1849  3400               	retlw	0
  2283  184A  34B2               	retlw	178
  2284  184B  34EA               	retlw	234
  2285  184C  340A               	retlw	10
  2286  184D  3400               	retlw	0
  2287  184E  3411               	retlw	17
  2288  184F  3459               	retlw	89
  2289  1850  3488               	retlw	136
  2290  1851  3431               	retlw	49
  2291  1852  340B               	retlw	11
  2292  1853  342F               	retlw	47
  2293  1854  342E               	retlw	46
  2294  1855  3406               	retlw	6
  2295  1856  3404               	retlw	4
  2296  1857  3405               	retlw	5
  2297  1858  3400               	retlw	0
  2298  1859  3430               	retlw	48
  2299  185A  34D3               	retlw	211
  2300  185B  3491               	retlw	145
  2301  185C  3441               	retlw	65
  2302  185D  3400               	retlw	0
  2303  185E                     __end_of_CC2500_rfSettings:	
  2304  185E                     _CC2500_patable_vaule:	
  2305  185E  34FE               	retlw	254
  2306  185F  34FE               	retlw	254
  2307  1860  34FE               	retlw	254
  2308  1861  34FE               	retlw	254
  2309  1862  34FE               	retlw	254
  2310  1863  34FE               	retlw	254
  2311  1864  34FE               	retlw	254
  2312  1865  34FE               	retlw	254
  2313  1866                     __end_of_CC2500_patable_vaule:	
  2314                           
  2315                           	psect	nvBANK1
  2316  00EE                     __pnvBANK1:	
  2317  00EE                     _product:	
  2318  00EE                     	ds	1
  2319  000C                     _PORTA	set	12
  2320  000D                     _PORTB	set	13
  2321  000E                     _PORTC	set	14
  2322  0018                     _T1CON	set	24
  2323  0017                     _TMR1H	set	23
  2324  0016                     _TMR1L	set	22
  2325  005F                     _GIE	set	95
  2326  005B                     _IOCIE	set	91
  2327  0058                     _IOCIF	set	88
  2328  005E                     _PEIE	set	94
  2329  0060                     _RA0	set	96
  2330  0063                     _RA3	set	99
  2331  0064                     _RA4	set	100
  2332  0066                     _RA6	set	102
  2333  0067                     _RA7	set	103
  2334  0068                     _RB0	set	104
  2335  0069                     _RB1	set	105
  2336  006A                     _RB2	set	106
  2337  006B                     _RB3	set	107
  2338  006C                     _RB4	set	108
  2339  006D                     _RB5	set	109
  2340  0070                     _RC0	set	112
  2341  0071                     _RC1	set	113
  2342  0072                     _RC2	set	114
  2343  0074                     _RC4	set	116
  2344  0075                     _RC5	set	117
  2345  0077                     _RC7	set	119
  2346  0088                     _TMR1IF	set	136
  2347  009D                     _ADCON0	set	157
  2348  009E                     _ADCON1	set	158
  2349  009C                     _ADRESH	set	156
  2350  009B                     _ADRESL	set	155
  2351  0099                     _OSCCON	set	153
  2352  008C                     _TRISA	set	140
  2353  008D                     _TRISB	set	141
  2354  008E                     _TRISC	set	142
  2355  0097                     _WDTCON	set	151
  2356  04E9                     _GO_nDONE	set	1257
  2357  0488                     _TMR1IE	set	1160
  2358  0117                     _FVRCON	set	279
  2359  010C                     _LATA	set	268
  2360  010D                     _LATB	set	269
  2361  010E                     _LATC	set	270
  2362  018C                     _ANSELA	set	396
  2363  018D                     _ANSELB	set	397
  2364  018E                     _ANSELC	set	398
  2365  0192                     _PMADRH	set	402
  2366  0191                     _PMADRL	set	401
  2367  0196                     _PMCON2	set	406
  2368  0194                     _PMDATH	set	404
  2369  0193                     _PMDATL	set	403
  2370  0CAE                     _CFGS	set	3246
  2371  0CAC                     _FREE	set	3244
  2372  0CAD                     _LWLO	set	3245
  2373  0CA8                     _RD	set	3240
  2374  0CA9                     _WR	set	3241
  2375  0CAA                     _WREN	set	3242
  2376  020D                     _WPUB	set	525
  2377  0396                     _IOCBF	set	918
  2378  0395                     _IOCBN	set	917
  2379  0394                     _IOCBP	set	916
  2380  1CB2                     _IOCBF2	set	7346
  2381                           
  2382                           ; #config settings
  2383  0000                     
  2384                           	psect	cinit
  2385  0021                     start_initialization:	
  2386  0021                     __initialization:	
  2387                           
  2388                           ; Clear objects allocated to BITCOMMON
  2389  0021  01FD               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  2390                           
  2391                           ; Clear objects allocated to BITBANK1
  2392  0022  0021               	movlb	1	; select bank1
  2393  0023  01EF               	clrf	(__pbitbssBANK1/(0+8))& (0+127)
  2394                           
  2395                           ; Clear objects allocated to BANK1
  2396  0024  30A0               	movlw	low __pbssBANK1
  2397  0025  0084               	movwf	4
  2398  0026  3000               	movlw	high __pbssBANK1
  2399  0027  0085               	movwf	5
  2400  0028  3046               	movlw	70
  2401  0029  3198  20F2  3180   	fcall	clear_ram0
  2402                           
  2403                           ; Clear objects allocated to BANK2
  2404  002C  3020               	movlw	low __pbssBANK2
  2405  002D  0084               	movwf	4
  2406  002E  3001               	movlw	high __pbssBANK2
  2407  002F  0085               	movwf	5
  2408  0030  304F               	movlw	79
  2409  0031  3198  20F2  3180   	fcall	clear_ram0
  2410                           
  2411                           ; Clear objects allocated to BANK3
  2412  0034  30A0               	movlw	low __pbssBANK3
  2413  0035  0084               	movwf	4
  2414  0036  3001               	movlw	high __pbssBANK3
  2415  0037  0085               	movwf	5
  2416  0038  304E               	movlw	78
  2417  0039  3198  20F2  3180   	fcall	clear_ram0
  2418                           
  2419                           ; Clear objects allocated to BANK4
  2420  003C  3020               	movlw	low __pbssBANK4
  2421  003D  0084               	movwf	4
  2422  003E  3002               	movlw	high __pbssBANK4
  2423  003F  0085               	movwf	5
  2424  0040  3025               	movlw	37
  2425  0041  3198  20F2  3180   	fcall	clear_ram0
  2426                           
  2427                           ; Initialize objects allocated to BANK4
  2428  0044  30D0               	movlw	low __pidataBANK4
  2429  0045  0084               	movwf	4
  2430  0046  309D               	movlw	(high __pidataBANK4)| (0+128)
  2431  0047  0085               	movwf	5
  2432  0048  3045               	movlw	low __pdataBANK4
  2433  0049  0086               	movwf	6
  2434  004A  3002               	movlw	high __pdataBANK4
  2435  004B  0087               	movwf	7
  2436  004C  3020               	movlw	32
  2437  004D  3198  20EC         	fcall	init_ram
  2438  004F                     end_of_initialization:	
  2439                           ;End of C runtime variable initialization code
  2440                           
  2441  004F                     __end_of__initialization:	
  2442  004F  107E               	bcf	pic14e$flags,0	;clear compiler interrupt flag
  2443  0050  0020               	movlb	0
  2444  0051  3194  2C64         	ljmp	_main	;jump to C main() function
  2445                           
  2446                           	psect	bitbssCOMMON
  2447  03E8                     __pbitbssCOMMON:	
  2448  03E8                     _Transceive_OK:	
  2449  03E8                     	ds	1
  2450                           
  2451                           	psect	bitbssBANK1
  2452  0778                     __pbitbssBANK1:	
  2453  0778                     _Receive_OK:	
  2454  0778                     	ds	1
  2455                           
  2456                           	psect	bssBANK1
  2457  00A0                     __pbssBANK1:	
  2458  00A0                     _RF1:	
  2459  00A0                     	ds	14
  2460  00AE                     _myMain:	
  2461  00AE                     	ds	13
  2462  00BB                     _DimmerIntr1:	
  2463  00BB                     	ds	12
  2464  00C7                     _DimmerIntr2:	
  2465  00C7                     	ds	12
  2466  00D3                     _CRC:	
  2467  00D3                     	ds	1
  2468  00D4                     _Cmd:	
  2469  00D4                     	ds	1
  2470  00D5                     _DelayOff:	
  2471  00D5                     	ds	1
  2472  00D6                     _DimmerLights:	
  2473  00D6                     	ds	1
  2474  00D7                     _LED:	
  2475  00D7                     	ds	1
  2476  00D8                     _SPI0Buffer:	
  2477  00D8                     	ds	1
  2478  00D9                     _Sw:	
  2479  00D9                     	ds	1
  2480  00DA                     _Tx_Length:	
  2481  00DA                     	ds	1
  2482  00DB                     _s_data:	
  2483  00DB                     	ds	1
  2484  00DC                     _Temp:	
  2485  00DC                     	ds	10
  2486                           
  2487                           	psect	bssBANK2
  2488  0120                     __pbssBANK2:	
  2489  0120                     _Buz1:	
  2490  0120                     	ds	12
  2491  012C                     _Dimmer:	
  2492  012C                     	ds	5
  2493  0131                     _Timer1:	
  2494  0131                     	ds	3
  2495  0134                     _RF_Count:	
  2496  0134                     	ds	2
  2497  0136                     _WDT:	
  2498  0136                     	ds	2
  2499  0138                     _DimmerIntr:	
  2500  0138                     	ds	1
  2501  0139                     _Light:	
  2502  0139                     	ds	1
  2503  013A                     _RSSI:	
  2504  013A                     	ds	1
  2505  013B                     _Rx_Length:	
  2506  013B                     	ds	1
  2507  013C                     _SwDetect:	
  2508  013C                     	ds	1
  2509  013D                     _r_address:	
  2510  013D                     	ds	1
  2511  013E                     _r_data:	
  2512  013E                     	ds	1
  2513  013F                     _Load:	
  2514  013F                     	ds	40
  2515  0167                     _DimmerLights1:	
  2516  0167                     	ds	8
  2517                           
  2518                           	psect	bssBANK3
  2519  01A0                     __pbssBANK3:	
  2520  01A0                     _RF_Data:	
  2521  01A0                     	ds	30
  2522  01BE                     _Sw1:	
  2523  01BE                     	ds	9
  2524  01C7                     _Sw2:	
  2525  01C7                     	ds	9
  2526  01D0                     _DimmerLights2:	
  2527  01D0                     	ds	8
  2528  01D8                     _DlySw1:	
  2529  01D8                     	ds	5
  2530  01DD                     _DlySw2:	
  2531  01DD                     	ds	5
  2532  01E2                     _VarErrLED:	
  2533  01E2                     	ds	4
  2534  01E6                     _VarLED1:	
  2535  01E6                     	ds	4
  2536  01EA                     _VarLED2:	
  2537  01EA                     	ds	4
  2538                           
  2539                           	psect	bssBANK4
  2540  0220                     __pbssBANK4:	
  2541  0220                     _Memory:	
  2542  0220                     	ds	37
  2543                           
  2544                           	psect	dataBANK4
  2545  0245                     __pdataBANK4:	
  2546  0245                     __product:	
  2547  0245                     	ds	32
  2548                           
  2549                           	psect	clrtext
  2550  18F2                     clear_ram0:	
  2551                           ;	Called with FSR0 containing the base address, and
  2552                           ;	WREG with the size to clear
  2553                           
  2554  18F2  0064               	clrwdt	;clear the watchdog before getting into this loop
  2555  18F3                     clrloop0:	
  2556  18F3  0180               	clrf	0	;clear RAM location pointed to by FSR
  2557  18F4  3101               	addfsr 0,1
  2558  18F5  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  2559  18F6  28F3               	goto	clrloop0	;have we reached the end yet?
  2560  18F7  3400               	retlw	0	;all done for this memory range, return
  2561                           
  2562                           	psect	inittext
  2563  18EC                     init_ram:	
  2564  18EC  00FE               	movwf	126
  2565  18ED                     initloop:	
  2566  18ED  0012               	moviw fsr0++
  2567  18EE  001E               	movwi fsr1++
  2568  18EF  0BFE               	decfsz	126,f
  2569  18F0  28ED               	goto	initloop
  2570  18F1  3400               	retlw	0
  2571                           
  2572                           	psect	cstackBANK1
  2573  00E6                     __pcstackBANK1:	
  2574  00E6                     ??_getRxData:	
  2575  00E6                     setDimmerLights_OnOff@lights:	
  2576                           ; 0 bytes @ 0x0
  2577                           
  2578                           
  2579                           ; 1 bytes @ 0x0
  2580  00E6                     	ds	1
  2581  00E7                     setDimmerLights_Main@lights:	
  2582  00E7                     getRxData@error:	
  2583                           ; 1 bytes @ 0x1
  2584                           
  2585                           
  2586                           ; 1 bytes @ 0x1
  2587  00E7                     	ds	1
  2588  00E8                     ??_setRF_Main:	
  2589                           
  2590                           ; 0 bytes @ 0x2
  2591  00E8                     	ds	1
  2592  00E9                     setRF_Main@error:	
  2593                           
  2594                           ; 1 bytes @ 0x3
  2595  00E9                     	ds	1
  2596  00EA                     ?_main:	
  2597  00EA                     main@argc:	
  2598                           ; 2 bytes @ 0x4
  2599                           
  2600                           
  2601                           ; 2 bytes @ 0x4
  2602  00EA                     	ds	2
  2603  00EC                     main@argv:	
  2604                           
  2605                           ; 2 bytes @ 0x6
  2606  00EC                     	ds	2
  2607                           
  2608                           	psect	cstackCOMMON
  2609  0070                     __pcstackCOMMON:	
  2610  0070                     ?_CC2500_WriteCommand:	
  2611  0070                     ?_RF_Timeout_Counter:	
  2612                           ; 0 bytes @ 0x0
  2613                           
  2614  0070                     ?_setRF_TimeoutCleared:	
  2615                           ; 0 bytes @ 0x0
  2616                           
  2617  0070                     ?_CC2500_WriteByte:	
  2618                           ; 0 bytes @ 0x0
  2619                           
  2620  0070                     ?_CC2500_ReadStatus:	
  2621                           ; 0 bytes @ 0x0
  2622                           
  2623  0070                     ?_CC2500_ReadByte:	
  2624                           ; 0 bytes @ 0x0
  2625                           
  2626  0070                     ?_CC2500_PowerRST:	
  2627                           ; 0 bytes @ 0x0
  2628                           
  2629  0070                     ?_CC2500_InitSetREG:	
  2630                           ; 0 bytes @ 0x0
  2631                           
  2632  0070                     ?_CC2500_InitPATable:	
  2633                           ; 0 bytes @ 0x0
  2634                           
  2635  0070                     ?_CC2500_ClearTXFIFO:	
  2636                           ; 0 bytes @ 0x0
  2637                           
  2638  0070                     ?_CC2500_ClearRXFIFO:	
  2639                           ; 0 bytes @ 0x0
  2640                           
  2641  0070                     ?_CC2500_FrequencyCabr:	
  2642                           ; 0 bytes @ 0x0
  2643                           
  2644  0070                     ?_CC2500_SIDLEMode:	
  2645                           ; 0 bytes @ 0x0
  2646                           
  2647  0070                     ?_DlyOff_Initialization:	
  2648                           ; 0 bytes @ 0x0
  2649                           
  2650  0070                     ?_DlyOff_Main:	
  2651                           ; 0 bytes @ 0x0
  2652                           
  2653  0070                     ?_setDimmerLights_SwOn:	
  2654                           ; 0 bytes @ 0x0
  2655                           
  2656  0070                     ?_setDimmerLights_SwOff:	
  2657                           ; 0 bytes @ 0x0
  2658                           
  2659  0070                     ?_setMemory_Modify:	
  2660                           ; 0 bytes @ 0x0
  2661                           
  2662  0070                     ?_setDimmerLights_Initialization:	
  2663                           ; 0 bytes @ 0x0
  2664                           
  2665  0070                     ?_setDimmerLights_Main:	
  2666                           ; 0 bytes @ 0x0
  2667                           
  2668  0070                     ?_setDimmerLights_Line:	
  2669                           ; 0 bytes @ 0x0
  2670                           
  2671  0070                     ?_setTxData:	
  2672                           ; 0 bytes @ 0x0
  2673                           
  2674  0070                     ?_setRF_TransceiveGO:	
  2675                           ; 0 bytes @ 0x0
  2676                           
  2677  0070                     ?_setLED_Initialization:	
  2678                           ; 0 bytes @ 0x0
  2679                           
  2680  0070                     ?_setLED_Main:	
  2681                           ; 0 bytes @ 0x0
  2682                           
  2683  0070                     ?_Fosc_Set:	
  2684                           ; 0 bytes @ 0x0
  2685                           
  2686  0070                     ?_IO_Set:	
  2687                           ; 0 bytes @ 0x0
  2688                           
  2689  0070                     ?_TMR1_Set:	
  2690                           ; 0 bytes @ 0x0
  2691                           
  2692  0070                     ?_ADC_Set:	
  2693                           ; 0 bytes @ 0x0
  2694                           
  2695  0070                     ?_IOC_Set:	
  2696                           ; 0 bytes @ 0x0
  2697                           
  2698  0070                     ?_WDT_Set:	
  2699                           ; 0 bytes @ 0x0
  2700                           
  2701  0070                     ?_TMR1_ISR:	
  2702                           ; 0 bytes @ 0x0
  2703                           
  2704  0070                     ?_IOC_ISR:	
  2705                           ; 0 bytes @ 0x0
  2706                           
  2707  0070                     ?_Timeout_Counter:	
  2708                           ; 0 bytes @ 0x0
  2709                           
  2710  0070                     ?_set_TimeoutCleared:	
  2711                           ; 0 bytes @ 0x0
  2712                           
  2713  0070                     ?_Flash_Memory_Write:	
  2714                           ; 0 bytes @ 0x0
  2715                           
  2716  0070                     ?_Flash_Memory_Modify:	
  2717                           ; 0 bytes @ 0x0
  2718                           
  2719  0070                     ?_WDT_Clearing:	
  2720                           ; 0 bytes @ 0x0
  2721                           
  2722  0070                     ?_setLoad_AH_AL_Restore:	
  2723                           ; 0 bytes @ 0x0
  2724                           
  2725  0070                     ?_setTemp_Initialization:	
  2726                           ; 0 bytes @ 0x0
  2727                           
  2728  0070                     ?_setTemp_Main:	
  2729                           ; 0 bytes @ 0x0
  2730                           
  2731  0070                     ?_setRF_Initialization:	
  2732                           ; 0 bytes @ 0x0
  2733                           
  2734  0070                     ?_setRF_Main:	
  2735                           ; 0 bytes @ 0x0
  2736                           
  2737  0070                     ?_RF_RxDisable:	
  2738                           ; 0 bytes @ 0x0
  2739                           
  2740  0070                     ?_getRxData:	
  2741                           ; 0 bytes @ 0x0
  2742                           
  2743  0070                     ?_setLog_Code:	
  2744                           ; 0 bytes @ 0x0
  2745                           
  2746  0070                     ?_setControl_Lights_Table:	
  2747                           ; 0 bytes @ 0x0
  2748                           
  2749  0070                     ?_setRFSW_Control:	
  2750                           ; 0 bytes @ 0x0
  2751                           
  2752  0070                     ?_setRFSW_AdjControl:	
  2753                           ; 0 bytes @ 0x0
  2754                           
  2755  0070                     ?_setSw_Initialization:	
  2756                           ; 0 bytes @ 0x0
  2757                           
  2758  0070                     ?_setSw_Main:	
  2759                           ; 0 bytes @ 0x0
  2760                           
  2761  0070                     ?_myMain_Initialization:	
  2762                           ; 0 bytes @ 0x0
  2763                           
  2764  0070                     ?_my_MainTimer:	
  2765                           ; 0 bytes @ 0x0
  2766                           
  2767  0070                     ?_Exception_Main:	
  2768                           ; 0 bytes @ 0x0
  2769                           
  2770  0070                     ?_Buzzer_Initialization:	
  2771                           ; 0 bytes @ 0x0
  2772                           
  2773  0070                     ?_Buzzer_Main:	
  2774                           ; 0 bytes @ 0x0
  2775                           
  2776  0070                     ?_CC2500_TxData:	
  2777                           ; 0 bytes @ 0x0
  2778                           
  2779  0070                     ?_CC2500_RxData:	
  2780                           ; 0 bytes @ 0x0
  2781                           
  2782  0070                     ?_CC2500_PowerOnInitial:	
  2783                           ; 0 bytes @ 0x0
  2784                           
  2785  0070                     ?_DelayOffPointSelect:	
  2786                           ; 0 bytes @ 0x0
  2787                           
  2788  0070                     ?_DelayOff_Initialization:	
  2789                           ; 0 bytes @ 0x0
  2790                           
  2791  0070                     ?_DelayOff_Main:	
  2792                           ; 0 bytes @ 0x0
  2793                           
  2794  0070                     ?_DimmerIntr_Initialization:	
  2795                           ; 0 bytes @ 0x0
  2796                           
  2797  0070                     ?_DimmerLights_SelectPointer:	
  2798                           ; 0 bytes @ 0x0
  2799                           
  2800  0070                     ?_DimmerLights_Initialization:	
  2801                           ; 0 bytes @ 0x0
  2802                           
  2803  0070                     ?_setDimmerLights_DimmingOn:	
  2804                           ; 0 bytes @ 0x0
  2805                           
  2806  0070                     ?_DimmerLights_Main:	
  2807                           ; 0 bytes @ 0x0
  2808                           
  2809  0070                     ?_DimmerLights_TMR_1:	
  2810                           ; 0 bytes @ 0x0
  2811                           
  2812  0070                     ??_DimmerLights_TMR_1:	
  2813                           ; 0 bytes @ 0x0
  2814                           
  2815  0070                     ?_DimmerLights_IOC_1:	
  2816                           ; 0 bytes @ 0x0
  2817                           
  2818  0070                     ?_DimmerLights_TMR_2:	
  2819                           ; 0 bytes @ 0x0
  2820                           
  2821  0070                     ??_DimmerLights_TMR_2:	
  2822                           ; 0 bytes @ 0x0
  2823                           
  2824  0070                     ?_DimmerLights_IOC_2:	
  2825                           ; 0 bytes @ 0x0
  2826                           
  2827  0070                     ?_LedPointSelect:	
  2828                           ; 0 bytes @ 0x0
  2829                           
  2830  0070                     ?_LED_Initialization:	
  2831                           ; 0 bytes @ 0x0
  2832                           
  2833  0070                     ?_LED_Main:	
  2834                           ; 0 bytes @ 0x0
  2835                           
  2836  0070                     ?_Mcu_Initialization:	
  2837                           ; 0 bytes @ 0x0
  2838                           
  2839  0070                     ?_ISR:	
  2840                           ; 0 bytes @ 0x0
  2841                           
  2842  0070                     ?_Flash_Memory_Initialization:	
  2843                           ; 0 bytes @ 0x0
  2844                           
  2845  0070                     ?_Flash_Memory_Main:	
  2846                           ; 0 bytes @ 0x0
  2847                           
  2848  0070                     ?_Flash_Memory_Unlock:	
  2849                           ; 0 bytes @ 0x0
  2850                           
  2851  0070                     ?_Flash_Memory_Erasing:	
  2852                           ; 0 bytes @ 0x0
  2853                           
  2854  0070                     ?_setMemory_LoopSave:	
  2855                           ; 0 bytes @ 0x0
  2856                           
  2857  0070                     ?_WDT_Main:	
  2858                           ; 0 bytes @ 0x0
  2859                           
  2860  0070                     ?_Load_Initialization:	
  2861                           ; 0 bytes @ 0x0
  2862                           
  2863  0070                     ?_getLoad_AD:	
  2864                           ; 0 bytes @ 0x0
  2865                           
  2866  0070                     ?_Load_Main:	
  2867                           ; 0 bytes @ 0x0
  2868                           
  2869  0070                     ?_Temp_Initialization:	
  2870                           ; 0 bytes @ 0x0
  2871                           
  2872  0070                     ?_getTemp_AD:	
  2873                           ; 0 bytes @ 0x0
  2874                           
  2875  0070                     ?_Temp_Main:	
  2876                           ; 0 bytes @ 0x0
  2877                           
  2878  0070                     ?_RF_Initialization:	
  2879                           ; 0 bytes @ 0x0
  2880                           
  2881  0070                     ?_RF_Main:	
  2882                           ; 0 bytes @ 0x0
  2883                           
  2884  0070                     ?_setRF_Learn:	
  2885                           ; 0 bytes @ 0x0
  2886                           
  2887  0070                     ?_TouchPower:	
  2888                           ; 0 bytes @ 0x0
  2889                           
  2890  0070                     ?_SwPointSelect:	
  2891                           ; 0 bytes @ 0x0
  2892                           
  2893  0070                     ?_Switch_Initialization:	
  2894                           ; 0 bytes @ 0x0
  2895                           
  2896  0070                     ?_Switch_Main:	
  2897                           ; 0 bytes @ 0x0
  2898                           
  2899  0070                     ?_getDimmerLights_Status:	
  2900                           ; 0 bytes @ 0x0
  2901                           
  2902  0070                     ?_getDimmerLights_ValueToPercent:	
  2903                           ; 1 bytes @ 0x0
  2904                           
  2905  0070                     ?_getDimmerLights_PercentToValue:	
  2906                           ; 1 bytes @ 0x0
  2907                           
  2908  0070                     ?_getLoad_OK:	
  2909                           ; 1 bytes @ 0x0
  2910                           
  2911  0070                     ?_getMain_All_Error_Status:	
  2912                           ; 1 bytes @ 0x0
  2913                           
  2914  0070                     ?_getMain_All_LightsStatus:	
  2915                           ; 1 bytes @ 0x0
  2916                           
  2917  0070                     ?_getDimmerLights_Allow_Condition:	
  2918                           ; 1 bytes @ 0x0
  2919                           
  2920  0070                     ?_getCmd_Status:	
  2921                           ; 1 bytes @ 0x0
  2922                           
  2923  0070                     ?_Flash_Memory_Read:	
  2924                           ; 1 bytes @ 0x0
  2925                           
  2926  0070                     ?_getAll_Sw_KeyStatus:	
  2927                           ; 1 bytes @ 0x0
  2928                           
  2929  0070                     ?_getMain_Lights_Count:	
  2930                           ; 1 bytes @ 0x0
  2931                           
  2932  0070                     ?_getRF_KeyStatus:	
  2933                           ; 1 bytes @ 0x0
  2934                           
  2935  0070                     ?_getSw_KeyStatus:	
  2936                           ; 1 bytes @ 0x0
  2937                           
  2938  0070                     ?_getDelayOff_GO:	
  2939                           ; 1 bytes @ 0x0
  2940                           
  2941  0070                     ?_getDimmerIntr_DimmingValue:	
  2942                           ; 1 bytes @ 0x0
  2943                           
  2944  0070                     ?_getAll_DimmerIntr_Dimming_Sw_RF:	
  2945                           ; 1 bytes @ 0x0
  2946                           
  2947  0070                     ?_getDimmerLights_Line:	
  2948                           ; 1 bytes @ 0x0
  2949                           
  2950  0070                     ?_getDimmer_LoadGO:	
  2951                           ; 1 bytes @ 0x0
  2952                           
  2953  0070                     ?_getDimmer_Load_Status:	
  2954                           ; 1 bytes @ 0x0
  2955                           
  2956  0070                     ?___lbdiv:	
  2957                           ; 1 bytes @ 0x0
  2958                           
  2959  0070                     setDimmerLights_Initialization@lights:	
  2960                           ; 1 bytes @ 0x0
  2961                           
  2962  0070                     ___lbdiv@divisor:	
  2963                           ; 1 bytes @ 0x0
  2964                           
  2965                           
  2966                           ; 1 bytes @ 0x0
  2967  0070                     	ds	1
  2968  0071                     ??_TMR1_ISR:	
  2969  0071                     ??___lbdiv:	
  2970                           ; 0 bytes @ 0x1
  2971                           
  2972                           
  2973                           ; 0 bytes @ 0x1
  2974  0071                     	ds	1
  2975  0072                     ___lbdiv@dividend:	
  2976                           
  2977                           ; 1 bytes @ 0x2
  2978  0072                     	ds	1
  2979  0073                     ___lbdiv@counter:	
  2980                           
  2981                           ; 1 bytes @ 0x3
  2982  0073                     	ds	1
  2983  0074                     ___lbdiv@quotient:	
  2984                           
  2985                           ; 1 bytes @ 0x4
  2986  0074                     	ds	1
  2987  0075                     ?_Division:	
  2988  0075                     Division@num:	
  2989                           ; 1 bytes @ 0x5
  2990                           
  2991                           
  2992                           ; 1 bytes @ 0x5
  2993  0075                     	ds	1
  2994  0076                     ??_Division:	
  2995                           
  2996                           ; 0 bytes @ 0x6
  2997  0076                     	ds	2
  2998  0078                     Division@value:	
  2999                           
  3000                           ; 1 bytes @ 0x8
  3001  0078                     	ds	1
  3002  0079                     Division@result:	
  3003                           
  3004                           ; 1 bytes @ 0x9
  3005  0079                     	ds	1
  3006  007A                     ??_DimmerLights_IOC_1:	
  3007  007A                     ??_DimmerLights_IOC_2:	
  3008                           ; 0 bytes @ 0xA
  3009                           
  3010                           
  3011                           ; 0 bytes @ 0xA
  3012  007A                     	ds	2
  3013  007C                     ??_IOC_ISR:	
  3014  007C                     ??_ISR:	
  3015                           ; 0 bytes @ 0xC
  3016                           
  3017                           
  3018                           ; 0 bytes @ 0xC
  3019  007C                     	ds	1
  3020                           
  3021                           	psect	cstackBANK0
  3022  0020                     __pcstackBANK0:	
  3023  0020                     ??_RF_Timeout_Counter:	
  3024  0020                     ??_setRF_TimeoutCleared:	
  3025                           ; 0 bytes @ 0x0
  3026                           
  3027  0020                     ??_CC2500_WriteByte:	
  3028                           ; 0 bytes @ 0x0
  3029                           
  3030  0020                     ??_CC2500_ReadByte:	
  3031                           ; 0 bytes @ 0x0
  3032                           
  3033  0020                     ?_DelayTime_1us:	
  3034                           ; 0 bytes @ 0x0
  3035                           
  3036  0020                     ??_setMemory_Modify:	
  3037                           ; 0 bytes @ 0x0
  3038                           
  3039  0020                     ??_setDimmerLights_Initialization:	
  3040                           ; 0 bytes @ 0x0
  3041                           
  3042  0020                     ??_getLoad_OK:	
  3043                           ; 0 bytes @ 0x0
  3044                           
  3045  0020                     ??_getMain_All_Error_Status:	
  3046                           ; 0 bytes @ 0x0
  3047                           
  3048  0020                     ??_getMain_All_LightsStatus:	
  3049                           ; 0 bytes @ 0x0
  3050                           
  3051  0020                     ??_setDimmerLights_Line:	
  3052                           ; 0 bytes @ 0x0
  3053                           
  3054  0020                     ??_getCmd_Status:	
  3055                           ; 0 bytes @ 0x0
  3056                           
  3057  0020                     ?_setCmd_Status:	
  3058                           ; 0 bytes @ 0x0
  3059                           
  3060  0020                     ??_setTxData:	
  3061                           ; 0 bytes @ 0x0
  3062                           
  3063  0020                     ??_setRF_TransceiveGO:	
  3064                           ; 0 bytes @ 0x0
  3065                           
  3066  0020                     ??_Fosc_Set:	
  3067                           ; 0 bytes @ 0x0
  3068                           
  3069  0020                     ??_IO_Set:	
  3070                           ; 0 bytes @ 0x0
  3071                           
  3072  0020                     ??_TMR1_Set:	
  3073                           ; 0 bytes @ 0x0
  3074                           
  3075  0020                     ??_ADC_Set:	
  3076                           ; 0 bytes @ 0x0
  3077                           
  3078  0020                     ??_IOC_Set:	
  3079                           ; 0 bytes @ 0x0
  3080                           
  3081  0020                     ??_WDT_Set:	
  3082                           ; 0 bytes @ 0x0
  3083                           
  3084  0020                     ??_Timeout_Counter:	
  3085                           ; 0 bytes @ 0x0
  3086                           
  3087  0020                     ??_set_TimeoutCleared:	
  3088                           ; 0 bytes @ 0x0
  3089                           
  3090  0020                     ??_Flash_Memory_Read:	
  3091                           ; 0 bytes @ 0x0
  3092                           
  3093  0020                     ?_setMemory_Data:	
  3094                           ; 0 bytes @ 0x0
  3095                           
  3096  0020                     ??_Flash_Memory_Write:	
  3097                           ; 0 bytes @ 0x0
  3098                           
  3099  0020                     ??_getAll_Sw_KeyStatus:	
  3100                           ; 0 bytes @ 0x0
  3101                           
  3102  0020                     ??_WDT_Clearing:	
  3103                           ; 0 bytes @ 0x0
  3104                           
  3105  0020                     ??_setLoad_AH_AL_Restore:	
  3106                           ; 0 bytes @ 0x0
  3107                           
  3108  0020                     ??_getMain_Lights_Count:	
  3109                           ; 0 bytes @ 0x0
  3110                           
  3111  0020                     ??_setTemp_Initialization:	
  3112                           ; 0 bytes @ 0x0
  3113                           
  3114  0020                     ??_setRF_Initialization:	
  3115                           ; 0 bytes @ 0x0
  3116                           
  3117  0020                     ??_getRF_KeyStatus:	
  3118                           ; 0 bytes @ 0x0
  3119                           
  3120  0020                     ??_getSw_KeyStatus:	
  3121                           ; 0 bytes @ 0x0
  3122                           
  3123  0020                     ??_myMain_Initialization:	
  3124                           ; 0 bytes @ 0x0
  3125                           
  3126  0020                     ??_Buzzer_Initialization:	
  3127                           ; 0 bytes @ 0x0
  3128                           
  3129  0020                     ??_Buzzer_Main:	
  3130                           ; 0 bytes @ 0x0
  3131                           
  3132  0020                     ??_DelayOffPointSelect:	
  3133                           ; 0 bytes @ 0x0
  3134                           
  3135  0020                     ?_setDimmerIntr_ControlStatus:	
  3136                           ; 0 bytes @ 0x0
  3137                           
  3138  0020                     ??_getDimmerIntr_DimmingValue:	
  3139                           ; 0 bytes @ 0x0
  3140                           
  3141  0020                     ?_setDimmerIntr_Dimming_Sw:	
  3142                           ; 0 bytes @ 0x0
  3143                           
  3144  0020                     ?_setDimmerIntr_Dimming_RF:	
  3145                           ; 0 bytes @ 0x0
  3146                           
  3147  0020                     ??_getAll_DimmerIntr_Dimming_Sw_RF:	
  3148                           ; 0 bytes @ 0x0
  3149                           
  3150  0020                     ??_DimmerLights_SelectPointer:	
  3151                           ; 0 bytes @ 0x0
  3152                           
  3153  0020                     ??_getDimmerLights_Line:	
  3154                           ; 0 bytes @ 0x0
  3155                           
  3156  0020                     ??_getDimmer_LoadGO:	
  3157                           ; 0 bytes @ 0x0
  3158                           
  3159  0020                     ??_getDimmer_Load_Status:	
  3160                           ; 0 bytes @ 0x0
  3161                           
  3162  0020                     ??_LedPointSelect:	
  3163                           ; 0 bytes @ 0x0
  3164                           
  3165  0020                     ??_Flash_Memory_Unlock:	
  3166                           ; 0 bytes @ 0x0
  3167                           
  3168  0020                     ??_Flash_Memory_Erasing:	
  3169                           ; 0 bytes @ 0x0
  3170                           
  3171  0020                     ??_setMemory_LoopSave:	
  3172                           ; 0 bytes @ 0x0
  3173                           
  3174  0020                     ??_WDT_Main:	
  3175                           ; 0 bytes @ 0x0
  3176                           
  3177  0020                     ??_Temp_Initialization:	
  3178                           ; 0 bytes @ 0x0
  3179                           
  3180  0020                     ??_setRF_Learn:	
  3181                           ; 0 bytes @ 0x0
  3182                           
  3183  0020                     ??_TouchPower:	
  3184                           ; 0 bytes @ 0x0
  3185                           
  3186  0020                     ??_SwPointSelect:	
  3187                           ; 0 bytes @ 0x0
  3188                           
  3189  0020                     ?___bmul:	
  3190                           ; 0 bytes @ 0x0
  3191                           
  3192  0020                     ?_getBuz_GO:	
  3193                           ; 1 bytes @ 0x0
  3194                           
  3195  0020                     ?_getAD:	
  3196                           ; 2 bytes @ 0x0
  3197                           
  3198  0020                     ?___wmul:	
  3199                           ; 2 bytes @ 0x0
  3200                           
  3201  0020                     ?___awdiv:	
  3202                           ; 2 bytes @ 0x0
  3203                           
  3204  0020                     ?___lwdiv:	
  3205                           ; 2 bytes @ 0x0
  3206                           
  3207  0020                     ?___ftpack:	
  3208                           ; 2 bytes @ 0x0
  3209                           
  3210  0020                     setDimmerIntr_ControlStatus@command:	
  3211                           ; 3 bytes @ 0x0
  3212                           
  3213  0020                     setDimmerIntr_Dimming_Sw@command:	
  3214                           ; 1 bytes @ 0x0
  3215                           
  3216  0020                     setDimmerIntr_Dimming_RF@command:	
  3217                           ; 1 bytes @ 0x0
  3218                           
  3219  0020                     setDimmerLights_Line@lights:	
  3220                           ; 1 bytes @ 0x0
  3221                           
  3222  0020                     getDimmer_LoadGO@loadgo:	
  3223                           ; 1 bytes @ 0x0
  3224                           
  3225  0020                     getDimmer_Load_Status@status:	
  3226                           ; 1 bytes @ 0x0
  3227                           
  3228  0020                     getAD@adcon1:	
  3229                           ; 1 bytes @ 0x0
  3230                           
  3231  0020                     setMemory_Data@data:	
  3232                           ; 1 bytes @ 0x0
  3233                           
  3234  0020                     getLoad_OK@ok:	
  3235                           ; 1 bytes @ 0x0
  3236                           
  3237  0020                     getMain_All_LightsStatus@status:	
  3238                           ; 1 bytes @ 0x0
  3239                           
  3240  0020                     getMain_Lights_Count@count:	
  3241                           ; 1 bytes @ 0x0
  3242                           
  3243  0020                     setCmd_Status@cmd:	
  3244                           ; 1 bytes @ 0x0
  3245                           
  3246  0020                     getCmd_Status@number:	
  3247                           ; 1 bytes @ 0x0
  3248                           
  3249  0020                     ___bmul@multiplicand:	
  3250                           ; 1 bytes @ 0x0
  3251                           
  3252  0020                     DelayTime_1us@count:	
  3253                           ; 1 bytes @ 0x0
  3254                           
  3255  0020                     ___wmul@multiplier:	
  3256                           ; 2 bytes @ 0x0
  3257                           
  3258  0020                     ___awdiv@divisor:	
  3259                           ; 2 bytes @ 0x0
  3260                           
  3261  0020                     ___lwdiv@divisor:	
  3262                           ; 2 bytes @ 0x0
  3263                           
  3264  0020                     ___ftpack@arg:	
  3265                           ; 2 bytes @ 0x0
  3266                           
  3267                           
  3268                           ; 3 bytes @ 0x0
  3269  0020                     	ds	1
  3270  0021                     ??_getDimmerLights_Allow_Condition:	
  3271  0021                     ??_setCmd_Status:	
  3272                           ; 0 bytes @ 0x1
  3273                           
  3274  0021                     ??_setMemory_Data:	
  3275                           ; 0 bytes @ 0x1
  3276                           
  3277  0021                     ??_setDimmerIntr_ControlStatus:	
  3278                           ; 0 bytes @ 0x1
  3279                           
  3280  0021                     ??_setDimmerIntr_Dimming_Sw:	
  3281                           ; 0 bytes @ 0x1
  3282                           
  3283  0021                     ??_setDimmerIntr_Dimming_RF:	
  3284                           ; 0 bytes @ 0x1
  3285                           
  3286  0021                     ??_Mcu_Initialization:	
  3287                           ; 0 bytes @ 0x1
  3288                           
  3289  0021                     ??_RF_Initialization:	
  3290                           ; 0 bytes @ 0x1
  3291                           
  3292  0021                     ??___bmul:	
  3293                           ; 0 bytes @ 0x1
  3294                           
  3295  0021                     CC2500_WriteByte@loop_a:	
  3296                           ; 0 bytes @ 0x1
  3297                           
  3298  0021                     CC2500_ReadByte@loop_b:	
  3299                           ; 1 bytes @ 0x1
  3300                           
  3301  0021                     DelayOffPointSelect@sw:	
  3302                           ; 1 bytes @ 0x1
  3303                           
  3304  0021                     getDimmerIntr_DimmingValue@value:	
  3305                           ; 1 bytes @ 0x1
  3306                           
  3307  0021                     _getAll_DimmerIntr_Dimming_Sw_RF$2293:	
  3308                           ; 1 bytes @ 0x1
  3309                           
  3310  0021                     DimmerLights_SelectPointer@lights:	
  3311                           ; 1 bytes @ 0x1
  3312                           
  3313  0021                     getDimmerLights_Line@line:	
  3314                           ; 1 bytes @ 0x1
  3315                           
  3316  0021                     LedPointSelect@led:	
  3317                           ; 1 bytes @ 0x1
  3318                           
  3319  0021                     Flash_Memory_Read@i:	
  3320                           ; 1 bytes @ 0x1
  3321                           
  3322  0021                     Flash_Memory_Write@i:	
  3323                           ; 1 bytes @ 0x1
  3324                           
  3325  0021                     setMemory_Modify@command:	
  3326                           ; 1 bytes @ 0x1
  3327                           
  3328  0021                     setMemory_LoopSave@command:	
  3329                           ; 1 bytes @ 0x1
  3330                           
  3331  0021                     setLoad_AH_AL_Restore@i:	
  3332                           ; 1 bytes @ 0x1
  3333                           
  3334  0021                     setRF_Learn@command:	
  3335                           ; 1 bytes @ 0x1
  3336                           
  3337  0021                     getRF_KeyStatus@key:	
  3338                           ; 1 bytes @ 0x1
  3339                           
  3340  0021                     setRF_TransceiveGO@command:	
  3341                           ; 1 bytes @ 0x1
  3342                           
  3343  0021                     SwPointSelect@sw:	
  3344                           ; 1 bytes @ 0x1
  3345                           
  3346  0021                     _getSw_KeyStatus$6166:	
  3347                           ; 1 bytes @ 0x1
  3348                           
  3349  0021                     getAll_Sw_KeyStatus@status:	
  3350                           ; 1 bytes @ 0x1
  3351                           
  3352  0021                     getMain_Lights_Count@status1:	
  3353                           ; 1 bytes @ 0x1
  3354                           
  3355  0021                     getCmd_Status@cmd:	
  3356                           ; 1 bytes @ 0x1
  3357                           
  3358  0021                     _getMain_All_Error_Status$6910:	
  3359                           ; 1 bytes @ 0x1
  3360                           
  3361                           
  3362                           ; 2 bytes @ 0x1
  3363  0021                     	ds	1
  3364  0022                     ??_CC2500_WriteCommand:	
  3365  0022                     ??_CC2500_ReadStatus:	
  3366                           ; 0 bytes @ 0x2
  3367                           
  3368  0022                     ??_DelayTime_1us:	
  3369                           ; 0 bytes @ 0x2
  3370                           
  3371  0022                     ?_CC2500_WriteREG:	
  3372                           ; 0 bytes @ 0x2
  3373                           
  3374  0022                     ??_DlyOff_Initialization:	
  3375                           ; 0 bytes @ 0x2
  3376                           
  3377  0022                     ??_getDimmerLights_Status:	
  3378                           ; 0 bytes @ 0x2
  3379                           
  3380  0022                     ??_setDimmerLights_SwOff:	
  3381                           ; 0 bytes @ 0x2
  3382                           
  3383  0022                     ?_setLED:	
  3384                           ; 0 bytes @ 0x2
  3385                           
  3386  0022                     ??_setLED_Main:	
  3387                           ; 0 bytes @ 0x2
  3388                           
  3389  0022                     ??_getBuz_GO:	
  3390                           ; 0 bytes @ 0x2
  3391                           
  3392  0022                     ??_getDelayOff_GO:	
  3393                           ; 0 bytes @ 0x2
  3394                           
  3395  0022                     ??_setDimmerLights_DimmingOn:	
  3396                           ; 0 bytes @ 0x2
  3397                           
  3398  0022                     ?_setDimmerLights_DimmingRun:	
  3399                           ; 0 bytes @ 0x2
  3400                           
  3401  0022                     ??_Load_Initialization:	
  3402                           ; 0 bytes @ 0x2
  3403                           
  3404  0022                     CC2500_WriteREG@value:	
  3405                           ; 0 bytes @ 0x2
  3406                           
  3407  0022                     DlyOff_Initialization@sw:	
  3408                           ; 1 bytes @ 0x2
  3409                           
  3410  0022                     getDelayOff_GO@sw:	
  3411                           ; 1 bytes @ 0x2
  3412                           
  3413  0022                     setDimmerIntr_ControlStatus@lights:	
  3414                           ; 1 bytes @ 0x2
  3415                           
  3416  0022                     getDimmerIntr_DimmingValue@lights:	
  3417                           ; 1 bytes @ 0x2
  3418                           
  3419  0022                     setDimmerIntr_Dimming_Sw@lights:	
  3420                           ; 1 bytes @ 0x2
  3421                           
  3422  0022                     setDimmerIntr_Dimming_RF@lights:	
  3423                           ; 1 bytes @ 0x2
  3424                           
  3425  0022                     _getAll_DimmerIntr_Dimming_Sw_RF$2294:	
  3426                           ; 1 bytes @ 0x2
  3427                           
  3428  0022                     setDimmerLights_SwOff@sw:	
  3429                           ; 1 bytes @ 0x2
  3430                           
  3431  0022                     setDimmerLights_DimmingOn@sw:	
  3432                           ; 1 bytes @ 0x2
  3433                           
  3434  0022                     _getDimmerLights_Allow_Condition$2416:	
  3435                           ; 1 bytes @ 0x2
  3436                           
  3437  0022                     getDimmerLights_Status@lights:	
  3438                           ; 1 bytes @ 0x2
  3439                           
  3440  0022                     setDimmerLights_DimmingRun@command:	
  3441                           ; 1 bytes @ 0x2
  3442                           
  3443  0022                     setLED@command:	
  3444                           ; 1 bytes @ 0x2
  3445                           
  3446  0022                     Flash_Memory_Read@address:	
  3447                           ; 1 bytes @ 0x2
  3448                           
  3449  0022                     setMemory_Data@address:	
  3450                           ; 1 bytes @ 0x2
  3451                           
  3452  0022                     _getRF_KeyStatus$5110:	
  3453                           ; 1 bytes @ 0x2
  3454                           
  3455  0022                     _getSw_KeyStatus$6167:	
  3456                           ; 1 bytes @ 0x2
  3457                           
  3458  0022                     _getAll_Sw_KeyStatus$6170:	
  3459                           ; 1 bytes @ 0x2
  3460                           
  3461  0022                     getMain_Lights_Count@status2:	
  3462                           ; 1 bytes @ 0x2
  3463                           
  3464  0022                     setCmd_Status@number:	
  3465                           ; 1 bytes @ 0x2
  3466                           
  3467  0022                     ___bmul@product:	
  3468                           ; 1 bytes @ 0x2
  3469                           
  3470  0022                     DelayTime_1us@i:	
  3471                           ; 1 bytes @ 0x2
  3472                           
  3473  0022                     ___wmul@multiplicand:	
  3474                           ; 2 bytes @ 0x2
  3475                           
  3476  0022                     ___awdiv@dividend:	
  3477                           ; 2 bytes @ 0x2
  3478                           
  3479  0022                     ___lwdiv@dividend:	
  3480                           ; 2 bytes @ 0x2
  3481                           
  3482                           
  3483                           ; 2 bytes @ 0x2
  3484  0022                     	ds	1
  3485  0023                     ??_CC2500_WriteREG:	
  3486  0023                     ??_setLED:	
  3487                           ; 0 bytes @ 0x3
  3488                           
  3489  0023                     ??_DelayOff_Initialization:	
  3490                           ; 0 bytes @ 0x3
  3491                           
  3492  0023                     ??_setDimmerLights_DimmingRun:	
  3493                           ; 0 bytes @ 0x3
  3494                           
  3495  0023                     ??_getAD:	
  3496                           ; 0 bytes @ 0x3
  3497                           
  3498  0023                     CC2500_WriteCommand@command:	
  3499                           ; 0 bytes @ 0x3
  3500                           
  3501  0023                     CC2500_ReadStatus@status_addr:	
  3502                           ; 1 bytes @ 0x3
  3503                           
  3504  0023                     getDelayOff_GO@go:	
  3505                           ; 1 bytes @ 0x3
  3506                           
  3507  0023                     getAll_DimmerIntr_Dimming_Sw_RF@status:	
  3508                           ; 1 bytes @ 0x3
  3509                           
  3510  0023                     _getDimmerLights_Allow_Condition$2417:	
  3511                           ; 1 bytes @ 0x3
  3512                           
  3513  0023                     getDimmerLights_Status@status:	
  3514                           ; 1 bytes @ 0x3
  3515                           
  3516  0023                     setLED@led:	
  3517                           ; 1 bytes @ 0x3
  3518                           
  3519  0023                     getAD@adcon0:	
  3520                           ; 1 bytes @ 0x3
  3521                           
  3522  0023                     Flash_Memory_Read@ret:	
  3523                           ; 1 bytes @ 0x3
  3524                           
  3525  0023                     getSw_KeyStatus@status:	
  3526                           ; 1 bytes @ 0x3
  3527                           
  3528  0023                     ___bmul@multiplier:	
  3529                           ; 1 bytes @ 0x3
  3530                           
  3531  0023                     ___ftpack@exp:	
  3532                           ; 1 bytes @ 0x3
  3533                           
  3534  0023                     _getMain_All_Error_Status$6911:	
  3535                           ; 1 bytes @ 0x3
  3536                           
  3537                           
  3538                           ; 2 bytes @ 0x3
  3539  0023                     	ds	1
  3540  0024                     ??_CC2500_ClearTXFIFO:	
  3541  0024                     ??_CC2500_ClearRXFIFO:	
  3542                           ; 0 bytes @ 0x4
  3543                           
  3544  0024                     ??_CC2500_SIDLEMode:	
  3545                           ; 0 bytes @ 0x4
  3546                           
  3547  0024                     ??_setLED_Initialization:	
  3548                           ; 0 bytes @ 0x4
  3549                           
  3550  0024                     ??_Flash_Memory_Modify:	
  3551                           ; 0 bytes @ 0x4
  3552                           
  3553  0024                     ??_RF_RxDisable:	
  3554                           ; 0 bytes @ 0x4
  3555                           
  3556  0024                     ??_setSw_Initialization:	
  3557                           ; 0 bytes @ 0x4
  3558                           
  3559  0024                     ??_CC2500_TxData:	
  3560                           ; 0 bytes @ 0x4
  3561                           
  3562  0024                     ??_CC2500_RxData:	
  3563                           ; 0 bytes @ 0x4
  3564                           
  3565  0024                     ??_Flash_Memory_Initialization:	
  3566                           ; 0 bytes @ 0x4
  3567                           
  3568  0024                     ??_getLoad_AD:	
  3569                           ; 0 bytes @ 0x4
  3570                           
  3571  0024                     ??_getTemp_AD:	
  3572                           ; 0 bytes @ 0x4
  3573                           
  3574  0024                     ??___wmul:	
  3575                           ; 0 bytes @ 0x4
  3576                           
  3577  0024                     ??___awdiv:	
  3578                           ; 0 bytes @ 0x4
  3579                           
  3580  0024                     ??___lwdiv:	
  3581                           ; 0 bytes @ 0x4
  3582                           
  3583  0024                     CC2500_WriteREG@w_addr:	
  3584                           ; 0 bytes @ 0x4
  3585                           
  3586  0024                     _getDimmerLights_Allow_Condition$2418:	
  3587                           ; 1 bytes @ 0x4
  3588                           
  3589  0024                     setDimmerLights_DimmingRun@lights:	
  3590                           ; 1 bytes @ 0x4
  3591                           
  3592  0024                     setLED_Initialization@led:	
  3593                           ; 1 bytes @ 0x4
  3594                           
  3595  0024                     setLED_Main@led:	
  3596                           ; 1 bytes @ 0x4
  3597                           
  3598  0024                     setSw_Initialization@sw:	
  3599                           ; 1 bytes @ 0x4
  3600                           
  3601  0024                     getSw_KeyStatus@sw:	
  3602                           ; 1 bytes @ 0x4
  3603                           
  3604  0024                     ___ftpack@sign:	
  3605                           ; 1 bytes @ 0x4
  3606                           
  3607  0024                     getBuz_GO@i:	
  3608                           ; 1 bytes @ 0x4
  3609                           
  3610  0024                     DelayTime_1us@j:	
  3611                           ; 2 bytes @ 0x4
  3612                           
  3613  0024                     ___wmul@product:	
  3614                           ; 2 bytes @ 0x4
  3615                           
  3616                           
  3617                           ; 2 bytes @ 0x4
  3618  0024                     	ds	1
  3619  0025                     ??_CC2500_InitSetREG:	
  3620  0025                     ??_CC2500_InitPATable:	
  3621                           ; 0 bytes @ 0x5
  3622                           
  3623  0025                     ??___ftpack:	
  3624                           ; 0 bytes @ 0x5
  3625                           
  3626  0025                     ??_LED_Initialization:	
  3627                           ; 0 bytes @ 0x5
  3628                           
  3629  0025                     ??_LED_Main:	
  3630                           ; 0 bytes @ 0x5
  3631                           
  3632  0025                     ??_Switch_Initialization:	
  3633                           ; 0 bytes @ 0x5
  3634                           
  3635  0025                     CC2500_TxData@loop_e:	
  3636                           ; 0 bytes @ 0x5
  3637                           
  3638  0025                     CC2500_RxData@loop_f:	
  3639                           ; 1 bytes @ 0x5
  3640                           
  3641  0025                     getDimmerLights_Allow_Condition@lights:	
  3642                           ; 1 bytes @ 0x5
  3643                           
  3644  0025                     Flash_Memory_Initialization@value:	
  3645                           ; 1 bytes @ 0x5
  3646                           
  3647  0025                     Flash_Memory_Modify@i:	
  3648                           ; 1 bytes @ 0x5
  3649                           
  3650  0025                     getTemp_AD@channel:	
  3651                           ; 1 bytes @ 0x5
  3652                           
  3653  0025                     getMain_All_Error_Status@command:	
  3654                           ; 1 bytes @ 0x5
  3655                           
  3656  0025                     ___awdiv@counter:	
  3657                           ; 1 bytes @ 0x5
  3658                           
  3659  0025                     ___lwdiv@quotient:	
  3660                           ; 1 bytes @ 0x5
  3661                           
  3662                           
  3663                           ; 2 bytes @ 0x5
  3664  0025                     	ds	1
  3665  0026                     ??_CC2500_PowerRST:	
  3666  0026                     ??_CC2500_FrequencyCabr:	
  3667                           ; 0 bytes @ 0x6
  3668                           
  3669  0026                     ??_Flash_Memory_Main:	
  3670                           ; 0 bytes @ 0x6
  3671                           
  3672  0026                     CC2500_InitSetREG@temp1:	
  3673                           ; 0 bytes @ 0x6
  3674                           
  3675  0026                     CC2500_InitPATable@temp:	
  3676                           ; 1 bytes @ 0x6
  3677                           
  3678  0026                     getDimmerLights_Allow_Condition@allow:	
  3679                           ; 1 bytes @ 0x6
  3680                           
  3681  0026                     getLoad_AD@channel:	
  3682                           ; 1 bytes @ 0x6
  3683                           
  3684  0026                     getMain_All_Error_Status@status:	
  3685                           ; 1 bytes @ 0x6
  3686                           
  3687  0026                     ___awdiv@sign:	
  3688                           ; 1 bytes @ 0x6
  3689                           
  3690  0026                     getTemp_AD@ADRES:	
  3691                           ; 1 bytes @ 0x6
  3692                           
  3693                           
  3694                           ; 2 bytes @ 0x6
  3695  0026                     	ds	1
  3696  0027                     CC2500_InitSetREG@temp2:	
  3697  0027                     CC2500_InitPATable@loop_d:	
  3698                           ; 1 bytes @ 0x7
  3699                           
  3700  0027                     Flash_Memory_Main@key_Status:	
  3701                           ; 1 bytes @ 0x7
  3702                           
  3703  0027                     getLoad_AD@k:	
  3704                           ; 1 bytes @ 0x7
  3705                           
  3706  0027                     ___lwdiv@counter:	
  3707                           ; 1 bytes @ 0x7
  3708                           
  3709  0027                     ___awdiv@quotient:	
  3710                           ; 1 bytes @ 0x7
  3711                           
  3712                           
  3713                           ; 2 bytes @ 0x7
  3714  0027                     	ds	1
  3715  0028                     ??_Load_Main:	
  3716  0028                     ?___awtoft:	
  3717                           ; 0 bytes @ 0x8
  3718                           
  3719  0028                     CC2500_InitSetREG@loop_c:	
  3720                           ; 3 bytes @ 0x8
  3721                           
  3722  0028                     _Flash_Memory_Main$3307:	
  3723                           ; 1 bytes @ 0x8
  3724                           
  3725  0028                     getLoad_AD@j:	
  3726                           ; 1 bytes @ 0x8
  3727                           
  3728  0028                     ___awtoft@c:	
  3729                           ; 1 bytes @ 0x8
  3730                           
  3731                           
  3732                           ; 2 bytes @ 0x8
  3733  0028                     	ds	1
  3734  0029                     ?_setBuz:	
  3735  0029                     ??_CC2500_PowerOnInitial:	
  3736                           ; 0 bytes @ 0x9
  3737                           
  3738  0029                     setBuz@time:	
  3739                           ; 0 bytes @ 0x9
  3740                           
  3741  0029                     getLoad_AD@ADRES:	
  3742                           ; 2 bytes @ 0x9
  3743                           
  3744                           
  3745                           ; 2 bytes @ 0x9
  3746  0029                     	ds	1
  3747  002A                     _Load_Main$3687:	
  3748                           
  3749                           ; 2 bytes @ 0xA
  3750  002A                     	ds	1
  3751  002B                     ??_setBuz:	
  3752  002B                     ??___awtoft:	
  3753                           ; 0 bytes @ 0xB
  3754                           
  3755  002B                     getLoad_AD@i:	
  3756                           ; 0 bytes @ 0xB
  3757                           
  3758                           
  3759                           ; 1 bytes @ 0xB
  3760  002B                     	ds	1
  3761  002C                     setBuz@count:	
  3762  002C                     Load_Main@error:	
  3763                           ; 1 bytes @ 0xC
  3764                           
  3765                           
  3766                           ; 1 bytes @ 0xC
  3767  002C                     	ds	1
  3768  002D                     ??_setDimmerLights_SwOn:	
  3769  002D                     ??_my_MainTimer:	
  3770                           ; 0 bytes @ 0xD
  3771                           
  3772  002D                     ??_Exception_Main:	
  3773                           ; 0 bytes @ 0xD
  3774                           
  3775  002D                     Load_Main@ErrorCountValue:	
  3776                           ; 0 bytes @ 0xD
  3777                           
  3778  002D                     ___awtoft@sign:	
  3779                           ; 1 bytes @ 0xD
  3780                           
  3781                           
  3782                           ; 1 bytes @ 0xD
  3783  002D                     	ds	1
  3784  002E                     ?___ftdiv:	
  3785  002E                     ?___ftmul:	
  3786                           ; 3 bytes @ 0xE
  3787                           
  3788  002E                     _setDimmerLights_SwOn$2339:	
  3789                           ; 3 bytes @ 0xE
  3790                           
  3791  002E                     Load_Main@Load_RunStatus:	
  3792                           ; 1 bytes @ 0xE
  3793                           
  3794  002E                     Exception_Main@status:	
  3795                           ; 1 bytes @ 0xE
  3796                           
  3797  002E                     ___ftdiv@f2:	
  3798                           ; 1 bytes @ 0xE
  3799                           
  3800  002E                     ___ftmul@f1:	
  3801                           ; 3 bytes @ 0xE
  3802                           
  3803                           
  3804                           ; 3 bytes @ 0xE
  3805  002E                     	ds	1
  3806  002F                     _setDimmerLights_SwOn$2348:	
  3807  002F                     Load_Main@LightsCount:	
  3808                           ; 1 bytes @ 0xF
  3809                           
  3810  002F                     Exception_Main@count:	
  3811                           ; 1 bytes @ 0xF
  3812                           
  3813                           
  3814                           ; 1 bytes @ 0xF
  3815  002F                     	ds	1
  3816  0030                     setDimmerLights_SwOn@idle:	
  3817  0030                     Load_Main@i:	
  3818                           ; 1 bytes @ 0x10
  3819                           
  3820  0030                     Exception_Main@i:	
  3821                           ; 2 bytes @ 0x10
  3822                           
  3823                           
  3824                           ; 2 bytes @ 0x10
  3825  0030                     	ds	1
  3826  0031                     setDimmerLights_SwOn@sw:	
  3827  0031                     ___ftdiv@f1:	
  3828                           ; 1 bytes @ 0x11
  3829                           
  3830  0031                     ___ftmul@f2:	
  3831                           ; 3 bytes @ 0x11
  3832                           
  3833                           
  3834                           ; 3 bytes @ 0x11
  3835  0031                     	ds	1
  3836  0032                     ??_setSw_Main:	
  3837  0032                     Exception_Main@i_6923:	
  3838                           ; 0 bytes @ 0x12
  3839                           
  3840                           
  3841                           ; 2 bytes @ 0x12
  3842  0032                     	ds	2
  3843  0034                     ??___ftdiv:	
  3844  0034                     ??___ftmul:	
  3845                           ; 0 bytes @ 0x14
  3846                           
  3847  0034                     setSw_Main@sw:	
  3848                           ; 0 bytes @ 0x14
  3849                           
  3850  0034                     Exception_Main@error:	
  3851                           ; 1 bytes @ 0x14
  3852                           
  3853                           
  3854                           ; 1 bytes @ 0x14
  3855  0034                     	ds	1
  3856  0035                     ??_Switch_Main:	
  3857  0035                     Exception_Main@lights:	
  3858                           ; 0 bytes @ 0x15
  3859                           
  3860                           
  3861                           ; 1 bytes @ 0x15
  3862  0035                     	ds	3
  3863  0038                     ___ftdiv@cntr:	
  3864  0038                     ___ftmul@exp:	
  3865                           ; 1 bytes @ 0x18
  3866                           
  3867                           
  3868                           ; 1 bytes @ 0x18
  3869  0038                     	ds	1
  3870  0039                     ___ftdiv@f3:	
  3871  0039                     ___ftmul@f3_as_product:	
  3872                           ; 3 bytes @ 0x19
  3873                           
  3874                           
  3875                           ; 3 bytes @ 0x19
  3876  0039                     	ds	3
  3877  003C                     ___ftdiv@exp:	
  3878  003C                     ___ftmul@cntr:	
  3879                           ; 1 bytes @ 0x1C
  3880                           
  3881                           
  3882                           ; 1 bytes @ 0x1C
  3883  003C                     	ds	1
  3884  003D                     ___ftdiv@sign:	
  3885  003D                     ___ftmul@sign:	
  3886                           ; 1 bytes @ 0x1D
  3887                           
  3888                           
  3889                           ; 1 bytes @ 0x1D
  3890  003D                     	ds	1
  3891  003E                     ?___ftneg:	
  3892  003E                     ___ftneg@f1:	
  3893                           ; 3 bytes @ 0x1E
  3894                           
  3895                           
  3896                           ; 3 bytes @ 0x1E
  3897  003E                     	ds	3
  3898  0041                     ??___ftneg:	
  3899  0041                     ?___ftadd:	
  3900                           ; 0 bytes @ 0x21
  3901                           
  3902  0041                     ___ftadd@f1:	
  3903                           ; 3 bytes @ 0x21
  3904                           
  3905                           
  3906                           ; 3 bytes @ 0x21
  3907  0041                     	ds	3
  3908  0044                     ___ftadd@f2:	
  3909                           
  3910                           ; 3 bytes @ 0x24
  3911  0044                     	ds	3
  3912  0047                     ??___ftadd:	
  3913                           
  3914                           ; 0 bytes @ 0x27
  3915  0047                     	ds	4
  3916  004B                     ___ftadd@sign:	
  3917                           
  3918                           ; 1 bytes @ 0x2B
  3919  004B                     	ds	1
  3920  004C                     ___ftadd@exp2:	
  3921                           
  3922                           ; 1 bytes @ 0x2C
  3923  004C                     	ds	1
  3924  004D                     ___ftadd@exp1:	
  3925                           
  3926                           ; 1 bytes @ 0x2D
  3927  004D                     	ds	1
  3928  004E                     ?___fttol:	
  3929  004E                     ___fttol@f1:	
  3930                           ; 4 bytes @ 0x2E
  3931                           
  3932                           
  3933                           ; 3 bytes @ 0x2E
  3934  004E                     	ds	4
  3935  0052                     ??___fttol:	
  3936                           
  3937                           ; 0 bytes @ 0x32
  3938  0052                     	ds	4
  3939  0056                     ___fttol@sign1:	
  3940                           
  3941                           ; 1 bytes @ 0x36
  3942  0056                     	ds	1
  3943  0057                     ___fttol@lval:	
  3944                           
  3945                           ; 4 bytes @ 0x37
  3946  0057                     	ds	4
  3947  005B                     ___fttol@exp1:	
  3948                           
  3949                           ; 1 bytes @ 0x3B
  3950  005B                     	ds	1
  3951  005C                     ??_getDimmerLights_ValueToPercent:	
  3952  005C                     ??_getDimmerLights_PercentToValue:	
  3953                           ; 0 bytes @ 0x3C
  3954                           
  3955                           
  3956                           ; 0 bytes @ 0x3C
  3957  005C                     	ds	2
  3958  005E                     getDimmerLights_PercentToValue@value:	
  3959  005E                     getDimmerLights_ValueToPercent@value:	
  3960                           ; 1 bytes @ 0x3E
  3961                           
  3962                           
  3963                           ; 1 bytes @ 0x3E
  3964  005E                     	ds	1
  3965  005F                     getDimmerLights_PercentToValue@i:	
  3966  005F                     getDimmerLights_ValueToPercent@i:	
  3967                           ; 3 bytes @ 0x3F
  3968                           
  3969                           
  3970                           ; 3 bytes @ 0x3F
  3971  005F                     	ds	3
  3972  0062                     ?_setProductData:	
  3973  0062                     ??_DimmerIntr_Initialization:	
  3974                           ; 0 bytes @ 0x42
  3975                           
  3976  0062                     ?_setDimmerIntr_DimmingValue:	
  3977                           ; 0 bytes @ 0x42
  3978                           
  3979  0062                     ?_setDimmerIntr_MaxmumValue:	
  3980                           ; 0 bytes @ 0x42
  3981                           
  3982  0062                     setDimmerIntr_DimmingValue@value:	
  3983                           ; 0 bytes @ 0x42
  3984                           
  3985  0062                     setDimmerIntr_MaxmumValue@value:	
  3986                           ; 1 bytes @ 0x42
  3987                           
  3988  0062                     setProductData@value:	
  3989                           ; 1 bytes @ 0x42
  3990                           
  3991                           
  3992                           ; 1 bytes @ 0x42
  3993  0062                     	ds	1
  3994  0063                     ??_setProductData:	
  3995  0063                     ??_setDimmerIntr_DimmingValue:	
  3996                           ; 0 bytes @ 0x43
  3997                           
  3998  0063                     ??_setDimmerIntr_MaxmumValue:	
  3999                           ; 0 bytes @ 0x43
  4000                           
  4001  0063                     ??_DimmerLights_Initialization:	
  4002                           ; 0 bytes @ 0x43
  4003                           
  4004                           
  4005                           ; 0 bytes @ 0x43
  4006  0063                     	ds	1
  4007  0064                     setDimmerIntr_DimmingValue@lights:	
  4008  0064                     setDimmerIntr_MaxmumValue@lights:	
  4009                           ; 1 bytes @ 0x44
  4010                           
  4011  0064                     setProductData@address:	
  4012                           ; 1 bytes @ 0x44
  4013                           
  4014                           
  4015                           ; 1 bytes @ 0x44
  4016  0064                     	ds	1
  4017  0065                     ??_DlyOff_Main:	
  4018  0065                     ?_setRF_DimmerLights:	
  4019                           ; 0 bytes @ 0x45
  4020                           
  4021  0065                     ??_setTemp_Main:	
  4022                           ; 0 bytes @ 0x45
  4023                           
  4024  0065                     ??_setLog_Code:	
  4025                           ; 0 bytes @ 0x45
  4026                           
  4027  0065                     ??_setRFSW_AdjControl:	
  4028                           ; 0 bytes @ 0x45
  4029                           
  4030  0065                     ?_setDelayOff_GO:	
  4031                           ; 0 bytes @ 0x45
  4032                           
  4033  0065                     setDelayOff_GO@command:	
  4034                           ; 0 bytes @ 0x45
  4035                           
  4036  0065                     setRF_DimmerLights@on:	
  4037                           ; 1 bytes @ 0x45
  4038                           
  4039                           
  4040                           ; 1 bytes @ 0x45
  4041  0065                     	ds	1
  4042  0066                     ??_setRF_DimmerLights:	
  4043  0066                     setDelayOff_GO@value:	
  4044                           ; 0 bytes @ 0x46
  4045                           
  4046  0066                     setTemp_Main@error:	
  4047                           ; 1 bytes @ 0x46
  4048                           
  4049                           
  4050                           ; 1 bytes @ 0x46
  4051  0066                     	ds	1
  4052  0067                     ??_setDelayOff_GO:	
  4053  0067                     DlyOff_Main@sw:	
  4054                           ; 0 bytes @ 0x47
  4055                           
  4056  0067                     setRFSW_AdjControl@status:	
  4057                           ; 1 bytes @ 0x47
  4058                           
  4059  0067                     setTemp_Main@SafeValue:	
  4060                           ; 1 bytes @ 0x47
  4061                           
  4062                           
  4063                           ; 2 bytes @ 0x47
  4064  0067                     	ds	1
  4065  0068                     ??_DelayOff_Main:	
  4066  0068                     setRFSW_AdjControl@sw:	
  4067                           ; 0 bytes @ 0x48
  4068                           
  4069  0068                     setRF_DimmerLights@status:	
  4070                           ; 1 bytes @ 0x48
  4071                           
  4072                           
  4073                           ; 1 bytes @ 0x48
  4074  0068                     	ds	1
  4075  0069                     setDelayOff_GO@i:	
  4076  0069                     setRF_DimmerLights@lights:	
  4077                           ; 1 bytes @ 0x49
  4078                           
  4079  0069                     setTemp_Main@DangerValue:	
  4080                           ; 1 bytes @ 0x49
  4081                           
  4082                           
  4083                           ; 2 bytes @ 0x49
  4084  0069                     	ds	1
  4085  006A                     ?_setDimmerLights_Dimming:	
  4086  006A                     setDelayOff_GO@j:	
  4087                           ; 0 bytes @ 0x4A
  4088                           
  4089  006A                     setDimmerLights_Dimming@status:	
  4090                           ; 1 bytes @ 0x4A
  4091                           
  4092                           
  4093                           ; 1 bytes @ 0x4A
  4094  006A                     	ds	1
  4095  006B                     ??_setDimmerLights_Dimming:	
  4096  006B                     setDelayOff_GO@k:	
  4097                           ; 0 bytes @ 0x4B
  4098                           
  4099  006B                     setTemp_Main@TempGO:	
  4100                           ; 1 bytes @ 0x4B
  4101                           
  4102                           
  4103                           ; 1 bytes @ 0x4B
  4104  006B                     	ds	1
  4105  006C                     setDelayOff_GO@sw:	
  4106  006C                     setDimmerLights_Dimming@value:	
  4107                           ; 1 bytes @ 0x4C
  4108                           
  4109  006C                     setTemp_Main@AD:	
  4110                           ; 1 bytes @ 0x4C
  4111                           
  4112                           
  4113                           ; 2 bytes @ 0x4C
  4114  006C                     	ds	1
  4115  006D                     ?_setDimmerLights_OnOff:	
  4116  006D                     ??_setRFSW_Control:	
  4117                           ; 0 bytes @ 0x4D
  4118                           
  4119  006D                     setDimmerLights_OnOff@command:	
  4120                           ; 0 bytes @ 0x4D
  4121                           
  4122  006D                     setDimmerLights_Dimming@lights:	
  4123                           ; 1 bytes @ 0x4D
  4124                           
  4125                           
  4126                           ; 1 bytes @ 0x4D
  4127  006D                     	ds	1
  4128  006E                     ??_setDimmerLights_OnOff:	
  4129  006E                     ??_Temp_Main:	
  4130                           ; 0 bytes @ 0x4E
  4131                           
  4132  006E                     setRFSW_Control@status:	
  4133                           ; 0 bytes @ 0x4E
  4134                           
  4135                           
  4136                           ; 1 bytes @ 0x4E
  4137  006E                     	ds	1
  4138  006F                     setRFSW_Control@sw:	
  4139                           
  4140                           ; 1 bytes @ 0x4F
  4141  006F                     	ds	1
  4142  0070                     ??_setDimmerLights_Main:	
  4143  0070                     ??_setControl_Lights_Table:	
  4144                           ; 0 bytes @ 0x50
  4145                           
  4146  0070                     ??_DimmerLights_Main:	
  4147                           ; 0 bytes @ 0x50
  4148                           
  4149  0070                     ??_RF_Main:	
  4150                           ; 0 bytes @ 0x50
  4151                           
  4152  0070                     ??_main:	
  4153                           ; 0 bytes @ 0x50
  4154                           
  4155                           
  4156                           	psect	maintext
  4157  1464                     __pmaintext:	
  4158                           ; 0 bytes @ 0x50
  4159 ;;
  4160 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  4161 ;;
  4162 ;; *************** function _main *****************
  4163 ;; Defined at:
  4164 ;;		line 7 in file "../src/main_B1.c"
  4165 ;; Parameters:    Size  Location     Type
  4166 ;;  argc            2    4[BANK1 ] int 
  4167 ;;  argv            2    6[BANK1 ] PTR PTR unsigned char 
  4168 ;; Auto vars:     Size  Location     Type
  4169 ;;		None
  4170 ;; Return value:  Size  Location     Type
  4171 ;;                  2    4[BANK1 ] int 
  4172 ;; Registers used:
  4173 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4174 ;; Tracked objects:
  4175 ;;		On entry : 17F/0
  4176 ;;		On exit  : 0/0
  4177 ;;		Unchanged: 0/0
  4178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4179 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4180 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4181 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4182 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0
  4183 ;;Total ram usage:        4 bytes
  4184 ;; Hardware stack levels required when called:   13
  4185 ;; This function calls:
  4186 ;;		_Buzzer_Initialization
  4187 ;;		_Buzzer_Main
  4188 ;;		_CC2500_PowerOnInitial
  4189 ;;		_DelayOff_Initialization
  4190 ;;		_DelayOff_Main
  4191 ;;		_DimmerLights_Initialization
  4192 ;;		_DimmerLights_Main
  4193 ;;		_Exception_Main
  4194 ;;		_Flash_Memory_Initialization
  4195 ;;		_Flash_Memory_Main
  4196 ;;		_LED_Initialization
  4197 ;;		_LED_Main
  4198 ;;		_Load_Initialization
  4199 ;;		_Load_Main
  4200 ;;		_Mcu_Initialization
  4201 ;;		_RF_Initialization
  4202 ;;		_RF_Main
  4203 ;;		_Switch_Initialization
  4204 ;;		_Switch_Main
  4205 ;;		_Temp_Initialization
  4206 ;;		_Temp_Main
  4207 ;;		_WDT_Main
  4208 ;;		_getLoad_AD
  4209 ;;		_getTemp_AD
  4210 ;;		_myMain_Initialization
  4211 ;;		_my_MainTimer
  4212 ;; This function is called by:
  4213 ;;		Startup code after reset
  4214 ;; This function uses a non-reentrant model
  4215 ;;
  4216                           
  4217                           
  4218                           ;psect for function _main
  4219  1464                     _main:	
  4220                           
  4221                           ;main_B1.c: 8: myMain_Initialization();
  4222                           
  4223                           ;incstack = 0
  4224                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  4225  1464  319B  230A  3194   	fcall	_myMain_Initialization
  4226                           
  4227                           ;main_B1.c: 9: Mcu_Initialization();
  4228  1467  319A  229A  3194   	fcall	_Mcu_Initialization
  4229                           
  4230                           ;main_B1.c: 10: Flash_Memory_Initialization();
  4231  146A  3186  26FC  3194   	fcall	_Flash_Memory_Initialization
  4232                           
  4233                           ;main_B1.c: 11: LED_Initialization();
  4234  146D  3199  21A5  3194   	fcall	_LED_Initialization
  4235                           
  4236                           ;main_B1.c: 12: Buzzer_Initialization();
  4237  1470  3198  20BB  3194   	fcall	_Buzzer_Initialization
  4238                           
  4239                           ;main_B1.c: 14: ;;
  4240                           ;main_B1.c: 15: Temp_Initialization();
  4241  1473  3198  20C7  3194   	fcall	_Temp_Initialization
  4242                           
  4243                           ;main_B1.c: 16: Load_Initialization();
  4244  1476  3198  20BE  3194   	fcall	_Load_Initialization
  4245                           
  4246                           ;main_B1.c: 17: ;;
  4247                           ;main_B1.c: 18: DelayOff_Initialization();
  4248  1479  3198  20FF  3194   	fcall	_DelayOff_Initialization
  4249                           
  4250                           ;main_B1.c: 20: DimmerLights_Initialization();
  4251  147C  3199  2149  3194   	fcall	_DimmerLights_Initialization
  4252                           
  4253                           ;main_B1.c: 21: ;;
  4254                           ;main_B1.c: 22: ;;
  4255                           ;main_B1.c: 23: ;;
  4256                           ;main_B1.c: 24: Switch_Initialization();
  4257  147F  3199  212F  3194   	fcall	_Switch_Initialization
  4258                           
  4259                           ;main_B1.c: 25: RF_Initialization();
  4260  1482  3198  20C1  3194   	fcall	_RF_Initialization
  4261                           
  4262                           ;main_B1.c: 26: CC2500_PowerOnInitial();
  4263  1485  319B  235A  3194   	fcall	_CC2500_PowerOnInitial
  4264  1488                     l9630:	
  4265                           ;main_B1.c: 27: ;;
  4266                           ;main_B1.c: 28: ;;
  4267                           ;main_B1.c: 30: while (1) {
  4268                           
  4269                           
  4270                           ;main_B1.c: 32: if (myMain.PowerON == 1) {
  4271  1488  0021               	movlb	1	; select bank1
  4272  1489  1C2E               	btfss	_myMain^(0+128),0
  4273  148A  2C93               	goto	l9634
  4274                           
  4275                           ;main_B1.c: 38: getLoad_AD(0x05);
  4276  148B  3005               	movlw	5
  4277  148C  318A  221D  3194   	fcall	_getLoad_AD
  4278                           
  4279                           ;main_B1.c: 42: getTemp_AD(0x09);
  4280  148F  3009               	movlw	9
  4281  1490  3191  21BE  3194   	fcall	_getTemp_AD
  4282  1493                     l9634:	
  4283                           
  4284                           ;main_B1.c: 57: }
  4285                           ;main_B1.c: 93: if (Timer1.Timeout == 1) {
  4286  1493  0022               	movlb	2	; select bank2
  4287  1494  1C31               	btfss	_Timer1^(0+256),0
  4288  1495  2C88               	goto	l9630
  4289                           
  4290                           ;main_B1.c: 94: Timer1.Timeout = 0;
  4291  1496  1031               	bcf	_Timer1^(0+256),0
  4292                           
  4293                           ;main_B1.c: 96: my_MainTimer();
  4294  1497  3190  20C7  3194   	fcall	_my_MainTimer
  4295                           
  4296                           ;main_B1.c: 97: WDT_Main();
  4297  149A  319A  22AC  3194   	fcall	_WDT_Main
  4298                           
  4299                           ;main_B1.c: 98: ;;
  4300                           ;main_B1.c: 99: ;;
  4301                           ;main_B1.c: 100: if (myMain.PowerON == 1) {
  4302  149D  0021               	movlb	1	; select bank1
  4303  149E  1C2E               	btfss	_myMain^(0+128),0
  4304  149F  2C88               	goto	l9630
  4305                           
  4306                           ;main_B1.c: 101: Flash_Memory_Main();
  4307  14A0  3191  21FE  3194   	fcall	_Flash_Memory_Main
  4308                           
  4309                           ;main_B1.c: 103: LED_Main();
  4310  14A3  3199  21B1  3194   	fcall	_LED_Main
  4311                           
  4312                           ;main_B1.c: 104: Buzzer_Main();
  4313  14A6  3192  22C4  3194   	fcall	_Buzzer_Main
  4314                           
  4315                           ;main_B1.c: 106: ;;
  4316                           ;main_B1.c: 107: Temp_Main();
  4317  14A9  3198  20CA  3194   	fcall	_Temp_Main
  4318                           
  4319                           ;main_B1.c: 108: Load_Main();
  4320  14AC  3180  2053  3194   	fcall	_Load_Main
  4321                           
  4322                           ;main_B1.c: 109: ;;
  4323                           ;main_B1.c: 111: ;;
  4324                           ;main_B1.c: 112: DimmerLights_Main();
  4325  14AF  319D  2590  3194   	fcall	_DimmerLights_Main
  4326                           
  4327                           ;main_B1.c: 113: Switch_Main();
  4328  14B2  3199  216A  3194   	fcall	_Switch_Main
  4329                           
  4330                           ;main_B1.c: 114: ;;
  4331                           ;main_B1.c: 115: ;;
  4332                           ;main_B1.c: 117: RF_Main();
  4333  14B5  3198  20C4  3194   	fcall	_RF_Main
  4334                           
  4335                           ;main_B1.c: 118: DelayOff_Main();
  4336  14B8  3199  2107  3194   	fcall	_DelayOff_Main
  4337                           
  4338                           ;main_B1.c: 119: ;;
  4339                           ;main_B1.c: 120: ;;
  4340                           ;main_B1.c: 121: Exception_Main();
  4341  14BB  3184  247F  3194   	fcall	_Exception_Main
  4342  14BE  2C88               	goto	l9630
  4343  14BF                     __end_of_main:	
  4344                           ;main_B1.c: 128: }
  4345                           ;main_B1.c: 129: }
  4346                           ;main_B1.c: 163: }
  4347                           ;main_B1.c: 164: return (0);
  4348                           ;	Return value of _main is never used
  4349                           
  4350                           
  4351                           	psect	text1
  4352  10C7                     __ptext1:	
  4353 ;; *************** function _my_MainTimer *****************
  4354 ;; Defined at:
  4355 ;;		line 185 in file "../src/main_B1.c"
  4356 ;; Parameters:    Size  Location     Type
  4357 ;;		None
  4358 ;; Auto vars:     Size  Location     Type
  4359 ;;		None
  4360 ;; Return value:  Size  Location     Type
  4361 ;;		None               void
  4362 ;; Registers used:
  4363 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4364 ;; Tracked objects:
  4365 ;;		On entry : 0/0
  4366 ;;		On exit  : 0/0
  4367 ;;		Unchanged: 0/0
  4368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4371 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4372 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4373 ;;Total ram usage:        1 bytes
  4374 ;; Hardware stack levels used:    1
  4375 ;; Hardware stack levels required when called:    7
  4376 ;; This function calls:
  4377 ;;		_setBuz
  4378 ;; This function is called by:
  4379 ;;		_main
  4380 ;; This function uses a non-reentrant model
  4381 ;;
  4382                           
  4383                           
  4384                           ;psect for function _my_MainTimer
  4385  10C7                     _my_MainTimer:	
  4386                           
  4387                           ;main_B1.c: 187: if (myMain.PowerON == 0) {
  4388                           
  4389                           ;incstack = 0
  4390                           ; Regs used in _my_MainTimer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4391  10C7  0021               	movlb	1	; select bank1
  4392  10C8  182E               	btfsc	_myMain^(0+128),0
  4393  10C9  28E1               	goto	l8954
  4394                           
  4395                           ;main_B1.c: 188: myMain.PowerCount++;
  4396  10CA  3001               	movlw	1
  4397  10CB  0020               	movlb	0	; select bank0
  4398  10CC  00AD               	movwf	??_my_MainTimer
  4399  10CD  082D               	movf	??_my_MainTimer,w
  4400  10CE  0021               	movlb	1	; select bank1
  4401  10CF  07AF               	addwf	(_myMain^(0+128)+1),f
  4402                           
  4403                           ;main_B1.c: 189: if (myMain.PowerCount == (1500 / 20)) {
  4404  10D0  082F               	movf	(_myMain^(0+128)+1),w
  4405  10D1  3A4B               	xorlw	75
  4406  10D2  1D03               	skipz
  4407  10D3  0008               	return
  4408                           
  4409                           ;main_B1.c: 190: myMain.PowerCount = 0;
  4410  10D4  01AF               	clrf	(_myMain^(0+128)+1)
  4411                           
  4412                           ;main_B1.c: 191: myMain.PowerON = 1;
  4413  10D5  142E               	bsf	_myMain^(0+128),0
  4414                           
  4415                           ;main_B1.c: 196: setBuz(3, 50);
  4416  10D6  3032               	movlw	50
  4417  10D7  0020               	movlb	0	; select bank0
  4418  10D8  00A9               	movwf	setBuz@time
  4419  10D9  3000               	movlw	0
  4420  10DA  00AA               	movwf	setBuz@time+1
  4421  10DB  3003               	movlw	3
  4422  10DC  3194  240B         	fcall	_setBuz
  4423                           
  4424                           ;main_B1.c: 197: myMain.SelfTest = 1;
  4425  10DE  0021               	movlb	1	; select bank1
  4426  10DF  162E               	bsf	_myMain^(0+128),4
  4427                           
  4428                           ;main_B1.c: 206: }
  4429                           ;main_B1.c: 207: } else {
  4430  10E0  0008               	return
  4431  10E1                     l8954:	
  4432                           
  4433                           ;main_B1.c: 208: myMain.PowerCount++;
  4434  10E1  3001               	movlw	1
  4435  10E2  0020               	movlb	0	; select bank0
  4436  10E3  00AD               	movwf	??_my_MainTimer
  4437  10E4  082D               	movf	??_my_MainTimer,w
  4438  10E5  0021               	movlb	1	; select bank1
  4439  10E6  07AF               	addwf	(_myMain^(0+128)+1),f
  4440                           
  4441                           ;main_B1.c: 209: if (myMain.PowerCount == (1000 / 20)) {
  4442  10E7  082F               	movf	(_myMain^(0+128)+1),w
  4443  10E8  3A32               	xorlw	50
  4444  10E9  1903               	btfsc	3,2
  4445                           
  4446                           ;main_B1.c: 210: myMain.PowerCount = 0;
  4447  10EA  01AF               	clrf	(_myMain^(0+128)+1)
  4448                           
  4449                           ;main_B1.c: 226: }
  4450                           ;main_B1.c: 228: myMain.Count1++;
  4451  10EB  3001               	movlw	1
  4452  10EC  07B2               	addwf	(_myMain^(0+128)+4),f
  4453  10ED  3000               	movlw	0
  4454  10EE  3DB3               	addwfc	((_myMain+1)^(0+128)+4),f
  4455                           
  4456                           ;main_B1.c: 229: if (myMain.Count1 == (1000 / 20)) {
  4457  10EF  3004               	movlw	4
  4458  10F0  3EAE               	addlw	_myMain& (0+255)
  4459  10F1  0086               	movwf	6
  4460  10F2  0187               	clrf	7
  4461  10F3  3F40               	moviw [0]fsr1
  4462  10F4  3A32               	xorlw	50
  4463  10F5  1D03               	skipz
  4464  10F6  28F9               	goto	u9895
  4465  10F7  3F41               	moviw [1]fsr1
  4466  10F8  3A00               	xorlw	0
  4467  10F9                     u9895:	
  4468  10F9  1D03               	skipz
  4469  10FA  0008               	return
  4470                           
  4471                           ;main_B1.c: 230: myMain.Count1 = 0;
  4472  10FB  01B2               	clrf	(_myMain^(0+128)+4)
  4473  10FC  01B3               	clrf	((_myMain+1)^(0+128)+4)
  4474                           
  4475                           ;main_B1.c: 242: if (myMain.Flag) {
  4476  10FD  1CAE               	btfss	_myMain^(0+128),1
  4477  10FE  2901               	goto	l2858
  4478                           
  4479                           ;main_B1.c: 243: myMain.Flag = 0;
  4480  10FF  10AE               	bcf	_myMain^(0+128),1
  4481                           
  4482                           ;main_B1.c: 252: } else {
  4483  1100  0008               	return
  4484  1101                     l2858:	
  4485                           
  4486                           ;main_B1.c: 253: myMain.Flag = 1;
  4487  1101  14AE               	bsf	_myMain^(0+128),1
  4488  1102  0008               	return
  4489  1103                     __end_of_my_MainTimer:	
  4490                           
  4491                           	psect	text2
  4492  1B0A                     __ptext2:	
  4493 ;; *************** function _myMain_Initialization *****************
  4494 ;; Defined at:
  4495 ;;		line 170 in file "../src/main_B1.c"
  4496 ;; Parameters:    Size  Location     Type
  4497 ;;		None
  4498 ;; Auto vars:     Size  Location     Type
  4499 ;;		None
  4500 ;; Return value:  Size  Location     Type
  4501 ;;		None               void
  4502 ;; Registers used:
  4503 ;;		wreg, fsr1l, fsr1h
  4504 ;; Tracked objects:
  4505 ;;		On entry : 0/0
  4506 ;;		On exit  : 0/0
  4507 ;;		Unchanged: 0/0
  4508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4510 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4511 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4512 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4513 ;;Total ram usage:        1 bytes
  4514 ;; Hardware stack levels used:    1
  4515 ;; Hardware stack levels required when called:    5
  4516 ;; This function calls:
  4517 ;;		Nothing
  4518 ;; This function is called by:
  4519 ;;		_main
  4520 ;; This function uses a non-reentrant model
  4521 ;;
  4522                           
  4523                           
  4524                           ;psect for function _myMain_Initialization
  4525  1B0A                     _myMain_Initialization:	
  4526                           
  4527                           ;main_B1.c: 173: product = &_product;
  4528                           
  4529                           ;incstack = 0
  4530                           ; Regs used in _myMain_Initialization: [wregfsr1]
  4531  1B0A  3045               	movlw	__product& (0+255)
  4532  1B0B  0020               	movlb	0	; select bank0
  4533  1B0C  00A0               	movwf	??_myMain_Initialization
  4534  1B0D  0820               	movf	??_myMain_Initialization,w
  4535  1B0E  0021               	movlb	1	; select bank1
  4536  1B0F  00EE               	movwf	_product^(0+128)
  4537                           
  4538                           ;main_B1.c: 174: product->Data[20] = 210;
  4539  1B10  30D2               	movlw	210
  4540  1B11  0020               	movlb	0	; select bank0
  4541  1B12  00A0               	movwf	??_myMain_Initialization
  4542  1B13  0021               	movlb	1	; select bank1
  4543  1B14  086E               	movf	_product^(0+128),w
  4544  1B15  3E14               	addlw	20
  4545  1B16  0086               	movwf	6
  4546  1B17  3002               	movlw	2	; select bank4/5
  4547  1B18  0087               	movwf	7
  4548  1B19  0020               	movlb	0	; select bank0
  4549  1B1A  0820               	movf	??_myMain_Initialization,w
  4550  1B1B  0081               	movwf	1
  4551  1B1C  0008               	return
  4552  1B1D                     __end_of_myMain_Initialization:	
  4553                           
  4554                           	psect	text3
  4555  11BE                     __ptext3:	
  4556 ;; *************** function _getTemp_AD *****************
  4557 ;; Defined at:
  4558 ;;		line 15 in file "../src/OverTemperature_B1.c"
  4559 ;; Parameters:    Size  Location     Type
  4560 ;;  channel         1    wreg     unsigned char 
  4561 ;; Auto vars:     Size  Location     Type
  4562 ;;  channel         1    5[BANK0 ] unsigned char 
  4563 ;;  ADRES           2    6[BANK0 ] unsigned int 
  4564 ;; Return value:  Size  Location     Type
  4565 ;;		None               void
  4566 ;; Registers used:
  4567 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4568 ;; Tracked objects:
  4569 ;;		On entry : 0/0
  4570 ;;		On exit  : 0/0
  4571 ;;		Unchanged: 0/0
  4572 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4574 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4575 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4576 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4577 ;;Total ram usage:        4 bytes
  4578 ;; Hardware stack levels used:    1
  4579 ;; Hardware stack levels required when called:    7
  4580 ;; This function calls:
  4581 ;;		_getAD
  4582 ;; This function is called by:
  4583 ;;		_main
  4584 ;; This function uses a non-reentrant model
  4585 ;;
  4586                           
  4587                           
  4588                           ;psect for function _getTemp_AD
  4589  11BE                     _getTemp_AD:	
  4590                           
  4591                           ;incstack = 0
  4592                           ; Regs used in _getTemp_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4593                           ;getTemp_AD@channel stored from wreg
  4594  11BE  0020               	movlb	0	; select bank0
  4595  11BF  00A5               	movwf	getTemp_AD@channel
  4596                           
  4597                           ;OverTemperature_B1.c: 16: ADtype ADRES = 0;
  4598  11C0  01A6               	clrf	getTemp_AD@ADRES
  4599  11C1  01A7               	clrf	getTemp_AD@ADRES+1
  4600                           
  4601                           ;OverTemperature_B1.c: 19: if (Temp.ADtoGO == 1) {
  4602  11C2  0021               	movlb	1	; select bank1
  4603  11C3  1D5C               	btfss	_Temp^(0+128),2
  4604  11C4  29EE               	goto	l8924
  4605                           
  4606                           ;OverTemperature_B1.c: 21: ADRES = getAD(channel, 0xf0);
  4607  11C5  30F0               	movlw	240
  4608  11C6  0020               	movlb	0	; select bank0
  4609  11C7  00A4               	movwf	??_getTemp_AD
  4610  11C8  0824               	movf	??_getTemp_AD,w
  4611  11C9  00A0               	movwf	getAD@adcon1
  4612  11CA  0825               	movf	getTemp_AD@channel,w
  4613  11CB  319D  25B0  3191   	fcall	_getAD
  4614  11CE  0020               	movlb	0	; select bank0
  4615  11CF  0821               	movf	?_getAD+1,w
  4616  11D0  01A7               	clrf	getTemp_AD@ADRES+1
  4617  11D1  07A7               	addwf	getTemp_AD@ADRES+1,f
  4618  11D2  0820               	movf	?_getAD,w
  4619  11D3  01A6               	clrf	getTemp_AD@ADRES
  4620  11D4  07A6               	addwf	getTemp_AD@ADRES,f
  4621                           
  4622                           ;OverTemperature_B1.c: 29: if (ADRES > 0) {
  4623  11D5  0827               	movf	getTemp_AD@ADRES+1,w
  4624  11D6  0426               	iorwf	getTemp_AD@ADRES,w
  4625  11D7  1903               	skipnz
  4626  11D8  29EE               	goto	l8924
  4627                           
  4628                           ;OverTemperature_B1.c: 30: if (Temp.ADV < ADRES) {
  4629  11D9  0827               	movf	getTemp_AD@ADRES+1,w
  4630  11DA  0021               	movlb	1	; select bank1
  4631  11DB  0265               	subwf	((_Temp+1)^(0+128)+8),w
  4632  11DC  1D03               	skipz
  4633  11DD  29E2               	goto	u9855
  4634  11DE  0020               	movlb	0	; select bank0
  4635  11DF  0826               	movf	getTemp_AD@ADRES,w
  4636  11E0  0021               	movlb	1	; select bank1
  4637  11E1  0264               	subwf	(_Temp^(0+128)+8),w
  4638  11E2                     u9855:	
  4639  11E2  1803               	skipnc
  4640  11E3  29EE               	goto	l8924
  4641                           
  4642                           ;OverTemperature_B1.c: 31: Temp.ADV = ADRES;
  4643  11E4  0020               	movlb	0	; select bank0
  4644  11E5  0827               	movf	getTemp_AD@ADRES+1,w
  4645  11E6  0021               	movlb	1	; select bank1
  4646  11E7  01E5               	clrf	((_Temp+1)^(0+128)+8)
  4647  11E8  07E5               	addwf	((_Temp+1)^(0+128)+8),f
  4648  11E9  0020               	movlb	0	; select bank0
  4649  11EA  0826               	movf	getTemp_AD@ADRES,w
  4650  11EB  0021               	movlb	1	; select bank1
  4651  11EC  01E4               	clrf	(_Temp^(0+128)+8)
  4652  11ED  07E4               	addwf	(_Temp^(0+128)+8),f
  4653  11EE                     l8924:	
  4654                           
  4655                           ;OverTemperature_B1.c: 32: }
  4656                           ;OverTemperature_B1.c: 33: }
  4657                           ;OverTemperature_B1.c: 34: }
  4658                           ;OverTemperature_B1.c: 41: ADRES = getAD(channel, 0xf0);
  4659  11EE  30F0               	movlw	240
  4660  11EF  0020               	movlb	0	; select bank0
  4661  11F0  00A4               	movwf	??_getTemp_AD
  4662  11F1  0824               	movf	??_getTemp_AD,w
  4663  11F2  00A0               	movwf	getAD@adcon1
  4664  11F3  0825               	movf	getTemp_AD@channel,w
  4665  11F4  319D  25B0         	fcall	_getAD
  4666  11F6  0020               	movlb	0	; select bank0
  4667  11F7  0821               	movf	?_getAD+1,w
  4668  11F8  01A7               	clrf	getTemp_AD@ADRES+1
  4669  11F9  07A7               	addwf	getTemp_AD@ADRES+1,f
  4670  11FA  0820               	movf	?_getAD,w
  4671  11FB  01A6               	clrf	getTemp_AD@ADRES
  4672  11FC  07A6               	addwf	getTemp_AD@ADRES,f
  4673  11FD  0008               	return
  4674  11FE                     __end_of_getTemp_AD:	
  4675                           
  4676                           	psect	text4
  4677  0A1D                     __ptext4:	
  4678 ;; *************** function _getLoad_AD *****************
  4679 ;; Defined at:
  4680 ;;		line 15 in file "../src/OverLoad_B1.c"
  4681 ;; Parameters:    Size  Location     Type
  4682 ;;  channel         1    wreg     unsigned char 
  4683 ;; Auto vars:     Size  Location     Type
  4684 ;;  channel         1    6[BANK0 ] unsigned char 
  4685 ;;  ADRES           2    9[BANK0 ] unsigned int 
  4686 ;;  i               1   11[BANK0 ] unsigned char 
  4687 ;;  j               1    8[BANK0 ] unsigned char 
  4688 ;;  k               1    7[BANK0 ] unsigned char 
  4689 ;; Return value:  Size  Location     Type
  4690 ;;		None               void
  4691 ;; Registers used:
  4692 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4693 ;; Tracked objects:
  4694 ;;		On entry : 0/0
  4695 ;;		On exit  : 0/0
  4696 ;;		Unchanged: 0/0
  4697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4699 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4700 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4701 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4702 ;;Total ram usage:        8 bytes
  4703 ;; Hardware stack levels used:    1
  4704 ;; Hardware stack levels required when called:    7
  4705 ;; This function calls:
  4706 ;;		_getAD
  4707 ;; This function is called by:
  4708 ;;		_main
  4709 ;; This function uses a non-reentrant model
  4710 ;;
  4711                           
  4712                           
  4713                           ;psect for function _getLoad_AD
  4714  0A1D                     _getLoad_AD:	
  4715                           
  4716                           ;incstack = 0
  4717                           ; Regs used in _getLoad_AD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4718                           ;getLoad_AD@channel stored from wreg
  4719  0A1D  0020               	movlb	0	; select bank0
  4720  0A1E  00A6               	movwf	getLoad_AD@channel
  4721                           
  4722                           ;OverLoad_B1.c: 16: char i = 0, j = 0, k = 0;
  4723  0A1F  01AB               	clrf	getLoad_AD@i
  4724  0A20  01A8               	clrf	getLoad_AD@j
  4725  0A21  01A7               	clrf	getLoad_AD@k
  4726                           
  4727                           ;OverLoad_B1.c: 17: ADtype ADRES = 0;
  4728  0A22  01A9               	clrf	getLoad_AD@ADRES
  4729  0A23  01AA               	clrf	getLoad_AD@ADRES+1
  4730                           
  4731                           ;OverLoad_B1.c: 18: if (Load.ADtoGO == 1) {
  4732  0A24  0022               	movlb	2	; select bank2
  4733  0A25  1E3F               	btfss	_Load^(0+256),4
  4734  0A26  0008               	return
  4735                           
  4736                           ;OverLoad_B1.c: 20: ADRES = getAD(channel, 0xf3);
  4737  0A27  30F3               	movlw	243
  4738  0A28  0020               	movlb	0	; select bank0
  4739  0A29  00A4               	movwf	??_getLoad_AD
  4740  0A2A  0824               	movf	??_getLoad_AD,w
  4741  0A2B  00A0               	movwf	getAD@adcon1
  4742  0A2C  0826               	movf	getLoad_AD@channel,w
  4743  0A2D  319D  25B0  318A   	fcall	_getAD
  4744  0A30  0020               	movlb	0	; select bank0
  4745  0A31  0821               	movf	?_getAD+1,w
  4746  0A32  01AA               	clrf	getLoad_AD@ADRES+1
  4747  0A33  07AA               	addwf	getLoad_AD@ADRES+1,f
  4748  0A34  0820               	movf	?_getAD,w
  4749  0A35  01A9               	clrf	getLoad_AD@ADRES
  4750  0A36  07A9               	addwf	getLoad_AD@ADRES,f
  4751                           
  4752                           ;OverLoad_B1.c: 21: for (i = 0; i < 4; i++) {
  4753  0A37  01AB               	clrf	getLoad_AD@i
  4754  0A38  3004               	movlw	4
  4755  0A39  022B               	subwf	getLoad_AD@i,w
  4756  0A3A  1803               	btfsc	3,0
  4757  0A3B  2A63               	goto	l8734
  4758  0A3C                     l8722:	
  4759                           
  4760                           ;OverLoad_B1.c: 22: if (Load.AH[i] < ADRES && j == 0) {
  4761  0A3C  352B               	lslf	getLoad_AD@i,w
  4762  0A3D  3E4A               	addlw	(_Load+11)& (0+255)
  4763  0A3E  0086               	movwf	6
  4764  0A3F  3001               	movlw	1	; select bank2/3
  4765  0A40  0087               	movwf	7
  4766  0A41  3F40               	moviw [0]fsr1
  4767  0A42  00A4               	movwf	??_getLoad_AD
  4768  0A43  3F41               	moviw [1]fsr1
  4769  0A44  00A5               	movwf	??_getLoad_AD+1
  4770  0A45  082A               	movf	getLoad_AD@ADRES+1,w
  4771  0A46  0225               	subwf	??_getLoad_AD+1,w
  4772  0A47  1D03               	skipz
  4773  0A48  2A4B               	goto	u9445
  4774  0A49  0829               	movf	getLoad_AD@ADRES,w
  4775  0A4A  0224               	subwf	??_getLoad_AD,w
  4776  0A4B                     u9445:	
  4777  0A4B  1803               	skipnc
  4778  0A4C  2A5B               	goto	l8730
  4779  0A4D  08A8               	movf	getLoad_AD@j,f
  4780  0A4E  1D03               	skipz
  4781  0A4F  2A5B               	goto	l8730
  4782                           
  4783                           ;OverLoad_B1.c: 23: Load.AH[i] = ADRES;
  4784  0A50  352B               	lslf	getLoad_AD@i,w
  4785  0A51  3E4A               	addlw	(_Load+11)& (0+255)
  4786  0A52  0086               	movwf	6
  4787  0A53  3001               	movlw	1	; select bank2/3
  4788  0A54  0087               	movwf	7
  4789  0A55  0829               	movf	getLoad_AD@ADRES,w
  4790  0A56  3FC0               	movwi [0]fsr1
  4791  0A57  082A               	movf	getLoad_AD@ADRES+1,w
  4792  0A58  3FC1               	movwi [1]fsr1
  4793                           
  4794                           ;OverLoad_B1.c: 24: j = 1;
  4795  0A59  01A8               	clrf	getLoad_AD@j
  4796  0A5A  0AA8               	incf	getLoad_AD@j,f
  4797  0A5B                     l8730:	
  4798  0A5B  3001               	movlw	1
  4799  0A5C  00A4               	movwf	??_getLoad_AD
  4800  0A5D  0824               	movf	??_getLoad_AD,w
  4801  0A5E  07AB               	addwf	getLoad_AD@i,f
  4802  0A5F  3004               	movlw	4
  4803  0A60  022B               	subwf	getLoad_AD@i,w
  4804  0A61  1C03               	skipc
  4805  0A62  2A3C               	goto	l8722
  4806  0A63                     l8734:	
  4807                           
  4808                           ;OverLoad_B1.c: 25: }
  4809                           ;OverLoad_B1.c: 26: }
  4810                           ;OverLoad_B1.c: 27: if (j == 0) {
  4811  0A63  08A8               	movf	getLoad_AD@j,f
  4812  0A64  1D03               	skipz
  4813  0A65  0008               	return
  4814                           
  4815                           ;OverLoad_B1.c: 28: for (i = 0; i < 4; i++) {
  4816  0A66  01AB               	clrf	getLoad_AD@i
  4817  0A67                     L1:	
  4818  0A67  3004               	movlw	4
  4819  0A68  022B               	subwf	getLoad_AD@i,w
  4820  0A69  1803               	btfsc	3,0
  4821  0A6A  0008               	return
  4822                           
  4823                           ;OverLoad_B1.c: 29: if (Load.AL[i] > ADRES && k == 0) {
  4824  0A6B  352B               	lslf	getLoad_AD@i,w
  4825  0A6C  3E54               	addlw	(_Load+21)& (0+255)
  4826  0A6D  0086               	movwf	6
  4827  0A6E  3001               	movlw	1	; select bank2/3
  4828  0A6F  0087               	movwf	7
  4829  0A70  3F40               	moviw [0]fsr1
  4830  0A71  00A4               	movwf	??_getLoad_AD
  4831  0A72  3F41               	moviw [1]fsr1
  4832  0A73  00A5               	movwf	??_getLoad_AD+1
  4833  0A74  0825               	movf	??_getLoad_AD+1,w
  4834  0A75  022A               	subwf	getLoad_AD@ADRES+1,w
  4835  0A76  1D03               	skipz
  4836  0A77  2A7A               	goto	u9495
  4837  0A78  0824               	movf	??_getLoad_AD,w
  4838  0A79  0229               	subwf	getLoad_AD@ADRES,w
  4839  0A7A                     u9495:	
  4840  0A7A  1803               	skipnc
  4841  0A7B  2A8A               	goto	l8750
  4842  0A7C  08A7               	movf	getLoad_AD@k,f
  4843  0A7D  1D03               	skipz
  4844  0A7E  2A8A               	goto	l8750
  4845                           
  4846                           ;OverLoad_B1.c: 30: Load.AL[i] = ADRES;
  4847  0A7F  352B               	lslf	getLoad_AD@i,w
  4848  0A80  3E54               	addlw	(_Load+21)& (0+255)
  4849  0A81  0086               	movwf	6
  4850  0A82  3001               	movlw	1	; select bank2/3
  4851  0A83  0087               	movwf	7
  4852  0A84  0829               	movf	getLoad_AD@ADRES,w
  4853  0A85  3FC0               	movwi [0]fsr1
  4854  0A86  082A               	movf	getLoad_AD@ADRES+1,w
  4855  0A87  3FC1               	movwi [1]fsr1
  4856                           
  4857                           ;OverLoad_B1.c: 31: k = 1;
  4858  0A88  01A7               	clrf	getLoad_AD@k
  4859  0A89  0AA7               	incf	getLoad_AD@k,f
  4860  0A8A                     l8750:	
  4861  0A8A  3001               	movlw	1
  4862  0A8B  00A4               	movwf	??_getLoad_AD
  4863  0A8C  0824               	movf	??_getLoad_AD,w
  4864  0A8D  07AB               	addwf	getLoad_AD@i,f
  4865  0A8E  2A67               	goto	L1
  4866  0A8F                     __end_of_getLoad_AD:	
  4867                           
  4868                           	psect	text5
  4869  1DB0                     __ptext5:	
  4870 ;; *************** function _getAD *****************
  4871 ;; Defined at:
  4872 ;;		line 461 in file "../src/MCU_B1.c"
  4873 ;; Parameters:    Size  Location     Type
  4874 ;;  adcon0          1    wreg     unsigned char 
  4875 ;;  adcon1          1    0[BANK0 ] unsigned char 
  4876 ;; Auto vars:     Size  Location     Type
  4877 ;;  adcon0          1    3[BANK0 ] unsigned char 
  4878 ;; Return value:  Size  Location     Type
  4879 ;;                  2    0[BANK0 ] int 
  4880 ;; Registers used:
  4881 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4882 ;; Tracked objects:
  4883 ;;		On entry : 0/0
  4884 ;;		On exit  : 0/0
  4885 ;;		Unchanged: 0/0
  4886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4887 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4888 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4890 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4891 ;;Total ram usage:        4 bytes
  4892 ;; Hardware stack levels used:    1
  4893 ;; Hardware stack levels required when called:    6
  4894 ;; This function calls:
  4895 ;;		_Timeout_Counter
  4896 ;;		_set_TimeoutCleared
  4897 ;; This function is called by:
  4898 ;;		_getLoad_AD
  4899 ;;		_getTemp_AD
  4900 ;; This function uses a non-reentrant model
  4901 ;;
  4902                           
  4903                           
  4904                           ;psect for function _getAD
  4905  1DB0                     _getAD:	
  4906                           
  4907                           ;incstack = 0
  4908                           ; Regs used in _getAD: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4909                           ;getAD@adcon0 stored from wreg
  4910  1DB0  0020               	movlb	0	; select bank0
  4911  1DB1  00A3               	movwf	getAD@adcon0
  4912                           
  4913                           ;MCU_B1.c: 462: ADCON0 = adcon0;
  4914  1DB2  0823               	movf	getAD@adcon0,w
  4915  1DB3  0021               	movlb	1	; select bank1
  4916  1DB4  009D               	movwf	29	;volatile
  4917                           
  4918                           ;MCU_B1.c: 463: ADCON1 = adcon1;
  4919  1DB5  0020               	movlb	0	; select bank0
  4920  1DB6  0820               	movf	getAD@adcon1,w
  4921  1DB7  0021               	movlb	1	; select bank1
  4922  1DB8  009E               	movwf	30	;volatile
  4923                           
  4924                           ;MCU_B1.c: 464: GO_nDONE = 1;
  4925  1DB9  149D               	bsf	29,1	;volatile
  4926                           
  4927                           ;MCU_B1.c: 465: while (GO_nDONE == 1 && myMain.Timeout == 0) {
  4928  1DBA  2DBE               	goto	l8210
  4929  1DBB                     l8208:	
  4930                           
  4931                           ;MCU_B1.c: 466: Timeout_Counter();
  4932  1DBB  319B  236F  319D   	fcall	_Timeout_Counter
  4933  1DBE                     l8210:	
  4934  1DBE  0021               	movlb	1	; select bank1
  4935  1DBF  1C9D               	btfss	29,1	;volatile
  4936  1DC0  2DC3               	goto	l8214
  4937  1DC1  1D38               	btfss	(_myMain^(0+128)+10),2
  4938  1DC2  2DBB               	goto	l8208
  4939  1DC3                     l8214:	
  4940                           
  4941                           ;MCU_B1.c: 467: };
  4942                           ;MCU_B1.c: 468: set_TimeoutCleared();
  4943  1DC3  3198  20E1         	fcall	_set_TimeoutCleared
  4944                           
  4945                           ;MCU_B1.c: 469: return ((ADRESH*256)+ADRESL);
  4946  1DC5  0021               	movlb	1	; select bank1
  4947  1DC6  081C               	movf	28,w	;volatile
  4948  1DC7  0020               	movlb	0	; select bank0
  4949  1DC8  01A1               	clrf	?_getAD+1
  4950  1DC9  07A1               	addwf	?_getAD+1,f
  4951  1DCA  0021               	movlb	1	; select bank1
  4952  1DCB  081B               	movf	27,w	;volatile
  4953  1DCC  0020               	movlb	0	; select bank0
  4954  1DCD  01A0               	clrf	?_getAD
  4955  1DCE  07A0               	addwf	?_getAD,f
  4956  1DCF  0008               	return
  4957  1DD0                     __end_of_getAD:	
  4958                           
  4959                           	psect	text6
  4960  1AAC                     __ptext6:	
  4961 ;; *************** function _WDT_Main *****************
  4962 ;; Defined at:
  4963 ;;		line 1116 in file "../src/MCU_B1.c"
  4964 ;; Parameters:    Size  Location     Type
  4965 ;;		None
  4966 ;; Auto vars:     Size  Location     Type
  4967 ;;		None
  4968 ;; Return value:  Size  Location     Type
  4969 ;;		None               void
  4970 ;; Registers used:
  4971 ;;		wreg, status,2, status,0, pclath, cstack
  4972 ;; Tracked objects:
  4973 ;;		On entry : 0/0
  4974 ;;		On exit  : 0/0
  4975 ;;		Unchanged: 0/0
  4976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  4977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4979 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4980 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  4981 ;;Total ram usage:        1 bytes
  4982 ;; Hardware stack levels used:    1
  4983 ;; Hardware stack levels required when called:    6
  4984 ;; This function calls:
  4985 ;;		_WDT_Clearing
  4986 ;; This function is called by:
  4987 ;;		_main
  4988 ;; This function uses a non-reentrant model
  4989 ;;
  4990                           
  4991                           
  4992                           ;psect for function _WDT_Main
  4993  1AAC                     _WDT_Main:	
  4994                           
  4995                           ;MCU_B1.c: 1117: if (WDT.Enable == 1) {
  4996                           
  4997                           ;incstack = 0
  4998                           ; Regs used in _WDT_Main: [wreg+status,2+status,0+pclath+cstack]
  4999  1AAC  0022               	movlb	2	; select bank2
  5000  1AAD  1C36               	btfss	_WDT^(0+256),0
  5001  1AAE  0008               	return
  5002                           
  5003                           ;MCU_B1.c: 1118: if (WDT.Timer-- > 0) {
  5004  1AAF  3001               	movlw	1
  5005  1AB0  02B7               	subwf	(_WDT^(0+256)+1),f
  5006  1AB1  0837               	movf	(_WDT^(0+256)+1),w
  5007  1AB2  3AFF               	xorlw	255
  5008  1AB3  1903               	skipnz
  5009  1AB4  0008               	return
  5010                           
  5011                           ;MCU_B1.c: 1119: WDT.Timer = 100;
  5012  1AB5  3064               	movlw	100
  5013  1AB6  0020               	movlb	0	; select bank0
  5014  1AB7  00A0               	movwf	??_WDT_Main
  5015  1AB8  0820               	movf	??_WDT_Main,w
  5016  1AB9  0022               	movlb	2	; select bank2
  5017  1ABA  00B7               	movwf	(_WDT^(0+256)+1)
  5018                           
  5019                           ;MCU_B1.c: 1120: WDT_Clearing();
  5020  1ABB  3180  2002         	fcall	_WDT_Clearing
  5021  1ABD  0008               	return
  5022  1ABE                     __end_of_WDT_Main:	
  5023                           
  5024                           	psect	text7
  5025  0002                     __ptext7:	
  5026 ;; *************** function _WDT_Clearing *****************
  5027 ;; Defined at:
  5028 ;;		line 1126 in file "../src/MCU_B1.c"
  5029 ;; Parameters:    Size  Location     Type
  5030 ;;		None
  5031 ;; Auto vars:     Size  Location     Type
  5032 ;;		None
  5033 ;; Return value:  Size  Location     Type
  5034 ;;		None               void
  5035 ;; Registers used:
  5036 ;;		None
  5037 ;; Tracked objects:
  5038 ;;		On entry : 0/0
  5039 ;;		On exit  : 0/0
  5040 ;;		Unchanged: 0/0
  5041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5043 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5045 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5046 ;;Total ram usage:        0 bytes
  5047 ;; Hardware stack levels used:    1
  5048 ;; Hardware stack levels required when called:    5
  5049 ;; This function calls:
  5050 ;;		Nothing
  5051 ;; This function is called by:
  5052 ;;		_WDT_Main
  5053 ;; This function uses a non-reentrant model
  5054 ;;
  5055                           
  5056                           
  5057                           ;psect for function _WDT_Clearing
  5058  0002                     _WDT_Clearing:	
  5059                           
  5060                           ;incstack = 0
  5061                           ; Regs used in _WDT_Clearing: []
  5062  0002  0064               	clrwdt	;# 
  5063  0003  0008               	return
  5064  0004                     __end_of_WDT_Clearing:	
  5065                           
  5066                           	psect	text8
  5067  18CA                     __ptext8:	
  5068 ;; *************** function _Temp_Main *****************
  5069 ;; Defined at:
  5070 ;;		line 57 in file "../src/OverTemperature_B1.c"
  5071 ;; Parameters:    Size  Location     Type
  5072 ;;		None
  5073 ;; Auto vars:     Size  Location     Type
  5074 ;;		None
  5075 ;; Return value:  Size  Location     Type
  5076 ;;		None               void
  5077 ;; Registers used:
  5078 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5079 ;; Tracked objects:
  5080 ;;		On entry : 0/0
  5081 ;;		On exit  : 0/0
  5082 ;;		Unchanged: 0/0
  5083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5087 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5088 ;;Total ram usage:        0 bytes
  5089 ;; Hardware stack levels used:    1
  5090 ;; Hardware stack levels required when called:    8
  5091 ;; This function calls:
  5092 ;;		_setTemp_Main
  5093 ;; This function is called by:
  5094 ;;		_main
  5095 ;; This function uses a non-reentrant model
  5096 ;;
  5097                           
  5098                           
  5099                           ;psect for function _Temp_Main
  5100  18CA                     _Temp_Main:	
  5101                           
  5102                           ;OverTemperature_B1.c: 59: setTemp_Main();
  5103                           
  5104                           ;incstack = 0
  5105                           ; Regs used in _Temp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5106  18CA  318D  25E0         	fcall	_setTemp_Main
  5107  18CC  0008               	return
  5108  18CD                     __end_of_Temp_Main:	
  5109                           
  5110                           	psect	text9
  5111  0DE0                     __ptext9:	
  5112 ;; *************** function _setTemp_Main *****************
  5113 ;; Defined at:
  5114 ;;		line 64 in file "../src/OverTemperature_B1.c"
  5115 ;; Parameters:    Size  Location     Type
  5116 ;;		None
  5117 ;; Auto vars:     Size  Location     Type
  5118 ;;  AD              2   76[BANK0 ] unsigned int 
  5119 ;;  DangerValue     2   73[BANK0 ] unsigned int 
  5120 ;;  SafeValue       2   71[BANK0 ] unsigned int 
  5121 ;;  TempGO          1   75[BANK0 ] unsigned char 
  5122 ;;  error           1   70[BANK0 ] unsigned char 
  5123 ;; Return value:  Size  Location     Type
  5124 ;;		None               void
  5125 ;; Registers used:
  5126 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5127 ;; Tracked objects:
  5128 ;;		On entry : 0/0
  5129 ;;		On exit  : 0/0
  5130 ;;		Unchanged: 0/0
  5131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5133 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5134 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5135 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5136 ;;Total ram usage:        9 bytes
  5137 ;; Hardware stack levels used:    1
  5138 ;; Hardware stack levels required when called:    7
  5139 ;; This function calls:
  5140 ;;		_getMain_All_Error_Status
  5141 ;;		_getMain_All_LightsStatus
  5142 ;;		_setBuz
  5143 ;;		_setProductData
  5144 ;; This function is called by:
  5145 ;;		_Temp_Main
  5146 ;; This function uses a non-reentrant model
  5147 ;;
  5148                           
  5149                           
  5150                           ;psect for function _setTemp_Main
  5151  0DE0                     _setTemp_Main:	
  5152                           
  5153                           ;OverTemperature_B1.c: 65: char error = getMain_All_Error_Status(0);
  5154                           
  5155                           ;incstack = 0
  5156                           ; Regs used in _setTemp_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5157  0DE0  3000               	movlw	0
  5158  0DE1  319F  27CD  318D   	fcall	_getMain_All_Error_Status
  5159  0DE4  0020               	movlb	0	; select bank0
  5160  0DE5  00E5               	movwf	??_setTemp_Main
  5161  0DE6  0865               	movf	??_setTemp_Main,w
  5162  0DE7  00E6               	movwf	setTemp_Main@error
  5163                           
  5164                           ;OverTemperature_B1.c: 66: ADtype SafeValue = 0, DangerValue = 0, AD;
  5165  0DE8  01E7               	clrf	setTemp_Main@SafeValue
  5166  0DE9  01E8               	clrf	setTemp_Main@SafeValue+1
  5167  0DEA  01E9               	clrf	setTemp_Main@DangerValue
  5168  0DEB  01EA               	clrf	setTemp_Main@DangerValue+1
  5169                           
  5170                           ;OverTemperature_B1.c: 67: char TempGO = getMain_All_LightsStatus();
  5171  0DEC  319A  22E4  318D   	fcall	_getMain_All_LightsStatus
  5172  0DEF  0020               	movlb	0	; select bank0
  5173  0DF0  00E5               	movwf	??_setTemp_Main
  5174  0DF1  0865               	movf	??_setTemp_Main,w
  5175  0DF2  00EB               	movwf	setTemp_Main@TempGO
  5176                           
  5177                           ;OverTemperature_B1.c: 69: if (Temp.Enable == 1) {
  5178  0DF3  0021               	movlb	1	; select bank1
  5179  0DF4  1C5C               	btfss	_Temp^(0+128),0
  5180  0DF5  2E8D               	goto	l1780
  5181                           
  5182                           ;OverTemperature_B1.c: 77: if (Temp.ADtoGO == 0) {
  5183  0DF6  195C               	btfsc	_Temp^(0+128),2
  5184  0DF7  2E15               	goto	l8316
  5185                           
  5186                           ;OverTemperature_B1.c: 78: if ((TempGO == 1 && Temp.ERROR == 0) || Temp.ERROR == 1) {
  5187  0DF8  0020               	movlb	0	; select bank0
  5188  0DF9  086B               	movf	setTemp_Main@TempGO,w
  5189  0DFA  3A01               	xorlw	1
  5190  0DFB  1D03               	skipz
  5191  0DFC  2E00               	goto	l1786
  5192  0DFD  0021               	movlb	1	; select bank1
  5193  0DFE  1CDC               	btfss	_Temp^(0+128),1
  5194  0DFF  2E03               	goto	l8308
  5195  0E00                     l1786:	
  5196  0E00  0021               	movlb	1	; select bank1
  5197  0E01  1CDC               	btfss	_Temp^(0+128),1
  5198  0E02  2E12               	goto	l8314
  5199  0E03                     l8308:	
  5200                           
  5201                           ;OverTemperature_B1.c: 79: Temp.Time++;
  5202  0E03  3001               	movlw	1
  5203  0E04  07DD               	addwf	(_Temp^(0+128)+1),f
  5204  0E05  3000               	movlw	0
  5205  0E06  3DDE               	addwfc	((_Temp+1)^(0+128)+1),f
  5206                           
  5207                           ;OverTemperature_B1.c: 80: if (Temp.Time >= (5000 / 20)) {
  5208  0E07  3000               	movlw	0
  5209  0E08  025E               	subwf	((_Temp+1)^(0+128)+1),w
  5210  0E09  30FA               	movlw	250
  5211  0E0A  1903               	skipnz
  5212  0E0B  025D               	subwf	(_Temp^(0+128)+1),w
  5213  0E0C  1C03               	skipc
  5214  0E0D  0008               	return
  5215                           
  5216                           ;OverTemperature_B1.c: 81: Temp.Time = 0;
  5217  0E0E  01DD               	clrf	(_Temp^(0+128)+1)
  5218  0E0F  01DE               	clrf	((_Temp+1)^(0+128)+1)
  5219                           
  5220                           ;OverTemperature_B1.c: 82: Temp.ADtoGO = 1;
  5221  0E10  155C               	bsf	_Temp^(0+128),2
  5222                           
  5223                           ;OverTemperature_B1.c: 83: }
  5224                           ;OverTemperature_B1.c: 84: } else {
  5225  0E11  0008               	return
  5226  0E12                     l8314:	
  5227                           
  5228                           ;OverTemperature_B1.c: 85: Temp.Time = 0;
  5229  0E12  01DD               	clrf	(_Temp^(0+128)+1)
  5230  0E13  01DE               	clrf	((_Temp+1)^(0+128)+1)
  5231                           
  5232                           ;OverTemperature_B1.c: 86: }
  5233                           ;OverTemperature_B1.c: 87: } else {
  5234  0E14  0008               	return
  5235  0E15                     l8316:	
  5236                           
  5237                           ;OverTemperature_B1.c: 88: Temp.Time++;
  5238  0E15  3001               	movlw	1
  5239  0E16  07DD               	addwf	(_Temp^(0+128)+1),f
  5240  0E17  3000               	movlw	0
  5241  0E18  3DDE               	addwfc	((_Temp+1)^(0+128)+1),f
  5242                           
  5243                           ;OverTemperature_B1.c: 89: if (Temp.Time >= (100 / 20)) {
  5244  0E19  3000               	movlw	0
  5245  0E1A  025E               	subwf	((_Temp+1)^(0+128)+1),w
  5246  0E1B  3005               	movlw	5
  5247  0E1C  1903               	skipnz
  5248  0E1D  025D               	subwf	(_Temp^(0+128)+1),w
  5249  0E1E  1C03               	skipc
  5250  0E1F  0008               	return
  5251                           
  5252                           ;OverTemperature_B1.c: 90: Temp.Time = 0;
  5253  0E20  01DD               	clrf	(_Temp^(0+128)+1)
  5254  0E21  01DE               	clrf	((_Temp+1)^(0+128)+1)
  5255                           
  5256                           ;OverTemperature_B1.c: 95: if (Temp.ADV > 0) {
  5257  0E22  3008               	movlw	8
  5258  0E23  3EDC               	addlw	_Temp& (0+255)
  5259  0E24  0086               	movwf	6
  5260  0E25  0187               	clrf	7
  5261  0E26  0016               	moviw fsr1++
  5262  0E27  0401               	iorwf	1,w
  5263  0E28  1903               	skipnz
  5264  0E29  2E85               	goto	l1791
  5265                           
  5266                           ;OverTemperature_B1.c: 96: Temp.ADtoGO = 0;
  5267  0E2A  115C               	bcf	_Temp^(0+128),2
  5268                           
  5269                           ;OverTemperature_B1.c: 97: AD = Temp.ADV;
  5270  0E2B  0865               	movf	((_Temp+1)^(0+128)+8),w
  5271  0E2C  0020               	movlb	0	; select bank0
  5272  0E2D  01ED               	clrf	setTemp_Main@AD+1
  5273  0E2E  07ED               	addwf	setTemp_Main@AD+1,f
  5274  0E2F  0021               	movlb	1	; select bank1
  5275  0E30  0864               	movf	(_Temp^(0+128)+8),w
  5276  0E31  0020               	movlb	0	; select bank0
  5277  0E32  01EC               	clrf	setTemp_Main@AD
  5278  0E33  07EC               	addwf	setTemp_Main@AD,f
  5279                           
  5280                           ;OverTemperature_B1.c: 112: SafeValue = 420;
  5281  0E34  30A4               	movlw	164
  5282  0E35  00E7               	movwf	setTemp_Main@SafeValue
  5283  0E36  3001               	movlw	1
  5284  0E37  00E8               	movwf	setTemp_Main@SafeValue+1
  5285                           
  5286                           ;OverTemperature_B1.c: 113: DangerValue = 365;
  5287  0E38  306D               	movlw	109
  5288  0E39  00E9               	movwf	setTemp_Main@DangerValue
  5289  0E3A  3001               	movlw	1
  5290  0E3B  00EA               	movwf	setTemp_Main@DangerValue+1
  5291                           
  5292                           ;OverTemperature_B1.c: 119: if (Temp.ERROR == 1) {
  5293  0E3C  0021               	movlb	1	; select bank1
  5294  0E3D  1CDC               	btfss	_Temp^(0+128),1
  5295  0E3E  2E5D               	goto	l8346
  5296                           
  5297                           ;OverTemperature_B1.c: 120: if (AD >= SafeValue) {
  5298  0E3F  0020               	movlb	0	; select bank0
  5299  0E40  0868               	movf	setTemp_Main@SafeValue+1,w
  5300  0E41  026D               	subwf	setTemp_Main@AD+1,w
  5301  0E42  1D03               	skipz
  5302  0E43  2E46               	goto	u8755
  5303  0E44  0867               	movf	setTemp_Main@SafeValue,w
  5304  0E45  026C               	subwf	setTemp_Main@AD,w
  5305  0E46                     u8755:	
  5306  0E46  1C03               	skipc
  5307  0E47  2E72               	goto	l8356
  5308                           
  5309                           ;OverTemperature_B1.c: 121: Temp.Count++;
  5310  0E48  3001               	movlw	1
  5311  0E49  00E5               	movwf	??_setTemp_Main
  5312  0E4A  0865               	movf	??_setTemp_Main,w
  5313  0E4B  0021               	movlb	1	; select bank1
  5314  0E4C  07DF               	addwf	(_Temp^(0+128)+3),f
  5315                           
  5316                           ;OverTemperature_B1.c: 122: if (Temp.Count >= 3) {
  5317  0E4D  3003               	movlw	3
  5318  0E4E  025F               	subwf	(_Temp^(0+128)+3),w
  5319  0E4F  1C03               	skipc
  5320  0E50  2E74               	goto	l8358
  5321                           
  5322                           ;OverTemperature_B1.c: 123: Temp.Count = 0;
  5323  0E51  01DF               	clrf	(_Temp^(0+128)+3)
  5324                           
  5325                           ;OverTemperature_B1.c: 124: Temp.ERROR = 0;
  5326  0E52  10DC               	bcf	_Temp^(0+128),1
  5327                           
  5328                           ;OverTemperature_B1.c: 125: setBuz(2, 100);
  5329  0E53  3064               	movlw	100
  5330  0E54  0020               	movlb	0	; select bank0
  5331  0E55  00A9               	movwf	setBuz@time
  5332  0E56  3000               	movlw	0
  5333  0E57  00AA               	movwf	setBuz@time+1
  5334  0E58  3002               	movlw	2
  5335  0E59  3194  240B  318D   	fcall	_setBuz
  5336                           
  5337                           ;OverTemperature_B1.c: 126: }
  5338                           ;OverTemperature_B1.c: 127: } else {
  5339  0E5C  2E74               	goto	l8358
  5340  0E5D                     l8346:	
  5341                           ;OverTemperature_B1.c: 129: }
  5342                           ;OverTemperature_B1.c: 130: } else {
  5343                           
  5344                           ;OverTemperature_B1.c: 128: Temp.Count = 0;
  5345                           
  5346                           
  5347                           ;OverTemperature_B1.c: 131: if (AD <= DangerValue) {
  5348  0E5D  0020               	movlb	0	; select bank0
  5349  0E5E  086D               	movf	setTemp_Main@AD+1,w
  5350  0E5F  026A               	subwf	setTemp_Main@DangerValue+1,w
  5351  0E60  1D03               	skipz
  5352  0E61  2E64               	goto	u8775
  5353  0E62  086C               	movf	setTemp_Main@AD,w
  5354  0E63  0269               	subwf	setTemp_Main@DangerValue,w
  5355  0E64                     u8775:	
  5356  0E64  1C03               	skipc
  5357  0E65  2E72               	goto	l8356
  5358                           
  5359                           ;OverTemperature_B1.c: 132: Temp.Count++;
  5360  0E66  3001               	movlw	1
  5361  0E67  00E5               	movwf	??_setTemp_Main
  5362  0E68  0865               	movf	??_setTemp_Main,w
  5363  0E69  0021               	movlb	1	; select bank1
  5364  0E6A  07DF               	addwf	(_Temp^(0+128)+3),f
  5365                           
  5366                           ;OverTemperature_B1.c: 133: if (Temp.Count >= 3) {
  5367  0E6B  3003               	movlw	3
  5368  0E6C  025F               	subwf	(_Temp^(0+128)+3),w
  5369  0E6D  1C03               	skipc
  5370  0E6E  2E74               	goto	l8358
  5371                           
  5372                           ;OverTemperature_B1.c: 134: Temp.Count = 0;
  5373  0E6F  01DF               	clrf	(_Temp^(0+128)+3)
  5374                           
  5375                           ;OverTemperature_B1.c: 135: Temp.ERROR = 1;
  5376  0E70  14DC               	bsf	_Temp^(0+128),1
  5377                           
  5378                           ;OverTemperature_B1.c: 136: }
  5379                           ;OverTemperature_B1.c: 137: } else {
  5380  0E71  2E74               	goto	l8358
  5381  0E72                     l8356:	
  5382                           
  5383                           ;OverTemperature_B1.c: 138: Temp.Count = 0;
  5384  0E72  0021               	movlb	1	; select bank1
  5385  0E73  01DF               	clrf	(_Temp^(0+128)+3)
  5386  0E74                     l8358:	
  5387                           
  5388                           ;OverTemperature_B1.c: 139: }
  5389                           ;OverTemperature_B1.c: 140: }
  5390                           ;OverTemperature_B1.c: 141: setProductData(24, AD >> 8);
  5391  0E74  0020               	movlb	0	; select bank0
  5392  0E75  086D               	movf	setTemp_Main@AD+1,w
  5393  0E76  00E5               	movwf	??_setTemp_Main
  5394  0E77  0865               	movf	??_setTemp_Main,w
  5395  0E78  00E2               	movwf	setProductData@value
  5396  0E79  3018               	movlw	24
  5397  0E7A  3199  2181  318D   	fcall	_setProductData
  5398                           
  5399                           ;OverTemperature_B1.c: 142: setProductData(25, AD);
  5400  0E7D  0020               	movlb	0	; select bank0
  5401  0E7E  086C               	movf	setTemp_Main@AD,w
  5402  0E7F  00E5               	movwf	??_setTemp_Main
  5403  0E80  0865               	movf	??_setTemp_Main,w
  5404  0E81  00E2               	movwf	setProductData@value
  5405  0E82  3019               	movlw	25
  5406  0E83  3199  2181         	fcall	_setProductData
  5407  0E85                     l1791:	
  5408                           
  5409                           ;OverTemperature_B1.c: 158: }
  5410                           ;OverTemperature_B1.c: 159: Temp.ADH[0] = 0;
  5411  0E85  0021               	movlb	1	; select bank1
  5412  0E86  01E0               	clrf	(_Temp^(0+128)+4)
  5413  0E87  01E1               	clrf	((_Temp+1)^(0+128)+4)
  5414                           
  5415                           ;OverTemperature_B1.c: 160: Temp.ADH[1] = 0;
  5416  0E88  01E2               	clrf	(_Temp^(0+128)+6)
  5417  0E89  01E3               	clrf	((_Temp+1)^(0+128)+6)
  5418                           
  5419                           ;OverTemperature_B1.c: 161: Temp.ADV = 0;
  5420  0E8A  01E4               	clrf	(_Temp^(0+128)+8)
  5421  0E8B  01E5               	clrf	((_Temp+1)^(0+128)+8)
  5422                           
  5423                           ;OverTemperature_B1.c: 162: }
  5424                           ;OverTemperature_B1.c: 163: }
  5425                           ;OverTemperature_B1.c: 166: } else {
  5426  0E8C  0008               	return
  5427  0E8D                     l1780:	
  5428                           
  5429                           ;OverTemperature_B1.c: 167: if (myMain.PowerON == 1) {
  5430  0E8D  1C2E               	btfss	_myMain^(0+128),0
  5431  0E8E  0008               	return
  5432                           
  5433                           ;OverTemperature_B1.c: 168: Temp.Enable = 1;
  5434  0E8F  145C               	bsf	_Temp^(0+128),0
  5435  0E90  0008               	return
  5436  0E91                     __end_of_setTemp_Main:	
  5437                           
  5438                           	psect	text10
  5439  18C7                     __ptext10:	
  5440 ;; *************** function _Temp_Initialization *****************
  5441 ;; Defined at:
  5442 ;;		line 8 in file "../src/OverTemperature_B1.c"
  5443 ;; Parameters:    Size  Location     Type
  5444 ;;		None
  5445 ;; Auto vars:     Size  Location     Type
  5446 ;;		None
  5447 ;; Return value:  Size  Location     Type
  5448 ;;		None               void
  5449 ;; Registers used:
  5450 ;;		status,2, status,0, pclath, cstack
  5451 ;; Tracked objects:
  5452 ;;		On entry : 0/0
  5453 ;;		On exit  : 0/0
  5454 ;;		Unchanged: 0/0
  5455 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5457 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5459 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5460 ;;Total ram usage:        0 bytes
  5461 ;; Hardware stack levels used:    1
  5462 ;; Hardware stack levels required when called:    6
  5463 ;; This function calls:
  5464 ;;		_setTemp_Initialization
  5465 ;; This function is called by:
  5466 ;;		_main
  5467 ;; This function uses a non-reentrant model
  5468 ;;
  5469                           
  5470                           
  5471                           ;psect for function _Temp_Initialization
  5472  18C7                     _Temp_Initialization:	
  5473                           
  5474                           ;OverTemperature_B1.c: 10: setTemp_Initialization();
  5475                           
  5476                           ;incstack = 0
  5477                           ; Regs used in _Temp_Initialization: [status,2+status,0+pclath+cstack]
  5478  18C7  3187  27FF         	fcall	_setTemp_Initialization
  5479  18C9  0008               	return
  5480  18CA                     __end_of_Temp_Initialization:	
  5481                           
  5482                           	psect	text11
  5483  07FF                     __ptext11:	
  5484 ;; *************** function _setTemp_Initialization *****************
  5485 ;; Defined at:
  5486 ;;		line 52 in file "../src/OverTemperature_B1.c"
  5487 ;; Parameters:    Size  Location     Type
  5488 ;;		None
  5489 ;; Auto vars:     Size  Location     Type
  5490 ;;		None
  5491 ;; Return value:  Size  Location     Type
  5492 ;;		None               void
  5493 ;; Registers used:
  5494 ;;		None
  5495 ;; Tracked objects:
  5496 ;;		On entry : 0/0
  5497 ;;		On exit  : 0/0
  5498 ;;		Unchanged: 0/0
  5499 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5500 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5501 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5503 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5504 ;;Total ram usage:        0 bytes
  5505 ;; Hardware stack levels used:    1
  5506 ;; Hardware stack levels required when called:    5
  5507 ;; This function calls:
  5508 ;;		Nothing
  5509 ;; This function is called by:
  5510 ;;		_Temp_Initialization
  5511 ;; This function uses a non-reentrant model
  5512 ;;
  5513                           
  5514                           
  5515                           ;psect for function _setTemp_Initialization
  5516  07FF                     _setTemp_Initialization:	
  5517                           
  5518                           ;incstack = 0
  5519                           ; Regs used in _setTemp_Initialization: []
  5520  07FF  0008               	return
  5521  0800                     __end_of_setTemp_Initialization:	
  5522                           
  5523                           	psect	text12
  5524  196A                     __ptext12:	
  5525 ;; *************** function _Switch_Main *****************
  5526 ;; Defined at:
  5527 ;;		line 76 in file "../src/Switch_B1.c"
  5528 ;; Parameters:    Size  Location     Type
  5529 ;;		None
  5530 ;; Auto vars:     Size  Location     Type
  5531 ;;		None
  5532 ;; Return value:  Size  Location     Type
  5533 ;;		None               void
  5534 ;; Registers used:
  5535 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5536 ;; Tracked objects:
  5537 ;;		On entry : 0/0
  5538 ;;		On exit  : 0/0
  5539 ;;		Unchanged: 0/0
  5540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5542 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5544 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5545 ;;Total ram usage:        0 bytes
  5546 ;; Hardware stack levels used:    1
  5547 ;; Hardware stack levels required when called:    9
  5548 ;; This function calls:
  5549 ;;		_TouchPower
  5550 ;;		_setSw_Main
  5551 ;; This function is called by:
  5552 ;;		_main
  5553 ;; This function uses a non-reentrant model
  5554 ;;
  5555                           
  5556                           
  5557                           ;psect for function _Switch_Main
  5558  196A                     _Switch_Main:	
  5559                           
  5560                           ;Switch_B1.c: 79: setSw_Main(1);
  5561                           
  5562                           ;incstack = 0
  5563                           ; Regs used in _Switch_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5564  196A  3001               	movlw	1
  5565  196B  3182  2205  3199   	fcall	_setSw_Main
  5566                           
  5567                           ;Switch_B1.c: 83: setSw_Main(2);
  5568  196E  3002               	movlw	2
  5569  196F  3182  2205  3199   	fcall	_setSw_Main
  5570                           
  5571                           ;Switch_B1.c: 91: TouchPower();
  5572  1972  319B  2384         	fcall	_TouchPower
  5573  1974  0008               	return
  5574  1975                     __end_of_Switch_Main:	
  5575                           
  5576                           	psect	text13
  5577  0205                     __ptext13:	
  5578 ;; *************** function _setSw_Main *****************
  5579 ;; Defined at:
  5580 ;;		line 117 in file "../src/Switch_B1.c"
  5581 ;; Parameters:    Size  Location     Type
  5582 ;;  sw              1    wreg     unsigned char 
  5583 ;; Auto vars:     Size  Location     Type
  5584 ;;  sw              1   20[BANK0 ] unsigned char 
  5585 ;; Return value:  Size  Location     Type
  5586 ;;		None               void
  5587 ;; Registers used:
  5588 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5589 ;; Tracked objects:
  5590 ;;		On entry : 0/0
  5591 ;;		On exit  : 0/0
  5592 ;;		Unchanged: 0/0
  5593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5594 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5595 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5596 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5597 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5598 ;;Total ram usage:        3 bytes
  5599 ;; Hardware stack levels used:    1
  5600 ;; Hardware stack levels required when called:    8
  5601 ;; This function calls:
  5602 ;;		_SwPointSelect
  5603 ;;		_getMain_All_Error_Status
  5604 ;;		_getSw_KeyStatus
  5605 ;;		_setBuz
  5606 ;;		_setDimmerLights_DimmingOn
  5607 ;;		_setDimmerLights_SwOff
  5608 ;;		_setDimmerLights_SwOn
  5609 ;;		_setRF_Learn
  5610 ;; This function is called by:
  5611 ;;		_Switch_Main
  5612 ;; This function uses a non-reentrant model
  5613 ;;
  5614                           
  5615                           
  5616                           ;psect for function _setSw_Main
  5617  0205                     _setSw_Main:	
  5618                           
  5619                           ;incstack = 0
  5620                           ; Regs used in _setSw_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5621                           ;setSw_Main@sw stored from wreg
  5622  0205  0020               	movlb	0	; select bank0
  5623  0206  00B4               	movwf	setSw_Main@sw
  5624                           
  5625                           ;Switch_B1.c: 118: SwPointSelect(sw);
  5626  0207  0834               	movf	setSw_Main@sw,w
  5627  0208  319C  240B  3182   	fcall	_SwPointSelect
  5628                           
  5629                           ;Switch_B1.c: 119: if (Sw->Enable == 1) {
  5630  020B  0021               	movlb	1	; select bank1
  5631  020C  0859               	movf	_Sw^(0+128),w
  5632  020D  0086               	movwf	6
  5633  020E  3001               	movlw	1	; select bank2/3
  5634  020F  0087               	movwf	7
  5635  0210  1C01               	btfss	1,0
  5636  0211  2B81               	goto	l2567
  5637                           
  5638                           ;Switch_B1.c: 121: if (getMain_All_Error_Status(0) == 0) {
  5639  0212  3000               	movlw	0
  5640  0213  319F  27CD  3182   	fcall	_getMain_All_Error_Status
  5641  0216  3800               	iorlw	0
  5642  0217  1D03               	skipz
  5643  0218  2A37               	goto	l8470
  5644                           
  5645                           ;Switch_B1.c: 122: Sw->Detect = 0;
  5646  0219  0021               	movlb	1	; select bank1
  5647  021A  0A59               	incf	_Sw^(0+128),w
  5648  021B  0086               	movwf	6
  5649  021C  3001               	movlw	1	; select bank2/3
  5650  021D  0087               	movwf	7
  5651  021E  1081               	bcf	1,1
  5652                           
  5653                           ;Switch_B1.c: 123: Sw->Touch = getSw_KeyStatus(sw) == 1 ? 1 : 0;
  5654  021F  0020               	movlb	0	; select bank0
  5655  0220  0834               	movf	setSw_Main@sw,w
  5656  0221  319D  2551  3182   	fcall	_getSw_KeyStatus
  5657  0224  3A01               	xorlw	1
  5658  0225  3000               	movlw	0
  5659  0226  1903               	skipnz
  5660  0227  3001               	movlw	1
  5661  0228  0020               	movlb	0	; select bank0
  5662  0229  00B2               	movwf	??_setSw_Main
  5663  022A  0021               	movlb	1	; select bank1
  5664  022B  0859               	movf	_Sw^(0+128),w
  5665  022C  0086               	movwf	6
  5666  022D  3001               	movlw	1	; select bank2/3
  5667  022E  0087               	movwf	7
  5668  022F  0020               	movlb	0	; select bank0
  5669  0230  0DB2               	rlf	??_setSw_Main,f
  5670  0231  0801               	movf	1,w
  5671  0232  0632               	xorwf	??_setSw_Main,w
  5672  0233  39FD               	andlw	-3
  5673  0234  0632               	xorwf	??_setSw_Main,w
  5674  0235  0081               	movwf	1
  5675                           
  5676                           ;Switch_B1.c: 124: } else {
  5677  0236  2A4D               	goto	l2569
  5678  0237                     l8470:	
  5679                           
  5680                           ;Switch_B1.c: 125: if (Sw->Detect == 0) {
  5681  0237  0021               	movlb	1	; select bank1
  5682  0238  0A59               	incf	_Sw^(0+128),w
  5683  0239  0086               	movwf	6
  5684  023A  3001               	movlw	1	; select bank2/3
  5685  023B  0087               	movwf	7
  5686  023C  1881               	btfsc	1,1
  5687  023D  2A4D               	goto	l2569
  5688                           
  5689                           ;Switch_B1.c: 126: Sw->Detect = 1;
  5690  023E  0A59               	incf	_Sw^(0+128),w
  5691  023F  0086               	movwf	6
  5692  0240  3001               	movlw	1	; select bank2/3
  5693  0241  0087               	movwf	7
  5694  0242  1481               	bsf	1,1
  5695                           
  5696                           ;Switch_B1.c: 128: Sw->Touch = 0;
  5697  0243  0859               	movf	_Sw^(0+128),w
  5698  0244  0086               	movwf	6
  5699  0245  3001               	movlw	1	; select bank2/3
  5700  0246  0087               	movwf	7
  5701  0247  1081               	bcf	1,1
  5702                           
  5703                           ;Switch_B1.c: 129: Sw->Debounce = 1;
  5704  0248  0859               	movf	_Sw^(0+128),w
  5705  0249  0086               	movwf	6
  5706  024A  3001               	movlw	1	; select bank2/3
  5707  024B  0087               	movwf	7
  5708  024C  1501               	bsf	1,2
  5709  024D                     l2569:	
  5710                           
  5711                           ;Switch_B1.c: 130: }
  5712                           ;Switch_B1.c: 131: }
  5713                           ;Switch_B1.c: 133: if (Sw->Touch == 1) {
  5714  024D  0021               	movlb	1	; select bank1
  5715  024E  0859               	movf	_Sw^(0+128),w
  5716  024F  0086               	movwf	6
  5717  0250  3001               	movlw	1	; select bank2/3
  5718  0251  0087               	movwf	7
  5719  0252  1C81               	btfss	1,1
  5720  0253  2B29               	goto	l8520
  5721                           
  5722                           ;Switch_B1.c: 134: if (Sw->Debounce == 0) {
  5723  0254  0859               	movf	_Sw^(0+128),w
  5724  0255  0086               	movwf	6
  5725  0256  3001               	movlw	1	; select bank2/3
  5726  0257  0087               	movwf	7
  5727  0258  1901               	btfsc	1,2
  5728  0259  2A80               	goto	l8486
  5729                           
  5730                           ;Switch_B1.c: 135: Sw->DebounceTime++;
  5731  025A  3001               	movlw	1
  5732  025B  0020               	movlb	0	; select bank0
  5733  025C  00B2               	movwf	??_setSw_Main
  5734  025D  0021               	movlb	1	; select bank1
  5735  025E  0859               	movf	_Sw^(0+128),w
  5736  025F  3E02               	addlw	2
  5737  0260  0086               	movwf	6
  5738  0261  3001               	movlw	1	; select bank2/3
  5739  0262  0087               	movwf	7
  5740  0263  0020               	movlb	0	; select bank0
  5741  0264  0832               	movf	??_setSw_Main,w
  5742  0265  0781               	addwf	1,f
  5743                           
  5744                           ;Switch_B1.c: 136: if (Sw->DebounceTime >= (60 / 20)) {
  5745  0266  0021               	movlb	1	; select bank1
  5746  0267  0859               	movf	_Sw^(0+128),w
  5747  0268  3E02               	addlw	2
  5748  0269  0086               	movwf	6
  5749  026A  3001               	movlw	1	; select bank2/3
  5750  026B  0087               	movwf	7
  5751  026C  3003               	movlw	3
  5752  026D  0201               	subwf	1,w
  5753  026E  1C03               	skipc
  5754  026F  0008               	return
  5755                           
  5756                           ;Switch_B1.c: 137: Sw->DebounceTime = 0;
  5757  0270  0859               	movf	_Sw^(0+128),w
  5758  0271  3E02               	addlw	2
  5759  0272  0086               	movwf	6
  5760  0273  3001               	movlw	1	; select bank2/3
  5761  0274  0087               	movwf	7
  5762  0275  0181               	clrf	1
  5763                           
  5764                           ;Switch_B1.c: 138: Sw->Debounce = 1;
  5765  0276  0859               	movf	_Sw^(0+128),w
  5766  0277  0086               	movwf	6
  5767  0278  3001               	movlw	1	; select bank2/3
  5768  0279  0087               	movwf	7
  5769  027A  1501               	bsf	1,2
  5770                           
  5771                           ;Switch_B1.c: 143: setDimmerLights_SwOn(sw);
  5772  027B  0020               	movlb	0	; select bank0
  5773  027C  0834               	movf	setSw_Main@sw,w
  5774  027D  3188  2000         	fcall	_setDimmerLights_SwOn
  5775                           
  5776                           ;Switch_B1.c: 146: }
  5777                           ;Switch_B1.c: 147: } else {
  5778  027F  0008               	return
  5779  0280                     l8486:	
  5780                           
  5781                           ;Switch_B1.c: 148: if (Sw->Hold1 == 0) {
  5782  0280  0021               	movlb	1	; select bank1
  5783  0281  0859               	movf	_Sw^(0+128),w
  5784  0282  0086               	movwf	6
  5785  0283  3001               	movlw	1	; select bank2/3
  5786  0284  0087               	movwf	7
  5787  0285  1981               	btfsc	1,3
  5788  0286  2AB5               	goto	l8496
  5789                           
  5790                           ;Switch_B1.c: 149: Sw->Hold1Time++;
  5791  0287  0859               	movf	_Sw^(0+128),w
  5792  0288  3E03               	addlw	3
  5793  0289  0086               	movwf	6
  5794  028A  3001               	movlw	1	; select bank2/3
  5795  028B  0087               	movwf	7
  5796  028C  3001               	movlw	1
  5797  028D  0781               	addwf	1,f
  5798  028E  3141               	addfsr 1,1
  5799  028F  1803               	skipnc
  5800  0290  0A81               	incf	1,f
  5801                           
  5802                           ;Switch_B1.c: 150: if (Sw->Hold1Time >= (1500 / 20)) {
  5803  0291  0859               	movf	_Sw^(0+128),w
  5804  0292  3E03               	addlw	3
  5805  0293  0086               	movwf	6
  5806  0294  3001               	movlw	1	; select bank2/3
  5807  0295  0087               	movwf	7
  5808  0296  3F40               	moviw [0]fsr1
  5809  0297  0020               	movlb	0	; select bank0
  5810  0298  00B2               	movwf	??_setSw_Main
  5811  0299  3F41               	moviw [1]fsr1
  5812  029A  00B3               	movwf	??_setSw_Main+1
  5813  029B  3000               	movlw	0
  5814  029C  0233               	subwf	??_setSw_Main+1,w
  5815  029D  304B               	movlw	75
  5816  029E  1903               	skipnz
  5817  029F  0232               	subwf	??_setSw_Main,w
  5818  02A0  1C03               	skipc
  5819  02A1  0008               	return
  5820                           
  5821                           ;Switch_B1.c: 151: Sw->Hold1Time = 0;
  5822  02A2  0021               	movlb	1	; select bank1
  5823  02A3  0859               	movf	_Sw^(0+128),w
  5824  02A4  3E03               	addlw	3
  5825  02A5  0086               	movwf	6
  5826  02A6  3001               	movlw	1	; select bank2/3
  5827  02A7  0087               	movwf	7
  5828  02A8  3000               	movlw	0
  5829  02A9  3FC0               	movwi [0]fsr1
  5830  02AA  3FC1               	movwi [1]fsr1
  5831                           
  5832                           ;Switch_B1.c: 152: Sw->Hold1 = 1;
  5833  02AB  0859               	movf	_Sw^(0+128),w
  5834  02AC  0086               	movwf	6
  5835  02AD  3001               	movlw	1	; select bank2/3
  5836  02AE  0087               	movwf	7
  5837  02AF  1581               	bsf	1,3
  5838                           
  5839                           ;Switch_B1.c: 158: setDimmerLights_DimmingOn(sw);
  5840  02B0  0020               	movlb	0	; select bank0
  5841  02B1  0834               	movf	setSw_Main@sw,w
  5842  02B2  319E  26C3         	fcall	_setDimmerLights_DimmingOn
  5843                           
  5844                           ;Switch_B1.c: 161: }
  5845                           ;Switch_B1.c: 162: } else {
  5846  02B4  0008               	return
  5847  02B5                     l8496:	
  5848                           
  5849                           ;Switch_B1.c: 164: if (Sw->Hold2 == 0) {
  5850  02B5  0021               	movlb	1	; select bank1
  5851  02B6  0859               	movf	_Sw^(0+128),w
  5852  02B7  0086               	movwf	6
  5853  02B8  3001               	movlw	1	; select bank2/3
  5854  02B9  0087               	movwf	7
  5855  02BA  1A01               	btfsc	1,4
  5856  02BB  2AF5               	goto	l8510
  5857                           
  5858                           ;Switch_B1.c: 165: Sw->Hold2Time++;
  5859  02BC  0859               	movf	_Sw^(0+128),w
  5860  02BD  3E05               	addlw	5
  5861  02BE  0086               	movwf	6
  5862  02BF  3001               	movlw	1	; select bank2/3
  5863  02C0  0087               	movwf	7
  5864  02C1  3001               	movlw	1
  5865  02C2  0781               	addwf	1,f
  5866  02C3  3141               	addfsr 1,1
  5867  02C4  1803               	skipnc
  5868  02C5  0A81               	incf	1,f
  5869                           
  5870                           ;Switch_B1.c: 166: if (Sw->Hold2Time >= (1500 / 20)) {
  5871  02C6  0859               	movf	_Sw^(0+128),w
  5872  02C7  3E05               	addlw	5
  5873  02C8  0086               	movwf	6
  5874  02C9  3001               	movlw	1	; select bank2/3
  5875  02CA  0087               	movwf	7
  5876  02CB  3F40               	moviw [0]fsr1
  5877  02CC  0020               	movlb	0	; select bank0
  5878  02CD  00B2               	movwf	??_setSw_Main
  5879  02CE  3F41               	moviw [1]fsr1
  5880  02CF  00B3               	movwf	??_setSw_Main+1
  5881  02D0  3000               	movlw	0
  5882  02D1  0233               	subwf	??_setSw_Main+1,w
  5883  02D2  304B               	movlw	75
  5884  02D3  1903               	skipnz
  5885  02D4  0232               	subwf	??_setSw_Main,w
  5886  02D5  1C03               	skipc
  5887  02D6  0008               	return
  5888                           
  5889                           ;Switch_B1.c: 167: Sw->Hold2Time = 0;
  5890  02D7  0021               	movlb	1	; select bank1
  5891  02D8  0859               	movf	_Sw^(0+128),w
  5892  02D9  3E05               	addlw	5
  5893  02DA  0086               	movwf	6
  5894  02DB  3001               	movlw	1	; select bank2/3
  5895  02DC  0087               	movwf	7
  5896  02DD  3000               	movlw	0
  5897  02DE  3FC0               	movwi [0]fsr1
  5898  02DF  3FC1               	movwi [1]fsr1
  5899                           
  5900                           ;Switch_B1.c: 168: Sw->Hold2 = 1;
  5901  02E0  0859               	movf	_Sw^(0+128),w
  5902  02E1  0086               	movwf	6
  5903  02E2  3001               	movlw	1	; select bank2/3
  5904  02E3  0087               	movwf	7
  5905  02E4  1601               	bsf	1,4
  5906                           
  5907                           ;Switch_B1.c: 171: setRF_Learn(1);
  5908  02E5  3001               	movlw	1
  5909  02E6  319B  2331  3182   	fcall	_setRF_Learn
  5910                           
  5911                           ;Switch_B1.c: 172: if (myMain.First == 1) {
  5912  02E9  0021               	movlb	1	; select bank1
  5913  02EA  1EAE               	btfss	_myMain^(0+128),5
  5914  02EB  0008               	return
  5915                           
  5916                           ;Switch_B1.c: 173: setBuz(2, 100);
  5917  02EC  3064               	movlw	100
  5918  02ED  0020               	movlb	0	; select bank0
  5919  02EE  00A9               	movwf	setBuz@time
  5920  02EF  3000               	movlw	0
  5921  02F0  00AA               	movwf	setBuz@time+1
  5922  02F1  3002               	movlw	2
  5923  02F2  3194  240B         	fcall	_setBuz
  5924                           
  5925                           ;Switch_B1.c: 174: }
  5926                           ;Switch_B1.c: 178: }
  5927                           ;Switch_B1.c: 179: } else {
  5928  02F4  0008               	return
  5929  02F5                     l8510:	
  5930                           
  5931                           ;Switch_B1.c: 180: if (Sw->Hold3 == 0) {
  5932  02F5  0021               	movlb	1	; select bank1
  5933  02F6  0859               	movf	_Sw^(0+128),w
  5934  02F7  0086               	movwf	6
  5935  02F8  3001               	movlw	1	; select bank2/3
  5936  02F9  0087               	movwf	7
  5937  02FA  1A81               	btfsc	1,5
  5938  02FB  0008               	return
  5939                           
  5940                           ;Switch_B1.c: 181: Sw->Hold3Time++;
  5941  02FC  0859               	movf	_Sw^(0+128),w
  5942  02FD  3E07               	addlw	7
  5943  02FE  0086               	movwf	6
  5944  02FF  3001               	movlw	1	; select bank2/3
  5945  0300  0087               	movwf	7
  5946  0301  3001               	movlw	1
  5947  0302  0781               	addwf	1,f
  5948  0303  3141               	addfsr 1,1
  5949  0304  1803               	skipnc
  5950  0305  0A81               	incf	1,f
  5951                           
  5952                           ;Switch_B1.c: 182: if (Sw->Hold3Time >= (3000 / 20)) {
  5953  0306  0859               	movf	_Sw^(0+128),w
  5954  0307  3E07               	addlw	7
  5955  0308  0086               	movwf	6
  5956  0309  3001               	movlw	1	; select bank2/3
  5957  030A  0087               	movwf	7
  5958  030B  3F40               	moviw [0]fsr1
  5959  030C  0020               	movlb	0	; select bank0
  5960  030D  00B2               	movwf	??_setSw_Main
  5961  030E  3F41               	moviw [1]fsr1
  5962  030F  00B3               	movwf	??_setSw_Main+1
  5963  0310  3000               	movlw	0
  5964  0311  0233               	subwf	??_setSw_Main+1,w
  5965  0312  3096               	movlw	150
  5966  0313  1903               	skipnz
  5967  0314  0232               	subwf	??_setSw_Main,w
  5968  0315  1C03               	skipc
  5969  0316  0008               	return
  5970                           
  5971                           ;Switch_B1.c: 183: Sw->Hold3Time = 0;
  5972  0317  0021               	movlb	1	; select bank1
  5973  0318  0859               	movf	_Sw^(0+128),w
  5974  0319  3E07               	addlw	7
  5975  031A  0086               	movwf	6
  5976  031B  3001               	movlw	1	; select bank2/3
  5977  031C  0087               	movwf	7
  5978  031D  3000               	movlw	0
  5979  031E  3FC0               	movwi [0]fsr1
  5980  031F  3FC1               	movwi [1]fsr1
  5981                           
  5982                           ;Switch_B1.c: 184: Sw->Hold3 = 1;
  5983  0320  0859               	movf	_Sw^(0+128),w
  5984  0321  0086               	movwf	6
  5985  0322  3001               	movlw	1	; select bank2/3
  5986  0323  0087               	movwf	7
  5987  0324  1681               	bsf	1,5
  5988                           
  5989                           ;Switch_B1.c: 187: setRF_Learn(0);
  5990  0325  3000               	movlw	0
  5991  0326  319B  2331         	fcall	_setRF_Learn
  5992                           
  5993                           ;Switch_B1.c: 190: }
  5994                           ;Switch_B1.c: 191: }
  5995                           ;Switch_B1.c: 192: }
  5996                           ;Switch_B1.c: 194: }
  5997                           ;Switch_B1.c: 195: }
  5998                           ;Switch_B1.c: 196: } else {
  5999  0328  0008               	return
  6000  0329                     l8520:	
  6001                           
  6002                           ;Switch_B1.c: 197: if (Sw->Debounce == 1) {
  6003  0329  0021               	movlb	1	; select bank1
  6004  032A  0859               	movf	_Sw^(0+128),w
  6005  032B  0086               	movwf	6
  6006  032C  3001               	movlw	1	; select bank2/3
  6007  032D  0087               	movwf	7
  6008  032E  1D01               	btfss	1,2
  6009  032F  0008               	return
  6010                           
  6011                           ;Switch_B1.c: 198: Sw->DebounceTime++;
  6012  0330  3001               	movlw	1
  6013  0331  0020               	movlb	0	; select bank0
  6014  0332  00B2               	movwf	??_setSw_Main
  6015  0333  0021               	movlb	1	; select bank1
  6016  0334  0859               	movf	_Sw^(0+128),w
  6017  0335  3E02               	addlw	2
  6018  0336  0086               	movwf	6
  6019  0337  3001               	movlw	1	; select bank2/3
  6020  0338  0087               	movwf	7
  6021  0339  0020               	movlb	0	; select bank0
  6022  033A  0832               	movf	??_setSw_Main,w
  6023  033B  0781               	addwf	1,f
  6024                           
  6025                           ;Switch_B1.c: 199: if (Sw->DebounceTime >= (60 / 20)) {
  6026  033C  0021               	movlb	1	; select bank1
  6027  033D  0859               	movf	_Sw^(0+128),w
  6028  033E  3E02               	addlw	2
  6029  033F  0086               	movwf	6
  6030  0340  3001               	movlw	1	; select bank2/3
  6031  0341  0087               	movwf	7
  6032  0342  3003               	movlw	3
  6033  0343  0201               	subwf	1,w
  6034  0344  1C03               	skipc
  6035  0345  0008               	return
  6036                           
  6037                           ;Switch_B1.c: 200: Sw->DebounceTime = 0;
  6038  0346  0859               	movf	_Sw^(0+128),w
  6039  0347  3E02               	addlw	2
  6040  0348  0086               	movwf	6
  6041  0349  3001               	movlw	1	; select bank2/3
  6042  034A  0087               	movwf	7
  6043  034B  0181               	clrf	1
  6044                           
  6045                           ;Switch_B1.c: 201: Sw->Debounce = 0;
  6046  034C  0859               	movf	_Sw^(0+128),w
  6047  034D  0086               	movwf	6
  6048  034E  3001               	movlw	1	; select bank2/3
  6049  034F  0087               	movwf	7
  6050  0350  1101               	bcf	1,2
  6051                           
  6052                           ;Switch_B1.c: 202: Sw->Hold1Time = 0;
  6053  0351  0859               	movf	_Sw^(0+128),w
  6054  0352  3E03               	addlw	3
  6055  0353  0086               	movwf	6
  6056  0354  3001               	movlw	1	; select bank2/3
  6057  0355  0087               	movwf	7
  6058  0356  3000               	movlw	0
  6059  0357  3FC0               	movwi [0]fsr1
  6060  0358  3FC1               	movwi [1]fsr1
  6061                           
  6062                           ;Switch_B1.c: 203: Sw->Hold1 = 0;
  6063  0359  0859               	movf	_Sw^(0+128),w
  6064  035A  0086               	movwf	6
  6065  035B  3001               	movlw	1	; select bank2/3
  6066  035C  0087               	movwf	7
  6067  035D  1181               	bcf	1,3
  6068                           
  6069                           ;Switch_B1.c: 205: Sw->Hold2 = 0;
  6070  035E  0859               	movf	_Sw^(0+128),w
  6071  035F  0086               	movwf	6
  6072  0360  3001               	movlw	1	; select bank2/3
  6073  0361  0087               	movwf	7
  6074  0362  1201               	bcf	1,4
  6075                           
  6076                           ;Switch_B1.c: 206: Sw->Hold3 = 0;
  6077  0363  0859               	movf	_Sw^(0+128),w
  6078  0364  0086               	movwf	6
  6079  0365  3001               	movlw	1	; select bank2/3
  6080  0366  0087               	movwf	7
  6081  0367  1281               	bcf	1,5
  6082                           
  6083                           ;Switch_B1.c: 207: Sw->Hold2Time = 0;
  6084  0368  0859               	movf	_Sw^(0+128),w
  6085  0369  3E05               	addlw	5
  6086  036A  0086               	movwf	6
  6087  036B  3001               	movlw	1	; select bank2/3
  6088  036C  0087               	movwf	7
  6089  036D  3000               	movlw	0
  6090  036E  3FC0               	movwi [0]fsr1
  6091  036F  3FC1               	movwi [1]fsr1
  6092                           
  6093                           ;Switch_B1.c: 208: Sw->Hold3Time = 0;
  6094  0370  0859               	movf	_Sw^(0+128),w
  6095  0371  3E07               	addlw	7
  6096  0372  0086               	movwf	6
  6097  0373  3001               	movlw	1	; select bank2/3
  6098  0374  0087               	movwf	7
  6099  0375  3000               	movlw	0
  6100  0376  3FC0               	movwi [0]fsr1
  6101  0377  3FC1               	movwi [1]fsr1
  6102                           
  6103                           ;Switch_B1.c: 215: setDimmerLights_SwOff(sw);
  6104  0378  0020               	movlb	0	; select bank0
  6105  0379  0834               	movf	setSw_Main@sw,w
  6106  037A  3187  27C6  3182   	fcall	_setDimmerLights_SwOff
  6107                           
  6108                           ;Switch_B1.c: 219: setRF_Learn(0);
  6109  037D  3000               	movlw	0
  6110  037E  319B  2331         	fcall	_setRF_Learn
  6111                           
  6112                           ;Switch_B1.c: 221: }
  6113                           ;Switch_B1.c: 222: }
  6114                           ;Switch_B1.c: 223: }
  6115                           ;Switch_B1.c: 224: } else {
  6116  0380  0008               	return
  6117  0381                     l2567:	
  6118                           
  6119                           ;Switch_B1.c: 225: if (myMain.PowerON == 1) {
  6120  0381  1C2E               	btfss	_myMain^(0+128),0
  6121  0382  0008               	return
  6122                           
  6123                           ;Switch_B1.c: 226: Sw->Enable = 1;
  6124  0383  0859               	movf	_Sw^(0+128),w
  6125  0384  0086               	movwf	6
  6126  0385  3001               	movlw	1	; select bank2/3
  6127  0386  0087               	movwf	7
  6128  0387  1401               	bsf	1,0
  6129  0388  0008               	return
  6130  0389                     __end_of_setSw_Main:	
  6131                           
  6132                           	psect	text14
  6133  1B31                     __ptext14:	
  6134 ;; *************** function _setRF_Learn *****************
  6135 ;; Defined at:
  6136 ;;		line 33 in file "../src/RF_Control_B1.c"
  6137 ;; Parameters:    Size  Location     Type
  6138 ;;  command         1    wreg     unsigned char 
  6139 ;; Auto vars:     Size  Location     Type
  6140 ;;  command         1    1[BANK0 ] unsigned char 
  6141 ;; Return value:  Size  Location     Type
  6142 ;;		None               void
  6143 ;; Registers used:
  6144 ;;		wreg, status,2, status,0
  6145 ;; Tracked objects:
  6146 ;;		On entry : 0/0
  6147 ;;		On exit  : 0/0
  6148 ;;		Unchanged: 0/0
  6149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6151 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6152 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6153 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6154 ;;Total ram usage:        2 bytes
  6155 ;; Hardware stack levels used:    1
  6156 ;; Hardware stack levels required when called:    5
  6157 ;; This function calls:
  6158 ;;		Nothing
  6159 ;; This function is called by:
  6160 ;;		_setSw_Main
  6161 ;; This function uses a non-reentrant model
  6162 ;;
  6163                           
  6164                           
  6165                           ;psect for function _setRF_Learn
  6166  1B31                     _setRF_Learn:	
  6167                           
  6168                           ;incstack = 0
  6169                           ; Regs used in _setRF_Learn: [wreg+status,2+status,0]
  6170                           ;setRF_Learn@command stored from wreg
  6171  1B31  0020               	movlb	0	; select bank0
  6172  1B32  00A1               	movwf	setRF_Learn@command
  6173                           
  6174                           ;RF_Control_B1.c: 34: RF1.Learn = command == 1 ? 1 : 0;
  6175  1B33  0821               	movf	setRF_Learn@command,w
  6176  1B34  3A01               	xorlw	1
  6177  1B35  3000               	movlw	0
  6178  1B36  1903               	skipnz
  6179  1B37  3001               	movlw	1
  6180  1B38  00A0               	movwf	??_setRF_Learn
  6181  1B39  0EA0               	swapf	??_setRF_Learn,f
  6182  1B3A  0DA0               	rlf	??_setRF_Learn,f
  6183  1B3B  0DA0               	rlf	??_setRF_Learn,f
  6184  1B3C  0021               	movlb	1	; select bank1
  6185  1B3D  0820               	movf	_RF1^(0+128),w
  6186  1B3E  0020               	movlb	0	; select bank0
  6187  1B3F  0620               	xorwf	??_setRF_Learn,w
  6188  1B40  39BF               	andlw	-65
  6189  1B41  0620               	xorwf	??_setRF_Learn,w
  6190  1B42  0021               	movlb	1	; select bank1
  6191  1B43  00A0               	movwf	_RF1^(0+128)
  6192  1B44  0008               	return
  6193  1B45                     __end_of_setRF_Learn:	
  6194                           
  6195                           	psect	text15
  6196  1EC3                     __ptext15:	
  6197 ;; *************** function _setDimmerLights_DimmingOn *****************
  6198 ;; Defined at:
  6199 ;;		line 753 in file "../src/Dimmer_B1.c"
  6200 ;; Parameters:    Size  Location     Type
  6201 ;;  sw              1    wreg     unsigned char 
  6202 ;; Auto vars:     Size  Location     Type
  6203 ;;  sw              1    2[BANK0 ] unsigned char 
  6204 ;; Return value:  Size  Location     Type
  6205 ;;		None               void
  6206 ;; Registers used:
  6207 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6208 ;; Tracked objects:
  6209 ;;		On entry : 0/0
  6210 ;;		On exit  : 0/0
  6211 ;;		Unchanged: 0/0
  6212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6214 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6216 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6217 ;;Total ram usage:        1 bytes
  6218 ;; Hardware stack levels used:    1
  6219 ;; Hardware stack levels required when called:    6
  6220 ;; This function calls:
  6221 ;;		_DimmerLights_SelectPointer
  6222 ;; This function is called by:
  6223 ;;		_setSw_Main
  6224 ;; This function uses a non-reentrant model
  6225 ;;
  6226                           
  6227                           
  6228                           ;psect for function _setDimmerLights_DimmingOn
  6229  1EC3                     _setDimmerLights_DimmingOn:	
  6230                           
  6231                           ;incstack = 0
  6232                           ; Regs used in _setDimmerLights_DimmingOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
  6233                           ;setDimmerLights_DimmingOn@sw stored from wreg
  6234  1EC3  0020               	movlb	0	; select bank0
  6235  1EC4  00A2               	movwf	setDimmerLights_DimmingOn@sw
  6236                           
  6237                           ;Dimmer_B1.c: 759: DimmerLights_SelectPointer(sw);
  6238  1EC5  0822               	movf	setDimmerLights_DimmingOn@sw,w
  6239  1EC6  319B  23C6  319E   	fcall	_DimmerLights_SelectPointer
  6240                           
  6241                           ;Dimmer_B1.c: 760: if (DimmerLights->Trigger == 0) {
  6242  1EC9  0021               	movlb	1	; select bank1
  6243  1ECA  0856               	movf	_DimmerLights^(0+128),w
  6244  1ECB  0086               	movwf	6
  6245  1ECC  3001               	movlw	1	; select bank2/3
  6246  1ECD  0087               	movwf	7
  6247  1ECE  1881               	btfsc	1,1
  6248  1ECF  0008               	return
  6249                           
  6250                           ;Dimmer_B1.c: 761: if (DimmerLights->SwFlag == 1) {
  6251  1ED0  0856               	movf	_DimmerLights^(0+128),w
  6252  1ED1  0086               	movwf	6
  6253  1ED2  3001               	movlw	1	; select bank2/3
  6254  1ED3  0087               	movwf	7
  6255  1ED4  1C01               	btfss	1,0
  6256  1ED5  0008               	return
  6257                           
  6258                           ;Dimmer_B1.c: 762: DimmerLights->Status = 1;
  6259  1ED6  0A56               	incf	_DimmerLights^(0+128),w
  6260  1ED7  0086               	movwf	6
  6261  1ED8  3001               	movlw	1	; select bank2/3
  6262  1ED9  0087               	movwf	7
  6263  1EDA  1401               	bsf	1,0
  6264                           
  6265                           ;Dimmer_B1.c: 764: DimmerLights->DimmingSwFlag = 1;
  6266  1EDB  0856               	movf	_DimmerLights^(0+128),w
  6267  1EDC  0086               	movwf	6
  6268  1EDD  3001               	movlw	1	; select bank2/3
  6269  1EDE  0087               	movwf	7
  6270  1EDF  1581               	bsf	1,3
  6271                           
  6272                           ;Dimmer_B1.c: 765: DimmerLights->DimmingTrigger = 1;
  6273  1EE0  0856               	movf	_DimmerLights^(0+128),w
  6274  1EE1  0086               	movwf	6
  6275  1EE2  3001               	movlw	1	; select bank2/3
  6276  1EE3  0087               	movwf	7
  6277  1EE4  1601               	bsf	1,4
  6278                           
  6279                           ;Dimmer_B1.c: 766: DimmerLights->DimmingSwitch = 1;
  6280  1EE5  0856               	movf	_DimmerLights^(0+128),w
  6281  1EE6  0086               	movwf	6
  6282  1EE7  3001               	movlw	1	; select bank2/3
  6283  1EE8  0087               	movwf	7
  6284  1EE9  1681               	bsf	1,5
  6285  1EEA  0008               	return
  6286  1EEB                     __end_of_setDimmerLights_DimmingOn:	
  6287                           
  6288                           	psect	text16
  6289  1D51                     __ptext16:	
  6290 ;; *************** function _getSw_KeyStatus *****************
  6291 ;; Defined at:
  6292 ;;		line 237 in file "../src/Switch_B1.c"
  6293 ;; Parameters:    Size  Location     Type
  6294 ;;  sw              1    wreg     unsigned char 
  6295 ;; Auto vars:     Size  Location     Type
  6296 ;;  sw              1    4[BANK0 ] unsigned char 
  6297 ;;  status          1    3[BANK0 ] unsigned char 
  6298 ;; Return value:  Size  Location     Type
  6299 ;;                  1    wreg      unsigned char 
  6300 ;; Registers used:
  6301 ;;		wreg, status,2
  6302 ;; Tracked objects:
  6303 ;;		On entry : 0/0
  6304 ;;		On exit  : 0/0
  6305 ;;		Unchanged: 0/0
  6306 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6308 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6309 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6310 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6311 ;;Total ram usage:        5 bytes
  6312 ;; Hardware stack levels used:    1
  6313 ;; Hardware stack levels required when called:    5
  6314 ;; This function calls:
  6315 ;;		Nothing
  6316 ;; This function is called by:
  6317 ;;		_setSw_Main
  6318 ;; This function uses a non-reentrant model
  6319 ;;
  6320                           
  6321                           
  6322                           ;psect for function _getSw_KeyStatus
  6323  1D51                     _getSw_KeyStatus:	
  6324                           
  6325                           ;incstack = 0
  6326                           ; Regs used in _getSw_KeyStatus: [wreg+status,2]
  6327                           ;getSw_KeyStatus@sw stored from wreg
  6328  1D51  0020               	movlb	0	; select bank0
  6329  1D52  00A4               	movwf	getSw_KeyStatus@sw
  6330                           
  6331                           ;Switch_B1.c: 238: char status = 0;
  6332  1D53  01A3               	clrf	getSw_KeyStatus@status
  6333                           
  6334                           ;Switch_B1.c: 258: if (sw == 1) {
  6335  1D54  0824               	movf	getSw_KeyStatus@sw,w
  6336  1D55  3A01               	xorlw	1
  6337  1D56  1D03               	skipz
  6338  1D57  2D60               	goto	l7774
  6339                           
  6340                           ;Switch_B1.c: 259: status = RA0 == 1 || RB1 == 1 ? 1 : 0;
  6341  1D58  01A1               	clrf	_getSw_KeyStatus$6166
  6342  1D59  0AA1               	incf	_getSw_KeyStatus$6166,f
  6343  1D5A  1C0C               	btfss	12,0	;volatile
  6344  1D5B  188D               	btfsc	13,1	;volatile
  6345  1D5C  2D5E               	goto	l7772
  6346  1D5D  01A1               	clrf	_getSw_KeyStatus$6166
  6347  1D5E                     l7772:	
  6348  1D5E  0821               	movf	_getSw_KeyStatus$6166,w
  6349  1D5F  2D6B               	goto	L2
  6350  1D60                     l7774:	
  6351                           ;Switch_B1.c: 260: } else if (sw == 2) {
  6352                           
  6353  1D60  0824               	movf	getSw_KeyStatus@sw,w
  6354  1D61  3A02               	xorlw	2
  6355  1D62  1D03               	skipz
  6356  1D63  2D6E               	goto	l7784
  6357                           
  6358                           ;Switch_B1.c: 261: status = RA6 == 1 || RA4 == 1 ? 1 : 0;
  6359  1D64  01A2               	clrf	_getSw_KeyStatus$6167
  6360  1D65  0AA2               	incf	_getSw_KeyStatus$6167,f
  6361  1D66  1F0C               	btfss	12,6	;volatile
  6362  1D67  1A0C               	btfsc	12,4	;volatile
  6363  1D68  2D6A               	goto	l7782
  6364  1D69  01A2               	clrf	_getSw_KeyStatus$6167
  6365  1D6A                     l7782:	
  6366  1D6A  0822               	movf	_getSw_KeyStatus$6167,w
  6367  1D6B                     L2:	
  6368  1D6B  00A0               	movwf	??_getSw_KeyStatus
  6369  1D6C  0820               	movf	??_getSw_KeyStatus,w
  6370  1D6D  00A3               	movwf	getSw_KeyStatus@status
  6371  1D6E                     l7784:	
  6372                           
  6373                           ;Switch_B1.c: 262: }
  6374                           ;Switch_B1.c: 275: return status;
  6375  1D6E  0823               	movf	getSw_KeyStatus@status,w
  6376  1D6F  0008               	return
  6377  1D70                     __end_of_getSw_KeyStatus:	
  6378                           
  6379                           	psect	text17
  6380  1C0B                     __ptext17:	
  6381 ;; *************** function _SwPointSelect *****************
  6382 ;; Defined at:
  6383 ;;		line 25 in file "../src/Switch_B1.c"
  6384 ;; Parameters:    Size  Location     Type
  6385 ;;  sw              1    wreg     unsigned char 
  6386 ;; Auto vars:     Size  Location     Type
  6387 ;;  sw              1    1[BANK0 ] unsigned char 
  6388 ;; Return value:  Size  Location     Type
  6389 ;;		None               void
  6390 ;; Registers used:
  6391 ;;		wreg
  6392 ;; Tracked objects:
  6393 ;;		On entry : 0/0
  6394 ;;		On exit  : 0/0
  6395 ;;		Unchanged: 0/0
  6396 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6397 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6398 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6399 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6400 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6401 ;;Total ram usage:        2 bytes
  6402 ;; Hardware stack levels used:    1
  6403 ;; Hardware stack levels required when called:    5
  6404 ;; This function calls:
  6405 ;;		Nothing
  6406 ;; This function is called by:
  6407 ;;		_setSw_Main
  6408 ;; This function uses a non-reentrant model
  6409 ;;
  6410                           
  6411                           
  6412                           ;psect for function _SwPointSelect
  6413  1C0B                     _SwPointSelect:	
  6414                           
  6415                           ;incstack = 0
  6416                           ; Regs used in _SwPointSelect: [wreg]
  6417                           ;SwPointSelect@sw stored from wreg
  6418  1C0B  0020               	movlb	0	; select bank0
  6419  1C0C  00A1               	movwf	SwPointSelect@sw
  6420                           
  6421                           ;Switch_B1.c: 28: if (sw == 1) {
  6422  1C0D  0821               	movf	SwPointSelect@sw,w
  6423  1C0E  3A01               	xorlw	1
  6424  1C0F  1D03               	skipz
  6425  1C10  2C17               	goto	l7758
  6426                           
  6427                           ;Switch_B1.c: 29: Sw = &Sw1;
  6428  1C11  30BE               	movlw	_Sw1& (0+255)
  6429  1C12  00A0               	movwf	??_SwPointSelect
  6430  1C13  0820               	movf	??_SwPointSelect,w
  6431  1C14  0021               	movlb	1	; select bank1
  6432  1C15  00D9               	movwf	_Sw^(0+128)
  6433                           
  6434                           ;Switch_B1.c: 30: }
  6435  1C16  0008               	return
  6436  1C17                     l7758:	
  6437                           
  6438                           ;Switch_B1.c: 33: else if (sw == 2) {
  6439  1C17  0020               	movlb	0	; select bank0
  6440  1C18  0821               	movf	SwPointSelect@sw,w
  6441  1C19  3A02               	xorlw	2
  6442  1C1A  1D03               	skipz
  6443  1C1B  0008               	return
  6444                           
  6445                           ;Switch_B1.c: 34: Sw = &Sw2;
  6446  1C1C  30C7               	movlw	_Sw2& (0+255)
  6447  1C1D  00A0               	movwf	??_SwPointSelect
  6448  1C1E  0820               	movf	??_SwPointSelect,w
  6449  1C1F  0021               	movlb	1	; select bank1
  6450  1C20  00D9               	movwf	_Sw^(0+128)
  6451  1C21  0008               	return
  6452  1C22                     __end_of_SwPointSelect:	
  6453                           
  6454                           	psect	text18
  6455  1B84                     __ptext18:	
  6456 ;; *************** function _TouchPower *****************
  6457 ;; Defined at:
  6458 ;;		line 10 in file "../src/Switch_B1.c"
  6459 ;; Parameters:    Size  Location     Type
  6460 ;;		None
  6461 ;; Auto vars:     Size  Location     Type
  6462 ;;		None
  6463 ;; Return value:  Size  Location     Type
  6464 ;;		None               void
  6465 ;; Registers used:
  6466 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6467 ;; Tracked objects:
  6468 ;;		On entry : 0/0
  6469 ;;		On exit  : 0/0
  6470 ;;		Unchanged: 0/0
  6471 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6473 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6475 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6476 ;;Total ram usage:        0 bytes
  6477 ;; Hardware stack levels used:    1
  6478 ;; Hardware stack levels required when called:    6
  6479 ;; This function calls:
  6480 ;;		_Timeout_Counter
  6481 ;;		_set_TimeoutCleared
  6482 ;; This function is called by:
  6483 ;;		_Switch_Main
  6484 ;; This function uses a non-reentrant model
  6485 ;;
  6486                           
  6487                           
  6488                           ;psect for function _TouchPower
  6489  1B84                     _TouchPower:	
  6490                           
  6491                           ;Switch_B1.c: 11: if (myMain.PowerON == 1) {
  6492                           
  6493                           ;incstack = 0
  6494                           ; Regs used in _TouchPower: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6495  1B84  0021               	movlb	1	; select bank1
  6496  1B85  1C2E               	btfss	_myMain^(0+128),0
  6497  1B86  0008               	return
  6498                           
  6499                           ;Switch_B1.c: 12: if (RC5 == 0) {
  6500  1B87  0020               	movlb	0	; select bank0
  6501  1B88  1A8E               	btfsc	14,5	;volatile
  6502  1B89  0008               	return
  6503  1B8A  2B90               	goto	l8452
  6504  1B8B                     l2545:	
  6505                           ;Switch_B1.c: 13: while (RC5 == 0 && myMain.Timeout == 0) {
  6506                           
  6507                           
  6508                           ;Switch_B1.c: 14: RC5 = 1;
  6509  1B8B  0020               	movlb	0	; select bank0
  6510  1B8C  168E               	bsf	14,5	;volatile
  6511                           
  6512                           ;Switch_B1.c: 15: Timeout_Counter();
  6513  1B8D  319B  236F  319B   	fcall	_Timeout_Counter
  6514  1B90                     l8452:	
  6515  1B90  0020               	movlb	0	; select bank0
  6516  1B91  1A8E               	btfsc	14,5	;volatile
  6517  1B92  2B96               	goto	l8456
  6518  1B93  0021               	movlb	1	; select bank1
  6519  1B94  1D38               	btfss	(_myMain^(0+128)+10),2
  6520  1B95  2B8B               	goto	l2545
  6521  1B96                     l8456:	
  6522                           
  6523                           ;Switch_B1.c: 16: }
  6524                           ;Switch_B1.c: 17: set_TimeoutCleared();
  6525  1B96  3198  20E1         	fcall	_set_TimeoutCleared
  6526  1B98  0008               	return
  6527  1B99                     __end_of_TouchPower:	
  6528                           
  6529                           	psect	text19
  6530  18E1                     __ptext19:	
  6531 ;; *************** function _set_TimeoutCleared *****************
  6532 ;; Defined at:
  6533 ;;		line 281 in file "../src/main_B1.c"
  6534 ;; Parameters:    Size  Location     Type
  6535 ;;		None
  6536 ;; Auto vars:     Size  Location     Type
  6537 ;;		None
  6538 ;; Return value:  Size  Location     Type
  6539 ;;		None               void
  6540 ;; Registers used:
  6541 ;;		status,2
  6542 ;; Tracked objects:
  6543 ;;		On entry : 0/0
  6544 ;;		On exit  : 0/0
  6545 ;;		Unchanged: 0/0
  6546 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6547 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6550 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6551 ;;Total ram usage:        0 bytes
  6552 ;; Hardware stack levels used:    1
  6553 ;; Hardware stack levels required when called:    5
  6554 ;; This function calls:
  6555 ;;		Nothing
  6556 ;; This function is called by:
  6557 ;;		_getAD
  6558 ;;		_TouchPower
  6559 ;; This function uses a non-reentrant model
  6560 ;;
  6561                           
  6562                           
  6563                           ;psect for function _set_TimeoutCleared
  6564  18E1                     _set_TimeoutCleared:	
  6565                           
  6566                           ;main_B1.c: 282: myMain.Timeout = 0;
  6567                           
  6568                           ;incstack = 0
  6569                           ; Regs used in _set_TimeoutCleared: [status,2]
  6570  18E1  0021               	movlb	1	; select bank1
  6571  18E2  1138               	bcf	(_myMain^(0+128)+10),2
  6572                           
  6573                           ;main_B1.c: 283: myMain.Timeout_Counter = 0;
  6574  18E3  01B9               	clrf	(_myMain^(0+128)+11)
  6575  18E4  01BA               	clrf	((_myMain+1)^(0+128)+11)
  6576  18E5  0008               	return
  6577  18E6                     __end_of_set_TimeoutCleared:	
  6578                           
  6579                           	psect	text20
  6580  1B6F                     __ptext20:	
  6581 ;; *************** function _Timeout_Counter *****************
  6582 ;; Defined at:
  6583 ;;		line 272 in file "../src/main_B1.c"
  6584 ;; Parameters:    Size  Location     Type
  6585 ;;		None
  6586 ;; Auto vars:     Size  Location     Type
  6587 ;;		None
  6588 ;; Return value:  Size  Location     Type
  6589 ;;		None               void
  6590 ;; Registers used:
  6591 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  6592 ;; Tracked objects:
  6593 ;;		On entry : 0/0
  6594 ;;		On exit  : 0/0
  6595 ;;		Unchanged: 0/0
  6596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6600 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6601 ;;Total ram usage:        0 bytes
  6602 ;; Hardware stack levels used:    1
  6603 ;; Hardware stack levels required when called:    5
  6604 ;; This function calls:
  6605 ;;		Nothing
  6606 ;; This function is called by:
  6607 ;;		_getAD
  6608 ;;		_TouchPower
  6609 ;; This function uses a non-reentrant model
  6610 ;;
  6611                           
  6612                           
  6613                           ;psect for function _Timeout_Counter
  6614  1B6F                     _Timeout_Counter:	
  6615                           
  6616                           ;main_B1.c: 273: myMain.Timeout_Counter++;
  6617                           
  6618                           ;incstack = 0
  6619                           ; Regs used in _Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  6620  1B6F  3001               	movlw	1
  6621  1B70  0021               	movlb	1	; select bank1
  6622  1B71  07B9               	addwf	(_myMain^(0+128)+11),f
  6623  1B72  3000               	movlw	0
  6624  1B73  3DBA               	addwfc	((_myMain+1)^(0+128)+11),f
  6625                           
  6626                           ;main_B1.c: 274: if (myMain.Timeout_Counter == 25000) {
  6627  1B74  300B               	movlw	11
  6628  1B75  3EAE               	addlw	_myMain& (0+255)
  6629  1B76  0086               	movwf	6
  6630  1B77  0187               	clrf	7
  6631  1B78  3F40               	moviw [0]fsr1
  6632  1B79  3AA8               	xorlw	168
  6633  1B7A  1D03               	skipz
  6634  1B7B  2B7E               	goto	u7345
  6635  1B7C  3F41               	moviw [1]fsr1
  6636  1B7D  3A61               	xorlw	97
  6637  1B7E                     u7345:	
  6638  1B7E  1D03               	skipz
  6639  1B7F  0008               	return
  6640                           
  6641                           ;main_B1.c: 275: myMain.Timeout_Counter = 0;
  6642  1B80  01B9               	clrf	(_myMain^(0+128)+11)
  6643  1B81  01BA               	clrf	((_myMain+1)^(0+128)+11)
  6644                           
  6645                           ;main_B1.c: 276: myMain.Timeout = 1;
  6646  1B82  1538               	bsf	(_myMain^(0+128)+10),2
  6647  1B83  0008               	return
  6648  1B84                     __end_of_Timeout_Counter:	
  6649                           
  6650                           	psect	text21
  6651  192F                     __ptext21:	
  6652 ;; *************** function _Switch_Initialization *****************
  6653 ;; Defined at:
  6654 ;;		line 46 in file "../src/Switch_B1.c"
  6655 ;; Parameters:    Size  Location     Type
  6656 ;;		None
  6657 ;; Auto vars:     Size  Location     Type
  6658 ;;		None
  6659 ;; Return value:  Size  Location     Type
  6660 ;;		None               void
  6661 ;; Registers used:
  6662 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6663 ;; Tracked objects:
  6664 ;;		On entry : 0/0
  6665 ;;		On exit  : 0/0
  6666 ;;		Unchanged: 0/0
  6667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6671 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6672 ;;Total ram usage:        0 bytes
  6673 ;; Hardware stack levels used:    1
  6674 ;; Hardware stack levels required when called:    8
  6675 ;; This function calls:
  6676 ;;		_setSw_Initialization
  6677 ;; This function is called by:
  6678 ;;		_main
  6679 ;; This function uses a non-reentrant model
  6680 ;;
  6681                           
  6682                           
  6683                           ;psect for function _Switch_Initialization
  6684  192F                     _Switch_Initialization:	
  6685                           
  6686                           ;Switch_B1.c: 52: setSw_Initialization(1);
  6687                           
  6688                           ;incstack = 0
  6689                           ; Regs used in _Switch_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
  6690  192F  3001               	movlw	1
  6691  1930  3199  2127  3199   	fcall	_setSw_Initialization
  6692                           
  6693                           ;Switch_B1.c: 56: setSw_Initialization(2);
  6694  1933  3002               	movlw	2
  6695  1934  3199  2127         	fcall	_setSw_Initialization
  6696  1936  0008               	return
  6697  1937                     __end_of_Switch_Initialization:	
  6698                           
  6699                           	psect	text22
  6700  1927                     __ptext22:	
  6701 ;; *************** function _setSw_Initialization *****************
  6702 ;; Defined at:
  6703 ;;		line 66 in file "../src/Switch_B1.c"
  6704 ;; Parameters:    Size  Location     Type
  6705 ;;  sw              1    wreg     unsigned char 
  6706 ;; Auto vars:     Size  Location     Type
  6707 ;;  sw              1    4[BANK0 ] unsigned char 
  6708 ;; Return value:  Size  Location     Type
  6709 ;;		None               void
  6710 ;; Registers used:
  6711 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6712 ;; Tracked objects:
  6713 ;;		On entry : 0/0
  6714 ;;		On exit  : 0/0
  6715 ;;		Unchanged: 0/0
  6716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6718 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6720 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6721 ;;Total ram usage:        1 bytes
  6722 ;; Hardware stack levels used:    1
  6723 ;; Hardware stack levels required when called:    7
  6724 ;; This function calls:
  6725 ;;		_setLED
  6726 ;; This function is called by:
  6727 ;;		_Switch_Initialization
  6728 ;; This function uses a non-reentrant model
  6729 ;;
  6730                           
  6731                           
  6732                           ;psect for function _setSw_Initialization
  6733  1927                     _setSw_Initialization:	
  6734                           
  6735                           ;incstack = 0
  6736                           ; Regs used in _setSw_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6737                           ;setSw_Initialization@sw stored from wreg
  6738  1927  0020               	movlb	0	; select bank0
  6739  1928  00A4               	movwf	setSw_Initialization@sw
  6740                           
  6741                           ;Switch_B1.c: 68: setLED(sw, 1);
  6742  1929  01A2               	clrf	setLED@command
  6743  192A  0AA2               	incf	setLED@command,f
  6744  192B  0824               	movf	setSw_Initialization@sw,w
  6745  192C  3193  230E         	fcall	_setLED
  6746  192E  0008               	return
  6747  192F                     __end_of_setSw_Initialization:	
  6748                           
  6749                           	psect	text23
  6750  18C4                     __ptext23:	
  6751 ;; *************** function _RF_Main *****************
  6752 ;; Defined at:
  6753 ;;		line 26 in file "../src/RF_Control_B1.c"
  6754 ;; Parameters:    Size  Location     Type
  6755 ;;		None
  6756 ;; Auto vars:     Size  Location     Type
  6757 ;;		None
  6758 ;; Return value:  Size  Location     Type
  6759 ;;		None               void
  6760 ;; Registers used:
  6761 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6762 ;; Tracked objects:
  6763 ;;		On entry : 0/0
  6764 ;;		On exit  : 0/0
  6765 ;;		Unchanged: 0/0
  6766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6770 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6771 ;;Total ram usage:        0 bytes
  6772 ;; Hardware stack levels used:    1
  6773 ;; Hardware stack levels required when called:   12
  6774 ;; This function calls:
  6775 ;;		_setRF_Main
  6776 ;; This function is called by:
  6777 ;;		_main
  6778 ;; This function uses a non-reentrant model
  6779 ;;
  6780                           
  6781                           
  6782                           ;psect for function _RF_Main
  6783  18C4                     _RF_Main:	
  6784                           
  6785                           ;RF_Control_B1.c: 28: setRF_Main();
  6786                           
  6787                           ;incstack = 0
  6788                           ; Regs used in _RF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6789  18C4  3185  2556         	fcall	_setRF_Main
  6790  18C6  0008               	return
  6791  18C7                     __end_of_RF_Main:	
  6792                           
  6793                           	psect	text24
  6794  0556                     __ptext24:	
  6795 ;; *************** function _setRF_Main *****************
  6796 ;; Defined at:
  6797 ;;		line 53 in file "../src/RF_Control_B1.c"
  6798 ;; Parameters:    Size  Location     Type
  6799 ;;		None
  6800 ;; Auto vars:     Size  Location     Type
  6801 ;;  error           1    3[BANK1 ] unsigned char 
  6802 ;; Return value:  Size  Location     Type
  6803 ;;		None               void
  6804 ;; Registers used:
  6805 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6806 ;; Tracked objects:
  6807 ;;		On entry : 0/0
  6808 ;;		On exit  : 0/0
  6809 ;;		Unchanged: 0/0
  6810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6812 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6813 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  6814 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  6815 ;;Total ram usage:        2 bytes
  6816 ;; Hardware stack levels used:    1
  6817 ;; Hardware stack levels required when called:   11
  6818 ;; This function calls:
  6819 ;;		_CC2500_PowerOnInitial
  6820 ;;		_CC2500_RxData
  6821 ;;		_CC2500_TxData
  6822 ;;		_CC2500_WriteCommand
  6823 ;;		_RF_RxDisable
  6824 ;;		___lwdiv
  6825 ;;		_getBuz_GO
  6826 ;;		_getRF_KeyStatus
  6827 ;;		_getRxData
  6828 ;; This function is called by:
  6829 ;;		_RF_Main
  6830 ;; This function uses a non-reentrant model
  6831 ;;
  6832                           
  6833                           
  6834                           ;psect for function _setRF_Main
  6835  0556                     _setRF_Main:	
  6836                           
  6837                           ;RF_Control_B1.c: 54: char error = 0;
  6838                           
  6839                           ;incstack = 0
  6840                           ; Regs used in _setRF_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6841  0556  0021               	movlb	1	; select bank1
  6842  0557  01E9               	clrf	setRF_Main@error^(0+128)
  6843                           
  6844                           ;RF_Control_B1.c: 55: if (RF1.Enable == 1) {
  6845  0558  1C20               	btfss	_RF1^(0+128),0
  6846  0559  2E27               	goto	l2148
  6847                           
  6848                           ;RF_Control_B1.c: 56: if (getBuz_GO() == 0) {
  6849  055A  319A  2230  3185   	fcall	_getBuz_GO
  6850  055D  0020               	movlb	0	; select bank0
  6851  055E  0821               	movf	?_getBuz_GO+1,w
  6852  055F  0420               	iorwf	?_getBuz_GO,w
  6853  0560  1D03               	skipz
  6854  0561  2E08               	goto	l9566
  6855                           
  6856                           ;RF_Control_B1.c: 59: RF1.Key = getRF_KeyStatus() == 1 ? 1 : 0;
  6857  0562  319A  2241  3185   	fcall	_getRF_KeyStatus
  6858  0565  3A01               	xorlw	1
  6859  0566  3000               	movlw	0
  6860  0567  1903               	skipnz
  6861  0568  3001               	movlw	1
  6862  0569  0021               	movlb	1	; select bank1
  6863  056A  00E8               	movwf	??_setRF_Main^(0+128)
  6864  056B  0CE8               	rrf	??_setRF_Main^(0+128),f
  6865  056C  0CE8               	rrf	??_setRF_Main^(0+128),f
  6866  056D  0820               	movf	_RF1^(0+128),w
  6867  056E  0668               	xorwf	??_setRF_Main^(0+128),w
  6868  056F  397F               	andlw	-129
  6869  0570  0668               	xorwf	??_setRF_Main^(0+128),w
  6870  0571  00A0               	movwf	_RF1^(0+128)
  6871                           
  6872                           ;RF_Control_B1.c: 64: if (RF1.Key == 0 || RF1.Learn == 1) {
  6873  0572  1FA0               	btfss	_RF1^(0+128),7
  6874  0573  2D76               	goto	l2152
  6875  0574  1F20               	btfss	_RF1^(0+128),6
  6876  0575  2E08               	goto	l9566
  6877  0576                     l2152:	
  6878                           
  6879                           ;RF_Control_B1.c: 66: if (RF1.TransceiveGO == 1) {
  6880  0576  1D20               	btfss	_RF1^(0+128),2
  6881  0577  2DC7               	goto	l2153
  6882                           
  6883                           ;RF_Control_B1.c: 67: if (RF1.Learn == 0) {
  6884  0578  1B20               	btfsc	_RF1^(0+128),6
  6885  0579  2DC2               	goto	l9538
  6886                           
  6887                           ;RF_Control_B1.c: 68: RF1.Count++;
  6888  057A  3001               	movlw	1
  6889  057B  07A2               	addwf	(_RF1^(0+128)+2),f
  6890  057C  3000               	movlw	0
  6891  057D  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  6892                           
  6893                           ;RF_Control_B1.c: 69: if (RF1.Count >= (RF1.RunTime / 20)) {
  6894  057E  3014               	movlw	20
  6895  057F  0020               	movlb	0	; select bank0
  6896  0580  00A0               	movwf	___lwdiv@divisor
  6897  0581  3000               	movlw	0
  6898  0582  00A1               	movwf	___lwdiv@divisor+1
  6899  0583  0021               	movlb	1	; select bank1
  6900  0584  0828               	movf	((_RF1+1)^(0+128)+7),w
  6901  0585  0020               	movlb	0	; select bank0
  6902  0586  01A3               	clrf	___lwdiv@dividend+1
  6903  0587  07A3               	addwf	___lwdiv@dividend+1,f
  6904  0588  0021               	movlb	1	; select bank1
  6905  0589  0827               	movf	(_RF1^(0+128)+7),w
  6906  058A  0020               	movlb	0	; select bank0
  6907  058B  01A2               	clrf	___lwdiv@dividend
  6908  058C  07A2               	addwf	___lwdiv@dividend,f
  6909  058D  3190  2055  3185   	fcall	___lwdiv
  6910  0590  0020               	movlb	0	; select bank0
  6911  0591  0821               	movf	?___lwdiv+1,w
  6912  0592  0021               	movlb	1	; select bank1
  6913  0593  0223               	subwf	((_RF1+1)^(0+128)+2),w
  6914  0594  1D03               	skipz
  6915  0595  2D9A               	goto	u10675
  6916  0596  0020               	movlb	0	; select bank0
  6917  0597  0820               	movf	?___lwdiv,w
  6918  0598  0021               	movlb	1	; select bank1
  6919  0599  0222               	subwf	(_RF1^(0+128)+2),w
  6920  059A                     u10675:	
  6921  059A  1C03               	skipc
  6922  059B  2E08               	goto	l9566
  6923                           
  6924                           ;RF_Control_B1.c: 70: RF1.Count = (RF1.RunTime / 20);
  6925  059C  3014               	movlw	20
  6926  059D  0020               	movlb	0	; select bank0
  6927  059E  00A0               	movwf	___lwdiv@divisor
  6928  059F  3000               	movlw	0
  6929  05A0  00A1               	movwf	___lwdiv@divisor+1
  6930  05A1  0021               	movlb	1	; select bank1
  6931  05A2  0828               	movf	((_RF1+1)^(0+128)+7),w
  6932  05A3  0020               	movlb	0	; select bank0
  6933  05A4  01A3               	clrf	___lwdiv@dividend+1
  6934  05A5  07A3               	addwf	___lwdiv@dividend+1,f
  6935  05A6  0021               	movlb	1	; select bank1
  6936  05A7  0827               	movf	(_RF1^(0+128)+7),w
  6937  05A8  0020               	movlb	0	; select bank0
  6938  05A9  01A2               	clrf	___lwdiv@dividend
  6939  05AA  07A2               	addwf	___lwdiv@dividend,f
  6940  05AB  3190  2055  3185   	fcall	___lwdiv
  6941  05AE  0020               	movlb	0	; select bank0
  6942  05AF  0821               	movf	?___lwdiv+1,w
  6943  05B0  0021               	movlb	1	; select bank1
  6944  05B1  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6945  05B2  07A3               	addwf	((_RF1+1)^(0+128)+2),f
  6946  05B3  0020               	movlb	0	; select bank0
  6947  05B4  0820               	movf	?___lwdiv,w
  6948  05B5  0021               	movlb	1	; select bank1
  6949  05B6  01A2               	clrf	(_RF1^(0+128)+2)
  6950  05B7  07A2               	addwf	(_RF1^(0+128)+2),f
  6951                           
  6952                           ;RF_Control_B1.c: 72: RF1.TransceiveGO = 0;
  6953  05B8  1120               	bcf	_RF1^(0+128),2
  6954                           
  6955                           ;RF_Control_B1.c: 73: RF1.CorrectionCounter = 0;
  6956  05B9  01AA               	clrf	(_RF1^(0+128)+10)
  6957  05BA  01AB               	clrf	((_RF1+1)^(0+128)+10)
  6958                           
  6959                           ;RF_Control_B1.c: 74: RF_RxDisable();
  6960  05BB  3199  21EE  3185   	fcall	_RF_RxDisable
  6961                           
  6962                           ;RF_Control_B1.c: 75: CC2500_TxData();
  6963  05BE  3197  2725  3185   	fcall	_CC2500_TxData
  6964                           
  6965                           ;RF_Control_B1.c: 77: }
  6966                           ;RF_Control_B1.c: 78: } else {
  6967  05C1  2E08               	goto	l9566
  6968  05C2                     l9538:	
  6969                           
  6970                           ;RF_Control_B1.c: 79: RF1.Count = 0;
  6971  05C2  0021               	movlb	1	; select bank1
  6972  05C3  01A2               	clrf	(_RF1^(0+128)+2)
  6973  05C4  01A3               	clrf	((_RF1+1)^(0+128)+2)
  6974                           
  6975                           ;RF_Control_B1.c: 80: RF1.TransceiveGO = 0;
  6976  05C5  1120               	bcf	_RF1^(0+128),2
  6977                           
  6978                           ;RF_Control_B1.c: 81: }
  6979                           ;RF_Control_B1.c: 82: } else {
  6980  05C6  2E08               	goto	l9566
  6981  05C7                     l2153:	
  6982                           
  6983                           ;RF_Control_B1.c: 83: if (RF1.RxStatus == 1) {
  6984  05C7  1DA0               	btfss	_RF1^(0+128),3
  6985  05C8  2DD6               	goto	l9552
  6986                           
  6987                           ;RF_Control_B1.c: 85: CC2500_RxData();
  6988  05C9  3196  26BA  3185   	fcall	_CC2500_RxData
  6989                           
  6990                           ;RF_Control_B1.c: 87: if (RF1.ReceiveGO == 1) {
  6991  05CC  0021               	movlb	1	; select bank1
  6992  05CD  1CA0               	btfss	_RF1^(0+128),1
  6993  05CE  2E08               	goto	l9566
  6994                           
  6995                           ;RF_Control_B1.c: 88: RF1.ReceiveGO = 0;
  6996  05CF  10A0               	bcf	_RF1^(0+128),1
  6997                           
  6998                           ;RF_Control_B1.c: 89: RF1.CorrectionCounter = 0;
  6999  05D0  01AA               	clrf	(_RF1^(0+128)+10)
  7000  05D1  01AB               	clrf	((_RF1+1)^(0+128)+10)
  7001                           
  7002                           ;RF_Control_B1.c: 97: getRxData();
  7003  05D2  3189  21AB  3185   	fcall	_getRxData
  7004                           
  7005                           ;RF_Control_B1.c: 100: }
  7006                           ;RF_Control_B1.c: 101: } else {
  7007  05D5  2E08               	goto	l9566
  7008  05D6                     l9552:	
  7009                           
  7010                           ;RF_Control_B1.c: 102: RF1.Count++;
  7011  05D6  3001               	movlw	1
  7012  05D7  0021               	movlb	1	; select bank1
  7013  05D8  07A2               	addwf	(_RF1^(0+128)+2),f
  7014  05D9  3000               	movlw	0
  7015  05DA  3DA3               	addwfc	((_RF1+1)^(0+128)+2),f
  7016                           
  7017                           ;RF_Control_B1.c: 103: if (RF1.Count >= (RF1.RunTime / 20)) {
  7018  05DB  3014               	movlw	20
  7019  05DC  0020               	movlb	0	; select bank0
  7020  05DD  00A0               	movwf	___lwdiv@divisor
  7021  05DE  3000               	movlw	0
  7022  05DF  00A1               	movwf	___lwdiv@divisor+1
  7023  05E0  0021               	movlb	1	; select bank1
  7024  05E1  0828               	movf	((_RF1+1)^(0+128)+7),w
  7025  05E2  0020               	movlb	0	; select bank0
  7026  05E3  01A3               	clrf	___lwdiv@dividend+1
  7027  05E4  07A3               	addwf	___lwdiv@dividend+1,f
  7028  05E5  0021               	movlb	1	; select bank1
  7029  05E6  0827               	movf	(_RF1^(0+128)+7),w
  7030  05E7  0020               	movlb	0	; select bank0
  7031  05E8  01A2               	clrf	___lwdiv@dividend
  7032  05E9  07A2               	addwf	___lwdiv@dividend,f
  7033  05EA  3190  2055  3185   	fcall	___lwdiv
  7034  05ED  0020               	movlb	0	; select bank0
  7035  05EE  0821               	movf	?___lwdiv+1,w
  7036  05EF  0021               	movlb	1	; select bank1
  7037  05F0  0223               	subwf	((_RF1+1)^(0+128)+2),w
  7038  05F1  1D03               	skipz
  7039  05F2  2DF7               	goto	u10705
  7040  05F3  0020               	movlb	0	; select bank0
  7041  05F4  0820               	movf	?___lwdiv,w
  7042  05F5  0021               	movlb	1	; select bank1
  7043  05F6  0222               	subwf	(_RF1^(0+128)+2),w
  7044  05F7                     u10705:	
  7045  05F7  1C03               	skipc
  7046  05F8  2E08               	goto	l9566
  7047                           
  7048                           ;RF_Control_B1.c: 104: RF1.Count = 0;
  7049  05F9  01A2               	clrf	(_RF1^(0+128)+2)
  7050  05FA  01A3               	clrf	((_RF1+1)^(0+128)+2)
  7051                           
  7052                           ;RF_Control_B1.c: 106: RF1.RxStatus = 1;
  7053  05FB  15A0               	bsf	_RF1^(0+128),3
  7054                           
  7055                           ;RF_Control_B1.c: 107: CC2500_WriteCommand(0x36);
  7056  05FC  3036               	movlw	54
  7057  05FD  319C  246E  3185   	fcall	_CC2500_WriteCommand
  7058                           
  7059                           ;RF_Control_B1.c: 108: CC2500_WriteCommand(0x3A);
  7060  0600  303A               	movlw	58
  7061  0601  319C  246E  3185   	fcall	_CC2500_WriteCommand
  7062                           
  7063                           ;RF_Control_B1.c: 109: CC2500_WriteCommand(0x34);
  7064  0604  3034               	movlw	52
  7065  0605  319C  246E  3185   	fcall	_CC2500_WriteCommand
  7066  0608                     l9566:	
  7067                           
  7068                           ;RF_Control_B1.c: 111: }
  7069                           ;RF_Control_B1.c: 112: }
  7070                           ;RF_Control_B1.c: 113: }
  7071                           ;RF_Control_B1.c: 114: }
  7072                           ;RF_Control_B1.c: 115: }
  7073                           ;RF_Control_B1.c: 117: RF1.CorrectionCounter++;
  7074  0608  3001               	movlw	1
  7075  0609  0021               	movlb	1	; select bank1
  7076  060A  07AA               	addwf	(_RF1^(0+128)+10),f
  7077  060B  3000               	movlw	0
  7078  060C  3DAB               	addwfc	((_RF1+1)^(0+128)+10),f
  7079                           
  7080                           ;RF_Control_B1.c: 118: if (RF1.CorrectionCounter > (60000 / 20)) {
  7081  060D  300B               	movlw	11
  7082  060E  022B               	subwf	((_RF1+1)^(0+128)+10),w
  7083  060F  30B9               	movlw	185
  7084  0610  1903               	skipnz
  7085  0611  022A               	subwf	(_RF1^(0+128)+10),w
  7086  0612  1C03               	skipc
  7087  0613  2E20               	goto	l9580
  7088                           
  7089                           ;RF_Control_B1.c: 119: RF1.CorrectionCounter = 0;
  7090  0614  01AA               	clrf	(_RF1^(0+128)+10)
  7091  0615  01AB               	clrf	((_RF1+1)^(0+128)+10)
  7092                           
  7093                           ;RF_Control_B1.c: 121: RF1.RxStatus = 0;
  7094  0616  11A0               	bcf	_RF1^(0+128),3
  7095                           
  7096                           ;RF_Control_B1.c: 122: RF1.ReceiveGO = 0;
  7097  0617  10A0               	bcf	_RF1^(0+128),1
  7098                           
  7099                           ;RF_Control_B1.c: 123: CC2500_WriteCommand(0x36);
  7100  0618  3036               	movlw	54
  7101  0619  319C  246E  3185   	fcall	_CC2500_WriteCommand
  7102                           
  7103                           ;RF_Control_B1.c: 124: CC2500_WriteCommand(0x3A);
  7104  061C  303A               	movlw	58
  7105  061D  319C  246E  3185   	fcall	_CC2500_WriteCommand
  7106  0620                     l9580:	
  7107                           
  7108                           ;RF_Control_B1.c: 125: }
  7109                           ;RF_Control_B1.c: 127: if (RF1.Timeout == 1) {
  7110  0620  0021               	movlb	1	; select bank1
  7111  0621  1F21               	btfss	(_RF1^(0+128)+1),6
  7112  0622  0008               	return
  7113                           
  7114                           ;RF_Control_B1.c: 128: RF1.Timeout = 0;
  7115  0623  1321               	bcf	(_RF1^(0+128)+1),6
  7116                           
  7117                           ;RF_Control_B1.c: 129: CC2500_PowerOnInitial();
  7118  0624  319B  235A         	fcall	_CC2500_PowerOnInitial
  7119                           
  7120                           ;RF_Control_B1.c: 130: }
  7121                           ;RF_Control_B1.c: 132: } else {
  7122  0626  0008               	return
  7123  0627                     l2148:	
  7124                           
  7125                           ;RF_Control_B1.c: 133: if (myMain.PowerON == 1) {
  7126  0627  1C2E               	btfss	_myMain^(0+128),0
  7127  0628  0008               	return
  7128                           
  7129                           ;RF_Control_B1.c: 134: RF1.Enable = 1;
  7130  0629  1420               	bsf	_RF1^(0+128),0
  7131  062A  0008               	return
  7132  062B                     __end_of_setRF_Main:	
  7133                           
  7134                           	psect	text25
  7135  09AB                     __ptext25:	
  7136 ;; *************** function _getRxData *****************
  7137 ;; Defined at:
  7138 ;;		line 227 in file "../src/RF_Control_B1.c"
  7139 ;; Parameters:    Size  Location     Type
  7140 ;;		None
  7141 ;; Auto vars:     Size  Location     Type
  7142 ;;  error           1    1[BANK1 ] unsigned char 
  7143 ;; Return value:  Size  Location     Type
  7144 ;;		None               void
  7145 ;; Registers used:
  7146 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7147 ;; Tracked objects:
  7148 ;;		On entry : 0/0
  7149 ;;		On exit  : 0/0
  7150 ;;		Unchanged: 0/0
  7151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7153 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7154 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
  7155 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0
  7156 ;;Total ram usage:        2 bytes
  7157 ;; Hardware stack levels used:    1
  7158 ;; Hardware stack levels required when called:   10
  7159 ;; This function calls:
  7160 ;;		_getMain_All_Error_Status
  7161 ;;		_setControl_Lights_Table
  7162 ;;		_setLog_Code
  7163 ;;		_setTxData
  7164 ;; This function is called by:
  7165 ;;		_setRF_Main
  7166 ;; This function uses a non-reentrant model
  7167 ;;
  7168                           
  7169                           
  7170                           ;psect for function _getRxData
  7171  09AB                     _getRxData:	
  7172                           
  7173                           ;RF_Control_B1.c: 229: if (RF_Data[0] == 0xaa && RF_Data[1] == 0x01) {
  7174                           
  7175                           ;incstack = 0
  7176                           ; Regs used in _getRxData: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7177  09AB  0023               	movlb	3	; select bank3
  7178  09AC  0820               	movf	_RF_Data^(0+384),w
  7179  09AD  3AAA               	xorlw	170
  7180  09AE  1D03               	skipz
  7181  09AF  29C1               	goto	l7718
  7182  09B0  0821               	movf	(_RF_Data^(0+384)+1),w
  7183  09B1  3A01               	xorlw	1
  7184  09B2  1D03               	skipz
  7185  09B3  29C1               	goto	l7718
  7186                           
  7187                           ;RF_Control_B1.c: 230: product->Data[2] = 0x55;
  7188  09B4  3055               	movlw	85
  7189  09B5  0021               	movlb	1	; select bank1
  7190  09B6  00E6               	movwf	??_getRxData^(0+128)
  7191  09B7  086E               	movf	_product^(0+128),w
  7192  09B8  3E02               	addlw	2
  7193  09B9  0086               	movwf	6
  7194  09BA  3002               	movlw	2	; select bank4/5
  7195  09BB  0087               	movwf	7
  7196  09BC  0866               	movf	??_getRxData^(0+128),w
  7197  09BD  0081               	movwf	1
  7198                           
  7199                           ;RF_Control_B1.c: 231: setTxData();
  7200  09BE  318F  2745         	fcall	_setTxData
  7201                           
  7202                           ;RF_Control_B1.c: 235: } else {
  7203  09C0  0008               	return
  7204  09C1                     l7718:	
  7205                           
  7206                           ;RF_Control_B1.c: 236: char error = getMain_All_Error_Status(0);
  7207  09C1  3000               	movlw	0
  7208  09C2  319F  27CD  3189   	fcall	_getMain_All_Error_Status
  7209  09C5  0021               	movlb	1	; select bank1
  7210  09C6  00E6               	movwf	??_getRxData^(0+128)
  7211  09C7  0866               	movf	??_getRxData^(0+128),w
  7212  09C8  00E7               	movwf	getRxData@error^(0+128)
  7213                           
  7214                           ;RF_Control_B1.c: 237: if (error == 0) {
  7215  09C9  08E7               	movf	getRxData@error^(0+128),f
  7216  09CA  1D03               	skipz
  7217  09CB  2A1B               	goto	l2193
  7218                           
  7219                           ;RF_Control_B1.c: 238: if (RF1.Learn == 1) {
  7220  09CC  1F20               	btfss	_RF1^(0+128),6
  7221  09CD  29D9               	goto	l7730
  7222                           
  7223                           ;RF_Control_B1.c: 240: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x64) {
  7224  09CE  0023               	movlb	3	; select bank3
  7225  09CF  08A0               	movf	_RF_Data^(0+384),f
  7226  09D0  1D03               	skipz
  7227  09D1  0008               	return
  7228  09D2  0821               	movf	(_RF_Data^(0+384)+1),w
  7229  09D3  3A64               	xorlw	100
  7230  09D4  1D03               	skipz
  7231  09D5  0008               	return
  7232                           
  7233                           ;RF_Control_B1.c: 241: setLog_Code();
  7234  09D6  3190  2021         	fcall	_setLog_Code
  7235                           
  7236                           ;RF_Control_B1.c: 242: }
  7237                           ;RF_Control_B1.c: 243: } else {
  7238  09D8  0008               	return
  7239  09D9                     l7730:	
  7240                           
  7241                           ;RF_Control_B1.c: 244: if (RF_Data[20] == 210 || RF_Data[20] == 0x0a) {
  7242  09D9  0023               	movlb	3	; select bank3
  7243  09DA  0834               	movf	(_RF_Data^(0+384)+20),w
  7244  09DB  3AD2               	xorlw	210
  7245  09DC  1903               	skipnz
  7246  09DD  29E2               	goto	l7734
  7247  09DE  0834               	movf	(_RF_Data^(0+384)+20),w
  7248  09DF  3A0A               	xorlw	10
  7249  09E0  1D03               	skipz
  7250  09E1  0008               	return
  7251  09E2                     l7734:	
  7252                           
  7253                           ;RF_Control_B1.c: 246: if (RF_Data[0] == 0x00 && RF_Data[1] == 0x02) {
  7254  09E2  08A0               	movf	_RF_Data^(0+384),f
  7255  09E3  1D03               	skipz
  7256  09E4  0008               	return
  7257  09E5  0821               	movf	(_RF_Data^(0+384)+1),w
  7258  09E6  3A02               	xorlw	2
  7259  09E7  1D03               	skipz
  7260  09E8  0008               	return
  7261                           
  7262                           ;RF_Control_B1.c: 248: if (RF_Data[12] == 0xff && RF_Data[13] == 0xff && RF_Data[14] == 
      +                          0xff) {
  7263  09E9  082C               	movf	(_RF_Data^(0+384)+12),w
  7264  09EA  3AFF               	xorlw	255
  7265  09EB  1D03               	skipz
  7266  09EC  29F7               	goto	l7746
  7267  09ED  082D               	movf	(_RF_Data^(0+384)+13),w
  7268  09EE  3AFF               	xorlw	255
  7269  09EF  1D03               	skipz
  7270  09F0  29F7               	goto	l7746
  7271  09F1  082E               	movf	(_RF_Data^(0+384)+14),w
  7272  09F2  3AFF               	xorlw	255
  7273  09F3  1D03               	skipz
  7274  09F4  29F7               	goto	l7746
  7275                           
  7276                           ;RF_Control_B1.c: 249: __nop();
  7277  09F5  0000               	nop
  7278                           
  7279                           ;RF_Control_B1.c: 250: } else {
  7280  09F6  0008               	return
  7281  09F7                     l7746:	
  7282                           
  7283                           ;RF_Control_B1.c: 251: if (RF_Data[12] == product->Data[12] && RF_Data[13] == product->D
      +                          ata[13] && RF_Data[14] == product->Data[14]) {
  7284  09F7  0021               	movlb	1	; select bank1
  7285  09F8  086E               	movf	_product^(0+128),w
  7286  09F9  3E0C               	addlw	12
  7287  09FA  0086               	movwf	6
  7288  09FB  3002               	movlw	2	; select bank4/5
  7289  09FC  0087               	movwf	7
  7290  09FD  0023               	movlb	3	; select bank3
  7291  09FE  082C               	movf	(_RF_Data^(0+384)+12),w
  7292  09FF  0601               	xorwf	1,w
  7293  0A00  1D03               	skipz
  7294  0A01  0008               	return
  7295  0A02  0021               	movlb	1	; select bank1
  7296  0A03  086E               	movf	_product^(0+128),w
  7297  0A04  3E0D               	addlw	13
  7298  0A05  0086               	movwf	6
  7299  0A06  3002               	movlw	2	; select bank4/5
  7300  0A07  0087               	movwf	7
  7301  0A08  0023               	movlb	3	; select bank3
  7302  0A09  082D               	movf	(_RF_Data^(0+384)+13),w
  7303  0A0A  0601               	xorwf	1,w
  7304  0A0B  1D03               	skipz
  7305  0A0C  0008               	return
  7306  0A0D  0021               	movlb	1	; select bank1
  7307  0A0E  086E               	movf	_product^(0+128),w
  7308  0A0F  3E0E               	addlw	14
  7309  0A10  0086               	movwf	6
  7310  0A11  3002               	movlw	2	; select bank4/5
  7311  0A12  0087               	movwf	7
  7312  0A13  0023               	movlb	3	; select bank3
  7313  0A14  082E               	movf	(_RF_Data^(0+384)+14),w
  7314  0A15  0601               	xorwf	1,w
  7315  0A16  1D03               	skipz
  7316  0A17  0008               	return
  7317                           
  7318                           ;RF_Control_B1.c: 252: setControl_Lights_Table();
  7319  0A18  318C  24A8         	fcall	_setControl_Lights_Table
  7320                           
  7321                           ;RF_Control_B1.c: 253: }
  7322                           ;RF_Control_B1.c: 254: }
  7323                           ;RF_Control_B1.c: 256: }
  7324                           ;RF_Control_B1.c: 267: }
  7325                           ;RF_Control_B1.c: 268: }
  7326                           ;RF_Control_B1.c: 269: } else {
  7327  0A1A  0008               	return
  7328  0A1B                     l2193:	
  7329                           
  7330                           ;RF_Control_B1.c: 270: __nop();
  7331  0A1B  0000               	nop
  7332  0A1C  0008               	return
  7333  0A1D                     __end_of_getRxData:	
  7334                           
  7335                           	psect	text26
  7336  1021                     __ptext26:	
  7337 ;; *************** function _setLog_Code *****************
  7338 ;; Defined at:
  7339 ;;		line 276 in file "../src/RF_Control_B1.c"
  7340 ;; Parameters:    Size  Location     Type
  7341 ;;		None
  7342 ;; Auto vars:     Size  Location     Type
  7343 ;;		None
  7344 ;; Return value:  Size  Location     Type
  7345 ;;		None               void
  7346 ;; Registers used:
  7347 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7348 ;; Tracked objects:
  7349 ;;		On entry : 0/0
  7350 ;;		On exit  : 0/0
  7351 ;;		Unchanged: 0/0
  7352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7355 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7356 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7357 ;;Total ram usage:        1 bytes
  7358 ;; Hardware stack levels used:    1
  7359 ;; Hardware stack levels required when called:    7
  7360 ;; This function calls:
  7361 ;;		_setBuz
  7362 ;;		_setMemory_LoopSave
  7363 ;;		_setMemory_Modify
  7364 ;;		_setProductData
  7365 ;; This function is called by:
  7366 ;;		_getRxData
  7367 ;; This function uses a non-reentrant model
  7368 ;;
  7369                           
  7370                           
  7371                           ;psect for function _setLog_Code
  7372  1021                     _setLog_Code:	
  7373                           
  7374                           ;RF_Control_B1.c: 277: RF1.Learn = 0;
  7375                           
  7376                           ;incstack = 0
  7377                           ; Regs used in _setLog_Code: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7378  1021  0021               	movlb	1	; select bank1
  7379  1022  1320               	bcf	_RF1^(0+128),6
  7380                           
  7381                           ;RF_Control_B1.c: 278: setProductData(12, RF_Data[12]);
  7382  1023  0023               	movlb	3	; select bank3
  7383  1024  082C               	movf	(_RF_Data^(0+384)+12),w
  7384  1025  0020               	movlb	0	; select bank0
  7385  1026  00E5               	movwf	??_setLog_Code
  7386  1027  0865               	movf	??_setLog_Code,w
  7387  1028  00E2               	movwf	setProductData@value
  7388  1029  300C               	movlw	12
  7389  102A  3199  2181  3190   	fcall	_setProductData
  7390                           
  7391                           ;RF_Control_B1.c: 279: setProductData(13, RF_Data[13]);
  7392  102D  0023               	movlb	3	; select bank3
  7393  102E  082D               	movf	(_RF_Data^(0+384)+13),w
  7394  102F  0020               	movlb	0	; select bank0
  7395  1030  00E5               	movwf	??_setLog_Code
  7396  1031  0865               	movf	??_setLog_Code,w
  7397  1032  00E2               	movwf	setProductData@value
  7398  1033  300D               	movlw	13
  7399  1034  3199  2181  3190   	fcall	_setProductData
  7400                           
  7401                           ;RF_Control_B1.c: 280: setProductData(14, RF_Data[14]);
  7402  1037  0023               	movlb	3	; select bank3
  7403  1038  082E               	movf	(_RF_Data^(0+384)+14),w
  7404  1039  0020               	movlb	0	; select bank0
  7405  103A  00E5               	movwf	??_setLog_Code
  7406  103B  0865               	movf	??_setLog_Code,w
  7407  103C  00E2               	movwf	setProductData@value
  7408  103D  300E               	movlw	14
  7409  103E  3199  2181  3190   	fcall	_setProductData
  7410                           
  7411                           ;RF_Control_B1.c: 281: setBuz(1, 100);
  7412  1041  3064               	movlw	100
  7413  1042  0020               	movlb	0	; select bank0
  7414  1043  00A9               	movwf	setBuz@time
  7415  1044  3000               	movlw	0
  7416  1045  00AA               	movwf	setBuz@time+1
  7417  1046  3001               	movlw	1
  7418  1047  3194  240B  3190   	fcall	_setBuz
  7419                           
  7420                           ;RF_Control_B1.c: 282: if (myMain.First == 1) {
  7421  104A  0021               	movlb	1	; select bank1
  7422  104B  1EAE               	btfss	_myMain^(0+128),5
  7423  104C  2851               	goto	l2208
  7424                           
  7425                           ;RF_Control_B1.c: 283: setMemory_LoopSave(1);
  7426  104D  3001               	movlw	1
  7427  104E  319A  22F7  3190   	fcall	_setMemory_LoopSave
  7428  1051                     l2208:	
  7429                           
  7430                           ;RF_Control_B1.c: 284: }
  7431                           ;RF_Control_B1.c: 285: setMemory_Modify(1);
  7432  1051  3001               	movlw	1
  7433  1052  319A  22BE         	fcall	_setMemory_Modify
  7434  1054  0008               	return
  7435  1055                     __end_of_setLog_Code:	
  7436                           
  7437                           	psect	text27
  7438  1AF7                     __ptext27:	
  7439 ;; *************** function _setMemory_LoopSave *****************
  7440 ;; Defined at:
  7441 ;;		line 1089 in file "../src/MCU_B1.c"
  7442 ;; Parameters:    Size  Location     Type
  7443 ;;  command         1    wreg     unsigned char 
  7444 ;; Auto vars:     Size  Location     Type
  7445 ;;  command         1    1[BANK0 ] unsigned char 
  7446 ;; Return value:  Size  Location     Type
  7447 ;;		None               void
  7448 ;; Registers used:
  7449 ;;		wreg, status,2, status,0
  7450 ;; Tracked objects:
  7451 ;;		On entry : 0/0
  7452 ;;		On exit  : 0/0
  7453 ;;		Unchanged: 0/0
  7454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7456 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7457 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7458 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7459 ;;Total ram usage:        2 bytes
  7460 ;; Hardware stack levels used:    1
  7461 ;; Hardware stack levels required when called:    5
  7462 ;; This function calls:
  7463 ;;		Nothing
  7464 ;; This function is called by:
  7465 ;;		_setLog_Code
  7466 ;; This function uses a non-reentrant model
  7467 ;;
  7468                           
  7469                           
  7470                           ;psect for function _setMemory_LoopSave
  7471  1AF7                     _setMemory_LoopSave:	
  7472                           
  7473                           ;incstack = 0
  7474                           ; Regs used in _setMemory_LoopSave: [wreg+status,2+status,0]
  7475                           ;setMemory_LoopSave@command stored from wreg
  7476  1AF7  0020               	movlb	0	; select bank0
  7477  1AF8  00A1               	movwf	setMemory_LoopSave@command
  7478                           
  7479                           ;MCU_B1.c: 1090: Memory.LoopSave = command == 1 ? 1 : 0;
  7480  1AF9  0821               	movf	setMemory_LoopSave@command,w
  7481  1AFA  3A01               	xorlw	1
  7482  1AFB  3000               	movlw	0
  7483  1AFC  1903               	skipnz
  7484  1AFD  3001               	movlw	1
  7485  1AFE  00A0               	movwf	??_setMemory_LoopSave
  7486  1AFF  0DA0               	rlf	??_setMemory_LoopSave,f
  7487  1B00  0DA0               	rlf	??_setMemory_LoopSave,f
  7488  1B01  0024               	movlb	4	; select bank4
  7489  1B02  0844               	movf	(_Memory^(0+512)+36),w
  7490  1B03  0020               	movlb	0	; select bank0
  7491  1B04  0620               	xorwf	??_setMemory_LoopSave,w
  7492  1B05  39FB               	andlw	-5
  7493  1B06  0620               	xorwf	??_setMemory_LoopSave,w
  7494  1B07  0024               	movlb	4	; select bank4
  7495  1B08  00C4               	movwf	(_Memory^(0+512)+36)
  7496  1B09  0008               	return
  7497  1B0A                     __end_of_setMemory_LoopSave:	
  7498                           
  7499                           	psect	text28
  7500  0CA8                     __ptext28:	
  7501 ;; *************** function _setControl_Lights_Table *****************
  7502 ;; Defined at:
  7503 ;;		line 289 in file "../src/RF_Control_B1.c"
  7504 ;; Parameters:    Size  Location     Type
  7505 ;;		None
  7506 ;; Auto vars:     Size  Location     Type
  7507 ;;		None
  7508 ;; Return value:  Size  Location     Type
  7509 ;;		None               void
  7510 ;; Registers used:
  7511 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7512 ;; Tracked objects:
  7513 ;;		On entry : 0/0
  7514 ;;		On exit  : 0/0
  7515 ;;		Unchanged: 0/0
  7516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7517 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7518 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7520 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7521 ;;Total ram usage:        0 bytes
  7522 ;; Hardware stack levels used:    1
  7523 ;; Hardware stack levels required when called:    9
  7524 ;; This function calls:
  7525 ;;		_getDimmerLights_Status
  7526 ;;		_getMain_All_LightsStatus
  7527 ;;		_setCmd_Status
  7528 ;;		_setDimmerLights_SwOff
  7529 ;;		_setDimmerLights_SwOn
  7530 ;;		_setProductData
  7531 ;;		_setRFSW_AdjControl
  7532 ;;		_setRFSW_Control
  7533 ;;		_setTxData
  7534 ;; This function is called by:
  7535 ;;		_getRxData
  7536 ;; This function uses a non-reentrant model
  7537 ;;
  7538                           
  7539                           
  7540                           ;psect for function _setControl_Lights_Table
  7541  0CA8                     _setControl_Lights_Table:	
  7542                           
  7543                           ;RF_Control_B1.c: 290: switch (RF_Data[15]) {
  7544                           
  7545                           ;incstack = 0
  7546                           ; Regs used in _setControl_Lights_Table: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7547  0CA8  2D21               	goto	l7330
  7548  0CA9                     l7306:	
  7549                           ;RF_Control_B1.c: 292: case 0x00:
  7550                           
  7551                           
  7552                           ;RF_Control_B1.c: 293: if (getMain_All_LightsStatus() == 1) {
  7553  0CA9  319A  22E4  318C   	fcall	_getMain_All_LightsStatus
  7554  0CAC  3A01               	xorlw	1
  7555  0CAD  1D03               	skipz
  7556  0CAE  2CD4               	goto	l7316
  7557                           
  7558                           ;RF_Control_B1.c: 296: if (getDimmerLights_Status(1) == 1) {
  7559  0CAF  3001               	movlw	1
  7560  0CB0  3199  21FD  318C   	fcall	_getDimmerLights_Status
  7561  0CB3  3A01               	xorlw	1
  7562  0CB4  1D03               	skipz
  7563  0CB5  2CBE               	goto	l2215
  7564                           
  7565                           ;RF_Control_B1.c: 297: setDimmerLights_SwOn(1);
  7566  0CB6  3001               	movlw	1
  7567  0CB7  3188  2000  318C   	fcall	_setDimmerLights_SwOn
  7568                           
  7569                           ;RF_Control_B1.c: 298: setDimmerLights_SwOff(1);
  7570  0CBA  3001               	movlw	1
  7571  0CBB  3187  27C6  318C   	fcall	_setDimmerLights_SwOff
  7572  0CBE                     l2215:	
  7573                           
  7574                           ;RF_Control_B1.c: 299: }
  7575                           ;RF_Control_B1.c: 302: if (getDimmerLights_Status(2) == 1) {
  7576  0CBE  3002               	movlw	2
  7577  0CBF  3199  21FD  318C   	fcall	_getDimmerLights_Status
  7578  0CC2  3A01               	xorlw	1
  7579  0CC3  1D03               	skipz
  7580  0CC4  2CCD               	goto	l7314
  7581                           
  7582                           ;RF_Control_B1.c: 303: setDimmerLights_SwOn(2);
  7583  0CC5  3002               	movlw	2
  7584  0CC6  3188  2000  318C   	fcall	_setDimmerLights_SwOn
  7585                           
  7586                           ;RF_Control_B1.c: 304: setDimmerLights_SwOff(2);
  7587  0CC9  3002               	movlw	2
  7588  0CCA  3187  27C6  318C   	fcall	_setDimmerLights_SwOff
  7589  0CCD                     l7314:	
  7590                           
  7591                           ;RF_Control_B1.c: 305: }
  7592                           ;RF_Control_B1.c: 314: setCmd_Status(1, 1);
  7593  0CCD  0020               	movlb	0	; select bank0
  7594  0CCE  01A0               	clrf	setCmd_Status@cmd
  7595  0CCF  0AA0               	incf	setCmd_Status@cmd,f
  7596  0CD0  3001               	movlw	1
  7597  0CD1  319C  2422         	fcall	_setCmd_Status
  7598                           
  7599                           ;RF_Control_B1.c: 315: } else {
  7600  0CD3  0008               	return
  7601  0CD4                     l7316:	
  7602                           
  7603                           ;RF_Control_B1.c: 316: setProductData(9, 0);
  7604  0CD4  0020               	movlb	0	; select bank0
  7605  0CD5  01E2               	clrf	setProductData@value
  7606  0CD6  3009               	movlw	9
  7607  0CD7  3199  2181  318C   	fcall	_setProductData
  7608                           
  7609                           ;RF_Control_B1.c: 317: setProductData(11, 0);
  7610  0CDA  0020               	movlb	0	; select bank0
  7611  0CDB  01E2               	clrf	setProductData@value
  7612  0CDC  300B               	movlw	11
  7613  0CDD  3199  2181  318C   	fcall	_setProductData
  7614                           
  7615                           ;RF_Control_B1.c: 318: setProductData(15, 0);
  7616  0CE0  0020               	movlb	0	; select bank0
  7617  0CE1  01E2               	clrf	setProductData@value
  7618  0CE2  300F               	movlw	15
  7619  0CE3  3199  2181  318C   	fcall	_setProductData
  7620                           
  7621                           ;RF_Control_B1.c: 319: setProductData(17, 0);
  7622  0CE6  0020               	movlb	0	; select bank0
  7623  0CE7  01E2               	clrf	setProductData@value
  7624  0CE8  3011               	movlw	17
  7625  0CE9  3199  2181  318C   	fcall	_setProductData
  7626                           
  7627                           ;RF_Control_B1.c: 320: setTxData();
  7628  0CEC  318F  2745         	fcall	_setTxData
  7629                           
  7630                           ;RF_Control_B1.c: 321: }
  7631                           ;RF_Control_B1.c: 322: break;
  7632  0CEE  0008               	return
  7633  0CEF                     l7318:	
  7634                           ;RF_Control_B1.c: 324: case 0x20:
  7635                           
  7636                           
  7637                           ;RF_Control_B1.c: 325: setProductData(9, 0);
  7638  0CEF  0020               	movlb	0	; select bank0
  7639  0CF0  01E2               	clrf	setProductData@value
  7640  0CF1  3009               	movlw	9
  7641  0CF2  3199  2181  318C   	fcall	_setProductData
  7642                           
  7643                           ;RF_Control_B1.c: 326: setProductData(11, 0);
  7644  0CF5  0020               	movlb	0	; select bank0
  7645  0CF6  01E2               	clrf	setProductData@value
  7646  0CF7  300B               	movlw	11
  7647  0CF8  3199  2181  318C   	fcall	_setProductData
  7648                           
  7649                           ;RF_Control_B1.c: 327: setProductData(15, product->Data[15]);
  7650  0CFB  0021               	movlb	1	; select bank1
  7651  0CFC  086E               	movf	_product^(0+128),w
  7652  0CFD  0086               	movwf	6
  7653  0CFE  3002               	movlw	2	; select bank4/5
  7654  0CFF  0087               	movwf	7
  7655  0D00  3002               	movlw	2	; select bank4/5
  7656  0D01  3F4F               	moviw [15]fsr1
  7657  0D02  0020               	movlb	0	; select bank0
  7658  0D03  00E2               	movwf	setProductData@value
  7659  0D04  300F               	movlw	15
  7660  0D05  3199  2181  318C   	fcall	_setProductData
  7661                           
  7662                           ;RF_Control_B1.c: 328: setProductData(17, 0);
  7663  0D08  0020               	movlb	0	; select bank0
  7664  0D09  01E2               	clrf	setProductData@value
  7665  0D0A  3011               	movlw	17
  7666  0D0B  3199  2181  318C   	fcall	_setProductData
  7667                           
  7668                           ;RF_Control_B1.c: 329: setTxData();
  7669  0D0E  318F  2745         	fcall	_setTxData
  7670                           
  7671                           ;RF_Control_B1.c: 330: break;
  7672  0D10  0008               	return
  7673  0D11                     l7320:	
  7674                           ;RF_Control_B1.c: 333: case 0x01:
  7675                           
  7676                           
  7677                           ;RF_Control_B1.c: 334: setRFSW_Control(1);
  7678  0D11  3001               	movlw	1
  7679  0D12  3191  217E         	fcall	_setRFSW_Control
  7680                           
  7681                           ;RF_Control_B1.c: 335: break;
  7682  0D14  0008               	return
  7683  0D15                     l7322:	
  7684                           ;RF_Control_B1.c: 339: case 0x11:
  7685                           
  7686                           
  7687                           ;RF_Control_B1.c: 340: setRFSW_AdjControl(1);
  7688  0D15  3001               	movlw	1
  7689  0D16  318A  228F         	fcall	_setRFSW_AdjControl
  7690                           
  7691                           ;RF_Control_B1.c: 341: break;
  7692  0D18  0008               	return
  7693  0D19                     l7324:	
  7694                           ;RF_Control_B1.c: 346: case 0x02:
  7695                           
  7696                           
  7697                           ;RF_Control_B1.c: 347: setRFSW_Control(2);
  7698  0D19  3002               	movlw	2
  7699  0D1A  3191  217E         	fcall	_setRFSW_Control
  7700                           
  7701                           ;RF_Control_B1.c: 348: break;
  7702  0D1C  0008               	return
  7703  0D1D                     l7326:	
  7704                           ;RF_Control_B1.c: 351: case 0x21:
  7705                           
  7706                           
  7707                           ;RF_Control_B1.c: 352: setRFSW_AdjControl(2);
  7708  0D1D  3002               	movlw	2
  7709  0D1E  318A  228F         	fcall	_setRFSW_AdjControl
  7710                           
  7711                           ;RF_Control_B1.c: 370: }
  7712                           
  7713                           ;RF_Control_B1.c: 353: break;
  7714  0D20  0008               	return
  7715  0D21                     l7330:	
  7716  0D21  0023               	movlb	3	; select bank3
  7717  0D22  082F               	movf	(_RF_Data^(0+384)+15),w
  7718                           
  7719                           ; Switch size 1, requested type "space"
  7720                           ; Number of cases is 6, Range of values is 0 to 33
  7721                           ; switch strategies available:
  7722                           ; Name         Instructions Cycles
  7723                           ; simple_byte           19    10 (average)
  7724                           ; direct_byte           74     6 (fixed)
  7725                           ; jumptable            260     6 (fixed)
  7726                           ;	Chosen strategy is simple_byte
  7727  0D23  3A00               	xorlw	0	; case 0
  7728  0D24  1903               	skipnz
  7729  0D25  2CA9               	goto	l7306
  7730  0D26  3A01               	xorlw	1	; case 1
  7731  0D27  1903               	skipnz
  7732  0D28  2D11               	goto	l7320
  7733  0D29  3A03               	xorlw	3	; case 2
  7734  0D2A  1903               	skipnz
  7735  0D2B  2D19               	goto	l7324
  7736  0D2C  3A13               	xorlw	19	; case 17
  7737  0D2D  1903               	skipnz
  7738  0D2E  2D15               	goto	l7322
  7739  0D2F  3A31               	xorlw	49	; case 32
  7740  0D30  1903               	skipnz
  7741  0D31  2CEF               	goto	l7318
  7742  0D32  3A01               	xorlw	1	; case 33
  7743  0D33  1903               	skipnz
  7744  0D34  2D1D               	goto	l7326
  7745  0D35  2D36               	goto	l2224
  7746  0D36                     l2224:	
  7747  0D36  0008               	return
  7748  0D37                     __end_of_setControl_Lights_Table:	
  7749                           
  7750                           	psect	text29
  7751  117E                     __ptext29:	
  7752 ;; *************** function _setRFSW_Control *****************
  7753 ;; Defined at:
  7754 ;;		line 378 in file "../src/RF_Control_B1.c"
  7755 ;; Parameters:    Size  Location     Type
  7756 ;;  sw              1    wreg     unsigned char 
  7757 ;; Auto vars:     Size  Location     Type
  7758 ;;  sw              1   79[BANK0 ] unsigned char 
  7759 ;;  status          1   78[BANK0 ] unsigned char 
  7760 ;; Return value:  Size  Location     Type
  7761 ;;		None               void
  7762 ;; Registers used:
  7763 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7764 ;; Tracked objects:
  7765 ;;		On entry : 0/0
  7766 ;;		On exit  : 0/0
  7767 ;;		Unchanged: 0/0
  7768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7770 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7771 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7772 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7773 ;;Total ram usage:        3 bytes
  7774 ;; Hardware stack levels used:    1
  7775 ;; Hardware stack levels required when called:    8
  7776 ;; This function calls:
  7777 ;;		_getDimmerLights_Status
  7778 ;;		_setBuz
  7779 ;;		_setDelayOff_GO
  7780 ;;		_setDimmerLights_SwOff
  7781 ;;		_setDimmerLights_SwOn
  7782 ;;		_setRF_DimmerLights
  7783 ;;		_setTxData
  7784 ;; This function is called by:
  7785 ;;		_setControl_Lights_Table
  7786 ;; This function uses a non-reentrant model
  7787 ;;
  7788                           
  7789                           
  7790                           ;psect for function _setRFSW_Control
  7791  117E                     _setRFSW_Control:	
  7792                           
  7793                           ;incstack = 0
  7794                           ; Regs used in _setRFSW_Control: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7795                           ;setRFSW_Control@sw stored from wreg
  7796  117E  0020               	movlb	0	; select bank0
  7797  117F  00EF               	movwf	setRFSW_Control@sw
  7798                           
  7799                           ;RF_Control_B1.c: 379: char status = 0;
  7800  1180  01EE               	clrf	setRFSW_Control@status
  7801                           
  7802                           ;RF_Control_B1.c: 381: if (RF_Data[16] == 0x80) {
  7803  1181  0023               	movlb	3	; select bank3
  7804  1182  0830               	movf	(_RF_Data^(0+384)+16),w
  7805  1183  3A80               	xorlw	128
  7806  1184  1D03               	skipz
  7807  1185  29B1               	goto	l7004
  7808                           
  7809                           ;RF_Control_B1.c: 382: setDelayOff_GO(sw, 1, RF_Data[17]);
  7810  1186  0020               	movlb	0	; select bank0
  7811  1187  01E5               	clrf	setDelayOff_GO@command
  7812  1188  0AE5               	incf	setDelayOff_GO@command,f
  7813  1189  0023               	movlb	3	; select bank3
  7814  118A  0831               	movf	(_RF_Data^(0+384)+17),w
  7815  118B  0020               	movlb	0	; select bank0
  7816  118C  00ED               	movwf	??_setRFSW_Control
  7817  118D  086D               	movf	??_setRFSW_Control,w
  7818  118E  00E6               	movwf	setDelayOff_GO@value
  7819  118F  086F               	movf	setRFSW_Control@sw,w
  7820  1190  318C  241C  3191   	fcall	_setDelayOff_GO
  7821                           
  7822                           ;RF_Control_B1.c: 383: if (getDimmerLights_Status(sw) == 1) {
  7823  1193  0020               	movlb	0	; select bank0
  7824  1194  086F               	movf	setRFSW_Control@sw,w
  7825  1195  3199  21FD  3191   	fcall	_getDimmerLights_Status
  7826  1198  3A01               	xorlw	1
  7827  1199  1D03               	skipz
  7828  119A  29B1               	goto	l7004
  7829                           
  7830                           ;RF_Control_B1.c: 384: setBuz(1, 100);
  7831  119B  3064               	movlw	100
  7832  119C  0020               	movlb	0	; select bank0
  7833  119D  00A9               	movwf	setBuz@time
  7834  119E  3000               	movlw	0
  7835  119F  00AA               	movwf	setBuz@time+1
  7836  11A0  3001               	movlw	1
  7837  11A1  3194  240B  3191   	fcall	_setBuz
  7838                           
  7839                           ;RF_Control_B1.c: 385: setRF_DimmerLights(sw, 1);
  7840  11A4  0020               	movlb	0	; select bank0
  7841  11A5  01E5               	clrf	setRF_DimmerLights@on
  7842  11A6  0AE5               	incf	setRF_DimmerLights@on,f
  7843  11A7  086F               	movf	setRFSW_Control@sw,w
  7844  11A8  3195  25EA  3191   	fcall	_setRF_DimmerLights
  7845                           
  7846                           ;RF_Control_B1.c: 386: setTxData();
  7847  11AB  318F  2745  3191   	fcall	_setTxData
  7848                           
  7849                           ;RF_Control_B1.c: 387: status = 1;
  7850  11AE  0020               	movlb	0	; select bank0
  7851  11AF  01EE               	clrf	setRFSW_Control@status
  7852  11B0  0AEE               	incf	setRFSW_Control@status,f
  7853  11B1                     l7004:	
  7854                           
  7855                           ;RF_Control_B1.c: 388: }
  7856                           ;RF_Control_B1.c: 389: }
  7857                           ;RF_Control_B1.c: 391: if (status == 0) {
  7858  11B1  0020               	movlb	0	; select bank0
  7859  11B2  08EE               	movf	setRFSW_Control@status,f
  7860  11B3  1D03               	skipz
  7861  11B4  0008               	return
  7862                           
  7863                           ;RF_Control_B1.c: 393: setDimmerLights_SwOn(sw);
  7864  11B5  086F               	movf	setRFSW_Control@sw,w
  7865  11B6  3188  2000  3191   	fcall	_setDimmerLights_SwOn
  7866                           
  7867                           ;RF_Control_B1.c: 394: setDimmerLights_SwOff(sw);
  7868  11B9  0020               	movlb	0	; select bank0
  7869  11BA  086F               	movf	setRFSW_Control@sw,w
  7870  11BB  3187  27C6         	fcall	_setDimmerLights_SwOff
  7871  11BD  0008               	return
  7872  11BE                     __end_of_setRFSW_Control:	
  7873                           
  7874                           	psect	text30
  7875  0A8F                     __ptext30:	
  7876 ;; *************** function _setRFSW_AdjControl *****************
  7877 ;; Defined at:
  7878 ;;		line 400 in file "../src/RF_Control_B1.c"
  7879 ;; Parameters:    Size  Location     Type
  7880 ;;  sw              1    wreg     unsigned char 
  7881 ;; Auto vars:     Size  Location     Type
  7882 ;;  sw              1   72[BANK0 ] unsigned char 
  7883 ;;  status          1   71[BANK0 ] unsigned char 
  7884 ;; Return value:  Size  Location     Type
  7885 ;;		None               void
  7886 ;; Registers used:
  7887 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7888 ;; Tracked objects:
  7889 ;;		On entry : 0/0
  7890 ;;		On exit  : 0/0
  7891 ;;		Unchanged: 0/0
  7892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7893 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7894 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7895 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7896 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7897 ;;Total ram usage:        4 bytes
  7898 ;; Hardware stack levels used:    1
  7899 ;; Hardware stack levels required when called:    8
  7900 ;; This function calls:
  7901 ;;		_getDimmerLights_PercentToValue
  7902 ;;		_getDimmerLights_Status
  7903 ;;		_setDimmerIntr_Dimming_RF
  7904 ;;		_setDimmerIntr_MaxmumValue
  7905 ;;		_setDimmerLights_DimmingRun
  7906 ;;		_setDimmerLights_SwOff
  7907 ;;		_setDimmerLights_SwOn
  7908 ;;		_setMemory_Modify
  7909 ;;		_setProductData
  7910 ;;		_setTxData
  7911 ;; This function is called by:
  7912 ;;		_setControl_Lights_Table
  7913 ;; This function uses a non-reentrant model
  7914 ;;
  7915                           
  7916                           
  7917                           ;psect for function _setRFSW_AdjControl
  7918  0A8F                     _setRFSW_AdjControl:	
  7919                           
  7920                           ;incstack = 0
  7921                           ; Regs used in _setRFSW_AdjControl: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7922                           ;setRFSW_AdjControl@sw stored from wreg
  7923  0A8F  0020               	movlb	0	; select bank0
  7924  0A90  00E8               	movwf	setRFSW_AdjControl@sw
  7925                           
  7926                           ;RF_Control_B1.c: 401: char status = 0;
  7927  0A91  01E7               	clrf	setRFSW_AdjControl@status
  7928                           
  7929                           ;RF_Control_B1.c: 403: status = getDimmerLights_Status(sw);
  7930  0A92  0868               	movf	setRFSW_AdjControl@sw,w
  7931  0A93  3199  21FD  318A   	fcall	_getDimmerLights_Status
  7932  0A96  0020               	movlb	0	; select bank0
  7933  0A97  00E5               	movwf	??_setRFSW_AdjControl
  7934  0A98  0865               	movf	??_setRFSW_AdjControl,w
  7935  0A99  00E7               	movwf	setRFSW_AdjControl@status
  7936                           
  7937                           ;RF_Control_B1.c: 405: if (RF_Data[9] > 0x64) {
  7938  0A9A  3065               	movlw	101
  7939  0A9B  0023               	movlb	3	; select bank3
  7940  0A9C  0229               	subwf	(_RF_Data^(0+384)+9),w
  7941  0A9D  1C03               	skipc
  7942  0A9E  2AA6               	goto	l7016
  7943                           
  7944                           ;RF_Control_B1.c: 406: RF_Data[9] = 0x64;
  7945  0A9F  3064               	movlw	100
  7946  0AA0  0020               	movlb	0	; select bank0
  7947  0AA1  00E5               	movwf	??_setRFSW_AdjControl
  7948  0AA2  0865               	movf	??_setRFSW_AdjControl,w
  7949  0AA3  0023               	movlb	3	; select bank3
  7950  0AA4  00A9               	movwf	(_RF_Data^(0+384)+9)
  7951                           
  7952                           ;RF_Control_B1.c: 407: } else if (RF_Data[9] < 0x01) {
  7953  0AA5  2AAB               	goto	l7020
  7954  0AA6                     l7016:	
  7955  0AA6  08A9               	movf	(_RF_Data^(0+384)+9),f
  7956  0AA7  1D03               	skipz
  7957  0AA8  2AAB               	goto	l7020
  7958                           
  7959                           ;RF_Control_B1.c: 408: RF_Data[9] = 0x01;
  7960  0AA9  01A9               	clrf	(_RF_Data^(0+384)+9)
  7961  0AAA  0AA9               	incf	(_RF_Data^(0+384)+9),f
  7962  0AAB                     l7020:	
  7963                           
  7964                           ;RF_Control_B1.c: 409: }
  7965                           ;RF_Control_B1.c: 410: setProductData(9, RF_Data[9]);
  7966  0AAB  0829               	movf	(_RF_Data^(0+384)+9),w
  7967  0AAC  0020               	movlb	0	; select bank0
  7968  0AAD  00E5               	movwf	??_setRFSW_AdjControl
  7969  0AAE  0865               	movf	??_setRFSW_AdjControl,w
  7970  0AAF  00E2               	movwf	setProductData@value
  7971  0AB0  3009               	movlw	9
  7972  0AB1  3199  2181  318A   	fcall	_setProductData
  7973                           
  7974                           ;RF_Control_B1.c: 411: setProductData(11, sw);
  7975  0AB4  0020               	movlb	0	; select bank0
  7976  0AB5  0868               	movf	setRFSW_AdjControl@sw,w
  7977  0AB6  00E5               	movwf	??_setRFSW_AdjControl
  7978  0AB7  0865               	movf	??_setRFSW_AdjControl,w
  7979  0AB8  00E2               	movwf	setProductData@value
  7980  0AB9  300B               	movlw	11
  7981  0ABA  3199  2181  318A   	fcall	_setProductData
  7982                           
  7983                           ;RF_Control_B1.c: 412: setProductData(17, product->Data[26 + sw]);
  7984  0ABD  0020               	movlb	0	; select bank0
  7985  0ABE  0868               	movf	setRFSW_AdjControl@sw,w
  7986  0ABF  3E1A               	addlw	26
  7987  0AC0  0021               	movlb	1	; select bank1
  7988  0AC1  076E               	addwf	_product^(0+128),w
  7989  0AC2  0020               	movlb	0	; select bank0
  7990  0AC3  00E5               	movwf	??_setRFSW_AdjControl
  7991  0AC4  0865               	movf	??_setRFSW_AdjControl,w
  7992  0AC5  0086               	movwf	6
  7993  0AC6  3002               	movlw	2	; select bank4/5
  7994  0AC7  0087               	movwf	7
  7995  0AC8  0801               	movf	1,w
  7996  0AC9  00E6               	movwf	??_setRFSW_AdjControl+1
  7997  0ACA  0866               	movf	??_setRFSW_AdjControl+1,w
  7998  0ACB  00E2               	movwf	setProductData@value
  7999  0ACC  3011               	movlw	17
  8000  0ACD  3199  2181  318A   	fcall	_setProductData
  8001                           
  8002                           ;RF_Control_B1.c: 413: setProductData((20 + sw), RF_Data[9]);
  8003  0AD0  0023               	movlb	3	; select bank3
  8004  0AD1  0829               	movf	(_RF_Data^(0+384)+9),w
  8005  0AD2  0020               	movlb	0	; select bank0
  8006  0AD3  00E5               	movwf	??_setRFSW_AdjControl
  8007  0AD4  0865               	movf	??_setRFSW_AdjControl,w
  8008  0AD5  00E2               	movwf	setProductData@value
  8009  0AD6  0868               	movf	setRFSW_AdjControl@sw,w
  8010  0AD7  3E14               	addlw	20
  8011  0AD8  3199  2181  318A   	fcall	_setProductData
  8012                           
  8013                           ;RF_Control_B1.c: 421: setMemory_Modify(1);
  8014  0ADB  3001               	movlw	1
  8015  0ADC  319A  22BE  318A   	fcall	_setMemory_Modify
  8016                           
  8017                           ;RF_Control_B1.c: 425: if (status == 1) {
  8018  0ADF  0020               	movlb	0	; select bank0
  8019  0AE0  0867               	movf	setRFSW_AdjControl@status,w
  8020  0AE1  3A01               	xorlw	1
  8021  0AE2  1D03               	skipz
  8022  0AE3  2AFB               	goto	l7030
  8023                           
  8024                           ;RF_Control_B1.c: 426: setDimmerIntr_MaxmumValue(sw, getDimmerLights_PercentToValue(RF_D
      +                          ata[9]));
  8025  0AE4  0023               	movlb	3	; select bank3
  8026  0AE5  0829               	movf	(_RF_Data^(0+384)+9),w
  8027  0AE6  3195  2520  318A   	fcall	_getDimmerLights_PercentToValue
  8028  0AE9  0020               	movlb	0	; select bank0
  8029  0AEA  00E5               	movwf	??_setRFSW_AdjControl
  8030  0AEB  0865               	movf	??_setRFSW_AdjControl,w
  8031  0AEC  00E2               	movwf	setDimmerIntr_MaxmumValue@value
  8032  0AED  0868               	movf	setRFSW_AdjControl@sw,w
  8033  0AEE  319B  23DD  318A   	fcall	_setDimmerIntr_MaxmumValue
  8034                           
  8035                           ;RF_Control_B1.c: 427: setDimmerIntr_Dimming_RF(sw, 1);
  8036  0AF1  0020               	movlb	0	; select bank0
  8037  0AF2  01A0               	clrf	setDimmerIntr_Dimming_RF@command
  8038  0AF3  0AA0               	incf	setDimmerIntr_Dimming_RF@command,f
  8039  0AF4  0868               	movf	setRFSW_AdjControl@sw,w
  8040  0AF5  319F  276F  318A   	fcall	_setDimmerIntr_Dimming_RF
  8041                           
  8042                           ;RF_Control_B1.c: 428: setTxData();
  8043  0AF8  318F  2745         	fcall	_setTxData
  8044                           
  8045                           ;RF_Control_B1.c: 430: } else if (status == 0) {
  8046  0AFA  0008               	return
  8047  0AFB                     l7030:	
  8048  0AFB  0020               	movlb	0	; select bank0
  8049  0AFC  08E7               	movf	setRFSW_AdjControl@status,f
  8050  0AFD  1D03               	skipz
  8051  0AFE  0008               	return
  8052                           
  8053                           ;RF_Control_B1.c: 434: setDimmerLights_DimmingRun(sw, 1);
  8054  0AFF  01A2               	clrf	setDimmerLights_DimmingRun@command
  8055  0B00  0AA2               	incf	setDimmerLights_DimmingRun@command,f
  8056  0B01  0868               	movf	setRFSW_AdjControl@sw,w
  8057  0B02  319C  24A3  318A   	fcall	_setDimmerLights_DimmingRun
  8058                           
  8059                           ;RF_Control_B1.c: 435: setDimmerLights_SwOn(sw);
  8060  0B05  0020               	movlb	0	; select bank0
  8061  0B06  0868               	movf	setRFSW_AdjControl@sw,w
  8062  0B07  3188  2000  318A   	fcall	_setDimmerLights_SwOn
  8063                           
  8064                           ;RF_Control_B1.c: 436: setDimmerLights_SwOff(sw);
  8065  0B0A  0020               	movlb	0	; select bank0
  8066  0B0B  0868               	movf	setRFSW_AdjControl@sw,w
  8067  0B0C  3187  27C6         	fcall	_setDimmerLights_SwOff
  8068  0B0E  0008               	return
  8069  0B0F                     __end_of_setRFSW_AdjControl:	
  8070                           
  8071                           	psect	text31
  8072  1CA3                     __ptext31:	
  8073 ;; *************** function _setDimmerLights_DimmingRun *****************
  8074 ;; Defined at:
  8075 ;;		line 1079 in file "../src/Dimmer_B1.c"
  8076 ;; Parameters:    Size  Location     Type
  8077 ;;  lights          1    wreg     unsigned char 
  8078 ;;  command         1    2[BANK0 ] unsigned char 
  8079 ;; Auto vars:     Size  Location     Type
  8080 ;;  lights          1    4[BANK0 ] unsigned char 
  8081 ;; Return value:  Size  Location     Type
  8082 ;;		None               void
  8083 ;; Registers used:
  8084 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8085 ;; Tracked objects:
  8086 ;;		On entry : 0/0
  8087 ;;		On exit  : 0/0
  8088 ;;		Unchanged: 0/0
  8089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8090 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8091 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8092 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8093 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8094 ;;Total ram usage:        3 bytes
  8095 ;; Hardware stack levels used:    1
  8096 ;; Hardware stack levels required when called:    6
  8097 ;; This function calls:
  8098 ;;		_DimmerLights_SelectPointer
  8099 ;; This function is called by:
  8100 ;;		_setRFSW_AdjControl
  8101 ;; This function uses a non-reentrant model
  8102 ;;
  8103                           
  8104                           
  8105                           ;psect for function _setDimmerLights_DimmingRun
  8106  1CA3                     _setDimmerLights_DimmingRun:	
  8107                           
  8108                           ;incstack = 0
  8109                           ; Regs used in _setDimmerLights_DimmingRun: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+c
      +                          stack]
  8110                           ;setDimmerLights_DimmingRun@lights stored from wreg
  8111  1CA3  0020               	movlb	0	; select bank0
  8112  1CA4  00A4               	movwf	setDimmerLights_DimmingRun@lights
  8113                           
  8114                           ;Dimmer_B1.c: 1080: DimmerLights_SelectPointer(lights);
  8115  1CA5  0824               	movf	setDimmerLights_DimmingRun@lights,w
  8116  1CA6  319B  23C6         	fcall	_DimmerLights_SelectPointer
  8117                           
  8118                           ;Dimmer_B1.c: 1081: DimmerLights->DimmingRun = command == 1 ? 1 : 0;
  8119  1CA8  0020               	movlb	0	; select bank0
  8120  1CA9  0822               	movf	setDimmerLights_DimmingRun@command,w
  8121  1CAA  3A01               	xorlw	1
  8122  1CAB  3000               	movlw	0
  8123  1CAC  1903               	skipnz
  8124  1CAD  3001               	movlw	1
  8125  1CAE  00A3               	movwf	??_setDimmerLights_DimmingRun
  8126  1CAF  0021               	movlb	1	; select bank1
  8127  1CB0  0A56               	incf	_DimmerLights^(0+128),w
  8128  1CB1  0086               	movwf	6
  8129  1CB2  3001               	movlw	1	; select bank2/3
  8130  1CB3  0087               	movwf	7
  8131  1CB4  0020               	movlb	0	; select bank0
  8132  1CB5  0EA3               	swapf	??_setDimmerLights_DimmingRun,f
  8133  1CB6  0DA3               	rlf	??_setDimmerLights_DimmingRun,f
  8134  1CB7  0DA3               	rlf	??_setDimmerLights_DimmingRun,f
  8135  1CB8  0801               	movf	1,w
  8136  1CB9  0623               	xorwf	??_setDimmerLights_DimmingRun,w
  8137  1CBA  39BF               	andlw	-65
  8138  1CBB  0623               	xorwf	??_setDimmerLights_DimmingRun,w
  8139  1CBC  0081               	movwf	1
  8140  1CBD  0008               	return
  8141  1CBE                     __end_of_setDimmerLights_DimmingRun:	
  8142                           
  8143                           	psect	text32
  8144  1A41                     __ptext32:	
  8145 ;; *************** function _getRF_KeyStatus *****************
  8146 ;; Defined at:
  8147 ;;		line 166 in file "../src/RF_Control_B1.c"
  8148 ;; Parameters:    Size  Location     Type
  8149 ;;		None
  8150 ;; Auto vars:     Size  Location     Type
  8151 ;;  key             1    1[BANK0 ] unsigned char 
  8152 ;; Return value:  Size  Location     Type
  8153 ;;                  1    wreg      unsigned char 
  8154 ;; Registers used:
  8155 ;;		wreg, status,2
  8156 ;; Tracked objects:
  8157 ;;		On entry : 0/0
  8158 ;;		On exit  : 0/0
  8159 ;;		Unchanged: 0/0
  8160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8162 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8163 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8164 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8165 ;;Total ram usage:        3 bytes
  8166 ;; Hardware stack levels used:    1
  8167 ;; Hardware stack levels required when called:    5
  8168 ;; This function calls:
  8169 ;;		Nothing
  8170 ;; This function is called by:
  8171 ;;		_setRF_Main
  8172 ;; This function uses a non-reentrant model
  8173 ;;
  8174                           
  8175                           
  8176                           ;psect for function _getRF_KeyStatus
  8177  1A41                     _getRF_KeyStatus:	
  8178                           
  8179                           ;RF_Control_B1.c: 167: char key = 0;
  8180                           
  8181                           ;incstack = 0
  8182                           ; Regs used in _getRF_KeyStatus: [wreg+status,2]
  8183  1A41  0020               	movlb	0	; select bank0
  8184  1A42  01A1               	clrf	getRF_KeyStatus@key
  8185                           
  8186                           ;RF_Control_B1.c: 173: key = (RA0 == 1 || RB1 == 1 || RA6 == 1 || RA4 == 1) ? 1 : 0;
  8187  1A43  01A2               	clrf	_getRF_KeyStatus$5110
  8188  1A44  0AA2               	incf	_getRF_KeyStatus$5110,f
  8189  1A45  1C0C               	btfss	12,0	;volatile
  8190  1A46  188D               	btfsc	13,1	;volatile
  8191  1A47  2A4C               	goto	l7698
  8192  1A48  1F0C               	btfss	12,6	;volatile
  8193  1A49  1A0C               	btfsc	12,4	;volatile
  8194  1A4A  2A4C               	goto	l7698
  8195  1A4B  01A2               	clrf	_getRF_KeyStatus$5110
  8196  1A4C                     l7698:	
  8197  1A4C  0822               	movf	_getRF_KeyStatus$5110,w
  8198  1A4D  00A0               	movwf	??_getRF_KeyStatus
  8199  1A4E  0820               	movf	??_getRF_KeyStatus,w
  8200  1A4F  00A1               	movwf	getRF_KeyStatus@key
  8201                           
  8202                           ;RF_Control_B1.c: 179: return key;
  8203  1A50  0821               	movf	getRF_KeyStatus@key,w
  8204  1A51  0008               	return
  8205  1A52                     __end_of_getRF_KeyStatus:	
  8206                           
  8207                           	psect	text33
  8208  1A30                     __ptext33:	
  8209 ;; *************** function _getBuz_GO *****************
  8210 ;; Defined at:
  8211 ;;		line 82 in file "../src/Buzzer_B1.c"
  8212 ;; Parameters:    Size  Location     Type
  8213 ;;		None
  8214 ;; Auto vars:     Size  Location     Type
  8215 ;;  i               2    4[BANK0 ] int 
  8216 ;; Return value:  Size  Location     Type
  8217 ;;                  2    0[BANK0 ] int 
  8218 ;; Registers used:
  8219 ;;		wreg, status,2, status,0
  8220 ;; Tracked objects:
  8221 ;;		On entry : 0/0
  8222 ;;		On exit  : 0/0
  8223 ;;		Unchanged: 0/0
  8224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8225 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8226 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8227 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8228 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8229 ;;Total ram usage:        6 bytes
  8230 ;; Hardware stack levels used:    1
  8231 ;; Hardware stack levels required when called:    5
  8232 ;; This function calls:
  8233 ;;		Nothing
  8234 ;; This function is called by:
  8235 ;;		_setRF_Main
  8236 ;; This function uses a non-reentrant model
  8237 ;;
  8238                           
  8239                           
  8240                           ;psect for function _getBuz_GO
  8241  1A30                     _getBuz_GO:	
  8242                           
  8243                           ;Buzzer_B1.c: 83: int i = Buz1.GO;
  8244                           
  8245                           ;incstack = 0
  8246                           ; Regs used in _getBuz_GO: [wreg+status,2+status,0]
  8247  1A30  0022               	movlb	2	; select bank2
  8248  1A31  0C20               	rrf	_Buz1^(0+256),w
  8249  1A32  3901               	andlw	1
  8250  1A33  0020               	movlb	0	; select bank0
  8251  1A34  00A2               	movwf	??_getBuz_GO
  8252  1A35  01A3               	clrf	??_getBuz_GO+1
  8253  1A36  0822               	movf	??_getBuz_GO,w
  8254  1A37  00A4               	movwf	getBuz_GO@i
  8255  1A38  0823               	movf	??_getBuz_GO+1,w
  8256  1A39  00A5               	movwf	getBuz_GO@i+1
  8257                           
  8258                           ;Buzzer_B1.c: 84: return i;
  8259  1A3A  0825               	movf	getBuz_GO@i+1,w
  8260  1A3B  01A1               	clrf	?_getBuz_GO+1
  8261  1A3C  07A1               	addwf	?_getBuz_GO+1,f
  8262  1A3D  0824               	movf	getBuz_GO@i,w
  8263  1A3E  01A0               	clrf	?_getBuz_GO
  8264  1A3F  07A0               	addwf	?_getBuz_GO,f
  8265  1A40  0008               	return
  8266  1A41                     __end_of_getBuz_GO:	
  8267                           
  8268                           	psect	text34
  8269  19EE                     __ptext34:	
  8270 ;; *************** function _RF_RxDisable *****************
  8271 ;; Defined at:
  8272 ;;		line 154 in file "../src/RF_Control_B1.c"
  8273 ;; Parameters:    Size  Location     Type
  8274 ;;		None
  8275 ;; Auto vars:     Size  Location     Type
  8276 ;;		None
  8277 ;; Return value:  Size  Location     Type
  8278 ;;		None               void
  8279 ;; Registers used:
  8280 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8281 ;; Tracked objects:
  8282 ;;		On entry : 0/0
  8283 ;;		On exit  : 0/0
  8284 ;;		Unchanged: 0/0
  8285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8289 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8290 ;;Total ram usage:        0 bytes
  8291 ;; Hardware stack levels used:    1
  8292 ;; Hardware stack levels required when called:    7
  8293 ;; This function calls:
  8294 ;;		_CC2500_WriteCommand
  8295 ;; This function is called by:
  8296 ;;		_setRF_Main
  8297 ;; This function uses a non-reentrant model
  8298 ;;
  8299                           
  8300                           
  8301                           ;psect for function _RF_RxDisable
  8302  19EE                     _RF_RxDisable:	
  8303                           
  8304                           ;RF_Control_B1.c: 155: if (RF1.ReceiveGO == 1 || RF1.RxStatus == 1) {
  8305                           
  8306                           ;incstack = 0
  8307                           ; Regs used in _RF_RxDisable: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8308  19EE  0021               	movlb	1	; select bank1
  8309  19EF  18A0               	btfsc	_RF1^(0+128),1
  8310  19F0  29F3               	goto	l2178
  8311  19F1  1DA0               	btfss	_RF1^(0+128),3
  8312  19F2  0008               	return
  8313  19F3                     l2178:	
  8314                           
  8315                           ;RF_Control_B1.c: 156: RF1.RxStatus = 0;
  8316  19F3  11A0               	bcf	_RF1^(0+128),3
  8317                           
  8318                           ;RF_Control_B1.c: 157: RF1.ReceiveGO = 0;
  8319  19F4  10A0               	bcf	_RF1^(0+128),1
  8320                           
  8321                           ;RF_Control_B1.c: 158: CC2500_WriteCommand(0x36);
  8322  19F5  3036               	movlw	54
  8323  19F6  319C  246E  3199   	fcall	_CC2500_WriteCommand
  8324                           
  8325                           ;RF_Control_B1.c: 159: CC2500_WriteCommand(0x3A);
  8326  19F9  303A               	movlw	58
  8327  19FA  319C  246E         	fcall	_CC2500_WriteCommand
  8328  19FC  0008               	return
  8329  19FD                     __end_of_RF_RxDisable:	
  8330                           
  8331                           	psect	text35
  8332  1725                     __ptext35:	
  8333 ;; *************** function _CC2500_TxData *****************
  8334 ;; Defined at:
  8335 ;;		line 32 in file "../src/CC2500_B1.c"
  8336 ;; Parameters:    Size  Location     Type
  8337 ;;		None
  8338 ;; Auto vars:     Size  Location     Type
  8339 ;;  loop_e          1    5[BANK0 ] unsigned char 
  8340 ;; Return value:  Size  Location     Type
  8341 ;;		None               void
  8342 ;; Registers used:
  8343 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8344 ;; Tracked objects:
  8345 ;;		On entry : 0/0
  8346 ;;		On exit  : 0/0
  8347 ;;		Unchanged: 0/0
  8348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8349 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8350 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8351 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8352 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8353 ;;Total ram usage:        2 bytes
  8354 ;; Hardware stack levels used:    1
  8355 ;; Hardware stack levels required when called:    7
  8356 ;; This function calls:
  8357 ;;		_CC2500_WriteByte
  8358 ;;		_CC2500_WriteCommand
  8359 ;;		_RF_Timeout_Counter
  8360 ;;		_setRF_TimeoutCleared
  8361 ;; This function is called by:
  8362 ;;		_setRF_Main
  8363 ;; This function uses a non-reentrant model
  8364 ;;
  8365                           
  8366                           
  8367                           ;psect for function _CC2500_TxData
  8368  1725                     _CC2500_TxData:	
  8369                           
  8370                           ;CC2500_B1.c: 33: unsigned char loop_e;
  8371                           ;CC2500_B1.c: 35: CC2500_WriteCommand(0x36);
  8372                           
  8373                           ;incstack = 0
  8374                           ; Regs used in _CC2500_TxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8375  1725  3036               	movlw	54
  8376  1726  319C  246E  3197   	fcall	_CC2500_WriteCommand
  8377                           
  8378                           ;CC2500_B1.c: 36: CC2500_WriteCommand(0x3B);
  8379  1729  303B               	movlw	59
  8380  172A  319C  246E  3197   	fcall	_CC2500_WriteCommand
  8381                           
  8382                           ;CC2500_B1.c: 38: RC4 = 0;
  8383  172D  0020               	movlb	0	; select bank0
  8384  172E  120E               	bcf	14,4	;volatile
  8385                           
  8386                           ;CC2500_B1.c: 39: SPI0Buffer = 0x3F + 0x40;
  8387  172F  307F               	movlw	127
  8388  1730  00A4               	movwf	??_CC2500_TxData
  8389  1731  0824               	movf	??_CC2500_TxData,w
  8390  1732  0021               	movlb	1	; select bank1
  8391  1733  00D8               	movwf	_SPI0Buffer^(0+128)
  8392                           
  8393                           ;CC2500_B1.c: 40: while (RC2 == 1 && RF1.Timeout == 0) {
  8394  1734  2F38               	goto	l9406
  8395  1735                     l9404:	
  8396                           
  8397                           ;CC2500_B1.c: 41: RF_Timeout_Counter();
  8398  1735  319B  2345  3197   	fcall	_RF_Timeout_Counter
  8399  1738                     l9406:	
  8400  1738  0020               	movlb	0	; select bank0
  8401  1739  1D0E               	btfss	14,2	;volatile
  8402  173A  2F3E               	goto	l9410
  8403  173B  0021               	movlb	1	; select bank1
  8404  173C  1F21               	btfss	(_RF1^(0+128)+1),6
  8405  173D  2F35               	goto	l9404
  8406  173E                     l9410:	
  8407                           
  8408                           ;CC2500_B1.c: 42: };
  8409                           ;CC2500_B1.c: 43: setRF_TimeoutCleared();
  8410  173E  3198  20D1  3197   	fcall	_setRF_TimeoutCleared
  8411                           
  8412                           ;CC2500_B1.c: 45: CC2500_WriteByte();
  8413  1741  319C  243B  3197   	fcall	_CC2500_WriteByte
  8414                           
  8415                           ;CC2500_B1.c: 46: SPI0Buffer = Tx_Length;
  8416  1744  0021               	movlb	1	; select bank1
  8417  1745  085A               	movf	_Tx_Length^(0+128),w
  8418  1746  0020               	movlb	0	; select bank0
  8419  1747  00A4               	movwf	??_CC2500_TxData
  8420  1748  0824               	movf	??_CC2500_TxData,w
  8421  1749  0021               	movlb	1	; select bank1
  8422  174A  00D8               	movwf	_SPI0Buffer^(0+128)
  8423                           
  8424                           ;CC2500_B1.c: 47: CC2500_WriteByte();
  8425  174B  319C  243B  3197   	fcall	_CC2500_WriteByte
  8426                           
  8427                           ;CC2500_B1.c: 48: for (loop_e = 0; loop_e < Tx_Length; loop_e++) {
  8428  174E  0020               	movlb	0	; select bank0
  8429  174F  01A5               	clrf	CC2500_TxData@loop_e
  8430  1750                     l9424:	
  8431  1750  0021               	movlb	1	; select bank1
  8432  1751  085A               	movf	_Tx_Length^(0+128),w
  8433  1752  0020               	movlb	0	; select bank0
  8434  1753  0225               	subwf	CC2500_TxData@loop_e,w
  8435  1754  1803               	btfsc	3,0
  8436  1755  2F69               	goto	l259
  8437                           
  8438                           ;CC2500_B1.c: 49: SPI0Buffer = RF_Data[loop_e];
  8439  1756  0825               	movf	CC2500_TxData@loop_e,w
  8440  1757  3EA0               	addlw	_RF_Data& (0+255)
  8441  1758  0086               	movwf	6
  8442  1759  3001               	movlw	1	; select bank3/4
  8443  175A  0087               	movwf	7
  8444  175B  0801               	movf	1,w
  8445  175C  00A4               	movwf	??_CC2500_TxData
  8446  175D  0824               	movf	??_CC2500_TxData,w
  8447  175E  0021               	movlb	1	; select bank1
  8448  175F  00D8               	movwf	_SPI0Buffer^(0+128)
  8449                           
  8450                           ;CC2500_B1.c: 50: CC2500_WriteByte();
  8451  1760  319C  243B  3197   	fcall	_CC2500_WriteByte
  8452  1763  3001               	movlw	1
  8453  1764  0020               	movlb	0	; select bank0
  8454  1765  00A4               	movwf	??_CC2500_TxData
  8455  1766  0824               	movf	??_CC2500_TxData,w
  8456  1767  07A5               	addwf	CC2500_TxData@loop_e,f
  8457  1768  2F50               	goto	l9424
  8458  1769                     l259:	
  8459                           
  8460                           ;CC2500_B1.c: 51: }
  8461                           ;CC2500_B1.c: 52: RC4 = 1;
  8462  1769  160E               	bsf	14,4	;volatile
  8463                           
  8464                           ;CC2500_B1.c: 53: CC2500_WriteCommand(0x35);
  8465  176A  3035               	movlw	53
  8466  176B  319C  246E  3197   	fcall	_CC2500_WriteCommand
  8467                           
  8468                           ;CC2500_B1.c: 54: while (RB0 == 0 && RF1.Timeout == 0) {
  8469  176E  2F72               	goto	l9430
  8470  176F                     l9428:	
  8471                           
  8472                           ;CC2500_B1.c: 55: RF_Timeout_Counter();
  8473  176F  319B  2345  3197   	fcall	_RF_Timeout_Counter
  8474  1772                     l9430:	
  8475  1772  0020               	movlb	0	; select bank0
  8476  1773  180D               	btfsc	13,0	;volatile
  8477  1774  2F78               	goto	l9434
  8478  1775  0021               	movlb	1	; select bank1
  8479  1776  1F21               	btfss	(_RF1^(0+128)+1),6
  8480  1777  2F6F               	goto	l9428
  8481  1778                     l9434:	
  8482                           
  8483                           ;CC2500_B1.c: 56: };
  8484                           ;CC2500_B1.c: 57: setRF_TimeoutCleared();
  8485  1778  3198  20D1  3197   	fcall	_setRF_TimeoutCleared
  8486                           
  8487                           ;CC2500_B1.c: 59: while (RB0 == 1 && RF1.Timeout == 0) {
  8488  177B  2F7F               	goto	l9438
  8489  177C                     l9436:	
  8490                           
  8491                           ;CC2500_B1.c: 60: RF_Timeout_Counter();
  8492  177C  319B  2345  3197   	fcall	_RF_Timeout_Counter
  8493  177F                     l9438:	
  8494  177F  0020               	movlb	0	; select bank0
  8495  1780  1C0D               	btfss	13,0	;volatile
  8496  1781  2F85               	goto	l9442
  8497  1782  0021               	movlb	1	; select bank1
  8498  1783  1F21               	btfss	(_RF1^(0+128)+1),6
  8499  1784  2F7C               	goto	l9436
  8500  1785                     l9442:	
  8501                           
  8502                           ;CC2500_B1.c: 61: };
  8503                           ;CC2500_B1.c: 62: setRF_TimeoutCleared();
  8504  1785  3198  20D1  3197   	fcall	_setRF_TimeoutCleared
  8505                           
  8506                           ;CC2500_B1.c: 64: CC2500_WriteCommand(0x36);
  8507  1788  3036               	movlw	54
  8508  1789  319C  246E  3197   	fcall	_CC2500_WriteCommand
  8509                           
  8510                           ;CC2500_B1.c: 65: CC2500_WriteCommand(0x3B);
  8511  178C  303B               	movlw	59
  8512  178D  319C  246E         	fcall	_CC2500_WriteCommand
  8513                           
  8514                           ;CC2500_B1.c: 67: Transceive_OK = 1;
  8515  178F  147D               	bsf	_Transceive_OK/(0+8),_Transceive_OK& (0+7)
  8516  1790  0008               	return
  8517  1791                     __end_of_CC2500_TxData:	
  8518                           
  8519                           	psect	text36
  8520  16BA                     __ptext36:	
  8521 ;; *************** function _CC2500_RxData *****************
  8522 ;; Defined at:
  8523 ;;		line 73 in file "../src/CC2500_B1.c"
  8524 ;; Parameters:    Size  Location     Type
  8525 ;;		None
  8526 ;; Auto vars:     Size  Location     Type
  8527 ;;  loop_f          1    5[BANK0 ] unsigned char 
  8528 ;; Return value:  Size  Location     Type
  8529 ;;		None               void
  8530 ;; Registers used:
  8531 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8532 ;; Tracked objects:
  8533 ;;		On entry : 0/0
  8534 ;;		On exit  : 0/0
  8535 ;;		Unchanged: 0/0
  8536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8537 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8538 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8539 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8540 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8541 ;;Total ram usage:        2 bytes
  8542 ;; Hardware stack levels used:    1
  8543 ;; Hardware stack levels required when called:    7
  8544 ;; This function calls:
  8545 ;;		_CC2500_ReadByte
  8546 ;;		_CC2500_ReadStatus
  8547 ;;		_CC2500_WriteByte
  8548 ;;		_CC2500_WriteCommand
  8549 ;;		_RF_Timeout_Counter
  8550 ;;		_setRF_TimeoutCleared
  8551 ;; This function is called by:
  8552 ;;		_setRF_Main
  8553 ;; This function uses a non-reentrant model
  8554 ;;
  8555                           
  8556                           
  8557                           ;psect for function _CC2500_RxData
  8558  16BA                     _CC2500_RxData:	
  8559                           
  8560                           ;CC2500_B1.c: 74: unsigned char loop_f;
  8561                           ;CC2500_B1.c: 78: if (RB0 == 0) {
  8562                           
  8563                           ;incstack = 0
  8564                           ; Regs used in _CC2500_RxData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8565  16BA  0020               	movlb	0	; select bank0
  8566  16BB  180D               	btfsc	13,0	;volatile
  8567  16BC  0008               	return
  8568                           
  8569                           ;CC2500_B1.c: 87: CC2500_ReadStatus(0x3B);
  8570  16BD  303B               	movlw	59
  8571  16BE  319E  2678  3196   	fcall	_CC2500_ReadStatus
  8572                           
  8573                           ;CC2500_B1.c: 89: if (s_data != 0) {
  8574  16C1  0021               	movlb	1	; select bank1
  8575  16C2  085B               	movf	_s_data^(0+128),w
  8576  16C3  1903               	btfsc	3,2
  8577  16C4  0008               	return
  8578                           
  8579                           ;CC2500_B1.c: 90: RC4 = 0;
  8580  16C5  0020               	movlb	0	; select bank0
  8581  16C6  120E               	bcf	14,4	;volatile
  8582                           
  8583                           ;CC2500_B1.c: 91: SPI0Buffer = 0x3F + 0xC0;
  8584  16C7  30FF               	movlw	255
  8585  16C8  00A4               	movwf	??_CC2500_RxData
  8586  16C9  0824               	movf	??_CC2500_RxData,w
  8587  16CA  0021               	movlb	1	; select bank1
  8588  16CB  00D8               	movwf	_SPI0Buffer^(0+128)
  8589                           
  8590                           ;CC2500_B1.c: 93: while (RC2 == 1 && RF1.Timeout == 0) {
  8591  16CC  2ED0               	goto	l9462
  8592  16CD                     l9460:	
  8593                           
  8594                           ;CC2500_B1.c: 94: RF_Timeout_Counter();
  8595  16CD  319B  2345  3196   	fcall	_RF_Timeout_Counter
  8596  16D0                     l9462:	
  8597  16D0  0020               	movlb	0	; select bank0
  8598  16D1  1D0E               	btfss	14,2	;volatile
  8599  16D2  2ED6               	goto	l9466
  8600  16D3  0021               	movlb	1	; select bank1
  8601  16D4  1F21               	btfss	(_RF1^(0+128)+1),6
  8602  16D5  2ECD               	goto	l9460
  8603  16D6                     l9466:	
  8604                           
  8605                           ;CC2500_B1.c: 95: };
  8606                           ;CC2500_B1.c: 96: setRF_TimeoutCleared();
  8607  16D6  3198  20D1  3196   	fcall	_setRF_TimeoutCleared
  8608                           
  8609                           ;CC2500_B1.c: 98: CC2500_WriteByte();
  8610  16D9  319C  243B  3196   	fcall	_CC2500_WriteByte
  8611                           
  8612                           ;CC2500_B1.c: 99: CC2500_ReadByte();
  8613  16DC  319C  24F7  3196   	fcall	_CC2500_ReadByte
  8614                           
  8615                           ;CC2500_B1.c: 100: Rx_Length = SPI0Buffer;
  8616  16DF  0021               	movlb	1	; select bank1
  8617  16E0  0858               	movf	_SPI0Buffer^(0+128),w
  8618  16E1  0020               	movlb	0	; select bank0
  8619  16E2  00A4               	movwf	??_CC2500_RxData
  8620  16E3  0824               	movf	??_CC2500_RxData,w
  8621  16E4  0022               	movlb	2	; select bank2
  8622  16E5  00BB               	movwf	_Rx_Length^(0+256)
  8623                           
  8624                           ;CC2500_B1.c: 101: for (loop_f = 0; loop_f < Rx_Length; loop_f++) {
  8625  16E6  0020               	movlb	0	; select bank0
  8626  16E7  01A5               	clrf	CC2500_RxData@loop_f
  8627  16E8                     l9482:	
  8628  16E8  0022               	movlb	2	; select bank2
  8629  16E9  083B               	movf	_Rx_Length^(0+256),w
  8630  16EA  0020               	movlb	0	; select bank0
  8631  16EB  0225               	subwf	CC2500_RxData@loop_f,w
  8632  16EC  1803               	btfsc	3,0
  8633  16ED  2F01               	goto	l9484
  8634                           
  8635                           ;CC2500_B1.c: 102: CC2500_ReadByte();
  8636  16EE  319C  24F7  3196   	fcall	_CC2500_ReadByte
  8637                           
  8638                           ;CC2500_B1.c: 103: RF_Data[loop_f] = SPI0Buffer;
  8639  16F1  0021               	movlb	1	; select bank1
  8640  16F2  0858               	movf	_SPI0Buffer^(0+128),w
  8641  16F3  0020               	movlb	0	; select bank0
  8642  16F4  00A4               	movwf	??_CC2500_RxData
  8643  16F5  0825               	movf	CC2500_RxData@loop_f,w
  8644  16F6  3EA0               	addlw	_RF_Data& (0+255)
  8645  16F7  0086               	movwf	6
  8646  16F8  3001               	movlw	1	; select bank3/4
  8647  16F9  0087               	movwf	7
  8648  16FA  0824               	movf	??_CC2500_RxData,w
  8649  16FB  0081               	movwf	1
  8650  16FC  3001               	movlw	1
  8651  16FD  00A4               	movwf	??_CC2500_RxData
  8652  16FE  0824               	movf	??_CC2500_RxData,w
  8653  16FF  07A5               	addwf	CC2500_RxData@loop_f,f
  8654  1700  2EE8               	goto	l9482
  8655  1701                     l9484:	
  8656                           
  8657                           ;CC2500_B1.c: 104: }
  8658                           ;CC2500_B1.c: 105: CC2500_ReadByte();
  8659  1701  319C  24F7  3196   	fcall	_CC2500_ReadByte
  8660                           
  8661                           ;CC2500_B1.c: 106: RSSI = SPI0Buffer;
  8662  1704  0021               	movlb	1	; select bank1
  8663  1705  0858               	movf	_SPI0Buffer^(0+128),w
  8664  1706  0020               	movlb	0	; select bank0
  8665  1707  00A4               	movwf	??_CC2500_RxData
  8666  1708  0824               	movf	??_CC2500_RxData,w
  8667  1709  0022               	movlb	2	; select bank2
  8668  170A  00BA               	movwf	_RSSI^(0+256)
  8669                           
  8670                           ;CC2500_B1.c: 107: CC2500_ReadByte();
  8671  170B  319C  24F7  3196   	fcall	_CC2500_ReadByte
  8672                           
  8673                           ;CC2500_B1.c: 108: CRC = SPI0Buffer;
  8674  170E  0021               	movlb	1	; select bank1
  8675  170F  0858               	movf	_SPI0Buffer^(0+128),w
  8676  1710  0020               	movlb	0	; select bank0
  8677  1711  00A4               	movwf	??_CC2500_RxData
  8678  1712  0824               	movf	??_CC2500_RxData,w
  8679  1713  0021               	movlb	1	; select bank1
  8680  1714  00D3               	movwf	_CRC^(0+128)
  8681                           
  8682                           ;CC2500_B1.c: 109: RC4 = 1;
  8683  1715  0020               	movlb	0	; select bank0
  8684  1716  160E               	bsf	14,4	;volatile
  8685                           
  8686                           ;CC2500_B1.c: 110: if (CRC & 0x80)
  8687  1717  0021               	movlb	1	; select bank1
  8688  1718  1BD3               	btfsc	_CRC^(0+128),7
  8689                           
  8690                           ;CC2500_B1.c: 111: Receive_OK = 1;
  8691  1719  146F               	bsf	(_Receive_OK/(0+8))^(0+128),_Receive_OK& (0+7)
  8692                           
  8693                           ;CC2500_B1.c: 113: RF1.RxStatus = 0;
  8694  171A  11A0               	bcf	_RF1^(0+128),3
  8695                           
  8696                           ;CC2500_B1.c: 114: RF1.ReceiveGO = 1;
  8697  171B  14A0               	bsf	_RF1^(0+128),1
  8698                           
  8699                           ;CC2500_B1.c: 115: CC2500_WriteCommand(0x36);
  8700  171C  3036               	movlw	54
  8701  171D  319C  246E  3196   	fcall	_CC2500_WriteCommand
  8702                           
  8703                           ;CC2500_B1.c: 116: CC2500_WriteCommand(0x3A);
  8704  1720  303A               	movlw	58
  8705  1721  319C  246E         	fcall	_CC2500_WriteCommand
  8706  1723  0021               	movlb	1	; select bank1
  8707  1724  0008               	return
  8708  1725                     __end_of_CC2500_RxData:	
  8709                           
  8710                           	psect	text37
  8711  1E78                     __ptext37:	
  8712 ;; *************** function _CC2500_ReadStatus *****************
  8713 ;; Defined at:
  8714 ;;		line 308 in file "../src/CC2500_B1.c"
  8715 ;; Parameters:    Size  Location     Type
  8716 ;;  status_addr     1    wreg     unsigned char 
  8717 ;; Auto vars:     Size  Location     Type
  8718 ;;  status_addr     1    3[BANK0 ] unsigned char 
  8719 ;; Return value:  Size  Location     Type
  8720 ;;		None               void
  8721 ;; Registers used:
  8722 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8723 ;; Tracked objects:
  8724 ;;		On entry : 0/0
  8725 ;;		On exit  : 0/0
  8726 ;;		Unchanged: 0/0
  8727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8729 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8730 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8731 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8732 ;;Total ram usage:        2 bytes
  8733 ;; Hardware stack levels used:    1
  8734 ;; Hardware stack levels required when called:    6
  8735 ;; This function calls:
  8736 ;;		_CC2500_ReadByte
  8737 ;;		_CC2500_WriteByte
  8738 ;;		_RF_Timeout_Counter
  8739 ;;		_setRF_TimeoutCleared
  8740 ;; This function is called by:
  8741 ;;		_CC2500_RxData
  8742 ;; This function uses a non-reentrant model
  8743 ;;
  8744                           
  8745                           
  8746                           ;psect for function _CC2500_ReadStatus
  8747  1E78                     _CC2500_ReadStatus:	
  8748                           
  8749                           ;incstack = 0
  8750                           ; Regs used in _CC2500_ReadStatus: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8751                           ;CC2500_ReadStatus@status_addr stored from wreg
  8752  1E78  0020               	movlb	0	; select bank0
  8753  1E79  00A3               	movwf	CC2500_ReadStatus@status_addr
  8754                           
  8755                           ;CC2500_B1.c: 309: RC4 = 0;
  8756  1E7A  120E               	bcf	14,4	;volatile
  8757                           
  8758                           ;CC2500_B1.c: 310: SPI0Buffer = status_addr + 0xC0;
  8759  1E7B  0823               	movf	CC2500_ReadStatus@status_addr,w
  8760  1E7C  3EC0               	addlw	192
  8761  1E7D  00A2               	movwf	??_CC2500_ReadStatus
  8762  1E7E  0822               	movf	??_CC2500_ReadStatus,w
  8763  1E7F  0021               	movlb	1	; select bank1
  8764  1E80  00D8               	movwf	_SPI0Buffer^(0+128)
  8765                           
  8766                           ;CC2500_B1.c: 312: while (RC2 == 1 && RF1.Timeout == 0) {
  8767  1E81  2E85               	goto	l9312
  8768  1E82                     l9310:	
  8769                           
  8770                           ;CC2500_B1.c: 313: RF_Timeout_Counter();
  8771  1E82  319B  2345  319E   	fcall	_RF_Timeout_Counter
  8772  1E85                     l9312:	
  8773  1E85  0020               	movlb	0	; select bank0
  8774  1E86  1D0E               	btfss	14,2	;volatile
  8775  1E87  2E8B               	goto	l9316
  8776  1E88  0021               	movlb	1	; select bank1
  8777  1E89  1F21               	btfss	(_RF1^(0+128)+1),6
  8778  1E8A  2E82               	goto	l9310
  8779  1E8B                     l9316:	
  8780                           
  8781                           ;CC2500_B1.c: 314: };
  8782                           ;CC2500_B1.c: 315: setRF_TimeoutCleared();
  8783  1E8B  3198  20D1  319E   	fcall	_setRF_TimeoutCleared
  8784                           
  8785                           ;CC2500_B1.c: 317: CC2500_WriteByte();
  8786  1E8E  319C  243B  319E   	fcall	_CC2500_WriteByte
  8787                           
  8788                           ;CC2500_B1.c: 318: CC2500_ReadByte();
  8789  1E91  319C  24F7         	fcall	_CC2500_ReadByte
  8790                           
  8791                           ;CC2500_B1.c: 319: RC4 = 1;
  8792  1E93  0020               	movlb	0	; select bank0
  8793  1E94  160E               	bsf	14,4	;volatile
  8794                           
  8795                           ;CC2500_B1.c: 321: s_data = SPI0Buffer;
  8796  1E95  0021               	movlb	1	; select bank1
  8797  1E96  0858               	movf	_SPI0Buffer^(0+128),w
  8798  1E97  0020               	movlb	0	; select bank0
  8799  1E98  00A2               	movwf	??_CC2500_ReadStatus
  8800  1E99  0822               	movf	??_CC2500_ReadStatus,w
  8801  1E9A  0021               	movlb	1	; select bank1
  8802  1E9B  00DB               	movwf	_s_data^(0+128)
  8803  1E9C  0008               	return
  8804  1E9D                     __end_of_CC2500_ReadStatus:	
  8805                           
  8806                           	psect	text38
  8807  1CF7                     __ptext38:	
  8808 ;; *************** function _CC2500_ReadByte *****************
  8809 ;; Defined at:
  8810 ;;		line 242 in file "../src/CC2500_B1.c"
  8811 ;; Parameters:    Size  Location     Type
  8812 ;;		None
  8813 ;; Auto vars:     Size  Location     Type
  8814 ;;  loop_b          1    1[BANK0 ] unsigned char 
  8815 ;; Return value:  Size  Location     Type
  8816 ;;		None               void
  8817 ;; Registers used:
  8818 ;;		wreg, status,2, status,0
  8819 ;; Tracked objects:
  8820 ;;		On entry : 0/0
  8821 ;;		On exit  : 0/0
  8822 ;;		Unchanged: 0/0
  8823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8825 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8826 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8827 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8828 ;;Total ram usage:        2 bytes
  8829 ;; Hardware stack levels used:    1
  8830 ;; Hardware stack levels required when called:    5
  8831 ;; This function calls:
  8832 ;;		Nothing
  8833 ;; This function is called by:
  8834 ;;		_CC2500_RxData
  8835 ;;		_CC2500_ReadStatus
  8836 ;;		_CC2500_ReadREG
  8837 ;; This function uses a non-reentrant model
  8838 ;;
  8839                           
  8840                           
  8841                           ;psect for function _CC2500_ReadByte
  8842  1CF7                     _CC2500_ReadByte:	
  8843                           
  8844                           ;CC2500_B1.c: 243: unsigned char loop_b;
  8845                           ;CC2500_B1.c: 244: for (loop_b = 0; loop_b < 8; loop_b++) {
  8846                           
  8847                           ;incstack = 0
  8848                           ; Regs used in _CC2500_ReadByte: [wreg+status,2+status,0]
  8849  1CF7  0020               	movlb	0	; select bank0
  8850  1CF8  01A1               	clrf	CC2500_ReadByte@loop_b
  8851  1CF9                     L3:	
  8852  1CF9  3008               	movlw	8
  8853  1CFA  0221               	subwf	CC2500_ReadByte@loop_b,w
  8854  1CFB  1803               	btfsc	3,0
  8855  1CFC  0008               	return
  8856                           
  8857                           ;CC2500_B1.c: 245: RC1 = 1;
  8858  1CFD  148E               	bsf	14,1	;volatile
  8859                           
  8860                           ;CC2500_B1.c: 246: SPI0Buffer <<= 1;
  8861  1CFE  1003               	clrc
  8862  1CFF  0021               	movlb	1	; select bank1
  8863  1D00  0DD8               	rlf	_SPI0Buffer^(0+128),f
  8864                           
  8865                           ;CC2500_B1.c: 247: if (RC2 == 1)
  8866  1D01  0020               	movlb	0	; select bank0
  8867  1D02  1D0E               	btfss	14,2	;volatile
  8868  1D03  2D07               	goto	l9282
  8869                           
  8870                           ;CC2500_B1.c: 248: SPI0Buffer |= 0x01;
  8871  1D04  0021               	movlb	1	; select bank1
  8872  1D05  1458               	bsf	_SPI0Buffer^(0+128),0
  8873  1D06  2D0D               	goto	l9284
  8874  1D07                     l9282:	
  8875                           
  8876                           ;CC2500_B1.c: 249: else
  8877                           ;CC2500_B1.c: 250: SPI0Buffer &= 0xFE;
  8878  1D07  30FE               	movlw	254
  8879  1D08  0020               	movlb	0	; select bank0
  8880  1D09  00A0               	movwf	??_CC2500_ReadByte
  8881  1D0A  0820               	movf	??_CC2500_ReadByte,w
  8882  1D0B  0021               	movlb	1	; select bank1
  8883  1D0C  05D8               	andwf	_SPI0Buffer^(0+128),f
  8884  1D0D                     l9284:	
  8885                           
  8886                           ;CC2500_B1.c: 251: RC1 = 0;
  8887  1D0D  0020               	movlb	0	; select bank0
  8888  1D0E  108E               	bcf	14,1	;volatile
  8889  1D0F  3001               	movlw	1
  8890  1D10  00A0               	movwf	??_CC2500_ReadByte
  8891  1D11  0820               	movf	??_CC2500_ReadByte,w
  8892  1D12  07A1               	addwf	CC2500_ReadByte@loop_b,f
  8893  1D13  2CF9               	goto	L3
  8894  1D14                     __end_of_CC2500_ReadByte:	
  8895                           
  8896                           	psect	text39
  8897  1B5A                     __ptext39:	
  8898 ;; *************** function _CC2500_PowerOnInitial *****************
  8899 ;; Defined at:
  8900 ;;		line 126 in file "../src/CC2500_B1.c"
  8901 ;; Parameters:    Size  Location     Type
  8902 ;;		None
  8903 ;; Auto vars:     Size  Location     Type
  8904 ;;		None
  8905 ;; Return value:  Size  Location     Type
  8906 ;;		None               void
  8907 ;; Registers used:
  8908 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8909 ;; Tracked objects:
  8910 ;;		On entry : 0/0
  8911 ;;		On exit  : 0/0
  8912 ;;		Unchanged: 0/0
  8913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8917 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8918 ;;Total ram usage:        0 bytes
  8919 ;; Hardware stack levels used:    1
  8920 ;; Hardware stack levels required when called:    8
  8921 ;; This function calls:
  8922 ;;		_CC2500_ClearRXFIFO
  8923 ;;		_CC2500_ClearTXFIFO
  8924 ;;		_CC2500_FrequencyCabr
  8925 ;;		_CC2500_InitPATable
  8926 ;;		_CC2500_InitSetREG
  8927 ;;		_CC2500_PowerRST
  8928 ;;		_CC2500_SIDLEMode
  8929 ;; This function is called by:
  8930 ;;		_setRF_Main
  8931 ;;		_main
  8932 ;; This function uses a non-reentrant model
  8933 ;;
  8934                           
  8935                           
  8936                           ;psect for function _CC2500_PowerOnInitial
  8937  1B5A                     _CC2500_PowerOnInitial:	
  8938                           
  8939                           ;CC2500_B1.c: 127: CC2500_PowerRST();
  8940                           
  8941                           ;incstack = 0
  8942                           ; Regs used in _CC2500_PowerOnInitial: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8943  1B5A  3192  2280  319B   	fcall	_CC2500_PowerRST
  8944                           
  8945                           ;CC2500_B1.c: 128: CC2500_InitSetREG();
  8946  1B5D  319E  26EB  319B   	fcall	_CC2500_InitSetREG
  8947                           
  8948                           ;CC2500_B1.c: 129: CC2500_InitPATable();
  8949  1B60  319D  2532  319B   	fcall	_CC2500_InitPATable
  8950                           
  8951                           ;CC2500_B1.c: 130: CC2500_ClearTXFIFO();
  8952  1B63  3198  20D9  319B   	fcall	_CC2500_ClearTXFIFO
  8953                           
  8954                           ;CC2500_B1.c: 131: CC2500_ClearRXFIFO();
  8955  1B66  3198  20D5  319B   	fcall	_CC2500_ClearRXFIFO
  8956                           
  8957                           ;CC2500_B1.c: 132: CC2500_FrequencyCabr();
  8958  1B69  3199  21D5  319B   	fcall	_CC2500_FrequencyCabr
  8959                           
  8960                           ;CC2500_B1.c: 133: CC2500_SIDLEMode();
  8961  1B6C  3198  20DD         	fcall	_CC2500_SIDLEMode
  8962  1B6E  0008               	return
  8963  1B6F                     __end_of_CC2500_PowerOnInitial:	
  8964                           
  8965                           	psect	text40
  8966  18DD                     __ptext40:	
  8967 ;; *************** function _CC2500_SIDLEMode *****************
  8968 ;; Defined at:
  8969 ;;		line 216 in file "../src/CC2500_B1.c"
  8970 ;; Parameters:    Size  Location     Type
  8971 ;;		None
  8972 ;; Auto vars:     Size  Location     Type
  8973 ;;		None
  8974 ;; Return value:  Size  Location     Type
  8975 ;;		None               void
  8976 ;; Registers used:
  8977 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8978 ;; Tracked objects:
  8979 ;;		On entry : 0/0
  8980 ;;		On exit  : 0/0
  8981 ;;		Unchanged: 0/0
  8982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8986 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8987 ;;Total ram usage:        0 bytes
  8988 ;; Hardware stack levels used:    1
  8989 ;; Hardware stack levels required when called:    7
  8990 ;; This function calls:
  8991 ;;		_CC2500_WriteCommand
  8992 ;; This function is called by:
  8993 ;;		_CC2500_PowerOnInitial
  8994 ;; This function uses a non-reentrant model
  8995 ;;
  8996                           
  8997                           
  8998                           ;psect for function _CC2500_SIDLEMode
  8999  18DD                     _CC2500_SIDLEMode:	
  9000                           
  9001                           ;CC2500_B1.c: 217: CC2500_WriteCommand(0x36);
  9002                           
  9003                           ;incstack = 0
  9004                           ; Regs used in _CC2500_SIDLEMode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9005  18DD  3036               	movlw	54
  9006  18DE  319C  246E         	fcall	_CC2500_WriteCommand
  9007  18E0  0008               	return
  9008  18E1                     __end_of_CC2500_SIDLEMode:	
  9009                           
  9010                           	psect	text41
  9011  1280                     __ptext41:	
  9012 ;; *************** function _CC2500_PowerRST *****************
  9013 ;; Defined at:
  9014 ;;		line 139 in file "../src/CC2500_B1.c"
  9015 ;; Parameters:    Size  Location     Type
  9016 ;;		None
  9017 ;; Auto vars:     Size  Location     Type
  9018 ;;		None
  9019 ;; Return value:  Size  Location     Type
  9020 ;;		None               void
  9021 ;; Registers used:
  9022 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9023 ;; Tracked objects:
  9024 ;;		On entry : 0/0
  9025 ;;		On exit  : 0/0
  9026 ;;		Unchanged: 0/0
  9027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9029 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9030 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9031 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9032 ;;Total ram usage:        1 bytes
  9033 ;; Hardware stack levels used:    1
  9034 ;; Hardware stack levels required when called:    6
  9035 ;; This function calls:
  9036 ;;		_CC2500_WriteByte
  9037 ;;		_DelayTime_1us
  9038 ;;		_RF_Timeout_Counter
  9039 ;;		_setRF_TimeoutCleared
  9040 ;; This function is called by:
  9041 ;;		_CC2500_PowerOnInitial
  9042 ;; This function uses a non-reentrant model
  9043 ;;
  9044                           
  9045                           
  9046                           ;psect for function _CC2500_PowerRST
  9047  1280                     _CC2500_PowerRST:	
  9048                           
  9049                           ;CC2500_B1.c: 140: RC1 = 0;
  9050                           
  9051                           ;incstack = 0
  9052                           ; Regs used in _CC2500_PowerRST: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9053  1280  0020               	movlb	0	; select bank0
  9054  1281  108E               	bcf	14,1	;volatile
  9055                           
  9056                           ;CC2500_B1.c: 141: RC0 = 0;
  9057  1282  100E               	bcf	14,0	;volatile
  9058                           
  9059                           ;CC2500_B1.c: 142: RC4 = 1;
  9060  1283  160E               	bsf	14,4	;volatile
  9061                           
  9062                           ;CC2500_B1.c: 143: DelayTime_1us(10);
  9063  1284  300A               	movlw	10
  9064  1285  00A0               	movwf	DelayTime_1us@count
  9065  1286  3000               	movlw	0
  9066  1287  00A1               	movwf	DelayTime_1us@count+1
  9067  1288  319E  269D  3192   	fcall	_DelayTime_1us
  9068                           
  9069                           ;CC2500_B1.c: 144: RC4 = 0;
  9070  128B  0020               	movlb	0	; select bank0
  9071  128C  120E               	bcf	14,4	;volatile
  9072                           
  9073                           ;CC2500_B1.c: 145: DelayTime_1us(10);
  9074  128D  300A               	movlw	10
  9075  128E  00A0               	movwf	DelayTime_1us@count
  9076  128F  3000               	movlw	0
  9077  1290  00A1               	movwf	DelayTime_1us@count+1
  9078  1291  319E  269D  3192   	fcall	_DelayTime_1us
  9079                           
  9080                           ;CC2500_B1.c: 146: RC4 = 1;
  9081  1294  0020               	movlb	0	; select bank0
  9082  1295  160E               	bsf	14,4	;volatile
  9083                           
  9084                           ;CC2500_B1.c: 147: DelayTime_1us(40);
  9085  1296  3028               	movlw	40
  9086  1297  00A0               	movwf	DelayTime_1us@count
  9087  1298  3000               	movlw	0
  9088  1299  00A1               	movwf	DelayTime_1us@count+1
  9089  129A  319E  269D  3192   	fcall	_DelayTime_1us
  9090                           
  9091                           ;CC2500_B1.c: 148: RC4 = 0;
  9092  129D  0020               	movlb	0	; select bank0
  9093  129E  120E               	bcf	14,4	;volatile
  9094                           
  9095                           ;CC2500_B1.c: 149: SPI0Buffer = 0x30;
  9096  129F  3030               	movlw	48
  9097  12A0  00A6               	movwf	??_CC2500_PowerRST
  9098  12A1  0826               	movf	??_CC2500_PowerRST,w
  9099  12A2  0021               	movlb	1	; select bank1
  9100  12A3  00D8               	movwf	_SPI0Buffer^(0+128)
  9101                           
  9102                           ;CC2500_B1.c: 150: while (RC2 == 1 && RF1.Timeout == 0) {
  9103  12A4  2AA8               	goto	l9340
  9104  12A5                     l9338:	
  9105                           
  9106                           ;CC2500_B1.c: 151: RF_Timeout_Counter();
  9107  12A5  319B  2345  3192   	fcall	_RF_Timeout_Counter
  9108  12A8                     l9340:	
  9109  12A8  0020               	movlb	0	; select bank0
  9110  12A9  1D0E               	btfss	14,2	;volatile
  9111  12AA  2AAE               	goto	l9344
  9112  12AB  0021               	movlb	1	; select bank1
  9113  12AC  1F21               	btfss	(_RF1^(0+128)+1),6
  9114  12AD  2AA5               	goto	l9338
  9115  12AE                     l9344:	
  9116                           
  9117                           ;CC2500_B1.c: 152: };
  9118                           ;CC2500_B1.c: 153: setRF_TimeoutCleared();
  9119  12AE  3198  20D1  3192   	fcall	_setRF_TimeoutCleared
  9120                           
  9121                           ;CC2500_B1.c: 154: CC2500_WriteByte();
  9122  12B1  319C  243B  3192   	fcall	_CC2500_WriteByte
  9123                           
  9124                           ;CC2500_B1.c: 155: while (RC2 == 1 && RF1.Timeout == 0) {
  9125  12B4  2AB8               	goto	l9350
  9126  12B5                     l9348:	
  9127                           
  9128                           ;CC2500_B1.c: 156: RF_Timeout_Counter();
  9129  12B5  319B  2345  3192   	fcall	_RF_Timeout_Counter
  9130  12B8                     l9350:	
  9131  12B8  0020               	movlb	0	; select bank0
  9132  12B9  1D0E               	btfss	14,2	;volatile
  9133  12BA  2ABE               	goto	l9354
  9134  12BB  0021               	movlb	1	; select bank1
  9135  12BC  1F21               	btfss	(_RF1^(0+128)+1),6
  9136  12BD  2AB5               	goto	l9348
  9137  12BE                     l9354:	
  9138                           
  9139                           ;CC2500_B1.c: 157: };
  9140                           ;CC2500_B1.c: 158: setRF_TimeoutCleared();
  9141  12BE  3198  20D1         	fcall	_setRF_TimeoutCleared
  9142                           
  9143                           ;CC2500_B1.c: 159: RC0 = 0;
  9144  12C0  0020               	movlb	0	; select bank0
  9145  12C1  100E               	bcf	14,0	;volatile
  9146                           
  9147                           ;CC2500_B1.c: 160: RC4 = 1;
  9148  12C2  160E               	bsf	14,4	;volatile
  9149  12C3  0008               	return
  9150  12C4                     __end_of_CC2500_PowerRST:	
  9151                           
  9152                           	psect	text42
  9153  1EEB                     __ptext42:	
  9154 ;; *************** function _CC2500_InitSetREG *****************
  9155 ;; Defined at:
  9156 ;;		line 166 in file "../src/CC2500_B1.c"
  9157 ;; Parameters:    Size  Location     Type
  9158 ;;		None
  9159 ;; Auto vars:     Size  Location     Type
  9160 ;;  loop_c          1    8[BANK0 ] unsigned char 
  9161 ;;  temp2           1    7[BANK0 ] unsigned char 
  9162 ;;  temp1           1    6[BANK0 ] unsigned char 
  9163 ;; Return value:  Size  Location     Type
  9164 ;;		None               void
  9165 ;; Registers used:
  9166 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9167 ;; Tracked objects:
  9168 ;;		On entry : 0/0
  9169 ;;		On exit  : 0/0
  9170 ;;		Unchanged: 0/0
  9171 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9172 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9173 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9174 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9175 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9176 ;;Total ram usage:        4 bytes
  9177 ;; Hardware stack levels used:    1
  9178 ;; Hardware stack levels required when called:    7
  9179 ;; This function calls:
  9180 ;;		_CC2500_WriteREG
  9181 ;; This function is called by:
  9182 ;;		_CC2500_PowerOnInitial
  9183 ;; This function uses a non-reentrant model
  9184 ;;
  9185                           
  9186                           
  9187                           ;psect for function _CC2500_InitSetREG
  9188  1EEB                     _CC2500_InitSetREG:	
  9189                           
  9190                           ;CC2500_B1.c: 167: unsigned char loop_c;
  9191                           ;CC2500_B1.c: 168: unsigned char temp1, temp2;
  9192                           ;CC2500_B1.c: 170: for (loop_c = 0; loop_c < 47; loop_c++) {
  9193                           
  9194                           ;incstack = 0
  9195                           ; Regs used in _CC2500_InitSetREG: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9196  1EEB  0020               	movlb	0	; select bank0
  9197  1EEC  01A8               	clrf	CC2500_InitSetREG@loop_c
  9198  1EED                     L4:	
  9199  1EED  302F               	movlw	47
  9200  1EEE  0228               	subwf	CC2500_InitSetREG@loop_c,w
  9201  1EEF  1803               	btfsc	3,0
  9202  1EF0  0008               	return
  9203                           
  9204                           ;CC2500_B1.c: 171: temp1 = CC2500_registers_address[loop_c];
  9205  1EF1  0828               	movf	CC2500_InitSetREG@loop_c,w
  9206  1EF2  3E00               	addlw	low (_CC2500_registers_address| (0+32768))
  9207  1EF3  0084               	movwf	4
  9208  1EF4  3098               	movlw	high (_CC2500_registers_address| (0+32768))
  9209  1EF5  1803               	skipnc
  9210  1EF6  3E01               	addlw	1
  9211  1EF7  0085               	movwf	5
  9212  1EF8  0800               	movf	0,w	;code access
  9213  1EF9  00A5               	movwf	??_CC2500_InitSetREG
  9214  1EFA  0825               	movf	??_CC2500_InitSetREG,w
  9215  1EFB  00A6               	movwf	CC2500_InitSetREG@temp1
  9216                           
  9217                           ;CC2500_B1.c: 172: temp2 = CC2500_rfSettings[loop_c];
  9218  1EFC  0828               	movf	CC2500_InitSetREG@loop_c,w
  9219  1EFD  3E2F               	addlw	low (_CC2500_rfSettings| (0+32768))
  9220  1EFE  0084               	movwf	4
  9221  1EFF  3098               	movlw	high (_CC2500_rfSettings| (0+32768))
  9222  1F00  1803               	skipnc
  9223  1F01  3E01               	addlw	1
  9224  1F02  0085               	movwf	5
  9225  1F03  0800               	movf	0,w	;code access
  9226  1F04  00A5               	movwf	??_CC2500_InitSetREG
  9227  1F05  0825               	movf	??_CC2500_InitSetREG,w
  9228  1F06  00A7               	movwf	CC2500_InitSetREG@temp2
  9229                           
  9230                           ;CC2500_B1.c: 174: CC2500_WriteREG(temp1, temp2);
  9231  1F07  0827               	movf	CC2500_InitSetREG@temp2,w
  9232  1F08  00A5               	movwf	??_CC2500_InitSetREG
  9233  1F09  0825               	movf	??_CC2500_InitSetREG,w
  9234  1F0A  00A2               	movwf	CC2500_WriteREG@value
  9235  1F0B  0826               	movf	CC2500_InitSetREG@temp1,w
  9236  1F0C  319E  2655  319E   	fcall	_CC2500_WriteREG
  9237  1F0F  3001               	movlw	1
  9238  1F10  0020               	movlb	0	; select bank0
  9239  1F11  00A5               	movwf	??_CC2500_InitSetREG
  9240  1F12  0825               	movf	??_CC2500_InitSetREG,w
  9241  1F13  07A8               	addwf	CC2500_InitSetREG@loop_c,f
  9242  1F14  2EED               	goto	L4
  9243  1F15                     __end_of_CC2500_InitSetREG:	
  9244                           
  9245                           	psect	text43
  9246  1D32                     __ptext43:	
  9247 ;; *************** function _CC2500_InitPATable *****************
  9248 ;; Defined at:
  9249 ;;		line 181 in file "../src/CC2500_B1.c"
  9250 ;; Parameters:    Size  Location     Type
  9251 ;;		None
  9252 ;; Auto vars:     Size  Location     Type
  9253 ;;  loop_d          1    7[BANK0 ] unsigned char 
  9254 ;;  temp            1    6[BANK0 ] unsigned char 
  9255 ;; Return value:  Size  Location     Type
  9256 ;;		None               void
  9257 ;; Registers used:
  9258 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9259 ;; Tracked objects:
  9260 ;;		On entry : 0/0
  9261 ;;		On exit  : 0/0
  9262 ;;		Unchanged: 0/0
  9263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9265 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9266 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9267 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9268 ;;Total ram usage:        3 bytes
  9269 ;; Hardware stack levels used:    1
  9270 ;; Hardware stack levels required when called:    7
  9271 ;; This function calls:
  9272 ;;		_CC2500_WriteREG
  9273 ;; This function is called by:
  9274 ;;		_CC2500_PowerOnInitial
  9275 ;; This function uses a non-reentrant model
  9276 ;;
  9277                           
  9278                           
  9279                           ;psect for function _CC2500_InitPATable
  9280  1D32                     _CC2500_InitPATable:	
  9281                           
  9282                           ;CC2500_B1.c: 182: unsigned char loop_d;
  9283                           ;CC2500_B1.c: 183: unsigned char temp;
  9284                           ;CC2500_B1.c: 185: for (loop_d = 0; loop_d < 8; loop_d++) {
  9285                           
  9286                           ;incstack = 0
  9287                           ; Regs used in _CC2500_InitPATable: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9288  1D32  0020               	movlb	0	; select bank0
  9289  1D33  01A7               	clrf	CC2500_InitPATable@loop_d
  9290  1D34                     L5:	
  9291  1D34  3008               	movlw	8
  9292  1D35  0227               	subwf	CC2500_InitPATable@loop_d,w
  9293  1D36  1803               	btfsc	3,0
  9294  1D37  0008               	return
  9295                           
  9296                           ;CC2500_B1.c: 186: temp = CC2500_patable_vaule[loop_d];
  9297  1D38  0827               	movf	CC2500_InitPATable@loop_d,w
  9298  1D39  3E5E               	addlw	low (_CC2500_patable_vaule| (0+32768))
  9299  1D3A  0084               	movwf	4
  9300  1D3B  3098               	movlw	high (_CC2500_patable_vaule| (0+32768))
  9301  1D3C  1803               	skipnc
  9302  1D3D  3E01               	addlw	1
  9303  1D3E  0085               	movwf	5
  9304  1D3F  0800               	movf	0,w	;code access
  9305  1D40  00A5               	movwf	??_CC2500_InitPATable
  9306  1D41  0825               	movf	??_CC2500_InitPATable,w
  9307  1D42  00A6               	movwf	CC2500_InitPATable@temp
  9308                           
  9309                           ;CC2500_B1.c: 187: CC2500_WriteREG(0x3E, temp);
  9310  1D43  0826               	movf	CC2500_InitPATable@temp,w
  9311  1D44  00A5               	movwf	??_CC2500_InitPATable
  9312  1D45  0825               	movf	??_CC2500_InitPATable,w
  9313  1D46  00A2               	movwf	CC2500_WriteREG@value
  9314  1D47  303E               	movlw	62
  9315  1D48  319E  2655  319D   	fcall	_CC2500_WriteREG
  9316  1D4B  3001               	movlw	1
  9317  1D4C  0020               	movlb	0	; select bank0
  9318  1D4D  00A5               	movwf	??_CC2500_InitPATable
  9319  1D4E  0825               	movf	??_CC2500_InitPATable,w
  9320  1D4F  07A7               	addwf	CC2500_InitPATable@loop_d,f
  9321  1D50  2D34               	goto	L5
  9322  1D51                     __end_of_CC2500_InitPATable:	
  9323                           
  9324                           	psect	text44
  9325  1E55                     __ptext44:	
  9326 ;; *************** function _CC2500_WriteREG *****************
  9327 ;; Defined at:
  9328 ;;		line 258 in file "../src/CC2500_B1.c"
  9329 ;; Parameters:    Size  Location     Type
  9330 ;;  w_addr          1    wreg     unsigned char 
  9331 ;;  value           1    2[BANK0 ] unsigned char 
  9332 ;; Auto vars:     Size  Location     Type
  9333 ;;  w_addr          1    4[BANK0 ] unsigned char 
  9334 ;; Return value:  Size  Location     Type
  9335 ;;		None               void
  9336 ;; Registers used:
  9337 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9338 ;; Tracked objects:
  9339 ;;		On entry : 0/0
  9340 ;;		On exit  : 0/0
  9341 ;;		Unchanged: 0/0
  9342 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9343 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9344 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9345 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9346 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9347 ;;Total ram usage:        3 bytes
  9348 ;; Hardware stack levels used:    1
  9349 ;; Hardware stack levels required when called:    6
  9350 ;; This function calls:
  9351 ;;		_CC2500_WriteByte
  9352 ;;		_RF_Timeout_Counter
  9353 ;;		_setRF_TimeoutCleared
  9354 ;; This function is called by:
  9355 ;;		_CC2500_InitSetREG
  9356 ;;		_CC2500_InitPATable
  9357 ;; This function uses a non-reentrant model
  9358 ;;
  9359                           
  9360                           
  9361                           ;psect for function _CC2500_WriteREG
  9362  1E55                     _CC2500_WriteREG:	
  9363                           
  9364                           ;incstack = 0
  9365                           ; Regs used in _CC2500_WriteREG: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9366                           ;CC2500_WriteREG@w_addr stored from wreg
  9367  1E55  0020               	movlb	0	; select bank0
  9368  1E56  00A4               	movwf	CC2500_WriteREG@w_addr
  9369                           
  9370                           ;CC2500_B1.c: 259: RC4 = 0;
  9371  1E57  120E               	bcf	14,4	;volatile
  9372                           
  9373                           ;CC2500_B1.c: 260: SPI0Buffer = w_addr;
  9374  1E58  0824               	movf	CC2500_WriteREG@w_addr,w
  9375  1E59  00A3               	movwf	??_CC2500_WriteREG
  9376  1E5A  0823               	movf	??_CC2500_WriteREG,w
  9377  1E5B  0021               	movlb	1	; select bank1
  9378  1E5C  00D8               	movwf	_SPI0Buffer^(0+128)
  9379                           
  9380                           ;CC2500_B1.c: 261: while (RC2 == 1 && RF1.Timeout == 0) {
  9381  1E5D  2E61               	goto	l9294
  9382  1E5E                     l9292:	
  9383                           
  9384                           ;CC2500_B1.c: 262: RF_Timeout_Counter();
  9385  1E5E  319B  2345  319E   	fcall	_RF_Timeout_Counter
  9386  1E61                     l9294:	
  9387  1E61  0020               	movlb	0	; select bank0
  9388  1E62  1D0E               	btfss	14,2	;volatile
  9389  1E63  2E67               	goto	l9298
  9390  1E64  0021               	movlb	1	; select bank1
  9391  1E65  1F21               	btfss	(_RF1^(0+128)+1),6
  9392  1E66  2E5E               	goto	l9292
  9393  1E67                     l9298:	
  9394                           
  9395                           ;CC2500_B1.c: 263: };
  9396                           ;CC2500_B1.c: 264: setRF_TimeoutCleared();
  9397  1E67  3198  20D1  319E   	fcall	_setRF_TimeoutCleared
  9398                           
  9399                           ;CC2500_B1.c: 266: CC2500_WriteByte();
  9400  1E6A  319C  243B  319E   	fcall	_CC2500_WriteByte
  9401                           
  9402                           ;CC2500_B1.c: 267: SPI0Buffer = value;
  9403  1E6D  0020               	movlb	0	; select bank0
  9404  1E6E  0822               	movf	CC2500_WriteREG@value,w
  9405  1E6F  00A3               	movwf	??_CC2500_WriteREG
  9406  1E70  0823               	movf	??_CC2500_WriteREG,w
  9407  1E71  0021               	movlb	1	; select bank1
  9408  1E72  00D8               	movwf	_SPI0Buffer^(0+128)
  9409                           
  9410                           ;CC2500_B1.c: 268: CC2500_WriteByte();
  9411  1E73  319C  243B         	fcall	_CC2500_WriteByte
  9412                           
  9413                           ;CC2500_B1.c: 269: RC4 = 1;
  9414  1E75  0020               	movlb	0	; select bank0
  9415  1E76  160E               	bsf	14,4	;volatile
  9416  1E77  0008               	return
  9417  1E78                     __end_of_CC2500_WriteREG:	
  9418                           
  9419                           	psect	text45
  9420  19D5                     __ptext45:	
  9421 ;; *************** function _CC2500_FrequencyCabr *****************
  9422 ;; Defined at:
  9423 ;;		line 208 in file "../src/CC2500_B1.c"
  9424 ;; Parameters:    Size  Location     Type
  9425 ;;		None
  9426 ;; Auto vars:     Size  Location     Type
  9427 ;;		None
  9428 ;; Return value:  Size  Location     Type
  9429 ;;		None               void
  9430 ;; Registers used:
  9431 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9432 ;; Tracked objects:
  9433 ;;		On entry : 0/0
  9434 ;;		On exit  : 0/0
  9435 ;;		Unchanged: 0/0
  9436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9438 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9440 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9441 ;;Total ram usage:        0 bytes
  9442 ;; Hardware stack levels used:    1
  9443 ;; Hardware stack levels required when called:    7
  9444 ;; This function calls:
  9445 ;;		_CC2500_WriteCommand
  9446 ;;		_DelayTime_1us
  9447 ;; This function is called by:
  9448 ;;		_CC2500_PowerOnInitial
  9449 ;; This function uses a non-reentrant model
  9450 ;;
  9451                           
  9452                           
  9453                           ;psect for function _CC2500_FrequencyCabr
  9454  19D5                     _CC2500_FrequencyCabr:	
  9455                           
  9456                           ;CC2500_B1.c: 209: CC2500_WriteCommand(0x33);
  9457                           
  9458                           ;incstack = 0
  9459                           ; Regs used in _CC2500_FrequencyCabr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9460  19D5  3033               	movlw	51
  9461  19D6  319C  246E  3199   	fcall	_CC2500_WriteCommand
  9462                           
  9463                           ;CC2500_B1.c: 210: DelayTime_1us(1000);
  9464  19D9  30E8               	movlw	232
  9465  19DA  0020               	movlb	0	; select bank0
  9466  19DB  00A0               	movwf	DelayTime_1us@count
  9467  19DC  3003               	movlw	3
  9468  19DD  00A1               	movwf	DelayTime_1us@count+1
  9469  19DE  319E  269D         	fcall	_DelayTime_1us
  9470  19E0  0008               	return
  9471  19E1                     __end_of_CC2500_FrequencyCabr:	
  9472                           
  9473                           	psect	text46
  9474  1E9D                     __ptext46:	
  9475 ;; *************** function _DelayTime_1us *****************
  9476 ;; Defined at:
  9477 ;;		line 327 in file "../src/CC2500_B1.c"
  9478 ;; Parameters:    Size  Location     Type
  9479 ;;  count           2    0[BANK0 ] int 
  9480 ;; Auto vars:     Size  Location     Type
  9481 ;;  j               2    4[BANK0 ] unsigned int 
  9482 ;;  i               2    2[BANK0 ] unsigned int 
  9483 ;; Return value:  Size  Location     Type
  9484 ;;		None               void
  9485 ;; Registers used:
  9486 ;;		wreg, status,2
  9487 ;; Tracked objects:
  9488 ;;		On entry : 0/0
  9489 ;;		On exit  : 0/0
  9490 ;;		Unchanged: 0/0
  9491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9492 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9493 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9495 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9496 ;;Total ram usage:        6 bytes
  9497 ;; Hardware stack levels used:    1
  9498 ;; Hardware stack levels required when called:    5
  9499 ;; This function calls:
  9500 ;;		Nothing
  9501 ;; This function is called by:
  9502 ;;		_CC2500_PowerRST
  9503 ;;		_CC2500_FrequencyCabr
  9504 ;; This function uses a non-reentrant model
  9505 ;;
  9506                           
  9507                           
  9508                           ;psect for function _DelayTime_1us
  9509  1E9D                     _DelayTime_1us:	
  9510                           
  9511                           ;CC2500_B1.c: 328: unsigned int i, j;
  9512                           ;CC2500_B1.c: 329: for (i = 1; i < count; i++)
  9513                           
  9514                           ;incstack = 0
  9515                           ; Regs used in _DelayTime_1us: [wreg+status,2]
  9516  1E9D  3001               	movlw	1
  9517  1E9E  0020               	movlb	0	; select bank0
  9518  1E9F  00A2               	movwf	DelayTime_1us@i
  9519  1EA0  3000               	movlw	0
  9520  1EA1  00A3               	movwf	DelayTime_1us@i+1
  9521  1EA2                     l371:	
  9522  1EA2  0821               	movf	DelayTime_1us@count+1,w
  9523  1EA3  0223               	subwf	DelayTime_1us@i+1,w
  9524  1EA4  1D03               	skipz
  9525  1EA5  2EA8               	goto	u6355
  9526  1EA6  0820               	movf	DelayTime_1us@count,w
  9527  1EA7  0222               	subwf	DelayTime_1us@i,w
  9528  1EA8                     u6355:	
  9529  1EA8  1803               	btfsc	3,0
  9530  1EA9  0008               	return
  9531                           
  9532                           ;CC2500_B1.c: 330: for (j = 0; j <= 1; j++);
  9533  1EAA  01A4               	clrf	DelayTime_1us@j
  9534  1EAB  01A5               	clrf	DelayTime_1us@j+1
  9535  1EAC  3000               	movlw	0
  9536  1EAD  0225               	subwf	DelayTime_1us@j+1,w
  9537  1EAE  3002               	movlw	2
  9538  1EAF  1903               	skipnz
  9539  1EB0  0224               	subwf	DelayTime_1us@j,w
  9540  1EB1  1803               	btfsc	3,0
  9541  1EB2  2EBE               	goto	l6940
  9542  1EB3                     l6938:	
  9543  1EB3  3001               	movlw	1
  9544  1EB4  07A4               	addwf	DelayTime_1us@j,f
  9545  1EB5  3000               	movlw	0
  9546  1EB6  3DA5               	addwfc	DelayTime_1us@j+1,f
  9547  1EB7  3000               	movlw	0
  9548  1EB8  0225               	subwf	DelayTime_1us@j+1,w
  9549  1EB9  3002               	movlw	2
  9550  1EBA  1903               	skipnz
  9551  1EBB  0224               	subwf	DelayTime_1us@j,w
  9552  1EBC  1C03               	skipc
  9553  1EBD  2EB3               	goto	l6938
  9554  1EBE                     l6940:	
  9555  1EBE  3001               	movlw	1
  9556  1EBF  07A2               	addwf	DelayTime_1us@i,f
  9557  1EC0  3000               	movlw	0
  9558  1EC1  3DA3               	addwfc	DelayTime_1us@i+1,f
  9559  1EC2  2EA2               	goto	l371
  9560  1EC3                     __end_of_DelayTime_1us:	
  9561                           
  9562                           	psect	text47
  9563  18D9                     __ptext47:	
  9564 ;; *************** function _CC2500_ClearTXFIFO *****************
  9565 ;; Defined at:
  9566 ;;		line 194 in file "../src/CC2500_B1.c"
  9567 ;; Parameters:    Size  Location     Type
  9568 ;;		None
  9569 ;; Auto vars:     Size  Location     Type
  9570 ;;		None
  9571 ;; Return value:  Size  Location     Type
  9572 ;;		None               void
  9573 ;; Registers used:
  9574 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9575 ;; Tracked objects:
  9576 ;;		On entry : 0/0
  9577 ;;		On exit  : 0/0
  9578 ;;		Unchanged: 0/0
  9579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9581 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9582 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9583 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9584 ;;Total ram usage:        0 bytes
  9585 ;; Hardware stack levels used:    1
  9586 ;; Hardware stack levels required when called:    7
  9587 ;; This function calls:
  9588 ;;		_CC2500_WriteCommand
  9589 ;; This function is called by:
  9590 ;;		_CC2500_PowerOnInitial
  9591 ;; This function uses a non-reentrant model
  9592 ;;
  9593                           
  9594                           
  9595                           ;psect for function _CC2500_ClearTXFIFO
  9596  18D9                     _CC2500_ClearTXFIFO:	
  9597                           
  9598                           ;CC2500_B1.c: 195: CC2500_WriteCommand(0x3B);
  9599                           
  9600                           ;incstack = 0
  9601                           ; Regs used in _CC2500_ClearTXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9602  18D9  303B               	movlw	59
  9603  18DA  319C  246E         	fcall	_CC2500_WriteCommand
  9604  18DC  0008               	return
  9605  18DD                     __end_of_CC2500_ClearTXFIFO:	
  9606                           
  9607                           	psect	text48
  9608  18D5                     __ptext48:	
  9609 ;; *************** function _CC2500_ClearRXFIFO *****************
  9610 ;; Defined at:
  9611 ;;		line 201 in file "../src/CC2500_B1.c"
  9612 ;; Parameters:    Size  Location     Type
  9613 ;;		None
  9614 ;; Auto vars:     Size  Location     Type
  9615 ;;		None
  9616 ;; Return value:  Size  Location     Type
  9617 ;;		None               void
  9618 ;; Registers used:
  9619 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9620 ;; Tracked objects:
  9621 ;;		On entry : 0/0
  9622 ;;		On exit  : 0/0
  9623 ;;		Unchanged: 0/0
  9624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9628 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9629 ;;Total ram usage:        0 bytes
  9630 ;; Hardware stack levels used:    1
  9631 ;; Hardware stack levels required when called:    7
  9632 ;; This function calls:
  9633 ;;		_CC2500_WriteCommand
  9634 ;; This function is called by:
  9635 ;;		_CC2500_PowerOnInitial
  9636 ;; This function uses a non-reentrant model
  9637 ;;
  9638                           
  9639                           
  9640                           ;psect for function _CC2500_ClearRXFIFO
  9641  18D5                     _CC2500_ClearRXFIFO:	
  9642                           
  9643                           ;CC2500_B1.c: 202: CC2500_WriteCommand(0x3A);
  9644                           
  9645                           ;incstack = 0
  9646                           ; Regs used in _CC2500_ClearRXFIFO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9647  18D5  303A               	movlw	58
  9648  18D6  319C  246E         	fcall	_CC2500_WriteCommand
  9649  18D8  0008               	return
  9650  18D9                     __end_of_CC2500_ClearRXFIFO:	
  9651                           
  9652                           	psect	text49
  9653  1C6E                     __ptext49:	
  9654 ;; *************** function _CC2500_WriteCommand *****************
  9655 ;; Defined at:
  9656 ;;		line 292 in file "../src/CC2500_B1.c"
  9657 ;; Parameters:    Size  Location     Type
  9658 ;;  command         1    wreg     unsigned char 
  9659 ;; Auto vars:     Size  Location     Type
  9660 ;;  command         1    3[BANK0 ] unsigned char 
  9661 ;; Return value:  Size  Location     Type
  9662 ;;		None               void
  9663 ;; Registers used:
  9664 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9665 ;; Tracked objects:
  9666 ;;		On entry : 0/0
  9667 ;;		On exit  : 0/0
  9668 ;;		Unchanged: 0/0
  9669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9671 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9672 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9673 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9674 ;;Total ram usage:        2 bytes
  9675 ;; Hardware stack levels used:    1
  9676 ;; Hardware stack levels required when called:    6
  9677 ;; This function calls:
  9678 ;;		_CC2500_WriteByte
  9679 ;;		_RF_Timeout_Counter
  9680 ;;		_setRF_TimeoutCleared
  9681 ;; This function is called by:
  9682 ;;		_CC2500_TxData
  9683 ;;		_CC2500_RxData
  9684 ;;		_CC2500_ClearTXFIFO
  9685 ;;		_CC2500_ClearRXFIFO
  9686 ;;		_CC2500_FrequencyCabr
  9687 ;;		_CC2500_SIDLEMode
  9688 ;;		_setRF_Main
  9689 ;;		_RF_RxDisable
  9690 ;; This function uses a non-reentrant model
  9691 ;;
  9692                           
  9693                           
  9694                           ;psect for function _CC2500_WriteCommand
  9695  1C6E                     _CC2500_WriteCommand:	
  9696                           
  9697                           ;incstack = 0
  9698                           ; Regs used in _CC2500_WriteCommand: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9699                           ;CC2500_WriteCommand@command stored from wreg
  9700  1C6E  0020               	movlb	0	; select bank0
  9701  1C6F  00A3               	movwf	CC2500_WriteCommand@command
  9702                           
  9703                           ;CC2500_B1.c: 293: RC4 = 0;
  9704  1C70  120E               	bcf	14,4	;volatile
  9705                           
  9706                           ;CC2500_B1.c: 294: SPI0Buffer = command;
  9707  1C71  0823               	movf	CC2500_WriteCommand@command,w
  9708  1C72  00A2               	movwf	??_CC2500_WriteCommand
  9709  1C73  0822               	movf	??_CC2500_WriteCommand,w
  9710  1C74  0021               	movlb	1	; select bank1
  9711  1C75  00D8               	movwf	_SPI0Buffer^(0+128)
  9712                           
  9713                           ;CC2500_B1.c: 296: while (RC2 == 1 && RF1.Timeout == 0) {
  9714  1C76  2C7A               	goto	l9260
  9715  1C77                     l9258:	
  9716                           
  9717                           ;CC2500_B1.c: 297: RF_Timeout_Counter();
  9718  1C77  319B  2345  319C   	fcall	_RF_Timeout_Counter
  9719  1C7A                     l9260:	
  9720  1C7A  0020               	movlb	0	; select bank0
  9721  1C7B  1D0E               	btfss	14,2	;volatile
  9722  1C7C  2C80               	goto	l9264
  9723  1C7D  0021               	movlb	1	; select bank1
  9724  1C7E  1F21               	btfss	(_RF1^(0+128)+1),6
  9725  1C7F  2C77               	goto	l9258
  9726  1C80                     l9264:	
  9727                           
  9728                           ;CC2500_B1.c: 298: };
  9729                           ;CC2500_B1.c: 299: setRF_TimeoutCleared();
  9730  1C80  3198  20D1  319C   	fcall	_setRF_TimeoutCleared
  9731                           
  9732                           ;CC2500_B1.c: 301: CC2500_WriteByte();
  9733  1C83  319C  243B         	fcall	_CC2500_WriteByte
  9734                           
  9735                           ;CC2500_B1.c: 302: RC4 = 1;
  9736  1C85  0020               	movlb	0	; select bank0
  9737  1C86  160E               	bsf	14,4	;volatile
  9738  1C87  0008               	return
  9739  1C88                     __end_of_CC2500_WriteCommand:	
  9740                           
  9741                           	psect	text50
  9742  18D1                     __ptext50:	
  9743 ;; *************** function _setRF_TimeoutCleared *****************
  9744 ;; Defined at:
  9745 ;;		line 149 in file "../src/RF_Control_B1.c"
  9746 ;; Parameters:    Size  Location     Type
  9747 ;;		None
  9748 ;; Auto vars:     Size  Location     Type
  9749 ;;		None
  9750 ;; Return value:  Size  Location     Type
  9751 ;;		None               void
  9752 ;; Registers used:
  9753 ;;		status,2
  9754 ;; Tracked objects:
  9755 ;;		On entry : 0/0
  9756 ;;		On exit  : 0/0
  9757 ;;		Unchanged: 0/0
  9758 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9760 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9762 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9763 ;;Total ram usage:        0 bytes
  9764 ;; Hardware stack levels used:    1
  9765 ;; Hardware stack levels required when called:    5
  9766 ;; This function calls:
  9767 ;;		Nothing
  9768 ;; This function is called by:
  9769 ;;		_CC2500_TxData
  9770 ;;		_CC2500_RxData
  9771 ;;		_CC2500_PowerRST
  9772 ;;		_CC2500_WriteREG
  9773 ;;		_CC2500_WriteCommand
  9774 ;;		_CC2500_ReadStatus
  9775 ;;		_CC2500_ReadREG
  9776 ;; This function uses a non-reentrant model
  9777 ;;
  9778                           
  9779                           
  9780                           ;psect for function _setRF_TimeoutCleared
  9781  18D1                     _setRF_TimeoutCleared:	
  9782                           
  9783                           ;RF_Control_B1.c: 150: RF1.TimeoutCount = 0;
  9784                           
  9785                           ;incstack = 0
  9786                           ; Regs used in _setRF_TimeoutCleared: [status,2]
  9787  18D1  0021               	movlb	1	; select bank1
  9788  18D2  01AC               	clrf	(_RF1^(0+128)+12)
  9789  18D3  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9790  18D4  0008               	return
  9791  18D5                     __end_of_setRF_TimeoutCleared:	
  9792                           
  9793                           	psect	text51
  9794  1B45                     __ptext51:	
  9795 ;; *************** function _RF_Timeout_Counter *****************
  9796 ;; Defined at:
  9797 ;;		line 141 in file "../src/RF_Control_B1.c"
  9798 ;; Parameters:    Size  Location     Type
  9799 ;;		None
  9800 ;; Auto vars:     Size  Location     Type
  9801 ;;		None
  9802 ;; Return value:  Size  Location     Type
  9803 ;;		None               void
  9804 ;; Registers used:
  9805 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9806 ;; Tracked objects:
  9807 ;;		On entry : 0/0
  9808 ;;		On exit  : 0/0
  9809 ;;		Unchanged: 0/0
  9810 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9811 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9812 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9813 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9814 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9815 ;;Total ram usage:        0 bytes
  9816 ;; Hardware stack levels used:    1
  9817 ;; Hardware stack levels required when called:    5
  9818 ;; This function calls:
  9819 ;;		Nothing
  9820 ;; This function is called by:
  9821 ;;		_CC2500_TxData
  9822 ;;		_CC2500_RxData
  9823 ;;		_CC2500_PowerRST
  9824 ;;		_CC2500_WriteREG
  9825 ;;		_CC2500_WriteCommand
  9826 ;;		_CC2500_ReadStatus
  9827 ;;		_CC2500_ReadREG
  9828 ;; This function uses a non-reentrant model
  9829 ;;
  9830                           
  9831                           
  9832                           ;psect for function _RF_Timeout_Counter
  9833  1B45                     _RF_Timeout_Counter:	
  9834                           
  9835                           ;RF_Control_B1.c: 142: RF1.TimeoutCount++;
  9836                           
  9837                           ;incstack = 0
  9838                           ; Regs used in _RF_Timeout_Counter: [wreg+fsr1l+fsr1h+status,2+status,0]
  9839  1B45  3001               	movlw	1
  9840  1B46  0021               	movlb	1	; select bank1
  9841  1B47  07AC               	addwf	(_RF1^(0+128)+12),f
  9842  1B48  3000               	movlw	0
  9843  1B49  3DAD               	addwfc	((_RF1+1)^(0+128)+12),f
  9844                           
  9845                           ;RF_Control_B1.c: 143: if (RF1.TimeoutCount == 25000) {
  9846  1B4A  300C               	movlw	12
  9847  1B4B  3EA0               	addlw	_RF1& (0+255)
  9848  1B4C  0086               	movwf	6
  9849  1B4D  0187               	clrf	7
  9850  1B4E  3F40               	moviw [0]fsr1
  9851  1B4F  3AA8               	xorlw	168
  9852  1B50  1D03               	skipz
  9853  1B51  2B54               	goto	u10255
  9854  1B52  3F41               	moviw [1]fsr1
  9855  1B53  3A61               	xorlw	97
  9856  1B54                     u10255:	
  9857  1B54  1D03               	skipz
  9858  1B55  0008               	return
  9859                           
  9860                           ;RF_Control_B1.c: 144: RF1.TimeoutCount = 0;
  9861  1B56  01AC               	clrf	(_RF1^(0+128)+12)
  9862  1B57  01AD               	clrf	((_RF1+1)^(0+128)+12)
  9863                           
  9864                           ;RF_Control_B1.c: 145: RF1.Timeout = 1;
  9865  1B58  1721               	bsf	(_RF1^(0+128)+1),6
  9866  1B59  0008               	return
  9867  1B5A                     __end_of_RF_Timeout_Counter:	
  9868                           
  9869                           	psect	text52
  9870  1C3B                     __ptext52:	
  9871 ;; *************** function _CC2500_WriteByte *****************
  9872 ;; Defined at:
  9873 ;;		line 226 in file "../src/CC2500_B1.c"
  9874 ;; Parameters:    Size  Location     Type
  9875 ;;		None
  9876 ;; Auto vars:     Size  Location     Type
  9877 ;;  loop_a          1    1[BANK0 ] unsigned char 
  9878 ;; Return value:  Size  Location     Type
  9879 ;;		None               void
  9880 ;; Registers used:
  9881 ;;		wreg, status,2, status,0
  9882 ;; Tracked objects:
  9883 ;;		On entry : 0/0
  9884 ;;		On exit  : 0/0
  9885 ;;		Unchanged: 0/0
  9886 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9888 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9889 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9890 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9891 ;;Total ram usage:        2 bytes
  9892 ;; Hardware stack levels used:    1
  9893 ;; Hardware stack levels required when called:    5
  9894 ;; This function calls:
  9895 ;;		Nothing
  9896 ;; This function is called by:
  9897 ;;		_CC2500_TxData
  9898 ;;		_CC2500_RxData
  9899 ;;		_CC2500_PowerRST
  9900 ;;		_CC2500_WriteREG
  9901 ;;		_CC2500_WriteCommand
  9902 ;;		_CC2500_ReadStatus
  9903 ;;		_CC2500_ReadREG
  9904 ;; This function uses a non-reentrant model
  9905 ;;
  9906                           
  9907                           
  9908                           ;psect for function _CC2500_WriteByte
  9909  1C3B                     _CC2500_WriteByte:	
  9910                           
  9911                           ;CC2500_B1.c: 227: unsigned char loop_a;
  9912                           ;CC2500_B1.c: 228: for (loop_a = 0; loop_a < 8; loop_a++) {
  9913                           
  9914                           ;incstack = 0
  9915                           ; Regs used in _CC2500_WriteByte: [wreg+status,2+status,0]
  9916  1C3B  0020               	movlb	0	; select bank0
  9917  1C3C  01A1               	clrf	CC2500_WriteByte@loop_a
  9918  1C3D                     L6:	
  9919  1C3D  3008               	movlw	8
  9920  1C3E  0221               	subwf	CC2500_WriteByte@loop_a,w
  9921  1C3F  1803               	btfsc	3,0
  9922  1C40  0008               	return
  9923                           
  9924                           ;CC2500_B1.c: 229: if (SPI0Buffer & 0x80)
  9925  1C41  0021               	movlb	1	; select bank1
  9926  1C42  1FD8               	btfss	_SPI0Buffer^(0+128),7
  9927  1C43  2C47               	goto	l327
  9928                           
  9929                           ;CC2500_B1.c: 230: RC0 = 1;
  9930  1C44  0020               	movlb	0	; select bank0
  9931  1C45  140E               	bsf	14,0	;volatile
  9932  1C46  2C49               	goto	l328
  9933  1C47                     l327:	
  9934                           
  9935                           ;CC2500_B1.c: 231: else
  9936                           ;CC2500_B1.c: 232: RC0 = 0;
  9937  1C47  0020               	movlb	0	; select bank0
  9938  1C48  100E               	bcf	14,0	;volatile
  9939  1C49                     l328:	
  9940                           
  9941                           ;CC2500_B1.c: 233: RC1 = 1;
  9942  1C49  148E               	bsf	14,1	;volatile
  9943                           
  9944                           ;CC2500_B1.c: 234: SPI0Buffer <<= 1;
  9945  1C4A  1003               	clrc
  9946  1C4B  0021               	movlb	1	; select bank1
  9947  1C4C  0DD8               	rlf	_SPI0Buffer^(0+128),f
  9948                           
  9949                           ;CC2500_B1.c: 235: RC1 = 0;
  9950  1C4D  0020               	movlb	0	; select bank0
  9951  1C4E  108E               	bcf	14,1	;volatile
  9952  1C4F  3001               	movlw	1
  9953  1C50  00A0               	movwf	??_CC2500_WriteByte
  9954  1C51  0820               	movf	??_CC2500_WriteByte,w
  9955  1C52  07A1               	addwf	CC2500_WriteByte@loop_a,f
  9956  1C53  2C3D               	goto	L6
  9957  1C54                     __end_of_CC2500_WriteByte:	
  9958                           
  9959                           	psect	text53
  9960  18C1                     __ptext53:	
  9961 ;; *************** function _RF_Initialization *****************
  9962 ;; Defined at:
  9963 ;;		line 9 in file "../src/RF_Control_B1.c"
  9964 ;; Parameters:    Size  Location     Type
  9965 ;;		None
  9966 ;; Auto vars:     Size  Location     Type
  9967 ;;		None
  9968 ;; Return value:  Size  Location     Type
  9969 ;;		None               void
  9970 ;; Registers used:
  9971 ;;		wreg, status,2, status,0, pclath, cstack
  9972 ;; Tracked objects:
  9973 ;;		On entry : 0/0
  9974 ;;		On exit  : 0/0
  9975 ;;		Unchanged: 0/0
  9976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9980 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9981 ;;Total ram usage:        0 bytes
  9982 ;; Hardware stack levels used:    1
  9983 ;; Hardware stack levels required when called:    6
  9984 ;; This function calls:
  9985 ;;		_setRF_Initialization
  9986 ;; This function is called by:
  9987 ;;		_main
  9988 ;; This function uses a non-reentrant model
  9989 ;;
  9990                           
  9991                           
  9992                           ;psect for function _RF_Initialization
  9993  18C1                     _RF_Initialization:	
  9994                           
  9995                           ;RF_Control_B1.c: 11: setRF_Initialization();
  9996                           
  9997                           ;incstack = 0
  9998                           ; Regs used in _RF_Initialization: [wreg+status,2+status,0+pclath+cstack]
  9999  18C1  3199  215F         	fcall	_setRF_Initialization
 10000  18C3  0008               	return
 10001  18C4                     __end_of_RF_Initialization:	
 10002                           
 10003                           	psect	text54
 10004  195F                     __ptext54:	
 10005 ;; *************** function _setRF_Initialization *****************
 10006 ;; Defined at:
 10007 ;;		line 17 in file "../src/RF_Control_B1.c"
 10008 ;; Parameters:    Size  Location     Type
 10009 ;;		None
 10010 ;; Auto vars:     Size  Location     Type
 10011 ;;		None
 10012 ;; Return value:  Size  Location     Type
 10013 ;;		None               void
 10014 ;; Registers used:
 10015 ;;		wreg
 10016 ;; Tracked objects:
 10017 ;;		On entry : 0/0
 10018 ;;		On exit  : 0/0
 10019 ;;		Unchanged: 0/0
 10020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10022 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10023 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10024 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10025 ;;Total ram usage:        1 bytes
 10026 ;; Hardware stack levels used:    1
 10027 ;; Hardware stack levels required when called:    5
 10028 ;; This function calls:
 10029 ;;		Nothing
 10030 ;; This function is called by:
 10031 ;;		_RF_Initialization
 10032 ;; This function uses a non-reentrant model
 10033 ;;
 10034                           
 10035                           
 10036                           ;psect for function _setRF_Initialization
 10037  195F                     _setRF_Initialization:	
 10038                           
 10039                           ;RF_Control_B1.c: 19: Tx_Length = 21;
 10040                           
 10041                           ;incstack = 0
 10042                           ; Regs used in _setRF_Initialization: [wreg]
 10043  195F  3015               	movlw	21
 10044  1960  0020               	movlb	0	; select bank0
 10045  1961  00A0               	movwf	??_setRF_Initialization
 10046  1962  0820               	movf	??_setRF_Initialization,w
 10047  1963  0021               	movlb	1	; select bank1
 10048  1964  00DA               	movwf	_Tx_Length^(0+128)
 10049                           
 10050                           ;RF_Control_B1.c: 20: RF1.RunTime = 200;
 10051  1965  30C8               	movlw	200
 10052  1966  00A7               	movwf	(_RF1^(0+128)+7)
 10053  1967  3000               	movlw	0
 10054  1968  00A8               	movwf	(_RF1^(0+128)+8)
 10055  1969  0008               	return
 10056  196A                     __end_of_setRF_Initialization:	
 10057                           
 10058                           	psect	text55
 10059  1A9A                     __ptext55:	
 10060 ;; *************** function _Mcu_Initialization *****************
 10061 ;; Defined at:
 10062 ;;		line 30 in file "../src/MCU_B1.c"
 10063 ;; Parameters:    Size  Location     Type
 10064 ;;		None
 10065 ;; Auto vars:     Size  Location     Type
 10066 ;;		None
 10067 ;; Return value:  Size  Location     Type
 10068 ;;		None               void
 10069 ;; Registers used:
 10070 ;;		wreg, status,2, status,0, pclath, cstack
 10071 ;; Tracked objects:
 10072 ;;		On entry : 0/0
 10073 ;;		On exit  : 0/0
 10074 ;;		Unchanged: 0/0
 10075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10079 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10080 ;;Total ram usage:        0 bytes
 10081 ;; Hardware stack levels used:    1
 10082 ;; Hardware stack levels required when called:    6
 10083 ;; This function calls:
 10084 ;;		_ADC_Set
 10085 ;;		_Fosc_Set
 10086 ;;		_IOC_Set
 10087 ;;		_IO_Set
 10088 ;;		_TMR1_Set
 10089 ;;		_WDT_Set
 10090 ;; This function is called by:
 10091 ;;		_main
 10092 ;; This function uses a non-reentrant model
 10093 ;;
 10094                           
 10095                           
 10096                           ;psect for function _Mcu_Initialization
 10097  1A9A                     _Mcu_Initialization:	
 10098                           
 10099                           ;MCU_B1.c: 32: Fosc_Set();
 10100                           
 10101                           ;incstack = 0
 10102                           ; Regs used in _Mcu_Initialization: [wreg+status,2+status,0+pclath+cstack]
 10103  1A9A  3198  20CD  319A   	fcall	_Fosc_Set
 10104                           
 10105                           ;MCU_B1.c: 34: IO_Set();
 10106  1A9D  319C  2488  319A   	fcall	_IO_Set
 10107                           
 10108                           ;MCU_B1.c: 36: ;;
 10109                           ;MCU_B1.c: 38: TMR1_Set();
 10110  1AA0  3199  21BD  319A   	fcall	_TMR1_Set
 10111                           
 10112                           ;MCU_B1.c: 40: ADC_Set();
 10113  1AA3  3198  20F8  319A   	fcall	_ADC_Set
 10114                           
 10115                           ;MCU_B1.c: 42: ;;
 10116                           ;MCU_B1.c: 44: ;;
 10117                           ;MCU_B1.c: 46: IOC_Set();
 10118  1AA6  3199  2154  319A   	fcall	_IOC_Set
 10119                           
 10120                           ;MCU_B1.c: 48: ;;
 10121                           ;MCU_B1.c: 50: ;;
 10122                           ;MCU_B1.c: 52: WDT_Set();
 10123  1AA9  3199  21C9         	fcall	_WDT_Set
 10124  1AAB  0008               	return
 10125  1AAC                     __end_of_Mcu_Initialization:	
 10126                           
 10127                           	psect	text56
 10128  19C9                     __ptext56:	
 10129 ;; *************** function _WDT_Set *****************
 10130 ;; Defined at:
 10131 ;;		line 1102 in file "../src/MCU_B1.c"
 10132 ;; Parameters:    Size  Location     Type
 10133 ;;		None
 10134 ;; Auto vars:     Size  Location     Type
 10135 ;;		None
 10136 ;; Return value:  Size  Location     Type
 10137 ;;		None               void
 10138 ;; Registers used:
 10139 ;;		wreg
 10140 ;; Tracked objects:
 10141 ;;		On entry : 0/0
 10142 ;;		On exit  : 0/0
 10143 ;;		Unchanged: 0/0
 10144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10147 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10148 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10149 ;;Total ram usage:        1 bytes
 10150 ;; Hardware stack levels used:    1
 10151 ;; Hardware stack levels required when called:    5
 10152 ;; This function calls:
 10153 ;;		Nothing
 10154 ;; This function is called by:
 10155 ;;		_Mcu_Initialization
 10156 ;; This function uses a non-reentrant model
 10157 ;;
 10158                           
 10159                           
 10160                           ;psect for function _WDT_Set
 10161  19C9                     _WDT_Set:	
 10162                           
 10163                           ;MCU_B1.c: 1109: WDTCON = 0b00010111;;
 10164                           
 10165                           ;incstack = 0
 10166                           ; Regs used in _WDT_Set: [wreg]
 10167  19C9  3017               	movlw	23
 10168  19CA  0021               	movlb	1	; select bank1
 10169  19CB  0097               	movwf	23	;volatile
 10170                           
 10171                           ;MCU_B1.c: 1111: WDT.Enable = 1;
 10172  19CC  0022               	movlb	2	; select bank2
 10173  19CD  1436               	bsf	_WDT^(0+256),0
 10174                           
 10175                           ;MCU_B1.c: 1112: WDT.Timer = 10;
 10176  19CE  300A               	movlw	10
 10177  19CF  0020               	movlb	0	; select bank0
 10178  19D0  00A0               	movwf	??_WDT_Set
 10179  19D1  0820               	movf	??_WDT_Set,w
 10180  19D2  0022               	movlb	2	; select bank2
 10181  19D3  00B7               	movwf	(_WDT^(0+256)+1)
 10182  19D4  0008               	return
 10183  19D5                     __end_of_WDT_Set:	
 10184                           
 10185                           	psect	text57
 10186  19BD                     __ptext57:	
 10187 ;; *************** function _TMR1_Set *****************
 10188 ;; Defined at:
 10189 ;;		line 226 in file "../src/MCU_B1.c"
 10190 ;; Parameters:    Size  Location     Type
 10191 ;;		None
 10192 ;; Auto vars:     Size  Location     Type
 10193 ;;		None
 10194 ;; Return value:  Size  Location     Type
 10195 ;;		None               void
 10196 ;; Registers used:
 10197 ;;		wreg
 10198 ;; Tracked objects:
 10199 ;;		On entry : 0/0
 10200 ;;		On exit  : 0/0
 10201 ;;		Unchanged: 0/0
 10202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10203 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10204 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10205 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10206 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10207 ;;Total ram usage:        0 bytes
 10208 ;; Hardware stack levels used:    1
 10209 ;; Hardware stack levels required when called:    5
 10210 ;; This function calls:
 10211 ;;		Nothing
 10212 ;; This function is called by:
 10213 ;;		_Mcu_Initialization
 10214 ;; This function uses a non-reentrant model
 10215 ;;
 10216                           
 10217                           
 10218                           ;psect for function _TMR1_Set
 10219  19BD                     _TMR1_Set:	
 10220                           
 10221                           ;MCU_B1.c: 227: T1CON = (0x40 | 0x00 | 0x01);
 10222                           
 10223                           ;incstack = 0
 10224                           ; Regs used in _TMR1_Set: [wreg]
 10225  19BD  3041               	movlw	65
 10226  19BE  0020               	movlb	0	; select bank0
 10227  19BF  0098               	movwf	24	;volatile
 10228                           
 10229                           ;MCU_B1.c: 228: TMR1H = (int)((65536-1480)/256);
 10230  19C0  30FA               	movlw	250
 10231  19C1  0097               	movwf	23	;volatile
 10232                           
 10233                           ;MCU_B1.c: 229: TMR1L = (int)((65536-1480)%256);
 10234  19C2  3038               	movlw	56
 10235  19C3  0096               	movwf	22	;volatile
 10236                           
 10237                           ;MCU_B1.c: 230: TMR1IE = 1;
 10238  19C4  0021               	movlb	1	; select bank1
 10239  19C5  1411               	bsf	17,0	;volatile
 10240                           
 10241                           ;MCU_B1.c: 231: PEIE = 1;
 10242  19C6  170B               	bsf	11,6	;volatile
 10243                           
 10244                           ;MCU_B1.c: 232: GIE = 1;
 10245  19C7  178B               	bsf	11,7	;volatile
 10246  19C8  0008               	return
 10247  19C9                     __end_of_TMR1_Set:	
 10248                           
 10249                           	psect	text58
 10250  1C88                     __ptext58:	
 10251 ;; *************** function _IO_Set *****************
 10252 ;; Defined at:
 10253 ;;		line 60 in file "../src/MCU_B1.c"
 10254 ;; Parameters:    Size  Location     Type
 10255 ;;		None
 10256 ;; Auto vars:     Size  Location     Type
 10257 ;;		None
 10258 ;; Return value:  Size  Location     Type
 10259 ;;		None               void
 10260 ;; Registers used:
 10261 ;;		wreg, status,2
 10262 ;; Tracked objects:
 10263 ;;		On entry : 0/0
 10264 ;;		On exit  : 0/0
 10265 ;;		Unchanged: 0/0
 10266 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10270 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10271 ;;Total ram usage:        0 bytes
 10272 ;; Hardware stack levels used:    1
 10273 ;; Hardware stack levels required when called:    5
 10274 ;; This function calls:
 10275 ;;		Nothing
 10276 ;; This function is called by:
 10277 ;;		_Mcu_Initialization
 10278 ;; This function uses a non-reentrant model
 10279 ;;
 10280                           
 10281                           
 10282                           ;psect for function _IO_Set
 10283  1C88                     _IO_Set:	
 10284                           
 10285                           ;MCU_B1.c: 92: TRISA = 0b01110111;;
 10286                           
 10287                           ;incstack = 0
 10288                           ; Regs used in _IO_Set: [wreg+status,2]
 10289  1C88  3077               	movlw	119
 10290  1C89  0021               	movlb	1	; select bank1
 10291  1C8A  008C               	movwf	12	;volatile
 10292                           
 10293                           ;MCU_B1.c: 93: TRISB = 0b00000111;;
 10294  1C8B  3007               	movlw	7
 10295  1C8C  008D               	movwf	13	;volatile
 10296                           
 10297                           ;MCU_B1.c: 94: TRISC = 0b00001100;;
 10298  1C8D  300C               	movlw	12
 10299  1C8E  008E               	movwf	14	;volatile
 10300                           
 10301                           ;MCU_B1.c: 96: LATA = 0b00000000;;
 10302  1C8F  0022               	movlb	2	; select bank2
 10303  1C90  018C               	clrf	12	;volatile
 10304                           
 10305                           ;MCU_B1.c: 97: LATB = 0b00000010;;
 10306  1C91  3002               	movlw	2
 10307  1C92  008D               	movwf	13	;volatile
 10308                           
 10309                           ;MCU_B1.c: 98: LATC = 0b00000000;;
 10310  1C93  018E               	clrf	14	;volatile
 10311                           
 10312                           ;MCU_B1.c: 100: ANSELA = 0b00100010;;
 10313  1C94  3022               	movlw	34
 10314  1C95  0023               	movlb	3	; select bank3
 10315  1C96  008C               	movwf	12	;volatile
 10316                           
 10317                           ;MCU_B1.c: 101: ANSELB = 0b00000000;;
 10318  1C97  018D               	clrf	13	;volatile
 10319                           
 10320                           ;MCU_B1.c: 102: ANSELC = 0b00000000;;
 10321  1C98  018E               	clrf	14	;volatile
 10322                           
 10323                           ;MCU_B1.c: 104: PORTA = 0b01110111;;
 10324  1C99  3077               	movlw	119
 10325  1C9A  0020               	movlb	0	; select bank0
 10326  1C9B  008C               	movwf	12	;volatile
 10327                           
 10328                           ;MCU_B1.c: 105: PORTB = 0b00000111;;
 10329  1C9C  3007               	movlw	7
 10330  1C9D  008D               	movwf	13	;volatile
 10331                           
 10332                           ;MCU_B1.c: 106: PORTC = 0b00001100;;
 10333  1C9E  300C               	movlw	12
 10334  1C9F  008E               	movwf	14	;volatile
 10335                           
 10336                           ;MCU_B1.c: 108: WPUB = 0b00000000;;
 10337  1CA0  0024               	movlb	4	; select bank4
 10338  1CA1  018D               	clrf	13	;volatile
 10339  1CA2  0008               	return
 10340  1CA3                     __end_of_IO_Set:	
 10341                           
 10342                           	psect	text59
 10343  1954                     __ptext59:	
 10344 ;; *************** function _IOC_Set *****************
 10345 ;; Defined at:
 10346 ;;		line 380 in file "../src/MCU_B1.c"
 10347 ;; Parameters:    Size  Location     Type
 10348 ;;		None
 10349 ;; Auto vars:     Size  Location     Type
 10350 ;;		None
 10351 ;; Return value:  Size  Location     Type
 10352 ;;		None               void
 10353 ;; Registers used:
 10354 ;;		wreg, status,2
 10355 ;; Tracked objects:
 10356 ;;		On entry : 0/0
 10357 ;;		On exit  : 0/0
 10358 ;;		Unchanged: 0/0
 10359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10360 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10361 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10362 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10363 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10364 ;;Total ram usage:        0 bytes
 10365 ;; Hardware stack levels used:    1
 10366 ;; Hardware stack levels required when called:    5
 10367 ;; This function calls:
 10368 ;;		Nothing
 10369 ;; This function is called by:
 10370 ;;		_Mcu_Initialization
 10371 ;; This function uses a non-reentrant model
 10372 ;;
 10373                           
 10374                           
 10375                           ;psect for function _IOC_Set
 10376  1954                     _IOC_Set:	
 10377                           
 10378                           ;MCU_B1.c: 382: IOCBP = 0b00000100;;
 10379                           
 10380                           ;incstack = 0
 10381                           ; Regs used in _IOC_Set: [wreg+status,2]
 10382  1954  3004               	movlw	4
 10383  1955  0027               	movlb	7	; select bank7
 10384  1956  0094               	movwf	20	;volatile
 10385                           
 10386                           ;MCU_B1.c: 383: IOCBN = 0b00000100;;
 10387  1957  3004               	movlw	4
 10388  1958  0095               	movwf	21	;volatile
 10389                           
 10390                           ;MCU_B1.c: 385: IOCBF = 0b00000000;
 10391  1959  0196               	clrf	22	;volatile
 10392                           
 10393                           ;MCU_B1.c: 387: IOCIE = 1;
 10394  195A  158B               	bsf	11,3	;volatile
 10395                           
 10396                           ;MCU_B1.c: 388: IOCIF = 0;
 10397  195B  100B               	bcf	11,0	;volatile
 10398                           
 10399                           ;MCU_B1.c: 389: PEIE = 1;
 10400  195C  170B               	bsf	11,6	;volatile
 10401                           
 10402                           ;MCU_B1.c: 390: GIE = 1;
 10403  195D  178B               	bsf	11,7	;volatile
 10404  195E  0008               	return
 10405  195F                     __end_of_IOC_Set:	
 10406                           
 10407                           	psect	text60
 10408  18CD                     __ptext60:	
 10409 ;; *************** function _Fosc_Set *****************
 10410 ;; Defined at:
 10411 ;;		line 56 in file "../src/MCU_B1.c"
 10412 ;; Parameters:    Size  Location     Type
 10413 ;;		None
 10414 ;; Auto vars:     Size  Location     Type
 10415 ;;		None
 10416 ;; Return value:  Size  Location     Type
 10417 ;;		None               void
 10418 ;; Registers used:
 10419 ;;		wreg
 10420 ;; Tracked objects:
 10421 ;;		On entry : 0/0
 10422 ;;		On exit  : 0/0
 10423 ;;		Unchanged: 0/0
 10424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10425 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10426 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10428 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10429 ;;Total ram usage:        0 bytes
 10430 ;; Hardware stack levels used:    1
 10431 ;; Hardware stack levels required when called:    5
 10432 ;; This function calls:
 10433 ;;		Nothing
 10434 ;; This function is called by:
 10435 ;;		_Mcu_Initialization
 10436 ;; This function uses a non-reentrant model
 10437 ;;
 10438                           
 10439                           
 10440                           ;psect for function _Fosc_Set
 10441  18CD                     _Fosc_Set:	
 10442                           
 10443                           ;MCU_B1.c: 57: OSCCON = 0x78;
 10444                           
 10445                           ;incstack = 0
 10446                           ; Regs used in _Fosc_Set: [wreg]
 10447  18CD  3078               	movlw	120
 10448  18CE  0021               	movlb	1	; select bank1
 10449  18CF  0099               	movwf	25	;volatile
 10450  18D0  0008               	return
 10451  18D1                     __end_of_Fosc_Set:	
 10452                           
 10453                           	psect	text61
 10454  18F8                     __ptext61:	
 10455 ;; *************** function _ADC_Set *****************
 10456 ;; Defined at:
 10457 ;;		line 427 in file "../src/MCU_B1.c"
 10458 ;; Parameters:    Size  Location     Type
 10459 ;;		None
 10460 ;; Auto vars:     Size  Location     Type
 10461 ;;		None
 10462 ;; Return value:  Size  Location     Type
 10463 ;;		None               void
 10464 ;; Registers used:
 10465 ;;		wreg
 10466 ;; Tracked objects:
 10467 ;;		On entry : 0/0
 10468 ;;		On exit  : 0/0
 10469 ;;		Unchanged: 0/0
 10470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10474 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10475 ;;Total ram usage:        0 bytes
 10476 ;; Hardware stack levels used:    1
 10477 ;; Hardware stack levels required when called:    5
 10478 ;; This function calls:
 10479 ;;		Nothing
 10480 ;; This function is called by:
 10481 ;;		_Mcu_Initialization
 10482 ;; This function uses a non-reentrant model
 10483 ;;
 10484                           
 10485                           
 10486                           ;psect for function _ADC_Set
 10487  18F8                     _ADC_Set:	
 10488                           
 10489                           ;MCU_B1.c: 428: ADCON1 = 0xf3;
 10490                           
 10491                           ;incstack = 0
 10492                           ; Regs used in _ADC_Set: [wreg]
 10493  18F8  30F3               	movlw	243
 10494  18F9  0021               	movlb	1	; select bank1
 10495  18FA  009E               	movwf	30	;volatile
 10496                           
 10497                           ;MCU_B1.c: 429: FVRCON = 0xc1;
 10498  18FB  30C1               	movlw	193
 10499  18FC  0022               	movlb	2	; select bank2
 10500  18FD  0097               	movwf	23	;volatile
 10501  18FE  0008               	return
 10502  18FF                     __end_of_ADC_Set:	
 10503                           
 10504                           	psect	text62
 10505  0053                     __ptext62:	
 10506 ;; *************** function _Load_Main *****************
 10507 ;; Defined at:
 10508 ;;		line 39 in file "../src/OverLoad_B1.c"
 10509 ;; Parameters:    Size  Location     Type
 10510 ;;		None
 10511 ;; Auto vars:     Size  Location     Type
 10512 ;;  i               2   16[BANK0 ] int 
 10513 ;;  LightsCount     1   15[BANK0 ] unsigned char 
 10514 ;;  Load_RunStat    1   14[BANK0 ] unsigned char 
 10515 ;;  ErrorCountVa    1   13[BANK0 ] unsigned char 
 10516 ;;  error           1   12[BANK0 ] unsigned char 
 10517 ;; Return value:  Size  Location     Type
 10518 ;;		None               void
 10519 ;; Registers used:
 10520 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10521 ;; Tracked objects:
 10522 ;;		On entry : 0/0
 10523 ;;		On exit  : 0/0
 10524 ;;		Unchanged: 0/0
 10525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10527 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10528 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10529 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10530 ;;Total ram usage:       10 bytes
 10531 ;; Hardware stack levels used:    1
 10532 ;; Hardware stack levels required when called:    6
 10533 ;; This function calls:
 10534 ;;		___lwdiv
 10535 ;;		___wmul
 10536 ;;		_getAll_DimmerIntr_Dimming_Sw_RF
 10537 ;;		_getDimmer_LoadGO
 10538 ;;		_getDimmer_Load_Status
 10539 ;;		_getMain_All_Error_Status
 10540 ;;		_getMain_All_LightsStatus
 10541 ;;		_getMain_Lights_Count
 10542 ;;		_setLoad_AH_AL_Restore
 10543 ;; This function is called by:
 10544 ;;		_main
 10545 ;; This function uses a non-reentrant model
 10546 ;;
 10547                           
 10548                           
 10549                           ;psect for function _Load_Main
 10550  0053                     _Load_Main:	
 10551                           
 10552                           ;OverLoad_B1.c: 40: char error = getMain_All_Error_Status(0);
 10553                           
 10554                           ;incstack = 0
 10555                           ; Regs used in _Load_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10556  0053  3000               	movlw	0
 10557  0054  319F  27CD  3180   	fcall	_getMain_All_Error_Status
 10558  0057  0020               	movlb	0	; select bank0
 10559  0058  00A8               	movwf	??_Load_Main
 10560  0059  0828               	movf	??_Load_Main,w
 10561  005A  00AC               	movwf	Load_Main@error
 10562                           
 10563                           ;OverLoad_B1.c: 41: char Load_RunStatus = 0, ErrorCountValue = 0, LightsCount=0;
 10564  005B  01AE               	clrf	Load_Main@Load_RunStatus
 10565  005C  01AD               	clrf	Load_Main@ErrorCountValue
 10566  005D  01AF               	clrf	Load_Main@LightsCount
 10567                           
 10568                           ;OverLoad_B1.c: 42: if (Load.Enable == 1) {
 10569  005E  0022               	movlb	2	; select bank2
 10570  005F  1C3F               	btfss	_Load^(0+256),0
 10571  0060  29FF               	goto	l1606
 10572                           
 10573                           ;OverLoad_B1.c: 44: if (getMain_All_LightsStatus() == 0) {
 10574  0061  319A  22E4  3180   	fcall	_getMain_All_LightsStatus
 10575  0064  3800               	iorlw	0
 10576  0065  1D03               	skipz
 10577  0066  2869               	goto	l8768
 10578                           
 10579                           ;OverLoad_B1.c: 45: Load.GO = 0;
 10580  0067  0022               	movlb	2	; select bank2
 10581  0068  288A               	goto	l8786
 10582  0069                     l8768:	
 10583                           ;OverLoad_B1.c: 46: } else {
 10584                           
 10585                           
 10586                           ;OverLoad_B1.c: 49: if (error == 0 && getAll_DimmerIntr_Dimming_Sw_RF() == 0) {
 10587  0069  0020               	movlb	0	; select bank0
 10588  006A  08AC               	movf	Load_Main@error,f
 10589  006B  1D03               	skipz
 10590  006C  2887               	goto	l1609
 10591  006D  3190  2000  3180   	fcall	_getAll_DimmerIntr_Dimming_Sw_RF
 10592  0070  3800               	iorlw	0
 10593  0071  1D03               	skipz
 10594  0072  2887               	goto	l1609
 10595                           
 10596                           ;OverLoad_B1.c: 50: Load.GO = 1;
 10597  0073  0022               	movlb	2	; select bank2
 10598  0074  14BF               	bsf	_Load^(0+256),1
 10599                           
 10600                           ;OverLoad_B1.c: 52: if (getDimmer_LoadGO() == 1) {
 10601  0075  3199  2117  3180   	fcall	_getDimmer_LoadGO
 10602  0078  3A01               	xorlw	1
 10603  0079  1D03               	skipz
 10604  007A  2882               	goto	l1610
 10605                           
 10606                           ;OverLoad_B1.c: 53: if (Load.Run == 0 && Load.OK == 0) {
 10607  007B  0022               	movlb	2	; select bank2
 10608  007C  1DBF               	btfss	_Load^(0+256),3
 10609  007D  1BBF               	btfsc	_Load^(0+256),7
 10610  007E  288B               	goto	l1608
 10611                           
 10612                           ;OverLoad_B1.c: 54: Load.Run = 1;
 10613  007F  15BF               	bsf	_Load^(0+256),3
 10614                           
 10615                           ;OverLoad_B1.c: 55: Load.Count = 0;
 10616  0080  01E4               	clrf	(_Load^(0+256)+37)
 10617                           
 10618                           ;OverLoad_B1.c: 56: }
 10619                           ;OverLoad_B1.c: 57: } else {
 10620  0081  288B               	goto	l1608
 10621  0082                     l1610:	
 10622                           
 10623                           ;OverLoad_B1.c: 58: if (Load.OK == 1) {
 10624  0082  0022               	movlb	2	; select bank2
 10625  0083  1FBF               	btfss	_Load^(0+256),7
 10626  0084  288B               	goto	l1608
 10627                           
 10628                           ;OverLoad_B1.c: 59: Load.OK = 0;
 10629  0085  13BF               	bcf	_Load^(0+256),7
 10630                           
 10631                           ;OverLoad_B1.c: 60: }
 10632                           ;OverLoad_B1.c: 61: }
 10633                           ;OverLoad_B1.c: 62: } else {
 10634  0086  288B               	goto	l1608
 10635  0087                     l1609:	
 10636                           
 10637                           ;OverLoad_B1.c: 63: if (Load.GO == 1) {
 10638  0087  0022               	movlb	2	; select bank2
 10639  0088  1CBF               	btfss	_Load^(0+256),1
 10640  0089  288B               	goto	l1608
 10641  008A                     l8786:	
 10642                           
 10643                           ;OverLoad_B1.c: 64: Load.GO = 0;
 10644  008A  10BF               	bcf	_Load^(0+256),1
 10645  008B                     l1608:	
 10646                           
 10647                           ;OverLoad_B1.c: 65: }
 10648                           ;OverLoad_B1.c: 66: }
 10649                           ;OverLoad_B1.c: 88: }
 10650                           ;OverLoad_B1.c: 91: if (Load.GO == 1) {
 10651  008B  1CBF               	btfss	_Load^(0+256),1
 10652  008C  29DB               	goto	l1616
 10653                           
 10654                           ;OverLoad_B1.c: 92: Load.LightsON = 1;
 10655  008D  153F               	bsf	_Load^(0+256),2
 10656                           
 10657                           ;OverLoad_B1.c: 94: if (Load.ADtoGO == 1) {
 10658  008E  1E3F               	btfss	_Load^(0+256),4
 10659  008F  29D9               	goto	l1617
 10660                           
 10661                           ;OverLoad_B1.c: 95: Load.Time++;
 10662  0090  3001               	movlw	1
 10663  0091  07C0               	addwf	(_Load^(0+256)+1),f
 10664  0092  3000               	movlw	0
 10665  0093  3DC1               	addwfc	((_Load+1)^(0+256)+1),f
 10666                           
 10667                           ;OverLoad_B1.c: 96: if (Load.Time >= (40 / 20)) {
 10668  0094  3000               	movlw	0
 10669  0095  0241               	subwf	((_Load+1)^(0+256)+1),w
 10670  0096  3002               	movlw	2
 10671  0097  1903               	skipnz
 10672  0098  0240               	subwf	(_Load^(0+256)+1),w
 10673  0099  1C03               	skipc
 10674  009A  0008               	return
 10675                           
 10676                           ;OverLoad_B1.c: 97: Load.Time = 0;
 10677  009B  01C0               	clrf	(_Load^(0+256)+1)
 10678  009C  01C1               	clrf	((_Load+1)^(0+256)+1)
 10679                           
 10680                           ;OverLoad_B1.c: 98: Load.ADtoGO = 0;
 10681  009D  123F               	bcf	_Load^(0+256),4
 10682                           
 10683                           ;OverLoad_B1.c: 100: for (int i = 1; i < 4; i++) {
 10684  009E  3001               	movlw	1
 10685  009F  0020               	movlb	0	; select bank0
 10686  00A0  00B0               	movwf	Load_Main@i
 10687  00A1  3000               	movlw	0
 10688  00A2  00B1               	movwf	Load_Main@i+1
 10689  00A3  0831               	movf	Load_Main@i+1,w
 10690  00A4  3A80               	xorlw	128
 10691  00A5  00A8               	movwf	??_Load_Main
 10692  00A6  3080               	movlw	128
 10693  00A7  0228               	subwf	??_Load_Main,w
 10694  00A8  1D03               	skipz
 10695  00A9  28AC               	goto	u9645
 10696  00AA  3004               	movlw	4
 10697  00AB  0230               	subwf	Load_Main@i,w
 10698  00AC                     u9645:	
 10699  00AC  1803               	btfsc	3,0
 10700  00AD  28E0               	goto	l8808
 10701  00AE                     l8802:	
 10702                           
 10703                           ;OverLoad_B1.c: 101: Load.ADH += Load.AH[i];
 10704  00AE  0020               	movlb	0	; select bank0
 10705  00AF  3530               	lslf	Load_Main@i,w
 10706  00B0  3E4A               	addlw	(_Load+11)& (0+255)
 10707  00B1  0086               	movwf	6
 10708  00B2  3001               	movlw	1	; select bank2/3
 10709  00B3  0087               	movwf	7
 10710  00B4  3F40               	moviw [0]fsr1
 10711  00B5  00A8               	movwf	??_Load_Main
 10712  00B6  3F41               	moviw [1]fsr1
 10713  00B7  00A9               	movwf	??_Load_Main+1
 10714  00B8  0828               	movf	??_Load_Main,w
 10715  00B9  0022               	movlb	2	; select bank2
 10716  00BA  07C4               	addwf	(_Load^(0+256)+5),f
 10717  00BB  0020               	movlb	0	; select bank0
 10718  00BC  0829               	movf	??_Load_Main+1,w
 10719  00BD  0022               	movlb	2	; select bank2
 10720  00BE  3DC5               	addwfc	((_Load+1)^(0+256)+5),f
 10721                           
 10722                           ;OverLoad_B1.c: 102: Load.ADL += Load.AL[i];
 10723  00BF  0020               	movlb	0	; select bank0
 10724  00C0  3530               	lslf	Load_Main@i,w
 10725  00C1  3E54               	addlw	(_Load+21)& (0+255)
 10726  00C2  0086               	movwf	6
 10727  00C3  3001               	movlw	1	; select bank2/3
 10728  00C4  0087               	movwf	7
 10729  00C5  3F40               	moviw [0]fsr1
 10730  00C6  00A8               	movwf	??_Load_Main
 10731  00C7  3F41               	moviw [1]fsr1
 10732  00C8  00A9               	movwf	??_Load_Main+1
 10733  00C9  0828               	movf	??_Load_Main,w
 10734  00CA  0022               	movlb	2	; select bank2
 10735  00CB  07C6               	addwf	(_Load^(0+256)+7),f
 10736  00CC  0020               	movlb	0	; select bank0
 10737  00CD  0829               	movf	??_Load_Main+1,w
 10738  00CE  0022               	movlb	2	; select bank2
 10739  00CF  3DC7               	addwfc	((_Load+1)^(0+256)+7),f
 10740  00D0  3001               	movlw	1
 10741  00D1  0020               	movlb	0	; select bank0
 10742  00D2  07B0               	addwf	Load_Main@i,f
 10743  00D3  3000               	movlw	0
 10744  00D4  3DB1               	addwfc	Load_Main@i+1,f
 10745  00D5  0831               	movf	Load_Main@i+1,w
 10746  00D6  3A80               	xorlw	128
 10747  00D7  00A8               	movwf	??_Load_Main
 10748  00D8  3080               	movlw	128
 10749  00D9  0228               	subwf	??_Load_Main,w
 10750  00DA  1D03               	skipz
 10751  00DB  28DE               	goto	u9655
 10752  00DC  3004               	movlw	4
 10753  00DD  0230               	subwf	Load_Main@i,w
 10754  00DE                     u9655:	
 10755  00DE  1C03               	skipc
 10756  00DF  28AE               	goto	l8802
 10757  00E0                     l8808:	
 10758                           
 10759                           ;OverLoad_B1.c: 103: }
 10760                           ;OverLoad_B1.c: 104: Load.ADH /= 3;
 10761  00E0  3003               	movlw	3
 10762  00E1  0020               	movlb	0	; select bank0
 10763  00E2  00A0               	movwf	___lwdiv@divisor
 10764  00E3  3000               	movlw	0
 10765  00E4  00A1               	movwf	___lwdiv@divisor+1
 10766  00E5  0022               	movlb	2	; select bank2
 10767  00E6  0845               	movf	((_Load+1)^(0+256)+5),w
 10768  00E7  0020               	movlb	0	; select bank0
 10769  00E8  01A3               	clrf	___lwdiv@dividend+1
 10770  00E9  07A3               	addwf	___lwdiv@dividend+1,f
 10771  00EA  0022               	movlb	2	; select bank2
 10772  00EB  0844               	movf	(_Load^(0+256)+5),w
 10773  00EC  0020               	movlb	0	; select bank0
 10774  00ED  01A2               	clrf	___lwdiv@dividend
 10775  00EE  07A2               	addwf	___lwdiv@dividend,f
 10776  00EF  3190  2055  3180   	fcall	___lwdiv
 10777  00F2  0020               	movlb	0	; select bank0
 10778  00F3  0821               	movf	?___lwdiv+1,w
 10779  00F4  0022               	movlb	2	; select bank2
 10780  00F5  01C5               	clrf	((_Load+1)^(0+256)+5)
 10781  00F6  07C5               	addwf	((_Load+1)^(0+256)+5),f
 10782  00F7  0020               	movlb	0	; select bank0
 10783  00F8  0820               	movf	?___lwdiv,w
 10784  00F9  0022               	movlb	2	; select bank2
 10785  00FA  01C4               	clrf	(_Load^(0+256)+5)
 10786  00FB  07C4               	addwf	(_Load^(0+256)+5),f
 10787                           
 10788                           ;OverLoad_B1.c: 105: Load.ADL /= 3;
 10789  00FC  3003               	movlw	3
 10790  00FD  0020               	movlb	0	; select bank0
 10791  00FE  00A0               	movwf	___lwdiv@divisor
 10792  00FF  3000               	movlw	0
 10793  0100  00A1               	movwf	___lwdiv@divisor+1
 10794  0101  0022               	movlb	2	; select bank2
 10795  0102  0847               	movf	((_Load+1)^(0+256)+7),w
 10796  0103  0020               	movlb	0	; select bank0
 10797  0104  01A3               	clrf	___lwdiv@dividend+1
 10798  0105  07A3               	addwf	___lwdiv@dividend+1,f
 10799  0106  0022               	movlb	2	; select bank2
 10800  0107  0846               	movf	(_Load^(0+256)+7),w
 10801  0108  0020               	movlb	0	; select bank0
 10802  0109  01A2               	clrf	___lwdiv@dividend
 10803  010A  07A2               	addwf	___lwdiv@dividend,f
 10804  010B  3190  2055  3180   	fcall	___lwdiv
 10805  010E  0020               	movlb	0	; select bank0
 10806  010F  0821               	movf	?___lwdiv+1,w
 10807  0110  0022               	movlb	2	; select bank2
 10808  0111  01C7               	clrf	((_Load+1)^(0+256)+7)
 10809  0112  07C7               	addwf	((_Load+1)^(0+256)+7),f
 10810  0113  0020               	movlb	0	; select bank0
 10811  0114  0820               	movf	?___lwdiv,w
 10812  0115  0022               	movlb	2	; select bank2
 10813  0116  01C6               	clrf	(_Load^(0+256)+7)
 10814  0117  07C6               	addwf	(_Load^(0+256)+7),f
 10815                           
 10816                           ;OverLoad_B1.c: 106: setLoad_AH_AL_Restore();
 10817  0118  319C  24BE  3180   	fcall	_setLoad_AH_AL_Restore
 10818                           
 10819                           ;OverLoad_B1.c: 108: if (Load.ADH >= Load.ADL) {
 10820  011B  0022               	movlb	2	; select bank2
 10821  011C  0847               	movf	((_Load+1)^(0+256)+7),w
 10822  011D  0245               	subwf	((_Load+1)^(0+256)+5),w
 10823  011E  1D03               	skipz
 10824  011F  2922               	goto	u9665
 10825  0120  0846               	movf	(_Load^(0+256)+7),w
 10826  0121  0244               	subwf	(_Load^(0+256)+5),w
 10827  0122                     u9665:	
 10828  0122  1C03               	skipc
 10829  0123  0008               	return
 10830                           
 10831                           ;OverLoad_B1.c: 109: Load.AD = Load.ADH - Load.ADL;
 10832  0124  3005               	movlw	5
 10833  0125  3E3F               	addlw	_Load& (0+255)
 10834  0126  0086               	movwf	6
 10835  0127  3001               	movlw	1	; select bank2/3
 10836  0128  0087               	movwf	7
 10837  0129  0946               	comf	(_Load^(0+256)+7),w
 10838  012A  0020               	movlb	0	; select bank0
 10839  012B  00A8               	movwf	??_Load_Main
 10840  012C  0022               	movlb	2	; select bank2
 10841  012D  0947               	comf	((_Load+1)^(0+256)+7),w
 10842  012E  0020               	movlb	0	; select bank0
 10843  012F  00A9               	movwf	??_Load_Main+1
 10844  0130  0AA8               	incf	??_Load_Main,f
 10845  0131  1903               	skipnz
 10846  0132  0AA9               	incf	??_Load_Main+1,f
 10847  0133  3F40               	moviw [0]fsr1
 10848  0134  0728               	addwf	??_Load_Main,w
 10849  0135  0022               	movlb	2	; select bank2
 10850  0136  00DE               	movwf	(_Load^(0+256)+31)
 10851  0137  3F41               	moviw [1]fsr1
 10852  0138  0020               	movlb	0	; select bank0
 10853  0139  3D29               	addwfc	??_Load_Main+1,w
 10854  013A  0022               	movlb	2	; select bank2
 10855  013B  00DF               	movwf	(_Load^(0+256)+32)
 10856                           
 10857                           ;OverLoad_B1.c: 110: Load.ADH = 0;
 10858  013C  01C4               	clrf	(_Load^(0+256)+5)
 10859  013D  01C5               	clrf	((_Load+1)^(0+256)+5)
 10860                           
 10861                           ;OverLoad_B1.c: 111: Load.ADL = 0;
 10862  013E  01C6               	clrf	(_Load^(0+256)+7)
 10863  013F  01C7               	clrf	((_Load+1)^(0+256)+7)
 10864                           
 10865                           ;OverLoad_B1.c: 113: if (Load.Run == 1) {
 10866  0140  1DBF               	btfss	_Load^(0+256),3
 10867  0141  299B               	goto	l8848
 10868                           
 10869                           ;OverLoad_B1.c: 114: if (Load.Count < 2) {
 10870  0142  3002               	movlw	2
 10871  0143  0264               	subwf	(_Load^(0+256)+37),w
 10872  0144  1803               	skipnc
 10873  0145  299B               	goto	l8848
 10874                           
 10875                           ;OverLoad_B1.c: 115: Load.Count++;
 10876  0146  3001               	movlw	1
 10877  0147  0020               	movlb	0	; select bank0
 10878  0148  00A8               	movwf	??_Load_Main
 10879  0149  0828               	movf	??_Load_Main,w
 10880  014A  0022               	movlb	2	; select bank2
 10881  014B  07E4               	addwf	(_Load^(0+256)+37),f
 10882                           
 10883                           ;OverLoad_B1.c: 117: Load_RunStatus = getDimmer_Load_Status();
 10884  014C  3199  211F  3180   	fcall	_getDimmer_Load_Status
 10885  014F  0020               	movlb	0	; select bank0
 10886  0150  00A8               	movwf	??_Load_Main
 10887  0151  0828               	movf	??_Load_Main,w
 10888  0152  00AE               	movwf	Load_Main@Load_RunStatus
 10889                           
 10890                           ;OverLoad_B1.c: 122: LightsCount = getMain_Lights_Count();
 10891  0153  319A  2288  3180   	fcall	_getMain_Lights_Count
 10892  0156  0020               	movlb	0	; select bank0
 10893  0157  00A8               	movwf	??_Load_Main
 10894  0158  0828               	movf	??_Load_Main,w
 10895  0159  00AF               	movwf	Load_Main@LightsCount
 10896                           
 10897                           ;OverLoad_B1.c: 124: if (Load.Count == 1) {
 10898  015A  0022               	movlb	2	; select bank2
 10899  015B  0864               	movf	(_Load^(0+256)+37),w
 10900  015C  3A01               	xorlw	1
 10901  015D  1D03               	skipz
 10902  015E  2963               	goto	l8834
 10903                           
 10904                           ;OverLoad_B1.c: 126: Load.JudgeValue = (20*85);
 10905  015F  30A4               	movlw	164
 10906  0160  00E2               	movwf	(_Load^(0+256)+35)
 10907  0161  3006               	movlw	6
 10908  0162  2970               	goto	L7
 10909  0163                     l8834:	
 10910                           ;OverLoad_B1.c: 127: } else if (Load.Count == 2) {
 10911                           
 10912  0163  0864               	movf	(_Load^(0+256)+37),w
 10913  0164  3A02               	xorlw	2
 10914  0165  1D03               	skipz
 10915  0166  299B               	goto	l8848
 10916                           
 10917                           ;OverLoad_B1.c: 128: if (LightsCount == 1) {
 10918  0167  0020               	movlb	0	; select bank0
 10919  0168  082F               	movf	Load_Main@LightsCount,w
 10920  0169  3A01               	xorlw	1
 10921  016A  1D03               	skipz
 10922  016B  2972               	goto	l8840
 10923                           
 10924                           ;OverLoad_B1.c: 129: Load.JudgeValue = (int)(1.1*85);
 10925  016C  305D               	movlw	93
 10926  016D  0022               	movlb	2	; select bank2
 10927  016E  00E2               	movwf	(_Load^(0+256)+35)
 10928  016F  3000               	movlw	0
 10929  0170                     L7:	
 10930  0170  00E3               	movwf	(_Load^(0+256)+36)
 10931                           
 10932                           ;OverLoad_B1.c: 130: } else {
 10933  0171  299B               	goto	l8848
 10934  0172                     l8840:	
 10935                           
 10936                           ;OverLoad_B1.c: 131: if (Load_RunStatus == 0) {
 10937  0172  0020               	movlb	0	; select bank0
 10938  0173  08AE               	movf	Load_Main@Load_RunStatus,f
 10939  0174  1D03               	skipz
 10940  0175  298F               	goto	l8844
 10941                           
 10942                           ;OverLoad_B1.c: 132: Load.JudgeValue = (int)(1.1*85) * LightsCount;
 10943  0176  082F               	movf	Load_Main@LightsCount,w
 10944  0177  00A8               	movwf	??_Load_Main
 10945  0178  01A9               	clrf	??_Load_Main+1
 10946  0179  0828               	movf	??_Load_Main,w
 10947  017A  00A0               	movwf	___wmul@multiplier
 10948  017B  0829               	movf	??_Load_Main+1,w
 10949  017C  00A1               	movwf	___wmul@multiplier+1
 10950  017D  305D               	movlw	93
 10951  017E  00A2               	movwf	___wmul@multiplicand
 10952  017F  3000               	movlw	0
 10953  0180  00A3               	movwf	___wmul@multiplicand+1
 10954  0181  319D  2514  3180   	fcall	___wmul
 10955  0184  0020               	movlb	0	; select bank0
 10956  0185  0821               	movf	?___wmul+1,w
 10957  0186  0022               	movlb	2	; select bank2
 10958  0187  01E3               	clrf	((_Load+1)^(0+256)+35)
 10959  0188  07E3               	addwf	((_Load+1)^(0+256)+35),f
 10960  0189  0020               	movlb	0	; select bank0
 10961  018A  0820               	movf	?___wmul,w
 10962  018B  0022               	movlb	2	; select bank2
 10963  018C  01E2               	clrf	(_Load^(0+256)+35)
 10964  018D  07E2               	addwf	(_Load^(0+256)+35),f
 10965                           
 10966                           ;OverLoad_B1.c: 133: } else if (Load_RunStatus == 1) {
 10967  018E  299B               	goto	l8848
 10968  018F                     l8844:	
 10969  018F  0020               	movlb	0	; select bank0
 10970  0190  082E               	movf	Load_Main@Load_RunStatus,w
 10971  0191  3A01               	xorlw	1
 10972  0192  1D03               	skipz
 10973  0193  299B               	goto	l8848
 10974                           
 10975                           ;OverLoad_B1.c: 134: Load.JudgeValue = (int)(1.1*85) + Load.TotalLoad;
 10976  0194  0022               	movlb	2	; select bank2
 10977  0195  0848               	movf	(_Load^(0+256)+9),w
 10978  0196  3E5D               	addlw	93
 10979  0197  00E2               	movwf	(_Load^(0+256)+35)
 10980  0198  3000               	movlw	0
 10981  0199  3D49               	addwfc	((_Load+1)^(0+256)+9),w
 10982  019A  00E3               	movwf	((_Load+1)^(0+256)+35)
 10983  019B                     l8848:	
 10984                           
 10985                           ;OverLoad_B1.c: 135: }
 10986                           ;OverLoad_B1.c: 136: }
 10987                           ;OverLoad_B1.c: 137: }
 10988                           ;OverLoad_B1.c: 138: }
 10989                           ;OverLoad_B1.c: 139: }
 10990                           ;OverLoad_B1.c: 141: if (Load.AD >= Load.JudgeValue) {
 10991  019B  0022               	movlb	2	; select bank2
 10992  019C  0863               	movf	((_Load+1)^(0+256)+35),w
 10993  019D  025F               	subwf	((_Load+1)^(0+256)+31),w
 10994  019E  1D03               	skipz
 10995  019F  29A2               	goto	u9745
 10996  01A0  0862               	movf	(_Load^(0+256)+35),w
 10997  01A1  025E               	subwf	(_Load^(0+256)+31),w
 10998  01A2                     u9745:	
 10999  01A2  1C03               	skipc
 11000  01A3  29C1               	goto	l8864
 11001                           
 11002                           ;OverLoad_B1.c: 142: ErrorCountValue = LightsCount == 1 ? 2 : 3;
 11003  01A4  0020               	movlb	0	; select bank0
 11004  01A5  082F               	movf	Load_Main@LightsCount,w
 11005  01A6  3A01               	xorlw	1
 11006  01A7  1903               	skipnz
 11007  01A8  29AB               	goto	l8854
 11008  01A9  3003               	movlw	3
 11009  01AA  29AC               	goto	L8
 11010  01AB                     l8854:	
 11011  01AB  3002               	movlw	2
 11012  01AC                     L8:	
 11013  01AC  00AA               	movwf	_Load_Main$3687
 11014  01AD  3000               	movlw	0
 11015  01AE  00AB               	movwf	_Load_Main$3687+1
 11016  01AF  082A               	movf	_Load_Main$3687,w
 11017  01B0  00A8               	movwf	??_Load_Main
 11018  01B1  0828               	movf	??_Load_Main,w
 11019  01B2  00AD               	movwf	Load_Main@ErrorCountValue
 11020                           
 11021                           ;OverLoad_B1.c: 143: Load.ErrorCount++;
 11022  01B3  3001               	movlw	1
 11023  01B4  00A8               	movwf	??_Load_Main
 11024  01B5  0828               	movf	??_Load_Main,w
 11025  01B6  0022               	movlb	2	; select bank2
 11026  01B7  07E5               	addwf	(_Load^(0+256)+38),f
 11027                           
 11028                           ;OverLoad_B1.c: 144: if (Load.ErrorCount > ErrorCountValue) {
 11029  01B8  0865               	movf	(_Load^(0+256)+38),w
 11030  01B9  0020               	movlb	0	; select bank0
 11031  01BA  022D               	subwf	Load_Main@ErrorCountValue,w
 11032  01BB  1803               	skipnc
 11033  01BC  0008               	return
 11034                           
 11035                           ;OverLoad_B1.c: 145: Load.ErrorCount = 0;
 11036  01BD  0022               	movlb	2	; select bank2
 11037  01BE  01E5               	clrf	(_Load^(0+256)+38)
 11038                           
 11039                           ;OverLoad_B1.c: 146: Load.ERROR = 1;
 11040  01BF  16BF               	bsf	_Load^(0+256),5
 11041                           
 11042                           ;OverLoad_B1.c: 168: }
 11043                           ;OverLoad_B1.c: 169: } else {
 11044  01C0  0008               	return
 11045  01C1                     l8864:	
 11046                           
 11047                           ;OverLoad_B1.c: 170: Load.ErrorCount = 0;
 11048  01C1  01E5               	clrf	(_Load^(0+256)+38)
 11049                           
 11050                           ;OverLoad_B1.c: 171: if (Load.Run == 1) {
 11051  01C2  1DBF               	btfss	_Load^(0+256),3
 11052  01C3  0008               	return
 11053                           
 11054                           ;OverLoad_B1.c: 172: Load.SafeCount++;
 11055  01C4  3001               	movlw	1
 11056  01C5  0020               	movlb	0	; select bank0
 11057  01C6  00A8               	movwf	??_Load_Main
 11058  01C7  0828               	movf	??_Load_Main,w
 11059  01C8  0022               	movlb	2	; select bank2
 11060  01C9  07E6               	addwf	(_Load^(0+256)+39),f
 11061                           
 11062                           ;OverLoad_B1.c: 173: if (Load.SafeCount >= 3) {
 11063  01CA  3003               	movlw	3
 11064  01CB  0266               	subwf	(_Load^(0+256)+39),w
 11065  01CC  1C03               	skipc
 11066  01CD  0008               	return
 11067                           
 11068                           ;OverLoad_B1.c: 174: Load.SafeCount = 0;
 11069  01CE  01E6               	clrf	(_Load^(0+256)+39)
 11070                           
 11071                           ;OverLoad_B1.c: 175: Load.OK = 1;
 11072  01CF  17BF               	bsf	_Load^(0+256),7
 11073                           
 11074                           ;OverLoad_B1.c: 176: Load.Run = 0;
 11075  01D0  11BF               	bcf	_Load^(0+256),3
 11076                           
 11077                           ;OverLoad_B1.c: 177: Load.Count = 0;
 11078  01D1  01E4               	clrf	(_Load^(0+256)+37)
 11079                           
 11080                           ;OverLoad_B1.c: 178: Load.TotalLoad = Load.AD;
 11081  01D2  085F               	movf	((_Load+1)^(0+256)+31),w
 11082  01D3  01C9               	clrf	((_Load+1)^(0+256)+9)
 11083  01D4  07C9               	addwf	((_Load+1)^(0+256)+9),f
 11084  01D5  085E               	movf	(_Load^(0+256)+31),w
 11085  01D6  01C8               	clrf	(_Load^(0+256)+9)
 11086  01D7  07C8               	addwf	(_Load^(0+256)+9),f
 11087                           
 11088                           ;OverLoad_B1.c: 182: }
 11089                           ;OverLoad_B1.c: 183: }
 11090                           ;OverLoad_B1.c: 206: }
 11091                           ;OverLoad_B1.c: 207: }
 11092                           ;OverLoad_B1.c: 208: }
 11093                           ;OverLoad_B1.c: 209: } else {
 11094  01D8  0008               	return
 11095  01D9                     l1617:	
 11096                           
 11097                           ;OverLoad_B1.c: 210: Load.ADtoGO = 1;
 11098  01D9  163F               	bsf	_Load^(0+256),4
 11099                           
 11100                           ;OverLoad_B1.c: 211: }
 11101                           ;OverLoad_B1.c: 212: } else {
 11102  01DA  0008               	return
 11103  01DB                     l1616:	
 11104                           
 11105                           ;OverLoad_B1.c: 214: if (Load.LightsON == 1) {
 11106  01DB  1D3F               	btfss	_Load^(0+256),2
 11107  01DC  29EE               	goto	l8900
 11108                           
 11109                           ;OverLoad_B1.c: 215: Load.LightsON = 0;
 11110  01DD  113F               	bcf	_Load^(0+256),2
 11111                           
 11112                           ;OverLoad_B1.c: 217: Load.ADtoGO = 0;
 11113  01DE  123F               	bcf	_Load^(0+256),4
 11114                           
 11115                           ;OverLoad_B1.c: 218: Load.Time = 0;
 11116  01DF  01C0               	clrf	(_Load^(0+256)+1)
 11117  01E0  01C1               	clrf	((_Load+1)^(0+256)+1)
 11118                           
 11119                           ;OverLoad_B1.c: 219: setLoad_AH_AL_Restore();
 11120  01E1  319C  24BE  3180   	fcall	_setLoad_AH_AL_Restore
 11121                           
 11122                           ;OverLoad_B1.c: 221: Load.ErrorCount = 0;
 11123  01E4  0022               	movlb	2	; select bank2
 11124  01E5  01E5               	clrf	(_Load^(0+256)+38)
 11125                           
 11126                           ;OverLoad_B1.c: 222: Load.SafeCount = 0;
 11127  01E6  01E6               	clrf	(_Load^(0+256)+39)
 11128                           
 11129                           ;OverLoad_B1.c: 224: Load.ADH = 0;
 11130  01E7  01C4               	clrf	(_Load^(0+256)+5)
 11131  01E8  01C5               	clrf	((_Load+1)^(0+256)+5)
 11132                           
 11133                           ;OverLoad_B1.c: 225: Load.ADL = 0;
 11134  01E9  01C6               	clrf	(_Load^(0+256)+7)
 11135  01EA  01C7               	clrf	((_Load+1)^(0+256)+7)
 11136                           
 11137                           ;OverLoad_B1.c: 231: Load.Run = 0;
 11138  01EB  11BF               	bcf	_Load^(0+256),3
 11139                           
 11140                           ;OverLoad_B1.c: 232: Load.Count = 0;
 11141  01EC  01E4               	clrf	(_Load^(0+256)+37)
 11142                           
 11143                           ;OverLoad_B1.c: 233: Load.OK = 0;
 11144  01ED  13BF               	bcf	_Load^(0+256),7
 11145  01EE                     l8900:	
 11146                           
 11147                           ;OverLoad_B1.c: 255: }
 11148                           ;OverLoad_B1.c: 256: if (Load.ERROR == 1) {
 11149  01EE  1EBF               	btfss	_Load^(0+256),5
 11150  01EF  0008               	return
 11151                           
 11152                           ;OverLoad_B1.c: 257: Load.ErrorTime++;
 11153  01F0  3001               	movlw	1
 11154  01F1  07C2               	addwf	(_Load^(0+256)+3),f
 11155  01F2  3000               	movlw	0
 11156  01F3  3DC3               	addwfc	((_Load+1)^(0+256)+3),f
 11157                           
 11158                           ;OverLoad_B1.c: 258: if (Load.ErrorTime >= (10000 / 20)) {
 11159  01F4  3001               	movlw	1
 11160  01F5  0243               	subwf	((_Load+1)^(0+256)+3),w
 11161  01F6  30F4               	movlw	244
 11162  01F7  1903               	skipnz
 11163  01F8  0242               	subwf	(_Load^(0+256)+3),w
 11164  01F9  1C03               	skipc
 11165  01FA  0008               	return
 11166                           
 11167                           ;OverLoad_B1.c: 259: Load.ErrorTime = 0;
 11168  01FB  01C2               	clrf	(_Load^(0+256)+3)
 11169  01FC  01C3               	clrf	((_Load+1)^(0+256)+3)
 11170                           
 11171                           ;OverLoad_B1.c: 260: Load.ERROR = 0;
 11172  01FD  12BF               	bcf	_Load^(0+256),5
 11173                           
 11174                           ;OverLoad_B1.c: 261: }
 11175                           ;OverLoad_B1.c: 262: }
 11176                           ;OverLoad_B1.c: 263: }
 11177                           ;OverLoad_B1.c: 264: } else {
 11178  01FE  0008               	return
 11179  01FF                     l1606:	
 11180                           
 11181                           ;OverLoad_B1.c: 265: if (myMain.PowerON == 1) {
 11182  01FF  0021               	movlb	1	; select bank1
 11183  0200  1C2E               	btfss	_myMain^(0+128),0
 11184  0201  0008               	return
 11185                           
 11186                           ;OverLoad_B1.c: 266: Load.Enable = 1;
 11187  0202  0022               	movlb	2	; select bank2
 11188  0203  143F               	bsf	_Load^(0+256),0
 11189  0204  0008               	return
 11190  0205                     __end_of_Load_Main:	
 11191                           
 11192                           	psect	text63
 11193  1A88                     __ptext63:	
 11194 ;; *************** function _getMain_Lights_Count *****************
 11195 ;; Defined at:
 11196 ;;		line 459 in file "../src/main_B1.c"
 11197 ;; Parameters:    Size  Location     Type
 11198 ;;		None
 11199 ;; Auto vars:     Size  Location     Type
 11200 ;;  status2         1    2[BANK0 ] unsigned char 
 11201 ;;  status1         1    1[BANK0 ] unsigned char 
 11202 ;;  count           1    0[BANK0 ] unsigned char 
 11203 ;; Return value:  Size  Location     Type
 11204 ;;                  1    wreg      unsigned char 
 11205 ;; Registers used:
 11206 ;;		wreg, status,2, status,0
 11207 ;; Tracked objects:
 11208 ;;		On entry : 0/0
 11209 ;;		On exit  : 0/0
 11210 ;;		Unchanged: 0/0
 11211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11213 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11215 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11216 ;;Total ram usage:        3 bytes
 11217 ;; Hardware stack levels used:    1
 11218 ;; Hardware stack levels required when called:    5
 11219 ;; This function calls:
 11220 ;;		Nothing
 11221 ;; This function is called by:
 11222 ;;		_Load_Main
 11223 ;; This function uses a non-reentrant model
 11224 ;;
 11225                           
 11226                           
 11227                           ;psect for function _getMain_Lights_Count
 11228  1A88                     _getMain_Lights_Count:	
 11229                           
 11230                           ;main_B1.c: 460: char count = 0;
 11231                           
 11232                           ;incstack = 0
 11233                           ; Regs used in _getMain_Lights_Count: [wreg+status,2+status,0]
 11234  1A88  0020               	movlb	0	; select bank0
 11235  1A89  01A0               	clrf	getMain_Lights_Count@count
 11236                           
 11237                           ;main_B1.c: 464: char status1 = DimmerIntr1.ControlStatus == 1 ? 1 : 0;
 11238  1A8A  3000               	movlw	0
 11239  1A8B  0021               	movlb	1	; select bank1
 11240  1A8C  19BB               	btfsc	_DimmerIntr1^(0+128),3
 11241  1A8D  3001               	movlw	1
 11242  1A8E  0020               	movlb	0	; select bank0
 11243  1A8F  00A1               	movwf	getMain_Lights_Count@status1
 11244                           
 11245                           ;main_B1.c: 467: char status2 = DimmerIntr2.ControlStatus == 1 ? 1 : 0;
 11246  1A90  3000               	movlw	0
 11247  1A91  0021               	movlb	1	; select bank1
 11248  1A92  19C7               	btfsc	_DimmerIntr2^(0+128),3
 11249  1A93  3001               	movlw	1
 11250  1A94  0020               	movlb	0	; select bank0
 11251  1A95  00A2               	movwf	getMain_Lights_Count@status2
 11252                           
 11253                           ;main_B1.c: 490: return count = (status1 + status2);
 11254  1A96  0821               	movf	getMain_Lights_Count@status1,w
 11255  1A97  0722               	addwf	getMain_Lights_Count@status2,w
 11256  1A98  00A0               	movwf	getMain_Lights_Count@count
 11257  1A99  0008               	return
 11258  1A9A                     __end_of_getMain_Lights_Count:	
 11259                           
 11260                           	psect	text64
 11261  191F                     __ptext64:	
 11262 ;; *************** function _getDimmer_Load_Status *****************
 11263 ;; Defined at:
 11264 ;;		line 1151 in file "../src/Dimmer_B1.c"
 11265 ;; Parameters:    Size  Location     Type
 11266 ;;		None
 11267 ;; Auto vars:     Size  Location     Type
 11268 ;;  status          1    0[BANK0 ] unsigned char 
 11269 ;; Return value:  Size  Location     Type
 11270 ;;                  1    wreg      unsigned char 
 11271 ;; Registers used:
 11272 ;;		wreg, status,2
 11273 ;; Tracked objects:
 11274 ;;		On entry : 0/0
 11275 ;;		On exit  : 0/0
 11276 ;;		Unchanged: 0/0
 11277 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11279 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11280 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11281 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11282 ;;Total ram usage:        1 bytes
 11283 ;; Hardware stack levels used:    1
 11284 ;; Hardware stack levels required when called:    5
 11285 ;; This function calls:
 11286 ;;		Nothing
 11287 ;; This function is called by:
 11288 ;;		_Load_Main
 11289 ;; This function uses a non-reentrant model
 11290 ;;
 11291                           
 11292                           
 11293                           ;psect for function _getDimmer_Load_Status
 11294  191F                     _getDimmer_Load_Status:	
 11295                           
 11296                           ;Dimmer_B1.c: 1152: char status = Dimmer.Load_Status == 1 ? 1 : 0;
 11297                           
 11298                           ;incstack = 0
 11299                           ; Regs used in _getDimmer_Load_Status: [wreg+status,2]
 11300  191F  3000               	movlw	0
 11301  1920  0022               	movlb	2	; select bank2
 11302  1921  192C               	btfsc	_Dimmer^(0+256),2
 11303  1922  3001               	movlw	1
 11304  1923  0020               	movlb	0	; select bank0
 11305  1924  00A0               	movwf	getDimmer_Load_Status@status
 11306                           
 11307                           ;Dimmer_B1.c: 1153: return status;
 11308  1925  0820               	movf	getDimmer_Load_Status@status,w
 11309  1926  0008               	return
 11310  1927                     __end_of_getDimmer_Load_Status:	
 11311                           
 11312                           	psect	text65
 11313  1917                     __ptext65:	
 11314 ;; *************** function _getDimmer_LoadGO *****************
 11315 ;; Defined at:
 11316 ;;		line 1145 in file "../src/Dimmer_B1.c"
 11317 ;; Parameters:    Size  Location     Type
 11318 ;;		None
 11319 ;; Auto vars:     Size  Location     Type
 11320 ;;  loadgo          1    0[BANK0 ] unsigned char 
 11321 ;; Return value:  Size  Location     Type
 11322 ;;                  1    wreg      unsigned char 
 11323 ;; Registers used:
 11324 ;;		wreg, status,2
 11325 ;; Tracked objects:
 11326 ;;		On entry : 0/0
 11327 ;;		On exit  : 0/0
 11328 ;;		Unchanged: 0/0
 11329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11330 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11331 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11332 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11333 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11334 ;;Total ram usage:        1 bytes
 11335 ;; Hardware stack levels used:    1
 11336 ;; Hardware stack levels required when called:    5
 11337 ;; This function calls:
 11338 ;;		Nothing
 11339 ;; This function is called by:
 11340 ;;		_Load_Main
 11341 ;; This function uses a non-reentrant model
 11342 ;;
 11343                           
 11344                           
 11345                           ;psect for function _getDimmer_LoadGO
 11346  1917                     _getDimmer_LoadGO:	
 11347                           
 11348                           ;Dimmer_B1.c: 1146: char loadgo = Dimmer.LoadGO == 1 ? 1 : 0;
 11349                           
 11350                           ;incstack = 0
 11351                           ; Regs used in _getDimmer_LoadGO: [wreg+status,2]
 11352  1917  3000               	movlw	0
 11353  1918  0022               	movlb	2	; select bank2
 11354  1919  18AC               	btfsc	_Dimmer^(0+256),1
 11355  191A  3001               	movlw	1
 11356  191B  0020               	movlb	0	; select bank0
 11357  191C  00A0               	movwf	getDimmer_LoadGO@loadgo
 11358                           
 11359                           ;Dimmer_B1.c: 1147: return loadgo;
 11360  191D  0820               	movf	getDimmer_LoadGO@loadgo,w
 11361  191E  0008               	return
 11362  191F                     __end_of_getDimmer_LoadGO:	
 11363                           
 11364                           	psect	text66
 11365  1000                     __ptext66:	
 11366 ;; *************** function _getAll_DimmerIntr_Dimming_Sw_RF *****************
 11367 ;; Defined at:
 11368 ;;		line 280 in file "../src/Dimmer_B1.c"
 11369 ;; Parameters:    Size  Location     Type
 11370 ;;		None
 11371 ;; Auto vars:     Size  Location     Type
 11372 ;;  status          1    3[BANK0 ] unsigned char 
 11373 ;; Return value:  Size  Location     Type
 11374 ;;                  1    wreg      unsigned char 
 11375 ;; Registers used:
 11376 ;;		wreg, status,2, status,0
 11377 ;; Tracked objects:
 11378 ;;		On entry : 0/0
 11379 ;;		On exit  : 0/0
 11380 ;;		Unchanged: 0/0
 11381 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11382 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11383 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11384 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11385 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11386 ;;Total ram usage:        4 bytes
 11387 ;; Hardware stack levels used:    1
 11388 ;; Hardware stack levels required when called:    5
 11389 ;; This function calls:
 11390 ;;		Nothing
 11391 ;; This function is called by:
 11392 ;;		_Load_Main
 11393 ;; This function uses a non-reentrant model
 11394 ;;
 11395                           
 11396                           
 11397                           ;psect for function _getAll_DimmerIntr_Dimming_Sw_RF
 11398  1000                     _getAll_DimmerIntr_Dimming_Sw_RF:	
 11399                           
 11400                           ;Dimmer_B1.c: 281: char status = 0;
 11401                           
 11402                           ;incstack = 0
 11403                           ; Regs used in _getAll_DimmerIntr_Dimming_Sw_RF: [wreg+status,2+status,0]
 11404  1000  0020               	movlb	0	; select bank0
 11405  1001  01A3               	clrf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11406                           
 11407                           ;Dimmer_B1.c: 288: status = (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr2.Dimming_Sw == 1)
      +                           ? 1 : 0;
 11408  1002  01A1               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2293
 11409  1003  0AA1               	incf	_getAll_DimmerIntr_Dimming_Sw_RF$2293,f
 11410  1004  0021               	movlb	1	; select bank1
 11411  1005  1E3B               	btfss	_DimmerIntr1^(0+128),4
 11412  1006  1A47               	btfsc	_DimmerIntr2^(0+128),4
 11413  1007  280A               	goto	l7874
 11414  1008  0020               	movlb	0	; select bank0
 11415  1009  01A1               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2293
 11416  100A                     l7874:	
 11417  100A  0020               	movlb	0	; select bank0
 11418  100B  0821               	movf	_getAll_DimmerIntr_Dimming_Sw_RF$2293,w
 11419  100C  00A0               	movwf	??_getAll_DimmerIntr_Dimming_Sw_RF
 11420  100D  0820               	movf	??_getAll_DimmerIntr_Dimming_Sw_RF,w
 11421  100E  00A3               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11422                           
 11423                           ;Dimmer_B1.c: 296: if (status == 0) {
 11424  100F  08A3               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,f
 11425  1010  1D03               	skipz
 11426  1011  281F               	goto	l7886
 11427                           
 11428                           ;Dimmer_B1.c: 302: status = (DimmerIntr1.Dimming_RF == 1 || DimmerIntr2.Dimming_RF == 1)
      +                           ? 1 : 0;
 11429  1012  01A2               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2294
 11430  1013  0AA2               	incf	_getAll_DimmerIntr_Dimming_Sw_RF$2294,f
 11431  1014  0021               	movlb	1	; select bank1
 11432  1015  1F3B               	btfss	_DimmerIntr1^(0+128),6
 11433  1016  1B47               	btfsc	_DimmerIntr2^(0+128),6
 11434  1017  281A               	goto	l7884
 11435  1018  0020               	movlb	0	; select bank0
 11436  1019  01A2               	clrf	_getAll_DimmerIntr_Dimming_Sw_RF$2294
 11437  101A                     l7884:	
 11438  101A  0020               	movlb	0	; select bank0
 11439  101B  0822               	movf	_getAll_DimmerIntr_Dimming_Sw_RF$2294,w
 11440  101C  00A0               	movwf	??_getAll_DimmerIntr_Dimming_Sw_RF
 11441  101D  0820               	movf	??_getAll_DimmerIntr_Dimming_Sw_RF,w
 11442  101E  00A3               	movwf	getAll_DimmerIntr_Dimming_Sw_RF@status
 11443  101F                     l7886:	
 11444                           
 11445                           ;Dimmer_B1.c: 308: }
 11446                           ;Dimmer_B1.c: 310: return status;
 11447  101F  0823               	movf	getAll_DimmerIntr_Dimming_Sw_RF@status,w
 11448  1020  0008               	return
 11449  1021                     __end_of_getAll_DimmerIntr_Dimming_Sw_RF:	
 11450                           
 11451                           	psect	text67
 11452  1D14                     __ptext67:	
 11453 ;; *************** function ___wmul *****************
 11454 ;; Defined at:
 11455 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul16.c"
 11456 ;; Parameters:    Size  Location     Type
 11457 ;;  multiplier      2    0[BANK0 ] unsigned int 
 11458 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 11459 ;; Auto vars:     Size  Location     Type
 11460 ;;  product         2    4[BANK0 ] unsigned int 
 11461 ;; Return value:  Size  Location     Type
 11462 ;;                  2    0[BANK0 ] unsigned int 
 11463 ;; Registers used:
 11464 ;;		wreg, status,2, status,0
 11465 ;; Tracked objects:
 11466 ;;		On entry : 0/0
 11467 ;;		On exit  : 0/0
 11468 ;;		Unchanged: 0/0
 11469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11470 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11471 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11472 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11473 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11474 ;;Total ram usage:        6 bytes
 11475 ;; Hardware stack levels used:    1
 11476 ;; Hardware stack levels required when called:    5
 11477 ;; This function calls:
 11478 ;;		Nothing
 11479 ;; This function is called by:
 11480 ;;		_Load_Main
 11481 ;; This function uses a non-reentrant model
 11482 ;;
 11483                           
 11484                           
 11485                           ;psect for function ___wmul
 11486  1D14                     ___wmul:	
 11487                           
 11488                           ;incstack = 0
 11489                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 11490  1D14  0020               	movlb	0	; select bank0
 11491  1D15  01A4               	clrf	___wmul@product
 11492  1D16  01A5               	clrf	___wmul@product+1
 11493  1D17                     l8550:	
 11494  1D17  1C20               	btfss	___wmul@multiplier,0
 11495  1D18  2D1D               	goto	l3019
 11496  1D19  0822               	movf	___wmul@multiplicand,w
 11497  1D1A  07A4               	addwf	___wmul@product,f
 11498  1D1B  0823               	movf	___wmul@multiplicand+1,w
 11499  1D1C  3DA5               	addwfc	___wmul@product+1,f
 11500  1D1D                     l3019:	
 11501  1D1D  3001               	movlw	1
 11502  1D1E                     u9145:	
 11503  1D1E  35A2               	lslf	___wmul@multiplicand,f
 11504  1D1F  0DA3               	rlf	___wmul@multiplicand+1,f
 11505  1D20  0B89               	decfsz	9,f
 11506  1D21  2D1E               	goto	u9145
 11507  1D22  3001               	movlw	1
 11508  1D23                     u9155:	
 11509  1D23  36A1               	lsrf	___wmul@multiplier+1,f
 11510  1D24  0CA0               	rrf	___wmul@multiplier,f
 11511  1D25  0B89               	decfsz	9,f
 11512  1D26  2D23               	goto	u9155
 11513  1D27  0821               	movf	___wmul@multiplier+1,w
 11514  1D28  0420               	iorwf	___wmul@multiplier,w
 11515  1D29  1D03               	skipz
 11516  1D2A  2D17               	goto	l8550
 11517  1D2B  0825               	movf	___wmul@product+1,w
 11518  1D2C  01A1               	clrf	?___wmul+1
 11519  1D2D  07A1               	addwf	?___wmul+1,f
 11520  1D2E  0824               	movf	___wmul@product,w
 11521  1D2F  01A0               	clrf	?___wmul
 11522  1D30  07A0               	addwf	?___wmul,f
 11523  1D31  0008               	return
 11524  1D32                     __end_of___wmul:	
 11525                           
 11526                           	psect	text68
 11527  1055                     __ptext68:	
 11528 ;; *************** function ___lwdiv *****************
 11529 ;; Defined at:
 11530 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lwdiv.c"
 11531 ;; Parameters:    Size  Location     Type
 11532 ;;  divisor         2    0[BANK0 ] unsigned int 
 11533 ;;  dividend        2    2[BANK0 ] unsigned int 
 11534 ;; Auto vars:     Size  Location     Type
 11535 ;;  quotient        2    5[BANK0 ] unsigned int 
 11536 ;;  counter         1    7[BANK0 ] unsigned char 
 11537 ;; Return value:  Size  Location     Type
 11538 ;;                  2    0[BANK0 ] unsigned int 
 11539 ;; Registers used:
 11540 ;;		wreg, status,2, status,0
 11541 ;; Tracked objects:
 11542 ;;		On entry : 0/0
 11543 ;;		On exit  : 0/0
 11544 ;;		Unchanged: 0/0
 11545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11546 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11547 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11548 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11549 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11550 ;;Total ram usage:        8 bytes
 11551 ;; Hardware stack levels used:    1
 11552 ;; Hardware stack levels required when called:    5
 11553 ;; This function calls:
 11554 ;;		Nothing
 11555 ;; This function is called by:
 11556 ;;		_Load_Main
 11557 ;;		_setRF_Main
 11558 ;; This function uses a non-reentrant model
 11559 ;;
 11560                           
 11561                           
 11562                           ;psect for function ___lwdiv
 11563  1055                     ___lwdiv:	
 11564                           
 11565                           ;incstack = 0
 11566                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 11567  1055  0020               	movlb	0	; select bank0
 11568  1056  01A5               	clrf	___lwdiv@quotient
 11569  1057  01A6               	clrf	___lwdiv@quotient+1
 11570  1058  0821               	movf	___lwdiv@divisor+1,w
 11571  1059  0420               	iorwf	___lwdiv@divisor,w
 11572  105A  1903               	skipnz
 11573  105B  2885               	goto	l7810
 11574  105C  01A7               	clrf	___lwdiv@counter
 11575  105D  0AA7               	incf	___lwdiv@counter,f
 11576  105E                     l7798:	
 11577  105E  1BA1               	btfsc	___lwdiv@divisor+1,7
 11578  105F  286A               	goto	l7800
 11579  1060  3001               	movlw	1
 11580  1061                     u7685:	
 11581  1061  35A0               	lslf	___lwdiv@divisor,f
 11582  1062  0DA1               	rlf	___lwdiv@divisor+1,f
 11583  1063  0B89               	decfsz	9,f
 11584  1064  2861               	goto	u7685
 11585  1065  3001               	movlw	1
 11586  1066  00A4               	movwf	??___lwdiv
 11587  1067  0824               	movf	??___lwdiv,w
 11588  1068  07A7               	addwf	___lwdiv@counter,f
 11589  1069  285E               	goto	l7798
 11590  106A                     l7800:	
 11591  106A  3001               	movlw	1
 11592  106B                     u7705:	
 11593  106B  35A5               	lslf	___lwdiv@quotient,f
 11594  106C  0DA6               	rlf	___lwdiv@quotient+1,f
 11595  106D  0B89               	decfsz	9,f
 11596  106E  286B               	goto	u7705
 11597  106F  0821               	movf	___lwdiv@divisor+1,w
 11598  1070  0223               	subwf	___lwdiv@dividend+1,w
 11599  1071  1D03               	skipz
 11600  1072  2875               	goto	u7715
 11601  1073  0820               	movf	___lwdiv@divisor,w
 11602  1074  0222               	subwf	___lwdiv@dividend,w
 11603  1075                     u7715:	
 11604  1075  1C03               	skipc
 11605  1076  287C               	goto	l7806
 11606  1077  0820               	movf	___lwdiv@divisor,w
 11607  1078  02A2               	subwf	___lwdiv@dividend,f
 11608  1079  0821               	movf	___lwdiv@divisor+1,w
 11609  107A  3BA3               	subwfb	___lwdiv@dividend+1,f
 11610  107B  1425               	bsf	___lwdiv@quotient,0
 11611  107C                     l7806:	
 11612  107C  3001               	movlw	1
 11613  107D                     u7725:	
 11614  107D  36A1               	lsrf	___lwdiv@divisor+1,f
 11615  107E  0CA0               	rrf	___lwdiv@divisor,f
 11616  107F  0B89               	decfsz	9,f
 11617  1080  287D               	goto	u7725
 11618  1081  3001               	movlw	1
 11619  1082  02A7               	subwf	___lwdiv@counter,f
 11620  1083  1D03               	btfss	3,2
 11621  1084  286A               	goto	l7800
 11622  1085                     l7810:	
 11623  1085  0826               	movf	___lwdiv@quotient+1,w
 11624  1086  01A1               	clrf	?___lwdiv+1
 11625  1087  07A1               	addwf	?___lwdiv+1,f
 11626  1088  0825               	movf	___lwdiv@quotient,w
 11627  1089  01A0               	clrf	?___lwdiv
 11628  108A  07A0               	addwf	?___lwdiv,f
 11629  108B  0008               	return
 11630  108C                     __end_of___lwdiv:	
 11631                           
 11632                           	psect	text69
 11633  18BE                     __ptext69:	
 11634 ;; *************** function _Load_Initialization *****************
 11635 ;; Defined at:
 11636 ;;		line 9 in file "../src/OverLoad_B1.c"
 11637 ;; Parameters:    Size  Location     Type
 11638 ;;		None
 11639 ;; Auto vars:     Size  Location     Type
 11640 ;;		None
 11641 ;; Return value:  Size  Location     Type
 11642 ;;		None               void
 11643 ;; Registers used:
 11644 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11645 ;; Tracked objects:
 11646 ;;		On entry : 0/0
 11647 ;;		On exit  : 0/0
 11648 ;;		Unchanged: 0/0
 11649 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11650 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11651 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11653 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11654 ;;Total ram usage:        0 bytes
 11655 ;; Hardware stack levels used:    1
 11656 ;; Hardware stack levels required when called:    6
 11657 ;; This function calls:
 11658 ;;		_setLoad_AH_AL_Restore
 11659 ;; This function is called by:
 11660 ;;		_main
 11661 ;; This function uses a non-reentrant model
 11662 ;;
 11663                           
 11664                           
 11665                           ;psect for function _Load_Initialization
 11666  18BE                     _Load_Initialization:	
 11667                           
 11668                           ;OverLoad_B1.c: 11: setLoad_AH_AL_Restore();
 11669                           
 11670                           ;incstack = 0
 11671                           ; Regs used in _Load_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11672  18BE  319C  24BE         	fcall	_setLoad_AH_AL_Restore
 11673  18C0  0008               	return
 11674  18C1                     __end_of_Load_Initialization:	
 11675                           
 11676                           	psect	text70
 11677  1CBE                     __ptext70:	
 11678 ;; *************** function _setLoad_AH_AL_Restore *****************
 11679 ;; Defined at:
 11680 ;;		line 292 in file "../src/OverLoad_B1.c"
 11681 ;; Parameters:    Size  Location     Type
 11682 ;;		None
 11683 ;; Auto vars:     Size  Location     Type
 11684 ;;  i               1    1[BANK0 ] unsigned char 
 11685 ;; Return value:  Size  Location     Type
 11686 ;;		None               void
 11687 ;; Registers used:
 11688 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11689 ;; Tracked objects:
 11690 ;;		On entry : 0/0
 11691 ;;		On exit  : 0/0
 11692 ;;		Unchanged: 0/0
 11693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11695 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11696 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11697 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11698 ;;Total ram usage:        2 bytes
 11699 ;; Hardware stack levels used:    1
 11700 ;; Hardware stack levels required when called:    5
 11701 ;; This function calls:
 11702 ;;		Nothing
 11703 ;; This function is called by:
 11704 ;;		_Load_Initialization
 11705 ;;		_Load_Main
 11706 ;; This function uses a non-reentrant model
 11707 ;;
 11708                           
 11709                           
 11710                           ;psect for function _setLoad_AH_AL_Restore
 11711  1CBE                     _setLoad_AH_AL_Restore:	
 11712                           
 11713                           ;OverLoad_B1.c: 293: char i;
 11714                           ;OverLoad_B1.c: 294: for (i = 0; i < 5; i++) {
 11715                           
 11716                           ;incstack = 0
 11717                           ; Regs used in _setLoad_AH_AL_Restore: [wreg+fsr1l+fsr1h+status,2+status,0]
 11718  1CBE  0020               	movlb	0	; select bank0
 11719  1CBF  01A1               	clrf	setLoad_AH_AL_Restore@i
 11720  1CC0                     L9:	
 11721  1CC0  3005               	movlw	5
 11722  1CC1  0221               	subwf	setLoad_AH_AL_Restore@i,w
 11723  1CC2  1803               	btfsc	3,0
 11724  1CC3  0008               	return
 11725                           
 11726                           ;OverLoad_B1.c: 295: Load.AH[i] = 0;
 11727  1CC4  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11728  1CC5  3E4A               	addlw	(_Load+11)& (0+255)
 11729  1CC6  0086               	movwf	6
 11730  1CC7  3001               	movlw	1	; select bank2/3
 11731  1CC8  0087               	movwf	7
 11732  1CC9  3000               	movlw	0
 11733  1CCA  3FC0               	movwi [0]fsr1
 11734  1CCB  3FC1               	movwi [1]fsr1
 11735                           
 11736                           ;OverLoad_B1.c: 296: Load.AL[i] = 0xffff;
 11737  1CCC  3521               	lslf	setLoad_AH_AL_Restore@i,w
 11738  1CCD  3E54               	addlw	(_Load+21)& (0+255)
 11739  1CCE  0086               	movwf	6
 11740  1CCF  3001               	movlw	1	; select bank2/3
 11741  1CD0  0087               	movwf	7
 11742  1CD1  30FF               	movlw	255
 11743  1CD2  3FC0               	movwi [0]fsr1
 11744  1CD3  30FF               	movlw	255
 11745  1CD4  3FC1               	movwi [1]fsr1
 11746  1CD5  3001               	movlw	1
 11747  1CD6  00A0               	movwf	??_setLoad_AH_AL_Restore
 11748  1CD7  0820               	movf	??_setLoad_AH_AL_Restore,w
 11749  1CD8  07A1               	addwf	setLoad_AH_AL_Restore@i,f
 11750  1CD9  2CC0               	goto	L9
 11751  1CDA                     __end_of_setLoad_AH_AL_Restore:	
 11752                           
 11753                           	psect	text71
 11754  19B1                     __ptext71:	
 11755 ;; *************** function _LED_Main *****************
 11756 ;; Defined at:
 11757 ;;		line 47 in file "../src/LED_B1.c"
 11758 ;; Parameters:    Size  Location     Type
 11759 ;;		None
 11760 ;; Auto vars:     Size  Location     Type
 11761 ;;		None
 11762 ;; Return value:  Size  Location     Type
 11763 ;;		None               void
 11764 ;; Registers used:
 11765 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11766 ;; Tracked objects:
 11767 ;;		On entry : 0/0
 11768 ;;		On exit  : 0/0
 11769 ;;		Unchanged: 0/0
 11770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11771 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11772 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11774 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11775 ;;Total ram usage:        0 bytes
 11776 ;; Hardware stack levels used:    1
 11777 ;; Hardware stack levels required when called:    7
 11778 ;; This function calls:
 11779 ;;		_setLED_Main
 11780 ;; This function is called by:
 11781 ;;		_main
 11782 ;; This function uses a non-reentrant model
 11783 ;;
 11784                           
 11785                           
 11786                           ;psect for function _LED_Main
 11787  19B1                     _LED_Main:	
 11788                           
 11789                           ;LED_B1.c: 58: setLED_Main(1);
 11790                           
 11791                           ;incstack = 0
 11792                           ; Regs used in _LED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11793  19B1  3001               	movlw	1
 11794  19B2  3192  223F  3199   	fcall	_setLED_Main
 11795                           
 11796                           ;LED_B1.c: 61: setLED_Main(2);
 11797  19B5  3002               	movlw	2
 11798  19B6  3192  223F  3199   	fcall	_setLED_Main
 11799                           
 11800                           ;LED_B1.c: 67: setLED_Main(99);
 11801  19B9  3063               	movlw	99
 11802  19BA  3192  223F         	fcall	_setLED_Main
 11803  19BC  0008               	return
 11804  19BD                     __end_of_LED_Main:	
 11805                           
 11806                           	psect	text72
 11807  123F                     __ptext72:	
 11808 ;; *************** function _setLED_Main *****************
 11809 ;; Defined at:
 11810 ;;		line 229 in file "../src/LED_B1.c"
 11811 ;; Parameters:    Size  Location     Type
 11812 ;;  led             1    wreg     unsigned char 
 11813 ;; Auto vars:     Size  Location     Type
 11814 ;;  led             1    4[BANK0 ] unsigned char 
 11815 ;; Return value:  Size  Location     Type
 11816 ;;		None               void
 11817 ;; Registers used:
 11818 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11819 ;; Tracked objects:
 11820 ;;		On entry : 0/0
 11821 ;;		On exit  : 0/0
 11822 ;;		Unchanged: 0/0
 11823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11824 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11825 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11826 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11827 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11828 ;;Total ram usage:        3 bytes
 11829 ;; Hardware stack levels used:    1
 11830 ;; Hardware stack levels required when called:    6
 11831 ;; This function calls:
 11832 ;;		_LedPointSelect
 11833 ;; This function is called by:
 11834 ;;		_LED_Main
 11835 ;; This function uses a non-reentrant model
 11836 ;;
 11837                           
 11838                           
 11839                           ;psect for function _setLED_Main
 11840  123F                     _setLED_Main:	
 11841                           
 11842                           ;incstack = 0
 11843                           ; Regs used in _setLED_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11844                           ;setLED_Main@led stored from wreg
 11845  123F  0020               	movlb	0	; select bank0
 11846  1240  00A4               	movwf	setLED_Main@led
 11847                           
 11848                           ;LED_B1.c: 230: LedPointSelect(led);
 11849  1241  0824               	movf	setLED_Main@led,w
 11850  1242  319D  2570  3192   	fcall	_LedPointSelect
 11851                           
 11852                           ;LED_B1.c: 231: if (LED->GO == 1) {
 11853  1245  0021               	movlb	1	; select bank1
 11854  1246  0857               	movf	_LED^(0+128),w
 11855  1247  0086               	movwf	6
 11856  1248  3001               	movlw	1	; select bank2/3
 11857  1249  0087               	movwf	7
 11858  124A  1C81               	btfss	1,1
 11859  124B  0008               	return
 11860                           
 11861                           ;LED_B1.c: 232: LED->Time++;
 11862  124C  0A57               	incf	_LED^(0+128),w
 11863  124D  0086               	movwf	6
 11864  124E  3001               	movlw	1	; select bank2/3
 11865  124F  0087               	movwf	7
 11866  1250  3001               	movlw	1
 11867  1251  0781               	addwf	1,f
 11868  1252  3141               	addfsr 1,1
 11869  1253  1803               	skipnc
 11870  1254  0A81               	incf	1,f
 11871                           
 11872                           ;LED_B1.c: 233: if (LED->Time >= (500 / 20)) {
 11873  1255  0A57               	incf	_LED^(0+128),w
 11874  1256  0086               	movwf	6
 11875  1257  3001               	movlw	1	; select bank2/3
 11876  1258  0087               	movwf	7
 11877  1259  3F40               	moviw [0]fsr1
 11878  125A  0020               	movlb	0	; select bank0
 11879  125B  00A2               	movwf	??_setLED_Main
 11880  125C  3F41               	moviw [1]fsr1
 11881  125D  00A3               	movwf	??_setLED_Main+1
 11882  125E  3000               	movlw	0
 11883  125F  0223               	subwf	??_setLED_Main+1,w
 11884  1260  3019               	movlw	25
 11885  1261  1903               	skipnz
 11886  1262  0222               	subwf	??_setLED_Main,w
 11887  1263  1C03               	skipc
 11888  1264  0008               	return
 11889                           
 11890                           ;LED_B1.c: 234: LED->Time = 0;
 11891  1265  0021               	movlb	1	; select bank1
 11892  1266  0A57               	incf	_LED^(0+128),w
 11893  1267  0086               	movwf	6
 11894  1268  3001               	movlw	1	; select bank2/3
 11895  1269  0087               	movwf	7
 11896  126A  3000               	movlw	0
 11897  126B  3FC0               	movwi [0]fsr1
 11898  126C  3FC1               	movwi [1]fsr1
 11899                           
 11900                           ;LED_B1.c: 237: if (led == 1) {
 11901  126D  0020               	movlb	0	; select bank0
 11902  126E  0824               	movf	setLED_Main@led,w
 11903  126F  3A01               	xorlw	1
 11904  1270  1D03               	skipz
 11905  1271  2A74               	goto	l1168
 11906                           
 11907                           ;LED_B1.c: 238: RC7 = RC7 == 1 ? 0 : 1;
 11908  1272  3080               	movlw	128
 11909  1273  068E               	xorwf	14,f
 11910  1274                     l1168:	
 11911                           
 11912                           ;LED_B1.c: 239: }
 11913                           ;LED_B1.c: 242: if (led == 2) {
 11914  1274  0824               	movf	setLED_Main@led,w
 11915  1275  3A02               	xorlw	2
 11916                           
 11917                           ;LED_B1.c: 243: RA3 = RA3 == 1 ? 0 : 1;
 11918  1276  3008               	movlw	8
 11919  1277  1903               	btfsc	3,2
 11920  1278  068C               	xorwf	12,f
 11921                           
 11922                           ;LED_B1.c: 244: }
 11923                           ;LED_B1.c: 252: if (led == 99) {
 11924  1279  0824               	movf	setLED_Main@led,w
 11925  127A  3A63               	xorlw	99
 11926  127B  1D03               	skipz
 11927  127C  0008               	return
 11928                           
 11929                           ;LED_B1.c: 253: RB5 = RB5 == 1 ? 0 : 1;
 11930  127D  3020               	movlw	32
 11931  127E  068D               	xorwf	13,f
 11932  127F  0008               	return
 11933  1280                     __end_of_setLED_Main:	
 11934                           
 11935                           	psect	text73
 11936  19A5                     __ptext73:	
 11937 ;; *************** function _LED_Initialization *****************
 11938 ;; Defined at:
 11939 ;;		line 31 in file "../src/LED_B1.c"
 11940 ;; Parameters:    Size  Location     Type
 11941 ;;		None
 11942 ;; Auto vars:     Size  Location     Type
 11943 ;;		None
 11944 ;; Return value:  Size  Location     Type
 11945 ;;		None               void
 11946 ;; Registers used:
 11947 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11948 ;; Tracked objects:
 11949 ;;		On entry : 0/0
 11950 ;;		On exit  : 0/0
 11951 ;;		Unchanged: 0/0
 11952 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11956 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11957 ;;Total ram usage:        0 bytes
 11958 ;; Hardware stack levels used:    1
 11959 ;; Hardware stack levels required when called:    8
 11960 ;; This function calls:
 11961 ;;		_setLED_Initialization
 11962 ;; This function is called by:
 11963 ;;		_main
 11964 ;; This function uses a non-reentrant model
 11965 ;;
 11966                           
 11967                           
 11968                           ;psect for function _LED_Initialization
 11969  19A5                     _LED_Initialization:	
 11970                           
 11971                           ;LED_B1.c: 33: setLED_Initialization(1);
 11972                           
 11973                           ;incstack = 0
 11974                           ; Regs used in _LED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11975  19A5  3001               	movlw	1
 11976  19A6  319A  2276  3199   	fcall	_setLED_Initialization
 11977                           
 11978                           ;LED_B1.c: 36: setLED_Initialization(2);
 11979  19A9  3002               	movlw	2
 11980  19AA  319A  2276  3199   	fcall	_setLED_Initialization
 11981                           
 11982                           ;LED_B1.c: 42: setLED_Initialization(99);
 11983  19AD  3063               	movlw	99
 11984  19AE  319A  2276         	fcall	_setLED_Initialization
 11985  19B0  0008               	return
 11986  19B1                     __end_of_LED_Initialization:	
 11987                           
 11988                           	psect	text74
 11989  1A76                     __ptext74:	
 11990 ;; *************** function _setLED_Initialization *****************
 11991 ;; Defined at:
 11992 ;;		line 74 in file "../src/LED_B1.c"
 11993 ;; Parameters:    Size  Location     Type
 11994 ;;  led             1    wreg     unsigned char 
 11995 ;; Auto vars:     Size  Location     Type
 11996 ;;  led             1    4[BANK0 ] unsigned char 
 11997 ;; Return value:  Size  Location     Type
 11998 ;;		None               void
 11999 ;; Registers used:
 12000 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12001 ;; Tracked objects:
 12002 ;;		On entry : 0/0
 12003 ;;		On exit  : 0/0
 12004 ;;		Unchanged: 0/0
 12005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12007 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12008 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12009 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12010 ;;Total ram usage:        1 bytes
 12011 ;; Hardware stack levels used:    1
 12012 ;; Hardware stack levels required when called:    7
 12013 ;; This function calls:
 12014 ;;		_LedPointSelect
 12015 ;;		_setLED
 12016 ;; This function is called by:
 12017 ;;		_LED_Initialization
 12018 ;; This function uses a non-reentrant model
 12019 ;;
 12020                           
 12021                           
 12022                           ;psect for function _setLED_Initialization
 12023  1A76                     _setLED_Initialization:	
 12024                           
 12025                           ;incstack = 0
 12026                           ; Regs used in _setLED_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 12027                           ;setLED_Initialization@led stored from wreg
 12028  1A76  0020               	movlb	0	; select bank0
 12029  1A77  00A4               	movwf	setLED_Initialization@led
 12030                           
 12031                           ;LED_B1.c: 75: LedPointSelect(led);
 12032  1A78  0824               	movf	setLED_Initialization@led,w
 12033  1A79  319D  2570  319A   	fcall	_LedPointSelect
 12034                           
 12035                           ;LED_B1.c: 76: LED->Enable = 1;
 12036  1A7C  0021               	movlb	1	; select bank1
 12037  1A7D  0857               	movf	_LED^(0+128),w
 12038  1A7E  0086               	movwf	6
 12039  1A7F  3001               	movlw	1	; select bank2/3
 12040  1A80  0087               	movwf	7
 12041  1A81  1401               	bsf	1,0
 12042                           
 12043                           ;LED_B1.c: 77: setLED(led, 0);
 12044  1A82  0020               	movlb	0	; select bank0
 12045  1A83  01A2               	clrf	setLED@command
 12046  1A84  0824               	movf	setLED_Initialization@led,w
 12047  1A85  3193  230E         	fcall	_setLED
 12048  1A87  0008               	return
 12049  1A88                     __end_of_setLED_Initialization:	
 12050                           
 12051                           	psect	text75
 12052  11FE                     __ptext75:	
 12053 ;; *************** function _Flash_Memory_Main *****************
 12054 ;; Defined at:
 12055 ;;		line 976 in file "../src/MCU_B1.c"
 12056 ;; Parameters:    Size  Location     Type
 12057 ;;		None
 12058 ;; Auto vars:     Size  Location     Type
 12059 ;;  key_Status      1    7[BANK0 ] unsigned char 
 12060 ;; Return value:  Size  Location     Type
 12061 ;;		None               void
 12062 ;; Registers used:
 12063 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12064 ;; Tracked objects:
 12065 ;;		On entry : 0/0
 12066 ;;		On exit  : 0/0
 12067 ;;		Unchanged: 0/0
 12068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12070 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12071 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12072 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12073 ;;Total ram usage:        3 bytes
 12074 ;; Hardware stack levels used:    1
 12075 ;; Hardware stack levels required when called:    8
 12076 ;; This function calls:
 12077 ;;		_Flash_Memory_Modify
 12078 ;;		_getAll_Sw_KeyStatus
 12079 ;;		_getMain_All_LightsStatus
 12080 ;; This function is called by:
 12081 ;;		_main
 12082 ;; This function uses a non-reentrant model
 12083 ;;
 12084                           
 12085                           
 12086                           ;psect for function _Flash_Memory_Main
 12087  11FE                     _Flash_Memory_Main:	
 12088                           
 12089                           ;MCU_B1.c: 977: char key_Status = 0;
 12090                           
 12091                           ;incstack = 0
 12092                           ; Regs used in _Flash_Memory_Main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12093  11FE  0020               	movlb	0	; select bank0
 12094  11FF  01A7               	clrf	Flash_Memory_Main@key_Status
 12095                           
 12096                           ;MCU_B1.c: 979: key_Status = getAll_Sw_KeyStatus();
 12097  1200  319A  221F  3191   	fcall	_getAll_Sw_KeyStatus
 12098  1203  0020               	movlb	0	; select bank0
 12099  1204  00A6               	movwf	??_Flash_Memory_Main
 12100  1205  0826               	movf	??_Flash_Memory_Main,w
 12101  1206  00A7               	movwf	Flash_Memory_Main@key_Status
 12102                           
 12103                           ;MCU_B1.c: 981: if (Memory.Modify == 1) {
 12104  1207  0024               	movlb	4	; select bank4
 12105  1208  1C44               	btfss	(_Memory^(0+512)+36),0
 12106  1209  0008               	return
 12107                           
 12108                           ;MCU_B1.c: 982: Memory.GO = getMain_All_LightsStatus() == 0 && key_Status == 0 ? 1 : 0;
 12109  120A  0020               	movlb	0	; select bank0
 12110  120B  01A8               	clrf	_Flash_Memory_Main$3307
 12111  120C  319A  22E4  3191   	fcall	_getMain_All_LightsStatus
 12112  120F  3800               	iorlw	0
 12113  1210  1D03               	skipz
 12114  1211  2A18               	goto	l8678
 12115  1212  0020               	movlb	0	; select bank0
 12116  1213  08A7               	movf	Flash_Memory_Main@key_Status,f
 12117  1214  1D03               	skipz
 12118  1215  2A18               	goto	l8678
 12119  1216  01A8               	clrf	_Flash_Memory_Main$3307
 12120  1217  0AA8               	incf	_Flash_Memory_Main$3307,f
 12121  1218                     l8678:	
 12122  1218  0020               	movlb	0	; select bank0
 12123  1219  0828               	movf	_Flash_Memory_Main$3307,w
 12124  121A  0024               	movlb	4	; select bank4
 12125  121B  10C4               	bcf	(_Memory^(0+512)+36),1
 12126  121C  1D03               	skipz
 12127  121D  14C4               	bsf	(_Memory^(0+512)+36),1
 12128                           
 12129                           ;MCU_B1.c: 983: if (Memory.GO == 1) {
 12130  121E  1CC4               	btfss	(_Memory^(0+512)+36),1
 12131  121F  2A39               	goto	l1442
 12132                           
 12133                           ;MCU_B1.c: 984: Memory.Runtime = 1;
 12134  1220  15C4               	bsf	(_Memory^(0+512)+36),3
 12135                           
 12136                           ;MCU_B1.c: 985: Memory.Time++;
 12137  1221  3001               	movlw	1
 12138  1222  07C2               	addwf	(_Memory^(0+512)+34),f
 12139  1223  3000               	movlw	0
 12140  1224  3DC3               	addwfc	((_Memory+1)^(0+512)+34),f
 12141                           
 12142                           ;MCU_B1.c: 986: if (Memory.Time == (200 / 20)) {
 12143  1225  3022               	movlw	34
 12144  1226  3E20               	addlw	_Memory& (0+255)
 12145  1227  0086               	movwf	6
 12146  1228  3002               	movlw	2	; select bank4/5
 12147  1229  0087               	movwf	7
 12148  122A  3F40               	moviw [0]fsr1
 12149  122B  3A0A               	xorlw	10
 12150  122C  1D03               	skipz
 12151  122D  2A30               	goto	u9385
 12152  122E  3F41               	moviw [1]fsr1
 12153  122F  3A00               	xorlw	0
 12154  1230                     u9385:	
 12155  1230  1D03               	skipz
 12156  1231  0008               	return
 12157                           
 12158                           ;MCU_B1.c: 987: Memory.Time = 0;
 12159  1232  01C2               	clrf	(_Memory^(0+512)+34)
 12160  1233  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12161                           
 12162                           ;MCU_B1.c: 988: Memory.Modify = 0;
 12163  1234  1044               	bcf	(_Memory^(0+512)+36),0
 12164                           
 12165                           ;MCU_B1.c: 989: Memory.GO = 0;
 12166  1235  10C4               	bcf	(_Memory^(0+512)+36),1
 12167                           
 12168                           ;MCU_B1.c: 990: Flash_Memory_Modify();
 12169  1236  318B  230F         	fcall	_Flash_Memory_Modify
 12170                           
 12171                           ;MCU_B1.c: 991: }
 12172                           ;MCU_B1.c: 992: } else {
 12173  1238  0008               	return
 12174  1239                     l1442:	
 12175                           
 12176                           ;MCU_B1.c: 993: if (Memory.Runtime == 1) {
 12177  1239  1DC4               	btfss	(_Memory^(0+512)+36),3
 12178  123A  0008               	return
 12179                           
 12180                           ;MCU_B1.c: 994: Memory.Runtime = 0;
 12181  123B  11C4               	bcf	(_Memory^(0+512)+36),3
 12182                           
 12183                           ;MCU_B1.c: 995: Memory.Time = 0;
 12184  123C  01C2               	clrf	(_Memory^(0+512)+34)
 12185  123D  01C3               	clrf	((_Memory+1)^(0+512)+34)
 12186  123E  0008               	return
 12187  123F                     __end_of_Flash_Memory_Main:	
 12188                           
 12189                           	psect	text76
 12190  1A1F                     __ptext76:	
 12191 ;; *************** function _getAll_Sw_KeyStatus *****************
 12192 ;; Defined at:
 12193 ;;		line 278 in file "../src/Switch_B1.c"
 12194 ;; Parameters:    Size  Location     Type
 12195 ;;		None
 12196 ;; Auto vars:     Size  Location     Type
 12197 ;;  status          1    1[BANK0 ] unsigned char 
 12198 ;; Return value:  Size  Location     Type
 12199 ;;                  1    wreg      unsigned char 
 12200 ;; Registers used:
 12201 ;;		wreg, status,2
 12202 ;; Tracked objects:
 12203 ;;		On entry : 0/0
 12204 ;;		On exit  : 0/0
 12205 ;;		Unchanged: 0/0
 12206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12207 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12208 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12209 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12210 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12211 ;;Total ram usage:        3 bytes
 12212 ;; Hardware stack levels used:    1
 12213 ;; Hardware stack levels required when called:    5
 12214 ;; This function calls:
 12215 ;;		Nothing
 12216 ;; This function is called by:
 12217 ;;		_Flash_Memory_Main
 12218 ;; This function uses a non-reentrant model
 12219 ;;
 12220                           
 12221                           
 12222                           ;psect for function _getAll_Sw_KeyStatus
 12223  1A1F                     _getAll_Sw_KeyStatus:	
 12224                           
 12225                           ;Switch_B1.c: 279: char status = 0;
 12226                           
 12227                           ;incstack = 0
 12228                           ; Regs used in _getAll_Sw_KeyStatus: [wreg+status,2]
 12229  1A1F  0020               	movlb	0	; select bank0
 12230  1A20  01A1               	clrf	getAll_Sw_KeyStatus@status
 12231                           
 12232                           ;Switch_B1.c: 289: status = RA0 == 1 || RB1 == 1 || RA6 == 1 || RA4 == 1 ? 1 : 0;
 12233  1A21  01A2               	clrf	_getAll_Sw_KeyStatus$6170
 12234  1A22  0AA2               	incf	_getAll_Sw_KeyStatus$6170,f
 12235  1A23  1C0C               	btfss	12,0	;volatile
 12236  1A24  188D               	btfsc	13,1	;volatile
 12237  1A25  2A2A               	goto	l8234
 12238  1A26  1F0C               	btfss	12,6	;volatile
 12239  1A27  1A0C               	btfsc	12,4	;volatile
 12240  1A28  2A2A               	goto	l8234
 12241  1A29  01A2               	clrf	_getAll_Sw_KeyStatus$6170
 12242  1A2A                     l8234:	
 12243  1A2A  0822               	movf	_getAll_Sw_KeyStatus$6170,w
 12244  1A2B  00A0               	movwf	??_getAll_Sw_KeyStatus
 12245  1A2C  0820               	movf	??_getAll_Sw_KeyStatus,w
 12246  1A2D  00A1               	movwf	getAll_Sw_KeyStatus@status
 12247                           
 12248                           ;Switch_B1.c: 302: return status;
 12249  1A2E  0821               	movf	getAll_Sw_KeyStatus@status,w
 12250  1A2F  0008               	return
 12251  1A30                     __end_of_getAll_Sw_KeyStatus:	
 12252                           
 12253                           	psect	text77
 12254  0B0F                     __ptext77:	
 12255 ;; *************** function _Flash_Memory_Modify *****************
 12256 ;; Defined at:
 12257 ;;		line 1053 in file "../src/MCU_B1.c"
 12258 ;; Parameters:    Size  Location     Type
 12259 ;;		None
 12260 ;; Auto vars:     Size  Location     Type
 12261 ;;  i               1    5[BANK0 ] unsigned char 
 12262 ;; Return value:  Size  Location     Type
 12263 ;;		None               void
 12264 ;; Registers used:
 12265 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12266 ;; Tracked objects:
 12267 ;;		On entry : 0/0
 12268 ;;		On exit  : 0/0
 12269 ;;		Unchanged: 0/0
 12270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12272 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12273 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12274 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12275 ;;Total ram usage:        2 bytes
 12276 ;; Hardware stack levels used:    1
 12277 ;; Hardware stack levels required when called:    7
 12278 ;; This function calls:
 12279 ;;		_Flash_Memory_Erasing
 12280 ;;		_Flash_Memory_Read
 12281 ;;		_Flash_Memory_Write
 12282 ;;		_setMemory_Data
 12283 ;; This function is called by:
 12284 ;;		_Flash_Memory_Main
 12285 ;; This function uses a non-reentrant model
 12286 ;;
 12287                           
 12288                           
 12289                           ;psect for function _Flash_Memory_Modify
 12290  0B0F                     _Flash_Memory_Modify:	
 12291                           
 12292                           ;MCU_B1.c: 1054: char i = 0;
 12293                           
 12294                           ;incstack = 0
 12295                           ; Regs used in _Flash_Memory_Modify: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12296  0B0F  0020               	movlb	0	; select bank0
 12297  0B10  01A5               	clrf	Flash_Memory_Modify@i
 12298                           
 12299                           ;MCU_B1.c: 1055: for (i = 0; i < 32; i++) {
 12300  0B11  01A5               	clrf	Flash_Memory_Modify@i
 12301  0B12  3020               	movlw	32
 12302  0B13  0225               	subwf	Flash_Memory_Modify@i,w
 12303  0B14  1803               	btfsc	3,0
 12304  0B15  2B2B               	goto	l8252
 12305  0B16                     l8246:	
 12306                           
 12307                           ;MCU_B1.c: 1056: Memory.Data[i] = Flash_Memory_Read(i);
 12308  0B16  0825               	movf	Flash_Memory_Modify@i,w
 12309  0B17  319C  2454  318B   	fcall	_Flash_Memory_Read
 12310  0B1A  0020               	movlb	0	; select bank0
 12311  0B1B  00A4               	movwf	??_Flash_Memory_Modify
 12312  0B1C  0825               	movf	Flash_Memory_Modify@i,w
 12313  0B1D  3E20               	addlw	_Memory& (0+255)
 12314  0B1E  0086               	movwf	6
 12315  0B1F  3002               	movlw	2	; select bank4/5
 12316  0B20  0087               	movwf	7
 12317  0B21  0824               	movf	??_Flash_Memory_Modify,w
 12318  0B22  0081               	movwf	1
 12319  0B23  3001               	movlw	1
 12320  0B24  00A4               	movwf	??_Flash_Memory_Modify
 12321  0B25  0824               	movf	??_Flash_Memory_Modify,w
 12322  0B26  07A5               	addwf	Flash_Memory_Modify@i,f
 12323  0B27  3020               	movlw	32
 12324  0B28  0225               	subwf	Flash_Memory_Modify@i,w
 12325  0B29  1C03               	skipc
 12326  0B2A  2B16               	goto	l8246
 12327  0B2B                     l8252:	
 12328                           
 12329                           ;MCU_B1.c: 1057: }
 12330                           ;MCU_B1.c: 1058: setMemory_Data(0, product->Data[12]);
 12331  0B2B  0021               	movlb	1	; select bank1
 12332  0B2C  086E               	movf	_product^(0+128),w
 12333  0B2D  0086               	movwf	6
 12334  0B2E  3002               	movlw	2	; select bank4/5
 12335  0B2F  0087               	movwf	7
 12336  0B30  3002               	movlw	2	; select bank4/5
 12337  0B31  3F4C               	moviw [12]fsr1
 12338  0B32  0020               	movlb	0	; select bank0
 12339  0B33  00A0               	movwf	setMemory_Data@data
 12340  0B34  3000               	movlw	0
 12341  0B35  3199  218D  318B   	fcall	_setMemory_Data
 12342                           
 12343                           ;MCU_B1.c: 1059: setMemory_Data(1, product->Data[13]);
 12344  0B38  0021               	movlb	1	; select bank1
 12345  0B39  086E               	movf	_product^(0+128),w
 12346  0B3A  0086               	movwf	6
 12347  0B3B  3002               	movlw	2	; select bank4/5
 12348  0B3C  0087               	movwf	7
 12349  0B3D  3002               	movlw	2	; select bank4/5
 12350  0B3E  3F4D               	moviw [13]fsr1
 12351  0B3F  0020               	movlb	0	; select bank0
 12352  0B40  00A0               	movwf	setMemory_Data@data
 12353  0B41  3001               	movlw	1
 12354  0B42  3199  218D  318B   	fcall	_setMemory_Data
 12355                           
 12356                           ;MCU_B1.c: 1060: setMemory_Data(2, product->Data[14]);
 12357  0B45  0021               	movlb	1	; select bank1
 12358  0B46  086E               	movf	_product^(0+128),w
 12359  0B47  0086               	movwf	6
 12360  0B48  3002               	movlw	2	; select bank4/5
 12361  0B49  0087               	movwf	7
 12362  0B4A  3002               	movlw	2	; select bank4/5
 12363  0B4B  3F4E               	moviw [14]fsr1
 12364  0B4C  0020               	movlb	0	; select bank0
 12365  0B4D  00A0               	movwf	setMemory_Data@data
 12366  0B4E  3002               	movlw	2
 12367  0B4F  3199  218D  318B   	fcall	_setMemory_Data
 12368                           
 12369                           ;MCU_B1.c: 1062: setMemory_Data(3, product->Data[21]);
 12370  0B52  0021               	movlb	1	; select bank1
 12371  0B53  086E               	movf	_product^(0+128),w
 12372  0B54  0086               	movwf	6
 12373  0B55  3002               	movlw	2	; select bank4/5
 12374  0B56  0087               	movwf	7
 12375  0B57  3002               	movlw	2	; select bank4/5
 12376  0B58  3F55               	moviw [21]fsr1
 12377  0B59  0020               	movlb	0	; select bank0
 12378  0B5A  00A0               	movwf	setMemory_Data@data
 12379  0B5B  3003               	movlw	3
 12380  0B5C  3199  218D  318B   	fcall	_setMemory_Data
 12381                           
 12382                           ;MCU_B1.c: 1063: setMemory_Data(4, product->Data[22]);
 12383  0B5F  0021               	movlb	1	; select bank1
 12384  0B60  086E               	movf	_product^(0+128),w
 12385  0B61  0086               	movwf	6
 12386  0B62  3002               	movlw	2	; select bank4/5
 12387  0B63  0087               	movwf	7
 12388  0B64  3002               	movlw	2	; select bank4/5
 12389  0B65  3F56               	moviw [22]fsr1
 12390  0B66  0020               	movlb	0	; select bank0
 12391  0B67  00A0               	movwf	setMemory_Data@data
 12392  0B68  3004               	movlw	4
 12393  0B69  3199  218D  318B   	fcall	_setMemory_Data
 12394                           
 12395                           ;MCU_B1.c: 1064: setMemory_Data(5, product->Data[23]);
 12396  0B6C  0021               	movlb	1	; select bank1
 12397  0B6D  086E               	movf	_product^(0+128),w
 12398  0B6E  0086               	movwf	6
 12399  0B6F  3002               	movlw	2	; select bank4/5
 12400  0B70  0087               	movwf	7
 12401  0B71  3002               	movlw	2	; select bank4/5
 12402  0B72  3F57               	moviw [23]fsr1
 12403  0B73  0020               	movlb	0	; select bank0
 12404  0B74  00A0               	movwf	setMemory_Data@data
 12405  0B75  3005               	movlw	5
 12406  0B76  3199  218D  318B   	fcall	_setMemory_Data
 12407                           
 12408                           ;MCU_B1.c: 1065: if (myMain.SaveDimmer == 1) {
 12409  0B79  0021               	movlb	1	; select bank1
 12410  0B7A  1EB8               	btfss	(_myMain^(0+128)+10),5
 12411  0B7B  2B86               	goto	l8260
 12412                           
 12413                           ;MCU_B1.c: 1066: myMain.SaveDimmer = 0;
 12414  0B7C  12B8               	bcf	(_myMain^(0+128)+10),5
 12415                           
 12416                           ;MCU_B1.c: 1067: setMemory_Data(30, 0xaa);
 12417  0B7D  30AA               	movlw	170
 12418  0B7E  0020               	movlb	0	; select bank0
 12419  0B7F  00A4               	movwf	??_Flash_Memory_Modify
 12420  0B80  0824               	movf	??_Flash_Memory_Modify,w
 12421  0B81  00A0               	movwf	setMemory_Data@data
 12422  0B82  301E               	movlw	30
 12423  0B83  3199  218D  318B   	fcall	_setMemory_Data
 12424  0B86                     l8260:	
 12425                           
 12426                           ;MCU_B1.c: 1068: }
 12427                           ;MCU_B1.c: 1070: if (Memory.LoopSave == 1) {
 12428  0B86  0024               	movlb	4	; select bank4
 12429  0B87  1D44               	btfss	(_Memory^(0+512)+36),2
 12430  0B88  2B8D               	goto	l1466
 12431                           
 12432                           ;MCU_B1.c: 1071: Memory.LoopSave = 0;
 12433  0B89  1144               	bcf	(_Memory^(0+512)+36),2
 12434                           
 12435                           ;MCU_B1.c: 1072: myMain.FirstOpen = 0;
 12436  0B8A  0021               	movlb	1	; select bank1
 12437  0B8B  11AE               	bcf	_myMain^(0+128),3
 12438                           
 12439                           ;MCU_B1.c: 1073: myMain.First = 0;
 12440  0B8C  12AE               	bcf	_myMain^(0+128),5
 12441  0B8D                     l1466:	
 12442                           
 12443                           ;MCU_B1.c: 1075: }
 12444                           ;MCU_B1.c: 1076: GIE = 0;
 12445  0B8D  138B               	bcf	11,7	;volatile
 12446                           
 12447                           ;MCU_B1.c: 1077: Flash_Memory_Erasing();
 12448  0B8E  3199  2199  318B   	fcall	_Flash_Memory_Erasing
 12449                           
 12450                           ;MCU_B1.c: 1078: Flash_Memory_Write();
 12451  0B91  319F  279E         	fcall	_Flash_Memory_Write
 12452                           
 12453                           ;MCU_B1.c: 1079: GIE = 1;
 12454  0B93  178B               	bsf	11,7	;volatile
 12455  0B94  0008               	return
 12456  0B95                     __end_of_Flash_Memory_Modify:	
 12457                           
 12458                           	psect	text78
 12459  1999                     __ptext78:	
 12460 ;; *************** function _Flash_Memory_Erasing *****************
 12461 ;; Defined at:
 12462 ;;		line 1042 in file "../src/MCU_B1.c"
 12463 ;; Parameters:    Size  Location     Type
 12464 ;;		None
 12465 ;; Auto vars:     Size  Location     Type
 12466 ;;		None
 12467 ;; Return value:  Size  Location     Type
 12468 ;;		None               void
 12469 ;; Registers used:
 12470 ;;		wreg, status,2, status,0, pclath, cstack
 12471 ;; Tracked objects:
 12472 ;;		On entry : 0/0
 12473 ;;		On exit  : 0/0
 12474 ;;		Unchanged: 0/0
 12475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12479 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12480 ;;Total ram usage:        0 bytes
 12481 ;; Hardware stack levels used:    1
 12482 ;; Hardware stack levels required when called:    6
 12483 ;; This function calls:
 12484 ;;		_Flash_Memory_Unlock
 12485 ;; This function is called by:
 12486 ;;		_Flash_Memory_Modify
 12487 ;; This function uses a non-reentrant model
 12488 ;;
 12489                           
 12490                           
 12491                           ;psect for function _Flash_Memory_Erasing
 12492  1999                     _Flash_Memory_Erasing:	
 12493                           
 12494                           ;MCU_B1.c: 1043: CFGS = 0;
 12495                           
 12496                           ;incstack = 0
 12497                           ; Regs used in _Flash_Memory_Erasing: [wreg+status,2+status,0+pclath+cstack]
 12498  1999  0023               	movlb	3	; select bank3
 12499  199A  1315               	bcf	21,6	;volatile
 12500                           
 12501                           ;MCU_B1.c: 1044: PMADRH = 0x30;
 12502  199B  3030               	movlw	48
 12503  199C  0092               	movwf	18	;volatile
 12504                           
 12505                           ;MCU_B1.c: 1045: PMADRL = 0x00;
 12506  199D  0191               	clrf	17	;volatile
 12507                           
 12508                           ;MCU_B1.c: 1046: FREE = 1;
 12509  199E  1615               	bsf	21,4	;volatile
 12510                           
 12511                           ;MCU_B1.c: 1047: WREN = 1;
 12512  199F  1515               	bsf	21,2	;volatile
 12513                           
 12514                           ;MCU_B1.c: 1048: Flash_Memory_Unlock();
 12515  19A0  3199  2140         	fcall	_Flash_Memory_Unlock
 12516                           
 12517                           ;MCU_B1.c: 1049: WREN = 0;
 12518  19A2  0023               	movlb	3	; select bank3
 12519  19A3  1115               	bcf	21,2	;volatile
 12520  19A4  0008               	return
 12521  19A5                     __end_of_Flash_Memory_Erasing:	
 12522                           
 12523                           	psect	text79
 12524  06FC                     __ptext79:	
 12525 ;; *************** function _Flash_Memory_Initialization *****************
 12526 ;; Defined at:
 12527 ;;		line 932 in file "../src/MCU_B1.c"
 12528 ;; Parameters:    Size  Location     Type
 12529 ;;		None
 12530 ;; Auto vars:     Size  Location     Type
 12531 ;;  value           1    5[BANK0 ] unsigned char 
 12532 ;; Return value:  Size  Location     Type
 12533 ;;		None               void
 12534 ;; Registers used:
 12535 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12536 ;; Tracked objects:
 12537 ;;		On entry : 0/0
 12538 ;;		On exit  : 0/0
 12539 ;;		Unchanged: 0/0
 12540 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12542 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12543 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12544 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12545 ;;Total ram usage:        2 bytes
 12546 ;; Hardware stack levels used:    1
 12547 ;; Hardware stack levels required when called:    7
 12548 ;; This function calls:
 12549 ;;		_Flash_Memory_Read
 12550 ;;		_Flash_Memory_Write
 12551 ;;		_setMemory_Data
 12552 ;; This function is called by:
 12553 ;;		_main
 12554 ;; This function uses a non-reentrant model
 12555 ;;
 12556                           
 12557                           
 12558                           ;psect for function _Flash_Memory_Initialization
 12559  06FC                     _Flash_Memory_Initialization:	
 12560                           
 12561                           ;MCU_B1.c: 933: char value = 0;
 12562                           
 12563                           ;incstack = 0
 12564                           ; Regs used in _Flash_Memory_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 12565  06FC  0020               	movlb	0	; select bank0
 12566  06FD  01A5               	clrf	Flash_Memory_Initialization@value
 12567                           
 12568                           ;MCU_B1.c: 934: if (Flash_Memory_Read(31) == 0xaa) {
 12569  06FE  301F               	movlw	31
 12570  06FF  319C  2454  3186   	fcall	_Flash_Memory_Read
 12571  0702  3AAA               	xorlw	170
 12572  0703  1D03               	skipz
 12573  0704  2F7E               	goto	l8652
 12574                           
 12575                           ;MCU_B1.c: 935: product->Data[12] = Flash_Memory_Read(0);
 12576  0705  3000               	movlw	0
 12577  0706  319C  2454  3186   	fcall	_Flash_Memory_Read
 12578  0709  0020               	movlb	0	; select bank0
 12579  070A  00A4               	movwf	??_Flash_Memory_Initialization
 12580  070B  0021               	movlb	1	; select bank1
 12581  070C  086E               	movf	_product^(0+128),w
 12582  070D  3E0C               	addlw	12
 12583  070E  0086               	movwf	6
 12584  070F  3002               	movlw	2	; select bank4/5
 12585  0710  0087               	movwf	7
 12586  0711  0020               	movlb	0	; select bank0
 12587  0712  0824               	movf	??_Flash_Memory_Initialization,w
 12588  0713  0081               	movwf	1
 12589                           
 12590                           ;MCU_B1.c: 936: product->Data[13] = Flash_Memory_Read(1);
 12591  0714  3001               	movlw	1
 12592  0715  319C  2454  3186   	fcall	_Flash_Memory_Read
 12593  0718  0020               	movlb	0	; select bank0
 12594  0719  00A4               	movwf	??_Flash_Memory_Initialization
 12595  071A  0021               	movlb	1	; select bank1
 12596  071B  086E               	movf	_product^(0+128),w
 12597  071C  3E0D               	addlw	13
 12598  071D  0086               	movwf	6
 12599  071E  3002               	movlw	2	; select bank4/5
 12600  071F  0087               	movwf	7
 12601  0720  0020               	movlb	0	; select bank0
 12602  0721  0824               	movf	??_Flash_Memory_Initialization,w
 12603  0722  0081               	movwf	1
 12604                           
 12605                           ;MCU_B1.c: 937: product->Data[14] = Flash_Memory_Read(2);
 12606  0723  3002               	movlw	2
 12607  0724  319C  2454  3186   	fcall	_Flash_Memory_Read
 12608  0727  0020               	movlb	0	; select bank0
 12609  0728  00A4               	movwf	??_Flash_Memory_Initialization
 12610  0729  0021               	movlb	1	; select bank1
 12611  072A  086E               	movf	_product^(0+128),w
 12612  072B  3E0E               	addlw	14
 12613  072C  0086               	movwf	6
 12614  072D  3002               	movlw	2	; select bank4/5
 12615  072E  0087               	movwf	7
 12616  072F  0020               	movlb	0	; select bank0
 12617  0730  0824               	movf	??_Flash_Memory_Initialization,w
 12618  0731  0081               	movwf	1
 12619                           
 12620                           ;MCU_B1.c: 940: product->Data[21] = Flash_Memory_Read(3);
 12621  0732  3003               	movlw	3
 12622  0733  319C  2454  3186   	fcall	_Flash_Memory_Read
 12623  0736  0020               	movlb	0	; select bank0
 12624  0737  00A4               	movwf	??_Flash_Memory_Initialization
 12625  0738  0021               	movlb	1	; select bank1
 12626  0739  086E               	movf	_product^(0+128),w
 12627  073A  3E15               	addlw	21
 12628  073B  0086               	movwf	6
 12629  073C  3002               	movlw	2	; select bank4/5
 12630  073D  0087               	movwf	7
 12631  073E  0020               	movlb	0	; select bank0
 12632  073F  0824               	movf	??_Flash_Memory_Initialization,w
 12633  0740  0081               	movwf	1
 12634                           
 12635                           ;MCU_B1.c: 941: product->Data[22] = Flash_Memory_Read(4);
 12636  0741  3004               	movlw	4
 12637  0742  319C  2454  3186   	fcall	_Flash_Memory_Read
 12638  0745  0020               	movlb	0	; select bank0
 12639  0746  00A4               	movwf	??_Flash_Memory_Initialization
 12640  0747  0021               	movlb	1	; select bank1
 12641  0748  086E               	movf	_product^(0+128),w
 12642  0749  3E16               	addlw	22
 12643  074A  0086               	movwf	6
 12644  074B  3002               	movlw	2	; select bank4/5
 12645  074C  0087               	movwf	7
 12646  074D  0020               	movlb	0	; select bank0
 12647  074E  0824               	movf	??_Flash_Memory_Initialization,w
 12648  074F  0081               	movwf	1
 12649                           
 12650                           ;MCU_B1.c: 942: product->Data[23] = Flash_Memory_Read(5);
 12651  0750  3005               	movlw	5
 12652  0751  319C  2454  3186   	fcall	_Flash_Memory_Read
 12653  0754  0020               	movlb	0	; select bank0
 12654  0755  00A4               	movwf	??_Flash_Memory_Initialization
 12655  0756  0021               	movlb	1	; select bank1
 12656  0757  086E               	movf	_product^(0+128),w
 12657  0758  3E17               	addlw	23
 12658  0759  0086               	movwf	6
 12659  075A  3002               	movlw	2	; select bank4/5
 12660  075B  0087               	movwf	7
 12661  075C  0020               	movlb	0	; select bank0
 12662  075D  0824               	movf	??_Flash_Memory_Initialization,w
 12663  075E  0081               	movwf	1
 12664                           
 12665                           ;MCU_B1.c: 949: if (product->Data[12] == 0xff && product->Data[13] == 0xff && product->D
      +                          ata[14] == 0xff) {
 12666  075F  0021               	movlb	1	; select bank1
 12667  0760  086E               	movf	_product^(0+128),w
 12668  0761  3E0C               	addlw	12
 12669  0762  0086               	movwf	6
 12670  0763  3002               	movlw	2	; select bank4/5
 12671  0764  0087               	movwf	7
 12672  0765  0801               	movf	1,w
 12673  0766  3AFF               	xorlw	255
 12674  0767  1D03               	skipz
 12675  0768  0008               	return
 12676  0769  086E               	movf	_product^(0+128),w
 12677  076A  3E0D               	addlw	13
 12678  076B  0086               	movwf	6
 12679  076C  3002               	movlw	2	; select bank4/5
 12680  076D  0087               	movwf	7
 12681  076E  0801               	movf	1,w
 12682  076F  3AFF               	xorlw	255
 12683  0770  1D03               	skipz
 12684  0771  0008               	return
 12685  0772  086E               	movf	_product^(0+128),w
 12686  0773  3E0E               	addlw	14
 12687  0774  0086               	movwf	6
 12688  0775  3002               	movlw	2	; select bank4/5
 12689  0776  0087               	movwf	7
 12690  0777  0801               	movf	1,w
 12691  0778  3AFF               	xorlw	255
 12692  0779  1D03               	skipz
 12693  077A  0008               	return
 12694                           
 12695                           ;MCU_B1.c: 950: myMain.FirstOpen = 1;
 12696  077B  15AE               	bsf	_myMain^(0+128),3
 12697                           
 12698                           ;MCU_B1.c: 951: myMain.First = 1;
 12699  077C  16AE               	bsf	_myMain^(0+128),5
 12700                           
 12701                           ;MCU_B1.c: 952: }
 12702                           ;MCU_B1.c: 953: } else {
 12703  077D  0008               	return
 12704  077E                     l8652:	
 12705                           
 12706                           ;MCU_B1.c: 955: setMemory_Data(0, 0xff);
 12707  077E  30FF               	movlw	255
 12708  077F  0020               	movlb	0	; select bank0
 12709  0780  00A4               	movwf	??_Flash_Memory_Initialization
 12710  0781  0824               	movf	??_Flash_Memory_Initialization,w
 12711  0782  00A0               	movwf	setMemory_Data@data
 12712  0783  3000               	movlw	0
 12713  0784  3199  218D  3186   	fcall	_setMemory_Data
 12714                           
 12715                           ;MCU_B1.c: 956: setMemory_Data(1, 0xff);
 12716  0787  30FF               	movlw	255
 12717  0788  0020               	movlb	0	; select bank0
 12718  0789  00A4               	movwf	??_Flash_Memory_Initialization
 12719  078A  0824               	movf	??_Flash_Memory_Initialization,w
 12720  078B  00A0               	movwf	setMemory_Data@data
 12721  078C  3001               	movlw	1
 12722  078D  3199  218D  3186   	fcall	_setMemory_Data
 12723                           
 12724                           ;MCU_B1.c: 957: setMemory_Data(2, 0xff);
 12725  0790  30FF               	movlw	255
 12726  0791  0020               	movlb	0	; select bank0
 12727  0792  00A4               	movwf	??_Flash_Memory_Initialization
 12728  0793  0824               	movf	??_Flash_Memory_Initialization,w
 12729  0794  00A0               	movwf	setMemory_Data@data
 12730  0795  3002               	movlw	2
 12731  0796  3199  218D  3186   	fcall	_setMemory_Data
 12732                           
 12733                           ;MCU_B1.c: 958: setMemory_Data(3, 0xff);
 12734  0799  30FF               	movlw	255
 12735  079A  0020               	movlb	0	; select bank0
 12736  079B  00A4               	movwf	??_Flash_Memory_Initialization
 12737  079C  0824               	movf	??_Flash_Memory_Initialization,w
 12738  079D  00A0               	movwf	setMemory_Data@data
 12739  079E  3003               	movlw	3
 12740  079F  3199  218D  3186   	fcall	_setMemory_Data
 12741                           
 12742                           ;MCU_B1.c: 959: setMemory_Data(4, 0xff);
 12743  07A2  30FF               	movlw	255
 12744  07A3  0020               	movlb	0	; select bank0
 12745  07A4  00A4               	movwf	??_Flash_Memory_Initialization
 12746  07A5  0824               	movf	??_Flash_Memory_Initialization,w
 12747  07A6  00A0               	movwf	setMemory_Data@data
 12748  07A7  3004               	movlw	4
 12749  07A8  3199  218D  3186   	fcall	_setMemory_Data
 12750                           
 12751                           ;MCU_B1.c: 960: setMemory_Data(5, 0xff);
 12752  07AB  30FF               	movlw	255
 12753  07AC  0020               	movlb	0	; select bank0
 12754  07AD  00A4               	movwf	??_Flash_Memory_Initialization
 12755  07AE  0824               	movf	??_Flash_Memory_Initialization,w
 12756  07AF  00A0               	movwf	setMemory_Data@data
 12757  07B0  3005               	movlw	5
 12758  07B1  3199  218D  3186   	fcall	_setMemory_Data
 12759                           
 12760                           ;MCU_B1.c: 961: setMemory_Data(31, 0xaa);
 12761  07B4  30AA               	movlw	170
 12762  07B5  0020               	movlb	0	; select bank0
 12763  07B6  00A4               	movwf	??_Flash_Memory_Initialization
 12764  07B7  0824               	movf	??_Flash_Memory_Initialization,w
 12765  07B8  00A0               	movwf	setMemory_Data@data
 12766  07B9  301F               	movlw	31
 12767  07BA  3199  218D  3186   	fcall	_setMemory_Data
 12768                           
 12769                           ;MCU_B1.c: 966: GIE = 0;
 12770  07BD  138B               	bcf	11,7	;volatile
 12771                           
 12772                           ;MCU_B1.c: 967: Flash_Memory_Write();
 12773  07BE  319F  279E         	fcall	_Flash_Memory_Write
 12774                           
 12775                           ;MCU_B1.c: 968: GIE = 1;
 12776  07C0  178B               	bsf	11,7	;volatile
 12777                           
 12778                           ;MCU_B1.c: 969: myMain.FirstOpen = 1;
 12779  07C1  0021               	movlb	1	; select bank1
 12780  07C2  15AE               	bsf	_myMain^(0+128),3
 12781                           
 12782                           ;MCU_B1.c: 970: myMain.First = 1;
 12783  07C3  16AE               	bsf	_myMain^(0+128),5
 12784                           
 12785                           ;MCU_B1.c: 971: myMain.InitDimmer = 1;
 12786  07C4  1638               	bsf	(_myMain^(0+128)+10),4
 12787  07C5  0008               	return
 12788  07C6                     __end_of_Flash_Memory_Initialization:	
 12789                           
 12790                           	psect	text80
 12791  198D                     __ptext80:	
 12792 ;; *************** function _setMemory_Data *****************
 12793 ;; Defined at:
 12794 ;;		line 1094 in file "../src/MCU_B1.c"
 12795 ;; Parameters:    Size  Location     Type
 12796 ;;  address         1    wreg     unsigned char 
 12797 ;;  data            1    0[BANK0 ] unsigned char 
 12798 ;; Auto vars:     Size  Location     Type
 12799 ;;  address         1    2[BANK0 ] unsigned char 
 12800 ;; Return value:  Size  Location     Type
 12801 ;;		None               void
 12802 ;; Registers used:
 12803 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12804 ;; Tracked objects:
 12805 ;;		On entry : 0/0
 12806 ;;		On exit  : 0/0
 12807 ;;		Unchanged: 0/0
 12808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12809 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12810 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12811 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12812 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12813 ;;Total ram usage:        3 bytes
 12814 ;; Hardware stack levels used:    1
 12815 ;; Hardware stack levels required when called:    5
 12816 ;; This function calls:
 12817 ;;		Nothing
 12818 ;; This function is called by:
 12819 ;;		_Flash_Memory_Initialization
 12820 ;;		_Flash_Memory_Modify
 12821 ;; This function uses a non-reentrant model
 12822 ;;
 12823                           
 12824                           
 12825                           ;psect for function _setMemory_Data
 12826  198D                     _setMemory_Data:	
 12827                           
 12828                           ;incstack = 0
 12829                           ; Regs used in _setMemory_Data: [wreg+fsr1l+fsr1h+status,2+status,0]
 12830                           ;setMemory_Data@address stored from wreg
 12831  198D  0020               	movlb	0	; select bank0
 12832  198E  00A2               	movwf	setMemory_Data@address
 12833                           
 12834                           ;MCU_B1.c: 1095: Memory.Data[address] = data;
 12835  198F  0820               	movf	setMemory_Data@data,w
 12836  1990  00A1               	movwf	??_setMemory_Data
 12837  1991  0822               	movf	setMemory_Data@address,w
 12838  1992  3E20               	addlw	_Memory& (0+255)
 12839  1993  0086               	movwf	6
 12840  1994  3002               	movlw	2	; select bank4/5
 12841  1995  0087               	movwf	7
 12842  1996  0821               	movf	??_setMemory_Data,w
 12843  1997  0081               	movwf	1
 12844  1998  0008               	return
 12845  1999                     __end_of_setMemory_Data:	
 12846                           
 12847                           	psect	text81
 12848  1F9E                     __ptext81:	
 12849 ;; *************** function _Flash_Memory_Write *****************
 12850 ;; Defined at:
 12851 ;;		line 1023 in file "../src/MCU_B1.c"
 12852 ;; Parameters:    Size  Location     Type
 12853 ;;		None
 12854 ;; Auto vars:     Size  Location     Type
 12855 ;;  i               1    1[BANK0 ] unsigned char 
 12856 ;; Return value:  Size  Location     Type
 12857 ;;		None               void
 12858 ;; Registers used:
 12859 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12860 ;; Tracked objects:
 12861 ;;		On entry : 0/0
 12862 ;;		On exit  : 0/0
 12863 ;;		Unchanged: 0/0
 12864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12866 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12867 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12868 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12869 ;;Total ram usage:        2 bytes
 12870 ;; Hardware stack levels used:    1
 12871 ;; Hardware stack levels required when called:    6
 12872 ;; This function calls:
 12873 ;;		_Flash_Memory_Unlock
 12874 ;; This function is called by:
 12875 ;;		_Flash_Memory_Initialization
 12876 ;;		_Flash_Memory_Modify
 12877 ;; This function uses a non-reentrant model
 12878 ;;
 12879                           
 12880                           
 12881                           ;psect for function _Flash_Memory_Write
 12882  1F9E                     _Flash_Memory_Write:	
 12883                           
 12884                           ;MCU_B1.c: 1024: char i = 0;
 12885                           
 12886                           ;incstack = 0
 12887                           ; Regs used in _Flash_Memory_Write: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12888  1F9E  0020               	movlb	0	; select bank0
 12889  1F9F  01A1               	clrf	Flash_Memory_Write@i
 12890                           
 12891                           ;MCU_B1.c: 1025: CFGS = 0;
 12892  1FA0  0023               	movlb	3	; select bank3
 12893  1FA1  1315               	bcf	21,6	;volatile
 12894                           
 12895                           ;MCU_B1.c: 1026: PMADRH = 0x30;
 12896  1FA2  3030               	movlw	48
 12897  1FA3  0092               	movwf	18	;volatile
 12898                           
 12899                           ;MCU_B1.c: 1027: PMDATH = 0;
 12900  1FA4  0194               	clrf	20	;volatile
 12901                           
 12902                           ;MCU_B1.c: 1028: FREE = 0;
 12903  1FA5  1215               	bcf	21,4	;volatile
 12904                           
 12905                           ;MCU_B1.c: 1029: LWLO = 1;
 12906  1FA6  1695               	bsf	21,5	;volatile
 12907                           
 12908                           ;MCU_B1.c: 1030: WREN = 1;
 12909  1FA7  1515               	bsf	21,2	;volatile
 12910                           
 12911                           ;MCU_B1.c: 1031: for (i = 0; i < 32; i++) {
 12912  1FA8  0020               	movlb	0	; select bank0
 12913  1FA9  01A1               	clrf	Flash_Memory_Write@i
 12914  1FAA  3020               	movlw	32
 12915  1FAB  0221               	subwf	Flash_Memory_Write@i,w
 12916  1FAC  1803               	btfsc	3,0
 12917  1FAD  2FC6               	goto	l1456
 12918  1FAE                     l7654:	
 12919                           
 12920                           ;MCU_B1.c: 1032: PMADRL = i;
 12921  1FAE  0821               	movf	Flash_Memory_Write@i,w
 12922  1FAF  0023               	movlb	3	; select bank3
 12923  1FB0  0091               	movwf	17	;volatile
 12924                           
 12925                           ;MCU_B1.c: 1033: PMDATL = Memory.Data[i];
 12926  1FB1  0020               	movlb	0	; select bank0
 12927  1FB2  0821               	movf	Flash_Memory_Write@i,w
 12928  1FB3  3E20               	addlw	_Memory& (0+255)
 12929  1FB4  0086               	movwf	6
 12930  1FB5  3002               	movlw	2	; select bank4/5
 12931  1FB6  0087               	movwf	7
 12932  1FB7  0801               	movf	1,w
 12933  1FB8  0023               	movlb	3	; select bank3
 12934  1FB9  0093               	movwf	19	;volatile
 12935                           
 12936                           ;MCU_B1.c: 1034: Flash_Memory_Unlock();
 12937  1FBA  3199  2140  319F   	fcall	_Flash_Memory_Unlock
 12938  1FBD  3001               	movlw	1
 12939  1FBE  0020               	movlb	0	; select bank0
 12940  1FBF  00A0               	movwf	??_Flash_Memory_Write
 12941  1FC0  0820               	movf	??_Flash_Memory_Write,w
 12942  1FC1  07A1               	addwf	Flash_Memory_Write@i,f
 12943  1FC2  3020               	movlw	32
 12944  1FC3  0221               	subwf	Flash_Memory_Write@i,w
 12945  1FC4  1C03               	skipc
 12946  1FC5  2FAE               	goto	l7654
 12947  1FC6                     l1456:	
 12948                           
 12949                           ;MCU_B1.c: 1035: }
 12950                           ;MCU_B1.c: 1036: LWLO = 0;
 12951  1FC6  0023               	movlb	3	; select bank3
 12952  1FC7  1295               	bcf	21,5	;volatile
 12953                           
 12954                           ;MCU_B1.c: 1037: Flash_Memory_Unlock();
 12955  1FC8  3199  2140         	fcall	_Flash_Memory_Unlock
 12956                           
 12957                           ;MCU_B1.c: 1038: WREN = 0;
 12958  1FCA  0023               	movlb	3	; select bank3
 12959  1FCB  1115               	bcf	21,2	;volatile
 12960  1FCC  0008               	return
 12961  1FCD                     __end_of_Flash_Memory_Write:	
 12962                           
 12963                           	psect	text82
 12964  1940                     __ptext82:	
 12965 ;; *************** function _Flash_Memory_Unlock *****************
 12966 ;; Defined at:
 12967 ;;		line 1002 in file "../src/MCU_B1.c"
 12968 ;; Parameters:    Size  Location     Type
 12969 ;;		None
 12970 ;; Auto vars:     Size  Location     Type
 12971 ;;		None
 12972 ;; Return value:  Size  Location     Type
 12973 ;;		None               void
 12974 ;; Registers used:
 12975 ;;		wreg
 12976 ;; Tracked objects:
 12977 ;;		On entry : 0/0
 12978 ;;		On exit  : 0/0
 12979 ;;		Unchanged: 0/0
 12980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 12981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12984 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 12985 ;;Total ram usage:        0 bytes
 12986 ;; Hardware stack levels used:    1
 12987 ;; Hardware stack levels required when called:    5
 12988 ;; This function calls:
 12989 ;;		Nothing
 12990 ;; This function is called by:
 12991 ;;		_Flash_Memory_Write
 12992 ;;		_Flash_Memory_Erasing
 12993 ;; This function uses a non-reentrant model
 12994 ;;
 12995                           
 12996                           
 12997                           ;psect for function _Flash_Memory_Unlock
 12998  1940                     _Flash_Memory_Unlock:	
 12999                           
 13000                           ;MCU_B1.c: 1003: PMCON2 = 0x55;
 13001                           
 13002                           ;incstack = 0
 13003                           ; Regs used in _Flash_Memory_Unlock: [wreg]
 13004  1940  3055               	movlw	85
 13005  1941  0023               	movlb	3	; select bank3
 13006  1942  0096               	movwf	22	;volatile
 13007                           
 13008                           ;MCU_B1.c: 1004: PMCON2 = 0xaa;
 13009  1943  30AA               	movlw	170
 13010  1944  0096               	movwf	22	;volatile
 13011                           
 13012                           ;MCU_B1.c: 1005: WR = 1;
 13013  1945  1495               	bsf	21,1	;volatile
 13014                           
 13015                           ;MCU_B1.c: 1006: __nop();
 13016  1946  0000               	nop
 13017                           
 13018                           ;MCU_B1.c: 1007: __nop();
 13019  1947  0000               	nop
 13020  1948  0008               	return
 13021  1949                     __end_of_Flash_Memory_Unlock:	
 13022                           
 13023                           	psect	text83
 13024  1C54                     __ptext83:	
 13025 ;; *************** function _Flash_Memory_Read *****************
 13026 ;; Defined at:
 13027 ;;		line 1011 in file "../src/MCU_B1.c"
 13028 ;; Parameters:    Size  Location     Type
 13029 ;;  address         1    wreg     unsigned char 
 13030 ;; Auto vars:     Size  Location     Type
 13031 ;;  address         1    2[BANK0 ] unsigned char 
 13032 ;;  ret             1    3[BANK0 ] unsigned char 
 13033 ;;  i               1    1[BANK0 ] unsigned char 
 13034 ;; Return value:  Size  Location     Type
 13035 ;;                  1    wreg      unsigned char 
 13036 ;; Registers used:
 13037 ;;		wreg, status,2
 13038 ;; Tracked objects:
 13039 ;;		On entry : 0/0
 13040 ;;		On exit  : 0/0
 13041 ;;		Unchanged: 0/0
 13042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13044 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13045 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13046 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13047 ;;Total ram usage:        4 bytes
 13048 ;; Hardware stack levels used:    1
 13049 ;; Hardware stack levels required when called:    5
 13050 ;; This function calls:
 13051 ;;		Nothing
 13052 ;; This function is called by:
 13053 ;;		_Flash_Memory_Initialization
 13054 ;;		_Flash_Memory_Modify
 13055 ;; This function uses a non-reentrant model
 13056 ;;
 13057                           
 13058                           
 13059                           ;psect for function _Flash_Memory_Read
 13060  1C54                     _Flash_Memory_Read:	
 13061                           
 13062                           ;incstack = 0
 13063                           ; Regs used in _Flash_Memory_Read: [wreg+status,2]
 13064                           ;Flash_Memory_Read@address stored from wreg
 13065  1C54  0020               	movlb	0	; select bank0
 13066  1C55  00A2               	movwf	Flash_Memory_Read@address
 13067                           
 13068                           ;MCU_B1.c: 1012: char i = 0, ret = 0;
 13069  1C56  01A1               	clrf	Flash_Memory_Read@i
 13070  1C57  01A3               	clrf	Flash_Memory_Read@ret
 13071                           
 13072                           ;MCU_B1.c: 1013: PMADRH = 0x30;
 13073  1C58  3030               	movlw	48
 13074  1C59  0023               	movlb	3	; select bank3
 13075  1C5A  0092               	movwf	18	;volatile
 13076                           
 13077                           ;MCU_B1.c: 1014: PMADRL = address;
 13078  1C5B  0020               	movlb	0	; select bank0
 13079  1C5C  0822               	movf	Flash_Memory_Read@address,w
 13080  1C5D  0023               	movlb	3	; select bank3
 13081  1C5E  0091               	movwf	17	;volatile
 13082                           
 13083                           ;MCU_B1.c: 1015: CFGS = 0;
 13084  1C5F  1315               	bcf	21,6	;volatile
 13085                           
 13086                           ;MCU_B1.c: 1016: RD = 1;
 13087  1C60  1415               	bsf	21,0	;volatile
 13088                           
 13089                           ;MCU_B1.c: 1017: i = PMDATH;
 13090  1C61  0814               	movf	20,w	;volatile
 13091  1C62  0020               	movlb	0	; select bank0
 13092  1C63  00A0               	movwf	??_Flash_Memory_Read
 13093  1C64  0820               	movf	??_Flash_Memory_Read,w
 13094  1C65  00A1               	movwf	Flash_Memory_Read@i
 13095                           
 13096                           ;MCU_B1.c: 1018: ret = PMDATL;
 13097  1C66  0023               	movlb	3	; select bank3
 13098  1C67  0813               	movf	19,w	;volatile
 13099  1C68  0020               	movlb	0	; select bank0
 13100  1C69  00A0               	movwf	??_Flash_Memory_Read
 13101  1C6A  0820               	movf	??_Flash_Memory_Read,w
 13102  1C6B  00A3               	movwf	Flash_Memory_Read@ret
 13103                           
 13104                           ;MCU_B1.c: 1019: return ret;
 13105  1C6C  0823               	movf	Flash_Memory_Read@ret,w
 13106  1C6D  0008               	return
 13107  1C6E                     __end_of_Flash_Memory_Read:	
 13108                           
 13109                           	psect	text84
 13110  047F                     __ptext84:	
 13111 ;; *************** function _Exception_Main *****************
 13112 ;; Defined at:
 13113 ;;		line 499 in file "../src/main_B1.c"
 13114 ;; Parameters:    Size  Location     Type
 13115 ;;		None
 13116 ;; Auto vars:     Size  Location     Type
 13117 ;;  i               2   18[BANK0 ] int 
 13118 ;;  i               2   16[BANK0 ] int 
 13119 ;;  lights          1   21[BANK0 ] unsigned char 
 13120 ;;  error           1   20[BANK0 ] unsigned char 
 13121 ;;  count           1   15[BANK0 ] unsigned char 
 13122 ;;  status          1   14[BANK0 ] unsigned char 
 13123 ;; Return value:  Size  Location     Type
 13124 ;;		None               void
 13125 ;; Registers used:
 13126 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13127 ;; Tracked objects:
 13128 ;;		On entry : 0/0
 13129 ;;		On exit  : 0/0
 13130 ;;		Unchanged: 0/0
 13131 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13133 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13134 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13135 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13136 ;;Total ram usage:        9 bytes
 13137 ;; Hardware stack levels used:    1
 13138 ;; Hardware stack levels required when called:    7
 13139 ;; This function calls:
 13140 ;;		_getDimmerLights_Line
 13141 ;;		_getDimmerLights_Status
 13142 ;;		_getMain_All_Error_Status
 13143 ;;		_getMain_All_LightsStatus
 13144 ;;		_setBuz
 13145 ;;		_setDimmerLights_SwOff
 13146 ;;		_setLED
 13147 ;; This function is called by:
 13148 ;;		_main
 13149 ;; This function uses a non-reentrant model
 13150 ;;
 13151                           
 13152                           
 13153                           ;psect for function _Exception_Main
 13154  047F                     _Exception_Main:	
 13155                           
 13156                           ;main_B1.c: 500: char error = getMain_All_Error_Status(0);
 13157                           
 13158                           ;incstack = 0
 13159                           ; Regs used in _Exception_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13160  047F  3000               	movlw	0
 13161  0480  319F  27CD  3184   	fcall	_getMain_All_Error_Status
 13162  0483  0020               	movlb	0	; select bank0
 13163  0484  00AD               	movwf	??_Exception_Main
 13164  0485  082D               	movf	??_Exception_Main,w
 13165  0486  00B4               	movwf	Exception_Main@error
 13166                           
 13167                           ;main_B1.c: 501: char lights = 0, count = 2;
 13168  0487  01B5               	clrf	Exception_Main@lights
 13169  0488  3002               	movlw	2
 13170  0489  00AD               	movwf	??_Exception_Main
 13171  048A  082D               	movf	??_Exception_Main,w
 13172  048B  00AF               	movwf	Exception_Main@count
 13173                           
 13174                           ;main_B1.c: 502: char status = 0;
 13175  048C  01AE               	clrf	Exception_Main@status
 13176                           
 13177                           ;main_B1.c: 504: if (myMain.Error_Run == 1) {
 13178  048D  0021               	movlb	1	; select bank1
 13179  048E  1DB8               	btfss	(_myMain^(0+128)+10),3
 13180  048F  2C9F               	goto	l8986
 13181                           
 13182                           ;main_B1.c: 505: if (error == 0) {
 13183  0490  0020               	movlb	0	; select bank0
 13184  0491  08B4               	movf	Exception_Main@error,f
 13185  0492  1D03               	skipz
 13186  0493  0008               	return
 13187                           
 13188                           ;main_B1.c: 506: myMain.Error_Run = 0;
 13189  0494  0021               	movlb	1	; select bank1
 13190  0495  11B8               	bcf	(_myMain^(0+128)+10),3
 13191                           
 13192                           ;main_B1.c: 509: setLED(99, 10);
 13193  0496  300A               	movlw	10
 13194  0497  0020               	movlb	0	; select bank0
 13195  0498  00AD               	movwf	??_Exception_Main
 13196  0499  082D               	movf	??_Exception_Main,w
 13197  049A  00A2               	movwf	setLED@command
 13198  049B  3063               	movlw	99
 13199  049C  3193  230E         	fcall	_setLED
 13200                           
 13201                           ;main_B1.c: 522: }
 13202                           ;main_B1.c: 523: } else {
 13203  049E  0008               	return
 13204  049F                     l8986:	
 13205                           
 13206                           ;main_B1.c: 524: if (error != 0) {
 13207  049F  0020               	movlb	0	; select bank0
 13208  04A0  0834               	movf	Exception_Main@error,w
 13209  04A1  1903               	btfsc	3,2
 13210  04A2  0008               	return
 13211                           
 13212                           ;main_B1.c: 525: myMain.Error_Run = 1;
 13213  04A3  0021               	movlb	1	; select bank1
 13214  04A4  15B8               	bsf	(_myMain^(0+128)+10),3
 13215                           
 13216                           ;main_B1.c: 527: setLED(99, 11);
 13217  04A5  300B               	movlw	11
 13218  04A6  0020               	movlb	0	; select bank0
 13219  04A7  00AD               	movwf	??_Exception_Main
 13220  04A8  082D               	movf	??_Exception_Main,w
 13221  04A9  00A2               	movwf	setLED@command
 13222  04AA  3063               	movlw	99
 13223  04AB  3193  230E  3184   	fcall	_setLED
 13224                           
 13225                           ;main_B1.c: 538: switch (error) {
 13226  04AE  2D4B               	goto	l9034
 13227  04AF                     l8992:	
 13228                           ;main_B1.c: 539: case 2:
 13229                           
 13230                           
 13231                           ;main_B1.c: 546: if (getMain_All_LightsStatus() == 1) {
 13232  04AF  319A  22E4  3184   	fcall	_getMain_All_LightsStatus
 13233  04B2  3A01               	xorlw	1
 13234  04B3  1D03               	skipz
 13235  04B4  2CBE               	goto	l8996
 13236                           
 13237                           ;main_B1.c: 547: setBuz(10, 300);
 13238  04B5  302C               	movlw	44
 13239  04B6  0020               	movlb	0	; select bank0
 13240  04B7  00A9               	movwf	setBuz@time
 13241  04B8  3001               	movlw	1
 13242  04B9  00AA               	movwf	setBuz@time+1
 13243  04BA  300A               	movlw	10
 13244  04BB  3194  240B  3184   	fcall	_setBuz
 13245  04BE                     l8996:	
 13246                           
 13247                           ;main_B1.c: 548: }
 13248                           ;main_B1.c: 550: for (int i = 0; i < count; i++) {
 13249  04BE  0020               	movlb	0	; select bank0
 13250  04BF  01B0               	clrf	Exception_Main@i
 13251  04C0  01B1               	clrf	Exception_Main@i+1
 13252  04C1                     l9006:	
 13253  04C1  0831               	movf	Exception_Main@i+1,w
 13254  04C2  3A80               	xorlw	128
 13255  04C3  00AD               	movwf	??_Exception_Main
 13256  04C4  3080               	movlw	128
 13257  04C5  022D               	subwf	??_Exception_Main,w
 13258  04C6  1D03               	skipz
 13259  04C7  2CCA               	goto	u9965
 13260  04C8  082F               	movf	Exception_Main@count,w
 13261  04C9  0230               	subwf	Exception_Main@i,w
 13262  04CA                     u9965:	
 13263  04CA  1803               	btfsc	3,0
 13264  04CB  2CEC               	goto	u9960
 13265                           
 13266                           ;main_B1.c: 552: if (getDimmerLights_Status(i + 1) == 1) {
 13267  04CC  0020               	movlb	0	; select bank0
 13268  04CD  0830               	movf	Exception_Main@i,w
 13269  04CE  3E01               	addlw	1
 13270  04CF  3199  21FD  3184   	fcall	_getDimmerLights_Status
 13271  04D2  3A01               	xorlw	1
 13272  04D3  1D03               	skipz
 13273  04D4  2CE6               	goto	l9004
 13274                           
 13275                           ;main_B1.c: 553: DimmerLights->SwFlag = 1;
 13276  04D5  0021               	movlb	1	; select bank1
 13277  04D6  0856               	movf	_DimmerLights^(0+128),w
 13278  04D7  0086               	movwf	6
 13279  04D8  3001               	movlw	1	; select bank2/3
 13280  04D9  0087               	movwf	7
 13281  04DA  1401               	bsf	1,0
 13282                           
 13283                           ;main_B1.c: 554: DimmerLights->Status = 0;
 13284  04DB  0A56               	incf	_DimmerLights^(0+128),w
 13285  04DC  0086               	movwf	6
 13286  04DD  3001               	movlw	1	; select bank2/3
 13287  04DE  0087               	movwf	7
 13288  04DF  1001               	bcf	1,0
 13289                           
 13290                           ;main_B1.c: 555: setDimmerLights_SwOff(i + 1);
 13291  04E0  0020               	movlb	0	; select bank0
 13292  04E1  0830               	movf	Exception_Main@i,w
 13293  04E2  3E01               	addlw	1
 13294  04E3  3187  27C6  3184   	fcall	_setDimmerLights_SwOff
 13295  04E6                     l9004:	
 13296  04E6  3001               	movlw	1
 13297  04E7  0020               	movlb	0	; select bank0
 13298  04E8  07B0               	addwf	Exception_Main@i,f
 13299  04E9  3000               	movlw	0
 13300  04EA  3DB1               	addwfc	Exception_Main@i+1,f
 13301  04EB  2CC1               	goto	l9006
 13302  04EC                     u9960:	
 13303  04EC  0020               	movlb	0	; select bank0
 13304  04ED  0008               	return
 13305  04EE                     l9008:	
 13306                           ;main_B1.c: 561: case 3:
 13307                           
 13308                           ;main_B1.c: 556: }
 13309                           ;main_B1.c: 557: }
 13310                           ;main_B1.c: 560: break;
 13311                           
 13312                           
 13313                           ;main_B1.c: 563: setBuz(5, 300);
 13314  04EE  302C               	movlw	44
 13315  04EF  0020               	movlb	0	; select bank0
 13316  04F0  00A9               	movwf	setBuz@time
 13317  04F1  3001               	movlw	1
 13318  04F2  00AA               	movwf	setBuz@time+1
 13319  04F3  3005               	movlw	5
 13320  04F4  3194  240B  3184   	fcall	_setBuz
 13321                           
 13322                           ;main_B1.c: 564: lights = getDimmerLights_Line();
 13323  04F7  319B  231D  3184   	fcall	_getDimmerLights_Line
 13324  04FA  0020               	movlb	0	; select bank0
 13325  04FB  00AD               	movwf	??_Exception_Main
 13326  04FC  082D               	movf	??_Exception_Main,w
 13327  04FD  00B5               	movwf	Exception_Main@lights
 13328                           
 13329                           ;main_B1.c: 565: if (lights == 0) {
 13330  04FE  08B5               	movf	Exception_Main@lights,f
 13331  04FF  1D03               	skipz
 13332  0500  2D30               	goto	l9026
 13333                           
 13334                           ;main_B1.c: 567: for (int i = 0; i < count; i++) {
 13335  0501  01B2               	clrf	Exception_Main@i_6923
 13336  0502  01B3               	clrf	Exception_Main@i_6923+1
 13337  0503                     l9024:	
 13338  0503  0833               	movf	Exception_Main@i_6923+1,w
 13339  0504  3A80               	xorlw	128
 13340  0505  00AD               	movwf	??_Exception_Main
 13341  0506  3080               	movlw	128
 13342  0507  022D               	subwf	??_Exception_Main,w
 13343  0508  1D03               	skipz
 13344  0509  2D0C               	goto	u9995
 13345  050A  082F               	movf	Exception_Main@count,w
 13346  050B  0232               	subwf	Exception_Main@i_6923,w
 13347  050C                     u9995:	
 13348  050C  1803               	btfsc	3,0
 13349  050D  2D2E               	goto	u9990
 13350                           
 13351                           ;main_B1.c: 569: if (getDimmerLights_Status(i + 1) == 1) {
 13352  050E  0020               	movlb	0	; select bank0
 13353  050F  0832               	movf	Exception_Main@i_6923,w
 13354  0510  3E01               	addlw	1
 13355  0511  3199  21FD  3184   	fcall	_getDimmerLights_Status
 13356  0514  3A01               	xorlw	1
 13357  0515  1D03               	skipz
 13358  0516  2D28               	goto	l9022
 13359                           
 13360                           ;main_B1.c: 570: DimmerLights->SwFlag = 1;
 13361  0517  0021               	movlb	1	; select bank1
 13362  0518  0856               	movf	_DimmerLights^(0+128),w
 13363  0519  0086               	movwf	6
 13364  051A  3001               	movlw	1	; select bank2/3
 13365  051B  0087               	movwf	7
 13366  051C  1401               	bsf	1,0
 13367                           
 13368                           ;main_B1.c: 571: DimmerLights->Status = 0;
 13369  051D  0A56               	incf	_DimmerLights^(0+128),w
 13370  051E  0086               	movwf	6
 13371  051F  3001               	movlw	1	; select bank2/3
 13372  0520  0087               	movwf	7
 13373  0521  1001               	bcf	1,0
 13374                           
 13375                           ;main_B1.c: 572: setDimmerLights_SwOff(i + 1);
 13376  0522  0020               	movlb	0	; select bank0
 13377  0523  0832               	movf	Exception_Main@i_6923,w
 13378  0524  3E01               	addlw	1
 13379  0525  3187  27C6  3184   	fcall	_setDimmerLights_SwOff
 13380  0528                     l9022:	
 13381  0528  3001               	movlw	1
 13382  0529  0020               	movlb	0	; select bank0
 13383  052A  07B2               	addwf	Exception_Main@i_6923,f
 13384  052B  3000               	movlw	0
 13385  052C  3DB3               	addwfc	Exception_Main@i_6923+1,f
 13386  052D  2D03               	goto	l9024
 13387  052E                     u9990:	
 13388  052E  0020               	movlb	0	; select bank0
 13389  052F  0008               	return
 13390  0530                     l9026:	
 13391                           ;main_B1.c: 573: }
 13392                           ;main_B1.c: 574: }
 13393                           ;main_B1.c: 575: } else {
 13394                           
 13395                           
 13396                           ;main_B1.c: 577: if (getDimmerLights_Status(lights) == 1) {
 13397  0530  0020               	movlb	0	; select bank0
 13398  0531  0835               	movf	Exception_Main@lights,w
 13399  0532  3199  21FD  3184   	fcall	_getDimmerLights_Status
 13400  0535  3A01               	xorlw	1
 13401  0536  1903               	btfsc	3,2
 13402  0537  2D3A               	goto	l9028
 13403  0538  0020               	movlb	0	; select bank0
 13404  0539  0008               	return
 13405  053A                     l9028:	
 13406                           
 13407                           ;main_B1.c: 579: DimmerLights->SwFlag = 1;
 13408  053A  0021               	movlb	1	; select bank1
 13409  053B  0856               	movf	_DimmerLights^(0+128),w
 13410  053C  0086               	movwf	6
 13411  053D  3001               	movlw	1	; select bank2/3
 13412  053E  0087               	movwf	7
 13413  053F  1401               	bsf	1,0
 13414                           
 13415                           ;main_B1.c: 580: DimmerLights->Status = 0;
 13416  0540  0A56               	incf	_DimmerLights^(0+128),w
 13417  0541  0086               	movwf	6
 13418  0542  3001               	movlw	1	; select bank2/3
 13419  0543  0087               	movwf	7
 13420  0544  1001               	bcf	1,0
 13421                           
 13422                           ;main_B1.c: 581: setDimmerLights_SwOff(lights);
 13423  0545  0020               	movlb	0	; select bank0
 13424  0546  0835               	movf	Exception_Main@lights,w
 13425  0547  3187  27C6         	fcall	_setDimmerLights_SwOff
 13426  0549  0020               	movlb	0	; select bank0
 13427  054A  0008               	return
 13428  054B                     l9034:	
 13429                           ;main_B1.c: 586: }
 13430                           
 13431                           ;main_B1.c: 582: }
 13432                           ;main_B1.c: 583: }
 13433                           ;main_B1.c: 585: break;
 13434                           
 13435  054B  0020               	movlb	0	; select bank0
 13436  054C  0834               	movf	Exception_Main@error,w
 13437                           
 13438                           ; Switch size 1, requested type "space"
 13439                           ; Number of cases is 2, Range of values is 2 to 3
 13440                           ; switch strategies available:
 13441                           ; Name         Instructions Cycles
 13442                           ; simple_byte            7     4 (average)
 13443                           ; direct_byte           13     9 (fixed)
 13444                           ; jumptable            263     9 (fixed)
 13445                           ;	Chosen strategy is simple_byte
 13446  054D  3A02               	xorlw	2	; case 2
 13447  054E  1903               	skipnz
 13448  054F  2CAF               	goto	l8992
 13449  0550  3A01               	xorlw	1	; case 3
 13450  0551  1903               	skipnz
 13451  0552  2CEE               	goto	l9008
 13452  0553  2D55               	goto	l2914
 13453  0554  0008               	return
 13454  0555                     l2914:	
 13455  0555  0008               	return
 13456  0556                     __end_of_Exception_Main:	
 13457                           
 13458                           	psect	text85
 13459  1B1D                     __ptext85:	
 13460 ;; *************** function _getDimmerLights_Line *****************
 13461 ;; Defined at:
 13462 ;;		line 1045 in file "../src/Dimmer_B1.c"
 13463 ;; Parameters:    Size  Location     Type
 13464 ;;		None
 13465 ;; Auto vars:     Size  Location     Type
 13466 ;;  line            1    1[BANK0 ] unsigned char 
 13467 ;; Return value:  Size  Location     Type
 13468 ;;                  1    wreg      unsigned char 
 13469 ;; Registers used:
 13470 ;;		wreg, status,2
 13471 ;; Tracked objects:
 13472 ;;		On entry : 0/0
 13473 ;;		On exit  : 0/0
 13474 ;;		Unchanged: 0/0
 13475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13477 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13478 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13479 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13480 ;;Total ram usage:        2 bytes
 13481 ;; Hardware stack levels used:    1
 13482 ;; Hardware stack levels required when called:    5
 13483 ;; This function calls:
 13484 ;;		Nothing
 13485 ;; This function is called by:
 13486 ;;		_Exception_Main
 13487 ;; This function uses a non-reentrant model
 13488 ;;
 13489                           
 13490                           
 13491                           ;psect for function _getDimmerLights_Line
 13492  1B1D                     _getDimmerLights_Line:	
 13493                           
 13494                           ;Dimmer_B1.c: 1046: char line = 0;
 13495                           
 13496                           ;incstack = 0
 13497                           ; Regs used in _getDimmerLights_Line: [wreg+status,2]
 13498  1B1D  0020               	movlb	0	; select bank0
 13499  1B1E  01A1               	clrf	getDimmerLights_Line@line
 13500                           
 13501                           ;Dimmer_B1.c: 1048: if (DimmerLights1.Line == 1) {
 13502  1B1F  0022               	movlb	2	; select bank2
 13503  1B20  1CE8               	btfss	(_DimmerLights1^(0+256)+1),1
 13504  1B21  2B26               	goto	l920
 13505                           
 13506                           ;Dimmer_B1.c: 1049: line = 1;
 13507  1B22  0020               	movlb	0	; select bank0
 13508  1B23  01A1               	clrf	getDimmerLights_Line@line
 13509  1B24  0AA1               	incf	getDimmerLights_Line@line,f
 13510                           
 13511                           ;Dimmer_B1.c: 1050: }
 13512  1B25  2B2E               	goto	l921
 13513  1B26                     l920:	
 13514                           
 13515                           ;Dimmer_B1.c: 1053: else if (DimmerLights2.Line == 1) {
 13516  1B26  0023               	movlb	3	; select bank3
 13517  1B27  1CD1               	btfss	(_DimmerLights2^(0+384)+1),1
 13518  1B28  2B2E               	goto	l921
 13519                           
 13520                           ;Dimmer_B1.c: 1054: line = 2;
 13521  1B29  3002               	movlw	2
 13522  1B2A  0020               	movlb	0	; select bank0
 13523  1B2B  00A0               	movwf	??_getDimmerLights_Line
 13524  1B2C  0820               	movf	??_getDimmerLights_Line,w
 13525  1B2D  00A1               	movwf	getDimmerLights_Line@line
 13526  1B2E                     l921:	
 13527                           
 13528                           ;Dimmer_B1.c: 1055: }
 13529                           ;Dimmer_B1.c: 1062: return line;
 13530  1B2E  0020               	movlb	0	; select bank0
 13531  1B2F  0821               	movf	getDimmerLights_Line@line,w
 13532  1B30  0008               	return
 13533  1B31                     __end_of_getDimmerLights_Line:	
 13534                           
 13535                           	psect	text86
 13536  1D90                     __ptext86:	
 13537 ;; *************** function _DimmerLights_Main *****************
 13538 ;; Defined at:
 13539 ;;		line 774 in file "../src/Dimmer_B1.c"
 13540 ;; Parameters:    Size  Location     Type
 13541 ;;		None
 13542 ;; Auto vars:     Size  Location     Type
 13543 ;;		None
 13544 ;; Return value:  Size  Location     Type
 13545 ;;		None               void
 13546 ;; Registers used:
 13547 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13548 ;; Tracked objects:
 13549 ;;		On entry : 0/0
 13550 ;;		On exit  : 0/0
 13551 ;;		Unchanged: 0/0
 13552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13556 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13557 ;;Total ram usage:        0 bytes
 13558 ;; Hardware stack levels used:    1
 13559 ;; Hardware stack levels required when called:   10
 13560 ;; This function calls:
 13561 ;;		_getLoad_OK
 13562 ;;		_getMain_All_Error_Status
 13563 ;;		_getMain_All_LightsStatus
 13564 ;;		_setDimmerLights_Main
 13565 ;; This function is called by:
 13566 ;;		_main
 13567 ;; This function uses a non-reentrant model
 13568 ;;
 13569                           
 13570                           
 13571                           ;psect for function _DimmerLights_Main
 13572  1D90                     _DimmerLights_Main:	
 13573                           
 13574                           ;Dimmer_B1.c: 777: if (Dimmer.LoadGO == 1) {
 13575                           
 13576                           ;incstack = 0
 13577                           ; Regs used in _DimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13578  1D90  0022               	movlb	2	; select bank2
 13579  1D91  1CAC               	btfss	_Dimmer^(0+256),1
 13580  1D92  2DA8               	goto	l8606
 13581                           
 13582                           ;Dimmer_B1.c: 778: if (getLoad_OK() == 1 || getMain_All_Error_Status(0) != 0 || getMain_
      +                          All_LightsStatus() == 0) {
 13583  1D93  3199  210F  319D   	fcall	_getLoad_OK
 13584  1D96  3A01               	xorlw	1
 13585  1D97  1903               	skipnz
 13586  1D98  2DA6               	goto	l859
 13587  1D99  3000               	movlw	0
 13588  1D9A  319F  27CD  319D   	fcall	_getMain_All_Error_Status
 13589  1D9D  3800               	iorlw	0
 13590  1D9E  1D03               	skipz
 13591  1D9F  2DA6               	goto	l859
 13592  1DA0  319A  22E4  319D   	fcall	_getMain_All_LightsStatus
 13593  1DA3  3800               	iorlw	0
 13594  1DA4  1D03               	skipz
 13595  1DA5  2DA8               	goto	l8606
 13596  1DA6                     l859:	
 13597                           
 13598                           ;Dimmer_B1.c: 779: Dimmer.LoadGO = 0;
 13599  1DA6  0022               	movlb	2	; select bank2
 13600  1DA7  10AC               	bcf	_Dimmer^(0+256),1
 13601  1DA8                     l8606:	
 13602                           
 13603                           ;Dimmer_B1.c: 780: }
 13604                           ;Dimmer_B1.c: 781: }
 13605                           ;Dimmer_B1.c: 785: setDimmerLights_Main(1);
 13606  1DA8  3001               	movlw	1
 13607  1DA9  3196  264F  319D   	fcall	_setDimmerLights_Main
 13608                           
 13609                           ;Dimmer_B1.c: 789: setDimmerLights_Main(2);
 13610  1DAC  3002               	movlw	2
 13611  1DAD  3196  264F         	fcall	_setDimmerLights_Main
 13612  1DAF  0008               	return
 13613  1DB0                     __end_of_DimmerLights_Main:	
 13614                           
 13615                           	psect	text87
 13616  164F                     __ptext87:	
 13617 ;; *************** function _setDimmerLights_Main *****************
 13618 ;; Defined at:
 13619 ;;		line 803 in file "../src/Dimmer_B1.c"
 13620 ;; Parameters:    Size  Location     Type
 13621 ;;  lights          1    wreg     unsigned char 
 13622 ;; Auto vars:     Size  Location     Type
 13623 ;;  lights          1    1[BANK1 ] unsigned char 
 13624 ;; Return value:  Size  Location     Type
 13625 ;;		None               void
 13626 ;; Registers used:
 13627 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13628 ;; Tracked objects:
 13629 ;;		On entry : 0/0
 13630 ;;		On exit  : 0/0
 13631 ;;		Unchanged: 0/0
 13632 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13634 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13636 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13637 ;;Total ram usage:        1 bytes
 13638 ;; Hardware stack levels used:    1
 13639 ;; Hardware stack levels required when called:    9
 13640 ;; This function calls:
 13641 ;;		_DimmerLights_SelectPointer
 13642 ;;		_getDimmerLights_Allow_Condition
 13643 ;;		_getMain_All_LightsStatus
 13644 ;;		_setDimmerLights_Dimming
 13645 ;;		_setDimmerLights_OnOff
 13646 ;; This function is called by:
 13647 ;;		_DimmerLights_Main
 13648 ;; This function uses a non-reentrant model
 13649 ;;
 13650                           
 13651                           
 13652                           ;psect for function _setDimmerLights_Main
 13653  164F                     _setDimmerLights_Main:	
 13654                           
 13655                           ;incstack = 0
 13656                           ; Regs used in _setDimmerLights_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13657                           ;setDimmerLights_Main@lights stored from wreg
 13658  164F  0021               	movlb	1	; select bank1
 13659  1650  00E7               	movwf	setDimmerLights_Main@lights^(0+128)
 13660                           
 13661                           ;Dimmer_B1.c: 805: DimmerLights_SelectPointer(lights);
 13662  1651  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13663  1652  319B  23C6  3196   	fcall	_DimmerLights_SelectPointer
 13664                           
 13665                           ;Dimmer_B1.c: 806: if (DimmerLights->Trigger == 1) {
 13666  1655  0021               	movlb	1	; select bank1
 13667  1656  0856               	movf	_DimmerLights^(0+128),w
 13668  1657  0086               	movwf	6
 13669  1658  3001               	movlw	1	; select bank2/3
 13670  1659  0087               	movwf	7
 13671  165A  1C81               	btfss	1,1
 13672  165B  2E7E               	goto	l7902
 13673                           
 13674                           ;Dimmer_B1.c: 807: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13675  165C  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13676  165D  3191  2140  3196   	fcall	_getDimmerLights_Allow_Condition
 13677  1660  3800               	iorlw	0
 13678  1661  1D03               	skipz
 13679  1662  0008               	return
 13680                           
 13681                           ;Dimmer_B1.c: 808: DimmerLights->Trigger = 0;
 13682  1663  0021               	movlb	1	; select bank1
 13683  1664  0856               	movf	_DimmerLights^(0+128),w
 13684  1665  0086               	movwf	6
 13685  1666  3001               	movlw	1	; select bank2/3
 13686  1667  0087               	movwf	7
 13687  1668  1081               	bcf	1,1
 13688                           
 13689                           ;Dimmer_B1.c: 809: if (DimmerLights->Switch == 1) {
 13690  1669  0856               	movf	_DimmerLights^(0+128),w
 13691  166A  0086               	movwf	6
 13692  166B  3001               	movlw	1	; select bank2/3
 13693  166C  0087               	movwf	7
 13694  166D  1D01               	btfss	1,2
 13695  166E  2E77               	goto	l7900
 13696                           
 13697                           ;Dimmer_B1.c: 810: setDimmerLights_OnOff(lights, 1);
 13698  166F  0020               	movlb	0	; select bank0
 13699  1670  01ED               	clrf	setDimmerLights_OnOff@command
 13700  1671  0AED               	incf	setDimmerLights_OnOff@command,f
 13701  1672  0021               	movlb	1	; select bank1
 13702  1673  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13703  1674  3186  262B         	fcall	_setDimmerLights_OnOff
 13704                           
 13705                           ;Dimmer_B1.c: 811: } else {
 13706  1676  0008               	return
 13707  1677                     l7900:	
 13708                           
 13709                           ;Dimmer_B1.c: 812: setDimmerLights_OnOff(lights, 0);
 13710  1677  0020               	movlb	0	; select bank0
 13711  1678  01ED               	clrf	setDimmerLights_OnOff@command
 13712  1679  0021               	movlb	1	; select bank1
 13713  167A  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13714  167B  3186  262B         	fcall	_setDimmerLights_OnOff
 13715                           
 13716                           ;Dimmer_B1.c: 813: }
 13717                           ;Dimmer_B1.c: 814: }
 13718                           ;Dimmer_B1.c: 815: } else {
 13719  167D  0008               	return
 13720  167E                     l7902:	
 13721                           
 13722                           ;Dimmer_B1.c: 816: if (getMain_All_LightsStatus() == 1) {
 13723  167E  319A  22E4  3196   	fcall	_getMain_All_LightsStatus
 13724  1681  3A01               	xorlw	1
 13725  1682  1D03               	skipz
 13726  1683  2EAD               	goto	l7914
 13727                           
 13728                           ;Dimmer_B1.c: 817: if (DimmerLights->DimmingTrigger == 1) {
 13729  1684  0021               	movlb	1	; select bank1
 13730  1685  0856               	movf	_DimmerLights^(0+128),w
 13731  1686  0086               	movwf	6
 13732  1687  3001               	movlw	1	; select bank2/3
 13733  1688  0087               	movwf	7
 13734  1689  1E01               	btfss	1,4
 13735  168A  0008               	return
 13736                           
 13737                           ;Dimmer_B1.c: 818: if (getDimmerLights_Allow_Condition(lights) == 0) {
 13738  168B  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13739  168C  3191  2140  3196   	fcall	_getDimmerLights_Allow_Condition
 13740  168F  3800               	iorlw	0
 13741  1690  1D03               	skipz
 13742  1691  0008               	return
 13743                           
 13744                           ;Dimmer_B1.c: 819: DimmerLights->DimmingTrigger = 0;
 13745  1692  0021               	movlb	1	; select bank1
 13746  1693  0856               	movf	_DimmerLights^(0+128),w
 13747  1694  0086               	movwf	6
 13748  1695  3001               	movlw	1	; select bank2/3
 13749  1696  0087               	movwf	7
 13750  1697  1201               	bcf	1,4
 13751                           
 13752                           ;Dimmer_B1.c: 820: if (DimmerLights->DimmingSwitch == 1) {
 13753  1698  0856               	movf	_DimmerLights^(0+128),w
 13754  1699  0086               	movwf	6
 13755  169A  3001               	movlw	1	; select bank2/3
 13756  169B  0087               	movwf	7
 13757  169C  1E81               	btfss	1,5
 13758  169D  2EA6               	goto	l7912
 13759                           
 13760                           ;Dimmer_B1.c: 821: setDimmerLights_Dimming(lights, 1);
 13761  169E  0020               	movlb	0	; select bank0
 13762  169F  01EA               	clrf	setDimmerLights_Dimming@status
 13763  16A0  0AEA               	incf	setDimmerLights_Dimming@status,f
 13764  16A1  0021               	movlb	1	; select bank1
 13765  16A2  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13766  16A3  3193  23B5         	fcall	_setDimmerLights_Dimming
 13767                           
 13768                           ;Dimmer_B1.c: 822: } else {
 13769  16A5  0008               	return
 13770  16A6                     l7912:	
 13771                           
 13772                           ;Dimmer_B1.c: 823: setDimmerLights_Dimming(lights, 0);
 13773  16A6  0020               	movlb	0	; select bank0
 13774  16A7  01EA               	clrf	setDimmerLights_Dimming@status
 13775  16A8  0021               	movlb	1	; select bank1
 13776  16A9  0867               	movf	setDimmerLights_Main@lights^(0+128),w
 13777  16AA  3193  23B5         	fcall	_setDimmerLights_Dimming
 13778                           
 13779                           ;Dimmer_B1.c: 824: }
 13780                           ;Dimmer_B1.c: 825: }
 13781                           ;Dimmer_B1.c: 826: }
 13782                           ;Dimmer_B1.c: 827: } else {
 13783  16AC  0008               	return
 13784  16AD                     l7914:	
 13785                           
 13786                           ;Dimmer_B1.c: 828: if (DimmerLights->DimmingTrigger == 1) {
 13787  16AD  0021               	movlb	1	; select bank1
 13788  16AE  0856               	movf	_DimmerLights^(0+128),w
 13789  16AF  0086               	movwf	6
 13790  16B0  3001               	movlw	1	; select bank2/3
 13791  16B1  0087               	movwf	7
 13792  16B2  1E01               	btfss	1,4
 13793  16B3  0008               	return
 13794                           
 13795                           ;Dimmer_B1.c: 829: DimmerLights->DimmingTrigger = 0;
 13796  16B4  0856               	movf	_DimmerLights^(0+128),w
 13797  16B5  0086               	movwf	6
 13798  16B6  3001               	movlw	1	; select bank2/3
 13799  16B7  0087               	movwf	7
 13800  16B8  1201               	bcf	1,4
 13801  16B9  0008               	return
 13802  16BA                     __end_of_setDimmerLights_Main:	
 13803                           
 13804                           	psect	text88
 13805  062B                     __ptext88:	
 13806 ;; *************** function _setDimmerLights_OnOff *****************
 13807 ;; Defined at:
 13808 ;;		line 837 in file "../src/Dimmer_B1.c"
 13809 ;; Parameters:    Size  Location     Type
 13810 ;;  lights          1    wreg     unsigned char 
 13811 ;;  command         1   77[BANK0 ] unsigned char 
 13812 ;; Auto vars:     Size  Location     Type
 13813 ;;  lights          1    0[BANK1 ] unsigned char 
 13814 ;; Return value:  Size  Location     Type
 13815 ;;		None               void
 13816 ;; Registers used:
 13817 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13818 ;; Tracked objects:
 13819 ;;		On entry : 0/0
 13820 ;;		On exit  : 0/0
 13821 ;;		Unchanged: 0/0
 13822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 13823 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13824 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13825 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 13826 ;;      Totals:         0       3       1       0       0       0       0       0       0       0       0       0       
      +0       0
 13827 ;;Total ram usage:        4 bytes
 13828 ;; Hardware stack levels used:    1
 13829 ;; Hardware stack levels required when called:    8
 13830 ;; This function calls:
 13831 ;;		_getCmd_Status
 13832 ;;		_getDelayOff_GO
 13833 ;;		_getDimmerLights_PercentToValue
 13834 ;;		_getMain_All_LightsStatus
 13835 ;;		_setCmd_Status
 13836 ;;		_setDelayOff_GO
 13837 ;;		_setDimmerIntr_ControlStatus
 13838 ;;		_setDimmerIntr_DimmingValue
 13839 ;;		_setDimmerIntr_Dimming_RF
 13840 ;;		_setDimmerIntr_MaxmumValue
 13841 ;;		_setDimmerLights_Line
 13842 ;;		_setLED
 13843 ;;		_setProductData
 13844 ;;		_setRF_DimmerLights
 13845 ;;		_setTxData
 13846 ;; This function is called by:
 13847 ;;		_setDimmerLights_Main
 13848 ;; This function uses a non-reentrant model
 13849 ;;
 13850                           
 13851                           
 13852                           ;psect for function _setDimmerLights_OnOff
 13853  062B                     _setDimmerLights_OnOff:	
 13854                           
 13855                           ;incstack = 0
 13856                           ; Regs used in _setDimmerLights_OnOff: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13857                           ;setDimmerLights_OnOff@lights stored from wreg
 13858  062B  0021               	movlb	1	; select bank1
 13859  062C  00E6               	movwf	setDimmerLights_OnOff@lights^(0+128)
 13860                           
 13861                           ;Dimmer_B1.c: 839: if (command == 1) {
 13862  062D  0020               	movlb	0	; select bank0
 13863  062E  086D               	movf	setDimmerLights_OnOff@command,w
 13864  062F  3A01               	xorlw	1
 13865  0630  1D03               	skipz
 13866  0631  2E96               	goto	l7540
 13867                           
 13868                           ;Dimmer_B1.c: 840: setDimmerIntr_ControlStatus(lights, 1);
 13869  0632  01A0               	clrf	setDimmerIntr_ControlStatus@command
 13870  0633  0AA0               	incf	setDimmerIntr_ControlStatus@command,f
 13871  0634  0021               	movlb	1	; select bank1
 13872  0635  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13873  0636  319F  2740  3186   	fcall	_setDimmerIntr_ControlStatus
 13874                           
 13875                           ;Dimmer_B1.c: 843: Dimmer.Load_Status = 1;
 13876  0639  0022               	movlb	2	; select bank2
 13877  063A  152C               	bsf	_Dimmer^(0+256),2
 13878                           
 13879                           ;Dimmer_B1.c: 844: setDimmerLights_Line(lights);
 13880  063B  0021               	movlb	1	; select bank1
 13881  063C  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13882  063D  319C  24DA  3186   	fcall	_setDimmerLights_Line
 13883                           
 13884                           ;Dimmer_B1.c: 850: setLED(lights, 0);
 13885  0640  0020               	movlb	0	; select bank0
 13886  0641  01A2               	clrf	setLED@command
 13887  0642  0021               	movlb	1	; select bank1
 13888  0643  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13889  0644  3193  230E  3186   	fcall	_setLED
 13890                           
 13891                           ;Dimmer_B1.c: 871: if (DimmerLights->DimmingRun == 1) {
 13892  0647  0021               	movlb	1	; select bank1
 13893  0648  0A56               	incf	_DimmerLights^(0+128),w
 13894  0649  0086               	movwf	6
 13895  064A  3001               	movlw	1	; select bank2/3
 13896  064B  0087               	movwf	7
 13897  064C  1F01               	btfss	1,6
 13898  064D  2E72               	goto	l7530
 13899                           
 13900                           ;Dimmer_B1.c: 872: DimmerLights->DimmingRun = 0;
 13901  064E  0A56               	incf	_DimmerLights^(0+128),w
 13902  064F  0086               	movwf	6
 13903  0650  3001               	movlw	1	; select bank2/3
 13904  0651  0087               	movwf	7
 13905  0652  1301               	bcf	1,6
 13906                           
 13907                           ;Dimmer_B1.c: 873: setDimmerIntr_MaxmumValue(lights, getDimmerLights_PercentToValue(prod
      +                          uct->Data[20 + lights]));
 13908  0653  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13909  0654  3E14               	addlw	20
 13910  0655  076E               	addwf	_product^(0+128),w
 13911  0656  0020               	movlb	0	; select bank0
 13912  0657  00EE               	movwf	??_setDimmerLights_OnOff
 13913  0658  086E               	movf	??_setDimmerLights_OnOff,w
 13914  0659  0086               	movwf	6
 13915  065A  3002               	movlw	2	; select bank4/5
 13916  065B  0087               	movwf	7
 13917  065C  0801               	movf	1,w
 13918  065D  3195  2520  3186   	fcall	_getDimmerLights_PercentToValue
 13919  0660  0020               	movlb	0	; select bank0
 13920  0661  00EF               	movwf	??_setDimmerLights_OnOff+1
 13921  0662  086F               	movf	??_setDimmerLights_OnOff+1,w
 13922  0663  00E2               	movwf	setDimmerIntr_MaxmumValue@value
 13923  0664  0021               	movlb	1	; select bank1
 13924  0665  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13925  0666  319B  23DD  3186   	fcall	_setDimmerIntr_MaxmumValue
 13926                           
 13927                           ;Dimmer_B1.c: 874: setDimmerIntr_Dimming_RF(lights, 1);
 13928  0669  0020               	movlb	0	; select bank0
 13929  066A  01A0               	clrf	setDimmerIntr_Dimming_RF@command
 13930  066B  0AA0               	incf	setDimmerIntr_Dimming_RF@command,f
 13931  066C  0021               	movlb	1	; select bank1
 13932  066D  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13933  066E  319F  276F  3186   	fcall	_setDimmerIntr_Dimming_RF
 13934                           
 13935                           ;Dimmer_B1.c: 875: } else {
 13936  0671  2E89               	goto	l7532
 13937  0672                     l7530:	
 13938                           
 13939                           ;Dimmer_B1.c: 876: setDimmerIntr_DimmingValue(lights, getDimmerLights_PercentToValue(pro
      +                          duct->Data[20 + lights]));
 13940  0672  0021               	movlb	1	; select bank1
 13941  0673  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13942  0674  3E14               	addlw	20
 13943  0675  076E               	addwf	_product^(0+128),w
 13944  0676  0020               	movlb	0	; select bank0
 13945  0677  00EE               	movwf	??_setDimmerLights_OnOff
 13946  0678  086E               	movf	??_setDimmerLights_OnOff,w
 13947  0679  0086               	movwf	6
 13948  067A  3002               	movlw	2	; select bank4/5
 13949  067B  0087               	movwf	7
 13950  067C  0801               	movf	1,w
 13951  067D  3195  2520  3186   	fcall	_getDimmerLights_PercentToValue
 13952  0680  0020               	movlb	0	; select bank0
 13953  0681  00EF               	movwf	??_setDimmerLights_OnOff+1
 13954  0682  086F               	movf	??_setDimmerLights_OnOff+1,w
 13955  0683  00E2               	movwf	setDimmerIntr_DimmingValue@value
 13956  0684  0021               	movlb	1	; select bank1
 13957  0685  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13958  0686  319B  23F4  3186   	fcall	_setDimmerIntr_DimmingValue
 13959  0689                     l7532:	
 13960                           
 13961                           ;Dimmer_B1.c: 879: }
 13962                           ;Dimmer_B1.c: 881: if (lights == 1) {
 13963  0689  0021               	movlb	1	; select bank1
 13964  068A  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13965  068B  3A01               	xorlw	1
 13966  068C  1D03               	skipz
 13967  068D  2E90               	goto	l7536
 13968                           
 13969                           ;Dimmer_B1.c: 883: DimmerIntr1.TuneGO = 1;
 13970  068E  173C               	bsf	(_DimmerIntr1^(0+128)+1),6
 13971                           
 13972                           ;Dimmer_B1.c: 885: } else if (lights == 2) {
 13973  068F  2ECD               	goto	l7558
 13974  0690                     l7536:	
 13975  0690  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13976  0691  3A02               	xorlw	2
 13977  0692  1D03               	skipz
 13978  0693  2ECD               	goto	l7558
 13979                           
 13980                           ;Dimmer_B1.c: 887: DimmerIntr2.TuneGO = 1;
 13981  0694  1748               	bsf	(_DimmerIntr2^(0+128)+1),6
 13982                           
 13983                           ;Dimmer_B1.c: 889: }
 13984                           ;Dimmer_B1.c: 895: } else if (command == 0) {
 13985  0695  2ECD               	goto	l7558
 13986  0696                     l7540:	
 13987  0696  0020               	movlb	0	; select bank0
 13988  0697  08ED               	movf	setDimmerLights_OnOff@command,f
 13989  0698  1D03               	skipz
 13990  0699  2ECD               	goto	l7558
 13991                           
 13992                           ;Dimmer_B1.c: 896: setDimmerIntr_ControlStatus(lights, 0);
 13993  069A  01A0               	clrf	setDimmerIntr_ControlStatus@command
 13994  069B  0021               	movlb	1	; select bank1
 13995  069C  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 13996  069D  319F  2740  3186   	fcall	_setDimmerIntr_ControlStatus
 13997                           
 13998                           ;Dimmer_B1.c: 898: Dimmer.Load_Status = 0;
 13999  06A0  0022               	movlb	2	; select bank2
 14000  06A1  112C               	bcf	_Dimmer^(0+256),2
 14001                           
 14002                           ;Dimmer_B1.c: 899: setDimmerLights_Line(0);
 14003  06A2  3000               	movlw	0
 14004  06A3  319C  24DA  3186   	fcall	_setDimmerLights_Line
 14005                           
 14006                           ;Dimmer_B1.c: 903: if (getDelayOff_GO(lights) == 1) {
 14007  06A6  0021               	movlb	1	; select bank1
 14008  06A7  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14009  06A8  319A  220E  3186   	fcall	_getDelayOff_GO
 14010  06AB  3A01               	xorlw	1
 14011  06AC  1D03               	skipz
 14012  06AD  2EB6               	goto	l886
 14013                           
 14014                           ;Dimmer_B1.c: 904: setDelayOff_GO(lights, 0, 0);
 14015  06AE  0020               	movlb	0	; select bank0
 14016  06AF  01E5               	clrf	setDelayOff_GO@command
 14017  06B0  01E6               	clrf	setDelayOff_GO@value
 14018  06B1  0021               	movlb	1	; select bank1
 14019  06B2  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14020  06B3  318C  241C  3186   	fcall	_setDelayOff_GO
 14021  06B6                     l886:	
 14022                           
 14023                           ;Dimmer_B1.c: 905: }
 14024                           ;Dimmer_B1.c: 910: setLED(lights, 1);
 14025  06B6  0020               	movlb	0	; select bank0
 14026  06B7  01A2               	clrf	setLED@command
 14027  06B8  0AA2               	incf	setLED@command,f
 14028  06B9  0021               	movlb	1	; select bank1
 14029  06BA  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14030  06BB  3193  230E  3186   	fcall	_setLED
 14031                           
 14032                           ;Dimmer_B1.c: 915: if (lights == 1) {
 14033  06BE  0021               	movlb	1	; select bank1
 14034  06BF  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14035  06C0  3A01               	xorlw	1
 14036  06C1  1D03               	skipz
 14037  06C2  2EC6               	goto	l7554
 14038                           
 14039                           ;Dimmer_B1.c: 916: RB4 = 0;
 14040  06C3  0020               	movlb	0	; select bank0
 14041  06C4  120D               	bcf	13,4	;volatile
 14042                           
 14043                           ;Dimmer_B1.c: 918: }
 14044  06C5  2ECD               	goto	l7558
 14045  06C6                     l7554:	
 14046                           
 14047                           ;Dimmer_B1.c: 921: else if (lights == 2) {
 14048  06C6  0021               	movlb	1	; select bank1
 14049  06C7  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14050  06C8  3A02               	xorlw	2
 14051  06C9  1D03               	skipz
 14052  06CA  2ECD               	goto	l7558
 14053                           
 14054                           ;Dimmer_B1.c: 922: RA7 = 0;
 14055  06CB  0020               	movlb	0	; select bank0
 14056  06CC  138C               	bcf	12,7	;volatile
 14057  06CD                     l7558:	
 14058                           
 14059                           ;Dimmer_B1.c: 923: }
 14060                           ;Dimmer_B1.c: 929: }
 14061                           ;Dimmer_B1.c: 932: setRF_DimmerLights(lights, command);
 14062  06CD  0020               	movlb	0	; select bank0
 14063  06CE  086D               	movf	setDimmerLights_OnOff@command,w
 14064  06CF  00EE               	movwf	??_setDimmerLights_OnOff
 14065  06D0  086E               	movf	??_setDimmerLights_OnOff,w
 14066  06D1  00E5               	movwf	setRF_DimmerLights@on
 14067  06D2  0021               	movlb	1	; select bank1
 14068  06D3  0866               	movf	setDimmerLights_OnOff@lights^(0+128),w
 14069  06D4  3195  25EA  3186   	fcall	_setRF_DimmerLights
 14070                           
 14071                           ;Dimmer_B1.c: 934: if (getCmd_Status(1) == 1) {
 14072  06D7  3001               	movlw	1
 14073  06D8  319A  2252  3186   	fcall	_getCmd_Status
 14074  06DB  3A01               	xorlw	1
 14075  06DC  1D03               	skipz
 14076  06DD  2EF9               	goto	l7572
 14077                           
 14078                           ;Dimmer_B1.c: 935: if (getMain_All_LightsStatus() == 0) {
 14079  06DE  319A  22E4  3186   	fcall	_getMain_All_LightsStatus
 14080  06E1  3800               	iorlw	0
 14081  06E2  1D03               	skipz
 14082  06E3  0008               	return
 14083                           
 14084                           ;Dimmer_B1.c: 936: setCmd_Status(1, 0);
 14085  06E4  0020               	movlb	0	; select bank0
 14086  06E5  01A0               	clrf	setCmd_Status@cmd
 14087  06E6  3001               	movlw	1
 14088  06E7  319C  2422  3186   	fcall	_setCmd_Status
 14089                           
 14090                           ;Dimmer_B1.c: 937: setProductData(11, 0);
 14091  06EA  0020               	movlb	0	; select bank0
 14092  06EB  01E2               	clrf	setProductData@value
 14093  06EC  300B               	movlw	11
 14094  06ED  3199  2181  3186   	fcall	_setProductData
 14095                           
 14096                           ;Dimmer_B1.c: 938: setProductData(17, 0);
 14097  06F0  0020               	movlb	0	; select bank0
 14098  06F1  01E2               	clrf	setProductData@value
 14099  06F2  3011               	movlw	17
 14100  06F3  3199  2181  3186   	fcall	_setProductData
 14101                           
 14102                           ;Dimmer_B1.c: 939: setTxData();
 14103  06F6  318F  2745         	fcall	_setTxData
 14104                           
 14105                           ;Dimmer_B1.c: 940: }
 14106                           ;Dimmer_B1.c: 941: } else {
 14107  06F8  0008               	return
 14108  06F9                     l7572:	
 14109                           
 14110                           ;Dimmer_B1.c: 942: setTxData();
 14111  06F9  318F  2745         	fcall	_setTxData
 14112  06FB  0008               	return
 14113  06FC                     __end_of_setDimmerLights_OnOff:	
 14114                           
 14115                           	psect	text89
 14116  130E                     __ptext89:	
 14117 ;; *************** function _setLED *****************
 14118 ;; Defined at:
 14119 ;;		line 81 in file "../src/LED_B1.c"
 14120 ;; Parameters:    Size  Location     Type
 14121 ;;  led             1    wreg     unsigned char 
 14122 ;;  command         1    2[BANK0 ] unsigned char 
 14123 ;; Auto vars:     Size  Location     Type
 14124 ;;  led             1    3[BANK0 ] unsigned char 
 14125 ;; Return value:  Size  Location     Type
 14126 ;;		None               void
 14127 ;; Registers used:
 14128 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14129 ;; Tracked objects:
 14130 ;;		On entry : 0/0
 14131 ;;		On exit  : 0/0
 14132 ;;		Unchanged: 0/0
 14133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14134 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14135 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14136 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14137 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14138 ;;Total ram usage:        2 bytes
 14139 ;; Hardware stack levels used:    1
 14140 ;; Hardware stack levels required when called:    6
 14141 ;; This function calls:
 14142 ;;		_LedPointSelect
 14143 ;; This function is called by:
 14144 ;;		_setDimmerLights_OnOff
 14145 ;;		_setLED_Initialization
 14146 ;;		_setSw_Initialization
 14147 ;;		_Exception_Main
 14148 ;; This function uses a non-reentrant model
 14149 ;;
 14150                           
 14151                           
 14152                           ;psect for function _setLED
 14153  130E                     _setLED:	
 14154                           
 14155                           ;incstack = 0
 14156                           ; Regs used in _setLED: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14157                           ;setLED@led stored from wreg
 14158  130E  0020               	movlb	0	; select bank0
 14159  130F  00A3               	movwf	setLED@led
 14160                           
 14161                           ;LED_B1.c: 82: LedPointSelect(led);
 14162  1310  0823               	movf	setLED@led,w
 14163  1311  319D  2570  3193   	fcall	_LedPointSelect
 14164                           
 14165                           ;LED_B1.c: 83: if (command == 0) {
 14166  1314  0020               	movlb	0	; select bank0
 14167  1315  08A2               	movf	setLED@command,f
 14168  1316  1D03               	skipz
 14169  1317  2B25               	goto	l7238
 14170                           
 14171                           ;LED_B1.c: 85: if (led == 1) {
 14172  1318  0823               	movf	setLED@led,w
 14173  1319  3A01               	xorlw	1
 14174  131A  1D03               	skipz
 14175  131B  2B1D               	goto	l7230
 14176                           
 14177                           ;LED_B1.c: 89: RC7 = 1;
 14178  131C  178E               	bsf	14,7	;volatile
 14179  131D                     l7230:	
 14180                           
 14181                           ;LED_B1.c: 91: }
 14182                           ;LED_B1.c: 94: if (led == 2) {
 14183  131D  0823               	movf	setLED@led,w
 14184  131E  3A02               	xorlw	2
 14185  131F  1903               	btfsc	3,2
 14186                           
 14187                           ;LED_B1.c: 98: RA3 = 1;
 14188  1320  158C               	bsf	12,3	;volatile
 14189                           
 14190                           ;LED_B1.c: 100: }
 14191                           ;LED_B1.c: 112: if (led == 99) {
 14192  1321  0823               	movf	setLED@led,w
 14193  1322  3A63               	xorlw	99
 14194  1323  1903               	btfsc	3,2
 14195                           
 14196                           ;LED_B1.c: 116: RB5 = 1;
 14197  1324  168D               	bsf	13,5	;volatile
 14198  1325                     l7238:	
 14199                           
 14200                           ;LED_B1.c: 118: }
 14201                           ;LED_B1.c: 120: }
 14202                           ;LED_B1.c: 121: if (command == 1) {
 14203  1325  0822               	movf	setLED@command,w
 14204  1326  3A01               	xorlw	1
 14205  1327  1D03               	skipz
 14206  1328  2B36               	goto	l7252
 14207                           
 14208                           ;LED_B1.c: 123: if (led == 1) {
 14209  1329  0823               	movf	setLED@led,w
 14210  132A  3A01               	xorlw	1
 14211  132B  1D03               	skipz
 14212  132C  2B2E               	goto	l7244
 14213                           
 14214                           ;LED_B1.c: 127: RC7 = 0;
 14215  132D  138E               	bcf	14,7	;volatile
 14216  132E                     l7244:	
 14217                           
 14218                           ;LED_B1.c: 129: }
 14219                           ;LED_B1.c: 132: if (led == 2) {
 14220  132E  0823               	movf	setLED@led,w
 14221  132F  3A02               	xorlw	2
 14222  1330  1903               	btfsc	3,2
 14223                           
 14224                           ;LED_B1.c: 136: RA3 = 0;
 14225  1331  118C               	bcf	12,3	;volatile
 14226                           
 14227                           ;LED_B1.c: 138: }
 14228                           ;LED_B1.c: 150: if (led == 99) {
 14229  1332  0823               	movf	setLED@led,w
 14230  1333  3A63               	xorlw	99
 14231  1334  1903               	btfsc	3,2
 14232                           
 14233                           ;LED_B1.c: 154: RB5 = 0;
 14234  1335  128D               	bcf	13,5	;volatile
 14235  1336                     l7252:	
 14236                           
 14237                           ;LED_B1.c: 156: }
 14238                           ;LED_B1.c: 158: }
 14239                           ;LED_B1.c: 159: if (command == 10) {
 14240  1336  0822               	movf	setLED@command,w
 14241  1337  3A0A               	xorlw	10
 14242  1338  1D03               	skipz
 14243  1339  2B56               	goto	l7268
 14244                           
 14245                           ;LED_B1.c: 160: LED->GO = 0;
 14246  133A  0021               	movlb	1	; select bank1
 14247  133B  0857               	movf	_LED^(0+128),w
 14248  133C  0086               	movwf	6
 14249  133D  3001               	movlw	1	; select bank2/3
 14250  133E  0087               	movwf	7
 14251  133F  1081               	bcf	1,1
 14252                           
 14253                           ;LED_B1.c: 161: LED->Time = 0;
 14254  1340  0A57               	incf	_LED^(0+128),w
 14255  1341  0086               	movwf	6
 14256  1342  3001               	movlw	1	; select bank2/3
 14257  1343  0087               	movwf	7
 14258  1344  3000               	movlw	0
 14259  1345  3FC0               	movwi [0]fsr1
 14260  1346  3FC1               	movwi [1]fsr1
 14261                           
 14262                           ;LED_B1.c: 163: if (led == 1) {
 14263  1347  0020               	movlb	0	; select bank0
 14264  1348  0823               	movf	setLED@led,w
 14265  1349  3A01               	xorlw	1
 14266  134A  1D03               	skipz
 14267  134B  2B4E               	goto	l7260
 14268                           
 14269                           ;LED_B1.c: 167: RC7 = 1;
 14270  134C  178E               	bsf	14,7	;volatile
 14271                           
 14272                           ;LED_B1.c: 169: }
 14273  134D  2B52               	goto	l7264
 14274  134E                     l7260:	
 14275                           
 14276                           ;LED_B1.c: 172: else if (led == 2) {
 14277  134E  0823               	movf	setLED@led,w
 14278  134F  3A02               	xorlw	2
 14279  1350  1903               	btfsc	3,2
 14280                           
 14281                           ;LED_B1.c: 176: RA3 = 1;
 14282  1351  158C               	bsf	12,3	;volatile
 14283  1352                     l7264:	
 14284                           
 14285                           ;LED_B1.c: 178: }
 14286                           ;LED_B1.c: 190: if (led == 99) {
 14287  1352  0823               	movf	setLED@led,w
 14288  1353  3A63               	xorlw	99
 14289  1354  1903               	btfsc	3,2
 14290                           
 14291                           ;LED_B1.c: 194: RB5 = 1;
 14292  1355  168D               	bsf	13,5	;volatile
 14293  1356                     l7268:	
 14294                           
 14295                           ;LED_B1.c: 196: }
 14296                           ;LED_B1.c: 198: }
 14297                           ;LED_B1.c: 199: if (command == 11) {
 14298  1356  0822               	movf	setLED@command,w
 14299  1357  3A0B               	xorlw	11
 14300  1358  1D03               	skipz
 14301  1359  0008               	return
 14302                           
 14303                           ;LED_B1.c: 200: LED->GO = 1;
 14304  135A  0021               	movlb	1	; select bank1
 14305  135B  0857               	movf	_LED^(0+128),w
 14306  135C  0086               	movwf	6
 14307  135D  3001               	movlw	1	; select bank2/3
 14308  135E  0087               	movwf	7
 14309  135F  1481               	bsf	1,1
 14310  1360  0008               	return
 14311  1361                     __end_of_setLED:	
 14312                           
 14313                           	psect	text90
 14314  1D70                     __ptext90:	
 14315 ;; *************** function _LedPointSelect *****************
 14316 ;; Defined at:
 14317 ;;		line 7 in file "../src/LED_B1.c"
 14318 ;; Parameters:    Size  Location     Type
 14319 ;;  led             1    wreg     unsigned char 
 14320 ;; Auto vars:     Size  Location     Type
 14321 ;;  led             1    1[BANK0 ] unsigned char 
 14322 ;; Return value:  Size  Location     Type
 14323 ;;		None               void
 14324 ;; Registers used:
 14325 ;;		wreg
 14326 ;; Tracked objects:
 14327 ;;		On entry : 0/0
 14328 ;;		On exit  : 0/0
 14329 ;;		Unchanged: 0/0
 14330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14332 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14333 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14334 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14335 ;;Total ram usage:        2 bytes
 14336 ;; Hardware stack levels used:    1
 14337 ;; Hardware stack levels required when called:    5
 14338 ;; This function calls:
 14339 ;;		Nothing
 14340 ;; This function is called by:
 14341 ;;		_setLED_Initialization
 14342 ;;		_setLED
 14343 ;;		_setLED_Main
 14344 ;; This function uses a non-reentrant model
 14345 ;;
 14346                           
 14347                           
 14348                           ;psect for function _LedPointSelect
 14349  1D70                     _LedPointSelect:	
 14350                           
 14351                           ;incstack = 0
 14352                           ; Regs used in _LedPointSelect: [wreg]
 14353                           ;LedPointSelect@led stored from wreg
 14354  1D70  0020               	movlb	0	; select bank0
 14355  1D71  00A1               	movwf	LedPointSelect@led
 14356                           
 14357                           ;LED_B1.c: 9: if (led == 1) {
 14358  1D72  0821               	movf	LedPointSelect@led,w
 14359  1D73  3A01               	xorlw	1
 14360  1D74  1D03               	skipz
 14361  1D75  2D7B               	goto	l1134
 14362                           
 14363                           ;LED_B1.c: 10: LED = &VarLED1;
 14364  1D76  30E6               	movlw	_VarLED1& (0+255)
 14365  1D77  00A0               	movwf	??_LedPointSelect
 14366  1D78  0820               	movf	??_LedPointSelect,w
 14367  1D79  0021               	movlb	1	; select bank1
 14368  1D7A  00D7               	movwf	_LED^(0+128)
 14369  1D7B                     l1134:	
 14370                           
 14371                           ;LED_B1.c: 11: }
 14372                           ;LED_B1.c: 14: if (led == 2) {
 14373  1D7B  0020               	movlb	0	; select bank0
 14374  1D7C  0821               	movf	LedPointSelect@led,w
 14375  1D7D  3A02               	xorlw	2
 14376  1D7E  1D03               	skipz
 14377  1D7F  2D85               	goto	l1135
 14378                           
 14379                           ;LED_B1.c: 15: LED = &VarLED2;
 14380  1D80  30EA               	movlw	_VarLED2& (0+255)
 14381  1D81  00A0               	movwf	??_LedPointSelect
 14382  1D82  0820               	movf	??_LedPointSelect,w
 14383  1D83  0021               	movlb	1	; select bank1
 14384  1D84  00D7               	movwf	_LED^(0+128)
 14385  1D85                     l1135:	
 14386                           
 14387                           ;LED_B1.c: 16: }
 14388                           ;LED_B1.c: 24: if (led == 99) {
 14389  1D85  0020               	movlb	0	; select bank0
 14390  1D86  0821               	movf	LedPointSelect@led,w
 14391  1D87  3A63               	xorlw	99
 14392  1D88  1D03               	skipz
 14393  1D89  0008               	return
 14394                           
 14395                           ;LED_B1.c: 25: LED = &VarErrLED;
 14396  1D8A  30E2               	movlw	_VarErrLED& (0+255)
 14397  1D8B  00A0               	movwf	??_LedPointSelect
 14398  1D8C  0820               	movf	??_LedPointSelect,w
 14399  1D8D  0021               	movlb	1	; select bank1
 14400  1D8E  00D7               	movwf	_LED^(0+128)
 14401  1D8F  0008               	return
 14402  1D90                     __end_of_LedPointSelect:	
 14403                           
 14404                           	psect	text91
 14405  1F6F                     __ptext91:	
 14406 ;; *************** function _setDimmerIntr_Dimming_RF *****************
 14407 ;; Defined at:
 14408 ;;		line 222 in file "../src/Dimmer_B1.c"
 14409 ;; Parameters:    Size  Location     Type
 14410 ;;  lights          1    wreg     unsigned char 
 14411 ;;  command         1    0[BANK0 ] unsigned char 
 14412 ;; Auto vars:     Size  Location     Type
 14413 ;;  lights          1    2[BANK0 ] unsigned char 
 14414 ;; Return value:  Size  Location     Type
 14415 ;;		None               void
 14416 ;; Registers used:
 14417 ;;		wreg, status,2, status,0
 14418 ;; Tracked objects:
 14419 ;;		On entry : 0/0
 14420 ;;		On exit  : 0/0
 14421 ;;		Unchanged: 0/0
 14422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14423 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14424 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14425 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14426 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14427 ;;Total ram usage:        3 bytes
 14428 ;; Hardware stack levels used:    1
 14429 ;; Hardware stack levels required when called:    5
 14430 ;; This function calls:
 14431 ;;		Nothing
 14432 ;; This function is called by:
 14433 ;;		_setDimmerLights_OnOff
 14434 ;;		_setRFSW_AdjControl
 14435 ;; This function uses a non-reentrant model
 14436 ;;
 14437                           
 14438                           
 14439                           ;psect for function _setDimmerIntr_Dimming_RF
 14440  1F6F                     _setDimmerIntr_Dimming_RF:	
 14441                           
 14442                           ;incstack = 0
 14443                           ; Regs used in _setDimmerIntr_Dimming_RF: [wreg+status,2+status,0]
 14444                           ;setDimmerIntr_Dimming_RF@lights stored from wreg
 14445  1F6F  0020               	movlb	0	; select bank0
 14446  1F70  00A2               	movwf	setDimmerIntr_Dimming_RF@lights
 14447                           
 14448                           ;Dimmer_B1.c: 224: if (lights == 1) {
 14449  1F71  0822               	movf	setDimmerIntr_Dimming_RF@lights,w
 14450  1F72  3A01               	xorlw	1
 14451  1F73  1D03               	skipz
 14452  1F74  2F87               	goto	l6826
 14453                           
 14454                           ;Dimmer_B1.c: 225: DimmerIntr1.Dimming_RF = command == 1 ? 1 : 0;
 14455  1F75  0820               	movf	setDimmerIntr_Dimming_RF@command,w
 14456  1F76  3A01               	xorlw	1
 14457  1F77  3000               	movlw	0
 14458  1F78  1903               	skipnz
 14459  1F79  3001               	movlw	1
 14460  1F7A  00A1               	movwf	??_setDimmerIntr_Dimming_RF
 14461  1F7B  0EA1               	swapf	??_setDimmerIntr_Dimming_RF,f
 14462  1F7C  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 14463  1F7D  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 14464  1F7E  0021               	movlb	1	; select bank1
 14465  1F7F  083B               	movf	_DimmerIntr1^(0+128),w
 14466  1F80  0020               	movlb	0	; select bank0
 14467  1F81  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14468  1F82  39BF               	andlw	-65
 14469  1F83  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14470  1F84  0021               	movlb	1	; select bank1
 14471  1F85  00BB               	movwf	_DimmerIntr1^(0+128)
 14472                           
 14473                           ;Dimmer_B1.c: 226: }
 14474  1F86  0008               	return
 14475  1F87                     l6826:	
 14476                           
 14477                           ;Dimmer_B1.c: 229: else if (lights == 2) {
 14478  1F87  0020               	movlb	0	; select bank0
 14479  1F88  0822               	movf	setDimmerIntr_Dimming_RF@lights,w
 14480  1F89  3A02               	xorlw	2
 14481  1F8A  1D03               	skipz
 14482  1F8B  0008               	return
 14483                           
 14484                           ;Dimmer_B1.c: 230: DimmerIntr2.Dimming_RF = command == 1 ? 1 : 0;
 14485  1F8C  0820               	movf	setDimmerIntr_Dimming_RF@command,w
 14486  1F8D  3A01               	xorlw	1
 14487  1F8E  3000               	movlw	0
 14488  1F8F  1903               	skipnz
 14489  1F90  3001               	movlw	1
 14490  1F91  00A1               	movwf	??_setDimmerIntr_Dimming_RF
 14491  1F92  0EA1               	swapf	??_setDimmerIntr_Dimming_RF,f
 14492  1F93  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 14493  1F94  0DA1               	rlf	??_setDimmerIntr_Dimming_RF,f
 14494  1F95  0021               	movlb	1	; select bank1
 14495  1F96  0847               	movf	_DimmerIntr2^(0+128),w
 14496  1F97  0020               	movlb	0	; select bank0
 14497  1F98  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14498  1F99  39BF               	andlw	-65
 14499  1F9A  0621               	xorwf	??_setDimmerIntr_Dimming_RF,w
 14500  1F9B  0021               	movlb	1	; select bank1
 14501  1F9C  00C7               	movwf	_DimmerIntr2^(0+128)
 14502  1F9D  0008               	return
 14503  1F9E                     __end_of_setDimmerIntr_Dimming_RF:	
 14504                           
 14505                           	psect	text92
 14506  1BF4                     __ptext92:	
 14507 ;; *************** function _setDimmerIntr_DimmingValue *****************
 14508 ;; Defined at:
 14509 ;;		line 87 in file "../src/Dimmer_B1.c"
 14510 ;; Parameters:    Size  Location     Type
 14511 ;;  lights          1    wreg     unsigned char 
 14512 ;;  value           1   66[BANK0 ] unsigned char 
 14513 ;; Auto vars:     Size  Location     Type
 14514 ;;  lights          1   68[BANK0 ] unsigned char 
 14515 ;; Return value:  Size  Location     Type
 14516 ;;		None               void
 14517 ;; Registers used:
 14518 ;;		wreg
 14519 ;; Tracked objects:
 14520 ;;		On entry : 0/0
 14521 ;;		On exit  : 0/0
 14522 ;;		Unchanged: 0/0
 14523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14524 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14525 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14526 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14527 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14528 ;;Total ram usage:        3 bytes
 14529 ;; Hardware stack levels used:    1
 14530 ;; Hardware stack levels required when called:    5
 14531 ;; This function calls:
 14532 ;;		Nothing
 14533 ;; This function is called by:
 14534 ;;		_setDimmerLights_OnOff
 14535 ;; This function uses a non-reentrant model
 14536 ;;
 14537                           
 14538                           
 14539                           ;psect for function _setDimmerIntr_DimmingValue
 14540  1BF4                     _setDimmerIntr_DimmingValue:	
 14541                           
 14542                           ;incstack = 0
 14543                           ; Regs used in _setDimmerIntr_DimmingValue: [wreg]
 14544                           ;setDimmerIntr_DimmingValue@lights stored from wreg
 14545  1BF4  0020               	movlb	0	; select bank0
 14546  1BF5  00E4               	movwf	setDimmerIntr_DimmingValue@lights
 14547                           
 14548                           ;Dimmer_B1.c: 89: if (lights == 1) {
 14549  1BF6  0864               	movf	setDimmerIntr_DimmingValue@lights,w
 14550  1BF7  3A01               	xorlw	1
 14551  1BF8  1D03               	skipz
 14552  1BF9  2C00               	goto	l7154
 14553                           
 14554                           ;Dimmer_B1.c: 90: DimmerIntr1.DimmingValue = value;
 14555  1BFA  0862               	movf	setDimmerIntr_DimmingValue@value,w
 14556  1BFB  00E3               	movwf	??_setDimmerIntr_DimmingValue
 14557  1BFC  0863               	movf	??_setDimmerIntr_DimmingValue,w
 14558  1BFD  0021               	movlb	1	; select bank1
 14559  1BFE  00C0               	movwf	(_DimmerIntr1^(0+128)+5)
 14560                           
 14561                           ;Dimmer_B1.c: 91: }
 14562  1BFF  0008               	return
 14563  1C00                     l7154:	
 14564                           
 14565                           ;Dimmer_B1.c: 94: else if (lights == 2) {
 14566  1C00  0020               	movlb	0	; select bank0
 14567  1C01  0864               	movf	setDimmerIntr_DimmingValue@lights,w
 14568  1C02  3A02               	xorlw	2
 14569  1C03  1D03               	skipz
 14570  1C04  0008               	return
 14571                           
 14572                           ;Dimmer_B1.c: 95: DimmerIntr2.DimmingValue = value;
 14573  1C05  0862               	movf	setDimmerIntr_DimmingValue@value,w
 14574  1C06  00E3               	movwf	??_setDimmerIntr_DimmingValue
 14575  1C07  0863               	movf	??_setDimmerIntr_DimmingValue,w
 14576  1C08  0021               	movlb	1	; select bank1
 14577  1C09  00CC               	movwf	(_DimmerIntr2^(0+128)+5)
 14578  1C0A  0008               	return
 14579  1C0B                     __end_of_setDimmerIntr_DimmingValue:	
 14580                           
 14581                           	psect	text93
 14582  1F40                     __ptext93:	
 14583 ;; *************** function _setDimmerIntr_ControlStatus *****************
 14584 ;; Defined at:
 14585 ;;		line 69 in file "../src/Dimmer_B1.c"
 14586 ;; Parameters:    Size  Location     Type
 14587 ;;  lights          1    wreg     unsigned char 
 14588 ;;  command         1    0[BANK0 ] unsigned char 
 14589 ;; Auto vars:     Size  Location     Type
 14590 ;;  lights          1    2[BANK0 ] unsigned char 
 14591 ;; Return value:  Size  Location     Type
 14592 ;;		None               void
 14593 ;; Registers used:
 14594 ;;		wreg, status,2, status,0
 14595 ;; Tracked objects:
 14596 ;;		On entry : 0/0
 14597 ;;		On exit  : 0/0
 14598 ;;		Unchanged: 0/0
 14599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14600 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14601 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14602 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14603 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14604 ;;Total ram usage:        3 bytes
 14605 ;; Hardware stack levels used:    1
 14606 ;; Hardware stack levels required when called:    5
 14607 ;; This function calls:
 14608 ;;		Nothing
 14609 ;; This function is called by:
 14610 ;;		_setDimmerLights_OnOff
 14611 ;; This function uses a non-reentrant model
 14612 ;;
 14613                           
 14614                           
 14615                           ;psect for function _setDimmerIntr_ControlStatus
 14616  1F40                     _setDimmerIntr_ControlStatus:	
 14617                           
 14618                           ;incstack = 0
 14619                           ; Regs used in _setDimmerIntr_ControlStatus: [wreg+status,2+status,0]
 14620                           ;setDimmerIntr_ControlStatus@lights stored from wreg
 14621  1F40  0020               	movlb	0	; select bank0
 14622  1F41  00A2               	movwf	setDimmerIntr_ControlStatus@lights
 14623                           
 14624                           ;Dimmer_B1.c: 71: if (lights == 1) {
 14625  1F42  0822               	movf	setDimmerIntr_ControlStatus@lights,w
 14626  1F43  3A01               	xorlw	1
 14627  1F44  1D03               	skipz
 14628  1F45  2F58               	goto	l7146
 14629                           
 14630                           ;Dimmer_B1.c: 72: DimmerIntr1.ControlStatus = command == 1 ? 1 : 0;
 14631  1F46  0820               	movf	setDimmerIntr_ControlStatus@command,w
 14632  1F47  3A01               	xorlw	1
 14633  1F48  3000               	movlw	0
 14634  1F49  1903               	skipnz
 14635  1F4A  3001               	movlw	1
 14636  1F4B  00A1               	movwf	??_setDimmerIntr_ControlStatus
 14637  1F4C  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14638  1F4D  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14639  1F4E  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14640  1F4F  0021               	movlb	1	; select bank1
 14641  1F50  083B               	movf	_DimmerIntr1^(0+128),w
 14642  1F51  0020               	movlb	0	; select bank0
 14643  1F52  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 14644  1F53  39F7               	andlw	-9
 14645  1F54  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 14646  1F55  0021               	movlb	1	; select bank1
 14647  1F56  00BB               	movwf	_DimmerIntr1^(0+128)
 14648                           
 14649                           ;Dimmer_B1.c: 73: }
 14650  1F57  0008               	return
 14651  1F58                     l7146:	
 14652                           
 14653                           ;Dimmer_B1.c: 76: else if (lights == 2) {
 14654  1F58  0020               	movlb	0	; select bank0
 14655  1F59  0822               	movf	setDimmerIntr_ControlStatus@lights,w
 14656  1F5A  3A02               	xorlw	2
 14657  1F5B  1D03               	skipz
 14658  1F5C  0008               	return
 14659                           
 14660                           ;Dimmer_B1.c: 77: DimmerIntr2.ControlStatus = command == 1 ? 1 : 0;
 14661  1F5D  0820               	movf	setDimmerIntr_ControlStatus@command,w
 14662  1F5E  3A01               	xorlw	1
 14663  1F5F  3000               	movlw	0
 14664  1F60  1903               	skipnz
 14665  1F61  3001               	movlw	1
 14666  1F62  00A1               	movwf	??_setDimmerIntr_ControlStatus
 14667  1F63  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14668  1F64  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14669  1F65  0DA1               	rlf	??_setDimmerIntr_ControlStatus,f
 14670  1F66  0021               	movlb	1	; select bank1
 14671  1F67  0847               	movf	_DimmerIntr2^(0+128),w
 14672  1F68  0020               	movlb	0	; select bank0
 14673  1F69  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 14674  1F6A  39F7               	andlw	-9
 14675  1F6B  0621               	xorwf	??_setDimmerIntr_ControlStatus,w
 14676  1F6C  0021               	movlb	1	; select bank1
 14677  1F6D  00C7               	movwf	_DimmerIntr2^(0+128)
 14678  1F6E  0008               	return
 14679  1F6F                     __end_of_setDimmerIntr_ControlStatus:	
 14680                           
 14681                           	psect	text94
 14682  0C1C                     __ptext94:	
 14683 ;; *************** function _setDelayOff_GO *****************
 14684 ;; Defined at:
 14685 ;;		line 87 in file "../src/DelayOff_B1.c"
 14686 ;; Parameters:    Size  Location     Type
 14687 ;;  sw              1    wreg     unsigned char 
 14688 ;;  command         1   69[BANK0 ] unsigned char 
 14689 ;;  value           1   70[BANK0 ] unsigned char 
 14690 ;; Auto vars:     Size  Location     Type
 14691 ;;  sw              1   76[BANK0 ] unsigned char 
 14692 ;;  k               1   75[BANK0 ] unsigned char 
 14693 ;;  j               1   74[BANK0 ] unsigned char 
 14694 ;;  i               1   73[BANK0 ] unsigned char 
 14695 ;; Return value:  Size  Location     Type
 14696 ;;		None               void
 14697 ;; Registers used:
 14698 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14699 ;; Tracked objects:
 14700 ;;		On entry : 0/0
 14701 ;;		On exit  : 0/0
 14702 ;;		Unchanged: 0/0
 14703 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14704 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14705 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14706 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14707 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14708 ;;Total ram usage:        8 bytes
 14709 ;; Hardware stack levels used:    1
 14710 ;; Hardware stack levels required when called:    6
 14711 ;; This function calls:
 14712 ;;		_DelayOffPointSelect
 14713 ;;		___bmul
 14714 ;;		_setProductData
 14715 ;; This function is called by:
 14716 ;;		_setDimmerLights_OnOff
 14717 ;;		_setRFSW_Control
 14718 ;; This function uses a non-reentrant model
 14719 ;;
 14720                           
 14721                           
 14722                           ;psect for function _setDelayOff_GO
 14723  0C1C                     _setDelayOff_GO:	
 14724                           
 14725                           ;incstack = 0
 14726                           ; Regs used in _setDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14727                           ;setDelayOff_GO@sw stored from wreg
 14728  0C1C  0020               	movlb	0	; select bank0
 14729  0C1D  00EC               	movwf	setDelayOff_GO@sw
 14730                           
 14731                           ;DelayOff_B1.c: 89: DelayOffPointSelect(sw);
 14732  0C1E  086C               	movf	setDelayOff_GO@sw,w
 14733  0C1F  319B  23AF  318C   	fcall	_DelayOffPointSelect
 14734                           
 14735                           ;DelayOff_B1.c: 90: DelayOff->GO = command == 1 ? 1 : 0;
 14736  0C22  0020               	movlb	0	; select bank0
 14737  0C23  0865               	movf	setDelayOff_GO@command,w
 14738  0C24  3A01               	xorlw	1
 14739  0C25  3000               	movlw	0
 14740  0C26  1903               	skipnz
 14741  0C27  3001               	movlw	1
 14742  0C28  00E7               	movwf	??_setDelayOff_GO
 14743  0C29  0021               	movlb	1	; select bank1
 14744  0C2A  0855               	movf	_DelayOff^(0+128),w
 14745  0C2B  0086               	movwf	6
 14746  0C2C  3001               	movlw	1	; select bank2/3
 14747  0C2D  0087               	movwf	7
 14748  0C2E  0020               	movlb	0	; select bank0
 14749  0C2F  0DE7               	rlf	??_setDelayOff_GO,f
 14750  0C30  0801               	movf	1,w
 14751  0C31  0667               	xorwf	??_setDelayOff_GO,w
 14752  0C32  39FD               	andlw	-3
 14753  0C33  0667               	xorwf	??_setDelayOff_GO,w
 14754  0C34  0081               	movwf	1
 14755                           
 14756                           ;DelayOff_B1.c: 91: DelayOff->SecondTime = 0;
 14757  0C35  0021               	movlb	1	; select bank1
 14758  0C36  0855               	movf	_DelayOff^(0+128),w
 14759  0C37  3E02               	addlw	2
 14760  0C38  0086               	movwf	6
 14761  0C39  3001               	movlw	1	; select bank2/3
 14762  0C3A  0087               	movwf	7
 14763  0C3B  3000               	movlw	0
 14764  0C3C  3FC0               	movwi [0]fsr1
 14765  0C3D  3FC1               	movwi [1]fsr1
 14766                           
 14767                           ;DelayOff_B1.c: 92: DelayOff->MinuteTime = 0;
 14768  0C3E  0855               	movf	_DelayOff^(0+128),w
 14769  0C3F  3E04               	addlw	4
 14770  0C40  0086               	movwf	6
 14771  0C41  3001               	movlw	1	; select bank2/3
 14772  0C42  0087               	movwf	7
 14773  0C43  0181               	clrf	1
 14774                           
 14775                           ;DelayOff_B1.c: 94: if (command == 1) {
 14776  0C44  0020               	movlb	0	; select bank0
 14777  0C45  0865               	movf	setDelayOff_GO@command,w
 14778  0C46  3A01               	xorlw	1
 14779  0C47  1D03               	skipz
 14780  0C48  2C9E               	goto	l6798
 14781                           
 14782                           ;DelayOff_B1.c: 96: char i = 5, j = 0, k = 0;
 14783  0C49  3005               	movlw	5
 14784  0C4A  00E7               	movwf	??_setDelayOff_GO
 14785  0C4B  0867               	movf	??_setDelayOff_GO,w
 14786  0C4C  00E9               	movwf	setDelayOff_GO@i
 14787  0C4D  01EA               	clrf	setDelayOff_GO@j
 14788  0C4E  01EB               	clrf	setDelayOff_GO@k
 14789                           
 14790                           ;DelayOff_B1.c: 97: if (((value % 16) == 5 || (value % 16) == 0) && value <= 0x30) {
 14791  0C4F  300F               	movlw	15
 14792  0C50  0566               	andwf	setDelayOff_GO@value,w
 14793  0C51  00E7               	movwf	??_setDelayOff_GO
 14794  0C52  0867               	movf	??_setDelayOff_GO,w
 14795  0C53  3A05               	xorlw	5
 14796  0C54  1903               	skipnz
 14797  0C55  2C5A               	goto	l6784
 14798  0C56  0866               	movf	setDelayOff_GO@value,w
 14799  0C57  390F               	andlw	15
 14800  0C58  1D03               	btfss	3,2
 14801  0C59  2C8A               	goto	l6794
 14802  0C5A                     l6784:	
 14803  0C5A  3031               	movlw	49
 14804  0C5B  0266               	subwf	setDelayOff_GO@value,w
 14805  0C5C  1803               	skipnc
 14806  0C5D  2C8A               	goto	l6794
 14807                           
 14808                           ;DelayOff_B1.c: 98: j = value & 0x0f;
 14809  0C5E  0866               	movf	setDelayOff_GO@value,w
 14810  0C5F  390F               	andlw	15
 14811  0C60  00E7               	movwf	??_setDelayOff_GO
 14812  0C61  0867               	movf	??_setDelayOff_GO,w
 14813  0C62  00EA               	movwf	setDelayOff_GO@j
 14814                           
 14815                           ;DelayOff_B1.c: 99: k = (value >> 4) & 0x0f;
 14816  0C63  0866               	movf	setDelayOff_GO@value,w
 14817  0C64  00E7               	movwf	??_setDelayOff_GO
 14818  0C65  3004               	movlw	4
 14819  0C66                     u6195:	
 14820  0C66  36E7               	lsrf	??_setDelayOff_GO,f
 14821  0C67  0B89               	decfsz	9,f
 14822  0C68  2C66               	goto	u6195
 14823  0C69  0867               	movf	??_setDelayOff_GO,w
 14824  0C6A  390F               	andlw	15
 14825  0C6B  00E8               	movwf	??_setDelayOff_GO+1
 14826  0C6C  0868               	movf	??_setDelayOff_GO+1,w
 14827  0C6D  00EB               	movwf	setDelayOff_GO@k
 14828                           
 14829                           ;DelayOff_B1.c: 100: DelayOff->Value = j + (k * 10);
 14830  0C6E  300A               	movlw	10
 14831  0C6F  00E7               	movwf	??_setDelayOff_GO
 14832  0C70  0867               	movf	??_setDelayOff_GO,w
 14833  0C71  00A0               	movwf	___bmul@multiplicand
 14834  0C72  086B               	movf	setDelayOff_GO@k,w
 14835  0C73  319A  2264  318C   	fcall	___bmul
 14836  0C76  0020               	movlb	0	; select bank0
 14837  0C77  076A               	addwf	setDelayOff_GO@j,w
 14838  0C78  00E8               	movwf	??_setDelayOff_GO+1
 14839  0C79  0021               	movlb	1	; select bank1
 14840  0C7A  0A55               	incf	_DelayOff^(0+128),w
 14841  0C7B  0086               	movwf	6
 14842  0C7C  3001               	movlw	1	; select bank2/3
 14843  0C7D  0087               	movwf	7
 14844  0C7E  0020               	movlb	0	; select bank0
 14845  0C7F  0868               	movf	??_setDelayOff_GO+1,w
 14846  0C80  0081               	movwf	1
 14847                           
 14848                           ;DelayOff_B1.c: 102: setProductData(26 + sw, value);
 14849  0C81  0866               	movf	setDelayOff_GO@value,w
 14850  0C82  00E7               	movwf	??_setDelayOff_GO
 14851  0C83  0867               	movf	??_setDelayOff_GO,w
 14852  0C84  00E2               	movwf	setProductData@value
 14853  0C85  086C               	movf	setDelayOff_GO@sw,w
 14854  0C86  3E1A               	addlw	26
 14855  0C87  3199  2181         	fcall	_setProductData
 14856                           
 14857                           ;DelayOff_B1.c: 103: } else {
 14858  0C89  0008               	return
 14859  0C8A                     l6794:	
 14860                           
 14861                           ;DelayOff_B1.c: 104: DelayOff->Value = 0x05;
 14862  0C8A  3005               	movlw	5
 14863  0C8B  0020               	movlb	0	; select bank0
 14864  0C8C  00E7               	movwf	??_setDelayOff_GO
 14865  0C8D  0021               	movlb	1	; select bank1
 14866  0C8E  0A55               	incf	_DelayOff^(0+128),w
 14867  0C8F  0086               	movwf	6
 14868  0C90  3001               	movlw	1	; select bank2/3
 14869  0C91  0087               	movwf	7
 14870  0C92  0020               	movlb	0	; select bank0
 14871  0C93  0867               	movf	??_setDelayOff_GO,w
 14872  0C94  0081               	movwf	1
 14873                           
 14874                           ;DelayOff_B1.c: 105: setProductData(26 + sw, 0x05);
 14875  0C95  3005               	movlw	5
 14876  0C96  00E7               	movwf	??_setDelayOff_GO
 14877  0C97  0867               	movf	??_setDelayOff_GO,w
 14878  0C98  00E2               	movwf	setProductData@value
 14879  0C99  086C               	movf	setDelayOff_GO@sw,w
 14880  0C9A  3E1A               	addlw	26
 14881  0C9B  3199  2181         	fcall	_setProductData
 14882                           
 14883                           ;DelayOff_B1.c: 106: }
 14884                           ;DelayOff_B1.c: 108: } else if (command == 0) {
 14885  0C9D  0008               	return
 14886  0C9E                     l6798:	
 14887  0C9E  0020               	movlb	0	; select bank0
 14888  0C9F  08E5               	movf	setDelayOff_GO@command,f
 14889  0CA0  1D03               	skipz
 14890  0CA1  0008               	return
 14891                           
 14892                           ;DelayOff_B1.c: 109: setProductData(26 + sw, 0);
 14893  0CA2  01E2               	clrf	setProductData@value
 14894  0CA3  086C               	movf	setDelayOff_GO@sw,w
 14895  0CA4  3E1A               	addlw	26
 14896  0CA5  3199  2181         	fcall	_setProductData
 14897  0CA7  0008               	return
 14898  0CA8                     __end_of_setDelayOff_GO:	
 14899                           
 14900                           	psect	text95
 14901  1A64                     __ptext95:	
 14902 ;; *************** function ___bmul *****************
 14903 ;; Defined at:
 14904 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\Umul8.c"
 14905 ;; Parameters:    Size  Location     Type
 14906 ;;  multiplier      1    wreg     unsigned char 
 14907 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 14908 ;; Auto vars:     Size  Location     Type
 14909 ;;  multiplier      1    3[BANK0 ] unsigned char 
 14910 ;;  product         1    2[BANK0 ] unsigned char 
 14911 ;; Return value:  Size  Location     Type
 14912 ;;                  1    wreg      unsigned char 
 14913 ;; Registers used:
 14914 ;;		wreg, status,2, status,0
 14915 ;; Tracked objects:
 14916 ;;		On entry : 0/0
 14917 ;;		On exit  : 0/0
 14918 ;;		Unchanged: 0/0
 14919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14920 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14921 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14922 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14923 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14924 ;;Total ram usage:        4 bytes
 14925 ;; Hardware stack levels used:    1
 14926 ;; Hardware stack levels required when called:    5
 14927 ;; This function calls:
 14928 ;;		Nothing
 14929 ;; This function is called by:
 14930 ;;		_setDelayOff_GO
 14931 ;;		_DelayTimejudge
 14932 ;; This function uses a non-reentrant model
 14933 ;;
 14934                           
 14935                           
 14936                           ;psect for function ___bmul
 14937  1A64                     ___bmul:	
 14938                           
 14939                           ;incstack = 0
 14940                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 14941                           ;___bmul@multiplier stored from wreg
 14942  1A64  0020               	movlb	0	; select bank0
 14943  1A65  00A3               	movwf	___bmul@multiplier
 14944  1A66  01A2               	clrf	___bmul@product
 14945  1A67                     l6440:	
 14946  1A67  1C23               	btfss	___bmul@multiplier,0
 14947  1A68  2A6D               	goto	l6444
 14948  1A69  0820               	movf	___bmul@multiplicand,w
 14949  1A6A  00A1               	movwf	??___bmul
 14950  1A6B  0821               	movf	??___bmul,w
 14951  1A6C  07A2               	addwf	___bmul@product,f
 14952  1A6D                     l6444:	
 14953  1A6D  1003               	clrc
 14954  1A6E  0DA0               	rlf	___bmul@multiplicand,f
 14955  1A6F  1003               	clrc
 14956  1A70  0CA3               	rrf	___bmul@multiplier,f
 14957  1A71  08A3               	movf	___bmul@multiplier,f
 14958  1A72  1D03               	skipz
 14959  1A73  2A67               	goto	l6440
 14960  1A74  0822               	movf	___bmul@product,w
 14961  1A75  0008               	return
 14962  1A76                     __end_of___bmul:	
 14963                           
 14964                           	psect	text96
 14965  1C22                     __ptext96:	
 14966 ;; *************** function _setCmd_Status *****************
 14967 ;; Defined at:
 14968 ;;		line 651 in file "../src/main_B1.c"
 14969 ;; Parameters:    Size  Location     Type
 14970 ;;  number          1    wreg     unsigned char 
 14971 ;;  cmd             1    0[BANK0 ] unsigned char 
 14972 ;; Auto vars:     Size  Location     Type
 14973 ;;  number          1    2[BANK0 ] unsigned char 
 14974 ;; Return value:  Size  Location     Type
 14975 ;;		None               void
 14976 ;; Registers used:
 14977 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14978 ;; Tracked objects:
 14979 ;;		On entry : 0/0
 14980 ;;		On exit  : 0/0
 14981 ;;		Unchanged: 0/0
 14982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 14983 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14984 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14985 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14986 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 14987 ;;Total ram usage:        3 bytes
 14988 ;; Hardware stack levels used:    1
 14989 ;; Hardware stack levels required when called:    5
 14990 ;; This function calls:
 14991 ;;		Nothing
 14992 ;; This function is called by:
 14993 ;;		_setDimmerLights_OnOff
 14994 ;;		_setControl_Lights_Table
 14995 ;; This function uses a non-reentrant model
 14996 ;;
 14997                           
 14998                           
 14999                           ;psect for function _setCmd_Status
 15000  1C22                     _setCmd_Status:	
 15001                           
 15002                           ;incstack = 0
 15003                           ; Regs used in _setCmd_Status: [wreg-fsr0h+status,2+status,0]
 15004                           ;setCmd_Status@number stored from wreg
 15005  1C22  0020               	movlb	0	; select bank0
 15006  1C23  00A2               	movwf	setCmd_Status@number
 15007                           
 15008                           ;main_B1.c: 652: switch (number) {
 15009  1C24  2C34               	goto	l6978
 15010  1C25                     l6974:	
 15011                           ;main_B1.c: 653: case 1:
 15012                           
 15013                           
 15014                           ;main_B1.c: 654: Cmd.all_off = cmd == 1 ? 1 : 0;
 15015  1C25  0820               	movf	setCmd_Status@cmd,w
 15016  1C26  3A01               	xorlw	1
 15017  1C27  3000               	movlw	0
 15018  1C28  1903               	skipnz
 15019  1C29  3001               	movlw	1
 15020  1C2A  00A1               	movwf	??_setCmd_Status
 15021  1C2B  0021               	movlb	1	; select bank1
 15022  1C2C  0854               	movf	_Cmd^(0+128),w
 15023  1C2D  0020               	movlb	0	; select bank0
 15024  1C2E  0621               	xorwf	??_setCmd_Status,w
 15025  1C2F  39FE               	andlw	-2
 15026  1C30  0621               	xorwf	??_setCmd_Status,w
 15027  1C31  0021               	movlb	1	; select bank1
 15028  1C32  00D4               	movwf	_Cmd^(0+128)
 15029                           
 15030                           ;main_B1.c: 656: }
 15031                           
 15032                           ;main_B1.c: 655: break;
 15033  1C33  0008               	return
 15034  1C34                     l6978:	
 15035  1C34  0020               	movlb	0	; select bank0
 15036  1C35  0822               	movf	setCmd_Status@number,w
 15037                           
 15038                           ; Switch size 1, requested type "space"
 15039                           ; Number of cases is 1, Range of values is 1 to 1
 15040                           ; switch strategies available:
 15041                           ; Name         Instructions Cycles
 15042                           ; simple_byte            4     3 (average)
 15043                           ; direct_byte           11     9 (fixed)
 15044                           ; jumptable            263     9 (fixed)
 15045                           ;	Chosen strategy is simple_byte
 15046  1C36  3A01               	xorlw	1	; case 1
 15047  1C37  1903               	skipnz
 15048  1C38  2C25               	goto	l6974
 15049  1C39  2C3A               	goto	l2923
 15050  1C3A                     l2923:	
 15051  1C3A  0008               	return
 15052  1C3B                     __end_of_setCmd_Status:	
 15053                           
 15054                           	psect	text97
 15055  1AE4                     __ptext97:	
 15056 ;; *************** function _getMain_All_LightsStatus *****************
 15057 ;; Defined at:
 15058 ;;		line 373 in file "../src/main_B1.c"
 15059 ;; Parameters:    Size  Location     Type
 15060 ;;		None
 15061 ;; Auto vars:     Size  Location     Type
 15062 ;;  status          1    0[BANK0 ] unsigned char 
 15063 ;; Return value:  Size  Location     Type
 15064 ;;                  1    wreg      unsigned char 
 15065 ;; Registers used:
 15066 ;;		wreg, status,2, status,0
 15067 ;; Tracked objects:
 15068 ;;		On entry : 0/0
 15069 ;;		On exit  : 0/0
 15070 ;;		Unchanged: 0/0
 15071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15072 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15073 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15074 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15075 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15076 ;;Total ram usage:        1 bytes
 15077 ;; Hardware stack levels used:    1
 15078 ;; Hardware stack levels required when called:    5
 15079 ;; This function calls:
 15080 ;;		Nothing
 15081 ;; This function is called by:
 15082 ;;		_DimmerLights_Main
 15083 ;;		_setDimmerLights_Main
 15084 ;;		_setDimmerLights_OnOff
 15085 ;;		_Flash_Memory_Main
 15086 ;;		_Load_Main
 15087 ;;		_setTemp_Main
 15088 ;;		_setControl_Lights_Table
 15089 ;;		_Exception_Main
 15090 ;; This function uses a non-reentrant model
 15091 ;;
 15092                           
 15093                           
 15094                           ;psect for function _getMain_All_LightsStatus
 15095  1AE4                     _getMain_All_LightsStatus:	
 15096                           
 15097                           ;main_B1.c: 374: char status = 0;
 15098                           
 15099                           ;incstack = 0
 15100                           ; Regs used in _getMain_All_LightsStatus: [wreg+status,2+status,0]
 15101  1AE4  0020               	movlb	0	; select bank0
 15102  1AE5  01A0               	clrf	getMain_All_LightsStatus@status
 15103                           
 15104                           ;main_B1.c: 393: status = DimmerLights1.Status == 1 ? 1 : 0;
 15105  1AE6  3000               	movlw	0
 15106  1AE7  0022               	movlb	2	; select bank2
 15107  1AE8  1868               	btfsc	(_DimmerLights1^(0+256)+1),0
 15108  1AE9  3001               	movlw	1
 15109  1AEA  0020               	movlb	0	; select bank0
 15110  1AEB  00A0               	movwf	getMain_All_LightsStatus@status
 15111                           
 15112                           ;main_B1.c: 394: if (status == 0) {
 15113  1AEC  08A0               	movf	getMain_All_LightsStatus@status,f
 15114  1AED  1D03               	skipz
 15115  1AEE  2AF5               	goto	l6968
 15116                           
 15117                           ;main_B1.c: 395: status = DimmerLights2.Status == 1 ? 1 : 0;
 15118  1AEF  3000               	movlw	0
 15119  1AF0  0023               	movlb	3	; select bank3
 15120  1AF1  1851               	btfsc	(_DimmerLights2^(0+384)+1),0
 15121  1AF2  3001               	movlw	1
 15122  1AF3  0020               	movlb	0	; select bank0
 15123  1AF4  00A0               	movwf	getMain_All_LightsStatus@status
 15124  1AF5                     l6968:	
 15125                           
 15126                           ;main_B1.c: 396: }
 15127                           ;main_B1.c: 420: return status;
 15128  1AF5  0820               	movf	getMain_All_LightsStatus@status,w
 15129  1AF6  0008               	return
 15130  1AF7                     __end_of_getMain_All_LightsStatus:	
 15131                           
 15132                           	psect	text98
 15133  1A0E                     __ptext98:	
 15134 ;; *************** function _getDelayOff_GO *****************
 15135 ;; Defined at:
 15136 ;;		line 114 in file "../src/DelayOff_B1.c"
 15137 ;; Parameters:    Size  Location     Type
 15138 ;;  sw              1    wreg     unsigned char 
 15139 ;; Auto vars:     Size  Location     Type
 15140 ;;  sw              1    2[BANK0 ] unsigned char 
 15141 ;;  go              1    3[BANK0 ] unsigned char 
 15142 ;; Return value:  Size  Location     Type
 15143 ;;                  1    wreg      unsigned char 
 15144 ;; Registers used:
 15145 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15146 ;; Tracked objects:
 15147 ;;		On entry : 0/0
 15148 ;;		On exit  : 0/0
 15149 ;;		Unchanged: 0/0
 15150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15152 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15154 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15155 ;;Total ram usage:        2 bytes
 15156 ;; Hardware stack levels used:    1
 15157 ;; Hardware stack levels required when called:    6
 15158 ;; This function calls:
 15159 ;;		_DelayOffPointSelect
 15160 ;; This function is called by:
 15161 ;;		_setDimmerLights_OnOff
 15162 ;; This function uses a non-reentrant model
 15163 ;;
 15164                           
 15165                           
 15166                           ;psect for function _getDelayOff_GO
 15167  1A0E                     _getDelayOff_GO:	
 15168                           
 15169                           ;incstack = 0
 15170                           ; Regs used in _getDelayOff_GO: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15171                           ;getDelayOff_GO@sw stored from wreg
 15172  1A0E  0020               	movlb	0	; select bank0
 15173  1A0F  00A2               	movwf	getDelayOff_GO@sw
 15174                           
 15175                           ;DelayOff_B1.c: 115: DelayOffPointSelect(sw);
 15176  1A10  0822               	movf	getDelayOff_GO@sw,w
 15177  1A11  319B  23AF         	fcall	_DelayOffPointSelect
 15178                           
 15179                           ;DelayOff_B1.c: 116: char go = DelayOff->GO == 1 ? 1 : 0;
 15180  1A13  0021               	movlb	1	; select bank1
 15181  1A14  0855               	movf	_DelayOff^(0+128),w
 15182  1A15  0086               	movwf	6
 15183  1A16  3001               	movlw	1	; select bank2/3
 15184  1A17  0087               	movwf	7
 15185  1A18  3000               	movlw	0
 15186  1A19  1881               	btfsc	1,1
 15187  1A1A  3001               	movlw	1
 15188  1A1B  0020               	movlb	0	; select bank0
 15189  1A1C  00A3               	movwf	getDelayOff_GO@go
 15190                           
 15191                           ;DelayOff_B1.c: 117: return go;
 15192  1A1D  0823               	movf	getDelayOff_GO@go,w
 15193  1A1E  0008               	return
 15194  1A1F                     __end_of_getDelayOff_GO:	
 15195                           
 15196                           	psect	text99
 15197  1A52                     __ptext99:	
 15198 ;; *************** function _getCmd_Status *****************
 15199 ;; Defined at:
 15200 ;;		line 659 in file "../src/main_B1.c"
 15201 ;; Parameters:    Size  Location     Type
 15202 ;;  number          1    wreg     unsigned char 
 15203 ;; Auto vars:     Size  Location     Type
 15204 ;;  number          1    0[BANK0 ] unsigned char 
 15205 ;;  cmd             1    1[BANK0 ] unsigned char 
 15206 ;; Return value:  Size  Location     Type
 15207 ;;                  1    wreg      unsigned char 
 15208 ;; Registers used:
 15209 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 15210 ;; Tracked objects:
 15211 ;;		On entry : 0/0
 15212 ;;		On exit  : 0/0
 15213 ;;		Unchanged: 0/0
 15214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15216 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15218 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15219 ;;Total ram usage:        2 bytes
 15220 ;; Hardware stack levels used:    1
 15221 ;; Hardware stack levels required when called:    5
 15222 ;; This function calls:
 15223 ;;		Nothing
 15224 ;; This function is called by:
 15225 ;;		_setDimmerLights_OnOff
 15226 ;; This function uses a non-reentrant model
 15227 ;;
 15228                           
 15229                           
 15230                           ;psect for function _getCmd_Status
 15231  1A52                     _getCmd_Status:	
 15232                           
 15233                           ;incstack = 0
 15234                           ; Regs used in _getCmd_Status: [wreg-fsr0h+status,2+status,0]
 15235                           ;getCmd_Status@number stored from wreg
 15236  1A52  0020               	movlb	0	; select bank0
 15237  1A53  00A0               	movwf	getCmd_Status@number
 15238                           
 15239                           ;main_B1.c: 660: char cmd = 0;
 15240  1A54  01A1               	clrf	getCmd_Status@cmd
 15241                           
 15242                           ;main_B1.c: 661: switch (number) {
 15243  1A55  2A5D               	goto	l7278
 15244  1A56                     l7274:	
 15245                           ;main_B1.c: 662: case 1:
 15246                           
 15247                           
 15248                           ;main_B1.c: 663: cmd = Cmd.all_off == 1 ? 1 : 0;
 15249  1A56  3000               	movlw	0
 15250  1A57  0021               	movlb	1	; select bank1
 15251  1A58  1854               	btfsc	_Cmd^(0+128),0
 15252  1A59  3001               	movlw	1
 15253  1A5A  0020               	movlb	0	; select bank0
 15254  1A5B  00A1               	movwf	getCmd_Status@cmd
 15255                           
 15256                           ;main_B1.c: 665: }
 15257                           
 15258                           ;main_B1.c: 664: break;
 15259  1A5C  2A62               	goto	l7280
 15260  1A5D                     l7278:	
 15261  1A5D  0820               	movf	getCmd_Status@number,w
 15262                           
 15263                           ; Switch size 1, requested type "space"
 15264                           ; Number of cases is 1, Range of values is 1 to 1
 15265                           ; switch strategies available:
 15266                           ; Name         Instructions Cycles
 15267                           ; simple_byte            4     3 (average)
 15268                           ; direct_byte           11     9 (fixed)
 15269                           ; jumptable            263     9 (fixed)
 15270                           ;	Chosen strategy is simple_byte
 15271  1A5E  3A01               	xorlw	1	; case 1
 15272  1A5F  1903               	skipnz
 15273  1A60  2A56               	goto	l7274
 15274  1A61  2A62               	goto	l7280
 15275  1A62                     l7280:	
 15276                           
 15277                           ;main_B1.c: 666: return cmd;
 15278  1A62  0821               	movf	getCmd_Status@cmd,w
 15279  1A63  0008               	return
 15280  1A64                     __end_of_getCmd_Status:	
 15281                           
 15282                           	psect	text100
 15283  13B5                     __ptext100:	
 15284 ;; *************** function _setDimmerLights_Dimming *****************
 15285 ;; Defined at:
 15286 ;;		line 948 in file "../src/Dimmer_B1.c"
 15287 ;; Parameters:    Size  Location     Type
 15288 ;;  lights          1    wreg     unsigned char 
 15289 ;;  status          1   74[BANK0 ] unsigned char 
 15290 ;; Auto vars:     Size  Location     Type
 15291 ;;  lights          1   77[BANK0 ] unsigned char 
 15292 ;;  value           1   76[BANK0 ] unsigned char 
 15293 ;; Return value:  Size  Location     Type
 15294 ;;		None               void
 15295 ;; Registers used:
 15296 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15297 ;; Tracked objects:
 15298 ;;		On entry : 0/0
 15299 ;;		On exit  : 0/0
 15300 ;;		Unchanged: 0/0
 15301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15302 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15303 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15304 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15305 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15306 ;;Total ram usage:        4 bytes
 15307 ;; Hardware stack levels used:    1
 15308 ;; Hardware stack levels required when called:    8
 15309 ;; This function calls:
 15310 ;;		_getDimmerIntr_DimmingValue
 15311 ;;		_getDimmerLights_ValueToPercent
 15312 ;;		_setBuz
 15313 ;;		_setDimmerIntr_Dimming_Sw
 15314 ;;		_setDimmerIntr_MaxmumValue
 15315 ;;		_setDimmerLights_Line
 15316 ;;		_setMemory_Modify
 15317 ;;		_setProductData
 15318 ;;		_setRF_DimmerLights
 15319 ;;		_setRF_TransceiveGO
 15320 ;;		_setTxData
 15321 ;; This function is called by:
 15322 ;;		_setDimmerLights_Main
 15323 ;; This function uses a non-reentrant model
 15324 ;;
 15325                           
 15326                           
 15327                           ;psect for function _setDimmerLights_Dimming
 15328  13B5                     _setDimmerLights_Dimming:	
 15329                           
 15330                           ;incstack = 0
 15331                           ; Regs used in _setDimmerLights_Dimming: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+csta
      +                          ck]
 15332                           ;setDimmerLights_Dimming@lights stored from wreg
 15333  13B5  0020               	movlb	0	; select bank0
 15334  13B6  00ED               	movwf	setDimmerLights_Dimming@lights
 15335                           
 15336                           ;Dimmer_B1.c: 949: if (status == 1) {
 15337  13B7  086A               	movf	setDimmerLights_Dimming@status,w
 15338  13B8  3A01               	xorlw	1
 15339  13B9  1D03               	skipz
 15340  13BA  2BCE               	goto	l7578
 15341                           
 15342                           ;Dimmer_B1.c: 950: setDimmerIntr_Dimming_Sw(lights, 1);
 15343  13BB  01A0               	clrf	setDimmerIntr_Dimming_Sw@command
 15344  13BC  0AA0               	incf	setDimmerIntr_Dimming_Sw@command,f
 15345  13BD  086D               	movf	setDimmerLights_Dimming@lights,w
 15346  13BE  319F  2715  3193   	fcall	_setDimmerIntr_Dimming_Sw
 15347                           
 15348                           ;Dimmer_B1.c: 953: setRF_TransceiveGO(0);
 15349  13C1  3000               	movlw	0
 15350  13C2  319A  22D1  3193   	fcall	_setRF_TransceiveGO
 15351                           
 15352                           ;Dimmer_B1.c: 955: setBuz(1, 100);
 15353  13C5  3064               	movlw	100
 15354  13C6  0020               	movlb	0	; select bank0
 15355  13C7  00A9               	movwf	setBuz@time
 15356  13C8  3000               	movlw	0
 15357  13C9  00AA               	movwf	setBuz@time+1
 15358  13CA  3001               	movlw	1
 15359  13CB  3194  240B         	fcall	_setBuz
 15360                           
 15361                           ;Dimmer_B1.c: 956: } else if (status == 0) {
 15362  13CD  0008               	return
 15363  13CE                     l7578:	
 15364  13CE  0020               	movlb	0	; select bank0
 15365  13CF  08EA               	movf	setDimmerLights_Dimming@status,f
 15366  13D0  1D03               	skipz
 15367  13D1  0008               	return
 15368                           
 15369                           ;Dimmer_B1.c: 957: setDimmerIntr_Dimming_Sw(lights, 0);
 15370  13D2  01A0               	clrf	setDimmerIntr_Dimming_Sw@command
 15371  13D3  086D               	movf	setDimmerLights_Dimming@lights,w
 15372  13D4  319F  2715  3193   	fcall	_setDimmerIntr_Dimming_Sw
 15373                           
 15374                           ;Dimmer_B1.c: 960: Dimmer.Load_Status = 0;
 15375  13D7  0022               	movlb	2	; select bank2
 15376  13D8  112C               	bcf	_Dimmer^(0+256),2
 15377                           
 15378                           ;Dimmer_B1.c: 961: setDimmerLights_Line(lights);
 15379  13D9  0020               	movlb	0	; select bank0
 15380  13DA  086D               	movf	setDimmerLights_Dimming@lights,w
 15381  13DB  319C  24DA  3193   	fcall	_setDimmerLights_Line
 15382                           
 15383                           ;Dimmer_B1.c: 963: char value = getDimmerIntr_DimmingValue(lights);
 15384  13DE  0020               	movlb	0	; select bank0
 15385  13DF  086D               	movf	setDimmerLights_Dimming@lights,w
 15386  13E0  319B  2399  3193   	fcall	_getDimmerIntr_DimmingValue
 15387  13E3  0020               	movlb	0	; select bank0
 15388  13E4  00EB               	movwf	??_setDimmerLights_Dimming
 15389  13E5  086B               	movf	??_setDimmerLights_Dimming,w
 15390  13E6  00EC               	movwf	setDimmerLights_Dimming@value
 15391                           
 15392                           ;Dimmer_B1.c: 964: setDimmerIntr_MaxmumValue(lights, value);
 15393  13E7  086C               	movf	setDimmerLights_Dimming@value,w
 15394  13E8  00EB               	movwf	??_setDimmerLights_Dimming
 15395  13E9  086B               	movf	??_setDimmerLights_Dimming,w
 15396  13EA  00E2               	movwf	setDimmerIntr_MaxmumValue@value
 15397  13EB  086D               	movf	setDimmerLights_Dimming@lights,w
 15398  13EC  319B  23DD  3193   	fcall	_setDimmerIntr_MaxmumValue
 15399                           
 15400                           ;Dimmer_B1.c: 965: setProductData((20 + lights), getDimmerLights_ValueToPercent(value));
 15401  13EF  0020               	movlb	0	; select bank0
 15402  13F0  086C               	movf	setDimmerLights_Dimming@value,w
 15403  13F1  3195  2585  3193   	fcall	_getDimmerLights_ValueToPercent
 15404  13F4  0020               	movlb	0	; select bank0
 15405  13F5  00EB               	movwf	??_setDimmerLights_Dimming
 15406  13F6  086B               	movf	??_setDimmerLights_Dimming,w
 15407  13F7  00E2               	movwf	setProductData@value
 15408  13F8  086D               	movf	setDimmerLights_Dimming@lights,w
 15409  13F9  3E14               	addlw	20
 15410  13FA  3199  2181  3193   	fcall	_setProductData
 15411                           
 15412                           ;Dimmer_B1.c: 972: setMemory_Modify(1);
 15413  13FD  3001               	movlw	1
 15414  13FE  319A  22BE  3193   	fcall	_setMemory_Modify
 15415                           
 15416                           ;Dimmer_B1.c: 976: setRF_DimmerLights(lights, 1);
 15417  1401  0020               	movlb	0	; select bank0
 15418  1402  01E5               	clrf	setRF_DimmerLights@on
 15419  1403  0AE5               	incf	setRF_DimmerLights@on,f
 15420  1404  086D               	movf	setDimmerLights_Dimming@lights,w
 15421  1405  3195  25EA  3193   	fcall	_setRF_DimmerLights
 15422                           
 15423                           ;Dimmer_B1.c: 977: setTxData();
 15424  1408  318F  2745         	fcall	_setTxData
 15425  140A  0008               	return
 15426  140B                     __end_of_setDimmerLights_Dimming:	
 15427                           
 15428                           	psect	text101
 15429  0F45                     __ptext101:	
 15430 ;; *************** function _setTxData *****************
 15431 ;; Defined at:
 15432 ;;		line 183 in file "../src/RF_Control_B1.c"
 15433 ;; Parameters:    Size  Location     Type
 15434 ;;		None
 15435 ;; Auto vars:     Size  Location     Type
 15436 ;;  i               1    0        unsigned char 
 15437 ;; Return value:  Size  Location     Type
 15438 ;;		None               void
 15439 ;; Registers used:
 15440 ;;		wreg, fsr1l, fsr1h, status,2
 15441 ;; Tracked objects:
 15442 ;;		On entry : 0/0
 15443 ;;		On exit  : 0/0
 15444 ;;		Unchanged: 0/0
 15445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15446 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15447 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15448 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15449 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15450 ;;Total ram usage:        1 bytes
 15451 ;; Hardware stack levels used:    1
 15452 ;; Hardware stack levels required when called:    5
 15453 ;; This function calls:
 15454 ;;		Nothing
 15455 ;; This function is called by:
 15456 ;;		_setDimmerLights_OnOff
 15457 ;;		_setDimmerLights_Dimming
 15458 ;;		_getRxData
 15459 ;;		_setControl_Lights_Table
 15460 ;;		_setRFSW_Control
 15461 ;;		_setRFSW_AdjControl
 15462 ;; This function uses a non-reentrant model
 15463 ;;
 15464                           
 15465                           
 15466                           ;psect for function _setTxData
 15467  0F45                     _setTxData:	
 15468                           
 15469                           ;RF_Control_B1.c: 184: char i;
 15470                           ;RF_Control_B1.c: 185: if (RF1.Enable == 1) {
 15471                           
 15472                           ;incstack = 0
 15473                           ; Regs used in _setTxData: [wreg+fsr1l+fsr1h+status,2]
 15474  0F45  0021               	movlb	1	; select bank1
 15475  0F46  1C20               	btfss	_RF1^(0+128),0
 15476  0F47  0008               	return
 15477                           
 15478                           ;RF_Control_B1.c: 187: RF1.TransceiveGO = 1;
 15479  0F48  1520               	bsf	_RF1^(0+128),2
 15480                           
 15481                           ;RF_Control_B1.c: 188: RF1.Count = 0;
 15482  0F49  01A2               	clrf	(_RF1^(0+128)+2)
 15483  0F4A  01A3               	clrf	((_RF1+1)^(0+128)+2)
 15484                           
 15485                           ;RF_Control_B1.c: 200: RF_Data[0] = 0x63;
 15486  0F4B  3063               	movlw	99
 15487  0F4C  0020               	movlb	0	; select bank0
 15488  0F4D  00A0               	movwf	??_setTxData
 15489  0F4E  0820               	movf	??_setTxData,w
 15490  0F4F  0023               	movlb	3	; select bank3
 15491  0F50  00A0               	movwf	_RF_Data^(0+384)
 15492                           
 15493                           ;RF_Control_B1.c: 201: RF_Data[1] = 0x02;
 15494  0F51  3002               	movlw	2
 15495  0F52  0020               	movlb	0	; select bank0
 15496  0F53  00A0               	movwf	??_setTxData
 15497  0F54  0820               	movf	??_setTxData,w
 15498  0F55  0023               	movlb	3	; select bank3
 15499  0F56  00A1               	movwf	(_RF_Data^(0+384)+1)
 15500                           
 15501                           ;RF_Control_B1.c: 203: RF_Data[2] = product->Data[2];
 15502  0F57  0021               	movlb	1	; select bank1
 15503  0F58  086E               	movf	_product^(0+128),w
 15504  0F59  0086               	movwf	6
 15505  0F5A  3002               	movlw	2	; select bank4/5
 15506  0F5B  0087               	movwf	7
 15507  0F5C  3002               	movlw	2	; select bank4/5
 15508  0F5D  3F42               	moviw [2]fsr1
 15509  0F5E  0023               	movlb	3	; select bank3
 15510  0F5F  00A2               	movwf	(_RF_Data^(0+384)+2)
 15511                           
 15512                           ;RF_Control_B1.c: 204: RF_Data[3] = product->Data[3];
 15513  0F60  0021               	movlb	1	; select bank1
 15514  0F61  086E               	movf	_product^(0+128),w
 15515  0F62  0086               	movwf	6
 15516  0F63  3002               	movlw	2	; select bank4/5
 15517  0F64  0087               	movwf	7
 15518  0F65  3002               	movlw	2	; select bank4/5
 15519  0F66  3F43               	moviw [3]fsr1
 15520  0F67  0023               	movlb	3	; select bank3
 15521  0F68  00A3               	movwf	(_RF_Data^(0+384)+3)
 15522                           
 15523                           ;RF_Control_B1.c: 205: RF_Data[4] = product->Data[4];
 15524  0F69  0021               	movlb	1	; select bank1
 15525  0F6A  086E               	movf	_product^(0+128),w
 15526  0F6B  0086               	movwf	6
 15527  0F6C  3002               	movlw	2	; select bank4/5
 15528  0F6D  0087               	movwf	7
 15529  0F6E  3002               	movlw	2	; select bank4/5
 15530  0F6F  3F44               	moviw [4]fsr1
 15531  0F70  0023               	movlb	3	; select bank3
 15532  0F71  00A4               	movwf	(_RF_Data^(0+384)+4)
 15533                           
 15534                           ;RF_Control_B1.c: 206: RF_Data[5] = product->Data[5];
 15535  0F72  0021               	movlb	1	; select bank1
 15536  0F73  086E               	movf	_product^(0+128),w
 15537  0F74  0086               	movwf	6
 15538  0F75  3002               	movlw	2	; select bank4/5
 15539  0F76  0087               	movwf	7
 15540  0F77  3002               	movlw	2	; select bank4/5
 15541  0F78  3F45               	moviw [5]fsr1
 15542  0F79  0023               	movlb	3	; select bank3
 15543  0F7A  00A5               	movwf	(_RF_Data^(0+384)+5)
 15544                           
 15545                           ;RF_Control_B1.c: 207: RF_Data[6] = product->Data[6];
 15546  0F7B  0021               	movlb	1	; select bank1
 15547  0F7C  086E               	movf	_product^(0+128),w
 15548  0F7D  0086               	movwf	6
 15549  0F7E  3002               	movlw	2	; select bank4/5
 15550  0F7F  0087               	movwf	7
 15551  0F80  3002               	movlw	2	; select bank4/5
 15552  0F81  3F46               	moviw [6]fsr1
 15553  0F82  0023               	movlb	3	; select bank3
 15554  0F83  00A6               	movwf	(_RF_Data^(0+384)+6)
 15555                           
 15556                           ;RF_Control_B1.c: 208: RF_Data[7] = product->Data[7];
 15557  0F84  0021               	movlb	1	; select bank1
 15558  0F85  086E               	movf	_product^(0+128),w
 15559  0F86  0086               	movwf	6
 15560  0F87  3002               	movlw	2	; select bank4/5
 15561  0F88  0087               	movwf	7
 15562  0F89  3002               	movlw	2	; select bank4/5
 15563  0F8A  3F47               	moviw [7]fsr1
 15564  0F8B  0023               	movlb	3	; select bank3
 15565  0F8C  00A7               	movwf	(_RF_Data^(0+384)+7)
 15566                           
 15567                           ;RF_Control_B1.c: 209: RF_Data[8] = product->Data[8];
 15568  0F8D  0021               	movlb	1	; select bank1
 15569  0F8E  086E               	movf	_product^(0+128),w
 15570  0F8F  0086               	movwf	6
 15571  0F90  3002               	movlw	2	; select bank4/5
 15572  0F91  0087               	movwf	7
 15573  0F92  3002               	movlw	2	; select bank4/5
 15574  0F93  3F48               	moviw [8]fsr1
 15575  0F94  0023               	movlb	3	; select bank3
 15576  0F95  00A8               	movwf	(_RF_Data^(0+384)+8)
 15577                           
 15578                           ;RF_Control_B1.c: 210: RF_Data[9] = product->Data[9];
 15579  0F96  0021               	movlb	1	; select bank1
 15580  0F97  086E               	movf	_product^(0+128),w
 15581  0F98  0086               	movwf	6
 15582  0F99  3002               	movlw	2	; select bank4/5
 15583  0F9A  0087               	movwf	7
 15584  0F9B  3002               	movlw	2	; select bank4/5
 15585  0F9C  3F49               	moviw [9]fsr1
 15586  0F9D  0023               	movlb	3	; select bank3
 15587  0F9E  00A9               	movwf	(_RF_Data^(0+384)+9)
 15588                           
 15589                           ;RF_Control_B1.c: 211: RF_Data[10] = product->Data[10];
 15590  0F9F  0021               	movlb	1	; select bank1
 15591  0FA0  086E               	movf	_product^(0+128),w
 15592  0FA1  0086               	movwf	6
 15593  0FA2  3002               	movlw	2	; select bank4/5
 15594  0FA3  0087               	movwf	7
 15595  0FA4  3002               	movlw	2	; select bank4/5
 15596  0FA5  3F4A               	moviw [10]fsr1
 15597  0FA6  0023               	movlb	3	; select bank3
 15598  0FA7  00AA               	movwf	(_RF_Data^(0+384)+10)
 15599                           
 15600                           ;RF_Control_B1.c: 212: RF_Data[11] = product->Data[11];
 15601  0FA8  0021               	movlb	1	; select bank1
 15602  0FA9  086E               	movf	_product^(0+128),w
 15603  0FAA  0086               	movwf	6
 15604  0FAB  3002               	movlw	2	; select bank4/5
 15605  0FAC  0087               	movwf	7
 15606  0FAD  3002               	movlw	2	; select bank4/5
 15607  0FAE  3F4B               	moviw [11]fsr1
 15608  0FAF  0023               	movlb	3	; select bank3
 15609  0FB0  00AB               	movwf	(_RF_Data^(0+384)+11)
 15610                           
 15611                           ;RF_Control_B1.c: 213: RF_Data[12] = product->Data[12];
 15612  0FB1  0021               	movlb	1	; select bank1
 15613  0FB2  086E               	movf	_product^(0+128),w
 15614  0FB3  0086               	movwf	6
 15615  0FB4  3002               	movlw	2	; select bank4/5
 15616  0FB5  0087               	movwf	7
 15617  0FB6  3002               	movlw	2	; select bank4/5
 15618  0FB7  3F4C               	moviw [12]fsr1
 15619  0FB8  0023               	movlb	3	; select bank3
 15620  0FB9  00AC               	movwf	(_RF_Data^(0+384)+12)
 15621                           
 15622                           ;RF_Control_B1.c: 214: RF_Data[13] = product->Data[13];
 15623  0FBA  0021               	movlb	1	; select bank1
 15624  0FBB  086E               	movf	_product^(0+128),w
 15625  0FBC  0086               	movwf	6
 15626  0FBD  3002               	movlw	2	; select bank4/5
 15627  0FBE  0087               	movwf	7
 15628  0FBF  3002               	movlw	2	; select bank4/5
 15629  0FC0  3F4D               	moviw [13]fsr1
 15630  0FC1  0023               	movlb	3	; select bank3
 15631  0FC2  00AD               	movwf	(_RF_Data^(0+384)+13)
 15632                           
 15633                           ;RF_Control_B1.c: 215: RF_Data[14] = product->Data[14];
 15634  0FC3  0021               	movlb	1	; select bank1
 15635  0FC4  086E               	movf	_product^(0+128),w
 15636  0FC5  0086               	movwf	6
 15637  0FC6  3002               	movlw	2	; select bank4/5
 15638  0FC7  0087               	movwf	7
 15639  0FC8  3002               	movlw	2	; select bank4/5
 15640  0FC9  3F4E               	moviw [14]fsr1
 15641  0FCA  0023               	movlb	3	; select bank3
 15642  0FCB  00AE               	movwf	(_RF_Data^(0+384)+14)
 15643                           
 15644                           ;RF_Control_B1.c: 216: RF_Data[15] = product->Data[15];
 15645  0FCC  0021               	movlb	1	; select bank1
 15646  0FCD  086E               	movf	_product^(0+128),w
 15647  0FCE  0086               	movwf	6
 15648  0FCF  3002               	movlw	2	; select bank4/5
 15649  0FD0  0087               	movwf	7
 15650  0FD1  3002               	movlw	2	; select bank4/5
 15651  0FD2  3F4F               	moviw [15]fsr1
 15652  0FD3  0023               	movlb	3	; select bank3
 15653  0FD4  00AF               	movwf	(_RF_Data^(0+384)+15)
 15654                           
 15655                           ;RF_Control_B1.c: 217: RF_Data[16] = product->Data[16];
 15656  0FD5  0021               	movlb	1	; select bank1
 15657  0FD6  086E               	movf	_product^(0+128),w
 15658  0FD7  0086               	movwf	6
 15659  0FD8  3002               	movlw	2	; select bank4/5
 15660  0FD9  0087               	movwf	7
 15661  0FDA  3002               	movlw	2	; select bank4/5
 15662  0FDB  3F50               	moviw [16]fsr1
 15663  0FDC  0023               	movlb	3	; select bank3
 15664  0FDD  00B0               	movwf	(_RF_Data^(0+384)+16)
 15665                           
 15666                           ;RF_Control_B1.c: 218: RF_Data[17] = product->Data[17];
 15667  0FDE  0021               	movlb	1	; select bank1
 15668  0FDF  086E               	movf	_product^(0+128),w
 15669  0FE0  0086               	movwf	6
 15670  0FE1  3002               	movlw	2	; select bank4/5
 15671  0FE2  0087               	movwf	7
 15672  0FE3  3002               	movlw	2	; select bank4/5
 15673  0FE4  3F51               	moviw [17]fsr1
 15674  0FE5  0023               	movlb	3	; select bank3
 15675  0FE6  00B1               	movwf	(_RF_Data^(0+384)+17)
 15676                           
 15677                           ;RF_Control_B1.c: 219: RF_Data[18] = product->Data[18];
 15678  0FE7  0021               	movlb	1	; select bank1
 15679  0FE8  086E               	movf	_product^(0+128),w
 15680  0FE9  0086               	movwf	6
 15681  0FEA  3002               	movlw	2	; select bank4/5
 15682  0FEB  0087               	movwf	7
 15683  0FEC  3002               	movlw	2	; select bank4/5
 15684  0FED  3F52               	moviw [18]fsr1
 15685  0FEE  0023               	movlb	3	; select bank3
 15686  0FEF  00B2               	movwf	(_RF_Data^(0+384)+18)
 15687                           
 15688                           ;RF_Control_B1.c: 220: RF_Data[19] = product->Data[19];
 15689  0FF0  0021               	movlb	1	; select bank1
 15690  0FF1  086E               	movf	_product^(0+128),w
 15691  0FF2  0086               	movwf	6
 15692  0FF3  3002               	movlw	2	; select bank4/5
 15693  0FF4  0087               	movwf	7
 15694  0FF5  3002               	movlw	2	; select bank4/5
 15695  0FF6  3F53               	moviw [19]fsr1
 15696  0FF7  0023               	movlb	3	; select bank3
 15697  0FF8  00B3               	movwf	(_RF_Data^(0+384)+19)
 15698                           
 15699                           ;RF_Control_B1.c: 221: RF_Data[20] = 210;
 15700  0FF9  30D2               	movlw	210
 15701  0FFA  0020               	movlb	0	; select bank0
 15702  0FFB  00A0               	movwf	??_setTxData
 15703  0FFC  0820               	movf	??_setTxData,w
 15704  0FFD  0023               	movlb	3	; select bank3
 15705  0FFE  00B4               	movwf	(_RF_Data^(0+384)+20)
 15706  0FFF  0008               	return
 15707  1000                     __end_of_setTxData:	
 15708                           
 15709                           	psect	text102
 15710  1AD1                     __ptext102:	
 15711 ;; *************** function _setRF_TransceiveGO *****************
 15712 ;; Defined at:
 15713 ;;		line 470 in file "../src/RF_Control_B1.c"
 15714 ;; Parameters:    Size  Location     Type
 15715 ;;  command         1    wreg     unsigned char 
 15716 ;; Auto vars:     Size  Location     Type
 15717 ;;  command         1    1[BANK0 ] unsigned char 
 15718 ;; Return value:  Size  Location     Type
 15719 ;;		None               void
 15720 ;; Registers used:
 15721 ;;		wreg, status,2, status,0
 15722 ;; Tracked objects:
 15723 ;;		On entry : 0/0
 15724 ;;		On exit  : 0/0
 15725 ;;		Unchanged: 0/0
 15726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15727 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15728 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15729 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15730 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15731 ;;Total ram usage:        2 bytes
 15732 ;; Hardware stack levels used:    1
 15733 ;; Hardware stack levels required when called:    5
 15734 ;; This function calls:
 15735 ;;		Nothing
 15736 ;; This function is called by:
 15737 ;;		_setDimmerLights_Dimming
 15738 ;; This function uses a non-reentrant model
 15739 ;;
 15740                           
 15741                           
 15742                           ;psect for function _setRF_TransceiveGO
 15743  1AD1                     _setRF_TransceiveGO:	
 15744                           
 15745                           ;incstack = 0
 15746                           ; Regs used in _setRF_TransceiveGO: [wreg+status,2+status,0]
 15747                           ;setRF_TransceiveGO@command stored from wreg
 15748  1AD1  0020               	movlb	0	; select bank0
 15749  1AD2  00A1               	movwf	setRF_TransceiveGO@command
 15750                           
 15751                           ;RF_Control_B1.c: 471: RF1.TransceiveGO = command == 1 ? 1 : 0;
 15752  1AD3  0821               	movf	setRF_TransceiveGO@command,w
 15753  1AD4  3A01               	xorlw	1
 15754  1AD5  3000               	movlw	0
 15755  1AD6  1903               	skipnz
 15756  1AD7  3001               	movlw	1
 15757  1AD8  00A0               	movwf	??_setRF_TransceiveGO
 15758  1AD9  0DA0               	rlf	??_setRF_TransceiveGO,f
 15759  1ADA  0DA0               	rlf	??_setRF_TransceiveGO,f
 15760  1ADB  0021               	movlb	1	; select bank1
 15761  1ADC  0820               	movf	_RF1^(0+128),w
 15762  1ADD  0020               	movlb	0	; select bank0
 15763  1ADE  0620               	xorwf	??_setRF_TransceiveGO,w
 15764  1ADF  39FB               	andlw	-5
 15765  1AE0  0620               	xorwf	??_setRF_TransceiveGO,w
 15766  1AE1  0021               	movlb	1	; select bank1
 15767  1AE2  00A0               	movwf	_RF1^(0+128)
 15768  1AE3  0008               	return
 15769  1AE4                     __end_of_setRF_TransceiveGO:	
 15770                           
 15771                           	psect	text103
 15772  15EA                     __ptext103:	
 15773 ;; *************** function _setRF_DimmerLights *****************
 15774 ;; Defined at:
 15775 ;;		line 455 in file "../src/RF_Control_B1.c"
 15776 ;; Parameters:    Size  Location     Type
 15777 ;;  lights          1    wreg     unsigned char 
 15778 ;;  on              1   69[BANK0 ] unsigned char 
 15779 ;; Auto vars:     Size  Location     Type
 15780 ;;  lights          1   73[BANK0 ] unsigned char 
 15781 ;;  status          1   72[BANK0 ] unsigned char 
 15782 ;; Return value:  Size  Location     Type
 15783 ;;		None               void
 15784 ;; Registers used:
 15785 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15786 ;; Tracked objects:
 15787 ;;		On entry : 0/0
 15788 ;;		On exit  : 0/0
 15789 ;;		Unchanged: 0/0
 15790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15791 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15792 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15793 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15794 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15795 ;;Total ram usage:        5 bytes
 15796 ;; Hardware stack levels used:    1
 15797 ;; Hardware stack levels required when called:    6
 15798 ;; This function calls:
 15799 ;;		_setProductData
 15800 ;; This function is called by:
 15801 ;;		_setDimmerLights_OnOff
 15802 ;;		_setDimmerLights_Dimming
 15803 ;;		_setRFSW_Control
 15804 ;; This function uses a non-reentrant model
 15805 ;;
 15806                           
 15807                           
 15808                           ;psect for function _setRF_DimmerLights
 15809  15EA                     _setRF_DimmerLights:	
 15810                           
 15811                           ;incstack = 0
 15812                           ; Regs used in _setRF_DimmerLights: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15813                           ;setRF_DimmerLights@lights stored from wreg
 15814  15EA  0020               	movlb	0	; select bank0
 15815  15EB  00E9               	movwf	setRF_DimmerLights@lights
 15816                           
 15817                           ;RF_Control_B1.c: 456: char status = 1;
 15818  15EC  01E8               	clrf	setRF_DimmerLights@status
 15819  15ED  0AE8               	incf	setRF_DimmerLights@status,f
 15820                           
 15821                           ;RF_Control_B1.c: 457: status <<= (lights - 1);
 15822  15EE  0869               	movf	setRF_DimmerLights@lights,w
 15823  15EF  3EFF               	addlw	-1
 15824  15F0  0A89               	incf	9,f
 15825  15F1  2DF4               	goto	u6250
 15826  15F2                     u6255:	
 15827  15F2  1003               	clrc
 15828  15F3  0DE8               	rlf	setRF_DimmerLights@status,f
 15829  15F4                     u6250:	
 15830  15F4  3EFF               	addlw	-1
 15831  15F5  1D03               	skipz
 15832  15F6  2DF2               	goto	u6255
 15833                           
 15834                           ;RF_Control_B1.c: 458: setProductData(11, lights);
 15835  15F7  0869               	movf	setRF_DimmerLights@lights,w
 15836  15F8  00E6               	movwf	??_setRF_DimmerLights
 15837  15F9  0866               	movf	??_setRF_DimmerLights,w
 15838  15FA  00E2               	movwf	setProductData@value
 15839  15FB  300B               	movlw	11
 15840  15FC  3199  2181  3195   	fcall	_setProductData
 15841                           
 15842                           ;RF_Control_B1.c: 459: setProductData(17, product->Data[26 + lights]);
 15843  15FF  0020               	movlb	0	; select bank0
 15844  1600  0869               	movf	setRF_DimmerLights@lights,w
 15845  1601  3E1A               	addlw	26
 15846  1602  0021               	movlb	1	; select bank1
 15847  1603  076E               	addwf	_product^(0+128),w
 15848  1604  0020               	movlb	0	; select bank0
 15849  1605  00E6               	movwf	??_setRF_DimmerLights
 15850  1606  0866               	movf	??_setRF_DimmerLights,w
 15851  1607  0086               	movwf	6
 15852  1608  3002               	movlw	2	; select bank4/5
 15853  1609  0087               	movwf	7
 15854  160A  0801               	movf	1,w
 15855  160B  00E7               	movwf	??_setRF_DimmerLights+1
 15856  160C  0867               	movf	??_setRF_DimmerLights+1,w
 15857  160D  00E2               	movwf	setProductData@value
 15858  160E  3011               	movlw	17
 15859  160F  3199  2181  3195   	fcall	_setProductData
 15860                           
 15861                           ;RF_Control_B1.c: 460: if (on == 1) {
 15862  1612  0020               	movlb	0	; select bank0
 15863  1613  0865               	movf	setRF_DimmerLights@on,w
 15864  1614  3A01               	xorlw	1
 15865  1615  1D03               	skipz
 15866  1616  2E39               	goto	l6842
 15867                           
 15868                           ;RF_Control_B1.c: 461: setProductData(9, product->Data[20 + lights]);
 15869  1617  0869               	movf	setRF_DimmerLights@lights,w
 15870  1618  3E14               	addlw	20
 15871  1619  0021               	movlb	1	; select bank1
 15872  161A  076E               	addwf	_product^(0+128),w
 15873  161B  0020               	movlb	0	; select bank0
 15874  161C  00E6               	movwf	??_setRF_DimmerLights
 15875  161D  0866               	movf	??_setRF_DimmerLights,w
 15876  161E  0086               	movwf	6
 15877  161F  3002               	movlw	2	; select bank4/5
 15878  1620  0087               	movwf	7
 15879  1621  0801               	movf	1,w
 15880  1622  00E7               	movwf	??_setRF_DimmerLights+1
 15881  1623  0867               	movf	??_setRF_DimmerLights+1,w
 15882  1624  00E2               	movwf	setProductData@value
 15883  1625  3009               	movlw	9
 15884  1626  3199  2181  3195   	fcall	_setProductData
 15885                           
 15886                           ;RF_Control_B1.c: 462: setProductData(15, (product->Data[15] | status));
 15887  1629  0021               	movlb	1	; select bank1
 15888  162A  086E               	movf	_product^(0+128),w
 15889  162B  3E0F               	addlw	15
 15890  162C  0086               	movwf	6
 15891  162D  3002               	movlw	2	; select bank4/5
 15892  162E  0087               	movwf	7
 15893  162F  0801               	movf	1,w
 15894  1630  0020               	movlb	0	; select bank0
 15895  1631  0468               	iorwf	setRF_DimmerLights@status,w
 15896  1632  00E6               	movwf	??_setRF_DimmerLights
 15897  1633  0866               	movf	??_setRF_DimmerLights,w
 15898  1634  00E2               	movwf	setProductData@value
 15899  1635  300F               	movlw	15
 15900  1636  3199  2181         	fcall	_setProductData
 15901                           
 15902                           ;RF_Control_B1.c: 463: } else {
 15903  1638  0008               	return
 15904  1639                     l6842:	
 15905                           
 15906                           ;RF_Control_B1.c: 464: setProductData(9, 0x00);
 15907  1639  0020               	movlb	0	; select bank0
 15908  163A  01E2               	clrf	setProductData@value
 15909  163B  3009               	movlw	9
 15910  163C  3199  2181  3195   	fcall	_setProductData
 15911                           
 15912                           ;RF_Control_B1.c: 465: setProductData(15, (product->Data[15]&(~status)));
 15913  163F  0021               	movlb	1	; select bank1
 15914  1640  086E               	movf	_product^(0+128),w
 15915  1641  3E0F               	addlw	15
 15916  1642  0086               	movwf	6
 15917  1643  3002               	movlw	2	; select bank4/5
 15918  1644  0087               	movwf	7
 15919  1645  0020               	movlb	0	; select bank0
 15920  1646  0968               	comf	setRF_DimmerLights@status,w
 15921  1647  0501               	andwf	1,w
 15922  1648  00E6               	movwf	??_setRF_DimmerLights
 15923  1649  0866               	movf	??_setRF_DimmerLights,w
 15924  164A  00E2               	movwf	setProductData@value
 15925  164B  300F               	movlw	15
 15926  164C  3199  2181         	fcall	_setProductData
 15927  164E  0008               	return
 15928  164F                     __end_of_setRF_DimmerLights:	
 15929                           
 15930                           	psect	text104
 15931  1CDA                     __ptext104:	
 15932 ;; *************** function _setDimmerLights_Line *****************
 15933 ;; Defined at:
 15934 ;;		line 1022 in file "../src/Dimmer_B1.c"
 15935 ;; Parameters:    Size  Location     Type
 15936 ;;  lights          1    wreg     unsigned char 
 15937 ;; Auto vars:     Size  Location     Type
 15938 ;;  lights          1    0[BANK0 ] unsigned char 
 15939 ;; Return value:  Size  Location     Type
 15940 ;;		None               void
 15941 ;; Registers used:
 15942 ;;		wreg
 15943 ;; Tracked objects:
 15944 ;;		On entry : 0/0
 15945 ;;		On exit  : 0/0
 15946 ;;		Unchanged: 0/0
 15947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 15948 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15949 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15951 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 15952 ;;Total ram usage:        1 bytes
 15953 ;; Hardware stack levels used:    1
 15954 ;; Hardware stack levels required when called:    5
 15955 ;; This function calls:
 15956 ;;		Nothing
 15957 ;; This function is called by:
 15958 ;;		_setDimmerLights_OnOff
 15959 ;;		_setDimmerLights_Dimming
 15960 ;; This function uses a non-reentrant model
 15961 ;;
 15962                           
 15963                           
 15964                           ;psect for function _setDimmerLights_Line
 15965  1CDA                     _setDimmerLights_Line:	
 15966                           
 15967                           ;incstack = 0
 15968                           ; Regs used in _setDimmerLights_Line: [wreg]
 15969                           ;setDimmerLights_Line@lights stored from wreg
 15970  1CDA  0020               	movlb	0	; select bank0
 15971  1CDB  00A0               	movwf	setDimmerLights_Line@lights
 15972                           
 15973                           ;Dimmer_B1.c: 1023: Dimmer.LoadGO = 1;
 15974  1CDC  0022               	movlb	2	; select bank2
 15975  1CDD  14AC               	bsf	_Dimmer^(0+256),1
 15976                           
 15977                           ;Dimmer_B1.c: 1025: DimmerLights1.Line = 0;
 15978  1CDE  10E8               	bcf	(_DimmerLights1^(0+256)+1),1
 15979                           
 15980                           ;Dimmer_B1.c: 1026: if (lights == 1 && lights != 0) {
 15981  1CDF  0020               	movlb	0	; select bank0
 15982  1CE0  0820               	movf	setDimmerLights_Line@lights,w
 15983  1CE1  3A01               	xorlw	1
 15984  1CE2  1D03               	skipz
 15985  1CE3  2CE9               	goto	l915
 15986  1CE4  0820               	movf	setDimmerLights_Line@lights,w
 15987  1CE5  1903               	btfsc	3,2
 15988  1CE6  2CE9               	goto	l915
 15989                           
 15990                           ;Dimmer_B1.c: 1027: DimmerLights1.Line = 1;
 15991  1CE7  0022               	movlb	2	; select bank2
 15992  1CE8  14E8               	bsf	(_DimmerLights1^(0+256)+1),1
 15993  1CE9                     l915:	
 15994                           
 15995                           ;Dimmer_B1.c: 1028: }
 15996                           ;Dimmer_B1.c: 1031: DimmerLights2.Line = 0;
 15997  1CE9  0023               	movlb	3	; select bank3
 15998  1CEA  10D1               	bcf	(_DimmerLights2^(0+384)+1),1
 15999                           
 16000                           ;Dimmer_B1.c: 1032: if (lights == 2 && lights != 0) {
 16001  1CEB  0020               	movlb	0	; select bank0
 16002  1CEC  0820               	movf	setDimmerLights_Line@lights,w
 16003  1CED  3A02               	xorlw	2
 16004  1CEE  1D03               	skipz
 16005  1CEF  0008               	return
 16006  1CF0  0820               	movf	setDimmerLights_Line@lights,w
 16007  1CF1  1903               	btfsc	3,2
 16008  1CF2  0008               	return
 16009                           
 16010                           ;Dimmer_B1.c: 1033: DimmerLights2.Line = 1;
 16011  1CF3  0023               	movlb	3	; select bank3
 16012  1CF4  14D1               	bsf	(_DimmerLights2^(0+384)+1),1
 16013  1CF5  0020               	movlb	0	; select bank0
 16014  1CF6  0008               	return
 16015  1CF7                     __end_of_setDimmerLights_Line:	
 16016                           
 16017                           	psect	text105
 16018  1BDD                     __ptext105:	
 16019 ;; *************** function _setDimmerIntr_MaxmumValue *****************
 16020 ;; Defined at:
 16021 ;;		line 127 in file "../src/Dimmer_B1.c"
 16022 ;; Parameters:    Size  Location     Type
 16023 ;;  lights          1    wreg     unsigned char 
 16024 ;;  value           1   66[BANK0 ] unsigned char 
 16025 ;; Auto vars:     Size  Location     Type
 16026 ;;  lights          1   68[BANK0 ] unsigned char 
 16027 ;; Return value:  Size  Location     Type
 16028 ;;		None               void
 16029 ;; Registers used:
 16030 ;;		wreg
 16031 ;; Tracked objects:
 16032 ;;		On entry : 0/0
 16033 ;;		On exit  : 0/0
 16034 ;;		Unchanged: 0/0
 16035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16036 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16037 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16038 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16039 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16040 ;;Total ram usage:        3 bytes
 16041 ;; Hardware stack levels used:    1
 16042 ;; Hardware stack levels required when called:    5
 16043 ;; This function calls:
 16044 ;;		Nothing
 16045 ;; This function is called by:
 16046 ;;		_setDimmerLights_OnOff
 16047 ;;		_setDimmerLights_Dimming
 16048 ;;		_setRFSW_AdjControl
 16049 ;; This function uses a non-reentrant model
 16050 ;;
 16051                           
 16052                           
 16053                           ;psect for function _setDimmerIntr_MaxmumValue
 16054  1BDD                     _setDimmerIntr_MaxmumValue:	
 16055                           
 16056                           ;incstack = 0
 16057                           ; Regs used in _setDimmerIntr_MaxmumValue: [wreg]
 16058                           ;setDimmerIntr_MaxmumValue@lights stored from wreg
 16059  1BDD  0020               	movlb	0	; select bank0
 16060  1BDE  00E4               	movwf	setDimmerIntr_MaxmumValue@lights
 16061                           
 16062                           ;Dimmer_B1.c: 129: if (lights == 1) {
 16063  1BDF  0864               	movf	setDimmerIntr_MaxmumValue@lights,w
 16064  1BE0  3A01               	xorlw	1
 16065  1BE1  1D03               	skipz
 16066  1BE2  2BE9               	goto	l6818
 16067                           
 16068                           ;Dimmer_B1.c: 130: DimmerIntr1.MaxmumValue = value;
 16069  1BE3  0862               	movf	setDimmerIntr_MaxmumValue@value,w
 16070  1BE4  00E3               	movwf	??_setDimmerIntr_MaxmumValue
 16071  1BE5  0863               	movf	??_setDimmerIntr_MaxmumValue,w
 16072  1BE6  0021               	movlb	1	; select bank1
 16073  1BE7  00C1               	movwf	(_DimmerIntr1^(0+128)+6)
 16074                           
 16075                           ;Dimmer_B1.c: 131: }
 16076  1BE8  0008               	return
 16077  1BE9                     l6818:	
 16078                           
 16079                           ;Dimmer_B1.c: 134: else if (lights == 2) {
 16080  1BE9  0020               	movlb	0	; select bank0
 16081  1BEA  0864               	movf	setDimmerIntr_MaxmumValue@lights,w
 16082  1BEB  3A02               	xorlw	2
 16083  1BEC  1D03               	skipz
 16084  1BED  0008               	return
 16085                           
 16086                           ;Dimmer_B1.c: 135: DimmerIntr2.MaxmumValue = value;
 16087  1BEE  0862               	movf	setDimmerIntr_MaxmumValue@value,w
 16088  1BEF  00E3               	movwf	??_setDimmerIntr_MaxmumValue
 16089  1BF0  0863               	movf	??_setDimmerIntr_MaxmumValue,w
 16090  1BF1  0021               	movlb	1	; select bank1
 16091  1BF2  00CD               	movwf	(_DimmerIntr2^(0+128)+6)
 16092  1BF3  0008               	return
 16093  1BF4                     __end_of_setDimmerIntr_MaxmumValue:	
 16094                           
 16095                           	psect	text106
 16096  1F15                     __ptext106:	
 16097 ;; *************** function _setDimmerIntr_Dimming_Sw *****************
 16098 ;; Defined at:
 16099 ;;		line 204 in file "../src/Dimmer_B1.c"
 16100 ;; Parameters:    Size  Location     Type
 16101 ;;  lights          1    wreg     unsigned char 
 16102 ;;  command         1    0[BANK0 ] unsigned char 
 16103 ;; Auto vars:     Size  Location     Type
 16104 ;;  lights          1    2[BANK0 ] unsigned char 
 16105 ;; Return value:  Size  Location     Type
 16106 ;;		None               void
 16107 ;; Registers used:
 16108 ;;		wreg, status,2, status,0
 16109 ;; Tracked objects:
 16110 ;;		On entry : 0/0
 16111 ;;		On exit  : 0/0
 16112 ;;		Unchanged: 0/0
 16113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16114 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16115 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16116 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16117 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16118 ;;Total ram usage:        3 bytes
 16119 ;; Hardware stack levels used:    1
 16120 ;; Hardware stack levels required when called:    5
 16121 ;; This function calls:
 16122 ;;		Nothing
 16123 ;; This function is called by:
 16124 ;;		_setDimmerLights_Dimming
 16125 ;; This function uses a non-reentrant model
 16126 ;;
 16127                           
 16128                           
 16129                           ;psect for function _setDimmerIntr_Dimming_Sw
 16130  1F15                     _setDimmerIntr_Dimming_Sw:	
 16131                           
 16132                           ;incstack = 0
 16133                           ; Regs used in _setDimmerIntr_Dimming_Sw: [wreg+status,2+status,0]
 16134                           ;setDimmerIntr_Dimming_Sw@lights stored from wreg
 16135  1F15  0020               	movlb	0	; select bank0
 16136  1F16  00A2               	movwf	setDimmerIntr_Dimming_Sw@lights
 16137                           
 16138                           ;Dimmer_B1.c: 206: if (lights == 1) {
 16139  1F17  0822               	movf	setDimmerIntr_Dimming_Sw@lights,w
 16140  1F18  3A01               	xorlw	1
 16141  1F19  1D03               	skipz
 16142  1F1A  2F2B               	goto	l7174
 16143                           
 16144                           ;Dimmer_B1.c: 207: DimmerIntr1.Dimming_Sw = command == 1 ? 1 : 0;
 16145  1F1B  0820               	movf	setDimmerIntr_Dimming_Sw@command,w
 16146  1F1C  3A01               	xorlw	1
 16147  1F1D  3000               	movlw	0
 16148  1F1E  1903               	skipnz
 16149  1F1F  3001               	movlw	1
 16150  1F20  00A1               	movwf	??_setDimmerIntr_Dimming_Sw
 16151  1F21  0EA1               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16152  1F22  0021               	movlb	1	; select bank1
 16153  1F23  083B               	movf	_DimmerIntr1^(0+128),w
 16154  1F24  0020               	movlb	0	; select bank0
 16155  1F25  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16156  1F26  39EF               	andlw	-17
 16157  1F27  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16158  1F28  0021               	movlb	1	; select bank1
 16159  1F29  00BB               	movwf	_DimmerIntr1^(0+128)
 16160                           
 16161                           ;Dimmer_B1.c: 208: }
 16162  1F2A  0008               	return
 16163  1F2B                     l7174:	
 16164                           
 16165                           ;Dimmer_B1.c: 211: else if (lights == 2) {
 16166  1F2B  0020               	movlb	0	; select bank0
 16167  1F2C  0822               	movf	setDimmerIntr_Dimming_Sw@lights,w
 16168  1F2D  3A02               	xorlw	2
 16169  1F2E  1D03               	skipz
 16170  1F2F  0008               	return
 16171                           
 16172                           ;Dimmer_B1.c: 212: DimmerIntr2.Dimming_Sw = command == 1 ? 1 : 0;
 16173  1F30  0820               	movf	setDimmerIntr_Dimming_Sw@command,w
 16174  1F31  3A01               	xorlw	1
 16175  1F32  3000               	movlw	0
 16176  1F33  1903               	skipnz
 16177  1F34  3001               	movlw	1
 16178  1F35  00A1               	movwf	??_setDimmerIntr_Dimming_Sw
 16179  1F36  0EA1               	swapf	??_setDimmerIntr_Dimming_Sw,f
 16180  1F37  0021               	movlb	1	; select bank1
 16181  1F38  0847               	movf	_DimmerIntr2^(0+128),w
 16182  1F39  0020               	movlb	0	; select bank0
 16183  1F3A  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16184  1F3B  39EF               	andlw	-17
 16185  1F3C  0621               	xorwf	??_setDimmerIntr_Dimming_Sw,w
 16186  1F3D  0021               	movlb	1	; select bank1
 16187  1F3E  00C7               	movwf	_DimmerIntr2^(0+128)
 16188  1F3F  0008               	return
 16189  1F40                     __end_of_setDimmerIntr_Dimming_Sw:	
 16190                           
 16191                           	psect	text107
 16192  1B99                     __ptext107:	
 16193 ;; *************** function _getDimmerIntr_DimmingValue *****************
 16194 ;; Defined at:
 16195 ;;		line 105 in file "../src/Dimmer_B1.c"
 16196 ;; Parameters:    Size  Location     Type
 16197 ;;  lights          1    wreg     unsigned char 
 16198 ;; Auto vars:     Size  Location     Type
 16199 ;;  lights          1    2[BANK0 ] unsigned char 
 16200 ;;  value           1    1[BANK0 ] unsigned char 
 16201 ;; Return value:  Size  Location     Type
 16202 ;;                  1    wreg      unsigned char 
 16203 ;; Registers used:
 16204 ;;		wreg, status,2
 16205 ;; Tracked objects:
 16206 ;;		On entry : 0/0
 16207 ;;		On exit  : 0/0
 16208 ;;		Unchanged: 0/0
 16209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16210 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16211 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16212 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16213 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16214 ;;Total ram usage:        3 bytes
 16215 ;; Hardware stack levels used:    1
 16216 ;; Hardware stack levels required when called:    5
 16217 ;; This function calls:
 16218 ;;		Nothing
 16219 ;; This function is called by:
 16220 ;;		_setDimmerLights_Dimming
 16221 ;; This function uses a non-reentrant model
 16222 ;;
 16223                           
 16224                           
 16225                           ;psect for function _getDimmerIntr_DimmingValue
 16226  1B99                     _getDimmerIntr_DimmingValue:	
 16227                           
 16228                           ;incstack = 0
 16229                           ; Regs used in _getDimmerIntr_DimmingValue: [wreg+status,2]
 16230                           ;getDimmerIntr_DimmingValue@lights stored from wreg
 16231  1B99  0020               	movlb	0	; select bank0
 16232  1B9A  00A2               	movwf	getDimmerIntr_DimmingValue@lights
 16233                           
 16234                           ;Dimmer_B1.c: 106: char value = 0;
 16235  1B9B  01A1               	clrf	getDimmerIntr_DimmingValue@value
 16236                           
 16237                           ;Dimmer_B1.c: 108: if (lights == 1) {
 16238  1B9C  0822               	movf	getDimmerIntr_DimmingValue@lights,w
 16239  1B9D  3A01               	xorlw	1
 16240  1B9E  1D03               	skipz
 16241  1B9F  2BA3               	goto	l7164
 16242                           
 16243                           ;Dimmer_B1.c: 109: value = DimmerIntr1.DimmingValue;
 16244  1BA0  0021               	movlb	1	; select bank1
 16245  1BA1  0840               	movf	(_DimmerIntr1^(0+128)+5),w
 16246  1BA2  2BA9               	goto	L10
 16247  1BA3                     l7164:	
 16248                           ;Dimmer_B1.c: 110: }
 16249                           
 16250                           
 16251                           ;Dimmer_B1.c: 113: else if (lights == 2) {
 16252  1BA3  0822               	movf	getDimmerIntr_DimmingValue@lights,w
 16253  1BA4  3A02               	xorlw	2
 16254  1BA5  1D03               	skipz
 16255  1BA6  2BAD               	goto	l759
 16256                           
 16257                           ;Dimmer_B1.c: 114: value = DimmerIntr2.DimmingValue;
 16258  1BA7  0021               	movlb	1	; select bank1
 16259  1BA8  084C               	movf	(_DimmerIntr2^(0+128)+5),w
 16260  1BA9                     L10:	
 16261  1BA9  0020               	movlb	0	; select bank0
 16262  1BAA  00A0               	movwf	??_getDimmerIntr_DimmingValue
 16263  1BAB  0820               	movf	??_getDimmerIntr_DimmingValue,w
 16264  1BAC  00A1               	movwf	getDimmerIntr_DimmingValue@value
 16265  1BAD                     l759:	
 16266                           
 16267                           ;Dimmer_B1.c: 115: }
 16268                           ;Dimmer_B1.c: 122: return value;
 16269  1BAD  0821               	movf	getDimmerIntr_DimmingValue@value,w
 16270  1BAE  0008               	return
 16271  1BAF                     __end_of_getDimmerIntr_DimmingValue:	
 16272                           
 16273                           	psect	text108
 16274  1140                     __ptext108:	
 16275 ;; *************** function _getDimmerLights_Allow_Condition *****************
 16276 ;; Defined at:
 16277 ;;		line 983 in file "../src/Dimmer_B1.c"
 16278 ;; Parameters:    Size  Location     Type
 16279 ;;  lights          1    wreg     unsigned char 
 16280 ;; Auto vars:     Size  Location     Type
 16281 ;;  lights          1    5[BANK0 ] unsigned char 
 16282 ;;  allow           1    6[BANK0 ] unsigned char 
 16283 ;; Return value:  Size  Location     Type
 16284 ;;                  1    wreg      unsigned char 
 16285 ;; Registers used:
 16286 ;;		wreg, status,2, status,0, pclath, cstack
 16287 ;; Tracked objects:
 16288 ;;		On entry : 0/0
 16289 ;;		On exit  : 0/0
 16290 ;;		Unchanged: 0/0
 16291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16293 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16294 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16295 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16296 ;;Total ram usage:        6 bytes
 16297 ;; Hardware stack levels used:    1
 16298 ;; Hardware stack levels required when called:    6
 16299 ;; This function calls:
 16300 ;;		_getLoad_OK
 16301 ;; This function is called by:
 16302 ;;		_setDimmerLights_Main
 16303 ;; This function uses a non-reentrant model
 16304 ;;
 16305                           
 16306                           
 16307                           ;psect for function _getDimmerLights_Allow_Condition
 16308  1140                     _getDimmerLights_Allow_Condition:	
 16309                           
 16310                           ;incstack = 0
 16311                           ; Regs used in _getDimmerLights_Allow_Condition: [wreg+status,2+status,0+pclath+cstack]
 16312                           ;getDimmerLights_Allow_Condition@lights stored from wreg
 16313  1140  0020               	movlb	0	; select bank0
 16314  1141  00A5               	movwf	getDimmerLights_Allow_Condition@lights
 16315                           
 16316                           ;Dimmer_B1.c: 984: char allow = 0;
 16317  1142  01A6               	clrf	getDimmerLights_Allow_Condition@allow
 16318                           
 16319                           ;Dimmer_B1.c: 990: allow = getLoad_OK() == 0 && Dimmer.LoadGO == 0 ? 0 : 1;
 16320  1143  01A2               	clrf	_getDimmerLights_Allow_Condition$2416
 16321  1144  0AA2               	incf	_getDimmerLights_Allow_Condition$2416,f
 16322  1145  3199  210F  3191   	fcall	_getLoad_OK
 16323  1148  3800               	iorlw	0
 16324  1149  1D03               	skipz
 16325  114A  2950               	goto	l7486
 16326  114B  0022               	movlb	2	; select bank2
 16327  114C  18AC               	btfsc	_Dimmer^(0+256),1
 16328  114D  2950               	goto	l7486
 16329  114E  0020               	movlb	0	; select bank0
 16330  114F  01A2               	clrf	_getDimmerLights_Allow_Condition$2416
 16331  1150                     l7486:	
 16332  1150  0020               	movlb	0	; select bank0
 16333  1151  0822               	movf	_getDimmerLights_Allow_Condition$2416,w
 16334  1152  00A1               	movwf	??_getDimmerLights_Allow_Condition
 16335  1153  0821               	movf	??_getDimmerLights_Allow_Condition,w
 16336  1154  00A6               	movwf	getDimmerLights_Allow_Condition@allow
 16337                           
 16338                           ;Dimmer_B1.c: 994: if (allow == 0) {
 16339  1155  08A6               	movf	getDimmerLights_Allow_Condition@allow,f
 16340  1156  1D03               	skipz
 16341  1157  297C               	goto	l7510
 16342                           
 16343                           ;Dimmer_B1.c: 995: if (lights == 1) {
 16344  1158  0825               	movf	getDimmerLights_Allow_Condition@lights,w
 16345  1159  3A01               	xorlw	1
 16346  115A  1D03               	skipz
 16347  115B  2969               	goto	l7500
 16348                           
 16349                           ;Dimmer_B1.c: 996: allow = DimmerLights2.DimmingTrigger == 1 || DimmerIntr2.Dimming_Sw =
      +                          = 1 ? 1 : 0;
 16350  115C  01A3               	clrf	_getDimmerLights_Allow_Condition$2417
 16351  115D  0AA3               	incf	_getDimmerLights_Allow_Condition$2417,f
 16352  115E  0023               	movlb	3	; select bank3
 16353  115F  1A50               	btfsc	_DimmerLights2^(0+384),4
 16354  1160  2966               	goto	l7498
 16355  1161  0021               	movlb	1	; select bank1
 16356  1162  1A47               	btfsc	_DimmerIntr2^(0+128),4
 16357  1163  2966               	goto	l7498
 16358  1164  0020               	movlb	0	; select bank0
 16359  1165  01A3               	clrf	_getDimmerLights_Allow_Condition$2417
 16360  1166                     l7498:	
 16361  1166  0020               	movlb	0	; select bank0
 16362  1167  0823               	movf	_getDimmerLights_Allow_Condition$2417,w
 16363  1168  2979               	goto	L11
 16364  1169                     l7500:	
 16365                           ;Dimmer_B1.c: 997: } else if (lights == 2) {
 16366                           
 16367  1169  0825               	movf	getDimmerLights_Allow_Condition@lights,w
 16368  116A  3A02               	xorlw	2
 16369  116B  1D03               	skipz
 16370  116C  297C               	goto	l7510
 16371                           
 16372                           ;Dimmer_B1.c: 998: allow = DimmerLights1.DimmingTrigger == 1 || DimmerIntr1.Dimming_Sw =
      +                          = 1 ? 1 : 0;
 16373  116D  01A4               	clrf	_getDimmerLights_Allow_Condition$2418
 16374  116E  0AA4               	incf	_getDimmerLights_Allow_Condition$2418,f
 16375  116F  0022               	movlb	2	; select bank2
 16376  1170  1A67               	btfsc	_DimmerLights1^(0+256),4
 16377  1171  2977               	goto	l7508
 16378  1172  0021               	movlb	1	; select bank1
 16379  1173  1A3B               	btfsc	_DimmerIntr1^(0+128),4
 16380  1174  2977               	goto	l7508
 16381  1175  0020               	movlb	0	; select bank0
 16382  1176  01A4               	clrf	_getDimmerLights_Allow_Condition$2418
 16383  1177                     l7508:	
 16384  1177  0020               	movlb	0	; select bank0
 16385  1178  0824               	movf	_getDimmerLights_Allow_Condition$2418,w
 16386  1179                     L11:	
 16387  1179  00A1               	movwf	??_getDimmerLights_Allow_Condition
 16388  117A  0821               	movf	??_getDimmerLights_Allow_Condition,w
 16389  117B  00A6               	movwf	getDimmerLights_Allow_Condition@allow
 16390  117C                     l7510:	
 16391                           
 16392                           ;Dimmer_B1.c: 999: }
 16393                           ;Dimmer_B1.c: 1000: }
 16394                           ;Dimmer_B1.c: 1017: return allow;
 16395  117C  0826               	movf	getDimmerLights_Allow_Condition@allow,w
 16396  117D  0008               	return
 16397  117E                     __end_of_getDimmerLights_Allow_Condition:	
 16398                           
 16399                           	psect	text109
 16400  190F                     __ptext109:	
 16401 ;; *************** function _getLoad_OK *****************
 16402 ;; Defined at:
 16403 ;;		line 272 in file "../src/OverLoad_B1.c"
 16404 ;; Parameters:    Size  Location     Type
 16405 ;;		None
 16406 ;; Auto vars:     Size  Location     Type
 16407 ;;  ok              1    0[BANK0 ] unsigned char 
 16408 ;; Return value:  Size  Location     Type
 16409 ;;                  1    wreg      unsigned char 
 16410 ;; Registers used:
 16411 ;;		wreg, status,2
 16412 ;; Tracked objects:
 16413 ;;		On entry : 0/0
 16414 ;;		On exit  : 0/0
 16415 ;;		Unchanged: 0/0
 16416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16418 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16420 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16421 ;;Total ram usage:        1 bytes
 16422 ;; Hardware stack levels used:    1
 16423 ;; Hardware stack levels required when called:    5
 16424 ;; This function calls:
 16425 ;;		Nothing
 16426 ;; This function is called by:
 16427 ;;		_DimmerLights_Main
 16428 ;;		_getDimmerLights_Allow_Condition
 16429 ;; This function uses a non-reentrant model
 16430 ;;
 16431                           
 16432                           
 16433                           ;psect for function _getLoad_OK
 16434  190F                     _getLoad_OK:	
 16435                           
 16436                           ;OverLoad_B1.c: 273: char ok = Load.OK == 1 ? 1 : 0;
 16437                           
 16438                           ;incstack = 0
 16439                           ; Regs used in _getLoad_OK: [wreg+status,2]
 16440  190F  3000               	movlw	0
 16441  1910  0022               	movlb	2	; select bank2
 16442  1911  1BBF               	btfsc	_Load^(0+256),7
 16443  1912  3001               	movlw	1
 16444  1913  0020               	movlb	0	; select bank0
 16445  1914  00A0               	movwf	getLoad_OK@ok
 16446                           
 16447                           ;OverLoad_B1.c: 274: return ok;
 16448  1915  0820               	movf	getLoad_OK@ok,w
 16449  1916  0008               	return
 16450  1917                     __end_of_getLoad_OK:	
 16451                           
 16452                           	psect	text110
 16453  1FCD                     __ptext110:	
 16454 ;; *************** function _getMain_All_Error_Status *****************
 16455 ;; Defined at:
 16456 ;;		line 424 in file "../src/main_B1.c"
 16457 ;; Parameters:    Size  Location     Type
 16458 ;;  command         1    wreg     unsigned char 
 16459 ;; Auto vars:     Size  Location     Type
 16460 ;;  command         1    5[BANK0 ] unsigned char 
 16461 ;;  status          1    6[BANK0 ] unsigned char 
 16462 ;; Return value:  Size  Location     Type
 16463 ;;                  1    wreg      unsigned char 
 16464 ;; Registers used:
 16465 ;;		wreg, status,2, status,0
 16466 ;; Tracked objects:
 16467 ;;		On entry : 0/0
 16468 ;;		On exit  : 0/0
 16469 ;;		Unchanged: 0/0
 16470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16472 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16473 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16474 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16475 ;;Total ram usage:        7 bytes
 16476 ;; Hardware stack levels used:    1
 16477 ;; Hardware stack levels required when called:    5
 16478 ;; This function calls:
 16479 ;;		Nothing
 16480 ;; This function is called by:
 16481 ;;		_DimmerLights_Main
 16482 ;;		_Load_Main
 16483 ;;		_setTemp_Main
 16484 ;;		_getRxData
 16485 ;;		_setSw_Main
 16486 ;;		_Exception_Main
 16487 ;; This function uses a non-reentrant model
 16488 ;;
 16489                           
 16490                           
 16491                           ;psect for function _getMain_All_Error_Status
 16492  1FCD                     _getMain_All_Error_Status:	
 16493                           
 16494                           ;incstack = 0
 16495                           ; Regs used in _getMain_All_Error_Status: [wreg+status,2+status,0]
 16496                           ;getMain_All_Error_Status@command stored from wreg
 16497  1FCD  0020               	movlb	0	; select bank0
 16498  1FCE  00A5               	movwf	getMain_All_Error_Status@command
 16499                           
 16500                           ;main_B1.c: 425: char status = 0;
 16501  1FCF  01A6               	clrf	getMain_All_Error_Status@status
 16502                           
 16503                           ;main_B1.c: 436: if (status == 0 && command != 2) {
 16504  1FD0  08A6               	movf	getMain_All_Error_Status@status,f
 16505  1FD1  1D03               	skipz
 16506  1FD2  2FE7               	goto	l7196
 16507  1FD3  0825               	movf	getMain_All_Error_Status@command,w
 16508  1FD4  3A02               	xorlw	2
 16509  1FD5  1903               	skipnz
 16510  1FD6  2FE7               	goto	l7196
 16511                           
 16512                           ;main_B1.c: 437: status = Temp.ERROR == 1 ? 2 : 0;
 16513  1FD7  0021               	movlb	1	; select bank1
 16514  1FD8  18DC               	btfsc	_Temp^(0+128),1
 16515  1FD9  2FDE               	goto	l7194
 16516  1FDA  0020               	movlb	0	; select bank0
 16517  1FDB  01A1               	clrf	_getMain_All_Error_Status$6910
 16518  1FDC  01A2               	clrf	_getMain_All_Error_Status$6910+1
 16519  1FDD  2FE3               	goto	l2882
 16520  1FDE                     l7194:	
 16521  1FDE  3002               	movlw	2
 16522  1FDF  0020               	movlb	0	; select bank0
 16523  1FE0  00A1               	movwf	_getMain_All_Error_Status$6910
 16524  1FE1  3000               	movlw	0
 16525  1FE2  00A2               	movwf	_getMain_All_Error_Status$6910+1
 16526  1FE3                     l2882:	
 16527  1FE3  0821               	movf	_getMain_All_Error_Status$6910,w
 16528  1FE4  00A0               	movwf	??_getMain_All_Error_Status
 16529  1FE5  0820               	movf	??_getMain_All_Error_Status,w
 16530  1FE6  00A6               	movwf	getMain_All_Error_Status@status
 16531  1FE7                     l7196:	
 16532                           
 16533                           ;main_B1.c: 438: }
 16534                           ;main_B1.c: 443: if (status == 0 && command != 3) {
 16535  1FE7  08A6               	movf	getMain_All_Error_Status@status,f
 16536  1FE8  1D03               	skipz
 16537  1FE9  2FFE               	goto	l2883
 16538  1FEA  0825               	movf	getMain_All_Error_Status@command,w
 16539  1FEB  3A03               	xorlw	3
 16540  1FEC  1903               	skipnz
 16541  1FED  2FFE               	goto	l2883
 16542                           
 16543                           ;main_B1.c: 444: status = Load.ERROR == 1 ? 3 : 0;
 16544  1FEE  0022               	movlb	2	; select bank2
 16545  1FEF  1ABF               	btfsc	_Load^(0+256),5
 16546  1FF0  2FF5               	goto	l7204
 16547  1FF1  0020               	movlb	0	; select bank0
 16548  1FF2  01A3               	clrf	_getMain_All_Error_Status$6911
 16549  1FF3  01A4               	clrf	_getMain_All_Error_Status$6911+1
 16550  1FF4  2FFA               	goto	l2887
 16551  1FF5                     l7204:	
 16552  1FF5  3003               	movlw	3
 16553  1FF6  0020               	movlb	0	; select bank0
 16554  1FF7  00A3               	movwf	_getMain_All_Error_Status$6911
 16555  1FF8  3000               	movlw	0
 16556  1FF9  00A4               	movwf	_getMain_All_Error_Status$6911+1
 16557  1FFA                     l2887:	
 16558  1FFA  0823               	movf	_getMain_All_Error_Status$6911,w
 16559  1FFB  00A0               	movwf	??_getMain_All_Error_Status
 16560  1FFC  0820               	movf	??_getMain_All_Error_Status,w
 16561  1FFD  00A6               	movwf	getMain_All_Error_Status@status
 16562  1FFE                     l2883:	
 16563                           
 16564                           ;main_B1.c: 445: }
 16565                           ;main_B1.c: 455: return status;
 16566  1FFE  0826               	movf	getMain_All_Error_Status@status,w
 16567  1FFF  0008               	return
 16568  2000                     __end_of_getMain_All_Error_Status:	
 16569                           
 16570                           	psect	text111
 16571  1949                     __ptext111:	
 16572 ;; *************** function _DimmerLights_Initialization *****************
 16573 ;; Defined at:
 16574 ;;		line 635 in file "../src/Dimmer_B1.c"
 16575 ;; Parameters:    Size  Location     Type
 16576 ;;		None
 16577 ;; Auto vars:     Size  Location     Type
 16578 ;;		None
 16579 ;; Return value:  Size  Location     Type
 16580 ;;		None               void
 16581 ;; Registers used:
 16582 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16583 ;; Tracked objects:
 16584 ;;		On entry : 0/0
 16585 ;;		On exit  : 0/0
 16586 ;;		Unchanged: 0/0
 16587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16589 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16591 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16592 ;;Total ram usage:        0 bytes
 16593 ;; Hardware stack levels used:    1
 16594 ;; Hardware stack levels required when called:    9
 16595 ;; This function calls:
 16596 ;;		_DimmerIntr_Initialization
 16597 ;;		_setDimmerLights_Initialization
 16598 ;; This function is called by:
 16599 ;;		_main
 16600 ;; This function uses a non-reentrant model
 16601 ;;
 16602                           
 16603                           
 16604                           ;psect for function _DimmerLights_Initialization
 16605  1949                     _DimmerLights_Initialization:	
 16606                           
 16607                           ;Dimmer_B1.c: 637: setDimmerLights_Initialization(1);
 16608                           
 16609                           ;incstack = 0
 16610                           ; Regs used in _DimmerLights_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+
      +                          cstack]
 16611  1949  3001               	movlw	1
 16612  194A  3198  20BA  3199   	fcall	_setDimmerLights_Initialization
 16613                           
 16614                           ;Dimmer_B1.c: 641: setDimmerLights_Initialization(2);
 16615  194D  3002               	movlw	2
 16616  194E  3198  20BA  3199   	fcall	_setDimmerLights_Initialization
 16617                           
 16618                           ;Dimmer_B1.c: 647: DimmerIntr_Initialization();
 16619  1951  3188  205C         	fcall	_DimmerIntr_Initialization
 16620  1953  0008               	return
 16621  1954                     __end_of_DimmerLights_Initialization:	
 16622                           
 16623                           	psect	text112
 16624  18BA                     __ptext112:	
 16625 ;; *************** function _setDimmerLights_Initialization *****************
 16626 ;; Defined at:
 16627 ;;		line 651 in file "../src/Dimmer_B1.c"
 16628 ;; Parameters:    Size  Location     Type
 16629 ;;  lights          1    wreg     unsigned char 
 16630 ;; Auto vars:     Size  Location     Type
 16631 ;;  lights          1    0[COMMON] unsigned char 
 16632 ;; Return value:  Size  Location     Type
 16633 ;;		None               void
 16634 ;; Registers used:
 16635 ;;		wreg
 16636 ;; Tracked objects:
 16637 ;;		On entry : 0/0
 16638 ;;		On exit  : 0/0
 16639 ;;		Unchanged: 0/0
 16640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16642 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16643 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16644 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16645 ;;Total ram usage:        0 bytes
 16646 ;; Hardware stack levels used:    1
 16647 ;; Hardware stack levels required when called:    5
 16648 ;; This function calls:
 16649 ;;		Nothing
 16650 ;; This function is called by:
 16651 ;;		_DimmerLights_Initialization
 16652 ;; This function uses a non-reentrant model
 16653 ;;
 16654                           
 16655                           
 16656                           ;psect for function _setDimmerLights_Initialization
 16657  18BA                     _setDimmerLights_Initialization:	
 16658                           
 16659                           ;incstack = 0
 16660                           ; Regs used in _setDimmerLights_Initialization: [wreg]
 16661  18BA  0008               	return
 16662  18BB                     __end_of_setDimmerLights_Initialization:	
 16663                           
 16664                           	psect	text113
 16665  085C                     __ptext113:	
 16666 ;; *************** function _DimmerIntr_Initialization *****************
 16667 ;; Defined at:
 16668 ;;		line 7 in file "../src/Dimmer_B1.c"
 16669 ;; Parameters:    Size  Location     Type
 16670 ;;		None
 16671 ;; Auto vars:     Size  Location     Type
 16672 ;;		None
 16673 ;; Return value:  Size  Location     Type
 16674 ;;		None               void
 16675 ;; Registers used:
 16676 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16677 ;; Tracked objects:
 16678 ;;		On entry : 0/0
 16679 ;;		On exit  : 0/0
 16680 ;;		Unchanged: 0/0
 16681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16683 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16684 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16685 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16686 ;;Total ram usage:        1 bytes
 16687 ;; Hardware stack levels used:    1
 16688 ;; Hardware stack levels required when called:    8
 16689 ;; This function calls:
 16690 ;;		_getDimmerLights_PercentToValue
 16691 ;;		_getDimmerLights_ValueToPercent
 16692 ;;		_setMemory_Modify
 16693 ;; This function is called by:
 16694 ;;		_DimmerLights_Initialization
 16695 ;; This function uses a non-reentrant model
 16696 ;;
 16697                           
 16698                           
 16699                           ;psect for function _DimmerIntr_Initialization
 16700  085C                     _DimmerIntr_Initialization:	
 16701                           
 16702                           ;Dimmer_B1.c: 10: DimmerIntr1.TuneTimeValue = 7;
 16703                           
 16704                           ;incstack = 0
 16705                           ; Regs used in _DimmerIntr_Initialization: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cs
      +                          tack]
 16706  085C  3007               	movlw	7
 16707  085D  0020               	movlb	0	; select bank0
 16708  085E  00E2               	movwf	??_DimmerIntr_Initialization
 16709  085F  0862               	movf	??_DimmerIntr_Initialization,w
 16710  0860  0021               	movlb	1	; select bank1
 16711  0861  00BF               	movwf	(_DimmerIntr1^(0+128)+4)
 16712                           
 16713                           ;Dimmer_B1.c: 11: DimmerIntr1.MaxmumValue = ((char)(75*0.55));
 16714  0862  3029               	movlw	41
 16715  0863  0020               	movlb	0	; select bank0
 16716  0864  00E2               	movwf	??_DimmerIntr_Initialization
 16717  0865  0862               	movf	??_DimmerIntr_Initialization,w
 16718  0866  0021               	movlb	1	; select bank1
 16719  0867  00C1               	movwf	(_DimmerIntr1^(0+128)+6)
 16720                           
 16721                           ;Dimmer_B1.c: 12: DimmerIntr1.MinimumValue = ((char)(5*0.55));
 16722  0868  3002               	movlw	2
 16723  0869  0020               	movlb	0	; select bank0
 16724  086A  00E2               	movwf	??_DimmerIntr_Initialization
 16725  086B  0862               	movf	??_DimmerIntr_Initialization,w
 16726  086C  0021               	movlb	1	; select bank1
 16727  086D  00C2               	movwf	(_DimmerIntr1^(0+128)+7)
 16728                           
 16729                           ;Dimmer_B1.c: 16: if (myMain.InitDimmer == 1) {
 16730  086E  1E38               	btfss	(_myMain^(0+128)+10),4
 16731  086F  2880               	goto	l7844
 16732                           
 16733                           ;Dimmer_B1.c: 17: product->Data[21] = getDimmerLights_ValueToPercent(((char)(75*0.55)));
 16734  0870  3029               	movlw	41
 16735  0871  3195  2585  3188   	fcall	_getDimmerLights_ValueToPercent
 16736  0874  0020               	movlb	0	; select bank0
 16737  0875  00E2               	movwf	??_DimmerIntr_Initialization
 16738  0876  0021               	movlb	1	; select bank1
 16739  0877  086E               	movf	_product^(0+128),w
 16740  0878  3E15               	addlw	21
 16741  0879  0086               	movwf	6
 16742  087A  3002               	movlw	2	; select bank4/5
 16743  087B  0087               	movwf	7
 16744  087C  0020               	movlb	0	; select bank0
 16745  087D  0862               	movf	??_DimmerIntr_Initialization,w
 16746  087E  0081               	movwf	1
 16747                           
 16748                           ;Dimmer_B1.c: 18: } else {
 16749  087F  288F               	goto	l7846
 16750  0880                     l7844:	
 16751                           
 16752                           ;Dimmer_B1.c: 19: DimmerIntr1.DimmingValue = getDimmerLights_PercentToValue(product->Dat
      +                          a[21]);
 16753  0880  0021               	movlb	1	; select bank1
 16754  0881  086E               	movf	_product^(0+128),w
 16755  0882  3E15               	addlw	21
 16756  0883  0086               	movwf	6
 16757  0884  3002               	movlw	2	; select bank4/5
 16758  0885  0087               	movwf	7
 16759  0886  0801               	movf	1,w
 16760  0887  3195  2520  3188   	fcall	_getDimmerLights_PercentToValue
 16761  088A  0020               	movlb	0	; select bank0
 16762  088B  00E2               	movwf	??_DimmerIntr_Initialization
 16763  088C  0862               	movf	??_DimmerIntr_Initialization,w
 16764  088D  0021               	movlb	1	; select bank1
 16765  088E  00C0               	movwf	(_DimmerIntr1^(0+128)+5)
 16766  088F                     l7846:	
 16767                           
 16768                           ;Dimmer_B1.c: 20: }
 16769                           ;Dimmer_B1.c: 32: DimmerIntr2.TuneTimeValue = 7;
 16770  088F  3007               	movlw	7
 16771  0890  0020               	movlb	0	; select bank0
 16772  0891  00E2               	movwf	??_DimmerIntr_Initialization
 16773  0892  0862               	movf	??_DimmerIntr_Initialization,w
 16774  0893  0021               	movlb	1	; select bank1
 16775  0894  00CB               	movwf	(_DimmerIntr2^(0+128)+4)
 16776                           
 16777                           ;Dimmer_B1.c: 33: DimmerIntr2.MaxmumValue = ((char)(75*0.55));
 16778  0895  3029               	movlw	41
 16779  0896  0020               	movlb	0	; select bank0
 16780  0897  00E2               	movwf	??_DimmerIntr_Initialization
 16781  0898  0862               	movf	??_DimmerIntr_Initialization,w
 16782  0899  0021               	movlb	1	; select bank1
 16783  089A  00CD               	movwf	(_DimmerIntr2^(0+128)+6)
 16784                           
 16785                           ;Dimmer_B1.c: 34: DimmerIntr2.MinimumValue = ((char)(5*0.55));
 16786  089B  3002               	movlw	2
 16787  089C  0020               	movlb	0	; select bank0
 16788  089D  00E2               	movwf	??_DimmerIntr_Initialization
 16789  089E  0862               	movf	??_DimmerIntr_Initialization,w
 16790  089F  0021               	movlb	1	; select bank1
 16791  08A0  00CE               	movwf	(_DimmerIntr2^(0+128)+7)
 16792                           
 16793                           ;Dimmer_B1.c: 36: if (myMain.InitDimmer == 1) {
 16794  08A1  1E38               	btfss	(_myMain^(0+128)+10),4
 16795  08A2  28B3               	goto	l7856
 16796                           
 16797                           ;Dimmer_B1.c: 37: product->Data[22] = getDimmerLights_ValueToPercent(((char)(75*0.55)));
 16798  08A3  3029               	movlw	41
 16799  08A4  3195  2585  3188   	fcall	_getDimmerLights_ValueToPercent
 16800  08A7  0020               	movlb	0	; select bank0
 16801  08A8  00E2               	movwf	??_DimmerIntr_Initialization
 16802  08A9  0021               	movlb	1	; select bank1
 16803  08AA  086E               	movf	_product^(0+128),w
 16804  08AB  3E16               	addlw	22
 16805  08AC  0086               	movwf	6
 16806  08AD  3002               	movlw	2	; select bank4/5
 16807  08AE  0087               	movwf	7
 16808  08AF  0020               	movlb	0	; select bank0
 16809  08B0  0862               	movf	??_DimmerIntr_Initialization,w
 16810  08B1  0081               	movwf	1
 16811                           
 16812                           ;Dimmer_B1.c: 38: } else {
 16813  08B2  28C2               	goto	l7858
 16814  08B3                     l7856:	
 16815                           
 16816                           ;Dimmer_B1.c: 39: DimmerIntr2.DimmingValue = getDimmerLights_PercentToValue(product->Dat
      +                          a[22]);
 16817  08B3  0021               	movlb	1	; select bank1
 16818  08B4  086E               	movf	_product^(0+128),w
 16819  08B5  3E16               	addlw	22
 16820  08B6  0086               	movwf	6
 16821  08B7  3002               	movlw	2	; select bank4/5
 16822  08B8  0087               	movwf	7
 16823  08B9  0801               	movf	1,w
 16824  08BA  3195  2520  3188   	fcall	_getDimmerLights_PercentToValue
 16825  08BD  0020               	movlb	0	; select bank0
 16826  08BE  00E2               	movwf	??_DimmerIntr_Initialization
 16827  08BF  0862               	movf	??_DimmerIntr_Initialization,w
 16828  08C0  0021               	movlb	1	; select bank1
 16829  08C1  00CC               	movwf	(_DimmerIntr2^(0+128)+5)
 16830  08C2                     l7858:	
 16831                           
 16832                           ;Dimmer_B1.c: 40: }
 16833                           ;Dimmer_B1.c: 61: if (myMain.InitDimmer == 1) {
 16834  08C2  0021               	movlb	1	; select bank1
 16835  08C3  1E38               	btfss	(_myMain^(0+128)+10),4
 16836  08C4  0008               	return
 16837                           
 16838                           ;Dimmer_B1.c: 62: myMain.InitDimmer = 0;
 16839  08C5  1238               	bcf	(_myMain^(0+128)+10),4
 16840                           
 16841                           ;Dimmer_B1.c: 63: myMain.SaveDimmer = 1;
 16842  08C6  16B8               	bsf	(_myMain^(0+128)+10),5
 16843                           
 16844                           ;Dimmer_B1.c: 64: setMemory_Modify(1);
 16845  08C7  3001               	movlw	1
 16846  08C8  319A  22BE         	fcall	_setMemory_Modify
 16847  08CA  0008               	return
 16848  08CB                     __end_of_DimmerIntr_Initialization:	
 16849                           
 16850                           	psect	text114
 16851  1ABE                     __ptext114:	
 16852 ;; *************** function _setMemory_Modify *****************
 16853 ;; Defined at:
 16854 ;;		line 1083 in file "../src/MCU_B1.c"
 16855 ;; Parameters:    Size  Location     Type
 16856 ;;  command         1    wreg     unsigned char 
 16857 ;; Auto vars:     Size  Location     Type
 16858 ;;  command         1    1[BANK0 ] unsigned char 
 16859 ;; Return value:  Size  Location     Type
 16860 ;;		None               void
 16861 ;; Registers used:
 16862 ;;		wreg, status,2, status,0
 16863 ;; Tracked objects:
 16864 ;;		On entry : 0/0
 16865 ;;		On exit  : 0/0
 16866 ;;		Unchanged: 0/0
 16867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16868 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16869 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16870 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16871 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16872 ;;Total ram usage:        2 bytes
 16873 ;; Hardware stack levels used:    1
 16874 ;; Hardware stack levels required when called:    5
 16875 ;; This function calls:
 16876 ;;		Nothing
 16877 ;; This function is called by:
 16878 ;;		_DimmerIntr_Initialization
 16879 ;;		_setDimmerLights_Dimming
 16880 ;;		_setLog_Code
 16881 ;;		_setRFSW_AdjControl
 16882 ;; This function uses a non-reentrant model
 16883 ;;
 16884                           
 16885                           
 16886                           ;psect for function _setMemory_Modify
 16887  1ABE                     _setMemory_Modify:	
 16888                           
 16889                           ;incstack = 0
 16890                           ; Regs used in _setMemory_Modify: [wreg+status,2+status,0]
 16891                           ;setMemory_Modify@command stored from wreg
 16892  1ABE  0020               	movlb	0	; select bank0
 16893  1ABF  00A1               	movwf	setMemory_Modify@command
 16894                           
 16895                           ;MCU_B1.c: 1084: Memory.Modify = command == 1 ? 1 : 0;
 16896  1AC0  0821               	movf	setMemory_Modify@command,w
 16897  1AC1  3A01               	xorlw	1
 16898  1AC2  3000               	movlw	0
 16899  1AC3  1903               	skipnz
 16900  1AC4  3001               	movlw	1
 16901  1AC5  00A0               	movwf	??_setMemory_Modify
 16902  1AC6  0024               	movlb	4	; select bank4
 16903  1AC7  0844               	movf	(_Memory^(0+512)+36),w
 16904  1AC8  0020               	movlb	0	; select bank0
 16905  1AC9  0620               	xorwf	??_setMemory_Modify,w
 16906  1ACA  39FE               	andlw	-2
 16907  1ACB  0620               	xorwf	??_setMemory_Modify,w
 16908  1ACC  0024               	movlb	4	; select bank4
 16909  1ACD  00C4               	movwf	(_Memory^(0+512)+36)
 16910                           
 16911                           ;MCU_B1.c: 1085: Memory.Time = 0;
 16912  1ACE  01C2               	clrf	(_Memory^(0+512)+34)
 16913  1ACF  01C3               	clrf	((_Memory+1)^(0+512)+34)
 16914  1AD0  0008               	return
 16915  1AD1                     __end_of_setMemory_Modify:	
 16916                           
 16917                           	psect	text115
 16918  1585                     __ptext115:	
 16919 ;; *************** function _getDimmerLights_ValueToPercent *****************
 16920 ;; Defined at:
 16921 ;;		line 1122 in file "../src/Dimmer_B1.c"
 16922 ;; Parameters:    Size  Location     Type
 16923 ;;  value           1    wreg     unsigned char 
 16924 ;; Auto vars:     Size  Location     Type
 16925 ;;  value           1   62[BANK0 ] unsigned char 
 16926 ;;  i               3   63[BANK0 ] float 
 16927 ;; Return value:  Size  Location     Type
 16928 ;;                  1    wreg      unsigned char 
 16929 ;; Registers used:
 16930 ;;		wreg, status,2, status,0, pclath, cstack
 16931 ;; Tracked objects:
 16932 ;;		On entry : 0/0
 16933 ;;		On exit  : 0/0
 16934 ;;		Unchanged: 0/0
 16935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 16936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16937 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16938 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16939 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 16940 ;;Total ram usage:        6 bytes
 16941 ;; Hardware stack levels used:    1
 16942 ;; Hardware stack levels required when called:    7
 16943 ;; This function calls:
 16944 ;;		___awtoft
 16945 ;;		___ftadd
 16946 ;;		___ftdiv
 16947 ;;		___ftneg
 16948 ;;		___fttol
 16949 ;; This function is called by:
 16950 ;;		_DimmerIntr_Initialization
 16951 ;;		_setDimmerLights_Dimming
 16952 ;; This function uses a non-reentrant model
 16953 ;;
 16954                           
 16955                           
 16956                           ;psect for function _getDimmerLights_ValueToPercent
 16957  1585                     _getDimmerLights_ValueToPercent:	
 16958                           
 16959                           ;incstack = 0
 16960                           ; Regs used in _getDimmerLights_ValueToPercent: [wreg+status,2+status,0+pclath+cstack]
 16961                           ;getDimmerLights_ValueToPercent@value stored from wreg
 16962  1585  0020               	movlb	0	; select bank0
 16963  1586  00DE               	movwf	getDimmerLights_ValueToPercent@value
 16964                           
 16965                           ;Dimmer_B1.c: 1130: float i = ((char)(75*0.55)) - ((char)(5*0.55));
 16966  1587  3000               	movlw	0
 16967  1588  00DF               	movwf	getDimmerLights_ValueToPercent@i
 16968  1589  301C               	movlw	28
 16969  158A  00E0               	movwf	getDimmerLights_ValueToPercent@i+1
 16970  158B  3042               	movlw	66
 16971  158C  00E1               	movwf	getDimmerLights_ValueToPercent@i+2
 16972                           
 16973                           ;Dimmer_B1.c: 1131: i /= 100;
 16974  158D  3000               	movlw	0
 16975  158E  00AE               	movwf	___ftdiv@f2
 16976  158F  30C8               	movlw	200
 16977  1590  00AF               	movwf	___ftdiv@f2+1
 16978  1591  3042               	movlw	66
 16979  1592  00B0               	movwf	___ftdiv@f2+2
 16980  1593  085F               	movf	getDimmerLights_ValueToPercent@i,w
 16981  1594  00B1               	movwf	___ftdiv@f1
 16982  1595  0860               	movf	getDimmerLights_ValueToPercent@i+1,w
 16983  1596  00B2               	movwf	___ftdiv@f1+1
 16984  1597  0861               	movf	getDimmerLights_ValueToPercent@i+2,w
 16985  1598  00B3               	movwf	___ftdiv@f1+2
 16986  1599  318D  2537  3195   	fcall	___ftdiv
 16987  159C  0020               	movlb	0	; select bank0
 16988  159D  082E               	movf	?___ftdiv,w
 16989  159E  00DF               	movwf	getDimmerLights_ValueToPercent@i
 16990  159F  082F               	movf	?___ftdiv+1,w
 16991  15A0  00E0               	movwf	getDimmerLights_ValueToPercent@i+1
 16992  15A1  0830               	movf	?___ftdiv+2,w
 16993  15A2  00E1               	movwf	getDimmerLights_ValueToPercent@i+2
 16994                           
 16995                           ;Dimmer_B1.c: 1133: return (char) (100 - ((((char)(75*0.55)) - value) / i));
 16996  15A3  085E               	movf	getDimmerLights_ValueToPercent@value,w
 16997  15A4  00DC               	movwf	??_getDimmerLights_ValueToPercent
 16998  15A5  01DD               	clrf	??_getDimmerLights_ValueToPercent+1
 16999  15A6  09DC               	comf	??_getDimmerLights_ValueToPercent,f
 17000  15A7  09DD               	comf	??_getDimmerLights_ValueToPercent+1,f
 17001  15A8  0ADC               	incf	??_getDimmerLights_ValueToPercent,f
 17002  15A9  1903               	skipnz
 17003  15AA  0ADD               	incf	??_getDimmerLights_ValueToPercent+1,f
 17004  15AB  085C               	movf	??_getDimmerLights_ValueToPercent,w
 17005  15AC  3E29               	addlw	41
 17006  15AD  00A8               	movwf	___awtoft@c
 17007  15AE  3000               	movlw	0
 17008  15AF  3D5D               	addwfc	??_getDimmerLights_ValueToPercent+1,w
 17009  15B0  00A9               	movwf	___awtoft@c+1
 17010  15B1  319E  2633  3195   	fcall	___awtoft
 17011  15B4  0020               	movlb	0	; select bank0
 17012  15B5  0828               	movf	?___awtoft,w
 17013  15B6  00B1               	movwf	___ftdiv@f1
 17014  15B7  0829               	movf	?___awtoft+1,w
 17015  15B8  00B2               	movwf	___ftdiv@f1+1
 17016  15B9  082A               	movf	?___awtoft+2,w
 17017  15BA  00B3               	movwf	___ftdiv@f1+2
 17018  15BB  085F               	movf	getDimmerLights_ValueToPercent@i,w
 17019  15BC  00AE               	movwf	___ftdiv@f2
 17020  15BD  0860               	movf	getDimmerLights_ValueToPercent@i+1,w
 17021  15BE  00AF               	movwf	___ftdiv@f2+1
 17022  15BF  0861               	movf	getDimmerLights_ValueToPercent@i+2,w
 17023  15C0  00B0               	movwf	___ftdiv@f2+2
 17024  15C1  318D  2537  3195   	fcall	___ftdiv
 17025  15C4  0020               	movlb	0	; select bank0
 17026  15C5  082E               	movf	?___ftdiv,w
 17027  15C6  00BE               	movwf	___ftneg@f1
 17028  15C7  082F               	movf	?___ftdiv+1,w
 17029  15C8  00BF               	movwf	___ftneg@f1+1
 17030  15C9  0830               	movf	?___ftdiv+2,w
 17031  15CA  00C0               	movwf	___ftneg@f1+2
 17032  15CB  3199  2137  3195   	fcall	___ftneg
 17033  15CE  0020               	movlb	0	; select bank0
 17034  15CF  083E               	movf	?___ftneg,w
 17035  15D0  00C4               	movwf	___ftadd@f2
 17036  15D1  083F               	movf	?___ftneg+1,w
 17037  15D2  00C5               	movwf	___ftadd@f2+1
 17038  15D3  0840               	movf	?___ftneg+2,w
 17039  15D4  00C6               	movwf	___ftadd@f2+2
 17040  15D5  3000               	movlw	0
 17041  15D6  00C1               	movwf	___ftadd@f1
 17042  15D7  30C8               	movlw	200
 17043  15D8  00C2               	movwf	___ftadd@f1+1
 17044  15D9  3042               	movlw	66
 17045  15DA  00C3               	movwf	___ftadd@f1+2
 17046  15DB  3183  2389  3195   	fcall	___ftadd
 17047  15DE  0020               	movlb	0	; select bank0
 17048  15DF  0841               	movf	?___ftadd,w
 17049  15E0  00CE               	movwf	___fttol@f1
 17050  15E1  0842               	movf	?___ftadd+1,w
 17051  15E2  00CF               	movwf	___fttol@f1+1
 17052  15E3  0843               	movf	?___ftadd+2,w
 17053  15E4  00D0               	movwf	___fttol@f1+2
 17054  15E5  318B  2395         	fcall	___fttol
 17055  15E7  0020               	movlb	0	; select bank0
 17056  15E8  084E               	movf	?___fttol,w
 17057  15E9  0008               	return
 17058  15EA                     __end_of_getDimmerLights_ValueToPercent:	
 17059                           
 17060                           	psect	text116
 17061  1520                     __ptext116:	
 17062 ;; *************** function _getDimmerLights_PercentToValue *****************
 17063 ;; Defined at:
 17064 ;;		line 1106 in file "../src/Dimmer_B1.c"
 17065 ;; Parameters:    Size  Location     Type
 17066 ;;  value           1    wreg     unsigned char 
 17067 ;; Auto vars:     Size  Location     Type
 17068 ;;  value           1   62[BANK0 ] unsigned char 
 17069 ;;  i               3   63[BANK0 ] float 
 17070 ;; Return value:  Size  Location     Type
 17071 ;;                  1    wreg      unsigned char 
 17072 ;; Registers used:
 17073 ;;		wreg, status,2, status,0, pclath, cstack
 17074 ;; Tracked objects:
 17075 ;;		On entry : 0/0
 17076 ;;		On exit  : 0/0
 17077 ;;		Unchanged: 0/0
 17078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17080 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17081 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17082 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17083 ;;Total ram usage:        6 bytes
 17084 ;; Hardware stack levels used:    1
 17085 ;; Hardware stack levels required when called:    7
 17086 ;; This function calls:
 17087 ;;		___awtoft
 17088 ;;		___ftadd
 17089 ;;		___ftdiv
 17090 ;;		___ftmul
 17091 ;;		___ftneg
 17092 ;;		___fttol
 17093 ;; This function is called by:
 17094 ;;		_DimmerIntr_Initialization
 17095 ;;		_setDimmerLights_OnOff
 17096 ;;		_setRFSW_AdjControl
 17097 ;; This function uses a non-reentrant model
 17098 ;;
 17099                           
 17100                           
 17101                           ;psect for function _getDimmerLights_PercentToValue
 17102  1520                     _getDimmerLights_PercentToValue:	
 17103                           
 17104                           ;incstack = 0
 17105                           ; Regs used in _getDimmerLights_PercentToValue: [wreg+status,2+status,0+pclath+cstack]
 17106                           ;getDimmerLights_PercentToValue@value stored from wreg
 17107  1520  0020               	movlb	0	; select bank0
 17108  1521  00DE               	movwf	getDimmerLights_PercentToValue@value
 17109                           
 17110                           ;Dimmer_B1.c: 1114: float i = ((char)(75*0.55)) - ((char)(5*0.55));
 17111  1522  3000               	movlw	0
 17112  1523  00DF               	movwf	getDimmerLights_PercentToValue@i
 17113  1524  301C               	movlw	28
 17114  1525  00E0               	movwf	getDimmerLights_PercentToValue@i+1
 17115  1526  3042               	movlw	66
 17116  1527  00E1               	movwf	getDimmerLights_PercentToValue@i+2
 17117                           
 17118                           ;Dimmer_B1.c: 1115: i /= 100;
 17119  1528  3000               	movlw	0
 17120  1529  00AE               	movwf	___ftdiv@f2
 17121  152A  30C8               	movlw	200
 17122  152B  00AF               	movwf	___ftdiv@f2+1
 17123  152C  3042               	movlw	66
 17124  152D  00B0               	movwf	___ftdiv@f2+2
 17125  152E  085F               	movf	getDimmerLights_PercentToValue@i,w
 17126  152F  00B1               	movwf	___ftdiv@f1
 17127  1530  0860               	movf	getDimmerLights_PercentToValue@i+1,w
 17128  1531  00B2               	movwf	___ftdiv@f1+1
 17129  1532  0861               	movf	getDimmerLights_PercentToValue@i+2,w
 17130  1533  00B3               	movwf	___ftdiv@f1+2
 17131  1534  318D  2537  3195   	fcall	___ftdiv
 17132  1537  0020               	movlb	0	; select bank0
 17133  1538  082E               	movf	?___ftdiv,w
 17134  1539  00DF               	movwf	getDimmerLights_PercentToValue@i
 17135  153A  082F               	movf	?___ftdiv+1,w
 17136  153B  00E0               	movwf	getDimmerLights_PercentToValue@i+1
 17137  153C  0830               	movf	?___ftdiv+2,w
 17138  153D  00E1               	movwf	getDimmerLights_PercentToValue@i+2
 17139                           
 17140                           ;Dimmer_B1.c: 1117: return (char) (((char)(75*0.55)) - ((100 - value) * i));
 17141  153E  085E               	movf	getDimmerLights_PercentToValue@value,w
 17142  153F  00DC               	movwf	??_getDimmerLights_PercentToValue
 17143  1540  01DD               	clrf	??_getDimmerLights_PercentToValue+1
 17144  1541  09DC               	comf	??_getDimmerLights_PercentToValue,f
 17145  1542  09DD               	comf	??_getDimmerLights_PercentToValue+1,f
 17146  1543  0ADC               	incf	??_getDimmerLights_PercentToValue,f
 17147  1544  1903               	skipnz
 17148  1545  0ADD               	incf	??_getDimmerLights_PercentToValue+1,f
 17149  1546  085C               	movf	??_getDimmerLights_PercentToValue,w
 17150  1547  3E64               	addlw	100
 17151  1548  00A8               	movwf	___awtoft@c
 17152  1549  3000               	movlw	0
 17153  154A  3D5D               	addwfc	??_getDimmerLights_PercentToValue+1,w
 17154  154B  00A9               	movwf	___awtoft@c+1
 17155  154C  319E  2633  3195   	fcall	___awtoft
 17156  154F  0020               	movlb	0	; select bank0
 17157  1550  0828               	movf	?___awtoft,w
 17158  1551  00B1               	movwf	___ftmul@f2
 17159  1552  0829               	movf	?___awtoft+1,w
 17160  1553  00B2               	movwf	___ftmul@f2+1
 17161  1554  082A               	movf	?___awtoft+2,w
 17162  1555  00B3               	movwf	___ftmul@f2+2
 17163  1556  085F               	movf	getDimmerLights_PercentToValue@i,w
 17164  1557  00AE               	movwf	___ftmul@f1
 17165  1558  0860               	movf	getDimmerLights_PercentToValue@i+1,w
 17166  1559  00AF               	movwf	___ftmul@f1+1
 17167  155A  0861               	movf	getDimmerLights_PercentToValue@i+2,w
 17168  155B  00B0               	movwf	___ftmul@f1+2
 17169  155C  318E  2691  3195   	fcall	___ftmul
 17170  155F  0020               	movlb	0	; select bank0
 17171  1560  082E               	movf	?___ftmul,w
 17172  1561  00BE               	movwf	___ftneg@f1
 17173  1562  082F               	movf	?___ftmul+1,w
 17174  1563  00BF               	movwf	___ftneg@f1+1
 17175  1564  0830               	movf	?___ftmul+2,w
 17176  1565  00C0               	movwf	___ftneg@f1+2
 17177  1566  3199  2137  3195   	fcall	___ftneg
 17178  1569  0020               	movlb	0	; select bank0
 17179  156A  083E               	movf	?___ftneg,w
 17180  156B  00C4               	movwf	___ftadd@f2
 17181  156C  083F               	movf	?___ftneg+1,w
 17182  156D  00C5               	movwf	___ftadd@f2+1
 17183  156E  0840               	movf	?___ftneg+2,w
 17184  156F  00C6               	movwf	___ftadd@f2+2
 17185  1570  3000               	movlw	0
 17186  1571  00C1               	movwf	___ftadd@f1
 17187  1572  3024               	movlw	36
 17188  1573  00C2               	movwf	___ftadd@f1+1
 17189  1574  3042               	movlw	66
 17190  1575  00C3               	movwf	___ftadd@f1+2
 17191  1576  3183  2389  3195   	fcall	___ftadd
 17192  1579  0020               	movlb	0	; select bank0
 17193  157A  0841               	movf	?___ftadd,w
 17194  157B  00CE               	movwf	___fttol@f1
 17195  157C  0842               	movf	?___ftadd+1,w
 17196  157D  00CF               	movwf	___fttol@f1+1
 17197  157E  0843               	movf	?___ftadd+2,w
 17198  157F  00D0               	movwf	___fttol@f1+2
 17199  1580  318B  2395         	fcall	___fttol
 17200  1582  0020               	movlb	0	; select bank0
 17201  1583  084E               	movf	?___fttol,w
 17202  1584  0008               	return
 17203  1585                     __end_of_getDimmerLights_PercentToValue:	
 17204                           
 17205                           	psect	text117
 17206  0B95                     __ptext117:	
 17207 ;; *************** function ___fttol *****************
 17208 ;; Defined at:
 17209 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\fttol.c"
 17210 ;; Parameters:    Size  Location     Type
 17211 ;;  f1              3   46[BANK0 ] float 
 17212 ;; Auto vars:     Size  Location     Type
 17213 ;;  lval            4   55[BANK0 ] unsigned long 
 17214 ;;  exp1            1   59[BANK0 ] unsigned char 
 17215 ;;  sign1           1   54[BANK0 ] unsigned char 
 17216 ;; Return value:  Size  Location     Type
 17217 ;;                  4   46[BANK0 ] long 
 17218 ;; Registers used:
 17219 ;;		wreg, status,2, status,0
 17220 ;; Tracked objects:
 17221 ;;		On entry : 0/0
 17222 ;;		On exit  : 0/0
 17223 ;;		Unchanged: 0/0
 17224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17225 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17226 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17227 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17228 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17229 ;;Total ram usage:       14 bytes
 17230 ;; Hardware stack levels used:    1
 17231 ;; Hardware stack levels required when called:    5
 17232 ;; This function calls:
 17233 ;;		Nothing
 17234 ;; This function is called by:
 17235 ;;		_getDimmerLights_PercentToValue
 17236 ;;		_getDimmerLights_ValueToPercent
 17237 ;; This function uses a non-reentrant model
 17238 ;;
 17239                           
 17240                           
 17241                           ;psect for function ___fttol
 17242  0B95                     ___fttol:	
 17243                           
 17244                           ;incstack = 0
 17245                           ; Regs used in ___fttol: [wreg+status,2+status,0]
 17246  0B95  0020               	movlb	0	; select bank0
 17247  0B96  084E               	movf	___fttol@f1,w
 17248  0B97  00D2               	movwf	??___fttol
 17249  0B98  084F               	movf	___fttol@f1+1,w
 17250  0B99  00D3               	movwf	??___fttol+1
 17251  0B9A  0850               	movf	___fttol@f1+2,w
 17252  0B9B  00D4               	movwf	??___fttol+2
 17253  0B9C  1003               	clrc
 17254  0B9D  0D53               	rlf	??___fttol+1,w
 17255  0B9E  0D54               	rlf	??___fttol+2,w
 17256  0B9F  00D5               	movwf	??___fttol+3
 17257  0BA0  0855               	movf	??___fttol+3,w
 17258  0BA1  00DB               	movwf	___fttol@exp1
 17259  0BA2  08DB               	movf	___fttol@exp1,f
 17260  0BA3  1D03               	skipz
 17261  0BA4  2BAE               	goto	l6644
 17262  0BA5  3000               	movlw	0
 17263  0BA6  00D1               	movwf	?___fttol+3
 17264  0BA7  3000               	movlw	0
 17265  0BA8  00D0               	movwf	?___fttol+2
 17266  0BA9  3000               	movlw	0
 17267  0BAA  00CF               	movwf	?___fttol+1
 17268  0BAB  3000               	movlw	0
 17269  0BAC  00CE               	movwf	?___fttol
 17270  0BAD  0008               	return
 17271  0BAE                     l6644:	
 17272  0BAE  084E               	movf	___fttol@f1,w
 17273  0BAF  00D2               	movwf	??___fttol
 17274  0BB0  084F               	movf	___fttol@f1+1,w
 17275  0BB1  00D3               	movwf	??___fttol+1
 17276  0BB2  0850               	movf	___fttol@f1+2,w
 17277  0BB3  00D4               	movwf	??___fttol+2
 17278  0BB4  3017               	movlw	23
 17279  0BB5                     u5905:	
 17280  0BB5  36D4               	lsrf	??___fttol+2,f
 17281  0BB6  0CD3               	rrf	??___fttol+1,f
 17282  0BB7  0CD2               	rrf	??___fttol,f
 17283  0BB8  0B89               	decfsz	9,f
 17284  0BB9  2BB5               	goto	u5905
 17285  0BBA  0852               	movf	??___fttol,w
 17286  0BBB  00D5               	movwf	??___fttol+3
 17287  0BBC  0855               	movf	??___fttol+3,w
 17288  0BBD  00D6               	movwf	___fttol@sign1
 17289  0BBE  17CF               	bsf	___fttol@f1+1,7
 17290  0BBF  30FF               	movlw	255
 17291  0BC0  05CE               	andwf	___fttol@f1,f
 17292  0BC1  30FF               	movlw	255
 17293  0BC2  05CF               	andwf	___fttol@f1+1,f
 17294  0BC3  3000               	movlw	0
 17295  0BC4  05D0               	andwf	___fttol@f1+2,f
 17296  0BC5  084E               	movf	___fttol@f1,w
 17297  0BC6  00D7               	movwf	___fttol@lval
 17298  0BC7  084F               	movf	___fttol@f1+1,w
 17299  0BC8  00D8               	movwf	___fttol@lval+1
 17300  0BC9  0850               	movf	___fttol@f1+2,w
 17301  0BCA  00D9               	movwf	___fttol@lval+2
 17302  0BCB  01DA               	clrf	___fttol@lval+3
 17303  0BCC  308E               	movlw	142
 17304  0BCD  02DB               	subwf	___fttol@exp1,f
 17305  0BCE  1FDB               	btfss	___fttol@exp1,7
 17306  0BCF  2BEC               	goto	l6664
 17307  0BD0  085B               	movf	___fttol@exp1,w
 17308  0BD1  3A80               	xorlw	128
 17309  0BD2  3E8F               	addlw	143
 17310  0BD3  1803               	skipnc
 17311  0BD4  2BDE               	goto	l6662
 17312  0BD5  3000               	movlw	0
 17313  0BD6  00D1               	movwf	?___fttol+3
 17314  0BD7  3000               	movlw	0
 17315  0BD8  00D0               	movwf	?___fttol+2
 17316  0BD9  3000               	movlw	0
 17317  0BDA  00CF               	movwf	?___fttol+1
 17318  0BDB  3000               	movlw	0
 17319  0BDC  00CE               	movwf	?___fttol
 17320  0BDD  0008               	return
 17321  0BDE                     l6662:	
 17322  0BDE  3001               	movlw	1
 17323  0BDF                     u5935:	
 17324  0BDF  36DA               	lsrf	___fttol@lval+3,f
 17325  0BE0  0CD9               	rrf	___fttol@lval+2,f
 17326  0BE1  0CD8               	rrf	___fttol@lval+1,f
 17327  0BE2  0CD7               	rrf	___fttol@lval,f
 17328  0BE3  0B89               	decfsz	9,f
 17329  0BE4  2BDF               	goto	u5935
 17330  0BE5  3001               	movlw	1
 17331  0BE6  00D2               	movwf	??___fttol
 17332  0BE7  0852               	movf	??___fttol,w
 17333  0BE8  07DB               	addwf	___fttol@exp1,f
 17334  0BE9  1903               	btfsc	3,2
 17335  0BEA  2C05               	goto	l6674
 17336  0BEB  2BDE               	goto	l6662
 17337  0BEC                     l6664:	
 17338  0BEC  3018               	movlw	24
 17339  0BED  025B               	subwf	___fttol@exp1,w
 17340  0BEE  1C03               	skipc
 17341  0BEF  2C02               	goto	l6672
 17342  0BF0  3000               	movlw	0
 17343  0BF1  00D1               	movwf	?___fttol+3
 17344  0BF2  3000               	movlw	0
 17345  0BF3  00D0               	movwf	?___fttol+2
 17346  0BF4  3000               	movlw	0
 17347  0BF5  00CF               	movwf	?___fttol+1
 17348  0BF6  3000               	movlw	0
 17349  0BF7  00CE               	movwf	?___fttol
 17350  0BF8  0008               	return
 17351  0BF9                     l6670:	
 17352  0BF9  3001               	movlw	1
 17353  0BFA                     u5965:	
 17354  0BFA  35D7               	lslf	___fttol@lval,f
 17355  0BFB  0DD8               	rlf	___fttol@lval+1,f
 17356  0BFC  0DD9               	rlf	___fttol@lval+2,f
 17357  0BFD  0DDA               	rlf	___fttol@lval+3,f
 17358  0BFE  0B89               	decfsz	9,f
 17359  0BFF  2BFA               	goto	u5965
 17360  0C00  3001               	movlw	1
 17361  0C01  02DB               	subwf	___fttol@exp1,f
 17362  0C02                     l6672:	
 17363  0C02  08DB               	movf	___fttol@exp1,f
 17364  0C03  1D03               	skipz
 17365  0C04  2BF9               	goto	l6670
 17366  0C05                     l6674:	
 17367  0C05  0856               	movf	___fttol@sign1,w
 17368  0C06  1903               	btfsc	3,2
 17369  0C07  2C13               	goto	l6678
 17370  0C08  09D7               	comf	___fttol@lval,f
 17371  0C09  09D8               	comf	___fttol@lval+1,f
 17372  0C0A  09D9               	comf	___fttol@lval+2,f
 17373  0C0B  09DA               	comf	___fttol@lval+3,f
 17374  0C0C  0AD7               	incf	___fttol@lval,f
 17375  0C0D  1903               	skipnz
 17376  0C0E  0AD8               	incf	___fttol@lval+1,f
 17377  0C0F  1903               	skipnz
 17378  0C10  0AD9               	incf	___fttol@lval+2,f
 17379  0C11  1903               	skipnz
 17380  0C12  0ADA               	incf	___fttol@lval+3,f
 17381  0C13                     l6678:	
 17382  0C13  085A               	movf	___fttol@lval+3,w
 17383  0C14  00D1               	movwf	?___fttol+3
 17384  0C15  0859               	movf	___fttol@lval+2,w
 17385  0C16  00D0               	movwf	?___fttol+2
 17386  0C17  0858               	movf	___fttol@lval+1,w
 17387  0C18  00CF               	movwf	?___fttol+1
 17388  0C19  0857               	movf	___fttol@lval,w
 17389  0C1A  00CE               	movwf	?___fttol
 17390  0C1B  0008               	return
 17391  0C1C                     __end_of___fttol:	
 17392                           
 17393                           	psect	text118
 17394  1937                     __ptext118:	
 17395 ;; *************** function ___ftneg *****************
 17396 ;; Defined at:
 17397 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftneg.c"
 17398 ;; Parameters:    Size  Location     Type
 17399 ;;  f1              3   30[BANK0 ] float 
 17400 ;; Auto vars:     Size  Location     Type
 17401 ;;		None
 17402 ;; Return value:  Size  Location     Type
 17403 ;;                  3   30[BANK0 ] float 
 17404 ;; Registers used:
 17405 ;;		wreg
 17406 ;; Tracked objects:
 17407 ;;		On entry : 0/0
 17408 ;;		On exit  : 0/0
 17409 ;;		Unchanged: 0/0
 17410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17411 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17414 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17415 ;;Total ram usage:        3 bytes
 17416 ;; Hardware stack levels used:    1
 17417 ;; Hardware stack levels required when called:    5
 17418 ;; This function calls:
 17419 ;;		Nothing
 17420 ;; This function is called by:
 17421 ;;		_getDimmerLights_PercentToValue
 17422 ;;		_getDimmerLights_ValueToPercent
 17423 ;; This function uses a non-reentrant model
 17424 ;;
 17425                           
 17426                           
 17427                           ;psect for function ___ftneg
 17428  1937                     ___ftneg:	
 17429                           
 17430                           ;incstack = 0
 17431                           ; Regs used in ___ftneg: [wreg]
 17432  1937  0020               	movlb	0	; select bank0
 17433  1938  0840               	movf	___ftneg@f1+2,w
 17434  1939  043F               	iorwf	___ftneg@f1+1,w
 17435  193A  043E               	iorwf	___ftneg@f1,w
 17436  193B  1903               	skipnz
 17437  193C  0008               	return
 17438  193D  3080               	movlw	128
 17439  193E  06C0               	xorwf	___ftneg@f1+2,f
 17440  193F  0008               	return
 17441  1940                     __end_of___ftneg:	
 17442                           
 17443                           	psect	text119
 17444  0E91                     __ptext119:	
 17445 ;; *************** function ___ftmul *****************
 17446 ;; Defined at:
 17447 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftmul.c"
 17448 ;; Parameters:    Size  Location     Type
 17449 ;;  f1              3   14[BANK0 ] float 
 17450 ;;  f2              3   17[BANK0 ] float 
 17451 ;; Auto vars:     Size  Location     Type
 17452 ;;  f3_as_produc    3   25[BANK0 ] unsigned um
 17453 ;;  sign            1   29[BANK0 ] unsigned char 
 17454 ;;  cntr            1   28[BANK0 ] unsigned char 
 17455 ;;  exp             1   24[BANK0 ] unsigned char 
 17456 ;; Return value:  Size  Location     Type
 17457 ;;                  3   14[BANK0 ] float 
 17458 ;; Registers used:
 17459 ;;		wreg, status,2, status,0, pclath, cstack
 17460 ;; Tracked objects:
 17461 ;;		On entry : 0/0
 17462 ;;		On exit  : 0/0
 17463 ;;		Unchanged: 0/0
 17464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17465 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17466 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17467 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17468 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17469 ;;Total ram usage:       16 bytes
 17470 ;; Hardware stack levels used:    1
 17471 ;; Hardware stack levels required when called:    6
 17472 ;; This function calls:
 17473 ;;		___ftpack
 17474 ;; This function is called by:
 17475 ;;		_getDimmerLights_PercentToValue
 17476 ;; This function uses a non-reentrant model
 17477 ;;
 17478                           
 17479                           
 17480                           ;psect for function ___ftmul
 17481  0E91                     ___ftmul:	
 17482                           
 17483                           ;incstack = 0
 17484                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
 17485  0E91  0020               	movlb	0	; select bank0
 17486  0E92  082E               	movf	___ftmul@f1,w
 17487  0E93  00B4               	movwf	??___ftmul
 17488  0E94  082F               	movf	___ftmul@f1+1,w
 17489  0E95  00B5               	movwf	??___ftmul+1
 17490  0E96  0830               	movf	___ftmul@f1+2,w
 17491  0E97  00B6               	movwf	??___ftmul+2
 17492  0E98  1003               	clrc
 17493  0E99  0D35               	rlf	??___ftmul+1,w
 17494  0E9A  0D36               	rlf	??___ftmul+2,w
 17495  0E9B  00B7               	movwf	??___ftmul+3
 17496  0E9C  0837               	movf	??___ftmul+3,w
 17497  0E9D  00B8               	movwf	___ftmul@exp
 17498  0E9E  08B8               	movf	___ftmul@exp,f
 17499  0E9F  1D03               	skipz
 17500  0EA0  2EA8               	goto	l6586
 17501  0EA1  3000               	movlw	0
 17502  0EA2  00AE               	movwf	?___ftmul
 17503  0EA3  3000               	movlw	0
 17504  0EA4  00AF               	movwf	?___ftmul+1
 17505  0EA5  3000               	movlw	0
 17506  0EA6  00B0               	movwf	?___ftmul+2
 17507  0EA7  0008               	return
 17508  0EA8                     l6586:	
 17509  0EA8  0831               	movf	___ftmul@f2,w
 17510  0EA9  00B4               	movwf	??___ftmul
 17511  0EAA  0832               	movf	___ftmul@f2+1,w
 17512  0EAB  00B5               	movwf	??___ftmul+1
 17513  0EAC  0833               	movf	___ftmul@f2+2,w
 17514  0EAD  00B6               	movwf	??___ftmul+2
 17515  0EAE  1003               	clrc
 17516  0EAF  0D35               	rlf	??___ftmul+1,w
 17517  0EB0  0D36               	rlf	??___ftmul+2,w
 17518  0EB1  00B7               	movwf	??___ftmul+3
 17519  0EB2  0837               	movf	??___ftmul+3,w
 17520  0EB3  00BD               	movwf	___ftmul@sign
 17521  0EB4  08BD               	movf	___ftmul@sign,f
 17522  0EB5  1D03               	skipz
 17523  0EB6  2EBE               	goto	l6592
 17524  0EB7  3000               	movlw	0
 17525  0EB8  00AE               	movwf	?___ftmul
 17526  0EB9  3000               	movlw	0
 17527  0EBA  00AF               	movwf	?___ftmul+1
 17528  0EBB  3000               	movlw	0
 17529  0EBC  00B0               	movwf	?___ftmul+2
 17530  0EBD  0008               	return
 17531  0EBE                     l6592:	
 17532  0EBE  083D               	movf	___ftmul@sign,w
 17533  0EBF  3E7B               	addlw	123
 17534  0EC0  00B4               	movwf	??___ftmul
 17535  0EC1  0834               	movf	??___ftmul,w
 17536  0EC2  07B8               	addwf	___ftmul@exp,f
 17537  0EC3  082E               	movf	___ftmul@f1,w
 17538  0EC4  00B4               	movwf	??___ftmul
 17539  0EC5  082F               	movf	___ftmul@f1+1,w
 17540  0EC6  00B5               	movwf	??___ftmul+1
 17541  0EC7  0830               	movf	___ftmul@f1+2,w
 17542  0EC8  00B6               	movwf	??___ftmul+2
 17543  0EC9  3010               	movlw	16
 17544  0ECA                     u5785:	
 17545  0ECA  36B6               	lsrf	??___ftmul+2,f
 17546  0ECB  0CB5               	rrf	??___ftmul+1,f
 17547  0ECC  0CB4               	rrf	??___ftmul,f
 17548  0ECD  0B89               	decfsz	9,f
 17549  0ECE  2ECA               	goto	u5785
 17550  0ECF  0834               	movf	??___ftmul,w
 17551  0ED0  00B7               	movwf	??___ftmul+3
 17552  0ED1  0837               	movf	??___ftmul+3,w
 17553  0ED2  00BD               	movwf	___ftmul@sign
 17554  0ED3  0831               	movf	___ftmul@f2,w
 17555  0ED4  00B4               	movwf	??___ftmul
 17556  0ED5  0832               	movf	___ftmul@f2+1,w
 17557  0ED6  00B5               	movwf	??___ftmul+1
 17558  0ED7  0833               	movf	___ftmul@f2+2,w
 17559  0ED8  00B6               	movwf	??___ftmul+2
 17560  0ED9  3010               	movlw	16
 17561  0EDA                     u5795:	
 17562  0EDA  36B6               	lsrf	??___ftmul+2,f
 17563  0EDB  0CB5               	rrf	??___ftmul+1,f
 17564  0EDC  0CB4               	rrf	??___ftmul,f
 17565  0EDD  0B89               	decfsz	9,f
 17566  0EDE  2EDA               	goto	u5795
 17567  0EDF  0834               	movf	??___ftmul,w
 17568  0EE0  00B7               	movwf	??___ftmul+3
 17569  0EE1  0837               	movf	??___ftmul+3,w
 17570  0EE2  06BD               	xorwf	___ftmul@sign,f
 17571  0EE3  3080               	movlw	128
 17572  0EE4  00B4               	movwf	??___ftmul
 17573  0EE5  0834               	movf	??___ftmul,w
 17574  0EE6  05BD               	andwf	___ftmul@sign,f
 17575  0EE7  17AF               	bsf	___ftmul@f1+1,7
 17576  0EE8  17B2               	bsf	___ftmul@f2+1,7
 17577  0EE9  30FF               	movlw	255
 17578  0EEA  05B1               	andwf	___ftmul@f2,f
 17579  0EEB  30FF               	movlw	255
 17580  0EEC  05B2               	andwf	___ftmul@f2+1,f
 17581  0EED  3000               	movlw	0
 17582  0EEE  05B3               	andwf	___ftmul@f2+2,f
 17583  0EEF  3000               	movlw	0
 17584  0EF0  00B9               	movwf	___ftmul@f3_as_product
 17585  0EF1  3000               	movlw	0
 17586  0EF2  00BA               	movwf	___ftmul@f3_as_product+1
 17587  0EF3  3000               	movlw	0
 17588  0EF4  00BB               	movwf	___ftmul@f3_as_product+2
 17589  0EF5  3007               	movlw	7
 17590  0EF6  00B4               	movwf	??___ftmul
 17591  0EF7  0834               	movf	??___ftmul,w
 17592  0EF8  00BC               	movwf	___ftmul@cntr
 17593  0EF9                     l6604:	
 17594  0EF9  1C2E               	btfss	___ftmul@f1,0
 17595  0EFA  2F01               	goto	l6608
 17596  0EFB  0831               	movf	___ftmul@f2,w
 17597  0EFC  07B9               	addwf	___ftmul@f3_as_product,f
 17598  0EFD  0832               	movf	___ftmul@f2+1,w
 17599  0EFE  3DBA               	addwfc	___ftmul@f3_as_product+1,f
 17600  0EFF  0833               	movf	___ftmul@f2+2,w
 17601  0F00  3DBB               	addwfc	___ftmul@f3_as_product+2,f
 17602  0F01                     l6608:	
 17603  0F01  3001               	movlw	1
 17604  0F02                     u5815:	
 17605  0F02  36B0               	lsrf	___ftmul@f1+2,f
 17606  0F03  0CAF               	rrf	___ftmul@f1+1,f
 17607  0F04  0CAE               	rrf	___ftmul@f1,f
 17608  0F05  0B89               	decfsz	9,f
 17609  0F06  2F02               	goto	u5815
 17610  0F07  3001               	movlw	1
 17611  0F08                     u5825:	
 17612  0F08  35B1               	lslf	___ftmul@f2,f
 17613  0F09  0DB2               	rlf	___ftmul@f2+1,f
 17614  0F0A  0DB3               	rlf	___ftmul@f2+2,f
 17615  0F0B  0B89               	decfsz	9,f
 17616  0F0C  2F08               	goto	u5825
 17617  0F0D  3001               	movlw	1
 17618  0F0E  02BC               	subwf	___ftmul@cntr,f
 17619  0F0F  1D03               	btfss	3,2
 17620  0F10  2EF9               	goto	l6604
 17621  0F11  3009               	movlw	9
 17622  0F12  00B4               	movwf	??___ftmul
 17623  0F13  0834               	movf	??___ftmul,w
 17624  0F14  00BC               	movwf	___ftmul@cntr
 17625  0F15                     l6616:	
 17626  0F15  1C2E               	btfss	___ftmul@f1,0
 17627  0F16  2F1D               	goto	l6620
 17628  0F17  0831               	movf	___ftmul@f2,w
 17629  0F18  07B9               	addwf	___ftmul@f3_as_product,f
 17630  0F19  0832               	movf	___ftmul@f2+1,w
 17631  0F1A  3DBA               	addwfc	___ftmul@f3_as_product+1,f
 17632  0F1B  0833               	movf	___ftmul@f2+2,w
 17633  0F1C  3DBB               	addwfc	___ftmul@f3_as_product+2,f
 17634  0F1D                     l6620:	
 17635  0F1D  3001               	movlw	1
 17636  0F1E                     u5855:	
 17637  0F1E  36B0               	lsrf	___ftmul@f1+2,f
 17638  0F1F  0CAF               	rrf	___ftmul@f1+1,f
 17639  0F20  0CAE               	rrf	___ftmul@f1,f
 17640  0F21  0B89               	decfsz	9,f
 17641  0F22  2F1E               	goto	u5855
 17642  0F23  3001               	movlw	1
 17643  0F24                     u5865:	
 17644  0F24  36BB               	lsrf	___ftmul@f3_as_product+2,f
 17645  0F25  0CBA               	rrf	___ftmul@f3_as_product+1,f
 17646  0F26  0CB9               	rrf	___ftmul@f3_as_product,f
 17647  0F27  0B89               	decfsz	9,f
 17648  0F28  2F24               	goto	u5865
 17649  0F29  3001               	movlw	1
 17650  0F2A  02BC               	subwf	___ftmul@cntr,f
 17651  0F2B  1D03               	btfss	3,2
 17652  0F2C  2F15               	goto	l6616
 17653  0F2D  0839               	movf	___ftmul@f3_as_product,w
 17654  0F2E  00A0               	movwf	___ftpack@arg
 17655  0F2F  083A               	movf	___ftmul@f3_as_product+1,w
 17656  0F30  00A1               	movwf	___ftpack@arg+1
 17657  0F31  083B               	movf	___ftmul@f3_as_product+2,w
 17658  0F32  00A2               	movwf	___ftpack@arg+2
 17659  0F33  0838               	movf	___ftmul@exp,w
 17660  0F34  00B4               	movwf	??___ftmul
 17661  0F35  0834               	movf	??___ftmul,w
 17662  0F36  00A3               	movwf	___ftpack@exp
 17663  0F37  083D               	movf	___ftmul@sign,w
 17664  0F38  00B5               	movwf	??___ftmul+1
 17665  0F39  0835               	movf	??___ftmul+1,w
 17666  0F3A  00A4               	movwf	___ftpack@sign
 17667  0F3B  3194  24BF         	fcall	___ftpack
 17668  0F3D  0020               	movlb	0	; select bank0
 17669  0F3E  0820               	movf	?___ftpack,w
 17670  0F3F  00AE               	movwf	?___ftmul
 17671  0F40  0821               	movf	?___ftpack+1,w
 17672  0F41  00AF               	movwf	?___ftmul+1
 17673  0F42  0822               	movf	?___ftpack+2,w
 17674  0F43  00B0               	movwf	?___ftmul+2
 17675  0F44  0008               	return
 17676  0F45                     __end_of___ftmul:	
 17677                           
 17678                           	psect	text120
 17679  0D37                     __ptext120:	
 17680 ;; *************** function ___ftdiv *****************
 17681 ;; Defined at:
 17682 ;;		line 49 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\pic\ftdiv.c"
 17683 ;; Parameters:    Size  Location     Type
 17684 ;;  f2              3   14[BANK0 ] float 
 17685 ;;  f1              3   17[BANK0 ] float 
 17686 ;; Auto vars:     Size  Location     Type
 17687 ;;  f3              3   25[BANK0 ] float 
 17688 ;;  sign            1   29[BANK0 ] unsigned char 
 17689 ;;  exp             1   28[BANK0 ] unsigned char 
 17690 ;;  cntr            1   24[BANK0 ] unsigned char 
 17691 ;; Return value:  Size  Location     Type
 17692 ;;                  3   14[BANK0 ] float 
 17693 ;; Registers used:
 17694 ;;		wreg, status,2, status,0, pclath, cstack
 17695 ;; Tracked objects:
 17696 ;;		On entry : 0/0
 17697 ;;		On exit  : 0/0
 17698 ;;		Unchanged: 0/0
 17699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17700 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17701 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17702 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17703 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17704 ;;Total ram usage:       16 bytes
 17705 ;; Hardware stack levels used:    1
 17706 ;; Hardware stack levels required when called:    6
 17707 ;; This function calls:
 17708 ;;		___ftpack
 17709 ;; This function is called by:
 17710 ;;		_getDimmerLights_PercentToValue
 17711 ;;		_getDimmerLights_ValueToPercent
 17712 ;; This function uses a non-reentrant model
 17713 ;;
 17714                           
 17715                           
 17716                           ;psect for function ___ftdiv
 17717  0D37                     ___ftdiv:	
 17718                           
 17719                           ;incstack = 0
 17720                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
 17721  0D37  0020               	movlb	0	; select bank0
 17722  0D38  0831               	movf	___ftdiv@f1,w
 17723  0D39  00B4               	movwf	??___ftdiv
 17724  0D3A  0832               	movf	___ftdiv@f1+1,w
 17725  0D3B  00B5               	movwf	??___ftdiv+1
 17726  0D3C  0833               	movf	___ftdiv@f1+2,w
 17727  0D3D  00B6               	movwf	??___ftdiv+2
 17728  0D3E  1003               	clrc
 17729  0D3F  0D35               	rlf	??___ftdiv+1,w
 17730  0D40  0D36               	rlf	??___ftdiv+2,w
 17731  0D41  00B7               	movwf	??___ftdiv+3
 17732  0D42  0837               	movf	??___ftdiv+3,w
 17733  0D43  00BC               	movwf	___ftdiv@exp
 17734  0D44  08BC               	movf	___ftdiv@exp,f
 17735  0D45  1D03               	skipz
 17736  0D46  2D4E               	goto	l6544
 17737  0D47  3000               	movlw	0
 17738  0D48  00AE               	movwf	?___ftdiv
 17739  0D49  3000               	movlw	0
 17740  0D4A  00AF               	movwf	?___ftdiv+1
 17741  0D4B  3000               	movlw	0
 17742  0D4C  00B0               	movwf	?___ftdiv+2
 17743  0D4D  0008               	return
 17744  0D4E                     l6544:	
 17745  0D4E  082E               	movf	___ftdiv@f2,w
 17746  0D4F  00B4               	movwf	??___ftdiv
 17747  0D50  082F               	movf	___ftdiv@f2+1,w
 17748  0D51  00B5               	movwf	??___ftdiv+1
 17749  0D52  0830               	movf	___ftdiv@f2+2,w
 17750  0D53  00B6               	movwf	??___ftdiv+2
 17751  0D54  1003               	clrc
 17752  0D55  0D35               	rlf	??___ftdiv+1,w
 17753  0D56  0D36               	rlf	??___ftdiv+2,w
 17754  0D57  00B7               	movwf	??___ftdiv+3
 17755  0D58  0837               	movf	??___ftdiv+3,w
 17756  0D59  00BD               	movwf	___ftdiv@sign
 17757  0D5A  08BD               	movf	___ftdiv@sign,f
 17758  0D5B  1D03               	skipz
 17759  0D5C  2D64               	goto	l6550
 17760  0D5D  3000               	movlw	0
 17761  0D5E  00AE               	movwf	?___ftdiv
 17762  0D5F  3000               	movlw	0
 17763  0D60  00AF               	movwf	?___ftdiv+1
 17764  0D61  3000               	movlw	0
 17765  0D62  00B0               	movwf	?___ftdiv+2
 17766  0D63  0008               	return
 17767  0D64                     l6550:	
 17768  0D64  3000               	movlw	0
 17769  0D65  00B9               	movwf	___ftdiv@f3
 17770  0D66  3000               	movlw	0
 17771  0D67  00BA               	movwf	___ftdiv@f3+1
 17772  0D68  3000               	movlw	0
 17773  0D69  00BB               	movwf	___ftdiv@f3+2
 17774  0D6A  3089               	movlw	137
 17775  0D6B  073D               	addwf	___ftdiv@sign,w
 17776  0D6C  00B4               	movwf	??___ftdiv
 17777  0D6D  0834               	movf	??___ftdiv,w
 17778  0D6E  02BC               	subwf	___ftdiv@exp,f
 17779  0D6F  0831               	movf	___ftdiv@f1,w
 17780  0D70  00B4               	movwf	??___ftdiv
 17781  0D71  0832               	movf	___ftdiv@f1+1,w
 17782  0D72  00B5               	movwf	??___ftdiv+1
 17783  0D73  0833               	movf	___ftdiv@f1+2,w
 17784  0D74  00B6               	movwf	??___ftdiv+2
 17785  0D75  3010               	movlw	16
 17786  0D76                     u5705:	
 17787  0D76  36B6               	lsrf	??___ftdiv+2,f
 17788  0D77  0CB5               	rrf	??___ftdiv+1,f
 17789  0D78  0CB4               	rrf	??___ftdiv,f
 17790  0D79  0B89               	decfsz	9,f
 17791  0D7A  2D76               	goto	u5705
 17792  0D7B  0834               	movf	??___ftdiv,w
 17793  0D7C  00B7               	movwf	??___ftdiv+3
 17794  0D7D  0837               	movf	??___ftdiv+3,w
 17795  0D7E  00BD               	movwf	___ftdiv@sign
 17796  0D7F  082E               	movf	___ftdiv@f2,w
 17797  0D80  00B4               	movwf	??___ftdiv
 17798  0D81  082F               	movf	___ftdiv@f2+1,w
 17799  0D82  00B5               	movwf	??___ftdiv+1
 17800  0D83  0830               	movf	___ftdiv@f2+2,w
 17801  0D84  00B6               	movwf	??___ftdiv+2
 17802  0D85  3010               	movlw	16
 17803  0D86                     u5715:	
 17804  0D86  36B6               	lsrf	??___ftdiv+2,f
 17805  0D87  0CB5               	rrf	??___ftdiv+1,f
 17806  0D88  0CB4               	rrf	??___ftdiv,f
 17807  0D89  0B89               	decfsz	9,f
 17808  0D8A  2D86               	goto	u5715
 17809  0D8B  0834               	movf	??___ftdiv,w
 17810  0D8C  00B7               	movwf	??___ftdiv+3
 17811  0D8D  0837               	movf	??___ftdiv+3,w
 17812  0D8E  06BD               	xorwf	___ftdiv@sign,f
 17813  0D8F  3080               	movlw	128
 17814  0D90  00B4               	movwf	??___ftdiv
 17815  0D91  0834               	movf	??___ftdiv,w
 17816  0D92  05BD               	andwf	___ftdiv@sign,f
 17817  0D93  17B2               	bsf	___ftdiv@f1+1,7
 17818  0D94  30FF               	movlw	255
 17819  0D95  05B1               	andwf	___ftdiv@f1,f
 17820  0D96  30FF               	movlw	255
 17821  0D97  05B2               	andwf	___ftdiv@f1+1,f
 17822  0D98  3000               	movlw	0
 17823  0D99  05B3               	andwf	___ftdiv@f1+2,f
 17824  0D9A  17AF               	bsf	___ftdiv@f2+1,7
 17825  0D9B  30FF               	movlw	255
 17826  0D9C  05AE               	andwf	___ftdiv@f2,f
 17827  0D9D  30FF               	movlw	255
 17828  0D9E  05AF               	andwf	___ftdiv@f2+1,f
 17829  0D9F  3000               	movlw	0
 17830  0DA0  05B0               	andwf	___ftdiv@f2+2,f
 17831  0DA1  3018               	movlw	24
 17832  0DA2  00B4               	movwf	??___ftdiv
 17833  0DA3  0834               	movf	??___ftdiv,w
 17834  0DA4  00B8               	movwf	___ftdiv@cntr
 17835  0DA5                     l6564:	
 17836  0DA5  3001               	movlw	1
 17837  0DA6                     u5725:	
 17838  0DA6  35B9               	lslf	___ftdiv@f3,f
 17839  0DA7  0DBA               	rlf	___ftdiv@f3+1,f
 17840  0DA8  0DBB               	rlf	___ftdiv@f3+2,f
 17841  0DA9  0B89               	decfsz	9,f
 17842  0DAA  2DA6               	goto	u5725
 17843  0DAB  0830               	movf	___ftdiv@f2+2,w
 17844  0DAC  0233               	subwf	___ftdiv@f1+2,w
 17845  0DAD  1D03               	skipz
 17846  0DAE  2DB5               	goto	u5735
 17847  0DAF  082F               	movf	___ftdiv@f2+1,w
 17848  0DB0  0232               	subwf	___ftdiv@f1+1,w
 17849  0DB1  1D03               	skipz
 17850  0DB2  2DB5               	goto	u5735
 17851  0DB3  082E               	movf	___ftdiv@f2,w
 17852  0DB4  0231               	subwf	___ftdiv@f1,w
 17853  0DB5                     u5735:	
 17854  0DB5  1C03               	skipc
 17855  0DB6  2DBE               	goto	l6572
 17856  0DB7  082E               	movf	___ftdiv@f2,w
 17857  0DB8  02B1               	subwf	___ftdiv@f1,f
 17858  0DB9  082F               	movf	___ftdiv@f2+1,w
 17859  0DBA  3BB2               	subwfb	___ftdiv@f1+1,f
 17860  0DBB  0830               	movf	___ftdiv@f2+2,w
 17861  0DBC  3BB3               	subwfb	___ftdiv@f1+2,f
 17862  0DBD  1439               	bsf	___ftdiv@f3,0
 17863  0DBE                     l6572:	
 17864  0DBE  3001               	movlw	1
 17865  0DBF                     u5745:	
 17866  0DBF  35B1               	lslf	___ftdiv@f1,f
 17867  0DC0  0DB2               	rlf	___ftdiv@f1+1,f
 17868  0DC1  0DB3               	rlf	___ftdiv@f1+2,f
 17869  0DC2  0B89               	decfsz	9,f
 17870  0DC3  2DBF               	goto	u5745
 17871  0DC4  3001               	movlw	1
 17872  0DC5  02B8               	subwf	___ftdiv@cntr,f
 17873  0DC6  1D03               	btfss	3,2
 17874  0DC7  2DA5               	goto	l6564
 17875  0DC8  0839               	movf	___ftdiv@f3,w
 17876  0DC9  00A0               	movwf	___ftpack@arg
 17877  0DCA  083A               	movf	___ftdiv@f3+1,w
 17878  0DCB  00A1               	movwf	___ftpack@arg+1
 17879  0DCC  083B               	movf	___ftdiv@f3+2,w
 17880  0DCD  00A2               	movwf	___ftpack@arg+2
 17881  0DCE  083C               	movf	___ftdiv@exp,w
 17882  0DCF  00B4               	movwf	??___ftdiv
 17883  0DD0  0834               	movf	??___ftdiv,w
 17884  0DD1  00A3               	movwf	___ftpack@exp
 17885  0DD2  083D               	movf	___ftdiv@sign,w
 17886  0DD3  00B5               	movwf	??___ftdiv+1
 17887  0DD4  0835               	movf	??___ftdiv+1,w
 17888  0DD5  00A4               	movwf	___ftpack@sign
 17889  0DD6  3194  24BF         	fcall	___ftpack
 17890  0DD8  0020               	movlb	0	; select bank0
 17891  0DD9  0820               	movf	?___ftpack,w
 17892  0DDA  00AE               	movwf	?___ftdiv
 17893  0DDB  0821               	movf	?___ftpack+1,w
 17894  0DDC  00AF               	movwf	?___ftdiv+1
 17895  0DDD  0822               	movf	?___ftpack+2,w
 17896  0DDE  00B0               	movwf	?___ftdiv+2
 17897  0DDF  0008               	return
 17898  0DE0                     __end_of___ftdiv:	
 17899                           
 17900                           	psect	text121
 17901  0389                     __ptext121:	
 17902 ;; *************** function ___ftadd *****************
 17903 ;; Defined at:
 17904 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\ftadd.c"
 17905 ;; Parameters:    Size  Location     Type
 17906 ;;  f1              3   33[BANK0 ] float 
 17907 ;;  f2              3   36[BANK0 ] float 
 17908 ;; Auto vars:     Size  Location     Type
 17909 ;;  exp1            1   45[BANK0 ] unsigned char 
 17910 ;;  exp2            1   44[BANK0 ] unsigned char 
 17911 ;;  sign            1   43[BANK0 ] unsigned char 
 17912 ;; Return value:  Size  Location     Type
 17913 ;;                  3   33[BANK0 ] float 
 17914 ;; Registers used:
 17915 ;;		wreg, status,2, status,0, pclath, cstack
 17916 ;; Tracked objects:
 17917 ;;		On entry : 0/0
 17918 ;;		On exit  : 0/0
 17919 ;;		Unchanged: 0/0
 17920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 17921 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17922 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17923 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17924 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
 17925 ;;Total ram usage:       13 bytes
 17926 ;; Hardware stack levels used:    1
 17927 ;; Hardware stack levels required when called:    6
 17928 ;; This function calls:
 17929 ;;		___ftpack
 17930 ;; This function is called by:
 17931 ;;		_getDimmerLights_PercentToValue
 17932 ;;		_getDimmerLights_ValueToPercent
 17933 ;; This function uses a non-reentrant model
 17934 ;;
 17935                           
 17936                           
 17937                           ;psect for function ___ftadd
 17938  0389                     ___ftadd:	
 17939                           
 17940                           ;incstack = 0
 17941                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
 17942  0389  0020               	movlb	0	; select bank0
 17943  038A  0841               	movf	___ftadd@f1,w
 17944  038B  00C7               	movwf	??___ftadd
 17945  038C  0842               	movf	___ftadd@f1+1,w
 17946  038D  00C8               	movwf	??___ftadd+1
 17947  038E  0843               	movf	___ftadd@f1+2,w
 17948  038F  00C9               	movwf	??___ftadd+2
 17949  0390  1003               	clrc
 17950  0391  0D48               	rlf	??___ftadd+1,w
 17951  0392  0D49               	rlf	??___ftadd+2,w
 17952  0393  00CA               	movwf	??___ftadd+3
 17953  0394  084A               	movf	??___ftadd+3,w
 17954  0395  00CD               	movwf	___ftadd@exp1
 17955  0396  0844               	movf	___ftadd@f2,w
 17956  0397  00C7               	movwf	??___ftadd
 17957  0398  0845               	movf	___ftadd@f2+1,w
 17958  0399  00C8               	movwf	??___ftadd+1
 17959  039A  0846               	movf	___ftadd@f2+2,w
 17960  039B  00C9               	movwf	??___ftadd+2
 17961  039C  1003               	clrc
 17962  039D  0D48               	rlf	??___ftadd+1,w
 17963  039E  0D49               	rlf	??___ftadd+2,w
 17964  039F  00CA               	movwf	??___ftadd+3
 17965  03A0  084A               	movf	??___ftadd+3,w
 17966  03A1  00CC               	movwf	___ftadd@exp2
 17967  03A2  084D               	movf	___ftadd@exp1,w
 17968  03A3  1903               	btfsc	3,2
 17969  03A4  2BB1               	goto	l6474
 17970  03A5  084C               	movf	___ftadd@exp2,w
 17971  03A6  024D               	subwf	___ftadd@exp1,w
 17972  03A7  1803               	skipnc
 17973  03A8  2BB8               	goto	l6478
 17974  03A9  034D               	decf	___ftadd@exp1,w
 17975  03AA  3AFF               	xorlw	255
 17976  03AB  074C               	addwf	___ftadd@exp2,w
 17977  03AC  00C7               	movwf	??___ftadd
 17978  03AD  3019               	movlw	25
 17979  03AE  0247               	subwf	??___ftadd,w
 17980  03AF  1C03               	skipc
 17981  03B0  2BB8               	goto	l6478
 17982  03B1                     l6474:	
 17983  03B1  0844               	movf	___ftadd@f2,w
 17984  03B2  00C1               	movwf	?___ftadd
 17985  03B3  0845               	movf	___ftadd@f2+1,w
 17986  03B4  00C2               	movwf	?___ftadd+1
 17987  03B5  0846               	movf	___ftadd@f2+2,w
 17988  03B6  00C3               	movwf	?___ftadd+2
 17989  03B7  0008               	return
 17990  03B8                     l6478:	
 17991  03B8  084C               	movf	___ftadd@exp2,w
 17992  03B9  1903               	btfsc	3,2
 17993  03BA  0008               	return
 17994  03BB  084D               	movf	___ftadd@exp1,w
 17995  03BC  024C               	subwf	___ftadd@exp2,w
 17996  03BD  1803               	skipnc
 17997  03BE  2BC7               	goto	l6484
 17998  03BF  034C               	decf	___ftadd@exp2,w
 17999  03C0  3AFF               	xorlw	255
 18000  03C1  074D               	addwf	___ftadd@exp1,w
 18001  03C2  00C7               	movwf	??___ftadd
 18002  03C3  3019               	movlw	25
 18003  03C4  0247               	subwf	??___ftadd,w
 18004  03C5  1803               	btfsc	3,0
 18005  03C6  0008               	return
 18006  03C7                     l6484:	
 18007  03C7  3006               	movlw	6
 18008  03C8  00C7               	movwf	??___ftadd
 18009  03C9  0847               	movf	??___ftadd,w
 18010  03CA  00CB               	movwf	___ftadd@sign
 18011  03CB  1BC3               	btfsc	___ftadd@f1+2,7
 18012  03CC  17CB               	bsf	___ftadd@sign,7
 18013  03CD  1BC6               	btfsc	___ftadd@f2+2,7
 18014  03CE  174B               	bsf	___ftadd@sign,6
 18015  03CF  17C2               	bsf	___ftadd@f1+1,7
 18016  03D0  30FF               	movlw	255
 18017  03D1  05C1               	andwf	___ftadd@f1,f
 18018  03D2  30FF               	movlw	255
 18019  03D3  05C2               	andwf	___ftadd@f1+1,f
 18020  03D4  3000               	movlw	0
 18021  03D5  05C3               	andwf	___ftadd@f1+2,f
 18022  03D6  17C5               	bsf	___ftadd@f2+1,7
 18023  03D7  30FF               	movlw	255
 18024  03D8  05C4               	andwf	___ftadd@f2,f
 18025  03D9  30FF               	movlw	255
 18026  03DA  05C5               	andwf	___ftadd@f2+1,f
 18027  03DB  3000               	movlw	0
 18028  03DC  05C6               	andwf	___ftadd@f2+2,f
 18029  03DD  084C               	movf	___ftadd@exp2,w
 18030  03DE  024D               	subwf	___ftadd@exp1,w
 18031  03DF  1803               	skipnc
 18032  03E0  2C03               	goto	l6506
 18033  03E1                     l6496:	
 18034  03E1  3001               	movlw	1
 18035  03E2                     u5545:	
 18036  03E2  35C4               	lslf	___ftadd@f2,f
 18037  03E3  0DC5               	rlf	___ftadd@f2+1,f
 18038  03E4  0DC6               	rlf	___ftadd@f2+2,f
 18039  03E5  0B89               	decfsz	9,f
 18040  03E6  2BE2               	goto	u5545
 18041  03E7  3001               	movlw	1
 18042  03E8  02CC               	subwf	___ftadd@exp2,f
 18043  03E9  084C               	movf	___ftadd@exp2,w
 18044  03EA  064D               	xorwf	___ftadd@exp1,w
 18045  03EB  1903               	skipnz
 18046  03EC  2BFE               	goto	l6504
 18047  03ED  3001               	movlw	1
 18048  03EE  02CB               	subwf	___ftadd@sign,f
 18049  03EF  084B               	movf	___ftadd@sign,w
 18050  03F0  3907               	andlw	7
 18051  03F1  1903               	btfsc	3,2
 18052  03F2  2BFE               	goto	l6504
 18053  03F3  2BE1               	goto	l6496
 18054  03F4                     l6502:	
 18055  03F4  3001               	movlw	1
 18056  03F5                     u5575:	
 18057  03F5  36C3               	lsrf	___ftadd@f1+2,f
 18058  03F6  0CC2               	rrf	___ftadd@f1+1,f
 18059  03F7  0CC1               	rrf	___ftadd@f1,f
 18060  03F8  0B89               	decfsz	9,f
 18061  03F9  2BF5               	goto	u5575
 18062  03FA  3001               	movlw	1
 18063  03FB  00C7               	movwf	??___ftadd
 18064  03FC  0847               	movf	??___ftadd,w
 18065  03FD  07CD               	addwf	___ftadd@exp1,f
 18066  03FE                     l6504:	
 18067  03FE  084D               	movf	___ftadd@exp1,w
 18068  03FF  064C               	xorwf	___ftadd@exp2,w
 18069  0400  1903               	btfsc	3,2
 18070  0401  2C28               	goto	l3209
 18071  0402  2BF4               	goto	l6502
 18072  0403                     l6506:	
 18073  0403  084D               	movf	___ftadd@exp1,w
 18074  0404  024C               	subwf	___ftadd@exp2,w
 18075  0405  1803               	skipnc
 18076  0406  2C28               	goto	l3209
 18077  0407                     l6508:	
 18078  0407  3001               	movlw	1
 18079  0408                     u5605:	
 18080  0408  35C1               	lslf	___ftadd@f1,f
 18081  0409  0DC2               	rlf	___ftadd@f1+1,f
 18082  040A  0DC3               	rlf	___ftadd@f1+2,f
 18083  040B  0B89               	decfsz	9,f
 18084  040C  2C08               	goto	u5605
 18085  040D  3001               	movlw	1
 18086  040E  02CD               	subwf	___ftadd@exp1,f
 18087  040F  084C               	movf	___ftadd@exp2,w
 18088  0410  064D               	xorwf	___ftadd@exp1,w
 18089  0411  1903               	skipnz
 18090  0412  2C24               	goto	l6516
 18091  0413  3001               	movlw	1
 18092  0414  02CB               	subwf	___ftadd@sign,f
 18093  0415  084B               	movf	___ftadd@sign,w
 18094  0416  3907               	andlw	7
 18095  0417  1903               	btfsc	3,2
 18096  0418  2C24               	goto	l6516
 18097  0419  2C07               	goto	l6508
 18098  041A                     l6514:	
 18099  041A  3001               	movlw	1
 18100  041B                     u5635:	
 18101  041B  36C6               	lsrf	___ftadd@f2+2,f
 18102  041C  0CC5               	rrf	___ftadd@f2+1,f
 18103  041D  0CC4               	rrf	___ftadd@f2,f
 18104  041E  0B89               	decfsz	9,f
 18105  041F  2C1B               	goto	u5635
 18106  0420  3001               	movlw	1
 18107  0421  00C7               	movwf	??___ftadd
 18108  0422  0847               	movf	??___ftadd,w
 18109  0423  07CC               	addwf	___ftadd@exp2,f
 18110  0424                     l6516:	
 18111  0424  084D               	movf	___ftadd@exp1,w
 18112  0425  064C               	xorwf	___ftadd@exp2,w
 18113  0426  1D03               	skipz
 18114  0427  2C1A               	goto	l6514
 18115  0428                     l3209:	
 18116  0428  1FCB               	btfss	___ftadd@sign,7
 18117  0429  2C3A               	goto	l6520
 18118  042A  30FF               	movlw	255
 18119  042B  06C1               	xorwf	___ftadd@f1,f
 18120  042C  30FF               	movlw	255
 18121  042D  06C2               	xorwf	___ftadd@f1+1,f
 18122  042E  30FF               	movlw	255
 18123  042F  06C3               	xorwf	___ftadd@f1+2,f
 18124  0430  3001               	movlw	1
 18125  0431  07C1               	addwf	___ftadd@f1,f
 18126  0432  3000               	movlw	0
 18127  0433  1803               	skipnc
 18128  0434  3001               	movlw	1
 18129  0435  07C2               	addwf	___ftadd@f1+1,f
 18130  0436  3000               	movlw	0
 18131  0437  1803               	skipnc
 18132  0438  3001               	movlw	1
 18133  0439  07C3               	addwf	___ftadd@f1+2,f
 18134  043A                     l6520:	
 18135  043A  1F4B               	btfss	___ftadd@sign,6
 18136  043B  2C4C               	goto	l6524
 18137  043C  30FF               	movlw	255
 18138  043D  06C4               	xorwf	___ftadd@f2,f
 18139  043E  30FF               	movlw	255
 18140  043F  06C5               	xorwf	___ftadd@f2+1,f
 18141  0440  30FF               	movlw	255
 18142  0441  06C6               	xorwf	___ftadd@f2+2,f
 18143  0442  3001               	movlw	1
 18144  0443  07C4               	addwf	___ftadd@f2,f
 18145  0444  3000               	movlw	0
 18146  0445  1803               	skipnc
 18147  0446  3001               	movlw	1
 18148  0447  07C5               	addwf	___ftadd@f2+1,f
 18149  0448  3000               	movlw	0
 18150  0449  1803               	skipnc
 18151  044A  3001               	movlw	1
 18152  044B  07C6               	addwf	___ftadd@f2+2,f
 18153  044C                     l6524:	
 18154  044C  01CB               	clrf	___ftadd@sign
 18155  044D  0841               	movf	___ftadd@f1,w
 18156  044E  07C4               	addwf	___ftadd@f2,f
 18157  044F  0842               	movf	___ftadd@f1+1,w
 18158  0450  3DC5               	addwfc	___ftadd@f2+1,f
 18159  0451  0843               	movf	___ftadd@f1+2,w
 18160  0452  3DC6               	addwfc	___ftadd@f2+2,f
 18161  0453  1FC6               	btfss	___ftadd@f2+2,7
 18162  0454  2C67               	goto	l6534
 18163  0455  30FF               	movlw	255
 18164  0456  06C4               	xorwf	___ftadd@f2,f
 18165  0457  30FF               	movlw	255
 18166  0458  06C5               	xorwf	___ftadd@f2+1,f
 18167  0459  30FF               	movlw	255
 18168  045A  06C6               	xorwf	___ftadd@f2+2,f
 18169  045B  3001               	movlw	1
 18170  045C  07C4               	addwf	___ftadd@f2,f
 18171  045D  3000               	movlw	0
 18172  045E  1803               	skipnc
 18173  045F  3001               	movlw	1
 18174  0460  07C5               	addwf	___ftadd@f2+1,f
 18175  0461  3000               	movlw	0
 18176  0462  1803               	skipnc
 18177  0463  3001               	movlw	1
 18178  0464  07C6               	addwf	___ftadd@f2+2,f
 18179  0465  01CB               	clrf	___ftadd@sign
 18180  0466  0ACB               	incf	___ftadd@sign,f
 18181  0467                     l6534:	
 18182  0467  0844               	movf	___ftadd@f2,w
 18183  0468  00A0               	movwf	___ftpack@arg
 18184  0469  0845               	movf	___ftadd@f2+1,w
 18185  046A  00A1               	movwf	___ftpack@arg+1
 18186  046B  0846               	movf	___ftadd@f2+2,w
 18187  046C  00A2               	movwf	___ftpack@arg+2
 18188  046D  084D               	movf	___ftadd@exp1,w
 18189  046E  00C7               	movwf	??___ftadd
 18190  046F  0847               	movf	??___ftadd,w
 18191  0470  00A3               	movwf	___ftpack@exp
 18192  0471  084B               	movf	___ftadd@sign,w
 18193  0472  00C8               	movwf	??___ftadd+1
 18194  0473  0848               	movf	??___ftadd+1,w
 18195  0474  00A4               	movwf	___ftpack@sign
 18196  0475  3194  24BF         	fcall	___ftpack
 18197  0477  0020               	movlb	0	; select bank0
 18198  0478  0820               	movf	?___ftpack,w
 18199  0479  00C1               	movwf	?___ftadd
 18200  047A  0821               	movf	?___ftpack+1,w
 18201  047B  00C2               	movwf	?___ftadd+1
 18202  047C  0822               	movf	?___ftpack+2,w
 18203  047D  00C3               	movwf	?___ftadd+2
 18204  047E  0008               	return
 18205  047F                     __end_of___ftadd:	
 18206                           
 18207                           	psect	text122
 18208  1E33                     __ptext122:	
 18209 ;; *************** function ___awtoft *****************
 18210 ;; Defined at:
 18211 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awtoft.c"
 18212 ;; Parameters:    Size  Location     Type
 18213 ;;  c               2    8[BANK0 ] int 
 18214 ;; Auto vars:     Size  Location     Type
 18215 ;;  sign            1   13[BANK0 ] unsigned char 
 18216 ;; Return value:  Size  Location     Type
 18217 ;;                  3    8[BANK0 ] float 
 18218 ;; Registers used:
 18219 ;;		wreg, status,2, status,0, pclath, cstack
 18220 ;; Tracked objects:
 18221 ;;		On entry : 0/0
 18222 ;;		On exit  : 0/0
 18223 ;;		Unchanged: 0/0
 18224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18225 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18226 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18227 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18228 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18229 ;;Total ram usage:        6 bytes
 18230 ;; Hardware stack levels used:    1
 18231 ;; Hardware stack levels required when called:    6
 18232 ;; This function calls:
 18233 ;;		___ftpack
 18234 ;; This function is called by:
 18235 ;;		_getDimmerLights_PercentToValue
 18236 ;;		_getDimmerLights_ValueToPercent
 18237 ;; This function uses a non-reentrant model
 18238 ;;
 18239                           
 18240                           
 18241                           ;psect for function ___awtoft
 18242  1E33                     ___awtoft:	
 18243                           
 18244                           ;incstack = 0
 18245                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
 18246  1E33  0020               	movlb	0	; select bank0
 18247  1E34  01AD               	clrf	___awtoft@sign
 18248  1E35  1FA9               	btfss	___awtoft@c+1,7
 18249  1E36  2E3E               	goto	l6462
 18250  1E37  09A8               	comf	___awtoft@c,f
 18251  1E38  09A9               	comf	___awtoft@c+1,f
 18252  1E39  0AA8               	incf	___awtoft@c,f
 18253  1E3A  1903               	skipnz
 18254  1E3B  0AA9               	incf	___awtoft@c+1,f
 18255  1E3C  01AD               	clrf	___awtoft@sign
 18256  1E3D  0AAD               	incf	___awtoft@sign,f
 18257  1E3E                     l6462:	
 18258  1E3E  0828               	movf	___awtoft@c,w
 18259  1E3F  00A0               	movwf	___ftpack@arg
 18260  1E40  0829               	movf	___awtoft@c+1,w
 18261  1E41  00A1               	movwf	___ftpack@arg+1
 18262  1E42  01A2               	clrf	___ftpack@arg+2
 18263  1E43  308E               	movlw	142
 18264  1E44  00AB               	movwf	??___awtoft
 18265  1E45  082B               	movf	??___awtoft,w
 18266  1E46  00A3               	movwf	___ftpack@exp
 18267  1E47  082D               	movf	___awtoft@sign,w
 18268  1E48  00AC               	movwf	??___awtoft+1
 18269  1E49  082C               	movf	??___awtoft+1,w
 18270  1E4A  00A4               	movwf	___ftpack@sign
 18271  1E4B  3194  24BF         	fcall	___ftpack
 18272  1E4D  0020               	movlb	0	; select bank0
 18273  1E4E  0820               	movf	?___ftpack,w
 18274  1E4F  00A8               	movwf	?___awtoft
 18275  1E50  0821               	movf	?___ftpack+1,w
 18276  1E51  00A9               	movwf	?___awtoft+1
 18277  1E52  0822               	movf	?___ftpack+2,w
 18278  1E53  00AA               	movwf	?___awtoft+2
 18279  1E54  0008               	return
 18280  1E55                     __end_of___awtoft:	
 18281                           
 18282                           	psect	text123
 18283  14BF                     __ptext123:	
 18284 ;; *************** function ___ftpack *****************
 18285 ;; Defined at:
 18286 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\float.c"
 18287 ;; Parameters:    Size  Location     Type
 18288 ;;  arg             3    0[BANK0 ] unsigned um
 18289 ;;  exp             1    3[BANK0 ] unsigned char 
 18290 ;;  sign            1    4[BANK0 ] unsigned char 
 18291 ;; Auto vars:     Size  Location     Type
 18292 ;;		None
 18293 ;; Return value:  Size  Location     Type
 18294 ;;                  3    0[BANK0 ] float 
 18295 ;; Registers used:
 18296 ;;		wreg, status,2, status,0
 18297 ;; Tracked objects:
 18298 ;;		On entry : 0/0
 18299 ;;		On exit  : 0/0
 18300 ;;		Unchanged: 0/0
 18301 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18302 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18304 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18305 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18306 ;;Total ram usage:        8 bytes
 18307 ;; Hardware stack levels used:    1
 18308 ;; Hardware stack levels required when called:    5
 18309 ;; This function calls:
 18310 ;;		Nothing
 18311 ;; This function is called by:
 18312 ;;		___awtoft
 18313 ;;		___ftadd
 18314 ;;		___ftdiv
 18315 ;;		___ftmul
 18316 ;; This function uses a non-reentrant model
 18317 ;;
 18318                           
 18319                           
 18320                           ;psect for function ___ftpack
 18321  14BF                     ___ftpack:	
 18322                           
 18323                           ;incstack = 0
 18324                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
 18325  14BF  0020               	movlb	0	; select bank0
 18326  14C0  0823               	movf	___ftpack@exp,w
 18327  14C1  1903               	btfsc	3,2
 18328  14C2  2CC8               	goto	l6322
 18329  14C3  0822               	movf	___ftpack@arg+2,w
 18330  14C4  0421               	iorwf	___ftpack@arg+1,w
 18331  14C5  0420               	iorwf	___ftpack@arg,w
 18332  14C6  1D03               	skipz
 18333  14C7  2CD9               	goto	l6328
 18334  14C8                     l6322:	
 18335  14C8  3000               	movlw	0
 18336  14C9  00A0               	movwf	?___ftpack
 18337  14CA  3000               	movlw	0
 18338  14CB  00A1               	movwf	?___ftpack+1
 18339  14CC  3000               	movlw	0
 18340  14CD  00A2               	movwf	?___ftpack+2
 18341  14CE  0008               	return
 18342  14CF                     l6326:	
 18343  14CF  3001               	movlw	1
 18344  14D0  00A5               	movwf	??___ftpack
 18345  14D1  0825               	movf	??___ftpack,w
 18346  14D2  07A3               	addwf	___ftpack@exp,f
 18347  14D3  3001               	movlw	1
 18348  14D4                     u5155:	
 18349  14D4  36A2               	lsrf	___ftpack@arg+2,f
 18350  14D5  0CA1               	rrf	___ftpack@arg+1,f
 18351  14D6  0CA0               	rrf	___ftpack@arg,f
 18352  14D7  0B89               	decfsz	9,f
 18353  14D8  2CD4               	goto	u5155
 18354  14D9                     l6328:	
 18355  14D9  30FE               	movlw	254
 18356  14DA  0522               	andwf	___ftpack@arg+2,w
 18357  14DB  1903               	btfsc	3,2
 18358  14DC  2CF2               	goto	l3180
 18359  14DD  2CCF               	goto	l6326
 18360  14DE                     l6330:	
 18361  14DE  3001               	movlw	1
 18362  14DF  00A5               	movwf	??___ftpack
 18363  14E0  0825               	movf	??___ftpack,w
 18364  14E1  07A3               	addwf	___ftpack@exp,f
 18365  14E2  3001               	movlw	1
 18366  14E3  07A0               	addwf	___ftpack@arg,f
 18367  14E4  3000               	movlw	0
 18368  14E5  1803               	skipnc
 18369  14E6  3001               	movlw	1
 18370  14E7  07A1               	addwf	___ftpack@arg+1,f
 18371  14E8  3000               	movlw	0
 18372  14E9  1803               	skipnc
 18373  14EA  3001               	movlw	1
 18374  14EB  07A2               	addwf	___ftpack@arg+2,f
 18375  14EC  3001               	movlw	1
 18376  14ED                     u5175:	
 18377  14ED  36A2               	lsrf	___ftpack@arg+2,f
 18378  14EE  0CA1               	rrf	___ftpack@arg+1,f
 18379  14EF  0CA0               	rrf	___ftpack@arg,f
 18380  14F0  0B89               	decfsz	9,f
 18381  14F1  2CED               	goto	u5175
 18382  14F2                     l3180:	
 18383  14F2  30FF               	movlw	255
 18384  14F3  0522               	andwf	___ftpack@arg+2,w
 18385  14F4  1903               	btfsc	3,2
 18386  14F5  2CFF               	goto	l6338
 18387  14F6  2CDE               	goto	l6330
 18388  14F7                     l6336:	
 18389  14F7  3001               	movlw	1
 18390  14F8  02A3               	subwf	___ftpack@exp,f
 18391  14F9  3001               	movlw	1
 18392  14FA                     u5195:	
 18393  14FA  35A0               	lslf	___ftpack@arg,f
 18394  14FB  0DA1               	rlf	___ftpack@arg+1,f
 18395  14FC  0DA2               	rlf	___ftpack@arg+2,f
 18396  14FD  0B89               	decfsz	9,f
 18397  14FE  2CFA               	goto	u5195
 18398  14FF                     l6338:	
 18399  14FF  1FA1               	btfss	___ftpack@arg+1,7
 18400  1500  2CF7               	goto	l6336
 18401  1501  1823               	btfsc	___ftpack@exp,0
 18402  1502  2D09               	goto	l3186
 18403  1503  30FF               	movlw	255
 18404  1504  05A0               	andwf	___ftpack@arg,f
 18405  1505  307F               	movlw	127
 18406  1506  05A1               	andwf	___ftpack@arg+1,f
 18407  1507  30FF               	movlw	255
 18408  1508  05A2               	andwf	___ftpack@arg+2,f
 18409  1509                     l3186:	
 18410  1509  1003               	clrc
 18411  150A  0CA3               	rrf	___ftpack@exp,f
 18412  150B  0823               	movf	___ftpack@exp,w
 18413  150C  00A5               	movwf	??___ftpack
 18414  150D  01A6               	clrf	??___ftpack+1
 18415  150E  01A7               	clrf	??___ftpack+2
 18416  150F  3010               	movlw	16
 18417  1510                     u5225:	
 18418  1510  35A5               	lslf	??___ftpack,f
 18419  1511  0DA6               	rlf	??___ftpack+1,f
 18420  1512  0DA7               	rlf	??___ftpack+2,f
 18421  1513  0B89               	decfsz	9,f
 18422  1514  2D10               	goto	u5225
 18423  1515  0825               	movf	??___ftpack,w
 18424  1516  04A0               	iorwf	___ftpack@arg,f
 18425  1517  0826               	movf	??___ftpack+1,w
 18426  1518  04A1               	iorwf	___ftpack@arg+1,f
 18427  1519  0827               	movf	??___ftpack+2,w
 18428  151A  04A2               	iorwf	___ftpack@arg+2,f
 18429  151B  0824               	movf	___ftpack@sign,w
 18430  151C  1903               	btfsc	3,2
 18431  151D  0008               	return
 18432  151E  17A2               	bsf	___ftpack@arg+2,7
 18433  151F  0008               	return
 18434  1520                     __end_of___ftpack:	
 18435                           
 18436                           	psect	text124
 18437  1907                     __ptext124:	
 18438 ;; *************** function _DelayOff_Main *****************
 18439 ;; Defined at:
 18440 ;;		line 41 in file "../src/DelayOff_B1.c"
 18441 ;; Parameters:    Size  Location     Type
 18442 ;;		None
 18443 ;; Auto vars:     Size  Location     Type
 18444 ;;		None
 18445 ;; Return value:  Size  Location     Type
 18446 ;;		None               void
 18447 ;; Registers used:
 18448 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18449 ;; Tracked objects:
 18450 ;;		On entry : 0/0
 18451 ;;		On exit  : 0/0
 18452 ;;		Unchanged: 0/0
 18453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18454 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18456 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18457 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18458 ;;Total ram usage:        0 bytes
 18459 ;; Hardware stack levels used:    1
 18460 ;; Hardware stack levels required when called:    9
 18461 ;; This function calls:
 18462 ;;		_DlyOff_Main
 18463 ;; This function is called by:
 18464 ;;		_main
 18465 ;; This function uses a non-reentrant model
 18466 ;;
 18467                           
 18468                           
 18469                           ;psect for function _DelayOff_Main
 18470  1907                     _DelayOff_Main:	
 18471                           
 18472                           ;DelayOff_B1.c: 43: DlyOff_Main(1);
 18473                           
 18474                           ;incstack = 0
 18475                           ; Regs used in _DelayOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18476  1907  3001               	movlw	1
 18477  1908  3197  2791  3199   	fcall	_DlyOff_Main
 18478                           
 18479                           ;DelayOff_B1.c: 47: DlyOff_Main(2);
 18480  190B  3002               	movlw	2
 18481  190C  3197  2791         	fcall	_DlyOff_Main
 18482  190E  0008               	return
 18483  190F                     __end_of_DelayOff_Main:	
 18484                           
 18485                           	psect	text125
 18486  1791                     __ptext125:	
 18487 ;; *************** function _DlyOff_Main *****************
 18488 ;; Defined at:
 18489 ;;		line 61 in file "../src/DelayOff_B1.c"
 18490 ;; Parameters:    Size  Location     Type
 18491 ;;  sw              1    wreg     unsigned char 
 18492 ;; Auto vars:     Size  Location     Type
 18493 ;;  sw              1   71[BANK0 ] unsigned char 
 18494 ;; Return value:  Size  Location     Type
 18495 ;;		None               void
 18496 ;; Registers used:
 18497 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18498 ;; Tracked objects:
 18499 ;;		On entry : 0/0
 18500 ;;		On exit  : 0/0
 18501 ;;		Unchanged: 0/0
 18502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18504 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18505 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18506 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18507 ;;Total ram usage:        3 bytes
 18508 ;; Hardware stack levels used:    1
 18509 ;; Hardware stack levels required when called:    8
 18510 ;; This function calls:
 18511 ;;		_DelayOffPointSelect
 18512 ;;		_getDimmerLights_Status
 18513 ;;		_setDimmerLights_SwOff
 18514 ;;		_setDimmerLights_SwOn
 18515 ;;		_setProductData
 18516 ;; This function is called by:
 18517 ;;		_DelayOff_Main
 18518 ;; This function uses a non-reentrant model
 18519 ;;
 18520                           
 18521                           
 18522                           ;psect for function _DlyOff_Main
 18523  1791                     _DlyOff_Main:	
 18524                           
 18525                           ;incstack = 0
 18526                           ; Regs used in _DlyOff_Main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18527                           ;DlyOff_Main@sw stored from wreg
 18528  1791  0020               	movlb	0	; select bank0
 18529  1792  00E7               	movwf	DlyOff_Main@sw
 18530                           
 18531                           ;DelayOff_B1.c: 63: DelayOffPointSelect(sw);
 18532  1793  0867               	movf	DlyOff_Main@sw,w
 18533  1794  319B  23AF  3197   	fcall	_DelayOffPointSelect
 18534                           
 18535                           ;DelayOff_B1.c: 64: if (DelayOff->GO == 1) {
 18536  1797  0021               	movlb	1	; select bank1
 18537  1798  0855               	movf	_DelayOff^(0+128),w
 18538  1799  0086               	movwf	6
 18539  179A  3001               	movlw	1	; select bank2/3
 18540  179B  0087               	movwf	7
 18541  179C  1C81               	btfss	1,1
 18542  179D  0008               	return
 18543                           
 18544                           ;DelayOff_B1.c: 65: DelayOff->SecondTime++;
 18545  179E  0855               	movf	_DelayOff^(0+128),w
 18546  179F  3E02               	addlw	2
 18547  17A0  0086               	movwf	6
 18548  17A1  3001               	movlw	1	; select bank2/3
 18549  17A2  0087               	movwf	7
 18550  17A3  3001               	movlw	1
 18551  17A4  0781               	addwf	1,f
 18552  17A5  3141               	addfsr 1,1
 18553  17A6  1803               	skipnc
 18554  17A7  0A81               	incf	1,f
 18555                           
 18556                           ;DelayOff_B1.c: 66: if (DelayOff->SecondTime >= 60000/20) {
 18557  17A8  0855               	movf	_DelayOff^(0+128),w
 18558  17A9  3E02               	addlw	2
 18559  17AA  0086               	movwf	6
 18560  17AB  3001               	movlw	1	; select bank2/3
 18561  17AC  0087               	movwf	7
 18562  17AD  3F40               	moviw [0]fsr1
 18563  17AE  0020               	movlb	0	; select bank0
 18564  17AF  00E5               	movwf	??_DlyOff_Main
 18565  17B0  3F41               	moviw [1]fsr1
 18566  17B1  00E6               	movwf	??_DlyOff_Main+1
 18567  17B2  300B               	movlw	11
 18568  17B3  0266               	subwf	??_DlyOff_Main+1,w
 18569  17B4  30B8               	movlw	184
 18570  17B5  1903               	skipnz
 18571  17B6  0265               	subwf	??_DlyOff_Main,w
 18572  17B7  1C03               	skipc
 18573  17B8  0008               	return
 18574                           
 18575                           ;DelayOff_B1.c: 67: DelayOff->SecondTime = 0;
 18576  17B9  0021               	movlb	1	; select bank1
 18577  17BA  0855               	movf	_DelayOff^(0+128),w
 18578  17BB  3E02               	addlw	2
 18579  17BC  0086               	movwf	6
 18580  17BD  3001               	movlw	1	; select bank2/3
 18581  17BE  0087               	movwf	7
 18582  17BF  3000               	movlw	0
 18583  17C0  3FC0               	movwi [0]fsr1
 18584  17C1  3FC1               	movwi [1]fsr1
 18585                           
 18586                           ;DelayOff_B1.c: 68: DelayOff->MinuteTime++;
 18587  17C2  3001               	movlw	1
 18588  17C3  0020               	movlb	0	; select bank0
 18589  17C4  00E5               	movwf	??_DlyOff_Main
 18590  17C5  0021               	movlb	1	; select bank1
 18591  17C6  0855               	movf	_DelayOff^(0+128),w
 18592  17C7  3E04               	addlw	4
 18593  17C8  0086               	movwf	6
 18594  17C9  3001               	movlw	1	; select bank2/3
 18595  17CA  0087               	movwf	7
 18596  17CB  0020               	movlb	0	; select bank0
 18597  17CC  0865               	movf	??_DlyOff_Main,w
 18598  17CD  0781               	addwf	1,f
 18599                           
 18600                           ;DelayOff_B1.c: 69: if (DelayOff->MinuteTime >= DelayOff->Value) {
 18601  17CE  0021               	movlb	1	; select bank1
 18602  17CF  0855               	movf	_DelayOff^(0+128),w
 18603  17D0  3E04               	addlw	4
 18604  17D1  0086               	movwf	6
 18605  17D2  3001               	movlw	1	; select bank2/3
 18606  17D3  0087               	movwf	7
 18607  17D4  0A55               	incf	_DelayOff^(0+128),w
 18608  17D5  0084               	movwf	4
 18609  17D6  3001               	movlw	1	; select bank2/3
 18610  17D7  0085               	movwf	5
 18611  17D8  0800               	movf	0,w
 18612  17D9  0201               	subwf	1,w
 18613  17DA  1C03               	skipc
 18614  17DB  0008               	return
 18615                           
 18616                           ;DelayOff_B1.c: 70: DelayOff->MinuteTime = 0;
 18617  17DC  0855               	movf	_DelayOff^(0+128),w
 18618  17DD  3E04               	addlw	4
 18619  17DE  0086               	movwf	6
 18620  17DF  3001               	movlw	1	; select bank2/3
 18621  17E0  0087               	movwf	7
 18622  17E1  0181               	clrf	1
 18623                           
 18624                           ;DelayOff_B1.c: 71: DelayOff->GO = 0;
 18625  17E2  0855               	movf	_DelayOff^(0+128),w
 18626  17E3  0086               	movwf	6
 18627  17E4  3001               	movlw	1	; select bank2/3
 18628  17E5  0087               	movwf	7
 18629  17E6  1081               	bcf	1,1
 18630                           
 18631                           ;DelayOff_B1.c: 75: if (getDimmerLights_Status(sw) == 1) {
 18632  17E7  0020               	movlb	0	; select bank0
 18633  17E8  0867               	movf	DlyOff_Main@sw,w
 18634  17E9  3199  21FD  3197   	fcall	_getDimmerLights_Status
 18635  17EC  3A01               	xorlw	1
 18636  17ED  1D03               	skipz
 18637  17EE  2FF9               	goto	l581
 18638                           
 18639                           ;DelayOff_B1.c: 76: setDimmerLights_SwOn(sw);
 18640  17EF  0020               	movlb	0	; select bank0
 18641  17F0  0867               	movf	DlyOff_Main@sw,w
 18642  17F1  3188  2000  3197   	fcall	_setDimmerLights_SwOn
 18643                           
 18644                           ;DelayOff_B1.c: 77: setDimmerLights_SwOff(sw);
 18645  17F4  0020               	movlb	0	; select bank0
 18646  17F5  0867               	movf	DlyOff_Main@sw,w
 18647  17F6  3187  27C6  3197   	fcall	_setDimmerLights_SwOff
 18648  17F9                     l581:	
 18649                           
 18650                           ;DelayOff_B1.c: 78: }
 18651                           ;DelayOff_B1.c: 80: setProductData(26 + sw, 0);
 18652  17F9  0020               	movlb	0	; select bank0
 18653  17FA  01E2               	clrf	setProductData@value
 18654  17FB  0867               	movf	DlyOff_Main@sw,w
 18655  17FC  3E1A               	addlw	26
 18656  17FD  3199  2181         	fcall	_setProductData
 18657  17FF  0008               	return
 18658  1800                     __end_of_DlyOff_Main:	
 18659                           
 18660                           	psect	text126
 18661  1981                     __ptext126:	
 18662 ;; *************** function _setProductData *****************
 18663 ;; Defined at:
 18664 ;;		line 645 in file "../src/main_B1.c"
 18665 ;; Parameters:    Size  Location     Type
 18666 ;;  address         1    wreg     unsigned char 
 18667 ;;  value           1   66[BANK0 ] unsigned char 
 18668 ;; Auto vars:     Size  Location     Type
 18669 ;;  address         1   68[BANK0 ] unsigned char 
 18670 ;; Return value:  Size  Location     Type
 18671 ;;		None               void
 18672 ;; Registers used:
 18673 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18674 ;; Tracked objects:
 18675 ;;		On entry : 0/0
 18676 ;;		On exit  : 0/0
 18677 ;;		Unchanged: 0/0
 18678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18679 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18680 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18681 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18682 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18683 ;;Total ram usage:        3 bytes
 18684 ;; Hardware stack levels used:    1
 18685 ;; Hardware stack levels required when called:    5
 18686 ;; This function calls:
 18687 ;;		Nothing
 18688 ;; This function is called by:
 18689 ;;		_DlyOff_Main
 18690 ;;		_setDelayOff_GO
 18691 ;;		_setDimmerLights_OnOff
 18692 ;;		_setDimmerLights_Dimming
 18693 ;;		_setTemp_Main
 18694 ;;		_setLog_Code
 18695 ;;		_setControl_Lights_Table
 18696 ;;		_setRFSW_AdjControl
 18697 ;;		_setRF_DimmerLights
 18698 ;; This function uses a non-reentrant model
 18699 ;;
 18700                           
 18701                           
 18702                           ;psect for function _setProductData
 18703  1981                     _setProductData:	
 18704                           
 18705                           ;incstack = 0
 18706                           ; Regs used in _setProductData: [wreg+fsr1l+fsr1h+status,2+status,0]
 18707                           ;setProductData@address stored from wreg
 18708  1981  0020               	movlb	0	; select bank0
 18709  1982  00E4               	movwf	setProductData@address
 18710                           
 18711                           ;main_B1.c: 646: _product.Data[address] = value;
 18712  1983  0862               	movf	setProductData@value,w
 18713  1984  00E3               	movwf	??_setProductData
 18714  1985  0864               	movf	setProductData@address,w
 18715  1986  3E45               	addlw	__product& (0+255)
 18716  1987  0086               	movwf	6
 18717  1988  3002               	movlw	2	; select bank4/5
 18718  1989  0087               	movwf	7
 18719  198A  0863               	movf	??_setProductData,w
 18720  198B  0081               	movwf	1
 18721  198C  0008               	return
 18722  198D                     __end_of_setProductData:	
 18723                           
 18724                           	psect	text127
 18725  0800                     __ptext127:	
 18726 ;; *************** function _setDimmerLights_SwOn *****************
 18727 ;; Defined at:
 18728 ;;		line 691 in file "../src/Dimmer_B1.c"
 18729 ;; Parameters:    Size  Location     Type
 18730 ;;  sw              1    wreg     unsigned char 
 18731 ;; Auto vars:     Size  Location     Type
 18732 ;;  sw              1   17[BANK0 ] unsigned char 
 18733 ;;  idle            1   16[BANK0 ] unsigned char 
 18734 ;; Return value:  Size  Location     Type
 18735 ;;		None               void
 18736 ;; Registers used:
 18737 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18738 ;; Tracked objects:
 18739 ;;		On entry : 0/0
 18740 ;;		On exit  : 0/0
 18741 ;;		Unchanged: 0/0
 18742 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18743 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18744 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18745 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18746 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18747 ;;Total ram usage:        5 bytes
 18748 ;; Hardware stack levels used:    1
 18749 ;; Hardware stack levels required when called:    7
 18750 ;; This function calls:
 18751 ;;		_DimmerLights_SelectPointer
 18752 ;;		_setBuz
 18753 ;; This function is called by:
 18754 ;;		_DlyOff_Main
 18755 ;;		_setControl_Lights_Table
 18756 ;;		_setRFSW_Control
 18757 ;;		_setRFSW_AdjControl
 18758 ;;		_setSw_Main
 18759 ;; This function uses a non-reentrant model
 18760 ;;
 18761                           
 18762                           
 18763                           ;psect for function _setDimmerLights_SwOn
 18764  0800                     _setDimmerLights_SwOn:	
 18765                           
 18766                           ;incstack = 0
 18767                           ; Regs used in _setDimmerLights_SwOn: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18768                           ;setDimmerLights_SwOn@sw stored from wreg
 18769  0800  0020               	movlb	0	; select bank0
 18770  0801  00B1               	movwf	setDimmerLights_SwOn@sw
 18771                           
 18772                           ;Dimmer_B1.c: 692: char idle = 0;
 18773  0802  01B0               	clrf	setDimmerLights_SwOn@idle
 18774                           
 18775                           ;Dimmer_B1.c: 694: if (idle == 0) {
 18776  0803  08B0               	movf	setDimmerLights_SwOn@idle,f
 18777  0804  1D03               	skipz
 18778  0805  282A               	goto	l6740
 18779                           
 18780                           ;Dimmer_B1.c: 695: if (sw == 1) {
 18781  0806  0831               	movf	setDimmerLights_SwOn@sw,w
 18782  0807  3A01               	xorlw	1
 18783  0808  1D03               	skipz
 18784  0809  2817               	goto	l6730
 18785                           
 18786                           ;Dimmer_B1.c: 696: idle = DimmerLights2.DimmingTrigger == 1 || DimmerIntr2.Dimming_Sw ==
      +                           1 ? 1 : 0;
 18787  080A  01AE               	clrf	_setDimmerLights_SwOn$2339
 18788  080B  0AAE               	incf	_setDimmerLights_SwOn$2339,f
 18789  080C  0023               	movlb	3	; select bank3
 18790  080D  1A50               	btfsc	_DimmerLights2^(0+384),4
 18791  080E  2814               	goto	l6728
 18792  080F  0021               	movlb	1	; select bank1
 18793  0810  1A47               	btfsc	_DimmerIntr2^(0+128),4
 18794  0811  2814               	goto	l6728
 18795  0812  0020               	movlb	0	; select bank0
 18796  0813  01AE               	clrf	_setDimmerLights_SwOn$2339
 18797  0814                     l6728:	
 18798  0814  0020               	movlb	0	; select bank0
 18799  0815  082E               	movf	_setDimmerLights_SwOn$2339,w
 18800  0816  2827               	goto	L12
 18801  0817                     l6730:	
 18802                           ;Dimmer_B1.c: 697: } else if (sw == 2) {
 18803                           
 18804  0817  0831               	movf	setDimmerLights_SwOn@sw,w
 18805  0818  3A02               	xorlw	2
 18806  0819  1D03               	skipz
 18807  081A  282A               	goto	l6740
 18808                           
 18809                           ;Dimmer_B1.c: 698: idle = DimmerLights1.DimmingTrigger == 1 || DimmerIntr1.Dimming_Sw ==
      +                           1 ? 1 : 0;
 18810  081B  01AF               	clrf	_setDimmerLights_SwOn$2348
 18811  081C  0AAF               	incf	_setDimmerLights_SwOn$2348,f
 18812  081D  0022               	movlb	2	; select bank2
 18813  081E  1A67               	btfsc	_DimmerLights1^(0+256),4
 18814  081F  2825               	goto	l6738
 18815  0820  0021               	movlb	1	; select bank1
 18816  0821  1A3B               	btfsc	_DimmerIntr1^(0+128),4
 18817  0822  2825               	goto	l6738
 18818  0823  0020               	movlb	0	; select bank0
 18819  0824  01AF               	clrf	_setDimmerLights_SwOn$2348
 18820  0825                     l6738:	
 18821  0825  0020               	movlb	0	; select bank0
 18822  0826  082F               	movf	_setDimmerLights_SwOn$2348,w
 18823  0827                     L12:	
 18824  0827  00AD               	movwf	??_setDimmerLights_SwOn
 18825  0828  082D               	movf	??_setDimmerLights_SwOn,w
 18826  0829  00B0               	movwf	setDimmerLights_SwOn@idle
 18827  082A                     l6740:	
 18828                           
 18829                           ;Dimmer_B1.c: 699: }
 18830                           ;Dimmer_B1.c: 700: }
 18831                           ;Dimmer_B1.c: 717: DimmerLights_SelectPointer(sw);
 18832  082A  0831               	movf	setDimmerLights_SwOn@sw,w
 18833  082B  319B  23C6  3188   	fcall	_DimmerLights_SelectPointer
 18834                           
 18835                           ;Dimmer_B1.c: 718: if (idle == 0) {
 18836  082E  0020               	movlb	0	; select bank0
 18837  082F  08B0               	movf	setDimmerLights_SwOn@idle,f
 18838  0830  1D03               	skipz
 18839  0831  0008               	return
 18840                           
 18841                           ;Dimmer_B1.c: 719: DimmerLights->SwFlag = 1;
 18842  0832  0021               	movlb	1	; select bank1
 18843  0833  0856               	movf	_DimmerLights^(0+128),w
 18844  0834  0086               	movwf	6
 18845  0835  3001               	movlw	1	; select bank2/3
 18846  0836  0087               	movwf	7
 18847  0837  1401               	bsf	1,0
 18848                           
 18849                           ;Dimmer_B1.c: 720: if (DimmerLights->Status == 0) {
 18850  0838  0A56               	incf	_DimmerLights^(0+128),w
 18851  0839  0086               	movwf	6
 18852  083A  3001               	movlw	1	; select bank2/3
 18853  083B  0087               	movwf	7
 18854  083C  1801               	btfsc	1,0
 18855  083D  284E               	goto	l6748
 18856                           
 18857                           ;Dimmer_B1.c: 721: DimmerLights->Status = 1;
 18858  083E  0A56               	incf	_DimmerLights^(0+128),w
 18859  083F  0086               	movwf	6
 18860  0840  3001               	movlw	1	; select bank2/3
 18861  0841  0087               	movwf	7
 18862  0842  1401               	bsf	1,0
 18863                           
 18864                           ;Dimmer_B1.c: 722: DimmerLights->Trigger = 1;
 18865  0843  0856               	movf	_DimmerLights^(0+128),w
 18866  0844  0086               	movwf	6
 18867  0845  3001               	movlw	1	; select bank2/3
 18868  0846  0087               	movwf	7
 18869  0847  1481               	bsf	1,1
 18870                           
 18871                           ;Dimmer_B1.c: 723: DimmerLights->Switch = 1;
 18872  0848  0856               	movf	_DimmerLights^(0+128),w
 18873  0849  0086               	movwf	6
 18874  084A  3001               	movlw	1	; select bank2/3
 18875  084B  0087               	movwf	7
 18876  084C  1501               	bsf	1,2
 18877                           
 18878                           ;Dimmer_B1.c: 724: } else {
 18879  084D  2853               	goto	l6750
 18880  084E                     l6748:	
 18881                           
 18882                           ;Dimmer_B1.c: 725: DimmerLights->Status = 0;
 18883  084E  0A56               	incf	_DimmerLights^(0+128),w
 18884  084F  0086               	movwf	6
 18885  0850  3001               	movlw	1	; select bank2/3
 18886  0851  0087               	movwf	7
 18887  0852  1001               	bcf	1,0
 18888  0853                     l6750:	
 18889                           
 18890                           ;Dimmer_B1.c: 726: }
 18891                           ;Dimmer_B1.c: 727: setBuz(1, 100);
 18892  0853  3064               	movlw	100
 18893  0854  0020               	movlb	0	; select bank0
 18894  0855  00A9               	movwf	setBuz@time
 18895  0856  3000               	movlw	0
 18896  0857  00AA               	movwf	setBuz@time+1
 18897  0858  3001               	movlw	1
 18898  0859  3194  240B         	fcall	_setBuz
 18899  085B  0008               	return
 18900  085C                     __end_of_setDimmerLights_SwOn:	
 18901                           
 18902                           	psect	text128
 18903  140B                     __ptext128:	
 18904 ;; *************** function _setBuz *****************
 18905 ;; Defined at:
 18906 ;;		line 22 in file "../src/Buzzer_B1.c"
 18907 ;; Parameters:    Size  Location     Type
 18908 ;;  count           1    wreg     unsigned char 
 18909 ;;  time            2    9[BANK0 ] int 
 18910 ;; Auto vars:     Size  Location     Type
 18911 ;;  count           1   12[BANK0 ] unsigned char 
 18912 ;; Return value:  Size  Location     Type
 18913 ;;		None               void
 18914 ;; Registers used:
 18915 ;;		wreg, status,2, status,0, pclath, cstack
 18916 ;; Tracked objects:
 18917 ;;		On entry : 0/0
 18918 ;;		On exit  : 0/0
 18919 ;;		Unchanged: 0/0
 18920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 18921 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18922 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18923 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18924 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 18925 ;;Total ram usage:        4 bytes
 18926 ;; Hardware stack levels used:    1
 18927 ;; Hardware stack levels required when called:    6
 18928 ;; This function calls:
 18929 ;;		___awdiv
 18930 ;; This function is called by:
 18931 ;;		_setDimmerLights_SwOn
 18932 ;;		_setDimmerLights_Dimming
 18933 ;;		_setTemp_Main
 18934 ;;		_setLog_Code
 18935 ;;		_setRFSW_Control
 18936 ;;		_setSw_Main
 18937 ;;		_my_MainTimer
 18938 ;;		_Exception_Main
 18939 ;; This function uses a non-reentrant model
 18940 ;;
 18941                           
 18942                           
 18943                           ;psect for function _setBuz
 18944  140B                     _setBuz:	
 18945                           
 18946                           ;incstack = 0
 18947                           ; Regs used in _setBuz: [wreg+status,2+status,0+pclath+cstack]
 18948                           ;setBuz@count stored from wreg
 18949  140B  0020               	movlb	0	; select bank0
 18950  140C  00AC               	movwf	setBuz@count
 18951                           
 18952                           ;Buzzer_B1.c: 23: time /= 20;
 18953  140D  3014               	movlw	20
 18954  140E  00A0               	movwf	___awdiv@divisor
 18955  140F  3000               	movlw	0
 18956  1410  00A1               	movwf	___awdiv@divisor+1
 18957  1411  082A               	movf	setBuz@time+1,w
 18958  1412  01A3               	clrf	___awdiv@dividend+1
 18959  1413  07A3               	addwf	___awdiv@dividend+1,f
 18960  1414  0829               	movf	setBuz@time,w
 18961  1415  01A2               	clrf	___awdiv@dividend
 18962  1416  07A2               	addwf	___awdiv@dividend,f
 18963  1417  3193  2361  3194   	fcall	___awdiv
 18964  141A  0020               	movlb	0	; select bank0
 18965  141B  0821               	movf	?___awdiv+1,w
 18966  141C  01AA               	clrf	setBuz@time+1
 18967  141D  07AA               	addwf	setBuz@time+1,f
 18968  141E  0820               	movf	?___awdiv,w
 18969  141F  01A9               	clrf	setBuz@time
 18970  1420  07A9               	addwf	setBuz@time,f
 18971                           
 18972                           ;Buzzer_B1.c: 24: if (Buz1.Enable == 1) {
 18973  1421  0022               	movlb	2	; select bank2
 18974  1422  1C20               	btfss	_Buz1^(0+256),0
 18975  1423  0008               	return
 18976                           
 18977                           ;Buzzer_B1.c: 25: if (Buz1.GO == 0) {
 18978  1424  18A0               	btfsc	_Buz1^(0+256),1
 18979  1425  2C3C               	goto	l98
 18980                           
 18981                           ;Buzzer_B1.c: 26: Buz1.GO = 1;
 18982  1426  14A0               	bsf	_Buz1^(0+256),1
 18983                           
 18984                           ;Buzzer_B1.c: 27: Buz1.Counter = 0;
 18985  1427  01A1               	clrf	(_Buz1^(0+256)+1)
 18986  1428  01A2               	clrf	((_Buz1+1)^(0+256)+1)
 18987                           
 18988                           ;Buzzer_B1.c: 28: Buz1.Count = count;
 18989  1429  0020               	movlb	0	; select bank0
 18990  142A  082C               	movf	setBuz@count,w
 18991  142B  00AB               	movwf	??_setBuz
 18992  142C  082B               	movf	??_setBuz,w
 18993  142D  0022               	movlb	2	; select bank2
 18994  142E  00A3               	movwf	(_Buz1^(0+256)+3)
 18995                           
 18996                           ;Buzzer_B1.c: 29: Buz1.TimeValue = time;
 18997  142F  0020               	movlb	0	; select bank0
 18998  1430  082A               	movf	setBuz@time+1,w
 18999  1431  0022               	movlb	2	; select bank2
 19000  1432  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 19001  1433  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 19002  1434  0020               	movlb	0	; select bank0
 19003  1435  0829               	movf	setBuz@time,w
 19004  1436  0022               	movlb	2	; select bank2
 19005  1437  01A6               	clrf	(_Buz1^(0+256)+6)
 19006  1438  07A6               	addwf	(_Buz1^(0+256)+6),f
 19007                           
 19008                           ;Buzzer_B1.c: 30: RB3 = 1;
 19009  1439  0020               	movlb	0	; select bank0
 19010  143A  158D               	bsf	13,3	;volatile
 19011                           
 19012                           ;Buzzer_B1.c: 31: } else {
 19013  143B  0008               	return
 19014  143C                     l98:	
 19015                           
 19016                           ;Buzzer_B1.c: 32: if (Buz1.BufferStatus1 == 0) {
 19017  143C  19A0               	btfsc	_Buz1^(0+256),3
 19018  143D  2C50               	goto	l100
 19019                           
 19020                           ;Buzzer_B1.c: 33: Buz1.BufferStatus1 = 1;
 19021  143E  15A0               	bsf	_Buz1^(0+256),3
 19022                           
 19023                           ;Buzzer_B1.c: 34: Buz1.CountBuffer1 = count;
 19024  143F  0020               	movlb	0	; select bank0
 19025  1440  082C               	movf	setBuz@count,w
 19026  1441  00AB               	movwf	??_setBuz
 19027  1442  082B               	movf	??_setBuz,w
 19028  1443  0022               	movlb	2	; select bank2
 19029  1444  00A4               	movwf	(_Buz1^(0+256)+4)
 19030                           
 19031                           ;Buzzer_B1.c: 35: Buz1.TimeValueBuffer1 = time;
 19032  1445  0020               	movlb	0	; select bank0
 19033  1446  082A               	movf	setBuz@time+1,w
 19034  1447  0022               	movlb	2	; select bank2
 19035  1448  01A9               	clrf	((_Buz1+1)^(0+256)+8)
 19036  1449  07A9               	addwf	((_Buz1+1)^(0+256)+8),f
 19037  144A  0020               	movlb	0	; select bank0
 19038  144B  0829               	movf	setBuz@time,w
 19039  144C  0022               	movlb	2	; select bank2
 19040  144D  01A8               	clrf	(_Buz1^(0+256)+8)
 19041  144E  07A8               	addwf	(_Buz1^(0+256)+8),f
 19042                           
 19043                           ;Buzzer_B1.c: 36: } else if (Buz1.BufferStatus2 == 0) {
 19044  144F  0008               	return
 19045  1450                     l100:	
 19046  1450  1A20               	btfsc	_Buz1^(0+256),4
 19047  1451  0008               	return
 19048                           
 19049                           ;Buzzer_B1.c: 37: Buz1.BufferStatus2 = 1;
 19050  1452  1620               	bsf	_Buz1^(0+256),4
 19051                           
 19052                           ;Buzzer_B1.c: 38: Buz1.CountBuffer2 = count;
 19053  1453  0020               	movlb	0	; select bank0
 19054  1454  082C               	movf	setBuz@count,w
 19055  1455  00AB               	movwf	??_setBuz
 19056  1456  082B               	movf	??_setBuz,w
 19057  1457  0022               	movlb	2	; select bank2
 19058  1458  00A5               	movwf	(_Buz1^(0+256)+5)
 19059                           
 19060                           ;Buzzer_B1.c: 39: Buz1.TimeValueBuffer2 = time;
 19061  1459  0020               	movlb	0	; select bank0
 19062  145A  082A               	movf	setBuz@time+1,w
 19063  145B  0022               	movlb	2	; select bank2
 19064  145C  01AB               	clrf	((_Buz1+1)^(0+256)+10)
 19065  145D  07AB               	addwf	((_Buz1+1)^(0+256)+10),f
 19066  145E  0020               	movlb	0	; select bank0
 19067  145F  0829               	movf	setBuz@time,w
 19068  1460  0022               	movlb	2	; select bank2
 19069  1461  01AA               	clrf	(_Buz1^(0+256)+10)
 19070  1462  07AA               	addwf	(_Buz1^(0+256)+10),f
 19071  1463  0008               	return
 19072  1464                     __end_of_setBuz:	
 19073                           
 19074                           	psect	text129
 19075  1361                     __ptext129:	
 19076 ;; *************** function ___awdiv *****************
 19077 ;; Defined at:
 19078 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\awdiv.c"
 19079 ;; Parameters:    Size  Location     Type
 19080 ;;  divisor         2    0[BANK0 ] int 
 19081 ;;  dividend        2    2[BANK0 ] int 
 19082 ;; Auto vars:     Size  Location     Type
 19083 ;;  quotient        2    7[BANK0 ] int 
 19084 ;;  sign            1    6[BANK0 ] unsigned char 
 19085 ;;  counter         1    5[BANK0 ] unsigned char 
 19086 ;; Return value:  Size  Location     Type
 19087 ;;                  2    0[BANK0 ] int 
 19088 ;; Registers used:
 19089 ;;		wreg, status,2, status,0
 19090 ;; Tracked objects:
 19091 ;;		On entry : 0/0
 19092 ;;		On exit  : 0/0
 19093 ;;		Unchanged: 0/0
 19094 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19095 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19096 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19097 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19098 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19099 ;;Total ram usage:        9 bytes
 19100 ;; Hardware stack levels used:    1
 19101 ;; Hardware stack levels required when called:    5
 19102 ;; This function calls:
 19103 ;;		Nothing
 19104 ;; This function is called by:
 19105 ;;		_setBuz
 19106 ;; This function uses a non-reentrant model
 19107 ;;
 19108                           
 19109                           
 19110                           ;psect for function ___awdiv
 19111  1361                     ___awdiv:	
 19112                           
 19113                           ;incstack = 0
 19114                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 19115  1361  0020               	movlb	0	; select bank0
 19116  1362  01A6               	clrf	___awdiv@sign
 19117  1363  1FA1               	btfss	___awdiv@divisor+1,7
 19118  1364  2B6C               	goto	l6356
 19119  1365  09A0               	comf	___awdiv@divisor,f
 19120  1366  09A1               	comf	___awdiv@divisor+1,f
 19121  1367  0AA0               	incf	___awdiv@divisor,f
 19122  1368  1903               	skipnz
 19123  1369  0AA1               	incf	___awdiv@divisor+1,f
 19124  136A  01A6               	clrf	___awdiv@sign
 19125  136B  0AA6               	incf	___awdiv@sign,f
 19126  136C                     l6356:	
 19127  136C  1FA3               	btfss	___awdiv@dividend+1,7
 19128  136D  2B77               	goto	l6362
 19129  136E  09A2               	comf	___awdiv@dividend,f
 19130  136F  09A3               	comf	___awdiv@dividend+1,f
 19131  1370  0AA2               	incf	___awdiv@dividend,f
 19132  1371  1903               	skipnz
 19133  1372  0AA3               	incf	___awdiv@dividend+1,f
 19134  1373  3001               	movlw	1
 19135  1374  00A4               	movwf	??___awdiv
 19136  1375  0824               	movf	??___awdiv,w
 19137  1376  06A6               	xorwf	___awdiv@sign,f
 19138  1377                     l6362:	
 19139  1377  01A7               	clrf	___awdiv@quotient
 19140  1378  01A8               	clrf	___awdiv@quotient+1
 19141  1379  0821               	movf	___awdiv@divisor+1,w
 19142  137A  0420               	iorwf	___awdiv@divisor,w
 19143  137B  1903               	skipnz
 19144  137C  2BA6               	goto	l6384
 19145  137D  01A5               	clrf	___awdiv@counter
 19146  137E  0AA5               	incf	___awdiv@counter,f
 19147  137F                     l6372:	
 19148  137F  1BA1               	btfsc	___awdiv@divisor+1,7
 19149  1380  2B8B               	goto	l6374
 19150  1381  3001               	movlw	1
 19151  1382                     u5275:	
 19152  1382  35A0               	lslf	___awdiv@divisor,f
 19153  1383  0DA1               	rlf	___awdiv@divisor+1,f
 19154  1384  0B89               	decfsz	9,f
 19155  1385  2B82               	goto	u5275
 19156  1386  3001               	movlw	1
 19157  1387  00A4               	movwf	??___awdiv
 19158  1388  0824               	movf	??___awdiv,w
 19159  1389  07A5               	addwf	___awdiv@counter,f
 19160  138A  2B7F               	goto	l6372
 19161  138B                     l6374:	
 19162  138B  3001               	movlw	1
 19163  138C                     u5295:	
 19164  138C  35A7               	lslf	___awdiv@quotient,f
 19165  138D  0DA8               	rlf	___awdiv@quotient+1,f
 19166  138E  0B89               	decfsz	9,f
 19167  138F  2B8C               	goto	u5295
 19168  1390  0821               	movf	___awdiv@divisor+1,w
 19169  1391  0223               	subwf	___awdiv@dividend+1,w
 19170  1392  1D03               	skipz
 19171  1393  2B96               	goto	u5305
 19172  1394  0820               	movf	___awdiv@divisor,w
 19173  1395  0222               	subwf	___awdiv@dividend,w
 19174  1396                     u5305:	
 19175  1396  1C03               	skipc
 19176  1397  2B9D               	goto	l6380
 19177  1398  0820               	movf	___awdiv@divisor,w
 19178  1399  02A2               	subwf	___awdiv@dividend,f
 19179  139A  0821               	movf	___awdiv@divisor+1,w
 19180  139B  3BA3               	subwfb	___awdiv@dividend+1,f
 19181  139C  1427               	bsf	___awdiv@quotient,0
 19182  139D                     l6380:	
 19183  139D  3001               	movlw	1
 19184  139E                     u5315:	
 19185  139E  36A1               	lsrf	___awdiv@divisor+1,f
 19186  139F  0CA0               	rrf	___awdiv@divisor,f
 19187  13A0  0B89               	decfsz	9,f
 19188  13A1  2B9E               	goto	u5315
 19189  13A2  3001               	movlw	1
 19190  13A3  02A5               	subwf	___awdiv@counter,f
 19191  13A4  1D03               	btfss	3,2
 19192  13A5  2B8B               	goto	l6374
 19193  13A6                     l6384:	
 19194  13A6  0826               	movf	___awdiv@sign,w
 19195  13A7  1903               	btfsc	3,2
 19196  13A8  2BAE               	goto	l6388
 19197  13A9  09A7               	comf	___awdiv@quotient,f
 19198  13AA  09A8               	comf	___awdiv@quotient+1,f
 19199  13AB  0AA7               	incf	___awdiv@quotient,f
 19200  13AC  1903               	skipnz
 19201  13AD  0AA8               	incf	___awdiv@quotient+1,f
 19202  13AE                     l6388:	
 19203  13AE  0828               	movf	___awdiv@quotient+1,w
 19204  13AF  01A1               	clrf	?___awdiv+1
 19205  13B0  07A1               	addwf	?___awdiv+1,f
 19206  13B1  0827               	movf	___awdiv@quotient,w
 19207  13B2  01A0               	clrf	?___awdiv
 19208  13B3  07A0               	addwf	?___awdiv,f
 19209  13B4  0008               	return
 19210  13B5                     __end_of___awdiv:	
 19211                           
 19212                           	psect	text130
 19213  07C6                     __ptext130:	
 19214 ;; *************** function _setDimmerLights_SwOff *****************
 19215 ;; Defined at:
 19216 ;;		line 732 in file "../src/Dimmer_B1.c"
 19217 ;; Parameters:    Size  Location     Type
 19218 ;;  sw              1    wreg     unsigned char 
 19219 ;; Auto vars:     Size  Location     Type
 19220 ;;  sw              1    2[BANK0 ] unsigned char 
 19221 ;; Return value:  Size  Location     Type
 19222 ;;		None               void
 19223 ;; Registers used:
 19224 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19225 ;; Tracked objects:
 19226 ;;		On entry : 0/0
 19227 ;;		On exit  : 0/0
 19228 ;;		Unchanged: 0/0
 19229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19230 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19231 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19232 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19233 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19234 ;;Total ram usage:        1 bytes
 19235 ;; Hardware stack levels used:    1
 19236 ;; Hardware stack levels required when called:    6
 19237 ;; This function calls:
 19238 ;;		_DimmerLights_SelectPointer
 19239 ;; This function is called by:
 19240 ;;		_DlyOff_Main
 19241 ;;		_setControl_Lights_Table
 19242 ;;		_setRFSW_Control
 19243 ;;		_setRFSW_AdjControl
 19244 ;;		_setSw_Main
 19245 ;;		_Exception_Main
 19246 ;; This function uses a non-reentrant model
 19247 ;;
 19248                           
 19249                           
 19250                           ;psect for function _setDimmerLights_SwOff
 19251  07C6                     _setDimmerLights_SwOff:	
 19252                           
 19253                           ;incstack = 0
 19254                           ; Regs used in _setDimmerLights_SwOff: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack
      +                          ]
 19255                           ;setDimmerLights_SwOff@sw stored from wreg
 19256  07C6  0020               	movlb	0	; select bank0
 19257  07C7  00A2               	movwf	setDimmerLights_SwOff@sw
 19258                           
 19259                           ;Dimmer_B1.c: 733: DimmerLights_SelectPointer(sw);
 19260  07C8  0822               	movf	setDimmerLights_SwOff@sw,w
 19261  07C9  319B  23C6  3187   	fcall	_DimmerLights_SelectPointer
 19262                           
 19263                           ;Dimmer_B1.c: 735: if (DimmerLights->SwFlag == 1) {
 19264  07CC  0021               	movlb	1	; select bank1
 19265  07CD  0856               	movf	_DimmerLights^(0+128),w
 19266  07CE  0086               	movwf	6
 19267  07CF  3001               	movlw	1	; select bank2/3
 19268  07D0  0087               	movwf	7
 19269  07D1  1C01               	btfss	1,0
 19270  07D2  0008               	return
 19271                           
 19272                           ;Dimmer_B1.c: 736: DimmerLights->SwFlag = 0;
 19273  07D3  0856               	movf	_DimmerLights^(0+128),w
 19274  07D4  0086               	movwf	6
 19275  07D5  3001               	movlw	1	; select bank2/3
 19276  07D6  0087               	movwf	7
 19277  07D7  1001               	bcf	1,0
 19278                           
 19279                           ;Dimmer_B1.c: 737: if (DimmerLights->Status == 1) {
 19280  07D8  0A56               	incf	_DimmerLights^(0+128),w
 19281  07D9  0086               	movwf	6
 19282  07DA  3001               	movlw	1	; select bank2/3
 19283  07DB  0087               	movwf	7
 19284  07DC  1C01               	btfss	1,0
 19285  07DD  2FF4               	goto	l6762
 19286                           
 19287                           ;Dimmer_B1.c: 738: if (DimmerLights->DimmingSwFlag == 1) {
 19288  07DE  0856               	movf	_DimmerLights^(0+128),w
 19289  07DF  0086               	movwf	6
 19290  07E0  3001               	movlw	1	; select bank2/3
 19291  07E1  0087               	movwf	7
 19292  07E2  1D81               	btfss	1,3
 19293  07E3  0008               	return
 19294                           
 19295                           ;Dimmer_B1.c: 739: DimmerLights->DimmingSwFlag = 0;
 19296  07E4  0856               	movf	_DimmerLights^(0+128),w
 19297  07E5  0086               	movwf	6
 19298  07E6  3001               	movlw	1	; select bank2/3
 19299  07E7  0087               	movwf	7
 19300  07E8  1181               	bcf	1,3
 19301                           
 19302                           ;Dimmer_B1.c: 741: DimmerLights->DimmingTrigger = 1;
 19303  07E9  0856               	movf	_DimmerLights^(0+128),w
 19304  07EA  0086               	movwf	6
 19305  07EB  3001               	movlw	1	; select bank2/3
 19306  07EC  0087               	movwf	7
 19307  07ED  1601               	bsf	1,4
 19308                           
 19309                           ;Dimmer_B1.c: 742: DimmerLights->DimmingSwitch = 0;
 19310  07EE  0856               	movf	_DimmerLights^(0+128),w
 19311  07EF  0086               	movwf	6
 19312  07F0  3001               	movlw	1	; select bank2/3
 19313  07F1  0087               	movwf	7
 19314  07F2  1281               	bcf	1,5
 19315                           
 19316                           ;Dimmer_B1.c: 743: }
 19317                           ;Dimmer_B1.c: 744: } else {
 19318  07F3  0008               	return
 19319  07F4                     l6762:	
 19320                           
 19321                           ;Dimmer_B1.c: 746: DimmerLights->Trigger = 1;
 19322  07F4  0856               	movf	_DimmerLights^(0+128),w
 19323  07F5  0086               	movwf	6
 19324  07F6  3001               	movlw	1	; select bank2/3
 19325  07F7  0087               	movwf	7
 19326  07F8  1481               	bsf	1,1
 19327                           
 19328                           ;Dimmer_B1.c: 747: DimmerLights->Switch = 0;
 19329  07F9  0856               	movf	_DimmerLights^(0+128),w
 19330  07FA  0086               	movwf	6
 19331  07FB  3001               	movlw	1	; select bank2/3
 19332  07FC  0087               	movwf	7
 19333  07FD  1101               	bcf	1,2
 19334  07FE  0008               	return
 19335  07FF                     __end_of_setDimmerLights_SwOff:	
 19336                           
 19337                           	psect	text131
 19338  19FD                     __ptext131:	
 19339 ;; *************** function _getDimmerLights_Status *****************
 19340 ;; Defined at:
 19341 ;;		line 1073 in file "../src/Dimmer_B1.c"
 19342 ;; Parameters:    Size  Location     Type
 19343 ;;  lights          1    wreg     unsigned char 
 19344 ;; Auto vars:     Size  Location     Type
 19345 ;;  lights          1    2[BANK0 ] unsigned char 
 19346 ;;  status          1    3[BANK0 ] unsigned char 
 19347 ;; Return value:  Size  Location     Type
 19348 ;;                  1    wreg      unsigned char 
 19349 ;; Registers used:
 19350 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19351 ;; Tracked objects:
 19352 ;;		On entry : 0/0
 19353 ;;		On exit  : 0/0
 19354 ;;		Unchanged: 0/0
 19355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19356 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19357 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19359 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19360 ;;Total ram usage:        2 bytes
 19361 ;; Hardware stack levels used:    1
 19362 ;; Hardware stack levels required when called:    6
 19363 ;; This function calls:
 19364 ;;		_DimmerLights_SelectPointer
 19365 ;; This function is called by:
 19366 ;;		_DlyOff_Main
 19367 ;;		_setControl_Lights_Table
 19368 ;;		_setRFSW_Control
 19369 ;;		_setRFSW_AdjControl
 19370 ;;		_Exception_Main
 19371 ;; This function uses a non-reentrant model
 19372 ;;
 19373                           
 19374                           
 19375                           ;psect for function _getDimmerLights_Status
 19376  19FD                     _getDimmerLights_Status:	
 19377                           
 19378                           ;incstack = 0
 19379                           ; Regs used in _getDimmerLights_Status: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 19380                           ;getDimmerLights_Status@lights stored from wreg
 19381  19FD  0020               	movlb	0	; select bank0
 19382  19FE  00A2               	movwf	getDimmerLights_Status@lights
 19383                           
 19384                           ;Dimmer_B1.c: 1074: DimmerLights_SelectPointer(lights);
 19385  19FF  0822               	movf	getDimmerLights_Status@lights,w
 19386  1A00  319B  23C6         	fcall	_DimmerLights_SelectPointer
 19387                           
 19388                           ;Dimmer_B1.c: 1075: char status = DimmerLights->Status == 1 ? 1 : 0;
 19389  1A02  0021               	movlb	1	; select bank1
 19390  1A03  0A56               	incf	_DimmerLights^(0+128),w
 19391  1A04  0086               	movwf	6
 19392  1A05  3001               	movlw	1	; select bank2/3
 19393  1A06  0087               	movwf	7
 19394  1A07  3000               	movlw	0
 19395  1A08  1801               	btfsc	1,0
 19396  1A09  3001               	movlw	1
 19397  1A0A  0020               	movlb	0	; select bank0
 19398  1A0B  00A3               	movwf	getDimmerLights_Status@status
 19399                           
 19400                           ;Dimmer_B1.c: 1076: return status;
 19401  1A0C  0823               	movf	getDimmerLights_Status@status,w
 19402  1A0D  0008               	return
 19403  1A0E                     __end_of_getDimmerLights_Status:	
 19404                           
 19405                           	psect	text132
 19406  1BC6                     __ptext132:	
 19407 ;; *************** function _DimmerLights_SelectPointer *****************
 19408 ;; Defined at:
 19409 ;;		line 614 in file "../src/Dimmer_B1.c"
 19410 ;; Parameters:    Size  Location     Type
 19411 ;;  lights          1    wreg     unsigned char 
 19412 ;; Auto vars:     Size  Location     Type
 19413 ;;  lights          1    1[BANK0 ] unsigned char 
 19414 ;; Return value:  Size  Location     Type
 19415 ;;		None               void
 19416 ;; Registers used:
 19417 ;;		wreg
 19418 ;; Tracked objects:
 19419 ;;		On entry : 0/0
 19420 ;;		On exit  : 0/0
 19421 ;;		Unchanged: 0/0
 19422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19424 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19425 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19426 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19427 ;;Total ram usage:        2 bytes
 19428 ;; Hardware stack levels used:    1
 19429 ;; Hardware stack levels required when called:    5
 19430 ;; This function calls:
 19431 ;;		Nothing
 19432 ;; This function is called by:
 19433 ;;		_setDimmerLights_SwOn
 19434 ;;		_setDimmerLights_SwOff
 19435 ;;		_setDimmerLights_DimmingOn
 19436 ;;		_setDimmerLights_Main
 19437 ;;		_getDimmerLights_Status
 19438 ;;		_setDimmerLights_DimmingRun
 19439 ;;		_setDimmerLights_Status
 19440 ;; This function uses a non-reentrant model
 19441 ;;
 19442                           
 19443                           
 19444                           ;psect for function _DimmerLights_SelectPointer
 19445  1BC6                     _DimmerLights_SelectPointer:	
 19446                           
 19447                           ;incstack = 0
 19448                           ; Regs used in _DimmerLights_SelectPointer: [wreg]
 19449                           ;DimmerLights_SelectPointer@lights stored from wreg
 19450  1BC6  0020               	movlb	0	; select bank0
 19451  1BC7  00A1               	movwf	DimmerLights_SelectPointer@lights
 19452                           
 19453                           ;Dimmer_B1.c: 616: if (lights == 1) {
 19454  1BC8  0821               	movf	DimmerLights_SelectPointer@lights,w
 19455  1BC9  3A01               	xorlw	1
 19456  1BCA  1D03               	skipz
 19457  1BCB  2BD2               	goto	l6434
 19458                           
 19459                           ;Dimmer_B1.c: 617: DimmerLights = &DimmerLights1;
 19460  1BCC  3067               	movlw	_DimmerLights1& (0+255)
 19461  1BCD  00A0               	movwf	??_DimmerLights_SelectPointer
 19462  1BCE  0820               	movf	??_DimmerLights_SelectPointer,w
 19463  1BCF  0021               	movlb	1	; select bank1
 19464  1BD0  00D6               	movwf	_DimmerLights^(0+128)
 19465                           
 19466                           ;Dimmer_B1.c: 618: }
 19467  1BD1  0008               	return
 19468  1BD2                     l6434:	
 19469                           
 19470                           ;Dimmer_B1.c: 621: else if (lights == 2) {
 19471  1BD2  0020               	movlb	0	; select bank0
 19472  1BD3  0821               	movf	DimmerLights_SelectPointer@lights,w
 19473  1BD4  3A02               	xorlw	2
 19474  1BD5  1D03               	skipz
 19475  1BD6  0008               	return
 19476                           
 19477                           ;Dimmer_B1.c: 622: DimmerLights = &DimmerLights2;
 19478  1BD7  30D0               	movlw	_DimmerLights2& (0+255)
 19479  1BD8  00A0               	movwf	??_DimmerLights_SelectPointer
 19480  1BD9  0820               	movf	??_DimmerLights_SelectPointer,w
 19481  1BDA  0021               	movlb	1	; select bank1
 19482  1BDB  00D6               	movwf	_DimmerLights^(0+128)
 19483  1BDC  0008               	return
 19484  1BDD                     __end_of_DimmerLights_SelectPointer:	
 19485                           
 19486                           	psect	text133
 19487  18FF                     __ptext133:	
 19488 ;; *************** function _DelayOff_Initialization *****************
 19489 ;; Defined at:
 19490 ;;		line 26 in file "../src/DelayOff_B1.c"
 19491 ;; Parameters:    Size  Location     Type
 19492 ;;		None
 19493 ;; Auto vars:     Size  Location     Type
 19494 ;;		None
 19495 ;; Return value:  Size  Location     Type
 19496 ;;		None               void
 19497 ;; Registers used:
 19498 ;;		wreg, status,2, status,0, pclath, cstack
 19499 ;; Tracked objects:
 19500 ;;		On entry : 0/0
 19501 ;;		On exit  : 0/0
 19502 ;;		Unchanged: 0/0
 19503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19504 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19505 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19506 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19507 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19508 ;;Total ram usage:        0 bytes
 19509 ;; Hardware stack levels used:    1
 19510 ;; Hardware stack levels required when called:    7
 19511 ;; This function calls:
 19512 ;;		_DlyOff_Initialization
 19513 ;; This function is called by:
 19514 ;;		_main
 19515 ;; This function uses a non-reentrant model
 19516 ;;
 19517                           
 19518                           
 19519                           ;psect for function _DelayOff_Initialization
 19520  18FF                     _DelayOff_Initialization:	
 19521                           
 19522                           ;DelayOff_B1.c: 28: DlyOff_Initialization(1);
 19523                           
 19524                           ;incstack = 0
 19525                           ; Regs used in _DelayOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 19526  18FF  3001               	movlw	1
 19527  1900  3198  20E6  3198   	fcall	_DlyOff_Initialization
 19528                           
 19529                           ;DelayOff_B1.c: 32: DlyOff_Initialization(2);
 19530  1903  3002               	movlw	2
 19531  1904  3198  20E6         	fcall	_DlyOff_Initialization
 19532  1906  0008               	return
 19533  1907                     __end_of_DelayOff_Initialization:	
 19534                           
 19535                           	psect	text134
 19536  18E6                     __ptext134:	
 19537 ;; *************** function _DlyOff_Initialization *****************
 19538 ;; Defined at:
 19539 ;;		line 56 in file "../src/DelayOff_B1.c"
 19540 ;; Parameters:    Size  Location     Type
 19541 ;;  sw              1    wreg     unsigned char 
 19542 ;; Auto vars:     Size  Location     Type
 19543 ;;  sw              1    2[BANK0 ] unsigned char 
 19544 ;; Return value:  Size  Location     Type
 19545 ;;		None               void
 19546 ;; Registers used:
 19547 ;;		wreg, status,2, status,0, pclath, cstack
 19548 ;; Tracked objects:
 19549 ;;		On entry : 0/0
 19550 ;;		On exit  : 0/0
 19551 ;;		Unchanged: 0/0
 19552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19554 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19556 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19557 ;;Total ram usage:        1 bytes
 19558 ;; Hardware stack levels used:    1
 19559 ;; Hardware stack levels required when called:    6
 19560 ;; This function calls:
 19561 ;;		_DelayOffPointSelect
 19562 ;; This function is called by:
 19563 ;;		_DelayOff_Initialization
 19564 ;; This function uses a non-reentrant model
 19565 ;;
 19566                           
 19567                           
 19568                           ;psect for function _DlyOff_Initialization
 19569  18E6                     _DlyOff_Initialization:	
 19570                           
 19571                           ;incstack = 0
 19572                           ; Regs used in _DlyOff_Initialization: [wreg+status,2+status,0+pclath+cstack]
 19573                           ;DlyOff_Initialization@sw stored from wreg
 19574  18E6  0020               	movlb	0	; select bank0
 19575  18E7  00A2               	movwf	DlyOff_Initialization@sw
 19576                           
 19577                           ;DelayOff_B1.c: 57: DelayOffPointSelect(sw);
 19578  18E8  0822               	movf	DlyOff_Initialization@sw,w
 19579  18E9  319B  23AF         	fcall	_DelayOffPointSelect
 19580  18EB  0008               	return
 19581  18EC                     __end_of_DlyOff_Initialization:	
 19582                           
 19583                           	psect	text135
 19584  1BAF                     __ptext135:	
 19585 ;; *************** function _DelayOffPointSelect *****************
 19586 ;; Defined at:
 19587 ;;		line 7 in file "../src/DelayOff_B1.c"
 19588 ;; Parameters:    Size  Location     Type
 19589 ;;  sw              1    wreg     unsigned char 
 19590 ;; Auto vars:     Size  Location     Type
 19591 ;;  sw              1    1[BANK0 ] unsigned char 
 19592 ;; Return value:  Size  Location     Type
 19593 ;;		None               void
 19594 ;; Registers used:
 19595 ;;		wreg
 19596 ;; Tracked objects:
 19597 ;;		On entry : 0/0
 19598 ;;		On exit  : 0/0
 19599 ;;		Unchanged: 0/0
 19600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19602 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19603 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19604 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19605 ;;Total ram usage:        2 bytes
 19606 ;; Hardware stack levels used:    1
 19607 ;; Hardware stack levels required when called:    5
 19608 ;; This function calls:
 19609 ;;		Nothing
 19610 ;; This function is called by:
 19611 ;;		_DlyOff_Initialization
 19612 ;;		_DlyOff_Main
 19613 ;;		_setDelayOff_GO
 19614 ;;		_getDelayOff_GO
 19615 ;; This function uses a non-reentrant model
 19616 ;;
 19617                           
 19618                           
 19619                           ;psect for function _DelayOffPointSelect
 19620  1BAF                     _DelayOffPointSelect:	
 19621                           
 19622                           ;incstack = 0
 19623                           ; Regs used in _DelayOffPointSelect: [wreg]
 19624                           ;DelayOffPointSelect@sw stored from wreg
 19625  1BAF  0020               	movlb	0	; select bank0
 19626  1BB0  00A1               	movwf	DelayOffPointSelect@sw
 19627                           
 19628                           ;DelayOff_B1.c: 9: if (sw == 1) {
 19629  1BB1  0821               	movf	DelayOffPointSelect@sw,w
 19630  1BB2  3A01               	xorlw	1
 19631  1BB3  1D03               	skipz
 19632  1BB4  2BBB               	goto	l6424
 19633                           
 19634                           ;DelayOff_B1.c: 10: DelayOff = &DlySw1;
 19635  1BB5  30D8               	movlw	_DlySw1& (0+255)
 19636  1BB6  00A0               	movwf	??_DelayOffPointSelect
 19637  1BB7  0820               	movf	??_DelayOffPointSelect,w
 19638  1BB8  0021               	movlb	1	; select bank1
 19639  1BB9  00D5               	movwf	_DelayOff^(0+128)
 19640                           
 19641                           ;DelayOff_B1.c: 11: }
 19642  1BBA  0008               	return
 19643  1BBB                     l6424:	
 19644                           
 19645                           ;DelayOff_B1.c: 14: else if (sw == 2) {
 19646  1BBB  0020               	movlb	0	; select bank0
 19647  1BBC  0821               	movf	DelayOffPointSelect@sw,w
 19648  1BBD  3A02               	xorlw	2
 19649  1BBE  1D03               	skipz
 19650  1BBF  0008               	return
 19651                           
 19652                           ;DelayOff_B1.c: 15: DelayOff = &DlySw2;
 19653  1BC0  30DD               	movlw	_DlySw2& (0+255)
 19654  1BC1  00A0               	movwf	??_DelayOffPointSelect
 19655  1BC2  0820               	movf	??_DelayOffPointSelect,w
 19656  1BC3  0021               	movlb	1	; select bank1
 19657  1BC4  00D5               	movwf	_DelayOff^(0+128)
 19658  1BC5  0008               	return
 19659  1BC6                     __end_of_DelayOffPointSelect:	
 19660                           
 19661                           	psect	text136
 19662  12C4                     __ptext136:	
 19663 ;; *************** function _Buzzer_Main *****************
 19664 ;; Defined at:
 19665 ;;		line 46 in file "../src/Buzzer_B1.c"
 19666 ;; Parameters:    Size  Location     Type
 19667 ;;		None
 19668 ;; Auto vars:     Size  Location     Type
 19669 ;;		None
 19670 ;; Return value:  Size  Location     Type
 19671 ;;		None               void
 19672 ;; Registers used:
 19673 ;;		wreg, status,2, status,0
 19674 ;; Tracked objects:
 19675 ;;		On entry : 0/0
 19676 ;;		On exit  : 0/0
 19677 ;;		Unchanged: 0/0
 19678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19680 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19681 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19682 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19683 ;;Total ram usage:        1 bytes
 19684 ;; Hardware stack levels used:    1
 19685 ;; Hardware stack levels required when called:    5
 19686 ;; This function calls:
 19687 ;;		Nothing
 19688 ;; This function is called by:
 19689 ;;		_main
 19690 ;; This function uses a non-reentrant model
 19691 ;;
 19692                           
 19693                           
 19694                           ;psect for function _Buzzer_Main
 19695  12C4                     _Buzzer_Main:	
 19696                           
 19697                           ;Buzzer_B1.c: 47: if (Buz1.GO == 1) {
 19698                           
 19699                           ;incstack = 0
 19700                           ; Regs used in _Buzzer_Main: [wreg+status,2+status,0]
 19701  12C4  0022               	movlb	2	; select bank2
 19702  12C5  1CA0               	btfss	_Buz1^(0+256),1
 19703  12C6  0008               	return
 19704                           
 19705                           ;Buzzer_B1.c: 48: Buz1.Counter++;
 19706  12C7  3001               	movlw	1
 19707  12C8  07A1               	addwf	(_Buz1^(0+256)+1),f
 19708  12C9  3000               	movlw	0
 19709  12CA  3DA2               	addwfc	((_Buz1+1)^(0+256)+1),f
 19710                           
 19711                           ;Buzzer_B1.c: 49: if (Buz1.Counter >= Buz1.TimeValue) {
 19712  12CB  0827               	movf	((_Buz1+1)^(0+256)+6),w
 19713  12CC  0222               	subwf	((_Buz1+1)^(0+256)+1),w
 19714  12CD  1D03               	skipz
 19715  12CE  2AD1               	goto	u9185
 19716  12CF  0826               	movf	(_Buz1^(0+256)+6),w
 19717  12D0  0221               	subwf	(_Buz1^(0+256)+1),w
 19718  12D1                     u9185:	
 19719  12D1  1C03               	skipc
 19720  12D2  0008               	return
 19721                           
 19722                           ;Buzzer_B1.c: 50: Buz1.Counter = 0;
 19723  12D3  01A1               	clrf	(_Buz1^(0+256)+1)
 19724  12D4  01A2               	clrf	((_Buz1+1)^(0+256)+1)
 19725                           
 19726                           ;Buzzer_B1.c: 51: Buz1.Switch = (RB3 == 1) ? 1 : 0;
 19727  12D5  12A0               	bcf	_Buz1^(0+256),5
 19728  12D6  0020               	movlb	0	; select bank0
 19729  12D7  1D8D               	btfss	13,3	;volatile
 19730  12D8  2ADB               	goto	l8570
 19731  12D9  0022               	movlb	2	; select bank2
 19732  12DA  16A0               	bsf	_Buz1^(0+256),5
 19733  12DB                     l8570:	
 19734                           
 19735                           ;Buzzer_B1.c: 52: if (Buz1.Switch == 0) {
 19736  12DB  0022               	movlb	2	; select bank2
 19737  12DC  1AA0               	btfsc	_Buz1^(0+256),5
 19738  12DD  2B07               	goto	l108
 19739                           
 19740                           ;Buzzer_B1.c: 53: if (Buz1.Count == 0) {
 19741  12DE  08A3               	movf	(_Buz1^(0+256)+3),f
 19742  12DF  1D03               	skipz
 19743  12E0  2B03               	goto	l109
 19744                           
 19745                           ;Buzzer_B1.c: 54: if (Buz1.BufferStatus1 == 1) {
 19746  12E1  1DA0               	btfss	_Buz1^(0+256),3
 19747  12E2  2AF1               	goto	l110
 19748                           
 19749                           ;Buzzer_B1.c: 55: Buz1.BufferStatus1 = 0;
 19750  12E3  11A0               	bcf	_Buz1^(0+256),3
 19751                           
 19752                           ;Buzzer_B1.c: 56: Buz1.Count = Buz1.CountBuffer1;
 19753  12E4  0824               	movf	(_Buz1^(0+256)+4),w
 19754  12E5  0020               	movlb	0	; select bank0
 19755  12E6  00A0               	movwf	??_Buzzer_Main
 19756  12E7  0820               	movf	??_Buzzer_Main,w
 19757  12E8  0022               	movlb	2	; select bank2
 19758  12E9  00A3               	movwf	(_Buz1^(0+256)+3)
 19759                           
 19760                           ;Buzzer_B1.c: 57: Buz1.TimeValue = Buz1.TimeValueBuffer1;
 19761  12EA  0829               	movf	((_Buz1+1)^(0+256)+8),w
 19762  12EB  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 19763  12EC  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 19764  12ED  0828               	movf	(_Buz1^(0+256)+8),w
 19765  12EE  01A6               	clrf	(_Buz1^(0+256)+6)
 19766  12EF  07A6               	addwf	(_Buz1^(0+256)+6),f
 19767                           
 19768                           ;Buzzer_B1.c: 58: } else if (Buz1.BufferStatus2 == 1) {
 19769  12F0  0008               	return
 19770  12F1                     l110:	
 19771  12F1  1E20               	btfss	_Buz1^(0+256),4
 19772  12F2  2B01               	goto	l112
 19773                           
 19774                           ;Buzzer_B1.c: 59: Buz1.BufferStatus2 = 0;
 19775  12F3  1220               	bcf	_Buz1^(0+256),4
 19776                           
 19777                           ;Buzzer_B1.c: 60: Buz1.Count = Buz1.CountBuffer2;
 19778  12F4  0825               	movf	(_Buz1^(0+256)+5),w
 19779  12F5  0020               	movlb	0	; select bank0
 19780  12F6  00A0               	movwf	??_Buzzer_Main
 19781  12F7  0820               	movf	??_Buzzer_Main,w
 19782  12F8  0022               	movlb	2	; select bank2
 19783  12F9  00A3               	movwf	(_Buz1^(0+256)+3)
 19784                           
 19785                           ;Buzzer_B1.c: 61: Buz1.TimeValue = Buz1.TimeValueBuffer2;
 19786  12FA  082B               	movf	((_Buz1+1)^(0+256)+10),w
 19787  12FB  01A7               	clrf	((_Buz1+1)^(0+256)+6)
 19788  12FC  07A7               	addwf	((_Buz1+1)^(0+256)+6),f
 19789  12FD  082A               	movf	(_Buz1^(0+256)+10),w
 19790  12FE  01A6               	clrf	(_Buz1^(0+256)+6)
 19791  12FF  07A6               	addwf	(_Buz1^(0+256)+6),f
 19792                           
 19793                           ;Buzzer_B1.c: 62: } else {
 19794  1300  0008               	return
 19795  1301                     l112:	
 19796                           
 19797                           ;Buzzer_B1.c: 63: Buz1.GO = 0;
 19798  1301  10A0               	bcf	_Buz1^(0+256),1
 19799                           
 19800                           ;Buzzer_B1.c: 64: }
 19801                           ;Buzzer_B1.c: 65: } else {
 19802  1302  0008               	return
 19803  1303                     l109:	
 19804                           
 19805                           ;Buzzer_B1.c: 66: Buz1.Switch = 1;
 19806  1303  16A0               	bsf	_Buz1^(0+256),5
 19807                           
 19808                           ;Buzzer_B1.c: 68: RB3 = 1;
 19809  1304  0020               	movlb	0	; select bank0
 19810  1305  158D               	bsf	13,3	;volatile
 19811                           
 19812                           ;Buzzer_B1.c: 69: }
 19813                           ;Buzzer_B1.c: 70: } else {
 19814  1306  0008               	return
 19815  1307                     l108:	
 19816                           
 19817                           ;Buzzer_B1.c: 71: Buz1.Switch = 0;
 19818  1307  12A0               	bcf	_Buz1^(0+256),5
 19819                           
 19820                           ;Buzzer_B1.c: 73: RB3 = 0;
 19821  1308  0020               	movlb	0	; select bank0
 19822  1309  118D               	bcf	13,3	;volatile
 19823                           
 19824                           ;Buzzer_B1.c: 75: Buz1.Count--;
 19825  130A  3001               	movlw	1
 19826  130B  0022               	movlb	2	; select bank2
 19827  130C  02A3               	subwf	(_Buz1^(0+256)+3),f
 19828  130D  0008               	return
 19829  130E                     __end_of_Buzzer_Main:	
 19830                           
 19831                           	psect	text137
 19832  18BB                     __ptext137:	
 19833 ;; *************** function _Buzzer_Initialization *****************
 19834 ;; Defined at:
 19835 ;;		line 11 in file "../src/Buzzer_B1.c"
 19836 ;; Parameters:    Size  Location     Type
 19837 ;;		None
 19838 ;; Auto vars:     Size  Location     Type
 19839 ;;		None
 19840 ;; Return value:  Size  Location     Type
 19841 ;;		None               void
 19842 ;; Registers used:
 19843 ;;		None
 19844 ;; Tracked objects:
 19845 ;;		On entry : 0/0
 19846 ;;		On exit  : 0/0
 19847 ;;		Unchanged: 0/0
 19848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19849 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19850 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19852 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19853 ;;Total ram usage:        0 bytes
 19854 ;; Hardware stack levels used:    1
 19855 ;; Hardware stack levels required when called:    5
 19856 ;; This function calls:
 19857 ;;		Nothing
 19858 ;; This function is called by:
 19859 ;;		_main
 19860 ;; This function uses a non-reentrant model
 19861 ;;
 19862                           
 19863                           
 19864                           ;psect for function _Buzzer_Initialization
 19865  18BB                     _Buzzer_Initialization:	
 19866                           
 19867                           ;Buzzer_B1.c: 13: Buz1.Enable = 1;
 19868                           
 19869                           ;incstack = 0
 19870                           ; Regs used in _Buzzer_Initialization: []
 19871  18BB  0022               	movlb	2	; select bank2
 19872  18BC  1420               	bsf	_Buz1^(0+256),0
 19873  18BD  0008               	return
 19874  18BE                     __end_of_Buzzer_Initialization:	
 19875                           
 19876                           	psect	intentry
 19877  0004                     __pintentry:	
 19878 ;; *************** function _ISR *****************
 19879 ;; Defined at:
 19880 ;;		line 116 in file "../src/MCU_B1.c"
 19881 ;; Parameters:    Size  Location     Type
 19882 ;;		None
 19883 ;; Auto vars:     Size  Location     Type
 19884 ;;		None
 19885 ;; Return value:  Size  Location     Type
 19886 ;;		None               void
 19887 ;; Registers used:
 19888 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19889 ;; Tracked objects:
 19890 ;;		On entry : 0/0
 19891 ;;		On exit  : 0/0
 19892 ;;		Unchanged: 0/0
 19893 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19894 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19895 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19896 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19897 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19898 ;;Total ram usage:        1 bytes
 19899 ;; Hardware stack levels used:    1
 19900 ;; Hardware stack levels required when called:    4
 19901 ;; This function calls:
 19902 ;;		_IOC_ISR
 19903 ;;		_TMR1_ISR
 19904 ;; This function is called by:
 19905 ;;		Interrupt level 1
 19906 ;; This function uses a non-reentrant model
 19907 ;;
 19908                           
 19909  0004                     _ISR:	
 19910                           
 19911                           ;incstack = 0
 19912                           ; Regs used in _ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19913  0004  147E               	bsf	126,0	;set compiler interrupt flag
 19914  0005  3180               	pagesel	$
 19915  0006  0020               	movlb	0	; select bank0
 19916  0007  087F               	movf	127,w
 19917  0008  00FC               	movwf	??_ISR
 19918                           
 19919                           ;MCU_B1.c: 125: if (TMR1IE == 1 && TMR1IF == 1) {
 19920  0009  0021               	movlb	1	; select bank1
 19921  000A  1C11               	btfss	17,0	;volatile
 19922  000B  2812               	goto	i1l9156
 19923  000C  0020               	movlb	0	; select bank0
 19924  000D  1C11               	btfss	17,0	;volatile
 19925  000E  2812               	goto	i1l9156
 19926                           
 19927                           ;MCU_B1.c: 126: TMR1_ISR();
 19928  000F  319E  2611  3180   	fcall	_TMR1_ISR
 19929  0012                     i1l9156:	
 19930                           
 19931                           ;MCU_B1.c: 127: }
 19932                           ;MCU_B1.c: 138: if (IOCIE == 1 && IOCIF == 1 && IOCBF2 == 1) {
 19933  0012  198B               	btfsc	11,3	;volatile
 19934  0013  1C0B               	btfss	11,0	;volatile
 19935  0014  281A               	goto	i1l1405
 19936  0015  0027               	movlb	7	; select bank7
 19937  0016  1D16               	btfss	22,2	;volatile
 19938  0017  281A               	goto	i1l1405
 19939                           
 19940                           ;MCU_B1.c: 139: IOC_ISR();
 19941  0018  3199  2175         	fcall	_IOC_ISR
 19942  001A                     i1l1405:	
 19943                           ;MCU_B1.c: 140: }
 19944                           ;MCU_B1.c: 148: return;
 19945                           
 19946  001A  087C               	movf	??_ISR,w
 19947  001B  0020               	movlb	0	; select bank0
 19948  001C  00FF               	movwf	127
 19949  001D  107E               	bcf	126,0	;clear compiler interrupt flag
 19950  001E  0009               	retfie
 19951  001F                     __end_of_ISR:	
 19952                           
 19953                           	psect	text139
 19954  1E11                     __ptext139:	
 19955 ;; *************** function _TMR1_ISR *****************
 19956 ;; Defined at:
 19957 ;;		line 236 in file "../src/MCU_B1.c"
 19958 ;; Parameters:    Size  Location     Type
 19959 ;;		None
 19960 ;; Auto vars:     Size  Location     Type
 19961 ;;		None
 19962 ;; Return value:  Size  Location     Type
 19963 ;;		None               void
 19964 ;; Registers used:
 19965 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19966 ;; Tracked objects:
 19967 ;;		On entry : 0/0
 19968 ;;		On exit  : 0/0
 19969 ;;		Unchanged: 0/0
 19970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 19971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19972 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19974 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 19975 ;;Total ram usage:        0 bytes
 19976 ;; Hardware stack levels used:    1
 19977 ;; Hardware stack levels required when called:    1
 19978 ;; This function calls:
 19979 ;;		_DimmerLights_TMR_1
 19980 ;;		_DimmerLights_TMR_2
 19981 ;; This function is called by:
 19982 ;;		_ISR
 19983 ;; This function uses a non-reentrant model
 19984 ;;
 19985                           
 19986                           
 19987                           ;psect for function _TMR1_ISR
 19988  1E11                     _TMR1_ISR:	
 19989                           
 19990                           ;MCU_B1.c: 254: DimmerLights_TMR_1();
 19991                           
 19992                           ;incstack = 0
 19993                           ; Regs used in _TMR1_ISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 19994  1E11  3188  20CB  319E   	fcall	_DimmerLights_TMR_1
 19995                           
 19996                           ;MCU_B1.c: 259: DimmerLights_TMR_2();
 19997  1E14  3189  213B  319E   	fcall	_DimmerLights_TMR_2
 19998                           
 19999                           ;MCU_B1.c: 268: Timer1.Count++;
 20000  1E17  3001               	movlw	1
 20001  1E18  0022               	movlb	2	; select bank2
 20002  1E19  07B2               	addwf	(_Timer1^(0+256)+1),f
 20003  1E1A  3000               	movlw	0
 20004  1E1B  3DB3               	addwfc	((_Timer1+1)^(0+256)+1),f
 20005                           
 20006                           ;MCU_B1.c: 269: if (Timer1.Count == (int)(20*10)) {
 20007  1E1C  3001               	movlw	1
 20008  1E1D  3E31               	addlw	_Timer1& (0+255)
 20009  1E1E  0086               	movwf	6
 20010  1E1F  3001               	movlw	1	; select bank2/3
 20011  1E20  0087               	movwf	7
 20012  1E21  3F40               	moviw [0]fsr1
 20013  1E22  3AC8               	xorlw	200
 20014  1E23  1D03               	skipz
 20015  1E24  2E27               	goto	u928_25
 20016  1E25  3F41               	moviw [1]fsr1
 20017  1E26  3A00               	xorlw	0
 20018  1E27                     u928_25:	
 20019  1E27  1D03               	skipz
 20020  1E28  2E2C               	goto	i1l8624
 20021                           
 20022                           ;MCU_B1.c: 270: Timer1.Count = 0;
 20023  1E29  01B2               	clrf	(_Timer1^(0+256)+1)
 20024  1E2A  01B3               	clrf	((_Timer1+1)^(0+256)+1)
 20025                           
 20026                           ;MCU_B1.c: 271: Timer1.Timeout = 1;
 20027  1E2B  1431               	bsf	_Timer1^(0+256),0
 20028  1E2C                     i1l8624:	
 20029                           
 20030                           ;MCU_B1.c: 272: }
 20031                           ;MCU_B1.c: 274: TMR1H = (int)((65536-1480)/256);
 20032  1E2C  30FA               	movlw	250
 20033  1E2D  0020               	movlb	0	; select bank0
 20034  1E2E  0097               	movwf	23	;volatile
 20035                           
 20036                           ;MCU_B1.c: 275: TMR1L = (int)((65536-1480)%256);
 20037  1E2F  3038               	movlw	56
 20038  1E30  0096               	movwf	22	;volatile
 20039                           
 20040                           ;MCU_B1.c: 276: TMR1IF = 0;
 20041  1E31  1011               	bcf	17,0	;volatile
 20042  1E32  0008               	return
 20043  1E33                     __end_of_TMR1_ISR:	
 20044                           
 20045                           	psect	text140
 20046  093B                     __ptext140:	
 20047 ;; *************** function _DimmerLights_TMR_2 *****************
 20048 ;; Defined at:
 20049 ;;		line 1545 in file "../src/Dimmer_B1.c"
 20050 ;; Parameters:    Size  Location     Type
 20051 ;;		None
 20052 ;; Auto vars:     Size  Location     Type
 20053 ;;		None
 20054 ;; Return value:  Size  Location     Type
 20055 ;;		None               void
 20056 ;; Registers used:
 20057 ;;		wreg, status,2, status,0
 20058 ;; Tracked objects:
 20059 ;;		On entry : 0/0
 20060 ;;		On exit  : 0/0
 20061 ;;		Unchanged: 0/0
 20062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20063 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20064 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20065 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20066 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20067 ;;Total ram usage:        1 bytes
 20068 ;; Hardware stack levels used:    1
 20069 ;; This function calls:
 20070 ;;		Nothing
 20071 ;; This function is called by:
 20072 ;;		_TMR1_ISR
 20073 ;; This function uses a non-reentrant model
 20074 ;;
 20075                           
 20076                           
 20077                           ;psect for function _DimmerLights_TMR_2
 20078  093B                     _DimmerLights_TMR_2:	
 20079                           
 20080                           ;Dimmer_B1.c: 1547: if (DimmerIntr2.Start == 1) {
 20081                           
 20082                           ;incstack = 0
 20083                           ; Regs used in _DimmerLights_TMR_2: [wreg+status,2+status,0]
 20084  093B  0021               	movlb	1	; select bank1
 20085  093C  1D47               	btfss	_DimmerIntr2^(0+128),2
 20086  093D  2960               	goto	i1l997
 20087                           
 20088                           ;Dimmer_B1.c: 1548: DimmerIntr2.Count++;
 20089  093E  3001               	movlw	1
 20090  093F  00F0               	movwf	??_DimmerLights_TMR_2
 20091  0940  0870               	movf	??_DimmerLights_TMR_2,w
 20092  0941  07C9               	addwf	(_DimmerIntr2^(0+128)+2),f
 20093                           
 20094                           ;Dimmer_B1.c: 1550: if (DimmerIntr2.Count == DimmerIntr2.TuneEnd) {
 20095  0942  0849               	movf	(_DimmerIntr2^(0+128)+2),w
 20096  0943  0652               	xorwf	(_DimmerIntr2^(0+128)+11),w
 20097  0944  1D03               	skipz
 20098  0945  2948               	goto	i1l8048
 20099                           
 20100                           ;Dimmer_B1.c: 1551: DimmerIntr2.Count = 0;
 20101  0946  01C9               	clrf	(_DimmerIntr2^(0+128)+2)
 20102                           
 20103                           ;Dimmer_B1.c: 1552: DimmerIntr2.Start = 0;
 20104  0947  1147               	bcf	_DimmerIntr2^(0+128),2
 20105  0948                     i1l8048:	
 20106                           
 20107                           ;Dimmer_B1.c: 1553: }
 20108                           ;Dimmer_B1.c: 1568: if (DimmerIntr2.Count == DimmerIntr2.TuneValue2) {
 20109  0948  0849               	movf	(_DimmerIntr2^(0+128)+2),w
 20110  0949  064F               	xorwf	(_DimmerIntr2^(0+128)+8),w
 20111  094A  1903               	btfsc	3,2
 20112                           
 20113                           ;Dimmer_B1.c: 1571: if (DimmerIntr2.ControlStatus == 1) {
 20114  094B  1DC7               	btfss	_DimmerIntr2^(0+128),3
 20115  094C  294F               	goto	i1l8054
 20116                           
 20117                           ;Dimmer_B1.c: 1572: RA7 = 0;
 20118  094D  0020               	movlb	0	; select bank0
 20119  094E  138C               	bcf	12,7	;volatile
 20120  094F                     i1l8054:	
 20121                           
 20122                           ;Dimmer_B1.c: 1573: }
 20123                           ;Dimmer_B1.c: 1574: }
 20124                           ;Dimmer_B1.c: 1578: if (DimmerIntr2.Count == DimmerIntr2.TuneValue3) {
 20125  094F  0021               	movlb	1	; select bank1
 20126  0950  0849               	movf	(_DimmerIntr2^(0+128)+2),w
 20127  0951  0650               	xorwf	(_DimmerIntr2^(0+128)+9),w
 20128  0952  1903               	btfsc	3,2
 20129                           
 20130                           ;Dimmer_B1.c: 1581: if (DimmerIntr2.ControlStatus == 1) {
 20131  0953  1DC7               	btfss	_DimmerIntr2^(0+128),3
 20132  0954  2957               	goto	i1l8060
 20133                           
 20134                           ;Dimmer_B1.c: 1582: RA7 = 1;
 20135  0955  0020               	movlb	0	; select bank0
 20136  0956  178C               	bsf	12,7	;volatile
 20137  0957                     i1l8060:	
 20138                           
 20139                           ;Dimmer_B1.c: 1583: }
 20140                           ;Dimmer_B1.c: 1584: }
 20141                           ;Dimmer_B1.c: 1601: if (DimmerIntr2.Count == DimmerIntr2.TuneValue4) {
 20142  0957  0021               	movlb	1	; select bank1
 20143  0958  0849               	movf	(_DimmerIntr2^(0+128)+2),w
 20144  0959  0651               	xorwf	(_DimmerIntr2^(0+128)+10),w
 20145  095A  1903               	btfsc	3,2
 20146                           
 20147                           ;Dimmer_B1.c: 1603: if (DimmerIntr2.ControlStatus == 1) {
 20148  095B  1DC7               	btfss	_DimmerIntr2^(0+128),3
 20149  095C  2971               	goto	i1l1005
 20150                           
 20151                           ;Dimmer_B1.c: 1604: RA7 = 0;
 20152  095D  0020               	movlb	0	; select bank0
 20153  095E  138C               	bcf	12,7	;volatile
 20154                           
 20155                           ;Dimmer_B1.c: 1605: }
 20156                           ;Dimmer_B1.c: 1608: }
 20157                           ;Dimmer_B1.c: 1621: } else {
 20158  095F  2971               	goto	i1l1005
 20159  0960                     i1l997:	
 20160                           
 20161                           ;Dimmer_B1.c: 1622: if (DimmerIntr2.GO == 1) {
 20162  0960  1C47               	btfss	_DimmerIntr2^(0+128),0
 20163  0961  2971               	goto	i1l1005
 20164                           
 20165                           ;Dimmer_B1.c: 1623: DimmerIntr2.Count++;
 20166  0962  3001               	movlw	1
 20167  0963  00F0               	movwf	??_DimmerLights_TMR_2
 20168  0964  0870               	movf	??_DimmerLights_TMR_2,w
 20169  0965  07C9               	addwf	(_DimmerIntr2^(0+128)+2),f
 20170                           
 20171                           ;Dimmer_B1.c: 1624: if (DimmerIntr2.Count == 4) {
 20172  0966  0849               	movf	(_DimmerIntr2^(0+128)+2),w
 20173  0967  3A04               	xorlw	4
 20174  0968  1D03               	skipz
 20175  0969  2971               	goto	i1l1005
 20176                           
 20177                           ;Dimmer_B1.c: 1625: DimmerIntr2.Count = 0;
 20178  096A  01C9               	clrf	(_DimmerIntr2^(0+128)+2)
 20179                           
 20180                           ;Dimmer_B1.c: 1626: DimmerIntr2.Start = 1;
 20181  096B  1547               	bsf	_DimmerIntr2^(0+128),2
 20182                           
 20183                           ;Dimmer_B1.c: 1627: DimmerIntr2.GO = 0;
 20184  096C  1047               	bcf	_DimmerIntr2^(0+128),0
 20185                           
 20186                           ;Dimmer_B1.c: 1628: if (DimmerIntr2.ControlStatus == 1) {
 20187  096D  1DC7               	btfss	_DimmerIntr2^(0+128),3
 20188  096E  2971               	goto	i1l1005
 20189                           
 20190                           ;Dimmer_B1.c: 1629: RA7 = 1;
 20191  096F  0020               	movlb	0	; select bank0
 20192  0970  178C               	bsf	12,7	;volatile
 20193  0971                     i1l1005:	
 20194                           
 20195                           ;Dimmer_B1.c: 1630: }
 20196                           ;Dimmer_B1.c: 1631: }
 20197                           ;Dimmer_B1.c: 1632: }
 20198                           ;Dimmer_B1.c: 1633: }
 20199                           ;Dimmer_B1.c: 1636: if (DimmerIntr2.Tune == 1) {
 20200  0971  0021               	movlb	1	; select bank1
 20201  0972  1CC7               	btfss	_DimmerIntr2^(0+128),1
 20202  0973  0008               	return
 20203                           
 20204                           ;Dimmer_B1.c: 1637: DimmerIntr2.Tune = 0;
 20205  0974  10C7               	bcf	_DimmerIntr2^(0+128),1
 20206                           
 20207                           ;Dimmer_B1.c: 1638: DimmerIntr2.TuneTime++;
 20208  0975  3001               	movlw	1
 20209  0976  00F0               	movwf	??_DimmerLights_TMR_2
 20210  0977  0870               	movf	??_DimmerLights_TMR_2,w
 20211  0978  07CA               	addwf	(_DimmerIntr2^(0+128)+3),f
 20212                           
 20213                           ;Dimmer_B1.c: 1639: if (DimmerIntr2.TuneTime >= DimmerIntr2.TuneTimeValue) {
 20214  0979  084B               	movf	(_DimmerIntr2^(0+128)+4),w
 20215  097A  024A               	subwf	(_DimmerIntr2^(0+128)+3),w
 20216  097B  1C03               	skipc
 20217  097C  0008               	return
 20218                           
 20219                           ;Dimmer_B1.c: 1640: DimmerIntr2.TuneTime = 0;
 20220  097D  01CA               	clrf	(_DimmerIntr2^(0+128)+3)
 20221                           
 20222                           ;Dimmer_B1.c: 1641: DimmerIntr2.TuneGO = 1;
 20223  097E  1748               	bsf	(_DimmerIntr2^(0+128)+1),6
 20224                           
 20225                           ;Dimmer_B1.c: 1642: if (DimmerIntr2.Dimming_Sw == 1) {
 20226  097F  1E47               	btfss	_DimmerIntr2^(0+128),4
 20227  0980  2997               	goto	i1l1011
 20228                           
 20229                           ;Dimmer_B1.c: 1643: if (DimmerIntr2.Dimming_Status == 0) {
 20230  0981  1AC7               	btfsc	_DimmerIntr2^(0+128),5
 20231  0982  298E               	goto	i1l8098
 20232                           
 20233                           ;Dimmer_B1.c: 1644: if (DimmerIntr2.DimmingValue < ((char)(75*0.55))) {
 20234  0983  3029               	movlw	41
 20235  0984  024C               	subwf	(_DimmerIntr2^(0+128)+5),w
 20236  0985  1803               	skipnc
 20237  0986  298C               	goto	i1l1013
 20238                           
 20239                           ;Dimmer_B1.c: 1645: DimmerIntr2.DimmingValue++;
 20240  0987  3001               	movlw	1
 20241  0988  00F0               	movwf	??_DimmerLights_TMR_2
 20242  0989  0870               	movf	??_DimmerLights_TMR_2,w
 20243  098A  07CC               	addwf	(_DimmerIntr2^(0+128)+5),f
 20244                           
 20245                           ;Dimmer_B1.c: 1646: } else {
 20246  098B  0008               	return
 20247  098C                     i1l1013:	
 20248                           
 20249                           ;Dimmer_B1.c: 1647: DimmerIntr2.Dimming_Status = 1;
 20250  098C  16C7               	bsf	_DimmerIntr2^(0+128),5
 20251                           
 20252                           ;Dimmer_B1.c: 1648: }
 20253                           ;Dimmer_B1.c: 1649: } else {
 20254  098D  0008               	return
 20255  098E                     i1l8098:	
 20256                           
 20257                           ;Dimmer_B1.c: 1650: if (DimmerIntr2.DimmingValue > ((char)(5*0.55))) {
 20258  098E  3003               	movlw	3
 20259  098F  024C               	subwf	(_DimmerIntr2^(0+128)+5),w
 20260  0990  1C03               	skipc
 20261  0991  2995               	goto	i1l1016
 20262                           
 20263                           ;Dimmer_B1.c: 1651: DimmerIntr2.DimmingValue--;
 20264  0992  3001               	movlw	1
 20265  0993  02CC               	subwf	(_DimmerIntr2^(0+128)+5),f
 20266                           
 20267                           ;Dimmer_B1.c: 1652: } else {
 20268  0994  0008               	return
 20269  0995                     i1l1016:	
 20270                           
 20271                           ;Dimmer_B1.c: 1653: DimmerIntr2.Dimming_Status = 0;
 20272  0995  12C7               	bcf	_DimmerIntr2^(0+128),5
 20273                           
 20274                           ;Dimmer_B1.c: 1654: }
 20275                           ;Dimmer_B1.c: 1655: }
 20276                           ;Dimmer_B1.c: 1656: } else if (DimmerIntr2.Dimming_RF == 1) {
 20277  0996  0008               	return
 20278  0997                     i1l1011:	
 20279  0997  1F47               	btfss	_DimmerIntr2^(0+128),6
 20280  0998  0008               	return
 20281                           
 20282                           ;Dimmer_B1.c: 1657: if (DimmerIntr2.DimmingValue < DimmerIntr2.MaxmumValue) {
 20283  0999  084D               	movf	(_DimmerIntr2^(0+128)+6),w
 20284  099A  024C               	subwf	(_DimmerIntr2^(0+128)+5),w
 20285  099B  1803               	skipnc
 20286  099C  29A2               	goto	i1l8106
 20287                           
 20288                           ;Dimmer_B1.c: 1658: DimmerIntr2.DimmingValue++;
 20289  099D  3001               	movlw	1
 20290  099E  00F0               	movwf	??_DimmerLights_TMR_2
 20291  099F  0870               	movf	??_DimmerLights_TMR_2,w
 20292  09A0  07CC               	addwf	(_DimmerIntr2^(0+128)+5),f
 20293                           
 20294                           ;Dimmer_B1.c: 1659: } else if (DimmerIntr2.DimmingValue > DimmerIntr2.MaxmumValue) {
 20295  09A1  0008               	return
 20296  09A2                     i1l8106:	
 20297  09A2  084C               	movf	(_DimmerIntr2^(0+128)+5),w
 20298  09A3  024D               	subwf	(_DimmerIntr2^(0+128)+6),w
 20299  09A4  1803               	skipnc
 20300  09A5  29A9               	goto	i1l1022
 20301                           
 20302                           ;Dimmer_B1.c: 1660: DimmerIntr2.DimmingValue--;
 20303  09A6  3001               	movlw	1
 20304  09A7  02CC               	subwf	(_DimmerIntr2^(0+128)+5),f
 20305                           
 20306                           ;Dimmer_B1.c: 1661: } else {
 20307  09A8  0008               	return
 20308  09A9                     i1l1022:	
 20309                           
 20310                           ;Dimmer_B1.c: 1662: DimmerIntr2.Dimming_RF = 0;
 20311  09A9  1347               	bcf	_DimmerIntr2^(0+128),6
 20312  09AA  0008               	return
 20313  09AB                     __end_of_DimmerLights_TMR_2:	
 20314                           
 20315                           	psect	text141
 20316  08CB                     __ptext141:	
 20317 ;; *************** function _DimmerLights_TMR_1 *****************
 20318 ;; Defined at:
 20319 ;;		line 1380 in file "../src/Dimmer_B1.c"
 20320 ;; Parameters:    Size  Location     Type
 20321 ;;		None
 20322 ;; Auto vars:     Size  Location     Type
 20323 ;;		None
 20324 ;; Return value:  Size  Location     Type
 20325 ;;		None               void
 20326 ;; Registers used:
 20327 ;;		wreg, status,2, status,0
 20328 ;; Tracked objects:
 20329 ;;		On entry : 0/0
 20330 ;;		On exit  : 0/0
 20331 ;;		Unchanged: 0/0
 20332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20333 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20334 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20335 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20336 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20337 ;;Total ram usage:        1 bytes
 20338 ;; Hardware stack levels used:    1
 20339 ;; This function calls:
 20340 ;;		Nothing
 20341 ;; This function is called by:
 20342 ;;		_TMR1_ISR
 20343 ;; This function uses a non-reentrant model
 20344 ;;
 20345                           
 20346                           
 20347                           ;psect for function _DimmerLights_TMR_1
 20348  08CB                     _DimmerLights_TMR_1:	
 20349                           
 20350                           ;Dimmer_B1.c: 1382: if (DimmerIntr1.Start == 1) {
 20351                           
 20352                           ;incstack = 0
 20353                           ; Regs used in _DimmerLights_TMR_1: [wreg+status,2+status,0]
 20354  08CB  0021               	movlb	1	; select bank1
 20355  08CC  1D3B               	btfss	_DimmerIntr1^(0+128),2
 20356  08CD  28F0               	goto	i1l958
 20357                           
 20358                           ;Dimmer_B1.c: 1383: DimmerIntr1.Count++;
 20359  08CE  3001               	movlw	1
 20360  08CF  00F0               	movwf	??_DimmerLights_TMR_1
 20361  08D0  0870               	movf	??_DimmerLights_TMR_1,w
 20362  08D1  07BD               	addwf	(_DimmerIntr1^(0+128)+2),f
 20363                           
 20364                           ;Dimmer_B1.c: 1385: if (DimmerIntr1.Count == DimmerIntr1.TuneEnd) {
 20365  08D2  083D               	movf	(_DimmerIntr1^(0+128)+2),w
 20366  08D3  0646               	xorwf	(_DimmerIntr1^(0+128)+11),w
 20367  08D4  1D03               	skipz
 20368  08D5  28D8               	goto	i1l7950
 20369                           
 20370                           ;Dimmer_B1.c: 1386: DimmerIntr1.Count = 0;
 20371  08D6  01BD               	clrf	(_DimmerIntr1^(0+128)+2)
 20372                           
 20373                           ;Dimmer_B1.c: 1387: DimmerIntr1.Start = 0;
 20374  08D7  113B               	bcf	_DimmerIntr1^(0+128),2
 20375  08D8                     i1l7950:	
 20376                           
 20377                           ;Dimmer_B1.c: 1388: }
 20378                           ;Dimmer_B1.c: 1402: if (DimmerIntr1.Count == DimmerIntr1.TuneValue2) {
 20379  08D8  083D               	movf	(_DimmerIntr1^(0+128)+2),w
 20380  08D9  0643               	xorwf	(_DimmerIntr1^(0+128)+8),w
 20381  08DA  1903               	btfsc	3,2
 20382                           
 20383                           ;Dimmer_B1.c: 1403: if (DimmerIntr1.ControlStatus == 1) {
 20384  08DB  1DBB               	btfss	_DimmerIntr1^(0+128),3
 20385  08DC  28DF               	goto	i1l7956
 20386                           
 20387                           ;Dimmer_B1.c: 1404: RB4 = 0;
 20388  08DD  0020               	movlb	0	; select bank0
 20389  08DE  120D               	bcf	13,4	;volatile
 20390  08DF                     i1l7956:	
 20391                           
 20392                           ;Dimmer_B1.c: 1405: }
 20393                           ;Dimmer_B1.c: 1406: }
 20394                           ;Dimmer_B1.c: 1409: if (DimmerIntr1.Count == DimmerIntr1.TuneValue3) {
 20395  08DF  0021               	movlb	1	; select bank1
 20396  08E0  083D               	movf	(_DimmerIntr1^(0+128)+2),w
 20397  08E1  0644               	xorwf	(_DimmerIntr1^(0+128)+9),w
 20398  08E2  1903               	btfsc	3,2
 20399                           
 20400                           ;Dimmer_B1.c: 1410: if (DimmerIntr1.ControlStatus == 1) {
 20401  08E3  1DBB               	btfss	_DimmerIntr1^(0+128),3
 20402  08E4  28E7               	goto	i1l7962
 20403                           
 20404                           ;Dimmer_B1.c: 1411: RB4 = 1;
 20405  08E5  0020               	movlb	0	; select bank0
 20406  08E6  160D               	bsf	13,4	;volatile
 20407  08E7                     i1l7962:	
 20408                           
 20409                           ;Dimmer_B1.c: 1412: }
 20410                           ;Dimmer_B1.c: 1413: }
 20411                           ;Dimmer_B1.c: 1416: if (DimmerIntr1.Count == DimmerIntr1.TuneValue4) {
 20412  08E7  0021               	movlb	1	; select bank1
 20413  08E8  083D               	movf	(_DimmerIntr1^(0+128)+2),w
 20414  08E9  0645               	xorwf	(_DimmerIntr1^(0+128)+10),w
 20415  08EA  1903               	btfsc	3,2
 20416                           
 20417                           ;Dimmer_B1.c: 1417: if (DimmerIntr1.ControlStatus == 1) {
 20418  08EB  1DBB               	btfss	_DimmerIntr1^(0+128),3
 20419  08EC  2901               	goto	i1l966
 20420                           
 20421                           ;Dimmer_B1.c: 1418: RB4 = 0;
 20422  08ED  0020               	movlb	0	; select bank0
 20423  08EE  120D               	bcf	13,4	;volatile
 20424                           
 20425                           ;Dimmer_B1.c: 1419: }
 20426                           ;Dimmer_B1.c: 1422: }
 20427                           ;Dimmer_B1.c: 1424: } else {
 20428  08EF  2901               	goto	i1l966
 20429  08F0                     i1l958:	
 20430                           
 20431                           ;Dimmer_B1.c: 1425: if (DimmerIntr1.GO == 1) {
 20432  08F0  1C3B               	btfss	_DimmerIntr1^(0+128),0
 20433  08F1  2901               	goto	i1l966
 20434                           
 20435                           ;Dimmer_B1.c: 1426: DimmerIntr1.Count++;
 20436  08F2  3001               	movlw	1
 20437  08F3  00F0               	movwf	??_DimmerLights_TMR_1
 20438  08F4  0870               	movf	??_DimmerLights_TMR_1,w
 20439  08F5  07BD               	addwf	(_DimmerIntr1^(0+128)+2),f
 20440                           
 20441                           ;Dimmer_B1.c: 1427: if (DimmerIntr1.Count == 4) {
 20442  08F6  083D               	movf	(_DimmerIntr1^(0+128)+2),w
 20443  08F7  3A04               	xorlw	4
 20444  08F8  1D03               	skipz
 20445  08F9  2901               	goto	i1l966
 20446                           
 20447                           ;Dimmer_B1.c: 1428: DimmerIntr1.Count = 0;
 20448  08FA  01BD               	clrf	(_DimmerIntr1^(0+128)+2)
 20449                           
 20450                           ;Dimmer_B1.c: 1429: DimmerIntr1.GO = 0;
 20451  08FB  103B               	bcf	_DimmerIntr1^(0+128),0
 20452                           
 20453                           ;Dimmer_B1.c: 1430: DimmerIntr1.Start = 1;
 20454  08FC  153B               	bsf	_DimmerIntr1^(0+128),2
 20455                           
 20456                           ;Dimmer_B1.c: 1432: if (DimmerIntr1.ControlStatus == 1) {
 20457  08FD  1DBB               	btfss	_DimmerIntr1^(0+128),3
 20458  08FE  2901               	goto	i1l966
 20459                           
 20460                           ;Dimmer_B1.c: 1433: RB4 = 1;
 20461  08FF  0020               	movlb	0	; select bank0
 20462  0900  160D               	bsf	13,4	;volatile
 20463  0901                     i1l966:	
 20464                           
 20465                           ;Dimmer_B1.c: 1434: }
 20466                           ;Dimmer_B1.c: 1435: }
 20467                           ;Dimmer_B1.c: 1436: }
 20468                           ;Dimmer_B1.c: 1437: }
 20469                           ;Dimmer_B1.c: 1439: if (DimmerIntr1.Tune == 1) {
 20470  0901  0021               	movlb	1	; select bank1
 20471  0902  1CBB               	btfss	_DimmerIntr1^(0+128),1
 20472  0903  0008               	return
 20473                           
 20474                           ;Dimmer_B1.c: 1440: DimmerIntr1.Tune = 0;
 20475  0904  10BB               	bcf	_DimmerIntr1^(0+128),1
 20476                           
 20477                           ;Dimmer_B1.c: 1441: DimmerIntr1.TuneTime++;
 20478  0905  3001               	movlw	1
 20479  0906  00F0               	movwf	??_DimmerLights_TMR_1
 20480  0907  0870               	movf	??_DimmerLights_TMR_1,w
 20481  0908  07BE               	addwf	(_DimmerIntr1^(0+128)+3),f
 20482                           
 20483                           ;Dimmer_B1.c: 1442: if (DimmerIntr1.TuneTime >= DimmerIntr1.TuneTimeValue) {
 20484  0909  083F               	movf	(_DimmerIntr1^(0+128)+4),w
 20485  090A  023E               	subwf	(_DimmerIntr1^(0+128)+3),w
 20486  090B  1C03               	skipc
 20487  090C  0008               	return
 20488                           
 20489                           ;Dimmer_B1.c: 1443: DimmerIntr1.TuneTime = 0;
 20490  090D  01BE               	clrf	(_DimmerIntr1^(0+128)+3)
 20491                           
 20492                           ;Dimmer_B1.c: 1444: DimmerIntr1.TuneGO = 1;
 20493  090E  173C               	bsf	(_DimmerIntr1^(0+128)+1),6
 20494                           
 20495                           ;Dimmer_B1.c: 1445: if (DimmerIntr1.Dimming_Sw == 1) {
 20496  090F  1E3B               	btfss	_DimmerIntr1^(0+128),4
 20497  0910  2927               	goto	i1l972
 20498                           
 20499                           ;Dimmer_B1.c: 1446: if (DimmerIntr1.Dimming_Status == 0) {
 20500  0911  1ABB               	btfsc	_DimmerIntr1^(0+128),5
 20501  0912  291E               	goto	i1l8000
 20502                           
 20503                           ;Dimmer_B1.c: 1447: if (DimmerIntr1.DimmingValue < ((char)(75*0.55))) {
 20504  0913  3029               	movlw	41
 20505  0914  0240               	subwf	(_DimmerIntr1^(0+128)+5),w
 20506  0915  1803               	skipnc
 20507  0916  291C               	goto	i1l974
 20508                           
 20509                           ;Dimmer_B1.c: 1448: DimmerIntr1.DimmingValue++;
 20510  0917  3001               	movlw	1
 20511  0918  00F0               	movwf	??_DimmerLights_TMR_1
 20512  0919  0870               	movf	??_DimmerLights_TMR_1,w
 20513  091A  07C0               	addwf	(_DimmerIntr1^(0+128)+5),f
 20514                           
 20515                           ;Dimmer_B1.c: 1449: } else {
 20516  091B  0008               	return
 20517  091C                     i1l974:	
 20518                           
 20519                           ;Dimmer_B1.c: 1450: DimmerIntr1.Dimming_Status = 1;
 20520  091C  16BB               	bsf	_DimmerIntr1^(0+128),5
 20521                           
 20522                           ;Dimmer_B1.c: 1451: }
 20523                           ;Dimmer_B1.c: 1452: } else {
 20524  091D  0008               	return
 20525  091E                     i1l8000:	
 20526                           
 20527                           ;Dimmer_B1.c: 1453: if (DimmerIntr1.DimmingValue > ((char)(5*0.55))) {
 20528  091E  3003               	movlw	3
 20529  091F  0240               	subwf	(_DimmerIntr1^(0+128)+5),w
 20530  0920  1C03               	skipc
 20531  0921  2925               	goto	i1l977
 20532                           
 20533                           ;Dimmer_B1.c: 1454: DimmerIntr1.DimmingValue--;
 20534  0922  3001               	movlw	1
 20535  0923  02C0               	subwf	(_DimmerIntr1^(0+128)+5),f
 20536                           
 20537                           ;Dimmer_B1.c: 1455: } else {
 20538  0924  0008               	return
 20539  0925                     i1l977:	
 20540                           
 20541                           ;Dimmer_B1.c: 1456: DimmerIntr1.Dimming_Status = 0;
 20542  0925  12BB               	bcf	_DimmerIntr1^(0+128),5
 20543                           
 20544                           ;Dimmer_B1.c: 1457: }
 20545                           ;Dimmer_B1.c: 1458: }
 20546                           ;Dimmer_B1.c: 1459: } else if (DimmerIntr1.Dimming_RF == 1) {
 20547  0926  0008               	return
 20548  0927                     i1l972:	
 20549  0927  1F3B               	btfss	_DimmerIntr1^(0+128),6
 20550  0928  0008               	return
 20551                           
 20552                           ;Dimmer_B1.c: 1460: if (DimmerIntr1.DimmingValue < DimmerIntr1.MaxmumValue) {
 20553  0929  0841               	movf	(_DimmerIntr1^(0+128)+6),w
 20554  092A  0240               	subwf	(_DimmerIntr1^(0+128)+5),w
 20555  092B  1803               	skipnc
 20556  092C  2932               	goto	i1l8008
 20557                           
 20558                           ;Dimmer_B1.c: 1461: DimmerIntr1.DimmingValue++;
 20559  092D  3001               	movlw	1
 20560  092E  00F0               	movwf	??_DimmerLights_TMR_1
 20561  092F  0870               	movf	??_DimmerLights_TMR_1,w
 20562  0930  07C0               	addwf	(_DimmerIntr1^(0+128)+5),f
 20563                           
 20564                           ;Dimmer_B1.c: 1462: } else if (DimmerIntr1.DimmingValue > DimmerIntr1.MaxmumValue) {
 20565  0931  0008               	return
 20566  0932                     i1l8008:	
 20567  0932  0840               	movf	(_DimmerIntr1^(0+128)+5),w
 20568  0933  0241               	subwf	(_DimmerIntr1^(0+128)+6),w
 20569  0934  1803               	skipnc
 20570  0935  2939               	goto	i1l983
 20571                           
 20572                           ;Dimmer_B1.c: 1463: DimmerIntr1.DimmingValue--;
 20573  0936  3001               	movlw	1
 20574  0937  02C0               	subwf	(_DimmerIntr1^(0+128)+5),f
 20575                           
 20576                           ;Dimmer_B1.c: 1464: } else {
 20577  0938  0008               	return
 20578  0939                     i1l983:	
 20579                           
 20580                           ;Dimmer_B1.c: 1465: DimmerIntr1.Dimming_RF = 0;
 20581  0939  133B               	bcf	_DimmerIntr1^(0+128),6
 20582  093A  0008               	return
 20583  093B                     __end_of_DimmerLights_TMR_1:	
 20584                           
 20585                           	psect	text142
 20586  1975                     __ptext142:	
 20587 ;; *************** function _IOC_ISR *****************
 20588 ;; Defined at:
 20589 ;;		line 395 in file "../src/MCU_B1.c"
 20590 ;; Parameters:    Size  Location     Type
 20591 ;;		None
 20592 ;; Auto vars:     Size  Location     Type
 20593 ;;		None
 20594 ;; Return value:  Size  Location     Type
 20595 ;;		None               void
 20596 ;; Registers used:
 20597 ;;		wreg, status,2, status,0, pclath, cstack
 20598 ;; Tracked objects:
 20599 ;;		On entry : 0/0
 20600 ;;		On exit  : 0/0
 20601 ;;		Unchanged: 0/0
 20602 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20603 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20604 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20605 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20606 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20607 ;;Total ram usage:        0 bytes
 20608 ;; Hardware stack levels used:    1
 20609 ;; Hardware stack levels required when called:    3
 20610 ;; This function calls:
 20611 ;;		_DimmerLights_IOC_1
 20612 ;;		_DimmerLights_IOC_2
 20613 ;; This function is called by:
 20614 ;;		_ISR
 20615 ;; This function uses a non-reentrant model
 20616 ;;
 20617                           
 20618                           
 20619                           ;psect for function _IOC_ISR
 20620  1975                     _IOC_ISR:	
 20621                           
 20622                           ;MCU_B1.c: 397: if (myMain.PowerON == 1) {
 20623                           
 20624                           ;incstack = 0
 20625                           ; Regs used in _IOC_ISR: [wreg+status,2+status,0+pclath+cstack]
 20626  1975  0021               	movlb	1	; select bank1
 20627  1976  1C2E               	btfss	_myMain^(0+128),0
 20628  1977  297D               	goto	i1l8634
 20629                           
 20630                           ;MCU_B1.c: 403: DimmerLights_IOC_1();
 20631  1978  3191  2103  3199   	fcall	_DimmerLights_IOC_1
 20632                           
 20633                           ;MCU_B1.c: 408: DimmerLights_IOC_2();
 20634  197B  3190  208C         	fcall	_DimmerLights_IOC_2
 20635  197D                     i1l8634:	
 20636                           
 20637                           ;MCU_B1.c: 416: }
 20638                           ;MCU_B1.c: 418: IOCBF2 = 0;
 20639  197D  0027               	movlb	7	; select bank7
 20640  197E  1116               	bcf	22,2	;volatile
 20641                           
 20642                           ;MCU_B1.c: 419: IOCIF = 0;
 20643  197F  100B               	bcf	11,0	;volatile
 20644  1980  0008               	return
 20645  1981                     __end_of_IOC_ISR:	
 20646                           
 20647                           	psect	text143
 20648  108C                     __ptext143:	
 20649 ;; *************** function _DimmerLights_IOC_2 *****************
 20650 ;; Defined at:
 20651 ;;		line 1669 in file "../src/Dimmer_B1.c"
 20652 ;; Parameters:    Size  Location     Type
 20653 ;;		None
 20654 ;; Auto vars:     Size  Location     Type
 20655 ;;		None
 20656 ;; Return value:  Size  Location     Type
 20657 ;;		None               void
 20658 ;; Registers used:
 20659 ;;		wreg, status,2, status,0, pclath, cstack
 20660 ;; Tracked objects:
 20661 ;;		On entry : 0/0
 20662 ;;		On exit  : 0/0
 20663 ;;		Unchanged: 0/0
 20664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20665 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20667 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20668 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20669 ;;Total ram usage:        2 bytes
 20670 ;; Hardware stack levels used:    1
 20671 ;; Hardware stack levels required when called:    2
 20672 ;; This function calls:
 20673 ;;		_Division
 20674 ;; This function is called by:
 20675 ;;		_IOC_ISR
 20676 ;; This function uses a non-reentrant model
 20677 ;;
 20678                           
 20679                           
 20680                           ;psect for function _DimmerLights_IOC_2
 20681  108C                     _DimmerLights_IOC_2:	
 20682                           
 20683                           ;Dimmer_B1.c: 1684: if (DimmerIntr2.Start == 0) {
 20684                           
 20685                           ;incstack = 0
 20686                           ; Regs used in _DimmerLights_IOC_2: [wreg+status,2+status,0+pclath+cstack]
 20687  108C  0021               	movlb	1	; select bank1
 20688  108D  1947               	btfsc	_DimmerIntr2^(0+128),2
 20689  108E  0008               	return
 20690                           
 20691                           ;Dimmer_B1.c: 1685: if (RB2 != DimmerIntr2.Status) {
 20692  108F  0E48               	swapf	(_DimmerIntr2^(0+128)+1),w
 20693  1090  0C89               	rrf	9,f
 20694  1091  3901               	andlw	1
 20695  1092  00FA               	movwf	??_DimmerLights_IOC_2
 20696  1093  3000               	movlw	0
 20697  1094  0020               	movlb	0	; select bank0
 20698  1095  190D               	btfsc	13,2	;volatile
 20699  1096  3001               	movlw	1
 20700  1097  067A               	xorwf	??_DimmerLights_IOC_2,w
 20701  1098  1903               	skipnz
 20702  1099  0008               	return
 20703                           
 20704                           ;Dimmer_B1.c: 1687: DimmerIntr2.Count = 0;
 20705  109A  0021               	movlb	1	; select bank1
 20706  109B  01C9               	clrf	(_DimmerIntr2^(0+128)+2)
 20707                           
 20708                           ;Dimmer_B1.c: 1688: DimmerIntr2.GO = 1;
 20709  109C  1447               	bsf	_DimmerIntr2^(0+128),0
 20710                           
 20711                           ;Dimmer_B1.c: 1690: if (DimmerIntr2.Dimming_Sw == 1 || DimmerIntr2.Dimming_RF == 1) {
 20712  109D  1E47               	btfss	_DimmerIntr2^(0+128),4
 20713  109E  1B47               	btfsc	_DimmerIntr2^(0+128),6
 20714                           
 20715                           ;Dimmer_B1.c: 1691: DimmerIntr2.Tune = 1;
 20716  109F  14C7               	bsf	_DimmerIntr2^(0+128),1
 20717                           
 20718                           ;Dimmer_B1.c: 1692: }
 20719                           ;Dimmer_B1.c: 1694: if (DimmerIntr2.TuneGO == 1) {
 20720  10A0  1F48               	btfss	(_DimmerIntr2^(0+128)+1),6
 20721  10A1  28C0               	goto	i1l8132
 20722                           
 20723                           ;Dimmer_B1.c: 1695: DimmerIntr2.TuneGO = 0;
 20724  10A2  1348               	bcf	(_DimmerIntr2^(0+128)+1),6
 20725                           
 20726                           ;Dimmer_B1.c: 1698: DimmerIntr2.TuneValue2 = Division(DimmerIntr2.DimmingValue, 2);
 20727  10A3  3002               	movlw	2
 20728  10A4  00FA               	movwf	??_DimmerLights_IOC_2
 20729  10A5  087A               	movf	??_DimmerLights_IOC_2,w
 20730  10A6  00F5               	movwf	Division@num
 20731  10A7  084C               	movf	(_DimmerIntr2^(0+128)+5),w
 20732  10A8  3199  21E1  3190   	fcall	_Division
 20733  10AB  00FB               	movwf	??_DimmerLights_IOC_2+1
 20734  10AC  087B               	movf	??_DimmerLights_IOC_2+1,w
 20735  10AD  0021               	movlb	1	; select bank1
 20736  10AE  00CF               	movwf	(_DimmerIntr2^(0+128)+8)
 20737                           
 20738                           ;Dimmer_B1.c: 1699: DimmerIntr2.TuneValue3 = DimmerIntr2.TuneValue2 + (55 - DimmerIntr2.
      +                          DimmingValue);
 20739  10AF  034C               	decf	(_DimmerIntr2^(0+128)+5),w
 20740  10B0  3AFF               	xorlw	255
 20741  10B1  074F               	addwf	(_DimmerIntr2^(0+128)+8),w
 20742  10B2  3E37               	addlw	55
 20743  10B3  00FA               	movwf	??_DimmerLights_IOC_2
 20744  10B4  087A               	movf	??_DimmerLights_IOC_2,w
 20745  10B5  00D0               	movwf	(_DimmerIntr2^(0+128)+9)
 20746                           
 20747                           ;Dimmer_B1.c: 1700: DimmerIntr2.TuneValue4 = DimmerIntr2.TuneValue3 + DimmerIntr2.TuneVa
      +                          lue2;
 20748  10B6  0850               	movf	(_DimmerIntr2^(0+128)+9),w
 20749  10B7  074F               	addwf	(_DimmerIntr2^(0+128)+8),w
 20750  10B8  00FA               	movwf	??_DimmerLights_IOC_2
 20751  10B9  087A               	movf	??_DimmerLights_IOC_2,w
 20752  10BA  00D1               	movwf	(_DimmerIntr2^(0+128)+10)
 20753                           
 20754                           ;Dimmer_B1.c: 1701: DimmerIntr2.TuneEnd = DimmerIntr2.TuneValue4 + 3;
 20755  10BB  0851               	movf	(_DimmerIntr2^(0+128)+10),w
 20756  10BC  3E03               	addlw	3
 20757  10BD  00FA               	movwf	??_DimmerLights_IOC_2
 20758  10BE  087A               	movf	??_DimmerLights_IOC_2,w
 20759  10BF  00D2               	movwf	(_DimmerIntr2^(0+128)+11)
 20760  10C0                     i1l8132:	
 20761                           
 20762                           ;Dimmer_B1.c: 1702: }
 20763                           ;Dimmer_B1.c: 1712: DimmerIntr2.Status = RB2 == 1 ? 1 : 0;
 20764  10C0  12C8               	bcf	(_DimmerIntr2^(0+128)+1),5
 20765  10C1  0020               	movlb	0	; select bank0
 20766  10C2  1D0D               	btfss	13,2	;volatile
 20767  10C3  0008               	return
 20768  10C4  0021               	movlb	1	; select bank1
 20769  10C5  16C8               	bsf	(_DimmerIntr2^(0+128)+1),5
 20770  10C6  0008               	return
 20771  10C7                     __end_of_DimmerLights_IOC_2:	
 20772                           
 20773                           	psect	text144
 20774  1103                     __ptext144:	
 20775 ;; *************** function _DimmerLights_IOC_1 *****************
 20776 ;; Defined at:
 20777 ;;		line 1472 in file "../src/Dimmer_B1.c"
 20778 ;; Parameters:    Size  Location     Type
 20779 ;;		None
 20780 ;; Auto vars:     Size  Location     Type
 20781 ;;		None
 20782 ;; Return value:  Size  Location     Type
 20783 ;;		None               void
 20784 ;; Registers used:
 20785 ;;		wreg, status,2, status,0, pclath, cstack
 20786 ;; Tracked objects:
 20787 ;;		On entry : 0/0
 20788 ;;		On exit  : 0/0
 20789 ;;		Unchanged: 0/0
 20790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20791 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20792 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20793 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20794 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20795 ;;Total ram usage:        2 bytes
 20796 ;; Hardware stack levels used:    1
 20797 ;; Hardware stack levels required when called:    2
 20798 ;; This function calls:
 20799 ;;		_Division
 20800 ;; This function is called by:
 20801 ;;		_IOC_ISR
 20802 ;; This function uses a non-reentrant model
 20803 ;;
 20804                           
 20805                           
 20806                           ;psect for function _DimmerLights_IOC_1
 20807  1103                     _DimmerLights_IOC_1:	
 20808                           
 20809                           ;Dimmer_B1.c: 1486: if (DimmerIntr1.Start == 0 && DimmerIntr1.GO == 0) {
 20810                           
 20811                           ;incstack = 0
 20812                           ; Regs used in _DimmerLights_IOC_1: [wreg+status,2+status,0+pclath+cstack]
 20813  1103  0021               	movlb	1	; select bank1
 20814  1104  193B               	btfsc	_DimmerIntr1^(0+128),2
 20815  1105  0008               	return
 20816  1106  183B               	btfsc	_DimmerIntr1^(0+128),0
 20817  1107  0008               	return
 20818                           
 20819                           ;Dimmer_B1.c: 1487: if (RB2 != DimmerIntr1.Status) {
 20820  1108  0E3C               	swapf	(_DimmerIntr1^(0+128)+1),w
 20821  1109  0C89               	rrf	9,f
 20822  110A  3901               	andlw	1
 20823  110B  00FA               	movwf	??_DimmerLights_IOC_1
 20824  110C  3000               	movlw	0
 20825  110D  0020               	movlb	0	; select bank0
 20826  110E  190D               	btfsc	13,2	;volatile
 20827  110F  3001               	movlw	1
 20828  1110  067A               	xorwf	??_DimmerLights_IOC_1,w
 20829  1111  1903               	skipnz
 20830  1112  0008               	return
 20831                           
 20832                           ;Dimmer_B1.c: 1489: DimmerIntr1.Count = 0;
 20833  1113  0021               	movlb	1	; select bank1
 20834  1114  01BD               	clrf	(_DimmerIntr1^(0+128)+2)
 20835                           
 20836                           ;Dimmer_B1.c: 1490: DimmerIntr1.GO = 1;
 20837  1115  143B               	bsf	_DimmerIntr1^(0+128),0
 20838                           
 20839                           ;Dimmer_B1.c: 1492: if (DimmerIntr1.Dimming_Sw == 1 || DimmerIntr1.Dimming_RF == 1) {
 20840  1116  1E3B               	btfss	_DimmerIntr1^(0+128),4
 20841  1117  1B3B               	btfsc	_DimmerIntr1^(0+128),6
 20842                           
 20843                           ;Dimmer_B1.c: 1493: DimmerIntr1.Tune = 1;
 20844  1118  14BB               	bsf	_DimmerIntr1^(0+128),1
 20845                           
 20846                           ;Dimmer_B1.c: 1494: }
 20847                           ;Dimmer_B1.c: 1496: if (DimmerIntr1.TuneGO == 1) {
 20848  1119  1F3C               	btfss	(_DimmerIntr1^(0+128)+1),6
 20849  111A  2939               	goto	i1l8036
 20850                           
 20851                           ;Dimmer_B1.c: 1497: DimmerIntr1.TuneGO = 0;
 20852  111B  133C               	bcf	(_DimmerIntr1^(0+128)+1),6
 20853                           
 20854                           ;Dimmer_B1.c: 1500: DimmerIntr1.TuneValue2 = Division(DimmerIntr1.DimmingValue, 2);
 20855  111C  3002               	movlw	2
 20856  111D  00FA               	movwf	??_DimmerLights_IOC_1
 20857  111E  087A               	movf	??_DimmerLights_IOC_1,w
 20858  111F  00F5               	movwf	Division@num
 20859  1120  0840               	movf	(_DimmerIntr1^(0+128)+5),w
 20860  1121  3199  21E1  3191   	fcall	_Division
 20861  1124  00FB               	movwf	??_DimmerLights_IOC_1+1
 20862  1125  087B               	movf	??_DimmerLights_IOC_1+1,w
 20863  1126  0021               	movlb	1	; select bank1
 20864  1127  00C3               	movwf	(_DimmerIntr1^(0+128)+8)
 20865                           
 20866                           ;Dimmer_B1.c: 1501: DimmerIntr1.TuneValue3 = DimmerIntr1.TuneValue2 + (55 - DimmerIntr1.
      +                          DimmingValue);
 20867  1128  0340               	decf	(_DimmerIntr1^(0+128)+5),w
 20868  1129  3AFF               	xorlw	255
 20869  112A  0743               	addwf	(_DimmerIntr1^(0+128)+8),w
 20870  112B  3E37               	addlw	55
 20871  112C  00FA               	movwf	??_DimmerLights_IOC_1
 20872  112D  087A               	movf	??_DimmerLights_IOC_1,w
 20873  112E  00C4               	movwf	(_DimmerIntr1^(0+128)+9)
 20874                           
 20875                           ;Dimmer_B1.c: 1502: DimmerIntr1.TuneValue4 = DimmerIntr1.TuneValue3 + DimmerIntr1.TuneVa
      +                          lue2;
 20876  112F  0844               	movf	(_DimmerIntr1^(0+128)+9),w
 20877  1130  0743               	addwf	(_DimmerIntr1^(0+128)+8),w
 20878  1131  00FA               	movwf	??_DimmerLights_IOC_1
 20879  1132  087A               	movf	??_DimmerLights_IOC_1,w
 20880  1133  00C5               	movwf	(_DimmerIntr1^(0+128)+10)
 20881                           
 20882                           ;Dimmer_B1.c: 1503: DimmerIntr1.TuneEnd = DimmerIntr1.TuneValue4 + 3;
 20883  1134  0845               	movf	(_DimmerIntr1^(0+128)+10),w
 20884  1135  3E03               	addlw	3
 20885  1136  00FA               	movwf	??_DimmerLights_IOC_1
 20886  1137  087A               	movf	??_DimmerLights_IOC_1,w
 20887  1138  00C6               	movwf	(_DimmerIntr1^(0+128)+11)
 20888  1139                     i1l8036:	
 20889                           
 20890                           ;Dimmer_B1.c: 1504: }
 20891                           ;Dimmer_B1.c: 1512: DimmerIntr1.Status = RB2 == 1 ? 1 : 0;
 20892  1139  12BC               	bcf	(_DimmerIntr1^(0+128)+1),5
 20893  113A  0020               	movlb	0	; select bank0
 20894  113B  1D0D               	btfss	13,2	;volatile
 20895  113C  0008               	return
 20896  113D  0021               	movlb	1	; select bank1
 20897  113E  16BC               	bsf	(_DimmerIntr1^(0+128)+1),5
 20898  113F  0008               	return
 20899  1140                     __end_of_DimmerLights_IOC_1:	
 20900                           
 20901                           	psect	text145
 20902  19E1                     __ptext145:	
 20903 ;; *************** function _Division *****************
 20904 ;; Defined at:
 20905 ;;		line 1375 in file "../src/Dimmer_B1.c"
 20906 ;; Parameters:    Size  Location     Type
 20907 ;;  value           1    wreg     unsigned char 
 20908 ;;  num             1    5[COMMON] unsigned char 
 20909 ;; Auto vars:     Size  Location     Type
 20910 ;;  value           1    8[COMMON] unsigned char 
 20911 ;;  result          1    9[COMMON] unsigned char 
 20912 ;; Return value:  Size  Location     Type
 20913 ;;                  1    wreg      unsigned char 
 20914 ;; Registers used:
 20915 ;;		wreg, status,2, status,0, pclath, cstack
 20916 ;; Tracked objects:
 20917 ;;		On entry : 0/0
 20918 ;;		On exit  : 0/0
 20919 ;;		Unchanged: 0/0
 20920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20921 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20922 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20923 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20924 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20925 ;;Total ram usage:        5 bytes
 20926 ;; Hardware stack levels used:    1
 20927 ;; Hardware stack levels required when called:    1
 20928 ;; This function calls:
 20929 ;;		___lbdiv
 20930 ;; This function is called by:
 20931 ;;		_DimmerLights_IOC_1
 20932 ;;		_DimmerLights_IOC_2
 20933 ;; This function uses a non-reentrant model
 20934 ;;
 20935                           
 20936                           
 20937                           ;psect for function _Division
 20938  19E1                     _Division:	
 20939                           
 20940                           ;incstack = 0
 20941                           ; Regs used in _Division: [wreg+status,2+status,0+pclath+cstack]
 20942                           ;Division@value stored from wreg
 20943  19E1  00F8               	movwf	Division@value
 20944                           
 20945                           ;Dimmer_B1.c: 1376: char result = (char) (value / num);
 20946  19E2  0875               	movf	Division@num,w
 20947  19E3  00F6               	movwf	??_Division
 20948  19E4  0876               	movf	??_Division,w
 20949  19E5  00F0               	movwf	___lbdiv@divisor
 20950  19E6  0878               	movf	Division@value,w
 20951  19E7  319D  25F0         	fcall	___lbdiv
 20952  19E9  00F7               	movwf	??_Division+1
 20953  19EA  0877               	movf	??_Division+1,w
 20954  19EB  00F9               	movwf	Division@result
 20955                           
 20956                           ;Dimmer_B1.c: 1377: return result;
 20957  19EC  0879               	movf	Division@result,w
 20958  19ED  0008               	return
 20959  19EE                     __end_of_Division:	
 20960                           
 20961                           	psect	text146
 20962  1DF0                     __ptext146:	
 20963 ;; *************** function ___lbdiv *****************
 20964 ;; Defined at:
 20965 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.32\sources\common\lbdiv.c"
 20966 ;; Parameters:    Size  Location     Type
 20967 ;;  dividend        1    wreg     unsigned char 
 20968 ;;  divisor         1    0[COMMON] unsigned char 
 20969 ;; Auto vars:     Size  Location     Type
 20970 ;;  dividend        1    2[COMMON] unsigned char 
 20971 ;;  quotient        1    4[COMMON] unsigned char 
 20972 ;;  counter         1    3[COMMON] unsigned char 
 20973 ;; Return value:  Size  Location     Type
 20974 ;;                  1    wreg      unsigned char 
 20975 ;; Registers used:
 20976 ;;		wreg, status,2, status,0
 20977 ;; Tracked objects:
 20978 ;;		On entry : 0/0
 20979 ;;		On exit  : 0/0
 20980 ;;		Unchanged: 0/0
 20981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 20982 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20983 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20984 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20985 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 20986 ;;Total ram usage:        5 bytes
 20987 ;; Hardware stack levels used:    1
 20988 ;; This function calls:
 20989 ;;		Nothing
 20990 ;; This function is called by:
 20991 ;;		_Division
 20992 ;; This function uses a non-reentrant model
 20993 ;;
 20994                           
 20995                           
 20996                           ;psect for function ___lbdiv
 20997  1DF0                     ___lbdiv:	
 20998                           
 20999                           ;incstack = 0
 21000                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
 21001                           ;___lbdiv@dividend stored from wreg
 21002  1DF0  00F2               	movwf	___lbdiv@dividend
 21003  1DF1  01F4               	clrf	___lbdiv@quotient
 21004  1DF2  0870               	movf	___lbdiv@divisor,w
 21005  1DF3  1903               	btfsc	3,2
 21006  1DF4  2E0F               	goto	i1l7354
 21007  1DF5  01F3               	clrf	___lbdiv@counter
 21008  1DF6  0AF3               	incf	___lbdiv@counter,f
 21009  1DF7                     i1l7342:	
 21010  1DF7  1BF0               	btfsc	___lbdiv@divisor,7
 21011  1DF8  2E00               	goto	i1l7344
 21012  1DF9  1003               	clrc
 21013  1DFA  0DF0               	rlf	___lbdiv@divisor,f
 21014  1DFB  3001               	movlw	1
 21015  1DFC  00F1               	movwf	??___lbdiv
 21016  1DFD  0871               	movf	??___lbdiv,w
 21017  1DFE  07F3               	addwf	___lbdiv@counter,f
 21018  1DFF  2DF7               	goto	i1l7342
 21019  1E00                     i1l7344:	
 21020  1E00  1003               	clrc
 21021  1E01  0DF4               	rlf	___lbdiv@quotient,f
 21022  1E02  0870               	movf	___lbdiv@divisor,w
 21023  1E03  0272               	subwf	___lbdiv@dividend,w
 21024  1E04  1C03               	skipc
 21025  1E05  2E0A               	goto	L13
 21026  1E06  0870               	movf	___lbdiv@divisor,w
 21027  1E07  02F2               	subwf	___lbdiv@dividend,f
 21028  1E08  1474               	bsf	___lbdiv@quotient,0
 21029  1E09  1003               	clrc
 21030  1E0A                     L13:	
 21031  1E0A  0CF0               	rrf	___lbdiv@divisor,f
 21032  1E0B  3001               	movlw	1
 21033  1E0C  02F3               	subwf	___lbdiv@counter,f
 21034  1E0D  1D03               	btfss	3,2
 21035  1E0E  2E00               	goto	i1l7344
 21036  1E0F                     i1l7354:	
 21037  1E0F  0874               	movf	___lbdiv@quotient,w
 21038  1E10  0008               	return
 21039  1E11                     __end_of___lbdiv:	
 21040  007E                     btemp	set	126	;btemp
 21041  007E                     pic14e$flags	set	126
 21042  007E                     wtemp	set	126
 21043  007E                     wtemp0	set	126
 21044  0080                     wtemp1	set	128
 21045  0082                     wtemp2	set	130
 21046  0084                     wtemp3	set	132
 21047  0086                     wtemp4	set	134
 21048  0088                     wtemp5	set	136
 21049  007F                     wtemp6	set	127
 21050  007E                     ttemp	set	126
 21051  007E                     ttemp0	set	126
 21052  0081                     ttemp1	set	129
 21053  0084                     ttemp2	set	132
 21054  0087                     ttemp3	set	135
 21055  007F                     ttemp4	set	127
 21056  007E                     ltemp	set	126
 21057  007E                     ltemp0	set	126
 21058  0082                     ltemp1	set	130
 21059  0086                     ltemp2	set	134
 21060  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    102
    Data        32
    BSS         264
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     80      80
    BANK1            80      8      80
    BANK2            80      0      79
    BANK3            80      0      78
    BANK4            80      0      69
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    DimmerIntr	PTR struct Dimmer_Interrupt size(1) Largest target is 0
		 -> NULL(NULL[0]), 

    Sw	PTR struct Switch size(1) Largest target is 9
		 -> NULL(NULL[0]), Sw2(BANK3[9]), Sw1(BANK3[9]), 

    LED	PTR struct LED size(1) Largest target is 4
		 -> NULL(NULL[0]), VarErrLED(BANK3[4]), VarLED2(BANK3[4]), VarLED1(BANK3[4]), 

    DimmerLights	PTR struct DimmerLights size(1) Largest target is 8
		 -> NULL(NULL[0]), DimmerLights2(BANK3[8]), DimmerLights1(BANK2[8]), 

    product	PTR struct Product size(1) Largest target is 32
		 -> NULL(NULL[0]), _product(BANK4[32]), 

    DelayOff	PTR struct DelayOff size(1) Largest target is 5
		 -> NULL(NULL[0]), DlySw2(BANK3[5]), DlySw1(BANK3[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _TMR1_ISR->_DimmerLights_TMR_1
    _TMR1_ISR->_DimmerLights_TMR_2
    _IOC_ISR->_DimmerLights_IOC_1
    _IOC_ISR->_DimmerLights_IOC_2
    _DimmerLights_IOC_2->_Division
    _DimmerLights_IOC_1->_Division
    _Division->___lbdiv

Critical Paths under _main in BANK0

    _my_MainTimer->_setBuz
    _getTemp_AD->_getAD
    _getLoad_AD->_getAD
    _Temp_Main->_setTemp_Main
    _setTemp_Main->_setProductData
    _Switch_Main->_setSw_Main
    _setSw_Main->_setDimmerLights_SwOn
    _setDimmerLights_DimmingOn->_DimmerLights_SelectPointer
    _Switch_Initialization->_setSw_Initialization
    _setSw_Initialization->_setLED
    _setLog_Code->_setProductData
    _setControl_Lights_Table->_setRFSW_Control
    _setRFSW_Control->_setDelayOff_GO
    _setRFSW_AdjControl->_setDimmerIntr_MaxmumValue
    _setRFSW_AdjControl->_setProductData
    _setDimmerLights_DimmingRun->_DimmerLights_SelectPointer
    _RF_RxDisable->_CC2500_WriteCommand
    _CC2500_TxData->_CC2500_WriteCommand
    _CC2500_RxData->_CC2500_ReadStatus
    _CC2500_RxData->_CC2500_WriteCommand
    _CC2500_ReadStatus->_CC2500_ReadByte
    _CC2500_ReadStatus->_CC2500_WriteByte
    _CC2500_PowerOnInitial->_CC2500_InitSetREG
    _CC2500_SIDLEMode->_CC2500_WriteCommand
    _CC2500_PowerRST->_DelayTime_1us
    _CC2500_InitSetREG->_CC2500_WriteREG
    _CC2500_InitPATable->_CC2500_WriteREG
    _CC2500_WriteREG->_CC2500_WriteByte
    _CC2500_FrequencyCabr->_DelayTime_1us
    _CC2500_ClearTXFIFO->_CC2500_WriteCommand
    _CC2500_ClearRXFIFO->_CC2500_WriteCommand
    _CC2500_WriteCommand->_CC2500_WriteByte
    _RF_Initialization->_setRF_Initialization
    _Mcu_Initialization->_WDT_Set
    _Load_Main->___lwdiv
    _Load_Initialization->_setLoad_AH_AL_Restore
    _LED_Main->_setLED_Main
    _setLED_Main->_LedPointSelect
    _LED_Initialization->_setLED_Initialization
    _setLED_Initialization->_setLED
    _Flash_Memory_Main->_Flash_Memory_Modify
    _Flash_Memory_Modify->_Flash_Memory_Read
    _Flash_Memory_Initialization->_Flash_Memory_Read
    _Exception_Main->_setBuz
    _setDimmerLights_Main->_setDimmerLights_OnOff
    _setDimmerLights_OnOff->_setDelayOff_GO
    _setLED->_LedPointSelect
    _setDimmerIntr_DimmingValue->_getDimmerLights_PercentToValue
    _setDelayOff_GO->_setProductData
    _getDelayOff_GO->_DelayOffPointSelect
    _setDimmerLights_Dimming->_setRF_DimmerLights
    _setRF_DimmerLights->_setProductData
    _setDimmerIntr_MaxmumValue->_getDimmerLights_PercentToValue
    _getDimmerLights_Allow_Condition->_getLoad_OK
    _DimmerLights_Initialization->_DimmerIntr_Initialization
    _DimmerIntr_Initialization->_getDimmerLights_PercentToValue
    _DimmerIntr_Initialization->_getDimmerLights_ValueToPercent
    _getDimmerLights_ValueToPercent->___fttol
    _getDimmerLights_PercentToValue->___fttol
    ___fttol->___ftadd
    ___ftneg->___ftdiv
    ___ftneg->___ftmul
    ___ftmul->___awtoft
    ___ftdiv->___awtoft
    ___ftadd->___ftneg
    ___awtoft->___ftpack
    _DelayOff_Main->_DlyOff_Main
    _DlyOff_Main->_setProductData
    _setProductData->_getDimmerLights_ValueToPercent
    _setDimmerLights_SwOn->_setBuz
    _setBuz->___awdiv
    _setDimmerLights_SwOff->_DimmerLights_SelectPointer
    _getDimmerLights_Status->_DimmerLights_SelectPointer
    _DelayOff_Initialization->_DlyOff_Initialization
    _DlyOff_Initialization->_DelayOffPointSelect

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _RF_Main->_setRF_Main
    _setRF_Main->_getRxData
    _DimmerLights_Main->_setDimmerLights_Main
    _setDimmerLights_Main->_setDimmerLights_OnOff

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     0      4  148409
                                              4 BANK1      4     0      4
              _Buzzer_Initialization
                        _Buzzer_Main
              _CC2500_PowerOnInitial
            _DelayOff_Initialization
                      _DelayOff_Main
        _DimmerLights_Initialization
                  _DimmerLights_Main
                     _Exception_Main
        _Flash_Memory_Initialization
                  _Flash_Memory_Main
                 _LED_Initialization
                           _LED_Main
                _Load_Initialization
                          _Load_Main
                 _Mcu_Initialization
                  _RF_Initialization
                            _RF_Main
              _Switch_Initialization
                        _Switch_Main
                _Temp_Initialization
                          _Temp_Main
                           _WDT_Main
                         _getLoad_AD
                         _getTemp_AD
              _myMain_Initialization
                       _my_MainTimer
 ---------------------------------------------------------------------------------
 (1) _my_MainTimer                                         1     1      0    1434
                                             13 BANK0      1     1      0
                             _setBuz
 ---------------------------------------------------------------------------------
 (1) _myMain_Initialization                                1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _getTemp_AD                                           4     4      0     424
                                              4 BANK0      4     4      0
                              _getAD
 ---------------------------------------------------------------------------------
 (1) _getLoad_AD                                           8     8      0     674
                                              4 BANK0      8     8      0
                              _getAD
 ---------------------------------------------------------------------------------
 (2) _getAD                                                4     1      3     311
                                              0 BANK0      4     1      3
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (1) _WDT_Main                                             1     1      0       0
                                              0 BANK0      1     1      0
                       _WDT_Clearing
 ---------------------------------------------------------------------------------
 (2) _WDT_Clearing                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Temp_Main                                            0     0      0    4517
                       _setTemp_Main
 ---------------------------------------------------------------------------------
 (2) _setTemp_Main                                         9     9      0    4517
                                             69 BANK0      9     9      0
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
                     _setProductData
 ---------------------------------------------------------------------------------
 (1) _Temp_Initialization                                  0     0      0       0
             _setTemp_Initialization
 ---------------------------------------------------------------------------------
 (2) _setTemp_Initialization                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Main                                          0     0      0    3659
                         _TouchPower
                         _setSw_Main
 ---------------------------------------------------------------------------------
 (2) _setSw_Main                                           3     3      0    3659
                                             18 BANK0      3     3      0
                      _SwPointSelect
           _getMain_All_Error_Status
                    _getSw_KeyStatus
                             _setBuz
          _setDimmerLights_DimmingOn
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                        _setRF_Learn
 ---------------------------------------------------------------------------------
 (3) _setRF_Learn                                          2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_DimmingOn                            1     1      0      66
                                              2 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getSw_KeyStatus                                      5     5      0     117
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 (3) _SwPointSelect                                        2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _TouchPower                                           0     0      0       0
                    _Timeout_Counter
                 _set_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _set_TimeoutCleared                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timeout_Counter                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Switch_Initialization                                0     0      0     930
               _setSw_Initialization
 ---------------------------------------------------------------------------------
 (2) _setSw_Initialization                                 1     1      0     930
                                              4 BANK0      1     1      0
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _RF_Main                                              0     0      0   44487
                         _setRF_Main
 ---------------------------------------------------------------------------------
 (2) _setRF_Main                                           2     2      0   44487
                                              2 BANK1      2     2      0
              _CC2500_PowerOnInitial
                      _CC2500_RxData
                      _CC2500_TxData
                _CC2500_WriteCommand
                       _RF_RxDisable
                            ___lwdiv
                          _getBuz_GO
                    _getRF_KeyStatus
                          _getRxData
 ---------------------------------------------------------------------------------
 (3) _getRxData                                            2     2      0   40091
                                              0 BANK1      2     2      0
           _getMain_All_Error_Status
            _setControl_Lights_Table
                        _setLog_Code
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setLog_Code                                          1     1      0    4192
                                             69 BANK0      1     1      0
                             _setBuz
                 _setMemory_LoopSave
                   _setMemory_Modify
                     _setProductData
 ---------------------------------------------------------------------------------
 (5) _setMemory_LoopSave                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _setControl_Lights_Table                              0     0      0   35715
             _getDimmerLights_Status
           _getMain_All_LightsStatus
                      _setCmd_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
                 _setRFSW_AdjControl
                    _setRFSW_Control
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_Control                                      3     3      0   10218
                                             77 BANK0      3     3      0
             _getDimmerLights_Status
                             _setBuz
                     _setDelayOff_GO
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (5) _setRFSW_AdjControl                                   4     4      0   20720
                                             69 BANK0      4     4      0
     _getDimmerLights_PercentToValue
             _getDimmerLights_Status
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
         _setDimmerLights_DimmingRun
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                   _setMemory_Modify
                     _setProductData
                          _setTxData
 ---------------------------------------------------------------------------------
 (6) _setDimmerLights_DimmingRun                           3     2      1     177
                                              2 BANK0      3     2      1
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (3) _getRF_KeyStatus                                      3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getBuz_GO                                            6     4      2      23
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _RF_RxDisable                                         0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (3) _CC2500_TxData                                        2     2      0     235
                                              4 BANK0      2     2      0
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (3) _CC2500_RxData                                        2     2      0     470
                                              4 BANK0      2     2      0
                    _CC2500_ReadByte
                  _CC2500_ReadStatus
                   _CC2500_WriteByte
                _CC2500_WriteCommand
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_ReadStatus                                    2     2      0     167
                                              2 BANK0      2     2      0
                    _CC2500_ReadByte
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _CC2500_ReadByte                                      2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _CC2500_PowerOnInitial                                0     0      0    2367
                 _CC2500_ClearRXFIFO
                 _CC2500_ClearTXFIFO
               _CC2500_FrequencyCabr
                 _CC2500_InitPATable
                  _CC2500_InitSetREG
                    _CC2500_PowerRST
                   _CC2500_SIDLEMode
 ---------------------------------------------------------------------------------
 (4) _CC2500_SIDLEMode                                     0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_PowerRST                                      1     1      0     516
                                              6 BANK0      1     1      0
                   _CC2500_WriteByte
                      _DelayTime_1us
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitSetREG                                    4     4      0     536
                                              5 BANK0      4     4      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (4) _CC2500_InitPATable                                   3     3      0     471
                                              5 BANK0      3     3      0
                    _CC2500_WriteREG
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteREG                                      3     2      1     338
                                              2 BANK0      3     2      1
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (4) _CC2500_FrequencyCabr                                 0     0      0     547
                _CC2500_WriteCommand
                      _DelayTime_1us
 ---------------------------------------------------------------------------------
 (5) _DelayTime_1us                                        6     4      2     448
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearTXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_ClearRXFIFO                                   0     0      0      99
                _CC2500_WriteCommand
 ---------------------------------------------------------------------------------
 (4) _CC2500_WriteCommand                                  2     2      0      99
                                              2 BANK0      2     2      0
                   _CC2500_WriteByte
                 _RF_Timeout_Counter
               _setRF_TimeoutCleared
 ---------------------------------------------------------------------------------
 (5) _setRF_TimeoutCleared                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _RF_Timeout_Counter                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _CC2500_WriteByte                                     2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _RF_Initialization                                    0     0      0       0
               _setRF_Initialization
 ---------------------------------------------------------------------------------
 (2) _setRF_Initialization                                 1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Mcu_Initialization                                   0     0      0       0
                            _ADC_Set
                           _Fosc_Set
                            _IOC_Set
                             _IO_Set
                           _TMR1_Set
                            _WDT_Set
 ---------------------------------------------------------------------------------
 (2) _WDT_Set                                              1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IO_Set                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _IOC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Fosc_Set                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Set                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Load_Main                                           10    10      0    2084
                                              8 BANK0     10    10      0
                            ___lwdiv
                             ___wmul
    _getAll_DimmerIntr_Dimming_Sw_RF
                   _getDimmer_LoadGO
              _getDimmer_Load_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _getMain_Lights_Count
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _getMain_Lights_Count                                 3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_Load_Status                                1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getDimmer_LoadGO                                     1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getAll_DimmerIntr_Dimming_Sw_RF                      4     4      0      95
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     270
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4    1052
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _Load_Initialization                                  0     0      0      90
              _setLoad_AH_AL_Restore
 ---------------------------------------------------------------------------------
 (2) _setLoad_AH_AL_Restore                                2     2      0      90
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _LED_Main                                             0     0      0     154
                        _setLED_Main
 ---------------------------------------------------------------------------------
 (2) _setLED_Main                                          3     3      0     154
                                              2 BANK0      3     3      0
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (1) _LED_Initialization                                   0     0      0    1018
              _setLED_Initialization
 ---------------------------------------------------------------------------------
 (2) _setLED_Initialization                                1     1      0    1018
                                              4 BANK0      1     1      0
                     _LedPointSelect
                             _setLED
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Main                                    3     3      0    1663
                                              6 BANK0      3     3      0
                _Flash_Memory_Modify
                _getAll_Sw_KeyStatus
           _getMain_All_LightsStatus
 ---------------------------------------------------------------------------------
 (2) _getAll_Sw_KeyStatus                                  3     3      0      48
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (2) _Flash_Memory_Modify                                  2     2      0    1520
                                              4 BANK0      2     2      0
               _Flash_Memory_Erasing
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Erasing                                 0     0      0       0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (1) _Flash_Memory_Initialization                          2     2      0    1430
                                              4 BANK0      2     2      0
                  _Flash_Memory_Read
                 _Flash_Memory_Write
                     _setMemory_Data
 ---------------------------------------------------------------------------------
 (3) _setMemory_Data                                       3     2      1    1290
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Write                                   2     2      0      91
                                              0 BANK0      2     2      0
                _Flash_Memory_Unlock
 ---------------------------------------------------------------------------------
 (4) _Flash_Memory_Unlock                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Flash_Memory_Read                                    4     4      0      48
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _Exception_Main                                       9     9      0    3047
                                             13 BANK0      9     9      0
               _getDimmerLights_Line
             _getDimmerLights_Status
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
                             _setBuz
              _setDimmerLights_SwOff
                             _setLED
 ---------------------------------------------------------------------------------
 (2) _getDimmerLights_Line                                 2     2      0      25
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Main                                    0     0      0   48762
                         _getLoad_OK
           _getMain_All_Error_Status
           _getMain_All_LightsStatus
               _setDimmerLights_Main
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Main                                 1     1      0   48531
                                              1 BANK1      1     1      0
         _DimmerLights_SelectPointer
    _getDimmerLights_Allow_Condition
           _getMain_All_LightsStatus
            _setDimmerLights_Dimming
              _setDimmerLights_OnOff
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_OnOff                                4     3      1   27800
                                             77 BANK0      3     2      1
                                              0 BANK1      1     1      0
                      _getCmd_Status
                     _getDelayOff_GO
     _getDimmerLights_PercentToValue
           _getMain_All_LightsStatus
                      _setCmd_Status
                     _setDelayOff_GO
        _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _setDimmerIntr_Dimming_RF
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                             _setLED
                     _setProductData
                 _setRF_DimmerLights
                          _setTxData
 ---------------------------------------------------------------------------------
 (3) _setLED                                               2     1      1     908
                                              2 BANK0      2     1      1
                     _LedPointSelect
 ---------------------------------------------------------------------------------
 (4) _LedPointSelect                                       2     2      0      66
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_Dimming_RF                             3     2      1     266
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_DimmingValue                           3     2      1     177
                                             66 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_ControlStatus                          3     2      1     266
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (6) _setDelayOff_GO                                       8     6      2    3719
                                             69 BANK0      8     6      2
                _DelayOffPointSelect
                             ___bmul
                     _setProductData
 ---------------------------------------------------------------------------------
 (7) ___bmul                                               4     3      1     270
                                              0 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (5) _setCmd_Status                                        3     2      1     222
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (3) _getMain_All_LightsStatus                             1     1      0      47
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _getDelayOff_GO                                       2     2      0      89
                                              2 BANK0      2     2      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (4) _getCmd_Status                                        2     2      0      46
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_Dimming                              4     3      1   20299
                                             74 BANK0      4     3      1
         _getDimmerIntr_DimmingValue
     _getDimmerLights_ValueToPercent
                             _setBuz
           _setDimmerIntr_Dimming_Sw
          _setDimmerIntr_MaxmumValue
               _setDimmerLights_Line
                   _setMemory_Modify
                     _setProductData
                 _setRF_DimmerLights
                 _setRF_TransceiveGO
                          _setTxData
 ---------------------------------------------------------------------------------
 (4) _setTxData                                            2     2      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _setRF_TransceiveGO                                   2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _setRF_DimmerLights                                   5     4      1    3137
                                             69 BANK0      5     4      1
                     _setProductData
 ---------------------------------------------------------------------------------
 (4) _setDimmerLights_Line                                 1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _setDimmerIntr_MaxmumValue                            3     2      1     355
                                             66 BANK0      3     2      1
     _getDimmerLights_PercentToValue (ARG)
 ---------------------------------------------------------------------------------
 (4) _setDimmerIntr_Dimming_Sw                             3     2      1     266
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (4) _getDimmerIntr_DimmingValue                           3     3      0      69
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _getDimmerLights_Allow_Condition                      6     6      0     187
                                              1 BANK0      6     6      0
                         _getLoad_OK
 ---------------------------------------------------------------------------------
 (4) _getLoad_OK                                           1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _getMain_All_Error_Status                             7     7      0     161
                                              0 BANK0      7     7      0
 ---------------------------------------------------------------------------------
 (1) _DimmerLights_Initialization                          0     0      0   26941
          _DimmerIntr_Initialization
     _setDimmerLights_Initialization
 ---------------------------------------------------------------------------------
 (2) _setDimmerLights_Initialization                       1     1      0       0
 ---------------------------------------------------------------------------------
 (2) _DimmerIntr_Initialization                            1     1      0   26941
                                             66 BANK0      1     1      0
     _getDimmerLights_PercentToValue
     _getDimmerLights_ValueToPercent
                   _setMemory_Modify
 ---------------------------------------------------------------------------------
 (5) _setMemory_Modify                                     2     2      0      22
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _getDimmerLights_ValueToPercent                       6     6      0   11771
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_PercentToValue                       6     6      0   15148
                                             60 BANK0      6     6      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
 ---------------------------------------------------------------------------------
 (7) ___fttol                                             14    10      4     430
                                             46 BANK0     14    10      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftneg                                              3     0      3     223
                                             30 BANK0      3     0      3
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___ftmul                                             16    10      6    3377
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftdiv                                             16    10      6    3687
                                             14 BANK0     16    10      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___ftadd                                             13     7      6    4221
                                             33 BANK0     13     7      6
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (7) ___awtoft                                             6     3      3    3142
                                              8 BANK0      6     3      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___ftpack                                             8     3      5    2873
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Main                                        0     0      0    4662
                        _DlyOff_Main
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Main                                          3     3      0    4662
                                             69 BANK0      3     3      0
                _DelayOffPointSelect
             _getDimmerLights_Status
              _setDimmerLights_SwOff
               _setDimmerLights_SwOn
                     _setProductData
 ---------------------------------------------------------------------------------
 (3) _setProductData                                       3     2      1    2714
                                             66 BANK0      3     2      1
     _getDimmerLights_ValueToPercent (ARG)
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOn                                 5     5      0    1639
                                             13 BANK0      5     5      0
         _DimmerLights_SelectPointer
                             _setBuz
 ---------------------------------------------------------------------------------
 (2) _setBuz                                               4     2      2    1434
                                              9 BANK0      4     2      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     478
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (3) _setDimmerLights_SwOff                                1     1      0      66
                                              2 BANK0      1     1      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (6) _getDimmerLights_Status                               2     2      0      89
                                              2 BANK0      2     2      0
         _DimmerLights_SelectPointer
 ---------------------------------------------------------------------------------
 (4) _DimmerLights_SelectPointer                           2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _DelayOff_Initialization                              0     0      0      66
              _DlyOff_Initialization
 ---------------------------------------------------------------------------------
 (2) _DlyOff_Initialization                                1     1      0      66
                                              2 BANK0      1     1      0
                _DelayOffPointSelect
 ---------------------------------------------------------------------------------
 (7) _DelayOffPointSelect                                  2     2      0      44
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Main                                          1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _Buzzer_Initialization                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _ISR                                                  1     1      0     992
                                             12 COMMON     1     1      0
                            _IOC_ISR
                           _TMR1_ISR
 ---------------------------------------------------------------------------------
 (10) _TMR1_ISR                                            0     0      0       0
                 _DimmerLights_TMR_1
                 _DimmerLights_TMR_2
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_2                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_TMR_1                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (10) _IOC_ISR                                             0     0      0     992
                 _DimmerLights_IOC_1
                 _DimmerLights_IOC_2
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_2                                  2     2      0     496
                                             10 COMMON     2     2      0
                           _Division
 ---------------------------------------------------------------------------------
 (11) _DimmerLights_IOC_1                                  2     2      0     496
                                             10 COMMON     2     2      0
                           _Division
 ---------------------------------------------------------------------------------
 (12) _Division                                            5     4      1     496
                                              5 COMMON     5     4      1
                            ___lbdiv
 ---------------------------------------------------------------------------------
 (13) ___lbdiv                                             5     4      1     251
                                              0 COMMON     5     4      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Buzzer_Initialization
   _Buzzer_Main
   _CC2500_PowerOnInitial
     _CC2500_ClearRXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_ClearTXFIFO
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_FrequencyCabr
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _DelayTime_1us
     _CC2500_InitPATable
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_InitSetREG
       _CC2500_WriteREG
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
     _CC2500_PowerRST
       _CC2500_WriteByte
       _DelayTime_1us
       _RF_Timeout_Counter
       _setRF_TimeoutCleared
     _CC2500_SIDLEMode
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
   _DelayOff_Initialization
     _DlyOff_Initialization
       _DelayOffPointSelect
   _DelayOff_Main
     _DlyOff_Main
       _DelayOffPointSelect
       _getDimmerLights_Status
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _DimmerLights_Initialization
     _DimmerIntr_Initialization
       _getDimmerLights_PercentToValue
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _getDimmerLights_ValueToPercent
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___ftpack (ARG)
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftneg
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
       _setMemory_Modify
     _setDimmerLights_Initialization
   _DimmerLights_Main
     _getLoad_OK
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setDimmerLights_Main
       _DimmerLights_SelectPointer
       _getDimmerLights_Allow_Condition
         _getLoad_OK
       _getMain_All_LightsStatus
       _setDimmerLights_Dimming
         _getDimmerIntr_DimmingValue
         _getDimmerLights_ValueToPercent
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _setBuz
           ___awdiv
         _setDimmerIntr_Dimming_Sw
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setMemory_Modify
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setRF_TransceiveGO
         _setTxData
       _setDimmerLights_OnOff
         _getCmd_Status
         _getDelayOff_GO
           _DelayOffPointSelect
         _getDimmerLights_PercentToValue
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
         _getMain_All_LightsStatus
         _setCmd_Status
         _setDelayOff_GO
           _DelayOffPointSelect
           ___bmul
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setDimmerIntr_ControlStatus
         _setDimmerIntr_DimmingValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerIntr_Dimming_RF
         _setDimmerIntr_MaxmumValue
           _getDimmerLights_PercentToValue (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setDimmerLights_Line
         _setLED
           _LedPointSelect
         _setProductData
           _getDimmerLights_ValueToPercent (ARG)
             ___awtoft
               ___ftpack
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___fttol
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
         _setRF_DimmerLights
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Exception_Main
     _getDimmerLights_Line
     _getDimmerLights_Status
       _DimmerLights_SelectPointer
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _setBuz
       ___awdiv
     _setDimmerLights_SwOff
       _DimmerLights_SelectPointer
     _setLED
       _LedPointSelect
   _Flash_Memory_Initialization
     _Flash_Memory_Read
     _Flash_Memory_Write
       _Flash_Memory_Unlock
     _setMemory_Data
   _Flash_Memory_Main
     _Flash_Memory_Modify
       _Flash_Memory_Erasing
         _Flash_Memory_Unlock
       _Flash_Memory_Read
       _Flash_Memory_Write
         _Flash_Memory_Unlock
       _setMemory_Data
     _getAll_Sw_KeyStatus
     _getMain_All_LightsStatus
   _LED_Initialization
     _setLED_Initialization
       _LedPointSelect
       _setLED
         _LedPointSelect
   _LED_Main
     _setLED_Main
       _LedPointSelect
   _Load_Initialization
     _setLoad_AH_AL_Restore
   _Load_Main
     ___lwdiv
     ___wmul
     _getAll_DimmerIntr_Dimming_Sw_RF
     _getDimmer_LoadGO
     _getDimmer_Load_Status
     _getMain_All_Error_Status
     _getMain_All_LightsStatus
     _getMain_Lights_Count
     _setLoad_AH_AL_Restore
   _Mcu_Initialization
     _ADC_Set
     _Fosc_Set
     _IOC_Set
     _IO_Set
     _TMR1_Set
     _WDT_Set
   _RF_Initialization
     _setRF_Initialization
   _RF_Main
     _setRF_Main
       _CC2500_PowerOnInitial
         _CC2500_ClearRXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_ClearTXFIFO
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_FrequencyCabr
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
           _DelayTime_1us
         _CC2500_InitPATable
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_InitSetREG
           _CC2500_WriteREG
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
         _CC2500_PowerRST
           _CC2500_WriteByte
           _DelayTime_1us
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_SIDLEMode
           _CC2500_WriteCommand
             _CC2500_WriteByte
             _RF_Timeout_Counter
             _setRF_TimeoutCleared
       _CC2500_RxData
         _CC2500_ReadByte
         _CC2500_ReadStatus
           _CC2500_ReadByte
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_TxData
         _CC2500_WriteByte
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _CC2500_WriteCommand
         _CC2500_WriteByte
         _RF_Timeout_Counter
         _setRF_TimeoutCleared
       _RF_RxDisable
         _CC2500_WriteCommand
           _CC2500_WriteByte
           _RF_Timeout_Counter
           _setRF_TimeoutCleared
       ___lwdiv
       _getBuz_GO
       _getRF_KeyStatus
       _getRxData
         _getMain_All_Error_Status
         _setControl_Lights_Table
           _getDimmerLights_Status
             _DimmerLights_SelectPointer
           _getMain_All_LightsStatus
           _setCmd_Status
           _setDimmerLights_SwOff
             _DimmerLights_SelectPointer
           _setDimmerLights_SwOn
             _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
           _setRFSW_AdjControl
             _getDimmerLights_PercentToValue
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setDimmerIntr_Dimming_RF
             _setDimmerIntr_MaxmumValue
               _getDimmerLights_PercentToValue (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setDimmerLights_DimmingRun
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setMemory_Modify
             _setProductData
               _getDimmerLights_ValueToPercent (ARG)
                 ___awtoft
                   ___ftpack
                 ___ftadd
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___fttol
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftadd (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
             _setTxData
           _setRFSW_Control
             _getDimmerLights_Status
               _DimmerLights_SelectPointer
             _setBuz
               ___awdiv
             _setDelayOff_GO
               _DelayOffPointSelect
               ___bmul
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setDimmerLights_SwOff
               _DimmerLights_SelectPointer
             _setDimmerLights_SwOn
               _DimmerLights_SelectPointer
               _setBuz
                 ___awdiv
             _setRF_DimmerLights
               _setProductData
                 _getDimmerLights_ValueToPercent (ARG)
                   ___awtoft
                     ___ftpack
                   ___ftadd
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                     ___ftpack (ARG)
                   ___ftdiv
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___fttol
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftadd (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftneg (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftdiv (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                         ___ftmul (ARG)
                           ___awtoft (ARG)
                             ___ftpack
                           ___ftpack (ARG)
                       ___ftpack (ARG)
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftneg (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftdiv (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
                       ___ftmul (ARG)
                         ___awtoft (ARG)
                           ___ftpack
                         ___ftpack (ARG)
             _setTxData
           _setTxData
         _setLog_Code
           _setBuz
             ___awdiv
           _setMemory_LoopSave
           _setMemory_Modify
           _setProductData
             _getDimmerLights_ValueToPercent (ARG)
               ___awtoft
                 ___ftpack
               ___ftadd
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                 ___ftpack (ARG)
               ___ftdiv
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___fttol
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftadd (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftneg (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftdiv (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                     ___ftmul (ARG)
                       ___awtoft (ARG)
                         ___ftpack
                       ___ftpack (ARG)
                   ___ftpack (ARG)
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftneg (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                   ___ftmul (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
         _setTxData
   _Switch_Initialization
     _setSw_Initialization
       _setLED
         _LedPointSelect
   _Switch_Main
     _TouchPower
       _Timeout_Counter
       _set_TimeoutCleared
     _setSw_Main
       _SwPointSelect
       _getMain_All_Error_Status
       _getSw_KeyStatus
       _setBuz
         ___awdiv
       _setDimmerLights_DimmingOn
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOff
         _DimmerLights_SelectPointer
       _setDimmerLights_SwOn
         _DimmerLights_SelectPointer
         _setBuz
           ___awdiv
       _setRF_Learn
   _Temp_Initialization
     _setTemp_Initialization
   _Temp_Main
     _setTemp_Main
       _getMain_All_Error_Status
       _getMain_All_LightsStatus
       _setBuz
         ___awdiv
       _setProductData
         _getDimmerLights_ValueToPercent (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
             ___ftpack (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftneg
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftneg (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
               ___ftpack (ARG)
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftneg (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
   _WDT_Main
     _WDT_Clearing
   _getLoad_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _getTemp_AD
     _getAD
       _Timeout_Counter
       _set_TimeoutCleared
   _myMain_Initialization
   _my_MainTimer
     _setBuz
       ___awdiv

 _ISR (ROOT)
   _IOC_ISR
     _DimmerLights_IOC_1
       _Division
         ___lbdiv
     _DimmerLights_IOC_2
       _Division
         ___lbdiv
   _TMR1_ISR
     _DimmerLights_TMR_1
     _DimmerLights_TMR_2

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       1       1        7.1%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      D       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       1       6        1.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      8      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      4F       9       98.8%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0      4E      11       97.5%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0      45      13       86.3%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0     190      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0     190      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.32 build 58300 
Symbol Table                                                                                   Tue Feb 24 17:09:15 2015

                    __size_of_Switch_Main 000B                     ?_Flash_Memory_Erasing 0070  
                            _WDT_Clearing 0002                     __end_of_setCmd_Status 1C3B  
                          ___bmul@product 0022                 getMain_Lights_Count@count 0020  
                                      l98 143C                                        _RD 0CA8  
                 __end_of_CC2500_WriteREG 1E78                                        _WR 0CA9  
                            ___awdiv@sign 0026                                        _Sw 00D9  
                          setTemp_Main@AD 006C                       ___wmul@multiplicand 0022  
                    _getDimmerLights_Line 1B1D                    __end_of_setDelayOff_GO 0CA8  
                            ___ftadd@exp1 004D                              ___ftadd@exp2 004C  
                __size_of_getRF_KeyStatus 0011                      _setDimmerLights_Main 164F  
                    _setDimmerLights_Line 1CDA                              ___ftadd@sign 004B  
                                     l100 1450                                       l110 12F1  
                                     l112 1301                                       l108 1307  
                                     l109 1303                      _setDimmerLights_SwOn 0800  
                                     l327 1C47                                       l328 1C49  
                                     l371 1EA2                                       l259 1769  
                                     l581 17F9                                       l920 1B26  
                                     l921 1B2E                                       l915 1CE9  
                                     l759 1BAD                                       l859 1DA6  
                                     l886 06B6                                       _GIE 005F  
                                     _CRC 00D3                                       _RA0 0060  
                                     _RB0 0068      __size_of_DimmerLights_Initialization 000B  
                                     _RB1 0069                                       _RA3 0063  
                                     _RC0 0070                                       _RB2 006A  
                                     _RA4 0064                                       _LED 00D7  
                                     _RC1 0071                                       _RB3 006B  
                                     _RC2 0072                                       _RB4 006C  
                                     _RA6 0066                                       _RB5 006D  
                                     _RA7 0067                                       _RC4 0074  
                                     _RC5 0075                                       _RC7 0077  
                                     _RF1 00A0                                       _ISR 0004  
                                     _WDT 0136                                       _Cmd 00D4  
            getDimmerLights_Status@lights 0022                                       _Sw1 01BE  
                                     _Sw2 01C7                ??_setDimmerIntr_Dimming_RF 0021  
              ??_setDimmerIntr_Dimming_Sw 0021           setDimmerIntr_Dimming_RF@command 0020  
                __end_of_CC2500_WriteByte 1C54                     _Buzzer_Initialization 18BB  
                         __end_of_ADC_Set 18FF                                       wreg 0009  
    setDimmerLights_Initialization@lights 0070              getDimmerLights_Status@status 0023  
     __end_of_setDimmerIntr_ControlStatus 1F6F               _setDimmerIntr_ControlStatus 1F40  
                       ??_getSw_KeyStatus 0020                                      ?_ISR 0070  
                            ___ftdiv@cntr 0038                           __end_of_IOC_ISR 1981  
                   _setDimmerLights_OnOff 062B          setDimmerLights_DimmingRun@lights 0024  
                              Load_Main@i 0030                              ___ftdiv@sign 003D  
                                    l1134 1D7B                                      l1135 1D85  
                                    l2215 0CBE                                      l1168 1274  
                                    l2224 0D36                                      l2208 1051  
                                    l2152 0576                                      l2153 05C7  
                                    l1442 1239                                      l1610 0082  
                                    l3019 1D1D                                      l2148 0627  
                                    l1606 01FF                                      l1456 1FC6  
                                    l1616 01DB                                      l1608 008B  
                                    l3209 0428                                      l1617 01D9  
                                    l1609 0087                                      l2193 0A1B  
                                    l1466 0B8D                                      l2178 19F3  
                                    l3180 14F2                           __end_of_IOC_Set 195F  
                                    l2545 1B8B                                      l3186 1509  
                                    l1780 0E8D                                      l2567 0381  
                                    l1791 0E85                                      l2569 024D  
                                    l2914 0555                                      l1786 0E00  
                                    l2923 1C3A                                      l7020 0AAB  
                                    l7004 11B1                            _Load_Main$3687 002A  
                                    l7030 0AFB                                      l7016 0AA6  
                                    l6330 14DE                                      l6322 14C8  
                                    l2882 1FE3                                      l2858 1101  
                                    l2883 1FFE                                      l7204 1FF5  
                                    l6326 14CF                                      l6502 03F4  
                                    l7230 131D                                      l2887 1FFA  
                                    l6424 1BBB                                      l6336 14F7  
                                    l6328 14D9                                      l6520 043A  
                                    l6504 03FE                                      l6440 1A67  
                                    l7320 0D11                                      l6434 1BD2  
                                    l6362 1377                                      l6338 14FF  
                                    l6514 041A                                      l6506 0403  
                                    l7146 1F58                                      l7154 1C00  
                                    l7322 0D15                                      l7314 0CCD  
                                    l7306 0CA9                                      l7330 0D21  
                                    l8210 1DBE                                      l6380 139D  
                                    l6372 137F                                      l6356 136C  
                                    l6524 044C                                      l6516 0424  
                                    l6508 0407                                      l6620 0F1D  
                                    l6604 0EF9                                      l7500 1169  
                                    l7164 1BA3                                      l6444 1A6D  
                                    l7260 134E                                      l7244 132E  
                                    l7252 1336                                      l9004 04E6  
                                    l7324 0D19                                      l7316 0CD4  
                   _setDimmerLights_SwOff 07C6                                      l6374 138B  
                                    l6462 1E3E                                      l6534 0467  
                                    l6550 0D64                                      l7510 117C  
                                    l7174 1F2B                                      l7238 1325  
                                    l9022 0528                                      l9006 04C1  
                                    l7326 0D1D                                      l7318 0CEF  
                                    l8214 1DC3                                      l6384 13A6  
                                    l6544 0D4E                                      l6616 0F15  
                                    l6608 0F01                                      l7280 1A62  
                                    l7264 1352                                      l9024 0503  
                                    l9008 04EE                                      l8208 1DBB  
                                    l6730 0817                                      l6474 03B1  
                                    l7194 1FDE                                      l7274 1A56  
                                    l7530 0672                                      l9026 0530  
                                    l9034 054B                                      l8234 1A2A  
                                    l8314 0E12                                      l6388 13AE  
                                    l6740 082A                                      l6484 03C7  
                                    l6572 0DBE                                      l6564 0DA5  
                                    l6644 0BAE                                      l7196 1FE7  
                                    l7508 1177                                      l7268 1356  
                                    l7532 0689                                      l7540 0696  
                                    l9028 053A                                      l8260 0B86  
                                    l8252 0B2B                                      l8308 0E03  
                                    l8316 0E15                                      l6750 0853  
                                    l6478 03B8                                      l6670 0BF9  
                                    l6662 0BDE                                      l7278 1A5D  
                                    l8246 0B16                                      l9310 1E82  
                                    l8510 02F5                                      l6728 0814  
                                    l6496 03E1                                      l6592 0EBE  
                                    l6672 0C02                                      l6664 0BEC  
                                    l7536 0690                                      l7800 106A  
                                    l9312 1E85                                      l8520 0329  
                                    l6762 07F4                                      l6738 0825  
                                    l6586 0EA8                                      l6674 0C05  
                                    l6818 1BE9                                      l6842 1639  
                                    l6826 1F87                                      l7554 06C6  
                                    l7810 1085                                      l9410 173E  
                                    l7730 09D9                                      l8346 0E5D  
                                    l6748 084E                                      l7572 06F9  
                                    l7900 1677                                      l9260 1C7A  
                                    l6940 1EBE                                      l9340 12A8  
                                    l9316 1E8B                                      l9404 1735  
                                    l8452 1B90                                      l8356 0E72  
                                    l6678 0C13                                      l7486 1150  
                                    l7558 06CD                                      l7902 167E  
                                    l8606 1DA8                                      l7654 1FAE  
                                    l7806 107C                                      l8550 1D17  
                                    l9350 12B8                                      l9430 1772  
                                    l9406 1738                                      l7734 09E2  
                                    l7718 09C1                                      l8470 0237  
                                    l8358 0E74                                      l6784 0C5A  
                                    l7912 16A6                                      l9264 1C80  
                                    l9344 12AE                                      l9424 1750  
                                    l8456 1B96                                      l8570 12DB  
                                    l7498 1166                                      l7578 13CE  
                                    l6794 0C8A                                      l7914 16AD  
                                    l8802 00AE                                      l9258 1C77  
                                    l6938 1EB3                                      l9354 12BE  
                                    l9338 12A5                                      l9282 1D07  
                                    l9442 1785                                      l9434 1778  
                                    l7746 09F7                                      l8730 0A5B  
                                    l8722 0A3C                                      l7844 0880  
                                    l8652 077E                                      l8900 01EE  
                                    l9292 1E5E                                      l9348 12B5  
                                    l9284 1D0D                                      l9460 16CD  
                                    l9436 177C                                      l9428 176F  
                                    l7772 1D5E                     _myMain_Initialization 1B0A  
                                    l7846 088F                                      l6974 1C25  
                                    l6798 0C9E                                      l9294 1E61  
                                    l9462 16D0                                      l9438 177F  
                                    l7758 1C17                                      l7782 1D6A  
                                    l7774 1D60                                      l8486 0280  
                                    l8750 0A8A                                      l8734 0A63  
                                    l9630 1488                                      l7856 08B3  
                                    l6968 1AF5                                      l8840 0172  
                                    l8808 00E0                                      l9552 05D6  
                                    l7784 1D6E                                      l8496 02B5  
                                    l7858 08C2                                      l6978 1C34  
                                    l7874 100A                                      l8834 0163  
                                    l9298 1E67                                      l9482 16E8  
                                    l9466 16D6                                      l7698 1A4C  
                                    l9538 05C2                                      l9634 1493  
                                    l7884 101A                                      l8844 018F  
                                    l9484 1701                                      l9580 0620  
                                    l8924 11EE                                      l8678 1218  
                                    l7798 105E                                      l7886 101F  
                                    l8854 01AB                                      l9566 0608  
                                    l8864 01C1                                      l8848 019B  
                                    l8768 0069                                      _CFGS 0CAE  
                                    l8786 008A                                      l8954 10E1  
                                    l8992 04AF                              __CFG_WDTE$ON 0000  
                                    l8986 049F                                      l8996 04BE  
                                    _FREE 0CAC                                      _LATA 010C  
                                    _LATB 010D                                      _LATC 010E  
                                    u5305 1396                                      u5225 1510  
                                    u5315 139E                                      u5155 14D4  
                                    _PEIE 005E                                      u5175 14ED  
                                    u6250 15F4                                      u5275 1382  
                                    u5195 14FA                                      u5605 0408  
                                    u5295 138C                                      u6255 15F2  
                                    u5545 03E2                                      u5705 0D76  
                                    u5635 041B                                      u5715 0D86  
                                    u6195 0C66                                      u6355 1EA8  
                                    u5725 0DA6                                      u5575 03F5  
                                    u5735 0DB5                                      u5815 0F02  
                                    u5745 0DBF                                      u5825 0F08  
                                    u5905 0BB5                                      u7345 1B7E  
                                    u5855 0F1E                                      u5935 0BDF  
                                    u5865 0F24                                      u5785 0ECA  
                                    u7705 106B                                      u9145 1D1E  
                                    u5795 0EDA                                      u7715 1075  
                                    u9155 1D23                                      u5965 0BFA  
                                    u7725 107D                                      u9185 12D1  
                                    u7685 1061                                      u9445 0A4B  
                                    u9385 1230                                      u8755 0E46  
                                    u9645 00AC                                      u9655 00DE  
                                    u8775 0E64                                      u9495 0A7A  
                                    u9745 01A2                                      u9665 0122  
                                    _LWLO 0CAD                                      u9855 11E2  
                                    u9960 04EC                                      u9965 04CA  
                                    u9990 052E                                      u9895 10F9  
                                    u9995 050C                                      _RSSI 013A  
                                    _WREN 0CAA                                      _WPUB 020D  
      __end_of_setDimmerLights_DimmingRun 1CBE                _setDimmerLights_DimmingRun 1CA3  
                                    _Buz1 0120                                      _Load 013F  
                                    _Temp 00DC                                      _main 1464  
                            ___ftpack@arg 0020                       __end_of_DlyOff_Main 1800  
                         __end_of_RF_Main 18C7                              ___ftpack@exp 0023  
                                    fsr0h 0005                                      fsr1h 0007  
                                    fsr0l 0004                                      indf0 0000  
                                    indf1 0001                                      fsr1l 0006  
                                    btemp 007E                           __end_of_WDT_Set 19D5  
                                    ltemp 007E             __size_of_setRF_Initialization 000B  
                                    start 001F                                      ttemp 007E  
                                    wtemp 007E                __end_of_setRFSW_AdjControl 0B0F  
                       ___bmul@multiplier 0023                              ___ftmul@cntr 003C  
                            ___ftmul@sign 003D              __size_of_Temp_Initialization 0003  
    _getDimmerLights_Allow_Condition$2416 0022      _getDimmerLights_Allow_Condition$2417 0023  
    _getDimmerLights_Allow_Condition$2418 0024                         ?_getDimmer_LoadGO 0070  
                                   ??_ISR 007C                              ___fttol@exp1 005B  
                            ___fttol@lval 0057         setDimmerLights_DimmingRun@command 0022  
 __end_of_getDimmerLights_Allow_Condition 117E  __size_of_getDimmerLights_Allow_Condition 003E  
       ??_getDimmerLights_Allow_Condition 0021          ?_getDimmerLights_Allow_Condition 0070  
         _getDimmerLights_Allow_Condition 1140                    _getDimmerLights_Status 19FD  
                      ??_getDimmer_LoadGO 0020                          __end_of_LED_Main 19BD  
                   ?_getDimmerLights_Line 0070                                _DimmerIntr 0138  
                   ?_setDimmerLights_Main 0070                     ?_setDimmerLights_Line 0070  
                         ?_setDelayOff_GO 0065                     ?_setDimmerLights_SwOn 0070  
                                   ?_main 00EA                           __end_of___awdiv 13B5  
                         __end_of___lbdiv 1E11                           __end_of___ftadd 047F  
                         __end_of___ftdiv 0DE0                           __end_of___ftneg 1940  
                         __end_of___ftmul 0F45                                     u10255 1B54  
                         ___awdiv@divisor 0020                                     _T1CON 0018  
                                   u10705 05F7                           __end_of___fttol 0C1C  
                                   u10675 059A                                     _IOCBF 0396  
                                   _IOCBN 0395                                     _IOCBP 0394  
                                   _IOCIE 005B                                     _IOCIF 0058  
                         __end_of___lwdiv 108C                                     i1l972 0927  
                                   i1l974 091C                                     i1l966 0901  
                                   i1l958 08F0                                     i1l983 0939  
                                   i1l977 0925                                     i1l997 0960  
                         ___awdiv@counter 0025             __size_of_CC2500_FrequencyCabr 000C  
                                   _TMR1H 0017                                     _TMR1L 0016  
                                   _PORTA 000C                                     _PORTB 000D  
                                   _PORTC 000E                              ?_setLED_Main 0070  
                      setRF_Learn@command 0021                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
                 __end_of_Timeout_Counter 1B84                             __CFG_WRT$HALF 0000  
  __end_of_getDimmerLights_ValueToPercent 15EA   __size_of_getDimmerLights_ValueToPercent 0065  
          _getDimmerLights_ValueToPercent 1585                                     _Light 0139  
                        __end_of_TMR1_ISR 1E33                   __size_of_setProductData 000C  
            __size_of_CC2500_WriteCommand 001A                          __end_of_TMR1_Set 19C9  
                                   _getAD 1DB0                             ___awtoft@sign 002D  
                           ___ftpack@sign 0024               __size_of_CC2500_ClearRXFIFO 0004  
                           ??_Buzzer_Main 0020                          __end_of_WDT_Main 1ABE  
             __size_of_CC2500_ClearTXFIFO 0004                       CC2500_RxData@loop_f 0025  
                          __pbitbssCOMMON 03E8                            __CFG_BOREN$OFF 0000  
            __end_of_getMain_Lights_Count 1A9A                        Flash_Memory_Read@i 0021  
                        ?_CC2500_ReadByte 0070                                     ltemp0 007E  
                                   ltemp1 0082                                     ltemp2 0086  
                                   ltemp3 0080            __size_of_setLED_Initialization 0012  
           __end_of_setLED_Initialization 1A88                                     ttemp0 007E  
                                   ttemp1 0081                                     ttemp2 0084  
                                   ttemp3 0087                                     ttemp4 007F  
                            ?_setRF_Learn 0070                                     status 0003  
                                   wtemp0 007E                                     wtemp1 0080  
                                   wtemp2 0082                                     wtemp3 0084  
                                   wtemp4 0086                                     wtemp5 0088  
                                   wtemp6 007F                       _getAll_Sw_KeyStatus 1A1F  
                      _setRF_DimmerLights 15EA                           ___lbdiv@divisor 0070  
             __size_of_Flash_Memory_Write 002F                         ?_CC2500_SIDLEMode 0070  
                         ___lbdiv@counter 0073                __size_of_RF_Initialization 0003  
        __size_of_DelayOff_Initialization 0008                    ?_setLoad_AH_AL_Restore 0070  
                       setTemp_Main@error 0066               __size_of_setRF_TransceiveGO 0013  
                  ??_Flash_Memory_Erasing 0020               ??_setDimmerLights_DimmingOn 0022  
                      ??_CC2500_SIDLEMode 0024                           __initialization 0021  
                        ?_CC2500_PowerRST 0070                         ?_setMemory_Modify 0070  
                        __end_of_Division 19EE                   __size_of_getDelayOff_GO 0011  
                            __end_of_main 14BF                       ?_setRF_DimmerLights 0065  
                        __end_of_Fosc_Set 18D1            getMain_All_LightsStatus@status 0020  
                      ??_setMemory_Modify 0020              setDimmerLights_OnOff@command 006D  
                          _Exception_Main 047F                          ?_CC2500_WriteREG 0022  
                               ??_ADC_Set 0020                      _setSw_Initialization 1927  
                                  ??_main 0070                             ___fttol@sign1 0056  
                    ?_getAll_Sw_KeyStatus 0070                              ?_setLog_Code 0070  
             ?_setDimmerIntr_DimmingValue 0062              ??_DimmerLights_SelectPointer 0020  
                 _setControl_Lights_Table 0CA8                            _setMemory_Data 198D  
                  ?_Buzzer_Initialization 0070                   ??_DlyOff_Initialization 0022  
                              _Receive_OK 0778        setDimmerIntr_ControlStatus@command 0020  
                 _setDimmerLights_Dimming 13B5                                 ??_IOC_ISR 007C  
                               ??_IOC_Set 0020                               _DimmerIntr1 00BB  
                             _DimmerIntr2 00C7                  _getMain_All_LightsStatus 1AE4  
                __size_of_setRFSW_Control 0040                        _RF_Timeout_Counter 1B45  
                 ??_Switch_Initialization 0025                    ?_setDimmerLights_OnOff 006D  
                    ??_setRF_DimmerLights 0066                                    ?_getAD 0020  
                       ??_getRF_KeyStatus 0020                    ?_setDimmerLights_SwOff 0070  
                             _DlyOff_Main 1791                    ?_myMain_Initialization 0070  
                                  _ADCON0 009D                                    _ADCON1 009E  
                               ??_RF_Main 0070                                    _ADRESH 009C  
                                  _ADRESL 009B                          ___awdiv@dividend 0022  
                   _getDimmer_Load_Status 191F                                 ??_WDT_Set 0020  
                        __end_of___awtoft 1E55                                    _ANSELA 018C  
                                  _ANSELB 018D                                    _ANSELC 018E  
                        __end_of___ftpack 1520                  _getMain_All_Error_Status 1FCD  
                                  _IOCBF2 1CB2                                    i1l1011 0997  
                                  i1l1013 098C                                    i1l1005 0971  
                                  i1l1022 09A9                                    i1l1016 0995  
                                  i1l1405 001A                                    i1l8000 091E  
                                  i1l8008 0932                                    i1l8106 09A2  
                                  i1l8036 1139                                    i1l8132 10C0  
                                  i1l8060 0957                                    i1l7342 1DF7  
                                  i1l8054 094F                                    i1l7344 1E00  
                                  i1l8048 0948                                    i1l7354 1E0F  
                                  i1l8098 098E                                    i1l9156 0012  
                                  i1l8624 1E2C                                    i1l8634 197D  
                                  i1l7950 08D8                                    i1l7962 08E7  
                                  i1l7956 08DF                                    _FVRCON 0117  
    getDimmerLights_Allow_Condition@allow 0026                                    _PMADRH 0192  
                                  _PMADRL 0191                                    _PMDATH 0194  
                                  _PMDATL 0193                       ?_RF_Timeout_Counter 0070  
                                  _PMCON2 0196                                    _OSCCON 0099  
                      __size_of_Load_Main 01B2                                    _TMR1IE 0488  
                                  _TMR1IF 0088                                    _IO_Set 1C88  
                                  u928_25 1E27                                    _WDTCON 0097  
                      DelayTime_1us@count 0020                      Exception_Main@i_6923 0032  
          __size_of_CC2500_PowerOnInitial 0015               ??_setDimmerIntr_MaxmumValue 0063  
           __end_of_CC2500_PowerOnInitial 1B6F                                    _Dimmer 012C  
                                  _DlySw1 01D8                                    _DlySw2 01DD  
           __size_of_setRF_TimeoutCleared 0004                     __end_of_getCmd_Status 1A64  
              __end_of_Mcu_Initialization 1AAC                       __end_of_Buzzer_Main 130E  
                                  _Memory 0220                                    _Timer1 0131  
                                  ___bmul 1A64                    __end_of_Exception_Main 0556  
                    Exception_Main@lights 0035                                    ___wmul 1D14  
                               ??___awdiv 0024                                 ??___lbdiv 0071  
                               ??___ftadd 0047              __size_of_DelayOffPointSelect 0017  
                               ??___ftdiv 0034                                 ??___ftneg 0041  
                               ??___ftmul 0034                                 ??___fttol 0052  
            ?_Flash_Memory_Initialization 0070                    ??_getDimmerLights_Line 0020  
                               ??___lwdiv 0024                    ??_setDimmerLights_Main 0070  
                  ??_setDimmerLights_Line 0020                                    _r_data 013E  
                    Exception_Main@status 002E   __end_of_getAll_DimmerIntr_Dimming_Sw_RF 1021  
__size_of_getAll_DimmerIntr_Dimming_Sw_RF 0021         ??_getAll_DimmerIntr_Dimming_Sw_RF 0020  
        ?_getAll_DimmerIntr_Dimming_Sw_RF 0070           _getAll_DimmerIntr_Dimming_Sw_RF 1000  
                                  _s_data 00DB                    ??_setDimmerLights_SwOn 002D  
                                  _setLED 130E                                    _myMain 00AE  
                    ??_RF_Timeout_Counter 0020                    __end_of_setMemory_Data 1999  
                   ?_setSw_Initialization 0070                          ___awdiv@quotient 0027  
                                  _setBuz 140B                        __size_of_Temp_Main 0003  
                    Load_Main@LightsCount 002F               __end_of_Load_Initialization 18C1  
        ??_setDimmerLights_Initialization 0020           ?_setDimmerLights_Initialization 0070  
                   ??_getAll_Sw_KeyStatus 0020          __end_of_setDimmerIntr_Dimming_RF 1F9E  
        __end_of_setDimmerIntr_Dimming_Sw 1F40                     ___ftmul@f3_as_product 0039  
               _setDimmerLights_DimmingOn 1EC3                  Flash_Memory_Read@address 0022  
                        ?_Timeout_Counter 0070                __end_of_setMemory_LoopSave 1B0A  
             getMain_Lights_Count@status1 0021               getMain_Lights_Count@status2 0022  
             __size_of_DimmerLights_IOC_1 003D               __size_of_DimmerLights_IOC_2 003B  
                   __end_of_SwPointSelect 1C22               __size_of_DimmerLights_TMR_1 0070  
             __size_of_DimmerLights_TMR_2 0070              __size_of_Flash_Memory_Modify 0086  
                 __size_of_LedPointSelect 0020           setDimmerIntr_Dimming_Sw@command 0020  
                      setTemp_Main@TempGO 006B                          ___lbdiv@dividend 0072  
                     Flash_Memory_Write@i 0021              __size_of_Flash_Memory_Unlock 0009  
                              _TouchPower 1B84               __size_of_CC2500_InitPATable 001F  
                     CC2500_TxData@loop_e 0025          __end_of_CC2500_registers_address 182F  
                 __end_of__initialization 004F           setDimmerIntr_DimmingValue@value 0062  
         getDimmerIntr_DimmingValue@value 0021                                 ?_LED_Main 0070  
                              ___ftadd@f1 0041                                ___ftadd@f2 0044  
                    _getRF_KeyStatus$5110 0022                             ?_my_MainTimer 0070  
               _setDimmerLights_SwOn$2339 002E                 _setDimmerLights_SwOn$2348 002F  
                              ___ftdiv@f1 0031                                ___ftdiv@f2 002E  
                              ___ftdiv@f3 0039                                ___ftneg@f1 003E  
                              ___awtoft@c 0028                       ___bmul@multiplicand 0020  
            ?_DimmerLights_Initialization 0070                                ___ftmul@f1 002E  
                              ___ftmul@f2 0031                ?_DimmerIntr_Initialization 0070  
                              ___fttol@f1 004E                            __pcstackCOMMON 0070  
                         ?_Exception_Main 0070                              __pidataBANK4 1DD0  
                           __end_of_getAD 1DD0                                 ?_TMR1_ISR 0070  
                               ?_TMR1_Set 0070                    setLoad_AH_AL_Restore@i 0021  
               setMemory_LoopSave@command 0021                        _LED_Initialization 19A5  
                         _getSw_KeyStatus 1D51                 ??_setControl_Lights_Table 0070  
                      getRF_KeyStatus@key 0021                           ?_setMemory_Data 0020  
        ??_getDimmerLights_PercentToValue 005C           ?_getDimmerLights_PercentToValue 0070  
               ??_setDimmerLights_Dimming 006B             ??_Flash_Memory_Initialization 0024  
                        ___lbdiv@quotient 0074                      _getMain_Lights_Count 1A88  
                               ?_WDT_Main 0070                         __end_of_Load_Main 0205  
       setDimmerIntr_ControlStatus@lights 0022                        __size_of_getBuz_GO 0011  
               _setDimmerIntr_MaxmumValue 1BDD                __end_of_set_TimeoutCleared 18E6  
         setDimmerIntr_MaxmumValue@lights 0064                        __size_of_getRxData 0072  
                     ?_LED_Initialization 0070                         ?_CC2500_WriteByte 0070  
                          _setProductData 1981                      __size_of_setLED_Main 0041  
                  ?_getDimmer_Load_Status 0070                                   ??_getAD 0023  
                     _Temp_Initialization 18C7                        ??_CC2500_WriteByte 0020  
                               ?_Division 0075                                __pbssBANK1 00A0  
                              __pbssBANK2 0120                                __pbssBANK3 01A0  
                              __pbssBANK4 0220                                 ?_Fosc_Set 0070  
                             _Buzzer_Main 12C4                         ??_setRFSW_Control 006D  
             ?_setDimmerLights_DimmingRun 0022                         __end_of_Temp_Main 18CD  
                                 ?_IO_Set 0070                            ??_my_MainTimer 002D  
                              ??_LED_Main 0025                           __CFG_VCAPEN$OFF 0000  
                 _DelayOff_Initialization 18FF                             ??_Switch_Main 0035  
                          DelayTime_1us@i 0022                            DelayTime_1us@j 0024  
                    ??_LED_Initialization 0025                              _DimmerLights 00D6  
                       LedPointSelect@led 0021     getAll_DimmerIntr_Dimming_Sw_RF@status 0023  
                  __size_of_DelayOff_Main 0008                      __size_of_setRF_Learn 0014  
                             setBuz@count 002C                   ?_getDimmerLights_Status 0070  
                              __pmaintext 1464                            _getDelayOff_GO 1A0E  
                     _CC2500_WriteCommand 1C6E                      ?_Temp_Initialization 0070  
                                 ?___bmul 0020                          ??_setDelayOff_GO 0067  
       __end_of_DimmerIntr_Initialization 08CB             ??_DimmerLights_Initialization 0063  
                                 ?___wmul 0020                                ??_TMR1_ISR 0071  
                           ?_setTemp_Main 0070                                _getLoad_AD 0A1D  
                              ??_TMR1_Set 0020                                __pintentry 0004  
                  ??_setSw_Initialization 0024                                _getLoad_OK 190F  
                      __size_of_setTxData 00BB                                   ?_setLED 0022  
                  __size_of_DelayTime_1us 0026                     ?_getMain_Lights_Count 0070  
                                 _ADC_Set 18F8                                   ?_setBuz 0029  
                               ?___awtoft 0028                                 ?___ftpack 0020  
                              _getTemp_AD 11BE        __end_of_DimmerLights_SelectPointer 1BDD  
              _DimmerLights_SelectPointer 1BC6                                ??_WDT_Main 0020  
            __end_of_setRF_Initialization 196A                        _setRFSW_AdjControl 0A8F  
                  __end_of_setProductData 198D             setDimmerLights_Dimming@lights 006D  
                                 _IOC_ISR 1975                                   _IOC_Set 1954  
                    __size_of_setLog_Code 0034             setDimmerLights_Dimming@status 006A  
   getDimmerLights_Allow_Condition@lights 0025                      ?_CC2500_WriteCommand 0070  
                       _Flash_Memory_Main 11FE                 __size_of_getDimmer_LoadGO 0008  
                       _Flash_Memory_Read 1C54                    __size_of_CC2500_RxData 006B  
                  __size_of_CC2500_TxData 006C                       ?_setRFSW_AdjControl 0070  
                                 _RF_Data 01A0                                   _RF_Main 18C4  
                      ?_Flash_Memory_Main 0070                        ?_Flash_Memory_Read 0070  
                              ??_Division 0076                                   _WDT_Set 19C9  
         __end_of_setControl_Lights_Table 0D37                           setRF_Main@error 00E9  
                  __size_of_setCmd_Status 0019                                ??_Fosc_Set 0020  
                             ?_TouchPower 0070           __end_of_setDimmerLights_Dimming 140B  
                 ??_setLoad_AH_AL_Restore 0020                       getCmd_Status@number 0020  
            __end_of_CC2500_FrequencyCabr 19E1                           __size_of_IO_Set 001B  
                     setCmd_Status@number 0022         __size_of_setDimmerIntr_Dimming_RF 002F  
       __size_of_setDimmerIntr_Dimming_Sw 002B                         __end_of_getBuz_GO 1A41  
               ?_setDimmerIntr_Dimming_RF 0020                       ??_Flash_Memory_Main 0026  
               ?_setDimmerIntr_Dimming_Sw 0020                       ??_Flash_Memory_Read 0020  
                  __end_of_getDelayOff_GO 1A1F                                   _VarLED1 01E6  
                                 _VarLED2 01EA            __end_of_getDimmerLights_Status 1A0E  
                       __end_of_getRxData 0A1D                   __end_of_getSw_KeyStatus 1D70  
                _CC2500_registers_address 1800                     ??_Temp_Initialization 0020  
                    ??_setRFSW_AdjControl 0065                            ??_setTemp_Main 0065  
                         __size_of___bmul 0012                       setProductData@value 0062  
                                 ___awdiv 1361                                   ___lbdiv 1DF0  
                                 ___ftadd 0389                                   ___ftdiv 0D37  
                                 ___ftneg 1937                           __size_of___wmul 001E  
                                 ___ftmul 0E91                                   ___fttol 0B95  
                     __end_of_Switch_Main 1975                                   ___lwdiv 1055  
              ??_getMain_All_LightsStatus 0020                   ??_Buzzer_Initialization 0020  
                         _getRF_KeyStatus 1A41                                ??___awtoft 002B  
                              ??___ftpack 0025                           __size_of_setLED 0053  
                    setRFSW_AdjControl@sw 0068                           __size_of_setBuz 0059  
                                 __ptext1 10C7                                   __ptext2 1B0A  
                                 __ptext3 11BE                                   __ptext4 0A1D  
                                 __ptext5 1DB0                                   __ptext6 1AAC  
                                 __ptext7 0002                                   __ptext8 18CA  
                                 __ptext9 0DE0                 __size_of_CC2500_SIDLEMode 0004  
                            __size_of_ISR 001B                ??_getMain_All_Error_Status 0020  
                 ??_setDimmerLights_OnOff 006E                           ?_setProductData 0062  
               __end_of_Flash_Memory_Main 123F                 __end_of_Flash_Memory_Read 1C6E  
                 ??_setDimmerLights_SwOff 0022                                _setRF_Main 0556  
                 ??_myMain_Initialization 0020                             _DelayOff_Main 1907  
                       _DimmerLights_Main 1D90            __size_of_DlyOff_Initialization 0006  
                   ??_CC2500_WriteCommand 0022                 __size_of_setMemory_Modify 0013  
           __end_of_DlyOff_Initialization 18EC                __end_of_CC2500_ClearRXFIFO 18D9  
                ??_setTemp_Initialization 0020                __end_of_CC2500_ClearTXFIFO 18DD  
                            ?_DlyOff_Main 0070                        ?_DimmerLights_Main 0070  
                                 _product 00EE                            _LedPointSelect 1D70  
               getAll_Sw_KeyStatus@status 0021                           getTemp_AD@ADRES 0026  
                     _DelayOffPointSelect 1BAF                                   clrloop0 18F3  
          __size_of_Switch_Initialization 0008             __end_of_Switch_Initialization 1937  
                    end_of_initialization 004F                 ??_DelayOff_Initialization 0023  
                       _CC2500_InitSetREG 1EEB                             _DelayTime_1us 1E9D  
                       __end_of_setTxData 1000                __end_of_Flash_Memory_Write 1FCD  
      __size_of_setDimmerLights_DimmingOn 0028                                   init_ram 18EC  
              __end_of_setRF_TransceiveGO 1AE4                        ?_CC2500_InitSetREG 0070  
                     ??_DimmerLights_Main 0070                      Flash_Memory_Read@ret 0023  
                                 initloop 18ED                                _setSw_Main 0205  
                   CC2500_ReadByte@loop_b 0021                    setDimmerLights_SwOn@sw 0031  
                       _CC2500_ReadStatus 1E78                      Flash_Memory_Modify@i 0025  
                   _setLED_Initialization 1A76                           ?_getDelayOff_GO 0070  
                              getBuz_GO@i 0024                        ?_CC2500_ReadStatus 0070  
                __size_of_CC2500_ReadByte 001D                             _CC2500_RxData 16BA  
                           _CC2500_TxData 1725                       ??_CC2500_InitSetREG 0025  
           __size_of_Flash_Memory_Erasing 000C                      ?_DelayOffPointSelect 0070  
                     _Flash_Memory_Modify 0B0F                               ?_getLoad_AD 0070  
                             ?_getLoad_OK 0070                    ??_getMain_Lights_Count 0020  
                            __pstringtext 1800                             _setCmd_Status 1C22  
                     _Flash_Memory_Unlock 1940                       ??_CC2500_ReadStatus 0022  
                 CC2500_InitSetREG@loop_c 0028                               ?_getTemp_AD 0070  
                     __size_of_TouchPower 0015                  setLED_Initialization@led 0024  
                 setTemp_Main@DangerValue 0069                    setSw_Initialization@sw 0024  
               __end_of_DimmerLights_Main 1DB0                        _Mcu_Initialization 1A9A  
                __size_of_CC2500_PowerRST 0044              __end_of_setRF_TimeoutCleared 18D5  
                    __end_of_my_MainTimer 1103                            ?_DelayOff_Main 0070  
                        __CFG_FOSC$INTOSC 0000                    __end_of_LedPointSelect 1D90  
                __size_of_CC2500_WriteREG 0023                  Load_Main@ErrorCountValue 002D  
        setDimmerIntr_DimmingValue@lights 0064          getDimmerIntr_DimmingValue@lights 0022  
               __end_of_CC2500_InitSetREG 1F15                       ?_Mcu_Initialization 0070  
                    ?_Flash_Memory_Modify 0070               __size_of_setRF_DimmerLights 0065  
                          ?_DelayTime_1us 0020                      ?_Flash_Memory_Unlock 0070  
      __size_of_setDimmerIntr_MaxmumValue 0017                 __end_of_CC2500_ReadStatus 1E9D  
                           ?_RF_RxDisable 0070            setDimmerIntr_Dimming_RF@lights 0022  
         getMain_All_Error_Status@command 0025                               ___ftdiv@exp 003C  
       __end_of_setDimmerLights_DimmingOn 1EEB                          ??_Exception_Main 002D  
                          __end_of_IO_Set 1CA3                      _setRF_Initialization 195F  
                      _setMemory_LoopSave 1AF7                               _Switch_Main 196A  
                       __size_of_LED_Main 000C                          ?_getSw_KeyStatus 0070  
                          ?_CC2500_RxData 0070                            ?_CC2500_TxData 0070  
                 __end_of_getRF_KeyStatus 1A52                          ??_setMemory_Data 0021  
                             ___ftmul@exp 0038                     _CC2500_PowerOnInitial 1B5A  
             ??_DimmerIntr_Initialization 0062                      ??_Mcu_Initialization 0021  
             __end_of_getAll_Sw_KeyStatus 1A30                     ??_DelayOffPointSelect 0020  
                           ?_WDT_Clearing 0070                            ?_setCmd_Status 0020  
                     ?_setMemory_LoopSave 0070                            __end_of___bmul 1A76  
     __size_of_getDimmerIntr_DimmingValue 0016                      setRF_DimmerLights@on 0065  
                          __end_of___wmul 1D32                         getSw_KeyStatus@sw 0024  
             __size_of_RF_Timeout_Counter 0015                         __size_of_TMR1_ISR 0022  
           __size_of_getDimmerLights_Line 0014          DimmerLights_SelectPointer@lights 0021  
                       __size_of_TMR1_Set 000C             __size_of_setDimmerLights_Main 006B  
                          __end_of_setLED 1361                             __pbitbssBANK1 0778  
           __size_of_setDimmerLights_Line 001D             __size_of_setDimmerLights_SwOn 005C  
                          __end_of_setBuz 1464                __end_of_DimmerLights_IOC_1 1140  
              __end_of_DimmerLights_IOC_2 10C7                      _CC2500_FrequencyCabr 19D5  
                 ??_getDimmer_Load_Status 0020                __size_of_Flash_Memory_Main 0041  
              __size_of_Flash_Memory_Read 001A                               ?_setRF_Main 0070  
                         _setRFSW_Control 117E                         __size_of_WDT_Main 0012  
              __end_of_DimmerLights_TMR_1 093B                __end_of_DimmerLights_TMR_2 09AB  
                     start_initialization 0021                           ?_LedPointSelect 0070  
                               _Load_Main 0053                               __end_of_ISR 001F  
                  __size_of_getCmd_Status 0012                          _getDimmer_LoadGO 1917  
                   ??_Flash_Memory_Modify 0024              __size_of_Load_Initialization 0003  
            ?_setDimmerIntr_ControlStatus 0020                __end_of_CC2500_InitPATable 1D51  
         __size_of_setTemp_Initialization 0001                      ??_setMemory_LoopSave 0020  
                   ??_Flash_Memory_Unlock 0020                      __end_of_setTemp_Main 0E91  
                          ??_RF_RxDisable 0024    __end_of_getDimmerLights_PercentToValue 1585  
 __size_of_getDimmerLights_PercentToValue 0065            _getDimmerLights_PercentToValue 1520  
                     __size_of_getLoad_AD 0072                              ?_Buzzer_Main 0070  
     getDimmerLights_PercentToValue@value 005E                       __size_of_getLoad_OK 0008  
                      _set_TimeoutCleared 18E1         __end_of_setDimmerIntr_MaxmumValue 1BF4  
                                ??_IO_Set 0020                  __size_of_Timeout_Counter 0015  
                               _VarErrLED 01E2                         __size_of_Division 000D  
                             ?_setSw_Main 0070                       __size_of_getTemp_AD 0040  
                  ?_setLED_Initialization 0070                     ?_setRF_Initialization 0070  
                       __size_of_Fosc_Set 0004                 __size_of_CC2500_WriteByte 0019  
                               _Temp_Main 18CA                       ?_set_TimeoutCleared 0070  
                          ??_WDT_Clearing 0020                                 _Rx_Length 013B  
                   setProductData@address 0064                       Exception_Main@count 002F  
                     Exception_Main@error 0034                                  ??___bmul 0021  
                                ??___wmul 0024                    __size_of_SwPointSelect 0017  
        __end_of_getMain_All_LightsStatus 1AF7                                 _Tx_Length 00DA  
                             __pdataBANK4 0245                                  ??_setLED 0023  
                                ?_ADC_Set 0070                                  ??_setBuz 002B  
                         ??_DelayOff_Main 0068                         ??_CC2500_ReadByte 0020  
             ?_DimmerLights_SelectPointer 0070          __end_of_getMain_All_Error_Status 2000  
                        _CC2500_SIDLEMode 18DD                __size_of_DimmerLights_Main 0020  
                      setMemory_Data@data 0020                     ?_CC2500_FrequencyCabr 0070  
          setDimmerIntr_Dimming_Sw@lights 0022                             ??_setLED_Main 0022  
                       __size_of___awtoft 0022                         __size_of___ftpack 0061  
                                ?_IOC_ISR 0070                                  ?_IOC_Set 0070  
                 Load_Main@Load_RunStatus 002E                                 ___latbits 0003  
                        _setMemory_Modify 1ABE                                ?_Load_Main 0070  
                           __pcstackBANK0 0020                             __pcstackBANK1 00E6  
               setRF_TransceiveGO@command 0021                      ??_set_TimeoutCleared 0020  
               _DimmerIntr_Initialization 085C                           ??_DelayTime_1us 0022  
              __size_of_CC2500_InitSetREG 002A                             DlyOff_Main@sw 0067  
                       ??_CC2500_PowerRST 0026                                  ?_RF_Main 0070  
                                ?_WDT_Set 0070             ??_setDimmerIntr_ControlStatus 0021  
                            ??_TouchPower 0020                      __size_of_DlyOff_Main 006F  
              __size_of_CC2500_ReadStatus 0025            setDimmerIntr_MaxmumValue@value 0062  
             setDimmerLights_DimmingOn@sw 0022                         ??_CC2500_WriteREG 0023  
                           ??_setRF_Learn 0020                             _DimmerLights1 0167  
                           _DimmerLights2 01D0                     CC2500_WriteREG@w_addr 0024  
                   setDelayOff_GO@command 0065            __size_of_setLoad_AH_AL_Restore 001C  
                         ??_CC2500_RxData 0024             __end_of_setLoad_AH_AL_Restore 1CDA  
                setRFSW_AdjControl@status 0067                           ??_CC2500_TxData 0024  
                               __pnvBANK1 00EE                            getRxData@error 00E7  
             __size_of_LED_Initialization 000C                      _setRF_TimeoutCleared 18D1  
                  ?_CC2500_PowerOnInitial 0070                           Exception_Main@i 0030  
                              ?_Temp_Main 0070                       __size_of_setRF_Main 00D5  
                        ___lwdiv@dividend 0022                     DelayOffPointSelect@sw 0021  
                           _getCmd_Status 1A52                                setBuz@time 0029  
                         ??_setCmd_Status 0021                       setDelayOff_GO@value 0066  
                ?_setControl_Lights_Table 0070                          ?_getRF_KeyStatus 0070  
                          Load_Main@error 002C                    _setTemp_Initialization 07FF  
                               _getBuz_GO 1A30                  ?_setDimmerLights_Dimming 006A  
     __end_of_Flash_Memory_Initialization 07C6               _Flash_Memory_Initialization 06FC  
                                ?___awdiv 0020                                 __ptext100 13B5  
                               __ptext101 0F45                                  ?___lbdiv 0070  
                               __ptext110 1FCD                                 __ptext102 1AD1  
                               __ptext111 1949                                 __ptext103 15EA  
                               __ptext120 0D37                                 __ptext112 18BA  
                               __ptext104 1CDA                                 __ptext121 0389  
                               __ptext113 085C                                 __ptext105 1BDD  
                               __ptext130 07C6                                 __ptext122 1E33  
                               __ptext114 1ABE                                 __ptext106 1F15  
                               __ptext131 19FD                                 __ptext123 14BF  
                               __ptext115 1585                                 __ptext107 1B99  
                               __ptext140 093B                                 __ptext132 1BC6  
                               __ptext124 1907                                 __ptext116 1520  
                               __ptext108 1140                                 __ptext141 08CB  
                               __ptext133 18FF                                 __ptext125 1791  
                               __ptext117 0B95                                 __ptext109 190F  
                                ?___ftadd 0041                                 __ptext142 1975  
                               __ptext134 18E6                                 __ptext126 1981  
                               __ptext118 1937                                 __ptext143 108C  
                               __ptext135 1BAF                                 __ptext127 0800  
                               __ptext119 0E91                                 __ptext144 1103  
                               __ptext136 12C4                                 __ptext128 140B  
                               __ptext145 19E1                                 __ptext137 18BB  
                               __ptext129 1361                                 __ptext146 1DF0  
                               __ptext139 1E11                                 _getRxData 09AB  
                                ?___ftdiv 002E                                  ?___ftneg 003E  
                                ?___ftmul 002E                                  ?___fttol 004E  
                   __size_of_my_MainTimer 003C                                  ?___lwdiv 0020  
                 __end_of_setRFSW_Control 11BE                          ??_setProductData 0063  
           __size_of_setSw_Initialization 0008            __size_of_Buzzer_Initialization 0003  
           __end_of_Buzzer_Initialization 18BE                             ??_setLog_Code 0065  
                getDimmerLights_Line@line 0021                        __end_of_TouchPower 1B99  
                     __size_of_setSw_Main 0184              CC2500_ReadStatus@status_addr 0023  
      __end_of_getDimmerIntr_DimmingValue 1BAF              ??_setDimmerIntr_DimmingValue 0063  
              _getDimmerIntr_DimmingValue 1B99                    CC2500_WriteByte@loop_a 0021  
          __size_of_setDimmerLights_OnOff 00D1                                 _r_address 013D  
           __end_of_setDimmerLights_OnOff 06FC            __size_of_setDimmerLights_SwOff 0039  
          __size_of_myMain_Initialization 0013             __end_of_setDimmerLights_SwOff 07FF  
            __end_of_CC2500_patable_vaule 1866             __end_of_myMain_Initialization 1B1D  
                          __size_of_getAD 0020                          ___lwdiv@quotient 0025  
                           _SwPointSelect 1C0B                       __end_of_setLED_Main 1280  
                        ??_getDelayOff_GO 0022                    ??_setRF_Initialization 0020  
             __end_of_Temp_Initialization 18CA                         _CC2500_rfSettings 182F  
                          ___wmul@product 0024                                  _LED_Main 19B1  
                         SwPointSelect@sw 0021                                 clear_ram0 18F2  
                CC2500_InitPATable@loop_d 0027                     ?_setRF_TimeoutCleared 0070  
                            _my_MainTimer 10C7                                 _setTxData 0F45  
     __end_of_DimmerLights_Initialization 1954               _DimmerLights_Initialization 1949  
                  _Flash_Memory_Main$3307 0028                        _CC2500_ClearRXFIFO 18D5  
                          ?_getCmd_Status 0070                        _CC2500_ClearTXFIFO 18D9  
                setRF_DimmerLights@lights 0069                                  _GO_nDONE 04E9  
                     __end_of_setRF_Learn 1B45                         ??_Timeout_Counter 0020  
                              ?_getBuz_GO 0020                  setRF_DimmerLights@status 0068  
    __size_of_setDimmerIntr_ControlStatus 002F               __size_of_setRFSW_AdjControl 0080  
     __size_of_setDimmerIntr_DimmingValue 0017                        _Flash_Memory_Write 1F9E  
                              ?_getRxData 0070                              ??_getLoad_AD 0024  
                                _TMR1_ISR 1E11                    CC2500_InitSetREG@temp1 0026  
                  CC2500_InitSetREG@temp2 0027                              ??_getLoad_OK 0020  
                                _TMR1_Set 19BD                       ?_CC2500_ClearRXFIFO 0070  
                     ?_CC2500_ClearTXFIFO 0070                        _setRF_TransceiveGO 1AD1  
                                _RF_Count 0134                      __end_of_RF_RxDisable 19FD  
                            ??_getTemp_AD 0024               __end_of_CC2500_WriteCommand 1C88  
                  ??_CC2500_FrequencyCabr 0026                                  _WDT_Main 1AAC  
                 DlyOff_Initialization@sw 0022                     getSw_KeyStatus@status 0023  
                        __size_of_ADC_Set 0007                         ___wmul@multiplier 0020  
                     ?_Flash_Memory_Write 0070                     __size_of_setTemp_Main 00B1  
                     ?_setRF_TransceiveGO 0070                   __size_of_setDelayOff_GO 008C  
                                _DelayOff 00D5                              setSw_Main@sw 0034  
                             ??_Load_Main 0028                          __size_of_IOC_ISR 000C  
          getMain_All_Error_Status@status 0026                          __size_of_IOC_Set 000B  
            __end_of_Flash_Memory_Erasing 19A5                            ?_SwPointSelect 0070  
                             getAD@adcon0 0023                               getAD@adcon1 0020  
                          setLED_Main@led 0024                      __end_of_WDT_Clearing 0004  
                     __end_of_setLog_Code 1055                     _DlyOff_Initialization 18E6  
       __size_of_getMain_All_LightsStatus 0013                      ??_CC2500_ClearRXFIFO 0024  
                                _Division 19E1                 ?_getMain_All_LightsStatus 0070  
                    ??_CC2500_ClearTXFIFO 0024                 __end_of_CC2500_rfSettings 185E  
                        __size_of_RF_Main 0003                  _setDimmerIntr_Dimming_RF 1F6F  
             setDimmerLights_OnOff@lights 00E6                  _setDimmerIntr_Dimming_Sw 1F15  
                                _Fosc_Set 18CD                          __size_of_WDT_Set 000C  
                   setRFSW_Control@status 006E                        __end_of_getLoad_AD 0A8F  
                      __end_of_getLoad_OK 1917                     _Switch_Initialization 192F  
       __size_of_getMain_All_Error_Status 0033                      ??_Flash_Memory_Write 0020  
               ?_getMain_All_Error_Status 0070                      __size_of_Buzzer_Main 004A  
                      __end_of_getTemp_AD 11FE                                ?_setTxData 0070  
                            ?_Switch_Main 0070                          _CC2500_WriteByte 1C3B  
                       getLoad_AD@channel 0026       __size_of_DimmerLights_SelectPointer 0017  
                    ??_setRF_TransceiveGO 0020                                  _SwDetect 013C  
                             ??_Temp_Main 006E                          getCmd_Status@cmd 0021  
                        setCmd_Status@cmd 0020                         setRFSW_Control@sw 006F  
           _getMain_All_Error_Status$6910 0021             _getMain_All_Error_Status$6911 0023  
                __end_of_getDimmer_LoadGO 191F                       _Load_Initialization 18BE  
        ??_getDimmerLights_ValueToPercent 005C           ?_getDimmerLights_ValueToPercent 0070  
                               setLED@led 0023                              _setTemp_Main 0DE0  
                        __size_of___awdiv 0054                          __size_of___lbdiv 0021  
                        __size_of___ftadd 00F6                          ?_setRFSW_Control 0070  
                        __size_of___ftdiv 00A9                          __size_of___ftneg 0009  
                        __size_of___ftmul 00B4                          __size_of___fttol 0087  
                        __size_of___lwdiv 0037                  setDimmerLights_SwOn@idle 0030  
                                ___awtoft 1E33                          ??_LedPointSelect 0020  
                                ___ftpack 14BF             __size_of_getMain_Lights_Count 0012  
                  getDimmer_LoadGO@loadgo 0020                         getTemp_AD@channel 0025  
                            ??_setRF_Main 00E8                      CC2500_WriteREG@value 0022  
                             _setLED_Main 123F                __end_of_setRF_DimmerLights 164F  
          __size_of_getDimmer_Load_Status 0008                  ?_DelayOff_Initialization 0070  
                        getDelayOff_GO@go 0023                          getDelayOff_GO@sw 0022  
           __end_of_getDimmer_Load_Status 1927                          setDelayOff_GO@sw 006C  
                         ___lwdiv@divisor 0020                      ?_Load_Initialization 0070  
                         ___lwdiv@counter 0027                                  __ptext10 18C7  
                                __ptext11 07FF                                  __ptext20 1B6F  
                                __ptext12 196A                                  __ptext21 192F  
                                __ptext13 0205                                  __ptext30 0A8F  
                                __ptext22 1927                                  __ptext14 1B31  
                                __ptext31 1CA3                                  __ptext23 18C4  
                                __ptext15 1EC3                                  __ptext40 18DD  
                                __ptext32 1A41                                  __ptext24 0556  
                                __ptext16 1D51                                  __ptext41 1280  
                                __ptext33 1A30                                  __ptext25 09AB  
                                __ptext17 1C0B                                  __ptext50 18D1  
                                __ptext42 1EEB                                  __ptext34 19EE  
                                __ptext26 1021                                  __ptext18 1B84  
                                __ptext51 1B45                                  __ptext43 1D32  
                                __ptext35 1725                                  __ptext27 1AF7  
                                __ptext19 18E1                                  __ptext60 18CD  
                                __ptext52 1C3B                                  __ptext44 1E55  
                                __ptext36 16BA                                  __ptext28 0CA8  
                                __ptext61 18F8                                  __ptext53 18C1  
                                __ptext45 19D5                                  __ptext37 1E78  
                                __ptext29 117E                                  __ptext70 1CBE  
                                __ptext62 0053                                  __ptext54 195F  
                                __ptext46 1E9D                                  __ptext38 1CF7  
                                __ptext71 19B1                                  __ptext63 1A88  
                                __ptext55 1A9A                                  __ptext47 18D9  
                                __ptext39 1B5A                                  __ptext80 198D  
                                __ptext72 123F                                  __ptext64 191F  
                                __ptext56 19C9                                  __ptext48 18D5  
                                __ptext81 1F9E                                  __ptext73 19A5  
                                __ptext65 1917                                  __ptext57 19BD  
                                __ptext49 1C6E                                  __ptext90 1D70  
                                __ptext82 1940                                  __ptext74 1A76  
                                __ptext66 1000                                  __ptext58 1C88  
                                __ptext91 1F6F                                  __ptext83 1C54  
                                __ptext75 11FE                                  __ptext67 1D14  
                                __ptext59 1954                                  __ptext92 1BF4  
                                __ptext84 047F                                  __ptext76 1A1F  
                                __ptext68 1055                                  __ptext93 1F40  
                                __ptext85 1B1D                                  __ptext77 0B0F  
                                __ptext69 18BE                                  __ptext94 0C1C  
                                __ptext86 1D90                                  __ptext78 1999  
                                __ptext95 1A64                                  __ptext87 164F  
                                __ptext79 06FC                                  __ptext96 1C22  
                                __ptext88 062B                                  __ptext97 1AE4  
                                __ptext89 130E                                  __ptext98 1A0E  
                                __ptext99 1A52                                  __product 0245  
                 ??_setLED_Initialization 0024                  ??_getDimmerLights_Status 0022  
            __end_of_getDimmerLights_Line 1B31              __end_of_setDimmerLights_Main 16BA  
            __end_of_setDimmerLights_Line 1CF7                        _DimmerLights_IOC_1 1103  
                      _DimmerLights_IOC_2 108C              __end_of_setDimmerLights_SwOn 085C  
                            ??_setSw_Main 0032                    ??_setRF_TimeoutCleared 0020  
            ??_setDimmerLights_DimmingRun 0023                             setLED@command 0022  
                           __size_of_main 005B                               _setRF_Learn 1B31  
      __size_of_DimmerIntr_Initialization 006F                           ??_getCmd_Status 0020  
                      _DimmerLights_TMR_1 08CB                        _DimmerLights_TMR_2 093B  
                __end_of_CC2500_SIDLEMode 18E1                setDimmerLights_Main@lights 00E7  
             __end_of_DelayOffPointSelect 1BC6                CC2500_WriteCommand@command 0023  
                         _CC2500_ReadByte 1CF7                ?_setDimmerLights_DimmingOn 0070  
                      _CC2500_InitPATable 1D32                  __end_of_setMemory_Modify 1AD1  
    _getAll_DimmerIntr_Dimming_Sw_RF$2293 0021      _getAll_DimmerIntr_Dimming_Sw_RF$2294 0022  
                     ?_DimmerLights_IOC_1 0070                       ?_DimmerLights_IOC_2 0070  
                      __end_of_setRF_Main 062B                               ??_getBuz_GO 0022  
                     ?_DimmerLights_TMR_1 0070                       ?_DimmerLights_TMR_2 0070  
             __size_of_Mcu_Initialization 0012                      _CC2500_patable_vaule 185E  
                             ??_getRxData 00E6                              getLoad_OK@ok 0020  
              __end_of_RF_Timeout_Counter 1B5A               Flash_Memory_Main@key_Status 0027  
                _getAll_Sw_KeyStatus$6170 0022                                  main@argc 00EA  
                                main@argv 00EC                       ?_CC2500_InitPATable 0070  
                    _getSw_KeyStatus$6166 0021                      _getSw_KeyStatus$6167 0022  
     getDimmerLights_ValueToPercent@value 005E                           _CC2500_PowerRST 1280  
                __size_of_getSw_KeyStatus 001F              setDimmerLights_Dimming@value 006C  
      __end_of_setDimmerIntr_DimmingValue 1C0B                _setDimmerIntr_DimmingValue 1BF4  
             __end_of_Flash_Memory_Modify 0B95              __size_of_getAll_Sw_KeyStatus 0011  
                             _setLog_Code 1021               __end_of_Flash_Memory_Unlock 1949  
                         ??_SwPointSelect 0020                           _CC2500_WriteREG 1E55  
                      __end_of_setSw_Main 0389                     ??_Load_Initialization 0022  
                    ??_DimmerLights_IOC_1 007A                      ??_DimmerLights_IOC_2 007A  
         getDimmerLights_PercentToValue@i 005F       __size_of_setDimmerLights_DimmingRun 001B  
                           _Transceive_OK 03E8                    ?_DlyOff_Initialization 0070  
                    ??_DimmerLights_TMR_1 0070                      ??_DimmerLights_TMR_2 0070  
                          Division@result 0079                               pic14e$flags 007E  
            ??_getDimmerIntr_DimmingValue 0020                setDimmerLights_Line@lights 0020  
                 setDimmerLights_SwOff@sw 0022               __size_of_setMemory_LoopSave 0013  
                                intlevel1 0000                      ??_CC2500_InitPATable 0025  
                  ?_Switch_Initialization 0070                           setDelayOff_GO@i 0069  
                         setDelayOff_GO@j 006A                           setDelayOff_GO@k 006B  
                 ??_CC2500_PowerOnInitial 0029                     setTemp_Main@SafeValue 0067  
  __end_of_setDimmerLights_Initialization 18BB   __size_of_setDimmerLights_Initialization 0001  
          _setDimmerLights_Initialization 18BA                ?_setDimmerIntr_MaxmumValue 0062  
                 ?_setTemp_Initialization 0070                               ??_setTxData 0020  
                  CC2500_InitPATable@temp 0026                           getLoad_AD@ADRES 0029  
                   __size_of_RF_RxDisable 000F                         _RF_Initialization 18C1  
                             getLoad_AD@i 002B                               getLoad_AD@j 0028  
                             getLoad_AD@k 0027                      _Flash_Memory_Erasing 1999  
                      ?_RF_Initialization 0070                                _SPI0Buffer 00D8  
                 __size_of_Exception_Main 00D7                             Division@value 0078  
         __end_of_DelayOff_Initialization 1907                     __size_of_WDT_Clearing 0002  
                   __end_of_DelayOff_Main 190F                       ??_RF_Initialization 0021  
                 __size_of_setMemory_Data 000C                            _setDelayOff_GO 0C1C  
             ?_getDimmerIntr_DimmingValue 0070          __size_of_setControl_Lights_Table 008F  
        __size_of_setDimmerLights_Dimming 0056               getDimmer_Load_Status@status 0020  
    __size_of_Flash_Memory_Initialization 00CA               __size_of_set_TimeoutCleared 0005  
                           ??_DlyOff_Main 0065                     setMemory_Data@address 0022  
                   __end_of_DelayTime_1us 1EC3                   __end_of_CC2500_ReadByte 1D14  
            __end_of_setSw_Initialization 192F                           _Timeout_Counter 1B6F  
         __size_of_getDimmerLights_Status 0011           getDimmerLights_ValueToPercent@i 005F  
                            _RF_RxDisable 19EE          Flash_Memory_Initialization@value 0025  
              __end_of_LED_Initialization 19B1            __end_of_setTemp_Initialization 0800  
                             Division@num 0075                   setMemory_Modify@command 0021  
               __end_of_RF_Initialization 18C4                     __end_of_CC2500_RxData 1725  
                   __end_of_CC2500_TxData 1791                     _setLoad_AH_AL_Restore 1CBE  
                 __end_of_CC2500_PowerRST 12C4  
